uint64_t protocol witness for Message.init() in conformance HandGTDescriptorPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static HandGTDescriptorPB._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandGTDescriptorPB()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandGTDescriptorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandGTDescriptorPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandGTDescriptorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for HandGTDescriptorPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in HandGTDescriptorPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandGTDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandGTDescriptorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandGTDescriptorPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGTDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandGTDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB);
  return Message.hash(into:)();
}

double SequenceMetadataPB._StorageClass.init()()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_WORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_DWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 76) = 1;
  *(_DWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 84) = 1;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  *(_WORD *)(v0 + 97) = 514;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_DWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 124) = 1;
  *(_DWORD *)(v0 + 128) = 0;
  *(_BYTE *)(v0 + 132) = 1;
  result = 0.0;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_DWORD *)(v0 + 168) = 0;
  *(_BYTE *)(v0 + 172) = 1;
  *(_DWORD *)(v0 + 176) = 0;
  *(_BYTE *)(v0 + 180) = 1;
  *(_DWORD *)(v0 + 184) = 0;
  *(_BYTE *)(v0 + 188) = 1;
  *(_QWORD *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = 0;
  return result;
}

uint64_t SequenceMetadataPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 40) = 0xE000000000000000;
  *(_QWORD *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 76) = 1;
  *(_DWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 84) = 1;
  *(_QWORD *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_WORD *)(v1 + 97) = 514;
  *(_DWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 124) = 1;
  *(_DWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 168) = 0;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_BYTE *)(v1 + 132) = 1;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_BYTE *)(v1 + 172) = 1;
  *(_DWORD *)(v1 + 176) = 0;
  *(_BYTE *)(v1 + 180) = 1;
  *(_DWORD *)(v1 + 184) = 0;
  *(_BYTE *)(v1 + 188) = 1;
  *(_QWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LOBYTE(v5) = *(_BYTE *)(a1 + 48);
  swift_beginAccess();
  *(_BYTE *)(v1 + 48) = v5;
  swift_beginAccess();
  LOBYTE(v5) = *(_BYTE *)(a1 + 49);
  swift_beginAccess();
  *(_BYTE *)(v1 + 49) = v5;
  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = v8;
  *(_QWORD *)(v1 + 64) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v7) = *(_DWORD *)(a1 + 72);
  LOBYTE(v3) = *(_BYTE *)(a1 + 76);
  swift_beginAccess();
  *(_DWORD *)(v1 + 72) = v7;
  *(_BYTE *)(v1 + 76) = v3;
  swift_beginAccess();
  LODWORD(v7) = *(_DWORD *)(a1 + 80);
  LOBYTE(v3) = *(_BYTE *)(a1 + 84);
  swift_beginAccess();
  *(_DWORD *)(v1 + 80) = v7;
  *(_BYTE *)(v1 + 84) = v3;
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 88);
  LOBYTE(v3) = *(_BYTE *)(a1 + 96);
  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = v9;
  *(_BYTE *)(v1 + 96) = v3;
  swift_beginAccess();
  LOBYTE(v9) = *(_BYTE *)(a1 + 97);
  swift_beginAccess();
  *(_BYTE *)(v1 + 97) = v9;
  swift_beginAccess();
  LOBYTE(v9) = *(_BYTE *)(a1 + 98);
  swift_beginAccess();
  *(_BYTE *)(v1 + 98) = v9;
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  swift_beginAccess();
  *(_QWORD *)(v1 + 104) = v11;
  *(_QWORD *)(v1 + 112) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v10) = *(_DWORD *)(a1 + 120);
  LOBYTE(v3) = *(_BYTE *)(a1 + 124);
  swift_beginAccess();
  *(_DWORD *)(v1 + 120) = v10;
  *(_BYTE *)(v1 + 124) = v3;
  swift_beginAccess();
  LODWORD(v10) = *(_DWORD *)(a1 + 128);
  LOBYTE(v3) = *(_BYTE *)(a1 + 132);
  swift_beginAccess();
  *(_DWORD *)(v1 + 128) = v10;
  *(_BYTE *)(v1 + 132) = v3;
  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 136);
  v12 = *(_QWORD *)(a1 + 144);
  swift_beginAccess();
  *(_QWORD *)(v1 + 136) = v13;
  *(_QWORD *)(v1 + 144) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 152);
  v14 = *(_QWORD *)(a1 + 160);
  swift_beginAccess();
  *(_QWORD *)(v1 + 152) = v15;
  *(_QWORD *)(v1 + 160) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v14) = *(_DWORD *)(a1 + 168);
  LOBYTE(v3) = *(_BYTE *)(a1 + 172);
  swift_beginAccess();
  *(_DWORD *)(v1 + 168) = v14;
  *(_BYTE *)(v1 + 172) = v3;
  swift_beginAccess();
  LODWORD(v14) = *(_DWORD *)(a1 + 176);
  LOBYTE(v3) = *(_BYTE *)(a1 + 180);
  swift_beginAccess();
  *(_DWORD *)(v1 + 176) = v14;
  *(_BYTE *)(v1 + 180) = v3;
  swift_beginAccess();
  LODWORD(v14) = *(_DWORD *)(a1 + 184);
  LOBYTE(v3) = *(_BYTE *)(a1 + 188);
  swift_beginAccess();
  *(_DWORD *)(v1 + 184) = v14;
  *(_BYTE *)(v1 + 188) = v3;
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 192);
  v16 = *(_QWORD *)(a1 + 200);
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v1 + 192) = v17;
  *(_QWORD *)(v1 + 200) = v16;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SequenceMetadataPB._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SequenceMetadataPB._StorageClass.__deallocating_deinit()
{
  SequenceMetadataPB._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SequenceMetadataPB._StorageClass()
{
  return objc_opt_self();
}

_QWORD *initializeBufferWithCopyOfBuffer for HandOIHPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for HandOIHPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for HandOIHPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for HandOIHPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for HandOIHPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandOIHPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D879050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HandOIHPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8790D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for HandOIHPB()
{
  return type metadata completion function for CMTimeProtobuf();
}

uint64_t getEnumTagSinglePayload for FrameLabelPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D879170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FrameLabelPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8791F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FrameLabelPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for FrameLabelPB);
}

uint64_t getEnumTagSinglePayload for HandGTDescriptorPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for HandGTDescriptorPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for HandGTDescriptorPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandGTDescriptorPB);
}

uint64_t getEnumTagSinglePayload for PartialHandMultiCam()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8792C0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PartialHandMultiCam()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D879348(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PartialHandMultiCam()
{
  return type metadata completion function for CMTimeProtobuf();
}

uint64_t getEnumTagSinglePayload for SequenceMetadataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for SequenceMetadataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for SequenceMetadataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for SequenceMetadataPB);
}

uint64_t SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for SequenceMetadataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for SequenceMetadataPB._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = SequenceMetadataPB._StorageClass.init(copying:)(v2);
    swift_release();
  }
  swift_retain();
  closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
  return swift_release();
}

uint64_t closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #9 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 17:
          closure #17 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 18:
          closure #18 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        case 19:
          closure #19 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #19 in closure #1 in SequenceMetadataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 40);
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_BYTE *)(a1 + 48) != 1
    || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    swift_beginAccess();
    if (*(_BYTE *)(a1 + 49) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      result = closure #1 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
      if (!v1)
      {
        closure #2 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #3 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        swift_beginAccess();
        if (*(_QWORD *)(a1 + 88))
        {
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
          dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
        }
        closure #4 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #5 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #6 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #7 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #8 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #9 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #10 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #11 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #12 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        closure #13 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
        return closure #14 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(a1);
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 64))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 76) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 84) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 97) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 98) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 112))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #7 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 124) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 132) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #9 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 144))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #10 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 160))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #11 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 172) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #12 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 180) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #13 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 188) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #14 in closure #1 in SequenceMetadataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 200))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL closure #1 in static SequenceMetadataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  char v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  float v34;
  char v35;
  char v36;
  int v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  float v48;
  char v49;
  char v50;
  int v51;
  char v52;
  char v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  if (v4 != *(_QWORD *)(a2 + 16) || v5 != *(_QWORD *)(a2 + 24))
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v7 & 1) == 0)
      return result;
  }
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  if (v9 != *(_QWORD *)(a2 + 32) || v10 != *(_QWORD *)(a2 + 40))
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v11 & 1) == 0)
      return result;
  }
  swift_beginAccess();
  v12 = *(unsigned __int8 *)(a1 + 48);
  swift_beginAccess();
  if (v12 != *(unsigned __int8 *)(a2 + 48))
    return 0;
  swift_beginAccess();
  v13 = *(unsigned __int8 *)(a1 + 49);
  swift_beginAccess();
  if (v13 != *(unsigned __int8 *)(a2 + 49))
    return 0;
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  swift_beginAccess();
  v16 = *(_QWORD *)(a2 + 64);
  if (v15)
  {
    if (!v16)
      return 0;
    if (v14 != *(_QWORD *)(a2 + 56) || v15 != v16)
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v17 & 1) == 0)
        return result;
    }
  }
  else if (v16)
  {
    return 0;
  }
  swift_beginAccess();
  v18 = *(_DWORD *)(a1 + 72);
  v19 = *(_BYTE *)(a1 + 76);
  swift_beginAccess();
  v20 = *(_BYTE *)(a2 + 76);
  if ((v19 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 76))
      return 0;
  }
  else
  {
    if (v18 != *(_DWORD *)(a2 + 72))
      v20 = 1;
    if ((v20 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v21 = *(_DWORD *)(a1 + 80);
  v22 = *(_BYTE *)(a1 + 84);
  swift_beginAccess();
  v23 = *(_BYTE *)(a2 + 84);
  if ((v22 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 84))
      return 0;
  }
  else
  {
    if (v21 != *(_DWORD *)(a2 + 80))
      v23 = 1;
    if ((v23 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v24 = *(_QWORD *)(a1 + 88);
  v25 = *(unsigned __int8 *)(a1 + 96);
  swift_beginAccess();
  if ((specialized == infix<A>(_:_:)(v24, v25, *(_QWORD *)(a2 + 88), *(unsigned __int8 *)(a2 + 96)) & 1) == 0)
    return 0;
  swift_beginAccess();
  v26 = *(unsigned __int8 *)(a1 + 97);
  swift_beginAccess();
  v27 = *(unsigned __int8 *)(a2 + 97);
  if (v26 == 2)
  {
    if (v27 != 2)
      return 0;
  }
  else if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess();
  v28 = *(unsigned __int8 *)(a1 + 98);
  swift_beginAccess();
  v29 = *(unsigned __int8 *)(a2 + 98);
  if (v28 == 2)
  {
    if (v29 != 2)
      return 0;
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess();
  v30 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(a1 + 112);
  swift_beginAccess();
  v32 = *(_QWORD *)(a2 + 112);
  if (v31)
  {
    if (!v32)
      return 0;
    if (v30 != *(_QWORD *)(a2 + 104) || v31 != v32)
    {
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v33 & 1) == 0)
        return result;
    }
  }
  else if (v32)
  {
    return 0;
  }
  swift_beginAccess();
  v34 = *(float *)(a1 + 120);
  v35 = *(_BYTE *)(a1 + 124);
  swift_beginAccess();
  v36 = *(_BYTE *)(a2 + 124);
  if ((v35 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 124))
      return 0;
  }
  else
  {
    if (v34 != *(float *)(a2 + 120))
      v36 = 1;
    if ((v36 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v37 = *(_DWORD *)(a1 + 128);
  v38 = *(_BYTE *)(a1 + 132);
  swift_beginAccess();
  v39 = *(_BYTE *)(a2 + 132);
  if ((v38 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 132))
      return 0;
  }
  else
  {
    if (v37 != *(_DWORD *)(a2 + 128))
      v39 = 1;
    if ((v39 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v40 = *(_QWORD *)(a1 + 136);
  v41 = *(_QWORD *)(a1 + 144);
  swift_beginAccess();
  v42 = *(_QWORD *)(a2 + 144);
  if (v41)
  {
    if (!v42)
      return 0;
    if (v40 != *(_QWORD *)(a2 + 136) || v41 != v42)
    {
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v43 & 1) == 0)
        return result;
    }
  }
  else if (v42)
  {
    return 0;
  }
  swift_beginAccess();
  v44 = *(_QWORD *)(a1 + 152);
  v45 = *(_QWORD *)(a1 + 160);
  swift_beginAccess();
  v46 = *(_QWORD *)(a2 + 160);
  if (v45)
  {
    if (!v46)
      return 0;
    if (v44 != *(_QWORD *)(a2 + 152) || v45 != v46)
    {
      v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v47 & 1) == 0)
        return result;
    }
  }
  else if (v46)
  {
    return 0;
  }
  swift_beginAccess();
  v48 = *(float *)(a1 + 168);
  v49 = *(_BYTE *)(a1 + 172);
  swift_beginAccess();
  v50 = *(_BYTE *)(a2 + 172);
  if ((v49 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 172))
      return 0;
  }
  else
  {
    if (v48 != *(float *)(a2 + 168))
      v50 = 1;
    if ((v50 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v51 = *(_DWORD *)(a1 + 176);
  v52 = *(_BYTE *)(a1 + 180);
  swift_beginAccess();
  v53 = *(_BYTE *)(a2 + 180);
  if ((v52 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 180))
      return 0;
  }
  else
  {
    if (v51 != *(_DWORD *)(a2 + 176))
      v53 = 1;
    if ((v53 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v54 = *(_DWORD *)(a1 + 184);
  v55 = *(_BYTE *)(a1 + 188);
  swift_beginAccess();
  v56 = *(_BYTE *)(a2 + 188);
  if ((v55 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 188))
      return 0;
  }
  else
  {
    if (v54 != *(_DWORD *)(a2 + 184))
      v56 = 1;
    if ((v56 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v58 = *(_QWORD *)(a1 + 192);
  v57 = *(_QWORD *)(a1 + 200);
  swift_beginAccess();
  v59 = *(_QWORD *)(a2 + 200);
  if (!v57)
    return !v59;
  if (!v59)
    return 0;
  if (v58 == *(_QWORD *)(a2 + 192) && v57 == v59)
    return 1;
  v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v60 & 1) != 0)
    return 1;
  return result;
}

uint64_t protocol witness for Message.init() in conformance SequenceMetadataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static SequenceMetadataPB._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance SequenceMetadataPB()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance SequenceMetadataPB()
{
  return SequenceMetadataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance SequenceMetadataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for SequenceMetadataPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in SequenceMetadataPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance SequenceMetadataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceMetadataPB and conformance SequenceMetadataPB, type metadata accessor for SequenceMetadataPB, (uint64_t)&protocol conformance descriptor for SequenceMetadataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance SequenceMetadataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static SequenceMetadataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SequenceMetadataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceMetadataPB and conformance SequenceMetadataPB, type metadata accessor for SequenceMetadataPB, (uint64_t)&protocol conformance descriptor for SequenceMetadataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SequenceMetadataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceMetadataPB and conformance SequenceMetadataPB, type metadata accessor for SequenceMetadataPB, (uint64_t)&protocol conformance descriptor for SequenceMetadataPB);
  return Message.hash(into:)();
}

uint64_t FrameLabelPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for HandGTDescriptorPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t FrameLabelPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for HandGTDescriptorPB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for FrameLabelPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance FrameLabelPB()
{
  return 0x62614C656D617246;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FrameLabelPB()
{
  return FrameLabelPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FrameLabelPB()
{
  return FrameLabelPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FrameLabelPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FrameLabelPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FrameLabelPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FrameLabelPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FrameLabelPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
  return Message.hash(into:)();
}

uint64_t SequenceLabelPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for SequenceLabelPB(0);
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t SequenceLabelPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in SequenceLabelPB.traverse<A>(visitor:)((uint64_t)v0);
    if (!v1)
    {
      type metadata accessor for SequenceLabelPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in SequenceLabelPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for SequenceLabelPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance SequenceLabelPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char *v5;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 24);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance SequenceLabelPB()
{
  return 0x65636E6575716553;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance SequenceLabelPB()
{
  return SequenceLabelPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance SequenceLabelPB()
{
  return SequenceLabelPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance SequenceLabelPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceLabelPB and conformance SequenceLabelPB, type metadata accessor for SequenceLabelPB, (uint64_t)&protocol conformance descriptor for SequenceLabelPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance SequenceLabelPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static SequenceLabelPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SequenceLabelPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceLabelPB and conformance SequenceLabelPB, type metadata accessor for SequenceLabelPB, (uint64_t)&protocol conformance descriptor for SequenceLabelPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SequenceLabelPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceLabelPB and conformance SequenceLabelPB, type metadata accessor for SequenceLabelPB, (uint64_t)&protocol conformance descriptor for SequenceLabelPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in SequenceLabelPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceLabelPB and conformance SequenceLabelPB, type metadata accessor for SequenceLabelPB, (uint64_t)&protocol conformance descriptor for SequenceLabelPB);
}

uint64_t type metadata accessor for SequenceLabelPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for SequenceLabelPB);
}

uint64_t base witness table accessor for Message in SequenceLabelPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceLabelPB and conformance SequenceLabelPB, type metadata accessor for SequenceLabelPB, (uint64_t)&protocol conformance descriptor for SequenceLabelPB);
}

uint64_t base witness table accessor for Hashable in SequenceLabelPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceLabelPB and conformance SequenceLabelPB, type metadata accessor for SequenceLabelPB, (uint64_t)&protocol conformance descriptor for SequenceLabelPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in SequenceLabelPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceLabelPB and conformance SequenceLabelPB, type metadata accessor for SequenceLabelPB, (uint64_t)&protocol conformance descriptor for SequenceLabelPB);
}

uint64_t base witness table accessor for Equatable in FrameLabelPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
}

uint64_t base witness table accessor for Message in FrameLabelPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
}

uint64_t base witness table accessor for Hashable in FrameLabelPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
}

uint64_t base witness table accessor for Equatable in SequenceMetadataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceMetadataPB and conformance SequenceMetadataPB, type metadata accessor for SequenceMetadataPB, (uint64_t)&protocol conformance descriptor for SequenceMetadataPB);
}

uint64_t base witness table accessor for Message in SequenceMetadataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceMetadataPB and conformance SequenceMetadataPB, type metadata accessor for SequenceMetadataPB, (uint64_t)&protocol conformance descriptor for SequenceMetadataPB);
}

uint64_t base witness table accessor for Hashable in SequenceMetadataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceMetadataPB and conformance SequenceMetadataPB, type metadata accessor for SequenceMetadataPB, (uint64_t)&protocol conformance descriptor for SequenceMetadataPB);
}

uint64_t base witness table accessor for Equatable in HandGTDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB);
}

uint64_t base witness table accessor for Message in HandGTDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB);
}

uint64_t base witness table accessor for Hashable in HandGTDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandGTDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandGTDescriptorPB and conformance HandGTDescriptorPB, type metadata accessor for HandGTDescriptorPB, (uint64_t)&protocol conformance descriptor for HandGTDescriptorPB);
}

uint64_t base witness table accessor for Equatable in PartialHandMultiCam()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
}

uint64_t base witness table accessor for Message in PartialHandMultiCam()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
}

uint64_t base witness table accessor for Hashable in PartialHandMultiCam()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PartialHandMultiCam()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
}

uint64_t base witness table accessor for Equatable in PartialHand()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand);
}

uint64_t type metadata accessor for PartialHand(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PartialHand);
}

uint64_t base witness table accessor for Message in PartialHand()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand);
}

uint64_t base witness table accessor for Hashable in PartialHand()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PartialHand()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand);
}

uint64_t base witness table accessor for Equatable in HandOIHPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB, type metadata accessor for HandOIHPB, (uint64_t)&protocol conformance descriptor for HandOIHPB);
}

uint64_t base witness table accessor for Message in HandOIHPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB, type metadata accessor for HandOIHPB, (uint64_t)&protocol conformance descriptor for HandOIHPB);
}

uint64_t base witness table accessor for Hashable in HandOIHPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB, type metadata accessor for HandOIHPB, (uint64_t)&protocol conformance descriptor for HandOIHPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandOIHPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB, type metadata accessor for HandOIHPB, (uint64_t)&protocol conformance descriptor for HandOIHPB);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PartialHandCategories()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PartialHandCategories] and conformance [A], &demangling cache variable for type metadata for [PartialHandCategories]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in UnsureLabel()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [UnsureLabel] and conformance [A], &demangling cache variable for type metadata for [UnsureLabel]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FrameLabelPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in SequenceMetadataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceMetadataPB and conformance SequenceMetadataPB, type metadata accessor for SequenceMetadataPB, (uint64_t)&protocol conformance descriptor for SequenceMetadataPB);
}

uint64_t specialized static PartialHandMultiCam.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    v13 = type metadata accessor for PartialHandMultiCam(0);
    v14 = (char *)a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

unint64_t lazy protocol witness table accessor for type UnsureLabel and conformance UnsureLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel;
  if (!lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for UnsureLabel, &type metadata for UnsureLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel;
  if (!lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for UnsureLabel, &type metadata for UnsureLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel;
  if (!lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for UnsureLabel, &type metadata for UnsureLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel;
  if (!lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for UnsureLabel, &type metadata for UnsureLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsureLabel and conformance UnsureLabel);
  }
  return result;
}

uint64_t specialized static SequenceMetadataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *(int *)(type metadata accessor for SequenceMetadataPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15 || closure #1 in static SequenceMetadataPB.== infix(_:_:)(v14, v15))
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v12, a1, v4);
    v16(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static HandGTDescriptorPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for HandGTDescriptorPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static HandGTDescriptorPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        (v16 & 1) != 0))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static SequenceLabelPB.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v26 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v15 = type metadata accessor for SequenceLabelPB(0);
    v16 = v15;
    v17 = *(int *)(v15 + 24);
    v18 = (float *)((char *)a1 + v17);
    v19 = *((_BYTE *)a1 + v17 + 4);
    v20 = (float *)&a2[v17];
    v21 = a2[v17 + 4];
    if ((v19 & 1) != 0)
    {
      if (!v21)
      {
LABEL_8:
        v14 = 0;
        return v14 & 1;
      }
    }
    else
    {
      if (*v18 != *v20)
        LOBYTE(v21) = 1;
      if ((v21 & 1) != 0)
        goto LABEL_8;
    }
    v22 = (char *)a1 + *(int *)(v15 + 20);
    v23 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v23(v12, v22, v4);
    v23(v8, &a2[*(int *)(v16 + 20)], v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v12, v4);
  }
  return v14 & 1;
}

uint64_t specialized static HandOIHPB.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 == v13 && (specialized static Dictionary<>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0)
  {
    v14 = type metadata accessor for HandOIHPB(0);
    v15 = (char *)a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, (char *)a2 + *(int *)(v14 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

unint64_t lazy protocol witness table accessor for type PartialHandCategories and conformance PartialHandCategories()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories;
  if (!lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PartialHandCategories, &type metadata for PartialHandCategories);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories;
  if (!lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PartialHandCategories, &type metadata for PartialHandCategories);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories;
  if (!lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PartialHandCategories, &type metadata for PartialHandCategories);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories;
  if (!lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PartialHandCategories, &type metadata for PartialHandCategories);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialHandCategories and conformance PartialHandCategories);
  }
  return result;
}

uint64_t specialized static FrameLabelPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0)
  {
    v13 = type metadata accessor for FrameLabelPB(0);
    v14 = a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PartialHand.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 != v13)
    goto LABEL_8;
  v14 = a2[2];
  if (*((_BYTE *)a2 + 24) == 1)
    __asm { BR              X11 }
  if (a1[2] == v14)
  {
    v15 = type metadata accessor for PartialHand(0);
    v16 = (char *)a1 + *(int *)(v15 + 24);
    v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v17(v12, v16, v4);
    v17(v8, (char *)a2 + *(int *)(v15 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
LABEL_8:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized HandGTDescriptorPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v64 = (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandOIHPB?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v63 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v62 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v57 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  v20 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
  v21 = type metadata accessor for Coordinate3DPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
  v23 = type metadata accessor for HandPosePB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v55 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
  *v55 = 0;
  v56 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown);
  *v56 = 2;
  v24 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
  v58 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
  v25 = type metadata accessor for PoseSpecPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih;
  v59 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih;
  v27 = type metadata accessor for HandOIHPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
  v60 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
  v29 = type metadata accessor for PartialHandMultiCam(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = v1
      + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handsOihCategory;
  *(_QWORD *)v30 = 0;
  *(_WORD *)(v30 + 8) = 256;
  v31 = v1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__intentScore;
  v61 = v31;
  *(_DWORD *)v31 = 0;
  *(_BYTE *)(v31 + 4) = 1;
  swift_beginAccess();
  v32 = *(_DWORD *)(a1 + 16);
  v33 = *(_BYTE *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v32;
  *(_BYTE *)(v1 + 20) = v33;
  v34 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v34, (uint64_t)v19, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v19, v20, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v35 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
  swift_beginAccess();
  v36 = v57;
  outlined init with copy of (Int32, Matrix2dPB)(v35, v57, &demangling cache variable for type metadata for HandPosePB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v36, v22, &demangling cache variable for type metadata for HandPosePB?);
  swift_endAccess();
  v37 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
  swift_beginAccess();
  LOBYTE(v37) = *v37;
  v38 = v55;
  swift_beginAccess();
  *v38 = (_BYTE)v37;
  v39 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown);
  swift_beginAccess();
  LOBYTE(v39) = *v39;
  v40 = v56;
  swift_beginAccess();
  *v40 = (_BYTE)v39;
  v41 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
  swift_beginAccess();
  v42 = v62;
  outlined init with copy of (Int32, Matrix2dPB)(v41, v62, &demangling cache variable for type metadata for PoseSpecPB?);
  v43 = v58;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v42, v43, &demangling cache variable for type metadata for PoseSpecPB?);
  swift_endAccess();
  v44 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih;
  swift_beginAccess();
  v45 = v63;
  outlined init with copy of (Int32, Matrix2dPB)(v44, v63, &demangling cache variable for type metadata for HandOIHPB?);
  v46 = v59;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v45, v46, &demangling cache variable for type metadata for HandOIHPB?);
  swift_endAccess();
  v47 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
  swift_beginAccess();
  v48 = v64;
  outlined init with copy of (Int32, Matrix2dPB)(v47, v64, &demangling cache variable for type metadata for PartialHandMultiCam?);
  v49 = v60;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v48, v49, &demangling cache variable for type metadata for PartialHandMultiCam?);
  swift_endAccess();
  v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handsOihCategory);
  swift_beginAccess();
  v51 = *v50;
  LOBYTE(v49) = *((_BYTE *)v50 + 8);
  LOBYTE(v50) = *((_BYTE *)v50 + 9);
  swift_beginAccess();
  *(_QWORD *)v30 = v51;
  *(_BYTE *)(v30 + 8) = v49;
  *(_BYTE *)(v30 + 9) = (_BYTE)v50;
  v52 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__intentScore;
  swift_beginAccess();
  LODWORD(a1) = *(_DWORD *)v52;
  LOBYTE(v52) = *(_BYTE *)(v52 + 4);
  v53 = v61;
  swift_beginAccess();
  *(_DWORD *)v53 = a1;
  *(_BYTE *)(v53 + 4) = v52;
  return v2;
}

ValueMetadata *type metadata accessor for PartialHandCategories()
{
  return &type metadata for PartialHandCategories;
}

uint64_t *initializeBufferWithCopyOfBuffer for SequenceLabelPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    *(_DWORD *)v14 = *(_DWORD *)v15;
    v14[4] = v15[4];
  }
  return v4;
}

uint64_t destroy for SequenceLabelPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for SequenceLabelPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  return a1;
}

_QWORD *assignWithCopy for SequenceLabelPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[4];
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v13;
  return a1;
}

_OWORD *initializeWithTake for SequenceLabelPB(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v12[4];
  return a1;
}

_QWORD *assignWithTake for SequenceLabelPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for SequenceLabelPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D87D6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SequenceLabelPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D87D770(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for SequenceLabelPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsureLabel()
{
  return &type metadata for UnsureLabel;
}

_QWORD *initializeBufferWithCopyOfBuffer for PartialHand(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for PartialHand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PartialHand(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = (uint64_t)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PartialHand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PartialHand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialHand()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D87DAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PartialHand()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D87DB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for PartialHand()
{
  return type metadata completion function for CMTimeProtobuf();
}

uint64_t specialized ValueStatistics.aggregate(with:)(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[16];
  double v21;
  char v22;

  *(double *)v1 = *(double *)result + *(double *)v1;
  v2 = *(_DWORD *)(result + 8);
  v3 = *(_DWORD *)(v1 + 8);
  v4 = __CFADD__(v3, v2);
  v5 = v3 + v2;
  if (!v4)
  {
    v6 = result;
    *(_DWORD *)(v1 + 8) = v5;
    if ((*(_BYTE *)(v1 + 24) & 1) != 0)
    {
      outlined init with take of ImageData?(result + 16, (uint64_t)v20, &demangling cache variable for type metadata for Double?);
      result = outlined init with take of ImageData?((uint64_t)v20, v1 + 16, &demangling cache variable for type metadata for Double?);
      if ((*(_BYTE *)(v1 + 40) & 1) == 0)
        goto LABEL_4;
    }
    else
    {
      v9 = *(double *)(v1 + 16);
      v10 = *(double *)(result + 16);
      if (*(_BYTE *)(result + 24))
        v10 = *(double *)(v1 + 16);
      if (v10 < v9)
        v9 = v10;
      *(double *)(v1 + 16) = v9;
      *(_BYTE *)(v1 + 24) = 0;
      if ((*(_BYTE *)(v1 + 40) & 1) == 0)
      {
LABEL_4:
        v7 = *(double *)(v1 + 32);
        v8 = *(double *)(v6 + 32);
        if (*(_BYTE *)(v6 + 40))
          v8 = *(double *)(v1 + 32);
        if (v7 <= v8)
          v7 = v8;
        *(double *)(v1 + 32) = v7;
        *(_BYTE *)(v1 + 40) = 0;
        if ((*(_BYTE *)(v1 + 96) & 1) != 0)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    outlined init with take of ImageData?(v6 + 32, (uint64_t)v19, &demangling cache variable for type metadata for Double?);
    result = outlined init with take of ImageData?((uint64_t)v19, v1 + 32, &demangling cache variable for type metadata for Double?);
    if ((*(_BYTE *)(v1 + 96) & 1) != 0)
      goto LABEL_17;
LABEL_16:
    v11 = *(double *)(v1 + 88);
    outlined init with take of ImageData?(v6 + 88, (uint64_t)v18, &demangling cache variable for type metadata for Double?);
    result = outlined init with take of ImageData?((uint64_t)v18, (uint64_t)&v21, &demangling cache variable for type metadata for Double?);
    if ((v22 & 1) == 0)
    {
      if (v21 >= v11)
        v16 = v6;
      else
        v16 = v1;
      v17 = *(_BYTE *)(v16 + 72);
      *(_QWORD *)(v1 + 64) = *(_QWORD *)(v16 + 64);
      *(_BYTE *)(v1 + 72) = v17;
      if ((*(_BYTE *)(v1 + 56) & 1) != 0)
        goto LABEL_21;
      goto LABEL_26;
    }
LABEL_17:
    if (*(_BYTE *)(v1 + 72) == 1)
    {
      v12 = (_QWORD *)(v6 + 64);
      v13 = *(_BYTE *)(v6 + 72);
    }
    else
    {
      v13 = 0;
      v12 = (_QWORD *)(v1 + 64);
    }
    *(_QWORD *)(v1 + 64) = *v12;
    *(_BYTE *)(v1 + 72) = v13;
    if ((*(_BYTE *)(v1 + 56) & 1) != 0)
    {
LABEL_21:
      v14 = *(_QWORD *)(v6 + 48);
      v15 = *(_BYTE *)(v6 + 56);
LABEL_30:
      *(_QWORD *)(v1 + 48) = v14;
      *(_BYTE *)(v1 + 56) = v15;
      return result;
    }
LABEL_26:
    v14 = *(_QWORD *)(v1 + 48);
    if ((*(_BYTE *)(v6 + 56) & 1) != 0)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      if (*(double *)(v1 + 80) >= *(double *)(v6 + 80))
        v14 = *(_QWORD *)(v6 + 48);
    }
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  _DWORD *v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  _BYTE v18[16];
  char v19[8];
  char v20[8];
  double v21;
  char v22;

  *(float *)v1 = *(float *)result + *(float *)v1;
  v2 = *(_DWORD *)(result + 4);
  v3 = *(_DWORD *)(v1 + 4);
  v4 = __CFADD__(v3, v2);
  v5 = v3 + v2;
  if (!v4)
  {
    v6 = result;
    *(_DWORD *)(v1 + 4) = v5;
    if ((*(_BYTE *)(v1 + 12) & 1) != 0)
    {
      outlined init with take of ImageData?(result + 8, (uint64_t)v20, &demangling cache variable for type metadata for Float?);
      result = outlined init with take of ImageData?((uint64_t)v20, v1 + 8, &demangling cache variable for type metadata for Float?);
      if ((*(_BYTE *)(v1 + 20) & 1) == 0)
        goto LABEL_4;
    }
    else
    {
      v9 = *(float *)(v1 + 8);
      v10 = *(float *)(result + 8);
      if (*(_BYTE *)(result + 12))
        v10 = *(float *)(v1 + 8);
      if (v10 < v9)
        v9 = v10;
      *(float *)(v1 + 8) = v9;
      *(_BYTE *)(v1 + 12) = 0;
      if ((*(_BYTE *)(v1 + 20) & 1) == 0)
      {
LABEL_4:
        v7 = *(float *)(v1 + 16);
        v8 = *(float *)(v6 + 16);
        if (*(_BYTE *)(v6 + 20))
          v8 = *(float *)(v1 + 16);
        if (v7 <= v8)
          v7 = v8;
        *(float *)(v1 + 16) = v7;
        *(_BYTE *)(v1 + 20) = 0;
        if ((*(_BYTE *)(v1 + 56) & 1) != 0)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    outlined init with take of ImageData?(v6 + 16, (uint64_t)v19, &demangling cache variable for type metadata for Float?);
    result = outlined init with take of ImageData?((uint64_t)v19, v1 + 16, &demangling cache variable for type metadata for Float?);
    if ((*(_BYTE *)(v1 + 56) & 1) != 0)
      goto LABEL_17;
LABEL_16:
    v11 = *(double *)(v1 + 48);
    outlined init with take of ImageData?(v6 + 48, (uint64_t)v18, &demangling cache variable for type metadata for Double?);
    result = outlined init with take of ImageData?((uint64_t)v18, (uint64_t)&v21, &demangling cache variable for type metadata for Double?);
    if ((v22 & 1) == 0)
    {
      if (v21 >= v11)
        v16 = v6;
      else
        v16 = v1;
      v17 = *(_BYTE *)(v16 + 36);
      *(_DWORD *)(v1 + 32) = *(_DWORD *)(v16 + 32);
      *(_BYTE *)(v1 + 36) = v17;
      if ((*(_BYTE *)(v1 + 28) & 1) != 0)
        goto LABEL_21;
      goto LABEL_26;
    }
LABEL_17:
    if (*(_BYTE *)(v1 + 36) == 1)
    {
      v12 = (_DWORD *)(v6 + 32);
      v13 = *(_BYTE *)(v6 + 36);
    }
    else
    {
      v13 = 0;
      v12 = (_DWORD *)(v1 + 32);
    }
    *(_DWORD *)(v1 + 32) = *v12;
    *(_BYTE *)(v1 + 36) = v13;
    if ((*(_BYTE *)(v1 + 28) & 1) != 0)
    {
LABEL_21:
      v14 = *(_DWORD *)(v6 + 24);
      v15 = *(_BYTE *)(v6 + 28);
LABEL_30:
      *(_DWORD *)(v1 + 24) = v14;
      *(_BYTE *)(v1 + 28) = v15;
      return result;
    }
LABEL_26:
    v14 = *(_DWORD *)(v1 + 24);
    if ((*(_BYTE *)(v6 + 28) & 1) != 0)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      if (*(double *)(v1 + 40) >= *(double *)(v6 + 40))
        v14 = *(_DWORD *)(v6 + 24);
    }
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

_QWORD *SignalStatistics.aggregate(with:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  __int128 v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;

  v2 = v1;
  v3 = result;
  v4 = MEMORY[0x24BEE0D00];
  if (*(_QWORD *)v1 != *result)
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v47 = 0xD000000000000015;
    *((_QWORD *)&v47 + 1) = 0x800000023D9D4880;
    v5._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 8236;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v48 + 1) = v4;
    type metadata accessor for HandyLoggerNeo();
    v44 = 0u;
    v45 = 0u;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v44, 0xD000000000000064, 0x800000023D9D47B0, 187, (uint64_t)&v47, MEMORY[0x24BEE4AF8]);
    result = (_QWORD *)__swift_destroy_boxed_opaque_existential_0((uint64_t)&v47);
  }
  v8 = *(unsigned __int8 *)(v1 + 16);
  v9 = *((unsigned __int8 *)v3 + 16);
  if (v8 != v9)
  {
    *(_QWORD *)&v47 = 0;
    *((_QWORD *)&v47 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v47 = 0xD000000000000013;
    *((_QWORD *)&v47 + 1) = 0x800000023D9D48A0;
    if (v8)
      v10 = 1702195828;
    else
      v10 = 0x65736C6166;
    if (v8)
      v11 = 0xE400000000000000;
    else
      v11 = 0xE500000000000000;
    v12 = v11;
    String.append(_:)(*(Swift::String *)&v10);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 8236;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    if (v9)
      v14 = 1702195828;
    else
      v14 = 0x65736C6166;
    if (v9)
      v15 = 0xE400000000000000;
    else
      v15 = 0xE500000000000000;
    v16 = v15;
    String.append(_:)(*(Swift::String *)&v14);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v48 + 1) = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v44 = 0u;
    v45 = 0u;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v44, 0xD000000000000064, 0x800000023D9D47B0, 191, (uint64_t)&v47, MEMORY[0x24BEE4AF8]);
    result = (_QWORD *)__swift_destroy_boxed_opaque_existential_0((uint64_t)&v47);
  }
  v17 = *((_DWORD *)v3 + 5);
  v18 = *(_DWORD *)(v1 + 20);
  v19 = __CFADD__(v18, v17);
  v20 = v18 + v17;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 20) = v20;
    v21 = (char *)v3 + OBJC_IVAR____TtC5Hands16SignalStatistics_duration;
    swift_beginAccess();
    v22 = *((_OWORD *)v21 + 5);
    v51 = *((_OWORD *)v21 + 4);
    v52 = v22;
    v53 = v21[96];
    v23 = *((_OWORD *)v21 + 1);
    v47 = *(_OWORD *)v21;
    v48 = v23;
    v24 = *((_OWORD *)v21 + 3);
    v49 = *((_OWORD *)v21 + 2);
    v50 = v24;
    swift_beginAccess();
    specialized ValueStatistics.aggregate(with:)((uint64_t)&v47);
    v25 = (__int128 *)((char *)v3 + OBJC_IVAR____TtC5Hands16SignalStatistics_jointOcclusion);
    swift_beginAccess();
    v26 = v25[1];
    v44 = *v25;
    v45 = v26;
    v46[0] = v25[2];
    *(_OWORD *)((char *)v46 + 9) = *(__int128 *)((char *)v25 + 41);
    swift_beginAccess();
    result = (_QWORD *)specialized ValueStatistics.aggregate(with:)((uint64_t)&v44);
    if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    {
      v27 = *((_BYTE *)v3 + 32);
      *(_QWORD *)(v2 + 24) = v3[3];
    }
    else if ((v3[4] & 1) != 0)
    {
      v27 = 0;
    }
    else
    {
      v27 = 0;
      v28 = *((double *)v3 + 3);
      if (*(double *)(v2 + 24) > v28)
        v28 = *(double *)(v2 + 24);
      *(double *)(v2 + 24) = v28;
    }
    *(_BYTE *)(v2 + 32) = v27;
    v29 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames);
    v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames);
    v19 = __CFADD__(v30, v29);
    v31 = v30 + v29;
    if (!v19)
    {
      *(_QWORD *)(v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames) = v31;
      v32 = (uint64_t *)(v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc3DSignalStart);
      swift_beginAccess();
      v33 = *v32;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v34 = swift_bridgeObjectRetain();
      *v32 = specialized Dictionary.merging(_:uniquingKeysWith:)(v34, v33);
      swift_bridgeObjectRelease();
      v35 = (uint64_t *)(v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc2DSignalStart);
      swift_beginAccess();
      v36 = *v35;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v37 = swift_bridgeObjectRetain();
      *v35 = specialized Dictionary.merging(_:uniquingKeysWith:)(v37, v36);
      swift_bridgeObjectRelease();
      v38 = (uint64_t *)(v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc3DSignalEnd);
      swift_beginAccess();
      v39 = *v38;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v40 = swift_bridgeObjectRetain();
      *v38 = specialized Dictionary.merging(_:uniquingKeysWith:)(v40, v39);
      swift_bridgeObjectRelease();
      v41 = (uint64_t *)(v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc2DSignalEnd);
      swift_beginAccess();
      v42 = *v41;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v43 = swift_bridgeObjectRetain();
      *v41 = specialized Dictionary.merging(_:uniquingKeysWith:)(v43, v42);
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t SignalStatistics.signalUpdate(_:handHistory:data:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, unint64_t a4, const void *a5)
{
  _BYTE *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  float v25;
  float v26;
  const void *v27;
  unint64_t v28;
  _QWORD v29[70];
  char v30;

  v27 = a5;
  v28 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DerivedHandAttributes(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v18 = (const void **)((char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 504))(a1, v16);
  if ((result & 1) != 0)
  {
    v20 = *(_QWORD *)&v5[OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames];
    v21 = __CFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)&v5[OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames] = v22;
      outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
      {
        outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for DerivedHandAttributes?);
        v29[0] = 0;
        v29[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        v23._countAndFlagsBits = 0x206C616E676953;
        v23._object = (void *)0xE700000000000000;
        String.append(_:)(v23);
        v30 = v5[17];
        _print_unlocked<A, B>(_:_:)();
        v24._object = (void *)0x800000023D9D4860;
        v24._countAndFlagsBits = 0xD00000000000001CLL;
        String.append(_:)(v24);
        v29[3] = MEMORY[0x24BEE0D00];
        specialized static HLog.E(file:function:line:_:_:)(0xD000000000000064, 0x800000023D9D47B0, 224, (uint64_t)v29, MEMORY[0x24BEE4AF8]);
        return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
      }
      else
      {
        outlined init with take of Matrix2dPB((uint64_t)v12, (uint64_t)v18, type metadata accessor for DerivedHandAttributes);
        specialized static StatisticUtils.calculateAverageJointOcclusion(_:)(v18);
        v26 = v25;
        swift_beginAccess();
        specialized ValueStatistics.update(with:takeAbsolute:)(0, v26);
        swift_endAccess();
        if (v5[32] == 1)
        {
          SignalStatistics.signalStart(_:_:_:)((uint64_t)v18, a2, a3, v28, v27);
        }
        else
        {
          memcpy(v29, v27, 0x228uLL);
          (*(void (**)(_QWORD *, Swift::UInt, Swift::UInt, unint64_t, _QWORD *))(*(_QWORD *)v5 + 520))(v18, a2, a3, v28, v29);
        }
        return outlined destroy of Matrix3x3PB((uint64_t)v18, type metadata accessor for DerivedHandAttributes);
      }
    }
  }
  else if ((v5[32] & 1) == 0)
  {
    return SignalStatistics.signalEnd(_:_:_:)(a1, a2, a3, v28);
  }
  return result;
}

uint64_t SignalStatistics.signalStart(_:_:_:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, uint64_t a4, const void *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  char *v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  char *v68;
  Swift::UInt v69;
  Swift::UInt v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[552];
  uint64_t v76;
  _BYTE v77[552];

  v71 = a4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (unint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (Swift::UInt)&v67 - v16;
  v18 = type metadata accessor for HandDescriptor();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18, v20);
  v22 = a5;
  v23 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v77, v22, sizeof(v77));
  outlined init with copy of HandDescriptor(a1, (uint64_t)v23);
  v24 = *(_DWORD *)(v5 + 20);
  v25 = __CFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
    goto LABEL_29;
  }
  v69 = a2;
  v70 = a3;
  *(_DWORD *)(v5 + 20) = v26;
  v68 = v23;
  outlined init with copy of HandDescriptor((uint64_t)v23, v17);
  (*(void (**)(Swift::UInt, _QWORD, uint64_t, unint64_t))(v19 + 56))(v17, 0, 1, v18);
  outlined init with take of ImageData?(v17, v13, &demangling cache variable for type metadata for HandDescriptor?);
  v27 = v5 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLastSignalStart;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?(v13, v27);
  swift_endAccess();
  *(CFTimeInterval *)(v5 + 24) = CACurrentMediaTime();
  *(_BYTE *)(v5 + 32) = 0;
  v72 = type metadata accessor for DerivedHandAttributes(0);
  v73 = a1;
  v28 = a1 + *(int *)(v72 + 36);
  a2 = *(_QWORD *)v28;
  v17 = *(unsigned __int8 *)(v28 + 8);
  LODWORD(a1) = *(unsigned __int8 *)(v28 + 11);
  LODWORD(a3) = *(unsigned __int16 *)(v28 + 9);
  v74 = v5;
  v18 = v5 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc2DSignalStart;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76 = *(_QWORD *)v18;
  v30 = v76;
  *(_QWORD *)v18 = 0x8000000000000000;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v17);
  v32 = *(_QWORD *)(v30 + 16);
  v33 = (v31 & 1) == 0;
  v34 = v32 + v33;
  if (__OFADD__(v32, v33))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  LOBYTE(v13) = v31;
  if (*(_QWORD *)(v30 + 24) >= v34)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_34;
    while (1)
    {
LABEL_7:
      LODWORD(a3) = a3 | ((_DWORD)a1 << 16);
      *(_QWORD *)v18 = v30;
      swift_bridgeObjectRelease();
      v37 = *(_QWORD *)v18;
      swift_bridgeObjectRetain();
      if ((v13 & 1) == 0)
      {
        v38 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        specialized _NativeDictionary._insert(at:key:value:)(v19, a2, v17, v38, v37);
      }
      v13 = *(_QWORD *)(v37 + 56);
      swift_bridgeObjectRelease();
      a1 = 8 * v19;
      v39 = swift_isUniquelyReferenced_nonNull_native();
      v76 = *(_QWORD *)(v13 + 8 * v19);
      v40 = v76;
      *(_QWORD *)(v13 + 8 * v19) = 0x8000000000000000;
      v17 = a3 & 0xFFFFFF;
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3 & 0xFFFFFF);
      v42 = *(_QWORD *)(v40 + 16);
      v43 = (v41 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
        break;
      v19 = v41;
      if (*(_QWORD *)(v40 + 24) >= v44)
      {
        if ((v39 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v40 = v76;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, v39);
        v40 = v76;
        v45 = specialized __RawDictionaryStorage.find<A>(_:)(a3 & 0xFFFFFF);
        if ((v19 & 1) != (v46 & 1))
          goto LABEL_36;
        v18 = v45;
      }
      *(_QWORD *)(v13 + a1) = v40;
      swift_bridgeObjectRelease();
      v47 = *(_QWORD *)(v13 + a1);
      if ((v19 & 1) == 0)
        specialized _NativeDictionary._insert(at:key:value:)(v18, a3 & 0xFFFFFF, 0, *(_QWORD **)(v13 + a1));
      v48 = *(_QWORD *)(v47 + 56);
      v49 = *(_QWORD *)(v48 + 8 * v18);
      v25 = __CFADD__(v49, 1);
      v50 = v49 + 1;
      v51 = v74;
      if (v25)
        goto LABEL_31;
      *(_QWORD *)(v48 + 8 * v18) = v50;
      swift_endAccess();
      v52 = v73 + *(int *)(v72 + 40);
      v17 = *(_QWORD *)v52;
      a3 = *(_QWORD *)(v52 + 8);
      a2 = *(_QWORD *)(v52 + 16);
      v18 = *(unsigned __int8 *)(v52 + 24);
      v19 = v51 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc3DSignalStart;
      swift_beginAccess();
      v53 = swift_isUniquelyReferenced_nonNull_native();
      v76 = *(_QWORD *)v19;
      v54 = v76;
      *(_QWORD *)v19 = 0x8000000000000000;
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(v17, a3, a2, v18);
      v56 = *(_QWORD *)(v54 + 16);
      v57 = (v55 & 1) == 0;
      v58 = v56 + v57;
      if (__OFADD__(v56, v57))
        goto LABEL_32;
      LODWORD(a1) = v55;
      if (*(_QWORD *)(v54 + 24) >= v58)
      {
        if ((v53 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v54 = v76;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, v53);
        v54 = v76;
        v59 = specialized __RawDictionaryStorage.find<A>(_:)(v17, a3, a2, v18);
        if ((a1 & 1) != (v60 & 1))
          goto LABEL_37;
        v13 = v59;
      }
      *(_QWORD *)v19 = v54;
      swift_bridgeObjectRelease();
      v61 = *(_QWORD *)v19;
      if ((a1 & 1) == 0)
        specialized _NativeDictionary._insert(at:key:value:)(v13, v17, a3, a2, v18, 0, *(_QWORD **)v19);
      v62 = *(_QWORD *)(v61 + 56);
      v63 = *(_QWORD *)(v62 + 8 * v13);
      v25 = __CFADD__(v63, 1);
      v64 = v63 + 1;
      v65 = v73;
      if (!v25)
      {
        *(_QWORD *)(v62 + 8 * v13) = v64;
        swift_endAccess();
        memcpy(v75, v77, sizeof(v75));
        (*(void (**)(uint64_t, Swift::UInt, Swift::UInt, uint64_t, _BYTE *))(*(_QWORD *)v74 + 512))(v65, v69, v70, v71, v75);
        return outlined destroy of Matrix3x3PB((uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      }
LABEL_33:
      __break(1u);
LABEL_34:
      specialized _NativeDictionary.copy()();
      v30 = v76;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native);
  v30 = v76;
  v35 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v17);
  if ((v13 & 1) == (v36 & 1))
  {
    v19 = v35;
    goto LABEL_7;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_36:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_37:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t SignalStatistics.signalEnd(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint64_t result;
  double v21;
  unint64_t (*v22)@<X0>(unint64_t *@<X8>);
  void (*v23)(_QWORD *@<X8>);
  void (*v24)(_QWORD *@<X8>);
  uint64_t v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char *v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  char *v76;
  _QWORD v77[70];
  _OWORD v78[3];

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DerivedHandAttributes(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14, v16);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = CACurrentMediaTime();
  if ((*(_BYTE *)(v5 + 32) & 1) != 0)
  {
    v77[3] = MEMORY[0x24BEE0D00];
    v77[0] = 0xD00000000000001CLL;
    v77[1] = 0x800000023D9D4840;
    type metadata accessor for HandyLoggerNeo();
    memset(v78, 0, 32);
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v78, 0xD000000000000064, 0x800000023D9D47B0, 257, (uint64_t)v77, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v77);
  }
  v76 = v18;
  v21 = v19 - *(double *)(v5 + 24);
  swift_beginAccess();
  specialized ValueStatistics.update(with:takeAbsolute:)(0, v21);
  swift_endAccess();
  *(_QWORD *)(v5 + OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 1;
  v75 = a1;
  outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v13, &demangling cache variable for type metadata for DerivedHandAttributes?);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    goto LABEL_31;
  }
  v70 = a2;
  v71 = a3;
  v72 = a4;
  v25 = (uint64_t)v76;
  outlined init with take of Matrix2dPB((uint64_t)v13, (uint64_t)v76, type metadata accessor for DerivedHandAttributes);
  v26 = v25 + *(int *)(v14 + 36);
  v27 = *(_QWORD *)v26;
  v28 = *(unsigned __int8 *)(v26 + 8);
  v29 = *(unsigned __int8 *)(v26 + 11);
  v73 = *(unsigned __int16 *)(v26 + 9);
  v74 = v29;
  v30 = v5 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc2DSignalEnd;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v78[0] = *(_QWORD *)v30;
  v32 = *(_QWORD *)&v78[0];
  *(_QWORD *)v30 = 0x8000000000000000;
  v34 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
  v35 = *(_QWORD *)(v32 + 16);
  v36 = (v33 & 1) == 0;
  v37 = v35 + v36;
  if (__OFADD__(v35, v36))
  {
    __break(1u);
    goto LABEL_33;
  }
  LOBYTE(a4) = v33;
  if (*(_QWORD *)(v32 + 24) < v37)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
    v32 = *(_QWORD *)&v78[0];
    v38 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
    if ((a4 & 1) == (v39 & 1))
    {
      v34 = v38;
      goto LABEL_10;
    }
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_39:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_40:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_37;
  while (1)
  {
LABEL_10:
    v40 = v73 | (v74 << 16);
    *(_QWORD *)v30 = v32;
    swift_bridgeObjectRelease();
    v41 = *(_QWORD *)v30;
    swift_bridgeObjectRetain();
    if ((a4 & 1) == 0)
    {
      v42 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      specialized _NativeDictionary._insert(at:key:value:)(v34, v27, v28, v42, v41);
    }
    v27 = *(_QWORD *)(v41 + 56);
    swift_bridgeObjectRelease();
    v28 = 8 * v34;
    LOBYTE(a4) = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v78[0] = *(_QWORD *)(v27 + 8 * v34);
    v43 = *(_QWORD *)&v78[0];
    *(_QWORD *)(v27 + 8 * v34) = 0x8000000000000000;
    v44 = v40 & 0xFFFFFF;
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
    v46 = *(_QWORD *)(v43 + 16);
    v47 = (v45 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47))
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    v34 = v45;
    if (*(_QWORD *)(v43 + 24) >= v48)
    {
      if ((a4 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v43 = *(_QWORD *)&v78[0];
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, a4);
      v43 = *(_QWORD *)&v78[0];
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
      if ((v34 & 1) != (v50 & 1))
        goto LABEL_39;
      v30 = v49;
    }
    *(_QWORD *)(v27 + v28) = v43;
    swift_bridgeObjectRelease();
    v51 = *(_QWORD **)(v27 + v28);
    swift_bridgeObjectRetain();
    if ((v34 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(v30, v44, 0, v51);
    v52 = v51[7];
    v53 = *(_QWORD *)(v52 + 8 * v30);
    v54 = __CFADD__(v53, 1);
    v55 = v53 + 1;
    if (v54)
      goto LABEL_34;
    *(_QWORD *)(v52 + 8 * v30) = v55;
    swift_endAccess();
    swift_bridgeObjectRelease();
    v56 = &v76[*(int *)(v14 + 40)];
    v28 = *(_QWORD *)v56;
    v14 = *((_QWORD *)v56 + 1);
    v27 = *((_QWORD *)v56 + 2);
    v57 = v56[24];
    v34 = v5 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc3DSignalEnd;
    swift_beginAccess();
    v30 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v78[0] = *(_QWORD *)v34;
    v58 = *(_QWORD *)&v78[0];
    *(_QWORD *)v34 = 0x8000000000000000;
    v74 = v57;
    a4 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v14, v27, v57);
    v60 = *(_QWORD *)(v58 + 16);
    v61 = (v59 & 1) == 0;
    v62 = v60 + v61;
    if (__OFADD__(v60, v61))
      goto LABEL_35;
    v63 = v59;
    if (*(_QWORD *)(v58 + 24) >= v62)
    {
      if ((v30 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v58 = *(_QWORD *)&v78[0];
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v62, v30);
      v58 = *(_QWORD *)&v78[0];
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v14, v27, v74);
      if ((v63 & 1) != (v65 & 1))
        goto LABEL_40;
      a4 = v64;
    }
    *(_QWORD *)v34 = v58;
    swift_bridgeObjectRelease();
    v66 = *(_QWORD **)v34;
    swift_bridgeObjectRetain();
    if ((v63 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(a4, v28, v14, v27, v74, 0, v66);
    v67 = v66[7];
    v68 = *(_QWORD *)(v67 + 8 * a4);
    v54 = __CFADD__(v68, 1);
    v69 = v68 + 1;
    if (!v54)
      break;
LABEL_36:
    __break(1u);
LABEL_37:
    specialized _NativeDictionary.copy()();
    v32 = *(_QWORD *)&v78[0];
  }
  *(_QWORD *)(v67 + 8 * a4) = v69;
  swift_endAccess();
  swift_bridgeObjectRelease();
  outlined destroy of Matrix3x3PB((uint64_t)v76, type metadata accessor for DerivedHandAttributes);
  v24 = PinchRecoverSimilarity.recoverImplementation(_:_:_:_:_:_:_:);
  v23 = PinchRecoverSimilarity.recoverImplementation(_:_:_:_:_:_:_:);
  v22 = specialized thunk for @callee_guaranteed () -> (@owned [StatisticUtils.CameraRegion : UInt64]);
  a3 = v71;
  a4 = v72;
  a2 = v70;
LABEL_31:
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)v5 + 528))(v75, a2, a3, a4, v77);
  _sxRi_zRi0_zlySDy5Hands14StatisticUtilsC12CameraRegionOs6UInt64VGIsegr_SgWOe((uint64_t)v22);
  _sxRi_zRi0_zlySDy5Hands14StatisticUtilsC12CameraRegionOs6UInt64VGIsegr_SgWOe((uint64_t)v23);
  return _sxRi_zRi0_zlySDy5Hands14StatisticUtilsC12CameraRegionOs6UInt64VGIsegr_SgWOe((uint64_t)v24);
}

_QWORD *DerivedHandAttributes.init(prevHand:currentHand:data:timestamp:)@<X0>(uint64_t a1@<X0>, __n128 *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_BYTE *, uint64_t, int *);
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *result;
  uint64_t v51;
  char v52;
  int *v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  double v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  __int16 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  float32x4_t v70;
  float32x4_t v71;
  float v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[4];
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(_BYTE *, uint64_t, int *);
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  float32x4_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  __int16 v134;
  int v135;
  uint64_t v136[70];

  v118 = a4;
  v119 = a5;
  v12 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = &v83[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = &v83[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v20, v21);
  v23 = &v83[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v24, v25);
  v27 = &v83[-v26];
  memcpy(v136, a3, 0x228uLL);
  if ((a2[12].n128_u8[0] & 1) != 0 || (v28 = a2[1].n128_i64[0]) == 0 || !a2[12].n128_u64[1])
  {
    outlined release of HandsKitData(v136);
    outlined destroy of Matrix3x3PB((uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of Coordinate3DPB?(a1, &demangling cache variable for type metadata for DerivedHandAttributes?);
    v49 = type metadata accessor for DerivedHandAttributes(0);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(a7, 1, 1, v49);
  }
  v102 = a2[12].n128_i64[1];
  v99 = a7;
  v117 = v28;
  v104 = a6;
  v103 = (float32x4_t)a2[10];
  v29 = a2[1].n128_u64[1];
  v30 = a1;
  v31 = a2[2].n128_u64[0];
  v110 = v15;
  v111 = v31;
  v32 = a2[2].n128_u64[1];
  v115 = a2[3].n128_u64[0];
  v116 = v29;
  v33 = a2[3].n128_u64[1];
  v113 = a2[4].n128_u64[0];
  v114 = v33;
  v107 = a2[4].n128_u64[1];
  v108 = v32;
  v34 = a2[5].n128_u64[1];
  v109 = a2[5].n128_u64[0];
  v35 = a2[6].n128_u64[0];
  v112 = a2[6].n128_u64[1];
  v37 = a2[7].n128_u64[0];
  v36 = a2[7].n128_u64[1];
  v38 = a2[8].n128_u64[0];
  v106 = v30;
  outlined init with copy of DerivedHandAttributes?(v30, (uint64_t)v27);
  v39 = type metadata accessor for DerivedHandAttributes(0);
  v100 = *(_QWORD *)(v39 - 8);
  v40 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v100 + 48);
  v105 = (int *)v39;
  v94 = v40;
  v41 = ((uint64_t (*)(_BYTE *, uint64_t))v40)(v27, 1);
  v97 = v35;
  v98 = v34;
  v95 = v36;
  v96 = v37;
  v101 = v38;
  if (v41 == 1)
  {
    v42 = v112;
    v43 = v107;
    v44 = v108;
    outlined copy of HandPose?(v117);
    v45 = v102;
    swift_bridgeObjectRetain();
    outlined destroy of Coordinate3DPB?((uint64_t)v27, &demangling cache variable for type metadata for DerivedHandAttributes?);
    LODWORD(v94) = 1;
    v46 = 0.0;
    v47 = (uint64_t)v110;
    v48 = v42;
  }
  else
  {
    outlined init with copy of HandDescriptor((uint64_t)v27, (uint64_t)v19);
    v43 = v107;
    v44 = v108;
    outlined copy of HandPose?(v117);
    v45 = v102;
    swift_bridgeObjectRetain();
    outlined destroy of Matrix3x3PB((uint64_t)v27, type metadata accessor for DerivedHandAttributes);
    v51 = *((_QWORD *)v19 + 21);
    v93 = *((_QWORD *)v19 + 20);
    v52 = v19[192];
    outlined destroy of Matrix3x3PB((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v46 = 0.0;
    if ((v52 & 1) != 0)
    {
      LODWORD(v94) = 1;
      v47 = (uint64_t)v110;
    }
    else
    {
      v92 = v51;
      outlined init with copy of DerivedHandAttributes?(v106, (uint64_t)v23);
      v53 = v105;
      v54 = v94(v23, 1, v105);
      v47 = (uint64_t)v110;
      if (v54 == 1)
      {
        outlined destroy of Coordinate3DPB?((uint64_t)v23, &demangling cache variable for type metadata for DerivedHandAttributes?);
        LODWORD(v94) = 1;
      }
      else
      {
        v94 = *(uint64_t (**)(_BYTE *, uint64_t, int *))&v23[v53[5] + 16];
        outlined destroy of Matrix3x3PB((uint64_t)v23, type metadata accessor for DerivedHandAttributes);
        static CMTime.- infix(_:_:)();
        v55.i64[0] = v93;
        v55.i64[1] = v92;
        v56 = vsubq_f32(v103, v55);
        v57 = vmulq_f32(v56, v56);
        v58 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0]);
        CMTime.seconds.getter();
        LODWORD(v94) = 0;
        *(float *)&v59 = v59;
        v46 = v58 / *(float *)&v59;
      }
    }
    v48 = v112;
  }
  LODWORD(v102) = specialized static StatisticUtils.CameraSelection.from(poseCameras:)(v45);
  type metadata accessor for StatisticUtils();
  static StatisticUtils.bucketizeHandCenter2DRegionOnInferenceCameras(hand:images:)((uint64_t)a2, v136[61], (uint64_t)&v120);
  result = outlined release of HandsKitData(v136);
  v60 = v121;
  if ((v121 & 0xFF00) != 0x300)
  {
    v64 = v123;
    v92 = v122;
    v93 = v120;
    swift_bridgeObjectRelease();
    v91 = v60 & 1;
    v90 = v60 >> 8;
    v89 = v64 & 1;
    v63 = v64 >> 8;
    goto LABEL_17;
  }
  if (*(_QWORD *)(v45 + 16))
  {
    v61 = *(_QWORD *)(v45 + 32);
    v62 = *(unsigned __int8 *)(v45 + 40);
    swift_bridgeObjectRelease();
    v90 = 2;
    v91 = v62;
    v89 = v62;
    v92 = v61;
    v93 = v61;
    v63 = 2;
LABEL_17:
    v88 = v63;
    v65 = v101;
    v87 = HIDWORD(v119);
    v66 = HIDWORD(v101);
    v103.i64[0] = specialized static StatisticUtils.Location3DBucket.resolve(handCenter:)((__n128)v103);
    v85 = v68;
    v86 = v67;
    v84 = v69;
    outlined init with copy of HandDescriptor((uint64_t)a2, v47);
    v120 = v117;
    v121 = v116;
    v123 = v44;
    v122 = v111;
    v124 = v115;
    v125 = v114;
    v126 = v113;
    v127 = v43;
    v128 = v109;
    v129 = v98;
    v131 = v48;
    v130 = v97;
    v132 = v96;
    v133 = v95;
    v134 = v65 & 0x101;
    v135 = v66;
    HandPose.getHoverDistanceVector()();
    v71 = vmulq_f32(v70, v70);
    v72 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0]);
    outlined destroy of Matrix3x3PB((uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of Coordinate3DPB?(v106, &demangling cache variable for type metadata for DerivedHandAttributes?);
    outlined consume of HandPose?(v117);
    v73 = v99;
    outlined init with take of Matrix2dPB((uint64_t)v110, v99, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v74 = v105;
    v75 = v73 + v105[5];
    *(_QWORD *)v75 = v118;
    v76 = v87;
    *(_DWORD *)(v75 + 8) = v119;
    *(_DWORD *)(v75 + 12) = v76;
    *(_QWORD *)(v75 + 16) = v104;
    v77 = v73 + v74[6];
    *(float *)v77 = v46;
    *(_BYTE *)(v77 + 4) = (_BYTE)v94;
    *(float *)(v73 + v74[7]) = v72;
    *(_BYTE *)(v73 + v74[8]) = v102;
    v78 = v73 + v74[9];
    *(_QWORD *)v78 = v93;
    *(_BYTE *)(v78 + 8) = v91;
    v79 = v90;
    *(_BYTE *)(v78 + 11) = BYTE2(v90);
    *(_WORD *)(v78 + 9) = v79;
    *(_QWORD *)(v78 + 16) = v92;
    v80 = v88;
    *(_BYTE *)(v78 + 24) = v89;
    *(_BYTE *)(v78 + 27) = BYTE2(v80);
    *(_WORD *)(v78 + 25) = v80;
    v81 = v73 + v74[10];
    v82 = v86;
    *(_QWORD *)v81 = v103.i64[0];
    *(_QWORD *)(v81 + 8) = v82;
    *(_QWORD *)(v81 + 16) = v85;
    *(_BYTE *)(v81 + 24) = v84 & 1;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v100 + 56))(v73, 0, 1, v74);
  }
  __break(1u);
  return result;
}

uint64_t SignalStatistics.init(is_left:signal:)(char a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTimeInterval v8;
  uint64_t v9;
  CFTimeInterval v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 1;
  v5 = v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLastSignalStart;
  v6 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_duration;
  v8 = CACurrentMediaTime();
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 40) = 1;
  *(_QWORD *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 56) = 1;
  *(_QWORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 72) = 1;
  *(CFTimeInterval *)(v7 + 80) = v8;
  *(_QWORD *)(v7 + 88) = 0;
  *(_BYTE *)(v7 + 96) = 1;
  v9 = v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_jointOcclusion;
  v10 = CACurrentMediaTime();
  *(_DWORD *)(v9 + 8) = 0;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 12) = 1;
  *(_DWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 20) = 1;
  *(_DWORD *)(v9 + 24) = 0;
  *(_BYTE *)(v9 + 28) = 1;
  *(_DWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 36) = 1;
  *(CFTimeInterval *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_BYTE *)(v9 + 56) = 1;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames) = 0;
  v11 = OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc2DSignalStart;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + v11) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v13 = OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc3DSignalStart;
  *(_QWORD *)(v2 + v13) = specialized Dictionary.init(dictionaryLiteral:)(v12);
  v14 = OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc2DSignalEnd;
  *(_QWORD *)(v2 + v14) = specialized Dictionary.init(dictionaryLiteral:)(v12);
  v15 = OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc3DSignalEnd;
  *(_QWORD *)(v2 + v15) = specialized Dictionary.init(dictionaryLiteral:)(v12);
  *(_BYTE *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 17) = a2;
  return v2;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SignalStatistics.HandSignal(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SignalStatistics.HandSignal;
}

uint64_t SignalStatistics.__allocating_init(is_left:signal:)(char a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  SignalStatistics.init(is_left:signal:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall SignalStatistics.sendCoreAnalytics()()
{
  _OWORD v0[2];
  _QWORD v1[4];

  v1[3] = MEMORY[0x24BEE0D00];
  v1[0] = 0xD000000000000011;
  v1[1] = 0x800000023D9D4820;
  type metadata accessor for HandyLoggerNeo();
  memset(v0, 0, sizeof(v0));
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v0, 0xD000000000000064, 0x800000023D9D47B0, 280, (uint64_t)v1, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v1);
}

uint64_t SignalStatistics.isSignalActiveFor(_:)()
{
  _OWORD v1[2];
  _QWORD v2[4];

  v2[3] = MEMORY[0x24BEE0D00];
  v2[0] = 0xD000000000000011;
  v2[1] = 0x800000023D9D4820;
  type metadata accessor for HandyLoggerNeo();
  memset(v1, 0, sizeof(v1));
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v1, 0xD000000000000064, 0x800000023D9D47B0, 285, (uint64_t)v2, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  return 0;
}

uint64_t SignalStatistics.onSignalStart(_:_:_:)()
{
  _OWORD v1[2];
  _QWORD v2[4];

  v2[3] = MEMORY[0x24BEE0D00];
  v2[0] = 0xD000000000000011;
  v2[1] = 0x800000023D9D4820;
  type metadata accessor for HandyLoggerNeo();
  memset(v1, 0, sizeof(v1));
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v1, 0xD000000000000064, 0x800000023D9D47B0, 293, (uint64_t)v2, MEMORY[0x24BEE4AF8]);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
}

uint64_t SignalStatistics.onSignalLasting(_:_:_:)()
{
  _OWORD v1[2];
  _QWORD v2[4];

  v2[3] = MEMORY[0x24BEE0D00];
  v2[0] = 0xD000000000000011;
  v2[1] = 0x800000023D9D4820;
  type metadata accessor for HandyLoggerNeo();
  memset(v1, 0, sizeof(v1));
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v1, 0xD000000000000064, 0x800000023D9D47B0, 298, (uint64_t)v2, MEMORY[0x24BEE4AF8]);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
}

uint64_t SignalStatistics.onSignalEnd(_:_:_:)()
{
  _OWORD v1[2];
  _QWORD v2[4];

  v2[3] = MEMORY[0x24BEE0D00];
  v2[0] = 0xD000000000000011;
  v2[1] = 0x800000023D9D4820;
  type metadata accessor for HandyLoggerNeo();
  memset(v1, 0, sizeof(v1));
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v1, 0xD000000000000064, 0x800000023D9D47B0, 303, (uint64_t)v2, MEMORY[0x24BEE4AF8]);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
}

uint64_t SignalStatistics.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLastSignalStart, &demangling cache variable for type metadata for HandDescriptor?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for SignalStatistics()
{
  return type metadata accessor for SignalStatistics(0);
}

uint64_t type metadata accessor for SignalStatistics(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for SignalStatistics);
}

void type metadata completion function for SignalStatistics()
{
  unint64_t v0;

  type metadata accessor for HandDescriptor?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata instantiation function for ValueStatistics()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ValueStatistics()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueStatistics(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  int v11;
  BOOL v12;
  size_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  _DWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v34;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = v7 + 1;
  v11 = v8 & 0x100000;
  v12 = v9 <= 7 && v11 == 0;
  if (v12
    && (v13 = v10 + v9,
        ((((v10
          + 7
          + ((v10 + v9 + ((v10 + v9 + ((v10 + v9 + ((v9 + ((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 9 <= 0x18))
  {
    v34 = v10 + 7;
    v14 = ~v9;
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    v16 = (_DWORD *)(((unint64_t)v4 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (_DWORD *)(((unint64_t)a2 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *v16 = *v17;
    v18 = (_QWORD *)(((unint64_t)v16 + v9 + 4) & ~v9);
    v19 = (_QWORD *)(((unint64_t)v17 + v9 + 4) & ~v9);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
    if (v20(v19, 1, v5))
    {
      memcpy(v18, v19, v10);
    }
    else
    {
      v15(v18, v19, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
    }
    v22 = (_QWORD *)(((unint64_t)v18 + v13) & v14);
    v23 = (_QWORD *)(((unint64_t)v19 + v13) & v14);
    if (v20(v23, 1, v5))
    {
      memcpy(v22, v23, v10);
    }
    else
    {
      v15(v22, v23, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v5);
    }
    v24 = (_QWORD *)(((unint64_t)v22 + v13) & v14);
    v25 = (_QWORD *)(((unint64_t)v23 + v13) & v14);
    if (v20(v25, 1, v5))
    {
      memcpy(v24, v25, v10);
    }
    else
    {
      v15(v24, v25, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
    }
    v26 = (_QWORD *)(((unint64_t)v24 + v13) & v14);
    v27 = (_QWORD *)(((unint64_t)v25 + v13) & v14);
    if (v20(v27, 1, v5))
    {
      memcpy(v26, v27, v10);
    }
    else
    {
      v15(v26, v27, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v26, 0, 1, v5);
    }
    v28 = (_QWORD *)(((unint64_t)v26 + v34) & 0xFFFFFFFFFFFFF8);
    v29 = (_QWORD *)(((unint64_t)v27 + v34) & 0xFFFFFFFFFFFFFFF8);
    *v28 = *v29;
    v30 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    v31 = *(_QWORD *)v30;
    v32 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v30 + 8);
    *(_QWORD *)v32 = v31;
  }
  else
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v21 + ((v9 & 0xF8 ^ 0x1F8) & (v9 + 16)));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for ValueStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(unint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  void (*v16)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v16 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v16(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = ((a1 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 4;
  v8 = ~v6;
  v9 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v9(v7 & ~v6, 1, v3))
    v16(v7 & ~v6, v3);
  if (*(_DWORD *)(v4 + 84))
    v10 = v5;
  else
    v10 = v5 + 1;
  v11 = ((v7 | v6) + v10) & v8;
  if (!v9(v11, 1, v3))
    v16(v11, v3);
  v12 = v10 + v6;
  v13 = (v12 + v11) & v8;
  if (!v9(v13, 1, v3))
    v16(v13, v3);
  v14 = (v12 + v13) & v8;
  result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v9)(v14, 1, v3);
  if (!(_DWORD)result)
    return ((uint64_t (*)(unint64_t, uint64_t))v16)(v14, v3);
  return result;
}

uint64_t initializeWithCopy for ValueStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  size_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  size_t v16;
  size_t v17;
  size_t v18;
  const void *v19;
  void (*v20)(void *, const void *, uint64_t);
  size_t v21;
  void *v22;
  const void *v23;
  void *v24;
  const void *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int (*v32)(unint64_t, uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v34 = a1;
  v9 = (_DWORD *)((v8 + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)((v8 + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (unint64_t)v9 + v11 + 4;
  v13 = ~v11;
  v14 = (unint64_t)v10 + v11 + 4;
  v32 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v33 = v7;
  if (v32(v14 & ~v11, 1, v5))
  {
    v15 = *(_DWORD *)(v6 + 84);
    if (v15)
      v16 = v8;
    else
      v16 = v8 + 1;
    memcpy((void *)(v12 & ~v11), (const void *)(v14 & ~v11), v16);
  }
  else
  {
    v7(v12 & ~v11, v14 & ~v11, v5);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v12 & ~v11, 0, 1, v5);
    v15 = *(_DWORD *)(v6 + 84);
  }
  if (v15)
    v17 = v8;
  else
    v17 = v8 + 1;
  v18 = ((v12 | v11) + v17) & v13;
  v19 = (const void *)(((v14 | v11) + v17) & v13);
  if (v32((unint64_t)v19, 1, v5))
  {
    memcpy((void *)(((v12 | v11) + v17) & v13), v19, v17);
    v20 = (void (*)(void *, const void *, uint64_t))v33;
  }
  else
  {
    v20 = (void (*)(void *, const void *, uint64_t))v33;
    v33(((v12 | v11) + v17) & v13, (uint64_t)v19, v5);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((v12 | v11) + v17) & v13, 0, 1, v5);
  }
  v21 = v17 + v11;
  v22 = (void *)((v17 + v11 + v18) & v13);
  v23 = (const void *)(((unint64_t)v19 + v17 + v11) & v13);
  if (v32((unint64_t)v23, 1, v5))
  {
    memcpy(v22, v23, v17);
  }
  else
  {
    v20(v22, v23, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v5);
  }
  v24 = (void *)(((unint64_t)v22 + v21) & v13);
  v25 = (const void *)(((unint64_t)v23 + v21) & v13);
  if (v32((unint64_t)v25, 1, v5))
  {
    memcpy(v24, v25, v17);
  }
  else
  {
    v20(v24, v25, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
  }
  v26 = (_QWORD *)(((unint64_t)v24 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  v30 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v30 = v29;
  return v34;
}

uint64_t assignWithCopy for ValueStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(unint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  size_t v17;
  void *v18;
  const void *v19;
  int v20;
  int v21;
  size_t v22;
  void *v23;
  const void *v24;
  int v25;
  int v26;
  void *v27;
  const void *v28;
  int v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v37(a1, a2, v5);
  v7 = *(_QWORD *)(v6 + 64);
  v39 = a1;
  v8 = (_DWORD *)((v7 + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)((v7 + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (unint64_t)v8 + v10 + 4;
  v38 = ~v10;
  v12 = (unint64_t)v9 + v10 + 4;
  v13 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v14 = v13(v11 & ~v10, 1, v5);
  v15 = v13(v12 & ~v10, 1, v5);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v11 & ~v10, v12 & ~v10, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11 & ~v10, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      v37(v11 & ~v10, v12 & ~v10, v5);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v11 & ~v10, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v16 = v7;
  else
    v16 = v7 + 1;
  memcpy((void *)(v11 & ~v10), (const void *)(v12 & ~v10), v16);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v17 = v7;
  else
    v17 = v7 + 1;
  v18 = (void *)(((v11 | v10) + v17) & v38);
  v19 = (const void *)(((v12 | v10) + v17) & v38);
  v20 = v13((unint64_t)v18, 1, v5);
  v21 = v13((unint64_t)v19, 1, v5);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v18, v5);
LABEL_18:
    memcpy(v18, v19, v17);
    goto LABEL_19;
  }
  v37((uint64_t)v18, (uint64_t)v19, v5);
LABEL_19:
  v22 = v17 + v10;
  v23 = (void *)(((unint64_t)v18 + v17 + v10) & v38);
  v24 = (const void *)(((unint64_t)v19 + v17 + v10) & v38);
  v25 = v13((unint64_t)v23, 1, v5);
  v26 = v13((unint64_t)v24, 1, v5);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v23, v24, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v23, v5);
LABEL_24:
    memcpy(v23, v24, v17);
    goto LABEL_25;
  }
  v37((uint64_t)v23, (uint64_t)v24, v5);
LABEL_25:
  v27 = (void *)(((unint64_t)v23 + v22) & v38);
  v28 = (const void *)(((unint64_t)v24 + v22) & v38);
  v29 = v13((unint64_t)v27, 1, v5);
  v30 = v13((unint64_t)v28, 1, v5);
  if (!v29)
  {
    if (!v30)
    {
      v37((uint64_t)v27, (uint64_t)v28, v5);
      goto LABEL_31;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v27, v5);
    goto LABEL_30;
  }
  if (v30)
  {
LABEL_30:
    memcpy(v27, v28, v17);
    goto LABEL_31;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v27, v28, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
LABEL_31:
  v31 = (_QWORD *)(((unint64_t)v27 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v28 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  v35 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v35 = v34;
  return v39;
}

uint64_t initializeWithTake for ValueStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  size_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  size_t v16;
  size_t v17;
  size_t v18;
  const void *v19;
  void (*v20)(void *, const void *, uint64_t);
  size_t v21;
  void *v22;
  const void *v23;
  void *v24;
  const void *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int (*v32)(unint64_t, uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v34 = a1;
  v9 = (_DWORD *)((v8 + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)((v8 + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (unint64_t)v9 + v11 + 4;
  v13 = ~v11;
  v14 = (unint64_t)v10 + v11 + 4;
  v32 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v33 = v7;
  if (v32(v14 & ~v11, 1, v5))
  {
    v15 = *(_DWORD *)(v6 + 84);
    if (v15)
      v16 = v8;
    else
      v16 = v8 + 1;
    memcpy((void *)(v12 & ~v11), (const void *)(v14 & ~v11), v16);
  }
  else
  {
    v7(v12 & ~v11, v14 & ~v11, v5);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v12 & ~v11, 0, 1, v5);
    v15 = *(_DWORD *)(v6 + 84);
  }
  if (v15)
    v17 = v8;
  else
    v17 = v8 + 1;
  v18 = ((v12 | v11) + v17) & v13;
  v19 = (const void *)(((v14 | v11) + v17) & v13);
  if (v32((unint64_t)v19, 1, v5))
  {
    memcpy((void *)(((v12 | v11) + v17) & v13), v19, v17);
    v20 = (void (*)(void *, const void *, uint64_t))v33;
  }
  else
  {
    v20 = (void (*)(void *, const void *, uint64_t))v33;
    v33(((v12 | v11) + v17) & v13, (uint64_t)v19, v5);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((v12 | v11) + v17) & v13, 0, 1, v5);
  }
  v21 = v17 + v11;
  v22 = (void *)((v17 + v11 + v18) & v13);
  v23 = (const void *)(((unint64_t)v19 + v17 + v11) & v13);
  if (v32((unint64_t)v23, 1, v5))
  {
    memcpy(v22, v23, v17);
  }
  else
  {
    v20(v22, v23, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v5);
  }
  v24 = (void *)(((unint64_t)v22 + v21) & v13);
  v25 = (const void *)(((unint64_t)v23 + v21) & v13);
  if (v32((unint64_t)v25, 1, v5))
  {
    memcpy(v24, v25, v17);
  }
  else
  {
    v20(v24, v25, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
  }
  v26 = (_QWORD *)(((unint64_t)v24 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  v30 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v30 = v29;
  return v34;
}

uint64_t assignWithTake for ValueStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(unint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  size_t v17;
  void *v18;
  const void *v19;
  int v20;
  int v21;
  size_t v22;
  void *v23;
  const void *v24;
  int v25;
  int v26;
  void *v27;
  const void *v28;
  int v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v37(a1, a2, v5);
  v7 = *(_QWORD *)(v6 + 64);
  v39 = a1;
  v8 = (_DWORD *)((v7 + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)((v7 + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (unint64_t)v8 + v10 + 4;
  v38 = ~v10;
  v12 = (unint64_t)v9 + v10 + 4;
  v13 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v14 = v13(v11 & ~v10, 1, v5);
  v15 = v13(v12 & ~v10, 1, v5);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v11 & ~v10, v12 & ~v10, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11 & ~v10, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      v37(v11 & ~v10, v12 & ~v10, v5);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v11 & ~v10, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v16 = v7;
  else
    v16 = v7 + 1;
  memcpy((void *)(v11 & ~v10), (const void *)(v12 & ~v10), v16);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v17 = v7;
  else
    v17 = v7 + 1;
  v18 = (void *)(((v11 | v10) + v17) & v38);
  v19 = (const void *)(((v12 | v10) + v17) & v38);
  v20 = v13((unint64_t)v18, 1, v5);
  v21 = v13((unint64_t)v19, 1, v5);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v18, v19, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v18, v5);
LABEL_18:
    memcpy(v18, v19, v17);
    goto LABEL_19;
  }
  v37((uint64_t)v18, (uint64_t)v19, v5);
LABEL_19:
  v22 = v17 + v10;
  v23 = (void *)(((unint64_t)v18 + v17 + v10) & v38);
  v24 = (const void *)(((unint64_t)v19 + v17 + v10) & v38);
  v25 = v13((unint64_t)v23, 1, v5);
  v26 = v13((unint64_t)v24, 1, v5);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v23, v24, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v23, v5);
LABEL_24:
    memcpy(v23, v24, v17);
    goto LABEL_25;
  }
  v37((uint64_t)v23, (uint64_t)v24, v5);
LABEL_25:
  v27 = (void *)(((unint64_t)v23 + v22) & v38);
  v28 = (const void *)(((unint64_t)v24 + v22) & v38);
  v29 = v13((unint64_t)v27, 1, v5);
  v30 = v13((unint64_t)v28, 1, v5);
  if (!v29)
  {
    if (!v30)
    {
      v37((uint64_t)v27, (uint64_t)v28, v5);
      goto LABEL_31;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v27, v5);
    goto LABEL_30;
  }
  if (v30)
  {
LABEL_30:
    memcpy(v27, v28, v17);
    goto LABEL_31;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v27, v28, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
LABEL_31:
  v31 = (_QWORD *)(((unint64_t)v27 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)(((unint64_t)v28 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  v35 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v35 = v34;
  return v39;
}

uint64_t getEnumTagSinglePayload for ValueStatistics(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5)
    v7 = *(_QWORD *)(v4 + 64);
  else
    LODWORD(v7) = v6 + 1;
  if (!a2)
    return 0;
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = ((((v7
         + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((((v6 + 3) & 0xFFFFFFFC) + v8 + 4) & ~v8)) & ~v8)) & ~v8)) & ~v8)
         + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8)
     + 9;
  v10 = (a2 - v5 + 255) >> (8 * v9);
  if (v9 < 4)
    v11 = v10 + 1;
  else
    v11 = 2;
  if (v11 >= 0x10000)
    v12 = 4;
  else
    v12 = 2;
  if (v11 < 0x100)
    v12 = 1;
  if (v11 >= 2)
    v13 = v12;
  else
    v13 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23D8814F0 + 4 * byte_23D9B9340[v13]))();
}

void storeEnumTagSinglePayload for ValueStatistics(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (!v7)
    ++v8;
  v11 = ((((v8 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + v10) & ~v9)) & ~v9)) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  if (v7 >= a3)
  {
    v15 = 0;
    if (v7 >= a2)
      goto LABEL_16;
  }
  else
  {
    v12 = (a3 - v7 + 255) >> (8 * v11);
    if (v11 <= 3)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    if (v7 >= a2)
LABEL_16:
      __asm { BR              X11 }
  }
  if (v11 >= 4)
    v16 = ~v7 + a2;
  else
    v16 = (~(_BYTE)v7 + a2);
  bzero(a1, v11);
  if ((_DWORD)v11 == 1)
    *a1 = v16;
  else
    *(_DWORD *)a1 = v16;
  __asm { BR              X10 }
}

void sub_23D8816B0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23D8816B8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23D8816C0);
}

void sub_23D8816DC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23D8816E4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23D8816EC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x23D8816F4);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for ValueStatistics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueStatistics);
}

uint64_t storeEnumTagSinglePayload for SignalStatistics.HandSignal(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23D881764 + 4 * byte_23D9B9354[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23D881798 + 4 * byte_23D9B934F[v4]))();
}

uint64_t sub_23D881798(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8817A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8817A8);
  return result;
}

uint64_t sub_23D8817B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8817BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23D8817C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8817C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignalStatistics.HandSignal()
{
  return &type metadata for SignalStatistics.HandSignal;
}

unint64_t lazy protocol witness table accessor for type [SignalStatistics.HandSignal] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [SignalStatistics.HandSignal] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SignalStatistics.HandSignal] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SignalStatistics.HandSignal]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SignalStatistics.HandSignal] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SignalStatistics.HandSignal and conformance SignalStatistics.HandSignal()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SignalStatistics.HandSignal and conformance SignalStatistics.HandSignal;
  if (!lazy protocol witness table cache variable for type SignalStatistics.HandSignal and conformance SignalStatistics.HandSignal)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SignalStatistics.HandSignal, &type metadata for SignalStatistics.HandSignal);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SignalStatistics.HandSignal and conformance SignalStatistics.HandSignal);
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = *(_QWORD *)(v1 + 48) + 16 * v6;
    v8 = *(_QWORD *)v7;
    LOBYTE(v7) = *(_BYTE *)(v7 + 8);
    v9 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[5];
    v19 = v8;
    v20 = v7;
    v21 = v9;
    v10(&v18, &v19);
    return v18;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(int *);
  uint64_t result;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v8);
    v10 = *(_QWORD *)(v3 + 56) + 104 * v8;
    v11 = *(_QWORD *)v10;
    v12 = *(_DWORD *)(v10 + 8);
    v13 = *(_QWORD *)(v10 + 16);
    v14 = *(_BYTE *)(v10 + 24);
    v15 = *(_QWORD *)(v10 + 32);
    v16 = *(_BYTE *)(v10 + 40);
    v17 = *(_QWORD *)(v10 + 48);
    v18 = *(_BYTE *)(v10 + 56);
    v19 = *(_QWORD *)(v10 + 64);
    v20 = *(_BYTE *)(v10 + 72);
    v21 = *(_QWORD *)(v10 + 80);
    v22 = *(_QWORD *)(v10 + 88);
    LOBYTE(v10) = *(_BYTE *)(v10 + 96);
    v1[3] = v6;
    v1[4] = v7;
    v23 = (uint64_t (*)(int *))v1[5];
    v31 = v9;
    v32 = v11;
    v33 = v12;
    v34 = v13;
    v35 = v14;
    v36 = v15;
    v37 = v16;
    v38 = v17;
    v39 = v18;
    v40 = v19;
    v41 = v20;
    v42 = v21;
    v43 = v22;
    v44 = v10;
    result = v23(&v31);
    *(_BYTE *)(a1 + 105) = 0;
    return result;
  }
  v25 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v26 = (unint64_t)(v1[2] + 64) >> 6;
    if (v25 < v26)
    {
      v27 = v1[1];
      v28 = *(_QWORD *)(v27 + 8 * v25);
      if (v28)
      {
LABEL_7:
        v7 = (v28 - 1) & v28;
        v8 = __clz(__rbit64(v28)) + (v25 << 6);
        v6 = v25;
        goto LABEL_3;
      }
      v29 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v26)
      {
        v28 = *(_QWORD *)(v27 + 8 * v29);
        if (v28)
        {
LABEL_10:
          v25 = v29;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v26)
        {
          v28 = *(_QWORD *)(v27 + 8 * (v5 + 3));
          if (v28)
          {
            v25 = v5 + 3;
            goto LABEL_7;
          }
          v29 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v26)
          {
            v28 = *(_QWORD *)(v27 + 8 * v29);
            if (v28)
              goto LABEL_10;
            v25 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v26)
            {
              v28 = *(_QWORD *)(v27 + 8 * v25);
              if (v28)
                goto LABEL_7;
              v6 = v26 - 1;
              v30 = v5 + 6;
              while (v26 != v30)
              {
                v28 = *(_QWORD *)(v27 + 8 * v30++);
                if (v28)
                {
                  v25 = v30 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 89) = 0u;
    *(_BYTE *)(a1 + 105) = 1;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t *);
  uint64_t result;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(v3 + 48) + 16 * v8;
    v10 = *(_QWORD *)v9;
    LOBYTE(v9) = *(_BYTE *)(v9 + 8);
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8);
    v1[3] = v6;
    v1[4] = v7;
    v12 = (uint64_t (*)(uint64_t *))v1[5];
    v20 = v10;
    v21 = v9;
    v22 = v11;
    result = v12(&v20);
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v15 = (unint64_t)(v1[2] + 64) >> 6;
    if (v14 < v15)
    {
      v16 = v1[1];
      v17 = *(_QWORD *)(v16 + 8 * v14);
      if (v17)
      {
LABEL_7:
        v7 = (v17 - 1) & v17;
        v8 = __clz(__rbit64(v17)) + (v14 << 6);
        v6 = v14;
        goto LABEL_3;
      }
      v18 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v15)
      {
        v17 = *(_QWORD *)(v16 + 8 * v18);
        if (v17)
        {
LABEL_10:
          v14 = v18;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v15)
        {
          v17 = *(_QWORD *)(v16 + 8 * (v5 + 3));
          if (v17)
          {
            v14 = v5 + 3;
            goto LABEL_7;
          }
          v18 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v15)
          {
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (v17)
              goto LABEL_10;
            v14 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v15)
            {
              v17 = *(_QWORD *)(v16 + 8 * v14);
              if (v17)
                goto LABEL_7;
              v6 = v15 - 1;
              v19 = v5 + 6;
              while (v15 != v19)
              {
                v17 = *(_QWORD *)(v16 + 8 * v19++);
                if (v17)
                {
                  v14 = v19 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *);
  uint64_t result;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(v3 + 48) + 16 * v8;
    v10 = *(_QWORD *)v9;
    LOBYTE(v9) = *(_BYTE *)(v9 + 8);
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8);
    v1[3] = v6;
    v1[4] = v7;
    v12 = (void (*)(uint64_t *))v1[5];
    v20 = v10;
    v21 = v9;
    v22 = v11;
    swift_bridgeObjectRetain();
    v12(&v20);
    return swift_bridgeObjectRelease();
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v15 = (unint64_t)(v1[2] + 64) >> 6;
    if (v14 < v15)
    {
      v16 = v1[1];
      v17 = *(_QWORD *)(v16 + 8 * v14);
      if (v17)
      {
LABEL_7:
        v7 = (v17 - 1) & v17;
        v8 = __clz(__rbit64(v17)) + (v14 << 6);
        v6 = v14;
        goto LABEL_3;
      }
      v18 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v15)
      {
        v17 = *(_QWORD *)(v16 + 8 * v18);
        if (v17)
        {
LABEL_10:
          v14 = v18;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v15)
        {
          v17 = *(_QWORD *)(v16 + 8 * (v5 + 3));
          if (v17)
          {
            v14 = v5 + 3;
            goto LABEL_7;
          }
          v18 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v15)
          {
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (v17)
              goto LABEL_10;
            v14 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v15)
            {
              v17 = *(_QWORD *)(v16 + 8 * v14);
              if (v17)
                goto LABEL_7;
              v6 = v15 - 1;
              v19 = v5 + 6;
              while (v15 != v19)
              {
                v17 = *(_QWORD *)(v16 + 8 * v19++);
                if (v17)
                {
                  v14 = v19 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
  }
  return result;
}

_QWORD *specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *(*v13)(__int128 *__return_ptr, __int128 *);
  __int128 v14;
  _QWORD *result;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(v3 + 48) + 32 * v8;
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_BYTE *)(v9 + 24);
    v12 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8);
    v13 = (_QWORD *(*)(__int128 *__return_ptr, __int128 *))v1[5];
    v14 = *(_OWORD *)v9;
    v1[3] = v6;
    v1[4] = v7;
    v30 = v14;
    v31 = v10;
    v32 = v11;
    v33 = v12;
    result = v13(&v26, &v30);
    v16 = v26;
    v17 = v27;
    v18 = v28;
    v19 = v29;
LABEL_23:
    *(_OWORD *)a1 = v16;
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 24) = v18;
    *(_QWORD *)(a1 + 32) = v19;
    return result;
  }
  v20 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v21 = (unint64_t)(v1[2] + 64) >> 6;
    if (v20 < v21)
    {
      v22 = v1[1];
      v23 = *(_QWORD *)(v22 + 8 * v20);
      if (v23)
      {
LABEL_7:
        v7 = (v23 - 1) & v23;
        v8 = __clz(__rbit64(v23)) + (v20 << 6);
        v6 = v20;
        goto LABEL_3;
      }
      v24 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v21)
      {
        v23 = *(_QWORD *)(v22 + 8 * v24);
        if (v23)
        {
LABEL_10:
          v20 = v24;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v21)
        {
          v23 = *(_QWORD *)(v22 + 8 * (v5 + 3));
          if (v23)
          {
            v20 = v5 + 3;
            goto LABEL_7;
          }
          v24 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v21)
          {
            v23 = *(_QWORD *)(v22 + 8 * v24);
            if (v23)
              goto LABEL_10;
            v20 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v21)
            {
              v23 = *(_QWORD *)(v22 + 8 * v20);
              if (v23)
                goto LABEL_7;
              v6 = v21 - 1;
              v25 = v5 + 6;
              while (v21 != v25)
              {
                v23 = *(_QWORD *)(v22 + 8 * v25++);
                if (v23)
                {
                  v20 = v25 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v17 = 0;
    v19 = 0;
    v1[3] = v6;
    v1[4] = 0;
    v16 = 0uLL;
    v18 = 255;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  return swift_bridgeObjectRetain();
}

__n128 specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  v4 = a1[2].n128_u64[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  a2[1].n128_u8[8] = v3;
  a2[2].n128_u64[0] = v4;
  return result;
}

uint64_t specialized SignalStatistics.init(fromPrev:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTimeInterval v6;
  uint64_t v7;
  CFTimeInterval v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_DWORD *)(v1 + 20) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = 1;
  v3 = v1 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLastSignalStart;
  v4 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v1 + OBJC_IVAR____TtC5Hands16SignalStatistics_duration;
  v6 = CACurrentMediaTime();
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 1;
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 1;
  *(_QWORD *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 56) = 1;
  *(_QWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 72) = 1;
  *(CFTimeInterval *)(v5 + 80) = v6;
  *(_QWORD *)(v5 + 88) = 0;
  *(_BYTE *)(v5 + 96) = 1;
  v7 = v1 + OBJC_IVAR____TtC5Hands16SignalStatistics_jointOcclusion;
  v8 = CACurrentMediaTime();
  *(_DWORD *)(v7 + 8) = 0;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 12) = 1;
  *(_DWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 20) = 1;
  *(_DWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 28) = 1;
  *(_DWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 36) = 1;
  *(CFTimeInterval *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 56) = 1;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames) = 0;
  v9 = OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc2DSignalStart;
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + v9) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v11 = OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc3DSignalStart;
  *(_QWORD *)(v1 + v11) = specialized Dictionary.init(dictionaryLiteral:)(v10);
  v12 = OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc2DSignalEnd;
  *(_QWORD *)(v1 + v12) = specialized Dictionary.init(dictionaryLiteral:)(v10);
  v13 = OBJC_IVAR____TtC5Hands16SignalStatistics_handLoc3DSignalEnd;
  *(_QWORD *)(v1 + v13) = specialized Dictionary.init(dictionaryLiteral:)(v10);
  *(_BYTE *)(v1 + 16) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(v1 + 17) = *(_BYTE *)(a1 + 17);
  v14 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(v1 + 32) = v14;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames) = *(_QWORD *)(a1
                                                                                           + OBJC_IVAR____TtC5Hands16SignalStatistics_consecutiveFrames);
  return v1;
}

uint64_t type metadata accessor for DerivedHandAttributes(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DerivedHandAttributes);
}

uint64_t _sxRi_zRi0_zlySDy5Hands14StatisticUtilsC12CameraRegionOs6UInt64VGIsegr_SgWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DerivedHandAttributes(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(_QWORD *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(_BYTE *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  void (*v169)(char *, char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 *v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  _OWORD *v188;
  _OWORD *v189;
  _OWORD *v190;
  char *__dsta;
  _BYTE *__dst;
  char *v194;
  uint64_t v195;
  void (*v196)(char *, char *, uint64_t);
  int *v197;
  char *v198;
  int *v200;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v6 = a2[2];
    if (v6)
    {
      v7 = a2[3];
      *(_QWORD *)(v4 + 16) = v6;
      *(_QWORD *)(v4 + 24) = v7;
      v8 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v4 + 48) = v8;
      v9 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 80) = v9;
      v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(v4 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 112) = v10;
      *(_BYTE *)(v4 + 128) = *((_BYTE *)a2 + 128);
      *(_BYTE *)(v4 + 129) = *((_BYTE *)a2 + 129);
      *(_DWORD *)(v4 + 132) = *((_DWORD *)a2 + 33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 96) = v12;
      *(_OWORD *)(v4 + 112) = *((_OWORD *)a2 + 7);
      *(_QWORD *)(v4 + 128) = a2[16];
      v13 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v4 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v4 + 32) = v13;
      v14 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 64) = v14;
    }
    v15 = a2[25];
    *(_BYTE *)(v4 + 136) = *((_BYTE *)a2 + 136);
    *(_WORD *)(v4 + 137) = *(_WORD *)((char *)a2 + 137);
    *(_QWORD *)(v4 + 144) = a2[18];
    v16 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(v4 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v4 + 176) = v16;
    *(_BYTE *)(v4 + 192) = *((_BYTE *)a2 + 192);
    if (v15)
    {
      v17 = a2[26];
      *(_QWORD *)(v4 + 200) = v15;
      *(_QWORD *)(v4 + 208) = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v4 + 200) = *(_OWORD *)(a2 + 25);
    }
    *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 27);
    *(_DWORD *)(v4 + 232) = *((_DWORD *)a2 + 58);
    *(_BYTE *)(v4 + 236) = *((_BYTE *)a2 + 236);
    *(_QWORD *)(v4 + 240) = a2[30];
    *(_DWORD *)(v4 + 248) = *((_DWORD *)a2 + 62);
    *(_QWORD *)(v4 + 256) = a2[32];
    *(_DWORD *)(v4 + 264) = *((_DWORD *)a2 + 66);
    *(_BYTE *)(v4 + 268) = *((_BYTE *)a2 + 268);
    *(_DWORD *)(v4 + 272) = *((_DWORD *)a2 + 68);
    *(_DWORD *)(v4 + 276) = *((_DWORD *)a2 + 69);
    *(_WORD *)(v4 + 280) = *((_WORD *)a2 + 140);
    v18 = (int *)type metadata accessor for HandDescriptor();
    v19 = v18[17];
    v20 = (char *)(v4 + v19);
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    v200 = v18;
    if (v24(v21, 1, v22))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = type metadata accessor for UnknownStorage();
      v196 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      v196(v20, v21, v26);
      v27 = *(int *)(v22 + 20);
      v28 = &v20[v27];
      v29 = &v21[v27];
      v30 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v28 = *(_QWORD *)v29;
        v33 = *(int *)(v30 + 20);
        __dsta = &v29[v33];
        v194 = &v28[v33];
        swift_bridgeObjectRetain();
        v196(v194, __dsta, v26);
        v34 = *(int *)(v30 + 24);
        v35 = &v28[v34];
        v36 = &v29[v34];
        *(_DWORD *)v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      v18 = v200;
    }
    *(_QWORD *)(v4 + v18[18]) = *(uint64_t *)((char *)a2 + v18[18]);
    v37 = v18[19];
    v38 = v4 + v37;
    v39 = (uint64_t)a2 + v37;
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *(_BYTE *)(v38 + 16) = *(_BYTE *)(v39 + 16);
    v40 = v18[20];
    v41 = v4 + v40;
    v42 = (uint64_t)a2 + v40;
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *(_BYTE *)(v41 + 16) = *(_BYTE *)(v42 + 16);
    v43 = v18[21];
    v44 = v4 + v43;
    v45 = (uint64_t)a2 + v43;
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
    v46 = v18[22];
    v47 = v4 + v46;
    v48 = (uint64_t)a2 + v46;
    *(_BYTE *)(v47 + 64) = *(_BYTE *)(v48 + 64);
    v49 = *(_OWORD *)(v48 + 48);
    *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
    *(_OWORD *)(v47 + 48) = v49;
    v50 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *(_OWORD *)(v47 + 16) = v50;
    *(_QWORD *)(v4 + v18[23]) = *(uint64_t *)((char *)a2 + v18[23]);
    v51 = v18[24];
    v52 = (_QWORD *)(v4 + v51);
    v53 = (uint64_t *)((char *)a2 + v51);
    v54 = type metadata accessor for HandDescriptorInternal();
    v55 = *(_QWORD *)(v54 - 8);
    v56 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v56(v53, 1, v54))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v195 = v55;
      v197 = (int *)v54;
      *v52 = *v53;
      *((_BYTE *)v52 + 8) = *((_BYTE *)v53 + 8);
      v58 = v53[6];
      swift_bridgeObjectRetain();
      if (v58)
      {
        v52[2] = v53[2];
        *((_WORD *)v52 + 12) = *((_WORD *)v53 + 12);
        v52[4] = v53[4];
        *((_BYTE *)v52 + 40) = *((_BYTE *)v53 + 40);
        v59 = v53[7];
        v60 = v53[8];
        v52[6] = v58;
        v52[7] = v59;
        v62 = v53[9];
        v61 = v53[10];
        v52[8] = v60;
        v52[9] = v62;
        v52[10] = v61;
        *((_DWORD *)v52 + 22) = *((_DWORD *)v53 + 22);
        v63 = v53[13];
        v52[12] = v53[12];
        v52[13] = v63;
        *((_BYTE *)v52 + 120) = *((_BYTE *)v53 + 120);
        v52[14] = v53[14];
        *(_QWORD *)((char *)v52 + 124) = *(_QWORD *)((char *)v53 + 124);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v64 = *((_OWORD *)v53 + 6);
        *((_OWORD *)v52 + 5) = *((_OWORD *)v53 + 5);
        *((_OWORD *)v52 + 6) = v64;
        *((_OWORD *)v52 + 7) = *((_OWORD *)v53 + 7);
        *((_DWORD *)v52 + 32) = *((_DWORD *)v53 + 32);
        v65 = *((_OWORD *)v53 + 2);
        *((_OWORD *)v52 + 1) = *((_OWORD *)v53 + 1);
        *((_OWORD *)v52 + 2) = v65;
        v66 = *((_OWORD *)v53 + 4);
        *((_OWORD *)v52 + 3) = *((_OWORD *)v53 + 3);
        *((_OWORD *)v52 + 4) = v66;
      }
      v52[17] = v53[17];
      v52[18] = v53[18];
      v52[19] = v53[19];
      memcpy(v52 + 20, v53 + 20, 0x373uLL);
      v67 = v197[10];
      __dst = (char *)v52 + v67;
      v68 = (char *)v53 + v67;
      v69 = type metadata accessor for ActionInternalPB(0);
      v70 = *(_QWORD *)(v69 - 8);
      v71 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v71(v68, 1, v69))
      {
        v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
        memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        *__dst = *v68;
        v73 = *(int *)(v69 + 20);
        v74 = &__dst[v73];
        v75 = &v68[v73];
        v76 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__dst, 0, 1, v69);
      }
      v77 = v197;
      v78 = v197[11];
      v79 = (char *)v52 + v78;
      v80 = (char *)v53 + v78;
      v81 = type metadata accessor for UnsureInternalPB(0);
      v82 = *(_QWORD *)(v81 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
      {
        v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        v84 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v79, v80, v84);
        *(_QWORD *)&v79[*(int *)(v81 + 20)] = *(_QWORD *)&v80[*(int *)(v81 + 20)];
        v85 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56);
        swift_retain();
        v85(v79, 0, 1, v81);
      }
      v86 = v197[12];
      v87 = (char *)v52 + v86;
      v88 = (char *)v53 + v86;
      v89 = type metadata accessor for ObjectInteractionStateInternalPB(0);
      v90 = *(_QWORD *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        v92 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v87, v88, v92);
        *(_QWORD *)&v87[*(int *)(v89 + 20)] = *(_QWORD *)&v88[*(int *)(v89 + 20)];
        v93 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56);
        swift_retain();
        v93(v87, 0, 1, v89);
      }
      v94 = v197[13];
      v95 = (_QWORD *)((char *)v52 + v94);
      v96 = (_QWORD *)((char *)v53 + v94);
      v97 = type metadata accessor for HomePinchInternalPB(0);
      v98 = *(_QWORD *)(v97 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
      {
        v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        *v95 = *v96;
        v100 = *(int *)(v97 + 20);
        v101 = (char *)v95 + v100;
        v102 = (char *)v96 + v100;
        v103 = type metadata accessor for UnknownStorage();
        v104 = v102;
        v77 = v197;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v101, v104, v103);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      }
      *(_QWORD *)((char *)v52 + v77[14]) = *(_QWORD *)((char *)v53 + v77[14]);
      v105 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v195 + 56);
      swift_bridgeObjectRetain();
      v105(v52, 0, 1, v77);
      v18 = v200;
    }
    v106 = v18[25];
    v107 = v4 + v106;
    v108 = (uint64_t)a2 + v106;
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *(_BYTE *)(v107 + 8) = *(_BYTE *)(v108 + 8);
    *(_QWORD *)(v4 + v18[26]) = *(uint64_t *)((char *)a2 + v18[26]);
    v109 = v18[27];
    v110 = v4 + v109;
    v111 = (uint64_t)a2 + v109;
    *(_BYTE *)(v110 + 8) = *(_BYTE *)(v111 + 8);
    *(_QWORD *)v110 = *(_QWORD *)v111;
    v112 = v18[28];
    v113 = v4 + v112;
    v114 = (uint64_t)a2 + v112;
    v115 = *(_OWORD *)(v114 + 16);
    *(_OWORD *)v113 = *(_OWORD *)v114;
    *(_OWORD *)(v113 + 16) = v115;
    *(_OWORD *)(v113 + 32) = *(_OWORD *)(v114 + 32);
    *(_WORD *)(v113 + 48) = *(_WORD *)(v114 + 48);
    *(_QWORD *)(v4 + v18[29]) = *(uint64_t *)((char *)a2 + v18[29]);
    v116 = v18[30];
    v117 = v4 + v116;
    v118 = (uint64_t)a2 + v116;
    *(_QWORD *)v117 = *(_QWORD *)v118;
    *(_BYTE *)(v117 + 8) = *(_BYTE *)(v118 + 8);
    v119 = v18[31];
    v120 = (_QWORD *)(v4 + v119);
    v121 = (uint64_t)a2 + v119;
    v122 = *(uint64_t *)((char *)a2 + v119);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v122)
    {
      v123 = *(_QWORD *)(v121 + 8);
      v124 = *(_QWORD *)(v121 + 16);
      *v120 = v122;
      v120[1] = v123;
      v125 = *(_QWORD *)(v121 + 24);
      v126 = *(_QWORD *)(v121 + 32);
      v120[2] = v124;
      v120[3] = v125;
      v127 = *(_QWORD *)(v121 + 40);
      v128 = *(_QWORD *)(v121 + 48);
      v120[4] = v126;
      v120[5] = v127;
      v120[6] = v128;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v129 = *(_OWORD *)(v121 + 16);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *((_OWORD *)v120 + 1) = v129;
      *((_OWORD *)v120 + 2) = *(_OWORD *)(v121 + 32);
      v120[6] = *(_QWORD *)(v121 + 48);
    }
    v130 = v200;
    v131 = v200[32];
    v132 = v4 + v131;
    v133 = (uint64_t)a2 + v131;
    v134 = *(_OWORD *)(v133 + 48);
    *(_OWORD *)(v132 + 32) = *(_OWORD *)(v133 + 32);
    *(_OWORD *)(v132 + 48) = v134;
    *(_QWORD *)(v132 + 62) = *(_QWORD *)(v133 + 62);
    v135 = *(_OWORD *)(v133 + 16);
    *(_OWORD *)v132 = *(_OWORD *)v133;
    *(_OWORD *)(v132 + 16) = v135;
    v136 = v200[33];
    v137 = v4 + v136;
    v138 = (uint64_t)a2 + v136;
    *(_QWORD *)v137 = *(_QWORD *)v138;
    *(_BYTE *)(v137 + 8) = *(_BYTE *)(v138 + 8);
    v139 = v200[34];
    v140 = v4 + v139;
    v141 = (uint64_t)a2 + v139;
    *(_DWORD *)v140 = *(_DWORD *)v141;
    *(_QWORD *)(v140 + 8) = *(_QWORD *)(v141 + 8);
    v142 = v200[35];
    v143 = v4 + v142;
    v144 = (uint64_t)a2 + v142;
    *(_DWORD *)(v143 + 64) = *(_DWORD *)((char *)a2 + v142 + 64);
    v145 = *(_OWORD *)((char *)a2 + v142 + 48);
    *(_OWORD *)(v143 + 32) = *(_OWORD *)((char *)a2 + v142 + 32);
    *(_OWORD *)(v143 + 48) = v145;
    v146 = *(_OWORD *)((char *)a2 + v142 + 16);
    *(_OWORD *)v143 = *(_OWORD *)((char *)a2 + v142);
    *(_OWORD *)(v143 + 16) = v146;
    v147 = *(_OWORD *)((char *)a2 + v142 + 128);
    *(_OWORD *)(v143 + 112) = *(_OWORD *)((char *)a2 + v142 + 112);
    *(_OWORD *)(v143 + 128) = v147;
    v148 = *(_OWORD *)((char *)a2 + v142 + 96);
    *(_OWORD *)(v143 + 80) = *(_OWORD *)((char *)a2 + v142 + 80);
    *(_OWORD *)(v143 + 96) = v148;
    v149 = (uint64_t *)((char *)a2 + v142 + 144);
    v150 = *v149;
    swift_bridgeObjectRetain();
    if (v150)
    {
      v151 = *(_QWORD *)(v144 + 152);
      *(_QWORD *)(v143 + 144) = v150;
      *(_QWORD *)(v143 + 152) = v151;
      v152 = *(_OWORD *)(v144 + 176);
      *(_OWORD *)(v143 + 160) = *(_OWORD *)(v144 + 160);
      *(_OWORD *)(v143 + 176) = v152;
      v153 = *(_OWORD *)(v144 + 208);
      *(_OWORD *)(v143 + 192) = *(_OWORD *)(v144 + 192);
      *(_OWORD *)(v143 + 208) = v153;
      v154 = *(_OWORD *)(v144 + 240);
      *(_OWORD *)(v143 + 224) = *(_OWORD *)(v144 + 224);
      *(_OWORD *)(v143 + 240) = v154;
      *(_BYTE *)(v143 + 256) = *(_BYTE *)(v144 + 256);
      *(_BYTE *)(v143 + 257) = *(_BYTE *)(v144 + 257);
      *(_DWORD *)(v143 + 260) = *(_DWORD *)(v144 + 260);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v155 = *(_OWORD *)(v144 + 224);
      *(_OWORD *)(v143 + 208) = *(_OWORD *)(v144 + 208);
      *(_OWORD *)(v143 + 224) = v155;
      *(_OWORD *)(v143 + 240) = *(_OWORD *)(v144 + 240);
      *(_QWORD *)(v143 + 256) = *(_QWORD *)(v144 + 256);
      v156 = *(_OWORD *)(v144 + 160);
      *(_OWORD *)(v143 + 144) = *(_OWORD *)v149;
      *(_OWORD *)(v143 + 160) = v156;
      v157 = *(_OWORD *)(v144 + 192);
      *(_OWORD *)(v143 + 176) = *(_OWORD *)(v144 + 176);
      *(_OWORD *)(v143 + 192) = v157;
    }
    v158 = *(_QWORD *)(v144 + 272);
    *(_QWORD *)(v143 + 264) = *(_QWORD *)(v144 + 264);
    *(_QWORD *)(v143 + 272) = v158;
    v159 = v200[36];
    v160 = (_QWORD *)(v4 + v159);
    v161 = (uint64_t *)((char *)a2 + v159);
    v162 = type metadata accessor for PartialHandMultiCam(0);
    v163 = *(_QWORD *)(v162 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
    {
      v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
      memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    }
    else
    {
      v165 = v161[1];
      *v160 = *v161;
      v160[1] = v165;
      v166 = *(int *)(v162 + 24);
      v198 = (char *)v160 + v166;
      v167 = (char *)v161 + v166;
      v168 = type metadata accessor for UnknownStorage();
      v169 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v130 = v200;
      v169(v198, v167, v168);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
    }
    v170 = v130[37];
    v171 = v4 + v170;
    v172 = (uint64_t)a2 + v170;
    *(_QWORD *)v171 = *(_QWORD *)v172;
    *(_BYTE *)(v171 + 8) = *(_BYTE *)(v172 + 8);
    v173 = v130[38];
    v174 = v4 + v173;
    v175 = (__int128 *)((char *)a2 + v173);
    *(_QWORD *)(v174 + 45) = *(_QWORD *)((char *)v175 + 45);
    v176 = v175[2];
    v177 = *v175;
    *(_OWORD *)(v174 + 16) = v175[1];
    *(_OWORD *)(v174 + 32) = v176;
    *(_OWORD *)v174 = v177;
    v178 = a3[5];
    v179 = a3[6];
    v180 = v4 + v178;
    v181 = (uint64_t)a2 + v178;
    *(_OWORD *)v180 = *(_OWORD *)v181;
    *(_QWORD *)(v180 + 16) = *(_QWORD *)(v181 + 16);
    v182 = v4 + v179;
    v183 = (uint64_t)a2 + v179;
    *(_DWORD *)v182 = *(_DWORD *)v183;
    *(_BYTE *)(v182 + 4) = *(_BYTE *)(v183 + 4);
    v184 = a3[8];
    *(_DWORD *)(v4 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    *(_BYTE *)(v4 + v184) = *((_BYTE *)a2 + v184);
    v185 = a3[9];
    v186 = a3[10];
    v187 = (_OWORD *)(v4 + v185);
    v188 = (_OWORD *)((char *)a2 + v185);
    *v187 = *v188;
    *(_OWORD *)((char *)v187 + 12) = *(_OWORD *)((char *)v188 + 12);
    v189 = (_OWORD *)(v4 + v186);
    v190 = (_OWORD *)((char *)a2 + v186);
    *v189 = *v190;
    *(_OWORD *)((char *)v189 + 9) = *(_OWORD *)((char *)v190 + 9);
  }
  return v4;
}

uint64_t initializeWithCopy for DerivedHandAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(_QWORD *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(_BYTE *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  void (*v103)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _OWORD *v185;
  _OWORD *v186;
  _OWORD *v187;
  _OWORD *v188;
  char *__dsta;
  _BYTE *__dst;
  char *v192;
  uint64_t v193;
  void (*v194)(char *, char *, uint64_t);
  int *v195;
  char *v196;
  int *v198;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    v9 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v9;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v11 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v11;
    v12 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v12;
  }
  v13 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v14 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v14;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  if (v13)
  {
    v15 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v13;
    *(_QWORD *)(a1 + 208) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  v16 = (int *)type metadata accessor for HandDescriptor();
  v17 = v16[17];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  v198 = v16;
  if (v22(v19, 1, v20))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = type metadata accessor for UnknownStorage();
    v194 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v194(v18, v19, v24);
    v25 = *(int *)(v20 + 20);
    v26 = &v18[v25];
    v27 = &v19[v25];
    v28 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v31 = *(int *)(v28 + 20);
      __dsta = &v27[v31];
      v192 = &v26[v31];
      swift_bridgeObjectRetain();
      v194(v192, __dsta, v24);
      v32 = *(int *)(v28 + 24);
      v33 = &v26[v32];
      v34 = &v27[v32];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    v16 = v198;
  }
  *(_QWORD *)(a1 + v16[18]) = *(_QWORD *)(a2 + v16[18]);
  v35 = v16[19];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  v38 = v16[20];
  v39 = a1 + v38;
  v40 = a2 + v38;
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_BYTE *)(v39 + 16) = *(_BYTE *)(v40 + 16);
  v41 = v16[21];
  v42 = a1 + v41;
  v43 = a2 + v41;
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
  v44 = v16[22];
  v45 = a1 + v44;
  v46 = a2 + v44;
  *(_BYTE *)(v45 + 64) = *(_BYTE *)(v46 + 64);
  v47 = *(_OWORD *)(v46 + 48);
  *(_OWORD *)(v45 + 32) = *(_OWORD *)(v46 + 32);
  *(_OWORD *)(v45 + 48) = v47;
  v48 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v48;
  *(_QWORD *)(a1 + v16[23]) = *(_QWORD *)(a2 + v16[23]);
  v49 = v16[24];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (_QWORD *)(a2 + v49);
  v52 = type metadata accessor for HandDescriptorInternal();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v53 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v54(v51, 1, v52))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v193 = v53;
    v195 = (int *)v52;
    *v50 = *v51;
    *((_BYTE *)v50 + 8) = *((_BYTE *)v51 + 8);
    v56 = v51[6];
    swift_bridgeObjectRetain();
    if (v56)
    {
      v50[2] = v51[2];
      *((_WORD *)v50 + 12) = *((_WORD *)v51 + 12);
      v50[4] = v51[4];
      *((_BYTE *)v50 + 40) = *((_BYTE *)v51 + 40);
      v57 = v51[7];
      v58 = v51[8];
      v50[6] = v56;
      v50[7] = v57;
      v60 = v51[9];
      v59 = v51[10];
      v50[8] = v58;
      v50[9] = v60;
      v50[10] = v59;
      *((_DWORD *)v50 + 22) = *((_DWORD *)v51 + 22);
      v61 = v51[13];
      v50[12] = v51[12];
      v50[13] = v61;
      *((_BYTE *)v50 + 120) = *((_BYTE *)v51 + 120);
      v50[14] = v51[14];
      *(_QWORD *)((char *)v50 + 124) = *(_QWORD *)((char *)v51 + 124);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v62 = *((_OWORD *)v51 + 6);
      *((_OWORD *)v50 + 5) = *((_OWORD *)v51 + 5);
      *((_OWORD *)v50 + 6) = v62;
      *((_OWORD *)v50 + 7) = *((_OWORD *)v51 + 7);
      *((_DWORD *)v50 + 32) = *((_DWORD *)v51 + 32);
      v63 = *((_OWORD *)v51 + 2);
      *((_OWORD *)v50 + 1) = *((_OWORD *)v51 + 1);
      *((_OWORD *)v50 + 2) = v63;
      v64 = *((_OWORD *)v51 + 4);
      *((_OWORD *)v50 + 3) = *((_OWORD *)v51 + 3);
      *((_OWORD *)v50 + 4) = v64;
    }
    v50[17] = v51[17];
    v50[18] = v51[18];
    v50[19] = v51[19];
    memcpy(v50 + 20, v51 + 20, 0x373uLL);
    v65 = v195[10];
    __dst = (char *)v50 + v65;
    v66 = (char *)v51 + v65;
    v67 = type metadata accessor for ActionInternalPB(0);
    v68 = *(_QWORD *)(v67 - 8);
    v69 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v68 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v69(v66, 1, v67))
    {
      v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(__dst, v66, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      *__dst = *v66;
      v71 = *(int *)(v67 + 20);
      v72 = &__dst[v71];
      v73 = &v66[v71];
      v74 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(__dst, 0, 1, v67);
    }
    v75 = v195;
    v76 = v195[11];
    v77 = (char *)v50 + v76;
    v78 = (char *)v51 + v76;
    v79 = type metadata accessor for UnsureInternalPB(0);
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      v82 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v77, v78, v82);
      *(_QWORD *)&v77[*(int *)(v79 + 20)] = *(_QWORD *)&v78[*(int *)(v79 + 20)];
      v83 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56);
      swift_retain();
      v83(v77, 0, 1, v79);
    }
    v84 = v195[12];
    v85 = (char *)v50 + v84;
    v86 = (char *)v51 + v84;
    v87 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v88 = *(_QWORD *)(v87 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
    {
      v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
    else
    {
      v90 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v85, v86, v90);
      *(_QWORD *)&v85[*(int *)(v87 + 20)] = *(_QWORD *)&v86[*(int *)(v87 + 20)];
      v91 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56);
      swift_retain();
      v91(v85, 0, 1, v87);
    }
    v92 = v195[13];
    v93 = (_QWORD *)((char *)v50 + v92);
    v94 = (_QWORD *)((char *)v51 + v92);
    v95 = type metadata accessor for HomePinchInternalPB(0);
    v96 = *(_QWORD *)(v95 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
    {
      v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      *v93 = *v94;
      v98 = *(int *)(v95 + 20);
      v99 = (char *)v93 + v98;
      v100 = (char *)v94 + v98;
      v101 = type metadata accessor for UnknownStorage();
      v102 = v100;
      v75 = v195;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v102, v101);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
    }
    *(_QWORD *)((char *)v50 + v75[14]) = *(_QWORD *)((char *)v51 + v75[14]);
    v103 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v193 + 56);
    swift_bridgeObjectRetain();
    v103(v50, 0, 1, v75);
    v16 = v198;
  }
  v104 = v16[25];
  v105 = a1 + v104;
  v106 = a2 + v104;
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *(_BYTE *)(v105 + 8) = *(_BYTE *)(v106 + 8);
  *(_QWORD *)(a1 + v16[26]) = *(_QWORD *)(a2 + v16[26]);
  v107 = v16[27];
  v108 = a1 + v107;
  v109 = a2 + v107;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  *(_QWORD *)v108 = *(_QWORD *)v109;
  v110 = v16[28];
  v111 = a1 + v110;
  v112 = a2 + v110;
  v113 = *(_OWORD *)(v112 + 16);
  *(_OWORD *)v111 = *(_OWORD *)v112;
  *(_OWORD *)(v111 + 16) = v113;
  *(_OWORD *)(v111 + 32) = *(_OWORD *)(v112 + 32);
  *(_WORD *)(v111 + 48) = *(_WORD *)(v112 + 48);
  *(_QWORD *)(a1 + v16[29]) = *(_QWORD *)(a2 + v16[29]);
  v114 = v16[30];
  v115 = a1 + v114;
  v116 = a2 + v114;
  *(_QWORD *)v115 = *(_QWORD *)v116;
  *(_BYTE *)(v115 + 8) = *(_BYTE *)(v116 + 8);
  v117 = v16[31];
  v118 = (_QWORD *)(a1 + v117);
  v119 = a2 + v117;
  v120 = *(_QWORD *)(a2 + v117);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v120)
  {
    v121 = *(_QWORD *)(v119 + 8);
    v122 = *(_QWORD *)(v119 + 16);
    *v118 = v120;
    v118[1] = v121;
    v123 = *(_QWORD *)(v119 + 24);
    v124 = *(_QWORD *)(v119 + 32);
    v118[2] = v122;
    v118[3] = v123;
    v125 = *(_QWORD *)(v119 + 40);
    v126 = *(_QWORD *)(v119 + 48);
    v118[4] = v124;
    v118[5] = v125;
    v118[6] = v126;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v127 = *(_OWORD *)(v119 + 16);
    *(_OWORD *)v118 = *(_OWORD *)v119;
    *((_OWORD *)v118 + 1) = v127;
    *((_OWORD *)v118 + 2) = *(_OWORD *)(v119 + 32);
    v118[6] = *(_QWORD *)(v119 + 48);
  }
  v128 = v198;
  v129 = v198[32];
  v130 = a1 + v129;
  v131 = a2 + v129;
  v132 = *(_OWORD *)(v131 + 48);
  *(_OWORD *)(v130 + 32) = *(_OWORD *)(v131 + 32);
  *(_OWORD *)(v130 + 48) = v132;
  *(_QWORD *)(v130 + 62) = *(_QWORD *)(v131 + 62);
  v133 = *(_OWORD *)(v131 + 16);
  *(_OWORD *)v130 = *(_OWORD *)v131;
  *(_OWORD *)(v130 + 16) = v133;
  v134 = v198[33];
  v135 = a1 + v134;
  v136 = a2 + v134;
  *(_QWORD *)v135 = *(_QWORD *)v136;
  *(_BYTE *)(v135 + 8) = *(_BYTE *)(v136 + 8);
  v137 = v198[34];
  v138 = a1 + v137;
  v139 = a2 + v137;
  *(_DWORD *)v138 = *(_DWORD *)v139;
  *(_QWORD *)(v138 + 8) = *(_QWORD *)(v139 + 8);
  v140 = v198[35];
  v141 = a1 + v140;
  v142 = a2 + v140;
  *(_DWORD *)(v141 + 64) = *(_DWORD *)(a2 + v140 + 64);
  v143 = *(_OWORD *)(a2 + v140 + 48);
  *(_OWORD *)(v141 + 32) = *(_OWORD *)(a2 + v140 + 32);
  *(_OWORD *)(v141 + 48) = v143;
  v144 = *(_OWORD *)(a2 + v140 + 16);
  *(_OWORD *)v141 = *(_OWORD *)(a2 + v140);
  *(_OWORD *)(v141 + 16) = v144;
  v145 = *(_OWORD *)(a2 + v140 + 128);
  *(_OWORD *)(v141 + 112) = *(_OWORD *)(a2 + v140 + 112);
  *(_OWORD *)(v141 + 128) = v145;
  v146 = *(_OWORD *)(a2 + v140 + 96);
  *(_OWORD *)(v141 + 80) = *(_OWORD *)(a2 + v140 + 80);
  *(_OWORD *)(v141 + 96) = v146;
  v147 = (uint64_t *)(a2 + v140 + 144);
  v148 = *v147;
  swift_bridgeObjectRetain();
  if (v148)
  {
    v149 = *(_QWORD *)(v142 + 152);
    *(_QWORD *)(v141 + 144) = v148;
    *(_QWORD *)(v141 + 152) = v149;
    v150 = *(_OWORD *)(v142 + 176);
    *(_OWORD *)(v141 + 160) = *(_OWORD *)(v142 + 160);
    *(_OWORD *)(v141 + 176) = v150;
    v151 = *(_OWORD *)(v142 + 208);
    *(_OWORD *)(v141 + 192) = *(_OWORD *)(v142 + 192);
    *(_OWORD *)(v141 + 208) = v151;
    v152 = *(_OWORD *)(v142 + 240);
    *(_OWORD *)(v141 + 224) = *(_OWORD *)(v142 + 224);
    *(_OWORD *)(v141 + 240) = v152;
    *(_BYTE *)(v141 + 256) = *(_BYTE *)(v142 + 256);
    *(_BYTE *)(v141 + 257) = *(_BYTE *)(v142 + 257);
    *(_DWORD *)(v141 + 260) = *(_DWORD *)(v142 + 260);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v153 = *(_OWORD *)(v142 + 224);
    *(_OWORD *)(v141 + 208) = *(_OWORD *)(v142 + 208);
    *(_OWORD *)(v141 + 224) = v153;
    *(_OWORD *)(v141 + 240) = *(_OWORD *)(v142 + 240);
    *(_QWORD *)(v141 + 256) = *(_QWORD *)(v142 + 256);
    v154 = *(_OWORD *)(v142 + 160);
    *(_OWORD *)(v141 + 144) = *(_OWORD *)v147;
    *(_OWORD *)(v141 + 160) = v154;
    v155 = *(_OWORD *)(v142 + 192);
    *(_OWORD *)(v141 + 176) = *(_OWORD *)(v142 + 176);
    *(_OWORD *)(v141 + 192) = v155;
  }
  v156 = *(_QWORD *)(v142 + 272);
  *(_QWORD *)(v141 + 264) = *(_QWORD *)(v142 + 264);
  *(_QWORD *)(v141 + 272) = v156;
  v157 = v198[36];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (_QWORD *)(a2 + v157);
  v160 = type metadata accessor for PartialHandMultiCam(0);
  v161 = *(_QWORD *)(v160 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160))
  {
    v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
  }
  else
  {
    v163 = v159[1];
    *v158 = *v159;
    v158[1] = v163;
    v164 = *(int *)(v160 + 24);
    v196 = (char *)v158 + v164;
    v165 = (char *)v159 + v164;
    v166 = type metadata accessor for UnknownStorage();
    v167 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v128 = v198;
    v167(v196, v165, v166);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
  }
  v168 = v128[37];
  v169 = a1 + v168;
  v170 = a2 + v168;
  *(_QWORD *)v169 = *(_QWORD *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  v171 = v128[38];
  v172 = a1 + v171;
  v173 = (__int128 *)(a2 + v171);
  *(_QWORD *)(v172 + 45) = *(_QWORD *)((char *)v173 + 45);
  v174 = v173[2];
  v175 = *v173;
  *(_OWORD *)(v172 + 16) = v173[1];
  *(_OWORD *)(v172 + 32) = v174;
  *(_OWORD *)v172 = v175;
  v176 = a3[5];
  v177 = a3[6];
  v178 = a1 + v176;
  v179 = a2 + v176;
  *(_OWORD *)v178 = *(_OWORD *)v179;
  *(_QWORD *)(v178 + 16) = *(_QWORD *)(v179 + 16);
  v180 = a1 + v177;
  v181 = a2 + v177;
  *(_DWORD *)v180 = *(_DWORD *)v181;
  *(_BYTE *)(v180 + 4) = *(_BYTE *)(v181 + 4);
  v182 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v182) = *(_BYTE *)(a2 + v182);
  v183 = a3[9];
  v184 = a3[10];
  v185 = (_OWORD *)(a1 + v183);
  v186 = (_OWORD *)(a2 + v183);
  *v185 = *v186;
  *(_OWORD *)((char *)v185 + 12) = *(_OWORD *)((char *)v186 + 12);
  v187 = (_OWORD *)(a1 + v184);
  v188 = (_OWORD *)(a2 + v184);
  *v187 = *v188;
  *(_OWORD *)((char *)v187 + 9) = *(_OWORD *)((char *)v188 + 9);
  return a1;
}

uint64_t assignWithCopy for DerivedHandAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(_BYTE *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  void (*v155)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  _BYTE *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(_BYTE *, uint64_t, uint64_t);
  int v180;
  int v181;
  uint64_t v182;
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(char *, uint64_t, uint64_t);
  int v193;
  int v194;
  uint64_t v195;
  void (*v196)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t (*v203)(char *, uint64_t, uint64_t);
  int v204;
  int v205;
  uint64_t v206;
  void (*v207)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t (*v214)(_QWORD *, uint64_t, uint64_t);
  int v215;
  int v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __int128 *v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  __int128 *v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t (*v287)(_QWORD *, uint64_t, uint64_t);
  int v288;
  int v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  void (*v293)(char *, char *, uint64_t);
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _OWORD *v318;
  __int128 *v319;
  __int128 v320;
  uint64_t v322;
  char *v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  _BYTE *v327;
  _BYTE *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  char *__dsta;
  _BYTE *__dst;
  char *v338;
  uint64_t v339;
  void (*v340)(uint64_t, char *, uint64_t);
  uint64_t v341;
  int *v342;
  int *v343;
  char *v344;
  int *v346;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (__int128 *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    }
    else
    {
      outlined destroy of HandPose(v5);
      v13 = v8[3];
      v15 = *v8;
      v14 = v8[1];
      *(_OWORD *)(v5 + 32) = v8[2];
      *(_OWORD *)(v5 + 48) = v13;
      *(_OWORD *)v5 = v15;
      *(_OWORD *)(v5 + 16) = v14;
      v17 = v8[5];
      v16 = v8[6];
      v18 = v8[4];
      *(_QWORD *)(v5 + 112) = *((_QWORD *)v8 + 14);
      *(_OWORD *)(v5 + 80) = v17;
      *(_OWORD *)(v5 + 96) = v16;
      *(_OWORD *)(v5 + 64) = v18;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    v10 = *(_OWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *v8;
    v20 = *(_OWORD *)(a2 + 32);
    v21 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v5 + 48) = v21;
    *(_OWORD *)v5 = v19;
    *(_OWORD *)(v5 + 16) = v20;
    v22 = *(_OWORD *)(a2 + 80);
    v23 = *(_OWORD *)(a2 + 96);
    v24 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(v5 + 80) = v23;
    *(_OWORD *)(v5 + 96) = v24;
    *(_OWORD *)(v5 + 64) = v22;
  }
  v25 = *(_QWORD *)(a1 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v26 = *(_OWORD *)(a2 + 160);
  v27 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v27;
  *(_OWORD *)(a1 + 160) = v26;
  v28 = *(_QWORD *)(a2 + 200);
  if (v25)
  {
    if (v28)
    {
      *(_QWORD *)(a1 + 200) = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined destroy of PoseSpec(a1 + 200);
  }
  else if (v28)
  {
    *(_QWORD *)(a1 + 200) = v28;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
LABEL_15:
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  v29 = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v29;
  v30 = *(_QWORD *)(a2 + 240);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v30;
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v31;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  v32 = *(_DWORD *)(a2 + 276);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_DWORD *)(a1 + 276) = v32;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v33 = (int *)type metadata accessor for HandDescriptor();
  v34 = v33[17];
  v35 = a1 + v34;
  v36 = (char *)(a2 + v34);
  v37 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39((uint64_t)v36, 1, v37);
  v346 = v33;
  if (!v40)
  {
    if (!v41)
    {
      v52 = type metadata accessor for UnknownStorage();
      v341 = *(_QWORD *)(v52 - 8);
      v53 = *(void (**)(uint64_t, char *, uint64_t))(v341 + 24);
      v53(v35, v36, v52);
      v54 = *(int *)(v37 + 20);
      v55 = (char *)(v35 + v54);
      v56 = &v36[v54];
      v57 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v58 = *(_QWORD *)(v57 - 8);
      v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
      v60 = v59(v55, 1, v57);
      v61 = v59(v56, 1, v57);
      if (v60)
      {
        v33 = v346;
        if (!v61)
        {
          *(_QWORD *)v55 = *(_QWORD *)v56;
          v62 = *(int *)(v57 + 20);
          v63 = &v55[v62];
          v64 = &v56[v62];
          v65 = *(void (**)(char *, char *, uint64_t))(v341 + 16);
          swift_bridgeObjectRetain();
          v66 = v63;
          v33 = v346;
          v65(v66, v64, v52);
          v67 = *(int *)(v57 + 24);
          v68 = &v55[v67];
          v69 = &v56[v67];
          v70 = v69[4];
          *(_DWORD *)v68 = *(_DWORD *)v69;
          v68[4] = v70;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
          goto LABEL_28;
        }
      }
      else
      {
        v33 = v346;
        if (!v61)
        {
          *(_QWORD *)v55 = *(_QWORD *)v56;
          swift_bridgeObjectRetain();
          v33 = v346;
          swift_bridgeObjectRelease();
          v53((uint64_t)&v55[*(int *)(v57 + 20)], &v56[*(int *)(v57 + 20)], v52);
          v164 = *(int *)(v57 + 24);
          v165 = &v55[v164];
          v166 = &v56[v164];
          v167 = v166[4];
          *(_DWORD *)v165 = *(_DWORD *)v166;
          v165[4] = v167;
          goto LABEL_28;
        }
        outlined destroy of Matrix3x3PB((uint64_t)v55, type metadata accessor for RawThumbIndexTapFeaturesPB);
      }
      v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?)
                                  - 8)
                      + 64);
      v50 = v55;
      v51 = v56;
LABEL_22:
      memcpy(v50, v51, v49);
      goto LABEL_28;
    }
    outlined destroy of Matrix3x3PB(v35, type metadata accessor for ThumbIndexTapFeaturesPB);
LABEL_21:
    v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?)
                                - 8)
                    + 64);
    v50 = (void *)v35;
    v51 = v36;
    goto LABEL_22;
  }
  if (v41)
    goto LABEL_21;
  v42 = type metadata accessor for UnknownStorage();
  v340 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
  v340(v35, v36, v42);
  v43 = *(int *)(v37 + 20);
  v44 = (_QWORD *)(v35 + v43);
  v45 = &v36[v43];
  v46 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    *v44 = *(_QWORD *)v45;
    v71 = *(int *)(v46 + 20);
    __dsta = &v45[v71];
    v338 = (char *)v44 + v71;
    swift_bridgeObjectRetain();
    v340((uint64_t)v338, __dsta, v42);
    v72 = *(int *)(v46 + 24);
    v73 = (char *)v44 + v72;
    v74 = &v45[v72];
    v75 = v74[4];
    *(_DWORD *)v73 = *(_DWORD *)v74;
    v73[4] = v75;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v33 = v346;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_28:
  *(_QWORD *)(a1 + v33[18]) = *(_QWORD *)(a2 + v33[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v76 = v33[19];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *v78;
  *(_BYTE *)(v77 + 16) = *((_BYTE *)v78 + 16);
  *(_OWORD *)v77 = v79;
  v80 = v33[20];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_BYTE *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_BYTE *)(v81 + 16) = v83;
  v84 = v33[21];
  v85 = a1 + v84;
  v86 = a2 + v84;
  v87 = *(_BYTE *)(v86 + 16);
  *(_OWORD *)v85 = *(_OWORD *)v86;
  *(_BYTE *)(v85 + 16) = v87;
  v88 = v33[22];
  v89 = a1 + v88;
  v90 = a2 + v88;
  *(_OWORD *)v89 = *(_OWORD *)v90;
  v91 = *(_OWORD *)(v90 + 16);
  v92 = *(_OWORD *)(v90 + 32);
  v93 = *(_OWORD *)(v90 + 48);
  *(_BYTE *)(v89 + 64) = *(_BYTE *)(v90 + 64);
  *(_OWORD *)(v89 + 32) = v92;
  *(_OWORD *)(v89 + 48) = v93;
  *(_OWORD *)(v89 + 16) = v91;
  *(_QWORD *)(a1 + v33[23]) = *(_QWORD *)(a2 + v33[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v94 = v33[24];
  v95 = a1 + v94;
  v96 = a2 + v94;
  v97 = type metadata accessor for HandDescriptorInternal();
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  v100 = v99(v95, 1, v97);
  v101 = v99(v96, 1, v97);
  if (!v100)
  {
    if (v101)
    {
      outlined destroy of Matrix3x3PB(v95, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      goto LABEL_34;
    }
    *(_QWORD *)v95 = *(_QWORD *)v96;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
    v106 = (_OWORD *)(v95 + 16);
    v107 = (__int128 *)(v96 + 16);
    v108 = *(_QWORD *)(v96 + 48);
    if (*(_QWORD *)(v95 + 48))
    {
      if (v108)
      {
        *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
        *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
        *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
        *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
        v109 = *(_QWORD *)(v96 + 32);
        *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
        *(_QWORD *)(v95 + 32) = v109;
        *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
        *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
        *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v110 = *(_QWORD *)(v96 + 112);
        *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
        *(_QWORD *)(v95 + 112) = v110;
        *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
        *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      }
      else
      {
        outlined destroy of PinchInternalData(v95 + 16);
        v158 = *(_OWORD *)(v96 + 64);
        v160 = *v107;
        v159 = *(_OWORD *)(v96 + 32);
        *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
        *(_OWORD *)(v95 + 64) = v158;
        *v106 = v160;
        *(_OWORD *)(v95 + 32) = v159;
        v162 = *(_OWORD *)(v96 + 96);
        v161 = *(_OWORD *)(v96 + 112);
        v163 = *(_OWORD *)(v96 + 80);
        *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
        *(_OWORD *)(v95 + 96) = v162;
        *(_OWORD *)(v95 + 112) = v161;
        *(_OWORD *)(v95 + 80) = v163;
      }
    }
    else if (v108)
    {
      *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
      *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
      *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
      *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
      v156 = *(_QWORD *)(v96 + 32);
      *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
      *(_QWORD *)(v95 + 32) = v156;
      *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
      *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
      *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
      *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
      *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
      *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
      *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
      *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
      v157 = *(_QWORD *)(v96 + 112);
      *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
      *(_QWORD *)(v95 + 112) = v157;
      *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
      *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v168 = *v107;
      v169 = *(_OWORD *)(v96 + 32);
      v170 = *(_OWORD *)(v96 + 64);
      *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
      *(_OWORD *)(v95 + 64) = v170;
      *v106 = v168;
      *(_OWORD *)(v95 + 32) = v169;
      v171 = *(_OWORD *)(v96 + 80);
      v172 = *(_OWORD *)(v96 + 96);
      v173 = *(_OWORD *)(v96 + 112);
      *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      *(_OWORD *)(v95 + 96) = v172;
      *(_OWORD *)(v95 + 112) = v173;
      *(_OWORD *)(v95 + 80) = v171;
    }
    *(_QWORD *)(v95 + 136) = *(_QWORD *)(v96 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v95 + 144) = *(_DWORD *)(v96 + 144);
    *(_DWORD *)(v95 + 148) = *(_DWORD *)(v96 + 148);
    *(_QWORD *)(v95 + 152) = *(_QWORD *)(v96 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    memcpy((void *)(v95 + 160), (const void *)(v96 + 160), 0x373uLL);
    v343 = (int *)v97;
    v174 = *(int *)(v97 + 40);
    v175 = (_BYTE *)(v95 + v174);
    v176 = (_BYTE *)(v96 + v174);
    v177 = type metadata accessor for ActionInternalPB(0);
    v178 = *(_QWORD *)(v177 - 8);
    v179 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v178 + 48);
    v180 = v179(v175, 1, v177);
    v181 = v179(v176, 1, v177);
    if (v180)
    {
      if (!v181)
      {
        *v175 = *v176;
        v182 = *(int *)(v177 + 20);
        v183 = &v175[v182];
        v184 = &v176[v182];
        v185 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v183, v184, v185);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v175, 0, 1, v177);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v181)
      {
        *v175 = *v176;
        v326 = *(int *)(v177 + 20);
        v327 = &v175[v326];
        v328 = &v176[v326];
        v329 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v329 - 8) + 24))(v327, v328, v329);
LABEL_66:
        v187 = v343[11];
        v188 = (char *)(v95 + v187);
        v189 = (char *)(v96 + v187);
        v190 = type metadata accessor for UnsureInternalPB(0);
        v191 = *(_QWORD *)(v190 - 8);
        v192 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v191 + 48);
        v193 = v192(v188, 1, v190);
        v194 = v192(v189, 1, v190);
        if (v193)
        {
          if (!v194)
          {
            v195 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v188, v189, v195);
            *(_QWORD *)&v188[*(int *)(v190 + 20)] = *(_QWORD *)&v189[*(int *)(v190 + 20)];
            v196 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v191 + 56);
            swift_retain();
            v196(v188, 0, 1, v190);
            goto LABEL_72;
          }
        }
        else
        {
          if (!v194)
          {
            v330 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v330 - 8) + 24))(v188, v189, v330);
            *(_QWORD *)&v188[*(int *)(v190 + 20)] = *(_QWORD *)&v189[*(int *)(v190 + 20)];
            swift_retain();
            swift_release();
LABEL_72:
            v198 = v343[12];
            v199 = (char *)(v95 + v198);
            v200 = (char *)(v96 + v198);
            v201 = type metadata accessor for ObjectInteractionStateInternalPB(0);
            v202 = *(_QWORD *)(v201 - 8);
            v203 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v202 + 48);
            v204 = v203(v199, 1, v201);
            v205 = v203(v200, 1, v201);
            if (v204)
            {
              if (!v205)
              {
                v206 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 16))(v199, v200, v206);
                *(_QWORD *)&v199[*(int *)(v201 + 20)] = *(_QWORD *)&v200[*(int *)(v201 + 20)];
                v207 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56);
                swift_retain();
                v207(v199, 0, 1, v201);
                goto LABEL_78;
              }
            }
            else
            {
              if (!v205)
              {
                v331 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v331 - 8) + 24))(v199, v200, v331);
                *(_QWORD *)&v199[*(int *)(v201 + 20)] = *(_QWORD *)&v200[*(int *)(v201 + 20)];
                swift_retain();
                swift_release();
LABEL_78:
                v209 = v343[13];
                v210 = (_QWORD *)(v95 + v209);
                v211 = (_QWORD *)(v96 + v209);
                v212 = type metadata accessor for HomePinchInternalPB(0);
                v213 = *(_QWORD *)(v212 - 8);
                v214 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v213 + 48);
                v215 = v214(v210, 1, v212);
                v216 = v214(v211, 1, v212);
                if (v215)
                {
                  if (!v216)
                  {
                    *v210 = *v211;
                    v217 = *(int *)(v212 + 20);
                    v218 = (char *)v210 + v217;
                    v219 = (char *)v211 + v217;
                    v220 = type metadata accessor for UnknownStorage();
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v220 - 8) + 16))(v218, v219, v220);
                    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v210, 0, 1, v212);
LABEL_84:
                    *(_QWORD *)(v95 + v343[14]) = *(_QWORD *)(v96 + v343[14]);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v33 = v346;
                    goto LABEL_85;
                  }
                }
                else
                {
                  if (!v216)
                  {
                    *v210 = *v211;
                    v332 = *(int *)(v212 + 20);
                    v333 = (char *)v210 + v332;
                    v334 = (char *)v211 + v332;
                    v335 = type metadata accessor for UnknownStorage();
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v335 - 8) + 24))(v333, v334, v335);
                    goto LABEL_84;
                  }
                  outlined destroy of Matrix3x3PB((uint64_t)v210, type metadata accessor for HomePinchInternalPB);
                }
                v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
                memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
                goto LABEL_84;
              }
              outlined destroy of Matrix3x3PB((uint64_t)v199, type metadata accessor for ObjectInteractionStateInternalPB);
            }
            v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
            memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
            goto LABEL_78;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v188, type metadata accessor for UnsureInternalPB);
        }
        v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
        memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
        goto LABEL_72;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v175, type metadata accessor for ActionInternalPB);
    }
    v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
    goto LABEL_66;
  }
  if (v101)
  {
LABEL_34:
    v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy((void *)v95, (const void *)v96, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    goto LABEL_85;
  }
  v339 = v98;
  v342 = (int *)v97;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  v102 = *(_QWORD *)(v96 + 48);
  swift_bridgeObjectRetain();
  if (v102)
  {
    *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
    *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
    *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
    *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
    v103 = *(_QWORD *)(v96 + 32);
    *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
    *(_QWORD *)(v95 + 32) = v103;
    *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
    *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
    *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
    *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
    *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
    *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
    *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
    *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
    v104 = *(_QWORD *)(v96 + 112);
    *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
    *(_QWORD *)(v95 + 112) = v104;
    *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
    *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v111 = *(_OWORD *)(v96 + 16);
    v112 = *(_OWORD *)(v96 + 32);
    v113 = *(_OWORD *)(v96 + 64);
    *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
    *(_OWORD *)(v95 + 64) = v113;
    *(_OWORD *)(v95 + 16) = v111;
    *(_OWORD *)(v95 + 32) = v112;
    v114 = *(_OWORD *)(v96 + 80);
    v115 = *(_OWORD *)(v96 + 96);
    v116 = *(_OWORD *)(v96 + 112);
    *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
    *(_OWORD *)(v95 + 96) = v115;
    *(_OWORD *)(v95 + 112) = v116;
    *(_OWORD *)(v95 + 80) = v114;
  }
  *(_QWORD *)(v95 + 136) = *(_QWORD *)(v96 + 136);
  *(_DWORD *)(v95 + 144) = *(_DWORD *)(v96 + 144);
  *(_DWORD *)(v95 + 148) = *(_DWORD *)(v96 + 148);
  *(_QWORD *)(v95 + 152) = *(_QWORD *)(v96 + 152);
  memcpy((void *)(v95 + 160), (const void *)(v96 + 160), 0x373uLL);
  v117 = *(int *)(v97 + 40);
  __dst = (_BYTE *)(v95 + v117);
  v118 = (_BYTE *)(v96 + v117);
  v119 = type metadata accessor for ActionInternalPB(0);
  v120 = *(_QWORD *)(v119 - 8);
  v121 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v120 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v121(v118, 1, v119))
  {
    v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(__dst, v118, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    *__dst = *v118;
    v123 = *(int *)(v119 + 20);
    v124 = &__dst[v123];
    v125 = &v118[v123];
    v126 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v120 + 56))(__dst, 0, 1, v119);
  }
  v127 = v342;
  v128 = v342[11];
  v129 = (char *)(v95 + v128);
  v130 = (char *)(v96 + v128);
  v131 = type metadata accessor for UnsureInternalPB(0);
  v132 = *(_QWORD *)(v131 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
  {
    v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
  }
  else
  {
    v134 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v129, v130, v134);
    *(_QWORD *)&v129[*(int *)(v131 + 20)] = *(_QWORD *)&v130[*(int *)(v131 + 20)];
    v135 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56);
    swift_retain();
    v135(v129, 0, 1, v131);
  }
  v136 = v342[12];
  v137 = (char *)(v95 + v136);
  v138 = (char *)(v96 + v136);
  v139 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v140 = *(_QWORD *)(v139 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
  {
    v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
  }
  else
  {
    v142 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16))(v137, v138, v142);
    *(_QWORD *)&v137[*(int *)(v139 + 20)] = *(_QWORD *)&v138[*(int *)(v139 + 20)];
    v143 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56);
    swift_retain();
    v143(v137, 0, 1, v139);
  }
  v144 = v342[13];
  v145 = (_QWORD *)(v95 + v144);
  v146 = (_QWORD *)(v96 + v144);
  v147 = type metadata accessor for HomePinchInternalPB(0);
  v148 = *(_QWORD *)(v147 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
  {
    v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
  }
  else
  {
    *v145 = *v146;
    v150 = *(int *)(v147 + 20);
    v151 = (char *)v145 + v150;
    v152 = (char *)v146 + v150;
    v153 = type metadata accessor for UnknownStorage();
    v154 = v152;
    v127 = v342;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v151, v154, v153);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
  }
  v33 = v346;
  *(_QWORD *)(v95 + v127[14]) = *(_QWORD *)(v96 + v127[14]);
  v155 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v339 + 56);
  swift_bridgeObjectRetain();
  v155(v95, 0, 1, v127);
LABEL_85:
  v222 = v33[25];
  v223 = a1 + v222;
  v224 = (uint64_t *)(a2 + v222);
  v225 = *v224;
  *(_BYTE *)(v223 + 8) = *((_BYTE *)v224 + 8);
  *(_QWORD *)v223 = v225;
  *(_QWORD *)(a1 + v33[26]) = *(_QWORD *)(a2 + v33[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v226 = v33[27];
  v227 = a1 + v226;
  v228 = (uint64_t *)(a2 + v226);
  v229 = *v228;
  *(_BYTE *)(v227 + 8) = *((_BYTE *)v228 + 8);
  *(_QWORD *)v227 = v229;
  v230 = v33[28];
  v231 = a1 + v230;
  v232 = (__int128 *)(a2 + v230);
  v234 = v232[1];
  v233 = v232[2];
  v235 = *v232;
  *(_WORD *)(v231 + 48) = *((_WORD *)v232 + 24);
  *(_OWORD *)(v231 + 16) = v234;
  *(_OWORD *)(v231 + 32) = v233;
  *(_OWORD *)v231 = v235;
  *(_QWORD *)(a1 + v33[29]) = *(_QWORD *)(a2 + v33[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v236 = v33[30];
  v237 = a1 + v236;
  v238 = (uint64_t *)(a2 + v236);
  v239 = *v238;
  *(_BYTE *)(v237 + 8) = *((_BYTE *)v238 + 8);
  *(_QWORD *)v237 = v239;
  v240 = v33[31];
  v241 = (_QWORD *)(a1 + v240);
  v242 = (__int128 *)(a2 + v240);
  v243 = *(_QWORD *)(a2 + v240);
  if (*(_QWORD *)(a1 + v240))
  {
    if (v243)
    {
      *v241 = v243;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[1] = *((_QWORD *)v242 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[2] = *((_QWORD *)v242 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[3] = *((_QWORD *)v242 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[4] = *((_QWORD *)v242 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[5] = *((_QWORD *)v242 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[6] = *((_QWORD *)v242 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ObjectInteractionData(a1 + v240);
      v245 = v242[1];
      v244 = v242[2];
      v246 = *v242;
      v241[6] = *((_QWORD *)v242 + 6);
      *((_OWORD *)v241 + 1) = v245;
      *((_OWORD *)v241 + 2) = v244;
      *(_OWORD *)v241 = v246;
    }
  }
  else if (v243)
  {
    *v241 = v243;
    v241[1] = *((_QWORD *)v242 + 1);
    v241[2] = *((_QWORD *)v242 + 2);
    v241[3] = *((_QWORD *)v242 + 3);
    v241[4] = *((_QWORD *)v242 + 4);
    v241[5] = *((_QWORD *)v242 + 5);
    v241[6] = *((_QWORD *)v242 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = v346;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v247 = *v242;
    v248 = v242[1];
    v249 = v242[2];
    v241[6] = *((_QWORD *)v242 + 6);
    *((_OWORD *)v241 + 1) = v248;
    *((_OWORD *)v241 + 2) = v249;
    *(_OWORD *)v241 = v247;
  }
  v250 = v33[32];
  v251 = a1 + v250;
  v252 = a2 + v250;
  *(_QWORD *)v251 = *(_QWORD *)v252;
  *(_DWORD *)(v251 + 8) = *(_DWORD *)(v252 + 8);
  *(_DWORD *)(v251 + 12) = *(_DWORD *)(v252 + 12);
  *(_QWORD *)(v251 + 16) = *(_QWORD *)(v252 + 16);
  *(_OWORD *)(v251 + 32) = *(_OWORD *)(v252 + 32);
  *(_QWORD *)(v251 + 48) = *(_QWORD *)(v252 + 48);
  *(_BYTE *)(v251 + 56) = *(_BYTE *)(v252 + 56);
  *(_DWORD *)(v251 + 60) = *(_DWORD *)(v252 + 60);
  *(_DWORD *)(v251 + 64) = *(_DWORD *)(v252 + 64);
  *(_BYTE *)(v251 + 68) = *(_BYTE *)(v252 + 68);
  *(_BYTE *)(v251 + 69) = *(_BYTE *)(v252 + 69);
  v253 = v33[33];
  v254 = a1 + v253;
  v255 = (uint64_t *)(a2 + v253);
  v256 = *v255;
  *(_BYTE *)(v254 + 8) = *((_BYTE *)v255 + 8);
  *(_QWORD *)v254 = v256;
  v257 = v33[34];
  v258 = a1 + v257;
  v259 = a2 + v257;
  *(_DWORD *)v258 = *(_DWORD *)v259;
  *(_QWORD *)(v258 + 8) = *(_QWORD *)(v259 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v260 = v33[35];
  v261 = a1 + v260;
  v262 = a2 + v260;
  *(_OWORD *)v261 = *(_OWORD *)(a2 + v260);
  *(_OWORD *)(v261 + 16) = *(_OWORD *)(a2 + v260 + 16);
  *(_OWORD *)(v261 + 32) = *(_OWORD *)(a2 + v260 + 32);
  *(_OWORD *)(v261 + 48) = *(_OWORD *)(a2 + v260 + 48);
  *(_DWORD *)(v261 + 64) = *(_DWORD *)(a2 + v260 + 64);
  *(_OWORD *)(v261 + 80) = *(_OWORD *)(a2 + v260 + 80);
  *(_OWORD *)(v261 + 96) = *(_OWORD *)(a2 + v260 + 96);
  *(_OWORD *)(v261 + 112) = *(_OWORD *)(a2 + v260 + 112);
  *(_OWORD *)(v261 + 128) = *(_OWORD *)(a2 + v260 + 128);
  v263 = a1 + v260 + 144;
  v265 = a2 + v260 + 144;
  v264 = *(_QWORD *)v265;
  if (*(_QWORD *)v263)
  {
    if (v264)
    {
      *(_QWORD *)(v261 + 144) = v264;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v261 + 152) = *(_QWORD *)(v262 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(v261 + 160) = *(_OWORD *)(v262 + 160);
      *(_OWORD *)(v261 + 176) = *(_OWORD *)(v262 + 176);
      *(_OWORD *)(v261 + 192) = *(_OWORD *)(v262 + 192);
      *(_OWORD *)(v261 + 208) = *(_OWORD *)(v262 + 208);
      *(_OWORD *)(v261 + 224) = *(_OWORD *)(v262 + 224);
      *(_OWORD *)(v261 + 240) = *(_OWORD *)(v262 + 240);
      *(_BYTE *)(v261 + 256) = *(_BYTE *)(v262 + 256);
      *(_BYTE *)(v261 + 257) = *(_BYTE *)(v262 + 257);
      *(_DWORD *)(v261 + 260) = *(_DWORD *)(v262 + 260);
    }
    else
    {
      outlined destroy of HandPose(a1 + v260 + 144);
      v270 = *(_OWORD *)(v265 + 48);
      v272 = *(_OWORD *)v265;
      v271 = *(_OWORD *)(v265 + 16);
      *(_OWORD *)(v263 + 32) = *(_OWORD *)(v265 + 32);
      *(_OWORD *)(v263 + 48) = v270;
      *(_OWORD *)v263 = v272;
      *(_OWORD *)(v263 + 16) = v271;
      v274 = *(_OWORD *)(v265 + 80);
      v273 = *(_OWORD *)(v265 + 96);
      v275 = *(_OWORD *)(v265 + 64);
      *(_QWORD *)(v263 + 112) = *(_QWORD *)(v265 + 112);
      *(_OWORD *)(v263 + 80) = v274;
      *(_OWORD *)(v263 + 96) = v273;
      *(_OWORD *)(v263 + 64) = v275;
    }
  }
  else if (v264)
  {
    *(_QWORD *)(v261 + 144) = v264;
    *(_QWORD *)(v261 + 152) = *(_QWORD *)(v262 + 152);
    v266 = *(_OWORD *)(v262 + 176);
    *(_OWORD *)(v261 + 160) = *(_OWORD *)(v262 + 160);
    *(_OWORD *)(v261 + 176) = v266;
    v267 = *(_OWORD *)(v262 + 192);
    v268 = *(_OWORD *)(v262 + 208);
    v269 = *(_OWORD *)(v262 + 240);
    *(_OWORD *)(v261 + 224) = *(_OWORD *)(v262 + 224);
    *(_OWORD *)(v261 + 240) = v269;
    *(_OWORD *)(v261 + 192) = v267;
    *(_OWORD *)(v261 + 208) = v268;
    *(_BYTE *)(v261 + 256) = *(_BYTE *)(v262 + 256);
    *(_BYTE *)(v261 + 257) = *(_BYTE *)(v262 + 257);
    *(_DWORD *)(v261 + 260) = *(_DWORD *)(v262 + 260);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v276 = *(_OWORD *)v265;
    v277 = *(_OWORD *)(a2 + v260 + 160);
    v278 = *(_OWORD *)(a2 + v260 + 192);
    *(_OWORD *)(a1 + v260 + 176) = *(_OWORD *)(a2 + v260 + 176);
    *(_OWORD *)(a1 + v260 + 192) = v278;
    *(_OWORD *)v263 = v276;
    *(_OWORD *)(a1 + v260 + 160) = v277;
    v279 = *(_OWORD *)(a2 + v260 + 208);
    v280 = *(_OWORD *)(a2 + v260 + 224);
    v281 = *(_OWORD *)(a2 + v260 + 240);
    *(_QWORD *)(a1 + v260 + 256) = *(_QWORD *)(a2 + v260 + 256);
    *(_OWORD *)(a1 + v260 + 224) = v280;
    *(_OWORD *)(a1 + v260 + 240) = v281;
    *(_OWORD *)(a1 + v260 + 208) = v279;
  }
  *(_QWORD *)(v261 + 264) = *(_QWORD *)(v262 + 264);
  *(_QWORD *)(v261 + 272) = *(_QWORD *)(v262 + 272);
  v282 = v33[36];
  v283 = (_QWORD *)(a1 + v282);
  v284 = (_QWORD *)(a2 + v282);
  v285 = type metadata accessor for PartialHandMultiCam(0);
  v286 = *(_QWORD *)(v285 - 8);
  v287 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v286 + 48);
  v288 = v287(v283, 1, v285);
  v289 = v287(v284, 1, v285);
  if (!v288)
  {
    if (!v289)
    {
      *v283 = *v284;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v283[1] = v284[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v322 = *(int *)(v285 + 24);
      v323 = (char *)v283 + v322;
      v324 = (char *)v284 + v322;
      v325 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v325 - 8) + 24))(v323, v324, v325);
      goto LABEL_105;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v283, type metadata accessor for PartialHandMultiCam);
    goto LABEL_104;
  }
  if (v289)
  {
LABEL_104:
    v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v283, v284, *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64));
    goto LABEL_105;
  }
  *v283 = *v284;
  v283[1] = v284[1];
  v290 = *(int *)(v285 + 24);
  v291 = (char *)v283 + v290;
  v344 = (char *)v284 + v290;
  v292 = type metadata accessor for UnknownStorage();
  v293 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v292 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v294 = v291;
  v33 = v346;
  v293(v294, v344, v292);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v286 + 56))(v283, 0, 1, v285);
LABEL_105:
  v296 = v33[37];
  v297 = a1 + v296;
  v298 = a2 + v296;
  *(_BYTE *)v297 = *(_BYTE *)v298;
  v299 = *(_DWORD *)(v298 + 4);
  *(_BYTE *)(v297 + 8) = *(_BYTE *)(v298 + 8);
  *(_DWORD *)(v297 + 4) = v299;
  v300 = v33[38];
  v301 = a1 + v300;
  v302 = a2 + v300;
  *(_BYTE *)v301 = *(_BYTE *)v302;
  *(_BYTE *)(v301 + 1) = *(_BYTE *)(v302 + 1);
  *(_BYTE *)(v301 + 2) = *(_BYTE *)(v302 + 2);
  *(_BYTE *)(v301 + 3) = *(_BYTE *)(v302 + 3);
  v303 = *(_QWORD *)(v302 + 8);
  *(_BYTE *)(v301 + 16) = *(_BYTE *)(v302 + 16);
  *(_QWORD *)(v301 + 8) = v303;
  v304 = *(_QWORD *)(v302 + 24);
  *(_BYTE *)(v301 + 32) = *(_BYTE *)(v302 + 32);
  *(_QWORD *)(v301 + 24) = v304;
  v305 = *(_QWORD *)(v302 + 40);
  *(_BYTE *)(v301 + 48) = *(_BYTE *)(v302 + 48);
  *(_QWORD *)(v301 + 40) = v305;
  *(_BYTE *)(v301 + 49) = *(_BYTE *)(v302 + 49);
  *(_BYTE *)(v301 + 50) = *(_BYTE *)(v302 + 50);
  *(_BYTE *)(v301 + 51) = *(_BYTE *)(v302 + 51);
  *(_BYTE *)(v301 + 52) = *(_BYTE *)(v302 + 52);
  v306 = a3[5];
  v307 = a1 + v306;
  v308 = a2 + v306;
  *(_QWORD *)v307 = *(_QWORD *)v308;
  *(_DWORD *)(v307 + 8) = *(_DWORD *)(v308 + 8);
  *(_DWORD *)(v307 + 12) = *(_DWORD *)(v308 + 12);
  *(_QWORD *)(v307 + 16) = *(_QWORD *)(v308 + 16);
  v309 = a3[6];
  v310 = a1 + v309;
  v311 = a2 + v309;
  LODWORD(v305) = *(_DWORD *)v311;
  *(_BYTE *)(v310 + 4) = *(_BYTE *)(v311 + 4);
  *(_DWORD *)v310 = v305;
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v312 = a3[9];
  v313 = a1 + v312;
  v314 = (uint64_t *)(a2 + v312);
  v315 = *v314;
  *(_BYTE *)(v313 + 8) = *((_BYTE *)v314 + 8);
  *(_QWORD *)v313 = v315;
  LOWORD(v315) = *(_WORD *)((char *)v314 + 9);
  *(_BYTE *)(v313 + 11) = *((_BYTE *)v314 + 11);
  *(_WORD *)(v313 + 9) = v315;
  v316 = v314[2];
  *(_BYTE *)(v313 + 24) = *((_BYTE *)v314 + 24);
  *(_QWORD *)(v313 + 16) = v316;
  LOWORD(v316) = *(_WORD *)((char *)v314 + 25);
  *(_BYTE *)(v313 + 27) = *((_BYTE *)v314 + 27);
  *(_WORD *)(v313 + 25) = v316;
  v317 = a3[10];
  v318 = (_OWORD *)(a1 + v317);
  v319 = (__int128 *)(a2 + v317);
  v320 = *v319;
  *(_OWORD *)((char *)v318 + 9) = *(__int128 *)((char *)v319 + 9);
  *v318 = v320;
  return a1;
}

uint64_t initializeWithTake for DerivedHandAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int *v46;
  unsigned int (**v47)(_QWORD *, uint64_t, int *);
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD *v137;
  _OWORD *v138;
  _OWORD *v139;
  _OWORD *v140;
  uint64_t v142;
  _BYTE *v143;
  char *v144;
  char *__dst;
  void *__dsta;
  int *v147;
  int *v148;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v10 = *(_OWORD *)(a2 + 232);
  v11 = *(_OWORD *)(a2 + 248);
  v12 = *(_OWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v12;
  *(_OWORD *)(a1 + 248) = v11;
  *(_OWORD *)(a1 + 232) = v10;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v13 = (int *)type metadata accessor for HandDescriptor();
  v14 = v13[17];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v147 = a3;
    v20 = type metadata accessor for UnknownStorage();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v15, v16, v20);
    v22 = *(int *)(v17 + 20);
    __dst = &v15[v22];
    v23 = &v16[v22];
    v24 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v142 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v23, 1, v24))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v23;
      v21(&__dst[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v20);
      v26 = *(int *)(v24 + 24);
      v27 = &__dst[v26];
      v28 = &v23[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(__dst, 0, 1, v24);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    a3 = v147;
  }
  *(_QWORD *)(a1 + v13[18]) = *(_QWORD *)(a2 + v13[18]);
  v29 = v13[19];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_BYTE *)(v30 + 16) = *(_BYTE *)(v31 + 16);
  v32 = v13[20];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  v35 = v13[21];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  v38 = v13[22];
  v39 = a1 + v38;
  v40 = a2 + v38;
  *(_BYTE *)(v39 + 64) = *(_BYTE *)(v40 + 64);
  v41 = *(_OWORD *)(v40 + 48);
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
  *(_OWORD *)(v39 + 48) = v41;
  v42 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v42;
  *(_QWORD *)(a1 + v13[23]) = *(_QWORD *)(a2 + v13[23]);
  v43 = v13[24];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  v46 = (int *)type metadata accessor for HandDescriptorInternal();
  v47 = (unsigned int (**)(_QWORD *, uint64_t, int *))*((_QWORD *)v46 - 1);
  if (v47[6](v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    __dsta = v47;
    v148 = a3;
    *v44 = *v45;
    *((_BYTE *)v44 + 8) = *((_BYTE *)v45 + 8);
    v49 = *((_OWORD *)v45 + 6);
    *((_OWORD *)v44 + 5) = *((_OWORD *)v45 + 5);
    *((_OWORD *)v44 + 6) = v49;
    *((_OWORD *)v44 + 7) = *((_OWORD *)v45 + 7);
    *((_DWORD *)v44 + 32) = *((_DWORD *)v45 + 32);
    v50 = *((_OWORD *)v45 + 2);
    *((_OWORD *)v44 + 1) = *((_OWORD *)v45 + 1);
    *((_OWORD *)v44 + 2) = v50;
    v51 = *((_OWORD *)v45 + 4);
    *((_OWORD *)v44 + 3) = *((_OWORD *)v45 + 3);
    *((_OWORD *)v44 + 4) = v51;
    v44[17] = v45[17];
    *((_OWORD *)v44 + 9) = *((_OWORD *)v45 + 9);
    memcpy(v44 + 20, v45 + 20, 0x373uLL);
    v52 = v46[10];
    v53 = (char *)v44 + v52;
    v54 = (char *)v45 + v52;
    v55 = type metadata accessor for ActionInternalPB(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      *v53 = *v54;
      v58 = *(int *)(v55 + 20);
      v143 = &v53[v58];
      v59 = &v54[v58];
      v60 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v143, v59, v60);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    v61 = v46[11];
    v62 = (char *)v44 + v61;
    v63 = (char *)v45 + v61;
    v64 = type metadata accessor for UnsureInternalPB(0);
    v65 = *(_QWORD *)(v64 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
    {
      v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      v67 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v62, v63, v67);
      *(_QWORD *)&v62[*(int *)(v64 + 20)] = *(_QWORD *)&v63[*(int *)(v64 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
    }
    v68 = v46[12];
    v69 = (char *)v44 + v68;
    v70 = (char *)v45 + v68;
    v71 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v72 = *(_QWORD *)(v71 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
    {
      v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      v74 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v69, v70, v74);
      *(_QWORD *)&v69[*(int *)(v71 + 20)] = *(_QWORD *)&v70[*(int *)(v71 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
    }
    v75 = v46[13];
    v76 = (_QWORD *)((char *)v44 + v75);
    v77 = (_QWORD *)((char *)v45 + v75);
    v78 = type metadata accessor for HomePinchInternalPB(0);
    v79 = *(_QWORD *)(v78 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
    {
      v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      *v76 = *v77;
      v81 = *(int *)(v78 + 20);
      v144 = (char *)v76 + v81;
      v82 = (char *)v77 + v81;
      v83 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v144, v82, v83);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
    }
    *(_QWORD *)((char *)v44 + v46[14]) = *(_QWORD *)((char *)v45 + v46[14]);
    a3 = v148;
    (*((void (**)(_QWORD *, _QWORD, uint64_t, int *))__dsta + 7))(v44, 0, 1, v46);
  }
  v84 = v13[25];
  v85 = a1 + v84;
  v86 = a2 + v84;
  *(_QWORD *)v85 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  *(_QWORD *)(a1 + v13[26]) = *(_QWORD *)(a2 + v13[26]);
  v87 = v13[27];
  v88 = a1 + v87;
  v89 = a2 + v87;
  *(_BYTE *)(v88 + 8) = *(_BYTE *)(v89 + 8);
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v90 = v13[28];
  v91 = a1 + v90;
  v92 = a2 + v90;
  v93 = *(_OWORD *)(v92 + 16);
  *(_OWORD *)v91 = *(_OWORD *)v92;
  *(_OWORD *)(v91 + 16) = v93;
  *(_OWORD *)(v91 + 32) = *(_OWORD *)(v92 + 32);
  *(_WORD *)(v91 + 48) = *(_WORD *)(v92 + 48);
  *(_QWORD *)(a1 + v13[29]) = *(_QWORD *)(a2 + v13[29]);
  v94 = v13[30];
  v95 = a1 + v94;
  v96 = a2 + v94;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_QWORD *)v95 = *(_QWORD *)v96;
  v97 = v13[31];
  v98 = a1 + v97;
  v99 = (__int128 *)(a2 + v97);
  *(_QWORD *)(v98 + 48) = *((_QWORD *)v99 + 6);
  v100 = v99[2];
  v101 = *v99;
  *(_OWORD *)(v98 + 16) = v99[1];
  *(_OWORD *)(v98 + 32) = v100;
  *(_OWORD *)v98 = v101;
  v102 = v13[32];
  v103 = a1 + v102;
  v104 = a2 + v102;
  v105 = *(_OWORD *)(v104 + 48);
  *(_OWORD *)(v103 + 32) = *(_OWORD *)(v104 + 32);
  *(_OWORD *)(v103 + 48) = v105;
  *(_QWORD *)(v103 + 62) = *(_QWORD *)(v104 + 62);
  v106 = *(_OWORD *)(v104 + 16);
  *(_OWORD *)v103 = *(_OWORD *)v104;
  *(_OWORD *)(v103 + 16) = v106;
  v107 = v13[33];
  v108 = a1 + v107;
  v109 = a2 + v107;
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  *(_OWORD *)(a1 + v13[34]) = *(_OWORD *)(a2 + v13[34]);
  memcpy((void *)(a1 + v13[35]), (const void *)(a2 + v13[35]), 0x118uLL);
  v110 = v13[36];
  v111 = (_OWORD *)(a1 + v110);
  v112 = (_OWORD *)(a2 + v110);
  v113 = type metadata accessor for PartialHandMultiCam(0);
  v114 = *(_QWORD *)(v113 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
  {
    v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
  }
  else
  {
    *v111 = *v112;
    v116 = *(int *)(v113 + 24);
    v117 = (char *)v111 + v116;
    v118 = (char *)v112 + v116;
    v119 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 32))(v117, v118, v119);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
  }
  v120 = v13[37];
  v121 = a1 + v120;
  v122 = a2 + v120;
  *(_QWORD *)v121 = *(_QWORD *)v122;
  *(_BYTE *)(v121 + 8) = *(_BYTE *)(v122 + 8);
  v123 = v13[38];
  v124 = a1 + v123;
  v125 = (__int128 *)(a2 + v123);
  *(_QWORD *)(v124 + 45) = *(_QWORD *)((char *)v125 + 45);
  v126 = v125[2];
  v127 = *v125;
  *(_OWORD *)(v124 + 16) = v125[1];
  *(_OWORD *)(v124 + 32) = v126;
  *(_OWORD *)v124 = v127;
  v128 = a3[5];
  v129 = a3[6];
  v130 = a1 + v128;
  v131 = a2 + v128;
  *(_OWORD *)v130 = *(_OWORD *)v131;
  *(_QWORD *)(v130 + 16) = *(_QWORD *)(v131 + 16);
  v132 = a1 + v129;
  v133 = a2 + v129;
  *(_DWORD *)v132 = *(_DWORD *)v133;
  *(_BYTE *)(v132 + 4) = *(_BYTE *)(v133 + 4);
  v134 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v134) = *(_BYTE *)(a2 + v134);
  v135 = a3[9];
  v136 = a3[10];
  v137 = (_OWORD *)(a1 + v135);
  v138 = (_OWORD *)(a2 + v135);
  *v137 = *v138;
  *(_OWORD *)((char *)v137 + 12) = *(_OWORD *)((char *)v138 + 12);
  v139 = (_OWORD *)(a1 + v136);
  v140 = (_OWORD *)(a2 + v136);
  *v139 = *v140;
  *(_OWORD *)((char *)v139 + 9) = *(_OWORD *)((char *)v140 + 9);
  return a1;
}

uint64_t assignWithTake for DerivedHandAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  int v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t (*v116)(_BYTE *, uint64_t, uint64_t);
  int v117;
  int v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t, uint64_t);
  int v130;
  size_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t);
  int v148;
  size_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t (*v157)(_QWORD *, uint64_t, uint64_t);
  int v158;
  int v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t (*v214)(_QWORD *, uint64_t, uint64_t);
  int v215;
  int v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int16 v241;
  _OWORD *v242;
  _OWORD *v243;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void (**__src)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *__srca;
  _BYTE *__srcd;
  char *__srce;
  _QWORD *__srcb;
  _QWORD *__srcc;
  int *v262;
  int *v263;
  int *v264;
  char *__dst;
  int *__dsta;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = a1 + 16;
  v8 = a2 + 16;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease();
      v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v9;
      v10 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v10;
      v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
      goto LABEL_6;
    }
    outlined destroy of HandPose(v6);
  }
  v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v6 + 80) = v12;
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(v8 + 96);
  *(_QWORD *)(v6 + 112) = *(_QWORD *)(v8 + 112);
  v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v8;
  *(_OWORD *)(v6 + 16) = v13;
  v14 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(v6 + 48) = v14;
LABEL_6:
  v15 = *(_QWORD *)(a2 + 200);
  v16 = *(_QWORD *)(a1 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  if (v16)
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 200) = v15;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of PoseSpec(a1 + 200);
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
LABEL_11:
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v17 = (int *)type metadata accessor for HandDescriptor();
  v18 = v17[17];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v262 = a3;
      v26 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(v19, v20, v26);
      v28 = *(int *)(v21 + 20);
      __dst = &v19[v28];
      v29 = &v20[v28];
      v30 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      __src = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v30 - 8);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v29, 1, v30))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
        memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v29;
        v27(&__dst[*(int *)(v30 + 20)], &v29[*(int *)(v30 + 20)], v26);
        v45 = *(int *)(v30 + 24);
        v46 = &__dst[v45];
        v47 = &v29[v45];
        *(_DWORD *)v46 = *(_DWORD *)v47;
        v46[4] = v47[4];
        __src[7](__dst, 0, 1, v30);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_27;
    }
LABEL_17:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_28;
  }
  if (v25)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v19, type metadata accessor for ThumbIndexTapFeaturesPB);
    goto LABEL_17;
  }
  v262 = a3;
  v33 = type metadata accessor for UnknownStorage();
  __srca = *(_QWORD **)(v33 - 8);
  v34 = (void (*)(char *, char *, uint64_t))__srca[5];
  v34(v19, v20, v33);
  v35 = *(int *)(v21 + 20);
  v36 = &v19[v35];
  v37 = &v20[v35];
  v38 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v253 = *(_QWORD *)(v38 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 48);
  v40 = v39(v36, 1, v38);
  v41 = v39(v37, 1, v38);
  if (!v40)
  {
    if (!v41)
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      swift_bridgeObjectRelease();
      v34(&v36[*(int *)(v38 + 20)], &v37[*(int *)(v38 + 20)], v33);
      v134 = *(int *)(v38 + 24);
      v135 = &v36[v134];
      v136 = &v37[v134];
      *(_DWORD *)v135 = *(_DWORD *)v136;
      v135[4] = v136[4];
      goto LABEL_27;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for RawThumbIndexTapFeaturesPB);
    goto LABEL_26;
  }
  if (v41)
  {
LABEL_26:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_27;
  }
  *(_QWORD *)v36 = *(_QWORD *)v37;
  ((void (*)(char *, char *, uint64_t))__srca[4])(&v36[*(int *)(v38 + 20)], &v37[*(int *)(v38 + 20)], v33);
  v42 = *(int *)(v38 + 24);
  v43 = &v36[v42];
  v44 = &v37[v42];
  *(_DWORD *)v43 = *(_DWORD *)v44;
  v43[4] = v44[4];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v253 + 56))(v36, 0, 1, v38);
LABEL_27:
  a3 = v262;
LABEL_28:
  *(_QWORD *)(a1 + v17[18]) = *(_QWORD *)(a2 + v17[18]);
  swift_bridgeObjectRelease();
  v49 = v17[19];
  v50 = a1 + v49;
  v51 = a2 + v49;
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_BYTE *)(v50 + 16) = *(_BYTE *)(v51 + 16);
  v52 = v17[20];
  v53 = a1 + v52;
  v54 = a2 + v52;
  *(_BYTE *)(v53 + 16) = *(_BYTE *)(v54 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  v55 = v17[21];
  v56 = a1 + v55;
  v57 = a2 + v55;
  *(_BYTE *)(v56 + 16) = *(_BYTE *)(v57 + 16);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  v58 = v17[22];
  v59 = a1 + v58;
  v60 = a2 + v58;
  *(_BYTE *)(v59 + 64) = *(_BYTE *)(v60 + 64);
  v61 = *(_OWORD *)(v60 + 48);
  *(_OWORD *)(v59 + 32) = *(_OWORD *)(v60 + 32);
  *(_OWORD *)(v59 + 48) = v61;
  v62 = *(_OWORD *)(v60 + 16);
  *(_OWORD *)v59 = *(_OWORD *)v60;
  *(_OWORD *)(v59 + 16) = v62;
  *(_QWORD *)(a1 + v17[23]) = *(_QWORD *)(a2 + v17[23]);
  swift_bridgeObjectRelease();
  v63 = v17[24];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for HandDescriptorInternal();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v64, 1, v66);
  __dsta = (int *)v66;
  v70 = v68(v65, 1, v66);
  if (!v69)
  {
    if (v70)
    {
      outlined destroy of Matrix3x3PB(v64, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      goto LABEL_34;
    }
    *(_QWORD *)v64 = *(_QWORD *)v65;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
    v264 = a3;
    if (*(_QWORD *)(v64 + 48))
    {
      v81 = *(_QWORD *)(v65 + 48);
      if (v81)
      {
        *(_QWORD *)(v64 + 16) = *(_QWORD *)(v65 + 16);
        *(_BYTE *)(v64 + 24) = *(_BYTE *)(v65 + 24);
        *(_BYTE *)(v64 + 25) = *(_BYTE *)(v65 + 25);
        *(_QWORD *)(v64 + 32) = *(_QWORD *)(v65 + 32);
        *(_BYTE *)(v64 + 40) = *(_BYTE *)(v65 + 40);
        *(_QWORD *)(v64 + 48) = v81;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 56) = *(_QWORD *)(v65 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 64) = *(_QWORD *)(v65 + 64);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 72) = *(_QWORD *)(v65 + 72);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 80) = *(_QWORD *)(v65 + 80);
        swift_bridgeObjectRelease();
        *(_DWORD *)(v64 + 88) = *(_DWORD *)(v65 + 88);
        v82 = *(_QWORD *)(v65 + 104);
        *(_QWORD *)(v64 + 96) = *(_QWORD *)(v65 + 96);
        *(_QWORD *)(v64 + 104) = v82;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 112) = *(_QWORD *)(v65 + 112);
        *(_BYTE *)(v64 + 120) = *(_BYTE *)(v65 + 120);
        *(_QWORD *)(v64 + 124) = *(_QWORD *)(v65 + 124);
        goto LABEL_51;
      }
      outlined destroy of PinchInternalData(v64 + 16);
    }
    v109 = *(_OWORD *)(v65 + 96);
    *(_OWORD *)(v64 + 80) = *(_OWORD *)(v65 + 80);
    *(_OWORD *)(v64 + 96) = v109;
    *(_OWORD *)(v64 + 112) = *(_OWORD *)(v65 + 112);
    *(_DWORD *)(v64 + 128) = *(_DWORD *)(v65 + 128);
    v110 = *(_OWORD *)(v65 + 32);
    *(_OWORD *)(v64 + 16) = *(_OWORD *)(v65 + 16);
    *(_OWORD *)(v64 + 32) = v110;
    v111 = *(_OWORD *)(v65 + 64);
    *(_OWORD *)(v64 + 48) = *(_OWORD *)(v65 + 48);
    *(_OWORD *)(v64 + 64) = v111;
LABEL_51:
    *(_QWORD *)(v64 + 136) = *(_QWORD *)(v65 + 136);
    swift_bridgeObjectRelease();
    *(_DWORD *)(v64 + 144) = *(_DWORD *)(v65 + 144);
    *(_DWORD *)(v64 + 148) = *(_DWORD *)(v65 + 148);
    *(_QWORD *)(v64 + 152) = *(_QWORD *)(v65 + 152);
    swift_bridgeObjectRelease();
    memcpy((void *)(v64 + 160), (const void *)(v65 + 160), 0x373uLL);
    v112 = *(int *)(v66 + 40);
    v113 = (_BYTE *)(v64 + v112);
    v114 = (_BYTE *)(v65 + v112);
    v115 = type metadata accessor for ActionInternalPB(0);
    __srcb = *(_QWORD **)(v115 - 8);
    v116 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))__srcb[6];
    v117 = v116(v113, 1, v115);
    v118 = v116(v114, 1, v115);
    if (v117)
    {
      if (!v118)
      {
        *v113 = *v114;
        v119 = *(int *)(v115 + 20);
        v120 = &v113[v119];
        v121 = &v114[v119];
        v122 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v122 - 8) + 32))(v120, v121, v122);
        ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srcb[7])(v113, 0, 1, v115);
        goto LABEL_57;
      }
    }
    else
    {
      if (!v118)
      {
        *v113 = *v114;
        v137 = *(int *)(v115 + 20);
        v138 = &v113[v137];
        v139 = &v114[v137];
        v140 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v140 - 8) + 40))(v138, v139, v140);
LABEL_57:
        v124 = __dsta[11];
        v125 = v64 + v124;
        v126 = (char *)(v65 + v124);
        v127 = type metadata accessor for UnsureInternalPB(0);
        v128 = *(_QWORD *)(v127 - 8);
        v129 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
        v254 = v125;
        LODWORD(v125) = v129(v125, 1, v127);
        v130 = v129((uint64_t)v126, 1, v127);
        if ((_DWORD)v125)
        {
          if (v130)
          {
            v131 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?)
                                         - 8)
                             + 64);
            v132 = (void *)v254;
LABEL_62:
            memcpy(v132, v126, v131);
            goto LABEL_67;
          }
          v133 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 32))(v254, v126, v133);
          *(_QWORD *)(v254 + *(int *)(v127 + 20)) = *(_QWORD *)&v126[*(int *)(v127 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v254, 0, 1, v127);
        }
        else
        {
          if (v130)
          {
            outlined destroy of Matrix3x3PB(v254, type metadata accessor for UnsureInternalPB);
            v131 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?)
                                         - 8)
                             + 64);
            v132 = (void *)v254;
            goto LABEL_62;
          }
          v141 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v254, v126, v141);
          *(_QWORD *)(v254 + *(int *)(v127 + 20)) = *(_QWORD *)&v126[*(int *)(v127 + 20)];
          swift_release();
        }
LABEL_67:
        v142 = __dsta[12];
        v143 = v64 + v142;
        v144 = (char *)(v65 + v142);
        v145 = type metadata accessor for ObjectInteractionStateInternalPB(0);
        v146 = *(_QWORD *)(v145 - 8);
        v147 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
        v255 = v143;
        LODWORD(v143) = v147(v143, 1, v145);
        v148 = v147((uint64_t)v144, 1, v145);
        if ((_DWORD)v143)
        {
          if (v148)
          {
            v149 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?)
                                         - 8)
                             + 64);
            v150 = (void *)v255;
LABEL_72:
            memcpy(v150, v144, v149);
            goto LABEL_75;
          }
          v151 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v255, v144, v151);
          *(_QWORD *)(v255 + *(int *)(v145 + 20)) = *(_QWORD *)&v144[*(int *)(v145 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v146 + 56))(v255, 0, 1, v145);
        }
        else
        {
          if (v148)
          {
            outlined destroy of Matrix3x3PB(v255, type metadata accessor for ObjectInteractionStateInternalPB);
            v149 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?)
                                         - 8)
                             + 64);
            v150 = (void *)v255;
            goto LABEL_72;
          }
          v152 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 40))(v255, v144, v152);
          *(_QWORD *)(v255 + *(int *)(v145 + 20)) = *(_QWORD *)&v144[*(int *)(v145 + 20)];
          swift_release();
        }
LABEL_75:
        v153 = __dsta[13];
        v154 = (_QWORD *)(v64 + v153);
        v155 = (_QWORD *)(v65 + v153);
        v156 = type metadata accessor for HomePinchInternalPB(0);
        __srcc = *(_QWORD **)(v156 - 8);
        v157 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))__srcc[6];
        v158 = v157(v154, 1, v156);
        v159 = v157(v155, 1, v156);
        if (v158)
        {
          if (!v159)
          {
            *v154 = *v155;
            v160 = *(int *)(v156 + 20);
            v161 = (char *)v154 + v160;
            v162 = (char *)v155 + v160;
            v163 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v161, v162, v163);
            ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__srcc[7])(v154, 0, 1, v156);
LABEL_81:
            a3 = v264;
            *(_QWORD *)(v64 + __dsta[14]) = *(_QWORD *)(v65 + __dsta[14]);
            swift_bridgeObjectRelease();
            goto LABEL_82;
          }
        }
        else
        {
          if (!v159)
          {
            *v154 = *v155;
            v249 = *(int *)(v156 + 20);
            v250 = (char *)v154 + v249;
            v251 = (char *)v155 + v249;
            v252 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 40))(v250, v251, v252);
            goto LABEL_81;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v154, type metadata accessor for HomePinchInternalPB);
        }
        v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
        memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
        goto LABEL_81;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v113, type metadata accessor for ActionInternalPB);
    }
    v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_57;
  }
  if (v70)
  {
LABEL_34:
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy((void *)v64, (const void *)v65, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_82;
  }
  v263 = a3;
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
  v71 = *(_OWORD *)(v65 + 96);
  *(_OWORD *)(v64 + 80) = *(_OWORD *)(v65 + 80);
  *(_OWORD *)(v64 + 96) = v71;
  *(_OWORD *)(v64 + 112) = *(_OWORD *)(v65 + 112);
  *(_DWORD *)(v64 + 128) = *(_DWORD *)(v65 + 128);
  v72 = *(_OWORD *)(v65 + 32);
  *(_OWORD *)(v64 + 16) = *(_OWORD *)(v65 + 16);
  *(_OWORD *)(v64 + 32) = v72;
  v73 = *(_OWORD *)(v65 + 64);
  *(_OWORD *)(v64 + 48) = *(_OWORD *)(v65 + 48);
  *(_OWORD *)(v64 + 64) = v73;
  *(_QWORD *)(v64 + 136) = *(_QWORD *)(v65 + 136);
  *(_OWORD *)(v64 + 144) = *(_OWORD *)(v65 + 144);
  memcpy((void *)(v64 + 160), (const void *)(v65 + 160), 0x373uLL);
  v74 = *(int *)(v66 + 40);
  v75 = (_BYTE *)(v64 + v74);
  v76 = (_BYTE *)(v65 + v74);
  v77 = type metadata accessor for ActionInternalPB(0);
  v78 = *(_QWORD *)(v77 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
  {
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    *v75 = *v76;
    v83 = *(int *)(v77 + 20);
    __srcd = &v75[v83];
    v84 = &v76[v83];
    v85 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(__srcd, v84, v85);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
  }
  v86 = __dsta[11];
  v87 = (char *)(v64 + v86);
  v88 = (char *)(v65 + v86);
  v89 = type metadata accessor for UnsureInternalPB(0);
  v90 = *(_QWORD *)(v89 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
  {
    v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    v92 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v87, v88, v92);
    *(_QWORD *)&v87[*(int *)(v89 + 20)] = *(_QWORD *)&v88[*(int *)(v89 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
  }
  v93 = __dsta[12];
  v94 = (char *)(v64 + v93);
  v95 = (char *)(v65 + v93);
  v96 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v97 = *(_QWORD *)(v96 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
  {
    v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    v99 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(v94, v95, v99);
    *(_QWORD *)&v94[*(int *)(v96 + 20)] = *(_QWORD *)&v95[*(int *)(v96 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
  }
  v100 = __dsta[13];
  v101 = (_QWORD *)(v64 + v100);
  v102 = (_QWORD *)(v65 + v100);
  v103 = type metadata accessor for HomePinchInternalPB(0);
  v104 = *(_QWORD *)(v103 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
  {
    v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
  }
  else
  {
    *v101 = *v102;
    v106 = *(int *)(v103 + 20);
    __srce = (char *)v101 + v106;
    v107 = (char *)v102 + v106;
    v108 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(__srce, v107, v108);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
  }
  *(_QWORD *)(v64 + __dsta[14]) = *(_QWORD *)(v65 + __dsta[14]);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v67 + 56))(v64, 0, 1);
  a3 = v263;
LABEL_82:
  v165 = v17[25];
  v166 = a1 + v165;
  v167 = a2 + v165;
  *(_QWORD *)v166 = *(_QWORD *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  *(_QWORD *)(a1 + v17[26]) = *(_QWORD *)(a2 + v17[26]);
  swift_bridgeObjectRelease();
  v168 = v17[27];
  v169 = a1 + v168;
  v170 = a2 + v168;
  *(_QWORD *)v169 = *(_QWORD *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  v171 = v17[28];
  v172 = a1 + v171;
  v173 = (__int128 *)(a2 + v171);
  *(_WORD *)(v172 + 48) = *((_WORD *)v173 + 24);
  v174 = v173[2];
  v175 = *v173;
  *(_OWORD *)(v172 + 16) = v173[1];
  *(_OWORD *)(v172 + 32) = v174;
  *(_OWORD *)v172 = v175;
  *(_QWORD *)(a1 + v17[29]) = *(_QWORD *)(a2 + v17[29]);
  swift_bridgeObjectRelease();
  v176 = v17[30];
  v177 = a1 + v176;
  v178 = a2 + v176;
  *(_BYTE *)(v177 + 8) = *(_BYTE *)(v178 + 8);
  *(_QWORD *)v177 = *(_QWORD *)v178;
  v179 = v17[31];
  v180 = (_QWORD *)(a1 + v179);
  v181 = (_QWORD *)(a2 + v179);
  if (*(_QWORD *)(a1 + v179))
  {
    if (*v181)
    {
      *v180 = *v181;
      swift_bridgeObjectRelease();
      v180[1] = v181[1];
      swift_bridgeObjectRelease();
      v180[2] = v181[2];
      swift_bridgeObjectRelease();
      v180[3] = v181[3];
      swift_bridgeObjectRelease();
      v180[4] = v181[4];
      swift_bridgeObjectRelease();
      v180[5] = v181[5];
      swift_bridgeObjectRelease();
      v180[6] = v181[6];
      swift_bridgeObjectRelease();
      goto LABEL_87;
    }
    outlined destroy of ObjectInteractionData((uint64_t)v180);
  }
  v182 = *((_OWORD *)v181 + 1);
  *(_OWORD *)v180 = *(_OWORD *)v181;
  *((_OWORD *)v180 + 1) = v182;
  *((_OWORD *)v180 + 2) = *((_OWORD *)v181 + 2);
  v180[6] = v181[6];
LABEL_87:
  v183 = v17[32];
  v184 = a1 + v183;
  v185 = a2 + v183;
  *(_QWORD *)v184 = *(_QWORD *)v185;
  *(_QWORD *)(v184 + 8) = *(_QWORD *)(v185 + 8);
  *(_QWORD *)(v184 + 16) = *(_QWORD *)(v185 + 16);
  *(_OWORD *)(v184 + 32) = *(_OWORD *)(v185 + 32);
  *(_QWORD *)(v184 + 48) = *(_QWORD *)(v185 + 48);
  *(_BYTE *)(v184 + 56) = *(_BYTE *)(v185 + 56);
  *(_QWORD *)(v184 + 60) = *(_QWORD *)(v185 + 60);
  *(_BYTE *)(v184 + 68) = *(_BYTE *)(v185 + 68);
  *(_BYTE *)(v184 + 69) = *(_BYTE *)(v185 + 69);
  v186 = v17[33];
  v187 = a1 + v186;
  v188 = a2 + v186;
  *(_QWORD *)v187 = *(_QWORD *)v188;
  *(_BYTE *)(v187 + 8) = *(_BYTE *)(v188 + 8);
  v189 = v17[34];
  v190 = a1 + v189;
  v191 = a2 + v189;
  *(_DWORD *)v190 = *(_DWORD *)v191;
  *(_QWORD *)(v190 + 8) = *(_QWORD *)(v191 + 8);
  swift_bridgeObjectRelease();
  v192 = v17[35];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = *(_OWORD *)(a2 + v192 + 16);
  *(_OWORD *)v193 = *(_OWORD *)(a2 + v192);
  *(_OWORD *)(v193 + 16) = v195;
  v196 = *(_OWORD *)(a2 + v192 + 48);
  *(_OWORD *)(v193 + 32) = *(_OWORD *)(a2 + v192 + 32);
  *(_OWORD *)(v193 + 48) = v196;
  *(_DWORD *)(v193 + 64) = *(_DWORD *)(a2 + v192 + 64);
  v197 = *(_OWORD *)(a2 + v192 + 96);
  *(_OWORD *)(v193 + 80) = *(_OWORD *)(a2 + v192 + 80);
  *(_OWORD *)(v193 + 96) = v197;
  v198 = *(_OWORD *)(a2 + v192 + 128);
  *(_OWORD *)(v193 + 112) = *(_OWORD *)(a2 + v192 + 112);
  *(_OWORD *)(v193 + 128) = v198;
  v199 = a1 + v192 + 144;
  v201 = a2 + v192 + 144;
  v200 = *(_QWORD *)v201;
  if (*(_QWORD *)v199)
  {
    if (v200)
    {
      *(_QWORD *)(v193 + 144) = v200;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v193 + 152) = *(_QWORD *)(v194 + 152);
      swift_bridgeObjectRelease();
      v202 = *(_OWORD *)(v194 + 176);
      *(_OWORD *)(v193 + 160) = *(_OWORD *)(v194 + 160);
      *(_OWORD *)(v193 + 176) = v202;
      v203 = *(_OWORD *)(v194 + 208);
      *(_OWORD *)(v193 + 192) = *(_OWORD *)(v194 + 192);
      *(_OWORD *)(v193 + 208) = v203;
      v204 = *(_OWORD *)(v194 + 240);
      *(_OWORD *)(v193 + 224) = *(_OWORD *)(v194 + 224);
      *(_OWORD *)(v193 + 240) = v204;
      *(_BYTE *)(v193 + 256) = *(_BYTE *)(v194 + 256);
      *(_BYTE *)(v193 + 257) = *(_BYTE *)(v194 + 257);
      *(_DWORD *)(v193 + 260) = *(_DWORD *)(v194 + 260);
      goto LABEL_92;
    }
    outlined destroy of HandPose(v199);
  }
  v205 = *(_OWORD *)(v201 + 80);
  *(_OWORD *)(v199 + 64) = *(_OWORD *)(v201 + 64);
  *(_OWORD *)(v199 + 80) = v205;
  *(_OWORD *)(v199 + 96) = *(_OWORD *)(v201 + 96);
  *(_QWORD *)(v199 + 112) = *(_QWORD *)(v201 + 112);
  v206 = *(_OWORD *)(v201 + 16);
  *(_OWORD *)v199 = *(_OWORD *)v201;
  *(_OWORD *)(v199 + 16) = v206;
  v207 = *(_OWORD *)(v201 + 48);
  *(_OWORD *)(v199 + 32) = *(_OWORD *)(v201 + 32);
  *(_OWORD *)(v199 + 48) = v207;
LABEL_92:
  v208 = *(_QWORD *)(v194 + 272);
  *(_QWORD *)(v193 + 264) = *(_QWORD *)(v194 + 264);
  *(_QWORD *)(v193 + 272) = v208;
  v209 = v17[36];
  v210 = (_QWORD *)(a1 + v209);
  v211 = (_QWORD *)(a2 + v209);
  v212 = type metadata accessor for PartialHandMultiCam(0);
  v213 = *(_QWORD *)(v212 - 8);
  v214 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v213 + 48);
  v215 = v214(v210, 1, v212);
  v216 = v214(v211, 1, v212);
  if (!v215)
  {
    if (!v216)
    {
      *v210 = *v211;
      swift_bridgeObjectRelease();
      v210[1] = v211[1];
      swift_bridgeObjectRelease();
      v245 = *(int *)(v212 + 24);
      v246 = (char *)v210 + v245;
      v247 = (char *)v211 + v245;
      v248 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 40))(v246, v247, v248);
      goto LABEL_98;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v210, type metadata accessor for PartialHandMultiCam);
    goto LABEL_97;
  }
  if (v216)
  {
LABEL_97:
    v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
    goto LABEL_98;
  }
  *(_OWORD *)v210 = *(_OWORD *)v211;
  v217 = *(int *)(v212 + 24);
  v218 = (char *)v210 + v217;
  v219 = (char *)v211 + v217;
  v220 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v220 - 8) + 32))(v218, v219, v220);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v210, 0, 1, v212);
LABEL_98:
  v222 = v17[37];
  v223 = a1 + v222;
  v224 = a2 + v222;
  *(_BYTE *)v223 = *(_BYTE *)v224;
  *(_DWORD *)(v223 + 4) = *(_DWORD *)(v224 + 4);
  *(_BYTE *)(v223 + 8) = *(_BYTE *)(v224 + 8);
  v225 = v17[38];
  v226 = a1 + v225;
  v227 = a2 + v225;
  *(_BYTE *)v226 = *(_BYTE *)v227;
  *(_BYTE *)(v226 + 1) = *(_BYTE *)(v227 + 1);
  *(_BYTE *)(v226 + 2) = *(_BYTE *)(v227 + 2);
  *(_BYTE *)(v226 + 3) = *(_BYTE *)(v227 + 3);
  *(_QWORD *)(v226 + 8) = *(_QWORD *)(v227 + 8);
  *(_BYTE *)(v226 + 16) = *(_BYTE *)(v227 + 16);
  v228 = *(_QWORD *)(v227 + 24);
  *(_BYTE *)(v226 + 32) = *(_BYTE *)(v227 + 32);
  *(_QWORD *)(v226 + 24) = v228;
  v229 = *(_QWORD *)(v227 + 40);
  *(_BYTE *)(v226 + 48) = *(_BYTE *)(v227 + 48);
  *(_QWORD *)(v226 + 40) = v229;
  *(_BYTE *)(v226 + 49) = *(_BYTE *)(v227 + 49);
  *(_BYTE *)(v226 + 50) = *(_BYTE *)(v227 + 50);
  *(_BYTE *)(v226 + 51) = *(_BYTE *)(v227 + 51);
  *(_BYTE *)(v226 + 52) = *(_BYTE *)(v227 + 52);
  v230 = a3[5];
  v231 = a3[6];
  v232 = (_QWORD *)(a1 + v230);
  v233 = (_QWORD *)(a2 + v230);
  *v232 = *v233;
  v232[1] = v233[1];
  v232[2] = v233[2];
  v234 = a1 + v231;
  v235 = a2 + v231;
  *(_DWORD *)v234 = *(_DWORD *)v235;
  *(_BYTE *)(v234 + 4) = *(_BYTE *)(v235 + 4);
  v236 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v236) = *(_BYTE *)(a2 + v236);
  v237 = a3[9];
  v238 = a3[10];
  v239 = a1 + v237;
  v240 = a2 + v237;
  *(_BYTE *)(v239 + 8) = *(_BYTE *)(v240 + 8);
  *(_QWORD *)v239 = *(_QWORD *)v240;
  *(_BYTE *)(v239 + 11) = *(_BYTE *)(v240 + 11);
  *(_WORD *)(v239 + 9) = *(_WORD *)(v240 + 9);
  *(_BYTE *)(v239 + 24) = *(_BYTE *)(v240 + 24);
  *(_QWORD *)(v239 + 16) = *(_QWORD *)(v240 + 16);
  v241 = *(_WORD *)(v240 + 25);
  *(_BYTE *)(v239 + 27) = *(_BYTE *)(v240 + 27);
  *(_WORD *)(v239 + 25) = v241;
  v242 = (_OWORD *)(a1 + v238);
  v243 = (_OWORD *)(a2 + v238);
  *v242 = *v243;
  *(_OWORD *)((char *)v242 + 9) = *(_OWORD *)((char *)v243 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DerivedHandAttributes()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8878BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for HandDescriptor();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 40) + 24);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DerivedHandAttributes()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D887944(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for HandDescriptor();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 40) + 24) = -(char)a2;
  return result;
}

uint64_t type metadata completion function for DerivedHandAttributes()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HandDescriptor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, char a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  Hasher.init(_seed:)();
  lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
  dispatch thunk of Hashable.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(a3 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    return 0;
  v9 = ~v7;
  while (1)
  {
    if ((a2 & 1) != 0)
      __asm { BR              X14 }
    if (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v8) == a1)
      break;
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      return 0;
  }
  return 1;
}

void static EspressoBuilder.createModel(_:_:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BYTE *v14;

  type metadata accessor for EspressoBuilder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  if (!specialized static EspressoBuilder.isPreCompiled(bundle:netPath:)(v8, a1, a2))
  {
    v12 = specialized static EspressoBuilder.createCompiledModel(bundle:modelPath:modelParams:)(v8, a1, a2);
    if (!v3)
    {
      v13 = v12;
      if (v12)
      {
        *(_QWORD *)(a3 + 24) = type metadata accessor for E5RTRegressor();
        *(_QWORD *)(a3 + 32) = &protocol witness table for E5RTRegressor;

        *(_QWORD *)a3 = v13;
        return;
      }
      lazy protocol witness table accessor for type EspressoBuilder.EspressoBuillderException and conformance EspressoBuilder.EspressoBuillderException();
      swift_allocError();
      *v14 = 0;
      swift_willThrow();
    }
LABEL_6:

    return;
  }
  v9 = v8;
  swift_bridgeObjectRetain();
  specialized E5RTRegressor.__allocating_init(bundle:modelPath:directBindInputNames:directBindOutputNames:configName:)(v9, a1, a2, MEMORY[0x24BEE4B08], MEMORY[0x24BEE4B08], 1852399981, 0xE400000000000000);
  if (v3)
    goto LABEL_6;
  v11 = v10;
  if (v10)
  {
    *(_QWORD *)(a3 + 24) = type metadata accessor for E5RTRegressor();
    *(_QWORD *)(a3 + 32) = &protocol witness table for E5RTRegressor;

    *(_QWORD *)a3 = v11;
  }
  else
  {

    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

uint64_t EspressoBuilder.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t EspressoBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EspressoBuilder()
{
  return objc_opt_self();
}

uint64_t method lookup function for EspressoBuilder()
{
  return swift_lookUpClassMethod();
}

unint64_t specialized static EspressoBuilder.getParamsDict(_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)MEMORY[0x2426372E8](a2, a3);
  v12 = (void *)MEMORY[0x2426372E8](0x737365727073652ELL, 0xED000074656E2E6FLL);
  v13 = objc_msgSend(a1, sel_pathForResource_ofType_, v11, v12);

  if (v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    v15 = Data.init(contentsOf:options:)();
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v18 = (void *)objc_opt_self();
    isa = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v28 = 0;
    v20 = objc_msgSend(v18, sel_JSONObjectWithData_options_error_, isa, 0, &v28);

    if (v20)
    {
      v21 = (id)v28;
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v22 = v27;
        if (*(_QWORD *)(v27 + 16)
          && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x800000023D9D4920),
              (v24 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v22 + 56) + 32 * v23, (uint64_t)&v28);
        }
        else
        {
          v28 = 0u;
          v29 = 0u;
        }
        outlined consume of Data._Representation(v15, v17);
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v29 + 1))
        {
          if (swift_dynamicCast())
            return v27;
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v28);
        }
      }
      else
      {
        outlined consume of Data._Representation(v15, v17);
      }
    }
    else
    {
      v25 = (id)v28;
      v26 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      outlined consume of Data._Representation(v15, v17);

    }
  }
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t specialized static EspressoBuilder.createInputPortInfos(bundle:modelPath:operation:directBindInputNames:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void *v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned int v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;

  v8 = specialized static EspressoBuilder.getParamsDict(_:_:)(a1, a2, a3);
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v10 = specialized static EspressoBuilder.getInputNames(_:)(a4, MEMORY[0x24BE2F800], MEMORY[0x24BE2F7F0]);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9;
  }
  v11 = v10[2];
  if (v11)
  {
    v12 = (void **)(v10 + 5);
    v29 = a4;
    v30 = a5;
    v28 = v8;
    while (1)
    {
      v13 = (uint64_t)*(v12 - 1);
      v14 = *v12;
      swift_bridgeObjectRetain();
      v15 = specialized Set.contains(_:)(v13, (uint64_t)v14, a5);
      if (!*(_QWORD *)(v8 + 16))
        break;
      swift_bridgeObjectRetain();
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, (uint64_t)v14);
      if ((v17 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v8 + 56) + 32 * v16, (uint64_t)&v32);
      }
      else
      {
        v32 = 0u;
        v33 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v33 + 1))
        goto LABEL_20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v20 = v15;
        goto LABEL_21;
      }
      if (v31[2]
        && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x800000023D9D4900),
            (v19 & 1) != 0))
      {
        outlined init with copy of Any(v31[7] + 32 * v18, (uint64_t)&v32);
      }
      else
      {
        v32 = 0u;
        v33 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v33 + 1))
        goto LABEL_20;
      v20 = v15;
      type metadata accessor for NSNumber();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_21;
      objc_msgSend(v31, sel_floatValue);
      v22 = v21;

      v23 = 0;
      v24 = v22;
LABEL_22:
      type metadata accessor for InputPortInfo();
      swift_allocObject();
      swift_bridgeObjectRetain();
      LOBYTE(v32) = v23;
      v25 = InputPortInfo.init(_:_:_:_:)(v13, v14, v29, v20 & 1, v24 | ((unint64_t)v23 << 32));
      v12 += 2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v32 = v9;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, v13, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
      v9 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v11;
      a5 = v30;
      v8 = v28;
      if (!v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    v32 = 0u;
    v33 = 0u;
LABEL_20:
    v20 = v15;
    outlined destroy of Any?((uint64_t)&v32);
LABEL_21:
    v24 = 0;
    v23 = 1;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *specialized static EspressoBuilder.getInputNames(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t *), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v19[0] = 0;
  v6 = a2(a1, v19);
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v6);
  if (!v3)
  {
    v7 = v19[0];
    v8 = (_QWORD *)specialized Array.init(repeating:count:)(0, v19[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2], 0, v8);
    v9 = ((uint64_t (*)(uint64_t, unint64_t, _QWORD *))a3)(a1, v7, v8 + 4);
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v9);
    v11 = v8[2];
    if (v11)
    {
      swift_bridgeObjectRetain();
      v12 = 0;
      a3 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        if (v8[v12 + 4])
        {
          v14 = String.init(cString:)();
          v16 = v15;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3[2] + 1, 1, a3);
          v18 = a3[2];
          v17 = a3[3];
          if (v18 >= v17 >> 1)
            a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, a3);
          a3[2] = v18 + 1;
          v13 = &a3[2 * v18];
          v13[4] = v14;
          v13[5] = v16;
        }
        ++v12;
      }
      while (v11 != v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      a3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
  }
  return a3;
}

unint64_t specialized static EspressoBuilder.createOutputPortInfos(bundle:modelPath:operation:directBindOutputNames:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void *v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned int v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;

  v8 = specialized static EspressoBuilder.getParamsDict(_:_:)(a1, a2, a3);
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v10 = specialized static EspressoBuilder.getInputNames(_:)(a4, MEMORY[0x24BE2F808], MEMORY[0x24BE2F820]);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9;
  }
  v11 = v10[2];
  if (v11)
  {
    v12 = (void **)(v10 + 5);
    v29 = a4;
    v30 = a5;
    v28 = v8;
    while (1)
    {
      v13 = (uint64_t)*(v12 - 1);
      v14 = *v12;
      swift_bridgeObjectRetain();
      v15 = specialized Set.contains(_:)(v13, (uint64_t)v14, a5);
      if (!*(_QWORD *)(v8 + 16))
        break;
      swift_bridgeObjectRetain();
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, (uint64_t)v14);
      if ((v17 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v8 + 56) + 32 * v16, (uint64_t)&v32);
      }
      else
      {
        v32 = 0u;
        v33 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v33 + 1))
        goto LABEL_20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v20 = v15;
        goto LABEL_21;
      }
      if (v31[2]
        && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x800000023D9D4900),
            (v19 & 1) != 0))
      {
        outlined init with copy of Any(v31[7] + 32 * v18, (uint64_t)&v32);
      }
      else
      {
        v32 = 0u;
        v33 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v33 + 1))
        goto LABEL_20;
      v20 = v15;
      type metadata accessor for NSNumber();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_21;
      objc_msgSend(v31, sel_floatValue);
      v22 = v21;

      v23 = 0;
      v24 = v22;
LABEL_22:
      type metadata accessor for OutputPortInfo();
      swift_allocObject();
      swift_bridgeObjectRetain();
      LOBYTE(v32) = v23;
      v25 = OutputPortInfo.init(_:_:_:_:)(v13, v14, v29, v20 & 1, v24 | ((unint64_t)v23 << 32));
      v12 += 2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v32 = v9;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, v13, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
      v9 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v11;
      a5 = v30;
      v8 = v28;
      if (!v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    v32 = 0u;
    v33 = 0u;
LABEL_20:
    v20 = v15;
    outlined destroy of Any?((uint64_t)&v32);
LABEL_21:
    v24 = 0;
    v23 = 1;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  return v9;
}

BOOL specialized static EspressoBuilder.isPreCompiled(bundle:netPath:)(void *a1, uint64_t a2, void *a3)
{
  void *v6;
  void *v7;
  id v8;
  Swift::String v9;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (void *)MEMORY[0x2426372E8](a2, a3);
  v7 = (void *)MEMORY[0x2426372E8](0x656C646E75622ELL, 0xE700000000000000);
  v8 = objc_msgSend(a1, sel_pathForResource_ofType_, v6, v7);

  if (v8)
  {

  }
  else
  {
    v12 = xmmword_23D9AB750;
    v13 = 0;
    v14 = 0;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v11[0] = 0xD000000000000024;
    v11[1] = 0x800000023D9D49E0;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    v11[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005CLL, 0x800000023D9D4940, 39, (uint64_t *)&v12, (uint64_t)v11, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  }
  return v8 != 0;
}

uint64_t specialized static EspressoBuilder.getCompilation(forModel:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  Swift::String v10;
  uint64_t v11;
  id v12;
  void *v13;
  unsigned int v14;

  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 1818848558;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  v5 = a1;
  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_defaultManager);
  v8 = (void *)MEMORY[0x2426372E8](a1, a2);
  v9 = objc_msgSend(v7, sel_fileExistsAtPath_, v8);

  if (!v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = 0x737365727073652ELL;
    v10._object = (void *)0xED000074656E2E6FLL;
    String.append(_:)(v10);
    v5 = a1;
    v11 = a2;
    v12 = objc_msgSend(v6, sel_defaultManager);
    v13 = (void *)MEMORY[0x2426372E8](a1, v11);
    v14 = objc_msgSend(v12, sel_fileExistsAtPath_, v13);

    if (!v14)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v5;
}

_QWORD *specialized static EspressoBuilder.createCompiledModel(bundle:modelPath:modelParams:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  Swift::String v12;
  Swift::String v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v6 = specialized static EspressoBuilder.getCompilation(forModel:)(a2, (uint64_t)a3);
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    v10 = a1;
    return specialized E5RTRegressor.__allocating_init(bundle:netPath:directBindInputNames:directBindOutputNames:configName:)(v10, v8, v9, MEMORY[0x24BEE4B08], MEMORY[0x24BEE4B08], 1852399981, (_QWORD *)0xE400000000000000);
  }
  else
  {
    v17[0] = 0;
    v17[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v12._object = (void *)0x800000023D9D49A0;
    v12._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v12);
    v13._countAndFlagsBits = a2;
    v13._object = a3;
    String.append(_:)(v13);
    v17[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v14 = xmmword_23D9AB750;
    v15 = 0;
    v16 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v14, 0xD00000000000005CLL, 0x800000023D9D4940, 70, (uint64_t)v17, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type EspressoBuilder.EspressoBuillderException and conformance EspressoBuilder.EspressoBuillderException()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EspressoBuilder.EspressoBuillderException and conformance EspressoBuilder.EspressoBuillderException;
  if (!lazy protocol witness table cache variable for type EspressoBuilder.EspressoBuillderException and conformance EspressoBuilder.EspressoBuillderException)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EspressoBuilder.EspressoBuillderException, &unk_250E41800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EspressoBuilder.EspressoBuillderException and conformance EspressoBuilder.EspressoBuillderException);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EspressoBuilder.EspressoBuillderException and conformance EspressoBuilder.EspressoBuillderException;
  if (!lazy protocol witness table cache variable for type EspressoBuilder.EspressoBuillderException and conformance EspressoBuilder.EspressoBuillderException)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EspressoBuilder.EspressoBuillderException, &unk_250E41800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EspressoBuilder.EspressoBuillderException and conformance EspressoBuilder.EspressoBuillderException);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EspressoBuilder.EspressoBuillderException(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D888F7C + 4 * byte_23D9B9593[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D888FB0 + 4 * byte_23D9B958E[v4]))();
}

uint64_t sub_23D888FB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D888FB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D888FC0);
  return result;
}

uint64_t sub_23D888FCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D888FD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D888FD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D888FE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for EspressoBuilder.EspressoBuillderException()
{
  return &unk_250E41800;
}

uint64_t HandyLoggerConsoleSink.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  HandyLoggerConsoleSink.init()();
  return v0;
}

uint64_t HandyLoggerConsoleSink.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v1, v2);
  v3 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v3, v4);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x24BEE5758], v5);
  static DispatchQoS.unspecified.getter();
  v11[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t HandyLoggerConsoleSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(int a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, NSObject *a6, uint64_t a7, uint64_t a8)
{
  return specialized HandyLoggerConsoleSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(a1, a2, a4, a5, a6, a7, a8);
}

uint64_t closure #1 in HandyLoggerConsoleSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(int a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  HandyLoggerLogLevel.description.getter(a1);
  v9._countAndFlagsBits = 58;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = a2;
  v10._object = a3;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = a4;
  v12._object = a5;
  String.append(_:)(v12);
  NSLog(_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t HandyLoggerConsoleSink.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t HandyLoggerConsoleSink.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t specialized HandyLoggerConsoleSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(int a1, uint64_t *a2, uint64_t a3, void *a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  __int128 aBlock;
  uint64_t (*v46)(uint64_t);
  void *v47;
  uint64_t (*v48)();
  uint64_t v49;
  uint64_t DynamicType;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[40];

  v44._countAndFlagsBits = a3;
  v44._object = a4;
  v12 = type metadata accessor for JSONEncodingOptions();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *a2;
  v42 = a2[1];
  v17 = (void *)a2[3];
  v41 = (uint64_t (*)(uint64_t))a2[2];
  outlined init with copy of Any(a7, (uint64_t)v55);
  if (!swift_dynamicCast())
    goto LABEL_5;
  v39 = a5;
  v40 = v7;
  swift_bridgeObjectRetain();
  v18 = String.init(format:_:)();
  v12 = v19;
  swift_bridgeObjectRelease();
  while (1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
    *(_QWORD *)&aBlock = v43;
    *((_QWORD *)&aBlock + 1) = v42;
    v46 = v41;
    v47 = v17;
    *(_QWORD *)&aBlock = LogArea.description.getter();
    *((_QWORD *)&aBlock + 1) = v20;
    v21._countAndFlagsBits = 58;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    String.append(_:)(v44);
    v22._countAndFlagsBits = 58;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v52[0] = v39;
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v25 = *((_QWORD *)&aBlock + 1);
    v24 = aBlock;
    a5 = *(NSObject **)(v40 + 16);
    v7 = swift_allocObject();
    *(_DWORD *)(v7 + 16) = a1;
    *(_OWORD *)(v7 + 24) = __PAIR128__(v25, v24);
    *(_QWORD *)(v7 + 40) = v18;
    *(_QWORD *)(v7 + 48) = v12;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = partial apply for closure #1 in HandyLoggerConsoleSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:);
    *(_QWORD *)(v26 + 24) = v7;
    v48 = _sIg_Ieg_TRTA_0;
    v49 = v26;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v46 = thunk for @escaping @callee_guaranteed () -> ();
    v47 = &block_descriptor_16;
    v27 = _Block_copy(&aBlock);
    v13 = v49;
    swift_retain();
    swift_release();
    dispatch_sync(a5, v27);
    _Block_release(v27);
    LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v27 & 1) == 0)
      break;
    __break(1u);
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
    if (!swift_dynamicCast())
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
    v39 = a5;
    v40 = v7;
    v38 = a1;
    outlined init with take of PinchCancellationModule(&aBlock, (uint64_t)v52);
    __swift_project_boxed_opaque_existential_1(v52, v53);
    DynamicType = swift_getDynamicType();
    v51 = v54;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message.Type);
    v29 = String.init<A>(describing:)();
    v31 = v30;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    JSONEncodingOptions.init()();
    v32 = Message.jsonString(options:)();
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    DynamicType = v29;
    v51 = v31;
    v35._countAndFlagsBits = 58;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    v36._countAndFlagsBits = v32;
    v36._object = v34;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v18 = DynamicType;
    v12 = v51;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
    a1 = v38;
  }
  return result;
}

uint64_t type metadata accessor for HandyLoggerConsoleSink()
{
  return objc_opt_self();
}

uint64_t method lookup function for HandyLoggerConsoleSink()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HandyLoggerConsoleSink.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of HandyLoggerConsoleSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of HandyLoggerConsoleSink.flush()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of HandyLoggerConsoleSink.clearLogs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_23D889764()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HandyLoggerConsoleSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)()
{
  uint64_t v0;

  return closure #1 in HandyLoggerConsoleSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_23D8897A0()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = a5 >> 1;
  v6 = a4 - (a5 >> 1);
  if (__OFSUB__(a4, a5 >> 1))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 > -result && v6 < 1)
    v8 = a4;
  else
    v8 = v5 - result;
  if (v5 < v8)
    goto LABEL_14;
  if (v8 >= a4)
    return a2;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0)
    return a2;
  __break(1u);
  return result;
}

Swift::Void __swiftcall PinchGesturesForRecovery.reset()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[3];
  uint64_t v11[3];

  v1 = (_QWORD *)v0;
  *(_DWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_DWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 36) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  if (*(_QWORD *)(_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_AG_Says5SIMD3VySfGGts5NeverOTg5048_s5Hands24PinchGesturesForRecoveryC5resetyyFSo18def7V_Says5G14VySfGGtAFXEfU_5Hands0klmN0CTf1cn_nTf4nd_nTm((uint64_t)&outlined read-only object #0 of PinchGesturesForRecovery.reset())
                 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, [SIMD3<Float>]>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v11[0] = v2;
  v3 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, 1, v11);
  swift_bridgeObjectRelease();
  v4 = v11[0];
  swift_beginAccess();
  v1[10] = v4;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_AG_Says5SIMD3VySfGGts5NeverOTg5048_s5Hands24PinchGesturesForRecoveryC5resetyyFSo18def7V_Says5G14VySfGGtAFXEfU_5Hands0klmN0CTf1cn_nTf4nd_nTm((uint64_t)&outlined read-only object #0 of PinchGesturesForRecovery.reset())
                 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, [SIMD3<Float>]>);
    v5 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v5 = MEMORY[0x24BEE4B00];
  }
  v10[0] = v5;
  v6 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, 1, v10);
  swift_bridgeObjectRelease();
  v7 = v10[0];
  swift_beginAccess();
  v1[11] = v7;
  swift_bridgeObjectRelease();
  v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v8 + 16) = 8;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  swift_beginAccess();
  v1[12] = v8;
  swift_bridgeObjectRelease();
  v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v9 + 16) = 8;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  swift_beginAccess();
  v1[13] = v9;
  swift_bridgeObjectRelease();
}

uint64_t PinchGesturesForRecovery.processScrollDetector(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  Swift::OpaquePointer v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  int v24;
  uint64_t result;
  _BOOL4 v27;
  BOOL v28;
  BOOL v29;
  float v30;
  float v31;
  BOOL v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  float v36;
  float v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 > a2)
    {
      v11 = a3 - 1;
      if (__OFSUB__(a3, 1))
      {
        __break(1u);
      }
      else
      {
        v12._rawValue = (void *)MEMORY[0x24BEE4AF8];
        if (v11 < a2 || v11 >= v10)
          goto LABEL_13;
        v5 = a3;
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        v13 = swift_dynamicCastClass();
        if (!v13)
        {
          swift_bridgeObjectRelease();
          v13 = MEMORY[0x24BEE4AF8];
        }
        v14 = *(_QWORD *)(v13 + 16);
        swift_release();
        if (v14 == v5 - a2)
        {
          v12._rawValue = (void *)swift_dynamicCastClass();
          swift_bridgeObjectRelease();
          if (v12._rawValue)
            goto LABEL_13;
          v12._rawValue = (void *)MEMORY[0x24BEE4AF8];
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      v12._rawValue = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a1 + 32, a2, (2 * v5) | 1);
LABEL_11:
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  v12._rawValue = (void *)MEMORY[0x24BEE4AF8];
LABEL_13:
  PinchGesturesForRecovery.trajectory(_:)(v12);
  v41 = *(_BYTE *)(a4 + 48);
  v15 = *((_QWORD *)v12._rawValue + 2);
  v16 = specialized PinchGesturesForRecovery.pinchCentroidMovementCondition(_:_:)((uint64_t)v12._rawValue, *(float *)(a4 + 32));
  v17 = specialized PinchGesturesForRecovery.pinkyKnuckleMovementCondition(_:_:)((_BOOL8)v12._rawValue, *(float *)(a4 + 36));
  v19 = v15 < *(_QWORD *)a4 || *(_QWORD *)(a4 + 8) < v15;
  v20 = *(_QWORD *)(v6 + 24);
  v21 = *(_QWORD *)(v6 + 72);
  v22 = *(float *)(v6 + 16);
  v23 = *(float *)(v6 + 32);
  v24 = *(unsigned __int8 *)(v6 + 36);
  result = swift_bridgeObjectRelease();
  v27 = v15 < *(_QWORD *)(a4 + 16) || *(_QWORD *)(a4 + 24) < v15;
  v28 = (v41 & 1) == 0;
  v29 = (*(_BYTE *)(a4 + 49) & 1) == 0;
  v30 = *(float *)(v6 + 40);
  v31 = *(float *)(v6 + 44);
  if (!v15)
    v28 = 1;
  v32 = !v16 || !v17;
  v33 = v21 >= v20 || v22 <= 0.015;
  v34 = (v28 || v32 || v19) | (v33 || v23 <= 2.0) | v24;
  if (!v15)
    v29 = 1;
  v35 = 1024;
  if ((v28 || v32 || v19) | (v21 >= v20 || v22 <= 0.015 || v23 <= 2.0) | v24 & 1)
    v35 = 0;
  v36 = *(float *)(a4 + 40);
  v37 = *(float *)(a4 + 44);
  v38 = (v29 || v32 || v27) | v33 | v24 | (v31 > v37) | (v30 > v36);
  v39 = v35 | 0x800;
  if ((v38 & 1) != 0)
    v39 = v35;
  if ((v34 & 1) != 0 && (v38 & 1) != 0)
  {
    if (!v15)
      v39 |= 2uLL;
    if (!v16)
      v39 |= 4uLL;
    if (!v17)
      v39 |= 8uLL;
    if (v19)
      v39 |= 0x10uLL;
    if (v21 >= v20)
      v39 |= 0x20uLL;
    if (v22 <= 0.015)
      v39 |= 0x40uLL;
    if (v23 <= 2.0)
      v39 |= 0x80uLL;
    if (v24)
      v39 |= 0x100uLL;
    if (v27)
      v40 = v39 | 0x1000;
    else
      v40 = v39;
    if (v31 > v37)
      v40 |= 0x2000uLL;
    if (v30 > v36)
      v40 |= 0x4000uLL;
  }
  else
  {
    v40 = v39 | 0x200;
  }
  *a5 = v40;
  return result;
}

uint64_t PinchGesturesForRecovery.processTapDetector(_:_:_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;
  float32x4_t v17;
  char v18;
  uint64_t v19;
  _BOOL4 v20;

  v7 = result;
  if (a2 < 0 || (v8 = *(_QWORD *)(result + 16), v8 <= a2))
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v9 = a3 - 1;
    if (__OFSUB__(a3, 1))
    {
      __break(1u);
      return result;
    }
    v10 = MEMORY[0x24BEE4AF8];
    if (v9 >= a2 && v9 < v8)
    {
      v11 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, v9);
      swift_bridgeObjectRetain();
      v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_5Hands8HandPoseVs5NeverOTg5095_s5Hands24PinchGesturesForRecoveryC18processTapDetectoryAA11BitMaskFlagVyAA0ghdE6StatesOGSayAA8eF33VG_S2iAC6ConfigV0ghO0VtFAKSiXEfU_SayAIGTf1cn_nTf4ng_n(v11, v7);
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  v12 = *(_QWORD *)(v10 + 16);
  v13 = specialized PinchGesturesForRecovery.pinchCentroidStationaryCondition(_:_:)(v10, a4[2]);
  v14 = specialized PinchGesturesForRecovery.pinkyKnuckleStationaryCondition(_:_:)(v10, a4[3]);
  v15 = *(_QWORD *)a4;
  v16 = *(_QWORD *)a4 < v12;
  v18 = specialized static PinchGesturesForRecovery.hoverDistanceCondition(_:_:)(v10, a4[4], v17);
  swift_bridgeObjectRelease();
  result = specialized static PinchGesturesForRecovery.hdDirDiffAngleCondition(_:_:_:_:)(v7, a2, a3, a4[5]);
  if (!((v12 == 0) | (!v13 | v14 ^ 1) & 1 | v16) && (v18 & 1) != 0 && (result & 1) != 0)
  {
    v19 = 32;
  }
  else
  {
    v20 = v12 == 0;
    v19 = 2;
    if (((v20 | !v13 | v14 ^ 1 | v16) & v20) == 0)
      v19 = 0;
    if (v15 < v12)
      v20 = 1;
    if (!v13)
      v19 |= 4uLL;
    if ((v14 & 1) == 0)
      v19 |= 8uLL;
    if (v20)
      v19 |= 0x10uLL;
    if ((v18 & 1) == 0)
      v19 |= 0x40uLL;
    if ((result & 1) == 0)
      v19 |= 0x80uLL;
  }
  *a5 = v19;
  return result;
}

uint64_t PinchGesturesForRecovery.updateBufferData(_:)(uint64_t a1)
{
  uint64_t *v1;
  float v2;
  float32x4_t *v3;
  char *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  float32x4_t *v45;
  unint64_t v46;
  char v47;
  float32x4_t *v48;
  uint64_t v49;
  float32x4_t v50;
  __int128 v51;
  BOOL v52;
  float v53;
  float v54;
  char v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  uint64_t *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  char v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  float32x4_t v81;
  float32x4_t v82;
  double v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t result;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  float32x4_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  float32x4_t *v101;
  uint64_t *v102;
  uint64_t v103;
  int64_t v104;
  float32x4_t *v105;
  float32x4_t *v106;
  uint64_t v107;
  int v108;
  float32x4_t v109;
  int v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  __int128 v114;
  float32x4_t *v115[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  float32x4_t v121;
  char v122;
  char v123;
  float v124;
  uint64_t v125;
  uint64_t *v126;

  v3 = *(float32x4_t **)(a1 + 8);
  v101 = *(float32x4_t **)a1;
  v99 = *(_OWORD *)(a1 + 32);
  v100 = *(_OWORD *)(a1 + 16);
  v97 = *(_OWORD *)(a1 + 64);
  v98 = *(_OWORD *)(a1 + 48);
  v95 = *(float32x4_t *)(a1 + 96);
  v96 = *(_OWORD *)(a1 + 80);
  v93 = *(_BYTE *)(a1 + 113);
  v94 = *(_BYTE *)(a1 + 112);
  v4 = (char *)(v1 + 10);
  v5 = *(float *)(a1 + 116);
  swift_beginAccess();
  v6 = v1[10];
  v7 = *(_QWORD *)(v6 + 64);
  v102 = v1;
  v103 = v6 + 64;
  v8 = 1 << *(_BYTE *)(v6 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v11 = v1 + 11;
  v106 = v3;
  v107 = v1[10];
  v104 = (unint64_t)(v8 + 63) >> 6;
  v105 = v3 + 2;
  swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    do
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_118;
        if (v16 >= v104)
          goto LABEL_88;
        v17 = *(_QWORD *)(v103 + 8 * v16);
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v104)
            goto LABEL_88;
          v17 = *(_QWORD *)(v103 + 8 * v13);
          if (!v17)
          {
            v13 = v16 + 2;
            if (v16 + 2 >= v104)
              goto LABEL_88;
            v17 = *(_QWORD *)(v103 + 8 * v13);
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v104)
                goto LABEL_88;
              v17 = *(_QWORD *)(v103 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  v13 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_119;
                  if (v13 >= v104)
                    goto LABEL_88;
                  v17 = *(_QWORD *)(v103 + 8 * v13);
                  ++v18;
                  if (v17)
                    goto LABEL_21;
                }
              }
              v13 = v18;
            }
          }
        }
LABEL_21:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v107 + 48) + 8 * v15);
      if ((v19 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
        goto LABEL_120;
      }
      if (v19 >= v106[1].i64[0])
        goto LABEL_102;
      v110 = v12;
      v111 = v105[2 * v19];
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v126 = *(uint64_t **)v4;
      v1 = v126;
      *(_QWORD *)v4 = 0x8000000000000000;
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
      v23 = v1[2];
      v24 = (v21 & 1) == 0;
      v25 = v23 + v24;
      if (__OFADD__(v23, v24))
        goto LABEL_103;
      v26 = v21;
      if (v1[3] >= v25)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v21 & 1) == 0)
            goto LABEL_104;
        }
        else
        {
          v1 = (uint64_t *)&v126;
          specialized _NativeDictionary.copy()();
          if ((v26 & 1) == 0)
            goto LABEL_104;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
        v1 = v126;
        v27 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_126;
        v22 = v27;
        if ((v26 & 1) == 0)
          goto LABEL_104;
      }
      v29 = v126;
      v30 = *(_QWORD **)(v126[7] + 8 * v22);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
      v32 = v30[2];
      v31 = v30[3];
      if (v32 >= v31 >> 1)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
      v30[2] = v32 + 1;
      *(float32x4_t *)&v30[2 * v32 + 4] = v111;
      *(_QWORD *)(v29[7] + 8 * v22) = v30;
      *(_QWORD *)v4 = v29;
      swift_endAccess();
      swift_beginAccess();
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v126 = *(uint64_t **)v4;
      v1 = v126;
      *(_QWORD *)v4 = 0x8000000000000000;
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
      v36 = v1[2];
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_105;
      v39 = v34;
      if (v1[3] >= v38)
      {
        if ((v33 & 1) != 0)
        {
          if ((v34 & 1) == 0)
            goto LABEL_106;
        }
        else
        {
          v1 = (uint64_t *)&v126;
          specialized _NativeDictionary.copy()();
          if ((v39 & 1) == 0)
            goto LABEL_106;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v33);
        v1 = v126;
        v40 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_126;
        v35 = v40;
        if ((v39 & 1) == 0)
          goto LABEL_106;
      }
      v42 = (uint64_t)v126;
      v125 = *(_QWORD *)(v126[7] + 8 * v35);
      if (!*(_QWORD *)(v125 + 16))
        goto LABEL_107;
      v1 = &v125;
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      if (v125)
        *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v35) = v125;
      else
        specialized _NativeDictionary._delete(at:)(v35, v42);
      *(_QWORD *)v4 = v42;
      swift_endAccess();
      if (!*(_QWORD *)(v42 + 16))
        goto LABEL_108;
      v1 = (uint64_t *)v42;
      v43 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
      if ((v44 & 1) == 0)
        goto LABEL_109;
      v45 = *(float32x4_t **)(*(_QWORD *)(v42 + 56) + 8 * v43);
      if (v45[1].i64[0] < 8uLL)
        goto LABEL_110;
      v1 = *(uint64_t **)v4;
      if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
        goto LABEL_111;
      v112 = v45[9];
      v46 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
      if ((v47 & 1) == 0)
        goto LABEL_112;
      v48 = *(float32x4_t **)(v1[7] + 8 * v46);
      if (v48[1].i64[0] < 7uLL)
        goto LABEL_113;
      v49 = 0;
      v50 = v48[8];
      *(_QWORD *)&v51 = 0;
      DWORD2(v51) = 0;
      HIDWORD(v51) = v110;
      while (1)
      {
        v113 = v50;
        v53 = *(float *)((unint64_t)&v113 & 0xFFFFFFFFFFFFFFF3 | (4 * (v49 & 3)));
        v114 = v51;
        v54 = *(float *)((unint64_t)&v114 & 0xFFFFFFFFFFFFFFF3 | (4 * (v49 & 3)));
        v52 = v53 == v54;
        if (v49 == 2)
          break;
        while (1)
        {
          ++v49;
          if (v52)
            break;
          if (v49 == 2)
            goto LABEL_63;
          v52 = 0;
        }
      }
      v12 = v110;
    }
    while (v53 == v54);
LABEL_63:
    v108 = v110;
    v109 = v50;
    swift_beginAccess();
    v55 = swift_isUniquelyReferenced_nonNull_native();
    v126 = (uint64_t *)*v11;
    v1 = v126;
    *v11 = 0x8000000000000000;
    v57 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
    v58 = v1[2];
    v59 = (v56 & 1) == 0;
    v60 = v58 + v59;
    if (__OFADD__(v58, v59))
      goto LABEL_114;
    v61 = v56;
    if (v1[3] >= v60)
    {
      if ((v55 & 1) != 0)
      {
        if ((v56 & 1) == 0)
          goto LABEL_115;
      }
      else
      {
        v1 = (uint64_t *)&v126;
        specialized _NativeDictionary.copy()();
        if ((v61 & 1) == 0)
          goto LABEL_115;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, v55);
      v1 = v126;
      v62 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
      if ((v61 & 1) != (v63 & 1))
        goto LABEL_126;
      v57 = v62;
      if ((v61 & 1) == 0)
        goto LABEL_115;
    }
    v64 = v126;
    v65 = *(_QWORD **)(v126[7] + 8 * v57);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65[2] + 1, 1, v65);
    v67 = v65[2];
    v66 = v65[3];
    v68 = v109;
    if (v67 >= v66 >> 1)
    {
      v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v65);
      v68 = v109;
      v65 = v80;
    }
    v69 = vsubq_f32(v112, v68);
    v69.i32[3] = 0;
    v65[2] = v67 + 1;
    *(float32x4_t *)&v65[2 * v67 + 4] = v69;
    *(_QWORD *)(v64[7] + 8 * v57) = v65;
    *v11 = (uint64_t)v64;
    swift_endAccess();
    swift_beginAccess();
    v70 = swift_isUniquelyReferenced_nonNull_native();
    v126 = (uint64_t *)*v11;
    v1 = v126;
    *v11 = 0x8000000000000000;
    v72 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
    v73 = v1[2];
    v74 = (v71 & 1) == 0;
    v75 = v73 + v74;
    if (__OFADD__(v73, v74))
      goto LABEL_116;
    v76 = v71;
    if (v1[3] < v75)
      break;
    if ((v70 & 1) != 0)
    {
      if ((v71 & 1) == 0)
        goto LABEL_87;
    }
    else
    {
      v1 = (uint64_t *)&v126;
      specialized _NativeDictionary.copy()();
      if ((v76 & 1) == 0)
        goto LABEL_87;
    }
LABEL_81:
    v79 = (uint64_t)v126;
    v125 = *(_QWORD *)(v126[7] + 8 * v72);
    if (!*(_QWORD *)(v125 + 16))
      goto LABEL_117;
    v1 = &v125;
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    if (v125)
      *(_QWORD *)(*(_QWORD *)(v79 + 56) + 8 * v72) = v125;
    else
      specialized _NativeDictionary._delete(at:)(v72, v79);
    *v11 = v79;
    swift_endAccess();
    v12 = v108;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v75, v70);
  v1 = v126;
  v77 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
  if ((v76 & 1) != (v78 & 1))
    goto LABEL_126;
  v72 = v77;
  if ((v76 & 1) != 0)
    goto LABEL_81;
LABEL_87:
  __break(1u);
LABEL_88:
  swift_release();
  v115[0] = v101;
  v115[1] = v106;
  v116 = v100;
  v117 = v99;
  v118 = v98;
  v119 = v97;
  v120 = v96;
  v121 = v95;
  v122 = v94;
  v123 = v93;
  v124 = v5;
  v83 = specialized static PinchGestureHelper.getWristPitchRotation(_:)(v115, v95, *(double *)&v96, v81, v82);
  v5 = *(float *)&v83;
  v11 = v102;
  v1 = v102 + 12;
  swift_beginAccess();
  v4 = (char *)v102[12];
  v84 = swift_isUniquelyReferenced_nonNull_native();
  v102[12] = (uint64_t)v4;
  if ((v84 & 1) != 0)
    goto LABEL_89;
LABEL_120:
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
  *v1 = (uint64_t)v4;
LABEL_89:
  v86 = *((_QWORD *)v4 + 2);
  v85 = *((_QWORD *)v4 + 3);
  if (v86 >= v85 >> 1)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v85 > 1), v86 + 1, 1, v4);
    *v1 = (uint64_t)v4;
  }
  *((_QWORD *)v4 + 2) = v86 + 1;
  *(float *)&v4[4 * v86 + 32] = v5;
  if (!*(_QWORD *)(*v1 + 16))
  {
    __break(1u);
    goto LABEL_122;
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  result = swift_endAccess();
  v88 = *v1;
  v89 = *(_QWORD *)(*v1 + 16);
  if (v89 < 7)
  {
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  v5 = *(float *)(v88 + 56);
  if (v5 == 0.0)
    return result;
  if (v89 < 8)
    goto LABEL_123;
  v2 = *(float *)(v88 + 60);
  v1 = v11 + 13;
  swift_beginAccess();
  v4 = (char *)v11[13];
  v90 = swift_isUniquelyReferenced_nonNull_native();
  v11[13] = (uint64_t)v4;
  if ((v90 & 1) == 0)
  {
LABEL_124:
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    *v1 = (uint64_t)v4;
  }
  v92 = *((_QWORD *)v4 + 2);
  v91 = *((_QWORD *)v4 + 3);
  if (v92 >= v91 >> 1)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v91 > 1), v92 + 1, 1, v4);
    *v1 = (uint64_t)v4;
  }
  *((_QWORD *)v4 + 2) = v92 + 1;
  *(float *)&v4[4 * v92 + 32] = v2 - v5;
  if (*(_QWORD *)(*v1 + 16))
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    return swift_endAccess();
  }
  __break(1u);
LABEL_126:
  type metadata accessor for ARVinoJointIndexes(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall PinchGesturesForRecovery.trajectory(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float v16;
  char *v17;
  float32x4_t *v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  BOOL v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  float v65;
  float v66;
  float32x4_t v67;
  float v68;
  float *v69;
  float32x2_t v70;
  float v71;
  float32x2_t v72;
  float v73;
  float v74;
  float32x4_t v79;
  float32x4_t v80;
  float v81;
  float32x4_t v82;
  float v83;
  uint64_t v84;
  unint64_t v85;
  float v86;
  float v87;
  float32x4_t v88;
  uint32x4_t v89;
  __int32 v90;
  char *v91;
  uint64_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  __int128 v99;
  __int128 v100;
  _QWORD v101[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char v108;
  char v109;
  int v110;

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (v2)
  {
    v3 = v1;
    v4 = (uint64_t *)(v1 + 104);
    v91 = (char *)a1._rawValue + 32;
    swift_bridgeObjectRetain();
    v92 = (uint64_t *)(v1 + 88);
    swift_beginAccess();
    swift_beginAccess();
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v17 = &v91[128 * v7];
      v18 = *(float32x4_t **)v17;
      v19 = *((_QWORD *)v17 + 1);
      v20 = *((_DWORD *)v17 + 29);
      v21 = v17[113];
      v22 = v17[112];
      v24 = *((_OWORD *)v17 + 5);
      v23 = *((_OWORD *)v17 + 6);
      v26 = *((_OWORD *)v17 + 3);
      v25 = *((_OWORD *)v17 + 4);
      v28 = *((_OWORD *)v17 + 1);
      v27 = *((_OWORD *)v17 + 2);
      v101[0] = *(_QWORD *)v17;
      v101[1] = v19;
      v102 = v28;
      v103 = v27;
      v104 = v26;
      v105 = v25;
      v106 = v24;
      v107 = v23;
      v108 = v22;
      v109 = v21;
      v110 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PinchGesturesForRecovery.updateBufferData(_:)((uint64_t)v101);
      v29 = *(_QWORD *)(v3 + 88);
      if (*(_QWORD *)(v29 + 16)
        && (v30 = specialized __RawDictionaryStorage.find<A>(_:)(6uLL), (v31 & 1) != 0)
        && (v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30), (v33 = *(_QWORD *)(v32 + 16)) != 0))
      {
        v34 = *(float32x4_t *)(v32 + 16 * v33 + 16);
      }
      else
      {
        specialized SIMD.init<A>(_:)(MEMORY[0x24BEE4AF8]);
      }
      v96 = v34;
      v35 = *v92;
      if (*(_QWORD *)(*v92 + 16)
        && (v36 = specialized __RawDictionaryStorage.find<A>(_:)(0), (v37 & 1) != 0)
        && (v38 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v36), (v39 = *(_QWORD *)(v38 + 16)) != 0))
      {
        v40 = *(float32x4_t *)(v38 + 16 * v39 + 16);
      }
      else
      {
        specialized SIMD.init<A>(_:)(MEMORY[0x24BEE4AF8]);
      }
      v41 = vmulq_f32(v96, v96);
      v42 = sqrtf(v41.f32[2] + vaddv_f32(*(float32x2_t *)v41.f32));
      v43 = vmulq_f32(v40, v40);
      v44 = v42 / sqrtf(v43.f32[2] + vaddv_f32(*(float32x2_t *)v43.f32));
      if (v44 <= *(float *)(v3 + 32))
        v44 = *(float *)(v3 + 32);
      *(float *)(v3 + 32) = v44;
      v45 = *(float *)(v3 + 16);
      if (v42 > v45)
        v45 = v42;
      *(float *)(v3 + 16) = v45;
      v46 = *(_QWORD *)(v3 + 24);
      _CF = __CFADD__(v46, 1);
      v48 = v46 + 1;
      if (_CF)
        break;
      *(_QWORD *)(v3 + 24) = v48;
      v49 = *(_QWORD *)(v3 + 88);
      if (!*(_QWORD *)(v49 + 16))
        goto LABEL_56;
      v50 = specialized __RawDictionaryStorage.find<A>(_:)(6uLL);
      if ((v51 & 1) == 0)
        goto LABEL_57;
      v52 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v50);
      v53 = *(_QWORD *)(v52 + 16);
      if (v53 < 3)
        goto LABEL_58;
      v54 = 0;
      v55 = *(_OWORD *)(v52 + 64);
      while (1)
      {
        v99 = v55;
        v57 = *(float *)((unint64_t)&v99 & 0xFFFFFFFFFFFFFFF3 | (4 * (v54 & 3)));
        v100 = 0uLL;
        v58 = *(float *)((unint64_t)&v100 & 0xFFFFFFFFFFFFFFF3 | (4 * (v54 & 3)));
        v56 = v57 == v58;
        if (v54 == 2)
          break;
        while (1)
        {
          ++v54;
          if (v56)
            break;
          if (v54 == 2)
            goto LABEL_32;
          v56 = 0;
        }
      }
      if (v57 != v58)
      {
LABEL_32:
        v59 = 2;
        v60 = 16 * v53;
        v61 = (float *)(v52 + 16 * v53 - 32 + 40);
        v62 = 0;
        v63 = 0.0;
        do
        {
          v64 = vadd_f32(v62, *(float32x2_t *)(v61 - 2));
          v65 = *v61;
          v61 += 4;
          v66 = v63 + v65;
          v62 = v64;
          v63 = v63 + v65;
          --v59;
        }
        while (v59);
        *(float32x2_t *)v67.f32 = vmul_f32(v64, (float32x2_t)0x3F0000003F000000);
        v68 = v66 * 0.5;
        if (v53 >= 6)
          v53 = 6;
        v69 = (float *)(v52 + v60 - 16 * v53 + 40);
        v70 = 0;
        v71 = 0.0;
        do
        {
          v72 = vadd_f32(v70, *(float32x2_t *)(v69 - 2));
          v73 = *v69;
          v69 += 4;
          v74 = v71 + v73;
          v70 = v72;
          v71 = v71 + v73;
          --v53;
        }
        while (v53);
        v67.i64[1] = LODWORD(v68);
        __asm { FMOV            V2.2S, #6.0 }
        *(float32x2_t *)v79.f32 = vdiv_f32(v72, _D2);
        v79.f32[2] = v74 / 6.0;
        v79.i32[3] = 0;
        v93 = v79;
        v97 = v67;
        if (specialized static PinchGestureHelper.similarity(_:_:)(v67, v79) < 0.0 && (*(_BYTE *)(v3 + 36) & 1) == 0)
        {
          v80 = vmulq_f32(v93, v93);
          v81 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 2), vaddq_f32(v80, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1))).f32[0]);
          v82 = vmulq_f32(v97, v97);
          v83 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 2), vaddq_f32(v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1))).f32[0]);
          if (v81 <= v83)
            v81 = v83;
          if (v81 > 0.001)
            *(_BYTE *)(v3 + 36) = 1;
        }
      }
      v84 = *v4;
      v85 = *(_QWORD *)(*v4 + 16);
      if (v85 < 7)
        goto LABEL_59;
      if (*(float *)(v84 + 56) != 0.0)
      {
        v86 = *(float *)(v3 + 40);
        v87 = fabsf((float)(*(float *)(v84 + 4 * v85 + 24) + 0.0) + *(float *)(v84 + 4 * v85 + 28)) * 0.5;
        if (v86 <= v87)
          v86 = v87;
        *(float *)(v3 + 40) = v86;
      }
      if (!v18[1].i64[0])
        goto LABEL_60;
      v94 = v18[3];
      v98 = v18[5];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v98;
      v15.i32[3] = 0;
      if ((v8 & 1) == 0)
      {
        v88.i64[0] = v5;
        v88.i64[1] = v6;
        v89 = (uint32x4_t)vceqq_f32(v15, v88);
        v89.i32[3] = v89.i32[2];
        if ((vminvq_u32(v89) & 0x80000000) != 0)
        {
          v14 = 0.0;
        }
        else
        {
          v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL), vnegq_f32(v88)), v98, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL));
          v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
          v10.i32[3] = v90;
          v11 = vmulq_f32(v15, v88);
          LODWORD(v12) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).u32[0];
          v13 = vmulq_f32(v94, v10);
          v95 = v15;
          v14 = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0], v12);
          v15 = v95;
        }
        v16 = fabsf(v14);
        if (*(float *)(v3 + 44) > v16)
          v16 = *(float *)(v3 + 44);
        *(float *)(v3 + 44) = v16;
      }
      v8 = 0;
      ++v7;
      v6 = v15.i64[1];
      v5 = v15.i64[0];
      if (v7 == v2)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
  }
}

uint64_t PinchGesturesForRecovery.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchGesturesForRecovery()
{
  return objc_opt_self();
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  Swift::UInt v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  Swift::UInt v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v8 = a1[4];
  v7 = a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  v12 = v9[2];
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_24;
  v15 = v10;
  v16 = v11;
  v17 = v9[3];
  swift_bridgeObjectRetain();
  if (v17 >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v23 = 8 * v15;
    *(_QWORD *)(v22[6] + v23) = v8;
    *(_QWORD *)(v22[7] + v23) = v7;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = a1 + 7;
    while (1)
    {
      v30 = *(v28 - 1);
      v29 = *v28;
      v31 = (_QWORD *)*a3;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
        break;
      v37 = v32;
      v38 = v33;
      v39 = v31[3];
      swift_bridgeObjectRetain();
      if (v39 < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        v40 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        if ((v38 & 1) != (v41 & 1))
          goto LABEL_26;
        v37 = v40;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v42 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v37 >> 6) + 64) |= 1 << v37;
      v43 = 8 * v37;
      *(_QWORD *)(v42[6] + v43) = v30;
      *(_QWORD *)(v42[7] + v43) = v29;
      v44 = v42[2];
      v25 = __OFADD__(v44, 1);
      v45 = v44 + 1;
      if (v25)
        goto LABEL_25;
      v42[2] = v45;
      v28 += 2;
      if (!--v27)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v16 & 1) == (v19 & 1))
  {
    v15 = v18;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  type metadata accessor for ARVinoJointIndexes(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  _StringGuts.grow(_:)(30);
  v46._object = (void *)0x800000023D9C5160;
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v46);
  type metadata accessor for ARVinoJointIndexes(0);
  _print_unlocked<A, B>(_:_:)();
  v47._countAndFlagsBits = 39;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_AG_Says5SIMD3VySfGGts5NeverOTg5048_s5Hands24PinchGesturesForRecoveryC5resetyyFSo18def7V_Says5G14VySfGGtAFXEfU_5Hands0klmN0CTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v12;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v7 + 16) = 8;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 144) = 0u;
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = v12 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_5Hands8HandPoseVs5NeverOTg5095_s5Hands24PinchGesturesForRecoveryC18processTapDetectoryAA11BitMaskFlagVyAA0ghdE6StatesOGSayAA8eF33VG_S2iAC6ConfigV0ghO0VtFAKSiXEfU_SayAIGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v27 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v27;
  v7 = (unint64_t *)(a1 + 32);
  v8 = a2 + 32;
  v19 = *(_QWORD *)(a2 + 16);
  while (1)
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 >= v19)
      break;
    v11 = (uint64_t *)(v8 + (v9 << 7));
    v12 = *v11;
    v13 = v11[1];
    v25 = *((_OWORD *)v11 + 2);
    v26 = *((_OWORD *)v11 + 1);
    v23 = *((_OWORD *)v11 + 4);
    v24 = *((_OWORD *)v11 + 3);
    v21 = *((_OWORD *)v11 + 6);
    v22 = *((_OWORD *)v11 + 5);
    v20 = *((_BYTE *)v11 + 112);
    v14 = *((_BYTE *)v11 + 113);
    v15 = *((_DWORD *)v11 + 29);
    v17 = *(_QWORD *)(v27 + 16);
    v16 = *(_QWORD *)(v27 + 24);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v17 >= v16 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v27 + 16) = v17 + 1;
    v18 = v27 + (v17 << 7);
    *(_QWORD *)(v18 + 32) = v12;
    *(_QWORD *)(v18 + 40) = v13;
    *(_OWORD *)(v18 + 48) = v26;
    *(_OWORD *)(v18 + 64) = v25;
    *(_OWORD *)(v18 + 80) = v24;
    *(_OWORD *)(v18 + 96) = v23;
    *(_OWORD *)(v18 + 112) = v22;
    *(_OWORD *)(v18 + 128) = v21;
    *(_BYTE *)(v18 + 144) = v20;
    *(_BYTE *)(v18 + 145) = v14;
    *(_DWORD *)(v18 + 148) = v15;
    if (!--v2)
      return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized PinchGesturesForRecovery.init(_:)(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  uint64_t result;

  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 36) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 8;
  *(_QWORD *)(v1 + 56) = 0x400000003C75C28FLL;
  *(_DWORD *)(v1 + 64) = 981668463;
  *(_QWORD *)(v1 + 72) = 3;
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 80) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v1 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *(_QWORD *)(v1 + 96) = v3;
  *(_QWORD *)(v1 + 104) = v3;
  v4 = objc_msgSend(a1, sel_ThresholdScrollMinSwipeFramesRecovery);
  if ((v4 & 0x80000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 72) = v4;
    PinchGesturesForRecovery.reset()();
    return v1;
  }
  return result;
}

BOOL specialized PinchGesturesForRecovery.pinchCentroidMovementCondition(_:_:)(uint64_t a1, float a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v8;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  HandPose.getSimplifiedPinchCentroid(isRaw:)();
  v8 = v3;
  HandPose.getSimplifiedPinchCentroid(isRaw:)();
  v5 = vsubq_f32(v4, v8);
  v6 = vmulq_f32(v5, v5);
  return sqrtf(v6.f32[2] + vaddv_f32(*(float32x2_t *)v6.f32)) >= a2;
}

BOOL specialized PinchGesturesForRecovery.pinkyKnuckleMovementCondition(_:_:)(_BOOL8 result, float a2)
{
  uint64_t v2;
  float32x2_t *v3;
  float32x2_t *v4;
  float v5;
  float32x2_t v6;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return 0;
  v3 = *(float32x2_t **)(result + 40);
  if (*(_QWORD *)&v3[2] < 0x16uLL)
  {
    __break(1u);
  }
  else
  {
    v4 = *(float32x2_t **)(result + (v2 << 7) - 88);
    if (*(_QWORD *)&v4[2] >= 0x16uLL)
    {
      v5 = v4[89].f32[0] - v3[89].f32[0];
      v6 = vsub_f32(v4[88], v3[88]);
      return sqrtf((float)(v5 * v5) + vaddv_f32(vmul_f32(v6, v6))) >= a2;
    }
  }
  __break(1u);
  return result;
}

BOOL specialized PinchGesturesForRecovery.pinchCentroidStationaryCondition(_:_:)(uint64_t a1, float a2)
{
  uint64_t v2;
  _BOOL8 result;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  BOOL v14;
  float32x4_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  if (v2 == 1)
    return 1;
  HandPose.getSimplifiedPinchCentroid(isRaw:)();
  v15 = v6;
  v7 = v2 - 2;
  v8 = a1 + 160;
  do
  {
    HandPose.getSimplifiedPinchCentroid(isRaw:)();
    v10 = vsubq_f32(v9, v15);
    v11 = vmulq_f32(v10, v10);
    v12 = sqrtf(v11.f32[2] + vaddv_f32(*(float32x2_t *)v11.f32));
    v14 = v7-- != 0;
    result = v12 < a2;
    if (v12 >= a2)
      break;
    v8 += 128;
  }
  while (v14);
  return result;
}

uint64_t specialized PinchGesturesForRecovery.pinkyKnuckleStationaryCondition(_:_:)(uint64_t result, float a2)
{
  uint64_t v2;
  float32x2_t *v3;
  float32x2_t *v4;
  float32x2_t v5;
  float v6;
  uint64_t v7;
  float32x2_t **v8;
  float32x2_t v9;
  float v10;
  BOOL v11;
  BOOL v12;
  float32x2_t *v13;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return 0;
  if (v2 == 1)
    return 1;
  v3 = *(float32x2_t **)(result + 40);
  if (*(_QWORD *)&v3[2] < 0x16uLL)
  {
    __break(1u);
  }
  else
  {
    v4 = *(float32x2_t **)(result + 168);
    if (*(_QWORD *)&v4[2] < 0x16uLL)
    {
LABEL_14:
      __break(1u);
    }
    else
    {
      v5 = v3[88];
      v6 = v3[89].f32[0];
      v7 = v2 - 2;
      v8 = (float32x2_t **)(result + 296);
      while (1)
      {
        v9 = vsub_f32(v4[88], v5);
        v10 = sqrtf((float)((float)(v4[89].f32[0] - v6) * (float)(v4[89].f32[0] - v6)) + vaddv_f32(vmul_f32(v9, v9)));
        v11 = v7-- != 0;
        v12 = v11;
        result = v10 < a2;
        if (v10 >= a2 || !v12)
          break;
        v13 = *v8;
        v8 += 16;
        v4 = v13;
        if (*(_QWORD *)&v13[2] < 0x16uLL)
          goto LABEL_14;
      }
    }
  }
  return result;
}

uint64_t specialized static PinchGesturesForRecovery.hoverDistanceCondition(_:_:)(uint64_t result, float32_t a2, float32x4_t a3)
{
  uint64_t v3;
  float32x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  float32x4_t v8;
  BOOL v10;
  uint64_t v11;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return 0;
  v4 = *(float32x2_t **)(result + 40);
  v5 = (unint64_t)v4[2];
  if (v5 < 5)
  {
LABEL_11:
    __break(1u);
  }
  else
  {
    v6 = v3 - 1;
    v7 = (uint64_t *)(result + 168);
    while (v5 >= 0xA)
    {
      *(float32x2_t *)a3.f32 = vsub_f32(v4[22], v4[42]);
      a3.f32[2] = v4[23].f32[0] - v4[43].f32[0];
      v8 = vmulq_f32(a3, a3);
      a3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
      a3.f32[0] = sqrtf(a3.f32[0]);
      v10 = v6-- != 0;
      result = a3.f32[0] <= a2;
      if (a3.f32[0] > a2 || !v10)
        return result;
      v11 = *v7;
      v7 += 16;
      v4 = (float32x2_t *)v11;
      v5 = *(_QWORD *)(v11 + 16);
      if (v5 < 5)
        goto LABEL_11;
    }
    __break(1u);
  }
  return result;
}

BOOL specialized static PinchGesturesForRecovery.hdDirDiffAngleCondition(_:_:_:_:)(_BOOL8 result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t v7;
  int32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;

  v4 = *(_QWORD *)(result + 16);
  if (!v4)
    return 0;
  v5 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    result = 0;
    if ((v5 & 0x8000000000000000) == 0 && v4 > a3 && (a3 & 0x8000000000000000) == 0 && v5 < v4)
    {
      HandPose.getHoverDistanceVector()();
      v8 = (int32x4_t)vmulq_f32(v7, v7);
      v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
      v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
      v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
      v16 = vmulq_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
      HandPose.getHoverDistanceVector()();
      v12 = (int32x4_t)vmulq_f32(v11, v11);
      v12.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
      v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
      v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
      v15 = vmulq_f32(v16, vmulq_n_f32(v11, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]));
      return (float)((float)(acosf(fmaxf(fminf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0], 1.0), -1.0))/ 3.1416)* 180.0) <= a4;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PinchGesturesForRecovery.Config(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchGesturesForRecovery.Config(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchGesturesForRecovery.Config()
{
  return &type metadata for PinchGesturesForRecovery.Config;
}

ValueMetadata *type metadata accessor for PinchGesturesForRecovery.GesturesDetectorBitMasks()
{
  return &type metadata for PinchGesturesForRecovery.GesturesDetectorBitMasks;
}

ValueMetadata *type metadata accessor for PinchGesturesForRecovery.Config.TapDetectorConfig()
{
  return &type metadata for PinchGesturesForRecovery.Config.TapDetectorConfig;
}

__n128 __swift_memcpy50_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for PinchGesturesForRecovery.Config.ScrollDetectorConfig()
{
  return &type metadata for PinchGesturesForRecovery.Config.ScrollDetectorConfig;
}

unint64_t specialized Sequence<>.min()(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v5 < v2)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1 + 64;
  v2 = *(_BYTE *)(a1 + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      goto LABEL_49;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v19 = *(_QWORD *)(a1 + 72);
    if (v19)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        goto LABEL_49;
      v19 = *(_QWORD *)(a1 + 80);
      if (v19)
      {
        v6 = 2;
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 88);
        if (v19)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            goto LABEL_49;
          v19 = *(_QWORD *)(a1 + 96);
          if (v19)
          {
            v6 = 4;
          }
          else
          {
            v19 = *(_QWORD *)(a1 + 104);
            if (!v19)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v19 - 1) & v19;
    v7 = __clz(__rbit64(v19)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(float *)(v10 + 4 * v7);
  while (v8)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v6 << 6);
LABEL_7:
    if (*(float *)(v10 + 4 * v13) < v11)
      v11 = *(float *)(v10 + 4 * v13);
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
  {
LABEL_26:
    v17 = 0;
    v18 = LODWORD(v11);
    return v18 | ((unint64_t)v17 << 32);
  }
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      goto LABEL_26;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v20 = 0;
  v21 = 6;
  if (v9 > 6)
    v21 = v9;
  v22 = v21 - 6;
  while (v22 != v20)
  {
    v19 = *(_QWORD *)(a1 + 112 + 8 * v20++);
    if (v19)
    {
      v6 = v20 + 5;
      goto LABEL_30;
    }
  }
LABEL_49:
  v18 = 0;
  v17 = 1;
  return v18 | ((unint64_t)v17 << 32);
}

int64_t specialized Sequence<>.min()(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v6[-1], (int8x16_t)v5);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), *(int8x16_t *)v6, (int8x16_t)v8);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v8, v5), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v10, v9.i64[0]), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v14 < v2)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t type metadata accessor for HandsNearbySuppressor()
{
  return objc_opt_self();
}

BOOL protocol witness for MiddleDoubleTapPostProcessingSuppressor.shouldSuppress(basedOn:atTime:) in conformance HandsNearbySuppressor(uint64_t a1)
{
  return specialized HandsNearbySuppressor.shouldSuppress(basedOn:atTime:)(a1);
}

BOOL specialized HandsNearbySuppressor.shouldSuppress(basedOn:atTime:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t i;
  float32x4_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  float32x4_t v81;
  unint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  unint64_t v85;
  float v86;
  _QWORD *v88;
  _QWORD v89[5];
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t v117;
  _QWORD *v118;
  _QWORD *v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[14];
  __int16 v124;
  int v125;
  _QWORD v126[14];
  __int16 v127;
  int v128;

  v3 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)v89 - v9;
  MEMORY[0x24BDAC7A8](v11, v12);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)v89 - v15;
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)v89 - v19;
  MEMORY[0x24BDAC7A8](v21, v22);
  v26 = (_QWORD *)((char *)v89 - v25);
  if (*(_QWORD *)(a1 + 16) != 2)
    return 0;
  v118 = (_QWORD *)v24;
  v27 = a1 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  v28 = *(_QWORD *)(v23 + 72);
  swift_bridgeObjectRetain();
  outlined init with copy of HandDescriptor(v27, (uint64_t)v16);
  if ((v16[136] & 1) == 0)
  {
    outlined destroy of HandDescriptor((uint64_t)v16);
    outlined init with copy of HandDescriptor(v27 + v28, (uint64_t)v16);
    if ((v16[136] & 1) == 0)
    {
      outlined destroy of HandDescriptor((uint64_t)v16);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  outlined init with take of HandDescriptor((uint64_t)v16, (uint64_t)v20);
  outlined init with take of HandDescriptor((uint64_t)v20, (uint64_t)v26);
  swift_bridgeObjectRetain();
  outlined init with copy of HandDescriptor(v27, (uint64_t)v6);
  if ((v6[136] & 1) == 0
    || (outlined destroy of HandDescriptor((uint64_t)v6),
        outlined init with copy of HandDescriptor(v27 + v28, (uint64_t)v6),
        v6[136] != 1))
  {
    swift_bridgeObjectRelease();
    outlined init with take of HandDescriptor((uint64_t)v6, (uint64_t)v10);
    v29 = v118;
    outlined init with take of HandDescriptor((uint64_t)v10, (uint64_t)v118);
    v30 = v26[2];
    if (!v30)
      goto LABEL_27;
    v32 = v26[3];
    v31 = v26[4];
    v33 = v26[5];
    v34 = v26[6];
    v36 = v26[7];
    v35 = v26[8];
    v37 = (_QWORD *)v26[9];
    v38 = v26[10];
    v39 = v26[11];
    v40 = v26[12];
    v41 = v26[13];
    v42 = v26[14];
    v44 = v26[15];
    v43 = v26[16];
    v126[0] = v26[2];
    v126[1] = v32;
    v126[2] = v31;
    v126[3] = v33;
    v126[4] = v34;
    v126[5] = v36;
    v126[6] = v35;
    v126[7] = v37;
    v126[8] = v38;
    v126[9] = v39;
    v126[10] = v40;
    v126[11] = v41;
    v126[12] = v42;
    v126[13] = v44;
    v127 = v43 & 0x101;
    v128 = HIDWORD(v43);
    v45 = v29[2];
    if (!v45)
    {
LABEL_27:
      outlined destroy of HandDescriptor((uint64_t)v29);
      goto LABEL_28;
    }
    v90 = v26;
    v46 = v29[4];
    v107 = v29[3];
    v108 = v46;
    v119 = v37;
    v47 = v29[6];
    v100 = v29[5];
    v48 = v29[8];
    v93 = v29[7];
    v114 = v48;
    v115 = v47;
    v49 = v29[9];
    v50 = v29[10];
    v112 = v29[11];
    v113 = v50;
    v117.i64[0] = v35;
    v105 = v29[12];
    v106 = v49;
    v97 = v36;
    v98 = v31;
    v51 = v29[13];
    v103 = v29[14];
    v104 = v51;
    v52 = v29[15];
    v53 = v29[16];
    v120.i64[0] = v33;
    v123[0] = v45;
    v123[1] = v107;
    v123[2] = v46;
    v123[3] = v100;
    v123[4] = v47;
    v123[5] = v93;
    v123[6] = v48;
    v123[7] = v49;
    v123[8] = v50;
    v123[9] = v112;
    v123[10] = v105;
    v123[11] = v51;
    v110 = v53;
    v111 = v52;
    v123[12] = v103;
    v123[13] = v52;
    v116 = v45;
    v124 = v53 & 0x101;
    v125 = HIDWORD(v53);
    v54 = *(_QWORD *)(v1 + 32);
    v91 = v1;
    v92 = v54;
    v109 = v32;
    v101 = v38;
    v102 = v30;
    v95 = v40;
    v96 = v39;
    v94 = v41;
    v55 = v42;
    v56 = v44;
    v57 = v43;
    outlined copy of HandPose?(v30);
    outlined copy of HandPose?(v102);
    v58 = v92;
    swift_bridgeObjectRetain();
    outlined copy of HandPose?(v116);
    v99 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_s5SIMD3VySfGs5NeverOTg50101_s5Hands24KeyboardTypingSuppressorC24getDeviceFramePalmNormal33_C45A7DDDD10520905B356D865D3AE76CLLys5g31VySfGAA14HandDescriptorVFAHSo18deF6VXEfU_5Hands8HandPoseVTf1cn_nTf4ng_n(v58, (uint64_t)v126);
    v89[1] = v57;
    v89[2] = v56;
    v89[3] = v55;
    v89[4] = v34;
    outlined consume of HandPose?(v102);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined copy of HandPose?(v116);
    v59 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_s5SIMD3VySfGs5NeverOTg50101_s5Hands24KeyboardTypingSuppressorC24getDeviceFramePalmNormal33_C45A7DDDD10520905B356D865D3AE76CLLys5g31VySfGAA14HandDescriptorVFAHSo18deF6VXEfU_5Hands8HandPoseVTf1cn_nTf4ng_n(v58, (uint64_t)v123);
    v60 = (_QWORD *)v99;
    v61 = v100;
    outlined consume of HandPose?(v116);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
    v63 = v60[2];
    v62 = v60[3];
    v64 = v60;
    v65 = v98;
    v66 = v120.i64[0];
    if (v63 >= v62 >> 1)
    {
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v60);
      v66 = v120.i64[0];
      v65 = v98;
      v64 = v88;
    }
    v64[2] = v63 + 1;
    v67 = (uint64_t)v64;
    v119 = v64 + 4;
    v68 = &v64[2 * v63 + 4];
    *v68 = v65;
    v68[1] = v66;
    outlined consume of HandPose?(v102);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
    v70 = (uint64_t)v90;
    v69 = v91;
    v72 = v59[2];
    v71 = v59[3];
    if (v72 >= v71 >> 1)
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v71 > 1), v72 + 1, 1, v59);
    v59[2] = v72 + 1;
    v73 = &v59[2 * v72];
    v73[4] = v108;
    v73[5] = v61;
    outlined consume of HandPose?(v116);
    v122 = MEMORY[0x24BEE4AF8];
    v74 = *(_QWORD *)(v67 + 16);
    if (v74)
    {
      v75 = v59[2];
      v99 = v67;
      swift_bridgeObjectRetain();
      for (i = 0; i != v74; ++i)
      {
        if (v75)
        {
          v120 = *(float32x4_t *)&v119[2 * i];
          v121 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75, 0);
          v77 = v120;
          v78 = 0;
          v79 = v121;
          v80 = *(_QWORD *)(v121 + 16);
          do
          {
            v81 = *(float32x4_t *)&v59[2 * v78 + 4];
            v121 = v79;
            v82 = *(_QWORD *)(v79 + 24);
            if (v80 >= v82 >> 1)
            {
              v117 = v81;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1, v80 + 1, 1);
              v81 = v117;
              v77 = v120;
              v79 = v121;
            }
            ++v78;
            v83 = vsubq_f32(v77, v81);
            v84 = vmulq_f32(v83, v83);
            *(_QWORD *)(v79 + 16) = v80 + 1;
            *(float *)(v79 + 4 * v80++ + 32) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2), vaddq_f32(v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1))).f32[0]);
          }
          while (v75 != v78);
          swift_bridgeObjectRelease();
        }
        else
        {
          v79 = MEMORY[0x24BEE4AF8];
        }
        specialized Array.append<A>(contentsOf:)(v79);
      }
      swift_bridgeObjectRelease_n();
      v70 = (uint64_t)v90;
      v69 = v91;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v85 = specialized Sequence<>.min()(v122);
    outlined destroy of HandDescriptor((uint64_t)v118);
    outlined destroy of HandDescriptor(v70);
    swift_bridgeObjectRelease();
    if ((v85 & 0x100000000) == 0)
    {
      v86 = *(float *)(v69 + 28);
      swift_bridgeObjectRelease();
      return v86 > *(float *)&v85;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    return 0;
  }
  outlined destroy of HandDescriptor((uint64_t)v6);
  swift_bridgeObjectRelease();
LABEL_28:
  outlined destroy of HandDescriptor((uint64_t)v26);
  return 0;
}

_QWORD *PinchUncertaintyFilters.init()()
{
  _QWORD *v0;
  _QWORD *result;

  result = v0;
  v0[2] = &outlined read-only object #0 of PinchUncertaintyFilters.init();
  v0[3] = &outlined read-only object #1 of PinchUncertaintyFilters.init();
  v0[4] = 0;
  return result;
}

Swift::Void __swiftcall PinchUncertaintyFilters.reset()()
{
  _QWORD *v0;

  swift_beginAccess();
  v0[2] = &outlined read-only object #0 of PinchUncertaintyFilters.reset();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v0[3] = &outlined read-only object #1 of PinchUncertaintyFilters.reset();
  swift_bridgeObjectRelease();
  v0[4] = 0;
}

uint64_t PinchUncertaintyFilters.updateBuffer(_:)(uint64_t result)
{
  char *v1;
  float v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int8x16_t v21;
  float32x2_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  char **v27;
  float32x4_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  float32x4_t v33;
  char **v34;
  char v35;
  float v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  int v64;

  v3 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    return result;
  v4 = *(_DWORD *)(result + 112);
  v5 = *(_DWORD *)(result + 116);
  v7 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v9 = *(_QWORD *)(result + 24);
  v8 = *(_QWORD *)(result + 32);
  v11 = *(_QWORD *)(result + 40);
  v10 = *(_QWORD *)(result + 48);
  v12 = *(_QWORD *)(result + 56);
  v13 = *(_QWORD *)(result + 64);
  v14 = *(_QWORD *)(result + 72);
  v15 = *(_QWORD *)(result + 80);
  v16 = *(_QWORD *)(result + 88);
  v17 = *(_QWORD *)(result + 96);
  v18 = *(_QWORD *)(result + 104);
  v49 = *(_QWORD *)result;
  v50 = v7;
  v40 = v9;
  v41 = v7;
  v51 = v6;
  v52 = v9;
  v45 = v6;
  v46 = v8;
  v42 = v11;
  v43 = v12;
  v53 = v8;
  v54 = v11;
  v55 = v10;
  v56 = v12;
  v47 = v16;
  v48.i64[0] = v10;
  v44 = v14;
  v57 = v13;
  v58 = v14;
  v59 = v15;
  v60 = v16;
  v61 = v17;
  v62 = v18;
  v19 = v4 & 1;
  v63 = v4 & 0x101;
  v20 = (v4 >> 8) & 1;
  v64 = v5;
  specialized static PinchGestureHelper.getPalmNormalHMD(_:)((uint64_t)&v49);
  v22.i32[0] = vextq_s8(v21, v21, 8uLL).u32[0];
  v22.i32[1] = v21.i32[0];
  v23 = (int32x4_t)vmulq_f32((float32x4_t)v21, (float32x4_t)v21);
  v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), *(float32x2_t *)v23.i8).u32[0];
  v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
  v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
  v26 = acosf(vaddv_f32(vmul_f32(vmul_n_f32(v22, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]), (float32x2_t)1065353216)));
  v27 = (char **)(v1 + 24);
  swift_beginAccess();
  if (*(_QWORD *)(*((_QWORD *)v1 + 3) + 16))
  {
    v39 = v1;
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    v49 = v3;
    v50 = v41;
    v51 = v45;
    v52 = v40;
    v53 = v46;
    v54 = v42;
    v55 = v48.i64[0];
    v56 = v43;
    v57 = v13;
    v58 = v44;
    v59 = v15;
    v60 = v47;
    v61 = v17;
    v62 = v18;
    LOBYTE(v63) = v19;
    HIBYTE(v63) = v20;
    v64 = v5;
    HandPose.getHoverDistanceVector()();
    v48 = v28;
    v1 = *v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v27 = v1;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
  }
  else
  {
    __break(1u);
  }
  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v1 + 2) + 1, 1, v1);
  *v27 = v1;
LABEL_4:
  v31 = *((_QWORD *)v1 + 2);
  v30 = *((_QWORD *)v1 + 3);
  v32 = v39;
  if (v31 >= v30 >> 1)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v1);
    *v27 = v1;
  }
  v33 = vmulq_f32(v48, v48);
  *((_QWORD *)v1 + 2) = v31 + 1;
  *(float *)&v1[4 * v31 + 32] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]);
  swift_endAccess();
  v34 = (char **)(v39 + 16);
  swift_beginAccess();
  if (!*(_QWORD *)(*((_QWORD *)v39 + 2) + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  v2 = 180.0;
  v26 = v26 / 3.14;
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  v32 = *v34;
  v35 = swift_isUniquelyReferenced_nonNull_native();
  *v34 = v32;
  if ((v35 & 1) == 0)
  {
LABEL_15:
    v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
    *v34 = v32;
  }
  v36 = v26 * v2;
  v38 = *((_QWORD *)v32 + 2);
  v37 = *((_QWORD *)v32 + 3);
  if (v38 >= v37 >> 1)
  {
    v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v32);
    *v34 = v32;
  }
  *((_QWORD *)v32 + 2) = v38 + 1;
  *(float *)&v32[4 * v38 + 32] = v36;
  return swift_endAccess();
}

uint64_t PinchUncertaintyFilters.update(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  char v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  int v32;
  float v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  float v62;
  float v63;
  int v64;
  char v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  float v80;
  float v81;
  int v82;
  char v83;
  uint64_t v84;
  char v85;
  int v86;
  int v87;
  char v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[171];
  _OWORD __dst[50];

  memcpy(__dst, __src, 0x306uLL);
  PinchUncertaintyFilters.updateBuffer(_:)((uint64_t)__src);
  v5 = *(float *)&__dst[26];
  v6 = *((float *)&__dst[25] + 3);
  v7 = *((float *)&__dst[26] + 2);
  v8 = *((float *)&__dst[26] + 1);
  v94 = *((_QWORD *)&__dst[8] + 1);
  v9 = __dst[9];
  v10 = __dst[10];
  v93 = *(_OWORD *)((char *)&__dst[10] + 8);
  v11 = *(_QWORD *)&__dst[24];
  outlined retain of PinchFrameFeatures((uint64_t *)__dst);
  result = specialized Sequence<>.min()(v11);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = *(float *)&v94;
    v92 = v11;
    v79 = v10;
    if (*(float *)&v94 >= 0.99)
    {
      v81 = 0.0;
      v82 = DWORD2(__dst[22]);
      v15 = 0.0;
    }
    else
    {
      specialized static PinchHelper.errFunc(_:)(10.0 / (float)(*(float *)&result * 2449.5));
      v13 = *(float *)&v94;
      v82 = DWORD2(__dst[22]);
      v81 = *(float *)&v94 * (float)(1.0 - v14);
      if ((BYTE12(__dst[7]) & 1) != 0)
      {
        v15 = 0.0;
      }
      else
      {
        specialized static PinchHelper.errFunc(_:)((float)((float)(*((float *)&__dst[22] + 2) * -1000.0) + 20.0) / (float)(*((float *)&__dst[7] + 2) * 1414.2));
        v13 = *(float *)&v94;
        v15 = *(float *)&v94 * (float)((float)(1.0 - v16) * 0.5);
      }
    }
    v80 = v15;
    if (v7 >= v8)
      v17 = v8;
    else
      v17 = v7;
    if (v5 >= v6)
      v18 = v6;
    else
      v18 = v5;
    if (v17 >= v18)
      v19 = v18;
    else
      v19 = v17;
    v84 = *(_QWORD *)&__dst[44];
    v91 = *(_QWORD *)&__dst[45];
    v90 = __dst[46];
    v89 = *(_QWORD *)&__dst[47];
    v88 = BYTE8(__dst[47]);
    v20 = 1.0 - v17;
    v87 = HIDWORD(__dst[47]);
    v86 = __dst[48];
    if (v20 >= v18)
      v20 = v18;
    v21 = v13 * v20;
    v83 = BYTE4(__dst[48]);
    v85 = BYTE5(__dst[48]);
    if (v19 > v21)
      v21 = v19;
    v66 = v21 * v21;
    v69 = BYTE8(__dst[29]);
    v70 = BYTE9(__dst[29]);
    v71 = BYTE10(__dst[29]);
    v78 = BYTE11(__dst[29]);
    v68 = *(_QWORD *)&__dst[30];
    v43 = BYTE8(__dst[31]);
    v44 = BYTE8(__dst[30]);
    v76 = *(_QWORD *)&__dst[32];
    v77 = *(_QWORD *)&__dst[31];
    v42 = BYTE8(__dst[32]);
    v75 = BYTE9(__dst[32]);
    v74 = BYTE10(__dst[32]);
    v73 = BYTE11(__dst[32]);
    v72 = BYTE12(__dst[32]);
    v65 = BYTE12(__dst[28]);
    v63 = v7;
    v64 = HIDWORD(__dst[27]);
    v22 = DWORD2(__dst[25]);
    v61 = BYTE8(__dst[23]);
    v62 = v5;
    v23 = *((float *)&__dst[23] + 1);
    v24 = *(float *)&__dst[23];
    v60 = HIDWORD(__dst[22]);
    v56 = __dst[16];
    v57 = __dst[15];
    v54 = __dst[18];
    v55 = __dst[17];
    v52 = __dst[20];
    v53 = __dst[19];
    v51 = __dst[21];
    v48 = *(_OWORD *)((char *)&__dst[12] + 8);
    v46 = *(_QWORD *)&__dst[14];
    v47 = *((_QWORD *)&__dst[13] + 1);
    v45 = BYTE1(__dst[12]);
    v25 = LOBYTE(__dst[12]);
    v26 = *(_QWORD *)&__dst[25];
    v49 = *((_QWORD *)&__dst[24] + 1);
    v50 = *(_QWORD *)&__dst[22];
    v27 = *((float *)&__dst[33] + 2);
    v28 = *((float *)&__dst[33] + 2) < v13;
    v67 = *((_QWORD *)&__dst[44] + 1);
    v58 = *(_QWORD *)&__dst[28];
    v59 = *(_QWORD *)&__dst[29];
    swift_beginAccess();
    v29 = *(_QWORD *)&__dst[33];
    v30 = specialized static PinchFilterHelper.rotationFilter(_:_:_:_:_:_:_:)(v25, *(_QWORD *)(v2 + 16), *(uint64_t *)&__dst[33], v23, v27, 45.0, 100.0);
    swift_beginAccess();
    specialized static PinchFilterHelper.computeHoverDistanceUnsureScore(_:_:_:_:_:_:_:)(v25, v28, v30, v26, *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16), *(_QWORD *)(v2 + 24));
    v32 = v31;
    v33 = *(float *)(v2 + 36);
    LODWORD(v34) = v22;
    result = specialized static PinchFilterHelper.computeMakeUnsureScore(_:_:_:_:_:_:_:)(v29, v9, v34, v24, v27, v33, *(float *)(v2 + 32));
    *(float *)(v2 + 32) = v33;
    *(_DWORD *)(v2 + 36) = v94;
    *(_OWORD *)(a2 + 144) = v9;
    v35 = __dst[7];
    *(_OWORD *)(a2 + 96) = __dst[6];
    *(_OWORD *)(a2 + 112) = v35;
    v36 = __dst[3];
    *(_OWORD *)(a2 + 32) = __dst[2];
    *(_OWORD *)(a2 + 48) = v36;
    v37 = __dst[5];
    *(_OWORD *)(a2 + 64) = __dst[4];
    *(_OWORD *)(a2 + 80) = v37;
    v38 = __dst[1];
    *(_OWORD *)a2 = __dst[0];
    *(_OWORD *)(a2 + 16) = v38;
    *(_OWORD *)&v95[115] = __dst[40];
    *(_OWORD *)&v95[131] = __dst[41];
    *(_OWORD *)&v95[147] = __dst[42];
    v39 = __dst[35];
    *(_OWORD *)&v95[51] = __dst[36];
    *(_OWORD *)&v95[67] = __dst[37];
    *(_OWORD *)&v95[83] = __dst[38];
    *(_OWORD *)&v95[99] = __dst[39];
    *(_OWORD *)&v95[3] = __dst[33];
    *(_OWORD *)&v95[19] = __dst[34];
    v40 = *(_QWORD *)&__dst[43];
    *(_QWORD *)(a2 + 128) = *(_QWORD *)&__dst[8];
    *(_QWORD *)&v95[163] = v40;
    *(_BYTE *)(a2 + 160) = v79;
    *(_BYTE *)(a2 + 192) = v25;
    *(_BYTE *)(a2 + 193) = v45;
    *(_OWORD *)&v95[35] = v39;
    *(_QWORD *)(a2 + 136) = v94;
    *(_OWORD *)(a2 + 168) = v93;
    *(_OWORD *)(a2 + 200) = v48;
    *(_QWORD *)(a2 + 216) = v47;
    *(_QWORD *)(a2 + 224) = v46;
    *(_OWORD *)(a2 + 240) = v57;
    *(_OWORD *)(a2 + 256) = v56;
    *(_OWORD *)(a2 + 272) = v55;
    *(_OWORD *)(a2 + 288) = v54;
    *(_OWORD *)(a2 + 304) = v53;
    *(_OWORD *)(a2 + 320) = v52;
    *(_OWORD *)(a2 + 336) = v51;
    *(_QWORD *)(a2 + 352) = v50;
    *(_DWORD *)(a2 + 360) = v82;
    *(_DWORD *)(a2 + 364) = v60;
    *(float *)(a2 + 368) = v24;
    *(float *)(a2 + 372) = v23;
    *(_BYTE *)(a2 + 376) = v61;
    *(_QWORD *)(a2 + 384) = v92;
    *(_QWORD *)(a2 + 392) = v49;
    *(_QWORD *)(a2 + 400) = v26;
    *(_DWORD *)(a2 + 408) = v22;
    *(float *)(a2 + 412) = v6;
    *(float *)(a2 + 416) = v62;
    *(float *)(a2 + 420) = v8;
    *(float *)(a2 + 424) = v63;
    *(float *)(a2 + 428) = v66;
    *(float *)(a2 + 432) = v81;
    *(float *)(a2 + 436) = v80;
    *(_DWORD *)(a2 + 440) = v32;
    *(_DWORD *)(a2 + 444) = v64;
    *(_QWORD *)(a2 + 448) = v58;
    *(_DWORD *)(a2 + 456) = v41;
    *(_BYTE *)(a2 + 460) = v65;
    *(_QWORD *)(a2 + 464) = v59;
    *(_BYTE *)(a2 + 472) = v69;
    *(_BYTE *)(a2 + 473) = v70;
    *(_BYTE *)(a2 + 474) = v71;
    *(_BYTE *)(a2 + 475) = v78;
    *(_QWORD *)(a2 + 480) = v68;
    *(_BYTE *)(a2 + 488) = v44;
    *(_QWORD *)(a2 + 496) = v77;
    *(_BYTE *)(a2 + 504) = v43;
    *(_QWORD *)(a2 + 512) = v76;
    *(_BYTE *)(a2 + 520) = v42;
    *(_BYTE *)(a2 + 521) = v75;
    *(_BYTE *)(a2 + 522) = v74;
    *(_BYTE *)(a2 + 523) = v73;
    *(_BYTE *)(a2 + 524) = v72;
    *(_OWORD *)(a2 + 653) = *(_OWORD *)&v95[128];
    *(_OWORD *)(a2 + 669) = *(_OWORD *)&v95[144];
    *(_OWORD *)(a2 + 680) = *(_OWORD *)&v95[155];
    *(_OWORD *)(a2 + 589) = *(_OWORD *)&v95[64];
    *(_OWORD *)(a2 + 605) = *(_OWORD *)&v95[80];
    *(_OWORD *)(a2 + 621) = *(_OWORD *)&v95[96];
    *(_OWORD *)(a2 + 637) = *(_OWORD *)&v95[112];
    *(_OWORD *)(a2 + 525) = *(_OWORD *)v95;
    *(_OWORD *)(a2 + 541) = *(_OWORD *)&v95[16];
    *(_OWORD *)(a2 + 557) = *(_OWORD *)&v95[32];
    *(_OWORD *)(a2 + 573) = *(_OWORD *)&v95[48];
    *(_QWORD *)(a2 + 704) = v84;
    *(_QWORD *)(a2 + 712) = v67;
    *(_QWORD *)(a2 + 720) = v91;
    *(_OWORD *)(a2 + 736) = v90;
    *(_QWORD *)(a2 + 752) = v89;
    *(_BYTE *)(a2 + 760) = v88;
    *(_DWORD *)(a2 + 764) = v87;
    *(_DWORD *)(a2 + 768) = v86;
    *(_BYTE *)(a2 + 772) = v83;
    *(_BYTE *)(a2 + 773) = v85;
  }
  return result;
}

uint64_t PinchUncertaintyFilters.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchUncertaintyFilters()
{
  return objc_opt_self();
}

void EnrollmentResults.init()(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 12) = 1038657310;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 40) = v1;
  *(_QWORD *)(a1 + 48) = v1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
}

uint64_t EnrollmentResults.init(protoBuf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  int *v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v61 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v8);
  v58 = (char *)&v56 - v9;
  v59 = type metadata accessor for MissingFingerDataPB(0);
  v57 = *(_QWORD *)(v59 - 8);
  v11 = MEMORY[0x24BDAC7A8](v59, v10);
  v60 = (uint64_t *)((char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (uint64_t *)((char *)&v56 - v14);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
  v18 = MEMORY[0x24BDAC7A8](v16, v17);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v21);
  v23 = (char *)&v56 - v22;
  v24 = type metadata accessor for EnrollmentDataPB(0);
  v25 = *(_QWORD *)(v24 - 8);
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v29 = (uint64_t *)((char *)&v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v27, v30);
  v32 = (uint64_t *)((char *)&v56 - v31);
  v33 = *(_DWORD *)a1;
  v34 = (int *)type metadata accessor for EnrollmentResultsPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + v34[7], (uint64_t)v23, &demangling cache variable for type metadata for EnrollmentDataPB?);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v35(v23, 1, v24) == 1)
  {
    *v32 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v23, &demangling cache variable for type metadata for EnrollmentDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v23, (uint64_t)v32, type metadata accessor for EnrollmentDataPB);
  }
  v56 = *v32;
  swift_bridgeObjectRetain();
  outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for EnrollmentDataPB);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + v34[8], (uint64_t)v20, &demangling cache variable for type metadata for EnrollmentDataPB?);
  v36 = v35(v20, 1, v24);
  v37 = (uint64_t)v58;
  if (v36 == 1)
  {
    *v29 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v20, &demangling cache variable for type metadata for EnrollmentDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v20, (uint64_t)v29, type metadata accessor for EnrollmentDataPB);
  }
  v38 = v59;
  v39 = *v29;
  swift_bridgeObjectRetain();
  outlined destroy of Matrix3x3PB((uint64_t)v29, type metadata accessor for EnrollmentDataPB);
  v40 = a1 + v34[10];
  outlined init with copy of (Int32, Matrix2dPB)(v40, v37, &demangling cache variable for type metadata for MissingFingerDataPB?);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  if (v41(v37, 1, v38) == 1)
  {
    *v15 = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v37, &demangling cache variable for type metadata for MissingFingerDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v37, (uint64_t)v15, type metadata accessor for MissingFingerDataPB);
  }
  v42 = *(_DWORD *)v15;
  outlined destroy of Matrix3x3PB((uint64_t)v15, type metadata accessor for MissingFingerDataPB);
  v43 = v40;
  v44 = v61;
  outlined init with copy of (Int32, Matrix2dPB)(v43, v61, &demangling cache variable for type metadata for MissingFingerDataPB?);
  if (v41(v44, 1, v38) == 1)
  {
    v45 = v60;
    *v60 = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v44, &demangling cache variable for type metadata for MissingFingerDataPB?);
  }
  else
  {
    v45 = v60;
    outlined init with take of Matrix2dPB(v44, (uint64_t)v60, type metadata accessor for MissingFingerDataPB);
  }
  v46 = *((_DWORD *)v45 + 1);
  outlined destroy of Matrix3x3PB((uint64_t)v45, type metadata accessor for MissingFingerDataPB);
  v47 = a1 + v34[9];
  v48 = *(_QWORD *)v47;
  v49 = *(_BYTE *)(v47 + 8);
  v50 = *(unsigned __int8 *)(v47 + 9);
  if (v50)
    v51 = 1;
  else
    v51 = v48;
  v52 = v50 | v49;
  v53 = *(_QWORD *)(a1 + 8);
  result = outlined destroy of Matrix3x3PB(a1, type metadata accessor for EnrollmentResultsPB);
  *(_QWORD *)a2 = v51;
  *(_BYTE *)(a2 + 8) = v52 & 1;
  *(_DWORD *)(a2 + 12) = v33;
  *(_DWORD *)(a2 + 16) = v42;
  *(_DWORD *)(a2 + 20) = v46;
  *(_QWORD *)(a2 + 24) = v56;
  v55 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 40) = v39;
  *(_QWORD *)(a2 + 48) = v55;
  *(_QWORD *)(a2 + 56) = v53;
  *(_BYTE *)(a2 + 64) = 0;
  return result;
}

uint64_t EnrollmentResults.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE v29[4];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, _QWORD, uint64_t, uint64_t);
  int v37;
  _BYTE *v38;
  uint64_t v39;

  v3 = type metadata accessor for MissingFingerDataPB(0);
  v39 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v4);
  v38 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for EnrollmentDataPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v1;
  v30 = *((unsigned __int8 *)v1 + 8);
  v12 = *((_DWORD *)v1 + 3);
  v13 = v1[2];
  v14 = v1[3];
  v31 = v11;
  v32 = v14;
  v15 = v1[5];
  v33 = v1[4];
  v34 = v15;
  v35 = v1[6];
  v16 = v1[7];
  v37 = *((unsigned __int8 *)v1 + 64);
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = (int *)type metadata accessor for EnrollmentResultsPB(0);
  UnknownStorage.init()();
  v18 = a1 + v17[7];
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v19(v18, 1, 1, v6);
  v20 = a1 + v17[8];
  v19(v20, 1, 1, v6);
  v21 = a1 + v17[9];
  *(_QWORD *)v21 = 0;
  *(_WORD *)(v21 + 8) = 256;
  v22 = a1 + v17[10];
  v23 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56);
  v39 = v3;
  v36 = v23;
  v23(v22, 1, 1, v3);
  *(_QWORD *)v21 = v31;
  *(_BYTE *)(v21 + 8) = v30;
  *(_BYTE *)(v21 + 9) = 0;
  *(_DWORD *)a1 = v12;
  v24 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UnknownStorage.init()();
  swift_bridgeObjectRelease();
  *v10 = v24;
  outlined destroy of Coordinate3DPB?(v18, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v10, v18, type metadata accessor for EnrollmentDataPB);
  v19(v18, 0, 1, v6);
  v25 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UnknownStorage.init()();
  swift_bridgeObjectRelease();
  *v10 = v25;
  outlined destroy of Coordinate3DPB?(v20, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v10, v20, type metadata accessor for EnrollmentDataPB);
  v19(v20, 0, 1, v6);
  if ((v37 & 1) == 0)
    *(_QWORD *)(a1 + 8) = v16;
  v27 = v38;
  v26 = v39;
  UnknownStorage.init()();
  *v27 = v13;
  outlined destroy of Coordinate3DPB?(v22, &demangling cache variable for type metadata for MissingFingerDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v27, v22, type metadata accessor for MissingFingerDataPB);
  return v36(v22, 0, 1, v26);
}

uint64_t EnrollmentResults.almostEqual(to:withThreshold:)(float *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;

  v3 = *(_QWORD *)a1;
  v4 = a1[3];
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 5);
  v7 = *(float *)(v2 + 12);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 40);
  if (*((_BYTE *)a1 + 8) == 1)
    return ((uint64_t (*)(__n128, float, float))((char *)&loc_23D88DA14 + 4 * byte_23D9B98B0[v3]))(a2, v4, v7);
  if (*(_QWORD *)v2 != v3 || v7 != v4)
    return 0;
  v12 = *(_QWORD *)(v8 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(v5 + 16);
    if (v13)
    {
      v14 = (float *)(v8 + 32);
      v15 = (float *)(v5 + 32);
      v16 = v13 - 1;
      v17 = v12 - 1;
      while (vabds_f32(*v14, *v15) < a2.n128_f64[0])
      {
        if (v17)
        {
          v18 = v16;
          ++v15;
          ++v14;
          --v16;
          --v17;
          if (v18)
            continue;
        }
        goto LABEL_14;
      }
      return 0;
    }
  }
LABEL_14:
  v19 = *(_QWORD *)(v9 + 16);
  if (!v19)
    return 1;
  v20 = *(_QWORD *)(v6 + 16);
  if (!v20)
    return 1;
  v21 = (float *)(v9 + 32);
  v22 = (float *)(v6 + 32);
  v23 = v20 - 1;
  v24 = v19 - 1;
  do
  {
    v25 = vabds_f32(*v21, *v22);
    result = v25 < a2.n128_f64[0];
    if (v25 >= a2.n128_f64[0])
      break;
    if (!v24)
      break;
    v26 = v23;
    ++v22;
    ++v21;
    --v23;
    --v24;
  }
  while (v26);
  return result;
}

__n128 EnrollmentResults.init(enrollmentHandRadiusEstimated:enrollmentStatus:leftHandData:rightHandData:secsSinceStart:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, float a7@<S0>)
{
  char v7;
  __n128 result;

  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_BYTE *)(a6 + 8) = v7;
  *(float *)(a6 + 12) = a7;
  *(_QWORD *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 24) = *a2;
  result = *a3;
  *(__n128 *)(a6 + 40) = *a3;
  *(_QWORD *)(a6 + 56) = a4;
  *(_BYTE *)(a6 + 64) = a5 & 1;
  return result;
}

Swift::Void __swiftcall EnrollmentResults.sendCoreAnalytics()()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  float v3;
  float v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  __int128 v10;
  Class (*v11)(uint64_t);
  void *v12;
  unint64_t (*v13)();
  uint64_t v14;
  __int128 v15;
  _BYTE v16[48];
  char v17;

  v1 = v0[3];
  *(_OWORD *)&v16[16] = v0[2];
  *(_OWORD *)&v16[32] = v1;
  v17 = *((_BYTE *)v0 + 64);
  v2 = v0[1];
  v15 = *v0;
  *(_OWORD *)v16 = v2;
  v10 = *(_OWORD *)&v16[8];
  v3 = specialized static HandsKitUtils.calcAvgBoneLength(fromEnrollData:)((uint64_t *)&v10);
  v10 = *(_OWORD *)&v16[24];
  v4 = specialized static HandsKitUtils.calcAvgBoneLength(fromEnrollData:)((uint64_t *)&v10);
  v5 = (void *)MEMORY[0x2426372E8](0xD000000000000023, 0x800000023D9D4CB0);
  v6 = swift_allocObject();
  v7 = *(_OWORD *)&v16[32];
  *(_OWORD *)(v6 + 48) = *(_OWORD *)&v16[16];
  *(_OWORD *)(v6 + 64) = v7;
  *(_BYTE *)(v6 + 80) = v17;
  v8 = *(_OWORD *)v16;
  *(_OWORD *)(v6 + 16) = v15;
  *(_OWORD *)(v6 + 32) = v8;
  *(float *)(v6 + 84) = v3;
  *(float *)(v6 + 88) = v4;
  *(_QWORD *)(v6 + 96) = 0xD000000000000023;
  *(_QWORD *)(v6 + 104) = 0x800000023D9D4CB0;
  v13 = partial apply for closure #1 in EnrollmentResults.sendCoreAnalytics();
  v14 = v6;
  *(_QWORD *)&v10 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v10 + 1) = 1107296256;
  v11 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v12 = &block_descriptor_17;
  v9 = _Block_copy(&v10);
  outlined retain of EnrollmentResults((uint64_t)&v15);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v9);

}

uint64_t EnrollmentData.init(withBoneLength:andUserMeshVertices:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = MEMORY[0x24BEE4AF8];
  if (a2)
    v3 = a2;
  *a3 = result;
  a3[1] = v3;
  return result;
}

void EnrollmentData.init()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
}

SingleHandEnrolmentData __swiftcall EnrollmentData.toSingleHandEnrolmentData()()
{
  uint64_t *v0;
  id v1;
  Class isa;
  objc_class *v3;
  NSArray *v4;
  objc_class *v5;
  SingleHandEnrolmentData result;

  specialized _arrayForceCast<A, B>(_:)(*v0);
  v1 = objc_allocWithZone((Class)SingleHandEnrolmentData);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = (objc_class *)objc_msgSend(v1, sel_initWithBoneLength_, isa);

  v5 = v3;
  result._boneLengths = v4;
  result.super.isa = v5;
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

BOOL EnrollmentData.almostEqual(to:withThreshold:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (!v3)
    return 1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return 1;
  v5 = (float *)(*(_QWORD *)v2 + 32);
  v6 = (float *)(*(_QWORD *)a1 + 32);
  v7 = v4 - 1;
  v8 = v3 - 1;
  do
  {
    v9 = vabds_f32(*v5, *v6);
    result = v9 < a2;
    if (v9 >= a2)
      break;
    if (!v8)
      break;
    v11 = v7;
    ++v6;
    ++v5;
    --v7;
    --v8;
  }
  while (v11);
  return result;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance EnrollmentData@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  type metadata accessor for EnrollmentDataPB(0);
  UnknownStorage.init()();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

void EnrollmentResults.status.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

float EnrollmentResults.handRadiusEstimated.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

uint64_t EnrollmentResults.missingFingerData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t EnrollmentResults.missingFingerData.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*EnrollmentResults.missingFingerData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t EnrollmentResults.leftHandEnrolmentData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 EnrollmentResults.leftHandEnrolmentData.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*EnrollmentResults.leftHandEnrolmentData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t EnrollmentResults.rightHandEnrolmentData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 EnrollmentResults.rightHandEnrolmentData.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 40) = *a1;
  return result;
}

uint64_t (*EnrollmentResults.rightHandEnrolmentData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t EnrollmentResults.setEnrolmentStatus(_:)(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

float EnrollmentResults.init(serializedData:)@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  float result;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[8];
  char v25;

  v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v7, v8);
  v9 = type metadata accessor for EnrollmentResultsPB(0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)v24 - v15;
  memset(v24, 0, 40);
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3)
  {
    outlined consume of Data._Representation(a1, a2);
  }
  else
  {
    outlined init with copy of EnrollmentResultsPB((uint64_t)v16, (uint64_t)v12);
    EnrollmentResults.init(protoBuf:)((uint64_t)v12, (uint64_t)v24);
    outlined consume of Data._Representation(a1, a2);
    outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for EnrollmentResultsPB);
    v18 = v24[1];
    result = *((float *)&v24[1] + 1);
    v19 = v24[7];
    v20 = v25;
    v21 = *(_OWORD *)&v24[3];
    v22 = *(_OWORD *)&v24[5];
    v23 = v24[2];
    *(_QWORD *)a3 = v24[0];
    *(_BYTE *)(a3 + 8) = v18;
    *(float *)(a3 + 12) = result;
    *(_QWORD *)(a3 + 16) = v23;
    *(_OWORD *)(a3 + 24) = v21;
    *(_OWORD *)(a3 + 40) = v22;
    *(_QWORD *)(a3 + 56) = v19;
    *(_BYTE *)(a3 + 64) = v20;
  }
  return result;
}

FullHandEnrolmentData __swiftcall EnrollmentResults.toFullHandEnrolmentData()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  Class isa;
  id v6;
  id v7;
  Class v8;
  id v9;
  id v10;
  double v11;
  objc_class *v12;
  SingleHandEnrolmentData *v13;
  SingleHandEnrolmentData *v14;
  float v15;
  objc_class *v16;
  FullHandEnrolmentData result;

  v1 = *(_DWORD *)(v0 + 12);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _arrayForceCast<A, B>(_:)(v2);
  v4 = objc_allocWithZone((Class)SingleHandEnrolmentData);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithBoneLength_, isa);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _arrayForceCast<A, B>(_:)(v3);
  v7 = objc_allocWithZone((Class)SingleHandEnrolmentData);
  v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initWithBoneLength_, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v10 = objc_allocWithZone((Class)FullHandEnrolmentData);
  LODWORD(v11) = v1;
  v12 = (objc_class *)objc_msgSend(v10, sel_initWithLeftHandEnrolmentData_rightHandEnrolmentData_handRadiusEstimated_, v6, v9, v11);

  v16 = v12;
  result._rightHandEnrolmentData = v14;
  result._leftHandEnrolmentData = v13;
  result.super.isa = v16;
  result._handRadiusEstimated = v15;
  return result;
}

unint64_t closure #1 in EnrollmentResults.sendCoreAnalytics()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A8140;
  *(_QWORD *)(inited + 32) = 0x737574617473;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  outlined init with take of EnrollmentResultsStatus(a1, (uint64_t)v16);
  outlined init with take of EnrollmentResultsStatus(v16, (uint64_t)&v17);
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  *(NSNumber *)(inited + 72) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0x6461725F646E6168;
  *(_QWORD *)(inited + 88) = 0xEB00000000737569;
  *(NSNumber *)(inited + 96) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000019;
  *(_QWORD *)(inited + 112) = 0x800000023D9D4CE0;
  *(NSNumber *)(inited + 120) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 136) = 0x800000023D9D4D00;
  *(NSNumber *)(inited + 144) = Float._bridgeToObjectiveC()();
  v7 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v13 = xmmword_23D9A8B80;
  v14 = 0;
  v15 = 0;
  v12[0] = a2;
  v12[1] = a3;
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  type metadata accessor for NSObject();
  v9 = MEMORY[0x24BEE0D00];
  v10._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v12[3] = v9;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000058, 0x800000023D9D4D20, 183, (uint64_t *)&v13, (uint64_t)v12, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t outlined init with copy of EnrollmentResultsPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EnrollmentResultsPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in EnrollmentData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in EnrollmentResults()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
}

ValueMetadata *type metadata accessor for EnrollmentData()
{
  return &type metadata for EnrollmentData;
}

uint64_t destroy for EnrollmentResults()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EnrollmentResults(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EnrollmentResults(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[7];
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  return a1;
}

uint64_t assignWithTake for EnrollmentResults(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnrollmentResults(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnrollmentResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnrollmentResults()
{
  return &type metadata for EnrollmentResults;
}

uint64_t sub_23D88E8FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in EnrollmentResults.sendCoreAnalytics()()
{
  uint64_t *v0;

  return closure #1 in EnrollmentResults.sendCoreAnalytics()(v0 + 2, v0[12], v0[13]);
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t outlined retain of EnrollmentResults(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with take of EnrollmentResultsStatus(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

Swift::Int static RepetitivePinchHelpers.isPotentialMissedPinch(_:_:_:)@<X0>(Swift::Int result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4;
  Swift::Int v5;
  uint64_t v8;
  Swift::Int v9;
  const void *v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  int v20;
  float v21;
  __int128 v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  Swift::Int v30;
  Swift::Int v31;
  Swift::Int v32;
  char v33;
  Swift::Int v34;
  _OWORD __dst[37];

  v4 = *(_QWORD *)(result + 16);
  v5 = v4 >> 1;
  if (v4 >> 1 >= v4)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    v9 = result + 592 * v5;
    v10 = (const void *)(v9 + 32);
    v11 = *(_BYTE *)(v9 + 44);
    memcpy(__dst, (const void *)(v9 + 32), 0x242uLL);
    v12 = specialized static RepetitivePinchBasicFeature.makeRangeCondition(_:_:)((uint64_t *)__dst, *(float *)(a3 + 32));
    v13 = *(_OWORD *)(v9 + 256);
    v14 = *(_OWORD *)(v9 + 272);
    v15 = *(_OWORD *)(v9 + 288);
    v16 = *(_OWORD *)(v9 + 304);
    v17 = *(_OWORD *)(v9 + 320);
    v18 = *(_BYTE *)(v9 + 336);
    v19 = *(_BYTE *)(v9 + 337);
    v20 = *(_DWORD *)(v9 + 340);
    v21 = *(float *)(a3 + 48);
    v22 = *(_OWORD *)(v9 + 240);
    __dst[0] = *(_OWORD *)(v9 + 224);
    __dst[1] = v22;
    __dst[2] = v13;
    __dst[3] = v14;
    __dst[4] = v15;
    __dst[5] = v16;
    __dst[6] = v17;
    LOBYTE(__dst[7]) = v18;
    BYTE1(__dst[7]) = v19;
    DWORD1(__dst[7]) = v20;
    HandPose.getHoverDistanceVector()();
    v24 = vmulq_f32(v23, v23);
    v25 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
    v26 = *(_QWORD *)(v9 + 48);
    v27 = specialized static RepetitivePinchBasicFeature.consecutiveMissCondition(_:_:)(v8, *(_QWORD *)(a3 + 24));
    memcpy(__dst, v10, 0x242uLL);
    v28 = specialized static RepetitivePinchBasicFeature.notFullyOccludedCondition(_:_:)(__dst, *(float *)(a3 + 44));
    result = specialized static RepetitivePinchBasicFeature.notMovingAlongZ(_:_:_:)(v8, *(float *)(a2 + 104), *(float *)(a3 + 56));
    if ((v11 & 1) != 0)
    {
      if ((v12 & 1) == 0)
      {
        if (v25 > v21)
        {
          if (v26 == 2)
          {
            if ((v27 & 1) != 0)
            {
              if ((v28 & 1) != 0)
              {
                v29 = 538;
                if ((result & 1) != 0)
                  goto LABEL_170;
              }
              else
              {
                v29 = 602;
                if ((result & 1) != 0)
                  goto LABEL_170;
              }
            }
            else if ((v28 & 1) != 0)
            {
              v29 = 570;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
            else
            {
              v29 = 634;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
          }
          else if ((v27 & 1) != 0)
          {
            if ((v28 & 1) != 0)
            {
              v29 = 522;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
            else
            {
              v29 = 586;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
          }
          else if ((v28 & 1) != 0)
          {
            v29 = 554;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          else
          {
            v29 = 618;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          goto LABEL_154;
        }
        if (v26 == 2)
        {
          if ((v27 & 1) != 0)
          {
            if ((v28 & 1) != 0)
            {
              v29 = 530;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
            else
            {
              v29 = 594;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
            goto LABEL_154;
          }
          if ((v28 & 1) != 0)
          {
            v29 = 562;
            if ((result & 1) != 0)
              goto LABEL_170;
            goto LABEL_154;
          }
          v29 = 626;
          if ((result & 1) == 0)
            goto LABEL_154;
        }
        else
        {
          if ((v27 & 1) == 0)
          {
            if ((v28 & 1) != 0)
            {
              v29 = 546;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
            else
            {
              v29 = 610;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
            goto LABEL_154;
          }
          if ((v28 & 1) != 0)
          {
            v29 = 514;
            if ((result & 1) != 0)
              goto LABEL_170;
            goto LABEL_154;
          }
          v29 = 578;
          if ((result & 1) == 0)
            goto LABEL_154;
        }
LABEL_170:
        v31 = 0;
        v32 = 0;
        v34 = 0;
        goto LABEL_171;
      }
      if (v25 > v21)
      {
        if (v26 == 2)
        {
          if ((v27 & 1) != 0)
          {
            if ((v28 & 1) != 0)
            {
              v29 = 26;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
            else
            {
              v29 = 90;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
          }
          else if ((v28 & 1) != 0)
          {
            v29 = 58;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          else
          {
            v29 = 122;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
        }
        else if ((v27 & 1) != 0)
        {
          if ((v28 & 1) != 0)
          {
            v29 = 10;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          else
          {
            v29 = 74;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
        }
        else if ((v28 & 1) != 0)
        {
          v29 = 42;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 106;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if (v26 == 2)
      {
        if ((v27 & 1) != 0)
        {
          if ((v28 & 1) != 0)
          {
            v29 = 18;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          else
          {
            v29 = 82;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
        }
        else if ((v28 & 1) != 0)
        {
          v29 = 50;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 114;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if ((v27 & 1) != 0)
      {
        if ((v28 & 1) != 0)
        {
          v29 = 2;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 66;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if ((v28 & 1) != 0)
      {
        v29 = 34;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      else
      {
        v29 = 98;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
LABEL_154:
      v31 = 0;
      v32 = 0;
      v34 = 0;
      v29 |= 0x100uLL;
LABEL_171:
      v33 = 1;
      goto LABEL_172;
    }
    if ((v12 & 1) == 0)
    {
      if (v25 > v21)
      {
        if (v26 == 2)
        {
          if ((v27 & 1) != 0)
          {
            if ((v28 & 1) != 0)
            {
              v29 = 536;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
            else
            {
              v29 = 600;
              if ((result & 1) != 0)
                goto LABEL_170;
            }
          }
          else if ((v28 & 1) != 0)
          {
            v29 = 568;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          else
          {
            v29 = 632;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
        }
        else if ((v27 & 1) != 0)
        {
          if ((v28 & 1) != 0)
          {
            v29 = 520;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          else
          {
            v29 = 584;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
        }
        else if ((v28 & 1) != 0)
        {
          v29 = 552;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 616;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if (v26 == 2)
      {
        if ((v27 & 1) != 0)
        {
          if ((v28 & 1) != 0)
          {
            v29 = 528;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          else
          {
            v29 = 592;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
        }
        else if ((v28 & 1) != 0)
        {
          v29 = 560;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 624;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if ((v27 & 1) != 0)
      {
        if ((v28 & 1) != 0)
        {
          v29 = 512;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 576;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if ((v28 & 1) != 0)
      {
        v29 = 544;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      else
      {
        v29 = 608;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      goto LABEL_154;
    }
    if (v25 > v21)
    {
      if (v26 == 2)
      {
        if ((v27 & 1) != 0)
        {
          if ((v28 & 1) != 0)
          {
            v29 = 24;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
          else
          {
            v29 = 88;
            if ((result & 1) != 0)
              goto LABEL_170;
          }
        }
        else if ((v28 & 1) != 0)
        {
          v29 = 56;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 120;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if ((v27 & 1) != 0)
      {
        if ((v28 & 1) != 0)
        {
          v29 = 8;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 72;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if ((v28 & 1) != 0)
      {
        v29 = 40;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      else
      {
        v29 = 104;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      goto LABEL_154;
    }
    if (v26 == 2)
    {
      if ((v27 & 1) != 0)
      {
        if ((v28 & 1) != 0)
        {
          v29 = 16;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
        else
        {
          v29 = 80;
          if ((result & 1) != 0)
            goto LABEL_170;
        }
      }
      else if ((v28 & 1) != 0)
      {
        v29 = 48;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      else
      {
        v29 = 112;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      goto LABEL_154;
    }
    if ((v27 & 1) == 0)
    {
      if ((v28 & 1) != 0)
      {
        v29 = 32;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      else
      {
        v29 = 96;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      goto LABEL_154;
    }
    if ((v28 & result & 1) == 0)
    {
      if ((v28 & 1) != 0)
      {
        v29 = 0;
        if ((result & 1) != 0)
        {
          v33 = 1;
          v31 = 0;
          v32 = 0;
          v34 = 0;
LABEL_172:
          *(_QWORD *)a4 = v29;
          *(_QWORD *)(a4 + 8) = v31;
          *(_BYTE *)(a4 + 16) = v33;
          *(_QWORD *)(a4 + 24) = v32;
          *(_BYTE *)(a4 + 32) = v33;
          *(_QWORD *)(a4 + 40) = v34;
          *(_BYTE *)(a4 + 48) = v33;
          return result;
        }
      }
      else
      {
        v29 = 64;
        if ((result & 1) != 0)
          goto LABEL_170;
      }
      goto LABEL_154;
    }
    result = TntSingleHandSubsequence.getMakeFrameIndex(_:_:_:)(v5, *(Swift::Float *)(a3 + 64), *(Swift::Float *)(a3 + 68));
    v30 = result + 1;
    if (!__OFADD__(result, 1))
    {
      v31 = result;
      v32 = TntSingleHandSubsequence.getBreakFrameByPostProcessedScore(_:_:)(result + 1, *(Swift::Float *)(a2 + 104));
      result = TntSingleHandSubsequence.getBreakFrameByRawScore(_:_:_:)(v30, *(Swift::Float *)(a3 + 72), *(Swift::Float *)(a3 + 76));
      v33 = 0;
      if (v32 >= result)
        v34 = result;
      else
        v34 = v32;
      v29 = 1024;
      goto LABEL_172;
    }
  }
  __break(1u);
  return result;
}

uint64_t static RepetitivePinchHelpers.isPotentialMissedScrollBreak(_:_:_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  float v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unint64_t v27;
  float v28;
  Swift::Bool is_nil;
  uint64_t v30;
  Swift::Int value;
  char v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t __src[74];
  _QWORD __dst[74];
  Swift::Int_optional v40;

  v7 = *(_QWORD *)(result + 16);
  if (!v7)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
LABEL_35:
    *(_BYTE *)(a5 + 16) = 1;
    *(_QWORD *)(a5 + 24) = 0;
    *(_BYTE *)(a5 + 32) = 1;
    *(_QWORD *)(a5 + 40) = 0;
LABEL_36:
    *(_BYTE *)(a5 + 48) = 1;
    return result;
  }
  v11 = result;
  memcpy(__dst, (const void *)(result + 592 * v7 - 560), 0x242uLL);
  v12 = __dst[0];
  v13 = specialized static RepetitivePinchBasicFeature.notRecentPinchDown(_:_:)(v11, 8);
  specialized static RepetitivePinchBasicFeature.isHdSharpIncrease(_:_:)(v11);
  v15 = v14;
  memcpy(__src, __dst, 0x242uLL);
  v16 = a4[15];
  outlined retain of SingleHandFrameFeatures((uint64_t)__dst);
  v17 = specialized static RepetitivePinchBasicFeature.isTipHighlyVisible(_:_:)(__src, v16);
  v18 = *(_QWORD *)(v12 + 16);
  if (!v18)
  {
    __break(1u);
LABEL_44:
    swift_bridgeObjectRelease();
    v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v12, v5, 0, a2);
    goto LABEL_8;
  }
  v36 = v13;
  v37 = v17;
  a2 = 2 * v18 - 1;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
  v5 = v12 + 32;
  v20 = *(_QWORD *)(v19 + 16);
  swift_release();
  if (v20 != a2 >> 1)
    goto LABEL_44;
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
  }
LABEL_8:
  result = swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v12 + 16);
  if (v22)
  {
    v23 = *(float *)&__dst[1];
    v24 = *(float *)(v5 + 4 * v22 - 4);
    v25 = a4[18];
    v26 = *(float *)(a3 + 104);
    v27 = specialized Sequence<>.max()(v21);
    swift_release();
    if ((v27 & 0x100000000) != 0 || v23 >= (float)(1.0 - v26))
    {
      result = outlined release of SingleHandFrameFeatures((uint64_t)__dst);
      if ((v36 & 1) != 0)
      {
        v32 = v37;
        if ((v15 & 1) != 0)
        {
          v33 = 4;
          if ((v37 & 1) != 0)
            goto LABEL_34;
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    else
    {
      v28 = *(float *)&v27 - v24;
      if ((v36 & 1) != 0)
      {
        if ((v15 & 1) != 0)
        {
          if ((v37 & 1) != 0)
          {
            if (v25 <= v28)
            {
              v40 = TntSingleHandSubsequence.getBreakFrameIndex(_:)(a4[19]);
              is_nil = v40.is_nil;
              if (v40.is_nil)
              {
                result = outlined release of SingleHandFrameFeatures((uint64_t)__dst);
                v30 = 0;
                value = 0;
              }
              else
              {
                value = v40.value;
                memcpy(__src, __dst, 0x242uLL);
                v30 = TntSingleHandSubsequence.getMakeFrameFromBreakByScoreAheads(_:_:_:_:_:)(__src, value, v11, a4[17], a4[16], v25);
                result = outlined release of SingleHandFrameFeatures((uint64_t)__dst);
              }
              *(_QWORD *)a5 = 32;
              *(_QWORD *)(a5 + 8) = v30;
              *(_BYTE *)(a5 + 16) = is_nil;
              *(_QWORD *)(a5 + 24) = value;
              *(_BYTE *)(a5 + 32) = is_nil;
              *(_QWORD *)(a5 + 40) = 0;
              goto LABEL_36;
            }
            result = outlined release of SingleHandFrameFeatures((uint64_t)__dst);
            v33 = 4;
            goto LABEL_34;
          }
          result = outlined release of SingleHandFrameFeatures((uint64_t)__dst);
          if (v25 > v28)
            v33 = 4;
          else
            v33 = 0;
          goto LABEL_33;
        }
        result = outlined release of SingleHandFrameFeatures((uint64_t)__dst);
        v32 = v37;
        if (v25 <= v28)
        {
          v33 = 8;
          if ((v37 & 1) != 0)
            goto LABEL_34;
          goto LABEL_33;
        }
LABEL_32:
        v33 = 12;
        if ((v32 & 1) != 0)
        {
LABEL_34:
          *(_QWORD *)a5 = v33;
          *(_QWORD *)(a5 + 8) = 0;
          goto LABEL_35;
        }
LABEL_33:
        v33 |= 0x10uLL;
        goto LABEL_34;
      }
      result = outlined release of SingleHandFrameFeatures((uint64_t)__dst);
      if (v25 <= v28)
      {
        v34 = (v15 & 1) == 0;
        v33 = 10;
        v35 = 2;
        goto LABEL_25;
      }
    }
    v34 = (v15 & 1) == 0;
    v33 = 14;
    v35 = 6;
LABEL_25:
    if (!v34)
      v33 = v35;
    if ((v37 & 1) != 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RepetitivePinchHelpers()
{
  return objc_opt_self();
}

double PinchGestureData.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v2 + 16) = 6;
  result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = &outlined read-only object #0 of PinchGestureData.init();
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = v2;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 168) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 176) = v4;
  *(_QWORD *)(a1 + 184) = v4;
  *(_QWORD *)(a1 + 192) = &outlined read-only object #1 of PinchGestureData.init();
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  return result;
}

uint64_t FrameFeaturesAdapter.update(_:_:_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  float32x4_t *v4;
  float32x4_t *v5;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const void *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unsigned int v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  _BYTE v94[280];
  float32x4_t __dst[35];

  v5 = v4;
  v10 = *(_OWORD *)(a3 + 176);
  v87 = *(_OWORD *)(a3 + 160);
  v88 = v10;
  v76 = *(float32x4_t *)(a3 + 208);
  v89 = *(_OWORD *)(a3 + 192);
  v11 = *(_OWORD *)(a3 + 112);
  v83 = *(_OWORD *)(a3 + 96);
  v84 = v11;
  v12 = *(_OWORD *)(a3 + 144);
  v85 = *(_OWORD *)(a3 + 128);
  v86 = v12;
  v13 = *(_OWORD *)(a3 + 48);
  v79 = *(_OWORD *)(a3 + 32);
  v80 = v13;
  v14 = *(_OWORD *)(a3 + 80);
  v81 = *(_OWORD *)(a3 + 64);
  v82 = v14;
  v15 = *(_OWORD *)(a3 + 16);
  v77 = *(float32x4_t *)a3;
  v78 = v15;
  v74 = *(float32x4_t *)(a3 + 224);
  v75 = *(float32x4_t *)(a3 + 240);
  v16 = (const void *)(a3 + 272);
  v73 = *(float32x4_t *)(a3 + 256);
  memcpy(v94, (const void *)(a3 + 272), sizeof(v94));
  v17 = *(float32x4_t *)(a3 + 176);
  __dst[10] = *(float32x4_t *)(a3 + 160);
  __dst[11] = v17;
  v18 = *(float32x4_t *)(a3 + 112);
  __dst[6] = *(float32x4_t *)(a3 + 96);
  __dst[7] = v18;
  v19 = *(float32x4_t *)(a3 + 144);
  __dst[8] = *(float32x4_t *)(a3 + 128);
  __dst[9] = v19;
  v20 = *(float32x4_t *)(a3 + 48);
  __dst[2] = *(float32x4_t *)(a3 + 32);
  __dst[3] = v20;
  v21 = *(float32x4_t *)(a3 + 80);
  __dst[4] = *(float32x4_t *)(a3 + 64);
  __dst[5] = v21;
  v22 = *(float32x4_t *)(a3 + 16);
  __dst[0] = *(float32x4_t *)a3;
  __dst[1] = v22;
  __dst[12] = *(float32x4_t *)(a3 + 192);
  __dst[13] = v76;
  __dst[14] = v74;
  __dst[15] = v75;
  __dst[16] = v73;
  memcpy(&__dst[17], v16, 0x118uLL);
  FrameFeaturesAdapter.updatePinchGestureData(_:_:_:)(a1, (uint64_t)a2, (uint64_t)__dst);
  v23 = *(float32x4_t *)(a3 + 176);
  __dst[10] = *(float32x4_t *)(a3 + 160);
  __dst[11] = v23;
  v24 = *(float32x4_t *)(a3 + 112);
  __dst[6] = *(float32x4_t *)(a3 + 96);
  __dst[7] = v24;
  v25 = *(float32x4_t *)(a3 + 144);
  __dst[8] = *(float32x4_t *)(a3 + 128);
  __dst[9] = v25;
  v26 = *(float32x4_t *)(a3 + 48);
  __dst[2] = *(float32x4_t *)(a3 + 32);
  __dst[3] = v26;
  v27 = *(float32x4_t *)(a3 + 80);
  __dst[4] = *(float32x4_t *)(a3 + 64);
  __dst[5] = v27;
  v28 = *(float32x4_t *)(a3 + 16);
  __dst[0] = *(float32x4_t *)a3;
  __dst[1] = v28;
  __dst[12] = *(float32x4_t *)(a3 + 192);
  __dst[13] = v76;
  __dst[14] = v74;
  __dst[15] = v75;
  __dst[16] = v73;
  memcpy(&__dst[17], v16, 0x118uLL);
  v29 = v5[3].i64[1];
  swift_bridgeObjectRetain();
  specialized static PinchGestureHelper.calculateOcclusion(_:_:_:)((uint64_t)a2, __dst, v29);
  v31 = v30;
  v33 = v32;
  swift_bridgeObjectRelease();
  v5[7].i32[0] = v31;
  v5[7].i32[1] = v33;
  v90 = v76;
  v91 = v74;
  v92 = v75;
  v93 = v73;
  v5[7].i64[1] = specialized static PinchGestureHelper.getPinchJoints(_:_:)((uint64_t)a2, &v77);
  swift_bridgeObjectRelease();
  v34 = a2[2];
  v35 = a2[3];
  v36 = a2[4];
  v37 = a2[5];
  v38 = a2[6];
  v39 = a2[7];
  v40 = a2[8];
  v41 = a2[9];
  v42 = a2[10];
  v43 = a2[11];
  v44 = a2[12];
  v45 = a2[13];
  v46 = a2[14];
  v47 = a2[15];
  v48 = a2[16];
  if (v34)
  {
    v71 = HIDWORD(v48);
    v72 = a4;
    __dst[0].i64[0] = a2[2];
    __dst[0].i64[1] = v35;
    __dst[1].i64[1] = v37;
    __dst[1].i64[0] = v36;
    __dst[2].i64[1] = v39;
    __dst[2].i64[0] = v38;
    __dst[3].i64[1] = v41;
    __dst[3].i64[0] = v40;
    __dst[4].i64[1] = v43;
    __dst[4].i64[0] = v42;
    __dst[5].i64[1] = v45;
    __dst[5].i64[0] = v44;
    __dst[6].i64[1] = v47;
    __dst[6].i64[0] = v46;
    v49 = v48 & 1;
    __dst[7].i16[0] = v48 & 0x101;
    v50 = (v48 >> 8) & 1;
    __dst[7].i32[1] = HIDWORD(v48);
    v65 = v43;
    v69 = v47;
    v70 = v46;
    v67 = v45;
    v68 = v44;
    v66 = v42;
    v64 = v40;
    HandPose.getHoverDistanceVector()();
    v52 = vmulq_f32(v51, v51);
    v5[11].f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]);
    v77.i64[0] = v34;
    v77.i64[1] = v35;
    *(_QWORD *)&v78 = v36;
    *((_QWORD *)&v78 + 1) = v37;
    *(_QWORD *)&v79 = v38;
    *((_QWORD *)&v79 + 1) = v39;
    *(_QWORD *)&v80 = v64;
    *((_QWORD *)&v80 + 1) = v41;
    *((_QWORD *)&v81 + 1) = v65;
    *(_QWORD *)&v81 = v66;
    *((_QWORD *)&v82 + 1) = v67;
    *(_QWORD *)&v82 = v68;
    *((_QWORD *)&v83 + 1) = v69;
    *(_QWORD *)&v83 = v70;
    LOBYTE(v84) = v49;
    BYTE1(v84) = v50;
    a4 = v72;
    DWORD1(v84) = v71;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HandPose.init(_:from:)((uint64_t)&v77, (uint64_t)__dst, v76, v74, v75, v73);
    v53 = __dst[2];
    v54 = __dst[3];
    v55 = __dst[4];
    v56 = __dst[5];
    v57 = __dst[6].i64[1];
    v58 = __dst[6].i64[0];
    v59 = 256;
    if (!__dst[7].i8[1])
      v59 = 0;
    v60 = v59 | __dst[7].u8[0] | ((unint64_t)__dst[7].u32[1] << 32);
    v61 = v5[14].i64[0];
    v62 = __dst[1];
    v5[14] = __dst[0];
    v5[15] = v62;
    v5[16] = v53;
    v5[17] = v54;
    v5[18] = v55;
    v5[19] = v56;
    v5[20].i64[0] = v58;
    v5[20].i64[1] = v57;
    v5[21].i64[0] = v60;
  }
  else
  {
    v5[11].i32[0] = 1065353216;
    v61 = v5[14].i64[0];
    v5[14].i64[0] = 0;
    v5[14].i64[1] = v35;
    v5[15].i64[0] = v36;
    v5[15].i64[1] = v37;
    v5[16].i64[0] = v38;
    v5[16].i64[1] = v39;
    v5[17].i64[0] = v40;
    v5[17].i64[1] = v41;
    v5[18].i64[0] = v42;
    v5[18].i64[1] = v43;
    v5[19].i64[0] = v44;
    v5[19].i64[1] = v45;
    v5[20].i64[0] = v46;
    v5[20].i64[1] = v47;
    v5[21].i64[0] = v48;
  }
  outlined consume of HandPose?(v61);
  memcpy(__dst, &v5[1], 0x151uLL);
  memcpy(a4, &v5[1], 0x151uLL);
  return outlined retain of FrameFeatures((uint64_t)__dst);
}

uint64_t FrameFeaturesAdapter.updatePinchGestureData(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  float32x4_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  _QWORD v94[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  float32x4_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  __int16 v134;
  char v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  __int16 v144;
  char v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int16 v159;
  char v160;
  __int16 v161;
  char v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  float32x4_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;

  v4 = v3;
  v7 = *(_OWORD *)(a3 + 144);
  v9 = *(_OWORD *)(a3 + 176);
  v177 = *(_OWORD *)(a3 + 160);
  v8 = v177;
  v178 = v9;
  v10 = *(_OWORD *)(a3 + 176);
  v179 = *(_OWORD *)(a3 + 192);
  v11 = *(_OWORD *)(a3 + 80);
  v13 = *(_OWORD *)(a3 + 112);
  v173 = *(_OWORD *)(a3 + 96);
  v12 = v173;
  v174 = v13;
  v14 = *(_OWORD *)(a3 + 112);
  v15 = *(_OWORD *)(a3 + 128);
  v16 = v15;
  v176 = *(_OWORD *)(a3 + 144);
  v175 = v15;
  v17 = *(_OWORD *)(a3 + 16);
  v19 = *(_OWORD *)(a3 + 48);
  v169 = *(_OWORD *)(a3 + 32);
  v18 = v169;
  v170 = v19;
  v20 = *(_OWORD *)(a3 + 48);
  v21 = *(_OWORD *)(a3 + 64);
  v22 = v21;
  v172 = *(_OWORD *)(a3 + 80);
  v171 = v21;
  v23 = *(float32x4_t *)a3;
  v24 = *(float32x4_t *)a3;
  v168 = *(_OWORD *)(a3 + 16);
  v167 = v23;
  v25 = *(float32x4_t *)(a3 + 256);
  v26 = *(_OWORD *)(a3 + 288);
  v163 = *(_OWORD *)(a3 + 272);
  v27 = v163;
  v164 = v26;
  v28 = *(_OWORD *)(a3 + 288);
  v29 = *(_OWORD *)(a3 + 320);
  v165 = *(_OWORD *)(a3 + 304);
  v30 = v165;
  v166 = v29;
  v31 = *(_OWORD *)(a3 + 472);
  v33 = v31;
  v153 = *(_OWORD *)(a3 + 456);
  v32 = v153;
  v154 = v31;
  v34 = *(_OWORD *)(a3 + 504);
  v35 = *(_OWORD *)(a3 + 520);
  v158 = *(_OWORD *)(a3 + 536);
  v36 = *(_OWORD *)(a3 + 488);
  v156 = *(_OWORD *)(a3 + 504);
  v157 = v35;
  v155 = v36;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 224);
  v114 = v8;
  v115 = v10;
  v110 = v12;
  v111 = v14;
  v112 = v16;
  v113 = v7;
  v106 = v18;
  v107 = v20;
  v108 = v22;
  v109 = v11;
  v104 = v24;
  v105 = v17;
  v93 = v25;
  v120 = v25;
  v121 = v27;
  v122 = v28;
  v123 = v30;
  v124 = *(_OWORD *)(a3 + 320);
  v37 = *(float32x4_t *)(a3 + 224);
  v38 = *(float32x4_t *)(a3 + 240);
  v39 = *(_QWORD *)(a3 + 336);
  v40 = *(_QWORD *)(a3 + 344);
  v41 = *(unsigned int *)(a3 + 352);
  v42 = *(unsigned int *)(a3 + 356);
  v44 = *(_QWORD *)(a3 + 360);
  v43 = *(_QWORD *)(a3 + 368);
  v46 = *(_QWORD *)(a3 + 376);
  v45 = *(_QWORD *)(a3 + 384);
  v47 = *(_BYTE *)(a3 + 392);
  v161 = *(_WORD *)(a3 + 393);
  v162 = *(_BYTE *)(a3 + 395);
  v48 = *(_QWORD *)(a3 + 396);
  v49 = *(_DWORD *)(a3 + 404);
  v50 = *(_DWORD *)(a3 + 408);
  v52 = *(_QWORD *)(a3 + 412);
  v51 = *(_QWORD *)(a3 + 420);
  v54 = *(_QWORD *)(a3 + 428);
  v53 = *(_QWORD *)(a3 + 436);
  v55 = *(_BYTE *)(a3 + 444);
  v159 = *(_WORD *)(a3 + 445);
  v160 = *(_BYTE *)(a3 + 447);
  v56 = *(_QWORD *)(a3 + 448);
  v149 = v36;
  v150 = v34;
  v57 = *(_OWORD *)(a3 + 536);
  v151 = v35;
  v152 = v57;
  v58 = *(float32x4_t *)(a3 + 208);
  v116 = *(_OWORD *)(a3 + 192);
  v117 = v58;
  v90 = v58;
  v91 = v37;
  v118 = v37;
  v119 = v38;
  v92 = v38;
  v81 = v39;
  v82 = v48;
  v125 = v39;
  v126 = v40;
  v127 = v41;
  v128 = v42;
  v129 = v44;
  v87 = v43;
  v88 = v46;
  v130 = v43;
  v131 = v46;
  v89 = v45;
  v132 = v45;
  v76 = v47;
  v77 = v49;
  v133 = v47;
  v134 = *(_WORD *)(a3 + 393);
  v135 = *(_BYTE *)(a3 + 395);
  v136 = v48;
  v137 = v49;
  v83 = v50;
  v138 = v50;
  v78 = v52;
  v79 = v54;
  v139 = v52;
  v140 = v51;
  v84 = v51;
  v141 = v54;
  v142 = v53;
  v85 = v53;
  v80 = v55;
  v143 = v55;
  v144 = *(_WORD *)(a3 + 445);
  v145 = *(_BYTE *)(a3 + 447);
  v59 = v56;
  v146 = v56;
  v147 = v32;
  v148 = v33;
  specialized static PinchGestureHelper.getPinchVector(_:_:)(a2, &v104);
  *(_OWORD *)(v4 + 32) = v60;
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 276);
  *(_QWORD *)(v4 + 64) = v40;
  *(_QWORD *)(v4 + 72) = v41 | (v42 << 32);
  v86 = v44;
  *(_QWORD *)(v4 + 80) = v44;
  *(_BYTE *)(v4 + 88) = 0;
  if (!*(_QWORD *)(a2 + 16))
  {
    v72 = 0uLL;
    goto LABEL_5;
  }
  v61 = v59;
  v63 = *(_QWORD *)(a2 + 120);
  v62 = *(_QWORD *)(a2 + 128);
  v65 = *(_OWORD *)(a2 + 80);
  v64 = *(_OWORD *)(a2 + 96);
  v67 = *(_OWORD *)(a2 + 48);
  v66 = *(_OWORD *)(a2 + 64);
  v68 = *(_OWORD *)(a2 + 32);
  v69 = *(_QWORD *)(a2 + 24);
  v70 = *(_QWORD *)(a2 + 112);
  v94[0] = *(_QWORD *)(a2 + 16);
  v94[1] = v69;
  v95 = v68;
  v96 = v67;
  v97 = v66;
  v98 = v65;
  v99 = v64;
  v100 = v70;
  v101 = v63;
  v102 = v62 & 0x101;
  v103 = HIDWORD(v62);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HandPose.init(_:from:)((uint64_t)v94, (uint64_t)&v104, v90, v91, v92, v93);
  result = v104.i64[1];
  if (*(_QWORD *)(v104.i64[1] + 16) >= 7uLL)
  {
    v75 = *(_OWORD *)(v104.i64[1] + 240);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72 = v75;
    v59 = v61;
LABEL_5:
    *(_OWORD *)(v4 + 96) = v72;
    v114 = v177;
    v115 = v178;
    v110 = v173;
    v111 = v174;
    v112 = v175;
    v113 = v176;
    v106 = v169;
    v107 = v170;
    v108 = v171;
    v109 = v172;
    v104 = v167;
    v105 = v168;
    v116 = v179;
    v117 = v90;
    v118 = v91;
    v119 = v92;
    v120 = v93;
    v121 = v163;
    v122 = v164;
    v123 = v165;
    v124 = v166;
    v125 = v81;
    v126 = v40;
    v127 = v41;
    v128 = v42;
    v129 = v86;
    v130 = v87;
    v131 = v88;
    v132 = v89;
    v133 = v76;
    v134 = v161;
    v135 = v162;
    v136 = v82;
    v137 = v77;
    v138 = v83;
    v139 = v78;
    v140 = v84;
    v141 = v79;
    v142 = v85;
    v143 = v80;
    v144 = v159;
    v145 = v160;
    v146 = v59;
    v151 = v157;
    v152 = v158;
    v149 = v155;
    v150 = v156;
    v147 = v153;
    v148 = v154;
    specialized static PinchGestureHelper.getPalmNormal(_:_:)(a2, &v104);
    *(_OWORD *)(v4 + 144) = v73;
    *(_BYTE *)(v4 + 128) = PinchGestures.classify()();
    v114 = v177;
    v115 = v178;
    v110 = v173;
    v111 = v174;
    v112 = v175;
    v113 = v176;
    v106 = v169;
    v107 = v170;
    v108 = v171;
    v109 = v172;
    v104 = v167;
    v105 = v168;
    v116 = v179;
    v117 = v90;
    v118 = v91;
    v119 = v92;
    v120 = v93;
    v121 = v163;
    v122 = v164;
    v123 = v165;
    v124 = v166;
    v125 = v81;
    v126 = v40;
    v127 = v41;
    v128 = v42;
    v129 = v86;
    v130 = v87;
    v131 = v88;
    v132 = v89;
    v133 = v76;
    v134 = v161;
    v135 = v162;
    v136 = v82;
    v137 = v77;
    v138 = v83;
    v139 = v78;
    v140 = v84;
    v141 = v79;
    v142 = v85;
    v143 = v80;
    v144 = v159;
    v145 = v160;
    v146 = v59;
    v151 = v157;
    v152 = v158;
    v149 = v155;
    v150 = v156;
    v147 = v153;
    v148 = v154;
    specialized static PinchGestureHelper.getMidpointBetweenThumbAndPinky(_:_:)(a2, &v104);
    *(_OWORD *)(v4 + 160) = v74;
    swift_beginAccess();
    *(_QWORD *)(v4 + 192) = *(_QWORD *)(a1 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v4 + 184) = *(_QWORD *)(a1 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v4 + 208) = *(_QWORD *)(a1 + 280);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t FrameFeaturesAdapter.__deallocating_deinit()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), 0x151uLL);
  outlined release of FrameFeatures((uint64_t)v2);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameFeaturesAdapter()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for FrameFeatures(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v6 = a2 + 208;
  v5 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    v10 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = v5;
    *(_QWORD *)(a1 + 216) = v10;
    v11 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v11;
    v12 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v12;
    v13 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v13;
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
    *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 288) = v14;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(v6 + 96);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(v6 + 112);
    v15 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 224) = v15;
    v16 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 256) = v16;
  }
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  return a1;
}

uint64_t assignWithCopy for FrameFeatures(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a2 + 208);
  v5 = *(_QWORD *)(a2 + 208);
  v7 = (_OWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 208))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 208) = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
      *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
    }
    else
    {
      outlined destroy of HandPose(a1 + 208);
      v12 = *(_OWORD *)(a2 + 256);
      v14 = *v6;
      v13 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 256) = v12;
      *v7 = v14;
      *(_OWORD *)(a1 + 224) = v13;
      v16 = *(_OWORD *)(a2 + 288);
      v15 = *(_OWORD *)(a2 + 304);
      v17 = *(_OWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 288) = v16;
      *(_OWORD *)(a1 + 304) = v15;
      *(_OWORD *)(a1 + 272) = v17;
    }
  }
  else if (v5)
  {
    *(_QWORD *)(a1 + 208) = v5;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v8 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v8;
    v9 = *(_OWORD *)(a2 + 256);
    v10 = *(_OWORD *)(a2 + 272);
    v11 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v11;
    *(_OWORD *)(a1 + 256) = v9;
    *(_OWORD *)(a1 + 272) = v10;
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
    *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *v6;
    v19 = *(_OWORD *)(a2 + 224);
    v20 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v20;
    *v7 = v18;
    *(_OWORD *)(a1 + 224) = v19;
    v21 = *(_OWORD *)(a2 + 272);
    v22 = *(_OWORD *)(a2 + 288);
    v23 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 288) = v22;
    *(_OWORD *)(a1 + 304) = v23;
    *(_OWORD *)(a1 + 272) = v21;
  }
  v24 = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v24;
  return a1;
}

void *__swift_memcpy337_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x151uLL);
}

uint64_t assignWithTake for FrameFeatures(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 208);
  if (!*(_QWORD *)(a1 + 208))
    goto LABEL_5;
  if (!v6)
  {
    outlined destroy of HandPose(a1 + 208);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v10;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    v11 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v11;
    v12 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v12;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 208) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v7;
  v8 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v8;
  v9 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v9;
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
LABEL_6:
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  return a1;
}

uint64_t getEnumTagSinglePayload for FrameFeatures(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 337))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FrameFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 336) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 337) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 337) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FrameFeatures()
{
  return &type metadata for FrameFeatures;
}

uint64_t outlined retain of FrameFeatures(uint64_t a1)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of HandPose?(v3);
  return a1;
}

uint64_t storeEnumTagSinglePayload for PreviousFrameData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PreviousFrameData()
{
  return &type metadata for PreviousFrameData;
}

uint64_t destroy for FrameFeatures(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 208);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PinchGestureData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v6 = a2 + 208;
  v5 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    v10 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = v5;
    *(_QWORD *)(a1 + 216) = v10;
    v11 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v11;
    v12 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v12;
    v13 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v13;
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
    *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 288) = v14;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(v6 + 96);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(v6 + 112);
    v15 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 224) = v15;
    v16 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 256) = v16;
  }
  return a1;
}

uint64_t assignWithCopy for PinchGestureData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a2 + 208);
  v5 = *(_QWORD *)(a2 + 208);
  v7 = (_OWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 208))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 208) = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
      *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
    }
    else
    {
      outlined destroy of HandPose(a1 + 208);
      v12 = *(_OWORD *)(a2 + 256);
      v14 = *v6;
      v13 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 256) = v12;
      *v7 = v14;
      *(_OWORD *)(a1 + 224) = v13;
      v16 = *(_OWORD *)(a2 + 288);
      v15 = *(_OWORD *)(a2 + 304);
      v17 = *(_OWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 288) = v16;
      *(_OWORD *)(a1 + 304) = v15;
      *(_OWORD *)(a1 + 272) = v17;
    }
  }
  else if (v5)
  {
    *(_QWORD *)(a1 + 208) = v5;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v8 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v8;
    v9 = *(_OWORD *)(a2 + 256);
    v10 = *(_OWORD *)(a2 + 272);
    v11 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v11;
    *(_OWORD *)(a1 + 256) = v9;
    *(_OWORD *)(a1 + 272) = v10;
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
    *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *v6;
    v19 = *(_OWORD *)(a2 + 224);
    v20 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v20;
    *v7 = v18;
    *(_OWORD *)(a1 + 224) = v19;
    v21 = *(_OWORD *)(a2 + 272);
    v22 = *(_OWORD *)(a2 + 288);
    v23 = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 288) = v22;
    *(_OWORD *)(a1 + 304) = v23;
    *(_OWORD *)(a1 + 272) = v21;
  }
  return a1;
}

void *__swift_memcpy328_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x148uLL);
}

uint64_t assignWithTake for PinchGestureData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 208);
  if (!*(_QWORD *)(a1 + 208))
    goto LABEL_5;
  if (!v6)
  {
    outlined destroy of HandPose(a1 + 208);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v10;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    v11 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v11;
    v12 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v12;
    return a1;
  }
  *(_QWORD *)(a1 + 208) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v7;
  v8 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v8;
  v9 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v9;
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchGestureData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 328))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchGestureData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 328) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 328) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchGestureData()
{
  return &type metadata for PinchGestureData;
}

uint64_t MakeBreakRejectorUnsure.predict(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  BOOL v26;
  float v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t inited;
  unint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  int v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  float v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *boxed_opaque_existential_0;
  uint64_t result;
  float v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100[3];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  _BYTE v111[32];
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  _BYTE v115[26];

  v3 = v2;
  v6 = type metadata accessor for UnsureInternalPB(0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_DWORD *)(a1 + 136);
  v10 = *(float *)(a1 + 140);
  v12 = *(unsigned __int8 *)(a1 + 192);
  v13 = *(float *)(a1 + 360);
  v14 = *(float *)(a1 + 368);
  v15 = *(_QWORD *)(a1 + 400);
  v16 = *(float *)(a1 + 428);
  v17 = *(float *)(a1 + 432);
  v18 = *(float *)(a1 + 436);
  v19 = *(float *)(a1 + 440);
  v20 = *(float *)(a1 + 536);
  v98 = *(float *)(a1 + 540);
  v99 = v20;
  v21 = *(float *)(a1 + 544);
  v96 = *(float *)(a1 + 548);
  v97 = v21;
  v22 = *(float *)(a1 + 552);
  v94 = *(float *)(a1 + 556);
  v95 = v22;
  v103 = 0;
  v104 = 256;
  v105 = 0;
  v106 = 256;
  v107 = 0;
  v108 = 256;
  v109 = 0;
  v110 = 256;
  memset(v111, 0, sizeof(v111));
  v112 = 0;
  v113 = 2;
  v114 = 0u;
  memset(v115, 0, sizeof(v115));
  UnknownStorage.init()();
  v23 = *(int *)(v6 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)&v9[v23] = static UnsureInternalPB._StorageClass.defaultInstance;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 1;
  *(float *)(v3 + 52) = v14;
  v24 = specialized Sequence<>.max()(v15);
  if ((v24 & 0x100000000) != 0)
  {
    v101 = MEMORY[0x24BEE0D00];
    v100[0] = 0xD00000000000002ALL;
    v100[1] = 0x800000023D9D4FB0;
    swift_retain();
    specialized static HLog.E(file:function:line:_:_:)(0xD00000000000008BLL, 0x800000023D9D4F20, 104, (uint64_t)v100, MEMORY[0x24BEE4AF8]);
    outlined destroy of UnsureInternalPB((uint64_t)v9);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v100);
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(v3 + 20);
    *(_DWORD *)(v3 + 20) = v11;
LABEL_87:
    outlined init with copy of UnitResult((uint64_t)&v103, a2);
    return outlined destroy of UnitResult((uint64_t)&v103);
  }
  v25 = *(float *)&v24;
  v93 = a2;
  v26 = v10 < *(float *)(v3 + 28) && v14 < 0.5;
  v27 = 0.0;
  if (!v26)
    v27 = v10;
  v92 = v27;
  if (*(float *)(v3 + 16) == 0.0)
  {
    swift_retain();
    v28 = 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v28 = *(float *)(v3 + 20) == 0.0;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_11:
    v29 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v29);
    swift_release();
  }
LABEL_12:
  v30 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(_BYTE *)(v30 + 32) = v28;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v31 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v31);
    swift_release();
  }
  v32 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(float *)(v32 + 52) = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v33 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v33);
    swift_release();
  }
  v34 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(float *)(v34 + 44) = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v35 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v35);
    swift_release();
  }
  v36 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(float *)(v36 + 16) = v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v37 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v37);
    swift_release();
  }
  v38 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(float *)(v38 + 20) = v17;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v39 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v39);
    swift_release();
  }
  v40 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(float *)(v40 + 24) = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v41 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v41);
    swift_release();
  }
  v42 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(float *)(v42 + 28) = v19;
  if (*(float *)(v3 + 16) == 0.0 || *(float *)(v3 + 20) == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
    *(float *)(inited + 32) = v16;
    *(float *)(inited + 36) = v17;
    *(float *)(inited + 40) = v18;
    *(float *)(inited + 44) = v19;
    v44 = specialized Sequence<>.max()(inited);
    swift_setDeallocating();
    if ((v44 & 0x100000000) != 0)
      v10 = 0.0;
    else
      v10 = *(float *)&v44;
    v45 = v92;
    goto LABEL_30;
  }
  v47 = v13 * 1000.0;
  v91 = *(float *)(v3 + 24);
  if (v98 < (float)(1.0 - v14))
    v48 = v12;
  else
    v48 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v49 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v49);
    swift_release();
  }
  v50 = v91 < v47;
  v51 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(_BYTE *)(v51 + 33) = v50;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v52 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v52);
    swift_release();
  }
  v53 = v97 < v47;
  v54 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(_BYTE *)(v54 + 34) = v53;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v55 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v55);
    swift_release();
  }
  v56 = v99 < v14;
  v57 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(_BYTE *)(v57 + 35) = v56;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v58 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v58);
    swift_release();
  }
  v90 = v25;
  v59 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(_BYTE *)(v59 + 36) = v48;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v60 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v60);
    swift_release();
  }
  v61 = v96 >= v90;
  v62 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(_BYTE *)(v62 + 37) = v61;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v63 = *(_QWORD *)&v9[v23];
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v63);
    swift_release();
  }
  v64 = v95 < v14;
  v65 = *(_QWORD *)&v9[v23];
  swift_beginAccess();
  *(_BYTE *)(v65 + 38) = v64;
  if (v91 >= v47 || v99 >= v14)
  {
    if (v97 < v47)
      v68 = v48;
    else
      v68 = 0;
    if (v68 == 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v69 = *(_QWORD *)&v9[v23];
        type metadata accessor for UnsureInternalPB._StorageClass();
        swift_allocObject();
        *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v69);
        swift_release();
      }
      v70 = *(_QWORD *)&v9[v23];
      swift_beginAccess();
      *(_BYTE *)(v70 + 40) = 1;
      v45 = 0.0;
    }
    else if (v96 >= v90 && v95 < v14 && v94 == 0.0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v72 = v92;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v73 = *(_QWORD *)&v9[v23];
        type metadata accessor for UnsureInternalPB._StorageClass();
        swift_allocObject();
        *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v73);
        swift_release();
      }
      v45 = v72 * v90;
      v74 = *(_QWORD *)&v9[v23];
      swift_beginAccess();
      *(_BYTE *)(v74 + 41) = 1;
    }
    else if (v94 <= 0.0)
    {
      v45 = v92;
    }
    else
    {
      specialized static PinchFilterHelper.computeUnsureScoreFactor(_:_:_:_:_:)(v90, v96, v95, v14, v94);
      v84 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v85 = *(_QWORD *)&v9[v23];
        type metadata accessor for UnsureInternalPB._StorageClass();
        swift_allocObject();
        *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v85);
        swift_release();
      }
      v45 = v92 * v84;
      v86 = *(_QWORD *)&v9[v23];
      swift_beginAccess();
      *(_BYTE *)(v86 + 42) = 1;
    }
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v66 = *(_QWORD *)&v9[v23];
      type metadata accessor for UnsureInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v66);
      swift_release();
    }
    v67 = *(_QWORD *)&v9[v23];
    swift_beginAccess();
    *(_BYTE *)(v67 + 39) = 1;
    v45 = 1.0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v87 = swift_initStackObject();
  *(_OWORD *)(v87 + 16) = xmmword_23D9A7050;
  *(float *)(v87 + 32) = v16;
  *(float *)(v87 + 36) = v45;
  if (*(_BYTE *)(v3 + 34) != 1)
  {
    swift_setDeallocating();
    goto LABEL_30;
  }
  v88 = specialized Sequence<>.max()(v87);
  result = swift_setDeallocating();
  if ((v88 & 0x100000000) == 0)
  {
    v10 = *(float *)&v88;
LABEL_30:
    if (v10 == v45)
    {
      v46 = 9;
    }
    else if (v10 == v16)
    {
      v46 = 1;
    }
    else if (v10 == v17)
    {
      v46 = 4;
    }
    else if (v10 == v18)
    {
      v46 = 8;
    }
    else
    {
      v46 = 6;
      if (v10 != v19)
        v46 = 0;
    }
    *(_QWORD *)(v3 + 40) = v46;
    *(_BYTE *)(v3 + 48) = 1;
    v75 = specialized static PinchFilterHelper.fusePinchScore(score:uncertain:weight:enable_nonlinear:)(*(_BYTE *)(v3 + 32), v14, v10, 0.5);
    v76 = v75;
    if (*(_BYTE *)(v3 + 33))
      v14 = v75;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v77 = *(_QWORD *)&v9[v23];
      type metadata accessor for UnsureInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v77);
      swift_release();
    }
    v78 = *(_QWORD *)&v9[v23];
    swift_beginAccess();
    *(float *)(v78 + 56) = v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v79 = *(_QWORD *)&v9[v23];
      type metadata accessor for UnsureInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)&v9[v23] = specialized UnsureInternalPB._StorageClass.init(copying:)(v79);
      swift_release();
    }
    v80 = *(_QWORD *)&v9[v23];
    swift_beginAccess();
    *(float *)(v80 + 48) = v14;
    *(float *)(v3 + 52) = v76;
    if ((float)(1.0 - v14) <= v98)
    {
      v109 = 1;
      v110 = 1;
    }
    if (v14 <= v99)
    {
      v105 = 1;
      v106 = 1;
    }
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(v3 + 20);
    *(_DWORD *)(v3 + 20) = v11;
    v101 = v6;
    v102 = lazy protocol witness table accessor for type UnsureInternalPB and conformance UnsureInternalPB(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v100);
    outlined init with take of UnsureInternalPB((uint64_t)v9, (uint64_t)boxed_opaque_existential_0);
    outlined assign with take of PinchInternalDataType?((uint64_t)v100, (uint64_t)v111);
    a2 = v93;
    goto LABEL_87;
  }
  __break(1u);
  return result;
}

uint64_t MakeBreakRejectorUnsure.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MakeBreakRejectorUnsure()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in UnsureInternalPB()
{
  return lazy protocol witness table accessor for type UnsureInternalPB and conformance UnsureInternalPB(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
}

void protocol witness for PinchAlgorithmUnit.reset() in conformance MakeBreakRejectorUnsure()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 1;
}

uint64_t protocol witness for PinchAlgorithmUnit.predict(_:) in conformance MakeBreakRejectorUnsure@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MakeBreakRejectorUnsure.predict(_:)(a1, a2);
}

uint64_t protocol witness for PinchInternalDataType.save(into:) in conformance UnsureInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = type metadata accessor for HandDescriptorInternal();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = a1 + *(int *)(v5 + 44);
    outlined destroy of UnsureInternalPB?(v7);
    outlined init with copy of UnsureInternalPB(v2, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v7, 0, 1, a2);
  }
  return result;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance UnsureInternalPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UnsureInternalPB(v1, a1);
}

uint64_t instantiation function for generic protocol witness table for UnsureInternalPB(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type UnsureInternalPB and conformance UnsureInternalPB(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined destroy of UnsureInternalPB?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UnsureInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnsureInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UnsureInternalPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnsureInternalPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized MakeBreakRejectorUnsure.init(_:)(void *a1)
{
  uint64_t v1;
  int v3;
  int v4;

  *(_OWORD *)(v1 + 16) = xmmword_23D9B9A10;
  *(_WORD *)(v1 + 32) = 256;
  *(_BYTE *)(v1 + 34) = 1;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_QWORD *)(v1 + 52) = 0x447A000000000000;
  objc_msgSend(a1, sel_UnsureNetHDThreshold);
  *(_DWORD *)(v1 + 24) = v3;
  objc_msgSend(a1, sel_UnsureNetBreakThreshold);
  *(_DWORD *)(v1 + 28) = v4;
  *(_BYTE *)(v1 + 32) = objc_msgSend(a1, sel_EnableNonlinearFusion);
  *(_BYTE *)(v1 + 33) = objc_msgSend(a1, sel_EnableUnsurePinchFilters);
  *(_BYTE *)(v1 + 34) = objc_msgSend(a1, sel_EnableUnsureScorePostProcessing);
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  return v1;
}

uint64_t lazy protocol witness table accessor for type UnsureInternalPB and conformance UnsureInternalPB(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UnsureInternalPB(255);
    result = MEMORY[0x242638C74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of UnsureInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnsureInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingCycles()
{
  lazy protocol witness table accessor for type TrackingCycles and conformance TrackingCycles();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TrackingCycles@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static TrackingCycles.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance THSDistanceHysteresis()
{
  lazy protocol witness table accessor for type THSDistanceHysteresis and conformance THSDistanceHysteresis();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance THSDistanceHysteresis@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static THSDistanceHysteresis.allCases, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingCycles@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingCycles._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance THSDistanceHysteresis@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static THSDistanceHysteresis._protobuf_nameMap, a1);
}

uint64_t TrackingPredictionPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 4)
        break;
      if (result == 2)
      {
        type metadata accessor for Coordinate3DPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        closure #1 in TrackingPredictionPB.decodeMessage<A>(decoder:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    closure #3 in TrackingPredictionPB.decodeMessage<A>(decoder:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t closure #1 in TrackingPredictionPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TrackingPredictionPB(0);
  type metadata accessor for Coordinate3DPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in TrackingPredictionPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TrackingPredictionPB(0);
  type metadata accessor for FeatureVectorPerFramePB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t TrackingPredictionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in TrackingPredictionPB.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for Coordinate3DPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    closure #2 in TrackingPredictionPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    type metadata accessor for TrackingPredictionPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in TrackingPredictionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TrackingPredictionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #2 in TrackingPredictionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FeatureVectorPerFramePB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TrackingPredictionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for FeatureVectorPerFramePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for FeatureVectorPerFramePB);
}

uint64_t protocol witness for Message.init() in conformance TrackingPredictionPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for Coordinate3DPB(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + *(int *)(a1 + 28);
  v7 = type metadata accessor for FeatureVectorPerFramePB(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingPredictionPB()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingPredictionPB()
{
  return TrackingPredictionPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingPredictionPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TrackingPredictionPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingPredictionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB, type metadata accessor for TrackingPredictionPB, (uint64_t)&protocol conformance descriptor for TrackingPredictionPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingPredictionPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingPredictionPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingPredictionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB, type metadata accessor for TrackingPredictionPB, (uint64_t)&protocol conformance descriptor for TrackingPredictionPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingPredictionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB, type metadata accessor for TrackingPredictionPB, (uint64_t)&protocol conformance descriptor for TrackingPredictionPB);
  return Message.hash(into:)();
}

uint64_t FeatureVectorPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t FeatureVectorPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0
    || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for FeatureVectorPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance FeatureVectorPB@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance FeatureVectorPB()
{
  return 0x5665727574616546;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FeatureVectorPB()
{
  return FeatureVectorPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FeatureVectorPB()
{
  return FeatureVectorPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FeatureVectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FeatureVectorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FeatureVectorPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FeatureVectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FeatureVectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB);
  return Message.hash(into:)();
}

uint64_t FeatureVectorPerFramePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for FeatureVectorPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t FeatureVectorPerFramePB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for FeatureVectorPB(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for FeatureVectorPerFramePB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance FeatureVectorPerFramePB()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance FeatureVectorPerFramePB()
{
  return FeatureVectorPerFramePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance FeatureVectorPerFramePB()
{
  return FeatureVectorPerFramePB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance FeatureVectorPerFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance FeatureVectorPerFramePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static FeatureVectorPerFramePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FeatureVectorPerFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FeatureVectorPerFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
  return Message.hash(into:)();
}

uint64_t TrackingBuffersPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for FeatureVectorPerFramePB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type TrackingCycles and conformance TrackingCycles();
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t TrackingBuffersPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16) || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for FeatureVectorPerFramePB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (lazy protocol witness table accessor for type TrackingCycles and conformance TrackingCycles(),
            result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for TrackingBuffersPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance TrackingBuffersPB@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  a1[2] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingBuffersPB()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingBuffersPB()
{
  return TrackingBuffersPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingBuffersPB()
{
  return TrackingBuffersPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingBuffersPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB, type metadata accessor for TrackingBuffersPB, (uint64_t)&protocol conformance descriptor for TrackingBuffersPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingBuffersPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingBuffersPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingBuffersPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB, type metadata accessor for TrackingBuffersPB, (uint64_t)&protocol conformance descriptor for TrackingBuffersPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingBuffersPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB, type metadata accessor for TrackingBuffersPB, (uint64_t)&protocol conformance descriptor for TrackingBuffersPB);
  return Message.hash(into:)();
}

uint64_t TrackingInfoPB._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  *(_QWORD *)(v0 + 16) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
  v2 = type metadata accessor for TrackingPredictionPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
  v4 = type metadata accessor for TrackingBuffersPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter) = 0;
  *(_DWORD *)(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter) = 0;
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown) = 0;
  v6 = OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D;
  *(_QWORD *)(v0 + v6) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityIsConfident) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore) = 0;
  v7 = v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
  v8 = type metadata accessor for Coordinate3DPB(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError) = 0;
  v9(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity, 1, 1, v8);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange) = 0;
  v10 = v0
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera) = 0;
  return v0;
}

uint64_t TrackingInfoPB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction, &demangling cache variable for type metadata for TrackingPredictionPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers, &demangling cache variable for type metadata for TrackingBuffersPB?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity, &demangling cache variable for type metadata for Coordinate3DPB?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TrackingInfoPB._StorageClass()
{
  return type metadata accessor for TrackingInfoPB._StorageClass(0);
}

uint64_t type metadata accessor for TrackingInfoPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingInfoPB._StorageClass);
}

void type metadata completion function for TrackingInfoPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TrackingPredictionPB?, (void (*)(uint64_t))type metadata accessor for TrackingPredictionPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TrackingBuffersPB?, (void (*)(uint64_t))type metadata accessor for TrackingBuffersPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for TrackingPredictionPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingPredictionPB);
}

uint64_t type metadata accessor for TrackingBuffersPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingBuffersPB);
}

ValueMetadata *type metadata accessor for THSDistanceHysteresis()
{
  return &type metadata for THSDistanceHysteresis;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrackingBuffersPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for TrackingBuffersPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for TrackingBuffersPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for TrackingBuffersPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for TrackingBuffersPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingBuffersPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D894740(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TrackingBuffersPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D8947C8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for TrackingBuffersPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrackingPredictionPB(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (_DWORD *)((char *)v7 + v13);
    v15 = (_DWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for Coordinate3DPB(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[2] = v15[2];
      v12((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v19 = a3[7];
    v20 = (uint64_t *)((char *)v7 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = type metadata accessor for FeatureVectorPerFramePB(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *v20 = *v21;
      v25 = *(int *)(v22 + 20);
      v26 = (char *)v20 + v25;
      v27 = (char *)v21 + v25;
      swift_bridgeObjectRetain();
      v12(v26, v27, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return v7;
}

uint64_t type metadata accessor for FeatureVectorPerFramePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for FeatureVectorPerFramePB);
}

uint64_t destroy for TrackingPredictionPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for Coordinate3DPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v11(v6 + *(int *)(v7 + 28), v5);
  v8 = a1 + a2[7];
  v9 = type metadata accessor for FeatureVectorPerFramePB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for TrackingPredictionPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for FeatureVectorPerFramePB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v23 = *(int *)(v20 + 20);
    v24 = (char *)v18 + v23;
    v25 = (char *)v19 + v23;
    swift_bridgeObjectRetain();
    v10(v24, v25, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

_QWORD *assignWithCopy for TrackingPredictionPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD *)(v9 - 8);
  v33 = *(void (**)(char *, char *, uint64_t))(v34 + 24);
  v33(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Coordinate3DPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_DWORD *)v11 = *(_DWORD *)v12;
      *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate3DPB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v33(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for FeatureVectorPerFramePB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v33(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for FeatureVectorPerFramePB);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v27 = *(int *)(v22 + 20);
  v28 = &v20[v27];
  v29 = &v21[v27];
  v30 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  swift_bridgeObjectRetain();
  v30(v28, v29, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

_QWORD *initializeWithTake for TrackingPredictionPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for FeatureVectorPerFramePB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

_QWORD *assignWithTake for TrackingPredictionPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD *)(v9 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v30 + 40);
  v29(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Coordinate3DPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate3DPB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v29(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for FeatureVectorPerFramePB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      swift_bridgeObjectRelease();
      v29(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for FeatureVectorPerFramePB);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingPredictionPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D895434(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TrackingPredictionPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D89550C(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for TrackingPredictionPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for FeatureVectorPerFramePB?, (void (*)(uint64_t))type metadata accessor for FeatureVectorPerFramePB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for FeatureVectorPerFramePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8956B0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FeatureVectorPerFramePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D895738(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TrackingInfosPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8957B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TrackingInfosPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D895840(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TrackingInfosPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingInfosPB);
}

unint64_t lazy protocol witness table accessor for type THSDistanceHysteresis and conformance THSDistanceHysteresis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis;
  if (!lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for THSDistanceHysteresis, &type metadata for THSDistanceHysteresis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis;
  if (!lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for THSDistanceHysteresis, &type metadata for THSDistanceHysteresis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis;
  if (!lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for THSDistanceHysteresis, &type metadata for THSDistanceHysteresis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis;
  if (!lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for THSDistanceHysteresis, &type metadata for THSDistanceHysteresis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type THSDistanceHysteresis and conformance THSDistanceHysteresis);
  }
  return result;
}

uint64_t TrackingInfoPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for TrackingInfoPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingInfoPB._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = specialized TrackingInfoPB._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)(v11, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t);
  unint64_t *v13;
  void *v14;
  uint64_t *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          closure #1 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 4:
          v11 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
          v12 = type metadata accessor for TrackingPredictionPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB;
          v14 = &protocol conformance descriptor for TrackingPredictionPB;
          goto LABEL_27;
        case 5:
          v11 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
          v12 = type metadata accessor for TrackingBuffersPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB;
          v14 = &protocol conformance descriptor for TrackingBuffersPB;
          goto LABEL_27;
        case 6:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter;
          goto LABEL_18;
        case 7:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter;
          goto LABEL_18;
        case 8:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius;
          goto LABEL_31;
        case 9:
        case 10:
        case 13:
        case 15:
        case 16:
        case 18:
        case 19:
        case 24:
          closure #6 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 11:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter;
          goto LABEL_18;
        case 12:
          closure #10 in closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #12 in closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)();
          break;
        case 17:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter;
LABEL_18:
          v16 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0C8];
          goto LABEL_32;
        case 20:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore;
          goto LABEL_31;
        case 21:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore;
          goto LABEL_31;
        case 22:
          v11 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
          goto LABEL_26;
        case 23:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity;
          goto LABEL_31;
        case 25:
          closure #23 in closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)();
          break;
        case 26:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError;
          goto LABEL_31;
        case 27:
          v11 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
LABEL_26:
          v12 = type metadata accessor for Coordinate3DPB;
          v13 = &lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB;
          v14 = &protocol conformance descriptor for Coordinate3DPB;
LABEL_27:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)v11, v12, v13, (uint64_t)v14);
          break;
        case 28:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange;
          goto LABEL_31;
        case 29:
          closure #27 in closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)();
          break;
        case 30:
          v15 = &OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera;
LABEL_31:
          v16 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0B8];
LABEL_32:
          closure #24 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, v15, v16);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #10 in closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
  dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for ProtobufInt32();
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
  return swift_endAccess();
}

uint64_t closure #23 in closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #27 in closure #1 in TrackingInfoPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type THSDistanceHysteresis and conformance THSDistanceHysteresis();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t TrackingInfoPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for TrackingInfoPB(0);
  v7 = swift_retain();
  closure #1 in TrackingInfoPB.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in TrackingInfoPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v10;
  _DWORD *v11;
  float *v12;
  _BYTE *v13;
  _BYTE *v14;
  _DWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _DWORD *v21;
  _BYTE *v22;
  _BYTE *v23;
  float *v24;
  float *v25;
  float *v26;
  _BYTE *v27;
  _QWORD *v28;
  float *v29;
  float *v30;
  _QWORD *v31;
  float *v32;

  swift_beginAccess();
  if (!*(_QWORD *)(a1 + 16) || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in closure #1 in TrackingInfoPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    if (!v4)
    {
      closure #2 in closure #1 in TrackingInfoPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v10 = (_DWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter);
      swift_beginAccess();
      if (*v10)
        dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      v11 = (_DWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter);
      swift_beginAccess();
      if (*v11)
        dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      v12 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius);
      swift_beginAccess();
      if (*v12 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      v13 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting);
      swift_beginAccess();
      if (*v13 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v14 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation);
      swift_beginAccess();
      if (*v14 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v15 = (_DWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter);
      swift_beginAccess();
      if (*v15)
        dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      v16 = a1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras;
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v16 + 16))
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
        swift_bridgeObjectRelease();
      }
      v17 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown);
      swift_beginAccess();
      if (*v17 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v18 = a1
          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D;
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v18 + 16))
      {
        type metadata accessor for ProtobufInt32();
        type metadata accessor for Matrix2dPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
        swift_bridgeObjectRelease();
      }
      v19 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft);
      swift_beginAccess();
      if (*v19 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v20 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityIsConfident);
      swift_beginAccess();
      if (*v20 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v21 = (_DWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter);
      swift_beginAccess();
      if (*v21)
        dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      v22 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin);
      swift_beginAccess();
      if (*v22 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v23 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou);
      swift_beginAccess();
      if (*v23 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v24 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore);
      swift_beginAccess();
      if (*v24 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      v25 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore);
      swift_beginAccess();
      if (*v25 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      closure #3 in closure #1 in TrackingInfoPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v26 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity);
      swift_beginAccess();
      if (*v26 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      v27 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter);
      swift_beginAccess();
      if (*v27 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v28 = (_QWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps);
      swift_beginAccess();
      if (*v28)
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
      v29 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError);
      swift_beginAccess();
      if (*v29 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      closure #4 in closure #1 in TrackingInfoPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v30 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange);
      swift_beginAccess();
      if (*v30 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      v31 = (_QWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection);
      swift_beginAccess();
      if (*v31)
      {
        lazy protocol witness table accessor for type THSDistanceHysteresis and conformance THSDistanceHysteresis();
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
      }
      v32 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera);
      result = swift_beginAccess();
      if (*v32 != 0.0)
        return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in TrackingInfoPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingPredictionPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TrackingPredictionPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TrackingPredictionPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TrackingPredictionPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TrackingPredictionPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB, type metadata accessor for TrackingPredictionPB, (uint64_t)&protocol conformance descriptor for TrackingPredictionPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TrackingPredictionPB);
}

uint64_t closure #2 in closure #1 in TrackingInfoPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingBuffersPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TrackingBuffersPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TrackingBuffersPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TrackingBuffersPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TrackingBuffersPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB, type metadata accessor for TrackingBuffersPB, (uint64_t)&protocol conformance descriptor for TrackingBuffersPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TrackingBuffersPB);
}

uint64_t closure #3 in closure #1 in TrackingInfoPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #4 in closure #1 in TrackingInfoPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

BOOL closure #1 in static TrackingInfoPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v72;
  char v73;
  int *v74;
  int v75;
  _DWORD *v76;
  int *v77;
  int v78;
  _DWORD *v79;
  float *v80;
  float v81;
  float *v82;
  unsigned __int8 *v83;
  int v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  int v87;
  unsigned __int8 *v88;
  int *v89;
  int v90;
  _DWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  unsigned __int8 *v95;
  int v96;
  unsigned __int8 *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  char v102;
  char v103;
  unsigned __int8 *v104;
  int v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  int v108;
  unsigned __int8 *v109;
  uint64_t v110;
  int *v111;
  int v112;
  uint64_t v113;
  _DWORD *v114;
  unsigned __int8 *v115;
  int v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  int v119;
  unsigned __int8 *v120;
  float *v121;
  float v122;
  float *v123;
  float *v124;
  float v125;
  float *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int (*v132)(uint64_t, uint64_t, uint64_t);
  float *v133;
  float *v134;
  char v135;
  float *v136;
  float v137;
  float *v138;
  unsigned __int8 *v139;
  int v140;
  unsigned __int8 *v141;
  uint64_t *v142;
  uint64_t v143;
  _QWORD *v144;
  float *v145;
  float v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float *v153;
  float *v154;
  char v155;
  float *v156;
  float v157;
  float *v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  float *v165;
  float v166;
  float *v167;
  float v168;
  uint64_t v169;
  char *v170;
  float *v171;
  float *v172;
  uint64_t v173;
  float *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t *v188;
  uint64_t v189;

  v178 = type metadata accessor for Coordinate3DPB(0);
  v175 = *(_QWORD *)(v178 - 8);
  MEMORY[0x24BDAC7A8](v178, v4);
  v6 = (float *)((char *)&v169 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v176, v7);
  v9 = (char *)&v169 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v179 = (uint64_t)&v169 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v172 = (float *)((char *)&v169 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16, v17);
  v173 = (uint64_t)&v169 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v174 = (float *)((char *)&v169 - v21);
  MEMORY[0x24BDAC7A8](v22, v23);
  v177 = (uint64_t)&v169 - v24;
  v186 = type metadata accessor for TrackingBuffersPB(0);
  v184 = *(_QWORD *)(v186 - 8);
  MEMORY[0x24BDAC7A8](v186, v25);
  v180 = (uint64_t *)((char *)&v169 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TrackingBuffersPB?, TrackingBuffersPB?));
  MEMORY[0x24BDAC7A8](v183, v27);
  v187 = (char *)&v169 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingBuffersPB?);
  MEMORY[0x24BDAC7A8](v29, v30);
  v181 = (uint64_t *)((char *)&v169 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v32, v33);
  v185 = (uint64_t)&v169 - v34;
  v189 = type metadata accessor for TrackingPredictionPB(0);
  v35 = *(_QWORD *)(v189 - 8);
  MEMORY[0x24BDAC7A8](v189, v36);
  v182 = (uint64_t *)((char *)&v169 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TrackingPredictionPB?, TrackingPredictionPB?));
  MEMORY[0x24BDAC7A8](v38, v39);
  v41 = (char *)&v169 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingPredictionPB?);
  MEMORY[0x24BDAC7A8](v42, v43);
  v188 = (uint64_t *)((char *)&v169 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v45, v46);
  v48 = (char *)&v169 - v47;
  swift_beginAccess();
  v49 = a1;
  v50 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  if (v50 != *(_QWORD *)(a2 + 16))
    return 0;
  v170 = v9;
  v171 = v6;
  v51 = a2;
  v52 = v49
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v52, (uint64_t)v48, &demangling cache variable for type metadata for TrackingPredictionPB?);
  v53 = v51
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
  swift_beginAccess();
  v54 = (uint64_t)&v41[*(int *)(v38 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v48, (uint64_t)v41, &demangling cache variable for type metadata for TrackingPredictionPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v53, v54, &demangling cache variable for type metadata for TrackingPredictionPB?);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  v56 = v189;
  if (v55((uint64_t)v41, 1, v189) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v48, &demangling cache variable for type metadata for TrackingPredictionPB?);
    v57 = v55(v54, 1, v56);
    v58 = v51;
    v59 = v49;
    if (v57 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for TrackingPredictionPB?);
      goto LABEL_9;
    }
LABEL_7:
    v61 = &demangling cache variable for type metadata for (TrackingPredictionPB?, TrackingPredictionPB?);
LABEL_15:
    outlined destroy of Coordinate3DPB?((uint64_t)v41, v61);
    goto LABEL_16;
  }
  v59 = v49;
  v60 = v188;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v41, (uint64_t)v188, &demangling cache variable for type metadata for TrackingPredictionPB?);
  if (v55(v54, 1, v56) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v48, &demangling cache variable for type metadata for TrackingPredictionPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v60, type metadata accessor for TrackingPredictionPB);
    goto LABEL_7;
  }
  v62 = v182;
  outlined init with take of Matrix2dPB(v54, (uint64_t)v182, type metadata accessor for TrackingPredictionPB);
  swift_retain();
  v58 = v51;
  swift_retain();
  v63 = specialized static TrackingPredictionPB.== infix(_:_:)(v60, v62);
  outlined destroy of Matrix3x3PB((uint64_t)v62, type metadata accessor for TrackingPredictionPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v48, &demangling cache variable for type metadata for TrackingPredictionPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v60, type metadata accessor for TrackingPredictionPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for TrackingPredictionPB?);
  if ((v63 & 1) == 0)
    goto LABEL_16;
LABEL_9:
  v64 = v59
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
  swift_beginAccess();
  v65 = v185;
  outlined init with copy of (Int32, Matrix2dPB)(v64, v185, &demangling cache variable for type metadata for TrackingBuffersPB?);
  v66 = v58
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
  swift_beginAccess();
  v41 = v187;
  v67 = (uint64_t)&v187[*(int *)(v183 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v65, (uint64_t)v187, &demangling cache variable for type metadata for TrackingBuffersPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v66, v67, &demangling cache variable for type metadata for TrackingBuffersPB?);
  v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48);
  v69 = v186;
  if (v68((uint64_t)v41, 1, v186) != 1)
  {
    v70 = v181;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v41, (uint64_t)v181, &demangling cache variable for type metadata for TrackingBuffersPB?);
    if (v68(v67, 1, v69) == 1)
    {
      outlined destroy of Coordinate3DPB?(v65, &demangling cache variable for type metadata for TrackingBuffersPB?);
      outlined destroy of Matrix3x3PB((uint64_t)v70, type metadata accessor for TrackingBuffersPB);
      goto LABEL_14;
    }
    v72 = v180;
    outlined init with take of Matrix2dPB(v67, (uint64_t)v180, type metadata accessor for TrackingBuffersPB);
    v73 = specialized static TrackingBuffersPB.== infix(_:_:)(v70, v72);
    outlined destroy of Matrix3x3PB((uint64_t)v72, type metadata accessor for TrackingBuffersPB);
    outlined destroy of Coordinate3DPB?(v65, &demangling cache variable for type metadata for TrackingBuffersPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v70, type metadata accessor for TrackingBuffersPB);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for TrackingBuffersPB?);
    if ((v73 & 1) != 0)
      goto LABEL_19;
LABEL_16:
    swift_release();
    swift_release();
    return 0;
  }
  outlined destroy of Coordinate3DPB?(v65, &demangling cache variable for type metadata for TrackingBuffersPB?);
  if (v68(v67, 1, v69) != 1)
  {
LABEL_14:
    v61 = &demangling cache variable for type metadata for (TrackingBuffersPB?, TrackingBuffersPB?);
    goto LABEL_15;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for TrackingBuffersPB?);
LABEL_19:
  v74 = (int *)(v59
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter);
  swift_beginAccess();
  v75 = *v74;
  v76 = (_DWORD *)(v58
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter);
  swift_beginAccess();
  if (v75 != *v76)
    goto LABEL_16;
  v77 = (int *)(v59
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter);
  swift_beginAccess();
  v78 = *v77;
  v79 = (_DWORD *)(v58
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter);
  swift_beginAccess();
  if (v78 != *v79)
    goto LABEL_16;
  v80 = (float *)(v59
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius);
  swift_beginAccess();
  v81 = *v80;
  v82 = (float *)(v58
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius);
  swift_beginAccess();
  if (v81 != *v82)
    goto LABEL_16;
  v83 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting);
  swift_beginAccess();
  v84 = *v83;
  v85 = (unsigned __int8 *)(v58
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting);
  swift_beginAccess();
  if (v84 != *v85)
    goto LABEL_16;
  v86 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation);
  swift_beginAccess();
  v87 = *v86;
  v88 = (unsigned __int8 *)(v58
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation);
  swift_beginAccess();
  if (v87 != *v88)
    goto LABEL_16;
  v89 = (int *)(v59
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter);
  swift_beginAccess();
  v90 = *v89;
  v91 = (_DWORD *)(v58
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter);
  swift_beginAccess();
  if (v90 != *v91)
    goto LABEL_16;
  v92 = (uint64_t *)(v59
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras);
  swift_beginAccess();
  v93 = *v92;
  v94 = (uint64_t *)(v58
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras);
  swift_beginAccess();
  if ((specialized static Array<A>.== infix(_:_:)(v93, *v94) & 1) == 0)
    goto LABEL_16;
  v95 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown);
  swift_beginAccess();
  v96 = *v95;
  v97 = (unsigned __int8 *)(v58
                          + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown);
  swift_beginAccess();
  if (v96 != *v97)
    goto LABEL_16;
  v98 = (uint64_t *)(v59
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D);
  swift_beginAccess();
  v99 = *v98;
  v100 = (uint64_t *)(v58
                   + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D);
  swift_beginAccess();
  v101 = *v100;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static Dictionary<>.== infix(_:_:)(v99, v101);
  v103 = v102;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v103 & 1) == 0)
    goto LABEL_16;
  v104 = (unsigned __int8 *)(v59
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft);
  swift_beginAccess();
  v105 = *v104;
  v106 = (unsigned __int8 *)(v58
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft);
  swift_beginAccess();
  if (v105 != *v106)
    goto LABEL_16;
  v107 = (unsigned __int8 *)(v59
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityIsConfident);
  swift_beginAccess();
  v108 = *v107;
  v109 = (unsigned __int8 *)(v58
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityIsConfident);
  swift_beginAccess();
  if (v108 != *v109)
    goto LABEL_16;
  v110 = v59;
  v111 = (int *)(v59
               + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter);
  swift_beginAccess();
  v112 = *v111;
  v113 = v58;
  v114 = (_DWORD *)(v58
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter);
  swift_beginAccess();
  if (v112 != *v114)
    goto LABEL_16;
  v115 = (unsigned __int8 *)(v110
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin);
  swift_beginAccess();
  v116 = *v115;
  v117 = (unsigned __int8 *)(v58
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin);
  swift_beginAccess();
  if (v116 != *v117)
    goto LABEL_16;
  v118 = (unsigned __int8 *)(v110
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou);
  swift_beginAccess();
  v119 = *v118;
  v120 = (unsigned __int8 *)(v58
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou);
  swift_beginAccess();
  if (v119 != *v120)
    goto LABEL_16;
  v121 = (float *)(v110
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore);
  swift_beginAccess();
  v122 = *v121;
  v123 = (float *)(v58
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore);
  swift_beginAccess();
  if (v122 != *v123)
    goto LABEL_16;
  v124 = (float *)(v110
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore);
  swift_beginAccess();
  v125 = *v124;
  v126 = (float *)(v58
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore);
  swift_beginAccess();
  if (v125 != *v126)
    goto LABEL_16;
  v127 = v110
       + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
  swift_beginAccess();
  v128 = v177;
  outlined init with copy of (Int32, Matrix2dPB)(v127, v177, &demangling cache variable for type metadata for Coordinate3DPB?);
  v129 = v58
       + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
  swift_beginAccess();
  v130 = v179;
  v131 = v179 + *(int *)(v176 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v128, v179, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v129, v131, &demangling cache variable for type metadata for Coordinate3DPB?);
  v132 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v175 + 48);
  if (v132(v130, 1, v178) == 1)
  {
    outlined destroy of Coordinate3DPB?(v177, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v132(v131, 1, v178) == 1)
    {
      outlined destroy of Coordinate3DPB?(v179, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v179, (uint64_t)v174, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v132(v131, 1, v178) == 1)
  {
    outlined destroy of Coordinate3DPB?(v177, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v174, type metadata accessor for Coordinate3DPB);
LABEL_40:
    outlined destroy of Coordinate3DPB?(v179, &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
    goto LABEL_16;
  }
  v133 = v171;
  outlined init with take of Matrix2dPB(v131, (uint64_t)v171, type metadata accessor for Coordinate3DPB);
  v134 = v174;
  v135 = specialized static Coordinate3DPB.== infix(_:_:)(v174, v133);
  outlined destroy of Matrix3x3PB((uint64_t)v133, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v177, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v134, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v179, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v135 & 1) == 0)
    goto LABEL_16;
LABEL_42:
  v136 = (float *)(v110
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity);
  swift_beginAccess();
  v137 = *v136;
  v138 = (float *)(v113
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity);
  swift_beginAccess();
  if (v137 != *v138)
    goto LABEL_16;
  v139 = (unsigned __int8 *)(v110
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter);
  swift_beginAccess();
  v140 = *v139;
  v141 = (unsigned __int8 *)(v113
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter);
  swift_beginAccess();
  if (v140 != *v141)
    goto LABEL_16;
  v142 = (uint64_t *)(v110
                   + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps);
  swift_beginAccess();
  v143 = *v142;
  v144 = (_QWORD *)(v113
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps);
  swift_beginAccess();
  if (v143 != *v144)
    goto LABEL_16;
  v145 = (float *)(v110
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError);
  swift_beginAccess();
  v146 = *v145;
  v147 = (float *)(v113
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError);
  swift_beginAccess();
  if (v146 != *v147)
    goto LABEL_16;
  v148 = v110 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
  swift_beginAccess();
  v149 = v173;
  outlined init with copy of (Int32, Matrix2dPB)(v148, v173, &demangling cache variable for type metadata for Coordinate3DPB?);
  v150 = v113 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
  swift_beginAccess();
  v151 = (uint64_t)v170;
  v152 = (uint64_t)&v170[*(int *)(v176 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v149, (uint64_t)v170, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v150, v152, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v132(v151, 1, v178) == 1)
  {
    outlined destroy of Coordinate3DPB?(v173, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v132(v152, 1, v178) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v170, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v170, (uint64_t)v172, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v132(v152, 1, v178) == 1)
  {
    outlined destroy of Coordinate3DPB?(v173, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v172, type metadata accessor for Coordinate3DPB);
LABEL_51:
    outlined destroy of Coordinate3DPB?((uint64_t)v170, &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
    goto LABEL_16;
  }
  v153 = v171;
  outlined init with take of Matrix2dPB(v152, (uint64_t)v171, type metadata accessor for Coordinate3DPB);
  v154 = v172;
  v155 = specialized static Coordinate3DPB.== infix(_:_:)(v172, v153);
  outlined destroy of Matrix3x3PB((uint64_t)v153, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v173, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v154, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v170, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v155 & 1) == 0)
    goto LABEL_16;
LABEL_53:
  v156 = (float *)(v110
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange);
  swift_beginAccess();
  v157 = *v156;
  v158 = (float *)(v113
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange);
  swift_beginAccess();
  if (v157 != *v158)
    goto LABEL_16;
  v159 = (uint64_t *)(v110
                   + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection);
  swift_beginAccess();
  v160 = *v159;
  v161 = *((unsigned __int8 *)v159 + 8);
  v162 = (uint64_t *)(v113
                   + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection);
  swift_beginAccess();
  v163 = *v162;
  v164 = v160 != 0;
  if (!v161)
    v164 = v160;
  if (*((_BYTE *)v162 + 8) == 1)
  {
    if (v163)
    {
      if (v164 != 1)
        goto LABEL_16;
    }
    else if (v164)
    {
      goto LABEL_16;
    }
  }
  else if (v164 != v163)
  {
    goto LABEL_16;
  }
  v165 = (float *)(v110
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera);
  swift_beginAccess();
  v166 = *v165;
  swift_release();
  v167 = (float *)(v113
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera);
  swift_beginAccess();
  v168 = *v167;
  swift_release();
  return v166 == v168;
}

uint64_t protocol witness for Message.init() in conformance TrackingInfoPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static TrackingInfoPB._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingInfoPB()
{
  return 0x676E696B63617254;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingInfoPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TrackingInfoPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingInfoPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TrackingInfoPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingInfoPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingInfoPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingInfoPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingInfoPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingInfoPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
  return Message.hash(into:)();
}

uint64_t TrackingInfosPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for TrackingInfoPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t TrackingInfosPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for TrackingInfoPB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for TrackingInfosPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance TrackingInfosPB@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = 0;
  a1[1] = v1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingInfosPB()
{
  return 0x676E696B63617254;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingInfosPB()
{
  return TrackingInfosPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingInfosPB()
{
  return TrackingInfosPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingInfosPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingInfosPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingInfosPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingInfosPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingInfosPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in TrackingInfosPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
}

uint64_t base witness table accessor for Message in TrackingInfosPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
}

uint64_t base witness table accessor for Hashable in TrackingInfosPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
}

uint64_t base witness table accessor for Equatable in TrackingInfoPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
}

uint64_t type metadata accessor for TrackingInfoPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingInfoPB);
}

uint64_t base witness table accessor for Message in TrackingInfoPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
}

uint64_t base witness table accessor for Hashable in TrackingInfoPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingInfoPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfoPB and conformance TrackingInfoPB, type metadata accessor for TrackingInfoPB, (uint64_t)&protocol conformance descriptor for TrackingInfoPB);
}

uint64_t base witness table accessor for Equatable in TrackingBuffersPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB, type metadata accessor for TrackingBuffersPB, (uint64_t)&protocol conformance descriptor for TrackingBuffersPB);
}

uint64_t base witness table accessor for Message in TrackingBuffersPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB, type metadata accessor for TrackingBuffersPB, (uint64_t)&protocol conformance descriptor for TrackingBuffersPB);
}

uint64_t base witness table accessor for Hashable in TrackingBuffersPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB, type metadata accessor for TrackingBuffersPB, (uint64_t)&protocol conformance descriptor for TrackingBuffersPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingBuffersPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB, type metadata accessor for TrackingBuffersPB, (uint64_t)&protocol conformance descriptor for TrackingBuffersPB);
}

uint64_t base witness table accessor for Equatable in FeatureVectorPerFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
}

uint64_t base witness table accessor for Message in FeatureVectorPerFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
}

uint64_t base witness table accessor for Hashable in FeatureVectorPerFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FeatureVectorPerFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPerFramePB and conformance FeatureVectorPerFramePB, type metadata accessor for FeatureVectorPerFramePB, (uint64_t)&protocol conformance descriptor for FeatureVectorPerFramePB);
}

uint64_t base witness table accessor for Equatable in FeatureVectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB);
}

uint64_t type metadata accessor for FeatureVectorPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for FeatureVectorPB);
}

uint64_t base witness table accessor for Message in FeatureVectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB);
}

uint64_t base witness table accessor for Hashable in FeatureVectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FeatureVectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FeatureVectorPB and conformance FeatureVectorPB, type metadata accessor for FeatureVectorPB, (uint64_t)&protocol conformance descriptor for FeatureVectorPB);
}

uint64_t base witness table accessor for Equatable in TrackingPredictionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB, type metadata accessor for TrackingPredictionPB, (uint64_t)&protocol conformance descriptor for TrackingPredictionPB);
}

uint64_t base witness table accessor for Message in TrackingPredictionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB, type metadata accessor for TrackingPredictionPB, (uint64_t)&protocol conformance descriptor for TrackingPredictionPB);
}

uint64_t base witness table accessor for Hashable in TrackingPredictionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB, type metadata accessor for TrackingPredictionPB, (uint64_t)&protocol conformance descriptor for TrackingPredictionPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingPredictionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB, type metadata accessor for TrackingPredictionPB, (uint64_t)&protocol conformance descriptor for TrackingPredictionPB);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in THSDistanceHysteresis()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [THSDistanceHysteresis] and conformance [A], &demangling cache variable for type metadata for [THSDistanceHysteresis]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TrackingCycles()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [TrackingCycles] and conformance [A], &demangling cache variable for type metadata for [TrackingCycles]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingInfosPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
}

uint64_t specialized static FeatureVectorPerFramePB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v13 = type metadata accessor for FeatureVectorPerFramePB(0);
    v14 = (char *)a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 20), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static TrackingBuffersPB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2)
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0)
  {
    v13 = type metadata accessor for TrackingBuffersPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 28), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static TrackingInfosPB.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *(_QWORD *)a2 && (specialized static Array<A>.== infix(_:_:)(a1[1], *((_QWORD *)a2 + 1)) & 1) != 0)
  {
    v13 = type metadata accessor for TrackingInfosPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, &a2[*(int *)(v13 + 24)], v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static FeatureVectorPB.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 == v13 && specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]))
  {
    v14 = type metadata accessor for FeatureVectorPB(0);
    v15 = (char *)a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, (char *)a2 + *(int *)(v14 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static TrackingInfoPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for TrackingInfoPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static TrackingInfoPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        v16))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static TrackingPredictionPB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  char *v63;
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  uint64_t *v67;
  uint64_t *v68;
  char v69;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;

  v85 = a1;
  v86 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v75 = *(_QWORD *)(v2 - 8);
  v76 = v2;
  MEMORY[0x24BDAC7A8](v2, v3);
  v74 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v73 = (char *)&v71 - v7;
  v82 = type metadata accessor for FeatureVectorPerFramePB(0);
  v79 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82, v8);
  v72 = (uint64_t *)((char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FeatureVectorPerFramePB?, FeatureVectorPerFramePB?));
  MEMORY[0x24BDAC7A8](v78, v10);
  v83 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v77 = (uint64_t *)((char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15, v16);
  v80 = (uint64_t)&v71 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v81 = (uint64_t)&v71 - v20;
  v21 = type metadata accessor for Coordinate3DPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21, v23);
  v25 = (float *)((char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = (float *)((char *)&v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v34, v35);
  v37 = (char *)&v71 - v36;
  MEMORY[0x24BDAC7A8](v38, v39);
  v41 = (char *)&v71 - v40;
  v42 = type metadata accessor for TrackingPredictionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v85 + *(int *)(v42 + 24), (uint64_t)v41, &demangling cache variable for type metadata for Coordinate3DPB?);
  v84 = v42;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v86 + *(int *)(v42 + 24), (uint64_t)v37, &demangling cache variable for type metadata for Coordinate3DPB?);
  v43 = (uint64_t)&v29[*(int *)(v26 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v41, (uint64_t)v29, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v37, v43, &demangling cache variable for type metadata for Coordinate3DPB?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v44((uint64_t)v29, 1, v21) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v44(v43, 1, v21) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_9;
    }
LABEL_6:
    v45 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v46 = (uint64_t)v29;
    goto LABEL_7;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v33, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v44(v43, 1, v21) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for Coordinate3DPB);
    goto LABEL_6;
  }
  outlined init with take of Matrix2dPB(v43, (uint64_t)v25, type metadata accessor for Coordinate3DPB);
  v47 = specialized static Coordinate3DPB.== infix(_:_:)(v33, v25);
  outlined destroy of Matrix3x3PB((uint64_t)v25, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v47 & 1) == 0)
    goto LABEL_19;
LABEL_9:
  v49 = v85;
  v48 = v86;
  if ((specialized static Array<A>.== infix(_:_:)(*v85, *v86) & 1) == 0)
    goto LABEL_19;
  v50 = v84;
  v51 = v81;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v49 + *(int *)(v84 + 28), v81, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  v52 = v80;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v48 + *(int *)(v50 + 28), v80, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  v53 = v83;
  v54 = v83 + *(int *)(v78 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v51, v83, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  outlined init with copy of (Int32, Matrix2dPB)(v52, v54, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  v56 = v82;
  if (v55(v53, 1, v82) != 1)
  {
    v67 = v77;
    outlined init with copy of (Int32, Matrix2dPB)(v53, (uint64_t)v77, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
    if (v55(v54, 1, v56) == 1)
    {
      outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
      outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
      outlined destroy of Matrix3x3PB((uint64_t)v67, type metadata accessor for FeatureVectorPerFramePB);
      goto LABEL_16;
    }
    v68 = v72;
    outlined init with take of Matrix2dPB(v54, (uint64_t)v72, type metadata accessor for FeatureVectorPerFramePB);
    if ((specialized static Array<A>.== infix(_:_:)(*v67, *v68) & 1) != 0)
    {
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v57 = v76;
      v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v68, type metadata accessor for FeatureVectorPerFramePB);
      outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
      outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
      outlined destroy of Matrix3x3PB((uint64_t)v67, type metadata accessor for FeatureVectorPerFramePB);
      outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
      if ((v69 & 1) != 0)
        goto LABEL_13;
LABEL_19:
      v65 = 0;
      return v65 & 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v68, type metadata accessor for FeatureVectorPerFramePB);
    outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
    outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v67, type metadata accessor for FeatureVectorPerFramePB);
    v46 = v53;
    v45 = &demangling cache variable for type metadata for FeatureVectorPerFramePB?;
LABEL_7:
    outlined destroy of Coordinate3DPB?(v46, v45);
    goto LABEL_19;
  }
  outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  if (v55(v54, 1, v56) != 1)
  {
LABEL_16:
    v45 = &demangling cache variable for type metadata for (FeatureVectorPerFramePB?, FeatureVectorPerFramePB?);
    v46 = v53;
    goto LABEL_7;
  }
  outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for FeatureVectorPerFramePB?);
  v57 = v76;
LABEL_13:
  v58 = v84;
  v59 = (char *)v49 + *(int *)(v84 + 20);
  v60 = v75;
  v61 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  v62 = v73;
  v61(v73, v59, v57);
  v63 = (char *)v48 + *(int *)(v58 + 20);
  v64 = v74;
  v61(v74, v63, v57);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  v66 = *(void (**)(char *, uint64_t))(v60 + 8);
  v66(v64, v57);
  v66(v62, v57);
  return v65 & 1;
}

unint64_t lazy protocol witness table accessor for type TrackingCycles and conformance TrackingCycles()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles;
  if (!lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingCycles, &type metadata for TrackingCycles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles;
  if (!lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingCycles, &type metadata for TrackingCycles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles;
  if (!lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingCycles, &type metadata for TrackingCycles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles;
  if (!lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingCycles, &type metadata for TrackingCycles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingCycles and conformance TrackingCycles);
  }
  return result;
}

uint64_t specialized TrackingInfoPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  int *v32;
  int v33;
  _DWORD *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _DWORD *v53;
  _DWORD *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  int *v59;
  int v60;
  _DWORD *v61;
  int *v62;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  _DWORD *v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  int *v76;
  int v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  _DWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int v88;
  uint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  _BYTE *v95;
  _BYTE *v96;
  _DWORD *v97;
  _QWORD *v98;
  _BYTE *v99;
  _QWORD *v100;
  _BYTE *v101;
  _BYTE *v102;
  _DWORD *v103;
  _BYTE *v104;
  _BYTE *v105;
  _DWORD *v106;
  _DWORD *v107;
  uint64_t v108;
  _DWORD *v109;
  _BYTE *v110;
  _QWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v116 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingBuffersPB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v93 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingPredictionPB?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  v13 = v1
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
  v14 = type metadata accessor for TrackingPredictionPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
  v16 = type metadata accessor for TrackingBuffersPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v91 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter) = 0;
  v92 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter) = 0;
  v94 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius);
  *(_DWORD *)(v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius) = 0;
  v95 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting) = 0;
  v96 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation) = 0;
  v97 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter) = 0;
  v98 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras);
  v17 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras) = MEMORY[0x24BEE4AF8];
  v99 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown) = 0;
  v18 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D);
  v100 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D);
  *v18 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v101 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft) = 0;
  v102 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityIsConfident);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityIsConfident) = 0;
  v103 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter) = 0;
  v104 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin) = 0;
  v105 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou) = 0;
  v106 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore) = 0;
  v107 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore) = 0;
  v19 = v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
  v108 = v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
  v20 = type metadata accessor for Coordinate3DPB(0);
  v21 = *(void (**)(void))(*(_QWORD *)(v20 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21)(v19, 1, 1, v20);
  v109 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity) = 0;
  v110 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter) = 0;
  v111 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps) = 0;
  v112 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError) = 0;
  v113 = v1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
  v21();
  v114 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange) = 0;
  v22 = v1
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection;
  v115 = v1
       + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  v23 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera) = 0;
  swift_beginAccess();
  v24 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v24;
  v25 = a1
      + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingPrediction;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v25, (uint64_t)v12, &demangling cache variable for type metadata for TrackingPredictionPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v12, v13, &demangling cache variable for type metadata for TrackingPredictionPB?);
  swift_endAccess();
  v26 = a1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__trackingBuffers;
  swift_beginAccess();
  v27 = v93;
  outlined init with copy of (Int32, Matrix2dPB)(v26, v93, &demangling cache variable for type metadata for TrackingBuffersPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v27, v15, &demangling cache variable for type metadata for TrackingBuffersPB?);
  swift_endAccess();
  v28 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityUpdateCounter);
  swift_beginAccess();
  LODWORD(v28) = *v28;
  v29 = v91;
  swift_beginAccess();
  *v29 = (_DWORD)v28;
  v30 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__totalUpdateCounter);
  swift_beginAccess();
  LODWORD(v30) = *v30;
  v31 = v92;
  swift_beginAccess();
  *v31 = (_DWORD)v30;
  v32 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handRadius);
  swift_beginAccess();
  v33 = *v32;
  v34 = v94;
  swift_beginAccess();
  *v34 = v33;
  v35 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isDrifting);
  swift_beginAccess();
  LOBYTE(v35) = *v35;
  v36 = v95;
  swift_beginAccess();
  *v36 = (_BYTE)v35;
  v37 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__requiresAssociation);
  swift_beginAccess();
  LOBYTE(v37) = *v37;
  v38 = v96;
  swift_beginAccess();
  *v38 = (_BYTE)v37;
  v39 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__consecutiveConfidentPoseCounter);
  swift_beginAccess();
  LODWORD(v39) = *v39;
  v40 = v97;
  swift_beginAccess();
  *v40 = (_DWORD)v39;
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__poseCameras);
  swift_beginAccess();
  v42 = *v41;
  v43 = v98;
  swift_beginAccess();
  *v43 = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__pinchDown);
  swift_beginAccess();
  LOBYTE(v44) = *v44;
  v45 = v99;
  swift_beginAccess();
  *v45 = (_BYTE)v44;
  v46 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__arvinoJoints2D);
  swift_beginAccess();
  v47 = *v46;
  v48 = v100;
  swift_beginAccess();
  *v48 = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__handIsLeft);
  swift_beginAccess();
  LOBYTE(v49) = *v49;
  v50 = v101;
  swift_beginAccess();
  *v50 = (_BYTE)v49;
  v51 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__chiralityIsConfident);
  swift_beginAccess();
  LOBYTE(v51) = *v51;
  v52 = v102;
  swift_beginAccess();
  *v52 = (_BYTE)v51;
  v53 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__detectionCoolingPeriodCounter);
  swift_beginAccess();
  LODWORD(v53) = *v53;
  v54 = v103;
  swift_beginAccess();
  *v54 = (_DWORD)v53;
  v55 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isOnDriftMargin);
  swift_beginAccess();
  LOBYTE(v55) = *v55;
  v56 = v104;
  swift_beginAccess();
  *v56 = (_BYTE)v55;
  v57 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__isNulllIou);
  swift_beginAccess();
  LOBYTE(v57) = *v57;
  v58 = v105;
  swift_beginAccess();
  *v58 = (_BYTE)v57;
  v59 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgDriftScore);
  swift_beginAccess();
  v60 = *v59;
  v61 = v106;
  swift_beginAccess();
  *v61 = v60;
  v62 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgGhostHandScore);
  swift_beginAccess();
  v63 = *v62;
  v64 = v107;
  swift_beginAccess();
  *v64 = v63;
  v65 = a1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevHandCenter;
  swift_beginAccess();
  v66 = v116;
  outlined init with copy of (Int32, Matrix2dPB)(v65, v116, &demangling cache variable for type metadata for Coordinate3DPB?);
  v67 = v108;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v66, v67, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v68 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__avgVelocity);
  swift_beginAccess();
  v69 = *v68;
  v70 = v109;
  swift_beginAccess();
  *v70 = v69;
  v71 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__initVelocityFilter);
  swift_beginAccess();
  LOBYTE(v71) = *v71;
  v72 = v110;
  swift_beginAccess();
  *v72 = (_BYTE)v71;
  v73 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__previousTimestamps);
  swift_beginAccess();
  v74 = *v73;
  v75 = v111;
  swift_beginAccess();
  *v75 = v74;
  v76 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__predictionError);
  swift_beginAccess();
  v77 = *v76;
  v78 = v112;
  swift_beginAccess();
  *v78 = v77;
  v79 = a1 + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__prevVelocity;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v79, v66, &demangling cache variable for type metadata for Coordinate3DPB?);
  v80 = v113;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v66, v80, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v81 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__absVelocityChange);
  swift_beginAccess();
  v82 = *v81;
  v83 = v114;
  swift_beginAccess();
  *v83 = v82;
  v84 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToCameraHysDirection);
  swift_beginAccess();
  v85 = *v84;
  LOBYTE(v84) = *((_BYTE *)v84 + 8);
  v86 = v115;
  swift_beginAccess();
  *(_QWORD *)v86 = v85;
  *(_BYTE *)(v86 + 8) = (_BYTE)v84;
  v87 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14TrackingInfoPBP33_063F06BF24EBBDC76C6F2871301FEA9613_StorageClass__distanceToDcamera);
  swift_beginAccess();
  v88 = *v87;
  swift_beginAccess();
  *v23 = v88;
  return v1;
}

uint64_t getEnumTagSinglePayload for TrackingInfoPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D89A624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingInfoPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D89A6AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

ValueMetadata *type metadata accessor for TrackingCycles()
{
  return &type metadata for TrackingCycles;
}

uint64_t getEnumTagSinglePayload for FeatureVectorPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D89A740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FeatureVectorPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D89A7C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for FeatureVectorPB()
{
  return type metadata completion function for TrackingFAInternalDataPB();
}

uint64_t PinchModelHandInputPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 3:
          closure #1 in ImageExpirationEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PinchModelHandInputPB, type metadata accessor for Coordinate3DPB, &lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 5:
          closure #5 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PinchModelHandInputPB, type metadata accessor for HandPosePB, &lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
          break;
        case 6:
          closure #6 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PinchModelHandInputPB, type metadata accessor for ImageCalibrationDataPB, (unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PinchModelHandInputPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)v3 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    if (*(float *)(v3 + 8) == 0.0
      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v4))
    {
      result = closure #1 in PinchModelHandInputPB.traverse<A>(visitor:)(v3, a1, a2, a3);
      if (!v4)
      {
        if (*(_BYTE *)(v3 + 12) == 1)
          dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
        closure #2 in PinchModelHandInputPB.traverse<A>(visitor:)(v3, a1, a2, a3);
        closure #3 in PinchModelHandInputPB.traverse<A>(visitor:)(v3, a1, a2, a3);
        type metadata accessor for PinchModelHandInputPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in PinchModelHandInputPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchModelHandInputPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #2 in PinchModelHandInputPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandPosePB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchModelHandInputPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 36), (uint64_t)v8, &demangling cache variable for type metadata for HandPosePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandPosePB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandPosePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandPosePB);
}

uint64_t closure #3 in PinchModelHandInputPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageCalibrationDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchModelHandInputPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
}

uint64_t protocol witness for Message.init() in conformance PinchModelHandInputPB@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  UnknownStorage.init()();
  v4 = a2 + a1[8];
  v5 = type metadata accessor for Coordinate3DPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[9];
  v7 = type metadata accessor for HandPosePB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[10];
  v9 = type metadata accessor for ImageCalibrationDataPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelHandInputPB()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelHandInputPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelHandInputPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchModelHandInputPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelHandInputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelHandInputPB and conformance PinchModelHandInputPB, type metadata accessor for PinchModelHandInputPB, (uint64_t)&protocol conformance descriptor for PinchModelHandInputPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelHandInputPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelHandInputPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelHandInputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelHandInputPB and conformance PinchModelHandInputPB, type metadata accessor for PinchModelHandInputPB, (uint64_t)&protocol conformance descriptor for PinchModelHandInputPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelHandInputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelHandInputPB and conformance PinchModelHandInputPB, type metadata accessor for PinchModelHandInputPB, (uint64_t)&protocol conformance descriptor for PinchModelHandInputPB);
  return Message.hash(into:)();
}

uint64_t PinchModelInternalStatesPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          break;
        case 1:
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PinchModelInternalStatesPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 16) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PinchModelInternalStatesPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PinchModelInternalStatesPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = v1;
  *(_BYTE *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelInternalStatesPB()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelInternalStatesPB()
{
  return PinchModelInternalStatesPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelInternalStatesPB()
{
  return PinchModelInternalStatesPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelInternalStatesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, type metadata accessor for PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelInternalStatesPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelInternalStatesPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelInternalStatesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, type metadata accessor for PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelInternalStatesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, type metadata accessor for PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
  return Message.hash(into:)();
}

uint64_t PinchModelPostprocessedOutputPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PinchModelPostprocessedOutputPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 8) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (*(float *)(v0 + 12) == 0.0
        || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        if (*(float *)(v0 + 16) == 0.0
          || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
        {
          if (*(float *)(v0 + 20) == 0.0
            || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PinchModelPostprocessedOutputPB(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PinchModelPostprocessedOutputPB@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelPostprocessedOutputPB()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelPostprocessedOutputPB()
{
  return PinchModelPostprocessedOutputPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelPostprocessedOutputPB()
{
  return PinchModelPostprocessedOutputPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelPostprocessedOutputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, type metadata accessor for PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelPostprocessedOutputPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelPostprocessedOutputPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelPostprocessedOutputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, type metadata accessor for PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelPostprocessedOutputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, type metadata accessor for PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
  return Message.hash(into:)();
}

uint64_t PinchModelFrameIOPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          closure #1 in ImageExpirationEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PinchModelFrameIOPB, type metadata accessor for ImageCalibrationDataPB, (unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
          break;
        case 3:
          closure #3 in PinchModelFrameIOPB.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in PinchModelFrameIOPB.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PinchModelFrameIOPB, type metadata accessor for PinchModelPostprocessedOutputPB, &lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
          break;
        case 6:
          closure #6 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for PinchModelFrameIOPB, type metadata accessor for PinchModelInternalStatesPB, &lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in PinchModelFrameIOPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for ProtobufBytes();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ProtobufBytes and conformance ProtobufBytes, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE50], MEMORY[0x24BE5BE48]);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t closure #4 in PinchModelFrameIOPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for ProtobufBytes();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ProtobufBytes and conformance ProtobufBytes, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE50], MEMORY[0x24BE5BE48]);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t closure #5 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #6 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t PinchModelFrameIOPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in PinchModelFrameIOPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      if (*(_QWORD *)(v3[1] + 16))
      {
        type metadata accessor for ProtobufString();
        type metadata accessor for ProtobufBytes();
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ProtobufBytes and conformance ProtobufBytes, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE50], MEMORY[0x24BE5BE48]);
        dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
      }
      if (*(_QWORD *)(v3[2] + 16))
      {
        type metadata accessor for ProtobufString();
        type metadata accessor for ProtobufBytes();
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ProtobufBytes and conformance ProtobufBytes, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE50], MEMORY[0x24BE5BE48]);
        dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
      }
      closure #2 in PinchModelFrameIOPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      closure #3 in PinchModelFrameIOPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      type metadata accessor for PinchModelFrameIOPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in PinchModelFrameIOPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageCalibrationDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchModelFrameIOPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
}

uint64_t closure #2 in PinchModelFrameIOPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchModelFrameIOPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 36), (uint64_t)v8, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PinchModelPostprocessedOutputPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, type metadata accessor for PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchModelPostprocessedOutputPB);
}

uint64_t closure #3 in PinchModelFrameIOPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchModelInternalStatesPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchModelFrameIOPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PinchModelInternalStatesPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, type metadata accessor for PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchModelInternalStatesPB);
}

uint64_t protocol witness for Message.init() in conformance PinchModelFrameIOPB@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  *a2 = 0;
  v4 = MEMORY[0x24BEE4AF8];
  a2[1] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a2[2] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  UnknownStorage.init()();
  v5 = (char *)a2 + a1[8];
  v6 = type metadata accessor for ImageCalibrationDataPB(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (char *)a2 + a1[9];
  v8 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (char *)a2 + a1[10];
  v10 = type metadata accessor for PinchModelInternalStatesPB(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelFrameIOPB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelFrameIOPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchModelFrameIOPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelFrameIOPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchModelFrameIOPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelFrameIOPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB, type metadata accessor for PinchModelFrameIOPB, (uint64_t)&protocol conformance descriptor for PinchModelFrameIOPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelFrameIOPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelFrameIOPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelFrameIOPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB, type metadata accessor for PinchModelFrameIOPB, (uint64_t)&protocol conformance descriptor for PinchModelFrameIOPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelFrameIOPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB, type metadata accessor for PinchModelFrameIOPB, (uint64_t)&protocol conformance descriptor for PinchModelFrameIOPB);
  return Message.hash(into:)();
}

uint64_t PinchModelFramePB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE v26[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelFrameIOPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataPB?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v1 + 16) = 0;
  v12 = v1
      + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__handsKitInput;
  v13 = type metadata accessor for HandsKitDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v1
      + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__leftHandFrameData;
  v15 = type metadata accessor for PinchModelFrameIOPB(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v17 = v1
      + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData;
  v16(v1+ OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData, 1, 1, v15);
  v18 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__enabledCameras);
  *v18 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v19;
  v20 = a1
      + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__handsKitInput;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v20, (uint64_t)v11, &demangling cache variable for type metadata for HandsKitDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v11, v12, &demangling cache variable for type metadata for HandsKitDataPB?);
  swift_endAccess();
  v21 = a1
      + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__leftHandFrameData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v21, (uint64_t)v7, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v7, v14, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
  swift_endAccess();
  v22 = a1
      + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v22, (uint64_t)v7, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v7, v17, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
  swift_endAccess();
  v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__enabledCameras);
  swift_beginAccess();
  v24 = *v23;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *v18 = v24;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t PinchModelFramePB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__handsKitInput, &demangling cache variable for type metadata for HandsKitDataPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__leftHandFrameData, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PinchModelFramePB._StorageClass()
{
  return type metadata accessor for PinchModelFramePB._StorageClass(0);
}

uint64_t type metadata accessor for PinchModelFramePB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelFramePB._StorageClass);
}

void type metadata completion function for PinchModelFramePB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandsKitDataPB?, (void (*)(uint64_t))type metadata accessor for HandsKitDataPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchModelFrameIOPB?, (void (*)(uint64_t))type metadata accessor for PinchModelFrameIOPB);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PinchModelFrameIOPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelFrameIOPB);
}

uint64_t *initializeBufferWithCopyOfBuffer for PinchModelFrameIOPB(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    v8 = a3[7];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[8];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for ImageCalibrationDataPB(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      *(_QWORD *)&v14[*(int *)(v16 + 20)] = *(_QWORD *)&v15[*(int *)(v16 + 20)];
      v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56);
      swift_retain();
      v20(v14, 0, 1, v16);
    }
    v21 = a3[9];
    v22 = (uint64_t *)((char *)v4 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *v22 = *v23;
      *((_BYTE *)v22 + 8) = *((_BYTE *)v23 + 8);
      *(_QWORD *)((char *)v22 + 12) = *(_QWORD *)((char *)v23 + 12);
      *((_DWORD *)v22 + 5) = *((_DWORD *)v23 + 5);
      v27 = *(int *)(v24 + 36);
      v28 = (char *)v22 + v27;
      v29 = (char *)v23 + v27;
      swift_bridgeObjectRetain();
      v12(v28, v29, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v30 = a3[10];
    v31 = (uint64_t *)((char *)v4 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    v33 = type metadata accessor for PinchModelInternalStatesPB(0);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v36 = v32[1];
      *v31 = *v32;
      v31[1] = v36;
      *((_BYTE *)v31 + 16) = *((_BYTE *)v32 + 16);
      v37 = *(int *)(v33 + 28);
      v38 = (char *)v31 + v37;
      v39 = (char *)v32 + v37;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v38, v39, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  return v4;
}

uint64_t type metadata accessor for PinchModelPostprocessedOutputPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelPostprocessedOutputPB);
}

uint64_t type metadata accessor for PinchModelInternalStatesPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelInternalStatesPB);
}

uint64_t destroy for PinchModelFrameIOPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[8];
  v7 = type metadata accessor for ImageCalibrationDataPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v13(v6, v5);
    swift_release();
  }
  v8 = a1 + a2[9];
  v9 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    v13(v8 + *(int *)(v9 + 36), v5);
  }
  v10 = a1 + a2[10];
  v11 = type metadata accessor for PinchModelInternalStatesPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v10 + *(int *)(v11 + 28), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for PinchModelFrameIOPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[8];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ImageCalibrationDataPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    *(_QWORD *)&v13[*(int *)(v15 + 20)] = *(_QWORD *)&v14[*(int *)(v15 + 20)];
    v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
    swift_retain();
    v18(v13, 0, 1, v15);
  }
  v19 = a3[9];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *v20 = *v21;
    *((_BYTE *)v20 + 8) = *((_BYTE *)v21 + 8);
    *(_QWORD *)((char *)v20 + 12) = *(_QWORD *)((char *)v21 + 12);
    *((_DWORD *)v20 + 5) = *((_DWORD *)v21 + 5);
    v25 = *(int *)(v22 + 36);
    v26 = (char *)v20 + v25;
    v27 = (char *)v21 + v25;
    swift_bridgeObjectRetain();
    v11(v26, v27, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v28 = a3[10];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = type metadata accessor for PinchModelInternalStatesPB(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v34 = v30[1];
    *v29 = *v30;
    v29[1] = v34;
    *((_BYTE *)v29 + 16) = *((_BYTE *)v30 + 16);
    v35 = *(int *)(v31 + 28);
    v36 = (char *)v29 + v35;
    v37 = (char *)v30 + v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v36, v37, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

_QWORD *assignWithCopy for PinchModelFrameIOPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(uint64_t, char *, uint64_t);
  uint64_t v45;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v9 - 8);
  v47 = *(void (**)(char *, char *, uint64_t))(v48 + 24);
  v47(v7, v8, v9);
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ImageCalibrationDataPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v11, v12, v9);
      *(_QWORD *)&v11[*(int *)(v13 + 20)] = *(_QWORD *)&v12[*(int *)(v13 + 20)];
      v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
      swift_retain();
      v18(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for ImageCalibrationDataPB);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v47(v11, v12, v9);
  *(_QWORD *)&v11[*(int *)(v13 + 20)] = *(_QWORD *)&v12[*(int *)(v13 + 20)];
  swift_retain();
  swift_release();
LABEL_7:
  v20 = a3[9];
  v21 = (uint64_t)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25((uint64_t)v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      *(_DWORD *)(v21 + 12) = *((_DWORD *)v22 + 3);
      *(_DWORD *)(v21 + 16) = *((_DWORD *)v22 + 4);
      *(_DWORD *)(v21 + 20) = *((_DWORD *)v22 + 5);
      v28 = *(int *)(v23 + 36);
      v29 = v21 + v28;
      v30 = &v22[v28];
      v31 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 16);
      swift_bridgeObjectRetain();
      v31(v29, v30, v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    outlined destroy of Matrix3x3PB(v21, type metadata accessor for PinchModelPostprocessedOutputPB);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
    memcpy((void *)v21, v22, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v21 + 8) = v22[8];
  *(_DWORD *)(v21 + 12) = *((_DWORD *)v22 + 3);
  *(_DWORD *)(v21 + 16) = *((_DWORD *)v22 + 4);
  *(_DWORD *)(v21 + 20) = *((_DWORD *)v22 + 5);
  v47((char *)(v21 + *(int *)(v23 + 36)), &v22[*(int *)(v23 + 36)], v9);
LABEL_13:
  v33 = a3[10];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for PinchModelInternalStatesPB(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38((uint64_t)v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v34 + 8) = *((_QWORD *)v35 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v34 + 16) = v35[16];
      v47((char *)(v34 + *(int *)(v36 + 28)), &v35[*(int *)(v36 + 28)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v34, type metadata accessor for PinchModelInternalStatesPB);
    goto LABEL_18;
  }
  if (v40)
  {
LABEL_18:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = *((_QWORD *)v35 + 1);
  *(_BYTE *)(v34 + 16) = v35[16];
  v41 = *(int *)(v36 + 28);
  v42 = v34 + v41;
  v43 = &v35[v41];
  v44 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v44(v42, v43, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  return a1;
}

uint64_t initializeWithTake for PinchModelFrameIOPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for ImageCalibrationDataPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *((_BYTE *)v18 + 8) = *((_BYTE *)v19 + 8);
    *(_QWORD *)((char *)v18 + 12) = *(_QWORD *)((char *)v19 + 12);
    *((_DWORD *)v18 + 5) = *((_DWORD *)v19 + 5);
    v10((uint64_t)v18 + *(int *)(v20 + 36), (uint64_t)v19 + *(int *)(v20 + 36), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = a3[10];
  v24 = (_BYTE *)(a1 + v23);
  v25 = (_BYTE *)(a2 + v23);
  v26 = type metadata accessor for PinchModelInternalStatesPB(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
    v24[16] = v25[16];
    v10((uint64_t)&v24[*(int *)(v26 + 28)], (uint64_t)&v25[*(int *)(v26 + 28)], v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

_QWORD *assignWithTake for PinchModelFrameIOPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_BYTE *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v40 = *(_QWORD *)(v10 - 8);
  v39 = *(void (**)(char *, char *, uint64_t))(v40 + 40);
  v39(v8, v9, v10);
  v11 = a3[8];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for ImageCalibrationDataPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v12, v13, v10);
      *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for ImageCalibrationDataPB);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v39(v12, v13, v10);
  *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
  swift_release();
LABEL_7:
  v20 = a3[9];
  v21 = (uint64_t)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25((uint64_t)v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      *(_QWORD *)(v21 + 12) = *(_QWORD *)(v22 + 12);
      *(_DWORD *)(v21 + 20) = *((_DWORD *)v22 + 5);
      (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v21 + *(int *)(v23 + 36), &v22[*(int *)(v23 + 36)], v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    outlined destroy of Matrix3x3PB(v21, type metadata accessor for PinchModelPostprocessedOutputPB);
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
    memcpy((void *)v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v21 + 8) = v22[8];
  *(_QWORD *)(v21 + 12) = *(_QWORD *)(v22 + 12);
  *(_DWORD *)(v21 + 20) = *((_DWORD *)v22 + 5);
  v39((char *)(v21 + *(int *)(v23 + 36)), &v22[*(int *)(v23 + 36)], v10);
LABEL_13:
  v29 = a3[10];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for PinchModelInternalStatesPB(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      *(_QWORD *)v30 = *(_QWORD *)v31;
      swift_bridgeObjectRelease();
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      swift_bridgeObjectRelease();
      v30[16] = v31[16];
      v39(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v10);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v30, type metadata accessor for PinchModelInternalStatesPB);
    goto LABEL_18;
  }
  if (v36)
  {
LABEL_18:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v30 = *(_OWORD *)v31;
  v30[16] = v31[16];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v40 + 32))(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchModelFrameIOPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D89E630(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[9];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PinchModelFrameIOPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D89E730(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[9];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PinchModelFrameIOPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ImageCalibrationDataPB?, (void (*)(uint64_t))type metadata accessor for ImageCalibrationDataPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchModelPostprocessedOutputPB?, (void (*)(uint64_t))type metadata accessor for PinchModelPostprocessedOutputPB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchModelInternalStatesPB?, (void (*)(uint64_t))type metadata accessor for PinchModelInternalStatesPB);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PinchModelInternalStatesPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PinchModelInternalStatesPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PinchModelInternalStatesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PinchModelInternalStatesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PinchModelInternalStatesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PinchModelInternalStatesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchModelInternalStatesPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D89EC44(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PinchModelInternalStatesPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D89ECCC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PinchModelInternalStatesPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PinchModelPostprocessedOutputPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 12) = *(uint64_t *)((char *)a2 + 12);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    v6 = *(int *)(a3 + 36);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PinchModelPostprocessedOutputPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PinchModelPostprocessedOutputPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PinchModelPostprocessedOutputPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PinchModelPostprocessedOutputPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PinchModelPostprocessedOutputPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchModelPostprocessedOutputPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D89F0DC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PinchModelPostprocessedOutputPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D89F164(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PinchModelPostprocessedOutputPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t PinchModelFramePB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for PinchModelFramePB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PinchModelFramePB._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = PinchModelFramePB._StorageClass.init(copying:)(v8);
    swift_release();
  }
  v9 = swift_retain();
  closure #1 in PinchModelFramePB.decodeMessage<A>(decoder:)(v9, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PinchModelFramePB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__handsKitInput;
          v16 = type metadata accessor for HandsKitDataPB;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB;
          v18 = &protocol conformance descriptor for HandsKitDataPB;
          goto LABEL_13;
        case 3:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__leftHandFrameData;
          goto LABEL_12;
        case 4:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData;
LABEL_12:
          v16 = type metadata accessor for PinchModelFrameIOPB;
          v17 = &lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB;
          v18 = &protocol conformance descriptor for PinchModelFrameIOPB;
LABEL_13:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        case 5:
          closure #5 in closure #1 in PinchModelFramePB.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in closure #1 in PinchModelFramePB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
  return swift_endAccess();
}

uint64_t PinchModelFramePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for PinchModelFramePB(0);
  v7 = swift_retain();
  closure #1 in PinchModelFramePB.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in PinchModelFramePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  swift_beginAccess();
  if (!*(_QWORD *)(a1 + 16) || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in closure #1 in PinchModelFramePB.traverse<A>(visitor:)(a1, a2, a3, a4);
    if (!v4)
    {
      closure #3 in closure #1 in PinchModelFramePB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__leftHandFrameData, 3);
      closure #3 in closure #1 in PinchModelFramePB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData, 4);
      v10 = a1
          + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__enabledCameras;
      result = swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v10 + 16))
      {
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in PinchModelFramePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandsKitDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__handsKitInput;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HandsKitDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandsKitDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandsKitDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandsKitDataPB);
}

uint64_t closure #3 in closure #1 in PinchModelFramePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[8];

  v19[1] = a6;
  v19[2] = a3;
  v19[7] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelFrameIOPB?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PinchModelFrameIOPB(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1 + *a5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v17, (uint64_t)v11, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
  outlined init with take of Matrix2dPB((uint64_t)v11, (uint64_t)v16, type metadata accessor for PinchModelFrameIOPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB, type metadata accessor for PinchModelFrameIOPB, (uint64_t)&protocol conformance descriptor for PinchModelFrameIOPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for PinchModelFrameIOPB);
}

uint64_t closure #1 in static PinchModelFramePB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v73;
  char v74;
  _QWORD **v75;
  _QWORD *v76;
  _QWORD **v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v87 = type metadata accessor for PinchModelFrameIOPB(0);
  v85 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87, v4);
  v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchModelFrameIOPB?, PinchModelFrameIOPB?));
  MEMORY[0x24BDAC7A8](v86, v7);
  v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v88 = (uint64_t)&v78 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelFrameIOPB?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v81 = (uint64_t *)((char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16, v17);
  v84 = (char *)&v78 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v82 = (uint64_t *)((char *)&v78 - v21);
  MEMORY[0x24BDAC7A8](v22, v23);
  v90 = (uint64_t)&v78 - v24;
  v25 = type metadata accessor for HandsKitDataPB(0);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25, v27);
  v83 = (uint64_t)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandsKitDataPB?, HandsKitDataPB?));
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (char *)&v78 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataPB?);
  MEMORY[0x24BDAC7A8](v33, v34);
  v89 = (uint64_t)&v78 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36, v37);
  v39 = (char *)&v78 - v38;
  swift_beginAccess();
  v40 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  if (v40 == *(_QWORD *)(a2 + 16))
  {
    v79 = v6;
    v80 = v9;
    v41 = a1;
    v42 = a1
        + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__handsKitInput;
    swift_beginAccess();
    outlined init with copy of (Int32, Matrix2dPB)(v42, (uint64_t)v39, &demangling cache variable for type metadata for HandsKitDataPB?);
    v43 = a2
        + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__handsKitInput;
    swift_beginAccess();
    v44 = (uint64_t)&v32[*(int *)(v29 + 48)];
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v39, (uint64_t)v32, &demangling cache variable for type metadata for HandsKitDataPB?);
    outlined init with copy of (Int32, Matrix2dPB)(v43, v44, &demangling cache variable for type metadata for HandsKitDataPB?);
    v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    if (v45((uint64_t)v32, 1, v25) == 1)
    {
      swift_retain();
      swift_retain();
      outlined destroy of Coordinate3DPB?((uint64_t)v39, &demangling cache variable for type metadata for HandsKitDataPB?);
      v46 = v41;
      if (v45(v44, 1, v25) == 1)
      {
        outlined destroy of Coordinate3DPB?((uint64_t)v32, &demangling cache variable for type metadata for HandsKitDataPB?);
        goto LABEL_10;
      }
    }
    else
    {
      v48 = v89;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v32, v89, &demangling cache variable for type metadata for HandsKitDataPB?);
      if (v45(v44, 1, v25) != 1)
      {
        v51 = v83;
        outlined init with take of Matrix2dPB(v44, v83, type metadata accessor for HandsKitDataPB);
        v46 = v41;
        swift_retain();
        swift_retain();
        v52 = static HandsKitDataPB.== infix(_:_:)(v48, v51);
        outlined destroy of Matrix3x3PB(v51, type metadata accessor for HandsKitDataPB);
        outlined destroy of Coordinate3DPB?((uint64_t)v39, &demangling cache variable for type metadata for HandsKitDataPB?);
        outlined destroy of Matrix3x3PB(v48, type metadata accessor for HandsKitDataPB);
        outlined destroy of Coordinate3DPB?((uint64_t)v32, &demangling cache variable for type metadata for HandsKitDataPB?);
        if ((v52 & 1) == 0)
          goto LABEL_24;
LABEL_10:
        v53 = v46
            + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__leftHandFrameData;
        swift_beginAccess();
        v54 = v90;
        outlined init with copy of (Int32, Matrix2dPB)(v53, v90, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        v55 = a2
            + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__leftHandFrameData;
        swift_beginAccess();
        v56 = v86;
        v57 = v88;
        v58 = v88 + *(int *)(v86 + 48);
        outlined init with copy of (Int32, Matrix2dPB)(v54, v88, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        outlined init with copy of (Int32, Matrix2dPB)(v55, v58, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
        v60 = v87;
        if (v59(v57, 1, v87) == 1)
        {
          outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
          v61 = v59(v58, 1, v60);
          v62 = (uint64_t)v84;
          if (v61 != 1)
          {
LABEL_22:
            v49 = &demangling cache variable for type metadata for (PinchModelFrameIOPB?, PinchModelFrameIOPB?);
            v50 = v57;
            goto LABEL_23;
          }
          outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        }
        else
        {
          v63 = v82;
          outlined init with copy of (Int32, Matrix2dPB)(v57, (uint64_t)v82, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
          v64 = v59(v58, 1, v60);
          v62 = (uint64_t)v84;
          if (v64 == 1)
          {
            outlined destroy of Coordinate3DPB?(v90, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
            v65 = (uint64_t)v63;
LABEL_21:
            outlined destroy of Matrix3x3PB(v65, type metadata accessor for PinchModelFrameIOPB);
            goto LABEL_22;
          }
          v66 = v79;
          outlined init with take of Matrix2dPB(v58, (uint64_t)v79, type metadata accessor for PinchModelFrameIOPB);
          v67 = specialized static PinchModelFrameIOPB.== infix(_:_:)(v63, v66);
          outlined destroy of Matrix3x3PB((uint64_t)v66, type metadata accessor for PinchModelFrameIOPB);
          outlined destroy of Coordinate3DPB?(v90, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
          outlined destroy of Matrix3x3PB((uint64_t)v63, type metadata accessor for PinchModelFrameIOPB);
          outlined destroy of Coordinate3DPB?(v88, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
          if ((v67 & 1) == 0)
          {
LABEL_24:
            v47 = 0;
LABEL_25:
            swift_release();
            swift_release();
            return v47 & 1;
          }
        }
        v68 = v46
            + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData;
        swift_beginAccess();
        outlined init with copy of (Int32, Matrix2dPB)(v68, v62, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        v69 = a2
            + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData;
        swift_beginAccess();
        v57 = (uint64_t)v80;
        v70 = (uint64_t)&v80[*(int *)(v56 + 48)];
        outlined init with copy of (Int32, Matrix2dPB)(v62, (uint64_t)v80, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        outlined init with copy of (Int32, Matrix2dPB)(v69, v70, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        if (v59(v57, 1, v60) == 1)
        {
          outlined destroy of Coordinate3DPB?(v62, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
          if (v59(v70, 1, v60) == 1)
          {
            outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
LABEL_28:
            v75 = (_QWORD **)(v46
                            + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__enabledCameras);
            swift_beginAccess();
            v76 = *v75;
            v77 = (_QWORD **)(a2
                            + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__enabledCameras);
            swift_beginAccess();
            v47 = specialized static Array<A>.== infix(_:_:)(v76, *v77);
            goto LABEL_25;
          }
          goto LABEL_22;
        }
        v71 = v81;
        outlined init with copy of (Int32, Matrix2dPB)(v57, (uint64_t)v81, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        if (v59(v70, 1, v60) == 1)
        {
          outlined destroy of Coordinate3DPB?(v62, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
          v65 = (uint64_t)v71;
          goto LABEL_21;
        }
        v73 = v79;
        outlined init with take of Matrix2dPB(v70, (uint64_t)v79, type metadata accessor for PinchModelFrameIOPB);
        v74 = specialized static PinchModelFrameIOPB.== infix(_:_:)(v71, v73);
        outlined destroy of Matrix3x3PB((uint64_t)v73, type metadata accessor for PinchModelFrameIOPB);
        outlined destroy of Coordinate3DPB?(v62, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        outlined destroy of Matrix3x3PB((uint64_t)v71, type metadata accessor for PinchModelFrameIOPB);
        outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for PinchModelFrameIOPB?);
        if ((v74 & 1) != 0)
          goto LABEL_28;
        goto LABEL_24;
      }
      swift_retain();
      swift_retain();
      outlined destroy of Coordinate3DPB?((uint64_t)v39, &demangling cache variable for type metadata for HandsKitDataPB?);
      outlined destroy of Matrix3x3PB(v48, type metadata accessor for HandsKitDataPB);
    }
    v49 = &demangling cache variable for type metadata for (HandsKitDataPB?, HandsKitDataPB?);
    v50 = (uint64_t)v32;
LABEL_23:
    outlined destroy of Coordinate3DPB?(v50, v49);
    goto LABEL_24;
  }
  v47 = 0;
  return v47 & 1;
}

uint64_t protocol witness for Message.init() in conformance PinchModelFramePB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static PinchModelFramePB._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelFramePB()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelFramePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchModelFramePB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelFramePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchModelFramePB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, type metadata accessor for PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelFramePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelFramePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, type metadata accessor for PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, type metadata accessor for PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB);
  return Message.hash(into:)();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchSyncSequencePB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchSyncSequencePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchSyncSequencePB.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PinchModelFramePB, &lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchSyncSequencePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchSyncSequencePB.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PinchModelFramePB, &lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB, (void (*)(_QWORD))type metadata accessor for PinchSyncSequencePB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchSyncSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchSyncSequencePB and conformance PinchSyncSequencePB, type metadata accessor for PinchSyncSequencePB, (uint64_t)&protocol conformance descriptor for PinchSyncSequencePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchSyncSequencePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchSyncSequencePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchSyncSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchSyncSequencePB and conformance PinchSyncSequencePB, type metadata accessor for PinchSyncSequencePB, (uint64_t)&protocol conformance descriptor for PinchSyncSequencePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchSyncSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchSyncSequencePB and conformance PinchSyncSequencePB, type metadata accessor for PinchSyncSequencePB, (uint64_t)&protocol conformance descriptor for PinchSyncSequencePB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PinchSyncSequencePB(_QWORD *a1, char *a2)
{
  return specialized static Matrix2dPB.VectorPB.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for PinchSyncSequencePB) & 1;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelInferenceInputPB()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelInferenceInputPB()
{
  return PinchModelInferenceInputPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelInferenceInputPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchModelInferenceInputPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PinchModelInferenceInputPB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelInferenceInputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, type metadata accessor for PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelInferenceInputPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelInferenceInputPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelInferenceInputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, type metadata accessor for PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelInferenceInputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, type metadata accessor for PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PinchModelInferenceInputPB(_QWORD *a1, char *a2)
{
  return specialized static Matrix2dPB.VectorPB.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for PinchModelInferenceInputPB) & 1;
}

uint64_t PinchModelInferenceInputPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in PinchModelInferenceInputPB.decodeMessage<A>(decoder:)();
  }
  return result;
}

uint64_t closure #1 in PinchModelInferenceInputPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for ProtobufBytes();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ProtobufBytes and conformance ProtobufBytes, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE50], MEMORY[0x24BE5BE48]);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t PinchModelInferenceInputPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void (*v7)(_QWORD);

  if (!*(_QWORD *)(*(_QWORD *)v4 + 16)
    || (v7 = a4,
        type metadata accessor for ProtobufString(),
        type metadata accessor for ProtobufBytes(),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ProtobufBytes and conformance ProtobufBytes, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BE50], MEMORY[0x24BE5BE48]), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), a4 = v7, !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PinchModelInferenceInputPB@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelInferenceOutputPB()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelInferenceOutputPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchModelInferenceInputPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PinchModelInferenceOutputPB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelInferenceOutputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, type metadata accessor for PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelInferenceOutputPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelInferenceOutputPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelInferenceOutputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, type metadata accessor for PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelInferenceOutputPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, type metadata accessor for PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PinchModelInferenceOutputPB(_QWORD *a1, char *a2)
{
  return specialized static Matrix2dPB.VectorPB.== infix(_:_:)(a1, a2, specialized static Dictionary<>.== infix(_:_:), type metadata accessor for PinchModelInferenceOutputPB) & 1;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelInferenceInputSequencePB()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelInferenceInputSequencePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchSyncSequencePB.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PinchModelInferenceInputPB, &lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelInferenceInputSequencePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchSyncSequencePB.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PinchModelInferenceInputPB, &lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB, (void (*)(_QWORD))type metadata accessor for PinchModelInferenceInputSequencePB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelInferenceInputSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputSequencePB and conformance PinchModelInferenceInputSequencePB, type metadata accessor for PinchModelInferenceInputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputSequencePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelInferenceInputSequencePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelInferenceInputSequencePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelInferenceInputSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputSequencePB and conformance PinchModelInferenceInputSequencePB, type metadata accessor for PinchModelInferenceInputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputSequencePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelInferenceInputSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputSequencePB and conformance PinchModelInferenceInputSequencePB, type metadata accessor for PinchModelInferenceInputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputSequencePB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PinchModelInferenceInputSequencePB(_QWORD *a1, char *a2)
{
  return specialized static Matrix2dPB.VectorPB.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for PinchModelInferenceInputSequencePB) & 1;
}

uint64_t PinchSyncSequencePB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  char v11;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v11 & 1) != 0)
      break;
    if (result == 1)
    {
      a4(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(a5, a4, a6);
      dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    }
    v6 = 0;
  }
  return result;
}

uint64_t PinchSyncSequencePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v13)(_QWORD);

  if (!*(_QWORD *)(*(_QWORD *)v7 + 16)
    || (v13 = a7,
        a4(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(a5, a4, a6),
        result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        a7 = v13,
        !v8))
  {
    a7(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelInferenceOutputSequencePB()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelInferenceOutputSequencePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchSyncSequencePB.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PinchModelInferenceOutputPB, &lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelInferenceOutputSequencePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchSyncSequencePB.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PinchModelInferenceOutputPB, &lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB, (void (*)(_QWORD))type metadata accessor for PinchModelInferenceOutputSequencePB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelInferenceOutputSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputSequencePB and conformance PinchModelInferenceOutputSequencePB, type metadata accessor for PinchModelInferenceOutputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputSequencePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelInferenceOutputSequencePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelInferenceOutputSequencePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelInferenceOutputSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputSequencePB and conformance PinchModelInferenceOutputSequencePB, type metadata accessor for PinchModelInferenceOutputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputSequencePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelInferenceOutputSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputSequencePB and conformance PinchModelInferenceOutputSequencePB, type metadata accessor for PinchModelInferenceOutputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputSequencePB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PinchModelInferenceOutputSequencePB(_QWORD *a1, char *a2)
{
  return specialized static Matrix2dPB.VectorPB.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for PinchModelInferenceOutputSequencePB) & 1;
}

uint64_t base witness table accessor for Equatable in PinchModelInferenceOutputSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputSequencePB and conformance PinchModelInferenceOutputSequencePB, type metadata accessor for PinchModelInferenceOutputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputSequencePB);
}

uint64_t type metadata accessor for PinchModelInferenceOutputSequencePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelInferenceOutputSequencePB);
}

uint64_t base witness table accessor for Message in PinchModelInferenceOutputSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputSequencePB and conformance PinchModelInferenceOutputSequencePB, type metadata accessor for PinchModelInferenceOutputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputSequencePB);
}

uint64_t base witness table accessor for Hashable in PinchModelInferenceOutputSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputSequencePB and conformance PinchModelInferenceOutputSequencePB, type metadata accessor for PinchModelInferenceOutputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputSequencePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelInferenceOutputSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputSequencePB and conformance PinchModelInferenceOutputSequencePB, type metadata accessor for PinchModelInferenceOutputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputSequencePB);
}

uint64_t base witness table accessor for Equatable in PinchModelInferenceInputSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputSequencePB and conformance PinchModelInferenceInputSequencePB, type metadata accessor for PinchModelInferenceInputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputSequencePB);
}

uint64_t type metadata accessor for PinchModelInferenceInputSequencePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelInferenceInputSequencePB);
}

uint64_t base witness table accessor for Message in PinchModelInferenceInputSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputSequencePB and conformance PinchModelInferenceInputSequencePB, type metadata accessor for PinchModelInferenceInputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputSequencePB);
}

uint64_t base witness table accessor for Hashable in PinchModelInferenceInputSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputSequencePB and conformance PinchModelInferenceInputSequencePB, type metadata accessor for PinchModelInferenceInputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputSequencePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelInferenceInputSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputSequencePB and conformance PinchModelInferenceInputSequencePB, type metadata accessor for PinchModelInferenceInputSequencePB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputSequencePB);
}

uint64_t base witness table accessor for Equatable in PinchModelInferenceOutputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, type metadata accessor for PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB);
}

uint64_t type metadata accessor for PinchModelInferenceOutputPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelInferenceOutputPB);
}

uint64_t base witness table accessor for Message in PinchModelInferenceOutputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, type metadata accessor for PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB);
}

uint64_t base witness table accessor for Hashable in PinchModelInferenceOutputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, type metadata accessor for PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelInferenceOutputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceOutputPB and conformance PinchModelInferenceOutputPB, type metadata accessor for PinchModelInferenceOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceOutputPB);
}

uint64_t base witness table accessor for Equatable in PinchModelInferenceInputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, type metadata accessor for PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB);
}

uint64_t type metadata accessor for PinchModelInferenceInputPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelInferenceInputPB);
}

uint64_t base witness table accessor for Message in PinchModelInferenceInputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, type metadata accessor for PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB);
}

uint64_t base witness table accessor for Hashable in PinchModelInferenceInputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, type metadata accessor for PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelInferenceInputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInferenceInputPB and conformance PinchModelInferenceInputPB, type metadata accessor for PinchModelInferenceInputPB, (uint64_t)&protocol conformance descriptor for PinchModelInferenceInputPB);
}

uint64_t base witness table accessor for Equatable in PinchSyncSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchSyncSequencePB and conformance PinchSyncSequencePB, type metadata accessor for PinchSyncSequencePB, (uint64_t)&protocol conformance descriptor for PinchSyncSequencePB);
}

uint64_t type metadata accessor for PinchSyncSequencePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchSyncSequencePB);
}

uint64_t base witness table accessor for Message in PinchSyncSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchSyncSequencePB and conformance PinchSyncSequencePB, type metadata accessor for PinchSyncSequencePB, (uint64_t)&protocol conformance descriptor for PinchSyncSequencePB);
}

uint64_t base witness table accessor for Hashable in PinchSyncSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchSyncSequencePB and conformance PinchSyncSequencePB, type metadata accessor for PinchSyncSequencePB, (uint64_t)&protocol conformance descriptor for PinchSyncSequencePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchSyncSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchSyncSequencePB and conformance PinchSyncSequencePB, type metadata accessor for PinchSyncSequencePB, (uint64_t)&protocol conformance descriptor for PinchSyncSequencePB);
}

uint64_t base witness table accessor for Equatable in PinchModelFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, type metadata accessor for PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB);
}

uint64_t type metadata accessor for PinchModelFramePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelFramePB);
}

uint64_t base witness table accessor for Message in PinchModelFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, type metadata accessor for PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB);
}

uint64_t base witness table accessor for Hashable in PinchModelFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, type metadata accessor for PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFramePB and conformance PinchModelFramePB, type metadata accessor for PinchModelFramePB, (uint64_t)&protocol conformance descriptor for PinchModelFramePB);
}

uint64_t base witness table accessor for Equatable in PinchModelFrameIOPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB, type metadata accessor for PinchModelFrameIOPB, (uint64_t)&protocol conformance descriptor for PinchModelFrameIOPB);
}

uint64_t base witness table accessor for Message in PinchModelFrameIOPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB, type metadata accessor for PinchModelFrameIOPB, (uint64_t)&protocol conformance descriptor for PinchModelFrameIOPB);
}

uint64_t base witness table accessor for Hashable in PinchModelFrameIOPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB, type metadata accessor for PinchModelFrameIOPB, (uint64_t)&protocol conformance descriptor for PinchModelFrameIOPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelFrameIOPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelFrameIOPB and conformance PinchModelFrameIOPB, type metadata accessor for PinchModelFrameIOPB, (uint64_t)&protocol conformance descriptor for PinchModelFrameIOPB);
}

uint64_t base witness table accessor for Equatable in PinchModelPostprocessedOutputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, type metadata accessor for PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
}

uint64_t base witness table accessor for Message in PinchModelPostprocessedOutputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, type metadata accessor for PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
}

uint64_t base witness table accessor for Hashable in PinchModelPostprocessedOutputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, type metadata accessor for PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelPostprocessedOutputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelPostprocessedOutputPB and conformance PinchModelPostprocessedOutputPB, type metadata accessor for PinchModelPostprocessedOutputPB, (uint64_t)&protocol conformance descriptor for PinchModelPostprocessedOutputPB);
}

uint64_t base witness table accessor for Equatable in PinchModelInternalStatesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, type metadata accessor for PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
}

uint64_t base witness table accessor for Message in PinchModelInternalStatesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, type metadata accessor for PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
}

uint64_t base witness table accessor for Hashable in PinchModelInternalStatesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, type metadata accessor for PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelInternalStatesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelInternalStatesPB and conformance PinchModelInternalStatesPB, type metadata accessor for PinchModelInternalStatesPB, (uint64_t)&protocol conformance descriptor for PinchModelInternalStatesPB);
}

uint64_t base witness table accessor for Equatable in PinchModelHandInputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelHandInputPB and conformance PinchModelHandInputPB, type metadata accessor for PinchModelHandInputPB, (uint64_t)&protocol conformance descriptor for PinchModelHandInputPB);
}

uint64_t type metadata accessor for PinchModelHandInputPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelHandInputPB);
}

uint64_t base witness table accessor for Message in PinchModelHandInputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelHandInputPB and conformance PinchModelHandInputPB, type metadata accessor for PinchModelHandInputPB, (uint64_t)&protocol conformance descriptor for PinchModelHandInputPB);
}

uint64_t base witness table accessor for Hashable in PinchModelHandInputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelHandInputPB and conformance PinchModelHandInputPB, type metadata accessor for PinchModelHandInputPB, (uint64_t)&protocol conformance descriptor for PinchModelHandInputPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelHandInputPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelHandInputPB and conformance PinchModelHandInputPB, type metadata accessor for PinchModelHandInputPB, (uint64_t)&protocol conformance descriptor for PinchModelHandInputPB);
}

uint64_t specialized static PinchModelPostprocessedOutputPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2)
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(float *)(a1 + 12) == *(float *)(a2 + 12)
    && *(float *)(a1 + 16) == *(float *)(a2 + 16)
    && *(float *)(a1 + 20) == *(float *)(a2 + 20))
  {
    v13 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
    v14 = a1 + *(int *)(v13 + 36);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 36), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PinchModelInternalStatesPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    v15 = type metadata accessor for PinchModelInternalStatesPB(0);
    v16 = a1 + *(int *)(v15 + 28);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, v16, v4);
    v17(v8, a2 + *(int *)(v15 + 28), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PinchModelHandInputPB.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  int v65;
  float *v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  char v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t, uint64_t);
  char *v99;
  char *v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  int *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float *v126;

  v2 = type metadata accessor for UnknownStorage();
  v111 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v3);
  v110 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v109 = (char *)&v102 - v7;
  v8 = type metadata accessor for ImageCalibrationDataPB(0);
  v114 = *(_QWORD *)(v8 - 8);
  v115 = v8;
  MEMORY[0x24BDAC7A8](v8, v9);
  v108 = (uint64_t)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?));
  MEMORY[0x24BDAC7A8](v113, v11);
  v122 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v121 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v119 = (char *)&v102 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v120 = (char *)&v102 - v21;
  v22 = type metadata accessor for HandPosePB(0);
  v117 = *(_QWORD *)(v22 - 8);
  v118 = v22;
  MEMORY[0x24BDAC7A8](v22, v23);
  v112 = (uint64_t)&v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandPosePB?, HandPosePB?));
  MEMORY[0x24BDAC7A8](v116, v25);
  v27 = (char *)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v28, v29);
  v126 = (float *)((char *)&v102 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v31, v32);
  v124 = (uint64_t)&v102 - v33;
  MEMORY[0x24BDAC7A8](v34, v35);
  v125 = (uint64_t)&v102 - v36;
  v37 = type metadata accessor for Coordinate3DPB(0);
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37, v39);
  v123 = (uint64_t)&v102 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v41, v42);
  v44 = (char *)&v102 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v45, v46);
  v48 = (char *)&v102 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v49, v50);
  v52 = (char *)&v102 - v51;
  MEMORY[0x24BDAC7A8](v53, v54);
  v57 = (char *)&v102 - v56;
  if (*(_QWORD *)a1 != *(_QWORD *)v55 || *(float *)(a1 + 8) != *(float *)(v55 + 8))
    goto LABEL_12;
  v105 = v27;
  v103 = v2;
  v58 = a1;
  v59 = v55;
  v60 = type metadata accessor for PinchModelHandInputPB(0);
  v61 = *(int *)(v60 + 32);
  v106 = v58;
  outlined init with copy of (Int32, Matrix2dPB)(v58 + v61, (uint64_t)v57, &demangling cache variable for type metadata for Coordinate3DPB?);
  v104 = (int *)v60;
  v62 = *(int *)(v60 + 32);
  v107 = v59;
  outlined init with copy of (Int32, Matrix2dPB)(v59 + v62, (uint64_t)v52, &demangling cache variable for type metadata for Coordinate3DPB?);
  v63 = (uint64_t)&v44[*(int *)(v41 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v57, (uint64_t)v44, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v52, v63, &demangling cache variable for type metadata for Coordinate3DPB?);
  v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  if (v64((uint64_t)v44, 1, v37) != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v44, (uint64_t)v48, &demangling cache variable for type metadata for Coordinate3DPB?);
    v67 = v64(v63, 1, v37);
    v66 = v126;
    if (v67 != 1)
    {
      v70 = v123;
      outlined init with take of Matrix2dPB(v63, v123, type metadata accessor for Coordinate3DPB);
      v71 = static Coordinate3DPB.== infix(_:_:)(v48, v70);
      outlined destroy of Matrix3x3PB(v70, type metadata accessor for Coordinate3DPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v52, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v57, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Matrix3x3PB((uint64_t)v48, type metadata accessor for Coordinate3DPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v44, &demangling cache variable for type metadata for Coordinate3DPB?);
      if ((v71 & 1) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v52, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v57, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v48, type metadata accessor for Coordinate3DPB);
LABEL_8:
    v68 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v69 = (uint64_t)v44;
    goto LABEL_9;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v52, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v57, &demangling cache variable for type metadata for Coordinate3DPB?);
  v65 = v64(v63, 1, v37);
  v66 = v126;
  if (v65 != 1)
    goto LABEL_8;
  outlined destroy of Coordinate3DPB?((uint64_t)v44, &demangling cache variable for type metadata for Coordinate3DPB?);
LABEL_11:
  if (*(unsigned __int8 *)(v106 + 12) != *(unsigned __int8 *)(v107 + 12))
    goto LABEL_12;
  v74 = v104;
  v75 = v107;
  v76 = v125;
  outlined init with copy of (Int32, Matrix2dPB)(v106 + v104[9], v125, &demangling cache variable for type metadata for HandPosePB?);
  v77 = v124;
  outlined init with copy of (Int32, Matrix2dPB)(v75 + v74[9], v124, &demangling cache variable for type metadata for HandPosePB?);
  v78 = (uint64_t)v105;
  v79 = (uint64_t)&v105[*(int *)(v116 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v76, (uint64_t)v105, &demangling cache variable for type metadata for HandPosePB?);
  outlined init with copy of (Int32, Matrix2dPB)(v77, v79, &demangling cache variable for type metadata for HandPosePB?);
  v80 = v118;
  v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
  if (v81(v78, 1, v118) == 1)
  {
    outlined destroy of Coordinate3DPB?(v77, &demangling cache variable for type metadata for HandPosePB?);
    outlined destroy of Coordinate3DPB?(v76, &demangling cache variable for type metadata for HandPosePB?);
    v82 = v81(v79, 1, v80);
    v83 = v103;
    v84 = (uint64_t)v121;
    v85 = (uint64_t)v122;
    v87 = (uint64_t)v119;
    v86 = (uint64_t)v120;
    if (v82 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v105, &demangling cache variable for type metadata for HandPosePB?);
LABEL_21:
      outlined init with copy of (Int32, Matrix2dPB)(v106 + v74[10], v86, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
      outlined init with copy of (Int32, Matrix2dPB)(v107 + v74[10], v87, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
      v92 = v85 + *(int *)(v113 + 48);
      outlined init with copy of (Int32, Matrix2dPB)(v86, v85, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
      outlined init with copy of (Int32, Matrix2dPB)(v87, v92, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
      v93 = v115;
      v94 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
      if (v94(v85, 1, v115) == 1)
      {
        outlined destroy of Coordinate3DPB?(v87, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
        outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
        if (v94(v92, 1, v93) == 1)
        {
          outlined destroy of Coordinate3DPB?(v85, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
          goto LABEL_28;
        }
      }
      else
      {
        outlined init with copy of (Int32, Matrix2dPB)(v85, v84, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
        if (v94(v92, 1, v93) != 1)
        {
          v95 = v108;
          outlined init with take of Matrix2dPB(v92, v108, type metadata accessor for ImageCalibrationDataPB);
          v96 = static ImageCalibrationDataPB.== infix(_:_:)(v84, v95);
          outlined destroy of Matrix3x3PB(v95, type metadata accessor for ImageCalibrationDataPB);
          outlined destroy of Coordinate3DPB?(v87, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
          outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
          outlined destroy of Matrix3x3PB(v84, type metadata accessor for ImageCalibrationDataPB);
          outlined destroy of Coordinate3DPB?(v85, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
          if ((v96 & 1) == 0)
            goto LABEL_12;
LABEL_28:
          v97 = v111;
          v98 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
          v99 = v109;
          v98(v109, v106 + v74[7], v83);
          v100 = v110;
          v98(v110, v107 + v74[7], v83);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v72 = dispatch thunk of static Equatable.== infix(_:_:)();
          v101 = *(void (**)(char *, uint64_t))(v97 + 8);
          v101(v100, v83);
          v101(v99, v83);
          return v72 & 1;
        }
        outlined destroy of Coordinate3DPB?(v87, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
        outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
        outlined destroy of Matrix3x3PB(v84, type metadata accessor for ImageCalibrationDataPB);
      }
      v68 = &demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?);
      v69 = v85;
      goto LABEL_9;
    }
  }
  else
  {
    outlined init with copy of (Int32, Matrix2dPB)(v78, (uint64_t)v66, &demangling cache variable for type metadata for HandPosePB?);
    v88 = v81(v79, 1, v80);
    v84 = (uint64_t)v121;
    v85 = (uint64_t)v122;
    v87 = (uint64_t)v119;
    v86 = (uint64_t)v120;
    if (v88 != 1)
    {
      v89 = v112;
      outlined init with take of Matrix2dPB(v79, v112, type metadata accessor for HandPosePB);
      v90 = static HandPosePB.== infix(_:_:)(v66, v89);
      outlined destroy of Matrix3x3PB(v89, type metadata accessor for HandPosePB);
      outlined destroy of Coordinate3DPB?(v124, &demangling cache variable for type metadata for HandPosePB?);
      outlined destroy of Coordinate3DPB?(v125, &demangling cache variable for type metadata for HandPosePB?);
      v91 = (uint64_t)v66;
      v83 = v103;
      outlined destroy of Matrix3x3PB(v91, type metadata accessor for HandPosePB);
      outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for HandPosePB?);
      if ((v90 & 1) == 0)
        goto LABEL_12;
      goto LABEL_21;
    }
    outlined destroy of Coordinate3DPB?(v124, &demangling cache variable for type metadata for HandPosePB?);
    outlined destroy of Coordinate3DPB?(v125, &demangling cache variable for type metadata for HandPosePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v66, type metadata accessor for HandPosePB);
  }
  v68 = &demangling cache variable for type metadata for (HandPosePB?, HandPosePB?);
  v69 = (uint64_t)v105;
LABEL_9:
  outlined destroy of Coordinate3DPB?(v69, v68);
LABEL_12:
  v72 = 0;
  return v72 & 1;
}

uint64_t specialized static PinchModelFrameIOPB.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  _QWORD *v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  uint64_t v96;
  char *v97;
  char v98;
  void (*v99)(char *, uint64_t);
  uint64_t v101;
  int *v102;
  char *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v4 = type metadata accessor for UnknownStorage();
  v109 = *(_QWORD *)(v4 - 8);
  v110 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v108 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v107 = (char *)&v101 - v9;
  v10 = type metadata accessor for PinchModelInternalStatesPB(0);
  v113 = *(_QWORD *)(v10 - 8);
  v114 = v10;
  MEMORY[0x24BDAC7A8](v10, v11);
  v106 = (uint64_t)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchModelInternalStatesPB?, PinchModelInternalStatesPB?));
  MEMORY[0x24BDAC7A8](v112, v13);
  v122 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v116 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v19);
  v120 = (char *)&v101 - v20;
  MEMORY[0x24BDAC7A8](v21, v22);
  v121 = (char *)&v101 - v23;
  v24 = type metadata accessor for PinchModelPostprocessedOutputPB(0);
  v118 = *(_QWORD *)(v24 - 8);
  v119 = v24;
  MEMORY[0x24BDAC7A8](v24, v25);
  v111 = (uint64_t)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchModelPostprocessedOutputPB?, PinchModelPostprocessedOutputPB?));
  MEMORY[0x24BDAC7A8](v117, v27);
  v29 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v115 = (uint64_t)&v101 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v123 = (uint64_t)&v101 - v35;
  MEMORY[0x24BDAC7A8](v36, v37);
  v124 = (uint64_t)&v101 - v38;
  v39 = type metadata accessor for ImageCalibrationDataPB(0);
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39, v41);
  v125 = (uint64_t)&v101 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?));
  MEMORY[0x24BDAC7A8](v43, v44);
  v46 = (char *)&v101 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v47, v48);
  v50 = (char *)&v101 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v51, v52);
  v54 = (char *)&v101 - v53;
  MEMORY[0x24BDAC7A8](v55, v56);
  v58 = (char *)&v101 - v57;
  if (*a1 != *a2)
    goto LABEL_27;
  v103 = v29;
  v59 = type metadata accessor for PinchModelFrameIOPB(0);
  v60 = *(int *)(v59 + 32);
  v104 = a1;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a1 + v60, (uint64_t)v58, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v102 = (int *)v59;
  v61 = *(int *)(v59 + 32);
  v105 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a2 + v61, (uint64_t)v54, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v62 = (uint64_t)&v46[*(int *)(v43 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v58, (uint64_t)v46, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v54, v62, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  if (v63((uint64_t)v46, 1, v39) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v54, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v58, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    if (v63(v62, 1, v39) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v46, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
      goto LABEL_10;
    }
LABEL_7:
    v64 = &demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?);
    v65 = (uint64_t)v46;
LABEL_8:
    outlined destroy of Coordinate3DPB?(v65, v64);
    goto LABEL_27;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v46, (uint64_t)v50, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if (v63(v62, 1, v39) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v54, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v58, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v50, type metadata accessor for ImageCalibrationDataPB);
    goto LABEL_7;
  }
  v66 = v125;
  outlined init with take of Matrix2dPB(v62, v125, type metadata accessor for ImageCalibrationDataPB);
  v67 = specialized static ImageCalibrationDataPB.== infix(_:_:)((uint64_t)v50, v66);
  outlined destroy of Matrix3x3PB(v66, type metadata accessor for ImageCalibrationDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v54, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v58, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v50, type metadata accessor for ImageCalibrationDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v46, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((v67 & 1) == 0)
    goto LABEL_27;
LABEL_10:
  v68 = v104;
  v69 = v105;
  if ((specialized static Dictionary<>.== infix(_:_:)(v104[1], v105[1]) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v68[2], v69[2]) & 1) == 0)
  {
    goto LABEL_27;
  }
  v70 = v102;
  v71 = v124;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v68 + v102[9], v124, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  v72 = v123;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v69 + v70[9], v123, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  v73 = (uint64_t)v103;
  v74 = (uint64_t)&v103[*(int *)(v117 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v71, (uint64_t)v103, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v72, v74, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  v75 = v119;
  v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  if (v76(v73, 1, v119) == 1)
  {
    outlined destroy of Coordinate3DPB?(v72, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
    v73 = (uint64_t)v103;
    outlined destroy of Coordinate3DPB?(v71, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
    v77 = v76(v74, 1, v75);
    v79 = (uint64_t)v121;
    v78 = (uint64_t)v122;
    v80 = (uint64_t)v116;
    v81 = (uint64_t)v120;
    if (v77 == 1)
    {
      outlined destroy of Coordinate3DPB?(v73, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  v82 = v115;
  outlined init with copy of (Int32, Matrix2dPB)(v73, v115, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  v83 = v76(v74, 1, v75);
  v79 = (uint64_t)v121;
  v78 = (uint64_t)v122;
  v81 = (uint64_t)v120;
  if (v83 == 1)
  {
    outlined destroy of Coordinate3DPB?(v123, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
    outlined destroy of Coordinate3DPB?(v124, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
    outlined destroy of Matrix3x3PB(v82, type metadata accessor for PinchModelPostprocessedOutputPB);
LABEL_17:
    v64 = &demangling cache variable for type metadata for (PinchModelPostprocessedOutputPB?, PinchModelPostprocessedOutputPB?);
    v65 = v73;
    goto LABEL_8;
  }
  v84 = v111;
  outlined init with take of Matrix2dPB(v74, v111, type metadata accessor for PinchModelPostprocessedOutputPB);
  v85 = specialized static PinchModelPostprocessedOutputPB.== infix(_:_:)(v82, v84);
  outlined destroy of Matrix3x3PB(v84, type metadata accessor for PinchModelPostprocessedOutputPB);
  outlined destroy of Coordinate3DPB?(v123, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  outlined destroy of Coordinate3DPB?(v124, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  outlined destroy of Matrix3x3PB(v82, type metadata accessor for PinchModelPostprocessedOutputPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v103, &demangling cache variable for type metadata for PinchModelPostprocessedOutputPB?);
  v80 = (uint64_t)v116;
  if ((v85 & 1) == 0)
    goto LABEL_27;
LABEL_19:
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v68 + v70[10], v79, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v69 + v70[10], v81, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  v86 = v78 + *(int *)(v112 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v79, v78, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v81, v86, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  v87 = v114;
  v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
  if (v88(v78, 1, v114) != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v78, v80, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
    if (v88(v86, 1, v87) != 1)
    {
      v89 = v106;
      outlined init with take of Matrix2dPB(v86, v106, type metadata accessor for PinchModelInternalStatesPB);
      v90 = specialized static PinchModelInternalStatesPB.== infix(_:_:)(v80, v89);
      outlined destroy of Matrix3x3PB(v89, type metadata accessor for PinchModelInternalStatesPB);
      outlined destroy of Coordinate3DPB?(v81, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
      outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
      outlined destroy of Matrix3x3PB(v80, type metadata accessor for PinchModelInternalStatesPB);
      outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
      if ((v90 & 1) != 0)
        goto LABEL_26;
LABEL_27:
      v98 = 0;
      return v98 & 1;
    }
    outlined destroy of Coordinate3DPB?(v81, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
    outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
    outlined destroy of Matrix3x3PB(v80, type metadata accessor for PinchModelInternalStatesPB);
    goto LABEL_24;
  }
  outlined destroy of Coordinate3DPB?(v81, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
  if (v88(v86, 1, v87) != 1)
  {
LABEL_24:
    v64 = &demangling cache variable for type metadata for (PinchModelInternalStatesPB?, PinchModelInternalStatesPB?);
    v65 = v78;
    goto LABEL_8;
  }
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for PinchModelInternalStatesPB?);
LABEL_26:
  v91 = (uint64_t)v68 + v70[7];
  v93 = v109;
  v92 = v110;
  v94 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 16);
  v95 = v107;
  v94(v107, v91, v110);
  v96 = (uint64_t)v69 + v70[7];
  v97 = v108;
  v94(v108, v96, v92);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v98 = dispatch thunk of static Equatable.== infix(_:_:)();
  v99 = *(void (**)(char *, uint64_t))(v93 + 8);
  v99(v97, v92);
  v99(v95, v92);
  return v98 & 1;
}

uint64_t specialized static PinchModelFramePB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for PinchModelFramePB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static PinchModelFramePB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        (v16 & 1) != 0))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

_QWORD *initializeBufferWithCopyOfBuffer for PinchModelHandInputPB(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, _QWORD, uint64_t, uint64_t);
  char *v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    v7 = a3[7];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[8];
    v13 = (_DWORD *)((char *)v4 + v12);
    v14 = (_DWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for Coordinate3DPB(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = a3[9];
    v20 = (_DWORD *)((char *)v4 + v19);
    v21 = (_DWORD *)((char *)a2 + v19);
    v22 = type metadata accessor for HandPosePB(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v49 = v23;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[2] = v21[2];
      v25 = *(int *)(v22 + 24);
      v26 = (char *)v20 + v25;
      v27 = (char *)v21 + v25;
      swift_bridgeObjectRetain();
      v28 = v27;
      v29 = v10;
      v48 = v11;
      v11((uint64_t)v26, (uint64_t)v28, v10);
      v30 = *(int *)(v22 + 28);
      v31 = (_QWORD *)((char *)v20 + v30);
      v32 = (_QWORD *)((char *)v21 + v30);
      v33 = type metadata accessor for Matrix2dPB(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        v11 = v48;
      }
      else
      {
        *v31 = *v32;
        *((_BYTE *)v31 + 8) = *((_BYTE *)v32 + 8);
        v31[2] = v32[2];
        v36 = *(int *)(v33 + 28);
        v47 = (char *)v31 + v36;
        v37 = (char *)v32 + v36;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38 = v37;
        v11 = v48;
        v48((uint64_t)v47, (uint64_t)v38, v29);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v20, 0, 1, v22);
      v10 = v29;
    }
    v39 = a3[10];
    v40 = (char *)v4 + v39;
    v41 = (char *)a2 + v39;
    v42 = type metadata accessor for ImageCalibrationDataPB(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v11((uint64_t)v40, (uint64_t)v41, v10);
      *(_QWORD *)&v40[*(int *)(v42 + 20)] = *(_QWORD *)&v41[*(int *)(v42 + 20)];
      v45 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56);
      swift_retain();
      v45(v40, 0, 1, v42);
    }
  }
  return v4;
}

uint64_t destroy for PinchModelHandInputPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = a1 + a2[7];
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[8];
  v8 = type metadata accessor for Coordinate3DPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    v6(v7 + *(int *)(v8 + 28), v5);
  v9 = a1 + a2[9];
  v10 = type metadata accessor for HandPosePB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    v6(v9 + *(int *)(v10 + 24), v5);
    v11 = v9 + *(int *)(v10 + 28);
    v12 = type metadata accessor for Matrix2dPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6(v11 + *(int *)(v12 + 28), v5);
    }
  }
  v13 = a1 + a2[10];
  v14 = type metadata accessor for ImageCalibrationDataPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
  if (!(_DWORD)result)
  {
    v6(v13, v5);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for PinchModelHandInputPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[8];
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[9];
  v18 = (_DWORD *)(a1 + v17);
  v19 = (_DWORD *)(a2 + v17);
  v20 = type metadata accessor for HandPosePB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v46 = v21;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[2] = v19[2];
    v23 = *(int *)(v20 + 24);
    v24 = (char *)v18 + v23;
    v25 = (char *)v19 + v23;
    swift_bridgeObjectRetain();
    v26 = v25;
    v27 = v9;
    v47 = v10;
    v10((uint64_t)v24, (uint64_t)v26, v9);
    v28 = *(int *)(v20 + 28);
    v29 = (_QWORD *)((char *)v18 + v28);
    v30 = (_QWORD *)((char *)v19 + v28);
    v31 = type metadata accessor for Matrix2dPB(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      v10 = v47;
    }
    else
    {
      *v29 = *v30;
      *((_BYTE *)v29 + 8) = *((_BYTE *)v30 + 8);
      v29[2] = v30[2];
      v34 = *(int *)(v31 + 28);
      v45 = (char *)v29 + v34;
      v35 = (char *)v30 + v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36 = v35;
      v10 = v47;
      v47((uint64_t)v45, (uint64_t)v36, v27);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v18, 0, 1, v20);
    v9 = v27;
  }
  v37 = a3[10];
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = type metadata accessor for ImageCalibrationDataPB(0);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v38, (uint64_t)v39, v9);
    *(_QWORD *)&v38[*(int *)(v40 + 20)] = *(_QWORD *)&v39[*(int *)(v40 + 20)];
    v43 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56);
    swift_retain();
    v43(v38, 0, 1, v40);
  }
  return a1;
}

uint64_t assignWithCopy for PinchModelHandInputPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(uint64_t, char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  void (*v62)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v68 = *(_QWORD *)(v9 - 8);
  v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 24);
  v67(v7, v8, v9);
  v10 = a3[8];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for Coordinate3DPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  v69 = v9;
  if (v16)
  {
    if (!v17)
    {
      *(_DWORD *)v11 = *(_DWORD *)v12;
      *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate3DPB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v67((uint64_t)&v11[*(int *)(v13 + 28)], (uint64_t)&v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (_DWORD *)(a2 + v19);
  v22 = type metadata accessor for HandPosePB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24((uint64_t)v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v20 + 8) = v21[2];
      v67(v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v69);
      v40 = *(int *)(v22 + 28);
      v41 = v20 + v40;
      v42 = (char *)v21 + v40;
      v43 = type metadata accessor for Matrix2dPB(0);
      v44 = *(_QWORD *)(v43 - 8);
      v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
      v46 = v45(v41, 1, v43);
      v47 = v45((uint64_t)v42, 1, v43);
      if (v46)
      {
        if (!v47)
        {
          *(_QWORD *)v41 = *(_QWORD *)v42;
          *(_BYTE *)(v41 + 8) = v42[8];
          *(_QWORD *)(v41 + 16) = *((_QWORD *)v42 + 2);
          v48 = *(int *)(v43 + 28);
          v49 = v41 + v48;
          v50 = &v42[v48];
          v51 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v51(v49, v50, v69);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
          goto LABEL_21;
        }
      }
      else
      {
        if (!v47)
        {
          *(_QWORD *)v41 = *(_QWORD *)v42;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v41 + 8) = v42[8];
          *(_QWORD *)(v41 + 16) = *((_QWORD *)v42 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v67(v41 + *(int *)(v43 + 28), (uint64_t)&v42[*(int *)(v43 + 28)], v69);
          goto LABEL_21;
        }
        outlined destroy of Matrix3x3PB(v41, type metadata accessor for Matrix2dPB);
      }
      v37 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?)
                                  - 8)
                      + 64);
      v38 = (void *)v41;
      v39 = v42;
LABEL_14:
      memcpy(v38, v39, v37);
      goto LABEL_21;
    }
    outlined destroy of Matrix3x3PB(v20, type metadata accessor for HandPosePB);
LABEL_13:
    v37 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?)
                                - 8)
                    + 64);
    v38 = (void *)v20;
    v39 = v21;
    goto LABEL_14;
  }
  if (v26)
    goto LABEL_13;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_DWORD *)(v20 + 8) = v21[2];
  v27 = *(int *)(v22 + 24);
  v28 = (char *)(v20 + v27);
  v29 = (char *)v21 + v27;
  v30 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  swift_bridgeObjectRetain();
  v66 = v30;
  v30(v28, v29, v69);
  v31 = *(int *)(v22 + 28);
  v32 = (_QWORD *)(v20 + v31);
  v33 = (_QWORD *)((char *)v21 + v31);
  v34 = type metadata accessor for Matrix2dPB(0);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    *v32 = *v33;
    *((_BYTE *)v32 + 8) = *((_BYTE *)v33 + 8);
    v32[2] = v33[2];
    v52 = *(int *)(v34 + 28);
    v65 = (char *)v32 + v52;
    v53 = (char *)v33 + v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66(v65, v53, v69);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_21:
  v54 = a3[10];
  v55 = (char *)(a1 + v54);
  v56 = (char *)(a2 + v54);
  v57 = type metadata accessor for ImageCalibrationDataPB(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (!v61)
    {
      v67((uint64_t)v55, (uint64_t)v56, v69);
      *(_QWORD *)&v55[*(int *)(v57 + 20)] = *(_QWORD *)&v56[*(int *)(v57 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v55, type metadata accessor for ImageCalibrationDataPB);
    goto LABEL_26;
  }
  if (v61)
  {
LABEL_26:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v55, v56, v69);
  *(_QWORD *)&v55[*(int *)(v57 + 20)] = *(_QWORD *)&v56[*(int *)(v57 + 20)];
  v62 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56);
  swift_retain();
  v62(v55, 0, 1, v57);
  return a1;
}

uint64_t initializeWithTake for PinchModelHandInputPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[9];
  v18 = (_DWORD *)(a1 + v17);
  v19 = (_DWORD *)(a2 + v17);
  v20 = type metadata accessor for HandPosePB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[2] = v19[2];
    v10((uint64_t)v18 + *(int *)(v20 + 24), (uint64_t)v19 + *(int *)(v20 + 24), v9);
    v23 = *(int *)(v20 + 28);
    v24 = (_QWORD *)((char *)v18 + v23);
    v25 = (_QWORD *)((char *)v19 + v23);
    v36 = (void (*)(char *, char *, uint64_t))v10;
    v26 = type metadata accessor for Matrix2dPB(0);
    v35 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(v25, 1, v26))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      *v24 = *v25;
      *((_BYTE *)v24 + 8) = *((_BYTE *)v25 + 8);
      v24[2] = v25[2];
      v36((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v24, 0, 1, v26);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    v10 = (void (*)(uint64_t, uint64_t, uint64_t))v36;
  }
  v28 = a3[10];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for ImageCalibrationDataPB(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v29, (uint64_t)v30, v9);
    *(_QWORD *)&v29[*(int *)(v31 + 20)] = *(_QWORD *)&v30[*(int *)(v31 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t assignWithTake for PinchModelHandInputPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v56 = *(_QWORD *)(v9 - 8);
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 40);
  v55(v7, v8, v9);
  v10 = a3[8];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for Coordinate3DPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  v57 = v9;
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate3DPB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v55((uint64_t)&v11[*(int *)(v13 + 28)], (uint64_t)&v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v19 = a3[9];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for HandPosePB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
      v54 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
      v54(&v20[*(int *)(v22 + 24)], &v21[*(int *)(v22 + 24)], v57);
      v27 = *(int *)(v22 + 28);
      v28 = &v20[v27];
      v29 = &v21[v27];
      v30 = type metadata accessor for Matrix2dPB(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v28 = *(_QWORD *)v29;
        v28[8] = v29[8];
        *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
        v54(&v28[*(int *)(v30 + 28)], &v29[*(int *)(v30 + 28)], v57);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_20;
    }
LABEL_13:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
LABEL_20:
    v34 = v57;
    goto LABEL_21;
  }
  if (v26)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for HandPosePB);
    goto LABEL_13;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  swift_bridgeObjectRelease();
  *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
  v34 = v57;
  v55((uint64_t)&v20[*(int *)(v22 + 24)], (uint64_t)&v21[*(int *)(v22 + 24)], v57);
  v35 = *(int *)(v22 + 28);
  v36 = (uint64_t)&v20[v35];
  v37 = &v21[v35];
  v38 = type metadata accessor for Matrix2dPB(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40((uint64_t)v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *(_BYTE *)(v36 + 8) = v37[8];
      *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v36 + *(int *)(v38 + 28), &v37[*(int *)(v38 + 28)], v57);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_21;
    }
    goto LABEL_31;
  }
  if (v42)
  {
    outlined destroy of Matrix3x3PB(v36, type metadata accessor for Matrix2dPB);
LABEL_31:
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v36, v37, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_21;
  }
  *(_QWORD *)v36 = *(_QWORD *)v37;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v36 + 8) = v37[8];
  *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
  swift_bridgeObjectRelease();
  v55(v36 + *(int *)(v38 + 28), (uint64_t)&v37[*(int *)(v38 + 28)], v57);
LABEL_21:
  v43 = a3[10];
  v44 = (char *)(a1 + v43);
  v45 = (char *)(a2 + v43);
  v46 = type metadata accessor for ImageCalibrationDataPB(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (!v50)
    {
      v55((uint64_t)v44, (uint64_t)v45, v34);
      *(_QWORD *)&v44[*(int *)(v46 + 20)] = *(_QWORD *)&v45[*(int *)(v46 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v44, type metadata accessor for ImageCalibrationDataPB);
    goto LABEL_26;
  }
  if (v50)
  {
LABEL_26:
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v44, v45, v34);
  *(_QWORD *)&v44[*(int *)(v46 + 20)] = *(_QWORD *)&v45[*(int *)(v46 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchModelHandInputPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8A4684(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 12);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[7];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v11 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        v12 = v14;
        v13 = a3[8];
      }
      else
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
        v11 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
        {
          v12 = v15;
          v13 = a3[9];
        }
        else
        {
          v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
          v11 = *(_QWORD *)(v12 - 8);
          v13 = a3[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PinchModelHandInputPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8A4784(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 12) = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[9];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PinchModelHandInputPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandPosePB?, (void (*)(uint64_t))type metadata accessor for HandPosePB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ImageCalibrationDataPB?, (void (*)(uint64_t))type metadata accessor for ImageCalibrationDataPB);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for PinchSyncSequencePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PinchSyncSequencePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PinchModelInferenceInputPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PinchModelInferenceInputPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PinchModelInferenceOutputPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PinchModelInferenceOutputPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PinchModelInferenceInputSequencePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PinchModelInferenceInputSequencePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PinchModelInferenceOutputSequencePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PinchModelInferenceOutputSequencePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for PinchModelFramePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8A4A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchModelFramePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8A4AB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t result;
  char *v24;
  void (*v25)(char *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41[32];
  uint64_t v42;

  v30 = a5;
  v31 = a8;
  v36 = a1;
  v37 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v38 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v34 = (char *)&v27 - v13;
  v39 = a4;
  MEMORY[0x24BDAC7A8](v14, v15);
  v33 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v27 - v19;
  v21 = dispatch thunk of Collection.count.getter();
  if (!v21)
    return static Array._allocateUninitialized(_:)();
  v22 = v21;
  v28 = v17;
  v42 = MEMORY[0x242637984](v39);
  v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v22);
  v39 = v20;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    v24 = v34;
    while (1)
    {
      v25 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v11 + 16))(v24);
      v25(v41, 0);
      v26 = v40;
      v36(v24, v38);
      if (v26)
        break;
      v40 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
        return v42;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v38, v30);
  }
  return result;
}

BOOL BitMaskFlag.query(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  v1 = *v0;
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v4 >= 0x40)
    v2 = 0;
  else
    v2 = 1 << v4;
  if (v4 > 0x40)
    v2 = 0;
  return (v2 & v1) != 0;
}

uint64_t BitMaskFlag.set(_:)()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  unint64_t v3;

  result = dispatch thunk of RawRepresentable.rawValue.getter();
  if (v3 >= 0x40)
    v2 = 0;
  else
    v2 = 1 << v3;
  if (v3 > 0x40)
    v2 = 0;
  *v0 |= v2;
  return result;
}

uint64_t BitMaskFlag.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;

  type metadata accessor for BitMaskFlag(0, a2, a3, a4);
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v11 >= 0x40)
    v8 = 0;
  else
    v8 = 1 << v11;
  if (v11 <= 0x40)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a5 = v9;
  return result;
}

uint64_t type metadata accessor for BitMaskFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BitMaskFlag);
}

uint64_t BitMaskFlag.clear(_:)()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  unint64_t v3;

  result = dispatch thunk of RawRepresentable.rawValue.getter();
  v2 = -1;
  if (v3 < 0x40)
    v2 = ~(1 << v3);
  if (v3 > 0x40)
    v2 = -1;
  *v0 &= v2;
  return result;
}

Swift::Bool __swiftcall BitMaskFlag.query(_:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = 1 << a1;
  if ((unint64_t)a1 >= 0x40)
    v2 = 0;
  if ((unint64_t)a1 > 0x40)
    v2 = 0;
  return (v2 & *v1) != 0;
}

uint64_t BitMaskFlag.enumerate()(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *TupleTypeMetadata2;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1[2];
  v3 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v7);
  v10 = &v17[-v9];
  v11 = *v1;
  MEMORY[0x2426378F4](v4, v3, v8);
  v18 = v4;
  v19 = v3;
  v20 = a1[4];
  v21 = v11;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in BitMaskFlag.enumerate(), (uint64_t)v17, AssociatedTypeWitness, TupleTypeMetadata2, MEMORY[0x24BEE4078], AssociatedConformanceWitness, MEMORY[0x24BEE40A8], v14);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v10, AssociatedTypeWitness);
  return v15;
}

uint64_t closure #1 in BitMaskFlag.enumerate()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;

  v12 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a6, a1, a3);
  type metadata accessor for BitMaskFlag(0, a3, a4, a5);
  result = dispatch thunk of RawRepresentable.rawValue.getter();
  if (v15 >= 0x40)
    v14 = 0;
  else
    v14 = 1 << v15;
  if (v15 > 0x40)
    v14 = 0;
  *(_BYTE *)(a6 + v12) = (v14 & a2) != 0;
  return result;
}

uint64_t partial apply for closure #1 in BitMaskFlag.enumerate()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in BitMaskFlag.enumerate()(a1, v2[5], v2[2], v2[3], v2[4], a2);
}

uint64_t associated type witness table accessor for AnyBitMask.MaskType : RawRepresentable in BitMaskFlag<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t protocol witness for AnyBitMask.init(_:) in conformance BitMaskFlag<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return BitMaskFlag.init(_:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t dispatch thunk of AnyBitMask.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnyBitMask.set(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AnyBitMask.clear(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AnyBitMask.query(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of AnyBitMask.enumerate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    outlined init with take of Any(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [CameraSource : Float].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource?, ImageData>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v45 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v44 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v21 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v22 = v21 | (v8 << 6);
      goto LABEL_28;
    }
    v23 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v23 >= v44)
      goto LABEL_40;
    v24 = *(_QWORD *)(v45 + 8 * v23);
    v25 = v8 + 1;
    if (!v24)
    {
      v25 = v8 + 2;
      if (v8 + 2 >= v44)
        goto LABEL_40;
      v24 = *(_QWORD *)(v45 + 8 * v25);
      if (!v24)
      {
        v25 = v8 + 3;
        if (v8 + 3 >= v44)
          goto LABEL_40;
        v24 = *(_QWORD *)(v45 + 8 * v25);
        if (!v24)
        {
          v25 = v8 + 4;
          if (v8 + 4 >= v44)
            goto LABEL_40;
          v24 = *(_QWORD *)(v45 + 8 * v25);
          if (!v24)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    v8 = v25;
LABEL_28:
    v27 = (__int128 *)(*(_QWORD *)(a1 + 56) + 192 * v22);
    v28 = v27[3];
    v30 = *v27;
    v29 = v27[1];
    v51 = v27[2];
    v52 = v28;
    v49 = v30;
    v50 = v29;
    v31 = v27[7];
    v33 = v27[4];
    v32 = v27[5];
    v55 = v27[6];
    v56 = v31;
    v53 = v33;
    v54 = v32;
    v34 = v27[11];
    v36 = v27[8];
    v35 = v27[9];
    v59 = v27[10];
    v60 = v34;
    v57 = v36;
    v58 = v35;
    outlined retain of ImageData((uint64_t)&v49);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraSource?);
    swift_dynamicCast();
    Hasher.init(_seed:)();
    if (v48 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Hashable.hash(into:)();
    }
    result = Hasher._finalize()();
    v37 = -1 << *(_BYTE *)(v2 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v6 + 8 * (v38 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v6 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v6 + 8 * v39);
      }
      while (v43 == -1);
      v9 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 16 * v9;
    *(_QWORD *)v10 = v46;
    *(_BYTE *)(v10 + 8) = v47;
    *(_BYTE *)(v10 + 9) = v48;
    v11 = (_OWORD *)(*(_QWORD *)(v2 + 56) + 192 * v9);
    v12 = v49;
    v13 = v50;
    v14 = v52;
    v11[2] = v51;
    v11[3] = v14;
    *v11 = v12;
    v11[1] = v13;
    v15 = v53;
    v16 = v54;
    v17 = v56;
    v11[6] = v55;
    v11[7] = v17;
    v11[4] = v15;
    v11[5] = v16;
    v18 = v57;
    v19 = v58;
    v20 = v60;
    v11[10] = v59;
    v11[11] = v20;
    v11[8] = v18;
    v11[9] = v19;
    ++*(_QWORD *)(v2 + 16);
  }
  v26 = v8 + 5;
  if (v8 + 5 >= v44)
  {
LABEL_40:
    swift_release();
    outlined consume of [CameraSource : Float].Iterator._Variant();
    return v2;
  }
  v24 = *(_QWORD *)(v45 + 8 * v26);
  if (v24)
  {
    v25 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v44)
      goto LABEL_40;
    v24 = *(_QWORD *)(v45 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Hungarian.Algorithm.findZeros()()
{
  uint64_t v0;
  _QWORD **v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = (_QWORD **)(v0 + 64);
  swift_beginAccess();
  *(_QWORD *)(v0 + 64) = MEMORY[0x24BEE4AF8];
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 88);
  if (v3 < 0)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = v0 + 16;
    while (v5 != v3)
    {
      v13 = v5 + 1;
      result = swift_beginAccess();
      for (i = 0; i != v3; ++i)
      {
        if (v4 >= *(_QWORD *)(*(_QWORD *)v6 + 16))
        {
          __break(1u);
          goto LABEL_17;
        }
        if (*(double *)(*(_QWORD *)v6 + 8 * v4 + 32) == 0.0)
        {
          swift_beginAccess();
          v9 = *v1;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v1 = v9;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
            *v1 = v9;
          }
          v12 = v9[2];
          v11 = v9[3];
          if (v12 >= v11 >> 1)
          {
            v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
            *v1 = v9;
          }
          v9[2] = v12 + 1;
          v8 = &v9[3 * v12];
          v8[4] = v5;
          v8[5] = i;
          v8[6] = v4;
          result = swift_endAccess();
        }
        ++v4;
      }
      ++v5;
      if (v13 == v3)
        return result;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

void specialized Hungarian.Algorithm.subtractMinima()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t i;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 88);
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (!v1)
    {
LABEL_41:
      specialized Hungarian.Algorithm.findZeros()();
      return;
    }
    v2 = v0 + 16;
    swift_beginAccess();
    v3 = 0;
    v4 = 0;
    v5 = 4;
    while (2)
    {
      if (v4 == v1)
        goto LABEL_51;
      v6 = v4 * v1;
      if ((unsigned __int128)(v4 * (__int128)v1) >> 64 != (v4 * v1) >> 63)
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      if ((v6 & 0x8000000000000000) != 0)
      {
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      v7 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      if (v6 >= v7)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v8 = *(_QWORD *)v2 + 32;
      v9 = *(double *)(v8 + 8 * v6);
      if (v1 == 1)
      {
LABEL_15:
        swift_beginAccess();
        v12 = *(_QWORD **)v2;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v2 = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        v14 = 0;
        ++v4;
        do
        {
          *(_QWORD *)v2 = v12;
          if (v3 < 0)
          {
            __break(1u);
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
          if ((unint64_t)(v3 + v14) >= v12[2])
            goto LABEL_43;
          *(double *)&v12[v5 + v14] = *(double *)&v12[v5 + v14] - v9;
          v12 = *(_QWORD **)v2;
          ++v14;
        }
        while (v1 != v14);
        swift_endAccess();
        v3 += v1;
        v5 += v1;
        if (v4 != v1)
          continue;
        v15 = 0;
LABEL_23:
        if (v15 == v1)
          goto LABEL_55;
        v16 = v12[2];
        if (v15 >= v16)
          goto LABEL_56;
        v17 = *(double *)&v12[v15 + 4];
        if (v1 != 1)
        {
          if (v1 < 2)
            goto LABEL_57;
          v18 = v15;
          for (i = 1; i != v1; ++i)
          {
            v20 = v18 + v1;
            if (__OFADD__(v18, v1))
              goto LABEL_49;
            if (v20 >= v16)
              goto LABEL_50;
            if (*(double *)&v12[v20 + 4] < v17)
              v17 = *(double *)&v12[v20 + 4];
            v18 += v1;
          }
        }
        swift_beginAccess();
        v12 = *(_QWORD **)v2;
        v21 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v2 = v12;
        if ((v21 & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        v22 = v15 + 1;
        v23 = v1;
        while (1)
        {
          *(_QWORD *)v2 = v12;
          if ((v15 & 0x8000000000000000) != 0)
            break;
          if (v15 >= v12[2])
            goto LABEL_47;
          *(double *)&v12[v15 + 4] = *(double *)&v12[v15 + 4] - v17;
          if (__OFADD__(v15, v1))
            goto LABEL_48;
          v12 = *(_QWORD **)v2;
          v15 += v1;
          if (!--v23)
          {
            swift_endAccess();
            v15 = v22;
            if (v22 != v1)
              goto LABEL_23;
            goto LABEL_41;
          }
        }
      }
      else
      {
        v10 = 1;
        while (1)
        {
          v11 = v6 + v10;
          if (__OFADD__(v6, v10))
            break;
          if (v11 >= v7)
            goto LABEL_45;
          ++v10;
          if (*(double *)(v8 + 8 * v11) < v9)
            v9 = *(double *)(v8 + 8 * v11);
          if (v1 == v10)
            goto LABEL_15;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
      }
      break;
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_58:
  __break(1u);
}

void specialized Hungarian.Algorithm.starZeros()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  unint64_t *i;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char v20;
  _QWORD *v21;
  char v22;
  _QWORD *v23;
  char v24;

  v1 = *(_QWORD *)(v0 + 88);
  if (v1 < 0)
  {
LABEL_47:
    __break(1u);
    return;
  }
  if (v1)
  {
    v2 = 0;
    v3 = (_QWORD **)(v0 + 48);
    v4 = (_QWORD **)(v0 + 56);
    while (1)
    {
      swift_beginAccess();
      v5 = *v3;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v3 = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
        *v3 = v5;
      }
      if (v2 >= v5[2])
        break;
      v5[v2 + 4] = -1;
      swift_endAccess();
      swift_beginAccess();
      v7 = *v4;
      v8 = swift_isUniquelyReferenced_nonNull_native();
      *v4 = v7;
      if ((v8 & 1) == 0)
      {
        v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        *v4 = v7;
      }
      if (v2 >= v7[2])
        goto LABEL_37;
      v7[v2 + 4] = -1;
      swift_endAccess();
      if (v1 == ++v2)
        goto LABEL_11;
    }
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_11:
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = v0 + 16;
    v12 = v0 + 56;
    v13 = v0 + 48;
    v14 = (char **)(v0 + 24);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    for (i = (unint64_t *)(v9 + 48); ; i += 3)
    {
      v16 = *i;
      if ((*i & 0x8000000000000000) != 0)
        break;
      if (v16 >= *(_QWORD *)(*(_QWORD *)v11 + 16))
        goto LABEL_39;
      if (*(double *)(*(_QWORD *)v11 + 8 * v16 + 32) == 0.0)
      {
        v17 = *(i - 2);
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_40;
        if (v17 >= *(_QWORD *)(*(_QWORD *)v12 + 16))
          goto LABEL_41;
        if ((*(_QWORD *)(*(_QWORD *)v12 + 8 * v17 + 32) & 0x8000000000000000) != 0)
        {
          v18 = *(i - 1);
          if ((v18 & 0x8000000000000000) != 0)
            goto LABEL_42;
          if (v18 >= *(_QWORD *)(*(_QWORD *)v13 + 16))
            goto LABEL_43;
          if ((*(_QWORD *)(*(_QWORD *)v13 + 8 * v18 + 32) & 0x8000000000000000) != 0)
          {
            swift_beginAccess();
            v19 = *v14;
            v20 = swift_isUniquelyReferenced_nonNull_native();
            *v14 = v19;
            if ((v20 & 1) == 0)
            {
              v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
              *v14 = v19;
            }
            if (v16 >= *((_QWORD *)v19 + 2))
              goto LABEL_44;
            v19[v16 + 32] = 2;
            swift_endAccess();
            swift_beginAccess();
            v21 = *(_QWORD **)v13;
            v22 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v13 = v21;
            if ((v22 & 1) == 0)
            {
              v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
              *(_QWORD *)v13 = v21;
            }
            if (v18 >= v21[2])
              goto LABEL_45;
            v21[v18 + 4] = v17;
            swift_endAccess();
            swift_beginAccess();
            v23 = *(_QWORD **)v12;
            v24 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v12 = v23;
            if ((v24 & 1) == 0)
            {
              v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
              *(_QWORD *)v12 = v23;
            }
            if (v17 >= v23[2])
              goto LABEL_46;
            v23[v17 + 4] = v18;
            swift_endAccess();
          }
        }
      }
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
}

uint64_t specialized Hungarian.Algorithm.coverColumns()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  swift_beginAccess();
  v1 = v0[8];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0 + 3;
    v4 = v0 + 4;
    swift_bridgeObjectRetain();
    result = swift_beginAccess();
    v6 = 0;
    v7 = (unint64_t *)(v1 + 48);
    while (1)
    {
      v8 = *v7;
      if ((*v7 & 0x8000000000000000) != 0)
        break;
      if (v8 >= *(_QWORD *)(*v3 + 16))
        goto LABEL_19;
      if (*(_BYTE *)(*v3 + v8 + 32) == 2)
      {
        v9 = *(v7 - 2);
        v10 = *(v7 - 1);
        swift_beginAccess();
        v11 = (_QWORD *)*v4;
        result = swift_isUniquelyReferenced_nonNull_native();
        *v4 = (uint64_t)v11;
        if ((result & 1) != 0)
        {
          if ((v10 & 0x8000000000000000) != 0)
            goto LABEL_14;
        }
        else
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
          v11 = (_QWORD *)result;
          *v4 = result;
          if ((v10 & 0x8000000000000000) != 0)
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            return v6 == v0[11];
          }
        }
        if (v10 >= v11[2])
          goto LABEL_20;
        v11[v10 + 4] = v9;
        result = swift_endAccess();
        if (__OFADD__(v6++, 1))
          goto LABEL_21;
      }
      v7 += 3;
      if (!--v2)
        goto LABEL_15;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
    v6 = 0;
    return v6 == v0[11];
  }
  return result;
}

uint64_t specialized Hungarian.Algorithm.primeUncoveredZero()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0 + 40;
    v4 = v0 + 32;
    v5 = (uint64_t *)(v0 + 24);
    v6 = v0 + 56;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    result = swift_beginAccess();
    v8 = (unint64_t *)(v1 + 48);
    while (1)
    {
      v9 = *(v8 - 2);
      if ((v9 & 0x8000000000000000) != 0)
        break;
      if (v9 >= *(_QWORD *)(*(_QWORD *)v3 + 16))
        goto LABEL_30;
      if ((*(_QWORD *)(*(_QWORD *)v3 + 8 * v9 + 32) & 0x8000000000000000) != 0)
      {
        v10 = *(v8 - 1);
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_31;
        if (v10 >= *(_QWORD *)(*(_QWORD *)v4 + 16))
          goto LABEL_32;
        if ((*(_QWORD *)(*(_QWORD *)v4 + 8 * v10 + 32) & 0x8000000000000000) != 0)
        {
          v11 = *v8;
          swift_beginAccess();
          v12 = *v5;
          result = swift_isUniquelyReferenced_nonNull_native();
          *v5 = v12;
          if ((result & 1) != 0)
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_37;
          }
          else
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
            v12 = result;
            *v5 = result;
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_37;
          }
          if (v11 >= *(_QWORD *)(v12 + 16))
            goto LABEL_33;
          *(_BYTE *)(v12 + v11 + 32) = 0;
          result = swift_endAccess();
          if (v9 >= *(_QWORD *)(*(_QWORD *)v6 + 16))
            goto LABEL_34;
          v13 = *(_QWORD *)(*(_QWORD *)v6 + 8 * v9 + 32);
          if ((v13 & 0x8000000000000000) != 0)
            goto LABEL_25;
          swift_beginAccess();
          v14 = *(_QWORD **)v4;
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v4 = v14;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            v14 = (_QWORD *)result;
            *(_QWORD *)v4 = result;
          }
          if (v13 >= v14[2])
            goto LABEL_35;
          v14[v13 + 4] = -1;
          swift_endAccess();
          swift_beginAccess();
          v15 = *(_QWORD **)v3;
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v3 = v15;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
            v15 = (_QWORD *)result;
            *(_QWORD *)v3 = result;
          }
          if (v9 >= v15[2])
            goto LABEL_36;
          v15[v9 + 4] = v10;
          result = swift_endAccess();
        }
      }
      v8 += 3;
      if (!--v2)
      {
        v9 = 0;
LABEL_25:
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t specialized Hungarian.Algorithm.traverseAlternatingPath(_:)(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t *v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  char v26;
  _QWORD *v27;
  char v28;
  _QWORD *v29;
  char v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;

  v9 = *(_QWORD *)(v4 + 88);
  v10 = 0x4000000000000000;
  if ((uint64_t)(v9 + 0x4000000000000000) < 0)
    goto LABEL_103;
  v3 = a3;
  v7 = a2;
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (2 * v9) & ~((uint64_t)(2 * v9) >> 63), 0, MEMORY[0x24BEE4AF8]);
  v8 = v6[2];
  v10 = v6[3];
  v5 = v8 + 1;
  if (v8 >= v10 >> 1)
LABEL_104:
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v5, 1, v6);
  v6[2] = v5;
  v6[v8 + 4] = v3;
  v3 = (unint64_t *)(v4 + 48);
  v5 = v4 + 24;
  swift_beginAccess();
  result = swift_beginAccess();
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_106:
    __break(1u);
    return result;
  }
  v38 = v4;
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 16) <= v7)
    goto LABEL_84;
LABEL_5:
  v12 = v7;
  while (1)
  {
    v4 = *(_QWORD *)(v10 + 8 * v12 + 32);
    if (v4 < 0)
      break;
    v13 = v4 * v9;
    v10 = (unsigned __int128)(v4 * (__int128)(uint64_t)v9) >> 64;
    if (v10 != (uint64_t)(v4 * v9) >> 63)
      goto LABEL_85;
    v7 = v13 + v12;
    if (__OFADD__(v13, v12))
      goto LABEL_86;
    v15 = v6[2];
    v14 = v6[3];
    v8 = v15 + 1;
    if (v15 >= v14 >> 1)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v6);
    v6[2] = v8;
    v10 = (unint64_t)&v6[v15];
    *(_QWORD *)(v10 + 32) = v7;
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_87;
    if (v9)
    {
      v7 = 0;
      v10 = *(_QWORD *)(*(_QWORD *)v5 + 16);
      while (1)
      {
        if (v9 == v7)
        {
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_82;
        if ((uint64_t)(v13 + v7) >= (uint64_t)v10)
          goto LABEL_83;
        if (!*(_BYTE *)(*(_QWORD *)v5 + v13 + 32 + v7))
          break;
        if (v9 == ++v7)
          goto LABEL_6;
      }
      v16 = v6[3];
      if (v8 >= v16 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v15 + 2, 1, v6);
      v6[2] = v15 + 2;
      v6[v8 + 4] = v7 + v9 * v4;
      v10 = *v3;
      if (v7 >= *(_QWORD *)(*v3 + 16))
      {
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      goto LABEL_5;
    }
LABEL_6:
    v10 = *v3;
    if (v12 >= *(_QWORD *)(*v3 + 16))
      goto LABEL_84;
  }
  v8 = v6[2];
  if (v8)
  {
    v17 = v6 + 4;
    swift_beginAccess();
    v4 = 1;
    do
    {
      v19 = *v17++;
      v18 = v19;
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_88;
      v10 = *(_QWORD *)v5;
      if (v18 >= *(_QWORD *)(*(_QWORD *)v5 + 16))
        goto LABEL_89;
      if (*(_BYTE *)(v10 + v18 + 32) == 2)
      {
        swift_beginAccess();
        v7 = *(_QWORD *)v5;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v5 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          *(_QWORD *)v5 = v7;
        }
        v10 = *(_QWORD *)(v7 + 16);
        if (v18 >= v10)
          goto LABEL_96;
        *(_BYTE *)(v7 + v18 + 32) = 1;
      }
      else
      {
        swift_beginAccess();
        v7 = *(_QWORD *)v5;
        v21 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v5 = v7;
        if ((v21 & 1) == 0)
        {
          v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          *(_QWORD *)v5 = v7;
        }
        v10 = *(_QWORD *)(v7 + 16);
        if (v18 >= v10)
          goto LABEL_97;
        *(_BYTE *)(v7 + v18 + 32) = 2;
      }
      swift_endAccess();
    }
    while (--v8);
  }
  result = swift_bridgeObjectRelease();
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_106;
  if (v9)
  {
    v6 = (_QWORD *)(v38 + 56);
    v7 = v38 + 32;
    v8 = v38 + 40;
    v4 = -(uint64_t)v9;
    v22 = 4;
    do
    {
      swift_beginAccess();
      v23 = (_QWORD *)*v3;
      v24 = swift_isUniquelyReferenced_nonNull_native();
      *v3 = (unint64_t)v23;
      if ((v24 & 1) == 0)
      {
        v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
        *v3 = (unint64_t)v23;
      }
      v9 = v22 - 4;
      v10 = v23[2];
      if (v22 - 4 >= v10)
        goto LABEL_90;
      v23[v22] = -1;
      swift_endAccess();
      swift_beginAccess();
      v25 = (_QWORD *)*v6;
      v26 = swift_isUniquelyReferenced_nonNull_native();
      *v6 = v25;
      if ((v26 & 1) == 0)
      {
        v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
        *v6 = v25;
      }
      v10 = v25[2];
      if (v9 >= v10)
        goto LABEL_91;
      v25[v22] = -1;
      swift_endAccess();
      swift_beginAccess();
      v27 = *(_QWORD **)v7;
      v28 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v7 = v27;
      if ((v28 & 1) == 0)
      {
        v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
        *(_QWORD *)v7 = v27;
      }
      v10 = v27[2];
      if (v9 >= v10)
        goto LABEL_92;
      v27[v22] = -1;
      swift_endAccess();
      swift_beginAccess();
      v29 = *(_QWORD **)v8;
      v30 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v8 = v29;
      if ((v30 & 1) == 0)
      {
        v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        *(_QWORD *)v8 = v29;
      }
      v10 = v29[2];
      if (v9 >= v10)
        goto LABEL_93;
      v29[v22] = -1;
      swift_endAccess();
      ++v22;
    }
    while (v4 + v22 != 4);
  }
  result = swift_beginAccess();
  v6 = *(_QWORD **)(v38 + 64);
  v8 = v6[2];
  if (v8)
  {
    v4 = v38 + 56;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v31 = v6 + 6;
    v9 = 1;
    while (1)
    {
      v32 = *v31;
      if ((*v31 & 0x8000000000000000) != 0)
        goto LABEL_94;
      v10 = *(_QWORD *)v5;
      if (v32 >= *(_QWORD *)(*(_QWORD *)v5 + 16))
        goto LABEL_95;
      v10 = *(unsigned __int8 *)(v10 + v32 + 32);
      if ((_DWORD)v10)
      {
        if ((_DWORD)v10 != 2)
          goto LABEL_59;
        v33 = *(v31 - 2);
        v34 = *(v31 - 1);
        swift_beginAccess();
        v7 = *v3;
        v35 = swift_isUniquelyReferenced_nonNull_native();
        *v3 = v7;
        if ((v35 & 1) != 0)
        {
          if ((v34 & 0x8000000000000000) != 0)
            goto LABEL_101;
        }
        else
        {
          v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v7);
          *v3 = v7;
          if ((v34 & 0x8000000000000000) != 0)
            goto LABEL_101;
        }
        v10 = *(_QWORD *)(v7 + 16);
        if (v34 >= v10)
          goto LABEL_98;
        *(_QWORD *)(v7 + 8 * v34 + 32) = v33;
        swift_endAccess();
        swift_beginAccess();
        v7 = *(_QWORD *)v4;
        v36 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v4 = v7;
        if ((v36 & 1) != 0)
        {
          if ((v33 & 0x8000000000000000) != 0)
            goto LABEL_102;
        }
        else
        {
          v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v7);
          *(_QWORD *)v4 = v7;
          if ((v33 & 0x8000000000000000) != 0)
            goto LABEL_102;
        }
        v10 = *(_QWORD *)(v7 + 16);
        if (v33 >= v10)
          goto LABEL_99;
        *(_QWORD *)(v7 + 8 * v33 + 32) = v34;
      }
      else
      {
        swift_beginAccess();
        v7 = *(_QWORD *)v5;
        v37 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v5 = v7;
        if ((v37 & 1) == 0)
        {
          v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          *(_QWORD *)v5 = v7;
        }
        v10 = *(_QWORD *)(v7 + 16);
        if (v32 >= v10)
          goto LABEL_100;
        *(_BYTE *)(v7 + v32 + 32) = 1;
      }
      swift_endAccess();
LABEL_59:
      v31 += 3;
      if (!--v8)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void specialized Hungarian.Algorithm.adjustUncoveredAndDoubleCovered()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char v21;
  double *v22;
  double v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 88);
  if (v1 < 0)
    goto LABEL_60;
  if (!v1)
  {
LABEL_45:
    specialized Hungarian.Algorithm.findZeros()();
    return;
  }
  v2 = (uint64_t *)(v26 + 40);
  v3 = v26 + 32;
  v4 = v26 + 16;
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v5 = 0;
  v6 = *(_QWORD *)(v26 + 40);
  v7 = v6 + 32;
  v8 = *(_QWORD *)(v6 + 16);
  v9 = INFINITY;
  do
  {
    if (v5 == v1)
      goto LABEL_56;
    if (v5 == v8)
      goto LABEL_57;
    if ((*(_QWORD *)(v7 + 8 * v5) & 0x8000000000000000) != 0)
    {
      v10 = v5 * v1;
      if ((unsigned __int128)(v5 * (__int128)v1) >> 64 == (v5 * v1) >> 63)
      {
        v11 = 0;
        while (*(_QWORD *)(*(_QWORD *)v3 + 16) != v11)
        {
          if ((*(_QWORD *)(*(_QWORD *)v3 + 32 + 8 * v11) & 0x8000000000000000) != 0)
          {
            v13 = v10 + v11;
            if (__OFADD__(v10, v11))
              goto LABEL_50;
            if ((v13 & 0x8000000000000000) != 0)
              goto LABEL_51;
            if (v13 >= *(_QWORD *)(*(_QWORD *)v4 + 16))
            {
              __break(1u);
              goto LABEL_19;
            }
            v12 = *(_QWORD *)v4 + 8 * v13;
            if (*(double *)(v12 + 32) < v9)
              v9 = *(double *)(v12 + 32);
          }
          if (v1 == ++v11)
            goto LABEL_4;
        }
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
      }
      __break(1u);
      goto LABEL_59;
    }
LABEL_4:
    ++v5;
  }
  while (v5 != v1);
LABEL_19:
  v14 = 0;
  v15 = 0;
LABEL_21:
  if (v15 != v1)
  {
    v16 = v15 + 1;
    swift_beginAccess();
    swift_beginAccess();
    v17 = 0;
    while (1)
    {
      if (v17 >= *(_QWORD *)(*(_QWORD *)v3 + 16))
        goto LABEL_47;
      v18 = *v2;
      v19 = *(_QWORD *)(*v2 + 16);
      if ((*(_QWORD *)(*(_QWORD *)v3 + 8 * v17 + 32) & 0x8000000000000000) != 0)
      {
        if (v15 >= v19)
          goto LABEL_54;
        if ((*(_QWORD *)(v18 + 8 * v15 + 32) & 0x8000000000000000) == 0)
          goto LABEL_38;
        swift_beginAccess();
        v24 = *(_QWORD **)v4;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v4 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_44;
        }
        else
        {
          v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          *(_QWORD *)v4 = v24;
          if ((v14 & 0x8000000000000000) != 0)
          {
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
        }
        if (v14 >= v24[2])
          goto LABEL_55;
        v22 = (double *)&v24[v14];
        v23 = v22[4] - v9;
      }
      else
      {
        if (v15 >= v19)
          goto LABEL_49;
        if ((*(_QWORD *)(v18 + 8 * v15 + 32) & 0x8000000000000000) != 0)
          goto LABEL_38;
        swift_beginAccess();
        v20 = *(_QWORD **)v4;
        v21 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v4 = v20;
        if ((v21 & 1) != 0)
        {
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_52;
        }
        else
        {
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
          *(_QWORD *)v4 = v20;
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_52;
        }
        if (v14 >= v20[2])
          goto LABEL_53;
        v22 = (double *)&v20[v14];
        v23 = v9 + v22[4];
      }
      v22[4] = v23;
      swift_endAccess();
LABEL_38:
      if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_48;
      ++v17;
      ++v14;
      if (v1 == v17)
      {
        ++v15;
        if (v16 == v1)
          goto LABEL_45;
        goto LABEL_21;
      }
    }
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
}

uint64_t static TrackingProcessingFunctions.UvOFilterDA(handData:trackingInfos:config:serializeInternalData:isN301:)@<X0>(_QWORD *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, float *a4@<X3>, int a5@<W4>, __int32 a6@<W5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t result;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  size_t v71;
  uint64_t isStackAllocationSafe;
  uint64_t v73;
  unint64_t *v74;
  void *v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  _OWORD *v87;
  __int128 v88;
  float32x4_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  float v100;
  unsigned int v101;
  uint64_t v102;
  char v103;
  float v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  Swift::String v132;
  Swift::String v133;
  uint64_t v134;
  void *v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  NSObject *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  char v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  __int128 *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  unsigned int v174;
  float v175;
  int v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  float32x4_t v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  float v184;
  float v185;
  int v186;
  uint64_t v187;
  float v188;
  char v189;
  char v190;
  uint64_t v191;
  char v192;
  float32x4_t v193;
  uint64_t v194;
  float32x4_t *v195;
  double v196;
  float32x4_t v197;
  uint64_t v198;
  float32x2_t v199;
  float32x2_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  int *v205;
  uint64_t v206;
  int v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  float *v221;
  float v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  int *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  BOOL v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  uint64_t v262;
  int v263;
  char *v264;
  _QWORD *v265;
  char *v266;
  char *v267;
  _QWORD *v268;
  char *v269;
  __int128 v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  void *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  float *v294;
  float32x4_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  __int128 v300;
  id v301[3];
  _QWORD *v302;
  unint64_t v303;
  char *v304;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  __int128 v309;
  float32x4_t v310;
  _OWORD v311[9];
  __int128 v312;
  float32x4_t v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  _OWORD v317[51];
  _OWORD v318[20];
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  _OWORD v324[2];
  _QWORD v325[40];
  _BYTE v326[48];
  _OWORD v327[2];
  uint64_t v328;
  uint64_t v329;

  v274 = a5;
  v294 = a4;
  v278 = a1;
  v279 = a7;
  v10 = 0;
  v329 = *MEMORY[0x24BDAC8D0];
  v11 = type metadata accessor for Date();
  v291 = *(_QWORD *)(v11 - 8);
  v292 = v11;
  MEMORY[0x24BDAC7A8](v11, v12);
  v290 = (char *)&v258 - ((unint64_t)(v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v297 = v13;
  MEMORY[0x24BDAC7A8](v14, v15);
  v298 = (char *)&v258 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v17, v18);
  v280 = (char *)&v258 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v21);
  v281 = (char *)&v258 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v23, v24);
  v293 = (char *)&v258 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v306 = type metadata accessor for HandDescriptor();
  v26 = *(_QWORD *)(v306 - 8);
  MEMORY[0x24BDAC7A8](v306, v27);
  v273 = (uint64_t)&v258 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29, v30);
  v272 = (uint64_t)&v258 - v31;
  MEMORY[0x24BDAC7A8](v32, v33);
  v276 = (uint64_t)&v258 - v34;
  MEMORY[0x24BDAC7A8](v35, v36);
  v275 = (uint64_t)&v258 - v37;
  MEMORY[0x24BDAC7A8](v38, v39);
  v296 = (uint64_t)&v258 - v40;
  MEMORY[0x24BDAC7A8](v41, v42);
  v44 = (char *)&v258 - v43;
  MEMORY[0x24BDAC7A8](v45, v46);
  v302 = (uint64_t *)((char *)v258.i64 - v47);
  MEMORY[0x24BDAC7A8](v48, v49);
  v301[0] = (char *)&v258 - v50;
  MEMORY[0x24BDAC7A8](v51, v52);
  v54 = (char *)&v258 - v53;
  v55 = *a2;
  v56 = (uint64_t)a2[25];
  v277 = *a3;
  v285 = a3[1];
  v286 = v56;
  v57 = MEMORY[0x24BEE4AF8];
  v308 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0, MEMORY[0x24BEE4AF8]);
  v289 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0, v57);
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0, v57);
  v282 = result;
  v59 = (_QWORD *)*((_QWORD *)v55 + 2);
  v299 = v26;
  v305 = v59;
  if (v59)
  {
    v295.i32[0] = a6;
    v303 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v304 = &v55[v303];
    v60 = *(_QWORD *)(v26 + 72);
    v288 = v55;
    swift_bridgeObjectRetain();
    v61 = 0;
    v300 = xmmword_23D9A70A0;
    while (1)
    {
      v307 = v61;
      outlined init with copy of HandDescriptor((uint64_t)&v304[v60 * (_QWORD)v61], (uint64_t)v54);
      v67 = *(_QWORD *)&v54[*(int *)(v306 + 72)];
      v68 = *(_BYTE *)(v67 + 32);
      v69 = v68 & 0x3F;
      v70 = (unint64_t)((1 << v68) + 63) >> 6;
      v71 = 8 * v70;
      isStackAllocationSafe = swift_bridgeObjectRetain();
      if (v69 <= 0xD
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x24BDAC7A8](isStackAllocationSafe, v73);
        bzero((char *)&v258 - ((v71 + 15) & 0x3FFFFFFFFFFFFFF0), v71);
        v74 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)((char *)&v258 - ((v71 + 15) & 0x3FFFFFFFFFFFFFF0)), v70, v67);
      }
      else
      {
        v75 = (void *)swift_slowAlloc();
        bzero(v75, v71);
        v74 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v75, v70, v67);
        MEMORY[0x242638D4C](v75, -1, -1);
      }
      swift_bridgeObjectRelease();
      v76 = v74[8];
      v77 = *((_BYTE *)v74 + 32);
      v78 = 1 << v77;
      if (v76)
      {
        v79 = 0;
      }
      else
      {
        v101 = v77 & 0x3F;
        if (v101 < 7)
          goto LABEL_3;
        v76 = v74[9];
        if (v76)
        {
          v79 = 1;
        }
        else
        {
          if (v101 < 8)
            goto LABEL_3;
          v76 = v74[10];
          if (v76)
          {
            v79 = 2;
          }
          else
          {
            v76 = v74[11];
            if (v76)
            {
              v79 = 3;
            }
            else
            {
              v111 = 0;
              v112 = (unint64_t)(v78 + 63) >> 6;
              if (v112 <= 4)
                v112 = 4;
              v113 = v112 - 4;
              do
              {
                if (v113 == v111)
                  goto LABEL_3;
                v76 = v74[v111++ + 12];
              }
              while (!v76);
              v79 = v111 + 3;
            }
          }
        }
      }
      v80 = __clz(__rbit64(v76));
      v81 = v80 + (v79 << 6);
      if (v81 == v78)
        goto LABEL_3;
      if (v81 < 0 || v81 >= v78)
      {
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }
      if (((*(unint64_t *)((char *)v74 + (((unint64_t)v81 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v80) & 1) == 0)
        goto LABEL_150;
      if (!v74[2]
        || (v82 = v74[6] + 16 * v81,
            v83 = *(_QWORD *)v82,
            v84 = *(_BYTE *)(v82 + 8),
            v85 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v82, v84),
            (v86 & 1) == 0))
      {
LABEL_3:
        swift_release();
        outlined init with copy of HandDescriptor((uint64_t)v54, (uint64_t)v44);
        v63 = *(_QWORD *)(v308 + 16);
        v62 = *(_QWORD *)(v308 + 24);
        if (v63 >= v62 >> 1)
          v308 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, v308);
        v64 = v308;
        *(_QWORD *)(v308 + 16) = v63 + 1;
        v65 = v64 + v303 + v63 * v60;
        v66 = v44;
        goto LABEL_6;
      }
      v87 = (_OWORD *)(v74[7] + 112 * v85);
      v89 = *((float32x4_t *)v87 + 1);
      v88 = v87[2];
      v312 = *v87;
      v313 = v89;
      v314 = v88;
      v90 = v87[3];
      v91 = v87[4];
      v92 = v87[5];
      *(_OWORD *)((char *)v317 + 9) = *(_OWORD *)((char *)v87 + 89);
      v316 = v91;
      v317[0] = v92;
      v315 = v90;
      outlined retain of DetectionResult((uint64_t)&v312);
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, [SIMD2<Float>])>);
      v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = v300;
      *(_QWORD *)(v93 + 32) = v83;
      *(_BYTE *)(v93 + 40) = v84;
      *(_QWORD *)(v93 + 48) = v313.i64[0];
      v94 = specialized Dictionary.init(dictionaryLiteral:)(v93);
      v95 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v286);
      v96 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      swift_bridgeObjectRetain();
      v97 = specialized Sequence.reduce<A>(into:_:)(v96, v94, v95, (uint64_t)v294);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v97 + 16))
      {
        v98 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
        if ((v99 & 1) != 0)
        {
          v100 = fminf(*(float *)(*(_QWORD *)(v97 + 56) + 4 * v98), 360.0);
          if (!*(_QWORD *)(v97 + 16))
            goto LABEL_35;
        }
        else
        {
          v100 = 360.0;
          if (!*(_QWORD *)(v97 + 16))
            goto LABEL_35;
        }
        v102 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
        if ((v103 & 1) != 0)
        {
          v104 = *(float *)(*(_QWORD *)(v97 + 56) + 4 * v102);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v104 < v100)
            v100 = v104;
          goto LABEL_36;
        }
      }
      else
      {
        v100 = 360.0;
      }
LABEL_35:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_36:
      if (v294[1] >= v100)
      {
        outlined init with copy of HandDescriptor((uint64_t)v54, (uint64_t)v302);
        v109 = *(_QWORD *)(v308 + 16);
        v108 = *(_QWORD *)(v308 + 24);
        if (v109 >= v108 >> 1)
          v308 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1, v109 + 1, 1, v308);
        v110 = v308;
        *(_QWORD *)(v308 + 16) = v109 + 1;
        v66 = v302;
        v65 = v110 + v303 + v109 * v60;
      }
      else
      {
        outlined init with copy of HandDescriptor((uint64_t)v54, (uint64_t)v301[0]);
        v105 = v289;
        v107 = *(_QWORD *)(v289 + 16);
        v106 = *(_QWORD *)(v289 + 24);
        if (v107 >= v106 >> 1)
          v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v106 > 1, v107 + 1, 1, v289);
        *(_QWORD *)(v105 + 16) = v107 + 1;
        v289 = v105;
        v65 = v105 + v303 + v107 * v60;
        v66 = v301[0];
      }
LABEL_6:
      outlined init with take of HandDescriptor((uint64_t)v66, v65);
      outlined destroy of HandDescriptor((uint64_t)v54);
      v61 = (_QWORD *)((char *)v307 + 1);
      if ((_QWORD *)((char *)v307 + 1) == v305)
      {
        result = swift_bridgeObjectRelease();
        LOBYTE(a6) = v295.i8[0];
        break;
      }
    }
  }
  v114 = v285;
  v115 = MEMORY[0x24BEE4AF8];
  v304 = *(char **)(v285 + 16);
  if (v304)
  {
    v302 = &v325[4];
    v303 = v285 + 32;
    v268 = v281 + 144;
    v269 = v281 + 16;
    v266 = v280 + 16;
    v267 = v281 + 160;
    v264 = v280 + 160;
    v265 = v280 + 144;
    v288 = v297 + 7;
    swift_bridgeObjectRetain();
    v116 = 0;
    v297 = (char *)0x800000023D9C7DA0;
    v284 = (unint64_t)"kingProcessingFunctions";
    v287 = 0x800000023D9D5850;
    v270 = xmmword_23D9A70A0;
    v283 = (void *)0x800000023D9C7DC0;
    v271 = a6 & 1;
    v117 = (_QWORD *)v115;
    v118 = (uint64_t)v293;
    while (1)
    {
      memcpy(v325, (const void *)(v303 + 320 * v116), 0x138uLL);
      outlined retain of (TrackingInfo, Int)((uint64_t)v325);
      outlined retain of (TrackingInfo, Int)((uint64_t)v325);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v117[2] + 1, 1, v117);
      v120 = v117[2];
      v119 = v117[3];
      if (v120 >= v119 >> 1)
        v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v119 > 1), v120 + 1, 1, v117);
      outlined init with take of ImageData?((uint64_t)v302, (uint64_t)v326, &demangling cache variable for type metadata for TrackingPrediction?);
      v121 = v325[2];
      v117[2] = v120 + 1;
      v307 = v117;
      v122 = v117 + 4;
      memcpy(&v122[40 * v120], v325, 0x138uLL);
      outlined init with take of ImageData?((uint64_t)v326, (uint64_t)v327, &demangling cache variable for type metadata for TrackingPrediction?);
      if (!v328)
      {
        *(_QWORD *)&v312 = 0;
        *((_QWORD *)&v312 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        strcpy((char *)&v312, "TrackingInfo ");
        HIWORD(v312) = -4864;
        *(_QWORD *)&v319 = v121;
        v128._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v128);
        swift_bridgeObjectRelease();
        v129._countAndFlagsBits = 0xD000000000000018;
        v129._object = v297;
        String.append(_:)(v129);
        *((_QWORD *)&v318[1] + 1) = MEMORY[0x24BEE0D00];
        v318[0] = v312;
        v130 = type metadata accessor for HandyLoggerNeo();
        if (static HandyLoggerNeo._currentLogLevel <= 4)
        {
          v134 = v130;
          v305 = (_QWORD *)v116;
          v295.i64[0] = v10;
          v135 = (void *)MEMORY[0x2426372E8](0xD00000000000006FLL, v287);
          v136 = objc_msgSend(v135, sel_lastPathComponent);

          v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(_QWORD *)&v300 = v138;

          v139 = v298;
          static Date.now.getter();
          if (one-time initialization token for _dispatchQ != -1)
            swift_once();
          v301[0] = (id)static HandyLoggerNeo._dispatchQ;
          v141 = v290;
          v140 = v291;
          v142 = v292;
          (*(void (**)(char *, char *, uint64_t))(v291 + 16))(v290, v139, v292);
          outlined init with copy of Any((uint64_t)v318, (uint64_t)&v319);
          v143 = (*(unsigned __int8 *)(v140 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
          v144 = (unint64_t)&v288[v143] & 0xFFFFFFFFFFFFFFF8;
          v145 = (v144 + 39) & 0xFFFFFFFFFFFFFFF8;
          v146 = swift_allocObject();
          *(_DWORD *)(v146 + 16) = 4;
          *(_QWORD *)(v146 + 24) = v134;
          *(_OWORD *)(v146 + 32) = 0u;
          *(_OWORD *)(v146 + 48) = 0u;
          *(_DWORD *)(v146 + 64) = 1;
          v147 = v300;
          *(_QWORD *)(v146 + 72) = v137;
          *(_QWORD *)(v146 + 80) = v147;
          *(_QWORD *)(v146 + 88) = 91;
          (*(void (**)(unint64_t, char *, uint64_t))(v140 + 32))(v146 + v143, v141, v142);
          outlined init with take of Any(&v319, (_OWORD *)(v146 + v144));
          v115 = MEMORY[0x24BEE4AF8];
          *(_QWORD *)(v146 + v145) = MEMORY[0x24BEE4AF8];
          v148 = swift_allocObject();
          *(_QWORD *)(v148 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
          *(_QWORD *)(v148 + 24) = v146;
          *(_QWORD *)&v314 = _sIg_Ieg_TRTA_0;
          *((_QWORD *)&v314 + 1) = v148;
          *(_QWORD *)&v312 = MEMORY[0x24BDAC760];
          *((_QWORD *)&v312 + 1) = 1107296256;
          v313.i64[0] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
          v313.i64[1] = (uint64_t)&block_descriptor_18;
          v149 = _Block_copy(&v312);
          v150 = v301[0];
          swift_retain();
          swift_release();
          dispatch_sync(v150, v149);

          _Block_release(v149);
          LOBYTE(v149) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v149 & 1) != 0)
            goto LABEL_151;
          (*(void (**)(char *, uint64_t))(v140 + 8))(v298, v142);
          swift_release();
          outlined release of TrackingInfo((uint64_t)v325);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v318);
          v10 = v295.i64[0];
          goto LABEL_71;
        }
        outlined release of TrackingInfo((uint64_t)v325);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v318);
        goto LABEL_132;
      }
      v300 = v327[0];
      *(_OWORD *)v301 = v327[1];
      outlined retain of (TrackingInfo, Int)((uint64_t)v325);
      v123 = swift_bridgeObjectRetain();
      v124 = specialized _ArrayProtocol.filter(_:)(v123, (uint64_t)v325);
      outlined release of TrackingInfo((uint64_t)v325);
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v124 + 16))
      {
        swift_bridgeObjectRelease();
        outlined release of TrackingInfo((uint64_t)v325);
        goto LABEL_132;
      }
      v305 = (_QWORD *)v116;
      v125 = v299;
      v126 = (*(unsigned __int8 *)(v299 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v299 + 80);
      outlined init with copy of HandDescriptor(v124 + v126, v118);
      v127 = v306;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v125 + 56))(v118, 0, 1, v306);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v118, 1, v127) == 1)
      {
        outlined release of TrackingInfo((uint64_t)v325);
        outlined destroy of HandDescriptor?(v118);
        goto LABEL_131;
      }
      v131 = v296;
      outlined init with take of HandDescriptor(v118, v296);
      if ((*(_BYTE *)(v131 + 192) & 1) != 0)
      {
        *(_QWORD *)&v312 = 0;
        *((_QWORD *)&v312 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v312 = 0x20646E6148;
        *((_QWORD *)&v312 + 1) = 0xE500000000000000;
        *(_QWORD *)&v318[0] = *(_QWORD *)(v131 + 144);
        v132._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v132);
        swift_bridgeObjectRelease();
        v133._countAndFlagsBits = 0xD000000000000019;
        v133._object = v283;
        String.append(_:)(v133);
        v313.i64[1] = MEMORY[0x24BEE0D00];
        specialized static HLog.E(file:function:line:_:_:)(0xD00000000000006FLL, v284 | 0x8000000000000000, 104, (uint64_t)&v312, v115);
        outlined release of TrackingInfo((uint64_t)v325);
        outlined destroy of HandDescriptor(v131);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v312);
        goto LABEL_131;
      }
      v151 = *(_QWORD *)(v131 + 176);
      v295.i64[0] = *(_QWORD *)(v131 + 184);
      v152 = swift_bridgeObjectRetain();
      v154 = specialized _NativeDictionary.filter(_:)(v152, v153);
      swift_bridgeObjectRelease();
      v155 = *((_BYTE *)v154 + 32);
      v156 = 1 << v155;
      v157 = v154[8];
      if (v157)
      {
        v158 = 0;
        v159 = v296;
      }
      else
      {
        v174 = v155 & 0x3F;
        v159 = v296;
        if (v174 < 7)
          goto LABEL_129;
        v157 = v154[9];
        if (v157)
        {
          v158 = 1;
        }
        else
        {
          if (v174 < 8)
          {
LABEL_129:
            outlined destroy of HandDescriptor(v159);
            swift_release();
LABEL_130:
            outlined release of TrackingInfo((uint64_t)v325);
            goto LABEL_131;
          }
          v157 = v154[10];
          if (v157)
          {
            v158 = 2;
          }
          else
          {
            v157 = v154[11];
            if (v157)
            {
              v158 = 3;
            }
            else
            {
              v243 = 0;
              v244 = (unint64_t)(v156 + 63) >> 6;
              if (v244 <= 4)
                v244 = 4;
              v245 = v244 - 4;
              do
              {
                if (v245 == v243)
                  goto LABEL_129;
                v157 = v154[v243++ + 12];
              }
              while (!v157);
              v158 = v243 + 3;
            }
          }
        }
      }
      v160 = __clz(__rbit64(v157));
      v161 = v160 + (v158 << 6);
      if (v161 == v156)
        goto LABEL_129;
      if (v161 < 0 || v161 >= v156)
        goto LABEL_152;
      if (((*(unint64_t *)((char *)v154 + (((unint64_t)v161 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v160) & 1) == 0)
        goto LABEL_153;
      if (!v154[2]
        || (v162 = v154[6] + 16 * v161,
            v163 = *(_QWORD *)v162,
            v164 = *(_BYTE *)(v162 + 8),
            v165 = *(_QWORD *)v162,
            v263 = v164,
            v166 = specialized __RawDictionaryStorage.find<A>(_:)(v165, v164),
            (v167 & 1) == 0))
      {
        swift_release();
        outlined destroy of HandDescriptor(v296);
        goto LABEL_130;
      }
      v168 = (__int128 *)(v154[7] + 112 * v166);
      v170 = v168[1];
      v169 = v168[2];
      v319 = *v168;
      v320 = v170;
      v321 = v169;
      v171 = v168[3];
      v172 = v168[4];
      v173 = v168[5];
      *(_OWORD *)((char *)v324 + 9) = *(__int128 *)((char *)v168 + 89);
      v324[0] = v173;
      v323 = v172;
      v322 = v171;
      outlined retain of DetectionResult((uint64_t)&v319);
      swift_release();
      if ((v323 & 1) != 0)
      {
        outlined destroy of HandDescriptor(v296);
        outlined release of DetectionResult((uint64_t)&v319);
        goto LABEL_130;
      }
      v262 = v163;
      v175 = *((float *)&v322 + 3);
      v176 = BYTE4(v325[3]);
      v177.i64[0] = v151;
      v177.i64[1] = v295.i64[0];
      v178 = *(float *)&v325[3];
      v179 = vsubq_f32(v177, *(float32x4_t *)v301);
      v180 = vmulq_f32(v179, v179);
      v181 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v180, 2), vaddq_f32(v180, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v180.f32, 1))).f32[0]);
      v312 = v300;
      v313 = *(float32x4_t *)v301;
      v182 = v286;
      v183 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v286);
      specialized static TrackingUtils.distanceToCameraOrigin(handCenter:images:isN301:)((uint64_t)&v312, v183, v271);
      v185 = v184;
      swift_bridgeObjectRelease();
      if ((BYTE12(v324[0]) & 1) != 0)
      {
        v186 = v176;
        v187 = v10;
      }
      else
      {
        if (!*(_QWORD *)(v182 + 16))
          goto LABEL_154;
        v188 = *((float *)v324 + 2);
        v189 = v263;
        specialized __RawDictionaryStorage.find<A>(_:)(v262, v263);
        if ((v190 & 1) == 0)
          goto LABEL_155;
        ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v311);
        if (!*(_QWORD *)(v182 + 16))
          goto LABEL_156;
        v259 = (float32x4_t)v311[0];
        v260 = (float32x4_t)v311[1];
        v295 = (float32x4_t)v311[2];
        v261 = (float32x4_t)v311[3];
        v191 = specialized __RawDictionaryStorage.find<A>(_:)(v262, v189);
        if ((v192 & 1) == 0)
          goto LABEL_157;
        v193 = vaddq_f32(v261, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v259, *(float *)v301), v260, (float32x2_t)v301[0], 1), v295, *(float32x4_t *)v301, 2));
        v193.i32[3] = v258.i32[3];
        v295 = v193;
        v194 = *(_QWORD *)(v182 + 56) + 192 * v191;
        v195 = *(float32x4_t **)(v194 + 64);
        v196 = *(double *)(v194 + 184);
        LOBYTE(v312) = 0;
        swift_beginAccess();
        v197 = v195[6];
        v260 = v195[5];
        v261 = v197;
        v259 = v195[4];
        swift_beginAccess();
        v258 = v195[7];
        swift_beginAccess();
        if (v195[1].i8[8])
          v198 = v195[1].i64[0] != 0;
        else
          v198 = -1;
        objc_msgSend((id)objc_opt_self(), sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v198, &v312, *(double *)v295.i64, *(double *)v259.i64, *(double *)v260.i64, *(double *)v261.i64, *(double *)v258.i64, v196);
        if (v312 != 1
          || v294[8] < *((float *)&v323 + 3)
          && vabds_f32(v188, v185) < vabds_f32(v175, v185)
          && (v200 = vsub_f32(*(float32x2_t *)&v324[1], v199), sqrtf(vaddv_f32(vmul_f32(v200, v200))) < v294[11])
          && v294[7] < v181)
        {
          outlined release of DetectionResult((uint64_t)&v319);
          v201 = v307;
          v202 = v307[2];
          if (!v202)
            goto LABEL_158;
          v203 = v202 - 1;
          memcpy(v318, &v122[40 * v202 - 40], 0x138uLL);
          v307[2] = v203;
          outlined release of TrackingInfo((uint64_t)v318);
          v309 = v300;
          v310 = *(float32x4_t *)v301;
          v117 = v201;
          if ((v274 & 1) != 0)
          {
            v204 = v268;
            *v268 = 0;
            v204[1] = 0;
            _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_((uint64_t)&v312);
            outlined init with take of ImageData?((uint64_t)&v312, (uint64_t)v267, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
            v205 = (int *)type metadata accessor for HandDescriptorInternal();
            v206 = (uint64_t)v281;
            v207 = v176;
            v208 = &v281[v205[10]];
            v209 = type metadata accessor for ActionInternalPB(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v209 - 8) + 56))(v208, 1, 1, v209);
            v210 = v206 + v205[11];
            v211 = type metadata accessor for UnsureInternalPB(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v211 - 8) + 56))(v210, 1, 1, v211);
            v212 = v206 + v205[12];
            v213 = type metadata accessor for ObjectInteractionStateInternalPB(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v213 - 8) + 56))(v212, 1, 1, v213);
            v214 = v206 + v205[13];
            v215 = type metadata accessor for HomePinchInternalPB(0);
            v216 = v214;
            v176 = v207;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v215 - 8) + 56))(v216, 1, 1, v215);
            *(_QWORD *)(v206 + v205[14]) = v115;
            v217 = v269;
            *((_DWORD *)v269 + 28) = 0;
            *((_OWORD *)v217 + 5) = 0u;
            *((_OWORD *)v217 + 6) = 0u;
            *((_OWORD *)v217 + 3) = 0u;
            *((_OWORD *)v217 + 4) = 0u;
            *((_OWORD *)v217 + 1) = 0u;
            *((_OWORD *)v217 + 2) = 0u;
            *(_OWORD *)v217 = 0u;
            *(_BYTE *)(v206 + 8) = 2;
            *(_QWORD *)v206 = specialized Dictionary.init(dictionaryLiteral:)(v115);
            *(_QWORD *)(v206 + 136) = specialized Dictionary.init(dictionaryLiteral:)(v115);
            (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v205 - 1) + 56))(v206, 0, 1, v205);
          }
          else
          {
            v238 = type metadata accessor for HandDescriptorInternal();
            v206 = (uint64_t)v281;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v238 - 8) + 56))(v281, 1, 1, v238);
          }
          v239 = v275;
          HandDescriptor.init(handID:isLeft:handRadius:handCenter:internalData:)(v121, v176, (uint64_t)&v309, v206, v275, v178);
          outlined init with copy of HandDescriptor(v239, v276);
          v240 = v282;
          v242 = *(_QWORD *)(v282 + 16);
          v241 = *(_QWORD *)(v282 + 24);
          if (v242 >= v241 >> 1)
            v240 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v241 > 1, v242 + 1, 1, v282);
          v118 = (uint64_t)v293;
          *(_QWORD *)(v240 + 16) = v242 + 1;
          v282 = v240;
          outlined init with take of HandDescriptor(v276, v240 + v126 + *(_QWORD *)(v299 + 72) * v242);
          outlined release of TrackingInfo((uint64_t)v325);
          outlined destroy of HandDescriptor(v275);
          outlined destroy of HandDescriptor(v296);
          v258 = v295;
          goto LABEL_122;
        }
        v186 = v176;
        v187 = v10;
        v258 = v295;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, [SIMD2<Float>])>);
      v218 = swift_allocObject();
      *(_OWORD *)(v218 + 16) = v270;
      *(_QWORD *)(v218 + 32) = v262;
      *(_BYTE *)(v218 + 40) = v263;
      *(_QWORD *)(v218 + 48) = v320;
      v219 = specialized Dictionary.init(dictionaryLiteral:)(v218);
      v220 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v286);
      v221 = v294;
      v222 = specialized static TrackingUtils.wristToHandCenterAngle(jointsOrKeypoints:imageData:config:)(v219, v220, (uint64_t)v294);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v222 >= v221[2] || v221[3] >= v181 || (v325[16] & 1) != 0)
      {
        outlined release of TrackingInfo((uint64_t)v325);
        outlined destroy of HandDescriptor(v296);
        goto LABEL_115;
      }
      if (v175 >= v185)
      {
        outlined destroy of HandDescriptor(v296);
        outlined release of TrackingInfo((uint64_t)v325);
LABEL_115:
        v10 = v187;
LABEL_71:
        v118 = (uint64_t)v293;
LABEL_131:
        v116 = (uint64_t)v305;
LABEL_132:
        v117 = v307;
        goto LABEL_133;
      }
      v223 = v307;
      v224 = v307[2];
      if (!v224)
        goto LABEL_159;
      v10 = v187;
      v225 = v224 - 1;
      memcpy(v318, &v122[40 * v224 - 40], 0x138uLL);
      v307[2] = v225;
      outlined release of TrackingInfo((uint64_t)v318);
      v309 = v300;
      v310 = *(float32x4_t *)v301;
      v117 = v223;
      if ((v274 & 1) != 0)
      {
        v226 = v265;
        *v265 = 0;
        v226[1] = 0;
        _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_((uint64_t)&v312);
        outlined init with take of ImageData?((uint64_t)&v312, (uint64_t)v264, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
        v227 = (int *)type metadata accessor for HandDescriptorInternal();
        v228 = (uint64_t)v280;
        v229 = &v280[v227[10]];
        v230 = type metadata accessor for ActionInternalPB(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v230 - 8) + 56))(v229, 1, 1, v230);
        v231 = v228 + v227[11];
        v232 = type metadata accessor for UnsureInternalPB(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v232 - 8) + 56))(v231, 1, 1, v232);
        v233 = v228 + v227[12];
        v234 = type metadata accessor for ObjectInteractionStateInternalPB(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v234 - 8) + 56))(v233, 1, 1, v234);
        v235 = v228 + v227[13];
        v236 = type metadata accessor for HomePinchInternalPB(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v236 - 8) + 56))(v235, 1, 1, v236);
        *(_QWORD *)(v228 + v227[14]) = v115;
        v237 = v266;
        *((_DWORD *)v266 + 28) = 0;
        *((_OWORD *)v237 + 5) = 0u;
        *((_OWORD *)v237 + 6) = 0u;
        *((_OWORD *)v237 + 3) = 0u;
        *((_OWORD *)v237 + 4) = 0u;
        *((_OWORD *)v237 + 1) = 0u;
        *((_OWORD *)v237 + 2) = 0u;
        *(_OWORD *)v237 = 0u;
        *(_BYTE *)(v228 + 8) = 2;
        *(_QWORD *)v228 = specialized Dictionary.init(dictionaryLiteral:)(v115);
        *(_QWORD *)(v228 + 136) = specialized Dictionary.init(dictionaryLiteral:)(v115);
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v227 - 1) + 56))(v228, 0, 1, v227);
      }
      else
      {
        v246 = type metadata accessor for HandDescriptorInternal();
        v228 = (uint64_t)v280;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v246 - 8) + 56))(v280, 1, 1, v246);
      }
      v247 = v272;
      HandDescriptor.init(handID:isLeft:handRadius:handCenter:internalData:)(v121, v186, (uint64_t)&v309, v228, v272, v178);
      outlined init with copy of HandDescriptor(v247, v273);
      v248 = v282;
      v250 = *(_QWORD *)(v282 + 16);
      v249 = *(_QWORD *)(v282 + 24);
      if (v250 >= v249 >> 1)
        v248 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v249 > 1, v250 + 1, 1, v282);
      v118 = (uint64_t)v293;
      *(_QWORD *)(v248 + 16) = v250 + 1;
      v282 = v248;
      outlined init with take of HandDescriptor(v273, v248 + v126 + *(_QWORD *)(v299 + 72) * v250);
      outlined release of TrackingInfo((uint64_t)v325);
      outlined destroy of HandDescriptor(v272);
      outlined destroy of HandDescriptor(v296);
LABEL_122:
      v116 = (uint64_t)v305;
LABEL_133:
      if ((char *)++v116 == v304)
      {
        v114 = v285;
        result = swift_bridgeObjectRelease();
        goto LABEL_141;
      }
    }
  }
  v117 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_141:
  v251 = v117[2];
  v252 = v289;
  if (*(_QWORD *)(v308 + 16))
  {
    v253 = v251 == 0;
    v254 = 27;
    v255 = 5;
  }
  else
  {
    if (!v251)
    {
      v254 = 6;
      goto LABEL_147;
    }
    v253 = *(_QWORD *)(v114 + 16) == 0;
    v254 = 4;
    v255 = 27;
  }
  if (v253)
    v254 = v255;
LABEL_147:
  v256 = v278;
  *v278 = v277;
  v256[1] = v117;
  v257 = v279;
  *v279 = v308;
  v257[1] = v252;
  v257[2] = v282;
  v257[3] = v254;
  *((_BYTE *)v257 + 32) = 1;
  return result;
}

unint64_t closure #3 in static TrackingProcessingFunctions.AssignHandID(hands:latestHandID:matchingResult:handsKitTimestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t result;
  char v10;

  result = outlined init with copy of HandDescriptor(a2, a5);
  if (*(_QWORD *)(a3 + 16) && (result = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v10 & 1) != 0))
  {
    *(_QWORD *)(a5 + 144) = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * result);
  }
  else if (*a4 == -1)
  {
    __break(1u);
  }
  else
  {
    ++*a4;
  }
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), a2);
}

{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), a2);
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  v7 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = a2(v7);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    memcpy(a3, (const void *)(v7 + 352 * a1 + 32), 0x160uLL);
    if ((uint64_t)(v9 - a1) >= 0)
    {
      result = (uint64_t)memmove((void *)(v7 + 352 * a1 + 32), (const void *)(v7 + 352 * a1 + 384), 352 * (v9 - a1));
      *(_QWORD *)(v7 + 16) = v9;
      *v3 = v7;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = *(_QWORD *)(type metadata accessor for HandDescriptor() - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  result = outlined init with take of HandDescriptor(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t closure #3 in static TrackingProcessingFunctions.RecoverMissingHands(trackingInfoList:matchingResult:handsKitTimestamp:serializeInternalData:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  int *v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  _BYTE *v41;
  _BYTE v43[12];
  int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  _QWORD v50[2];
  unsigned __int128 v51;

  v47 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for HandDescriptor();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = &v43[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(a1 + 64))
  {
    v48[0] = 0;
    v48[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    strcpy((char *)v48, "TrackingInfo ");
    HIWORD(v48[1]) = -4864;
    v50[0] = v15;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0xD000000000000012;
    v22._object = (void *)0x800000023D9D5940;
    String.append(_:)(v22);
    v49 = MEMORY[0x24BEE0D00];
    v19 = MEMORY[0x24BEE4AF8];
    v20 = 484;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(a1 + 129) & 1) != 0)
  {
    v48[0] = 0;
    v48[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v16._countAndFlagsBits = 0x676E696B63617254;
    v16._object = (void *)0xED0000206F666E49;
    String.append(_:)(v16);
    v50[0] = v15;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0xD000000000000028;
    v18._object = (void *)0x800000023D9D5960;
    String.append(_:)(v18);
    v49 = MEMORY[0x24BEE0D00];
    v19 = MEMORY[0x24BEE4AF8];
    v20 = 491;
LABEL_5:
    specialized static HLog.E(file:function:line:_:_:)(0xD00000000000006FLL, 0x800000023D9D5850, v20, (uint64_t)v48, v19);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
    v23 = 1;
    v24 = v47;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v24, v23, 1, v10);
  }
  v46 = v3;
  v25 = *(float *)(a1 + 24);
  v44 = *(unsigned __int8 *)(a1 + 28);
  v26 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v27 = v26;
  *((_QWORD *)&v27 + 1) = *(_QWORD *)(a1 + 56);
  v45 = v27;
  v28 = *(_QWORD *)(a1 + 40);
  v50[0] = *(_QWORD *)(a1 + 32);
  v50[1] = v28;
  v51 = __PAIR128__(*((unint64_t *)&v27 + 1), v26);
  if ((a2 & 1) != 0)
  {
    *((_QWORD *)v9 + 18) = 0;
    *((_QWORD *)v9 + 19) = 0;
    _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_((uint64_t)v48);
    outlined init with take of ImageData?((uint64_t)v48, (uint64_t)(v9 + 160), &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
    v29 = (int *)type metadata accessor for HandDescriptorInternal();
    v30 = &v9[v29[10]];
    v31 = type metadata accessor for ActionInternalPB(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
    v32 = &v9[v29[11]];
    v33 = type metadata accessor for UnsureInternalPB(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
    v34 = &v9[v29[12]];
    v35 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
    v36 = &v9[v29[13]];
    v37 = type metadata accessor for HomePinchInternalPB(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
    v38 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v9[v29[14]] = MEMORY[0x24BEE4AF8];
    *((_DWORD *)v9 + 32) = 0;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 1) = 0u;
    v9[8] = 2;
    *(_QWORD *)v9 = specialized Dictionary.init(dictionaryLiteral:)(v38);
    *((_QWORD *)v9 + 17) = specialized Dictionary.init(dictionaryLiteral:)(v38);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(*((_QWORD *)v29 - 1) + 56))(v9, 0, 1, v29);
  }
  else
  {
    v39 = type metadata accessor for HandDescriptorInternal();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v9, 1, 1, v39);
  }
  HandDescriptor.init(handID:isLeft:handRadius:handCenter:internalData:)(v15, v44, (uint64_t)v50, (uint64_t)v9, (uint64_t)v14, v25);
  v40 = v45;
  LODWORD(v40) = v26;
  HIDWORD(v40) = 0;
  v41 = &v14[*(int *)(v10 + 80)];
  *(_OWORD *)v41 = v40;
  v41[16] = 0;
  v24 = v47;
  outlined init with take of HandDescriptor((uint64_t)v14, v47);
  v23 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v24, v23, 1, v10);
}

uint64_t type metadata accessor for TrackingProcessingFunctions()
{
  return objc_opt_self();
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  char v4;
  unint64_t v5;
  size_t v6;
  unint64_t *v7;
  void *v8;
  _QWORD v10[2];

  v3 = (unint64_t *)isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, (uint64_t)v3);
    if (v2)
      swift_willThrow();
    else
      return v7;
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v3 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v8, v5, (uint64_t)v3);
    MEMORY[0x242638D4C](v8, -1, -1);
  }
  return v3;
}

{
  uint64_t v2;
  unint64_t *v3;
  char v4;
  unint64_t v5;
  size_t v6;
  unint64_t *v7;
  void *v8;
  _QWORD v10[2];

  v3 = (unint64_t *)isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, (uint64_t)v3);
    if (v2)
      swift_willThrow();
    else
      return v7;
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v3 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v8, v5, (uint64_t)v3);
    MEMORY[0x242638D4C](v8, -1, -1);
  }
  return v3;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v5 << 6);
LABEL_23:
    v17 = *(_QWORD *)(a3 + 48) + 16 * v13;
    v18 = *(_QWORD *)v17;
    v19 = *(unsigned __int8 *)(v17 + 8);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + 112 * v13 + 72);
    if (v19 == 1)
    {
      if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 2)
        LOBYTE(v11) = 0;
      if ((v11 & 1) != 0)
        goto LABEL_30;
    }
    else if (v18 == 2)
    {
      if ((v11 & 1) != 0)
      {
LABEL_30:
        *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        if (__OFADD__(v4++, 1))
        {
          __break(1u);
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        }
      }
    }
    else
    {
      if (v18 != 3)
        v11 = 0;
      if (v11 == 1)
        goto LABEL_30;
    }
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v14 >= v10)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  v15 = *(_QWORD *)(v6 + 8 * v14);
  ++v5;
  if (v15)
    goto LABEL_22;
  v5 = v14 + 1;
  if (v14 + 1 >= v10)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  v15 = *(_QWORD *)(v6 + 8 * v5);
  if (v15)
    goto LABEL_22;
  v5 = v14 + 2;
  if (v14 + 2 >= v10)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  v15 = *(_QWORD *)(v6 + 8 * v5);
  if (v15)
  {
LABEL_22:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_23;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(float *)(*(_QWORD *)(a3 + 56) + 112 * v12 + 24) > 0.0)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, float a2, float a3)
{
  float v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE_INT(a3 - a2) & 0x7F800000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x242638D64](&v7, 8);
  if ((float)((float)(v5 * (float)((float)(v7 & 0xFFFFFF) * 0.000000059605)) + a2) == a3)
    return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v6, a2, a3);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v13 = (char *)&v21 - v12;
  result = MEMORY[0x24BEE4AF8];
  v23 = MEMORY[0x24BEE4AF8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v21 = v2;
    v16 = *(_QWORD *)(v11 + 72);
    v22 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v17 = a1 + v22;
    v18 = MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of HandDescriptor(v17, (uint64_t)v13);
      if (((v13[136] ^ *(unsigned __int8 *)(a2 + 28)) & 1) != 0)
      {
        outlined destroy of HandDescriptor((uint64_t)v13);
      }
      else
      {
        outlined init with take of HandDescriptor((uint64_t)v13, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v23;
        v20 = *(_QWORD *)(v23 + 16);
        v19 = *(_QWORD *)(v23 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          v18 = v23;
        }
        *(_QWORD *)(v18 + 16) = v20 + 1;
        outlined init with take of HandDescriptor((uint64_t)v8, v18 + v22 + v20 * v16);
      }
      v17 += v16;
      --v15;
    }
    while (v15);
    return v23;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v37, v8);
  v36 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v32 - v12;
  MEMORY[0x24BDAC7A8](v14, v15);
  v18 = (char *)&v32 - v17;
  result = MEMORY[0x24BEE4AF8];
  v40 = MEMORY[0x24BEE4AF8];
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v20 = 0;
    v21 = *(unsigned __int8 *)(v16 + 80);
    v34 = v16;
    v22 = *(_QWORD *)(v16 + 72);
    v39 = (v21 + 32) & ~v21;
    v32 = v2;
    v33 = a1 + v39;
    do
    {
      outlined init with copy of HandDescriptor(v33 + v22 * v20, (uint64_t)v18);
      v23 = *(_QWORD *)(*(_QWORD *)v38 + 16);
      if (v23)
      {
        v24 = *((_QWORD *)v18 + 18);
        v25 = *(_QWORD *)v38 + v39;
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with copy of HandDescriptor(v25, (uint64_t)v13);
          if (*((_QWORD *)v13 + 18) == v24)
            break;
          outlined destroy of HandDescriptor((uint64_t)v13);
          v25 += v22;
          if (!--v23)
            goto LABEL_11;
        }
        outlined init with take of HandDescriptor((uint64_t)v13, (uint64_t)v7);
        v26 = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_11:
        v26 = 1;
      }
      v27 = v34;
      v28 = v37;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v7, v26, 1, v37);
      swift_bridgeObjectRelease();
      LODWORD(v28) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v28);
      outlined destroy of Coordinate3DPB?((uint64_t)v7, &demangling cache variable for type metadata for HandDescriptor?);
      if ((_DWORD)v28 == 1)
      {
        outlined init with take of HandDescriptor((uint64_t)v18, v36);
        v29 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
          v29 = v40;
        }
        v31 = *(_QWORD *)(v29 + 16);
        v30 = *(_QWORD *)(v29 + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          v29 = v40;
        }
        *(_QWORD *)(v29 + 16) = v31 + 1;
        outlined init with take of HandDescriptor(v36, v29 + v39 + v31 * v22);
      }
      else
      {
        outlined destroy of HandDescriptor((uint64_t)v18);
      }
      ++v20;
    }
    while (v20 != v35);
    return v40;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v13 = (char *)&v28 - v12;
  result = MEMORY[0x24BEE4AF8];
  v32 = MEMORY[0x24BEE4AF8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v28 = v2;
    v16 = 0;
    v17 = *(_QWORD *)(v11 + 72);
    v31 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v18 = a1 + v31;
    v19 = (_QWORD *)(a2 + 48);
    v20 = MEMORY[0x24BEE4AF8];
    v29 = (_QWORD *)(a2 + 48);
    v30 = v18;
    do
    {
      outlined init with copy of HandDescriptor(v18 + v17 * v16, (uint64_t)v13);
      v21 = *(_QWORD *)(a2 + 16);
      if (v21)
      {
        v22 = v19;
        while (*v22 != *((_QWORD *)v13 + 18))
        {
          v22 += 40;
          if (!--v21)
            goto LABEL_3;
        }
        v23 = a2;
        v24 = (uint64_t)v8;
        outlined init with take of HandDescriptor((uint64_t)v13, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v32;
        v26 = *(_QWORD *)(v32 + 16);
        v25 = *(_QWORD *)(v32 + 24);
        if (v26 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
          v20 = v32;
        }
        *(_QWORD *)(v20 + 16) = v26 + 1;
        v27 = v20 + v31 + v26 * v17;
        v8 = (char *)v24;
        outlined init with take of HandDescriptor(v24, v27);
        a2 = v23;
        v19 = v29;
        v18 = v30;
      }
      else
      {
LABEL_3:
        outlined destroy of HandDescriptor((uint64_t)v13);
      }
      ++v16;
    }
    while (v16 != v15);
    return v32;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  unint64_t v25;
  char *v26;
  uint64_t v27;

  v5 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v13 = (char *)v24 - v12;
  result = MEMORY[0x24BEE4AF8];
  v27 = MEMORY[0x24BEE4AF8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v24[1] = v2;
    v16 = *(_QWORD *)(v11 + 72);
    v25 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v17 = a1 + v25;
    v18 = MEMORY[0x24BEE4AF8];
    v26 = v8;
    do
    {
      outlined init with copy of HandDescriptor(v17, (uint64_t)v13);
      if (*(_QWORD *)(a2 + 16)
        && (v19 = specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v13 + 18)), (v20 & 1) != 0)
        && *(_BYTE *)(*(_QWORD *)(a2 + 56) + 96 * v19 + 64) == 1)
      {
        outlined init with take of HandDescriptor((uint64_t)v13, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v27;
        v22 = *(_QWORD *)(v27 + 16);
        v21 = *(_QWORD *)(v27 + 24);
        if (v22 >= v21 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          v18 = v27;
        }
        *(_QWORD *)(v18 + 16) = v22 + 1;
        v23 = v18 + v25 + v22 * v16;
        v8 = v26;
        outlined init with take of HandDescriptor((uint64_t)v26, v23);
      }
      else
      {
        outlined destroy of HandDescriptor((uint64_t)v13);
      }
      v17 += v16;
      --v15;
    }
    while (v15);
    return v27;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v36, v9);
  v37 = (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v30 - v13;
  MEMORY[0x24BDAC7A8](v15, v16);
  v19 = (char *)&v30 - v18;
  result = MEMORY[0x24BEE4AF8];
  v38 = MEMORY[0x24BEE4AF8];
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v21 = 0;
    v22 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v23 = *(_QWORD *)(v17 + 72);
    v33 = a1 + v22;
    v34 = v17;
    v32 = v22;
    v30 = v2;
    v31 = a2 + v22;
    do
    {
      outlined init with copy of HandDescriptor(v33 + v23 * v21, (uint64_t)v19);
      v24 = *(_QWORD *)(a2 + 16);
      if (v24)
      {
        v25 = *((_QWORD *)v19 + 18);
        swift_bridgeObjectRetain();
        v26 = v31;
        do
        {
          outlined init with copy of HandDescriptor(v26, (uint64_t)v14);
          if (*((_QWORD *)v14 + 18) == v25)
          {
            swift_bridgeObjectRelease();
            outlined init with take of Matrix2dPB((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v8, 0, 1, v36);
            outlined destroy of HandDescriptor?((uint64_t)v8);
            outlined destroy of HandDescriptor((uint64_t)v19);
            goto LABEL_4;
          }
          outlined destroy of HandDescriptor((uint64_t)v14);
          v26 += v23;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v8, 1, 1, v36);
      outlined destroy of HandDescriptor?((uint64_t)v8);
      outlined init with take of Matrix2dPB((uint64_t)v19, v37, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v27 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v27 = v38;
      }
      v29 = *(_QWORD *)(v27 + 16);
      v28 = *(_QWORD *)(v27 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        v27 = v38;
      }
      *(_QWORD *)(v27 + 16) = v29 + 1;
      outlined init with take of Matrix2dPB(v37, v27 + v32 + v29 * v23, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
LABEL_4:
      ++v21;
    }
    while (v21 != v35);
    return v38;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (uint64_t *)((char *)&v35 - v10);
  MEMORY[0x24BDAC7A8](v12, v13);
  v16 = (char *)&v35 - v15;
  result = MEMORY[0x24BEE4AF8];
  v53 = MEMORY[0x24BEE4AF8];
  v51 = *(_QWORD *)(a1 + 16);
  if (v51)
  {
    v35 = v2;
    v18 = 0;
    v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v52 = *(_QWORD *)(v14 + 72);
    v36 = v19;
    v49 = a1 + v19;
    v48 = (_QWORD *)(a2 + 48);
    v37 = MEMORY[0x24BEE4AF8];
    v50 = a2;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v49 + v52 * v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v20 = *(_QWORD *)(a2 + 16);
      if (v20)
      {
        v21 = v48;
        while (*v21 != *((_QWORD *)v16 + 18))
        {
          v21 += 40;
          if (!--v20)
            goto LABEL_3;
        }
        outlined init with copy of TrackingUpdateDataPB((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v23 = v11[2];
        v22 = v11[3];
        v24 = v11[4];
        v25 = v11[5];
        v26 = v11[6];
        v27 = v11[7];
        v28 = v11[8];
        v29 = v11[9];
        v30 = v11[10];
        v39 = v11[11];
        v40 = v30;
        v46 = v24;
        v47 = v22;
        v44 = v26;
        v45 = v25;
        v42 = v28;
        v43 = v27;
        v41 = v29;
        outlined copy of HandPose?(v23);
        outlined destroy of HandDescriptor((uint64_t)v11);
        if (v23)
        {
          outlined consume of HandPose?(v23);
          outlined init with take of Matrix2dPB((uint64_t)v16, v38, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v31 = v37;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v31 + 16) + 1, 1);
          v32 = v53;
          v34 = *(_QWORD *)(v53 + 16);
          v33 = *(_QWORD *)(v53 + 24);
          if (v34 >= v33 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
            v32 = v53;
          }
          *(_QWORD *)(v32 + 16) = v34 + 1;
          v37 = v32;
          outlined init with take of Matrix2dPB(v38, v32 + v36 + v34 * v52, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          goto LABEL_5;
        }
      }
      else
      {
LABEL_3:
        outlined init with copy of TrackingUpdateDataPB((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined destroy of HandDescriptor((uint64_t)v11);
      }
      outlined destroy of HandDescriptor((uint64_t)v16);
LABEL_5:
      ++v18;
      a2 = v50;
      if (v18 == v51)
        return v53;
    }
  }
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v8 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = *(_QWORD *)(a2 + 48) + 16 * i;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = *(_BYTE *)(v20 + 8);
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v23 = v21;
    v24 = v20;
    v25 = v22;
    swift_bridgeObjectRetain();
    closure #1 in static TrackingUtils.wristToHandCenterAngle(jointsOrKeypoints:imageData:config:)(&v26, (uint64_t)&v23, a3, a4);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * v14);
    if (!v18)
      break;
LABEL_17:
    v11 = (v18 - 1) & v18;
  }
  v19 = v14 + 1;
  if (v14 + 1 >= v12)
    goto LABEL_26;
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 2;
  if (v14 + 2 >= v12)
    goto LABEL_26;
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 3;
  if (v14 + 3 >= v12)
    goto LABEL_26;
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v14 + 4;
  if (v14 + 4 >= v12)
  {
LABEL_26:
    swift_release();
    return v26;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v14 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v12)
      goto LABEL_26;
    v18 = *(_QWORD *)(v8 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized static TrackingProcessingFunctions.TrackingDispatch(handData:trackingInfos:config:)(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    if ((*a3 & 1) != 0)
      return 26;
    v4 = *(_QWORD *)(v3 + 16) == 0;
    v5 = 27;
    v6 = 5;
  }
  else
  {
    v4 = *(_QWORD *)(v3 + 16) == 0;
    v5 = 4;
    v6 = 6;
  }
  if (v4)
    return v6;
  else
    return v5;
}

uint64_t sub_23D8A9968()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t specialized static TrackingProcessingFunctions.FilterDoubleDetection(hands:trackingInfos:handsKitTimestamp:config:)(uint64_t a1, uint64_t a2, char a3, float a4, float a5, float a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float32x2_t v33;
  float32x2_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  float32x2_t v62;
  float32x2_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  float v78;
  unint64_t v79;
  char v80;
  char v81;
  uint64_t result;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[25];

  v12 = type metadata accessor for HandDescriptor();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
  {
    *((_QWORD *)&v89 + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v88 = 0xD00000000000001ALL;
    *((_QWORD *)&v88 + 1) = 0x800000023D9D58F0;
    type metadata accessor for HandyLoggerNeo();
    v87 = 0u;
    v86 = 0u;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v86, 0xD00000000000006FLL, 0x800000023D9D5850, 230, (uint64_t)&v88, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v88);
    if (*(_QWORD *)(v17 + 16))
      goto LABEL_3;
LABEL_16:
    *((_QWORD *)&v89 + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v88 = 0xD000000000000023;
    *((_QWORD *)&v88 + 1) = 0x800000023D9D58C0;
    type metadata accessor for HandyLoggerNeo();
    v87 = 0u;
    v86 = 0u;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v86, 0xD00000000000006FLL, 0x800000023D9D5850, 233, (uint64_t)&v88, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v88);
    goto LABEL_3;
  }
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_16;
LABEL_3:
  *(_QWORD *)&v86 = a1;
  if ((a3 & 1) == 0 || v18 != 2)
  {
    swift_bridgeObjectRetain();
    return v86;
  }
  v19 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v20 = *(int *)(v12 + 72);
  v21 = *(_QWORD *)(v19 + v20);
  v22 = *(_BYTE *)(v21 + 32);
  v23 = 1 << v22;
  v24 = -1;
  if (1 << v22 < 64)
    v24 = ~(-1 << (1 << v22));
  v25 = v24 & *(_QWORD *)(v21 + 64);
  if (!v25)
  {
    v44 = v22 & 0x3F;
    if (v44 > 6)
    {
      v45 = *(_QWORD *)(v21 + 72);
      if (v45)
      {
        v46 = 1;
LABEL_20:
        v26 = __clz(__rbit64(v45)) + (v46 << 6);
        goto LABEL_9;
      }
      if (v44 >= 8)
      {
        v45 = *(_QWORD *)(v21 + 80);
        if (v45)
        {
          v46 = 2;
          goto LABEL_20;
        }
        v45 = *(_QWORD *)(v21 + 88);
        if (v45)
        {
          v46 = 3;
          goto LABEL_20;
        }
        if (v44 > 8)
        {
          v45 = *(_QWORD *)(v21 + 96);
          if (v45)
          {
            v46 = 4;
            goto LABEL_20;
          }
          v47 = 0;
          v48 = (unint64_t)(v23 + 63) >> 6;
          if (v48 <= 5)
            v48 = 5;
          v49 = v48 - 5;
          while (v49 != v47)
          {
            v45 = *(_QWORD *)(v21 + 104 + 8 * v47++);
            if (v45)
            {
              v46 = v47 + 4;
              goto LABEL_20;
            }
          }
        }
      }
    }
    swift_bridgeObjectRetain();
    v35 = (char *)MEMORY[0x24BEE4AF8];
    v33 = 0;
    v34 = 0;
    v39 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_36;
  }
  v26 = __clz(__rbit64(v25));
LABEL_9:
  v27 = (__int128 *)(*(_QWORD *)(v21 + 56) + 112 * v26);
  v29 = v27[1];
  v28 = v27[2];
  v88 = *v27;
  v89 = v29;
  v90 = v28;
  v30 = v27[3];
  v31 = v27[4];
  v32 = v27[5];
  *(_OWORD *)&v93[9] = *(__int128 *)((char *)v27 + 89);
  v92 = v31;
  *(_OWORD *)v93 = v32;
  v91 = v30;
  v33 = *(float32x2_t *)((char *)&v88 + 8);
  v34 = (float32x2_t)v88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of DetectionResult((uint64_t)&v88);
  v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v37 = *((_QWORD *)v35 + 2);
  v36 = *((_QWORD *)v35 + 3);
  if (v37 >= v36 >> 1)
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v35);
  v38 = DWORD2(v89);
  *((_QWORD *)v35 + 2) = v37 + 1;
  *(_DWORD *)&v35[4 * v37 + 32] = v38;
  v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v41 = *((_QWORD *)v39 + 2);
  v40 = *((_QWORD *)v39 + 3);
  v42 = v41 + 1;
  if (v41 >= v40 >> 1)
  {
    v85 = v41 + 1;
    v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v39);
    v42 = v85;
    v39 = v83;
  }
  v43 = HIDWORD(v89);
  *((_QWORD *)v39 + 2) = v42;
  *(_DWORD *)&v39[4 * v41 + 32] = v43;
  outlined release of DetectionResult((uint64_t)&v88);
  swift_bridgeObjectRelease();
  v20 = *(int *)(v12 + 72);
LABEL_36:
  v50 = *(_QWORD *)(v19 + *(_QWORD *)(v13 + 72) + v20);
  v51 = *(_BYTE *)(v50 + 32);
  v52 = 1 << v51;
  v53 = -1;
  if (1 << v51 < 64)
    v53 = ~(-1 << (1 << v51));
  v54 = v53 & *(_QWORD *)(v50 + 64);
  if (!v54)
  {
    v70 = v51 & 0x3F;
    v62 = 0;
    if (v70 > 6)
    {
      v71 = *(_QWORD *)(v50 + 72);
      if (v71)
      {
        v72 = 64;
LABEL_52:
        v55 = __clz(__rbit64(v71)) + v72;
        goto LABEL_40;
      }
      if (v70 >= 8)
      {
        v71 = *(_QWORD *)(v50 + 80);
        if (v71)
        {
          v72 = 128;
          goto LABEL_52;
        }
        v71 = *(_QWORD *)(v50 + 88);
        if (v71)
        {
          v72 = 192;
          goto LABEL_52;
        }
        if (v70 >= 9)
        {
          v71 = *(_QWORD *)(v50 + 96);
          if (v71)
          {
            v72 = 256;
            goto LABEL_52;
          }
          v73 = (unint64_t)(v52 + 63) >> 6;
          if (v73 <= 5)
            v73 = 5;
          v74 = v73 - 5;
          v75 = (unint64_t *)(v50 + 104);
          v72 = 256;
          while (v74)
          {
            v76 = *v75++;
            v71 = v76;
            --v74;
            v72 += 64;
            if (v76)
              goto LABEL_52;
          }
        }
      }
    }
    v63 = 0;
    goto LABEL_68;
  }
  v55 = __clz(__rbit64(v54));
LABEL_40:
  v56 = (__int128 *)(*(_QWORD *)(v50 + 56) + 112 * v55);
  v58 = v56[1];
  v57 = v56[2];
  v88 = *v56;
  v89 = v58;
  v90 = v57;
  v59 = v56[3];
  v60 = v56[4];
  v61 = v56[5];
  *(_OWORD *)&v93[9] = *(__int128 *)((char *)v56 + 89);
  v92 = v60;
  *(_OWORD *)v93 = v61;
  v91 = v59;
  v62 = *(float32x2_t *)((char *)&v88 + 8);
  v63 = (float32x2_t)v88;
  swift_bridgeObjectRetain();
  outlined retain of DetectionResult((uint64_t)&v88);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
  v65 = *((_QWORD *)v35 + 2);
  v64 = *((_QWORD *)v35 + 3);
  if (v65 >= v64 >> 1)
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v35);
  v66 = DWORD2(v89);
  *((_QWORD *)v35 + 2) = v65 + 1;
  *(_DWORD *)&v35[4 * v65 + 32] = v66;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
  v68 = *((_QWORD *)v39 + 2);
  v67 = *((_QWORD *)v39 + 3);
  if (v68 >= v67 >> 1)
    v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, v39);
  v69 = HIDWORD(v89);
  *((_QWORD *)v39 + 2) = v68 + 1;
  *(_DWORD *)&v39[4 * v68 + 32] = v69;
  outlined release of DetectionResult((uint64_t)&v88);
  swift_bridgeObjectRelease();
LABEL_68:
  if (specialized static HandsKitUtils.findBoundingBoxOverlap(_:_:_:_:)(v34, v33, v63, v62) <= a4
    || (v77 = specialized Sequence<>.min()((uint64_t)v35), (v77 & 0x100000000) != 0))
  {
    swift_bridgeObjectRelease();
LABEL_78:
    swift_bridgeObjectRelease();
    return v86;
  }
  v78 = *(float *)&v77;
  v79 = specialized Collection<>.firstIndex(of:)((uint64_t)v35, *(float *)&v77);
  v81 = v80;
  result = swift_bridgeObjectRelease();
  if ((v81 & 1) != 0 || v78 >= a6)
    goto LABEL_78;
  if ((v79 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v79 < *((_QWORD *)v39 + 2))
  {
    if (vabds_f32(0.5, *(float *)&v39[4 * v79 + 32]) < a5)
    {
      specialized Array.remove(at:)(v79, (uint64_t)v16);
      outlined destroy of HandDescriptor((uint64_t)v16);
    }
    goto LABEL_78;
  }
  __break(1u);
  return result;
}

uint64_t specialized static TrackingProcessingFunctions.pairWiseDistanceCoord(vector1:vector2:dimension:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  float32x2_t *v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float32x2_t *v15;
  float64x2_t v16;
  __int128 v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  float64x2_t v28;
  _OWORD v29[2];

  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
    return MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(a2 + 16);
  v25 = a1 + 32;
  v5 = a2 + 32;
  v6 = a3 - 4;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (!v4)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_18:
    v21 = v9;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v9 = v21;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      v9 = (_QWORD *)result;
    }
    v23 = v9[2];
    v22 = v9[3];
    if (v23 >= v22 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v9);
      v9 = (_QWORD *)result;
    }
    ++v8;
    v9[2] = v23 + 1;
    v9[v23 + 4] = v13;
    if (v8 == v27)
    {
      v24 = v9;
      swift_bridgeObjectRelease();
      return (uint64_t)v24;
    }
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v26 = v9;
    v10 = (float32x2_t *)(v25 + 16 * v8);
    v28 = vcvtq_f64_f32(*v10);
    v11 = v10[1].f32[0];
    swift_bridgeObjectRetain();
    v12 = 0;
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if (a3)
      {
        v14 = 0;
        v15 = (float32x2_t *)(v5 + 16 * v12);
        v16 = vsubq_f64(v28, vcvtq_f64_f32(*v15));
        *((_QWORD *)&v17 + 1) = 0;
        *(double *)&v17 = v11 - v15[1].f32[0];
        v18 = 0.0;
        do
        {
          if (v6 < 0xFFFFFFFFFFFFFFFDLL)
          {
            __break(1u);
            return MEMORY[0x24BEE4AF8];
          }
          v29[0] = v16;
          v29[1] = v17;
          v18 = v18 + *((double *)v29 + (v14 & 3)) * *((double *)v29 + (v14 & 3));
          ++v14;
        }
        while (a3 != v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_16;
      }
      else
      {
        v18 = 0.0;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      }
      v20 = v13[2];
      v19 = v13[3];
      if (v20 >= v19 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v13);
      ++v12;
      v13[2] = v20 + 1;
      *(double *)&v13[v20 + 4] = v18;
    }
    while (v12 != v4);
    swift_bridgeObjectRelease();
    v9 = v26;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t specialized static TrackingProcessingFunctions.ComputeSimilarityMatrix(hands:trackingInfos:handsKitTimestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int32x4_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int32x4_t *v30;
  char *v31;
  int32x4_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  int32x4_t *v42;
  char v43;
  int32x4_t *v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  int64_t v48;
  uint64_t v49;
  int32x4_t *v50;
  unint64_t v51;
  int64_t v52;
  int32x4_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  float i;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  int32x2_t v75;
  unint64_t v76;
  unint64_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t result;
  uint64_t *v86;
  unint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  NSObject *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int32x4_t *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  int64_t v113;
  int *v114;
  int32x4_t v115;
  _QWORD v116[40];
  _OWORD v117[2];
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  v107 = a3;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = v8;
  MEMORY[0x24BDAC7A8](v10, v11);
  v108 = (uint64_t)&v101 - v12;
  v114 = (int *)type metadata accessor for HandDescriptor();
  v13 = *((_QWORD *)v114 - 1);
  MEMORY[0x24BDAC7A8](v114, v14);
  v110 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v101 - v18;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
  {
    v116[3] = MEMORY[0x24BEE0D00];
    v116[0] = 0xD00000000000001ALL;
    v116[1] = 0x800000023D9D58F0;
    type metadata accessor for HandyLoggerNeo();
    v118 = 0u;
    v119 = 0u;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v118, 0xD00000000000006FLL, 0x800000023D9D5850, 285, (uint64_t)v116, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v116);
  }
  v109 = *(int32x4_t **)(v20 + 16);
  if (!v109)
  {
    v116[3] = MEMORY[0x24BEE0D00];
    v116[0] = 0xD000000000000023;
    v116[1] = 0x800000023D9D58C0;
    type metadata accessor for HandyLoggerNeo();
    v118 = 0u;
    v119 = 0u;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v118, 0xD00000000000006FLL, 0x800000023D9D5850, 288, (uint64_t)v116, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v116);
  }
  v112 = v20;
  v113 = v21;
  v105 = v13;
  v106 = a1;
  if (!v21)
  {
    v27 = MEMORY[0x24BEE4AF8];
    v30 = v109;
    if (v109)
      goto LABEL_17;
    goto LABEL_29;
  }
  v101 = v9;
  v102 = v6;
  v103 = v5;
  v120 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
  v22 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v23 = *(_QWORD *)(v13 + 72);
  v111 = 0xD000000000000020;
  do
  {
    outlined init with copy of HandDescriptor(v22, (uint64_t)v19);
    v24 = &v19[v114[19]];
    if ((v24[16] & 1) != 0)
    {
      *((_QWORD *)&v119 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v118 = v111;
      *((_QWORD *)&v118 + 1) = 0x800000023D9D5910;
      v25 = type metadata accessor for HandyLoggerNeo();
      if (static HandyLoggerNeo._currentLogLevel <= 5)
      {
LABEL_81:
        v115.i64[0] = v25;
        v88 = (void *)MEMORY[0x2426372E8](0xD00000000000006FLL, 0x800000023D9D5850);
        v89 = objc_msgSend(v88, sel_lastPathComponent);

        v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        isEscapingClosureAtFileLocation = v91;

        static Date.now.getter();
        if (one-time initialization token for _dispatchQ != -1)
          goto LABEL_84;
        while (1)
        {
          v114 = (int *)static HandyLoggerNeo._dispatchQ;
          v94 = v101;
          v93 = v102;
          v95 = v103;
          (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v101, v108, v103);
          outlined init with copy of Any((uint64_t)&v118, (uint64_t)v117);
          v96 = (*(unsigned __int8 *)(v93 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
          v97 = (v104 + v96 + 7) & 0xFFFFFFFFFFFFFFF8;
          v98 = swift_allocObject();
          *(_DWORD *)(v98 + 16) = 5;
          *(_QWORD *)(v98 + 24) = v115.i64[0];
          *(_OWORD *)(v98 + 32) = 0u;
          *(_OWORD *)(v98 + 48) = 0u;
          *(_DWORD *)(v98 + 64) = 1;
          *(_QWORD *)(v98 + 72) = v90;
          *(_QWORD *)(v98 + 80) = isEscapingClosureAtFileLocation;
          *(_QWORD *)(v98 + 88) = 293;
          (*(void (**)(unint64_t, char *, uint64_t))(v93 + 32))(v98 + v96, v94, v95);
          outlined init with take of Any(v117, (_OWORD *)(v98 + v97));
          *(_QWORD *)(v98 + ((v97 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
          v90 = swift_allocObject();
          *(_QWORD *)(v90 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
          *(_QWORD *)(v90 + 24) = v98;
          v116[4] = thunk for @callee_guaranteed () -> ()partial apply;
          v116[5] = v90;
          v116[0] = MEMORY[0x24BDAC760];
          v116[1] = 1107296256;
          v116[2] = thunk for @escaping @callee_guaranteed () -> ();
          v116[3] = &block_descriptor_14_1;
          v99 = _Block_copy(v116);
          v100 = v114;
          swift_retain();
          swift_release();
          dispatch_sync(v100, v99);

          _Block_release(v99);
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) == 0)
            break;
          __break(1u);
LABEL_84:
          swift_once();
        }
        outlined init with copy of Any((uint64_t)&v118, (uint64_t)v116);
        if ((swift_dynamicCast() & 1) != 0)
        {
          String.init(format:_:)();
          swift_bridgeObjectRelease();
        }
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v118);
      v26 = 0uLL;
    }
    else
    {
      v26 = *(int32x4_t *)v24;
    }
    v115 = v26;
    outlined destroy of HandDescriptor((uint64_t)v19);
    v27 = v120;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
      v27 = v120;
    }
    v29 = *(_QWORD *)(v27 + 16);
    v28 = *(_QWORD *)(v27 + 24);
    if (v29 >= v28 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      v27 = v120;
    }
    *(_QWORD *)(v27 + 16) = v29 + 1;
    *(int32x4_t *)(v27 + 16 * v29 + 32) = v115;
    v22 += v23;
    --v21;
  }
  while (v21);
  v20 = v112;
  v30 = v109;
  if (v109)
  {
LABEL_17:
    swift_bridgeObjectRetain_n();
    v31 = &v30[-1].i8[15];
    v32 = (int32x4_t *)MEMORY[0x24BEE4AF8];
    v33 = 32;
    v111 = 0xD000000000000018;
    v108 = 0x800000023D9D5850;
    v109 = (int32x4_t *)0x800000023D9C7DA0;
    while (1)
    {
      memcpy(v116, (const void *)(v20 + v33), 0x138uLL);
      v34 = v116[8];
      if (v116[8])
      {
        v115.i64[0] = v33;
        v35 = v116[4];
        v36 = v116[5];
        v38 = v116[6];
        v37 = v116[7];
        outlined retain of (TrackingInfo, Int)((uint64_t)v116);
        swift_bridgeObjectRetain();
        v39 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v32 = (int32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[1].i64[0] + 1, 1, v32);
        v41 = v32[1].u64[0];
        v40 = v32[1].u64[1];
        v42 = v32;
        if (v41 >= v40 >> 1)
          v42 = (int32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v32);
        v43 = BYTE4(v116[3]);
        v42[1].i64[0] = v41 + 1;
        v32 = v42;
        v44 = &v42[3 * v41];
        v44[2].i64[0] = v35;
        v44[2].i64[1] = v36;
        v44[3].i64[0] = v38;
        v44[3].i64[1] = v37;
        v44[4].i64[0] = v34;
        v44[4].i8[8] = v43;
        outlined release of TrackingInfo((uint64_t)v116);
        v20 = v112;
        v31 = v39;
        v33 = v115.i64[0];
        if (!v31)
        {
LABEL_27:
          swift_bridgeObjectRelease_n();
          goto LABEL_30;
        }
      }
      else
      {
        v45 = v116[2];
        *(_QWORD *)&v118 = 0;
        *((_QWORD *)&v118 + 1) = 0xE000000000000000;
        outlined retain of (TrackingInfo, Int)((uint64_t)v116);
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        strcpy((char *)&v118, "TrackingInfo ");
        HIWORD(v118) = -4864;
        *(_QWORD *)&v117[0] = v45;
        v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = v111;
        v47._object = v109;
        String.append(_:)(v47);
        *((_QWORD *)&v119 + 1) = MEMORY[0x24BEE0D00];
        type metadata accessor for HandyLoggerNeo();
        memset(v117, 0, sizeof(v117));
        static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v117, 0xD00000000000006FLL, v108, 305, (uint64_t)&v118, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v118);
        outlined release of TrackingInfo((uint64_t)v116);
        if (!v31)
          goto LABEL_27;
      }
      --v31;
      v33 += 320;
    }
  }
LABEL_29:
  v32 = (int32x4_t *)MEMORY[0x24BEE4AF8];
LABEL_30:
  v48 = v32[1].i64[0];
  v49 = MEMORY[0x24BEE4AF8];
  if (v48)
  {
    v116[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
    v49 = v116[0];
    v50 = v32 + 3;
    v51 = *(_QWORD *)(v116[0] + 16);
    v52 = v48;
    do
    {
      v53 = *v50;
      v116[0] = v49;
      v54 = *(_QWORD *)(v49 + 24);
      if (v51 >= v54 >> 1)
      {
        v115 = v53;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v51 + 1, 1);
        v53 = v115;
        v49 = v116[0];
      }
      *(_QWORD *)(v49 + 16) = v51 + 1;
      *(int32x4_t *)(v49 + 16 * v51 + 32) = v53;
      v50 += 3;
      ++v51;
      --v52;
    }
    while (v52);
  }
  v112 = specialized static TrackingProcessingFunctions.pairWiseDistanceCoord(vector1:vector2:dimension:)(v49, v27, 2);
  v111 = specialized static TrackingProcessingFunctions.pairWiseDistanceCoord(vector1:vector2:dimension:)(v49, v27, 3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = MEMORY[0x24BEE4AF8];
  if (v113)
  {
    v109 = v32;
    v116[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113, 0);
    v56 = 0;
    v115.i64[0] = v106 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
    v57 = *(_QWORD *)(v105 + 72);
    v58 = (uint64_t)v110;
    while (1)
    {
      v59 = v115.i64[0] + v57 * v56++;
      v25 = outlined init with copy of HandDescriptor(v59, v58);
      v60 = 0;
      v61 = *(_QWORD *)(v58 + v114[18]);
      v62 = v61 + 64;
      v63 = 1 << *(_BYTE *)(v61 + 32);
      v64 = v63 < 64 ? ~(-1 << v63) : -1;
      v65 = v64 & *(_QWORD *)(v61 + 64);
      v66 = (unint64_t)(v63 + 63) >> 6;
      for (i = 0.0; ; i = i + *(float *)(*(_QWORD *)(v61 + 56) + 112 * v69 + 28))
      {
        if (v65)
        {
          v68 = __clz(__rbit64(v65));
          v65 &= v65 - 1;
          v69 = v68 | (v60 << 6);
          continue;
        }
        v70 = v60 + 1;
        if (__OFADD__(v60, 1))
        {
          __break(1u);
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        if (v70 >= v66)
          goto LABEL_62;
        v71 = *(_QWORD *)(v62 + 8 * v70);
        ++v60;
        if (!v71)
        {
          v60 = v70 + 1;
          if (v70 + 1 >= v66)
            goto LABEL_62;
          v71 = *(_QWORD *)(v62 + 8 * v60);
          if (!v71)
          {
            v60 = v70 + 2;
            if (v70 + 2 >= v66)
              goto LABEL_62;
            v71 = *(_QWORD *)(v62 + 8 * v60);
            if (!v71)
            {
              v60 = v70 + 3;
              if (v70 + 3 >= v66)
                goto LABEL_62;
              v71 = *(_QWORD *)(v62 + 8 * v60);
              if (!v71)
              {
                v60 = v70 + 4;
                if (v70 + 4 >= v66)
                  goto LABEL_62;
                v71 = *(_QWORD *)(v62 + 8 * v60);
                if (!v71)
                  break;
              }
            }
          }
        }
LABEL_61:
        v65 = (v71 - 1) & v71;
        v69 = __clz(__rbit64(v71)) + (v60 << 6);
      }
      v72 = v70 + 5;
      if (v72 < v66)
        break;
LABEL_62:
      v73 = *(_QWORD *)(v61 + 16);
      outlined destroy of HandDescriptor(v58);
      v74 = v116[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v74 + 16) + 1, 1);
        v58 = (uint64_t)v110;
        v74 = v116[0];
      }
      v77 = *(_QWORD *)(v74 + 16);
      v76 = *(_QWORD *)(v74 + 24);
      if (v77 >= v76 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1);
        v58 = (uint64_t)v110;
        v74 = v116[0];
      }
      *(float *)v75.i32 = i / (float)v73;
      v78 = vdupq_lane_s32(v75, 0);
      v78.i32[3] = 0;
      *(_QWORD *)(v74 + 16) = v77 + 1;
      *(int32x4_t *)(v74 + 16 * v77 + 32) = v78;
      if (v56 == v113)
      {
        v32 = v109;
        v55 = MEMORY[0x24BEE4AF8];
        if (!v48)
          goto LABEL_77;
LABEL_68:
        v116[0] = v55;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
        v80 = v116[0];
        v81 = *(_QWORD *)(v116[0] + 16);
        v82 = 72;
        do
        {
          if (v32->i8[v82])
            *(float *)v79.i32 = 0.0;
          else
            *(float *)v79.i32 = 1.0;
          v116[0] = v80;
          v83 = *(_QWORD *)(v80 + 24);
          if (v81 >= v83 >> 1)
          {
            v115 = v79;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v81 + 1, 1);
            v79.i64[0] = v115.i64[0];
            v80 = v116[0];
          }
          v79 = vdupq_lane_s32(*(int32x2_t *)v79.i8, 0);
          v79.i32[3] = 0;
          *(_QWORD *)(v80 + 16) = v81 + 1;
          *(int32x4_t *)(v80 + 16 * v81 + 32) = v79;
          v82 += 48;
          ++v81;
          --v48;
        }
        while (v48);
        swift_bridgeObjectRelease();
        goto LABEL_78;
      }
    }
    v71 = *(_QWORD *)(v62 + 8 * v72);
    if (!v71)
    {
      while (1)
      {
        v60 = v72 + 1;
        if (__OFADD__(v72, 1))
          goto LABEL_80;
        if (v60 >= v66)
          goto LABEL_62;
        v71 = *(_QWORD *)(v62 + 8 * v60);
        ++v72;
        if (v71)
          goto LABEL_61;
      }
    }
    v60 = v72;
    goto LABEL_61;
  }
  v74 = MEMORY[0x24BEE4AF8];
  if (v48)
    goto LABEL_68;
LABEL_77:
  swift_bridgeObjectRelease();
  v80 = MEMORY[0x24BEE4AF8];
LABEL_78:
  v84 = specialized static TrackingProcessingFunctions.pairWiseDistanceCoord(vector1:vector2:dimension:)(v80, v74, 1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v86 = v107;
  v87 = v111;
  *v107 = v112;
  v86[1] = v87;
  v86[2] = v84;
  v86[3] = 2;
  *((_BYTE *)v86 + 32) = 1;
  return result;
}

uint64_t specialized static TrackingProcessingFunctions.FinalSimilarityMatrix(matrixFor2D:matrixFor3D:matrixForChirality:handsKitTimestamp:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    v2 = a2;
    v18 = a2 + 32;
    v19 = a1 + 32;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v17 = v2;
    while (1)
    {
      v6 = *(_QWORD *)(v19 + 8 * v4);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        break;
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_14:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v5 = (_QWORD *)result;
      }
      v16 = v5[2];
      v15 = v5[3];
      if (v16 >= v15 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v5);
        v5 = (_QWORD *)result;
      }
      ++v4;
      v5[2] = v16 + 1;
      v5[v16 + 4] = v10;
      if (v4 == v20)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
    }
    if (v4 < *(_QWORD *)(v2 + 16))
    {
      v8 = *(_QWORD *)(v18 + 8 * v4);
      result = swift_bridgeObjectRetain();
      v9 = 0;
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (v9 < *(_QWORD *)(v8 + 16))
      {
        v11 = *(double *)(v6 + 8 * v9 + 32);
        v12 = *(double *)(v8 + 32 + 8 * v9);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
          v10 = (_QWORD *)result;
        }
        v14 = v10[2];
        v13 = v10[3];
        if (v14 >= v13 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v10);
          v10 = (_QWORD *)result;
        }
        ++v9;
        v10[2] = v14 + 1;
        *(double *)&v10[v14 + 4] = v11 * 0.5 + v12 * 0.5;
        if (v7 == v9)
        {
          swift_bridgeObjectRelease();
          v2 = v17;
          goto LABEL_14;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized Hungarian.Algorithm.init(_:unused:)(uint64_t result, double a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v3 = *(_QWORD *)(result + 16);
  v2[9] = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(result + 32);
    result += 32;
    v5 = *(_QWORD *)(v4 + 16);
    if (v5 <= v3)
      v6 = v3;
    else
      v6 = v5;
    v2[10] = v5;
    v2[11] = v6;
    v7 = v6 * v6;
    if ((unsigned __int128)(v6 * (__int128)v6) >> 64 != (v6 * v6) >> 63)
      goto LABEL_32;
    v19 = result;
    v2[2] = specialized Array.init(repeating:count:)(v6 * v6, a2);
    v8 = v2 + 2;
    v2[3] = specialized Array.init(repeating:count:)(1, v6 * v6);
    v2[4] = specialized Array.init(repeating:count:)(0xFFFFFFFFFFFFFFFFLL, v6);
    v2[5] = specialized Array.init(repeating:count:)(0xFFFFFFFFFFFFFFFFLL, v6);
    v2[6] = specialized Array.init(repeating:count:)(0xFFFFFFFFFFFFFFFFLL, v6);
    v9 = specialized Array.init(repeating:count:)(0xFFFFFFFFFFFFFFFFLL, v6);
    v2[8] = MEMORY[0x24BEE4AF8];
    v2[7] = v9;
    swift_beginAccess();
    v10 = (_QWORD *)v2[8];
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    v2[8] = v10;
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || v7 > v10[3] >> 1)
    {
      if (v10[2] <= v7)
        v12 = v6 * v6;
      else
        v12 = v10[2];
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v12, 0, v10);
    }
    v2[8] = v10;
    result = swift_endAccess();
    v13 = 0;
    while (v13 != v3)
    {
      v14 = v13 * v6;
      if ((unsigned __int128)(v13 * (__int128)v6) >> 64 != (v13 * v6) >> 63)
        goto LABEL_30;
      if (v5)
      {
        v15 = 0;
        v16 = *(_QWORD *)(v19 + 8 * v13);
        while (v15 < *(_QWORD *)(v16 + 16))
        {
          v17 = *(_QWORD *)(v16 + 32 + 8 * v15);
          swift_beginAccess();
          v18 = (_QWORD *)*v8;
          result = swift_isUniquelyReferenced_nonNull_native();
          *v8 = (uint64_t)v18;
          if ((result & 1) != 0)
          {
            if ((v14 & 0x8000000000000000) != 0)
              goto LABEL_25;
          }
          else
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
            v18 = (_QWORD *)result;
            *v8 = result;
            if ((v14 & 0x8000000000000000) != 0)
            {
LABEL_25:
              __break(1u);
              return (uint64_t)v2;
            }
          }
          if (v14 >= v18[2])
            goto LABEL_28;
          ++v15;
          v18[v14 + 4] = v17;
          result = swift_endAccess();
          ++v14;
          if (v5 == v15)
            goto LABEL_13;
        }
        __break(1u);
LABEL_28:
        __break(1u);
        break;
      }
LABEL_13:
      if (++v13 == v3)
        return (uint64_t)v2;
    }
    __break(1u);
LABEL_30:
    __break(1u);
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized static TrackingProcessingFunctions.DataAssociation(similarityMatrix:trackingInfoArray:handsKitTimestamp:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  char v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hungarian<Double>.Algorithm);
  swift_initStackObject();
  v3 = swift_bridgeObjectRetain();
  v4 = (_QWORD *)specialized Hungarian.Algorithm.init(_:unused:)(v3, 1000000.0);
  swift_bridgeObjectRelease();
  specialized Hungarian.Algorithm.subtractMinima()();
  specialized Hungarian.Algorithm.starZeros()();
  while ((specialized Hungarian.Algorithm.coverColumns()() & 1) == 0)
  {
    v5 = specialized Hungarian.Algorithm.primeUncoveredZero()();
    if ((v8 & 1) != 0)
    {
      do
      {
        specialized Hungarian.Algorithm.adjustUncoveredAndDoubleCovered()();
        v5 = specialized Hungarian.Algorithm.primeUncoveredZero()();
      }
      while ((v9 & 1) != 0);
    }
    specialized Hungarian.Algorithm.traverseAlternatingPath(_:)(v5, v6, v7);
  }
  v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[11] & ~((uint64_t)v4[11] >> 63), 0, MEMORY[0x24BEE4AF8]);
  v11 = v4[9];
  if ((v11 & 0x8000000000000000) == 0)
  {
    v12 = v10;
    if (v11)
    {
      v13 = v4 + 7;
      swift_beginAccess();
      v14 = 0;
      while (v14 < *(_QWORD *)(*v13 + 16))
      {
        v16 = *(_QWORD *)(*v13 + 8 * v14 + 32);
        if ((v16 & 0x8000000000000000) == 0 && v16 < v4[10])
        {
          v18 = v12[2];
          v17 = v12[3];
          if (v18 >= v17 >> 1)
            v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v12);
          v12[2] = v18 + 1;
          v15 = &v12[2 * v18];
          v15[4] = v14;
          v15[5] = v16;
        }
        if (v11 == ++v14)
          goto LABEL_17;
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_17:
    swift_release();
    v42 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v19 = v12[2];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : Int]);
    Dictionary.reserveCapacity(_:)(v19);
    v20 = v12[2];
    if (!v20)
    {
LABEL_35:
      swift_bridgeObjectRelease();
      return v42;
    }
    v21 = *(_QWORD *)(a2 + 16);
    v41 = a2 + 48;
    v22 = (_QWORD *)v42;
    v23 = v12 + 5;
    while (1)
    {
      v24 = *(v23 - 1);
      if (v24 >= v21)
        goto LABEL_37;
      v25 = *v23;
      if (*v23 != -1)
        break;
LABEL_21:
      v23 += 2;
      if (!--v20)
        goto LABEL_35;
    }
    v26 = *(_QWORD *)(v41 + 320 * v24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
    v30 = v22[2];
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_38;
    v33 = v28;
    if (v22[3] < v32)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, isUniquelyReferenced_nonNull_native);
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      if ((v33 & 1) != (v35 & 1))
        goto LABEL_41;
      v29 = v34;
      if ((v33 & 1) == 0)
        goto LABEL_31;
LABEL_19:
      *(_QWORD *)(v22[7] + 8 * v29) = v25;
LABEL_20:
      v42 = (unint64_t)v22;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v28 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v33 & 1) != 0)
        goto LABEL_19;
    }
LABEL_31:
    v22[(v29 >> 6) + 8] |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(v22[6] + v36) = v26;
    *(_QWORD *)(v22[7] + v36) = v25;
    v37 = v22[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_39;
    v22[2] = v39;
    goto LABEL_20;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_23D8AB758()
{
  return swift_deallocObject();
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;

  v6 = 0;
  v7 = 0;
  v8 = a3 + 64;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_17;
    }
    v15 = __OFADD__(v7++, 1);
    if (v15)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v7 >= v12)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v6, a3);
    v16 = *(_QWORD *)(v8 + 8 * v7);
    if (!v16)
      break;
LABEL_16:
    v18 = __clz(__rbit64(v16));
    v11 = (v16 - 1) & v16;
    v14 = v18 + (v7 << 6);
LABEL_17:
    v19 = *(_QWORD *)(a3 + 56) + 112 * v14;
    if (*(_BYTE *)(v19 + 72) == 1)
    {
      v20 = *(float *)(v19 + 60);
      if (*(_BYTE *)(v19 + 64))
        v20 = 0.0;
      if (*(uint64_t *)(v19 + 80) >= 2 && v20 < a5 && *(float *)(v19 + 76) <= *(float *)(a4 + 436))
      {
        *(unint64_t *)((char *)result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        v15 = __OFADD__(v6++, 1);
        if (v15)
          goto LABEL_33;
      }
    }
  }
  v17 = v7 + 1;
  if (v7 + 1 >= v12)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v6, a3);
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
    goto LABEL_15;
  v17 = v7 + 2;
  if (v7 + 2 >= v12)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v6, a3);
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
    goto LABEL_15;
  v17 = v7 + 3;
  if (v7 + 3 >= v12)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v6, a3);
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
LABEL_15:
    v7 = v17;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v6, a3);
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  outlined retain of TrackingConfig(a2);
  isStackAllocationSafe = outlined retain of TrackingConfig(a2);
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, v12);
    bzero((char *)v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    outlined retain of TrackingConfig(a2);
    v13 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    outlined release of TrackingConfig(a2);
    if (v3)
      swift_willThrow();
    outlined release of TrackingConfig(a2);
    outlined release of TrackingConfig(a2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc();
    bzero(v14, v10);
    outlined retain of TrackingConfig(a2);
    v13 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v14, v9, a1, a2, a3);
    outlined release of TrackingConfig(a2);
    MEMORY[0x242638D4C](v14, -1, -1);
    outlined release of TrackingConfig(a2);
    outlined release of TrackingConfig(a2);
  }
  return v13;
}

uint64_t specialized static TrackingProcessingFunctions.ModifyHandCenterAndChirality(hands:trackingInfoList:matchingResult:schedulingData:config:images:handsKitTimestamp:isN301:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t *v63;
  uint64_t v64;
  unint64_t v65;
  float v66;
  uint64_t v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int64_t v94;
  int64_t v95;
  unint64_t v96;
  unint64_t i;
  unint64_t v98;
  int64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  float32x4_t v110;
  int32x4_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x4_t v114;
  __int128 v115;
  uint64_t result;
  uint64_t v117;
  char *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  float32x4_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  _QWORD v137[40];
  _BYTE v138[312];
  _QWORD *v139;
  _QWORD v140[39];
  _DWORD v141[118];

  v120 = a6;
  v124 = 0;
  v127 = type metadata accessor for HandDescriptor();
  v12 = *(_QWORD *)(v127 - 8);
  MEMORY[0x24BDAC7A8](v127, v13);
  v15 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v121 = (uint64_t)&v117 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  *(_QWORD *)&v135 = (char *)&v117 - v21;
  memcpy(v141, a5, 0x1CCuLL);
  v22 = *(_QWORD *)(a2 + 16);
  v126 = a3;
  v132 = v12;
  v118 = v15;
  if (v22)
  {
    LODWORD(v134) = a7;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v136 = a2;
    swift_bridgeObjectRetain();
    memcpy(v140, (const void *)(a2 + 32), sizeof(v140));
    v23 = v140[2];
    outlined retain of (TrackingInfo, Int)((uint64_t)v140);
    v24 = (_QWORD *)MEMORY[0x24BEE4B00];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v139 = v24;
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
    v28 = v24[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      outlined destroy of HandDescriptor(v27);
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    v31 = v26;
    v32 = 0;
    v33 = v22 - 1;
    v34 = (char *)(v136 + 352);
    while (1)
    {
      if (v24[3] >= v30)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native & 1);
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
        if ((v31 & 1) != (v36 & 1))
          goto LABEL_125;
        v27 = v35;
      }
      memcpy(v138, v140, sizeof(v138));
      if ((v31 & 1) != 0)
      {
        v24 = v139;
        v37 = (_QWORD *)(v139[7] + 320 * v27);
        memcpy(v137, v37, sizeof(v137));
        outlined release of TrackingInfo((uint64_t)v137);
        memcpy(v37, v138, 0x138uLL);
        v37[39] = v32;
      }
      else
      {
        v24 = v139;
        v139[((unint64_t)v27 >> 6) + 8] |= 1 << v27;
        *(_QWORD *)(v24[6] + 8 * v27) = v23;
        v38 = (_QWORD *)(v24[7] + 320 * v27);
        memcpy(v38, v138, 0x138uLL);
        v38[39] = v32;
        v39 = v24[2];
        v40 = __OFADD__(v39, 1);
        v41 = v39 + 1;
        if (v40)
          goto LABEL_111;
        v24[2] = v41;
      }
      swift_bridgeObjectRelease();
      if (v33 == v32)
        break;
      memcpy(v140, v34, sizeof(v140));
      v23 = v140[2];
      outlined retain of (TrackingInfo, Int)((uint64_t)v140);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v139 = v24;
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
      v31 = v42;
      v43 = v24[2];
      v44 = (v42 & 1) == 0;
      ++v32;
      v34 += 320;
      v30 = v43 + v44;
      if (__OFADD__(v43, v44))
        goto LABEL_109;
    }
    a3 = v126;
    v12 = v132;
    LOBYTE(a7) = v134;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  swift_bridgeObjectRelease();
  v45 = a3 + 64;
  v46 = 1 << *(_BYTE *)(a3 + 32);
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v48 = v47 & *(_QWORD *)(a3 + 64);
  outlined retain of TrackingConfig((uint64_t)v141);
  *(_QWORD *)&v136 = (unint64_t)(v46 + 63) >> 6;
  swift_bridgeObjectRetain();
  v27 = 0;
  v119 = a7 & 1;
  v131 = a3 + 64;
  while (2)
  {
    v49 = v127;
    while (1)
    {
      while (1)
      {
        if (v48)
        {
          v50 = __clz(__rbit64(v48));
          v48 &= v48 - 1;
          v51 = v50 | (v27 << 6);
        }
        else
        {
          v40 = __OFADD__(v27++, 1);
          if (v40)
            goto LABEL_110;
          if (v27 >= (uint64_t)v136)
          {
LABEL_73:
            v27 = (uint64_t)v118;
            swift_release();
            outlined release of TrackingConfig((uint64_t)v141);
            swift_bridgeObjectRelease();
            if ((v141[113] & 1) == 0)
              return a1;
            LODWORD(v90) = v141[114];
            v130 = v90;
            v91 = 1 << *(_BYTE *)(a3 + 32);
            v92 = -1;
            if (v91 < 64)
              v92 = ~(-1 << v91);
            v93 = v92 & *(_QWORD *)(a3 + 64);
            v94 = (unint64_t)(v91 + 63) >> 6;
            swift_bridgeObjectRetain();
            v95 = 0;
            if (!v93)
              goto LABEL_78;
LABEL_77:
            v96 = __clz(__rbit64(v93));
            v93 &= v93 - 1;
            for (i = v96 | (v95 << 6); ; i = __clz(__rbit64(v98)) + (v95 << 6))
            {
              v100 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
              if ((v100 & 0x8000000000000000) != 0)
                break;
              if (v100 >= *(_QWORD *)(a1 + 16))
                goto LABEL_107;
              v101 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
              v102 = *(_QWORD *)(v12 + 72) * v100;
              outlined init with copy of HandDescriptor(a1 + v101 + v102, v27);
              if ((*(_BYTE *)(v27 + 192) & 1) != 0)
                goto LABEL_121;
              v136 = *(_OWORD *)(v27 + 160);
              v103 = outlined destroy of HandDescriptor(v27);
              v104 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v103, -1.0, 1.0);
              *(_QWORD *)&v135 = v105;
              v106 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v104, -1.0, 1.0);
              v134 = v107;
              specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v106, -1.0, 1.0);
              v133 = v108;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
              if (v100 >= *(_QWORD *)(a1 + 16))
                goto LABEL_108;
              v109 = a1 + v101 + v102;
              if ((*(_BYTE *)(v109 + 192) & 1) != 0)
                goto LABEL_122;
              v110 = (float32x4_t)v135;
              v110.i32[1] = v134;
              v110.i32[2] = v133;
              v111 = (int32x4_t)vmulq_f32(v110, v110);
              v111.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v111, 2), vadd_f32(*(float32x2_t *)v111.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1))).u32[0];
              v112 = vrsqrte_f32((float32x2_t)v111.u32[0]);
              v113 = vmul_f32(v112, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v112, v112)));
              v114 = vmulq_n_f32(v110, vmul_f32(v113, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v113, v113))).f32[0]);
              *(float32x2_t *)&v115 = vadd_f32(*(float32x2_t *)&v136, vmul_n_f32(*(float32x2_t *)v114.f32, *(float *)&v130));
              *((_QWORD *)&v115 + 1) = COERCE_UNSIGNED_INT(*((float *)&v136 + 2) + vmuls_lane_f32(*(float *)&v130, v114, 2));
              *(_OWORD *)(v109 + 160) = v115;
              *(_OWORD *)(v109 + 176) = v115;
              v12 = v132;
              if (v93)
                goto LABEL_77;
LABEL_78:
              v40 = __OFADD__(v95++, 1);
              if (v40)
                goto LABEL_114;
              if (v95 >= v94)
              {
LABEL_102:
                swift_release();
                return a1;
              }
              v98 = *(_QWORD *)(v131 + 8 * v95);
              if (!v98)
              {
                v99 = v95 + 1;
                if (v95 + 1 >= v94)
                  goto LABEL_102;
                v98 = *(_QWORD *)(v131 + 8 * v99);
                if (!v98)
                {
                  v99 = v95 + 2;
                  if (v95 + 2 >= v94)
                    goto LABEL_102;
                  v98 = *(_QWORD *)(v131 + 8 * v99);
                  if (!v98)
                  {
                    v99 = v95 + 3;
                    if (v95 + 3 >= v94)
                      goto LABEL_102;
                    v98 = *(_QWORD *)(v131 + 8 * v99);
                    if (!v98)
                    {
                      while (1)
                      {
                        v95 = v99 + 1;
                        if (__OFADD__(v99, 1))
                          goto LABEL_120;
                        if (v95 >= v94)
                          goto LABEL_102;
                        v98 = *(_QWORD *)(v131 + 8 * v95);
                        ++v99;
                        if (v98)
                          goto LABEL_88;
                      }
                    }
                  }
                }
                v95 = v99;
              }
LABEL_88:
              v93 = (v98 - 1) & v98;
            }
            goto LABEL_106;
          }
          v52 = *(_QWORD *)(v45 + 8 * v27);
          if (!v52)
          {
            v53 = v27 + 1;
            if (v27 + 1 >= (uint64_t)v136)
              goto LABEL_73;
            v52 = *(_QWORD *)(v45 + 8 * v53);
            if (!v52)
            {
              v53 = v27 + 2;
              if (v27 + 2 >= (uint64_t)v136)
                goto LABEL_73;
              v52 = *(_QWORD *)(v45 + 8 * v53);
              if (!v52)
              {
                v53 = v27 + 3;
                if (v27 + 3 >= (uint64_t)v136)
                  goto LABEL_73;
                v52 = *(_QWORD *)(v45 + 8 * v53);
                if (!v52)
                {
                  while (1)
                  {
                    v27 = v53 + 1;
                    if (__OFADD__(v53, 1))
                      goto LABEL_117;
                    if (v27 >= (uint64_t)v136)
                      goto LABEL_73;
                    v52 = *(_QWORD *)(v45 + 8 * v27);
                    ++v53;
                    if (v52)
                      goto LABEL_35;
                  }
                }
              }
            }
            v27 = v53;
          }
LABEL_35:
          v48 = (v52 - 1) & v52;
          v51 = __clz(__rbit64(v52)) + (v27 << 6);
        }
        v54 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v51);
        if (v24[2])
        {
          v55 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v51));
          if ((v56 & 1) != 0)
          {
            memcpy(v137, (const void *)(v24[7] + 320 * v55), sizeof(v137));
            if (v137[8])
              break;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v54 & 0x8000000000000000) != 0)
            goto LABEL_104;
        }
        else
        {
          a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
          if ((v54 & 0x8000000000000000) != 0)
          {
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }
        }
        if (v54 >= *(_QWORD *)(a1 + 16))
          goto LABEL_105;
        v65 = a1
            + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
            + *(_QWORD *)(v12 + 72) * v54
            + *(int *)(v49 + 80);
        *(_QWORD *)v65 = 0;
        *(_QWORD *)(v65 + 8) = 0;
        *(_BYTE *)(v65 + 16) = 1;
      }
      v134 = v137[7];
      v133 = v137[6];
      v128 = v137[4];
      v129 = v137[5];
      v57 = v137[8];
      outlined retain of (TrackingInfo, Int)((uint64_t)v137);
      *(_QWORD *)&v130 = v57;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((v54 & 0x8000000000000000) != 0)
          goto LABEL_112;
      }
      else
      {
        a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
        if ((v54 & 0x8000000000000000) != 0)
          goto LABEL_112;
      }
      if (v54 >= *(_QWORD *)(a1 + 16))
        goto LABEL_113;
      v58 = v12;
      v59 = v133;
      v60.i64[0] = v133;
      v61 = v134;
      v60.i64[1] = v134;
      v125 = v60;
      v60.i32[0] = v133;
      v60.i32[3] = 0;
      v62 = a1
          + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))
          + *(_QWORD *)(v58 + 72) * v54;
      v63 = (float32x4_t *)(v62 + *(int *)(v49 + 80));
      *v63 = v60;
      v63[1].i8[0] = 0;
      outlined init with copy of HandDescriptor(v62, v135);
      if ((v141[110] & 1) == 0)
      {
        v64 = v135;
        v45 = v131;
        v12 = v132;
        if (((LOBYTE(v137[16]) | BYTE1(v137[16])) & 1) != 0)
          goto LABEL_68;
LABEL_59:
        outlined destroy of HandDescriptor(v64);
        goto LABEL_60;
      }
      LODWORD(v122) = BYTE1(v137[16]);
      HIDWORD(v122) = LOBYTE(v137[16]);
      v123 = a1;
      v66 = *(float *)&v141[111];
      v140[0] = v128;
      v140[1] = v129;
      v140[2] = v59;
      v140[3] = v61;
      v67 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v120);
      specialized static TrackingUtils.distanceToCameraOrigin(handCenter:images:isN301:)((uint64_t)v140, v67, v119);
      v69 = v68;
      swift_bridgeObjectRelease();
      v70 = v135;
      outlined retain of TrackingConfig((uint64_t)v141);
      v71 = swift_bridgeObjectRetain();
      v72 = v124;
      v73 = specialized _NativeDictionary.filter(_:)(v71, (uint64_t)v141, v69);
      v124 = v72;
      outlined release of TrackingConfig((uint64_t)v141);
      swift_bridgeObjectRelease();
      v74 = v70 + *(int *)(v127 + 76);
      if ((*(_BYTE *)(v74 + 16) & 1) != 0)
        goto LABEL_124;
      v76 = *(_QWORD *)v74;
      v75 = *(_QWORD *)(v74 + 8);
      v77 = v73[2];
      swift_release();
      if (!v77)
      {
        v45 = v131;
        v12 = v132;
        v49 = v127;
        a1 = v123;
        v64 = v135;
        if (v122)
          goto LABEL_68;
        goto LABEL_59;
      }
      v78 = v75;
      a1 = v123;
      v64 = v135;
      if (((BYTE4(v122) | v122) & 1) != 0)
        break;
      v79.i64[0] = v76;
      v79.i64[1] = v78;
      v80 = vsubq_f32(v79, v125);
      v81 = vmulq_f32(v80, v80);
      v82 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0]);
      outlined destroy of HandDescriptor(v135);
      v45 = v131;
      v12 = v132;
      v49 = v127;
      if (v66 < v82)
        goto LABEL_69;
LABEL_60:
      if (v54 >= *(_QWORD *)(a1 + 16))
        goto LABEL_118;
      v83 = v129;
      *(_QWORD *)(v62 + 160) = v128;
      *(_QWORD *)(v62 + 168) = v83;
      v84 = v134;
      *(_QWORD *)(v62 + 176) = v133;
      *(_QWORD *)(v62 + 184) = v84;
      *(_BYTE *)(v62 + 192) = 0;
      swift_bridgeObjectRelease();
      if (v54 >= *(_QWORD *)(a1 + 16))
        goto LABEL_119;
      *(_BYTE *)(v62 + 136) = BYTE4(v137[3]);
      outlined release of TrackingInfo((uint64_t)v137);
      a3 = v126;
    }
    v12 = v132;
    v49 = v127;
LABEL_68:
    outlined destroy of HandDescriptor(v64);
LABEL_69:
    swift_bridgeObjectRelease();
    if (v54 >= *(_QWORD *)(a1 + 16))
      goto LABEL_115;
    v85 = v121;
    outlined init with copy of HandDescriptor(v62, v121);
    v86 = v85 + *(int *)(v49 + 76);
    if ((*(_BYTE *)(v86 + 16) & 1) == 0)
    {
      v87 = v85;
      v89 = *(_QWORD *)v86;
      v88 = *(_QWORD *)(v86 + 8);
      outlined destroy of HandDescriptor(v87);
      if (v54 >= *(_QWORD *)(a1 + 16))
        goto LABEL_116;
      *(_QWORD *)(v62 + 160) = v89;
      *(_QWORD *)(v62 + 168) = v88;
      *(_QWORD *)(v62 + 176) = v89;
      *(_QWORD *)(v62 + 184) = v88;
      *(_BYTE *)(v62 + 192) = 0;
      outlined release of TrackingInfo((uint64_t)v137);
      a3 = v126;
      v45 = v131;
      continue;
    }
    break;
  }
LABEL_123:
  outlined release of TrackingConfig((uint64_t)v141);
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static TrackingProcessingFunctions.RecoverMissingHands(trackingInfoList:matchingResult:handsKitTimestamp:serializeInternalData:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[40];
  uint64_t v42;

  LODWORD(v37) = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HandDescriptor();
  v39 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v9);
  v40 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v38 = (uint64_t)&v37 - v13;
  v41[0] = MEMORY[0x24BEE4B08];
  v14 = a2 + 64;
  v15 = 1 << *(_BYTE *)(a2 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(a2 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v20 << 6);
      goto LABEL_5;
    }
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v23 >= v18)
      goto LABEL_25;
    v24 = *(_QWORD *)(v14 + 8 * v23);
    ++v20;
    if (!v24)
    {
      v20 = v23 + 1;
      if (v23 + 1 >= v18)
        goto LABEL_25;
      v24 = *(_QWORD *)(v14 + 8 * v20);
      if (!v24)
      {
        v20 = v23 + 2;
        if (v23 + 2 >= v18)
          goto LABEL_25;
        v24 = *(_QWORD *)(v14 + 8 * v20);
        if (!v24)
        {
          v20 = v23 + 3;
          if (v23 + 3 >= v18)
            goto LABEL_25;
          v24 = *(_QWORD *)(v14 + 8 * v20);
          if (!v24)
          {
            v20 = v23 + 4;
            if (v23 + 4 >= v18)
              goto LABEL_25;
            v24 = *(_QWORD *)(v14 + 8 * v20);
            if (!v24)
              break;
          }
        }
      }
    }
LABEL_24:
    v17 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_5:
    result = specialized Set._Variant.insert(_:)(&v42, *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v22));
  }
  v25 = v23 + 5;
  if (v25 < v18)
  {
    v24 = *(_QWORD *)(v14 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        v20 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_39;
        if (v20 >= v18)
          goto LABEL_25;
        v24 = *(_QWORD *)(v14 + 8 * v20);
        ++v25;
        if (v24)
          goto LABEL_24;
      }
    }
    v20 = v25;
    goto LABEL_24;
  }
LABEL_25:
  swift_release();
  v26 = v41[0];
  v27 = swift_bridgeObjectRetain();
  v28 = specialized _ArrayProtocol.filter(_:)(v27, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v28 + 16);
  if (v29)
  {
    v30 = MEMORY[0x24BEE4AF8];
    v31 = 32;
    v32 = v37 & 1;
    v37 = v8;
    v33 = v39;
    do
    {
      memcpy(v41, (const void *)(v28 + v31), 0x138uLL);
      closure #3 in static TrackingProcessingFunctions.RecoverMissingHands(trackingInfoList:matchingResult:handsKitTimestamp:serializeInternalData:)((uint64_t)v41, v32, (uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v7, 1, v8) == 1)
      {
        outlined destroy of HandDescriptor?((uint64_t)v7);
      }
      else
      {
        v34 = v38;
        outlined init with take of HandDescriptor((uint64_t)v7, v38);
        outlined init with take of HandDescriptor(v34, v40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
        v36 = *(_QWORD *)(v30 + 16);
        v35 = *(_QWORD *)(v30 + 24);
        if (v36 >= v35 >> 1)
          v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v30);
        *(_QWORD *)(v30 + 16) = v36 + 1;
        v33 = v39;
        outlined init with take of HandDescriptor(v40, v30+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v39 + 72) * v36);
        v8 = v37;
      }
      v31 += 320;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v30;
}

void specialized Zip2Sequence.Iterator.next()()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if ((*(_BYTE *)(v1 + 32) & 1) == 0)
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
    if (v3 == v4)
    {
LABEL_6:
      *(_BYTE *)(v1 + 32) = 1;
      return;
    }
    if (v3 >= v4)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v1 + 8) = v3 + 1;
      v2 = *(_QWORD *)(v1 + 16);
      v0 = *(_QWORD *)(v1 + 24);
      if (!(v2 >> 62))
      {
        if (v0 == *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_6;
LABEL_9:
        if ((v2 & 0xC000000000000001) != 0)
        {
          MEMORY[0x24263790C](v0, v2);
          v6 = v0 + 1;
          if (!__OFADD__(v0, 1))
            goto LABEL_13;
        }
        else
        {
          if ((v0 & 0x8000000000000000) != 0)
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
          if (v0 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_19:
            __break(1u);
            return;
          }
          swift_retain();
          v6 = v0 + 1;
          if (!__OFADD__(v0, 1))
          {
LABEL_13:
            *(_QWORD *)(v1 + 24) = v6;
            return;
          }
        }
        __break(1u);
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v0 == v5)
      goto LABEL_6;
    goto LABEL_9;
  }
}

char *PinchThresholdSearch.process(_:_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[10];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v32 = a1;
  v4 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2[9];
  v68 = a2[8];
  v69 = v8;
  v70 = *((_QWORD *)a2 + 20);
  v9 = a2[5];
  v64 = a2[4];
  v65 = v9;
  v10 = a2[7];
  v66 = a2[6];
  v67 = v10;
  v11 = a2[1];
  v60 = *a2;
  v61 = v11;
  v12 = a2[3];
  v62 = a2[2];
  v63 = v12;
  swift_beginAccess();
  v13 = *(_QWORD *)(v2 + 24);
  swift_beginAccess();
  v14 = *(_QWORD *)(v2 + 16);
  v55 = v13;
  v56 = 0;
  v57 = v14;
  v58 = 0;
  v59 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Zip2Sequence.Iterator.next()();
  if (v16)
  {
    v17 = v15;
    v18 = (char *)MEMORY[0x24BEE4AF8];
    v19 = (char *)MEMORY[0x24BEE4AF8];
    v20 = (char *)MEMORY[0x24BEE4AF8];
    v31 = v7;
    do
    {
      outlined init with copy of HandDescriptor(v32, (uint64_t)v7);
      *(_QWORD *)&v53[0] = v60;
      *((_QWORD *)&v53[0] + 1) = v17;
      v53[1] = v61;
      v53[2] = v62;
      v53[3] = v63;
      v53[4] = v64;
      v53[5] = v65;
      v53[6] = v66;
      v53[7] = v67;
      v53[8] = v68;
      v53[9] = v69;
      v54 = v70;
      v41 = v68;
      v42 = v69;
      v43 = v70;
      v37 = v64;
      v38 = v65;
      v39 = v66;
      v40 = v67;
      v33 = v53[0];
      v34 = v61;
      v35 = v62;
      v36 = v63;
      outlined retain of PostProcessingMetaData(&v60);
      outlined retain of PostProcessingMetaData(v53);
      PinchGenerator.process(_:_:thresholdSearchMode:)((uint64_t)v7, (uint64_t)&v33);
      outlined release of PostProcessingMetaData(v53);
      v39 = v50;
      v40 = v51;
      *(_QWORD *)&v41 = v52;
      v35 = v46;
      v36 = v47;
      v37 = v48;
      v38 = v49;
      v33 = v44;
      v34 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
      v22 = *((_QWORD *)v18 + 2);
      v21 = *((_QWORD *)v18 + 3);
      if (v22 >= v21 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v18);
      *((_QWORD *)v18 + 2) = v22 + 1;
      *(_DWORD *)&v18[4 * v22 + 32] = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
      v24 = *((_QWORD *)v19 + 2);
      v23 = *((_QWORD *)v19 + 3);
      if (v24 >= v23 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v19);
      *((_QWORD *)v19 + 2) = v24 + 1;
      *(_DWORD *)&v19[4 * v24 + 32] = HIDWORD(v17);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
      v7 = v31;
      v26 = *((_QWORD *)v20 + 2);
      v25 = *((_QWORD *)v20 + 3);
      if (v26 >= v25 >> 1)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v20);
      v27 = v33;
      *((_QWORD *)v20 + 2) = v26 + 1;
      v20[v26 + 32] = v27;
      swift_release();
      outlined release of PinchGeneratorResults((uint64_t)&v33);
      outlined release of PostProcessingMetaData(v53);
      outlined destroy of HandDescriptor((uint64_t)v7);
      specialized Zip2Sequence.Iterator.next()();
      v17 = v28;
    }
    while (v29);
  }
  else
  {
    v18 = (char *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t type metadata accessor for PinchThresholdSearch()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SearchParameter()
{
  return &type metadata for SearchParameter;
}

void specialized PinchThresholdSearch.init(_:)(void *a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  char **v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  float v22;
  id v23;
  id v24;
  void *v25;
  float v26;
  id v27;
  id v28;
  void *v29;
  float v30;
  id v31;
  id v32;
  void *v33;
  float v34;
  id v35;
  id v36;
  void *v37;
  float v38;
  id v39;
  id v40;
  void *v41;
  float v42;
  float v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  float v47;
  BOOL v48;
  float v50;
  uint64_t v51;
  uint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  unint64_t v55;
  float v56;
  unint64_t v57;
  BOOL v58;
  float v59;

  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x24BEE4AF8];
  v8 = (_QWORD *)(v1 + 16);
  v8[1] = v7;
  v9 = v8 + 1;
  v10 = &selRef_downScaleIntrinsics_;
  v11 = objc_msgSend(a1, sel_SearchMakeThresholdRange);
  v12 = type metadata accessor for NSNumber();
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
    goto LABEL_54;
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v14 != 3)
      break;
    v15 = objc_msgSend(a1, sel_SearchBreakThresholdRange);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v17 != 3)
      break;
    v18 = objc_msgSend(a1, v10[339]);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v19 & 0xC000000000000001) != 0)
    {
      v20 = (id)MEMORY[0x24263790C](0, v19);
    }
    else
    {
      if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_58:
        v24 = (id)MEMORY[0x24263790C](1, v19);
        goto LABEL_13;
      }
      v20 = *(id *)(v19 + 32);
    }
    v21 = v20;
    swift_bridgeObjectRelease();
    Float.init(truncating:)();
    v59 = v22;

    v23 = objc_msgSend(a1, v10[339]);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v19 & 0xC000000000000001) != 0)
      goto LABEL_58;
    if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_60:
      v28 = (id)MEMORY[0x24263790C](2, v19);
      goto LABEL_16;
    }
    v24 = *(id *)(v19 + 40);
LABEL_13:
    v25 = v24;
    swift_bridgeObjectRelease();
    Float.init(truncating:)();
    v3 = v26;

    v27 = objc_msgSend(a1, v10[339]);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v19 & 0xC000000000000001) != 0)
      goto LABEL_60;
    if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
    {
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      v32 = (id)MEMORY[0x24263790C](0, v19);
      goto LABEL_20;
    }
    v28 = *(id *)(v19 + 48);
LABEL_16:
    v29 = v28;
    swift_bridgeObjectRelease();
    Float.init(truncating:)();
    v4 = v30;

    if (v4 == 0.0)
      goto LABEL_62;
    v31 = objc_msgSend(a1, sel_SearchBreakThresholdRange);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v19 & 0xC000000000000001) != 0)
      goto LABEL_63;
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_65:
      v36 = (id)MEMORY[0x24263790C](1, v19);
      goto LABEL_23;
    }
    v32 = *(id *)(v19 + 32);
LABEL_20:
    v33 = v32;
    swift_bridgeObjectRelease();
    Float.init(truncating:)();
    v2 = v34;

    v35 = objc_msgSend(a1, sel_SearchBreakThresholdRange);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v19 & 0xC000000000000001) != 0)
      goto LABEL_65;
    if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_67:
      v40 = (id)MEMORY[0x24263790C](2, v12);
      goto LABEL_26;
    }
    v36 = *(id *)(v19 + 40);
LABEL_23:
    v37 = v36;
    swift_bridgeObjectRelease();
    Float.init(truncating:)();
    v5 = v38;

    v39 = objc_msgSend(a1, sel_SearchBreakThresholdRange);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v12 & 0xC000000000000001) != 0)
      goto LABEL_67;
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
    {
      __break(1u);
LABEL_69:
      __break(1u);
      return;
    }
    v40 = *(id *)(v12 + 48);
LABEL_26:
    v41 = v40;
    swift_bridgeObjectRelease();
    Float.init(truncating:)();
    v43 = v42;

    if (v43 == 0.0)
      goto LABEL_69;
    v44 = v59 <= v3;
    if (v4 > 0.0)
      v44 = v3 <= v59;
    if (v44)
      return;
    v45 = 0;
    if (v43 <= 0.0)
      v46 = v2 <= v5;
    else
      v46 = v5 <= v2;
    v47 = v59;
    while (!__OFADD__(v45++, 1))
    {
      if (!v46)
      {
        v10 = 0;
        v50 = v2;
        while (1)
        {
          v51 = (uint64_t)v10 + 1;
          if (__OFADD__(v10, 1))
            break;
          specialized PinchGenerator.__allocating_init(_:)(a1);
          v52 = swift_beginAccess();
          MEMORY[0x2426374D4](v52);
          if (*(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_endAccess();
          swift_beginAccess();
          v12 = *v9;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v9 = v12;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1, (_QWORD *)v12);
            *v9 = v12;
          }
          v55 = *(_QWORD *)(v12 + 16);
          v54 = *(_QWORD *)(v12 + 24);
          if (v55 >= v54 >> 1)
          {
            v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, (_QWORD *)v12);
            *v9 = v12;
          }
          v56 = v2 + (float)((float)v51 * v43);
          *(_QWORD *)(v12 + 16) = v55 + 1;
          v57 = v12 + 8 * v55;
          *(float *)(v57 + 32) = v47;
          *(float *)(v57 + 36) = v50;
          swift_endAccess();
          v58 = v56 <= v5;
          if (v43 > 0.0)
            v58 = v5 <= v56;
          v10 = (char **)((char *)v10 + 1);
          v50 = v2 + (float)((float)v51 * v43);
          if (v58)
            goto LABEL_35;
        }
        __break(1u);
        break;
      }
LABEL_35:
      v47 = v59 + (float)((float)v45 * v4);
      v48 = v47 <= v3;
      if (v4 > 0.0)
        v48 = v3 <= v47;
      if (v48)
        return;
    }
    __break(1u);
LABEL_54:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

uint64_t Hands_trace_CBridge_4()
{
  return kdebug_trace();
}

uint64_t Hands_trace_CBridge_uint64()
{
  return kdebug_trace();
}

Swift::Void __swiftcall MiddleDoubleTapPostProcessing.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _UNKNOWN **v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  _QWORD v39[2];
  __int128 v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  id v46;
  void *v47;
  int v48;
  __int128 aBlock;
  uint64_t (*v50)(uint64_t);
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;
  _OWORD v54[2];
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  _UNKNOWN **v59;

  v0 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0, v2);
  v44 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)v39 - v6;
  v8 = 0;
  v9 = 0;
  v43 = v10 + 7;
  v47 = (void *)0x800000023D9C5200;
  v42 = 0x800000023D9D5B00;
  v40 = xmmword_23D9BB790;
  v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v41 = (char *)v39 - v6;
  while (2)
  {
    v11 = *(_QWORD *)((char *)&outlined read-only object #0 of MiddleDoubleTapPostProcessing.reset() + v9 + 32);
    v12 = *((_BYTE *)&outlined read-only object #0 of MiddleDoubleTapPostProcessing.reset() + v9 + 40) == 1;
    v48 = v8;
    if (v12)
      __asm { BR              X8 }
    v13 = 1;
    switch(v11)
    {
      case 0:
        v11 = 0;
        goto LABEL_25;
      case 1:
        goto LABEL_25;
      case 2:
        v11 = 2;
        goto LABEL_25;
      case 3:
        v14 = type metadata accessor for HandsNearbySuppressor();
        v15 = swift_allocObject();
        *(_QWORD *)(v15 + 16) = 3;
        *(_BYTE *)(v15 + 24) = 1;
        *(_DWORD *)(v15 + 28) = 1028443341;
        *(_QWORD *)(v15 + 32) = &outlined read-only object #1 of MiddleDoubleTapPostProcessing.reset();
        v16 = &protocol witness table for HandsNearbySuppressor;
        goto LABEL_16;
      case 4:
        v11 = 4;
        goto LABEL_25;
      case 5:
        v11 = 5;
        goto LABEL_25;
      case 6:
        v11 = 6;
        goto LABEL_25;
      case 7:
        v11 = 7;
        goto LABEL_25;
      case 8:
        v14 = type metadata accessor for KeyboardTypingSuppressor();
        v15 = swift_allocObject();
        *(_QWORD *)(v15 + 16) = 8;
        *(_BYTE *)(v15 + 24) = 1;
        *(_OWORD *)(v15 + 28) = v40;
        *(_QWORD *)(v15 + 44) = 0x3D99999A42960000;
        v16 = &protocol witness table for KeyboardTypingSuppressor;
LABEL_16:
        *((_QWORD *)&v58 + 1) = v14;
        v59 = v16;
        *(_QWORD *)&v57 = v15;
        outlined init with take of PinchCancellationModule(&v57, (uint64_t)&aBlock);
        outlined init with take of PinchCancellationModule(&aBlock, (uint64_t)&v57);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
        v18 = v45[2];
        v17 = v45[3];
        if (v18 >= v17 >> 1)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v45);
        v19 = v45;
        v45[2] = v18 + 1;
        outlined init with take of PinchCancellationModule(&v57, (uint64_t)&v19[5 * v18 + 4]);
        goto LABEL_3;
      case 9:
        v11 = 9;
        goto LABEL_25;
      case 10:
        v11 = 10;
        goto LABEL_25;
      case 11:
        v11 = 11;
        goto LABEL_25;
      default:
        v13 = 0;
LABEL_25:
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        v20._countAndFlagsBits = 0xD00000000000001BLL;
        v20._object = v47;
        String.append(_:)(v20);
        *(_QWORD *)&v54[0] = v11;
        BYTE8(v54[0]) = v13;
        _print_unlocked<A, B>(_:_:)();
        v56 = MEMORY[0x24BEE0D00];
        v55 = aBlock;
        v21 = type metadata accessor for HandyLoggerNeo();
        if (static HandyLoggerNeo._currentLogLevel > 4)
        {
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v55);
          v57 = 0u;
          v58 = 0u;
          v59 = 0;
          outlined destroy of MiddleDoubleTapPostProcessingSuppressor?((uint64_t)&v57);
        }
        else
        {
          v22 = v21;
          v23 = (void *)MEMORY[0x2426372E8](0xD000000000000098, v42);
          v24 = objc_msgSend(v23, sel_lastPathComponent);

          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v27 = v26;

          static Date.now.getter();
          if (one-time initialization token for _dispatchQ != -1)
            swift_once();
          v46 = (id)static HandyLoggerNeo._dispatchQ;
          v28 = v44;
          (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v44, v7, v0);
          outlined init with copy of Any((uint64_t)&v55, (uint64_t)v54);
          v29 = *(unsigned __int8 *)(v1 + 80);
          v30 = v1;
          v31 = v0;
          v32 = (v29 + 96) & ~v29;
          v33 = (v43 + v32) & 0xFFFFFFFFFFFFFFF8;
          v34 = swift_allocObject();
          *(_DWORD *)(v34 + 16) = 4;
          *(_QWORD *)(v34 + 24) = v22;
          *(_OWORD *)(v34 + 32) = 0u;
          *(_OWORD *)(v34 + 48) = 0u;
          *(_DWORD *)(v34 + 64) = 1;
          *(_QWORD *)(v34 + 72) = v25;
          *(_QWORD *)(v34 + 80) = v27;
          *(_QWORD *)(v34 + 88) = 28;
          v35 = v34 + v32;
          v0 = v31;
          v1 = v30;
          (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v35, v28, v0);
          outlined init with take of Any(v54, (_OWORD *)(v34 + v33));
          *(_QWORD *)(v34 + ((v33 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
          v36 = swift_allocObject();
          *(_QWORD *)(v36 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
          *(_QWORD *)(v36 + 24) = v34;
          v52 = thunk for @callee_guaranteed () -> ()partial apply;
          v53 = v36;
          *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          v50 = thunk for @escaping @callee_guaranteed () -> ();
          v51 = &block_descriptor_14_2;
          v37 = _Block_copy(&aBlock);
          v38 = v46;
          swift_retain();
          swift_release();
          dispatch_sync(v38, v37);

          _Block_release(v37);
          LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v37 & 1) != 0)
          {
            __break(1u);
            JUMPOUT(0x23D8ADAE4);
          }
          v7 = v41;
          (*(void (**)(char *, uint64_t))(v30 + 8))(v41, v0);
          swift_release();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v55);
          v57 = 0u;
          v58 = 0u;
          v59 = 0;
          outlined destroy of MiddleDoubleTapPostProcessingSuppressor?((uint64_t)&v57);
        }
LABEL_3:
        v8 = 1;
        v9 = 0x10u;
        if ((v48 & 1) == 0)
          continue;
        *(_QWORD *)(v39[1] + 16) = v45;
        swift_bridgeObjectRelease();
        return;
    }
  }
}

uint64_t MiddleDoubleTapPostProcessing.process(_:)(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;

  if (*(_BYTE *)(v1 + 32) == 1)
  {
    v2 = (unint64_t *)result;
    Hands_trace_CBridge();
    CMTime.seconds.getter();
    v4 = *(_QWORD *)(v1 + 16);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = v3;
      v7 = (_QWORD *)(v4 + 32);
      swift_bridgeObjectRetain();
      do
      {
        closure #1 in MiddleDoubleTapPostProcessing.process(_:)(v7, v2, v6);
        v7 += 5;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    return Hands_trace_CBridge();
  }
  return result;
}

uint64_t closure #1 in MiddleDoubleTapPostProcessing.process(_:)(_QWORD *a1, unint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t aBlock;
  unint64_t v60;
  uint64_t (*v61)(uint64_t);
  void *v62;
  uint64_t (*v63)();
  uint64_t v64;
  _OWORD v65[2];
  _QWORD v66[5];

  v58 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v58 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v58, v8);
  v50 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v44 - v11;
  v13 = a1[3];
  v14 = a1[4];
  v55 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v14 + 16);
  v16 = swift_bridgeObjectRetain();
  LOBYTE(a1) = v15(v16, v13, v14, a3);
  result = swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    v18 = *a2;
    v19 = *(_QWORD *)(*a2 + 16);
    if (v19)
    {
      v20 = 0;
      v49 = v7 + 7;
      v54 = (void *)0x800000023D9D5A30;
      v48 = 0x800000023D9D5A70;
      v47 = a2;
      v46 = v19;
      v45 = v12;
      while (v20 < *(_QWORD *)(v18 + 16))
      {
        v21 = *(_QWORD *)(type metadata accessor for HandDescriptor() - 8);
        v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        v23 = *(_QWORD *)(v21 + 72) * v20;
        v24 = v58;
        if ((*(_BYTE *)(v18 + v22 + v23 + 138) & 1) != 0)
        {
          v56 = *(_QWORD *)(v21 + 72) * v20;
          v57 = v22;
          aBlock = 0;
          v60 = 0xE000000000000000;
          _StringGuts.grow(_:)(57);
          v25._countAndFlagsBits = 0xD000000000000036;
          v25._object = v54;
          String.append(_:)(v25);
          v26 = v55[3];
          v27 = v55[4];
          __swift_project_boxed_opaque_existential_1(v55, v26);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v27 + 8))(v66, v26, v27);
          *(_QWORD *)&v65[0] = v66[0];
          v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v28);
          swift_bridgeObjectRelease();
          v29._countAndFlagsBits = 46;
          v29._object = (void *)0xE100000000000000;
          String.append(_:)(v29);
          v66[3] = MEMORY[0x24BEE0D00];
          v66[0] = aBlock;
          v66[1] = v60;
          v30 = type metadata accessor for HandyLoggerNeo();
          if (static HandyLoggerNeo._currentLogLevel <= 2)
          {
            v31 = v30;
            v32 = (void *)MEMORY[0x2426372E8](0xD00000000000008ELL, v48);
            v33 = objc_msgSend(v32, sel_lastPathComponent);

            v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v51 = v34;

            static Date.now.getter();
            if (one-time initialization token for _dispatchQ != -1)
              swift_once();
            v53 = (id)static HandyLoggerNeo._dispatchQ;
            v35 = v50;
            (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v50, v12, v24);
            outlined init with copy of Any((uint64_t)v66, (uint64_t)v65);
            v36 = (*(unsigned __int8 *)(v6 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
            v37 = (v49 + v36) & 0xFFFFFFFFFFFFFFF8;
            v38 = swift_allocObject();
            *(_DWORD *)(v38 + 16) = 2;
            *(_QWORD *)(v38 + 24) = v31;
            *(_OWORD *)(v38 + 32) = 0u;
            *(_OWORD *)(v38 + 48) = 0u;
            *(_DWORD *)(v38 + 64) = 1;
            v39 = v51;
            *(_QWORD *)(v38 + 72) = v52;
            *(_QWORD *)(v38 + 80) = v39;
            *(_QWORD *)(v38 + 88) = 55;
            (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v38 + v36, v35, v24);
            outlined init with take of Any(v65, (_OWORD *)(v38 + v37));
            *(_QWORD *)(v38 + ((v37 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
            v40 = swift_allocObject();
            *(_QWORD *)(v40 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
            *(_QWORD *)(v40 + 24) = v38;
            v63 = _sIg_Ieg_TRTA_0;
            v64 = v40;
            aBlock = MEMORY[0x24BDAC760];
            v60 = 1107296256;
            v61 = thunk for @escaping @callee_guaranteed () -> ();
            v62 = &block_descriptor_19;
            v41 = _Block_copy(&aBlock);
            v42 = v53;
            swift_retain();
            swift_release();
            dispatch_sync(v42, v41);

            _Block_release(v41);
            LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
            result = swift_release();
            if ((v41 & 1) != 0)
              goto LABEL_20;
            v43 = v45;
            (*(void (**)(char *, uint64_t))(v6 + 8))(v45, v24);
            swift_release();
            a2 = v47;
            v12 = v43;
            v19 = v46;
          }
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v66);
          v18 = *a2;
          v23 = v56;
          v22 = v57;
        }
        result = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v18;
        if ((result & 1) == 0)
        {
          result = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          v18 = result;
        }
        if (v20 >= *(_QWORD *)(v18 + 16))
          goto LABEL_19;
        ++v20;
        *(_BYTE *)(v18 + v22 + v23 + 138) = 0;
        *a2 = v18;
        if (v19 == v20)
          return result;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t MiddleDoubleTapPostProcessing.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MiddleDoubleTapPostProcessing()
{
  return objc_opt_self();
}

void protocol witness for TwoHandProcessingPipeline.reconfig(_:) in conformance MiddleDoubleTapPostProcessing(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *v1;
  v3 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  v4 = a1;

  MiddleDoubleTapPostProcessing.reset()();
}

uint64_t protocol witness for TwoHandProcessingPipeline.process(_:) in conformance MiddleDoubleTapPostProcessing(uint64_t a1)
{
  return MiddleDoubleTapPostProcessing.process(_:)(a1);
}

uint64_t sub_23D8AE1E8()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t sub_23D8AE214()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of MiddleDoubleTapPostProcessingSuppressor?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapPostProcessingSuppressor?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64VSiG_Si_AGts5NeverOTg504_ss6d37VS2iABIgyydd_AB3key_Si5valuetSi_ABts5E201OIegnrzr_TR0125_s5Hands27TrackingProcessingFunctionsC12AssignHandID5hands06latestfG014matchingResult0H12KitTimestampSayAA0F10DescriptorVG_s6A48VAA0B5StateOtAK_AMSDyAMSiGAMtFZSi_AMtAM_SitXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v26 = *(_QWORD *)(a1 + 16);
  v28 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v28;
  result = specialized Dictionary.startIndex.getter(a1);
  v5 = result;
  v7 = v26;
  v6 = a1;
  v8 = 0;
  v9 = a1 + 64;
  v10 = a1 + 80;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v6 + 32))
  {
    v12 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v6 + 36) != (_DWORD)v4)
      goto LABEL_24;
    v13 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v5);
    v14 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v5);
    v16 = *(_QWORD *)(v28 + 16);
    v15 = *(_QWORD *)(v28 + 24);
    if (v16 >= v15 >> 1)
    {
      v24 = v9;
      v25 = v4;
      v23 = v10;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v10 = v23;
      v9 = v24;
      v4 = v25;
      v7 = v26;
      v6 = a1;
    }
    *(_QWORD *)(v28 + 16) = v16 + 1;
    v17 = v28 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v14;
    *(_QWORD *)(v17 + 40) = v13;
    v11 = 1 << *(_BYTE *)(v6 + 32);
    if (v5 >= v11)
      goto LABEL_25;
    v18 = *(_QWORD *)(v9 + 8 * v12);
    if ((v18 & (1 << v5)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(v6 + 36) != (_DWORD)v4)
      goto LABEL_27;
    v19 = v18 & (-2 << (v5 & 0x3F));
    if (v19)
    {
      v11 = __clz(__rbit64(v19)) | v5 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = v12 + 1;
      v21 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v21)
      {
        v22 = *(_QWORD *)(v9 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v11 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v12)
          {
            v22 = *(_QWORD *)(v10 + 8 * v12++);
            if (v22)
            {
              v20 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v5 = v11;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

double TrackingState.process(handsData:trackingInfos:intermediateData:schedulingData:config:isN301:detectionSpec:serializeInternalData:)(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4, const void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  double result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[720];
  _OWORD v43[9];
  uint64_t v44;
  char v45;
  _BYTE v46[460];
  _BYTE v47[160];
  _QWORD v48[72];

  v17 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v17, v18);
  memcpy(v48, a5, 0x228uLL);
  v39 = *a6;
  v40 = a6[1];
  v34 = *a8;
  v35 = a8[1];
  v37 = a8[2];
  memcpy(v46, a9, sizeof(v46));
  if ((a14 & 1) != 0)
    __asm { BR              X10 }
  memcpy(a2, a5, 0x228uLL);
  *a3 = v39;
  a3[1] = v40;
  *a4 = v34;
  a4[1] = v35;
  a4[2] = v37;
  v19 = a7[20];
  v20 = a7[21];
  outlined init with take of ImageData?((uint64_t)a7, (uint64_t)v42, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(v48);
  outlined retain of TrackingIntermediateData(a7);
  swift_bridgeObjectRetain();
  outlined init with take of ImageData?((uint64_t)v42, (uint64_t)v47, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  outlined init with take of ImageData?((uint64_t)v47, (uint64_t)v43, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  v21 = v44;
  v22 = v45;
  result = *(double *)v43;
  v24 = v43[1];
  v25 = v43[2];
  v26 = v43[3];
  v27 = v43[4];
  v28 = v43[5];
  v29 = v43[6];
  v30 = v43[7];
  v31 = v43[8];
  *(_OWORD *)a1 = v43[0];
  *(_OWORD *)(a1 + 16) = v24;
  *(_OWORD *)(a1 + 32) = v25;
  *(_OWORD *)(a1 + 48) = v26;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 80) = v28;
  *(_OWORD *)(a1 + 96) = v29;
  *(_OWORD *)(a1 + 112) = v30;
  *(_OWORD *)(a1 + 128) = v31;
  *(_QWORD *)(a1 + 144) = v21;
  *(_BYTE *)(a1 + 152) = v22;
  *(_QWORD *)(a1 + 160) = v19;
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 176) = a13;
  *(_BYTE *)(a1 + 184) = a14 & 1;
  return result;
}

uint64_t TrackingState.schedule(handsData:trackingInfos:intermediateData:detectionScheduler:trackingConfig:config:pipeline:)(_QWORD *a1, _OWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  v11 = a4[1];
  if ((a11 & 1) != 0)
    __asm { BR              X10 }
  *a1 = *a4;
  a1[1] = v11;
  *a2 = 0u;
  a2[1] = 0u;
  swift_bridgeObjectRetain();
  return 0;
}

void sub_23D8B3744()
{
  _OWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  v2[1] = v1;
  *v0 = 0u;
  v0[1] = 0u;
  swift_bridgeObjectRetain();
  JUMPOUT(0x23D8B371CLL);
}

void sub_23D8B3764()
{
  _OWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  specialized DetectionScheduler.updateCounters(tinfoCount:config:handsKitTimestamp:)(*(_QWORD *)(v1 + 16), v3);
  *v2 = v4;
  v2[1] = v1;
  *v0 = 0u;
  v0[1] = 0u;
  swift_bridgeObjectRetain();
  JUMPOUT(0x23D8B371CLL);
}

void sub_23D8B38F8(unint64_t a1, uint64_t a2, const void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,uint64_t __dst,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  int a67;
  int a68;
  uint64_t a69;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  _OWORD *v73;
  uint64_t *v74;
  _OWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _OWORD *v99;

  v99 = v73;
  v91 = v69;
  v92 = v71;
  v93 = v70;
  v90 = v72;
  v89 = v74;
  memcpy(&__dst, a3, 0x150uLL);
  a66 = v91;
  a67 = v90;
  a68 = v92;
  a69 = v93;
  STACK[0x200] = v79;
  STACK[0x208] = v81;
  STACK[0x210] = v82;
  LOBYTE(STACK[0x218]) = v83;
  LOWORD(STACK[0x219]) = *(_WORD *)a24;
  LOBYTE(STACK[0x21B]) = *(_BYTE *)(a24 + 2);
  *v89 = a25;
  LODWORD(STACK[0x224]) = a26;
  LODWORD(STACK[0x228]) = a27;
  v89[2] = v84;
  v89[3] = a8;
  v89[4] = a7;
  v89[5] = a5;
  LOBYTE(STACK[0x24C]) = a4;
  LOWORD(STACK[0x24D]) = *(_WORD *)a2;
  LOBYTE(STACK[0x24F]) = *(_BYTE *)(a2 + 2);
  STACK[0x250] = a1;
  v85 = v99[3];
  *(_OWORD *)&STACK[0x278] = v99[2];
  *(_OWORD *)&STACK[0x288] = v85;
  v86 = v99[5];
  *(_OWORD *)&STACK[0x298] = v99[4];
  *(_OWORD *)&STACK[0x2A8] = v86;
  v87 = v99[1];
  *(_OWORD *)&STACK[0x258] = *v99;
  *(_OWORD *)&STACK[0x268] = v87;
  v88 = specialized DetectionScheduler.generateHandConfirmationRequest(handsKitData:trackingInfos:updateConfig:config:)((uint64_t)&__dst, v76, v78);
  *v77 = v80;
  v77[1] = v88;
  *v75 = 0u;
  v75[1] = 0u;
  JUMPOUT(0x23D8B371CLL);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands12TrackingInfoVG_AHs5NeverOTg5010_s5Hands27e100ProcessingFunctionsC06UpdateB6Filter13trackingInfos5hands10updateData6config0I12KitTimestampSayAA0B4f3VG_v12B5StateOtAL_U67AA14HandDescriptorVGSDys6UInt64VAA0beK0VGAA0bE6ConfigVAStFZA2KXEfU_AF0eM6ConfigVSDys6UInt64VAF0eM4DataVGTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v10;
  int64_t i;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[312];
  _BYTE v16[320];
  _BYTE __src[320];
  _BYTE __dst[320];
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v19 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v19;
    v10 = (char *)(a1 + 32);
    for (i = v5 - 1; ; --i)
    {
      memcpy(__dst, v10, 0x138uLL);
      memcpy(v16, v10, 0x138uLL);
      outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
      closure #1 in static TrackingProcessingFunctions.UpdateTrackingFilter(trackingInfos:hands:updateData:config:handsKitTimestamp:)(v16, a2, a3, (uint64_t)__src);
      if (v4)
        break;
      v4 = 0;
      outlined release of TrackingInfo((uint64_t)__dst);
      memcpy(v15, __src, sizeof(v15));
      v19 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      memcpy((void *)(v6 + 320 * v13 + 32), v15, 0x138uLL);
      if (!i)
        return v6;
      v10 += 320;
    }
    outlined release of TrackingInfo((uint64_t)__dst);
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands12TrackingInfoVG_AHs5NeverOTg5010_s5Hands27e31ProcessingFunctionsC06UpdateB11F134Counter13trackingInfos10updateData6config17handsKitTimestampSayAA0bF0VG_AA0B5StateOtAK_SDys6UInt64VAA0beK0VGAA0bE6ConfigVAOtFZA2JXEfU_SDys6UInt64VAF0eM4DataVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  int64x2_t v45;
  int64x2_t v46;
  __int16 v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  char v53;
  _BYTE v54[7];
  int v55;
  __int16 v56;
  __int16 v57;
  char v58;
  _BYTE __dst[312];
  uint64_t v60;
  char *v61;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v60 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v60;
    v6 = (char *)(a1 + 32);
    v61 = &__dst[304];
    v7 = v2 - 1;
    v45 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    while (1)
    {
      memcpy(__dst, v6, sizeof(__dst));
      v8 = *(_QWORD *)&__dst[16];
      v46 = *(int64x2_t *)__dst;
      if (*(_QWORD *)(a2 + 16))
      {
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)&__dst[16]);
        if ((v10 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(a2 + 56) + 96 * v9 + 40) & 1) == 0)
          v46 = (int64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v46, v45), (int8x16_t)v45, (int8x16_t)vaddq_s64(v46, vdupq_n_s64(1uLL)));
      }
      outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
      v60 = v3;
      v12 = *(_QWORD *)(v3 + 16);
      v11 = *(_QWORD *)(v3 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v3 = v60;
      }
      v13 = *(_DWORD *)&__dst[308];
      v14 = *(_QWORD *)&__dst[296];
      v15 = *(_DWORD *)&__dst[288];
      v16 = *(_OWORD *)&__dst[256];
      v17 = *(_OWORD *)&__dst[272];
      v18 = *(_DWORD *)&__dst[240];
      v19 = *(_QWORD *)&__dst[232];
      v20 = __dst[228];
      v21 = *(_DWORD *)&__dst[224];
      v22 = *(_OWORD *)&__dst[192];
      v23 = *(_OWORD *)&__dst[208];
      v24 = __dst[177];
      v25 = __dst[176];
      v27 = *(_QWORD *)&__dst[160];
      v26 = *(_QWORD *)&__dst[168];
      v28 = __dst[152];
      v29 = __dst[129];
      v30 = __dst[128];
      v31 = *(_QWORD *)&__dst[80];
      v32 = *(_QWORD *)&__dst[104];
      v33 = __dst[28];
      v34 = *(_DWORD *)&__dst[24];
      v35 = *(_QWORD *)&__dst[136];
      v36 = *(_QWORD *)&__dst[144];
      v49 = *v61;
      v37 = v3 + 320 * v12;
      v38 = *(_OWORD *)&__dst[32];
      v39 = *(_OWORD *)&__dst[48];
      v40 = *(_OWORD *)&__dst[64];
      v41 = *(_OWORD *)&__dst[88];
      v42 = *(_OWORD *)&__dst[112];
      v43 = *(_QWORD *)&__dst[180];
      *(_QWORD *)(v3 + 16) = v12 + 1;
      *(int64x2_t *)(v37 + 32) = v46;
      v37 += 32;
      *(_QWORD *)(v37 + 16) = v8;
      *(_DWORD *)(v37 + 24) = v34;
      *(_BYTE *)(v37 + 28) = v33;
      *(_WORD *)(v37 + 29) = v57;
      *(_BYTE *)(v37 + 31) = v58;
      *(_OWORD *)(v37 + 32) = v38;
      *(_OWORD *)(v37 + 48) = v39;
      *(_OWORD *)(v37 + 64) = v40;
      *(_QWORD *)(v37 + 80) = v31;
      *(_OWORD *)(v37 + 88) = v41;
      *(_QWORD *)(v37 + 104) = v32;
      *(_OWORD *)(v37 + 112) = v42;
      *(_BYTE *)(v37 + 128) = v30;
      *(_BYTE *)(v37 + 129) = v29;
      *(_WORD *)(v37 + 134) = v56;
      *(_DWORD *)(v37 + 130) = v55;
      *(_QWORD *)(v37 + 136) = v35;
      *(_QWORD *)(v37 + 144) = v36;
      *(_BYTE *)(v37 + 152) = v28;
      *(_DWORD *)(v37 + 153) = *(_DWORD *)v54;
      *(_DWORD *)(v37 + 156) = *(_DWORD *)&v54[3];
      *(_QWORD *)(v37 + 160) = v27;
      *(_QWORD *)(v37 + 168) = v26;
      *(_BYTE *)(v37 + 176) = v25;
      *(_BYTE *)(v37 + 177) = v24;
      *(_QWORD *)(v37 + 180) = v43;
      *(_OWORD *)(v37 + 192) = v22;
      *(_OWORD *)(v37 + 208) = v23;
      *(_DWORD *)(v37 + 224) = v21;
      *(_BYTE *)(v37 + 228) = v20;
      *(_BYTE *)(v37 + 231) = v53;
      *(_WORD *)(v37 + 229) = v52;
      *(_QWORD *)(v37 + 232) = v19;
      *(_DWORD *)(v37 + 240) = v18;
      *(_DWORD *)(v37 + 252) = v51;
      *(_QWORD *)(v37 + 244) = v50;
      *(_OWORD *)(v37 + 256) = v16;
      *(_OWORD *)(v37 + 272) = v17;
      *(_DWORD *)(v37 + 288) = v15;
      *(_QWORD *)(v37 + 296) = v14;
      *(_BYTE *)(v37 + 304) = v49;
      *(_BYTE *)(v37 + 307) = v48;
      *(_WORD *)(v37 + 305) = v47;
      *(_DWORD *)(v37 + 308) = v13;
      if (!v7)
        break;
      v6 += 320;
      --v7;
    }
  }
  return v3;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[2];
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v30 = a2;
  v4 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (char *)v28 - v11;
  result = MEMORY[0x24BEE4AF8];
  v31 = MEMORY[0x24BEE4AF8];
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v28[1] = v2;
    v15 = 0;
    v16 = *(_QWORD *)(v10 + 72);
    v29 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v17 = a1 + v29;
    v18 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      outlined init with copy of HandDescriptor(v17 + v16 * v15, (uint64_t)v12);
      v19 = *v30;
      if (!*(_QWORD *)(*v30 + 16))
        goto LABEL_12;
      v20 = *((_QWORD *)v12 + 18);
      v21 = static Hasher._hash(seed:_:)();
      v22 = -1 << *(_BYTE *)(v19 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v19 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        goto LABEL_12;
      v24 = *(_QWORD *)(v19 + 48);
      if (*(_QWORD *)(v24 + 8 * v23) != v20)
        break;
LABEL_3:
      outlined destroy of HandDescriptor((uint64_t)v12);
LABEL_4:
      if (++v15 == v14)
        return v31;
    }
    v25 = ~v22;
    while (1)
    {
      v23 = (v23 + 1) & v25;
      if (((*(_QWORD *)(v19 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        break;
      if (*(_QWORD *)(v24 + 8 * v23) == v20)
        goto LABEL_3;
    }
LABEL_12:
    outlined init with take of HandDescriptor((uint64_t)v12, (uint64_t)v7);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
    v18 = v31;
    v27 = *(_QWORD *)(v31 + 16);
    v26 = *(_QWORD *)(v31 + 24);
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      v18 = v31;
    }
    *(_QWORD *)(v18 + 16) = v27 + 1;
    outlined init with take of HandDescriptor((uint64_t)v7, v18 + v29 + v27 * v16);
    goto LABEL_4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v30 = a2;
  v4 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (char *)&v27 - v11;
  result = MEMORY[0x24BEE4AF8];
  v31 = MEMORY[0x24BEE4AF8];
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v27 = v2;
    v15 = 0;
    v16 = *(_QWORD *)(v10 + 72);
    v28 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v29 = a1 + v28;
    v17 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v29 + v16 * v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v18 = *v30;
      if (!*(_QWORD *)(*v30 + 16))
        goto LABEL_12;
      v19 = *((_QWORD *)v12 + 18);
      v20 = static Hasher._hash(seed:_:)();
      v21 = -1 << *(_BYTE *)(v18 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)(v18 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        goto LABEL_12;
      v23 = *(_QWORD *)(v18 + 48);
      if (*(_QWORD *)(v23 + 8 * v22) != v19)
        break;
LABEL_3:
      outlined destroy of HandDescriptor((uint64_t)v12);
LABEL_4:
      if (++v15 == v14)
        return v31;
    }
    v24 = ~v21;
    while (1)
    {
      v22 = (v22 + 1) & v24;
      if (((*(_QWORD *)(v18 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        break;
      if (*(_QWORD *)(v23 + 8 * v22) == v19)
        goto LABEL_3;
    }
LABEL_12:
    outlined init with take of Matrix2dPB((uint64_t)v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
    v17 = v31;
    v26 = *(_QWORD *)(v31 + 16);
    v25 = *(_QWORD *)(v31 + 24);
    if (v26 >= v25 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
      v17 = v31;
    }
    *(_QWORD *)(v17 + 16) = v26 + 1;
    outlined init with take of Matrix2dPB((uint64_t)v7, v17 + v28 + v26 * v16, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    goto LABEL_4;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;

  v12 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v12, v13);
  v45 = (uint64_t)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v19 = (char *)v41 - v18;
  result = MEMORY[0x24BEE4AF8];
  v48 = MEMORY[0x24BEE4AF8];
  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
    return result;
  v41[1] = v7;
  v22 = 0;
  v23 = *(_QWORD *)(v17 + 72);
  v44 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v24 = a1 + v44;
  v25 = v23;
  v26 = a7 + 80;
  v46 = *(unsigned __int8 *)(a3 + 81) | (a7 == 0);
  v47 = (_BYTE *)(a2 + 161);
  v27 = MEMORY[0x24BEE4AF8];
  v42 = v24;
  v43 = v21;
  while (1)
  {
    result = outlined init with copy of HandDescriptor(v24 + v25 * v22, (uint64_t)v19);
    v28 = *((_QWORD *)v19 + 18);
    v29 = *(_QWORD *)(a2 + 16);
    v30 = v47;
    if (v29)
    {
      while (*(_QWORD *)(v30 - 113) != v28)
      {
        v30 += 320;
        if (!--v29)
          goto LABEL_10;
      }
      if ((*v30 & 1) == 0)
      {
LABEL_24:
        v37 = a2;
        v38 = a7;
        outlined init with take of HandDescriptor((uint64_t)v19, v45);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v27 = v48;
        v40 = *(_QWORD *)(v48 + 16);
        v39 = *(_QWORD *)(v48 + 24);
        if (v40 >= v39 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          v27 = v48;
        }
        *(_QWORD *)(v27 + 16) = v40 + 1;
        outlined init with take of HandDescriptor(v45, v27 + v44 + v40 * v25);
        a7 = v38;
        a2 = v37;
        v24 = v42;
        v21 = v43;
        goto LABEL_4;
      }
    }
LABEL_10:
    if ((v46 & 1) == 0)
    {
      v31 = *(_QWORD *)(a7 + 16);
      if (v31)
        break;
    }
LABEL_3:
    outlined destroy of HandDescriptor((uint64_t)v19);
LABEL_4:
    if (++v22 == v21)
      return v48;
  }
  v32 = 0;
  while (1)
  {
    v33 = *(_QWORD **)(v26 + (v32 << 7));
    v34 = v33[2];
    if (v34)
    {
      if (v33[4] == v28)
        goto LABEL_24;
      if (v34 != 1)
      {
        if (v33[5] == v28)
          goto LABEL_24;
        if (v34 != 2)
          break;
      }
    }
LABEL_13:
    if (++v32 == v31)
      goto LABEL_3;
  }
  v35 = 6;
  while (1)
  {
    v36 = v35 - 3;
    if (__OFADD__(v35 - 4, 1))
      break;
    if (v33[v35] == v28)
      goto LABEL_24;
    ++v35;
    if (v36 == v34)
      goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t *outlined retain of TrackingIntermediateData(uint64_t *a1)
{
  outlined copy of SimilarityMatrixCollection?(*a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  int64_t v26;
  uint64_t v27[2];
  uint64_t v28;

  v28 = a1;
  v12 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(a2 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  while (v15)
  {
    v19 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v20 = v19 | (v18 << 6);
LABEL_5:
    v21 = 8 * v20;
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + v21);
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v21);
    v27[0] = v22;
    v27[1] = v23;
    result = (uint64_t)specialized closure #1 in static TrackingUtils.verifyAssociation(hands:tinfos:matchResult:config:)(&v28, v27, a3, a4, a5, a6);
    if (v6)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v18 >= v16)
    goto LABEL_25;
  v25 = *(_QWORD *)(v12 + 8 * v18);
  if (v25)
  {
LABEL_19:
    v15 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v18 << 6);
    goto LABEL_5;
  }
  v26 = v18 + 1;
  if (v18 + 1 >= v16)
    goto LABEL_25;
  v25 = *(_QWORD *)(v12 + 8 * v26);
  if (v25)
    goto LABEL_18;
  v26 = v18 + 2;
  if (v18 + 2 >= v16)
    goto LABEL_25;
  v25 = *(_QWORD *)(v12 + 8 * v26);
  if (v25)
    goto LABEL_18;
  v26 = v18 + 3;
  if (v18 + 3 >= v16)
    goto LABEL_25;
  v25 = *(_QWORD *)(v12 + 8 * v26);
  if (v25)
    goto LABEL_18;
  v26 = v18 + 4;
  if (v18 + 4 >= v16)
  {
LABEL_25:
    swift_release();
    return v28;
  }
  v25 = *(_QWORD *)(v12 + 8 * v26);
  if (v25)
  {
LABEL_18:
    v18 = v26;
    goto LABEL_19;
  }
  while (1)
  {
    v18 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v18 >= v16)
      goto LABEL_25;
    v25 = *(_QWORD *)(v12 + 8 * v18);
    ++v26;
    if (v25)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;
  int v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a1;
  v33 = a2 + 64;
  v8 = 1 << *(_BYTE *)(a2 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a2 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * i);
    v19 = *(_QWORD *)(a2 + 56) + 96 * i;
    v20 = *(_BYTE *)(v19 + 32);
    v21 = *(_BYTE *)(v19 + 33);
    v22 = *(_DWORD *)(v19 + 36);
    v23 = *(_BYTE *)(v19 + 40);
    v24 = *(_DWORD *)(v19 + 44);
    v25 = *(_BYTE *)(v19 + 48);
    v26 = *(_QWORD *)(v19 + 56);
    v27 = *(_BYTE *)(v19 + 64);
    v28 = *(_BYTE *)(v19 + 65);
    v29 = *(_BYTE *)(v19 + 66);
    v30 = *(_QWORD *)(v19 + 80);
    v31 = *(_QWORD *)(v19 + 88);
    v35 = v18;
    v32 = *(_OWORD *)(v19 + 16);
    v36 = *(_OWORD *)v19;
    v37 = v32;
    v38 = v20;
    v39 = v21;
    v40 = v22;
    v41 = v23;
    v42 = v24;
    v43 = v25;
    v44 = v26;
    v45 = v27;
    v46 = v28;
    v47 = v29;
    v48 = *(_QWORD *)(v19 + 68);
    v49 = v30;
    v50 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in static TrackingProcessingFunctions.ComputeHandCenterAndReliability(trackingInfos:hands:updateData:config:handsKitTimestamp:)(&v51, (uint64_t)&v35, a3, a4);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v34)
      goto LABEL_26;
    v16 = *(_QWORD *)(v33 + 8 * v12);
    if (!v16)
      break;
LABEL_17:
    v10 = (v16 - 1) & v16;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v34)
    goto LABEL_26;
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 2;
  if (v12 + 2 >= v34)
    goto LABEL_26;
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 3;
  if (v12 + 3 >= v34)
    goto LABEL_26;
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 4;
  if (v12 + 4 >= v34)
  {
LABEL_26:
    swift_release();
    return v51;
  }
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
  {
LABEL_16:
    v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v34)
      goto LABEL_26;
    v16 = *(_QWORD *)(v33 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.reduce<A>(into:_:)(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, double *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  int v46;
  char v47;
  int v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v57 = a1;
  v36 = a2 + 64;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a2 + 64);
  v37 = (unint64_t)(v11 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain();
  v15 = 0;
  if (!v13)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * i);
    v22 = *(_QWORD *)(a2 + 56) + 96 * i;
    v23 = *(_BYTE *)(v22 + 32);
    v24 = *(_BYTE *)(v22 + 33);
    v25 = *(_DWORD *)(v22 + 36);
    v26 = *(_BYTE *)(v22 + 40);
    v27 = *(_DWORD *)(v22 + 44);
    v28 = *(_BYTE *)(v22 + 48);
    v29 = *(_QWORD *)(v22 + 56);
    v30 = *(_BYTE *)(v22 + 64);
    v31 = *(_BYTE *)(v22 + 65);
    v32 = *(_BYTE *)(v22 + 66);
    v34 = *(_QWORD *)(v22 + 80);
    v33 = *(_QWORD *)(v22 + 88);
    v41 = v21;
    v35 = *(_OWORD *)(v22 + 16);
    v42 = *(_OWORD *)v22;
    v43 = v35;
    v44 = v23;
    v45 = v24;
    v46 = v25;
    v47 = v26;
    v48 = v27;
    v49 = v28;
    v50 = v29;
    v51 = v30;
    v52 = v31;
    v53 = v32;
    v54 = *(_QWORD *)(v22 + 68);
    v55 = v34;
    v56 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in static TrackingProcessingFunctions.CreateTrackingInfo(trackingInfos:handsInput:updateData:config:handsKitTimestamp:)(&v57, (uint64_t)&v41, a3, a4, a5, a6, a7);
    if (v7)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v15 >= v37)
      goto LABEL_26;
    v19 = *(_QWORD *)(v36 + 8 * v15);
    if (!v19)
      break;
LABEL_17:
    v13 = (v19 - 1) & v19;
  }
  v20 = v15 + 1;
  if (v15 + 1 >= v37)
    goto LABEL_26;
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
    goto LABEL_16;
  v20 = v15 + 2;
  if (v15 + 2 >= v37)
    goto LABEL_26;
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
    goto LABEL_16;
  v20 = v15 + 3;
  if (v15 + 3 >= v37)
    goto LABEL_26;
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
    goto LABEL_16;
  v20 = v15 + 4;
  if (v15 + 4 >= v37)
  {
LABEL_26:
    swift_release();
    return v57;
  }
  v19 = *(_QWORD *)(v36 + 8 * v20);
  if (v19)
  {
LABEL_16:
    v15 = v20;
    goto LABEL_17;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v37)
      goto LABEL_26;
    v19 = *(_QWORD *)(v36 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay5Hands14HandDescriptorVGG_AJs5NeverOTg5012_sSi5Hands14gh34VACIgynr_Si6offset_AC7elementtACs5I11OIegnrzr_TRSiA2JIgynr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(_QWORD, char *);
  uint64_t v40;
  uint64_t v41;

  v39 = a2;
  v40 = a3;
  v4 = type metadata accessor for HandDescriptor();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: HandDescriptor));
  MEMORY[0x24BDAC7A8](v9, v10);
  v38 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (_QWORD *)((char *)v33 - v14);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)v33 - v18;
  v41 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v20 = a1;
  v21 = v41;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = swift_bridgeObjectRetain();
  v37 = v22;
  v33[1] = v23;
  if (v22)
  {
    v24 = 0;
    v25 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v34 = *(_QWORD *)(v5 + 72);
    v35 = v25;
    v26 = v23 + v25;
    v36 = v8;
    do
    {
      v27 = (uint64_t)&v38[*(int *)(v9 + 48)];
      outlined init with copy of HandDescriptor(v26, v27);
      v28 = (uint64_t)v15 + *(int *)(v9 + 48);
      *v15 = v24;
      outlined init with take of HandDescriptor(v27, v28);
      outlined init with take of ImageData?((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for (offset: Int, element: HandDescriptor));
      v39(*(_QWORD *)v19, &v19[*(int *)(v9 + 48)]);
      outlined destroy of Coordinate3DPB?((uint64_t)v19, &demangling cache variable for type metadata for (offset: Int, element: HandDescriptor));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v21 = v41;
      }
      v30 = *(_QWORD *)(v21 + 16);
      v29 = *(_QWORD *)(v21 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v21 = v41;
      }
      ++v24;
      *(_QWORD *)(v21 + 16) = v30 + 1;
      v31 = v34;
      outlined init with take of HandDescriptor((uint64_t)v36, v21 + v35 + v30 * v34);
      v26 += v31;
    }
    while (v37 != v24);
  }
  swift_bridgeObjectRelease();
  return v21;
}

_QWORD *specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *result, char a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *i;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = result[2];
  if (v3)
  {
    v6 = result;
    v8 = result[4];
    v7 = result[5];
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v15 = v10;
    if (v9[3] < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_27:
        result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v11 = v16;
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      *(_QWORD *)(v18[7] + 8 * v11) = v7;
      v19 = v3 - 1;
      if (v3 == 1)
        return (_QWORD *)swift_bridgeObjectRelease();
LABEL_16:
      for (i = v6 + 7; ; i += 2)
      {
        v26 = *(i - 1);
        v25 = *i;
        v27 = (_QWORD *)*a3;
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
        v30 = v27[2];
        v31 = (v29 & 1) == 0;
        v22 = __OFADD__(v30, v31);
        v32 = v30 + v31;
        if (v22)
          break;
        v33 = v29;
        if (v27[3] < v32)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
          v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
          if ((v33 & 1) != (v34 & 1))
            goto LABEL_27;
        }
        v35 = (_QWORD *)*a3;
        if ((v33 & 1) != 0)
        {
          *(_QWORD *)(v35[7] + 8 * v28) = v25;
        }
        else
        {
          v35[(v28 >> 6) + 8] |= 1 << v28;
          v36 = 8 * v28;
          *(_QWORD *)(v35[6] + v36) = v26;
          *(_QWORD *)(v35[7] + v36) = v25;
          v37 = v35[2];
          v22 = __OFADD__(v37, 1);
          v38 = v37 + 1;
          if (v22)
            goto LABEL_26;
          v35[2] = v38;
        }
        if (!--v19)
          return (_QWORD *)swift_bridgeObjectRelease();
      }
      goto LABEL_25;
    }
    if ((a2 & 1) != 0)
    {
      v18 = (_QWORD *)*a3;
      if ((v10 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v18[(v11 >> 6) + 8] |= 1 << v11;
    v20 = 8 * v11;
    *(_QWORD *)(v18[6] + v20) = v8;
    *(_QWORD *)(v18[7] + v20) = v7;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v18[2] = v23;
    v19 = v3 - 1;
    if (v3 == 1)
      return (_QWORD *)swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  return result;
}

uint64_t *outlined release of TrackingIntermediateData(uint64_t *a1)
{
  outlined consume of SimilarityMatrixCollection?(*a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of TrackingUpdateConfig(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of TrackingUpdateConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t partial apply for closure #3 in static TrackingProcessingFunctions.AssignHandID(hands:latestHandID:matchingResult:handsKitTimestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #3 in static TrackingProcessingFunctions.AssignHandID(hands:latestHandID:matchingResult:handsKitTimestamp:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD **)(v3 + 24), a3);
}

uint64_t outlined release of SimilarityMatrixCollection(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void protocol witness for Enum.init(rawValue:) in conformance HandCloseToMouthPB(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized HandCloseToMouthPB.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance HandCloseToMouthPB(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized HandCloseToMouthPB.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandCloseToMouthPB()
{
  lazy protocol witness table accessor for type HandCloseToMouthPB and conformance HandCloseToMouthPB();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance HandCloseToMouthPB@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  *a1 = static HandCloseToMouthPB.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandCloseToMouthPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandCloseToMouthPB._protobuf_nameMap, a1);
}

uint64_t CropBoxPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for Coordinate2DPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CropBoxPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for Coordinate2DPB(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!v0[1]
      || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for CropBoxPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance CropBoxPB@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CropBoxPB()
{
  return 0x50786F42706F7243;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CropBoxPB()
{
  return CropBoxPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CropBoxPB()
{
  return CropBoxPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CropBoxPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CropBoxPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CropBoxPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CropBoxPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CropBoxPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
  return Message.hash(into:)();
}

uint64_t LocalizerPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        closure #1 in LocalizerPB.decodeMessage<A>(decoder:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in LocalizerPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for LocalizerPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t LocalizerPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in LocalizerPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3)
    {
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    type metadata accessor for LocalizerPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in LocalizerPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizerPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t protocol witness for Message.init() in conformance LocalizerPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for Matrix2dPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance LocalizerPB()
{
  return 0x657A696C61636F4CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance LocalizerPB()
{
  return LocalizerPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance LocalizerPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LocalizerPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance LocalizerPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB, type metadata accessor for LocalizerPB, (uint64_t)&protocol conformance descriptor for LocalizerPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance LocalizerPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static LocalizerPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LocalizerPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB, type metadata accessor for LocalizerPB, (uint64_t)&protocol conformance descriptor for LocalizerPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocalizerPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB, type metadata accessor for LocalizerPB, (uint64_t)&protocol conformance descriptor for LocalizerPB);
  return Message.hash(into:)();
}

uint64_t BasicHandDescriptorPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          type metadata accessor for DetectionResultPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
          closure #5 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for BasicHandDescriptorPB, type metadata accessor for Coordinate3DPB, &lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
          break;
        case 4:
          closure #6 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for BasicHandDescriptorPB, type metadata accessor for Coordinate3DPB, &lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
          break;
        case 5:
          closure #5 in BasicHandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in BasicHandDescriptorPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for BasicHandDescriptorPB(0);
  type metadata accessor for Coordinate3DPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t BasicHandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  if (!*(_QWORD *)v5 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v5 + 8) + 16)
      || (type metadata accessor for DetectionResultPB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
    {
      result = closure #1 in BasicHandDescriptorPB.traverse<A>(visitor:)(v5, a1, a2, a3);
      if (!v4)
      {
        closure #2 in BasicHandDescriptorPB.traverse<A>(visitor:)(v5, a1, a2, a3);
        closure #3 in BasicHandDescriptorPB.traverse<A>(visitor:)(v5, a1, a2, a3);
        if (*(_BYTE *)(v5 + 16) == 1)
          dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
        if (*(float *)(v5 + 20) != 0.0)
          dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
        type metadata accessor for BasicHandDescriptorPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in BasicHandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BasicHandDescriptorPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 36), (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #2 in BasicHandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BasicHandDescriptorPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #3 in BasicHandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BasicHandDescriptorPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 44), (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t protocol witness for Message.init() in conformance BasicHandDescriptorPB@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  UnknownStorage.init()();
  v5 = a2 + a1[9];
  v6 = type metadata accessor for Coordinate3DPB(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v8(v5, 1, 1, v6);
  v8(a2 + a1[10], 1, 1, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a2 + a1[11], 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance BasicHandDescriptorPB()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance BasicHandDescriptorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BasicHandDescriptorPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance BasicHandDescriptorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BasicHandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance BasicHandDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance BasicHandDescriptorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static BasicHandDescriptorPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BasicHandDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BasicHandDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
  return Message.hash(into:)();
}

uint64_t RecoverScrollPinchInternalDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 8:
          closure #5 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for RecoverScrollPinchInternalDataPB, type metadata accessor for MissedScrollStatePB, &lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
          break;
        case 9:
          closure #6 in PinchModelHandInputPB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for RecoverScrollPinchInternalDataPB, type metadata accessor for MissedScrollByBreakStatePB, &lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
          break;
        case 10:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t RecoverScrollPinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  if (!*(_QWORD *)v5 || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(v5 + 8) || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
    {
      if (*(_BYTE *)(v5 + 16) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
      {
        result = closure #1 in RecoverScrollPinchInternalDataPB.traverse<A>(visitor:)(v5, a1, a2, a3);
        if (!v4)
        {
          closure #2 in RecoverScrollPinchInternalDataPB.traverse<A>(visitor:)(v5, a1, a2, a3);
          if (*(_QWORD *)(v5 + 24))
            dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
          type metadata accessor for RecoverScrollPinchInternalDataPB(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in RecoverScrollPinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MissedScrollStatePB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RecoverScrollPinchInternalDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 36), (uint64_t)v8, &demangling cache variable for type metadata for MissedScrollStatePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for MissedScrollStatePB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for MissedScrollStatePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollStatePB and conformance MissedScrollStatePB, type metadata accessor for MissedScrollStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollStatePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for MissedScrollStatePB);
}

uint64_t closure #2 in RecoverScrollPinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MissedScrollByBreakStatePB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RecoverScrollPinchInternalDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for MissedScrollByBreakStatePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissedScrollByBreakStatePB and conformance MissedScrollByBreakStatePB, type metadata accessor for MissedScrollByBreakStatePB, (uint64_t)&protocol conformance descriptor for MissedScrollByBreakStatePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for MissedScrollByBreakStatePB);
}

uint64_t protocol witness for Message.init() in conformance RecoverScrollPinchInternalDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for MissedScrollStatePB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 40);
  v7 = type metadata accessor for MissedScrollByBreakStatePB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance RecoverScrollPinchInternalDataPB()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance RecoverScrollPinchInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RecoverScrollPinchInternalDataPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance RecoverScrollPinchInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RecoverScrollPinchInternalDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance RecoverScrollPinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverScrollPinchInternalDataPB and conformance RecoverScrollPinchInternalDataPB, type metadata accessor for RecoverScrollPinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverScrollPinchInternalDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance RecoverScrollPinchInternalDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RecoverScrollPinchInternalDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RecoverScrollPinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverScrollPinchInternalDataPB and conformance RecoverScrollPinchInternalDataPB, type metadata accessor for RecoverScrollPinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverScrollPinchInternalDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RecoverScrollPinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverScrollPinchInternalDataPB and conformance RecoverScrollPinchInternalDataPB, type metadata accessor for RecoverScrollPinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverScrollPinchInternalDataPB);
  return Message.hash(into:)();
}

uint64_t MiddleDoubleTapInternalPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId();
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t MiddleDoubleTapInternalPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(float *)v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4)
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
        || (lazy protocol witness table accessor for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId(),
            result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for MiddleDoubleTapInternalPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance MiddleDoubleTapInternalPB@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = 0;
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MiddleDoubleTapInternalPB()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MiddleDoubleTapInternalPB()
{
  return MiddleDoubleTapInternalPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MiddleDoubleTapInternalPB()
{
  return MiddleDoubleTapInternalPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MiddleDoubleTapInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MiddleDoubleTapInternalPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MiddleDoubleTapInternalPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MiddleDoubleTapInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MiddleDoubleTapInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
  return Message.hash(into:)();
}

uint64_t ActionInternalPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  }
  return result;
}

uint64_t ActionInternalPB.traverse<A>(visitor:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for ActionInternalPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance ActionInternalPB@<X0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ActionInternalPB()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ActionInternalPB()
{
  return ActionInternalPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ActionInternalPB()
{
  return ActionInternalPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ActionInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ActionInternalPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ActionInternalPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ActionInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ActionInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
  return Message.hash(into:)();
}

uint64_t type metadata accessor for UnsureInternalPB._StorageClass()
{
  return objc_opt_self();
}

uint64_t UnsureInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for UnsureInternalPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v9 = *(_QWORD *)(v3 + v8);
    type metadata accessor for UnsureInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)(v4 + v8) = specialized UnsureInternalPB._StorageClass.init(copying:)(v9);
    swift_release();
  }
  v10 = swift_retain();
  closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(v10, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    v11 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0B8];
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, v11);
          break;
        case 2:
          closure #2 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, v11);
          break;
        case 3:
          closure #3 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, v11);
          break;
        case 4:
          closure #4 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, v11);
          break;
        case 5:
          closure #5 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 17:
          closure #17 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 18:
          closure #18 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 19:
          closure #19 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #1 in UnsureInternalPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  swift_beginAccess();
  if (*(float *)(a1 + 16) == 0.0
    || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    swift_beginAccess();
    if (*(float *)(a1 + 20) == 0.0
      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      swift_beginAccess();
      if (*(float *)(a1 + 24) == 0.0
        || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        swift_beginAccess();
        if (*(float *)(a1 + 28) == 0.0
          || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
        {
          swift_beginAccess();
          if (*(_BYTE *)(a1 + 32) != 1
            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            swift_beginAccess();
            if (*(_BYTE *)(a1 + 33) != 1
              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              swift_beginAccess();
              if (*(_BYTE *)(a1 + 34) != 1
                || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                swift_beginAccess();
                if (*(_BYTE *)(a1 + 35) != 1
                  || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                {
                  swift_beginAccess();
                  if (*(_BYTE *)(a1 + 36) != 1
                    || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                  {
                    swift_beginAccess();
                    if (*(_BYTE *)(a1 + 37) != 1
                      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                    {
                      swift_beginAccess();
                      if (*(_BYTE *)(a1 + 38) != 1
                        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                      {
                        swift_beginAccess();
                        if (*(_BYTE *)(a1 + 39) != 1
                          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                        {
                          swift_beginAccess();
                          if (*(_BYTE *)(a1 + 40) != 1
                            || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                          {
                            swift_beginAccess();
                            if (*(_BYTE *)(a1 + 41) != 1
                              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                            {
                              swift_beginAccess();
                              if (*(_BYTE *)(a1 + 42) != 1
                                || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                              {
                                swift_beginAccess();
                                if (*(float *)(a1 + 44) == 0.0
                                  || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(),
                                      !v1))
                                {
                                  swift_beginAccess();
                                  if (*(float *)(a1 + 48) == 0.0
                                    || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(),
                                        !v1))
                                  {
                                    swift_beginAccess();
                                    if (*(float *)(a1 + 52) == 0.0
                                      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(),
                                          !v1))
                                    {
                                      result = swift_beginAccess();
                                      if (*(float *)(a1 + 56) != 0.0)
                                        return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in static UnsureInternalPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;

  swift_beginAccess();
  v4 = *(float *)(a1 + 16);
  swift_beginAccess();
  if (v4 != *(float *)(a2 + 16))
    return 0;
  swift_beginAccess();
  v5 = *(float *)(a1 + 20);
  swift_beginAccess();
  if (v5 != *(float *)(a2 + 20))
    return 0;
  swift_beginAccess();
  v6 = *(float *)(a1 + 24);
  swift_beginAccess();
  if (v6 != *(float *)(a2 + 24))
    return 0;
  swift_beginAccess();
  v7 = *(float *)(a1 + 28);
  swift_beginAccess();
  if (v7 != *(float *)(a2 + 28))
    return 0;
  swift_beginAccess();
  v8 = *(unsigned __int8 *)(a1 + 32);
  swift_beginAccess();
  if (v8 != *(unsigned __int8 *)(a2 + 32))
    return 0;
  swift_beginAccess();
  v9 = *(unsigned __int8 *)(a1 + 33);
  swift_beginAccess();
  if (v9 != *(unsigned __int8 *)(a2 + 33))
    return 0;
  swift_beginAccess();
  v10 = *(unsigned __int8 *)(a1 + 34);
  swift_beginAccess();
  if (v10 != *(unsigned __int8 *)(a2 + 34))
    return 0;
  swift_beginAccess();
  v11 = *(unsigned __int8 *)(a1 + 35);
  swift_beginAccess();
  if (v11 != *(unsigned __int8 *)(a2 + 35))
    return 0;
  swift_beginAccess();
  v12 = *(unsigned __int8 *)(a1 + 36);
  swift_beginAccess();
  if (v12 != *(unsigned __int8 *)(a2 + 36))
    return 0;
  swift_beginAccess();
  v13 = *(unsigned __int8 *)(a1 + 37);
  swift_beginAccess();
  if (v13 != *(unsigned __int8 *)(a2 + 37))
    return 0;
  swift_beginAccess();
  v14 = *(unsigned __int8 *)(a1 + 38);
  swift_beginAccess();
  if (v14 != *(unsigned __int8 *)(a2 + 38))
    return 0;
  swift_beginAccess();
  v15 = *(unsigned __int8 *)(a1 + 39);
  swift_beginAccess();
  if (v15 != *(unsigned __int8 *)(a2 + 39))
    return 0;
  swift_beginAccess();
  v16 = *(unsigned __int8 *)(a1 + 40);
  swift_beginAccess();
  if (v16 != *(unsigned __int8 *)(a2 + 40))
    return 0;
  swift_beginAccess();
  v17 = *(unsigned __int8 *)(a1 + 41);
  swift_beginAccess();
  if (v17 != *(unsigned __int8 *)(a2 + 41))
    return 0;
  swift_beginAccess();
  v18 = *(unsigned __int8 *)(a1 + 42);
  swift_beginAccess();
  if (v18 != *(unsigned __int8 *)(a2 + 42))
    return 0;
  swift_beginAccess();
  v19 = *(float *)(a1 + 44);
  swift_beginAccess();
  if (v19 != *(float *)(a2 + 44))
    return 0;
  swift_beginAccess();
  v20 = *(float *)(a1 + 48);
  swift_beginAccess();
  if (v20 != *(float *)(a2 + 48))
    return 0;
  swift_beginAccess();
  v21 = *(float *)(a1 + 52);
  swift_beginAccess();
  if (v21 != *(float *)(a2 + 52))
    return 0;
  swift_beginAccess();
  v22 = *(float *)(a1 + 56);
  swift_beginAccess();
  return v22 == *(float *)(a2 + 56);
}

uint64_t protocol witness for Message.init() in conformance UnsureInternalPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static UnsureInternalPB._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance UnsureInternalPB()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance UnsureInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsureInternalPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance UnsureInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for UnsureInternalPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in UnsureInternalPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance UnsureInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance UnsureInternalPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static UnsureInternalPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UnsureInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UnsureInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnsureInternalPB(uint64_t a1, uint64_t a2)
{
  return specialized static ObjectInteractionStateInternalPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for UnsureInternalPB, (uint64_t (*)(void))closure #1 in static UnsureInternalPB.== infix(_:_:)) & 1;
}

double one-time initialization function for defaultInstance()
{
  uint64_t v0;
  double result;

  type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 84) = 0;
  *(_DWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 0;
  *(_DWORD *)(v0 + 108) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_BYTE *)(v0 + 80) = 0;
  static ObjectInteractionStateInternalPB._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t ObjectInteractionStateInternalPB._StorageClass.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ObjectInteractionStateInternalPB._StorageClass()
{
  return objc_opt_self();
}

uint64_t ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for ObjectInteractionStateInternalPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v9 = *(_QWORD *)(v3 + v8);
    type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)(v4 + v8) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v9);
    swift_release();
  }
  v10 = swift_retain();
  closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)(v10, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C130]);
          break;
        case 2:
          closure #2 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C130]);
          break;
        case 3:
          closure #3 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C130]);
          break;
        case 4:
          closure #4 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C130]);
          break;
        case 5:
          closure #5 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #16 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #17 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #18 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #19 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 17:
          closure #17 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 18:
          closure #18 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 19:
          closure #19 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 20:
          closure #20 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 21:
          closure #21 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 22:
          closure #22 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 23:
          closure #23 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 24:
          closure #24 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 25:
          closure #25 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a2 + 16;
  swift_beginAccess();
  a5(v8, a3, a4);
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a2 + 20;
  swift_beginAccess();
  a5(v8, a3, a4);
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a2 + 24;
  swift_beginAccess();
  a5(v8, a3, a4);
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a2 + 28;
  swift_beginAccess();
  a5(v8, a3, a4);
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #19 in closure #1 in UnsureInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #19 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #20 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #21 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #22 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #23 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #24 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #25 in closure #1 in ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #1 in ObjectInteractionStateInternalPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  swift_beginAccess();
  if (!*(_DWORD *)(a1 + 16) || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    swift_beginAccess();
    if (!*(_DWORD *)(a1 + 20)
      || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      swift_beginAccess();
      if (!*(_DWORD *)(a1 + 24)
        || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
      {
        swift_beginAccess();
        if (!*(_DWORD *)(a1 + 28)
          || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
        {
          swift_beginAccess();
          if (!*(_DWORD *)(a1 + 32)
            || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
          {
            swift_beginAccess();
            if (*(float *)(a1 + 36) == 0.0
              || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
            {
              swift_beginAccess();
              if (*(float *)(a1 + 40) == 0.0
                || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
              {
                swift_beginAccess();
                if (*(float *)(a1 + 44) == 0.0
                  || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                {
                  swift_beginAccess();
                  if (*(float *)(a1 + 48) == 0.0
                    || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                  {
                    swift_beginAccess();
                    if (*(float *)(a1 + 52) == 0.0
                      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                    {
                      swift_beginAccess();
                      if (*(float *)(a1 + 56) == 0.0
                        || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                      {
                        swift_beginAccess();
                        if (*(float *)(a1 + 60) == 0.0
                          || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                        {
                          swift_beginAccess();
                          if (*(float *)(a1 + 64) == 0.0
                            || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                          {
                            swift_beginAccess();
                            if (*(_BYTE *)(a1 + 68) != 1
                              || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                            {
                              swift_beginAccess();
                              if (*(_BYTE *)(a1 + 69) != 1
                                || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
                              {
                                swift_beginAccess();
                                if (*(_BYTE *)(a1 + 70) != 1
                                  || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(),
                                      !v1))
                                {
                                  swift_beginAccess();
                                  if (*(_BYTE *)(a1 + 71) != 1
                                    || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(),
                                        !v1))
                                  {
                                    swift_beginAccess();
                                    if (*(float *)(a1 + 72) == 0.0
                                      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(),
                                          !v1))
                                    {
                                      swift_beginAccess();
                                      if (*(float *)(a1 + 76) == 0.0
                                        || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(),
                                            !v1))
                                      {
                                        swift_beginAccess();
                                        if (*(_BYTE *)(a1 + 80) != 1
                                          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(),
                                              !v1))
                                        {
                                          swift_beginAccess();
                                          if (*(float *)(a1 + 84) == 0.0
                                            || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(),
                                                !v1))
                                          {
                                            swift_beginAccess();
                                            if (*(float *)(a1 + 88) == 0.0
                                              || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(),
                                                  !v1))
                                            {
                                              swift_beginAccess();
                                              if (!*(_QWORD *)(a1 + 96)
                                                || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(),
                                                    !v1))
                                              {
                                                swift_beginAccess();
                                                if (*(_BYTE *)(a1 + 104) != 1
                                                  || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(),
                                                      !v1))
                                                {
                                                  result = swift_beginAccess();
                                                  if (*(float *)(a1 + 108) != 0.0)
                                                    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in static ObjectInteractionStateInternalPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  int v18;
  int v19;
  int v20;
  float v21;
  float v22;
  int v23;
  float v24;
  float v25;
  uint64_t v26;
  int v27;
  float v29;

  swift_beginAccess();
  v4 = *(_DWORD *)(a1 + 16);
  swift_beginAccess();
  if (v4 != *(_DWORD *)(a2 + 16))
    return 0;
  swift_beginAccess();
  v5 = *(_DWORD *)(a1 + 20);
  swift_beginAccess();
  if (v5 != *(_DWORD *)(a2 + 20))
    return 0;
  swift_beginAccess();
  v6 = *(_DWORD *)(a1 + 24);
  swift_beginAccess();
  if (v6 != *(_DWORD *)(a2 + 24))
    return 0;
  swift_beginAccess();
  v7 = *(_DWORD *)(a1 + 28);
  swift_beginAccess();
  if (v7 != *(_DWORD *)(a2 + 28))
    return 0;
  swift_beginAccess();
  v8 = *(_DWORD *)(a1 + 32);
  swift_beginAccess();
  if (v8 != *(_DWORD *)(a2 + 32))
    return 0;
  swift_beginAccess();
  v9 = *(float *)(a1 + 36);
  swift_beginAccess();
  if (v9 != *(float *)(a2 + 36))
    return 0;
  swift_beginAccess();
  v10 = *(float *)(a1 + 40);
  swift_beginAccess();
  if (v10 != *(float *)(a2 + 40))
    return 0;
  swift_beginAccess();
  v11 = *(float *)(a1 + 44);
  swift_beginAccess();
  if (v11 != *(float *)(a2 + 44))
    return 0;
  swift_beginAccess();
  v12 = *(float *)(a1 + 48);
  swift_beginAccess();
  if (v12 != *(float *)(a2 + 48))
    return 0;
  swift_beginAccess();
  v13 = *(float *)(a1 + 52);
  swift_beginAccess();
  if (v13 != *(float *)(a2 + 52))
    return 0;
  swift_beginAccess();
  v14 = *(float *)(a1 + 56);
  swift_beginAccess();
  if (v14 != *(float *)(a2 + 56))
    return 0;
  swift_beginAccess();
  v15 = *(float *)(a1 + 60);
  swift_beginAccess();
  if (v15 != *(float *)(a2 + 60))
    return 0;
  swift_beginAccess();
  v16 = *(float *)(a1 + 64);
  swift_beginAccess();
  if (v16 != *(float *)(a2 + 64))
    return 0;
  swift_beginAccess();
  v17 = *(unsigned __int8 *)(a1 + 68);
  swift_beginAccess();
  if (v17 != *(unsigned __int8 *)(a2 + 68))
    return 0;
  swift_beginAccess();
  v18 = *(unsigned __int8 *)(a1 + 69);
  swift_beginAccess();
  if (v18 != *(unsigned __int8 *)(a2 + 69))
    return 0;
  swift_beginAccess();
  v19 = *(unsigned __int8 *)(a1 + 70);
  swift_beginAccess();
  if (v19 != *(unsigned __int8 *)(a2 + 70))
    return 0;
  swift_beginAccess();
  v20 = *(unsigned __int8 *)(a1 + 71);
  swift_beginAccess();
  if (v20 != *(unsigned __int8 *)(a2 + 71))
    return 0;
  swift_beginAccess();
  v21 = *(float *)(a1 + 72);
  swift_beginAccess();
  if (v21 != *(float *)(a2 + 72))
    return 0;
  swift_beginAccess();
  v22 = *(float *)(a1 + 76);
  swift_beginAccess();
  if (v22 != *(float *)(a2 + 76))
    return 0;
  swift_beginAccess();
  v23 = *(unsigned __int8 *)(a1 + 80);
  swift_beginAccess();
  if (v23 != *(unsigned __int8 *)(a2 + 80))
    return 0;
  swift_beginAccess();
  v24 = *(float *)(a1 + 84);
  swift_beginAccess();
  if (v24 != *(float *)(a2 + 84))
    return 0;
  swift_beginAccess();
  v25 = *(float *)(a1 + 88);
  swift_beginAccess();
  if (v25 != *(float *)(a2 + 88))
    return 0;
  swift_beginAccess();
  v26 = *(_QWORD *)(a1 + 96);
  swift_beginAccess();
  if (v26 != *(_QWORD *)(a2 + 96))
    return 0;
  swift_beginAccess();
  v27 = *(unsigned __int8 *)(a1 + 104);
  swift_beginAccess();
  if (v27 != *(unsigned __int8 *)(a2 + 104))
    return 0;
  swift_beginAccess();
  v29 = *(float *)(a1 + 108);
  swift_beginAccess();
  return v29 == *(float *)(a2 + 108);
}

uint64_t protocol witness for Message.init() in conformance ObjectInteractionStateInternalPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static ObjectInteractionStateInternalPB._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ObjectInteractionStateInternalPB()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ObjectInteractionStateInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ObjectInteractionStateInternalPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ObjectInteractionStateInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ObjectInteractionStateInternalPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in ObjectInteractionStateInternalPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ObjectInteractionStateInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ObjectInteractionStateInternalPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ObjectInteractionStateInternalPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ObjectInteractionStateInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ObjectInteractionStateInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ObjectInteractionStateInternalPB(uint64_t a1, uint64_t a2)
{
  return specialized static ObjectInteractionStateInternalPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t (*)(void))closure #1 in static ObjectInteractionStateInternalPB.== infix(_:_:)) & 1;
}

uint64_t HomePinchInternalPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
  }
  return result;
}

uint64_t HomePinchInternalPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for HomePinchInternalPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance HomePinchInternalPB@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HomePinchInternalPB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HomePinchInternalPB()
{
  return HomePinchInternalPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HomePinchInternalPB()
{
  return HomePinchInternalPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HomePinchInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HomePinchInternalPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HomePinchInternalPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HomePinchInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HomePinchInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
  return Message.hash(into:)();
}

uint64_t MonoHandPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t MonoHandPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0
    || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[3] + 16)
        || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for MonoHandPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance MonoHandPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = v1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance MonoHandPB()
{
  return 0x646E61486F6E6F4DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MonoHandPB()
{
  return MonoHandPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MonoHandPB()
{
  return MonoHandPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MonoHandPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MonoHandPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MonoHandPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MonoHandPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MonoHandPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
  return Message.hash(into:)();
}

uint64_t HandDescriptorInternalPB._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v0 + 24) = 0;
  v2 = v0
     + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
  v3 = type metadata accessor for PinchInternalDataPB();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers) = v1;
  v4 = v0
     + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
  v5 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0
     + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
  v7 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v0
     + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
  v9 = type metadata accessor for ActionInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v0
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
  v11 = type metadata accessor for UnsureInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v0
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
  v13 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v0
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata;
  v15 = type metadata accessor for PoseModelIOData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v0
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata;
  v17 = type metadata accessor for PinchModelIOData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand) = v1;
  v18 = v0
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  v19 = type metadata accessor for HomePinchInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  return v0;
}

uint64_t HandDescriptorInternalPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v100 = (uint64_t)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelIOData?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v99 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseModelIOData?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v98 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v97 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  MEMORY[0x24BDAC7A8](v16, v17);
  v96 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  MEMORY[0x24BDAC7A8](v19, v20);
  v95 = (uint64_t)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v22, v23);
  v92 = (uint64_t)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  MEMORY[0x24BDAC7A8](v25, v26);
  v88 = (uint64_t)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v28, v29);
  v31 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v1 + 24) = 0;
  v33 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
  v34 = type metadata accessor for PinchInternalDataPB();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers);
  *v35 = v32;
  v36 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
  v84 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
  v37 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v38 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
  v85 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
  v39 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v40 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
  v86 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
  v41 = type metadata accessor for ActionInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v42 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
  v87 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
  v43 = type metadata accessor for UnsureInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
  v44 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
  v89 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
  v45 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
  v46 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata;
  v90 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata;
  v47 = type metadata accessor for PoseModelIOData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 1, 1, v47);
  v48 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata;
  v91 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata;
  v49 = type metadata accessor for PinchModelIOData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
  v93 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand);
  *v93 = v32;
  v50 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  v94 = v1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  v51 = type metadata accessor for HomePinchInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 1, 1, v51);
  swift_beginAccess();
  v52 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LOBYTE(v50) = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_BYTE *)(v1 + 24) = v50;
  v53 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v53, (uint64_t)v31, &demangling cache variable for type metadata for PinchInternalDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v31, v33, &demangling cache variable for type metadata for PinchInternalDataPB?);
  swift_endAccess();
  v54 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers);
  swift_beginAccess();
  v55 = *v54;
  swift_beginAccess();
  *v35 = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
  swift_beginAccess();
  v57 = v88;
  outlined init with copy of (Int32, Matrix2dPB)(v56, v88, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v58 = v84;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v57, v58, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  swift_endAccess();
  v59 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
  swift_beginAccess();
  v60 = v92;
  outlined init with copy of (Int32, Matrix2dPB)(v59, v92, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  v61 = v85;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v60, v61, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  swift_endAccess();
  v62 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
  swift_beginAccess();
  v63 = v95;
  outlined init with copy of (Int32, Matrix2dPB)(v62, v95, &demangling cache variable for type metadata for ActionInternalPB?);
  v64 = v86;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v63, v64, &demangling cache variable for type metadata for ActionInternalPB?);
  swift_endAccess();
  v65 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
  swift_beginAccess();
  v66 = v96;
  outlined init with copy of (Int32, Matrix2dPB)(v65, v96, &demangling cache variable for type metadata for UnsureInternalPB?);
  v67 = v87;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v66, v67, &demangling cache variable for type metadata for UnsureInternalPB?);
  swift_endAccess();
  v68 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
  swift_beginAccess();
  v69 = v97;
  outlined init with copy of (Int32, Matrix2dPB)(v68, v97, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v70 = v89;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v69, v70, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  swift_endAccess();
  v71 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata;
  swift_beginAccess();
  v72 = v98;
  outlined init with copy of (Int32, Matrix2dPB)(v71, v98, &demangling cache variable for type metadata for PoseModelIOData?);
  v73 = v90;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v72, v73, &demangling cache variable for type metadata for PoseModelIOData?);
  swift_endAccess();
  v74 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata;
  swift_beginAccess();
  v75 = v99;
  outlined init with copy of (Int32, Matrix2dPB)(v74, v99, &demangling cache variable for type metadata for PinchModelIOData?);
  v76 = v91;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v75, v76, &demangling cache variable for type metadata for PinchModelIOData?);
  swift_endAccess();
  v77 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand);
  swift_beginAccess();
  v78 = *v77;
  v79 = v93;
  swift_beginAccess();
  *v79 = v78;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v80 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  swift_beginAccess();
  v81 = v100;
  outlined init with copy of (Int32, Matrix2dPB)(v80, v100, &demangling cache variable for type metadata for HomePinchInternalPB?);
  swift_release();
  v82 = v94;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v81, v82, &demangling cache variable for type metadata for HomePinchInternalPB?);
  swift_endAccess();
  return v2;
}

uint64_t HandDescriptorInternalPB._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData, &demangling cache variable for type metadata for PinchInternalDataPB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData, &demangling cache variable for type metadata for ActionInternalPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData, &demangling cache variable for type metadata for UnsureInternalPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata, &demangling cache variable for type metadata for PoseModelIOData?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata, &demangling cache variable for type metadata for PinchModelIOData?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData, &demangling cache variable for type metadata for HomePinchInternalPB?);
  return v0;
}

uint64_t HandDescriptorInternalPB._StorageClass.__deallocating_deinit()
{
  HandDescriptorInternalPB._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandDescriptorInternalPB._StorageClass()
{
  return type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
}

uint64_t type metadata accessor for HandDescriptorInternalPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandDescriptorInternalPB._StorageClass);
}

void type metadata completion function for HandDescriptorInternalPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchInternalDataPB?, (void (*)(uint64_t))type metadata accessor for PinchInternalDataPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for MiddleDoubleTapInternalPB?, (void (*)(uint64_t))type metadata accessor for MiddleDoubleTapInternalPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?, (void (*)(uint64_t))type metadata accessor for RecoverRepetitivePinchInternalDataPB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ActionInternalPB?, (void (*)(uint64_t))type metadata accessor for ActionInternalPB);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for UnsureInternalPB?, (void (*)(uint64_t))type metadata accessor for UnsureInternalPB);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ObjectInteractionStateInternalPB?, (void (*)(uint64_t))type metadata accessor for ObjectInteractionStateInternalPB);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PoseModelIOData?, (void (*)(uint64_t))type metadata accessor for PoseModelIOData);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchModelIOData?, (void (*)(uint64_t))type metadata accessor for PinchModelIOData);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HomePinchInternalPB?, (void (*)(uint64_t))type metadata accessor for HomePinchInternalPB);
                  if (v8 <= 0x3F)
                    swift_updateClassMetadata2();
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for MiddleDoubleTapInternalPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for MiddleDoubleTapInternalPB);
}

uint64_t type metadata accessor for ActionInternalPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ActionInternalPB);
}

uint64_t type metadata accessor for UnsureInternalPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for UnsureInternalPB);
}

uint64_t type metadata accessor for ObjectInteractionStateInternalPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ObjectInteractionStateInternalPB);
}

uint64_t type metadata accessor for HomePinchInternalPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HomePinchInternalPB);
}

ValueMetadata *type metadata accessor for HandCloseToMouthPB()
{
  return &type metadata for HandCloseToMouthPB;
}

_QWORD *initializeBufferWithCopyOfBuffer for LocalizerPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for Matrix2dPB(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
      v13[2] = v14[2];
      v19 = *(int *)(v15 + 28);
      v20 = (char *)v13 + v19;
      v21 = (char *)v14 + v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11((uint64_t)v20, (uint64_t)v21, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t initializeWithCopy for LocalizerPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for Matrix2dPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v17 = *(int *)(v14 + 28);
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10((uint64_t)v18, (uint64_t)v19, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for LocalizerPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  v16 = type metadata accessor for Matrix2dPB(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12(v14 + *(int *)(v16 + 28), v15 + *(int *)(v16 + 28), v10);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v14, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  v20 = *(int *)(v16 + 28);
  v21 = v14 + v20;
  v22 = v15 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v21, v22, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for LocalizerPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for Matrix2dPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for LocalizerPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Matrix2dPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease();
      v11(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalizerPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8BE5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for LocalizerPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8BE624(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for LocalizerPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for LocalizerPB);
}

void type metadata completion function for LocalizerPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for CropBoxPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for CropBoxPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CropBoxPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for CropBoxPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for CropBoxPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CropBoxPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CropBoxPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8BEA2C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CropBoxPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D8BEAB4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CropBoxPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for CropBoxPB);
}

uint64_t type metadata completion function for CropBoxPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HomePinchInternalPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_QWORD *initializeWithCopy for HomePinchInternalPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for HomePinchInternalPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for HomePinchInternalPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HomePinchInternalPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8BED68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for HomePinchInternalPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8BEDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for HomePinchInternalPB()
{
  return type metadata completion function for HomePinchInternalPB();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UnsureInternalPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for UnsureInternalPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionInternalPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for HomePinchInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for ActionInternalPB(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for ActionInternalPB(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for ActionInternalPB(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for ActionInternalPB(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionInternalPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8BF064(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ActionInternalPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_23D8BF0EC(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ActionInternalPB()
{
  return type metadata completion function for HomePinchInternalPB();
}

_QWORD *initializeBufferWithCopyOfBuffer for BasicHandDescriptorPB(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    v8 = a3[8];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[9];
    v14 = (_DWORD *)((char *)v4 + v13);
    v15 = (_DWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for Coordinate3DPB(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
    if (v18((uint64_t *)v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[2] = v15[2];
      v12((uint64_t)v14 + *(int *)(v16 + 28), (uint64_t)v15 + *(int *)(v16 + 28), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v21 = a3[10];
    v22 = (_DWORD *)((char *)v4 + v21);
    v23 = (_DWORD *)((char *)a2 + v21);
    if (v18((uint64_t *)((char *)a2 + v21), 1, v16))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[2] = v23[2];
      v12((uint64_t)v22 + *(int *)(v16 + 28), (uint64_t)v23 + *(int *)(v16 + 28), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v16);
    }
    v25 = a3[11];
    v26 = (_DWORD *)((char *)v4 + v25);
    v27 = (_DWORD *)((char *)a2 + v25);
    if (v18((uint64_t *)v27, 1, v16))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[2] = v27[2];
      v12((uint64_t)v26 + *(int *)(v16 + 28), (uint64_t)v27 + *(int *)(v16 + 28), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v26, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for BasicHandDescriptorPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v12(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for Coordinate3DPB(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
    v12(v6 + *(int *)(v7 + 28), v5);
  v9 = a1 + a2[10];
  if (!v8(v9, 1, v7))
    v12(v9 + *(int *)(v7 + 28), v5);
  v10 = a1 + a2[11];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v10, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10 + *(int *)(v7 + 28), v5);
  return result;
}

uint64_t initializeWithCopy for BasicHandDescriptorPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_DWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v7 = a3[8];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[9];
  v13 = (_DWORD *)(a1 + v12);
  v14 = (_DWORD *)(a2 + v12);
  v15 = type metadata accessor for Coordinate3DPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[10];
  v20 = (_DWORD *)(a1 + v19);
  v21 = (_DWORD *)(a2 + v19);
  if (v17((_DWORD *)(a2 + v19), 1, v15))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[2] = v21[2];
    v11((char *)v20 + *(int *)(v15 + 28), (char *)v21 + *(int *)(v15 + 28), v10);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v15);
  }
  v23 = a3[11];
  v24 = (_DWORD *)(a1 + v23);
  v25 = (_DWORD *)(a2 + v23);
  if (v17(v25, 1, v15))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[2] = v25[2];
    v11((char *)v24 + *(int *)(v15 + 28), (char *)v25 + *(int *)(v15 + 28), v10);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for BasicHandDescriptorPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v33 = *(_QWORD *)(v9 - 8);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 24);
  v32(v7, v8, v9);
  v10 = a3[9];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for Coordinate3DPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_DWORD *)v11 = *(_DWORD *)v12;
      *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate3DPB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v32((uint64_t)&v11[*(int *)(v13 + 28)], (uint64_t)&v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v19 = a3[10];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = v15((char *)(a1 + v19), 1, v13);
  v23 = v15(v21, 1, v13);
  if (v22)
  {
    if (!v23)
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      *((_DWORD *)v20 + 1) = *((_DWORD *)v21 + 1);
      *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(&v20[*(int *)(v13 + 28)], &v21[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for Coordinate3DPB);
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *((_DWORD *)v20 + 1) = *((_DWORD *)v21 + 1);
  *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
  v32((uint64_t)&v20[*(int *)(v13 + 28)], (uint64_t)&v21[*(int *)(v13 + 28)], v9);
LABEL_13:
  v25 = a3[11];
  v26 = (_DWORD *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = v15((char *)(a1 + v25), 1, v13);
  v29 = v15(v27, 1, v13);
  if (!v28)
  {
    if (!v29)
    {
      *v26 = *(_DWORD *)v27;
      v26[1] = *((_DWORD *)v27 + 1);
      v26[2] = *((_DWORD *)v27 + 2);
      v32((uint64_t)v26 + *(int *)(v13 + 28), (uint64_t)&v27[*(int *)(v13 + 28)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v26, type metadata accessor for Coordinate3DPB);
    goto LABEL_18;
  }
  if (v29)
  {
LABEL_18:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  *v26 = *(_DWORD *)v27;
  v26[1] = *((_DWORD *)v27 + 1);
  v26[2] = *((_DWORD *)v27 + 2);
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))((char *)v26 + *(int *)(v13 + 28), &v27[*(int *)(v13 + 28)], v9);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v26, 0, 1, v13);
  return a1;
}

uint64_t initializeWithTake for BasicHandDescriptorPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_DWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = a3[8];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[9];
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[10];
  v19 = (_DWORD *)(a1 + v18);
  v20 = (_DWORD *)(a2 + v18);
  if (v16((_DWORD *)(a2 + v18), 1, v14))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[2] = v20[2];
    v10((char *)v19 + *(int *)(v14 + 28), (char *)v20 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  v22 = a3[11];
  v23 = (_DWORD *)(a1 + v22);
  v24 = (_DWORD *)(a2 + v22);
  if (v16(v24, 1, v14))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[2] = v24[2];
    v10((char *)v23 + *(int *)(v14 + 28), (char *)v24 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v23, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for BasicHandDescriptorPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD *)(v10 - 8);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 40);
  v33(v8, v9, v10);
  v11 = a3[9];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v12[*(int *)(v14 + 28)], &v13[*(int *)(v14 + 28)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Coordinate3DPB);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
  v33((uint64_t)&v12[*(int *)(v14 + 28)], (uint64_t)&v13[*(int *)(v14 + 28)], v10);
LABEL_7:
  v20 = a3[10];
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = v16((char *)(a1 + v20), 1, v14);
  v24 = v16(v22, 1, v14);
  if (v23)
  {
    if (!v24)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 2);
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v21[*(int *)(v14 + 28)], &v22[*(int *)(v14 + 28)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for Coordinate3DPB);
LABEL_12:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 2);
  v33((uint64_t)&v21[*(int *)(v14 + 28)], (uint64_t)&v22[*(int *)(v14 + 28)], v10);
LABEL_13:
  v26 = a3[11];
  v27 = (_DWORD *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = v16((char *)(a1 + v26), 1, v14);
  v30 = v16(v28, 1, v14);
  if (!v29)
  {
    if (!v30)
    {
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[2] = *((_DWORD *)v28 + 2);
      v33((uint64_t)v27 + *(int *)(v14 + 28), (uint64_t)&v28[*(int *)(v14 + 28)], v10);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v27, type metadata accessor for Coordinate3DPB);
    goto LABEL_18;
  }
  if (v30)
  {
LABEL_18:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[2] = *((_DWORD *)v28 + 2);
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))((char *)v27 + *(int *)(v14 + 28), &v28[*(int *)(v14 + 28)], v10);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v27, 0, 1, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicHandDescriptorPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C00A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for BasicHandDescriptorPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C0154(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for BasicHandDescriptorPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for BasicHandDescriptorPB);
}

void type metadata completion function for BasicHandDescriptorPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for HandDescriptorInternalPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for HandDescriptorInternalPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for HandDescriptorInternalPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandDescriptorInternalPB);
}

_QWORD *initializeBufferWithCopyOfBuffer for MonoHandPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for MonoHandPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for MonoHandPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for MonoHandPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for MonoHandPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for MonoHandPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MonoHandPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C0644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MonoHandPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C06CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MonoHandPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for MonoHandPB);
}

uint64_t type metadata completion function for MonoHandPB()
{
  return type metadata completion function for MonoHandPB();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MiddleDoubleTapInternalPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 28);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

_QWORD *initializeWithCopy for MiddleDoubleTapInternalPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for MiddleDoubleTapInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for MiddleDoubleTapInternalPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for MiddleDoubleTapInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiddleDoubleTapInternalPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C09F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MiddleDoubleTapInternalPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C0A80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for MiddleDoubleTapInternalPB()
{
  return type metadata completion function for MonoHandPB();
}

uint64_t getEnumTagSinglePayload for ObjectInteractionStateInternalPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ObjectInteractionStateInternalPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

unint64_t lazy protocol witness table accessor for type HandCloseToMouthPB and conformance HandCloseToMouthPB()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB;
  if (!lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandCloseToMouthPB, &type metadata for HandCloseToMouthPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB;
  if (!lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandCloseToMouthPB, &type metadata for HandCloseToMouthPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB;
  if (!lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandCloseToMouthPB, &type metadata for HandCloseToMouthPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB;
  if (!lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandCloseToMouthPB, &type metadata for HandCloseToMouthPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandCloseToMouthPB and conformance HandCloseToMouthPB);
  }
  return result;
}

uint64_t HandDescriptorInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for HandDescriptorInternalPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = HandDescriptorInternalPB._StorageClass.init(copying:)(v8);
    swift_release();
  }
  v9 = swift_retain();
  closure #1 in HandDescriptorInternalPB.decodeMessage<A>(decoder:)(v9, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in HandDescriptorInternalPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t (*v24)(uint64_t);
  unint64_t *v25;
  void *v26;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 4:
          closure #1 in closure #1 in HandDescriptorInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #2 in closure #1 in HandDescriptorInternalPB.decodeMessage<A>(decoder:)();
          break;
        case 10:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
          v16 = (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB;
          v17 = &lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB;
          v18 = &protocol conformance descriptor for PinchInternalDataPB;
          goto LABEL_5;
        case 11:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers;
          v24 = type metadata accessor for LocalizerPB;
          v25 = &lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB;
          v26 = &protocol conformance descriptor for LocalizerPB;
          goto LABEL_20;
        case 13:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
          v16 = type metadata accessor for MiddleDoubleTapInternalPB;
          v17 = &lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB;
          v18 = &protocol conformance descriptor for MiddleDoubleTapInternalPB;
          goto LABEL_5;
        case 15:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
          v16 = type metadata accessor for RecoverRepetitivePinchInternalDataPB;
          v17 = &lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB;
          v18 = &protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB;
          goto LABEL_5;
        case 16:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
          v16 = type metadata accessor for ActionInternalPB;
          v17 = &lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB;
          v18 = &protocol conformance descriptor for ActionInternalPB;
          goto LABEL_5;
        case 17:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
          v16 = type metadata accessor for UnsureInternalPB;
          v17 = &lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB;
          v18 = &protocol conformance descriptor for UnsureInternalPB;
          goto LABEL_5;
        case 18:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
          v16 = type metadata accessor for ObjectInteractionStateInternalPB;
          v17 = &lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB;
          v18 = &protocol conformance descriptor for ObjectInteractionStateInternalPB;
          goto LABEL_5;
        case 19:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata;
          v16 = type metadata accessor for PoseModelIOData;
          v17 = &lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData;
          v18 = &protocol conformance descriptor for PoseModelIOData;
          goto LABEL_5;
        case 20:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata;
          v16 = type metadata accessor for PinchModelIOData;
          v17 = &lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData;
          v18 = &protocol conformance descriptor for PinchModelIOData;
          goto LABEL_5;
        case 21:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand;
          v24 = type metadata accessor for MonoHandPB;
          v25 = &lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB;
          v26 = &protocol conformance descriptor for MonoHandPB;
LABEL_20:
          closure #39 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v19, v20, v21, v22, (uint64_t)v23, v24, v25, (uint64_t)v26);
          break;
        case 22:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
          v16 = type metadata accessor for HomePinchInternalPB;
          v17 = &lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB;
          v18 = &protocol conformance descriptor for HomePinchInternalPB;
LABEL_5:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandDescriptorInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for CropBoxPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in HandDescriptorInternalPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16)
    || (type metadata accessor for CropBoxPB(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), result = swift_bridgeObjectRelease(), !v4))
  {
    swift_beginAccess();
    if (*(_BYTE *)(a1 + 24) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      result = closure #1 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      if (!v4)
      {
        v10 = a1
            + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v10 + 16))
        {
          type metadata accessor for LocalizerPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB, type metadata accessor for LocalizerPB, (uint64_t)&protocol conformance descriptor for LocalizerPB);
          swift_bridgeObjectRetain();
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          swift_bridgeObjectRelease();
        }
        closure #2 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #3 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #4 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #5 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #6 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #7 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #8 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        v11 = a1
            + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v11 + 16))
        {
          type metadata accessor for MonoHandPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
          swift_bridgeObjectRetain();
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          swift_bridgeObjectRelease();
        }
        return closure #9 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchInternalDataPB();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PinchInternalDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchInternalDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
}

uint64_t closure #2 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for MiddleDoubleTapInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for MiddleDoubleTapInternalPB);
}

uint64_t closure #3 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
}

uint64_t closure #4 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActionInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ActionInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ActionInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ActionInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ActionInternalPB);
}

uint64_t closure #5 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UnsureInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for UnsureInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for UnsureInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for UnsureInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for UnsureInternalPB);
}

uint64_t closure #6 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ObjectInteractionStateInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ObjectInteractionStateInternalPB);
}

uint64_t closure #7 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseModelIOData?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PoseModelIOData(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PoseModelIOData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PoseModelIOData?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PoseModelIOData);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData, type metadata accessor for PoseModelIOData, (uint64_t)&protocol conformance descriptor for PoseModelIOData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PoseModelIOData);
}

uint64_t closure #8 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelIOData?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchModelIOData(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PinchModelIOData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchModelIOData?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PinchModelIOData);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData, type metadata accessor for PinchModelIOData, (uint64_t)&protocol conformance descriptor for PinchModelIOData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchModelIOData);
}

uint64_t closure #9 in closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HomePinchInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HomePinchInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HomePinchInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HomePinchInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HomePinchInternalPB);
}

BOOL closure #1 in static HandDescriptorInternalPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int (*v147)(uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int8 *v174;
  int v175;
  unsigned __int8 *v176;
  uint64_t *v177;
  uint64_t v178;
  unsigned int v179;
  char v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int (*v203)(uint64_t, uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int (*v215)(uint64_t, uint64_t, uint64_t);
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int (*v229)(uint64_t, uint64_t, uint64_t);
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  unsigned __int8 *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned __int8 *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;

  v245 = type metadata accessor for HomePinchInternalPB(0);
  v241 = *(_QWORD *)(v245 - 8);
  MEMORY[0x24BDAC7A8](v245, v4);
  v239 = (uint64_t *)((char *)&v237 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HomePinchInternalPB?, HomePinchInternalPB?));
  MEMORY[0x24BDAC7A8](v240, v6);
  v246 = (uint64_t)&v237 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v242 = (uint64_t *)((char *)&v237 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11, v12);
  v244 = (uint64_t)&v237 - v13;
  v14 = type metadata accessor for PinchModelIOData(0);
  v250 = *(_QWORD *)(v14 - 8);
  v251 = v14;
  MEMORY[0x24BDAC7A8](v14, v15);
  v243 = (uint64_t)&v237 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchModelIOData?, PinchModelIOData?));
  MEMORY[0x24BDAC7A8](v249, v17);
  v254 = (uint64_t)&v237 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchModelIOData?);
  MEMORY[0x24BDAC7A8](v19, v20);
  v248 = (uint64_t)&v237 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v253 = (uint64_t)&v237 - v24;
  v25 = type metadata accessor for PoseModelIOData(0);
  v256 = *(_QWORD *)(v25 - 8);
  v257 = v25;
  MEMORY[0x24BDAC7A8](v25, v26);
  v247 = (uint64_t)&v237 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PoseModelIOData?, PoseModelIOData?));
  MEMORY[0x24BDAC7A8](v255, v28);
  v258 = (uint64_t)&v237 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseModelIOData?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v267 = (char *)&v237 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v260 = (uint64_t)&v237 - v35;
  v36 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v263 = *(_QWORD *)(v36 - 8);
  v264 = v36;
  MEMORY[0x24BDAC7A8](v36, v37);
  v252 = (uint64_t)&v237 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ObjectInteractionStateInternalPB?, ObjectInteractionStateInternalPB?));
  MEMORY[0x24BDAC7A8](v262, v39);
  v265 = (uint64_t)&v237 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v41, v42);
  v259 = (uint64_t)&v237 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v44, v45);
  v277 = (char *)&v237 - v46;
  v47 = type metadata accessor for UnsureInternalPB(0);
  v270 = *(_QWORD *)(v47 - 8);
  v271 = v47;
  MEMORY[0x24BDAC7A8](v47, v48);
  v261 = (uint64_t)&v237 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UnsureInternalPB?, UnsureInternalPB?));
  MEMORY[0x24BDAC7A8](v269, v50);
  v272 = (uint64_t)&v237 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  MEMORY[0x24BDAC7A8](v52, v53);
  v266 = (uint64_t)&v237 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v55, v56);
  v283 = (uint64_t)&v237 - v57;
  v278 = type metadata accessor for ActionInternalPB(0);
  v276 = *(_QWORD *)(v278 - 8);
  MEMORY[0x24BDAC7A8](v278, v58);
  v268 = (unsigned __int8 *)&v237 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v275 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ActionInternalPB?, ActionInternalPB?));
  MEMORY[0x24BDAC7A8](v275, v60);
  v279 = (uint64_t)&v237 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  MEMORY[0x24BDAC7A8](v62, v63);
  v273 = (unsigned __int8 *)&v237 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v65, v66);
  v281 = (uint64_t)&v237 - v67;
  v68 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  v285 = *(_QWORD *)(v68 - 8);
  v286 = v68;
  MEMORY[0x24BDAC7A8](v68, v69);
  v274 = (uint64_t)&v237 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RecoverRepetitivePinchInternalDataPB?, RecoverRepetitivePinchInternalDataPB?));
  MEMORY[0x24BDAC7A8](v284, v71);
  v287 = (uint64_t)&v237 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v73, v74);
  v280 = (uint64_t)&v237 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v76, v77);
  v292 = (uint64_t)&v237 - v78;
  v79 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  v289 = *(_QWORD *)(v79 - 8);
  v290 = v79;
  MEMORY[0x24BDAC7A8](v79, v80);
  v282 = (uint64_t)&v237 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MiddleDoubleTapInternalPB?, MiddleDoubleTapInternalPB?));
  MEMORY[0x24BDAC7A8](v288, v82);
  v291 = (uint64_t)&v237 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  MEMORY[0x24BDAC7A8](v84, v85);
  v297 = (char *)&v237 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v87, v88);
  v294 = (uint64_t)&v237 - v89;
  v296 = type metadata accessor for PinchInternalDataPB();
  v90 = *(_QWORD *)(v296 - 8);
  MEMORY[0x24BDAC7A8](v296, v91);
  v293 = (uint64_t)&v237 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchInternalDataPB?, PinchInternalDataPB?));
  MEMORY[0x24BDAC7A8](v93, v94);
  v96 = (char *)&v237 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v97, v98);
  v295 = (uint64_t)&v237 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v100, v101);
  v103 = (char *)&v237 - v102;
  swift_beginAccess();
  v104 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v105 = *(_QWORD *)(a2 + 16);
  v106 = a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LOBYTE(a1) = specialized static Array<A>.== infix(_:_:)(v104, v105);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    goto LABEL_61;
  swift_beginAccess();
  v107 = *(unsigned __int8 *)(v106 + 24);
  swift_beginAccess();
  if (v107 != *(unsigned __int8 *)(a2 + 24))
    goto LABEL_61;
  v237 = v106;
  v238 = a2;
  v108 = v106
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v108, (uint64_t)v103, &demangling cache variable for type metadata for PinchInternalDataPB?);
  v109 = v238;
  v110 = v238
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
  swift_beginAccess();
  v111 = (uint64_t)&v96[*(int *)(v93 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v103, (uint64_t)v96, &demangling cache variable for type metadata for PinchInternalDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v110, v111, &demangling cache variable for type metadata for PinchInternalDataPB?);
  v112 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  v113 = v296;
  if (v112((uint64_t)v96, 1, v296) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v103, &demangling cache variable for type metadata for PinchInternalDataPB?);
    v114 = v112(v111, 1, v113);
    v115 = v237;
    v116 = (uint64_t)v297;
    if (v114 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v96, &demangling cache variable for type metadata for PinchInternalDataPB?);
      goto LABEL_11;
    }
LABEL_9:
    v119 = &demangling cache variable for type metadata for (PinchInternalDataPB?, PinchInternalDataPB?);
    v120 = (uint64_t)v96;
LABEL_60:
    outlined destroy of Coordinate3DPB?(v120, v119);
    goto LABEL_61;
  }
  v117 = v295;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v96, v295, &demangling cache variable for type metadata for PinchInternalDataPB?);
  v118 = v112(v111, 1, v113);
  v116 = (uint64_t)v297;
  if (v118 == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v103, &demangling cache variable for type metadata for PinchInternalDataPB?);
    outlined destroy of Matrix3x3PB(v117, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
    goto LABEL_9;
  }
  v121 = v293;
  outlined init with take of Matrix2dPB(v111, v293, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
  v122 = static PinchInternalDataPB.== infix(_:_:)(v117, v121);
  outlined destroy of Matrix3x3PB(v121, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v103, &demangling cache variable for type metadata for PinchInternalDataPB?);
  outlined destroy of Matrix3x3PB(v117, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v96, &demangling cache variable for type metadata for PinchInternalDataPB?);
  v115 = v237;
  if ((v122 & 1) == 0)
    goto LABEL_61;
LABEL_11:
  v123 = (uint64_t *)(v115
                   + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers);
  swift_beginAccess();
  v124 = *v123;
  v125 = (uint64_t *)(v109
                   + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers);
  swift_beginAccess();
  v126 = *v125;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v127 = specialized static Array<A>.== infix(_:_:)(v124, v126);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v127 & 1) == 0)
    goto LABEL_61;
  v128 = v115
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
  swift_beginAccess();
  v129 = v294;
  outlined init with copy of (Int32, Matrix2dPB)(v128, v294, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v130 = v109
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
  swift_beginAccess();
  v131 = v291;
  v132 = v291 + *(int *)(v288 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v129, v291, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v133 = v130;
  v134 = v131;
  outlined init with copy of (Int32, Matrix2dPB)(v133, v132, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v135 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v289 + 48);
  v136 = v131;
  v137 = v290;
  if (v135(v136, 1, v290) == 1)
  {
    outlined destroy of Coordinate3DPB?(v129, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
    v138 = v135(v132, 1, v137);
    v139 = v292;
    if (v138 == 1)
    {
      outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
      goto LABEL_19;
    }
LABEL_17:
    v119 = &demangling cache variable for type metadata for (MiddleDoubleTapInternalPB?, MiddleDoubleTapInternalPB?);
LABEL_59:
    v120 = v134;
    goto LABEL_60;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v134, v116, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v140 = v135(v132, 1, v137);
  v139 = v292;
  if (v140 == 1)
  {
    outlined destroy of Coordinate3DPB?(v294, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
    outlined destroy of Matrix3x3PB(v116, type metadata accessor for MiddleDoubleTapInternalPB);
    goto LABEL_17;
  }
  v141 = v282;
  outlined init with take of Matrix2dPB(v132, v282, type metadata accessor for MiddleDoubleTapInternalPB);
  v142 = specialized static MiddleDoubleTapInternalPB.== infix(_:_:)(v116, v141);
  outlined destroy of Matrix3x3PB(v141, type metadata accessor for MiddleDoubleTapInternalPB);
  outlined destroy of Coordinate3DPB?(v294, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  outlined destroy of Matrix3x3PB(v116, type metadata accessor for MiddleDoubleTapInternalPB);
  outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  if ((v142 & 1) == 0)
    goto LABEL_61;
LABEL_19:
  v143 = v115
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v143, v139, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  v144 = v109
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
  swift_beginAccess();
  v134 = v287;
  v145 = v287 + *(int *)(v284 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v139, v287, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v144, v145, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  v146 = v286;
  v147 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v285 + 48);
  if (v147(v134, 1, v286) == 1)
  {
    outlined destroy of Coordinate3DPB?(v139, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
    if (v147(v145, 1, v146) == 1)
    {
      outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
      v148 = v283;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  v149 = v280;
  outlined init with copy of (Int32, Matrix2dPB)(v134, v280, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  v150 = v147(v145, 1, v146);
  v148 = v283;
  if (v150 == 1)
  {
    outlined destroy of Coordinate3DPB?(v292, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
    outlined destroy of Matrix3x3PB(v149, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
LABEL_24:
    v119 = &demangling cache variable for type metadata for (RecoverRepetitivePinchInternalDataPB?, RecoverRepetitivePinchInternalDataPB?);
    goto LABEL_59;
  }
  v151 = v274;
  outlined init with take of Matrix2dPB(v145, v274, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
  v152 = specialized static RecoverRepetitivePinchInternalDataPB.== infix(_:_:)(v149, v151);
  outlined destroy of Matrix3x3PB(v151, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
  outlined destroy of Coordinate3DPB?(v292, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  outlined destroy of Matrix3x3PB(v149, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
  outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  if ((v152 & 1) == 0)
    goto LABEL_61;
LABEL_26:
  v153 = v115
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
  swift_beginAccess();
  v154 = v281;
  outlined init with copy of (Int32, Matrix2dPB)(v153, v281, &demangling cache variable for type metadata for ActionInternalPB?);
  v155 = v109
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
  swift_beginAccess();
  v156 = v279;
  v157 = v279 + *(int *)(v275 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v154, v279, &demangling cache variable for type metadata for ActionInternalPB?);
  v158 = v155;
  v134 = v156;
  outlined init with copy of (Int32, Matrix2dPB)(v158, v157, &demangling cache variable for type metadata for ActionInternalPB?);
  v159 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v276 + 48);
  v160 = v156;
  v161 = v278;
  if (v159(v160, 1, v278) == 1)
  {
    outlined destroy of Coordinate3DPB?(v154, &demangling cache variable for type metadata for ActionInternalPB?);
    v162 = v159(v157, 1, v161);
    v163 = (uint64_t)v277;
    if (v162 == 1)
    {
      outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for ActionInternalPB?);
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  v174 = v273;
  outlined init with copy of (Int32, Matrix2dPB)(v134, (uint64_t)v273, &demangling cache variable for type metadata for ActionInternalPB?);
  v175 = v159(v157, 1, v161);
  v163 = (uint64_t)v277;
  if (v175 == 1)
  {
    outlined destroy of Coordinate3DPB?(v281, &demangling cache variable for type metadata for ActionInternalPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v174, type metadata accessor for ActionInternalPB);
LABEL_34:
    v119 = &demangling cache variable for type metadata for (ActionInternalPB?, ActionInternalPB?);
    goto LABEL_59;
  }
  v176 = v268;
  outlined init with take of Matrix2dPB(v157, (uint64_t)v268, type metadata accessor for ActionInternalPB);
  if (*v174 != *v176)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v176, type metadata accessor for ActionInternalPB);
    v177 = &demangling cache variable for type metadata for ActionInternalPB?;
    outlined destroy of Coordinate3DPB?(v281, &demangling cache variable for type metadata for ActionInternalPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v174, type metadata accessor for ActionInternalPB);
    v120 = v134;
LABEL_37:
    v119 = v177;
    goto LABEL_60;
  }
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v180 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v176, type metadata accessor for ActionInternalPB);
  outlined destroy of Coordinate3DPB?(v281, &demangling cache variable for type metadata for ActionInternalPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v174, type metadata accessor for ActionInternalPB);
  outlined destroy of Coordinate3DPB?(v279, &demangling cache variable for type metadata for ActionInternalPB?);
  if ((v180 & 1) == 0)
    goto LABEL_61;
LABEL_29:
  v164 = v115
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v164, v148, &demangling cache variable for type metadata for UnsureInternalPB?);
  v165 = v109
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
  swift_beginAccess();
  v166 = v148;
  v167 = v272;
  v168 = v272 + *(int *)(v269 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v166, v272, &demangling cache variable for type metadata for UnsureInternalPB?);
  v169 = v165;
  v134 = v167;
  outlined init with copy of (Int32, Matrix2dPB)(v169, v168, &demangling cache variable for type metadata for UnsureInternalPB?);
  v170 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v270 + 48);
  v171 = v167;
  v172 = v271;
  if (v170(v171, 1, v271) == 1)
  {
    outlined destroy of Coordinate3DPB?(v166, &demangling cache variable for type metadata for UnsureInternalPB?);
    if (v170(v168, 1, v172) == 1)
    {
      outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for UnsureInternalPB?);
      v173 = (uint64_t)v267;
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  v178 = v266;
  outlined init with copy of (Int32, Matrix2dPB)(v134, v266, &demangling cache variable for type metadata for UnsureInternalPB?);
  v179 = v170(v168, 1, v172);
  v173 = (uint64_t)v267;
  if (v179 == 1)
  {
    outlined destroy of Coordinate3DPB?(v283, &demangling cache variable for type metadata for UnsureInternalPB?);
    outlined destroy of Matrix3x3PB(v178, type metadata accessor for UnsureInternalPB);
LABEL_40:
    v119 = &demangling cache variable for type metadata for (UnsureInternalPB?, UnsureInternalPB?);
    goto LABEL_59;
  }
  v181 = v261;
  outlined init with take of Matrix2dPB(v168, v261, type metadata accessor for UnsureInternalPB);
  v182 = specialized static ObjectInteractionStateInternalPB.== infix(_:_:)(v178, v181, (uint64_t (*)(_QWORD, __n128))type metadata accessor for UnsureInternalPB, (uint64_t (*)(void))closure #1 in static UnsureInternalPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v181, type metadata accessor for UnsureInternalPB);
  outlined destroy of Coordinate3DPB?(v283, &demangling cache variable for type metadata for UnsureInternalPB?);
  outlined destroy of Matrix3x3PB(v178, type metadata accessor for UnsureInternalPB);
  outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for UnsureInternalPB?);
  if ((v182 & 1) == 0)
  {
LABEL_61:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_44:
  v183 = v115
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v183, v163, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v184 = v109
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
  swift_beginAccess();
  v185 = v265;
  v186 = v265 + *(int *)(v262 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v163, v265, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v187 = v184;
  v134 = v185;
  outlined init with copy of (Int32, Matrix2dPB)(v187, v186, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v188 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v263 + 48);
  v189 = v185;
  v190 = v264;
  if (v188(v189, 1, v264) == 1)
  {
    outlined destroy of Coordinate3DPB?(v163, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    if (v188(v186, 1, v190) == 1)
    {
      outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  v191 = v259;
  outlined init with copy of (Int32, Matrix2dPB)(v134, v259, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  if (v188(v186, 1, v190) == 1)
  {
    outlined destroy of Coordinate3DPB?(v163, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    outlined destroy of Matrix3x3PB(v191, type metadata accessor for ObjectInteractionStateInternalPB);
LABEL_49:
    v119 = &demangling cache variable for type metadata for (ObjectInteractionStateInternalPB?, ObjectInteractionStateInternalPB?);
    goto LABEL_59;
  }
  v192 = v252;
  outlined init with take of Matrix2dPB(v186, v252, type metadata accessor for ObjectInteractionStateInternalPB);
  v193 = *(int *)(v190 + 20);
  v194 = *(_QWORD *)(v191 + v193);
  v195 = *(_QWORD *)(v192 + v193);
  if (v194 != v195 && !closure #1 in static ObjectInteractionStateInternalPB.== infix(_:_:)(v194, v195))
  {
    outlined destroy of Matrix3x3PB(v192, type metadata accessor for ObjectInteractionStateInternalPB);
    v177 = &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?;
    outlined destroy of Coordinate3DPB?(v163, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    outlined destroy of Matrix3x3PB(v191, type metadata accessor for ObjectInteractionStateInternalPB);
    v120 = v265;
    goto LABEL_37;
  }
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v196 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB(v192, type metadata accessor for ObjectInteractionStateInternalPB);
  outlined destroy of Coordinate3DPB?(v163, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  outlined destroy of Matrix3x3PB(v191, type metadata accessor for ObjectInteractionStateInternalPB);
  outlined destroy of Coordinate3DPB?(v265, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  if ((v196 & 1) == 0)
    goto LABEL_61;
LABEL_53:
  v197 = v115
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata;
  swift_beginAccess();
  v198 = v260;
  outlined init with copy of (Int32, Matrix2dPB)(v197, v260, &demangling cache variable for type metadata for PoseModelIOData?);
  v199 = v109
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__poseModelIodata;
  swift_beginAccess();
  v200 = v258;
  v201 = v258 + *(int *)(v255 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v198, v258, &demangling cache variable for type metadata for PoseModelIOData?);
  v202 = v199;
  v134 = v200;
  outlined init with copy of (Int32, Matrix2dPB)(v202, v201, &demangling cache variable for type metadata for PoseModelIOData?);
  v203 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v256 + 48);
  v204 = v200;
  v205 = v257;
  if (v203(v204, 1, v257) == 1)
  {
    outlined destroy of Coordinate3DPB?(v198, &demangling cache variable for type metadata for PoseModelIOData?);
    if (v203(v201, 1, v205) == 1)
    {
      outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for PoseModelIOData?);
      goto LABEL_64;
    }
    goto LABEL_58;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v134, v173, &demangling cache variable for type metadata for PoseModelIOData?);
  if (v203(v201, 1, v205) == 1)
  {
    outlined destroy of Coordinate3DPB?(v260, &demangling cache variable for type metadata for PoseModelIOData?);
    outlined destroy of Matrix3x3PB(v173, type metadata accessor for PoseModelIOData);
LABEL_58:
    v119 = &demangling cache variable for type metadata for (PoseModelIOData?, PoseModelIOData?);
    goto LABEL_59;
  }
  v207 = v247;
  outlined init with take of Matrix2dPB(v201, v247, type metadata accessor for PoseModelIOData);
  v208 = static PoseModelIOData.== infix(_:_:)(v173, v207);
  outlined destroy of Matrix3x3PB(v207, type metadata accessor for PoseModelIOData);
  outlined destroy of Coordinate3DPB?(v260, &demangling cache variable for type metadata for PoseModelIOData?);
  outlined destroy of Matrix3x3PB(v173, type metadata accessor for PoseModelIOData);
  outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for PoseModelIOData?);
  if ((v208 & 1) == 0)
    goto LABEL_61;
LABEL_64:
  v209 = v115
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata;
  swift_beginAccess();
  v210 = v253;
  outlined init with copy of (Int32, Matrix2dPB)(v209, v253, &demangling cache variable for type metadata for PinchModelIOData?);
  v211 = v109
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchModelIodata;
  swift_beginAccess();
  v212 = v254;
  v213 = v254 + *(int *)(v249 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v210, v254, &demangling cache variable for type metadata for PinchModelIOData?);
  outlined init with copy of (Int32, Matrix2dPB)(v211, v213, &demangling cache variable for type metadata for PinchModelIOData?);
  v214 = v251;
  v215 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v250 + 48);
  if (v215(v212, 1, v251) == 1)
  {
    outlined destroy of Coordinate3DPB?(v253, &demangling cache variable for type metadata for PinchModelIOData?);
    if (v215(v213, 1, v214) == 1)
    {
      outlined destroy of Coordinate3DPB?(v254, &demangling cache variable for type metadata for PinchModelIOData?);
      goto LABEL_72;
    }
    goto LABEL_70;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v254, v248, &demangling cache variable for type metadata for PinchModelIOData?);
  if (v215(v213, 1, v214) == 1)
  {
    outlined destroy of Coordinate3DPB?(v253, &demangling cache variable for type metadata for PinchModelIOData?);
    outlined destroy of Matrix3x3PB(v248, type metadata accessor for PinchModelIOData);
LABEL_70:
    outlined destroy of Coordinate3DPB?(v254, &demangling cache variable for type metadata for (PinchModelIOData?, PinchModelIOData?));
    goto LABEL_61;
  }
  v216 = v243;
  outlined init with take of Matrix2dPB(v213, v243, type metadata accessor for PinchModelIOData);
  v217 = v248;
  v218 = static PinchModelIOData.== infix(_:_:)(v248, v216);
  outlined destroy of Matrix3x3PB(v216, type metadata accessor for PinchModelIOData);
  outlined destroy of Coordinate3DPB?(v253, &demangling cache variable for type metadata for PinchModelIOData?);
  outlined destroy of Matrix3x3PB(v217, type metadata accessor for PinchModelIOData);
  outlined destroy of Coordinate3DPB?(v254, &demangling cache variable for type metadata for PinchModelIOData?);
  if ((v218 & 1) == 0)
    goto LABEL_61;
LABEL_72:
  v219 = (uint64_t *)(v237
                   + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand);
  swift_beginAccess();
  v220 = *v219;
  v221 = (uint64_t *)(v238
                   + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand);
  swift_beginAccess();
  v222 = *v221;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v223 = specialized static Array<A>.== infix(_:_:)(v220, v222);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v223 & 1) == 0)
    goto LABEL_61;
  v224 = v237
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  swift_beginAccess();
  v225 = v244;
  outlined init with copy of (Int32, Matrix2dPB)(v224, v244, &demangling cache variable for type metadata for HomePinchInternalPB?);
  v226 = v238
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  swift_beginAccess();
  v227 = v246;
  v228 = v246 + *(int *)(v240 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v225, v246, &demangling cache variable for type metadata for HomePinchInternalPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v226, v228, &demangling cache variable for type metadata for HomePinchInternalPB?);
  v229 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v241 + 48);
  if (v229(v227, 1, v245) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of Coordinate3DPB?(v244, &demangling cache variable for type metadata for HomePinchInternalPB?);
    if (v229(v228, 1, v245) == 1)
    {
      outlined destroy of Coordinate3DPB?(v246, &demangling cache variable for type metadata for HomePinchInternalPB?);
      return 1;
    }
    goto LABEL_80;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v246, (uint64_t)v242, &demangling cache variable for type metadata for HomePinchInternalPB?);
  if (v229(v228, 1, v245) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of Coordinate3DPB?(v244, &demangling cache variable for type metadata for HomePinchInternalPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v242, type metadata accessor for HomePinchInternalPB);
LABEL_80:
    v230 = &demangling cache variable for type metadata for (HomePinchInternalPB?, HomePinchInternalPB?);
    v231 = v246;
LABEL_81:
    outlined destroy of Coordinate3DPB?(v231, v230);
    return 0;
  }
  v232 = v228;
  v233 = v239;
  outlined init with take of Matrix2dPB(v232, (uint64_t)v239, type metadata accessor for HomePinchInternalPB);
  if (*v242 != *v233)
  {
    swift_release();
    swift_release();
    outlined destroy of Matrix3x3PB((uint64_t)v239, type metadata accessor for HomePinchInternalPB);
    outlined destroy of Coordinate3DPB?(v244, &demangling cache variable for type metadata for HomePinchInternalPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v242, type metadata accessor for HomePinchInternalPB);
    v231 = v246;
    v230 = &demangling cache variable for type metadata for HomePinchInternalPB?;
    goto LABEL_81;
  }
  v234 = v242;
  v235 = (uint64_t)v239;
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v236 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  outlined destroy of Matrix3x3PB(v235, type metadata accessor for HomePinchInternalPB);
  outlined destroy of Coordinate3DPB?(v244, &demangling cache variable for type metadata for HomePinchInternalPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v234, type metadata accessor for HomePinchInternalPB);
  outlined destroy of Coordinate3DPB?(v246, &demangling cache variable for type metadata for HomePinchInternalPB?);
  return (v236 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance HandDescriptorInternalPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static HandDescriptorInternalPB._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandDescriptorInternalPB()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandDescriptorInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandDescriptorInternalPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandDescriptorInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for HandDescriptorInternalPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in HandDescriptorInternalPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandDescriptorInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandDescriptorInternalPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandDescriptorInternalPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandDescriptorInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandDescriptorInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in HandDescriptorInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
}

uint64_t base witness table accessor for Message in HandDescriptorInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
}

uint64_t base witness table accessor for Hashable in HandDescriptorInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
}

uint64_t base witness table accessor for Equatable in MonoHandPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
}

uint64_t base witness table accessor for Message in MonoHandPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
}

uint64_t base witness table accessor for Hashable in MonoHandPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
}

uint64_t base witness table accessor for Equatable in HomePinchInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
}

uint64_t base witness table accessor for Message in HomePinchInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
}

uint64_t base witness table accessor for Hashable in HomePinchInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HomePinchInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
}

uint64_t base witness table accessor for Equatable in ObjectInteractionStateInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
}

uint64_t base witness table accessor for Message in ObjectInteractionStateInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
}

uint64_t base witness table accessor for Hashable in ObjectInteractionStateInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ObjectInteractionStateInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
}

uint64_t base witness table accessor for Equatable in UnsureInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
}

uint64_t base witness table accessor for Message in UnsureInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
}

uint64_t base witness table accessor for Hashable in UnsureInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in UnsureInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
}

uint64_t base witness table accessor for Equatable in ActionInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
}

uint64_t base witness table accessor for Message in ActionInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
}

uint64_t base witness table accessor for Hashable in ActionInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ActionInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
}

uint64_t base witness table accessor for Equatable in MiddleDoubleTapInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
}

uint64_t base witness table accessor for Message in MiddleDoubleTapInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
}

uint64_t base witness table accessor for Hashable in MiddleDoubleTapInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
}

uint64_t base witness table accessor for Equatable in RecoverScrollPinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverScrollPinchInternalDataPB and conformance RecoverScrollPinchInternalDataPB, type metadata accessor for RecoverScrollPinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverScrollPinchInternalDataPB);
}

uint64_t type metadata accessor for RecoverScrollPinchInternalDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for RecoverScrollPinchInternalDataPB);
}

uint64_t base witness table accessor for Message in RecoverScrollPinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverScrollPinchInternalDataPB and conformance RecoverScrollPinchInternalDataPB, type metadata accessor for RecoverScrollPinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverScrollPinchInternalDataPB);
}

uint64_t base witness table accessor for Hashable in RecoverScrollPinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverScrollPinchInternalDataPB and conformance RecoverScrollPinchInternalDataPB, type metadata accessor for RecoverScrollPinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverScrollPinchInternalDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in RecoverScrollPinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverScrollPinchInternalDataPB and conformance RecoverScrollPinchInternalDataPB, type metadata accessor for RecoverScrollPinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverScrollPinchInternalDataPB);
}

uint64_t base witness table accessor for Equatable in BasicHandDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
}

uint64_t base witness table accessor for Message in BasicHandDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
}

uint64_t base witness table accessor for Hashable in BasicHandDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in BasicHandDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
}

uint64_t base witness table accessor for Equatable in LocalizerPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB, type metadata accessor for LocalizerPB, (uint64_t)&protocol conformance descriptor for LocalizerPB);
}

uint64_t base witness table accessor for Message in LocalizerPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB, type metadata accessor for LocalizerPB, (uint64_t)&protocol conformance descriptor for LocalizerPB);
}

uint64_t base witness table accessor for Hashable in LocalizerPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB, type metadata accessor for LocalizerPB, (uint64_t)&protocol conformance descriptor for LocalizerPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in LocalizerPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LocalizerPB and conformance LocalizerPB, type metadata accessor for LocalizerPB, (uint64_t)&protocol conformance descriptor for LocalizerPB);
}

uint64_t base witness table accessor for Equatable in CropBoxPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
}

uint64_t base witness table accessor for Message in CropBoxPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
}

uint64_t base witness table accessor for Hashable in CropBoxPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CropBoxPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
}

unint64_t lazy protocol witness table accessor for type [HandCloseToMouthPB] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [HandCloseToMouthPB] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HandCloseToMouthPB] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HandCloseToMouthPB]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [HandCloseToMouthPB] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandDescriptorInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MonoHandPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MiddleDoubleTapInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
}

uint64_t specialized static CropBoxPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && (specialized == infix<A>(_:_:)(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16)) & 1) != 0)
  {
    v13 = type metadata accessor for CropBoxPB(0);
    v14 = a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static RecoverScrollPinchInternalDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  char v74;
  void (*v75)(char *, uint64_t);
  _QWORD *v76;
  int v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char v85;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a2;
  v105 = a1;
  v100 = type metadata accessor for UnknownStorage();
  v98 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100, v2);
  v97 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v103 = (char *)&v87 - v6;
  v7 = type metadata accessor for MissedScrollByBreakStatePB(0);
  v8 = *(_QWORD *)(v7 - 8);
  v101 = v7;
  v102 = v8;
  MEMORY[0x24BDAC7A8](v7, v9);
  v99 = (uint64_t *)((char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MissedScrollByBreakStatePB?, MissedScrollByBreakStatePB?));
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (char *)&v87 - v21;
  MEMORY[0x24BDAC7A8](v23, v24);
  v26 = (char *)&v87 - v25;
  v27 = type metadata accessor for MissedScrollStatePB(0);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27, v29);
  v31 = (char *)&v87 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MissedScrollStatePB?, MissedScrollStatePB?));
  MEMORY[0x24BDAC7A8](v32, v33);
  v35 = (char *)&v87 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
  MEMORY[0x24BDAC7A8](v36, v37);
  MEMORY[0x24BDAC7A8](v38, v39);
  MEMORY[0x24BDAC7A8]((char *)&v87 - v40, v41);
  if (*(_QWORD *)v45 != *(_QWORD *)v44)
    goto LABEL_30;
  v93 = (char *)v28;
  v94 = v35;
  v95 = v27;
  v96 = v22;
  v90 = v31;
  v91 = v26;
  v89 = v18;
  v92 = v14;
  v47 = v103;
  if (*(_QWORD *)(v45 + 8) != *(_QWORD *)(v44 + 8) || *(unsigned __int8 *)(v45 + 16) != *(unsigned __int8 *)(v44 + 16))
    goto LABEL_30;
  v88 = (_QWORD *)v46;
  v48 = v45;
  v49 = (char *)&v87 - v43;
  v50 = v42;
  v51 = v44;
  v52 = type metadata accessor for RecoverScrollPinchInternalDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(v48 + *(int *)(v52 + 36), (uint64_t)v49, &demangling cache variable for type metadata for MissedScrollStatePB?);
  outlined init with copy of (Int32, Matrix2dPB)(v51 + *(int *)(v52 + 36), v50, &demangling cache variable for type metadata for MissedScrollStatePB?);
  v53 = (uint64_t)v94;
  v54 = (uint64_t)&v94[*(int *)(v32 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v49, (uint64_t)v94, &demangling cache variable for type metadata for MissedScrollStatePB?);
  outlined init with copy of (Int32, Matrix2dPB)(v50, v54, &demangling cache variable for type metadata for MissedScrollStatePB?);
  v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v93 + 6);
  v56 = v95;
  if (v55(v53, 1, v95) == 1)
  {
    outlined destroy of Coordinate3DPB?(v50, &demangling cache variable for type metadata for MissedScrollStatePB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v49, &demangling cache variable for type metadata for MissedScrollStatePB?);
    v57 = v55(v54, 1, v56);
    v58 = (uint64_t)v96;
    v59 = v102;
    if (v57 == 1)
    {
      outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for MissedScrollStatePB?);
      goto LABEL_7;
    }
LABEL_14:
    v78 = &demangling cache variable for type metadata for (MissedScrollStatePB?, MissedScrollStatePB?);
    v79 = v53;
LABEL_29:
    outlined destroy of Coordinate3DPB?(v79, v78);
    goto LABEL_30;
  }
  v87 = v50;
  v93 = v49;
  v76 = v88;
  outlined init with copy of (Int32, Matrix2dPB)(v53, (uint64_t)v88, &demangling cache variable for type metadata for MissedScrollStatePB?);
  v77 = v55(v54, 1, v56);
  v58 = (uint64_t)v96;
  v59 = v102;
  if (v77 == 1)
  {
    outlined destroy of Coordinate3DPB?(v87, &demangling cache variable for type metadata for MissedScrollStatePB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v93, &demangling cache variable for type metadata for MissedScrollStatePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v76, type metadata accessor for MissedScrollStatePB);
    goto LABEL_14;
  }
  v80 = v90;
  outlined init with take of Matrix2dPB(v54, (uint64_t)v90, type metadata accessor for MissedScrollStatePB);
  if (*v76 != *v80 || v76[1] != v80[1])
  {
    outlined destroy of Matrix3x3PB((uint64_t)v80, type metadata accessor for MissedScrollStatePB);
    v82 = v53;
    v61 = &demangling cache variable for type metadata for MissedScrollStatePB?;
    outlined destroy of Coordinate3DPB?(v87, &demangling cache variable for type metadata for MissedScrollStatePB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v93, &demangling cache variable for type metadata for MissedScrollStatePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v76, type metadata accessor for MissedScrollStatePB);
    v79 = v82;
LABEL_28:
    v78 = v61;
    goto LABEL_29;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v81 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v80, type metadata accessor for MissedScrollStatePB);
  outlined destroy of Coordinate3DPB?(v87, &demangling cache variable for type metadata for MissedScrollStatePB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v93, &demangling cache variable for type metadata for MissedScrollStatePB?);
  outlined destroy of Matrix3x3PB((uint64_t)v88, type metadata accessor for MissedScrollStatePB);
  outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for MissedScrollStatePB?);
  if ((v81 & 1) == 0)
    goto LABEL_30;
LABEL_7:
  v60 = v105 + *(int *)(v52 + 40);
  v61 = &demangling cache variable for type metadata for MissedScrollByBreakStatePB?;
  v62 = (char *)v52;
  v63 = (uint64_t)v91;
  outlined init with copy of (Int32, Matrix2dPB)(v60, (uint64_t)v91, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  v103 = v62;
  outlined init with copy of (Int32, Matrix2dPB)(v104 + *((int *)v62 + 10), v58, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  v64 = (uint64_t)v92;
  v65 = (uint64_t)&v92[*(int *)(v11 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v63, (uint64_t)v92, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  outlined init with copy of (Int32, Matrix2dPB)(v58, v65, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  v67 = v101;
  if (v66(v64, 1, v101) == 1)
  {
    outlined destroy of Coordinate3DPB?(v58, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    outlined destroy of Coordinate3DPB?(v63, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    if (v66(v65, 1, v67) == 1)
    {
      outlined destroy of Coordinate3DPB?(v64, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
      v68 = v100;
      goto LABEL_10;
    }
    goto LABEL_22;
  }
  v83 = v89;
  outlined init with copy of (Int32, Matrix2dPB)(v64, (uint64_t)v89, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  if (v66(v65, 1, v67) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v96, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    outlined destroy of Coordinate3DPB?(v63, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v83, type metadata accessor for MissedScrollByBreakStatePB);
LABEL_22:
    v78 = &demangling cache variable for type metadata for (MissedScrollByBreakStatePB?, MissedScrollByBreakStatePB?);
    v79 = v64;
    goto LABEL_29;
  }
  v84 = v99;
  outlined init with take of Matrix2dPB(v65, (uint64_t)v99, type metadata accessor for MissedScrollByBreakStatePB);
  if (*v83 != *v84 || v83[1] != v84[1])
  {
    outlined destroy of Matrix3x3PB((uint64_t)v84, type metadata accessor for MissedScrollByBreakStatePB);
    outlined destroy of Coordinate3DPB?((uint64_t)v96, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    outlined destroy of Coordinate3DPB?(v63, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v83, type metadata accessor for MissedScrollByBreakStatePB);
    v79 = v64;
    goto LABEL_28;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v68 = v100;
  v85 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v84, type metadata accessor for MissedScrollByBreakStatePB);
  outlined destroy of Coordinate3DPB?((uint64_t)v96, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  outlined destroy of Coordinate3DPB?(v63, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  outlined destroy of Matrix3x3PB((uint64_t)v83, type metadata accessor for MissedScrollByBreakStatePB);
  outlined destroy of Coordinate3DPB?(v64, &demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
  if ((v85 & 1) == 0)
    goto LABEL_30;
LABEL_10:
  v69 = v104;
  if (*(_QWORD *)(v105 + 24) != *(_QWORD *)(v104 + 24))
  {
LABEL_30:
    v74 = 0;
    return v74 & 1;
  }
  v70 = v103;
  v71 = v98;
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
  v72(v47, v105 + *((int *)v103 + 8), v68);
  v73 = v97;
  v72(v97, v69 + *((int *)v70 + 8), v68);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  v75 = *(void (**)(char *, uint64_t))(v71 + 8);
  v75(v73, v68);
  v75(v47, v68);
  return v74 & 1;
}

uint64_t specialized static ObjectInteractionStateInternalPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static ObjectInteractionStateInternalPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t (*)(void))closure #1 in static ObjectInteractionStateInternalPB.== infix(_:_:));
}

uint64_t specialized static MiddleDoubleTapInternalPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*(float *)a1 == *(float *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0)
  {
    v13 = type metadata accessor for MiddleDoubleTapInternalPB(0);
    v14 = a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 28), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static HandDescriptorInternalPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for HandDescriptorInternalPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static HandDescriptorInternalPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        v16))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static HomePinchInternalPB.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *(_QWORD *)a2)
  {
    v13 = type metadata accessor for HomePinchInternalPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, &a2[*(int *)(v13 + 20)], v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static UnsureInternalPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static ObjectInteractionStateInternalPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for UnsureInternalPB, (uint64_t (*)(void))closure #1 in static UnsureInternalPB.== infix(_:_:));
}

uint64_t specialized static ObjectInteractionStateInternalPB.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, __n128), uint64_t (*a4)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13, v14);
  v17 = (char *)&v23 - v16;
  v18 = a3(0, v15);
  if (*(_QWORD *)(a1 + *(int *)(v18 + 20)) == *(_QWORD *)(a2 + *(int *)(v18 + 20)) || (a4() & 1) != 0)
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v17, a1, v8);
    v19(v12, a2, v8);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v17, v8);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static ActionInternalPB.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void (*v16)(char *, unsigned __int8 *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *a2)
  {
    v14 = type metadata accessor for ActionInternalPB(0);
    v15 = &a1[*(int *)(v14 + 20)];
    v16 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, &a2[*(int *)(v14 + 20)], v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static BasicHandDescriptorPB.== infix(_:_:)(float *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  float *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  int *v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v85;
  char v86;
  int *v87;
  float *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  int *v99;
  float *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v2 = type metadata accessor for UnknownStorage();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v109 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v108 = (char *)&v95 - v8;
  v112 = type metadata accessor for Coordinate3DPB(0);
  v9 = *(_QWORD *)(v112 - 8);
  MEMORY[0x24BDAC7A8](v112, v10);
  v111 = (uint64_t)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v110 = (uint64_t)&v95 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (char *)&v95 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v23, v24);
  MEMORY[0x24BDAC7A8](v25, v26);
  MEMORY[0x24BDAC7A8]((char *)&v95 - v27, v28);
  MEMORY[0x24BDAC7A8](v29, v30);
  MEMORY[0x24BDAC7A8](v32, (char *)&v95 - v31);
  MEMORY[0x24BDAC7A8](v33, v34);
  MEMORY[0x24BDAC7A8](v35, v36);
  v38 = (char *)&v95 - v37;
  MEMORY[0x24BDAC7A8](v39, v40);
  v42 = (char *)&v95 - v41;
  MEMORY[0x24BDAC7A8](v43, v44);
  v53 = (char *)&v95 - v52;
  if (*(_QWORD *)a1 != *(_QWORD *)v49)
    goto LABEL_24;
  v106 = v48;
  v107 = v47;
  v103 = v46;
  v104 = v45;
  v105 = v51;
  v101 = v50;
  v102 = v15;
  v54 = *((_QWORD *)a1 + 1);
  v55 = a1;
  v56 = v49;
  if ((specialized static Array<A>.== infix(_:_:)(v54, *((_QWORD *)v49 + 1)) & 1) == 0)
    goto LABEL_24;
  v96 = v3;
  v97 = v2;
  v57 = type metadata accessor for BasicHandDescriptorPB(0);
  v58 = *(int *)(v57 + 36);
  v98 = v55;
  v59 = (int *)v57;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v55 + v58, (uint64_t)v53, &demangling cache variable for type metadata for Coordinate3DPB?);
  v99 = v59;
  v100 = v56;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v56 + v59[9], (uint64_t)v42, &demangling cache variable for type metadata for Coordinate3DPB?);
  v60 = v12;
  v61 = (uint64_t)&v22[*(int *)(v12 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v53, (uint64_t)v22, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v42, v61, &demangling cache variable for type metadata for Coordinate3DPB?);
  v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  v63 = v112;
  if (v62((uint64_t)v22, 1, v112) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v62(v61, 1, v63) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_10;
    }
LABEL_8:
    v64 = (uint64_t)v22;
LABEL_23:
    outlined destroy of Coordinate3DPB?(v64, &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
    goto LABEL_24;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v22, (uint64_t)v38, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v62(v61, 1, v63) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v38, type metadata accessor for Coordinate3DPB);
    goto LABEL_8;
  }
  v65 = v111;
  outlined init with take of Matrix2dPB(v61, v111, type metadata accessor for Coordinate3DPB);
  v66 = static Coordinate3DPB.== infix(_:_:)(v38, v65);
  outlined destroy of Matrix3x3PB(v65, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v38, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v66 & 1) == 0)
    goto LABEL_24;
LABEL_10:
  v68 = v98;
  v67 = v99;
  v69 = v107;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v98 + v99[10], v107, &demangling cache variable for type metadata for Coordinate3DPB?);
  v70 = v106;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v100 + v67[10], v106, &demangling cache variable for type metadata for Coordinate3DPB?);
  v71 = v110;
  v72 = v110 + *(int *)(v60 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v69, v110, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v70, v72, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v62(v71, 1, v63) == 1)
  {
    outlined destroy of Coordinate3DPB?(v70, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?(v69, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v62(v72, 1, v63) == 1)
    {
      outlined destroy of Coordinate3DPB?(v71, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v73 = v103;
  outlined init with copy of (Int32, Matrix2dPB)(v71, v103, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v62(v72, 1, v63) == 1)
  {
    outlined destroy of Coordinate3DPB?(v106, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?(v107, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB(v73, type metadata accessor for Coordinate3DPB);
LABEL_15:
    v64 = v71;
    goto LABEL_23;
  }
  v74 = v111;
  outlined init with take of Matrix2dPB(v72, v111, type metadata accessor for Coordinate3DPB);
  v75 = static Coordinate3DPB.== infix(_:_:)(v73, v74);
  outlined destroy of Matrix3x3PB(v74, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v106, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v107, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB(v73, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v71, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v75 & 1) == 0)
    goto LABEL_24;
LABEL_17:
  v76 = v99;
  v77 = v60;
  v78 = v105;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v68 + v99[11], v105, &demangling cache variable for type metadata for Coordinate3DPB?);
  v79 = v104;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v100 + v76[11], v104, &demangling cache variable for type metadata for Coordinate3DPB?);
  v80 = (uint64_t)v102;
  v81 = (uint64_t)&v102[*(int *)(v77 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v78, (uint64_t)v102, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v79, v81, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v62(v80, 1, v63) != 1)
  {
    v82 = v101;
    outlined init with copy of (Int32, Matrix2dPB)(v80, v101, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v62(v81, 1, v63) != 1)
    {
      v85 = v111;
      outlined init with take of Matrix2dPB(v81, v111, type metadata accessor for Coordinate3DPB);
      v86 = static Coordinate3DPB.== infix(_:_:)(v82, v85);
      outlined destroy of Matrix3x3PB(v85, type metadata accessor for Coordinate3DPB);
      outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Coordinate3DPB?(v105, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Matrix3x3PB(v82, type metadata accessor for Coordinate3DPB);
      outlined destroy of Coordinate3DPB?(v80, &demangling cache variable for type metadata for Coordinate3DPB?);
      if ((v86 & 1) == 0)
        goto LABEL_24;
      goto LABEL_27;
    }
    outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?(v105, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB(v82, type metadata accessor for Coordinate3DPB);
    goto LABEL_22;
  }
  outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v62(v81, 1, v63) != 1)
  {
LABEL_22:
    v64 = v80;
    goto LABEL_23;
  }
  outlined destroy of Coordinate3DPB?(v80, &demangling cache variable for type metadata for Coordinate3DPB?);
LABEL_27:
  if (*((unsigned __int8 *)v68 + 16) == *((unsigned __int8 *)v100 + 16) && v68[5] == v100[5])
  {
    v87 = v99;
    v88 = v100;
    v90 = v96;
    v89 = v97;
    v91 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
    v92 = v108;
    v91(v108, (char *)v68 + v99[8], v97);
    v93 = v109;
    v91(v109, (char *)v88 + v87[8], v89);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v83 = dispatch thunk of static Equatable.== infix(_:_:)();
    v94 = *(void (**)(char *, uint64_t))(v90 + 8);
    v94(v93, v89);
    v94(v92, v89);
    return v83 & 1;
  }
LABEL_24:
  v83 = 0;
  return v83 & 1;
}

uint64_t specialized static LocalizerPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for UnknownStorage();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v51 = (char *)&v50 - v9;
  v10 = type metadata accessor for Matrix2dPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v55 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v50 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v50 - v28;
  v30 = type metadata accessor for LocalizerPB(0);
  v31 = *(int *)(v30 + 24);
  v56 = a1;
  v32 = a1 + v31;
  v33 = v30;
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v29, &demangling cache variable for type metadata for Matrix2dPB?);
  v34 = *(int *)(v33 + 24);
  v57 = a2;
  outlined init with copy of (Int32, Matrix2dPB)(a2 + v34, (uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
  v35 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v17, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v25, v35, &demangling cache variable for type metadata for Matrix2dPB?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v17, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v36(v35, 1, v10) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v36(v35, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for Matrix2dPB);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
LABEL_10:
    v47 = 0;
    return v47 & 1;
  }
  v37 = v55;
  outlined init with take of Matrix2dPB(v35, v55, type metadata accessor for Matrix2dPB);
  v38 = static Matrix2dPB.== infix(_:_:)(v21, v37);
  outlined destroy of Matrix3x3PB(v37, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v38 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v39 = v56;
  v40 = v57;
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)v56, *(unsigned __int8 *)(v56 + 8), *(_QWORD *)v57, *(unsigned __int8 *)(v57 + 8)) & 1) == 0)goto LABEL_10;
  v41 = v39 + *(int *)(v33 + 20);
  v43 = v53;
  v42 = v54;
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v45 = v51;
  v44(v51, v41, v54);
  v46 = v52;
  v44(v52, v40 + *(int *)(v33 + 20), v42);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v46, v42);
  v48(v45, v42);
  return v47 & 1;
}

uint64_t specialized static MonoHandPB.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 == v13
    && specialized static Array<A>.== infix(_:_:)(a1[2], a2[2])
    && specialized static Array<A>.== infix(_:_:)(a1[3], a2[3]))
  {
    v14 = type metadata accessor for MonoHandPB(0);
    v15 = (char *)a1 + *(int *)(v14 + 28);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, (char *)a2 + *(int *)(v14 + 28), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized UnsureInternalPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v2 = v1;
  *(_DWORD *)(v1 + 39) = 0;
  v4 = (_BYTE *)(v1 + 39);
  *(_QWORD *)(v1 + 32) = 0;
  v5 = (_BYTE *)(v1 + 32);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 52) = 0;
  *(_QWORD *)(v1 + 44) = 0;
  swift_beginAccess();
  v6 = *(_DWORD *)(a1 + 16);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v6;
  swift_beginAccess();
  v7 = *(_DWORD *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v1 + 20) = v7;
  swift_beginAccess();
  v8 = *(_DWORD *)(a1 + 24);
  swift_beginAccess();
  *(_DWORD *)(v1 + 24) = v8;
  swift_beginAccess();
  v9 = *(_DWORD *)(a1 + 28);
  swift_beginAccess();
  *(_DWORD *)(v1 + 28) = v9;
  swift_beginAccess();
  v10 = *(_BYTE *)(a1 + 32);
  swift_beginAccess();
  *v5 = v10;
  swift_beginAccess();
  v11 = *(_BYTE *)(a1 + 33);
  swift_beginAccess();
  *(_BYTE *)(v2 + 33) = v11;
  swift_beginAccess();
  v12 = *(_BYTE *)(a1 + 34);
  swift_beginAccess();
  *(_BYTE *)(v2 + 34) = v12;
  swift_beginAccess();
  v13 = *(_BYTE *)(a1 + 35);
  swift_beginAccess();
  *(_BYTE *)(v2 + 35) = v13;
  swift_beginAccess();
  v14 = *(_BYTE *)(a1 + 36);
  swift_beginAccess();
  *(_BYTE *)(v2 + 36) = v14;
  swift_beginAccess();
  v15 = *(_BYTE *)(a1 + 37);
  swift_beginAccess();
  *(_BYTE *)(v2 + 37) = v15;
  swift_beginAccess();
  v16 = *(_BYTE *)(a1 + 38);
  swift_beginAccess();
  *(_BYTE *)(v2 + 38) = v16;
  swift_beginAccess();
  v17 = *(_BYTE *)(a1 + 39);
  swift_beginAccess();
  *v4 = v17;
  swift_beginAccess();
  v18 = *(_BYTE *)(a1 + 40);
  swift_beginAccess();
  *(_BYTE *)(v2 + 40) = v18;
  swift_beginAccess();
  v19 = *(_BYTE *)(a1 + 41);
  swift_beginAccess();
  *(_BYTE *)(v2 + 41) = v19;
  swift_beginAccess();
  v20 = *(_BYTE *)(a1 + 42);
  swift_beginAccess();
  *(_BYTE *)(v2 + 42) = v20;
  swift_beginAccess();
  v21 = *(_DWORD *)(a1 + 44);
  swift_beginAccess();
  *(_DWORD *)(v2 + 44) = v21;
  swift_beginAccess();
  v22 = *(_DWORD *)(a1 + 48);
  swift_beginAccess();
  *(_DWORD *)(v2 + 48) = v22;
  swift_beginAccess();
  v23 = *(_DWORD *)(a1 + 52);
  swift_beginAccess();
  *(_DWORD *)(v2 + 52) = v23;
  swift_beginAccess();
  v24 = *(_DWORD *)(a1 + 56);
  swift_beginAccess();
  *(_DWORD *)(v2 + 56) = v24;
  return v2;
}

uint64_t specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  _BYTE *v27;
  _DWORD *v28;
  _DWORD *v29;
  _QWORD *v30;
  _BYTE *v31;
  _DWORD *v32;

  v2 = v1;
  *(_DWORD *)(v1 + 88) = 0;
  v29 = (_DWORD *)(v1 + 88);
  *(_DWORD *)(v1 + 84) = 0;
  v28 = (_DWORD *)(v1 + 84);
  *(_QWORD *)(v1 + 96) = 0;
  v30 = (_QWORD *)(v1 + 96);
  *(_BYTE *)(v1 + 104) = 0;
  v31 = (_BYTE *)(v1 + 104);
  *(_DWORD *)(v1 + 108) = 0;
  v32 = (_DWORD *)(v1 + 108);
  *(_BYTE *)(v1 + 80) = 0;
  v27 = (_BYTE *)(v1 + 80);
  *(_OWORD *)(v1 + 64) = 0u;
  v4 = (_DWORD *)(v1 + 64);
  *(_OWORD *)(v1 + 48) = 0u;
  v5 = (_DWORD *)(v1 + 48);
  *(_OWORD *)(v1 + 32) = 0u;
  v6 = (_DWORD *)(v1 + 32);
  *(_OWORD *)(v1 + 16) = 0u;
  swift_beginAccess();
  v7 = *(_DWORD *)(a1 + 16);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v7;
  swift_beginAccess();
  v8 = *(_DWORD *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v2 + 20) = v8;
  swift_beginAccess();
  v9 = *(_DWORD *)(a1 + 24);
  swift_beginAccess();
  *(_DWORD *)(v2 + 24) = v9;
  swift_beginAccess();
  v10 = *(_DWORD *)(a1 + 28);
  swift_beginAccess();
  *(_DWORD *)(v2 + 28) = v10;
  swift_beginAccess();
  v11 = *(_DWORD *)(a1 + 32);
  swift_beginAccess();
  *v6 = v11;
  swift_beginAccess();
  v12 = *(_DWORD *)(a1 + 36);
  swift_beginAccess();
  *(_DWORD *)(v2 + 36) = v12;
  swift_beginAccess();
  v13 = *(_DWORD *)(a1 + 40);
  swift_beginAccess();
  *(_DWORD *)(v2 + 40) = v13;
  swift_beginAccess();
  v14 = *(_DWORD *)(a1 + 44);
  swift_beginAccess();
  *(_DWORD *)(v2 + 44) = v14;
  swift_beginAccess();
  v15 = *(_DWORD *)(a1 + 48);
  swift_beginAccess();
  *v5 = v15;
  swift_beginAccess();
  v16 = *(_DWORD *)(a1 + 52);
  swift_beginAccess();
  *(_DWORD *)(v2 + 52) = v16;
  swift_beginAccess();
  v17 = *(_DWORD *)(a1 + 56);
  swift_beginAccess();
  *(_DWORD *)(v2 + 56) = v17;
  swift_beginAccess();
  v18 = *(_DWORD *)(a1 + 60);
  swift_beginAccess();
  *(_DWORD *)(v2 + 60) = v18;
  swift_beginAccess();
  v19 = *(_DWORD *)(a1 + 64);
  swift_beginAccess();
  *v4 = v19;
  swift_beginAccess();
  LOBYTE(v11) = *(_BYTE *)(a1 + 68);
  swift_beginAccess();
  *(_BYTE *)(v2 + 68) = v11;
  swift_beginAccess();
  LOBYTE(v11) = *(_BYTE *)(a1 + 69);
  swift_beginAccess();
  *(_BYTE *)(v2 + 69) = v11;
  swift_beginAccess();
  LOBYTE(v11) = *(_BYTE *)(a1 + 70);
  swift_beginAccess();
  *(_BYTE *)(v2 + 70) = v11;
  swift_beginAccess();
  LOBYTE(v11) = *(_BYTE *)(a1 + 71);
  swift_beginAccess();
  *(_BYTE *)(v2 + 71) = v11;
  swift_beginAccess();
  v20 = *(_DWORD *)(a1 + 72);
  swift_beginAccess();
  *(_DWORD *)(v2 + 72) = v20;
  swift_beginAccess();
  v21 = *(_DWORD *)(a1 + 76);
  swift_beginAccess();
  *(_DWORD *)(v2 + 76) = v21;
  swift_beginAccess();
  LOBYTE(v11) = *(_BYTE *)(a1 + 80);
  swift_beginAccess();
  *v27 = v11;
  swift_beginAccess();
  v22 = *(_DWORD *)(a1 + 84);
  swift_beginAccess();
  *v28 = v22;
  swift_beginAccess();
  v23 = *(_DWORD *)(a1 + 88);
  swift_beginAccess();
  *v29 = v23;
  swift_beginAccess();
  v24 = *(_QWORD *)(a1 + 96);
  swift_beginAccess();
  *v30 = v24;
  swift_beginAccess();
  LOBYTE(v24) = *(_BYTE *)(a1 + 104);
  swift_beginAccess();
  *v31 = v24;
  swift_beginAccess();
  v25 = *(_DWORD *)(a1 + 108);
  swift_beginAccess();
  *v32 = v25;
  return v2;
}

_QWORD *initializeBufferWithCopyOfBuffer for RecoverScrollPinchInternalDataPB(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    v7 = a3[8];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[9];
    v13 = (_OWORD *)((char *)v4 + v12);
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for MissedScrollStatePB(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = a3[10];
    v20 = (_OWORD *)((char *)v4 + v19);
    v21 = (_OWORD *)((char *)a2 + v19);
    v22 = type metadata accessor for MissedScrollByBreakStatePB(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *v20 = *v21;
      v11((uint64_t)v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v10);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return v4;
}

uint64_t destroy for RecoverScrollPinchInternalDataPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for MissedScrollStatePB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v11(v6 + *(int *)(v7 + 24), v5);
  v8 = a1 + a2[10];
  v9 = type metadata accessor for MissedScrollByBreakStatePB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 24), v5);
  return result;
}

uint64_t initializeWithCopy for RecoverScrollPinchInternalDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[8];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[9];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for MissedScrollStatePB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[10];
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)(a2 + v17);
  v20 = type metadata accessor for MissedScrollByBreakStatePB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithCopy for RecoverScrollPinchInternalDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD *)(v9 - 8);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 24);
  v29(v7, v8, v9);
  v10 = a3[9];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for MissedScrollStatePB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for MissedScrollStatePB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  v29((uint64_t)&v11[*(int *)(v13 + 24)], (uint64_t)&v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[10];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = type metadata accessor for MissedScrollByBreakStatePB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      v20[1] = v21[1];
      v29((uint64_t)v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for MissedScrollByBreakStatePB);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *v20 = *v21;
  v20[1] = v21[1];
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t initializeWithTake for RecoverScrollPinchInternalDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[8];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[9];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for MissedScrollStatePB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[10];
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)(a2 + v17);
  v20 = type metadata accessor for MissedScrollByBreakStatePB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithTake for RecoverScrollPinchInternalDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_OWORD *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD *)(v9 - 8);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 40);
  v29(v7, v8, v9);
  v10 = a3[9];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for MissedScrollStatePB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for MissedScrollStatePB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v29((uint64_t)&v11[*(int *)(v13 + 24)], (uint64_t)&v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[10];
  v20 = (_OWORD *)(a1 + v19);
  v21 = (_OWORD *)(a2 + v19);
  v22 = type metadata accessor for MissedScrollByBreakStatePB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      v29((uint64_t)v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for MissedScrollByBreakStatePB);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *v20 = *v21;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v9);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecoverScrollPinchInternalDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C7BB0(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[8];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
      v11 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        v12 = v14;
        v13 = a3[9];
      }
      else
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
        v11 = *(_QWORD *)(v12 - 8);
        v13 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for RecoverScrollPinchInternalDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C7C88(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 16) = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollStatePB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedScrollByBreakStatePB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for RecoverScrollPinchInternalDataPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for MissedScrollStatePB?, (void (*)(uint64_t))type metadata accessor for MissedScrollStatePB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for MissedScrollByBreakStatePB?, (void (*)(uint64_t))type metadata accessor for MissedScrollByBreakStatePB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

Swift::Void __swiftcall GeometricPoseFilter.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  void *v2;
  HandsKitConfig *v3;
  unsigned int v4;
  NSString *v5;
  Swift::String v6;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  v3 = a1;

  v4 = -[HandsKitConfig FrameRate](v3, sel_FrameRate);
  *(double *)(v1 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__expectedTimeDeltaForOneFrame) = 1.5 / (double)v4;
  v5 = -[HandsKitConfig PoseFilter](v3, sel_PoseFilter);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v6._countAndFlagsBits == 0x6F72687473736170 && v6._object == (void *)0xEB00000000686775)
  {
    swift_bridgeObjectRelease();
    v8 = 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPassthrough) = v8 & 1;
  v9 = -[HandsKitConfig FilterInWorldCoordinates](v3, sel_FilterInWorldCoordinates);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__filterInWorldCoordinates) = v9;
  v14 = xmmword_23D9A6CC0;
  v15 = 0;
  v16 = 0;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPredictive))
    v10 = 0x6F74636964657250;
  else
    v10 = 0x7265746C6946;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPredictive))
    v11 = 0xE900000000000072;
  else
    v11 = 0xE600000000000000;
  v13[0] = 0xD000000000000017;
  v13[1] = 0x800000023D9D6FE0;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000063, 0x800000023D9D6E50, 33, (uint64_t *)&v14, (uint64_t)v13, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
}

uint64_t GeometricPoseFilter.run(forHand:withHandsKitData:_:)(uint64_t a1, const void *a2, float32x4_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[4];
  float32x4_t v66[36];

  v58 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v52 - v12;
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v52 - v16;
  v18 = type metadata accessor for HandDescriptor();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18, v20);
  v22 = (float32x4_t *)((char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  memcpy(v66, a2, 0x228uLL);
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPassthrough) != 1)
  {
    v57 = v9;
    v23 = v19;
    v24 = v18;
    v25 = v3 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevHand;
    swift_beginAccess();
    v56 = v25;
    v26 = v25;
    v27 = v24;
    v28 = v23;
    outlined init with copy of HandDescriptor?(v26, (uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v17, 1, v27) == 1)
    {
      outlined destroy of HandDescriptor?((uint64_t)v17);
      v29 = v58;
      v30 = (uint64_t)v13;
      v31 = *(void **)(v3 + 16);
      if (!v31)
      {
LABEL_14:
        GeometricPoseFilter.resetFilter(_:_:)((uint64_t)v66, v29);
        v55 = (float32x4_t)xmmword_23D9A6CC0;
        v62 = xmmword_23D9A6CC0;
        v63 = 0;
        v64 = 0;
        v35 = MEMORY[0x24BEE0D00];
        v61 = MEMORY[0x24BEE0D00];
        v59 = 0xD00000000000002DLL;
        v60 = 0x800000023D9D6EE0;
        v22 = (float32x4_t *)0x800000023D9D6E50;
        v36 = MEMORY[0x24BEE4AF8];
        specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000063, 0x800000023D9D6E50, 67, (uint64_t *)&v62, (uint64_t)&v59, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v59);
        v31 = *(void **)(v3 + 16);
        v65[0] = v36;
        if (!v31)
        {
          v62 = (__int128)v55;
          v63 = 0;
          v64 = 0;
          v61 = v35;
          v59 = 0xD00000000000001ALL;
          v60 = 0x800000023D9D6EC0;
          a3 = (float32x4_t *)MEMORY[0x24BEE4AF8];
          specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000063, 0x800000023D9D6E50, 73, (uint64_t *)&v62, (uint64_t)&v59, MEMORY[0x24BEE4AF8]);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v59);
          return (uint64_t)a3;
        }
LABEL_15:
        v37 = v31;
        Hands_trace_CBridge_0();
        if (*(_BYTE *)(v3 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__filterInWorldCoordinates) != 1)
        {
          swift_bridgeObjectRetain();
          goto LABEL_20;
        }
        if (a3[1].i64[0])
        {
          v22 = v66;
          v38 = a3[3];
          v52 = a3[2];
          v53 = v38;
          v39 = a3[5];
          v54 = a3[4];
          v55 = v39;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_18:
            v40 = v22[13];
            v41 = v22[14];
            v42 = v22[15];
            v43 = v22[16];
            v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, v52.f32[0]), v41, *(float32x2_t *)v52.f32, 1), v42, v52, 2), v43, v52, 3);
            v45 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, v53.f32[0]), v41, *(float32x2_t *)v53.f32, 1), v42, v53, 2), v43, v53, 3);
            v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, v54.f32[0]), v41, *(float32x2_t *)v54.f32, 1), v42, v54, 2), v43, v54, 3);
            v47 = v55;
            v48 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, v55.f32[0]), v41, *(float32x2_t *)v55.f32, 1), v42, v55, 2);
            a3[2] = v44;
            a3[3] = v45;
            a3[4] = v46;
            a3[5] = vmlaq_laneq_f32(v48, v43, v47, 3);
LABEL_20:
            closure #1 in GeometricPoseFilter.run(forHand:withHandsKitData:_:)((uint64_t)&a3[2], a3[1].i64[0], v37, v65, v3, v66);
            swift_bridgeObjectRelease();
            Hands_trace_CBridge_0();

            outlined init with copy of HandDescriptor(v58, v30);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
            v49 = (uint64_t)v57;
            outlined init with take of HandDescriptor?(v30, (uint64_t)v57);
            v50 = v56;
            swift_beginAccess();
            outlined assign with take of HandDescriptor?(v49, v50);
            swift_endAccess();
            return v65[0];
          }
        }
        else
        {
          __break(1u);
        }
        a3 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew()(a3);
        goto LABEL_18;
      }
LABEL_11:
      v65[0] = MEMORY[0x24BEE4AF8];
      goto LABEL_15;
    }
    outlined init with take of HandDescriptor((uint64_t)v17, (uint64_t)v22);
    v29 = v58;
    v30 = (uint64_t)v13;
    if (v22[9].i64[0] == *(_QWORD *)(v58 + 144))
    {
      if (v22[8].u8[8] == *(unsigned __int8 *)(v58 + 136))
      {
        v34 = *(float *)(v3 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__runningFrameRate);
        if (v34 == (float)objc_msgSend(*(id *)(v3 + 24), sel_FrameRate))
        {
          outlined destroy of HandDescriptor((uint64_t)v22);
          v31 = *(void **)(v3 + 16);
          if (!v31)
            goto LABEL_14;
          goto LABEL_11;
        }
        GeometricPoseFilter.resetFilter(_:_:)((uint64_t)a2, v29);
        v62 = xmmword_23D9A6CC0;
        v63 = 0;
        v64 = 0;
        v61 = MEMORY[0x24BEE0D00];
        v59 = 0xD000000000000037;
        v60 = 0x800000023D9D6FA0;
        v32 = MEMORY[0x24BEE4AF8];
        v33 = 60;
      }
      else
      {
        GeometricPoseFilter.resetFilter(_:_:)((uint64_t)a2, v58);
        v62 = xmmword_23D9A6CC0;
        v63 = 0;
        v64 = 0;
        v61 = MEMORY[0x24BEE0D00];
        v59 = 0xD000000000000043;
        v60 = 0x800000023D9D6F50;
        v32 = MEMORY[0x24BEE4AF8];
        v33 = 55;
      }
    }
    else
    {
      GeometricPoseFilter.resetFilter(_:_:)((uint64_t)a2, v58);
      v62 = xmmword_23D9A6CC0;
      v63 = 0;
      v64 = 0;
      v61 = MEMORY[0x24BEE0D00];
      v59 = 0xD000000000000034;
      v60 = 0x800000023D9D6F10;
      v32 = MEMORY[0x24BEE4AF8];
      v33 = 50;
    }
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000063, 0x800000023D9D6E50, v33, (uint64_t *)&v62, (uint64_t)&v59, v32);
    outlined destroy of HandDescriptor((uint64_t)v22);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v59);
    v31 = *(void **)(v3 + 16);
    if (!v31)
      goto LABEL_14;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  return (uint64_t)a3;
}

uint64_t closure #1 in GeometricPoseFilter.run(forHand:withHandsKitData:_:)(uint64_t result, int a2, id a3, uint64_t *a4, uint64_t a5, float32x4_t *a6)
{
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;

  if (!result)
  {
    __break(1u);
    return result;
  }
  result = (uint64_t)objc_msgSend(a3, sel_filter_, result);
  if (result)
  {
    *a4 = specialized _copyCollectionToContiguousArray<A>(_:)((char *)result, 27);
    result = swift_bridgeObjectRelease();
    if (*(_BYTE *)(a5 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__filterInWorldCoordinates) == 1)
    {
      v9 = *a4;
      if (*(_QWORD *)(*a4 + 16))
      {
        v14 = *(float32x4_t *)(v9 + 32);
        v15 = *(float32x4_t *)(v9 + 48);
        v16 = *(float32x4_t *)(v9 + 64);
        v17 = *(float32x4_t *)(v9 + 80);
        result = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v9;
        if ((result & 1) != 0)
        {
LABEL_6:
          v10 = a6[17];
          v11 = a6[18];
          v12 = a6[19];
          v13 = a6[20];
          *(float32x4_t *)(v9 + 32) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v14.f32[0]), v11, *(float32x2_t *)v14.f32, 1), v12, v14, 2), v13, v14, 3);
          *(float32x4_t *)(v9 + 48) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v15.f32[0]), v11, *(float32x2_t *)v15.f32, 1), v12, v15, 2), v13, v15, 3);
          *(float32x4_t *)(v9 + 64) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v16.f32[0]), v11, *(float32x2_t *)v16.f32, 1), v12, v16, 2), v13, v16, 3);
          *(float32x4_t *)(v9 + 80) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v17.f32[0]), v11, *(float32x2_t *)v17.f32, 1), v12, v17, 2), v13, v17, 3);
          *a4 = v9;
          return result;
        }
      }
      else
      {
        __break(1u);
      }
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
      v9 = result;
      goto LABEL_6;
    }
  }
  return result;
}

float GeometricPoseFilter.resetFilter(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  id v13;
  double v14;
  id v15;
  void *v16;
  float result;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hands_trace_CBridge_0();
  v8 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  v9 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  v10 = v2 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?(v7, v10);
  swift_endAccess();
  LOBYTE(v7) = *(_BYTE *)(a2 + 136);
  v11 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPredictive);
  v12 = (float)objc_msgSend(*(id *)(v2 + 24), sel_FrameRate);
  v13 = objc_allocWithZone((Class)GeometricJointsFilter);
  *(float *)&v14 = v12;
  v15 = objc_msgSend(v13, sel_initWithChirality_withIsPredictive_withFPS_, (v7 & 1) == 0, v11, v14);
  v16 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v15;

  Hands_trace_CBridge_0();
  result = (float)objc_msgSend(*(id *)(v2 + 24), sel_FrameRate);
  *(float *)(v2 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__runningFrameRate) = result;
  return result;
}

uint64_t GeometricPoseFilter.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of HandDescriptor?(v0 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevHand);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for GeometricPoseFilter()
{
  return type metadata accessor for GeometricPoseFilter();
}

uint64_t type metadata accessor for GeometricPoseFilter()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GeometricPoseFilter;
  if (!type metadata singleton initialization cache for GeometricPoseFilter)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for GeometricPoseFilter()
{
  unint64_t v0;

  type metadata accessor for HandDescriptor?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t destroy for SimilarityMatrixCollection()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SimilarityMatrixCollection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SimilarityMatrixCollection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for SimilarityMatrixCollection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimilarityMatrixCollection(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 153))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimilarityMatrixCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 153) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimilarityMatrixCollection()
{
  return &type metadata for SimilarityMatrixCollection;
}

uint64_t SimilarityMatrixCollection.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = type metadata accessor for Matrix2dPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v8 = (int *)type metadata accessor for SimilarityMatrixCollectionPB(0);
  v9 = a1 + v8[5];
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v10(v9, 1, 1, v3);
  v11 = a1 + v8[6];
  v10(v11, 1, 1, v3);
  v12 = a1 + v8[7];
  v10(v12, 1, 1, v3);
  v13 = a1 + v8[8];
  v10(v13, 1, 1, v3);
  v14 = a1 + v8[9];
  v10(v14, 1, 1, v3);
  MatrixDouble2d.toProtoBuf()(*(_QWORD *)v1, *(_BYTE *)(v1 + 24), (uint64_t)v7);
  outlined destroy of Matrix2dPB?(v9);
  outlined init with take of Matrix2dPB((uint64_t)v7, v9);
  v10(v9, 0, 1, v3);
  MatrixDouble2d.toProtoBuf()(*(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 56), (uint64_t)v7);
  outlined destroy of Matrix2dPB?(v11);
  outlined init with take of Matrix2dPB((uint64_t)v7, v11);
  v10(v11, 0, 1, v3);
  MatrixDouble2d.toProtoBuf()(*(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 88), (uint64_t)v7);
  outlined destroy of Matrix2dPB?(v12);
  outlined init with take of Matrix2dPB((uint64_t)v7, v12);
  v10(v12, 0, 1, v3);
  MatrixDouble2d.toProtoBuf()(*(_QWORD *)(v1 + 96), *(_BYTE *)(v1 + 120), (uint64_t)v7);
  outlined destroy of Matrix2dPB?(v13);
  outlined init with take of Matrix2dPB((uint64_t)v7, v13);
  v10(v13, 0, 1, v3);
  MatrixDouble2d.toProtoBuf()(*(_QWORD *)(v1 + 128), *(_BYTE *)(v1 + 152), (uint64_t)v7);
  outlined destroy of Matrix2dPB?(v14);
  outlined init with take of Matrix2dPB((uint64_t)v7, v14);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v10)(v14, 0, 1, v3);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SimilarityMatrixCollection(uint64_t a1, uint64_t a2)
{
  void *v2;
  Swift::Int v3;
  Swift::Int v4;
  char v5;
  void *v6;
  Swift::Int v7;
  char v9;
  Swift::Int v10;
  Swift::Int v11;
  void *v12;
  char to;
  Swift::Int v14;
  Swift::Int v15;
  void *v16;
  char v17;
  Swift::Int v18;
  Hands::MatrixDouble2d v19;
  Hands::MatrixDouble2d v20;
  Hands::MatrixDouble2d v21;
  Hands::MatrixDouble2d v22;

  v2 = *(void **)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_BYTE *)(a2 + 56);
  v6 = *(void **)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  v18 = *(_QWORD *)(a2 + 80);
  v17 = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(void **)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 112);
  to = *(_BYTE *)(a2 + 120);
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(void **)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 144);
  v9 = *(_BYTE *)(a2 + 152);
  if (!MatrixDouble2d.almostEqual(to:withThreshold:)(*(Hands::MatrixDouble2d *)a2, 2.22044605e-16))
    return 0;
  v19.data._rawValue = v2;
  v19.rowNum = v3;
  v19.colNum = v4;
  v19.isRowMajor = v5;
  if (!MatrixDouble2d.almostEqual(to:withThreshold:)(v19, 2.22044605e-16))
    return 0;
  v20.data._rawValue = v6;
  v20.rowNum = v7;
  v20.colNum = v18;
  v20.isRowMajor = v17;
  if (!MatrixDouble2d.almostEqual(to:withThreshold:)(v20, 2.22044605e-16))
    return 0;
  v21.rowNum = v15;
  v21.data._rawValue = v16;
  v21.colNum = v14;
  v21.isRowMajor = to;
  if (!MatrixDouble2d.almostEqual(to:withThreshold:)(v21, 2.22044605e-16))
    return 0;
  v22.rowNum = v11;
  v22.data._rawValue = v12;
  v22.colNum = v10;
  v22.isRowMajor = v9;
  return MatrixDouble2d.almostEqual(to:withThreshold:)(v22, 2.22044605e-16);
}

unint64_t lazy protocol witness table accessor for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB;
  if (!lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB)
  {
    v1 = type metadata accessor for SimilarityMatrixCollectionPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SimilarityMatrixCollectionPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DetectionSpecPB(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (_DWORD *)((char *)v7 + v13);
    v15 = (_DWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for CMTimeProtobuf(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[2] = v15[2];
      v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v19 = a3[7];
    v20 = (_DWORD *)((char *)v7 + v19);
    v21 = (_DWORD *)((char *)a2 + v19);
    v22 = type metadata accessor for DetectionSpecIntermediatePB(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[2] = v21[2];
      v12((char *)v20 + *(int *)(v22 + 28), (char *)v21 + *(int *)(v22 + 28), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return v7;
}

uint64_t type metadata accessor for DetectionSpecIntermediatePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DetectionSpecIntermediatePB);
}

uint64_t destroy for DetectionSpecPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for CMTimeProtobuf(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v11(v6 + *(int *)(v7 + 24), v5);
  v8 = a1 + a2[7];
  v9 = type metadata accessor for DetectionSpecIntermediatePB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 28), v5);
  return result;
}

_QWORD *initializeWithCopy for DetectionSpecPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = (_DWORD *)((char *)a1 + v17);
  v19 = (_DWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for DetectionSpecIntermediatePB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[2] = v19[2];
    v10((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

_QWORD *assignWithCopy for DetectionSpecPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD *)(v9 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v30 + 24);
  v29(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for CMTimeProtobuf(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for CMTimeProtobuf);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v29(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for DetectionSpecIntermediatePB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      *((_DWORD *)v20 + 1) = *((_DWORD *)v21 + 1);
      *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
      v29(&v20[*(int *)(v22 + 28)], &v21[*(int *)(v22 + 28)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for DetectionSpecIntermediatePB);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *((_DWORD *)v20 + 1) = *((_DWORD *)v21 + 1);
  *((_DWORD *)v20 + 2) = *((_DWORD *)v21 + 2);
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(&v20[*(int *)(v22 + 28)], &v21[*(int *)(v22 + 28)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

_QWORD *initializeWithTake for DetectionSpecPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = (_DWORD *)((char *)a1 + v17);
  v19 = (_DWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for DetectionSpecIntermediatePB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[2] = v19[2];
    v10((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

_QWORD *assignWithTake for DetectionSpecPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_DWORD *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD *)(v9 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v30 + 40);
  v29(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for CMTimeProtobuf(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for CMTimeProtobuf);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v29(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[7];
  v20 = (_DWORD *)((char *)a1 + v19);
  v21 = (_DWORD *)((char *)a2 + v19);
  v22 = type metadata accessor for DetectionSpecIntermediatePB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      *(_QWORD *)(v20 + 1) = *(_QWORD *)(v21 + 1);
      v29((char *)v20 + *(int *)(v22 + 28), (char *)v21 + *(int *)(v22 + 28), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for DetectionSpecIntermediatePB);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[2] = v21[2];
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))((char *)v20 + *(int *)(v22 + 28), (char *)v21 + *(int *)(v22 + 28), v9);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionSpecPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8C9E40(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DetectionSpecPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D8C9F18(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for DetectionSpecPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DetectionSpecPB);
}

void type metadata completion function for DetectionSpecPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for DetectionSpecIntermediatePB?, (void (*)(uint64_t))type metadata accessor for DetectionSpecIntermediatePB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_DWORD *assignWithCopy for DetectionSpecIntermediatePB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for DetectionSpecIntermediatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionSpecIntermediatePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for DetectionSpecIntermediatePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for DetectionSpecIntermediatePB()
{
  return type metadata completion function for DetectionSpecIntermediatePB();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DetectionSpecItemPB(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = a3[7];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_QWORD *)(a1 + 32) = a2[4];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = a3[8];
    v13 = (_OWORD *)((char *)v4 + v12);
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      v11((uint64_t)v13 + *(int *)(v15 + 32), (uint64_t)v14 + *(int *)(v15 + 32), v10);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = a3[9];
    v20 = (char *)v4 + v19;
    v21 = (uint64_t)a2 + v19;
    *(_DWORD *)v20 = *(_DWORD *)v21;
    v20[4] = *(_BYTE *)(v21 + 4);
  }
  return v4;
}

uint64_t type metadata accessor for DetectionSpecItemPB.CropRegion(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DetectionSpecItemPB.CropRegion);
}

uint64_t destroy for DetectionSpecItemPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 32), v5);
  return result;
}

uint64_t initializeWithCopy for DetectionSpecItemPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[7];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[8];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  return a1;
}

uint64_t assignWithCopy for DetectionSpecItemPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_DWORD *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v27;
  uint64_t v28;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v27 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 24);
  v12(v9, v10, v11);
  v28 = a3;
  v13 = *(int *)(a3 + 32);
  v14 = (_DWORD *)(a1 + v13);
  v15 = (_DWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      *v14 = *v15;
      v14[1] = v15[1];
      v14[2] = v15[2];
      v14[3] = v15[3];
      v12((uint64_t)v14 + *(int *)(v16 + 32), (uint64_t)v15 + *(int *)(v16 + 32), v11);
      goto LABEL_7;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for DetectionSpecItemPB.CropRegion);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *v14 = *v15;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)v14 + *(int *)(v16 + 32), (char *)v15 + *(int *)(v16 + 32), v11);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  v22 = *(int *)(v28 + 36);
  v23 = a1 + v22;
  v24 = (int *)((char *)a2 + v22);
  v25 = *v24;
  *(_BYTE *)(v23 + 4) = *((_BYTE *)v24 + 4);
  *(_DWORD *)v23 = v25;
  return a1;
}

uint64_t initializeWithTake for DetectionSpecItemPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[7];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  return a1;
}

uint64_t assignWithTake for DetectionSpecItemPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_OWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v24 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v10(v7, v8, v9);
  v25 = a3;
  v11 = *(int *)(a3 + 32);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v10((uint64_t)v12 + *(int *)(v14 + 32), (uint64_t)v13 + *(int *)(v14 + 32), v9);
      goto LABEL_7;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for DetectionSpecItemPB.CropRegion);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *v12 = *v13;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = *(int *)(v25 + 36);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionSpecItemPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8CAA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DetectionSpecItemPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8CAB14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for DetectionSpecItemPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DetectionSpecItemPB);
}

void type metadata completion function for DetectionSpecItemPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for DetectionSpecItemPB.CropRegion?, (void (*)(uint64_t))type metadata accessor for DetectionSpecItemPB.CropRegion);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DetectionSpecItemPB.CropRegion(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 32);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_OWORD *initializeWithCopy for DetectionSpecItemPB.CropRegion(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 32);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for DetectionSpecItemPB.CropRegion(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = *(int *)(a3 + 32);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *initializeWithTake for DetectionSpecItemPB.CropRegion(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 32);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for DetectionSpecItemPB.CropRegion(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 32);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionSpecItemPB.CropRegion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8CAE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DetectionSpecItemPB.CropRegion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8CAEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 32);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for DetectionSpecItemPB.CropRegion()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SchedulingDataPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v13;
  char *v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    v6 = a2[4];
    a1[3] = a2[3];
    a1[4] = v6;
    v7 = a2[6];
    a1[5] = a2[5];
    a1[6] = v7;
    v8 = *(int *)(a3 + 52);
    v13 = (char *)a2 + v8;
    v14 = (char *)a1 + v8;
    a1[7] = a2[7];
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v14, v13, v9);
  }
  return v3;
}

uint64_t destroy for SchedulingDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 52);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for SchedulingDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  char *v11;
  char *v12;

  *a1 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  v7 = *(int *)(a3 + 52);
  v11 = (char *)a2 + v7;
  v12 = (char *)a1 + v7;
  a1[7] = a2[7];
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v12, v11, v8);
  return a1;
}

uint64_t assignWithCopy for SchedulingDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 52);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for SchedulingDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 52);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for SchedulingDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 52);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchedulingDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8CB46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SchedulingDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8CB4F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SchedulingDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for SchedulingDataPB);
}

uint64_t type metadata completion function for SchedulingDataPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t DetectionSpecItemPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type DetectionType and conformance DetectionType();
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
LABEL_5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_6;
        case 4:
          v4 = v3;
          closure #3 in DetectionSpecItemPB.decodeMessage<A>(decoder:)();
          goto LABEL_6;
        case 6:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_6;
        case 8:
          type metadata accessor for DetectionSpecItemPB(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in DetectionSpecItemPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DetectionSpecItemPB(0);
  type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DetectionSpecItemPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = v3;
  if (!*v5
    || (lazy protocol witness table accessor for type DetectionType and conformance DetectionType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    if (!v5[2]
      || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v4))
    {
      result = closure #1 in DetectionSpecItemPB.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
      if (!v4)
      {
        if (*(_QWORD *)(v5[4] + 16))
          dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
        closure #2 in DetectionSpecItemPB.traverse<A>(visitor:)((uint64_t)v5);
        type metadata accessor for DetectionSpecItemPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in DetectionSpecItemPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DetectionSpecItemPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for DetectionSpecItemPB.CropRegion);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for DetectionSpecItemPB.CropRegion);
}

uint64_t closure #2 in DetectionSpecItemPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DetectionSpecItemPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance DetectionSpecItemPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a2 + *(int *)(a1 + 36);
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DetectionSpecItemPB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DetectionSpecItemPB()
{
  return DetectionSpecItemPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DetectionSpecItemPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DetectionSpecItemPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DetectionSpecItemPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionSpecItemPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionSpecItemPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DetectionSpecItemPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionSpecItemPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
  return Message.hash(into:)();
}

uint64_t DetectionSpecItemPB.ImageSize.traverse<A>(visitor:)()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!v0[2] || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for DetectionSpecItemPB.ImageSize(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DetectionSpecItemPB.ImageSize()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DetectionSpecItemPB.ImageSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DetectionSpecItemPB.ImageSize.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0C8]);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DetectionSpecItemPB.ImageSize()
{
  return DetectionSpecItemPB.ImageSize.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DetectionSpecItemPB.ImageSize()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.ImageSize and conformance DetectionSpecItemPB.ImageSize, type metadata accessor for DetectionSpecItemPB.ImageSize, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.ImageSize);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionSpecItemPB.ImageSize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionSpecItemPB.ImageSize._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DetectionSpecItemPB.ImageSize()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.ImageSize and conformance DetectionSpecItemPB.ImageSize, type metadata accessor for DetectionSpecItemPB.ImageSize, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.ImageSize);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionSpecItemPB.ImageSize()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.ImageSize and conformance DetectionSpecItemPB.ImageSize, type metadata accessor for DetectionSpecItemPB.ImageSize, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.ImageSize);
  return Message.hash(into:)();
}

uint64_t DetectionSpecItemPB.CropRegion.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DetectionSpecItemPB.CropRegion.traverse<A>(visitor:)()
{
  float *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (v0[1] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      if (v0[2] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        if (v0[3] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for DetectionSpecItemPB.CropRegion(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance DetectionSpecItemPB.CropRegion@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DetectionSpecItemPB.CropRegion()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DetectionSpecItemPB.CropRegion()
{
  return DetectionSpecItemPB.CropRegion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DetectionSpecItemPB.CropRegion()
{
  return DetectionSpecItemPB.CropRegion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DetectionSpecItemPB.CropRegion()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionSpecItemPB.CropRegion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionSpecItemPB.CropRegion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DetectionSpecItemPB.CropRegion()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionSpecItemPB.CropRegion()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
  return Message.hash(into:)();
}

uint64_t DetectionSpecItemPB.ImageSize.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        a4(v4, a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DetectionSpecIntermediatePB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(float *)v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4) || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 8)
        || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for DetectionSpecIntermediatePB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance DetectionSpecIntermediatePB@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DetectionSpecIntermediatePB()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DetectionSpecIntermediatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DetectionSpecItemPB.ImageSize.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0B8]);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DetectionSpecIntermediatePB()
{
  return DetectionSpecIntermediatePB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DetectionSpecIntermediatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionSpecIntermediatePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionSpecIntermediatePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DetectionSpecIntermediatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionSpecIntermediatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
  return Message.hash(into:)();
}

uint64_t DetectionSpecPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for DetectionSpecItemPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        closure #1 in DetectionSpecPB.decodeMessage<A>(decoder:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    closure #3 in DetectionSpecPB.decodeMessage<A>(decoder:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t closure #1 in DetectionSpecPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DetectionSpecPB(0);
  type metadata accessor for CMTimeProtobuf(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in DetectionSpecPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DetectionSpecPB(0);
  type metadata accessor for DetectionSpecIntermediatePB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DetectionSpecPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in DetectionSpecPB.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for DetectionSpecItemPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    closure #2 in DetectionSpecPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    type metadata accessor for DetectionSpecPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DetectionSpecPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DetectionSpecPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t closure #2 in DetectionSpecPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DetectionSpecIntermediatePB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DetectionSpecPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for DetectionSpecIntermediatePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for DetectionSpecIntermediatePB);
}

uint64_t protocol witness for Message.init() in conformance DetectionSpecPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + *(int *)(a1 + 28);
  v7 = type metadata accessor for DetectionSpecIntermediatePB(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance DetectionSpecPB()
{
  return 0x6F69746365746544;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DetectionSpecPB()
{
  return DetectionSpecPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DetectionSpecPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DetectionSpecPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DetectionSpecPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionSpecPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionSpecPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DetectionSpecPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionSpecPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
  return Message.hash(into:)();
}

uint64_t SchedulingDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 7:
        case 8:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_8;
        case 9:
        case 10:
          type metadata accessor for DetectionSpecPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t SchedulingDataPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4) || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
        || (type metadata accessor for DetectionSpecPB(0),
            lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
          || (type metadata accessor for DetectionSpecPB(0),
              lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16)
            || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
              || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
            {
              if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16)
                || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
              {
                if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16)
                  || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
                {
                  if (!*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16)
                    || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
                  {
                    type metadata accessor for SchedulingDataPB(0);
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance SchedulingDataPB@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  v1 = MEMORY[0x24BEE4AF8];
  a1[1] = MEMORY[0x24BEE4AF8];
  a1[2] = v1;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = v1;
  a1[6] = v1;
  a1[7] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance SchedulingDataPB()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance SchedulingDataPB()
{
  return SchedulingDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance SchedulingDataPB()
{
  return SchedulingDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance SchedulingDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance SchedulingDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static SchedulingDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SchedulingDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SchedulingDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in SchedulingDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
}

uint64_t base witness table accessor for Message in SchedulingDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
}

uint64_t base witness table accessor for Hashable in SchedulingDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
}

uint64_t base witness table accessor for Equatable in DetectionSpecPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
}

uint64_t base witness table accessor for Message in DetectionSpecPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
}

uint64_t base witness table accessor for Hashable in DetectionSpecPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
}

uint64_t base witness table accessor for Equatable in DetectionSpecIntermediatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
}

uint64_t base witness table accessor for Message in DetectionSpecIntermediatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
}

uint64_t base witness table accessor for Hashable in DetectionSpecIntermediatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DetectionSpecIntermediatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecIntermediatePB and conformance DetectionSpecIntermediatePB, type metadata accessor for DetectionSpecIntermediatePB, (uint64_t)&protocol conformance descriptor for DetectionSpecIntermediatePB);
}

uint64_t base witness table accessor for Equatable in DetectionSpecItemPB.CropRegion()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
}

uint64_t base witness table accessor for Message in DetectionSpecItemPB.CropRegion()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
}

uint64_t base witness table accessor for Hashable in DetectionSpecItemPB.CropRegion()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DetectionSpecItemPB.CropRegion()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.CropRegion and conformance DetectionSpecItemPB.CropRegion, type metadata accessor for DetectionSpecItemPB.CropRegion, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.CropRegion);
}

uint64_t base witness table accessor for Equatable in DetectionSpecItemPB.ImageSize()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.ImageSize and conformance DetectionSpecItemPB.ImageSize, type metadata accessor for DetectionSpecItemPB.ImageSize, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.ImageSize);
}

uint64_t type metadata accessor for DetectionSpecItemPB.ImageSize(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DetectionSpecItemPB.ImageSize);
}

uint64_t base witness table accessor for Message in DetectionSpecItemPB.ImageSize()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.ImageSize and conformance DetectionSpecItemPB.ImageSize, type metadata accessor for DetectionSpecItemPB.ImageSize, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.ImageSize);
}

uint64_t base witness table accessor for Hashable in DetectionSpecItemPB.ImageSize()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.ImageSize and conformance DetectionSpecItemPB.ImageSize, type metadata accessor for DetectionSpecItemPB.ImageSize, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.ImageSize);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DetectionSpecItemPB.ImageSize()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB.ImageSize and conformance DetectionSpecItemPB.ImageSize, type metadata accessor for DetectionSpecItemPB.ImageSize, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB.ImageSize);
}

uint64_t base witness table accessor for Equatable in DetectionSpecItemPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
}

uint64_t base witness table accessor for Message in DetectionSpecItemPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
}

uint64_t base witness table accessor for Hashable in DetectionSpecItemPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DetectionSpecPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DetectionSpecItemPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in SchedulingDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
}

uint64_t specialized static DetectionSpecIntermediatePB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*(float *)a1 == *(float *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    v13 = type metadata accessor for DetectionSpecIntermediatePB(0);
    v14 = a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 28), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static DetectionSpecItemPB.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  float *v36;
  float *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  char v42;
  float *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  float *v62;

  v4 = type metadata accessor for UnknownStorage();
  v61 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v59 = (char *)&v55 - v9;
  v10 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v62 = (float *)((char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DetectionSpecItemPB.CropRegion?, DetectionSpecItemPB.CropRegion?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  MEMORY[0x24BDAC7A8](v18, v19);
  MEMORY[0x24BDAC7A8](v20, v21);
  v23 = (char *)&v55 - v22;
  MEMORY[0x24BDAC7A8](v24, v25);
  v28 = (char *)&v55 - v27;
  v29 = *(_QWORD *)a1;
  v30 = *a2;
  v31 = 3;
  if (!*(_QWORD *)a1)
    v31 = 0;
  if (*(_BYTE *)(a1 + 8))
    v29 = v31;
  if (*((_BYTE *)a2 + 8) == 1)
  {
    if (v30)
    {
      if (v29 != 3)
        goto LABEL_30;
    }
    else if (v29)
    {
LABEL_30:
      v52 = 0;
      return v52 & 1;
    }
  }
  else if (v29 != v30)
  {
    goto LABEL_30;
  }
  v32 = a2[2];
  if (*((_BYTE *)a2 + 24) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 16) != v32)
    goto LABEL_30;
  v58 = (float *)v26;
  v56 = v4;
  v33 = type metadata accessor for DetectionSpecItemPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v33 + 32), (uint64_t)v28, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v57 = v33;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a2 + *(int *)(v33 + 32), (uint64_t)v23, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v34 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v28, (uint64_t)v17, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v23, v34, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v35((uint64_t)v17, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v23, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
    if (v35(v34, 1, v10) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  v36 = v58;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v58, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  if (v35(v34, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v23, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
    outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for DetectionSpecItemPB.CropRegion);
LABEL_20:
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for (DetectionSpecItemPB.CropRegion?, DetectionSpecItemPB.CropRegion?));
    goto LABEL_30;
  }
  v37 = v62;
  outlined init with take of Matrix2dPB(v34, (uint64_t)v62, type metadata accessor for DetectionSpecItemPB.CropRegion);
  v38 = specialized static DetectionSpecItemPB.CropRegion.== infix(_:_:)(v36, v37);
  outlined destroy of Matrix3x3PB((uint64_t)v37, type metadata accessor for DetectionSpecItemPB.CropRegion);
  outlined destroy of Coordinate3DPB?((uint64_t)v23, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for DetectionSpecItemPB.CropRegion);
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  if ((v38 & 1) == 0)
    goto LABEL_30;
LABEL_22:
  if (!specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 32), (_QWORD *)a2[4]))
    goto LABEL_30;
  v39 = v57;
  v40 = *(int *)(v57 + 36);
  v41 = (float *)(a1 + v40);
  v42 = *(_BYTE *)(a1 + v40 + 4);
  v43 = (float *)((char *)a2 + v40);
  v44 = *((unsigned __int8 *)a2 + v40 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_30;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_30;
  }
  v45 = a1 + *(int *)(v57 + 28);
  v46 = v61;
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v48 = v59;
  v49 = v56;
  v47(v59, v45, v56);
  v50 = (uint64_t)a2 + *(int *)(v39 + 28);
  v51 = v60;
  v47(v60, v50, v49);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  v53 = *(void (**)(char *, uint64_t))(v46 + 8);
  v53(v51, v49);
  v53(v48, v49);
  return v52 & 1;
}

uint64_t specialized static DetectionSpecItemPB.ImageSize.== infix(_:_:)(_DWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *(_DWORD *)a2 && a1[1] == *((_DWORD *)a2 + 1) && a1[2] == *((_DWORD *)a2 + 2))
  {
    v13 = type metadata accessor for DetectionSpecItemPB.ImageSize(0);
    v14 = (char *)a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, &a2[*(int *)(v13 + 28)], v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static DetectionSpecItemPB.CropRegion.== infix(_:_:)(float *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3])
  {
    v13 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
    v14 = (char *)a1 + *(int *)(v13 + 32);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 32), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static SchedulingDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 24), *(_QWORD **)(a2 + 24))
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 32), *(_QWORD **)(a2 + 32))
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 40), *(_QWORD **)(a2 + 40))
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48))
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 56), *(_QWORD **)(a2 + 56)))
  {
    v13 = type metadata accessor for SchedulingDataPB(0);
    v14 = a1 + *(int *)(v13 + 52);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 52), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static DetectionSpecPB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;

  v84 = a1;
  v85 = a2;
  v76 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76, v2);
  v73 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v72 = (char *)&v70 - v6;
  v81 = type metadata accessor for DetectionSpecIntermediatePB(0);
  v78 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81, v7);
  v71 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DetectionSpecIntermediatePB?, DetectionSpecIntermediatePB?));
  MEMORY[0x24BDAC7A8](v77, v9);
  v82 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v75 = (uint64_t)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v79 = (uint64_t)&v70 - v16;
  MEMORY[0x24BDAC7A8](v17, v18);
  v80 = (uint64_t)&v70 - v19;
  v20 = type metadata accessor for CMTimeProtobuf(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20, v22);
  v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (char *)&v70 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v36 = (char *)&v70 - v35;
  MEMORY[0x24BDAC7A8](v37, v38);
  v40 = (char *)&v70 - v39;
  v41 = type metadata accessor for DetectionSpecPB(0);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v84 + *(int *)(v41 + 24), (uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v83 = v41;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v85 + *(int *)(v41 + 24), (uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v42 = (uint64_t)&v28[*(int *)(v25 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v40, (uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v36, v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v43((uint64_t)v28, 1, v20) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v43(v42, 1, v20) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v43(v42, 1, v20) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for CMTimeProtobuf);
LABEL_10:
    v53 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v54 = (uint64_t)v28;
LABEL_19:
    outlined destroy of Coordinate3DPB?(v54, v53);
    goto LABEL_20;
  }
  outlined init with take of Matrix2dPB(v42, (uint64_t)v24, type metadata accessor for CMTimeProtobuf);
  if (*(_QWORD *)v32 != *(_QWORD *)v24 || *((_DWORD *)v32 + 2) != *((_DWORD *)v24 + 2))
  {
    outlined destroy of Matrix3x3PB((uint64_t)v24, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for CMTimeProtobuf);
    v54 = (uint64_t)v28;
    v53 = &demangling cache variable for type metadata for CMTimeProtobuf?;
    goto LABEL_19;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v24, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((v55 & 1) == 0)
    goto LABEL_20;
LABEL_4:
  v45 = v84;
  v44 = v85;
  if ((specialized static Array<A>.== infix(_:_:)(*v84, *v85) & 1) != 0)
  {
    v46 = v83;
    v47 = v80;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v45 + *(int *)(v83 + 28), v80, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    v48 = v79;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v44 + *(int *)(v46 + 28), v79, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    v49 = v82;
    v50 = v82 + *(int *)(v77 + 48);
    outlined init with copy of (Int32, Matrix2dPB)(v47, v82, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    outlined init with copy of (Int32, Matrix2dPB)(v48, v50, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
    v52 = v81;
    if (v51(v49, 1, v81) == 1)
    {
      outlined destroy of Coordinate3DPB?(v48, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
      outlined destroy of Coordinate3DPB?(v47, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
      if (v51(v50, 1, v52) == 1)
      {
        outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
LABEL_23:
        v61 = v83;
        v62 = (char *)v45 + *(int *)(v83 + 20);
        v63 = v74;
        v64 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
        v65 = v72;
        v66 = v76;
        v64(v72, v62, v76);
        v67 = (char *)v44 + *(int *)(v61 + 20);
        v68 = v73;
        v64(v73, v67, v66);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        v69 = *(void (**)(char *, uint64_t))(v63 + 8);
        v69(v68, v66);
        v69(v65, v66);
        return v57 & 1;
      }
      goto LABEL_18;
    }
    v56 = v75;
    outlined init with copy of (Int32, Matrix2dPB)(v49, v75, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    if (v51(v50, 1, v52) == 1)
    {
      outlined destroy of Coordinate3DPB?(v48, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
      outlined destroy of Coordinate3DPB?(v47, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
      outlined destroy of Matrix3x3PB(v56, type metadata accessor for DetectionSpecIntermediatePB);
LABEL_18:
      v53 = &demangling cache variable for type metadata for (DetectionSpecIntermediatePB?, DetectionSpecIntermediatePB?);
      v54 = v49;
      goto LABEL_19;
    }
    v59 = v71;
    outlined init with take of Matrix2dPB(v50, v71, type metadata accessor for DetectionSpecIntermediatePB);
    v60 = specialized static DetectionSpecIntermediatePB.== infix(_:_:)(v56, v59);
    outlined destroy of Matrix3x3PB(v59, type metadata accessor for DetectionSpecIntermediatePB);
    outlined destroy of Coordinate3DPB?(v48, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    outlined destroy of Coordinate3DPB?(v47, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    outlined destroy of Matrix3x3PB(v56, type metadata accessor for DetectionSpecIntermediatePB);
    outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
    if ((v60 & 1) != 0)
      goto LABEL_23;
  }
LABEL_20:
  v57 = 0;
  return v57 & 1;
}

_DWORD *assignWithCopy for DetectionSpecItemPB.ImageSize(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for DetectionSpecItemPB.ImageSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionSpecItemPB.ImageSize()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for DetectionSpecItemPB.ImageSize()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t PoseImageCrop.init(protoBuf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  _QWORD *v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char v84;
  char v85;
  char v86;
  simd_float3x3_optional v87;
  simd_float3x3_optional v88;
  _OWORD v89[3];
  char v90;
  _OWORD v91[3];
  char v92;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v73 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  *(_QWORD *)&v81 = (char *)&v69 - v10;
  MEMORY[0x24BDAC7A8](v9, v11);
  *(_QWORD *)&v75 = (char *)&v69 - v12;
  v79 = type metadata accessor for Coordinate3DPB(0);
  v74 = *(_QWORD *)(v79 - 8);
  v14 = MEMORY[0x24BDAC7A8](v79, v13);
  v72 = (_QWORD *)((char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x24BDAC7A8](v14, v16);
  *(_QWORD *)&v80 = (char *)&v69 - v18;
  MEMORY[0x24BDAC7A8](v17, v19);
  *(_QWORD *)&v82 = (char *)&v69 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  v23 = MEMORY[0x24BDAC7A8](v21, v22);
  *(_QWORD *)&v83 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v25);
  v27 = (char *)&v69 - v26;
  v28 = type metadata accessor for Matrix2dPB(0);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = MEMORY[0x24BDAC7A8](v28, v30);
  v33 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31, v34);
  v36 = (char *)&v69 - v35;
  v78 = *(_QWORD *)a1;
  v86 = *(_BYTE *)(a1 + 8);
  v37 = *(_QWORD *)(a1 + 16);
  v38 = *(_QWORD *)(a1 + 24);
  outlined copy of Data._Representation(v37, v38);
  specialized Data.init<A>(_:)(v37, v38);
  v76 = v40;
  v77 = v39;
  v41 = *(_QWORD *)(a1 + 32);
  v42 = (int *)type metadata accessor for PoseImageCropPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + v42[11], (uint64_t)v27, &demangling cache variable for type metadata for Matrix2dPB?);
  v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v43(v27, 1, v28) == 1)
  {
    v44 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)v36 = MEMORY[0x24BEE4AF8];
    v36[8] = 0;
    *((_QWORD *)v36 + 2) = v44;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v27, &demangling cache variable for type metadata for Matrix2dPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v27, (uint64_t)v36, type metadata accessor for Matrix2dPB);
  }
  specialized Matrix2d.init(protoBuf:)(v36);
  Matrix2d.toSimd3x3Float()(&v87);
  swift_bridgeObjectRelease();
  result = outlined init with take of simd_float3x3?((uint64_t)&v87, (uint64_t)v91);
  v46 = v83;
  if ((v92 & 1) != 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v70 = v91[1];
  v71 = v91[0];
  v69 = v91[2];
  outlined init with copy of (Int32, Matrix2dPB)(a1 + v42[12], v83, &demangling cache variable for type metadata for Matrix2dPB?);
  v47 = v43((char *)v46, 1, v28);
  v48 = v82;
  if (v47 == 1)
  {
    v49 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)v33 = MEMORY[0x24BEE4AF8];
    v33[8] = 0;
    *((_QWORD *)v33 + 2) = v49;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for Matrix2dPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v46, (uint64_t)v33, type metadata accessor for Matrix2dPB);
  }
  v50 = v81;
  v51 = v80;
  specialized Matrix2d.init(protoBuf:)(v33);
  Matrix2d.toSimd3x3Float()(&v88);
  swift_bridgeObjectRelease();
  result = outlined init with take of simd_float3x3?((uint64_t)&v88, (uint64_t)v89);
  if ((v90 & 1) != 0)
    goto LABEL_20;
  v83 = v89[0];
  v80 = v89[2];
  v81 = v89[1];
  v52 = a1 + v42[13];
  v53 = v75;
  outlined init with copy of (Int32, Matrix2dPB)(v52, v75, &demangling cache variable for type metadata for Coordinate3DPB?);
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  v55 = v79;
  if (v54(v53, 1, v79) == 1)
  {
    *(_QWORD *)v48 = 0;
    *(_DWORD *)(v48 + 8) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v53, v48, type metadata accessor for Coordinate3DPB);
  }
  v57 = (uint64_t)v73;
  LODWORD(v56) = *(_DWORD *)v48;
  v75 = v56;
  outlined destroy of Matrix3x3PB(v48, type metadata accessor for Coordinate3DPB);
  outlined init with copy of (Int32, Matrix2dPB)(v52, v50, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v54(v50, 1, v55) == 1)
  {
    *(_QWORD *)v51 = 0;
    *(_DWORD *)(v51 + 8) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v50, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v50, v51, type metadata accessor for Coordinate3DPB);
  }
  LODWORD(v58) = *(_DWORD *)(v51 + 4);
  v82 = v58;
  outlined destroy of Matrix3x3PB(v51, type metadata accessor for Coordinate3DPB);
  outlined init with copy of (Int32, Matrix2dPB)(v52, v57, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v54(v57, 1, v55) == 1)
  {
    v59 = v72;
    *v72 = 0;
    *((_DWORD *)v59 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    v59 = v72;
    outlined init with take of Matrix2dPB(v57, (uint64_t)v72, type metadata accessor for Coordinate3DPB);
  }
  *(_QWORD *)&v60 = __PAIR64__(v82, v75);
  *((_QWORD *)&v60 + 1) = *((unsigned int *)v59 + 2);
  v82 = v60;
  outlined destroy of Matrix3x3PB((uint64_t)v59, type metadata accessor for Coordinate3DPB);
  v61 = *(_BYTE *)(a1 + 40);
  v62 = *(_QWORD *)(a1 + 48);
  v63 = *(_BYTE *)(a1 + 56);
  result = outlined destroy of Matrix3x3PB(a1, type metadata accessor for PoseImageCropPB);
  v64 = v86;
  v85 = v86;
  v84 = v63;
  *(_QWORD *)a2 = v78;
  *(_BYTE *)(a2 + 8) = v64;
  *(_QWORD *)(a2 + 16) = v62;
  *(_BYTE *)(a2 + 24) = v63;
  v65 = v70;
  *(_OWORD *)(a2 + 32) = v71;
  *(_OWORD *)(a2 + 48) = v65;
  v66 = v83;
  *(_OWORD *)(a2 + 64) = v69;
  *(_OWORD *)(a2 + 80) = v66;
  v67 = v80;
  *(_OWORD *)(a2 + 96) = v81;
  *(_OWORD *)(a2 + 112) = v67;
  *(_OWORD *)(a2 + 128) = v82;
  v68 = v76;
  *(_QWORD *)(a2 + 144) = v77;
  *(_QWORD *)(a2 + 152) = v68;
  *(_QWORD *)(a2 + 160) = v41;
  *(_BYTE *)(a2 + 168) = v61;
  return result;
}

uint64_t PoseImageCrop.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  _DWORD *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  _OWORD v88[3];
  _OWORD v89[3];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v84 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v80 = (uint64_t)&v69 - v8;
  MEMORY[0x24BDAC7A8](v9, v10);
  v77 = (char *)&v69 - v11;
  v12 = type metadata accessor for Coordinate3DPB(0);
  v13 = *(_QWORD *)(v12 - 8);
  v85 = v12;
  v86 = v13;
  MEMORY[0x24BDAC7A8](v12, v14);
  v83 = (uint64_t *)((char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16, v17);
  v79 = (uint64_t *)((char *)&v69 - v18);
  MEMORY[0x24BDAC7A8](v19, v20);
  v78 = (uint64_t *)((char *)&v69 - v21);
  MEMORY[0x24BDAC7A8](v22, v23);
  v76 = (uint64_t *)((char *)&v69 - v24);
  v25 = type metadata accessor for Matrix2dPB(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = v25;
  MEMORY[0x24BDAC7A8](v25, v28);
  v74 = (uint64_t)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *((_OWORD *)v1 + 3);
  v89[0] = *((_OWORD *)v1 + 2);
  v89[1] = v30;
  v31 = *((_OWORD *)v1 + 5);
  v89[2] = *((_OWORD *)v1 + 4);
  v32 = *((_OWORD *)v1 + 6);
  v33 = *((_OWORD *)v1 + 7);
  v88[0] = v31;
  v88[1] = v32;
  v34 = *v1;
  v71 = *((unsigned __int8 *)v1 + 8);
  v81 = v1[2];
  v82 = *((unsigned __int8 *)v1 + 24);
  v88[2] = v33;
  v87 = *((_OWORD *)v1 + 8);
  v35 = v1[18];
  v36 = v1[19];
  v70 = v35;
  v75 = *((unsigned __int8 *)v1 + 168);
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  v37 = (int *)type metadata accessor for PoseImageCropPB(0);
  UnknownStorage.init()();
  v38 = a1 + v37[11];
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if (v36 >> 60 == 15)
    v40 = 0;
  else
    v40 = v35;
  if (v36 >> 60 == 15)
    v41 = 0xC000000000000000;
  else
    v41 = v36;
  v42 = v1[20];
  v43 = a1 + v37[11];
  v73 = v27;
  v44 = v39;
  v72 = v39;
  v39(v43, 1, 1, v27);
  v45 = a1 + v37[12];
  v44(v45, 1, 1, v27);
  v46 = a1 + v37[13];
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56);
  v47(v46, 1, 1, v85);
  *(_QWORD *)a1 = v34;
  *(_BYTE *)(a1 + 8) = v71;
  *(_QWORD *)(a1 + 16) = v40;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) = v42;
  v48 = specialized Matrix2d.init(simd3x3float:)((uint64_t)v89);
  v50 = v49;
  outlined copy of Data?(v70, v36);
  v51 = v74;
  Matrix2d.toProtoBuf()(v48, v50 & 1, v74);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v38, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB(v51, v38, type metadata accessor for Matrix2dPB);
  v52 = v38;
  v53 = v47;
  v54 = v73;
  v55 = v72;
  v72(v52, 0, 1, v73);
  v56 = specialized Matrix2d.init(simd3x3float:)((uint64_t)v88);
  Matrix2d.toProtoBuf()(v56, v57 & 1, v51);
  v58 = v85;
  swift_bridgeObjectRelease();
  v59 = (uint64_t)v77;
  outlined destroy of Coordinate3DPB?(v45, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB(v51, v45, type metadata accessor for Matrix2dPB);
  v55(v45, 0, 1, v54);
  *(_BYTE *)(a1 + 40) = v75;
  v60 = (uint64_t)v76;
  *v76 = 0;
  *(_DWORD *)(v60 + 8) = 0;
  UnknownStorage.init()();
  outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB(v60, v46, type metadata accessor for Coordinate3DPB);
  v53(v46, 0, 1, v58);
  outlined init with copy of (Int32, Matrix2dPB)(v46, v59, &demangling cache variable for type metadata for Coordinate3DPB?);
  v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
  if (v61(v59, 1, v58) == 1)
  {
    v62 = v78;
    *v78 = 0;
    v62[2] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v59, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    v62 = v78;
    outlined init with take of Matrix2dPB(v59, (uint64_t)v78, type metadata accessor for Coordinate3DPB);
  }
  *v62 = v87;
  outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v62, v46, type metadata accessor for Coordinate3DPB);
  v53(v46, 0, 1, v58);
  v63 = v80;
  outlined init with copy of (Int32, Matrix2dPB)(v46, v80, &demangling cache variable for type metadata for Coordinate3DPB?);
  v64 = v61(v63, 1, v58);
  v65 = (uint64_t)v84;
  v66 = v79;
  if (v64 == 1)
  {
    *v79 = 0;
    *((_DWORD *)v66 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v63, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v63, (uint64_t)v79, type metadata accessor for Coordinate3DPB);
  }
  *((_DWORD *)v66 + 1) = DWORD1(v87);
  outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v66, v46, type metadata accessor for Coordinate3DPB);
  v53(v46, 0, 1, v58);
  outlined init with copy of (Int32, Matrix2dPB)(v46, v65, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v61(v65, 1, v58) == 1)
  {
    v67 = v83;
    *v83 = 0;
    *((_DWORD *)v67 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v65, &demangling cache variable for type metadata for Coordinate3DPB?);
  }
  else
  {
    v67 = v83;
    outlined init with take of Matrix2dPB(v65, (uint64_t)v83, type metadata accessor for Coordinate3DPB);
  }
  *((_DWORD *)v67 + 2) = DWORD2(v87);
  outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v67, v46, type metadata accessor for Coordinate3DPB);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v53)(v46, 0, 1, v58);
  *(_QWORD *)(a1 + 48) = v81;
  *(_BYTE *)(a1 + 56) = v82;
  return result;
}

uint64_t PoseImageCrop.almostEqual(to:withThreshold:)(float32x4_t *a1, double a2, double a3)
{
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint32x4_t v16;
  unsigned int v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint32x4_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t result;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  int v31;
  int v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::String v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int8 v45;
  float v46;
  uint64_t v47;
  int v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  int v56;
  float32x4_t v57;
  float32x4_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  float32x4_t v63;
  float32x4_t v64;

  v47 = a1[1].i64[0];
  v56 = a1[1].u8[8];
  v4 = a1[3];
  v6 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = a1[10].u8[8];
  v55 = v3[1].i64[0];
  v45 = v3[1].i8[8];
  v11 = v3[5];
  v12 = v3[6];
  v13 = v3[7];
  v14 = v3[8];
  v48 = v3[10].u8[8];
  *(float *)&a3 = a2;
  v46 = *(float *)&a3;
  v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v16 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v15, vabdq_f32(v3[3], v4)), (int8x16_t)vcgeq_f32(v15, vabdq_f32(v3[2], a1[2]))), (int8x16_t)vcgeq_f32(v15, vabdq_f32(v3[4], v6)));
  v16.i32[3] = v16.i32[2];
  v17 = vminvq_u32(v16);
  v18 = MEMORY[0x24BEE0D00];
  v57 = v14;
  v58 = v9;
  v53 = v7;
  v54 = v5;
  v51 = v11;
  v52 = v8;
  v49 = v13;
  v50 = v12;
  if ((v17 & 0x80000000) == 0)
  {
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = 0xE000000000000000;
    v43 = v6;
    v44 = v15;
    v42 = v4.i64[0];
    _StringGuts.grow(_:)(26);
    v19._countAndFlagsBits = 0xD000000000000015;
    v19._object = (void *)0x800000023D9D72F0;
    String.append(_:)(v19);
    type metadata accessor for simd_float3x3(0);
    _print_unlocked<A, B>(_:_:)();
    v20._countAndFlagsBits = 32;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v63.i64[0] = v42;
    v64 = v43;
    _print_unlocked<A, B>(_:_:)();
    v63.i64[1] = v18;
    type metadata accessor for HandyLoggerNeo();
    v59 = xmmword_23D9A8970;
    v60 = 0;
    v61 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v59, 0xD00000000000005ALL, 0x800000023D9D7290, 91, (uint64_t)&v62, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    v15 = v44;
    v13 = v49;
    v12 = v50;
    v11 = v51;
    v8 = v52;
    v7 = v53;
    v5 = v54;
    v14 = v57;
    v9 = v58;
  }
  v21 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v15, vabdq_f32(v12, v7)), (int8x16_t)vcgeq_f32(v15, vabdq_f32(v11, v5))), (int8x16_t)vcgeq_f32(v15, vabdq_f32(v13, v8)));
  v21.i32[3] = v21.i32[2];
  if ((vminvq_u32(v21) & 0x80000000) != 0)
  {
    result = v17 >> 31;
  }
  else
  {
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v59 = v62;
    v22._countAndFlagsBits = 0xD000000000000013;
    v22._object = (void *)0x800000023D9D7310;
    String.append(_:)(v22);
    v62 = (__int128)v51;
    v63 = v50;
    v64 = v49;
    type metadata accessor for simd_float3x3(0);
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 32;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v62 = (__int128)v54;
    v63 = v53;
    v64 = v52;
    _print_unlocked<A, B>(_:_:)();
    v63.i64[1] = v18;
    v62 = v59;
    type metadata accessor for HandyLoggerNeo();
    v59 = xmmword_23D9A8970;
    v60 = 0;
    v61 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v59, 0xD00000000000005ALL, 0x800000023D9D7290, 96, (uint64_t)&v62, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    v14 = v57;
    v9 = v58;
    result = 0;
  }
  v25 = v55;
  v26 = vsubq_f32(v14, v9);
  v27 = vmulq_f32(v26, v26);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]) > v46)
  {
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v62 = 0xD000000000000013;
    *((_QWORD *)&v62 + 1) = 0x800000023D9D7370;
    v59 = (__int128)v57;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>();
    v28._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 32;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    v59 = (__int128)v58;
    v30._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v30);
    v25 = v55;
    swift_bridgeObjectRelease();
    v63.i64[1] = v18;
    type metadata accessor for HandyLoggerNeo();
    v59 = xmmword_23D9A8970;
    v60 = 0;
    v61 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v59, 0xD00000000000005ALL, 0x800000023D9D7290, 101, (uint64_t)&v62, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    result = 0;
  }
  if (v56)
    __asm { BR              X9 }
  if (v25 != v47)
  {
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v33._countAndFlagsBits = 0xD00000000000001FLL;
    v33._object = (void *)0x800000023D9D7330;
    String.append(_:)(v33);
    *(_QWORD *)&v59 = v25;
    BYTE8(v59) = v45;
    _print_unlocked<A, B>(_:_:)();
    v34._countAndFlagsBits = 32;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    *(_QWORD *)&v59 = v47;
    BYTE8(v59) = 0;
    _print_unlocked<A, B>(_:_:)();
    v63.i64[1] = v18;
    type metadata accessor for HandyLoggerNeo();
    v59 = xmmword_23D9A8970;
    v60 = 0;
    v61 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v59, 0xD00000000000005ALL, 0x800000023D9D7290, 106, (uint64_t)&v62, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    v31 = v48;
    v32 = v10;
    if (v10 == v48)
      return 0;
LABEL_14:
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v62 = 0xD000000000000014;
    *((_QWORD *)&v62 + 1) = 0x800000023D9D7350;
    if (v31)
      v35 = 1702195828;
    else
      v35 = 0x65736C6166;
    if (v31)
      v36 = 0xE400000000000000;
    else
      v36 = 0xE500000000000000;
    v37 = v36;
    String.append(_:)(*(Swift::String *)&v35);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 32;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    if (v32)
      v39 = 1702195828;
    else
      v39 = 0x65736C6166;
    if (v32)
      v40 = 0xE400000000000000;
    else
      v40 = 0xE500000000000000;
    v41 = v40;
    String.append(_:)(*(Swift::String *)&v39);
    swift_bridgeObjectRelease();
    v63.i64[1] = v18;
    type metadata accessor for HandyLoggerNeo();
    v59 = xmmword_23D9A8970;
    v60 = 0;
    v61 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v59, 0xD00000000000005ALL, 0x800000023D9D7290, 111, (uint64_t)&v62, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v62);
    return 0;
  }
  v31 = v48;
  v32 = v10;
  if (v10 != v48)
    goto LABEL_14;
  return result;
}

void PoseImageCrop.cameraSource.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

void PoseImageCrop.canonicalizationType.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

__n128 PoseImageCrop.intrinsics.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 PoseImageCrop.rotation.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 80);
  v3 = *(_OWORD *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 112);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 PoseImageCrop.upVector.getter()
{
  __n128 *v0;

  return v0[8];
}

uint64_t PoseImageCrop.crop.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 152));
  return v1;
}

float PoseImageCrop.cropMean.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 160);
}

float PoseImageCrop.cropStd.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 164);
}

uint64_t PoseImageCrop.isFlipped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 168);
}

unint64_t lazy protocol witness table accessor for type PoseImageCropPB and conformance PoseImageCropPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB;
  if (!lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB)
  {
    v1 = type metadata accessor for PoseImageCropPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseImageCropPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB);
  }
  return result;
}

uint64_t destroy for PoseImageCrop(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 152);
  if (v1 >> 60 != 15)
    return outlined consume of Data._Representation(*(_QWORD *)(result + 144), v1);
  return result;
}

uint64_t initializeWithCopy for PoseImageCrop(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = (uint64_t *)(a2 + 144);
  v9 = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    outlined copy of Data._Representation(*v8, v9);
    *(_QWORD *)(a1 + 144) = v10;
    *(_QWORD *)(a1 + 152) = v9;
  }
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t assignWithCopy for PoseImageCrop(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  v6 = (_OWORD *)(a1 + 144);
  v7 = a2 + 18;
  v8 = a2[19];
  if (*(_QWORD *)(a1 + 152) >> 60 != 15)
  {
    if (v8 >> 60 != 15)
    {
      v10 = *v7;
      outlined copy of Data._Representation(*v7, a2[19]);
      v11 = *(_QWORD *)(a1 + 144);
      v12 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = v10;
      *(_QWORD *)(a1 + 152) = v8;
      outlined consume of Data._Representation(v11, v12);
      goto LABEL_8;
    }
    outlined destroy of Data(a1 + 144);
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
LABEL_6:
    *v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  v9 = *v7;
  outlined copy of Data._Representation(*v7, a2[19]);
  *(_QWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 152) = v8;
LABEL_8:
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  *(_DWORD *)(a1 + 164) = *((_DWORD *)a2 + 41);
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  return a1;
}

__n128 __swift_memcpy169_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for PoseImageCrop(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  v8 = (_OWORD *)(a1 + 144);
  v9 = (_QWORD *)(a2 + 144);
  v10 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = v7;
  if (v10 >> 60 != 15)
  {
    v11 = *(_QWORD *)(a2 + 152);
    if (v11 >> 60 != 15)
    {
      v12 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 144) = *v9;
      *(_QWORD *)(a1 + 152) = v11;
      outlined consume of Data._Representation(v12, v10);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 144);
  }
  *v8 = *(_OWORD *)v9;
LABEL_6:
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for PoseImageCrop(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 169))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 168);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PoseImageCrop(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 169) = 0;
    if (a2)
      *(_BYTE *)(result + 168) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PoseImageCrop()
{
  return &type metadata for PoseImageCrop;
}

uint64_t outlined init with take of simd_float3x3?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float3x3?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall StereoPoseDetectorModel.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  NSArray *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  HandsKitConfig *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  char v30;
  NSString *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  _QWORD v39[4];
  _BYTE v40[24];
  uint64_t v41;
  uint64_t v42;

  v2 = (_QWORD *)v1;
  specialized static PoseModelUtils.loadPoseModel(_:isPoseOnly:)(a1, 0, v40);
  v4 = v41;
  v5 = v42;
  v6 = *(_OWORD *)&v40[8];
  v7 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)v40;
  *(_OWORD *)(v1 + 40) = v6;
  *(_QWORD *)(v1 + 56) = v4;
  *(_QWORD *)(v1 + 64) = v5;
  outlined consume of (params: PoseModelParams, model: E5RTRegressor?, handPresenceParams: PoseModelParams?, handPresenceModel: E5RTRegressor?, handPresenceOutputSelection: [PoseDnnOutputLayer])?(v7);
  v8 = -[HandsKitConfig GTInjections](a1, sel_GTInjections);
  v9 = MEMORY[0x24BEE0D00];
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    *(_QWORD *)v40 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = *(_QWORD *)v40;
    v13 = (void **)(v10 + 40);
    while (1)
    {
      v14 = (uint64_t)*(v13 - 1);
      v15 = *v13;
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = v14;
      v16._object = v15;
      v17 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of StereoPoseDetectorModel.reconfig(_:), v16);
      swift_bridgeObjectRelease();
      if (v17 > 3)
        break;
      *(_QWORD *)v40 = v12;
      v19 = *(_QWORD *)(v12 + 16);
      v18 = *(_QWORD *)(v12 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v12 = *(_QWORD *)v40;
      }
      v13 += 2;
      *(_QWORD *)(v12 + 16) = v19 + 1;
      *(_BYTE *)(v12 + v19 + 32) = v17;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        v9 = MEMORY[0x24BEE0D00];
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x24BEE4AF8];
LABEL_9:
    v20 = specialized Set.init<A>(_:)(v12);
    swift_bridgeObjectRelease();
    v2[9] = v20;
    swift_bridgeObjectRelease();
    type metadata accessor for GeometricPoseFilter();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = 0;
    v22 = objc_allocWithZone((Class)HandsKitConfig);
    v23 = a1;
    *(_QWORD *)(v21 + 24) = objc_msgSend(v22, sel_init);
    v24 = v21 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevHand;
    v25 = type metadata accessor for HandDescriptor();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
    v26 = v21 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevTimeStamp;
    *(_QWORD *)(v26 + 16) = 0;
    *(_BYTE *)(v26 + 24) = 1;
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v21 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPassthrough) = 0;
    *(_QWORD *)(v21 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__expectedTimeDeltaForOneFrame) = 0;
    *(_BYTE *)(v21 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__filterInWorldCoordinates) = 0;
    v27 = OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPredictive;
    *(_DWORD *)(v21 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__runningFrameRate) = 0;
    *(_BYTE *)(v21 + v27) = 0;
    GeometricPoseFilter.reconfig(_:)(v23);

    v2[11] = v21;
    swift_release();
    -[HandsKitConfig RigidTransformJointVisibilityThreshold](v23, sel_RigidTransformJointVisibilityThreshold);
    v29 = v28;
    LOBYTE(v21) = -[HandsKitConfig PerformJointAngleValidation](v23, sel_PerformJointAngleValidation);
    LODWORD(v24) = -[HandsKitConfig AllowedNumberOfInvalidJointAngles](v23, sel_AllowedNumberOfInvalidJointAngles);
    v30 = -[HandsKitConfig EnableCoreAnalytics](v23, sel_EnableCoreAnalytics);
    type metadata accessor for HandPoseBuilder();
    swift_allocObject();
    v2[10] = HandPoseBuilder.init(_:_:_:_:)(v21, v24, v30, v29);
    swift_release();
    *(_OWORD *)v40 = xmmword_23D9A6CC0;
    *(_QWORD *)&v40[16] = 0;
    v41 = 0;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v31 = -[HandsKitConfig PoseModel](v23, sel_PoseModel, 0xD00000000000001DLL, 0x800000023D9D73F0);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    v35._countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 8250;
    v36._object = (void *)0xE200000000000000;
    String.append(_:)(v36);
    if (v2[4])
    {
      swift_retain();
      v37 = ModelParams.contents()();
      swift_release();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._countAndFlagsBits = 46;
      v38._object = (void *)0xE100000000000000;
      String.append(_:)(v38);
      v39[3] = v9;
      specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000067, 0x800000023D9D7410, 32, (uint64_t *)v40, (uint64_t)v39, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v39);
      return;
    }
  }
  __break(1u);
}

Swift::Void __swiftcall StereoPoseDetectorModel.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v1, v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 88);
  if (v5)
  {
    v6 = *(void **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = 0;
    swift_retain();

    v7 = type metadata accessor for HandDescriptor();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    v8 = v5 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevHand;
    swift_beginAccess();
    outlined assign with take of HandDescriptor?((uint64_t)v4, v8);
    swift_endAccess();
    swift_release();
    if (*(_QWORD *)(v0 + 80))
    {
      swift_retain();
      HandPoseBuilder.reset()();
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t StereoPoseDetectorModel.run(forHand:withCameraTransition:withAlternateCamerasHand:withHandsKitData:withPrevHand:generateAlternatePose:)@<X0>(uint64_t a1@<X0>, __int32 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  Swift::String v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int32 v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[456];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _BYTE v64[456];
  uint64_t v65;

  v9 = v7;
  v45 = a6;
  v46 = a5;
  v48 = a3;
  v47 = a2;
  v13 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v49 = (uint64_t)&v40 - v19;
  result = (uint64_t)memcpy(v64, (const void *)a4, sizeof(v64));
  v65 = *(_QWORD *)(a4 + 456);
  v21 = *(_OWORD *)(a4 + 512);
  v60 = *(_OWORD *)(a4 + 496);
  v61 = v21;
  v62 = *(_OWORD *)(a4 + 528);
  v63 = *(_QWORD *)(a4 + 544);
  v22 = *(_OWORD *)(a4 + 480);
  v58 = *(_OWORD *)(a4 + 464);
  v59 = v22;
  if (!v9[4])
  {
    __break(1u);
    goto LABEL_22;
  }
  v23 = String.lowercased()();
  if (v23._countAndFlagsBits == 0x6F72687473736170 && v23._object == (void *)0xEB00000000686775)
  {
    swift_bridgeObjectRelease();
    return outlined init with copy of HandDescriptor(a1, a7);
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
    return outlined init with copy of HandDescriptor(a1, a7);
  v40 = a7;
  v41 = v16;
  v43 = v8;
  v42 = *(unsigned __int8 *)(a1 + 136);
  result = Hands_trace_CBridge_0();
  v26 = v9[4];
  if (!v26)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v28 = v9[5];
  v27 = v9[6];
  v29 = v9[7];
  v30 = v9[9];
  memcpy(v50, v64, sizeof(v50));
  v51 = v65;
  v54 = v60;
  v55 = v61;
  v56 = v62;
  v57 = v63;
  v52 = v58;
  v53 = v59;
  outlined copy of (params: PoseModelParams, model: E5RTRegressor?, handPresenceParams: PoseModelParams?, handPresenceModel: E5RTRegressor?, handPresenceOutputSelection: [PoseDnnOutputLayer])?(v26);
  v44 = v30;
  swift_bridgeObjectRetain();
  v31 = v43;
  specialized static PoseModelInference.setPoseCrops(forHand:withHandsKitData:withPoseModel:)(a1, (uint64_t)v50, v26, v28, v27, v29);
  if (v31)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  v43 = type metadata accessor for PoseModelInference();
  memcpy(v50, v64, sizeof(v50));
  v51 = v65;
  v54 = v60;
  v55 = v61;
  v56 = v62;
  v57 = v63;
  v52 = v58;
  v53 = v59;
  static PoseModelInference.setPoseInputs(forHand:withHandsKitData:withPoseModel:gtInjections:)(a1, (uint64_t)v50, v26, v28, v27, v29, v44, v49);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  Hands_trace_CBridge_0();
  result = Hands_trace_CBridge_0();
  if (!v9[4])
    goto LABEL_23;
  v32 = v9[7];
  if (v9[5])
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    specialized E5RTRegressor.runNetwork(_:)();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  v33 = v49;
  if (v32)
  {
    specialized E5RTRegressor.runNetwork(_:)();
    swift_release();
    v33 = v49;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v34 = v65;
  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  result = (uint64_t)memcpy(v50, v64, sizeof(v50));
  v51 = v34;
  v54 = v60;
  v55 = v61;
  v56 = v62;
  v57 = v63;
  v52 = v58;
  v53 = v59;
  v35 = v9[4];
  if (v35)
  {
    v37 = v9[7];
    v36 = v9[8];
    v39 = v9[5];
    v38 = v9[6];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    StereoPoseDetectorModel.getOutputs(forHand:withCameraTransition:withAlternateCamerasHand:withHandsKitData:withPoseModel:withPrevHand:generateAlternatePose:)(v33, v47, v48, v50, v35, v39, v38, v37, (uint64_t)v41, v36, v46, v45 & 1);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    Hands_trace_CBridge_0();
    outlined destroy of HandDescriptor(v49);
    return outlined init with take of HandDescriptor((uint64_t)v41, v40);
  }
LABEL_24:
  __break(1u);
  return result;
}

void *StereoPoseDetectorModel.getOutputs(forHand:withCameraTransition:withAlternateCamerasHand:withHandsKitData:withPoseModel:withPrevHand:generateAlternatePose:)@<X0>(uint64_t a1@<X0>, __int32 a2@<W1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int32 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[560];
  _BYTE v50[552];
  uint64_t v51;

  v51 = a8;
  v48 = a5;
  v46 = a3;
  v45 = a2;
  v44 = a1;
  v38[0] = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v38[0], v18);
  v39 = (uint64_t)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v21);
  v47 = (uint64_t)v38 - v22;
  memcpy(v50, a4, sizeof(v50));
  result = memcpy(v49, a4, 0x228uLL);
  v24 = v12[10];
  if (!v24)
  {
    __break(1u);
    goto LABEL_9;
  }
  v42 = v13;
  v43 = a7;
  v40 = a9;
  v25 = v12[11];
  if (!v25)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v26 = a6;
  v41 = a12;
  v27 = type metadata accessor for PoseModelInference();
  v28 = v12[9];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v38[1] = a10;
  v29 = v46;
  v30 = v47;
  v31 = v44;
  v44 = a11;
  v32 = v48;
  v46 = v27;
  static PoseModelInference.processHandPose(forHand:withPrevHand:withCameraTransition:withAlternateCamerasHand:withHandsKitData:withPoseModel:handPoseBuilder:geometricFilter:gtInjections:generateAlternatePose:)(v31, a11, v45, v29, v49, v48, v26, v43, v47, v51, a10, v24, v25, v28, a12 & 1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    return (void *)outlined init with take of HandDescriptor(v30, v40);
  memcpy(v49, v50, 0x228uLL);
  v33 = v39;
  v34 = v42;
  static PoseModelInference.postProcessOutputs(forHand:withPrevHand:withHandsKitData:withPoseModel:)(v30, v44, v32, v26, v39);
  if (!v34)
  {
    v35 = v40;
    outlined init with copy of HandDescriptor(v33, v40);
    v36 = specialized static PoseModelInference.buildBranchFeatures(_:)(v32, v26);
    v37 = *(int *)(v38[0] + 116);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v35 + v37) = v36;
    outlined destroy of HandDescriptor(v33);
  }
  return (void *)outlined destroy of HandDescriptor(v30);
}

uint64_t StereoPoseDetectorModel.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of (params: PoseModelParams, model: E5RTRegressor?, handPresenceParams: PoseModelParams?, handPresenceModel: E5RTRegressor?, handPresenceOutputSelection: [PoseDnnOutputLayer])?(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StereoPoseDetectorModel()
{
  return objc_opt_self();
}

uint64_t outlined consume of (params: PoseModelParams, model: E5RTRegressor?, handPresenceParams: PoseModelParams?, handPresenceModel: E5RTRegressor?, handPresenceOutputSelection: [PoseDnnOutputLayer])?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of (params: PoseModelParams, model: E5RTRegressor?, handPresenceParams: PoseModelParams?, handPresenceModel: E5RTRegressor?, handPresenceOutputSelection: [PoseDnnOutputLayer])?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

void MakeFrameRejectorReason.rawValue.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23D8D1E44()
{
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  return NSString.init(stringLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LightConditionOnPinch()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LightConditionOnPinch()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance LightConditionOnPinch()
{
  id v0;

  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v0 = (id)NSString.init(stringLiteral:)();
  NSObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LightConditionOnPinch()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LightConditionOnPinch@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized LightConditionOnPinch.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LightConditionOnPinch@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  result = NSString.init(stringLiteral:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MakeFrameRejectorReason(char *a1, char *a2)
{
  char v2;
  char v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;

  v2 = *a1;
  v3 = *a2;
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  MakeFrameRejectorReason.rawValue.getter(v2);
  v5 = v4;
  MakeFrameRejectorReason.rawValue.getter(v3);
  v7 = v6;
  v8 = static NSObject.== infix(_:_:)();

  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MakeFrameRejectorReason()
{
  char *v0;
  char v1;
  void *v2;
  void *v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  MakeFrameRejectorReason.rawValue.getter(v1);
  v3 = v2;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MakeFrameRejectorReason()
{
  char *v0;
  void *v1;
  id v2;

  MakeFrameRejectorReason.rawValue.getter(*v0);
  v2 = v1;
  NSObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MakeFrameRejectorReason()
{
  char *v0;
  char v1;
  void *v2;
  void *v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  MakeFrameRejectorReason.rawValue.getter(v1);
  v3 = v2;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MakeFrameRejectorReason@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized MakeFrameRejectorReason.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MakeFrameRejectorReason(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v3;

  MakeFrameRejectorReason.rawValue.getter(*v1);
  *a1 = v3;
}

unint64_t static PinchRecoveryAnalytics.buildAnalyticData(_:_:_:_:_:)@<X0>(unint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  float v14;
  float v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  float v40;
  unint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  float v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  _DWORD v97[7];
  char v98;
  __int128 v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  float v106;
  char v107;
  float v108;
  char v109;
  uint64_t v110;
  char v111;
  int v112;
  char v113;
  int v114;
  char v115;
  int v116;
  char v117;
  int v118;
  char v119;
  int v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  float v130;
  char v131;
  float v132;
  char v133;
  float v134;
  char v135;
  float v136;
  char v137;
  float v138;
  char v139;
  float v140;
  char v141;
  char v142;

  v7 = *(_QWORD *)(a5 + 16);
  if ((uint64_t)v7 <= a4 || a3 < 0)
  {
    _s5Hands26PinchRecoveryAnalyticsDataVSgWOi0_((uint64_t)v97);
    return outlined init with take of PinchRecoveryAnalyticsData?((uint64_t)v97, a6);
  }
  if (v7 <= a3)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (a4 < 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v10 = a5 + 32 + 592 * a3;
  v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  if (!v11)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v12 = result;
  v81 = *(_OWORD *)(v10 + 28);
  v80 = *(_QWORD *)(v10 + 44);
  v13 = a5 + 32 + 592 * a4;
  v79 = *(_OWORD *)(v13 + 28);
  v78 = *(_QWORD *)(v13 + 44);
  v82 = *(_QWORD *)(v10 + 376);
  v77 = *(_BYTE *)(v10 + 384);
  v83 = *(_QWORD *)(v13 + 392);
  v14 = *(float *)(*(_QWORD *)v10 + 4 * v11 + 28);
  v15 = *(float *)(v10 + 8);
  v96 = *(_QWORD *)(v10 + 424);
  v95 = *(_BYTE *)(v10 + 432);
  v85 = *(_DWORD *)(v10 + 436);
  v75 = *(_BYTE *)(v10 + 440);
  v76 = *(_BYTE *)(v13 + 400);
  v74 = *(_BYTE *)(v10 + 448);
  v86 = *(_DWORD *)(v10 + 444);
  v87 = *(_DWORD *)(v10 + 452);
  v88 = *(_DWORD *)(v10 + 460);
  v72 = *(_BYTE *)(v10 + 464);
  v73 = *(_BYTE *)(v10 + 456);
  v89 = *(_DWORD *)(v10 + 468);
  v16 = *(_BYTE *)(v10 + 473);
  v17 = *(_QWORD *)(v10 + 480);
  v94 = *(_QWORD *)(v10 + 488);
  v93 = *(_QWORD *)(v10 + 496);
  v92 = *(_QWORD *)(v10 + 504);
  v91 = *(_QWORD *)(v10 + 512);
  v90 = *(_QWORD *)(v10 + 520);
  v70 = *(_BYTE *)(v10 + 528);
  v71 = *(_BYTE *)(v10 + 472);
  result = (unint64_t)TntSingleHandSubsequence.getFramePose(_:_:)(0, v7 - 1);
  if (!result)
  {
    v42 = -1.0;
    v35 = -1.0;
    v33 = -1.0;
    v43 = -1.0;
    v23 = -1.0;
    goto LABEL_41;
  }
  v18 = 7;
  if (a3 > 7)
    v18 = a3;
  if (__OFADD__(a4, 7))
    goto LABEL_50;
  v19 = result;
  v69 = v17;
  v67 = v16;
  v20 = v18 - 7;
  v21 = a4 + 6;
  v22 = *(_QWORD *)(result + 16);
  if ((uint64_t)(v22 - 1) < a4 + 6)
    v21 = v22 - 1;
  v23 = 0.0;
  v68 = v21;
  if (v22 >= 2 && v20 < a3)
  {
    v65 = a6;
    v24 = specialized _copyCollectionToContiguousArray<A>(_:)(v20, a3);
    swift_bridgeObjectRetain();
    v64 = v12;
    v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5097_s5Hands14StatisticUtilsC19jointTravelDistanceySfSayAA8HandPoseVG_So18ARVinoJointIndexesVS2itFZs5d2VyM8GSiXEfU_Say5Hands0pQ0VGSo0tuV0VTf1cn_nTf4ngn_n(v24, v19, 6);
    a6 = v65;
    swift_release();
    swift_bridgeObjectRelease();
    specialized static StatisticUtils.travelDistance(_:)(v25);
    v23 = v26;
    v12 = v64;
    swift_bridgeObjectRelease();
  }
  result = CMTime.seconds.getter();
  if (v20 >= v7)
    goto LABEL_51;
  v28 = v27;
  result = CMTime.seconds.getter();
  v30 = v29;
  v31 = a4 - 1;
  v32 = *(_QWORD *)(v19 + 16);
  v33 = 0.0;
  if (v32 < 2)
  {
    v35 = 0.0;
    v17 = v69;
LABEL_32:
    v41 = v68;
    goto LABEL_33;
  }
  if (a4)
    v34 = a4 - 1;
  else
    v34 = v32 - 1;
  v35 = 0.0;
  if (v34 <= a3)
  {
    v41 = v68;
    v17 = v69;
  }
  else
  {
    v36 = a6;
    v37 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, v34);
    swift_bridgeObjectRetain();
    v38 = v12;
    v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5097_s5Hands14StatisticUtilsC19jointTravelDistanceySfSayAA8HandPoseVG_So18ARVinoJointIndexesVS2itFZs5d2VyM8GSiXEfU_Say5Hands0pQ0VGSo0tuV0VTf1cn_nTf4ngn_n(v37, v19, 6);
    a6 = v36;
    v31 = a4 - 1;
    swift_release();
    swift_bridgeObjectRelease();
    specialized static StatisticUtils.travelDistance(_:)(v39);
    v33 = v40;
    v12 = v38;
    result = swift_bridgeObjectRelease();
    v32 = *(_QWORD *)(v19 + 16);
    v41 = v68;
    v17 = v69;
    if (v32 < 2)
      goto LABEL_33;
  }
  v44 = v32 - 1;
  if (v41 == -1)
    v45 = v44;
  else
    v45 = v41;
  if (v45 >= a4)
  {
    v46 = specialized _copyCollectionToContiguousArray<A>(_:)(v31, v45);
    v66 = v31;
    v47 = a6;
    v48 = v46;
    swift_bridgeObjectRetain();
    v49 = v12;
    v50 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5097_s5Hands14StatisticUtilsC19jointTravelDistanceySfSayAA8HandPoseVG_So18ARVinoJointIndexesVS2itFZs5d2VyM8GSiXEfU_Say5Hands0pQ0VGSo0tuV0VTf1cn_nTf4ngn_n(v48, v19, 6);
    a6 = v47;
    v31 = v66;
    swift_release();
    swift_bridgeObjectRelease();
    specialized static StatisticUtils.travelDistance(_:)(v50);
    v35 = v51;
    v12 = v49;
    v17 = v69;
    result = swift_bridgeObjectRelease();
    goto LABEL_32;
  }
LABEL_33:
  if (v41 < v7)
  {
    v43 = v28 - v30;
    CMTime.seconds.getter();
    v53 = v52;
    CMTime.seconds.getter();
    v42 = v53 - v54;
    v55 = *(_QWORD *)(v19 + 16);
    if (v55 >= 2)
    {
      v56 = v55 - 1;
      if (a4)
        v57 = v31;
      else
        v57 = v56;
      v58 = v96;
      v59 = v95;
      if (v57 > a3)
      {
        v60 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, v57);
        swift_bridgeObjectRetain();
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5082_s5Hands14StatisticUtilsC27pinchCentroidTravelDistanceySfSayAA8HandPoseVG_S2itFZs5d2VyN8GSiXEfU_Say5Hands0qR0VGTf1cn_nTf4ng_n(v60, v19);
        v62 = v61;
        swift_release();
        swift_bridgeObjectRelease();
        specialized static StatisticUtils.travelDistance(_:)(v62);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v16 = v67;
      if ((v95 & 1) == 0)
        goto LABEL_44;
      goto LABEL_42;
    }
    swift_bridgeObjectRelease();
LABEL_41:
    v58 = v96;
    v59 = v95;
    if ((v95 & 1) == 0)
    {
LABEL_44:
      *(_QWORD *)v97 = v58;
      v63 = specialized static StatisticUtils.determineMissingPinchCause(rawActionScore:finalActionScore:pinchMakeRejector:)((uint64_t *)v97, v14, v15);
      goto LABEL_45;
    }
LABEL_42:
    v63 = 5;
LABEL_45:
    LOBYTE(v97[0]) = v12;
    BYTE1(v97[0]) = a2 & 1;
    *(_OWORD *)&v97[1] = v81;
    *(_QWORD *)&v97[5] = v80;
    v98 = 0;
    v99 = v79;
    v100 = v78;
    v101 = 0;
    v102 = v82;
    v103 = v77;
    v104 = v83;
    v105 = v76;
    v106 = v14;
    v107 = 0;
    v108 = v15;
    v109 = 0;
    v110 = v58;
    v111 = v59;
    v112 = v85;
    v113 = v75;
    v114 = v86;
    v115 = v74;
    v116 = v87;
    v117 = v73;
    v118 = v88;
    v119 = v72;
    v120 = v89;
    v121 = v71;
    v122 = v16;
    v123 = v17;
    v124 = v94;
    v125 = v93;
    v126 = v92;
    v127 = v91;
    v128 = v90;
    v129 = v70;
    v130 = v23;
    v131 = 0;
    v132 = v43;
    v133 = 0;
    v134 = v33;
    v135 = 0;
    v136 = v35;
    v137 = 0;
    v138 = v42;
    v139 = 0;
    v140 = v33;
    v141 = 0;
    v142 = v63;
    _s5Hands13PoseImageCropVSgWOi_(v97);
    return outlined init with take of PinchRecoveryAnalyticsData?((uint64_t)v97, a6);
  }
LABEL_52:
  __break(1u);
  return result;
}

unint64_t closure #1 in static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, unint64_t a16)
{
  uint64_t inited;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  id v21;
  id v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9BD920;
  *(_QWORD *)(inited + 32) = 0x7466656C5F7369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(inited + 56), "duration_secs");
  *(_WORD *)(inited + 70) = -4864;
  CMTime.seconds.getter();
  v18 = v17;
  v19 = CMTime.seconds.getter();
  *(_QWORD *)(inited + 72) = MEMORY[0x2426375B8](v19, v18 - v20);
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x800000023D9CCAA0;
  *(NSNumber *)(inited + 96) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000012;
  *(_QWORD *)(inited + 112) = 0x800000023D9CCA60;
  *(NSNumber *)(inited + 120) = Float._bridgeToObjectiveC()();
  strcpy((char *)(inited + 128), "unsure_score");
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(NSNumber *)(inited + 144) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 152) = 0xD000000000000010;
  *(_QWORD *)(inited + 160) = 0x800000023D9CCB80;
  *(NSNumber *)(inited + 168) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 176) = 0xD000000000000018;
  *(_QWORD *)(inited + 184) = 0x800000023D9CCC60;
  *(NSNumber *)(inited + 192) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 200) = 0xD000000000000018;
  *(_QWORD *)(inited + 208) = 0x800000023D9CCC80;
  *(NSNumber *)(inited + 216) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 224) = 0xD000000000000018;
  *(_QWORD *)(inited + 232) = 0x800000023D9CCCA0;
  *(NSNumber *)(inited + 240) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 248) = 0xD000000000000018;
  *(_QWORD *)(inited + 256) = 0x800000023D9CCCC0;
  *(NSNumber *)(inited + 264) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 272) = 0x6F635F746867696CLL;
  *(_QWORD *)(inited + 280) = 0xEF6E6F697469646ELL;
  *(_QWORD *)(inited + 288) = a9;
  *(_QWORD *)(inited + 296) = 0x5F74746977657270;
  *(_QWORD *)(inited + 304) = 0xEF746E6572727563;
  v21 = a9;
  *(NSNumber *)(inited + 312) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 320) = 0xD000000000000013;
  *(_QWORD *)(inited + 328) = 0x800000023D9CCD50;
  *(NSNumber *)(inited + 336) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 344) = 0x61726576615F4541;
  *(_QWORD *)(inited + 352) = 0xEF4D41434D5F6567;
  *(NSNumber *)(inited + 360) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 368) = 0x61726576615F4541;
  *(_QWORD *)(inited + 376) = 0xEF4D4143445F6567;
  *(NSNumber *)(inited + 384) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 392) = 0xD000000000000019;
  *(_QWORD *)(inited + 400) = 0x800000023D9CCD70;
  *(NSNumber *)(inited + 408) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 416) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 424) = 0x800000023D9CCD90;
  *(NSNumber *)(inited + 432) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 440) = 0xD000000000000025;
  *(_QWORD *)(inited + 448) = 0x800000023D9CCBA0;
  *(NSNumber *)(inited + 456) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 464) = 0xD00000000000002CLL;
  *(_QWORD *)(inited + 472) = 0x800000023D9CCBD0;
  *(NSNumber *)(inited + 480) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 488) = 0xD000000000000020;
  *(_QWORD *)(inited + 496) = 0x800000023D9CCC00;
  *(NSNumber *)(inited + 504) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 512) = 0xD000000000000025;
  *(_QWORD *)(inited + 520) = 0x800000023D9D0200;
  *(NSNumber *)(inited + 528) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 536) = 0xD00000000000002CLL;
  *(_QWORD *)(inited + 544) = 0x800000023D9D01D0;
  *(NSNumber *)(inited + 552) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 560) = 0xD000000000000021;
  *(_QWORD *)(inited + 568) = 0x800000023D9CCC30;
  *(NSNumber *)(inited + 576) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 584) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 592) = 0x800000023D9D01B0;
  *(_QWORD *)(inited + 600) = a14;
  v22 = a14;
  v23 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v49 = xmmword_23D9A8B80;
  v50 = 0;
  v51 = 0;
  v46 = a15;
  v47 = a16;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = 8250;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v25 = MEMORY[0x24BEE0D00];
  v26._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v48 = v25;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD0000000000000A4, 0x800000023D9D74B0, 204, (uint64_t *)&v49, (uint64_t)&v46, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
  v49 = xmmword_23D9A8B80;
  v50 = 0;
  v51 = 0;
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(186);
  v27._countAndFlagsBits = 0xD000000000000036;
  v27._object = (void *)0x800000023D9D7560;
  String.append(_:)(v27);
  v28 = objc_msgSend(v21, sel_description);
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v31 = v30;

  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._object = (void *)0x800000023D9D75A0;
  v33._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v33);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 0x772065736C757020;
  v35._object = (void *)0xED00002068746469;
  String.append(_:)(v35);
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._object = (void *)0x800000023D9D75C0;
  v37._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v37);
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._object = (void *)0x800000023D9D75E0;
  v39._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v39);
  v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._object = (void *)0x800000023D9D7600;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._object = (void *)0x800000023D9D7620;
  v43._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v43);
  v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v48 = MEMORY[0x24BEE0D00];
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD0000000000000A4, 0x800000023D9D74B0, 205, (uint64_t *)&v49, (uint64_t)&v46, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
  return v23;
}

uint64_t type metadata accessor for PinchRecoveryAnalytics()
{
  return objc_opt_self();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5097_s5Hands14StatisticUtilsC19jointTravelDistanceySfSayAA8HandPoseVG_So18ARVinoJointIndexesVS2itFZs5d2VyM8GSiXEfU_Say5Hands0pQ0VGSo0tuV0VTf1cn_nTf4ngn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v17 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    if ((a3 & 0x8000000000000000) == 0)
    {
      v8 = (unint64_t *)(a1 + 32);
      result = v17;
      v9 = *(_QWORD *)(a2 + 16);
      while (1)
      {
        v11 = *v8++;
        v10 = v11;
        if (v11 >= v9)
          break;
        v12 = *(_QWORD *)(a2 + 40 + (v10 << 7));
        if (*(_QWORD *)(v12 + 16) <= a3)
          goto LABEL_11;
        v13 = *(_OWORD *)(v12 + 32 * a3 + 32);
        v18 = result;
        v15 = *(_QWORD *)(result + 16);
        v14 = *(_QWORD *)(result + 24);
        if (v15 >= v14 >> 1)
        {
          v16 = v13;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
          v13 = v16;
          result = v18;
        }
        *(_QWORD *)(result + 16) = v15 + 1;
        *(_OWORD *)(result + 16 * v15 + 32) = v13;
        if (!--v4)
          return result;
      }
      __break(1u);
LABEL_11:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5082_s5Hands14StatisticUtilsC27pinchCentroidTravelDistanceySfSayAA8HandPoseVG_S2itFZs5d2VyN8GSiXEfU_Say5Hands0qR0VGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v5 = (unint64_t *)(a1 + 32);
    v6 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v7 = *v5++;
      if (v7 >= v6)
        break;
      HandPose.getSimplifiedPinchCentroid(isRaw:)();
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
      {
        v11 = v8;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v8 = v11;
      }
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_OWORD *)(v12 + 16 * v10 + 32) = v8;
      if (!--v2)
        return;
    }
    __break(1u);
  }
}

uint64_t specialized static PinchRecoveryAnalytics.cleanupBuffer(_:_:_:_:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, int64_t a6)
{
  char *v7;
  int64_t v8;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  __int128 v41;
  __int128 v42;

  v7 = *a5;
  v8 = *((_QWORD *)*a5 + 2);
  if (v8 <= a6)
  {
LABEL_8:
    if (v8)
    {
      swift_bridgeObjectRetain();
      v12 = v8 - 1;
      v13 = v7 + 89;
      v14 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v41 = *(_OWORD *)(v13 - 57);
        v42 = *(_OWORD *)(v13 - 41);
        v15 = *(_QWORD *)(v13 - 25);
        v16 = *(_QWORD *)(v13 - 17);
        v17 = *(_QWORD *)(v13 - 9);
        v18 = *(v13 - 1);
        v31 = *((_OWORD *)v13 + 4);
        v32 = *((_OWORD *)v13 + 5);
        v29 = *((_OWORD *)v13 + 2);
        v30 = *((_OWORD *)v13 + 3);
        v35 = *((_OWORD *)v13 + 8);
        v36 = *((_OWORD *)v13 + 9);
        v33 = *((_OWORD *)v13 + 6);
        v34 = *((_OWORD *)v13 + 7);
        v40 = v13[208];
        v38 = *((_OWORD *)v13 + 11);
        v39 = *((_OWORD *)v13 + 12);
        v37 = *((_OWORD *)v13 + 10);
        v27 = *(_OWORD *)v13;
        v28 = *((_OWORD *)v13 + 1);
        if ((v18 & 1) == 0)
        {
          CMTime.seconds.getter();
          v20 = v19;
          CMTime.seconds.getter();
          if (v20 - v21 < a1)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
            v23 = *(_QWORD *)(v14 + 16);
            v22 = *(_QWORD *)(v14 + 24);
            if (v23 >= v22 >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
            *(_QWORD *)(v14 + 16) = v23 + 1;
            v24 = v14 + 272 * v23;
            *(_OWORD *)(v24 + 32) = v41;
            *(_OWORD *)(v24 + 48) = v42;
            *(_QWORD *)(v24 + 64) = v15;
            *(_QWORD *)(v24 + 72) = v16;
            *(_QWORD *)(v24 + 80) = v17;
            *(_BYTE *)(v24 + 88) = v18;
            *(_OWORD *)(v24 + 105) = v28;
            *(_OWORD *)(v24 + 89) = v27;
            *(_OWORD *)(v24 + 169) = v32;
            *(_OWORD *)(v24 + 153) = v31;
            *(_OWORD *)(v24 + 137) = v30;
            *(_OWORD *)(v24 + 121) = v29;
            *(_OWORD *)(v24 + 233) = v36;
            *(_OWORD *)(v24 + 217) = v35;
            *(_OWORD *)(v24 + 201) = v34;
            *(_OWORD *)(v24 + 185) = v33;
            *(_BYTE *)(v24 + 297) = v40;
            *(_OWORD *)(v24 + 281) = v39;
            *(_OWORD *)(v24 + 265) = v38;
            *(_OWORD *)(v24 + 249) = v37;
          }
        }
        if (!v12)
          break;
        --v12;
        v13 += 272;
      }
      result = swift_bridgeObjectRelease_n();
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v14 = MEMORY[0x24BEE4AF8];
    }
    *a5 = (char *)v14;
  }
  else
  {
    while (v8)
    {
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (unint64_t)(v8 - 1) > *((_QWORD *)v7 + 3) >> 1)
        v7 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, v7);
      v11 = *((_QWORD *)v7 + 2);
      if (!v11)
        goto LABEL_23;
      memmove(v7 + 32, v7 + 304, 272 * v11 - 272);
      v8 = v11 - 1;
      *((_QWORD *)v7 + 2) = v11 - 1;
      if (v11 - 1 <= a6)
        goto LABEL_8;
    }
    __break(1u);
LABEL_23:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(char a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  __int16 v49;
  int v50;
  int v51;
  __int128 v52;
  int v53;
  unsigned __int8 v54;
  __int16 v55;
  int v56;
  __int16 v57;
  unsigned __int8 v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  unsigned __int8 v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  _QWORD *v67;
  char v68;
  void *v69;
  void *v70;
  int v71;
  char v72;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  void *v110;
  _QWORD aBlock[6];
  __int16 v112;
  unsigned __int8 v113;
  __int16 v114;
  unsigned __int8 v115;
  __int16 v116;
  unsigned __int8 v117;
  __int16 v118;
  unsigned __int8 v119;
  __int16 v120;
  unsigned __int8 v121;
  __int16 v122;
  unsigned __int8 v123;
  int v124;
  __int16 v125;
  __int16 v126;
  unsigned __int8 v127;
  __int16 v128;
  unsigned __int8 v129;
  __int16 v130;
  unsigned __int8 v131;
  __int16 v132;
  unsigned __int8 v133;
  _BYTE v134[19];
  unsigned __int8 v135;
  __int16 v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  __int16 v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  _DWORD v142[2];
  unsigned __int8 v143;
  _DWORD v144[2];
  unsigned __int8 v145;
  __int16 v146;
  unsigned __int8 v147;
  unsigned __int8 v148;

  result = 0;
  v6 = *a2;
  v7 = a2[1];
  v92 = *((_WORD *)a2 + 1);
  v8 = *(_QWORD *)(a2 + 4);
  v9 = *(_QWORD *)(a2 + 12);
  v10 = *(_QWORD *)(a2 + 20);
  v148 = a2[28];
  v11 = *(_WORD *)(a2 + 29);
  v147 = a2[31];
  v146 = v11;
  v12 = *((_QWORD *)a2 + 4);
  v13 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)a2 + 6);
  v145 = a2[56];
  v15 = *(_DWORD *)(a2 + 57);
  *(_DWORD *)((char *)v144 + 3) = *((_DWORD *)a2 + 15);
  v144[0] = v15;
  v16 = *((_QWORD *)a2 + 8);
  v143 = a2[72];
  v17 = *(_DWORD *)(a2 + 73);
  *(_DWORD *)((char *)v142 + 3) = *((_DWORD *)a2 + 19);
  v142[0] = v17;
  v100 = *((_QWORD *)a2 + 10);
  v141 = a2[88];
  LOWORD(v17) = *(_WORD *)(a2 + 89);
  v140 = a2[91];
  v139 = v17;
  v18 = *((_DWORD *)a2 + 23);
  v138 = a2[96];
  LOWORD(v17) = *(_WORD *)(a2 + 97);
  v137 = a2[99];
  v136 = v17;
  v19 = *((_DWORD *)a2 + 25);
  v135 = a2[104];
  v20 = *(_OWORD *)(a2 + 105);
  v21 = *((_DWORD *)a2 + 31);
  *(_DWORD *)&v134[15] = *((_DWORD *)a2 + 30);
  *(_OWORD *)v134 = v20;
  v109 = a2[128];
  LOWORD(v17) = *(_WORD *)(a2 + 129);
  v133 = a2[131];
  v132 = v17;
  v22 = *((_DWORD *)a2 + 33);
  v108 = a2[136];
  LOWORD(v17) = *(_WORD *)(a2 + 137);
  v131 = a2[139];
  v130 = v17;
  v23 = *((_DWORD *)a2 + 35);
  v107 = a2[144];
  LOWORD(v17) = *(_WORD *)(a2 + 145);
  v129 = a2[147];
  v128 = v17;
  v24 = *((_DWORD *)a2 + 37);
  v106 = a2[152];
  LOWORD(v17) = *(_WORD *)(a2 + 153);
  v127 = a2[155];
  v126 = v17;
  v25 = *((_DWORD *)a2 + 39);
  v105 = a2[160];
  v26 = a2[161];
  v125 = *((_WORD *)a2 + 83);
  v124 = *(_DWORD *)(a2 + 162);
  v123 = a2[219];
  v122 = *(_WORD *)(a2 + 217);
  v121 = a2[227];
  v120 = *(_WORD *)(a2 + 225);
  v119 = a2[235];
  v118 = *(_WORD *)(a2 + 233);
  v117 = a2[243];
  v116 = *(_WORD *)(a2 + 241);
  v115 = a2[251];
  v114 = *(_WORD *)(a2 + 249);
  v113 = a2[259];
  v112 = *(_WORD *)(a2 + 257);
  v93 = *((_QWORD *)a2 + 21);
  v94 = *((_QWORD *)a2 + 22);
  v95 = *((_QWORD *)a2 + 23);
  v96 = *((_QWORD *)a2 + 24);
  v97 = *((_QWORD *)a2 + 25);
  v27 = a2[216];
  v99 = *((_DWORD *)a2 + 55);
  v28 = a2[224];
  v98 = *((_DWORD *)a2 + 57);
  v29 = a2[232];
  v102 = *((_DWORD *)a2 + 59);
  v104 = a2[240];
  v30 = *((_DWORD *)a2 + 61);
  v103 = a2[248];
  v101 = *((_DWORD *)a2 + 63);
  if (v6 != 11 && v7 != 2)
  {
    v91 = *((_QWORD *)a2 + 26);
    if ((v145 & 1) != 0 || (v148 & 1) != 0 || (v138 & 1) != 0)
      return 0;
    result = 0;
    if ((v135 & 1) == 0
      && (v109 & 1) == 0
      && (v108 & 1) == 0
      && (v107 & 1) == 0
      && (v106 & 1) == 0
      && (v105 & 1) == 0
      && v26 != 3)
    {
      v87 = a2[256];
      v83 = a2[264];
      v31 = a2[265];
      v89 = v8;
      v90 = v10;
      v88 = v9;
      v85 = v12;
      v86 = v14;
      v84 = v13;
      v80 = v19;
      v81 = v18;
      v72 = a1;
      v78 = v22;
      v79 = v21;
      v76 = v24;
      v77 = v23;
      v74 = *((_DWORD *)a2 + 65);
      v75 = v25;
      type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      v32 = (void *)NSString.init(stringLiteral:)();
      if ((v27 & 1) != 0
        || (v28 & 1) != 0
        || (v29 & 1) != 0
        || (v104 & 1) != 0
        || (v103 & 1) != 0
        || (v87 & 1) != 0
        || (v83 & 1) != 0
        || v31 == 6)
      {

      }
      else
      {
        v70 = v32;
        v68 = v31;
        MakeFrameRejectorReason.rawValue.getter(v31);
        v69 = v33;
        v34 = *(_QWORD **)a3;
        if (*(_QWORD *)(*(_QWORD *)a3 + 16))
        {
          v35 = *(_QWORD *)(*(_QWORD *)a3 + 16);
          swift_bridgeObjectRetain();
          v67 = v34;
          v36 = (char *)v34 + 44;
          v37 = v35;
          do
          {
            if ((v36[16] & 1) == 0 && (v36[44] & 1) == 0)
            {
              v38 = v37;
              CMTime.seconds.getter();
              v40 = v39;
              CMTime.seconds.getter();
              v37 = v38;
              if (v40 <= v41)
              {
                CMTime.seconds.getter();
                v43 = v42;
                CMTime.seconds.getter();
                v37 = v38;
                if (v44 <= v43)
                {

                  swift_bridgeObjectRelease();
                  return 0;
                }
              }
            }
            v36 += 272;
            --v37;
          }
          while (v37);
          v34 = v67;
          swift_bridgeObjectRelease();
        }
        v71 = v30;
        v45 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        v47 = v45[2];
        v46 = v45[3];
        if (v47 >= v46 >> 1)
          v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v45);
        v48 = &v45[34 * v47];
        *((_BYTE *)v48 + 32) = v6;
        v48 += 4;
        v45[2] = v47 + 1;
        *((_BYTE *)v48 + 1) = v7;
        *((_WORD *)v48 + 1) = v92;
        *(_QWORD *)((char *)v48 + 4) = v89;
        *(_QWORD *)((char *)v48 + 12) = v88;
        *(_QWORD *)((char *)v48 + 20) = v90;
        *((_BYTE *)v48 + 28) = v148;
        v49 = v146;
        *((_BYTE *)v48 + 31) = v147;
        *(_WORD *)((char *)v48 + 29) = v49;
        v48[4] = v85;
        v48[5] = v84;
        v48[6] = v86;
        *((_BYTE *)v48 + 56) = v145;
        v50 = v144[0];
        *((_DWORD *)v48 + 15) = *(_DWORD *)((char *)v144 + 3);
        *(_DWORD *)((char *)v48 + 57) = v50;
        v48[8] = v16;
        *((_BYTE *)v48 + 72) = v143;
        v51 = v142[0];
        *((_DWORD *)v48 + 19) = *(_DWORD *)((char *)v142 + 3);
        *(_DWORD *)((char *)v48 + 73) = v51;
        v48[10] = v100;
        *((_BYTE *)v48 + 88) = v141;
        LOWORD(v51) = v139;
        *((_BYTE *)v48 + 91) = v140;
        *(_WORD *)((char *)v48 + 89) = v51;
        *((_DWORD *)v48 + 23) = v81;
        *((_BYTE *)v48 + 96) = v138;
        LOWORD(v51) = v136;
        *((_BYTE *)v48 + 99) = v137;
        *(_WORD *)((char *)v48 + 97) = v51;
        *((_DWORD *)v48 + 25) = v80;
        *((_BYTE *)v48 + 104) = v135;
        v52 = *(_OWORD *)v134;
        v53 = *(_DWORD *)&v134[15];
        *((_BYTE *)v48 + 128) = v109;
        v54 = v133;
        *(_WORD *)((char *)v48 + 129) = v132;
        *((_BYTE *)v48 + 131) = v54;
        *((_BYTE *)v48 + 136) = v108;
        v55 = v130;
        *((_BYTE *)v48 + 139) = v131;
        *(_WORD *)((char *)v48 + 137) = v55;
        *((_BYTE *)v48 + 144) = v107;
        LOBYTE(v55) = v129;
        *(_WORD *)((char *)v48 + 145) = v128;
        *((_BYTE *)v48 + 147) = v55;
        *((_BYTE *)v48 + 152) = v106;
        LOBYTE(v55) = v127;
        *(_WORD *)((char *)v48 + 153) = v126;
        *((_DWORD *)v48 + 31) = v79;
        *((_DWORD *)v48 + 33) = v78;
        *((_DWORD *)v48 + 35) = v77;
        *((_DWORD *)v48 + 37) = v76;
        *((_BYTE *)v48 + 155) = v55;
        *((_DWORD *)v48 + 39) = v75;
        *((_BYTE *)v48 + 160) = v105;
        *((_BYTE *)v48 + 161) = v26;
        v56 = v124;
        v57 = v125;
        *((_BYTE *)v48 + 216) = v27;
        v58 = v123;
        *(_WORD *)((char *)v48 + 217) = v122;
        *((_BYTE *)v48 + 219) = v58;
        *((_BYTE *)v48 + 224) = v28;
        v59 = v120;
        *((_BYTE *)v48 + 227) = v121;
        *(_WORD *)((char *)v48 + 225) = v59;
        *((_BYTE *)v48 + 232) = v29;
        v60 = v118;
        *((_BYTE *)v48 + 235) = v119;
        *(_WORD *)((char *)v48 + 233) = v60;
        *((_BYTE *)v48 + 240) = v104;
        v61 = v116;
        *((_BYTE *)v48 + 243) = v117;
        *(_WORD *)((char *)v48 + 241) = v61;
        *((_BYTE *)v48 + 248) = v103;
        LOBYTE(v61) = v115;
        *(_WORD *)((char *)v48 + 249) = v114;
        *((_BYTE *)v48 + 251) = v61;
        *((_BYTE *)v48 + 256) = v87;
        v62 = v113;
        *(_WORD *)((char *)v48 + 257) = v112;
        *((_DWORD *)v48 + 30) = v53;
        *((_WORD *)v48 + 83) = v57;
        *(_DWORD *)((char *)v48 + 162) = v56;
        *((_BYTE *)v48 + 259) = v62;
        *((_BYTE *)v48 + 264) = v83;
        *((_BYTE *)v48 + 265) = v68;
        *(_OWORD *)((char *)v48 + 105) = v52;
        v48[21] = v93;
        v48[22] = v94;
        v48[23] = v95;
        v48[24] = v96;
        v48[25] = v97;
        v48[26] = v91;
        *((_DWORD *)v48 + 55) = v99;
        *((_DWORD *)v48 + 57) = v98;
        *((_DWORD *)v48 + 59) = v102;
        *((_DWORD *)v48 + 61) = v71;
        *((_DWORD *)v48 + 63) = v101;
        *((_DWORD *)v48 + 65) = v74;
        *(_QWORD *)a3 = v45;
        *(_QWORD *)(a4 + 64) = v16;
        *(_BYTE *)(a4 + 72) = v143;
        *(_QWORD *)(a4 + 80) = v100;
        *(_BYTE *)(a4 + 88) = v141;
        if ((v72 & 1) != 0)
        {
          v110 = (void *)MEMORY[0x2426372E8](0xD00000000000001DLL);
          v63 = swift_allocObject();
          *(_BYTE *)(v63 + 16) = v7 & 1;
          *(_QWORD *)(v63 + 20) = v85;
          *(_QWORD *)(v63 + 28) = v84;
          *(_QWORD *)(v63 + 36) = v86;
          *(_QWORD *)(v63 + 44) = v89;
          *(_QWORD *)(v63 + 52) = v88;
          *(_QWORD *)(v63 + 60) = v90;
          *(_DWORD *)(v63 + 68) = v81;
          *(_DWORD *)(v63 + 72) = v80;
          *(_DWORD *)(v63 + 76) = v79;
          *(_BYTE *)(v63 + 80) = v6;
          *(_DWORD *)(v63 + 84) = v78;
          *(_DWORD *)(v63 + 88) = v77;
          *(_DWORD *)(v63 + 92) = v76;
          *(_DWORD *)(v63 + 96) = v75;
          *(_QWORD *)(v63 + 104) = v70;
          *(_QWORD *)(v63 + 112) = v93;
          *(_QWORD *)(v63 + 120) = v94;
          *(_QWORD *)(v63 + 128) = v95;
          *(_QWORD *)(v63 + 136) = v96;
          *(_QWORD *)(v63 + 144) = v97;
          *(_QWORD *)(v63 + 152) = v91;
          *(_DWORD *)(v63 + 160) = v99;
          *(_DWORD *)(v63 + 164) = v98;
          *(_DWORD *)(v63 + 168) = v102;
          *(_DWORD *)(v63 + 172) = v71;
          *(_DWORD *)(v63 + 176) = v101;
          *(_DWORD *)(v63 + 180) = v74;
          *(_QWORD *)(v63 + 184) = v69;
          *(_QWORD *)(v63 + 192) = 0xD00000000000001DLL;
          *(_QWORD *)(v63 + 200) = 0x800000023D9CC910;
          aBlock[4] = partial apply for closure #1 in static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:);
          aBlock[5] = v63;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
          aBlock[3] = &block_descriptor_20;
          v64 = _Block_copy(aBlock);
          v65 = v70;
          v66 = v69;
          swift_release();
          AnalyticsSendEventLazy();

          _Block_release(v64);
          return 1;
        }

      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_23D8D40AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)()
{
  uint64_t v0;
  uint64_t v2;

  LODWORD(v2) = *(_DWORD *)(v0 + 180);
  return closure #1 in static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 20), *(_QWORD *)(v0 + 28), *(_QWORD *)(v0 + 36), *(_QWORD *)(v0 + 44), *(_QWORD *)(v0 + 52), *(_QWORD *)(v0 + 60), *(unsigned __int8 *)(v0 + 80), *(void **)(v0 + 104), v0 + 112, *(_QWORD *)(v0 + 164), *(_QWORD *)(v0 + 172), v2, *(void **)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

double _s5Hands26PinchRecoveryAnalyticsDataVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 768;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 264) = 0;
  return result;
}

uint64_t outlined init with take of PinchRecoveryAnalyticsData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for MakeFrameRejectorReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23D8D425C + 4 * byte_23D9BD73B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23D8D4290 + 4 * byte_23D9BD736[v4]))();
}

uint64_t sub_23D8D4290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8D4298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8D42A0);
  return result;
}

uint64_t sub_23D8D42AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8D42B4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23D8D42B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8D42C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MakeFrameRejectorReason()
{
  return &type metadata for MakeFrameRejectorReason;
}

uint64_t storeEnumTagSinglePayload for LightConditionOnPinch(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23D8D4328 + 4 * byte_23D9BD745[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23D8D435C + 4 * byte_23D9BD740[v4]))();
}

uint64_t sub_23D8D435C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8D4364(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8D436CLL);
  return result;
}

uint64_t sub_23D8D4378(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8D4380);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23D8D4384(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8D438C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LightConditionOnPinch()
{
  return &type metadata for LightConditionOnPinch;
}

ValueMetadata *type metadata accessor for LightConditionData()
{
  return &type metadata for LightConditionData;
}

unint64_t lazy protocol witness table accessor for type LightConditionOnPinch and conformance LightConditionOnPinch()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LightConditionOnPinch and conformance LightConditionOnPinch;
  if (!lazy protocol witness table cache variable for type LightConditionOnPinch and conformance LightConditionOnPinch)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for LightConditionOnPinch, &type metadata for LightConditionOnPinch);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LightConditionOnPinch and conformance LightConditionOnPinch);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakeFrameRejectorReason and conformance MakeFrameRejectorReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MakeFrameRejectorReason and conformance MakeFrameRejectorReason;
  if (!lazy protocol witness table cache variable for type MakeFrameRejectorReason and conformance MakeFrameRejectorReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MakeFrameRejectorReason, &type metadata for MakeFrameRejectorReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeFrameRejectorReason and conformance MakeFrameRejectorReason);
  }
  return result;
}

uint64_t specialized LightConditionOnPinch.init(rawValue:)(void *a1)
{
  id v2;
  void *v3;
  char v4;
  id v6;
  void *v7;
  char v8;
  id v9;
  void *v10;
  char v11;

  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v2 = a1;
  v3 = (void *)NSString.init(stringLiteral:)();
  v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) != 0)
  {

    return 0;
  }
  else
  {
    v6 = v2;
    v7 = (void *)NSString.init(stringLiteral:)();
    v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) != 0)
    {

      return 1;
    }
    else
    {
      v9 = v6;
      v10 = (void *)NSString.init(stringLiteral:)();
      v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t specialized MakeFrameRejectorReason.init(rawValue:)(void *a1)
{
  id v2;
  void *v3;
  char v4;
  id v6;
  void *v7;
  char v8;
  id v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  char v14;
  id v15;
  void *v16;
  char v17;
  id v18;
  void *v19;
  char v20;

  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v2 = a1;
  v3 = (void *)NSString.init(stringLiteral:)();
  v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) != 0)
  {

    return 0;
  }
  else
  {
    v6 = v2;
    v7 = (void *)NSString.init(stringLiteral:)();
    v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) != 0)
    {

      return 1;
    }
    else
    {
      v9 = v6;
      v10 = (void *)NSString.init(stringLiteral:)();
      v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) != 0)
      {

        return 2;
      }
      else
      {
        v12 = v9;
        v13 = (void *)NSString.init(stringLiteral:)();
        v14 = static NSObject.== infix(_:_:)();

        if ((v14 & 1) != 0)
        {

          return 3;
        }
        else
        {
          v15 = v12;
          v16 = (void *)NSString.init(stringLiteral:)();
          v17 = static NSObject.== infix(_:_:)();

          if ((v17 & 1) != 0)
          {

            return 4;
          }
          else
          {
            v18 = v15;
            v19 = (void *)NSString.init(stringLiteral:)();
            v20 = static NSObject.== infix(_:_:)();

            if ((v20 & 1) != 0)
              return 5;
            else
              return 6;
          }
        }
      }
    }
  }
}

BOOL static HandsSessionError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void HandsSessionError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int HandsSessionError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t HandsSession.__allocating_init(settings:)(unsigned __int8 *a1)
{
  int v1;
  int v2;
  float v3;
  float v4;
  uint64_t v5;
  id v6;
  double v7;
  uint64_t v8;
  id v10;

  v1 = *a1;
  v2 = *((_DWORD *)a1 + 1);
  v3 = *((float *)a1 + 2);
  v4 = *((float *)a1 + 3);
  v5 = a1[16];
  v6 = objc_msgSend(objc_allocWithZone((Class)HandsKitConfig), sel_init);
  v10 = v6;
  ConfigNames.mono_pipeline(_:)(&v10);
  if (v1 != 1)
  {
    if (v3 <= 0.0)
      goto LABEL_3;
LABEL_7:
    *(float *)&v7 = v3;
    objc_msgSend(v6, sel_setWristStdDevLowerThreshold_, v7);
    if (v4 <= 0.0)
      goto LABEL_5;
    goto LABEL_4;
  }
  specialized static HandsSession.enableDebugLogging(level:)(v2);
  if (v3 > 0.0)
    goto LABEL_7;
LABEL_3:
  if (v4 > 0.0)
  {
LABEL_4:
    *(float *)&v7 = v4;
    objc_msgSend(v6, sel_setWristStdDevUpperThreshold_, v7);
  }
LABEL_5:
  objc_msgSend(v6, sel_setEnableGracefulFailureHandOutOfFOV_, v5);
  type metadata accessor for HandsSession();
  swift_allocObject();
  v8 = specialized HandsSession.init(config:)(v6);

  *(_BYTE *)(v8 + 104) = v1;
  *(_DWORD *)(v8 + 108) = v2;
  *(float *)(v8 + 112) = v3;
  *(float *)(v8 + 116) = v4;
  *(_BYTE *)(v8 + 120) = v5;
  return v8;
}

uint64_t HandsSession.__allocating_init(config:)(void *a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = specialized HandsSession.init(config:)(a1);

  return v2;
}

uint64_t type metadata accessor for HandsSession()
{
  return objc_opt_self();
}

uint64_t HandsSession.init(config:)(void *a1)
{
  uint64_t v2;

  v2 = specialized HandsSession.init(config:)(a1);

  return v2;
}

uint64_t HandsSession.deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v9;
  uint64_t v10[4];
  __int128 aBlock;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t (*v14)();
  uint64_t v15;

  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  v1 = (void *)static HandyLoggerNeo._dispatchQ;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = specialized closure #1 in static HandyLoggerNeo.detachAllLoggers();
  *(_QWORD *)(v2 + 24) = 0;
  v14 = _sIg_Ieg_TRTA_0;
  v15 = v2;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v12 = thunk for @escaping @callee_guaranteed () -> ();
  v13 = &block_descriptor_21;
  v3 = _Block_copy(&aBlock);
  v4 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v4, v3);

  _Block_release(v3);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    aBlock = xmmword_23D9AB690;
    v12 = 0;
    v13 = 0;
    v6 = mach_absolute_time();
    v7 = type metadata accessor for HandsKitPipelineEvent(0);
    v10[3] = v7;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v10);
    UnknownStorage.init()();
    v9 = (uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v7 + 32));
    *v9 = 0;
    v9[1] = 0;
    *boxed_opaque_existential_0 = v6;
    boxed_opaque_existential_0[1] = 2;
    *((_BYTE *)boxed_opaque_existential_0 + 16) = 1;
    boxed_opaque_existential_0[3] = 1;
    *((_BYTE *)boxed_opaque_existential_0 + 32) = 1;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9D7660, 110, (uint64_t *)&aBlock, (uint64_t)v10, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    outlined init with take of ImageData?(v0 + 144, (uint64_t)&aBlock, &demangling cache variable for type metadata for HandsKitData?);
    outlined release of HandsKitData?(&aBlock, outlined consume of HandsKitData?);
    swift_release();

    return v0;
  }
  return result;
}

uint64_t HandsSession.__deallocating_deinit()
{
  HandsSession.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall HandsSession.reset()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  HandsKitConfig *v3;
  void *v4;
  uint64_t v5;
  HandsKitConfig *v6;
  HandsKitConfig *v7;
  void *v8;
  id v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v25;
  uint64_t v26[4];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[560];
  _QWORD v31[69];

  v1 = (_QWORD *)v0;
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 72) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 80) = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 88) = v2;
  swift_bridgeObjectRelease();
  v3 = (HandsKitConfig *)*(id *)(v0 + 96);
  Detection2DPipeline.reconfig(_:)(v3);

  v4 = *(void **)(v0 + 96);
  v5 = MEMORY[0x24BEE0D00];
  v31[3] = MEMORY[0x24BEE0D00];
  v31[0] = 0xD000000000000023;
  v31[1] = 0x800000023D9CB700;
  v6 = v4;
  specialized static HLog.I(file:function:line:_:_:)(0xD00000000000005ELL, 0x800000023D9CB6A0, 54, (uint64_t)v31, (uint64_t)v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
  Tracking3D.reconfigTracking(_:)(v6);

  v7 = (HandsKitConfig *)*(id *)(v0 + 96);
  Pose.reconfig(_:)(v7);

  v8 = *(void **)(v0 + 96);
  type metadata accessor for OperationalEnvelopeProcess();
  swift_allocObject();
  *(_QWORD *)(v0 + 40) = OperationalEnvelopeProcess.init(_:)(v8);
  swift_release();
  v9 = *(id *)(v0 + 96);
  v10 = specialized static GesturePipelineFactory.makeGesturePipeline(_:)(v9);

  v1[6] = v10;
  swift_release();
  v11 = (void *)v1[12];
  type metadata accessor for OutOfEnvelopeFilter();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v2);
  *(_QWORD *)(v12 + 24) = v11;
  v1[7] = v12;
  v13 = v11;
  swift_release();
  v14 = v1[8];
  if (v14)
  {
    v15 = (void *)v1[12];
    swift_retain();
    v16 = v15;
    objc_msgSend(v16, sel_MonoThumbIndexTapActivationThreshold);
    *(_DWORD *)(v14 + 16) = v17;
    objc_msgSend(v16, sel_MonoThumbIndexTapDeactivationThreshold);
    *(_DWORD *)(v14 + 20) = v18;
    v19 = MEMORY[0x24BEE4B08];
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEE4B08];
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v14 + 32) = v19;
    swift_release();

    swift_bridgeObjectRelease();
  }
  _s5Hands0A7KitDataVSgWOi0_(v30);
  v20 = (uint64_t)(v1 + 18);
  outlined init with take of ImageData?(v20, (uint64_t)v31, &demangling cache variable for type metadata for HandsKitData?);
  outlined init with take of ImageData?((uint64_t)v30, v20, &demangling cache variable for type metadata for HandsKitData?);
  outlined release of HandsKitData?(v31, outlined consume of HandsKitData?);
  v29 = v5;
  *(_QWORD *)&v27 = 0xD00000000000002ALL;
  *((_QWORD *)&v27 + 1) = 0x800000023D9CB730;
  v21 = MEMORY[0x24BEE4AF8];
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9D7660, 134, (uint64_t)&v27, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v27);
  v27 = xmmword_23D9AB690;
  v28 = 0;
  v29 = 0;
  v22 = mach_absolute_time();
  v23 = type metadata accessor for HandsKitPipelineEvent(0);
  v26[3] = v23;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v26);
  UnknownStorage.init()();
  v25 = (uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v23 + 32));
  *v25 = 0;
  v25[1] = 0;
  *boxed_opaque_existential_0 = v22;
  boxed_opaque_existential_0[1] = 0;
  *((_BYTE *)boxed_opaque_existential_0 + 16) = 1;
  boxed_opaque_existential_0[3] = 1;
  *((_BYTE *)boxed_opaque_existential_0 + 32) = 1;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9D7660, 135, (uint64_t *)&v27, (uint64_t)v26, v21);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v26);
}

uint64_t HandsSession.run(input:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = *a2;
  return swift_task_switch();
}

uint64_t HandsSession.run(input:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v5;

  v5 = *(_OWORD *)(v2 + 32);
  v3 = &v5;
  HandsSession.runSync(input:)(*(Hands::HandsInput *)(&a2 - 1));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t HandsSession.run(withInput:completion:)(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[70];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchTime();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v20, a1, 0x228uLL);
  static DispatchTime.distantFuture.getter();
  MEMORY[0x242637708](v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  memcpy(v18 + 4, v20, 0x228uLL);
  v18[73] = v4;
  v18[74] = a2;
  v18[75] = a3;
  outlined retain of HandsKitData(v20);
  swift_retain();
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in HandsSession.run(withInput:completion:), (uint64_t)v18);
  return swift_release();
}

uint64_t closure #1 in HandsSession.run(withInput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[143] = a7;
  v7[142] = a6;
  v7[141] = a5;
  v7[71] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in HandsSession.run(withInput:completion:)()
{
  uint64_t v0;
  _OWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  __CVBuffer *v28;
  OSType PixelFormatType;
  __CVBuffer *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __CVBuffer *v40;
  uint64_t v41;
  uint64_t v42;
  __CVBuffer *v43;
  __CVBuffer *v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE *v57;
  uint64_t (*v58)(void);
  void (*v59)(_BYTE *);
  _QWORD *v60;
  uint64_t v61;
  int64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  unint64_t v77;
  int64_t v78;
  _QWORD *v79;
  uint64_t v80;
  __CVBuffer *v81;
  _BYTE __dst[576];

  v1 = (_OWORD *)(v0 + 16);
  v2 = (_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 568) + 200);
  v4 = *(_QWORD *)(v3 + 64);
  v61 = v3 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v3 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & v4;
  v62 = (unint64_t)(63 - v6) >> 6;
  v64 = *(_QWORD *)(*(_QWORD *)(v0 + 568) + 200);
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v80 = v0 + 16;
  v63 = (__int128 *)(v0 + 576);
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v7));
  v12 = (v7 - 1) & v7;
  for (i = v11 | (v9 << 6); ; i = __clz(__rbit64(v15)) + (v9 << 6))
  {
    v17 = (__int128 *)(*(_QWORD *)(v64 + 56) + 192 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v1[3] = v17[3];
    v21 = v17[4];
    v22 = v17[5];
    v23 = v17[7];
    v1[6] = v17[6];
    v1[7] = v23;
    v1[4] = v21;
    v1[5] = v22;
    v24 = v17[8];
    v25 = v17[9];
    v26 = v17[11];
    v1[10] = v17[10];
    v1[11] = v26;
    v1[8] = v24;
    v1[9] = v25;
    v1[1] = v19;
    v1[2] = v20;
    *v1 = v18;
    v27 = *(void **)(v0 + 72);
    if (!v27)
    {
      outlined retain of ImageData((uint64_t)v1);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type HandsSessionError and conformance HandsSessionError();
      swift_allocError();
      *v57 = 0;
      swift_willThrow();
      outlined release of ImageData((uint64_t)v1);
      swift_release();
      v58 = *(uint64_t (**)(void))(v0 + 8);
      return v58();
    }
    outlined retain of ImageData((uint64_t)v1);
    v28 = v27;
    swift_retain();
    PixelFormatType = CVPixelBufferGetPixelFormatType(v28);
    v78 = v9;
    v79 = v10;
    v77 = v12;
    v81 = v28;
    if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
    {
      v31 = ImageToGreyConverter.luminanceFromCbCr(image:)(v28);
    }
    else
    {
      if (PixelFormatType == 1278226488)
      {
        v30 = v28;
        goto LABEL_26;
      }
      v31 = ImageToGreyConverter.luminanceFromColor(image:)(v28);
    }
    v30 = (__CVBuffer *)v31;
LABEL_26:
    swift_release();
    v66 = *(_QWORD *)(v0 + 48);
    v67 = *(_QWORD *)(v0 + 40);
    v32 = *(_QWORD *)(v0 + 80);
    v72 = *(_QWORD *)(v0 + 88);
    v70 = *(_DWORD *)(v0 + 100);
    v71 = *(_BYTE *)(v0 + 96);
    v33 = *(_QWORD *)(v0 + 112);
    v68 = *(_QWORD *)(v0 + 64);
    v69 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 120);
    v35 = *(_QWORD *)(v0 + 128);
    v37 = *(_QWORD *)(v0 + 136);
    v36 = *(_QWORD *)(v0 + 144);
    v73 = *(_OWORD *)(v0 + 152);
    v76 = *(_OWORD *)(v0 + 168);
    v74 = *(_QWORD *)(v0 + 192);
    v75 = *(_QWORD *)(v0 + 184);
    v38 = *(_QWORD *)(v0 + 200);
    v39 = *(void **)(v0 + 16);
    v65 = *(_QWORD *)(v0 + 24);
    v40 = v30;
    v41 = *(_QWORD *)(v0 + 32);
    v42 = *(_QWORD *)(v0 + 56);
    outlined retain of ImageData(v80);
    swift_bridgeObjectRetain();
    v43 = v40;
    swift_retain();
    outlined copy of Data?(v34, v35);
    outlined copy of Data?(v37, v36);

    v44 = v43;
    *(_QWORD *)(v0 + 576) = v30;
    *(_QWORD *)(v0 + 584) = v65;
    *(_QWORD *)(v0 + 592) = v41;
    *(_QWORD *)(v0 + 600) = v67;
    *(_QWORD *)(v0 + 608) = v66;
    *(_QWORD *)(v0 + 616) = v42;
    *(_QWORD *)(v0 + 624) = v68;
    *(_QWORD *)(v0 + 632) = v30;
    *(_QWORD *)(v0 + 640) = v32;
    *(_QWORD *)(v0 + 648) = v72;
    *(_BYTE *)(v0 + 656) = v71;
    *(_DWORD *)(v0 + 660) = v70;
    *(_QWORD *)(v0 + 664) = v69;
    *(_QWORD *)(v0 + 672) = v33;
    *(_QWORD *)(v0 + 680) = v34;
    *(_QWORD *)(v0 + 688) = v35;
    *(_QWORD *)(v0 + 696) = v37;
    *(_QWORD *)(v0 + 704) = v36;
    *(_OWORD *)(v0 + 712) = v73;
    *(_OWORD *)(v0 + 728) = v76;
    *(_QWORD *)(v0 + 744) = v75;
    *(_QWORD *)(v0 + 752) = v74;
    *(_QWORD *)(v0 + 760) = v38;
    v2 = (_QWORD *)(v0 + 576);
    outlined retain of ImageData((uint64_t)v63);
    outlined consume of Data?(v37, v36);
    outlined consume of Data?(v34, v35);
    swift_bridgeObjectRelease();
    swift_release();

    v10 = v79;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, v79);
    v7 = v77;
    v9 = v78;
    v46 = v10[2];
    v45 = v10[3];
    v1 = (_OWORD *)(v0 + 16);
    if (v46 >= v45 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v10);
    v10[2] = v46 + 1;
    v47 = &v10[24 * v46];
    v48 = *v63;
    v49 = *(_OWORD *)(v0 + 592);
    v50 = *(_OWORD *)(v0 + 624);
    v47[4] = *(_OWORD *)(v0 + 608);
    v47[5] = v50;
    v47[2] = v48;
    v47[3] = v49;
    v51 = *(_OWORD *)(v0 + 640);
    v52 = *(_OWORD *)(v0 + 656);
    v53 = *(_OWORD *)(v0 + 688);
    v47[8] = *(_OWORD *)(v0 + 672);
    v47[9] = v53;
    v47[6] = v51;
    v47[7] = v52;
    v54 = *(_OWORD *)(v0 + 704);
    v55 = *(_OWORD *)(v0 + 720);
    v56 = *(_OWORD *)(v0 + 752);
    v47[12] = *(_OWORD *)(v0 + 736);
    v47[13] = v56;
    v47[10] = v54;
    v47[11] = v55;

    outlined release of ImageData(v80);
    result = outlined release of ImageData((uint64_t)v63);
    if (v77)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
      break;
    if (v9 >= v62)
      goto LABEL_37;
    v15 = *(_QWORD *)(v61 + 8 * v9);
    if (!v15)
    {
      v16 = v9 + 1;
      if (v9 + 1 >= v62)
        goto LABEL_37;
      v15 = *(_QWORD *)(v61 + 8 * v16);
      if (v15)
        goto LABEL_16;
      v16 = v9 + 2;
      if (v9 + 2 >= v62)
        goto LABEL_37;
      v15 = *(_QWORD *)(v61 + 8 * v16);
      if (v15)
        goto LABEL_16;
      v16 = v9 + 3;
      if (v9 + 3 >= v62)
        goto LABEL_37;
      v15 = *(_QWORD *)(v61 + 8 * v16);
      if (v15)
      {
LABEL_16:
        v9 = v16;
        goto LABEL_17;
      }
      v16 = v9 + 4;
      if (v9 + 4 < v62)
      {
        v15 = *(_QWORD *)(v61 + 8 * v16);
        if (!v15)
        {
          while (1)
          {
            v9 = v16 + 1;
            if (__OFADD__(v16, 1))
              goto LABEL_40;
            if (v9 >= v62)
              goto LABEL_37;
            v15 = *(_QWORD *)(v61 + 8 * v9);
            ++v16;
            if (v15)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_37:
      swift_release();
      v59 = *(void (**)(_BYTE *))(v0 + 1136);
      v60 = *(_QWORD **)(v0 + 568);
      memcpy(__dst, v60, 0x228uLL);
      outlined retain of HandsKitData(v60);
      HandsKitData.init(updateData:withImages:)(__dst, (uint64_t)v10, v2);
      memcpy(__dst, v2, 0x228uLL);
      HandsSession.runHandsKit(withInput:)((uint64_t)__dst, (uint64_t)v1);
      OS_dispatch_semaphore.signal()();
      memcpy(__dst, v1, 0x228uLL);
      v59(__dst);
      outlined release of HandsKitData(v2);
      outlined release of HandsKitData(v1);
      v58 = *(uint64_t (**)(void))(v0 + 8);
      return v58();
    }
LABEL_17:
    v12 = (v15 - 1) & v15;
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

Hands::HandsOutput __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandsSession.runSync(input:)(Hands::HandsInput input)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *rawValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CVBuffer *v19;
  __CVBuffer *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  OSType PixelFormatType;
  __CVBuffer *v28;
  __CVBuffer *v29;
  Hands::HandsOutput result;
  __CVBuffer *v31;
  size_t Width;
  unsigned int v33;
  uint64_t v34;
  size_t Height;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  __CVBuffer *v45;
  int64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  uint64_t *v74;
  uint64_t v75[70];
  uint64_t v76[2];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[128];
  _QWORD v89[70];
  uint64_t v90[70];
  uint64_t v91[70];
  uint64_t v92[70];
  _OWORD v93[4];
  __CVBuffer *v94;

  v3 = v2;
  rawValue = (uint64_t *)input.images._rawValue;
  v74 = v1;
  v5 = type metadata accessor for DispatchTime();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *rawValue;
  v11 = rawValue[1];
  v12 = (unint64_t)*rawValue >> 62;
  if (!v12)
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_29:
    lazy protocol witness table accessor for type HandsSessionError and conformance HandsSessionError();
    swift_allocError();
    v15 = 2;
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  v62 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v62)
    goto LABEL_29;
LABEL_3:
  v13 = *(_QWORD *)(v11 + 16);
  if (!v13)
  {
    lazy protocol witness table accessor for type HandsSessionError and conformance HandsSessionError();
    swift_allocError();
    v15 = 3;
    goto LABEL_30;
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16 != *(_QWORD *)(v11 + 16))
      goto LABEL_6;
  }
  else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) != v13)
  {
LABEL_6:
    lazy protocol witness table accessor for type HandsSessionError and conformance HandsSessionError();
    swift_allocError();
    v15 = 4;
LABEL_30:
    *v14 = v15;
    return (Hands::HandsOutput)swift_willThrow();
  }
  v17 = v3;
  v18 = *(_QWORD *)(v3 + 704);
  static DispatchTime.distantFuture.getter();
  v69 = v18;
  MEMORY[0x242637708](v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 0xC000000000000001) != 0)
  {
    v20 = (__CVBuffer *)MEMORY[0x24263790C](0, v10);
    v19 = v94;
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_12;
    goto LABEL_32;
  }
  v19 = v94;
  if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v20 = (__CVBuffer *)*(id *)(v10 + 32);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_12:
  v21 = *(_QWORD *)(v11 + 32);
  v22 = *(unsigned int *)(v11 + 40);
  v67 = *(unsigned int *)(v11 + 44);
  v68 = v21;
  v23 = *(_QWORD *)(v11 + 48);
  v24 = *(unsigned __int8 *)(v11 + 64);
  v25 = *(_OWORD *)(v11 + 96);
  v93[0] = *(_OWORD *)(v11 + 80);
  v93[1] = v25;
  v26 = *(_OWORD *)(v11 + 112);
  v66 = *(__n128 *)(v11 + 128);
  v93[2] = v26;
  swift_retain();
  v94 = v20;
  PixelFormatType = CVPixelBufferGetPixelFormatType(v20);
  if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
  {
    v28 = v94;
    v29 = (__CVBuffer *)ImageToGreyConverter.luminanceFromCbCr(image:)(v94);
    if (!v19)
      goto LABEL_19;
LABEL_17:

    return (Hands::HandsOutput)swift_release();
  }
  if (PixelFormatType != 1278226488)
  {
    v28 = v94;
    v29 = (__CVBuffer *)ImageToGreyConverter.luminanceFromColor(image:)(v94);
    if (!v19)
      goto LABEL_19;
    goto LABEL_17;
  }
  v28 = v94;
  v29 = v94;
LABEL_19:
  v31 = v29;
  swift_release();
  Width = CVPixelBufferGetWidth(v28);
  if ((Width & 0x8000000000000000) != 0)
    goto LABEL_35;
  v33 = Width;
  if (HIDWORD(Width))
    goto LABEL_35;
  v34 = v23;
  Height = CVPixelBufferGetHeight(v94);
  if ((Height & 0x8000000000000000) != 0)
    goto LABEL_35;
  v64 = v17;
  if (HIDWORD(Height))
    goto LABEL_35;
  v36 = *(__n128 *)MEMORY[0x24BDAEE00];
  v72 = *(__n128 *)(MEMORY[0x24BDAEE00] + 16);
  v73 = v36;
  v37 = *(__n128 *)(MEMORY[0x24BDAEE00] + 32);
  v70 = *(__n128 *)(MEMORY[0x24BDAEE00] + 48);
  *((_QWORD *)&v38 + 1) = v70.n128_u64[1];
  v71 = v37;
  *(_QWORD *)&v38 = __PAIR64__(Height, v33);
  v65 = v38;
  v92[0] = v24;
  LOBYTE(v92[1]) = 1;
  type metadata accessor for ImageCalibrationData();
  swift_allocObject();
  v40 = v67;
  v39 = v68;
  v41 = ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(v93, v92, 0, 0, v68, v22 | (v67 << 32), v34, v66, v73, v72, v71, v70, *(double *)&v65);
  v42 = v34;
  v43 = v22;
  v44 = v41;
  v45 = v31;
  swift_retain();
  v46 = CVPixelBufferGetWidth(v45);
  v47 = CVPixelBufferGetHeight(v45);
  if ((unsigned __int128)(v46 * (__int128)7) >> 64 != (7 * v46) >> 63)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    result.hands._rawValue = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v47 == 7 * v46 / 4)
    v48 = v46;
  else
    v48 = v47;
  *(float *)&v49 = (float)v46;
  *((float *)&v49 + 1) = (float)v48;
  *(_QWORD *)&v77 = v45;
  *((_QWORD *)&v77 + 1) = v39;
  *(_QWORD *)&v78 = __PAIR64__(v40, v43);
  *((_QWORD *)&v78 + 1) = v42;
  v79 = 0uLL;
  *(_QWORD *)&v80 = 0;
  *((_QWORD *)&v80 + 1) = v45;
  *(_QWORD *)&v81 = v44;
  *((_QWORD *)&v81 + 1) = 13;
  LOBYTE(v82[0]) = 1;
  *(_QWORD *)((char *)v82 + 4) = 0;
  *(_QWORD *)((char *)&v82[1] + 4) = 0;
  *(_QWORD *)((char *)v82 + 12) = 0;
  HIDWORD(v82[1]) = 0;
  v83 = xmmword_23D9BD950;
  v84 = xmmword_23D9BD950;
  *(_QWORD *)&v87 = -1;
  *(_QWORD *)&v50 = -1;
  *((_QWORD *)&v50 + 1) = -1;
  v85 = v50;
  v86 = v50;
  *((_QWORD *)&v87 + 1) = v49;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, ImageData)>);
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_23D9A70A0;
  *(_QWORD *)(v51 + 32) = 13;
  *(_BYTE *)(v51 + 40) = 1;
  v52 = v85;
  *(_OWORD *)(v51 + 176) = v84;
  *(_OWORD *)(v51 + 192) = v52;
  v53 = v87;
  *(_OWORD *)(v51 + 208) = v86;
  *(_OWORD *)(v51 + 224) = v53;
  v54 = v82[0];
  *(_OWORD *)(v51 + 112) = v81;
  *(_OWORD *)(v51 + 128) = v54;
  v55 = v83;
  *(_OWORD *)(v51 + 144) = v82[1];
  *(_OWORD *)(v51 + 160) = v55;
  v56 = v78;
  *(_OWORD *)(v51 + 48) = v77;
  *(_OWORD *)(v51 + 64) = v56;
  v57 = v80;
  *(_OWORD *)(v51 + 80) = v79;
  *(_OWORD *)(v51 + 96) = v57;
  outlined retain of ImageData((uint64_t)&v77);
  v58 = specialized Dictionary.init(dictionaryLiteral:)(v51);
  _s5Hands5FrameVSgWOi0_((uint64_t)v88);
  outlined init with take of ImageData?((uint64_t)v88, (uint64_t)v92, &demangling cache variable for type metadata for Frame?);
  memset(v90, 0, 64);
  memset(v75, 0, 40);
  v59 = CACurrentMediaTime();
  v91[0] = 1;
  LOBYTE(v91[1]) = 1;
  v91[2] = 0;
  HIDWORD(v91[1]) = 1038657310;
  v91[3] = MEMORY[0x24BEE4AF8];
  v91[4] = MEMORY[0x24BEE4AF8];
  v91[5] = MEMORY[0x24BEE4AF8];
  v91[6] = MEMORY[0x24BEE4AF8];
  v91[7] = 0;
  LOBYTE(v91[8]) = 1;
  v76[0] = MEMORY[0x24BEE4AF8];
  v76[1] = MEMORY[0x24BEE4AF8];
  HandsKitData.init(imageData:worldPoseTransform:sessionID:frame:hands:frameArrivalTimeMark:enrolmentResults:internalData:detectionSpecs:detectionOutputs:referenceHands:mcamLeftCalibration:mcamRightCalibration:objectInteractionInfoByHandID:isDroppedFrame:)(v58, 0, 0xE000000000000000, (uint64_t)v92, MEMORY[0x24BEE4AF8], v91, v90, MEMORY[0x24BEE4AF8], v89, v73, v72, v71, v70, v59, v76, MEMORY[0x24BEE4AF8], 0, 0, v75,
    0);
  memcpy(v92, v89, 0x228uLL);
  v60 = v64;
  HandsSession.runHandsKit(withInput:)((uint64_t)v92, (uint64_t)v90);
  memcpy(v91, v90, 0x228uLL);
  _s5Hands13PoseImageCropVSgWOi_(v91);
  outlined init with take of ImageData?(v60 + 144, (uint64_t)v92, &demangling cache variable for type metadata for HandsKitData?);
  outlined init with take of ImageData?((uint64_t)v91, v60 + 144, &demangling cache variable for type metadata for HandsKitData?);
  outlined retain of HandsKitData(v90);
  outlined release of HandsKitData?(v92, outlined consume of HandsKitData?);
  memcpy(v75, v90, 0x228uLL);
  HandsSession.parseResults(handsKitData:)(v75, v76);
  v61 = v76[0];
  OS_dispatch_semaphore.signal()();
  swift_release();

  outlined release of HandsKitData(v90);
  outlined release of HandsKitData(v89);
  outlined release of ImageData((uint64_t)&v77);

  *v74 = v61;
  return result;
}

__n128 HandsSession.runHandsKit(withInput:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 result;
  __n128 v24;
  _BYTE v25[560];
  _OWORD v26[9];
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  _BYTE v30[376];
  char v31[24];
  uint64_t v32;
  _QWORD __dst[70];
  unint64_t v34[70];
  _OWORD v35[35];
  _QWORD __src[70];
  _OWORD v37[36];

  v3 = v2;
  HandsSession.updateWithDetectionResults(_:)(a1, __src);
  memcpy(__dst, __src, 0x228uLL);
  Tracking3D.runSync(withInput:)((uint64_t)__dst, v5);
  memcpy(v35, v34, 0x228uLL);
  v6 = v2[4];
  v7 = *(_QWORD *)&v35[0];
  swift_retain();
  v8 = specialized PipelineMapper.findMapping(_:_:)(v7, 0);
  swift_bridgeObjectRetain_n();
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(v35);
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands14HandDescriptorVG_AHs5NeverOTg5054_s5Hands4PoseC7runSync9withInputAA0A7KitDataVAG_tFAA14eF8VAIXEfU_SDys6UInt64VSiGAF0J0CAF0dpQ0VTf1cn_nTf4nggg_n(v7, v8, v6, v35);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  *(_OWORD *)((char *)v37 + 8) = *(_OWORD *)((char *)v35 + 8);
  *(_OWORD *)((char *)&v37[1] + 8) = *(_OWORD *)((char *)&v35[1] + 8);
  *(_OWORD *)((char *)&v37[2] + 8) = *(_OWORD *)((char *)&v35[2] + 8);
  *(_OWORD *)((char *)&v37[3] + 8) = *(_OWORD *)((char *)&v35[3] + 8);
  *(_QWORD *)&v37[0] = v9;
  *((_QWORD *)&v37[4] + 1) = *((_QWORD *)&v35[4] + 1);
  LOBYTE(v37[5]) = v35[5];
  DWORD1(v37[5]) = DWORD1(v35[5]);
  *((_QWORD *)&v37[5] + 1) = *((_QWORD *)&v35[5] + 1);
  v37[6] = v35[6];
  v37[7] = v35[7];
  *(_QWORD *)&v37[8] = *(_QWORD *)&v35[8];
  BYTE8(v37[8]) = BYTE8(v35[8]);
  v37[9] = v35[9];
  v37[10] = v35[10];
  LODWORD(v37[11]) = v35[11];
  *((_QWORD *)&v37[11] + 1) = *((_QWORD *)&v35[11] + 1);
  v37[12] = v35[12];
  v37[13] = v35[13];
  v37[14] = v35[14];
  v37[15] = v35[15];
  v37[16] = v35[16];
  v37[17] = v35[17];
  v37[18] = v35[18];
  v37[19] = v35[19];
  v37[20] = v35[20];
  v37[21] = v35[21];
  v37[22] = v35[22];
  v37[23] = v35[23];
  *(_QWORD *)&v37[24] = *(_QWORD *)&v35[24];
  BYTE8(v37[24]) = BYTE8(v35[24]);
  *(_QWORD *)((char *)&v37[24] + 12) = *(_QWORD *)((char *)&v35[24] + 12);
  *(_QWORD *)((char *)&v37[25] + 4) = *(_QWORD *)((char *)&v35[25] + 4);
  *(_OWORD *)((char *)&v37[25] + 12) = *(_OWORD *)((char *)&v35[25] + 12);
  *(_OWORD *)((char *)&v37[26] + 12) = *(_OWORD *)((char *)&v35[26] + 12);
  BYTE12(v37[27]) = BYTE12(v35[27]);
  v37[28] = v35[28];
  LOBYTE(v37[29]) = v35[29];
  *(_OWORD *)((char *)&v37[29] + 8) = *(_OWORD *)((char *)&v35[29] + 8);
  *((_QWORD *)&v37[30] + 1) = *((_QWORD *)&v35[30] + 1);
  v37[31] = v35[31];
  v37[32] = v35[32];
  v37[33] = v35[33];
  *(_QWORD *)&v37[34] = *(_QWORD *)&v35[34];
  memcpy(__dst, v37, 0x228uLL);
  Tracking3D.didGetPoseResults(_:)((uint64_t)v31, (uint64_t)v34);
  swift_retain();
  OperationalEnvelopeProcess.process(_:)((uint64_t)v34);
  swift_release();
  swift_retain();
  GesturePipeline.process(_:)((char *)v34);
  swift_release();
  v10 = v3[8];
  if (v10)
  {
    v11 = v34[0];
    v12 = *(_QWORD *)(v34[0] + 16);
    swift_retain();
    if (v12)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_11:
        v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      for (i = 0; i != v12; ++i)
      {
        if (i >= *(_QWORD *)(v11 + 16))
        {
          __break(1u);
          goto LABEL_11;
        }
        v14 = type metadata accessor for HandDescriptor();
        ThumbIndexTapPostProcessing._process(_:)(v11+ ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * i);
      }
      v34[0] = v11;
    }
    swift_beginAccess();
    *(_QWORD *)(v10 + 24) = *(_QWORD *)(v10 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v10 + 32) = MEMORY[0x24BEE4B08];
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_retain();
  OutOfEnvelopeFilter.process(_:)(v34);
  swift_release();
  memcpy(__dst, v34, 0x228uLL);
  memcpy(v25, v34, 0x228uLL);
  v15 = v32;
  outlined retain of HandsKitData(__dst);
  Detection2DPipeline.run(withInput:schedule:)(v25, v15, (uint64_t)v26);
  swift_bridgeObjectRelease();
  outlined release of HandsKitData(__dst);
  v16 = v26[7];
  *(_OWORD *)(a2 + 96) = v26[6];
  *(_OWORD *)(a2 + 112) = v16;
  *(_OWORD *)(a2 + 128) = v26[8];
  v17 = v26[3];
  *(_OWORD *)(a2 + 32) = v26[2];
  *(_OWORD *)(a2 + 48) = v17;
  v18 = v26[5];
  *(_OWORD *)(a2 + 64) = v26[4];
  *(_OWORD *)(a2 + 80) = v18;
  v19 = v26[1];
  *(_OWORD *)a2 = v26[0];
  *(_OWORD *)(a2 + 16) = v19;
  v20 = v27;
  v21 = v29;
  memcpy((void *)(a2 + 176), v30, 0x178uLL);
  v24 = v28;
  v22 = v28.n128_u64[0];
  v3[9] = v20;
  v3[10] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3[11] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of HandsKitData(v37);
  outlined release of HandsKitData(v35);
  outlined release of HandsKitData(__src);
  outlined release of HandsKitData(__dst);
  *(_QWORD *)(a2 + 144) = v20;
  result = v24;
  *(__n128 *)(a2 + 152) = v24;
  *(_QWORD *)(a2 + 168) = v21;
  return result;
}

void *HandsSession.updateWithDetectionResults(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43[2];
  uint64_t v44[8];
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _BYTE v55[128];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  char v65;
  uint64_t v66;

  v39 = *(_QWORD *)a1;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 8);
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 56);
  v5 = *(_BYTE *)(a1 + 80);
  v6 = *(_DWORD *)(a1 + 84);
  v8 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_BYTE *)(a1 + 136);
  v36 = *(_QWORD *)(a1 + 184);
  v40 = *(_QWORD *)(a1 + 192);
  v38 = *(_QWORD *)(a1 + 200);
  v34 = *(__n128 *)(a1 + 224);
  v35 = *(__n128 *)(a1 + 208);
  v32 = *(__n128 *)(a1 + 256);
  v33 = *(__n128 *)(a1 + 240);
  v13 = *(_BYTE *)(a1 + 392);
  v14 = *(_QWORD *)(a1 + 396);
  v15 = *(_BYTE *)(a1 + 444);
  v16 = *(_QWORD *)(a1 + 448);
  v56 = *(_OWORD *)(a1 + 336);
  v57 = *(_QWORD *)(a1 + 352);
  v17 = *(_OWORD *)(a1 + 376);
  v58 = *(_OWORD *)(a1 + 360);
  v18 = *(double *)(a1 + 536);
  v59 = v17;
  v60 = v13;
  v61 = v14;
  v62 = *(_QWORD *)(a1 + 404);
  v63 = *(_OWORD *)(a1 + 412);
  v64 = *(_OWORD *)(a1 + 428);
  v65 = v15;
  v66 = v16;
  _s5Hands5FrameVSgWOi_((uint64_t)&v56);
  outlined init with take of ImageData?((uint64_t)&v56, (uint64_t)v55, &demangling cache variable for type metadata for Frame?);
  v45 = v4;
  v46 = v5;
  v47 = v6;
  v48 = *(_QWORD *)(a1 + 88);
  v49 = v8;
  v50 = v7;
  v51 = v10;
  v52 = v9;
  v53 = v11;
  v54 = v12;
  v44[0] = v31;
  v44[1] = v30;
  v44[2] = v29;
  v44[3] = v28;
  v44[4] = v27;
  v44[5] = v26;
  v44[6] = v25;
  v44[7] = v24;
  v23 = v2[11];
  v20 = v2[9];
  v19 = v2[10];
  v43[0] = v20;
  v43[1] = v19;
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of HandsKitDataInternal?(v31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = swift_bridgeObjectRetain();
  return HandsKitData.init(imageData:worldPoseTransform:sessionID:frame:hands:frameArrivalTimeMark:enrolmentResults:internalData:detectionSpecs:detectionOutputs:referenceHands:mcamLeftCalibration:mcamRightCalibration:objectInteractionInfoByHandID:isDroppedFrame:)(v38, v36, v40, (uint64_t)v55, v39, &v45, v44, v23, a2, v35, v34, v33, v32, v18, v43, v21, 0, 0, (uint64_t *)v41,
           0);
}

void HandsSession.parseResults(handsKitData:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unsigned int v40;
  char *v41;
  char v42;
  unint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  char v67;
  void *v68;
  id v69;
  float v70;
  float v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  float v77;
  _QWORD *v78;
  float32x4_t *v79;
  float32x4_t v80;
  float32x4_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;

  v5 = type metadata accessor for HandDescriptor();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (uint64_t *)((char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *a1;
  v90 = *(_QWORD *)(v10 + 16);
  if (v90)
  {
    v84 = a2;
    v89 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v110 = *(float32x4_t *)MEMORY[0x24BDAEE00];
    v109 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16);
    v108 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32);
    v107 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 48);
    swift_bridgeObjectRetain();
    v11 = 0;
    v106 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v87 = v6;
    v86 = v10;
    v85 = v2;
    v104 = v9;
    while (v11 < *(_QWORD *)(v10 + 16))
    {
      outlined init with copy of HandDescriptor(v89 + *(_QWORD *)(v6 + 72) * v11, (uint64_t)v9);
      v12 = v9[2];
      if (v12)
      {
        if (!*(_QWORD *)(v12 + 16))
          goto LABEL_33;
        v14 = v9[3];
        v13 = v9[4];
        v15 = v9[5];
        v16 = v9[6];
        v17 = v9[7];
        v18 = v9[8];
        v19 = v9[9];
        v20 = v9[10];
        v21 = v9[11];
        v22 = v9[12];
        v23 = v9[13];
        v24 = v9[14];
        v26 = v9[15];
        v25 = v9[16];
        v27 = *(_QWORD **)(v2 + 128);
        v28 = *(int8x16_t *)(v12 + 48);
        v29 = *(int8x16_t *)(v12 + 64);
        v30 = *(int8x16_t *)(v12 + 80);
        v31 = *(int8x16_t *)(v12 + 96);
        v32 = vextq_s8(vextq_s8(v28, v28, 4uLL), (int8x16_t)vnegq_f32((float32x4_t)vextq_s8(v28, v28, 4uLL)), 0xCuLL);
        v32.i32[3] = v28.i32[3];
        v114 = (float32x4_t)v32;
        v33 = vextq_s8(vextq_s8(v29, v29, 4uLL), (int8x16_t)vnegq_f32((float32x4_t)vextq_s8(v29, v28, 4uLL)), 0xCuLL);
        v33.i32[3] = v29.i32[3];
        v113 = (float32x4_t)v33;
        v34 = vextq_s8(vextq_s8(v30, v30, 4uLL), (int8x16_t)vnegq_f32((float32x4_t)vextq_s8(v30, v33, 4uLL)), 0xCuLL);
        v34.i32[3] = v30.i32[3];
        v112 = (float32x4_t)v34;
        v35 = vextq_s8(vextq_s8(v31, v31, 4uLL), (int8x16_t)vnegq_f32((float32x4_t)vextq_s8(v31, v34, 4uLL)), 0xCuLL);
        v35.i32[3] = v31.i32[3];
        v111 = (float32x4_t)v35;
        v36 = 27;
        v105 = v25;
        v92 = v26;
        v93 = v24;
        v94 = v23;
        v95 = v22;
        v96 = v21;
        v97 = v20;
        v91 = v15;
        v100 = v17;
        v99 = v18;
        v98 = v19;
        outlined copy of HandPose?(v12);
        v103 = v11;
        v102 = v13;
        v101 = v16;
        v88 = v14;
        v37 = v27[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38 = &byte_250E355C8;
        do
        {
          v40 = *v38++;
          v39 = v40;
          if (v37 <= v40)
          {
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          v41 = (char *)&v27[18 * v39 + 4];
          v42 = *v41;
          v43 = v41[1];
          v44 = v114;
          v45 = v113;
          v46 = v112;
          v47 = v111;
          v48 = v110;
          v49 = v109;
          v50 = v108;
          v51 = v107;
          if ((_DWORD)v39)
          {
            if (*(_QWORD *)(v12 + 16) <= v39)
              goto LABEL_30;
            v52 = (float32x4_t *)(v12 + 32 + 144 * v39);
            v48 = v52[1];
            v49 = v52[2];
            v50 = v52[3];
            v51 = v52[4];
            if ((_DWORD)v43 == 27)
            {
              v44 = v52[1];
              v45 = v52[2];
              v46 = v52[3];
              v47 = v52[4];
            }
            else
            {
              if (v37 <= v43)
                goto LABEL_31;
              v53 = (float32x4_t *)&v27[18 * v43 + 4];
              v54 = v53[1];
              v55 = v53[2];
              v56 = v53[3];
              v57 = v53[4];
              v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, v48.f32[0]), v55, *(float32x2_t *)v48.f32, 1), v56, v48, 2), v57, v48, 3);
              v45 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, v49.f32[0]), v55, *(float32x2_t *)v49.f32, 1), v56, v49, 2), v57, v49, 3);
              v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, v50.f32[0]), v55, *(float32x2_t *)v50.f32, 1), v56, v50, 2), v57, v50, 3);
              v47 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, v51.f32[0]), v55, *(float32x2_t *)v51.f32, 1), v56, v51, 2), v57, v51, 3);
            }
          }
          v115 = v47;
          v116 = v46;
          v117 = v45;
          v118 = v44;
          v119 = v51;
          v120 = v50;
          v121 = v49;
          v122 = v48;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
          v37 = v27[2];
          v59 = v121;
          v58 = v122;
          v61 = v119;
          v60 = v120;
          v63 = v117;
          v62 = v118;
          v64 = v116;
          if (v37 <= v39)
            goto LABEL_29;
          v65 = (float32x4_t *)&v27[18 * v39];
          v65[2].i8[0] = v42;
          v65[2].i8[1] = v43;
          v65[3] = v62;
          v65[4] = v63;
          v66 = v115;
          v65[5] = v64;
          v65[6] = v66;
          v65[7] = v58;
          v65[8] = v59;
          v65[9] = v60;
          v65[10] = v61;
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
        v2 = v85;
        v67 = *((_BYTE *)v104 + 4);
        v68 = *(void **)(v85 + 96);
        swift_bridgeObjectRetain();
        v69 = v68;
        objc_msgSend(v69, sel_WristStdDevUpperThreshold);
        v71 = v70;
        outlined consume of HandPose?(v12);

        v9 = v104;
        v72 = v104[18];
        v73 = *((_BYTE *)v104 + 136);
        v74 = v106;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
        v106 = v74;
        v76 = v74[2];
        v75 = v74[3];
        if (v76 >= v75 >> 1)
          v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v75 > 1), v76 + 1, 1, v106);
        v77 = *((float *)&v105 + 1) / v71;
        v78 = v106;
        v106[2] = v76 + 1;
        v79 = (float32x4_t *)&v78[12 * v76];
        v79[2].i64[0] = v72;
        v79[2].i8[8] = (v73 ^ 1) & 1;
        v79[2].f32[3] = 1.0 - v77;
        v79[3].i8[0] = v67 & 1;
        v79[3].i64[1] = (uint64_t)v27;
        v80 = v113;
        v79[4] = v114;
        v79[5] = v80;
        v81 = v111;
        v79[6] = v112;
        v79[7] = v81;
        outlined destroy of HandDescriptor((uint64_t)v9);
        swift_bridgeObjectRelease();
        v6 = v87;
        v10 = v86;
        v11 = v103;
      }
      else
      {
        outlined destroy of HandDescriptor((uint64_t)v9);
      }
      if (++v11 == v90)
      {
        swift_bridgeObjectRelease();
        a2 = v84;
        v82 = v106;
        goto LABEL_27;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
    v82 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_27:
    *a2 = v82;
  }
}

uint64_t HandsSession.getHandsKitData()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[560];

  outlined init with take of ImageData?(v1 + 144, (uint64_t)v4, &demangling cache variable for type metadata for HandsKitData?);
  outlined init with take of ImageData?((uint64_t)v4, a1, &demangling cache variable for type metadata for HandsKitData?);
  return outlined release of HandsKitData?(v4, outlined copy of HandsKitData?);
}

uint64_t protocol witness for HandsKitPipelineProtocol.run(withInput:completion:) in conformance HandsSession(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[70];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v3;
  memcpy(v20, a1, 0x228uLL);
  static DispatchTime.distantFuture.getter();
  MEMORY[0x242637708](v15);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  memcpy(v18 + 4, v20, 0x228uLL);
  v18[73] = v16;
  v18[74] = a2;
  v18[75] = a3;
  outlined retain of HandsKitData(v20);
  swift_retain();
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&closure #1 in HandsSession.run(withInput:completion:)partial apply, (uint64_t)v18);
  return swift_release();
}

void protocol witness for HandsKitPipelineProtocol.reconfig(_:) in conformance HandsSession()
{
  HandsSession.reset()();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands14HandDescriptorVG_AHs5NeverOTg5054_s5Hands4PoseC7runSync9withInputAA0A7KitDataVAG_tFAA14eF8VAIXEfU_SDys6UInt64VSiGAF0J0CAF0dpQ0VTf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  unint64_t v27;
  _BYTE v28[552];
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a4;
  v8 = type metadata accessor for HandDescriptor();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x24BEE4AF8];
  if (!v13)
    return v14;
  v24 = v4;
  v32 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  v27 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = a1 + v27;
  v25 = a3 + 16;
  swift_beginAccess();
  v16 = *(_QWORD *)(v9 + 72);
  while (1)
  {
    if (!*(_QWORD *)(a2 + 16)
      || (result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v15 + 144)), (v18 & 1) == 0))
    {
      outlined init with copy of HandDescriptor(v15, (uint64_t)v12);
      goto LABEL_9;
    }
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result);
    if ((v19 & 0x8000000000000000) != 0)
      break;
    if (v19 >= *(_QWORD *)(*(_QWORD *)v25 + 16))
      goto LABEL_16;
    outlined init with copy of Detection2DComputePipelineProtocol(*(_QWORD *)v25 + 40 * v19 + 32, (uint64_t)v29);
    v20 = v30;
    v21 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    memcpy(v28, v26, sizeof(v28));
    (*(void (**)(uint64_t, _BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 40))(v15, v28, 0, v20, v21);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
LABEL_9:
    v14 = v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v14 = v32;
    }
    v23 = *(_QWORD *)(v14 + 16);
    v22 = *(_QWORD *)(v14 + 24);
    if (v23 >= v22 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v14 = v32;
    }
    *(_QWORD *)(v14 + 16) = v23 + 1;
    outlined init with take of HandDescriptor((uint64_t)v12, v14 + v27 + v23 * v16);
    v15 += v16;
    if (!--v13)
      return v14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized static HandsSession.enableDebugLogging(level:)(int a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t result;
  _QWORD v10[6];

  type metadata accessor for HandyLoggerConsoleSink();
  swift_allocObject();
  v2 = HandyLoggerConsoleSink.init()();
  v3 = type metadata accessor for HandyLoggerNeo();
  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  v4 = (void *)static HandyLoggerNeo._dispatchQ;
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = &protocol witness table for HandyLoggerConsoleSink;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = partial apply for closure #1 in static HandyLoggerNeo.attachLogger(_:);
  *(_QWORD *)(v6 + 24) = v5;
  v10[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v10[5] = v6;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed () -> ();
  v10[3] = &block_descriptor_22;
  v7 = _Block_copy(v10);
  v8 = v4;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v7);

  _Block_release(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  result = swift_release();
  if ((v7 & 1) != 0)
    __break(1u);
  else
    static HandyLoggerNeo._currentLogLevel = a1;
  return result;
}

void specialized static HandsSession.defaultHandJoints()()
{
  uint64_t v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  unsigned int v4;
  Swift::Int v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  v0 = 27;
  v12 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v13 = *MEMORY[0x24BDAEE00];
  v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v10 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v11 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v2 = &byte_250E355C8;
  while (1)
  {
    v4 = *v2++;
    v3 = v4;
    if (v4 > 0x1AuLL)
      break;
    v5 = outlined read-only object #0 of static HandsSession.defaultHandJoints()[v3 + 4];
    if (v5 < 0)
    {
      v6 = 27;
    }
    else
    {
      HandSkeleton.JointName.init(rawValue:)(v5);
      v6 = v14;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
    v8 = v1[2];
    v7 = v1[3];
    if (v8 >= v7 >> 1)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v1);
    v1[2] = v8 + 1;
    v9 = &v1[18 * v8];
    *((_BYTE *)v9 + 32) = v3;
    *((_BYTE *)v9 + 33) = v6;
    *((_OWORD *)v9 + 3) = v13;
    *((_OWORD *)v9 + 4) = v12;
    *((_OWORD *)v9 + 5) = v11;
    *((_OWORD *)v9 + 6) = v10;
    *((_OWORD *)v9 + 7) = v13;
    *((_OWORD *)v9 + 8) = v12;
    *((_OWORD *)v9 + 9) = v11;
    *((_OWORD *)v9 + 10) = v10;
    if (!--v0)
      return;
  }
  __break(1u);
}

uint64_t specialized HandsSession.init(config:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  HandsKitConfig *v8;
  uint64_t v9;
  uint64_t v10;
  HandsKitConfig *v11;
  HandsKitConfig *v12;
  uint64_t v13;
  HandsKitConfig *v14;
  NSString *v15;
  Swift::String v16;
  char v17;
  HandsKitConfig *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v35;
  uint64_t v37[4];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[560];

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v4;
  *(_QWORD *)(v2 + 80) = v4;
  *(_QWORD *)(v2 + 88) = v4;
  *(_BYTE *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 108) = 5;
  *(_QWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 120) = 0;
  _s5Hands0A7KitDataVSgWOi0_(v41);
  outlined init with take of ImageData?((uint64_t)v41, v2 + 144, &demangling cache variable for type metadata for HandsKitData?);
  type metadata accessor for ImageToGreyConverter();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  type metadata accessor for PixelTransferSessionManager();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v2 + 696) = v5;
  *(_QWORD *)(v2 + 96) = a1;
  type metadata accessor for Detection2DPipeline();
  swift_allocObject();
  v7 = a1;
  *(_QWORD *)(v2 + 16) = Detection2DPipeline.init(options:)(v7);
  type metadata accessor for Tracking3D();
  swift_allocObject();
  v8 = (HandsKitConfig *)v7;
  v9 = specialized Tracking3D.init(options:)(v8);

  *(_QWORD *)(v2 + 24) = v9;
  type metadata accessor for Pose();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v4;
  type metadata accessor for PipelineMapper();
  swift_allocObject();
  v11 = v8;
  *(_QWORD *)(v10 + 24) = PipelineMapper.init()();
  *(_BYTE *)(v10 + 32) = 0;
  Pose.reconfig(_:)(v11);

  *(_QWORD *)(v2 + 32) = v10;
  type metadata accessor for OperationalEnvelopeProcess();
  swift_allocObject();
  v12 = v11;
  *(_QWORD *)(v2 + 40) = OperationalEnvelopeProcess.init(_:)(v12);
  *(_QWORD *)(v2 + 48) = specialized static GesturePipelineFactory.makeGesturePipeline(_:)(v12);
  type metadata accessor for OutOfEnvelopeFilter();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v2 + 56) = v13;
  v14 = v12;
  v15 = -[HandsKitConfig MonoThumbIndexTapModel](v14, sel_MonoThumbIndexTapModel);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = String.lowercased()();
  if (v16._countAndFlagsBits == 0x6F72687473736170 && v16._object == (void *)0xEB00000000686775)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      type metadata accessor for ThumbIndexTapPostProcessing();
      swift_allocObject();
      v18 = v14;
      v19 = specialized ThumbIndexTapPostProcessing.init(config:)(v18);

      *(_QWORD *)(v2 + 64) = v19;
      swift_release();
    }
  }
  specialized static HandsSession.defaultHandJoints()();
  *(_QWORD *)(v2 + 128) = v20;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v38 = 0xD000000000000015;
  *((_QWORD *)&v38 + 1) = 0x800000023D9CB5B0;
  LODWORD(v37[0]) = 1;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22 = MEMORY[0x24BEE0D00];
  v40 = MEMORY[0x24BEE0D00];
  v23 = MEMORY[0x24BEE4AF8];
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9D7660, 77, (uint64_t)&v38, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
  *(_QWORD *)(v2 + 704) = dispatch_semaphore_create(1);
  v40 = v22;
  *(_QWORD *)&v38 = 0xD000000000000018;
  *((_QWORD *)&v38 + 1) = 0x800000023D9CB5D0;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9D7660, 83, (uint64_t)&v38, v23);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
  v40 = v22;
  *(_QWORD *)&v38 = 0xD00000000000001DLL;
  *((_QWORD *)&v38 + 1) = 0x800000023D9CB5F0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_23D9A70A0;
  v25 = objc_msgSend((id)objc_opt_self(), sel_GetHandsKitVersionString);
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;

  *(_QWORD *)(v24 + 56) = v22;
  *(_QWORD *)(v24 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v24 + 32) = v26;
  *(_QWORD *)(v24 + 40) = v28;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9D7660, 86, (uint64_t)&v38, v24);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
  v40 = v22;
  *(_QWORD *)&v38 = 0x3A736E6F6974704FLL;
  *((_QWORD *)&v38 + 1) = 0xEB00000000402520;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_23D9A70A0;
  v30 = objc_msgSend(*(id *)(v2 + 96), sel_build);
  v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)(v29 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)(v29 + 64) = lazy protocol witness table accessor for type [String : Any] and conformance [A : B]();
  *(_QWORD *)(v29 + 32) = v31;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9D7660, 88, (uint64_t)&v38, v29);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
  v40 = v22;
  *(_QWORD *)&v38 = 0xD000000000000029;
  *((_QWORD *)&v38 + 1) = 0x800000023D9CB670;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9D7660, 89, (uint64_t)&v38, v23);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
  v38 = xmmword_23D9AB690;
  v39 = 0;
  v40 = 0;
  v32 = mach_absolute_time();
  v33 = type metadata accessor for HandsKitPipelineEvent(0);
  v37[3] = v33;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v37);
  UnknownStorage.init()();
  v35 = (uint64_t *)((char *)boxed_opaque_existential_0 + *(int *)(v33 + 32));
  *v35 = 0;
  v35[1] = 0;
  *boxed_opaque_existential_0 = v32;
  boxed_opaque_existential_0[1] = 1;
  *((_BYTE *)boxed_opaque_existential_0 + 16) = 1;
  boxed_opaque_existential_0[3] = 1;
  *((_BYTE *)boxed_opaque_existential_0 + 32) = 1;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9D7660, 90, (uint64_t *)&v38, (uint64_t)v37, v23);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
  return v2;
}

uint64_t sub_23D8D7B7C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in HandsSession.run(withInput:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 584);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 592);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = partial apply for closure #1 in HandsSession.run(withInput:completion:);
  *(_OWORD *)(v3 + 1136) = v4;
  *(_QWORD *)(v3 + 1128) = v2;
  *(_QWORD *)(v3 + 568) = v0 + 32;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type HandsSessionError and conformance HandsSessionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionError and conformance HandsSessionError;
  if (!lazy protocol witness table cache variable for type HandsSessionError and conformance HandsSessionError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionError, &type metadata for HandsSessionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionError and conformance HandsSessionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionError and conformance HandsSessionError;
  if (!lazy protocol witness table cache variable for type HandsSessionError and conformance HandsSessionError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionError, &type metadata for HandsSessionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionError and conformance HandsSessionError);
  }
  return result;
}

#error "23D8D7D1C: call analysis failed (funcsize=55)"

uint64_t outlined copy of HandsKitData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;

  if (result)
  {
    swift_bridgeObjectRetain();
    outlined copy of HandsKitDataInternal?(a2);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of ObjectInteractionResultsByHand?(a63, a64, a65, a66);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HandsSessionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23D8D7F68 + 4 * byte_23D9BD965[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23D8D7F9C + 4 * byte_23D9BD960[v4]))();
}

uint64_t sub_23D8D7F9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8D7FA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8D7FACLL);
  return result;
}

uint64_t sub_23D8D7FB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8D7FC0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23D8D7FC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8D7FCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HandsSessionError()
{
  return &type metadata for HandsSessionError;
}

uint64_t method lookup function for HandsSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HandsSession.__allocating_init(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t dispatch thunk of HandsSession.setInitialState(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of HandsSession.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of HandsSession.reconfig(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of HandsSession.run(input:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 472) + *(_QWORD *)(*(_QWORD *)v2 + 472));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of HandsSession.run(input:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of HandsSession.run(input:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of HandsSession.run(withInput:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of HandsSession.runSync(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of HandsSession.getHandsKitData()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 552))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23D8D8238()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D8D825C()
{
  return swift_deallocObject();
}

void HandApproachingMouthManager.process(_:_:)(uint64_t a1, CMTimeValue a2, uint64_t a3, CMTimeEpoch a4)
{
  float *v4;
  CMTimeValue v5;
  float *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  float v31;
  int64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  float v39;
  float v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float v49;
  uint64_t v50;
  float v51;
  _BOOL4 v52;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  float v61;
  uint64_t v62;
  float v63;
  _BOOL4 v64;
  double Seconds;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  int64_t v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  CMTimeScale v84;
  uint64_t v85;
  CMTimeValue v86;
  CMTimeFlags v87;
  CMTime time;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int16 v96;
  int v97;
  CMTime v98;

  v5 = *(_QWORD *)(a1 + 240);
  if (v5)
  {
    v6 = v4;
    v9 = *(_QWORD *)(a1 + 560);
    v10 = *(unsigned int *)(a1 + 568);
    v11 = *(unsigned int *)(a1 + 572);
    v12 = *(_QWORD *)(a1 + 576);
    v13 = *(float32x4_t *)(a1 + 624);
    v14 = *(float32x4_t *)(a1 + 640);
    v15 = *(float32x4_t *)(a1 + 592);
    v16 = *(float32x4_t *)(a1 + 608);
    v17 = *(float *)(a1 + 360);
    v18 = *(_OWORD *)(a1 + 248);
    v19 = *(_OWORD *)(a1 + 264);
    v20 = *(_OWORD *)(a1 + 280);
    v21 = *(_OWORD *)(a1 + 296);
    v22 = *(_OWORD *)(a1 + 312);
    v23 = *(_OWORD *)(a1 + 328);
    v25 = *(_QWORD *)(a1 + 344);
    v24 = *(_QWORD *)(a1 + 352);
    *((_QWORD *)v4 + 23) = 0;
    *(_OWORD *)&time.timescale = v18;
    v90 = v19;
    v91 = v20;
    v92 = v21;
    v93 = v22;
    v94 = v23;
    time.value = v5;
    v95 = v25;
    v96 = v24 & 0x101;
    v87 = v11;
    v26 = v10 | (v11 << 32);
    v97 = HIDWORD(v24);
    HandApproachingMouthManager.updateBuffers(_:_:_:_:)((uint64_t)&time, v9, v26, v12, v15, v16, v13, v14, v17);
    swift_beginAccess();
    v28 = *((_QWORD *)v4 + 5);
    v27 = *((_QWORD *)v4 + 6);
    v29 = *((_QWORD *)v6 + 7);
    v30 = specialized CircularBuffer.last.getter(v28, v27, v29);
    v31 = *(float *)&v30;
    if ((v30 & 0x100000000) != 0)
      v31 = INFINITY;
    if (v6[51] <= v31)
      *((_QWORD *)v6 + 23) |= 1uLL;
    v32 = specialized CircularBuffer.last.getter(v28, v27, v29);
    v33 = *(float *)&v32;
    if ((v32 & 0x100000000) != 0)
      v33 = INFINITY;
    if (v33 < v6[49])
    {
      v86 = v9;
      v34 = *((_QWORD *)v6 + 17);
      swift_bridgeObjectRetain();
      v35 = specialized CircularBuffer.getLastNValues(_:)(v34, v28, v27, v29);
      swift_bridgeObjectRelease();
      v36 = *(_QWORD *)(v35 + 16);
      v84 = v10;
      if (v36)
      {
        v37 = v36 - 1;
        if (v37)
        {
          v39 = *(float *)(v35 + 32);
          v40 = v6[53];
          v41 = (float *)(v35 + 36);
          do
          {
            v38 = (float)(v40 + v39) > *v41;
            if ((float)(v40 + v39) <= *v41)
              break;
            if (*v41 < v39)
              v39 = *v41;
            ++v41;
            --v37;
          }
          while (v37);
        }
        else
        {
          v38 = 1;
        }
      }
      else
      {
        v38 = 0;
      }
      v85 = v26;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v42 = *((_QWORD *)v6 + 2);
      v43 = *((_QWORD *)v6 + 3);
      v44 = *((_QWORD *)v6 + 4);
      v45 = *((_QWORD *)v6 + 17);
      swift_bridgeObjectRetain();
      v46 = specialized CircularBuffer.getLastNValues(_:)(v45, v42, v43, v44);
      swift_bridgeObjectRelease();
      v47 = *(_QWORD *)(v46 + 16);
      if (v47)
      {
        v48 = (float *)(v46 + 32);
        v49 = v6[48];
        v50 = v47 - 1;
        do
        {
          v51 = *v48++;
          v52 = v51 >= v49;
        }
        while (v51 < v49 && v50-- != 0);
      }
      else
      {
        v52 = 0;
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v54 = *((_QWORD *)v6 + 8);
      v55 = *((_QWORD *)v6 + 9);
      v56 = *((_QWORD *)v6 + 10);
      v57 = *((_QWORD *)v6 + 17);
      swift_bridgeObjectRetain();
      v58 = specialized CircularBuffer.getLastNValues(_:)(v57, v54, v55, v56);
      swift_bridgeObjectRelease();
      v59 = *(_QWORD *)(v58 + 16);
      if (v59)
      {
        v60 = (float *)(v58 + 32);
        v61 = v6[52];
        v62 = v59 - 1;
        v9 = v86;
        do
        {
          v63 = *v60++;
          v64 = v63 < v61;
        }
        while (v63 >= v61 && v62-- != 0);
      }
      else
      {
        v64 = 0;
        v9 = v86;
      }
      swift_bridgeObjectRelease();
      if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
      {
        time.value = a2;
        *(_QWORD *)&time.timescale = a3;
        time.epoch = a4;
        Seconds = CMTimeGetSeconds(&time);
        time.value = v9;
        time.timescale = v84;
        time.flags = v87;
        time.epoch = v12;
        v67 = Seconds - CMTimeGetSeconds(&time);
        v68 = fabsf(v67);
      }
      else
      {
        v68 = INFINITY;
      }
      v69 = v6[56];
      if (v52 | (_BYTE)v6[38] & 1 | (!v38 || !v64))
      {
        v70 = *((_QWORD *)v6 + 23);
      }
      else
      {
        v71 = *((_QWORD *)v6 + 17);
        v72 = *((_QWORD *)v6 + 29);
        v73 = __OFADD__(v71, v72);
        v74 = v71 + v72;
        if (v73)
        {
          __break(1u);
          return;
        }
        if (*((_QWORD *)v6 + 18) <= v74)
          v75 = v74;
        else
          v75 = *((_QWORD *)v6 + 18);
        swift_beginAccess();
        v76 = *((_QWORD *)v6 + 11);
        v77 = *((_QWORD *)v6 + 12);
        v78 = *((_QWORD *)v6 + 13);
        swift_bridgeObjectRetain();
        v79 = specialized CircularBuffer.getLastNValues(_:)(v75, v76, v77, v78);
        swift_bridgeObjectRelease();
        v80 = specialized CircularBuffer.last.getter(*((_QWORD *)v6 + 5), *((_QWORD *)v6 + 6), *((_QWORD *)v6 + 7));
        time.value = v86;
        v81 = *(float *)&v80;
        time.timescale = v84;
        time.flags = v87;
        if ((v80 & 0x100000000) != 0)
          v81 = INFINITY;
        time.epoch = v12;
        *(float *)&v90 = v68;
        BYTE4(v90) = 0;
        *((_QWORD *)&v90 + 1) = v79;
        v91 = 0uLL;
        *(_QWORD *)&v92 = 0;
        BYTE8(v92) = 1;
        *((float *)&v92 + 3) = v81;
        swift_beginAccess();
        specialized CircularBuffer.add(_:)((uint64_t)&time);
        swift_endAccess();
        v9 = v86;
        swift_bridgeObjectRelease();
        v70 = *((_QWORD *)v6 + 23) | 0x100;
        *((_BYTE *)v6 + 152) = 1;
      }
      v82 = 2;
      if (v38)
        v82 = 6;
      v83 = v70 | v82;
      if (!v52)
        v83 |= 8uLL;
      if (v64)
        v83 |= 0x10uLL;
      if (v68 < v69)
        v83 |= 0x40uLL;
      *((_QWORD *)v6 + 23) = v83;
      v26 = v85;
    }
    v98.value = v9;
    *(_QWORD *)&v98.timescale = v26;
    v98.epoch = v12;
    HandApproachingMouthManager.checkIfHandIsStillCloseToMouth(_:)(v98);
  }
}

Swift::Bool __swiftcall HandApproachingMouthManager.isRestrictedCloseToMouth(_:_:)(CMTime a1, Swift::Float a2)
{
  _QWORD *v2;
  CMTimeEpoch epoch;
  uint64_t v5;
  CMTimeValue value;
  Swift::Bool result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  CMTimeValue v17;
  CMTimeScale v18;
  CMTimeFlags v19;
  CMTimeEpoch v20;
  double Seconds;
  double v22;
  float v23;
  float v24;
  CMTime v25;

  epoch = a1.epoch;
  v5 = *(_QWORD *)&a1.timescale;
  value = a1.value;
  result = swift_beginAccess();
  v8 = v2[15];
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9 || *(_QWORD *)(v8 + 24) < 2uLL)
    return 0;
  v10 = v2[16];
  v11 = v10 - 1;
  if (__OFSUB__(v10, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v12 = v2[14];
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  if (v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v12 == -1 && v14 == 0x8000000000000000)
    goto LABEL_19;
  v15 = v14 % v12;
  if (v15 >= v9)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  v16 = v8 + 72 * v15;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(_DWORD *)(v16 + 40);
  v19 = *(_DWORD *)(v16 + 44);
  v20 = *(_QWORD *)(v16 + 48);
  swift_bridgeObjectRetain();
  if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
  {
    v25.value = value;
    *(_QWORD *)&v25.timescale = v5;
    v25.epoch = epoch;
    Seconds = CMTimeGetSeconds(&v25);
    v25.value = v17;
    v25.timescale = v18;
    v25.flags = v19;
    v25.epoch = v20;
    v22 = CMTimeGetSeconds(&v25);
    swift_bridgeObjectRelease();
    v23 = Seconds - v22;
    v24 = fabsf(v23);
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = INFINITY;
  }
  return v24 < a2;
}

void HandApproachingMouthManager.isNearRecentHandApproachingMouthEventTrajectory(_:_:_:_:)(CMTimeValue a1, unint64_t a2, CMTimeEpoch a3, float32x4_t a4, float a5, float a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  CMTimeValue v24;
  CMTimeScale v25;
  CMTimeFlags v26;
  CMTimeEpoch v27;
  float32x4_t *v28;
  double Seconds;
  float v30;
  float v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  float *v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  unint64_t v47;
  uint64_t v48;
  CMTimeEpoch v49;
  CMTimeScale v50;
  uint64_t v51;
  uint64_t v52;
  CMTime time;

  swift_beginAccess();
  v12 = v6[15];
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    return;
  v14 = v6[14];
  v15 = v6[16];
  v16 = v13 == v14 ? v6[16] : 0;
  if (*(_QWORD *)(v12 + 24) < 2uLL)
    return;
  v17 = __OFSUB__(v15, 1);
  v18 = v15 - 1;
  if (v17)
    goto LABEL_47;
  v19 = v18 + v14;
  if (__OFADD__(v18, v14))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (!v14)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return;
  }
  v49 = a3;
  v50 = a2;
  if (v14 == -1 && v19 == 0x8000000000000000)
    goto LABEL_50;
  swift_bridgeObjectRetain_n();
  if ((v16 & 0x8000000000000000) == 0)
  {
    v47 = HIDWORD(a2);
    v48 = v12;
    v20 = v19 % v14;
    v21 = v12 + 32;
    v51 = v12 + 32;
    v52 = v19 % v14;
    while (1)
    {
      v22 = *(_QWORD *)(v12 + 16);
      if (v16 >= v22)
      {
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v23 = v21 + 72 * v16;
      if ((*(_BYTE *)(v23 + 28) & 1) == 0)
        break;
LABEL_38:
      if (v16 == v20)
      {
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }
      v16 = (uint64_t)(v16 + 1) % (uint64_t)v22;
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_40;
    }
    v24 = *(_QWORD *)v23;
    v25 = *(_DWORD *)(v23 + 8);
    v26 = *(_DWORD *)(v23 + 12);
    v27 = *(_QWORD *)(v23 + 16);
    v28 = *(float32x4_t **)(v23 + 32);
    swift_bridgeObjectRetain();
    if ((CMTime.isValid.getter() & 1) != 0)
    {
      if ((CMTime.isValid.getter() & 1) != 0)
      {
        time.value = v24;
        time.timescale = v25;
        time.flags = v26;
        time.epoch = v27;
        Seconds = CMTimeGetSeconds(&time);
        time.value = a1;
        time.timescale = v50;
        time.flags = v47;
        time.epoch = v49;
        v30 = Seconds - CMTimeGetSeconds(&time);
        v31 = fabsf(v30);
      }
      else
      {
        v31 = INFINITY;
      }
      v12 = v48;
      if (v31 <= a6)
      {
LABEL_23:
        v32 = v28[1].i64[0];
        if (!v32)
          goto LABEL_46;
        if (v32 != 1)
        {
          if (specialized static PinchGestureHelper.distanceFromPointToLineSegment(_:_:_:)(a4, v28[2], v28[3]) <= a5)
            goto LABEL_41;
          if (v32 != 2)
          {
            v34 = v32 - 2;
            v35 = &v28[4].f32[2];
            while (v34)
            {
              v36 = *(v35 - 4);
              v37 = *(float32x2_t *)(v35 - 6);
              *(float32x2_t *)v33.f32 = vsub_f32(*(float32x2_t *)a4.f32, v37);
              v33.f32[2] = a4.f32[2] - v36;
              v38 = vsub_f32(*(float32x2_t *)(v35 - 2), v37);
              *(float32x2_t *)v39.f32 = v38;
              v39.f32[2] = *v35 - v36;
              v39.i32[3] = 0;
              v40 = vmulq_f32(v33, v39);
              v41 = vmulq_f32(v39, v39);
              v33 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))));
              if (v33.f32[0] < 0.0)
                v42 = 0.0;
              else
                v42 = v33.f32[0];
              if (v33.f32[0] >= 1.0)
                v43 = 1.0;
              else
                v43 = v42;
              *(float32x2_t *)v44.f32 = vadd_f32(v37, vmul_n_f32(v38, v43));
              v44.f32[2] = v36 + (float)((float)(*v35 - v36) * v43);
              v44.i32[3] = 0;
              v45 = vsubq_f32(a4, v44);
              v46 = vmulq_f32(v45, v45);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]) <= a5)goto LABEL_41;
              v35 += 4;
              if (!--v34)
                goto LABEL_37;
            }
            __break(1u);
            goto LABEL_45;
          }
        }
      }
    }
    else if (a6 >= INFINITY)
    {
      goto LABEL_23;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    v21 = v51;
    v20 = v52;
    goto LABEL_38;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_43:
  swift_bridgeObjectRelease();
}

double one-time initialization function for estimatedMouthLocation()
{
  double result;

  result = -5.23869004e-11;
  static HandApproachingMouthManager.estimatedMouthLocation = xmmword_23D9BDAF0;
  return result;
}

void HandApproachingMouthManager.minDistanceToRecentHandApproachingMouthEventTrajectory(_:_:_:)(CMTimeValue a1, unint64_t a2, CMTimeEpoch a3, float32x4_t a4, float a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  CMTimeValue v24;
  CMTimeScale v25;
  CMTimeFlags v26;
  CMTimeEpoch v27;
  float32x2_t *v28;
  float32x4_t v29;
  double Seconds;
  float v31;
  float v32;
  float32x4_t v33;
  float32x2_t v34;
  uint64_t v35;
  float32x2_t v36;
  float v37;
  float *v38;
  float v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CMTimeValue v54;
  CMTimeEpoch v55;
  CMTimeScale v56;
  uint64_t v57;
  CMTime time;

  swift_beginAccess();
  v10 = v5[15];
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return;
  v12 = v5[14];
  v13 = v5[16];
  v14 = v11 == v12 ? v5[16] : 0;
  if (*(_QWORD *)(v10 + 24) < 2uLL)
    return;
  v15 = __OFSUB__(v13, 1);
  v16 = v13 - 1;
  if (v15)
    goto LABEL_47;
  v17 = v16 + v12;
  if (__OFADD__(v16, v12))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (!v12)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return;
  }
  v54 = a1;
  v55 = a3;
  v56 = a2;
  if (v12 == -1 && v17 == 0x8000000000000000)
    goto LABEL_50;
  swift_bridgeObjectRetain();
  if ((v14 & 0x8000000000000000) == 0)
  {
    v18 = v17 % v12;
    v19 = v10 + 32;
    v20 = INFINITY;
    v53 = v10;
    v51 = HIDWORD(a2);
    v52 = v18;
    v57 = v10 + 32;
    do
    {
      v21 = *(_QWORD *)(v10 + 16);
      if (v14 >= v21)
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v22 = v19 + 72 * v14;
      if ((*(_BYTE *)(v22 + 28) & 1) != 0)
      {
        v23 = INFINITY;
        goto LABEL_39;
      }
      v24 = *(_QWORD *)v22;
      v25 = *(_DWORD *)(v22 + 8);
      v26 = *(_DWORD *)(v22 + 12);
      v27 = *(_QWORD *)(v22 + 16);
      v28 = *(float32x2_t **)(v22 + 32);
      swift_bridgeObjectRetain();
      if ((CMTime.isValid.getter() & 1) != 0)
      {
        if ((CMTime.isValid.getter() & 1) != 0)
        {
          time.value = v24;
          time.timescale = v25;
          time.flags = v26;
          time.epoch = v27;
          Seconds = CMTimeGetSeconds(&time);
          time.value = v54;
          time.timescale = v56;
          time.flags = v51;
          time.epoch = v55;
          v31 = Seconds - CMTimeGetSeconds(&time);
          v32 = fabsf(v31);
        }
        else
        {
          v32 = INFINITY;
        }
        v33 = a4;
        v18 = v52;
        v10 = v53;
        if (v32 > a5)
          goto LABEL_37;
      }
      else
      {
        v33 = a4;
        if (a5 < INFINITY)
          goto LABEL_37;
      }
      v34 = v28[2];
      if (!*(_QWORD *)&v34)
        goto LABEL_46;
      v35 = *(_QWORD *)&v34 - 1;
      if (v35)
      {
        v36 = v28[4];
        v37 = v28[5].f32[0];
        v38 = (float *)&v28[7];
        v23 = INFINITY;
        do
        {
          *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)v33.f32, v36);
          v29.f32[2] = a4.f32[2] - v37;
          v39 = *v38;
          v40 = *(float32x2_t *)(v38 - 2);
          v41 = vsub_f32(v40, v36);
          *(float32x2_t *)v42.f32 = v41;
          v42.f32[2] = *v38 - v37;
          v42.i32[3] = 0;
          v43 = vmulq_f32(v29, v42);
          v44 = vmulq_f32(v42, v42);
          v29 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))));
          if (v29.f32[0] < 0.0)
            v45 = 0.0;
          else
            v45 = v29.f32[0];
          if (v29.f32[0] >= 1.0)
            v46 = 1.0;
          else
            v46 = v45;
          *(float32x2_t *)v47.f32 = vadd_f32(v36, vmul_n_f32(v41, v46));
          v47.f32[2] = v37 + (float)((float)(*v38 - v37) * v46);
          v47.i32[3] = 0;
          v48 = vsubq_f32(v33, v47);
          v49 = vmulq_f32(v48, v48);
          v50 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0]);
          if (v50 < v23)
            v23 = v50;
          v38 += 4;
          v37 = v39;
          v36 = v40;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      v23 = INFINITY;
LABEL_38:
      v19 = v57;
LABEL_39:
      if (v23 < v20)
        v20 = v23;
      if (v14 == v18)
        goto LABEL_44;
      v14 = (uint64_t)(v14 + 1) % (uint64_t)v21;
    }
    while ((v14 & 0x8000000000000000) == 0);
  }
  __break(1u);
LABEL_44:
  swift_bridgeObjectRelease();
}

uint64_t HandApproachingMouthManager.updateBuffers(_:_:_:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float a9)
{
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v15;
  unint64_t v16;
  float32x4_t v17;
  __n128 v18;
  uint64_t v19;
  int8x16_t v20;
  char v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  __n128 v39;
  float32x4_t v40;

  v10 = v9;
  v15 = *(float32x2_t **)(result + 8);
  if (one-time initialization token for estimatedMouthLocation != -1)
  {
    v38 = a7;
    v40 = a8;
    v34 = a5;
    v36 = a6;
    result = swift_once();
    a5 = v34;
    a6 = v36;
    a7 = v38;
    a8 = v40;
  }
  v16 = (unint64_t)v15[2];
  if (v16 < 5)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v16 < 0xA)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v17 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, *(float *)&static HandApproachingMouthManager.estimatedMouthLocation), a6, *(float32x2_t *)&static HandApproachingMouthManager.estimatedMouthLocation, 1), a7, (float32x4_t)static HandApproachingMouthManager.estimatedMouthLocation, 2), a8);
  v18.n128_u64[0] = (unint64_t)vmul_f32(vadd_f32(v15[22], v15[42]), (float32x2_t)0x3F0000003F000000);
  v18.n128_f32[2] = (float)(v15[23].f32[0] + v15[43].f32[0]) * 0.5;
  v18.n128_u32[3] = 0;
  v37 = v17;
  v39 = v18;
  swift_beginAccess();
  v19 = specialized CircularBuffer.last.getter(*(_QWORD *)(v10 + 88), *(_QWORD *)(v10 + 96), *(_QWORD *)(v10 + 104));
  v20.i32[0] = 0;
  v22.i32[0] = v21 & 1;
  v23 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v22, v20), 0);
  v22.i64[0] = v19;
  v22.i64[1] = v24;
  v35 = vbslq_s8(v23, v22, (int8x16_t)0);
  swift_beginAccess();
  specialized CircularBuffer.add(_:)(v39);
  swift_endAccess();
  v25 = specialized static PinchGestureHelper.distanceFromPointToLine(_:_:_:)(v37, (float32x4_t)v39, v35);
  swift_beginAccess();
  specialized CircularBuffer.add(_:)(v25);
  swift_endAccess();
  v26 = vsubq_f32((float32x4_t)v39, v37);
  v27 = vmulq_f32(v26, v26);
  v28 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
  swift_beginAccess();
  specialized CircularBuffer.add(_:)(v28);
  swift_endAccess();
  swift_beginAccess();
  specialized CircularBuffer.add(_:)(a9);
  result = swift_endAccess();
  if (*(float *)(v10 + 204) > v28)
  {
    v29 = *(_QWORD *)(v10 + 136);
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      *(_QWORD *)(v10 + 136) = v31;
      goto LABEL_9;
    }
LABEL_19:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v10 + 136) = 0;
  *(_BYTE *)(v10 + 152) = 0;
LABEL_9:
  if (*(float *)(v10 + 240) <= a9)
  {
LABEL_13:
    v33 = 0;
    goto LABEL_14;
  }
  v32 = *(_QWORD *)(v10 + 144);
  v30 = __OFADD__(v32, 1);
  v33 = v32 + 1;
  if (v30)
  {
    __break(1u);
    goto LABEL_13;
  }
LABEL_14:
  *(_QWORD *)(v10 + 144) = v33;
  if (v28 < *(float *)(v10 + 196))
  {
    *(_QWORD *)(v10 + 156) = a2;
    *(_QWORD *)(v10 + 164) = a3;
    *(_QWORD *)(v10 + 172) = a4;
    *(_BYTE *)(v10 + 180) = 0;
  }
  return result;
}

Swift::Void __swiftcall HandApproachingMouthManager.checkIfHandIsStillCloseToMouth(_:)(CMTime a1)
{
  uint64_t v1;
  CMTimeEpoch epoch;
  uint64_t v3;
  CMTimeValue value;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  CMTimeValue v14;
  CMTimeScale v15;
  CMTimeEpoch v16;
  int v17;
  char v18;
  uint64_t v19;
  float v20;
  int64_t v21;
  float v22;
  int v23;
  int64_t v24;
  float v25;
  float v26;
  float v27;
  CMTimeEpoch v28;
  double Seconds;
  float v30;
  char v31;
  CMTimeEpoch v32;
  CMTimeEpoch v33;
  __int128 v34;
  CMTimeFlags v35;
  char v36;
  CMTime time;
  int v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  CMTimeEpoch v42;
  char v43;
  float v44;

  epoch = a1.epoch;
  v3 = *(_QWORD *)&a1.timescale;
  value = a1.value;
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || *(_QWORD *)(v5 + 24) < 2uLL)
    return;
  v7 = *(_QWORD *)(v1 + 128);
  v8 = v7 - 1;
  if (__OFSUB__(v7, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  v9 = *(_QWORD *)(v1 + 112);
  v10 = __OFADD__(v8, v9);
  v11 = v8 + v9;
  if (v10)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (!v9)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v9 == -1 && v11 == 0x8000000000000000)
    goto LABEL_35;
  v12 = v11 % v9;
  if (v12 >= v6)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    return;
  }
  v13 = v5 + 72 * v12;
  v14 = *(_QWORD *)(v13 + 32);
  v15 = *(_DWORD *)(v13 + 40);
  v16 = *(_QWORD *)(v13 + 48);
  v17 = *(_DWORD *)(v13 + 56);
  v18 = *(_BYTE *)(v13 + 60);
  v19 = *(_QWORD *)(v13 + 64);
  v20 = *(float *)(v13 + 100);
  v36 = *(_BYTE *)(v13 + 96);
  if (v36 != 1)
    return;
  v33 = *(_QWORD *)(v13 + 88);
  v34 = *(_OWORD *)(v13 + 72);
  v35 = *(_DWORD *)(v13 + 44);
  swift_beginAccess();
  v21 = specialized CircularBuffer.last.getter(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  v22 = *(float *)&v21;
  if ((v21 & 0x100000000) != 0)
    v22 = INFINITY;
  if (*(float *)(v1 + 204) <= v22)
  {
    time.value = v14;
    time.timescale = v15;
    time.flags = v35;
    time.epoch = v16;
    v38 = v17;
    v39 = v18;
    v40 = v19;
    *(_QWORD *)&v41 = value;
    *((_QWORD *)&v41 + 1) = v3;
    v42 = epoch;
    v43 = 0;
    v44 = v20;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized CircularBuffer.replaceLast(_:)((uint64_t)&time);
    swift_endAccess();
LABEL_24:
    swift_bridgeObjectRelease();
    return;
  }
  v32 = v16;
  v23 = *(unsigned __int8 *)(v1 + 220);
  swift_bridgeObjectRetain();
  if (v23 != 1 || (v18 & 1) != 0)
    goto LABEL_24;
  v24 = specialized CircularBuffer.last.getter(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  v25 = *(float *)&v24;
  v26 = INFINITY;
  if ((v24 & 0x100000000) != 0)
    v25 = INFINITY;
  if (v25 >= v20)
    v27 = v20;
  else
    v27 = v25;
  v28 = v32;
  if ((CMTime.isValid.getter() & 1) != 0)
  {
    if ((CMTime.isValid.getter() & 1) != 0)
    {
      time.value = v14;
      time.timescale = v15;
      time.flags = v35;
      time.epoch = v32;
      Seconds = CMTimeGetSeconds(&time);
      time.value = value;
      *(_QWORD *)&time.timescale = v3;
      v28 = v32;
      time.epoch = epoch;
      v30 = Seconds - CMTimeGetSeconds(&time);
      v26 = fabsf(v30);
    }
    else
    {
      v26 = INFINITY;
    }
  }
  if (*(float *)(v1 + 216) >= v26)
  {
    v31 = 0;
  }
  else
  {
    *(_QWORD *)(v1 + 184) |= 0x80uLL;
    v31 = 1;
  }
  time.value = v14;
  time.timescale = v15;
  time.flags = v35;
  time.epoch = v28;
  v38 = v17;
  v39 = v31;
  v40 = v19;
  v41 = v34;
  v42 = v33;
  v43 = v36;
  v44 = v27;
  swift_beginAccess();
  outlined retain of (CameraSource, DetectionResult)((uint64_t)&time);
  specialized CircularBuffer.replaceLast(_:)((uint64_t)&time);
  swift_endAccess();
  outlined release of HandApproachingMouthManager.HandApproachingMouthEvent((uint64_t)&time);
  outlined release of HandApproachingMouthManager.HandApproachingMouthEvent((uint64_t)&time);
}

uint64_t specialized CircularBuffer.replaceLast(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  _QWORD v13[4];

  result = *v1;
  if (*v1)
  {
    v4 = (_QWORD *)v1[1];
    v5 = specialized CircularBuffer.lastAddedElementPtr.getter(result, v4, v1[2]);
    if ((v6 & 1) == 0)
    {
      v7 = v5;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        if ((v7 & 0x8000000000000000) == 0)
          goto LABEL_5;
      }
      else
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        v4 = (_QWORD *)result;
        if ((v7 & 0x8000000000000000) == 0)
        {
LABEL_5:
          if (v7 < v4[2])
          {
            v8 = &v4[9 * v7];
            outlined retain of (CameraSource, DetectionResult)(a1);
            result = swift_bridgeObjectRelease();
            *((_OWORD *)v8 + 2) = *(_OWORD *)a1;
            v9 = *(_OWORD *)(a1 + 16);
            v10 = *(_OWORD *)(a1 + 32);
            v11 = *(_OWORD *)(a1 + 48);
            v8[12] = *(_QWORD *)(a1 + 64);
            *((_OWORD *)v8 + 4) = v10;
            *((_OWORD *)v8 + 5) = v11;
            *((_OWORD *)v8 + 3) = v9;
            v1[1] = (uint64_t)v4;
            return result;
          }
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    v13[3] = MEMORY[0x24BEE0D00];
    v13[0] = 0xD000000000000052;
    v13[1] = 0x800000023D9D7950;
    type metadata accessor for HandyLoggerNeo();
    memset(v12, 0, sizeof(v12));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v12, 0xD000000000000050, 0x800000023D9D78F0, 141, (uint64_t)v13, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  return result;
}

uint64_t HandApproachingMouthManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandApproachingMouthManager()
{
  return objc_opt_self();
}

__n128 __swift_memcpy52_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HandApproachingMouthManager.ThresholdConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 52))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 28);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HandApproachingMouthManager.ThresholdConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 52) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 52) = 0;
    if (a2)
      *(_BYTE *)(result + 28) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandApproachingMouthManager.ThresholdConfig()
{
  return &type metadata for HandApproachingMouthManager.ThresholdConfig;
}

uint64_t initializeWithCopy for HandApproachingMouthManager.HandApproachingMouthEvent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandApproachingMouthManager.HandApproachingMouthEvent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for HandApproachingMouthManager.HandApproachingMouthEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandApproachingMouthManager.HandApproachingMouthEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandApproachingMouthManager.HandApproachingMouthEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandApproachingMouthManager.HandApproachingMouthEvent()
{
  return &type metadata for HandApproachingMouthManager.HandApproachingMouthEvent;
}

id specialized HandApproachingMouthManager.ThresholdConfig.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  uint64_t v21;
  id result;
  int v23;

  objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateHoverDistanceThreshold);
  v5 = v4;
  objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateHandToMouthDistanceThreshold);
  v7 = v6;
  objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateHandToMouthStrictDistanceThreshold);
  v9 = v8;
  objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateHandToMouthDistanceUpperThreshold);
  v11 = v10;
  objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateMouthToHandTrajectoryDistanceThreshold);
  v13 = v12;
  objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateMaxAllowedDistancesToMouthIncrease);
  v15 = v14;
  objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateMaxAllowedTimeNearMouth);
  v17 = v16;
  v18 = objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateWithMaxAllowedTimeNearMouth);
  objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateLastObjectInteractionTimeThreshold);
  v20 = v19;
  v21 = (int)objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateTrajectoryExtendFrames);
  result = objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateTrajectoryHoverDistanceThreshold);
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = v7;
  *(_DWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a2 + 20) = v15;
  *(_DWORD *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 28) = v18;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v21;
  *(_DWORD *)(a2 + 48) = v23;
  return result;
}

uint64_t specialized HandApproachingMouthManager.init(_:)(void *a1)
{
  uint64_t v1;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  _OWORD v11[3];
  int v12;

  v3 = (char *)MEMORY[0x24BEE4AF8];
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 150, 0, MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v1 + 16) = 150;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = 0;
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 150, 0, v3);
  *(_QWORD *)(v1 + 40) = 150;
  *(_QWORD *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 56) = 0;
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 150, 0, v3);
  *(_QWORD *)(v1 + 64) = 150;
  *(_QWORD *)(v1 + 72) = v6;
  *(_QWORD *)(v1 + 80) = 0;
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 150, 0, v3);
  *(_QWORD *)(v1 + 88) = 150;
  *(_QWORD *)(v1 + 96) = v7;
  *(_QWORD *)(v1 + 104) = 0;
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10, 0, v3);
  *(_QWORD *)(v1 + 112) = 10;
  *(_QWORD *)(v1 + 120) = v8;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 156) = 0;
  *(_QWORD *)(v1 + 172) = 0;
  *(_QWORD *)(v1 + 164) = 0;
  *(_BYTE *)(v1 + 180) = 1;
  *(_QWORD *)(v1 + 184) = 0;
  specialized HandApproachingMouthManager.ThresholdConfig.init(_:)(a1, (uint64_t)v11);
  v9 = v11[1];
  *(_OWORD *)(v1 + 192) = v11[0];
  *(_OWORD *)(v1 + 208) = v9;
  *(_OWORD *)(v1 + 224) = v11[2];
  *(_DWORD *)(v1 + 240) = v12;
  return v1;
}

uint64_t outlined release of HandApproachingMouthManager.HandApproachingMouthEvent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for PinchGestureHelper()
{
  return objc_opt_self();
}

double specialized static PinchGestureHelper.getSidePinchAngle(_:)(uint64_t a1, double a2, double a3, float32x4_t a4)
{
  float32x2_t *v4;
  unint64_t v5;
  float32x4_t v6;
  float32_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  double result;

  v4 = *(float32x2_t **)(a1 + 8);
  v5 = (unint64_t)v4[2];
  if (v5 < 0xA)
  {
    __break(1u);
  }
  else if (v5 >= 0x11)
  {
    *(float32x2_t *)v6.f32 = vsub_f32(v4[20], v4[40]);
    v6.f32[2] = v4[21].f32[0] - v4[41].f32[0];
    v6.i32[3] = 0;
    *(float32x2_t *)a4.f32 = vsub_f32(v4[28], v4[68]);
    v7 = v4[29].f32[0] - COERCE_FLOAT(*(_QWORD *)&v4[69]);
    v8 = a4;
    v8.f32[2] = v7;
    v9 = vmul_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)a4.f32);
    v10 = vmulq_f32(v8, v6);
    v11 = (int32x4_t)vmulq_f32(v6, v6);
    v12 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 0);
    v12.i32[0] = v9.i32[0];
    v13 = (float32x2_t)vdup_laneq_s32(v11, 2);
    v11.i32[0] = v9.i32[1];
    v13.f32[0] = v7 * v7;
    v14 = vsqrt_f32(vadd_f32(v13, vadd_f32(v12, *(float32x2_t *)v11.i8)));
    *(float *)&result = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]/ (float)(vmul_lane_f32(v14, v14, 1).f32[0] + 0.000001));
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized static PinchGestureHelper.getPinchVector(_:_:)(uint64_t a1, float32x4_t *a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v5 = *(_OWORD *)(a1 + 80);
    v4 = *(_OWORD *)(a1 + 96);
    v7 = *(_OWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 64);
    v8 = *(_OWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 24);
    v17 = a2[15];
    v18 = a2[16];
    v15 = a2[13];
    v16 = a2[14];
    v10 = *(_QWORD *)(a1 + 112);
    v13 = a1 + 120;
    v11 = *(_QWORD *)(a1 + 120);
    v12 = *(_QWORD *)(v13 + 8);
    v19[0] = result;
    v19[1] = v9;
    v20 = v8;
    v21 = v7;
    v22 = v6;
    v23 = v5;
    v24 = v4;
    v25 = v10;
    v26 = v11;
    v27 = v12 & 0x101;
    v28 = HIDWORD(v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HandPose.init(_:from:)((uint64_t)v19, (uint64_t)&v29, v15, v16, v17, v18);
    result = v30;
    v14 = *(_QWORD *)(v30 + 16);
    if (v14 < 5)
    {
      __break(1u);
    }
    else if (v14 >= 0xA)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized static PinchGestureHelper.getPalmNormal(_:_:)(uint64_t a1, float32x4_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 128);
    v7 = *(_OWORD *)(a1 + 80);
    v6 = *(_OWORD *)(a1 + 96);
    v9 = *(_OWORD *)(a1 + 48);
    v8 = *(_OWORD *)(a1 + 64);
    v10 = *(_OWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 24);
    v16 = a2[15];
    v17 = a2[16];
    v14 = a2[13];
    v15 = a2[14];
    v12 = *(_QWORD *)(a1 + 112);
    v18[0] = result;
    v18[1] = v11;
    v19 = v10;
    v20 = v9;
    v21 = v8;
    v22 = v7;
    v23 = v6;
    v24 = v12;
    v25 = v5;
    v26 = v4 & 0x101;
    v27 = HIDWORD(v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HandPose.init(_:from:)((uint64_t)v18, (uint64_t)&v28, v14, v15, v16, v17);
    result = v29;
    v13 = *(_QWORD *)(v29 + 16);
    if (v13)
    {
      if (v13 >= 0x16)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

float specialized static PinchGestureHelper.similarity(_:_:)(float32x4_t a1, float32x4_t a2)
{
  uint64_t v2;
  BOOL v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  BOOL v8;
  float v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v15;
  __int128 v16;
  float32x4_t v17;
  __int128 v18;

  v2 = 0;
  while (1)
  {
    v17 = a1;
    v4 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v18 = 0u;
    v5 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v3 = v4 == v5;
    if (v2 == 2)
      break;
    while (1)
    {
      ++v2;
      if (v3)
        break;
      if (v2 == 2)
        goto LABEL_7;
      v3 = 0;
    }
  }
  v6 = 0.0;
  if (v4 != v5)
  {
LABEL_7:
    v7 = 0;
    while (1)
    {
      v15 = a2;
      v9 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v16 = 0u;
      v10 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v8 = v9 == v10;
      if (v7 == 2)
        break;
      while (1)
      {
        ++v7;
        if (v8)
          break;
        if (v7 == 2)
          goto LABEL_13;
        v8 = 0;
      }
    }
    v6 = 0.0;
    if (v9 != v10)
    {
LABEL_13:
      v11 = vmulq_f32(a1, a2);
      v12 = vmulq_f32(a1, a1);
      v13 = vmulq_f32(a2, a2);
      return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]/ (float)(sqrtf(v12.f32[2] + vaddv_f32(*(float32x2_t *)v12.f32))* sqrtf(v13.f32[2] + vaddv_f32(*(float32x2_t *)v13.f32)));
    }
  }
  return v6;
}

void specialized static PinchGestureHelper.getPalmNormalHMD(_:)(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 7)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v1 < 0xC)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 >= 0x11)
  {
    __invert_f4(*(simd_float4x4 *)(a1 + 48));
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t specialized static PinchGestureHelper.getPalmNormalFromPinchFrameFeatures(_:)(uint64_t result)
{
  unint64_t v1;

  if (*(_QWORD *)(result + 240))
  {
    v1 = *(_QWORD *)(*(_QWORD *)(result + 248) + 16);
    if (v1)
    {
      if (v1 >= 0x16)
        return result;
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

float specialized static PinchGestureHelper.distanceFromPointToLine(_:_:_:)(float32x4_t a1, float32x4_t a2, int8x16_t a3)
{
  uint64_t v3;
  BOOL v4;
  float v5;
  float v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v16;
  int8x16_t v17;

  v3 = 0;
  while (1)
  {
    v16 = a2;
    v5 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v17 = a3;
    v6 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v4 = v5 == v6;
    if (v3 == 2)
      break;
    while (1)
    {
      ++v3;
      if (v4)
        break;
      if (v3 == 2)
        goto LABEL_9;
      v4 = 0;
    }
  }
  if (v5 == v6)
  {
    a1 = vsubq_f32(a1, a2);
  }
  else
  {
LABEL_9:
    v7 = vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1, (int8x16_t)a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL)), (float32x2_t)vdup_laneq_s32((int32x4_t)a2, 2));
    v8 = vsub_f32(*(float32x2_t *)a1.f32, *(float32x2_t *)a2.f32);
    *(float32x2_t *)v9.f32 = v8;
    *(float32x2_t *)&v9.u32[2] = v7;
    v10 = (float32x2_t)vsubq_f32((float32x4_t)a3, a2).u64[0];
    *(float32x2_t *)v11.f32 = v10;
    v11.i64[1] = v7.u32[1];
    v12 = vmulq_f32(v9, v11);
    v13 = vmulq_f32(v11, v11);
    v13.i32[0] = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)))).u32[0];
    *(float32x2_t *)a1.f32 = vsub_f32(v8, vmul_n_f32(v10, v13.f32[0]));
    a1.f32[2] = v7.f32[0] - vmuls_lane_f32(v13.f32[0], v7, 1);
  }
  v14 = vmulq_f32(a1, a1);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
}

float specialized static PinchGestureHelper.distanceFromPointToLineSegment(_:_:_:)(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;

  v3 = vsubq_f32(a3, a2);
  v4 = v3;
  v4.i32[3] = 0;
  v5 = vmulq_f32(vsubq_f32(a1, a2), v4);
  v6 = vmulq_f32(v4, v4);
  v7 = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1)))).f32[0];
  v8 = 0.0;
  if (v7 >= 0.0)
    v8 = v7;
  if (v7 >= 1.0)
    v9 = 1.0;
  else
    v9 = v8;
  *(float32x2_t *)a2.f32 = vadd_f32(*(float32x2_t *)a2.f32, vmul_n_f32(*(float32x2_t *)v3.f32, v9));
  a2.f32[2] = a2.f32[2] + vmuls_lane_f32(v9, v3, 2);
  v10 = vsubq_f32(a1, a2);
  v11 = vmulq_f32(v10, v10);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
}

uint64_t specialized static PinchGestureHelper.getPinchVectorFromPinchFrameFeatures(_:)(uint64_t result)
{
  unint64_t v1;

  if (*(_QWORD *)(result + 240))
  {
    v1 = *(_QWORD *)(*(_QWORD *)(result + 248) + 16);
    if (v1 < 5)
    {
      __break(1u);
    }
    else if (v1 >= 0xA)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

double specialized static PinchGestureHelper.updatePinchCentroidFromPinchFrameFeatures(_:_:_:)(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  BOOL v20;
  float v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  __int128 v35;
  float32x4_t v37;
  float32x4_t v39;
  __int128 v40;
  _OWORD v41[15];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[414];

  v4 = *(_OWORD *)(a1 + 208);
  v41[12] = *(_OWORD *)(a1 + 192);
  v41[13] = v4;
  v41[14] = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 144);
  v41[8] = *(_OWORD *)(a1 + 128);
  v41[9] = v5;
  v6 = *(_OWORD *)(a1 + 176);
  v41[10] = *(_OWORD *)(a1 + 160);
  v41[11] = v6;
  v7 = *(_OWORD *)(a1 + 80);
  v41[4] = *(_OWORD *)(a1 + 64);
  v41[5] = v7;
  v8 = *(_OWORD *)(a1 + 112);
  v41[6] = *(_OWORD *)(a1 + 96);
  v41[7] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v41[0] = *(_OWORD *)a1;
  v41[1] = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v41[2] = *(_OWORD *)(a1 + 32);
  v41[3] = v10;
  v11 = *(_QWORD *)(a1 + 240);
  v12 = *(_QWORD *)(a1 + 264);
  v13 = *(_QWORD *)(a1 + 352);
  memcpy(v51, (const void *)(a1 + 360), sizeof(v51));
  v42 = v11;
  v35 = *(_OWORD *)(a1 + 248);
  v43 = v35;
  v44 = v12;
  v14 = *(_OWORD *)(a1 + 288);
  v45 = *(_OWORD *)(a1 + 272);
  v46 = v14;
  v15 = *(_OWORD *)(a1 + 320);
  v47 = *(_OWORD *)(a1 + 304);
  v48 = v15;
  v49 = *(_OWORD *)(a1 + 336);
  v50 = v13;
  specialized static PinchGestureHelper.getPalmNormalFromPinchFrameFeatures(_:)((uint64_t)v41);
  v18 = v17;
  if (!v11)
  {
    v16 = 0uLL;
    goto LABEL_5;
  }
  v19 = v35;
  if (*(_QWORD *)(v35 + 16) >= 7uLL)
  {
    v16 = *(float32x4_t *)(v35 + 240);
LABEL_5:
    v19 = 0;
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  while (1)
  {
    v39 = v16;
    v21 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    v40 = 0u;
    v22 = *(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    v20 = v21 == v22;
    if (v19 == 2)
      break;
    while (1)
    {
      ++v19;
      if (v20)
        break;
      if (v19 == 2)
        goto LABEL_13;
      v20 = 0;
    }
  }
  if (v21 != v22)
  {
LABEL_13:
    v23 = a2;
    v37 = v16;
    *(double *)v24.i64 = simd_quaternion(v23, v18);
    v25 = vmulq_f32(v24, (float32x4_t)xmmword_23D9A3EA0);
    v26 = (int8x16_t)vnegq_f32(v25);
    v27 = (int8x16_t)vtrn2q_s32((int32x4_t)v25, vtrn1q_s32((int32x4_t)v25, (int32x4_t)v26));
    v28 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v25, v26, 8uLL), *(float32x2_t *)a3.f32, 1), (float32x4_t)vextq_s8(v27, v27, 8uLL), a3.f32[0]);
    v29 = (float32x4_t)vrev64q_s32((int32x4_t)v25);
    v29.i32[0] = v26.i32[1];
    v29.i32[3] = v26.i32[2];
    v30 = vmlaq_laneq_f32(v28, v29, a3, 2);
    v31 = (int8x16_t)vnegq_f32(v30);
    v32 = (int8x16_t)vtrn2q_s32((int32x4_t)v30, vtrn1q_s32((int32x4_t)v30, (int32x4_t)v31));
    v16 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v30, v31, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v32, v32, 8uLL), v24.f32[0]);
    v33 = (float32x4_t)vrev64q_s32((int32x4_t)v30);
    v33.i32[0] = v31.i32[1];
    v33.i32[3] = v31.i32[2];
    v16.i64[0] = vaddq_f32(v37, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v30, v24, 3), v33, v24, 2), v16)).u64[0];
  }
  return *(double *)v16.i64;
}

uint64_t specialized static PinchGestureHelper.checkPrevRawActionScores(_:_:_:_:)(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2 - a3;
  if (__OFSUB__(a2, a3))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v5 = *(_QWORD *)(result + 16);
  v6 = v5 - a3;
  if (__OFSUB__(v5, a3))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v6 < v4)
    v4 = v5 - a3;
  v7 = a3 - 1;
  if (__OFSUB__(a3, 1))
    goto LABEL_33;
  if ((v4 | v7) < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (__OFADD__(v7, 1))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v5 < a3)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (a3)
  {
    v8 = 0;
    v9 = result + 32;
    v10 = v4 == 0;
    v11 = result + 36;
    result = a3;
    while (1)
    {
      v12 = v8 + 1;
      if (*(float *)(v9 + 4 * v8) >= a4)
        break;
LABEL_13:
      if (v10)
        return 0;
      if (v8 + a3 <= v8)
        goto LABEL_27;
      if (v8 == v5)
        goto LABEL_28;
      if (v8 == v6)
        goto LABEL_29;
      if (a3 < -1)
        goto LABEL_30;
      result = v12 + a3;
      v10 = v12 == v4;
      v11 += 4;
      ++v8;
    }
    if (v12 == result)
      return 1;
    v13 = 0;
    while (v8 + v13 + 1 < result)
    {
      if (*(float *)(v11 + 4 * v13) < a4)
        goto LABEL_13;
      if (a3 - 1 == ++v13)
        return 1;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized static PinchGestureHelper.getIndexTipToThumbTipVectorFromPinchFrameFeatures(_:)(uint64_t result)
{
  unint64_t v1;

  if (*(_QWORD *)(result + 240))
  {
    v1 = *(_QWORD *)(*(_QWORD *)(result + 248) + 16);
    if (v1 < 5)
    {
      __break(1u);
    }
    else if (v1 >= 0xA)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

double specialized static PinchGestureHelper.updatePinchCentroid(_:_:_:_:)(uint64_t a1, float32x4_t *a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  unint64_t v23;
  BOOL v24;
  float v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v38;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  float32x4_t v59[17];
  _BYTE v60[280];

  v5 = a2[11];
  v59[10] = a2[10];
  v59[11] = v5;
  v44 = a2[13];
  v59[12] = a2[12];
  v6 = a2[7];
  v59[6] = a2[6];
  v59[7] = v6;
  v7 = a2[9];
  v59[8] = a2[8];
  v59[9] = v7;
  v8 = a2[3];
  v59[2] = a2[2];
  v59[3] = v8;
  v9 = a2[5];
  v59[4] = a2[4];
  v59[5] = v9;
  v10 = a2[1];
  v59[0] = *a2;
  v59[1] = v10;
  v41 = a2[14];
  v42 = a2[15];
  v43 = a2[16];
  memcpy(v60, &a2[17], sizeof(v60));
  v59[13] = v44;
  v59[14] = v41;
  v59[15] = v42;
  v59[16] = v43;
  specialized static PinchGestureHelper.getPalmNormal(_:_:)(a1, v59);
  v12 = v11;
  if (!*(_QWORD *)(a1 + 16))
  {
    v22 = 0uLL;
    goto LABEL_5;
  }
  v38 = v11;
  v14 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  v19 = *(_OWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 112);
  v49[0] = *(_QWORD *)(a1 + 16);
  v49[1] = v20;
  v50 = v19;
  v51 = v18;
  v52 = v17;
  v53 = v16;
  v54 = v15;
  v55 = v21;
  v56 = v14;
  v57 = v13 & 0x101;
  v58 = HIDWORD(v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HandPose.init(_:from:)((uint64_t)v49, (uint64_t)v59, v44, v41, v42, v43);
  v23 = *(_QWORD *)(v59[0].i64[1] + 16);
  if (v23 >= 7)
  {
    v45 = *(float32x4_t *)(v59[0].i64[1] + 240);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v45;
    v12 = v38;
LABEL_5:
    v23 = 0;
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  while (1)
  {
    v47 = v22;
    v25 = *(float *)((unint64_t)&v47 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    v48 = 0u;
    v26 = *(float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    v24 = v25 == v26;
    if (v23 == 2)
      break;
    while (1)
    {
      ++v23;
      if (v24)
        break;
      if (v23 == 2)
        goto LABEL_13;
      v24 = 0;
    }
  }
  if (v25 != v26)
  {
LABEL_13:
    v46 = v22;
    *(double *)v27.i64 = simd_quaternion(a3, v12);
    v28 = vmulq_f32(v27, (float32x4_t)xmmword_23D9A3EA0);
    v29 = (int32x4_t)vnegq_f32(v28);
    v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v28, vtrn1q_s32((int32x4_t)v28, v29));
    v31 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v29, 8uLL), *(float32x2_t *)a4.f32, 1), (float32x4_t)vextq_s8(v30, v30, 8uLL), a4.f32[0]);
    v32 = (float32x4_t)vrev64q_s32((int32x4_t)v28);
    v32.i32[0] = v29.i32[1];
    v32.i32[3] = v29.i32[2];
    v33 = vmlaq_laneq_f32(v31, v32, a4, 2);
    v34 = (int32x4_t)vnegq_f32(v33);
    v35 = (int8x16_t)vtrn2q_s32((int32x4_t)v33, vtrn1q_s32((int32x4_t)v33, v34));
    v22 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v34, 8uLL), *(float32x2_t *)v27.f32, 1), (float32x4_t)vextq_s8(v35, v35, 8uLL), v27.f32[0]);
    v36 = (float32x4_t)vrev64q_s32((int32x4_t)v33);
    v36.i32[0] = v34.i32[1];
    v36.i32[3] = v34.i32[2];
    v22.i64[0] = vaddq_f32(v46, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v33, v27, 3), v36, v27, 2), v22)).u64[0];
  }
  return *(double *)v22.i64;
}

uint64_t specialized static PinchGestureHelper.getMidpointBetweenThumbAndPinky(_:_:)(uint64_t a1, float32x4_t *a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v5 = *(_OWORD *)(a1 + 80);
    v4 = *(_OWORD *)(a1 + 96);
    v7 = *(_OWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 64);
    v8 = *(_OWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 24);
    v16 = a2[15];
    v17 = a2[16];
    v14 = a2[13];
    v15 = a2[14];
    v10 = *(_QWORD *)(a1 + 112);
    v13 = a1 + 120;
    v11 = *(_QWORD *)(a1 + 120);
    v12 = *(_QWORD *)(v13 + 8);
    v18[0] = result;
    v18[1] = v9;
    v19 = v8;
    v20 = v7;
    v21 = v6;
    v22 = v5;
    v23 = v4;
    v24 = v10;
    v25 = v11;
    v26 = v12 & 0x101;
    v27 = HIDWORD(v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HandPose.init(_:from:)((uint64_t)v18, (uint64_t)&v28, v14, v15, v16, v17);
    result = v29;
    if (*(_QWORD *)(v29 + 16) < 0x16uLL)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t specialized static PinchGestureHelper.calculateOcclusion(_:_:_:)(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _OWORD v40[7];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  result = *(_QWORD *)(a1 + 16);
  if (!result)
    return result;
  v7 = *(_OWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 64);
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 24);
  v38 = a2[15];
  v39 = a2[16];
  v36 = a2[13];
  v37 = a2[14];
  v12 = *(_QWORD *)(a1 + 112);
  v15 = a1 + 120;
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)&v42 = result;
  *((_QWORD *)&v42 + 1) = v11;
  v43 = v10;
  v44 = v9;
  v45 = v8;
  v46 = v7;
  v47 = v6;
  *(_QWORD *)&v48 = v12;
  *((_QWORD *)&v48 + 1) = v13;
  LOWORD(v49) = v14 & 0x101;
  HIDWORD(v49) = HIDWORD(v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HandPose.init(_:from:)((uint64_t)&v42, (uint64_t)v40, v36, v37, v38, v39);
  v46 = v40[4];
  v47 = v40[5];
  v48 = v40[6];
  v49 = v41;
  v42 = v40[0];
  v43 = v40[1];
  v44 = v40[2];
  v45 = v40[3];
  outlined retain of HandPose((uint64_t)&v42);
  v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg5043_s5Hands14StatisticUtilsC30calculateAveragee36OcclusionySfAA14HandDescriptorVFZSD6g4Vys5h9VSf_GSo06d2F7F6VXEfU_5Hands0S4PoseVTf1cn_nTf4ng_n(a3, (uint64_t)&v42);
  outlined release of HandPose((uint64_t)&v42);
  outlined release of HandPose((uint64_t)&v42);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    result = swift_bridgeObjectRelease();
    v35 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v35)
      goto LABEL_36;
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  *(_QWORD *)&v40[0] = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
  v18 = 0;
  v19 = *(_QWORD *)&v40[0];
  while (2)
  {
    v20 = 0;
    v21 = *(_QWORD *)(v16 + 32 + 8 * v18);
    v22 = v21 + 64;
    v23 = 1 << *(_BYTE *)(v21 + 32);
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v25 = v24 & *(_QWORD *)(v21 + 64);
    ++v18;
    v26 = (unint64_t)(v23 + 63) >> 6;
    v27 = 1.0;
    while (1)
    {
      if (v25)
      {
        v28 = __clz(__rbit64(v25));
        v25 &= v25 - 1;
        v29 = v28 | (v20 << 6);
        goto LABEL_9;
      }
      v30 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_42;
      if (v30 >= v26)
        break;
      v31 = *(_QWORD *)(v22 + 8 * v30);
      ++v20;
      if (!v31)
      {
        v20 = v30 + 1;
        if (v30 + 1 >= v26)
          break;
        v31 = *(_QWORD *)(v22 + 8 * v20);
        if (!v31)
        {
          v20 = v30 + 2;
          if (v30 + 2 >= v26)
            break;
          v31 = *(_QWORD *)(v22 + 8 * v20);
          if (!v31)
          {
            v20 = v30 + 3;
            if (v30 + 3 >= v26)
              break;
            v31 = *(_QWORD *)(v22 + 8 * v20);
            if (!v31)
            {
              v20 = v30 + 4;
              if (v30 + 4 >= v26)
                break;
              v31 = *(_QWORD *)(v22 + 8 * v20);
              if (!v31)
              {
                v32 = v30 + 5;
                if (v32 >= v26)
                  break;
                v31 = *(_QWORD *)(v22 + 8 * v32);
                if (!v31)
                {
                  while (1)
                  {
                    v20 = v32 + 1;
                    if (__OFADD__(v32, 1))
                      goto LABEL_43;
                    if (v20 >= v26)
                      goto LABEL_30;
                    v31 = *(_QWORD *)(v22 + 8 * v20);
                    ++v32;
                    if (v31)
                      goto LABEL_29;
                  }
                }
                v20 = v32;
              }
            }
          }
        }
      }
LABEL_29:
      v25 = (v31 - 1) & v31;
      v29 = __clz(__rbit64(v31)) + (v20 << 6);
LABEL_9:
      if (v27 >= *(float *)(*(_QWORD *)(v21 + 56) + 4 * v29))
        v27 = *(float *)(*(_QWORD *)(v21 + 56) + 4 * v29);
    }
LABEL_30:
    *(_QWORD *)&v40[0] = v19;
    v34 = *(_QWORD *)(v19 + 16);
    v33 = *(_QWORD *)(v19 + 24);
    if (v34 >= v33 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
      v19 = *(_QWORD *)&v40[0];
    }
    *(_QWORD *)(v19 + 16) = v34 + 1;
    *(float *)(v19 + 4 * v34 + 32) = v27;
    if (v18 != v17)
      continue;
    break;
  }
  result = swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(v19 + 16);
  if (!v35)
    goto LABEL_41;
LABEL_36:
  if (v35 == 1)
    goto LABEL_44;
  if (v35 < 3)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v35 != 3)
    return swift_bridgeObjectRelease();
LABEL_46:
  __break(1u);
  return result;
}

uint64_t specialized static PinchGestureHelper.getPinchJoints(_:_:)(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  unint64_t v19;
  float32x4_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  uint64_t v51;
  float32x4_t *v52;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v2 + 16) = 6;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    return v2;
  }
  v9 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 24);
  v34 = a2[15];
  v35 = a2[16];
  v32 = a2[13];
  v33 = a2[14];
  v14 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 120;
  v15 = *(_QWORD *)(a1 + 120);
  v16 = *(_QWORD *)(v17 + 8);
  v41[0] = v7;
  v41[1] = v13;
  v42 = v12;
  v43 = v11;
  v44 = v10;
  v45 = v9;
  v46 = v8;
  v47 = v14;
  v48 = v15;
  v49 = v16 & 0x101;
  v50 = HIDWORD(v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HandPose.init(_:from:)((uint64_t)v41, (uint64_t)&v51, v32, v33, v34, v35);
  v18 = v52;
  v19 = v52[1].u64[0];
  if (v19 < 5)
  {
    __break(1u);
  }
  else
  {
    v35 = v52[11];
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v5 = *(_QWORD *)(v2 + 16);
    v19 = *(_QWORD *)(v2 + 24);
    v3 = v5 + 1;
    if (v5 < v19 >> 1)
      goto LABEL_4;
  }
  v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v3, 1, (_QWORD *)v2);
LABEL_4:
  *(_QWORD *)(v2 + 16) = v3;
  v20 = v35;
  *(float32x4_t *)(v2 + 16 * v5 + 32) = v35;
  v21 = v18[1].u64[0];
  if (v21 < 4)
  {
    __break(1u);
  }
  else
  {
    v20 = v18[9];
    v21 = *(_QWORD *)(v2 + 24);
    v4 = v5 + 2;
    if ((uint64_t)(v5 + 2) <= (uint64_t)(v21 >> 1))
      goto LABEL_6;
  }
  v36 = v20;
  v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v4, 1, (_QWORD *)v2);
  v20 = v36;
  v2 = (uint64_t)v27;
LABEL_6:
  *(_QWORD *)(v2 + 16) = v4;
  *(float32x4_t *)(v2 + 16 * v3 + 32) = v20;
  v22 = v18[1].u64[0];
  if (v22 < 3)
  {
    __break(1u);
  }
  else
  {
    v20 = v18[7];
    v22 = *(_QWORD *)(v2 + 24);
    v3 = v5 + 3;
    if ((uint64_t)(v5 + 3) <= (uint64_t)(v22 >> 1))
      goto LABEL_8;
  }
  v37 = v20;
  v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v3, 1, (_QWORD *)v2);
  v20 = v37;
  v2 = (uint64_t)v28;
LABEL_8:
  *(_QWORD *)(v2 + 16) = v3;
  *(float32x4_t *)(v2 + 16 * v4 + 32) = v20;
  v23 = v18[1].u64[0];
  if (v23 < 0xA)
  {
    __break(1u);
  }
  else
  {
    v20 = v18[21];
    v23 = *(_QWORD *)(v2 + 24);
    v4 = v5 + 4;
    if ((uint64_t)(v5 + 4) <= (uint64_t)(v23 >> 1))
      goto LABEL_10;
  }
  v38 = v20;
  v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v4, 1, (_QWORD *)v2);
  v20 = v38;
  v2 = (uint64_t)v29;
LABEL_10:
  *(_QWORD *)(v2 + 16) = v4;
  *(float32x4_t *)(v2 + 16 * v3 + 32) = v20;
  v24 = v18[1].u64[0];
  if (v24 < 9)
  {
    __break(1u);
  }
  else
  {
    v20 = v18[19];
    v24 = *(_QWORD *)(v2 + 24);
    v3 = v5 + 5;
    if ((uint64_t)(v5 + 5) <= (uint64_t)(v24 >> 1))
      goto LABEL_12;
  }
  v39 = v20;
  v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v3, 1, (_QWORD *)v2);
  v20 = v39;
  v2 = (uint64_t)v30;
LABEL_12:
  *(_QWORD *)(v2 + 16) = v3;
  *(float32x4_t *)(v2 + 16 * v4 + 32) = v20;
  v25 = v18[1].u64[0];
  if (v25 < 8)
  {
    __break(1u);
    goto LABEL_28;
  }
  v20 = v18[17];
  v25 = *(_QWORD *)(v2 + 24);
  v4 = v5 + 6;
  if ((uint64_t)(v5 + 6) > (uint64_t)(v25 >> 1))
  {
LABEL_28:
    v40 = v20;
    v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v4, 1, (_QWORD *)v2);
    v20 = v40;
    v2 = (uint64_t)v31;
  }
  *(_QWORD *)(v2 + 16) = v4;
  *(float32x4_t *)(v2 + 16 * v3 + 32) = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

double specialized static PinchGestureHelper.getWristPitchRotation(_:)(float32x4_t **a1, float32x4_t a2, double a3, float32x4_t a4, float32x4_t a5)
{
  float32x2_t *v5;
  float v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;

  if (!(*a1)[1].i64[0])
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = (float32x2_t *)a1[1];
  if (*(_QWORD *)&v5[2] < 0x1BuLL)
  {
LABEL_7:
    __break(1u);
    return *(double *)a2.i64;
  }
  v6 = v5[5].f32[0];
  *(float32x2_t *)a4.f32 = v5[4];
  *(float32x2_t *)a5.f32 = vsub_f32(vmul_f32(vadd_f32(v5[88], v5[28]), (float32x2_t)0x3F0000003F000000), *(float32x2_t *)a4.f32);
  a5.f32[2] = (float)((float)(v5[89].f32[0] + v5[29].f32[0]) * 0.5) - v6;
  v7 = (int32x4_t)vmulq_f32(a5, a5);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  *(float32x2_t *)a4.f32 = vsub_f32(*(float32x2_t *)a4.f32, v5[108]);
  a4.f32[2] = v6 - COERCE_FLOAT(*(_QWORD *)&v5[109]);
  v10 = (int32x4_t)vmulq_f32(a4, a4);
  a2 = vmulq_n_f32(a5, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
  v13 = vmulq_n_f32(a4, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
  v14 = (uint32x4_t)vceqq_f32(v13, a2);
  v14.i32[3] = v14.i32[2];
  if ((vminvq_u32(v14) & 0x80000000) != 0)
  {
    a2.i32[0] = 0;
  }
  else
  {
    v15 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), (int8x16_t)a2, 0xCuLL), vnegq_f32(v13)), a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL));
    v16 = vmulq_f32(v13, a2);
    LODWORD(v17) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
    v18 = vmulq_f32((*a1)[5], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL));
    a2.f32[0] = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0], v17);
  }
  return *(double *)a2.i64;
}

uint64_t specialized static PinchGestureHelper.getPinchJointDistances(_:)(uint64_t result, float32x4_t a2, double a3, float32x4_t a4, double a5, float32x4_t a6)
{
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float32x4_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;

  v6 = *(_QWORD *)(result + 16);
  if (!v6)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 < 4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v6 == 4)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  a2.i32[0] = *(_DWORD *)(result + 32);
  v7 = *(float *)(result + 36);
  a4.i32[0] = *(_DWORD *)(result + 80);
  v8 = *(float *)(result + 84);
  a6.f32[0] = a2.f32[0] - a4.f32[0];
  v9 = *(float *)(result + 40);
  v10 = *(float *)(result + 88);
  a6.f32[1] = v7 - v8;
  a6.f32[2] = v9 - v10;
  v11 = vmulq_f32(a6, a6);
  v12 = *(float *)(result + 96);
  v13 = *(float *)(result + 100);
  a2.f32[0] = a2.f32[0] - v12;
  v14 = *(float *)(result + 104);
  a2.f32[1] = v7 - v13;
  a2.f32[2] = v9 - v14;
  v15 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v16 = vmulq_f32(a2, a2);
  v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1);
  v16.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, v17)).u32[0];
  v17.i32[0] = *(_DWORD *)(result + 48);
  v11.i32[0] = *(_DWORD *)(result + 52);
  a4.f32[0] = v17.f32[0] - a4.f32[0];
  v18 = *(float *)(result + 56);
  a4.f32[1] = v11.f32[0] - v8;
  a4.f32[2] = v18 - v10;
  v19 = sqrtf(v16.f32[0]);
  v20 = vmulq_f32(a4, a4);
  v17.f32[0] = v17.f32[0] - v12;
  v17.f32[1] = v11.f32[0] - v13;
  v17.f32[2] = v18 - v14;
  v21 = vmulq_f32(v17, v17);
  v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]);
  v23 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v24 = swift_allocObject();
  *(float *)(v24 + 36) = v19;
  *(float *)(v24 + 40) = v22;
  *(float *)(v24 + 44) = v23;
  *(float *)(v24 + 32) = v15;
  v25 = 2;
  if (v22 >= *(float *)(v24 + 32 + 4 * (v19 < v15)))
    v25 = v19 < v15;
  v26 = *(float *)(v24 + 32 + 4 * v25);
  *(_OWORD *)(v24 + 16) = xmmword_23D9A7080;
  if (v23 < v26)
    return 3;
  return v25;
}

unint64_t specialized static PinchGestureHelper.getCancellationReasonDescription(_:)(uint64_t a1, char a2)
{
  unint64_t result;

  if ((a2 & 1) != 0)
    return 0xD000000000000012;
  if (a1 > 127)
  {
    switch(a1)
    {
      case 128:
        return 0xD000000000000010;
      case 256:
        return 0xD00000000000001DLL;
      case 512:
        return 0xD000000000000024;
      default:
        return 0x64696C61766E49;
    }
  }
  else
  {
    result = 0x6F69746361206F4ELL;
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = 0x20676E6964696C53;
        break;
      case 2:
        result = 0x20646573736F7243;
        break;
      case 4:
        result = 0xD000000000000016;
        break;
      case 8:
        result = 0xD000000000000017;
        break;
      case 16:
        result = 0x6E6567204D54534CLL;
        break;
      case 32:
        return 0xD000000000000012;
      case 64:
        result = 0xD00000000000001DLL;
        break;
      default:
        return 0x64696C61766E49;
    }
  }
  return result;
}

uint64_t specialized static PinchGestureHelper.getIndexTipToThumbTipVector(_:_:)(uint64_t a1, float32x4_t *a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v5 = *(_OWORD *)(a1 + 80);
    v4 = *(_OWORD *)(a1 + 96);
    v7 = *(_OWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 64);
    v8 = *(_OWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 24);
    v17 = a2[15];
    v18 = a2[16];
    v15 = a2[13];
    v16 = a2[14];
    v10 = *(_QWORD *)(a1 + 112);
    v13 = a1 + 120;
    v11 = *(_QWORD *)(a1 + 120);
    v12 = *(_QWORD *)(v13 + 8);
    v19[0] = result;
    v19[1] = v9;
    v20 = v8;
    v21 = v7;
    v22 = v6;
    v23 = v5;
    v24 = v4;
    v25 = v10;
    v26 = v11;
    v27 = v12 & 0x101;
    v28 = HIDWORD(v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HandPose.init(_:from:)((uint64_t)v19, (uint64_t)&v29, v15, v16, v17, v18);
    result = v30;
    v14 = *(_QWORD *)(v30 + 16);
    if (v14 < 5)
    {
      __break(1u);
    }
    else if (v14 >= 0xA)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  return result;
}

double simd_quaternion(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  unint64_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;

  v2 = vmulq_f32(a1, a2);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] >= 0.0)
  {
    v33 = vaddq_f32(a1, a2);
    v34 = (int32x4_t)vmulq_f32(v33, v33);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    v37 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), vnegq_f32(a1)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
    v32 = vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL).u64[0];
  }
  else
  {
    v3 = (int32x4_t)vmulq_f32(a1, a1);
    v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
    v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
    v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
    v3.i32[0] = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
    v6 = (int32x4_t)vmulq_f32(a2, a2);
    v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
    v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
    v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
    v9 = vaddq_f32(vmulq_n_f32(a1, *(float *)v3.i32), vmulq_n_f32(a2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]));
    v10 = vmulq_f32(v9, v9);
    v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
    if (v11 <= 1.4211e-14)
    {
      v39 = vabsq_f32(a1);
      v40 = v39.f32[1];
      v41 = v39.f32[2];
      if (v39.f32[0] > v39.f32[1] || v39.f32[0] > v39.f32[2])
      {
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        if (v40 <= v41)
        {
          v43 = vmulq_f32(a1, (float32x4_t)xmmword_23D9BDBB0);
          v44 = (float32x4_t)xmmword_23D9A3E20;
        }
        else
        {
          v43 = vmulq_f32(a1, (float32x4_t)xmmword_23D9BDBC0);
          v44 = (float32x4_t)xmmword_23D9A3E30;
        }
      }
      else
      {
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        v43 = vmulq_f32(a1, (float32x4_t)xmmword_23D9B0390);
        v44 = (float32x4_t)xmmword_23D9A3E10;
      }
      v45 = vmlaq_f32(v43, v44, v42);
      v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
      v47 = (int32x4_t)vmulq_f32(v45, v45);
      v47.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), *(float32x2_t *)v47.i8)).u32[0];
      v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
      v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
      v32 = vmulq_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]).u64[0];
    }
    else
    {
      v12 = v11;
      v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
      v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
      v15 = vmulq_n_f32(v9, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
      v16 = vaddq_f32(a1, v15);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      v20 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(a1)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
      v22 = vmulq_f32(v20, a1);
      v23 = vaddq_f32(a2, v15);
      v24 = (int32x4_t)vmulq_f32(v23, v23);
      v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
      *(float32x2_t *)v20.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
      *(float32x2_t *)v20.f32 = vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)));
      v25 = vmulq_n_f32(v23, vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32))).f32[0]);
      v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), vnegq_f32(v15)), v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
      v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
      v28 = vmulq_f32(v15, v25);
      v27.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).u32[0];
      v29 = (int32x4_t)vnegq_f32(v27);
      v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v29));
      v31 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
      v31.i32[0] = v29.i32[1];
      v31.i32[3] = v29.i32[2];
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), v31, *(float32x2_t *)v21.f32, 1), vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v29, 8uLL), v21.f32[0]), (float32x4_t)vextq_s8(v30, v30, 8uLL), v21, 2)).u64[0];
    }
  }
  return *(double *)&v32;
}

Swift::Void __swiftcall RecoverRepetitivePinch.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  HandsKitConfig *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  HandsKitConfig *v8;
  uint64_t v9;
  HandsKitConfig *v10;
  uint64_t v11;
  HandsKitConfig *v12;
  uint64_t v13;
  HandsKitConfig *v14;
  uint64_t v15;
  HandsKitConfig *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 v54;
  float v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  __int16 v72;

  v2 = v1;
  type metadata accessor for PinchGesturesForRecovery();
  swift_allocObject();
  v4 = a1;
  v5 = specialized PinchGesturesForRecovery.init(_:)(v4);

  *(_QWORD *)(v2 + 16) = v5;
  swift_release();
  type metadata accessor for PinchRecoveryAnalytics();
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = MEMORY[0x24BEE4AF8];
  v8 = v4;
  *(_BYTE *)(v6 + 16) = -[HandsKitConfig EnableCoreAnalytics](v8, sel_EnableCoreAnalytics);
  swift_beginAccess();
  *(_QWORD *)(v6 + 24) = v7;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 1008) = v6;
  swift_release();
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v7;
  v10 = v8;
  *(_BYTE *)(v9 + 16) = -[HandsKitConfig EnableCoreAnalytics](v10, sel_EnableCoreAnalytics);
  swift_beginAccess();
  *(_QWORD *)(v9 + 24) = v7;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 1016) = v9;
  swift_release();
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v7;
  v12 = v10;
  *(_BYTE *)(v11 + 16) = -[HandsKitConfig EnableCoreAnalytics](v12, sel_EnableCoreAnalytics);
  swift_beginAccess();
  *(_QWORD *)(v11 + 24) = v7;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 1024) = v11;
  swift_release();
  v13 = swift_allocObject();
  *(_BYTE *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = v7;
  v14 = v12;
  *(_BYTE *)(v13 + 16) = -[HandsKitConfig EnableCoreAnalytics](v14, sel_EnableCoreAnalytics);
  swift_beginAccess();
  *(_QWORD *)(v13 + 24) = v7;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 1032) = v13;
  swift_release();
  v15 = swift_allocObject();
  *(_BYTE *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = v7;
  v16 = v14;
  *(_BYTE *)(v15 + 16) = -[HandsKitConfig EnableCoreAnalytics](v16, sel_EnableCoreAnalytics);
  swift_beginAccess();
  *(_QWORD *)(v15 + 24) = v7;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 1040) = v15;
  swift_release();
  LOBYTE(v15) = -[HandsKitConfig EnableScrollRecovery](v16, sel_EnableScrollRecovery);
  LOBYTE(v14) = -[HandsKitConfig EnableRepetitiveTapRecovery](v16, sel_EnableRepetitiveTapRecovery);
  v17 = -[HandsKitConfig EnableTapRecoveryBreakFrame](v16, sel_EnableTapRecoveryBreakFrame);
  v18 = -[HandsKitConfig UseBreakForTapRecovery](v16, sel_UseBreakForTapRecovery);
  -[HandsKitConfig CacheTimeLimit](v16, sel_CacheTimeLimit);
  v70 = v19;
  -[HandsKitConfig ThresholdAdaptiveMakeRange](v16, sel_ThresholdAdaptiveMakeRange);
  v69 = v20;
  -[HandsKitConfig ThresholdHdDiff](v16, sel_ThresholdHdDiff);
  v68 = v21;
  -[HandsKitConfig ThresholdKuckleDiff](v16, sel_ThresholdKuckleDiff);
  v67 = v22;
  -[HandsKitConfig ThresholdOcclusion](v16, sel_ThresholdOcclusion);
  v66 = v23;
  -[HandsKitConfig ThresholdHd](v16, sel_ThresholdHd);
  v65 = v24;
  -[HandsKitConfig ThresholdAngle](v16, sel_ThresholdAngle);
  v64 = v25;
  -[HandsKitConfig ThresholdBreakTipOcclusion](v16, sel_ThresholdBreakTipOcclusion);
  v27 = v26;
  -[HandsKitConfig ThresholdPreciseMakeFrameMakeRange](v16, sel_ThresholdPreciseMakeFrameMakeRange);
  v29 = v28;
  -[HandsKitConfig ThresholdPreciseMakeFrameRawActionScore](v16, sel_ThresholdPreciseMakeFrameRawActionScore);
  v31 = v30;
  -[HandsKitConfig ThresholdPreciseBreakFrameBreakRange](v16, sel_ThresholdPreciseBreakFrameBreakRange);
  v33 = v32;
  -[HandsKitConfig ThresholdPreciseBreakFrameRawActionScore](v16, sel_ThresholdPreciseBreakFrameRawActionScore);
  v35 = v34;
  -[HandsKitConfig ThresholdTapKuckleDiff](v16, sel_ThresholdTapKuckleDiff);
  v37 = v36;
  -[HandsKitConfig ThresholdTapPinchCentroidDiff](v16, sel_ThresholdTapPinchCentroidDiff);
  v39 = v38;
  -[HandsKitConfig ThresholdTapPalmOrientationDiff](v16, sel_ThresholdTapPalmOrientationDiff);
  v41 = v40;
  v42 = -[HandsKitConfig nominalLightCurrentUpperBound](v16, sel_nominalLightCurrentUpperBound);
  v43 = -[HandsKitConfig lowLightPulseWidthThreshold](v16, sel_lowLightPulseWidthThreshold);
  *(_BYTE *)(v2 + 1048) = v15;
  *(_BYTE *)(v2 + 1049) = (_BYTE)v14;
  *(_BYTE *)(v2 + 1050) = v17;
  *(_BYTE *)(v2 + 1051) = v18;
  *(_QWORD *)(v2 + 1056) = 5;
  *(_DWORD *)(v2 + 1064) = v70;
  *(_QWORD *)(v2 + 1072) = 4;
  *(_DWORD *)(v2 + 1080) = v69;
  *(_DWORD *)(v2 + 1084) = v68;
  *(_DWORD *)(v2 + 1088) = v67;
  *(_DWORD *)(v2 + 1092) = v66;
  *(_DWORD *)(v2 + 1096) = v65;
  *(_DWORD *)(v2 + 1100) = v64;
  *(_DWORD *)(v2 + 1104) = 0x40000000;
  *(_DWORD *)(v2 + 1108) = v27;
  *(_DWORD *)(v2 + 1112) = v29;
  *(_DWORD *)(v2 + 1116) = v31;
  *(_DWORD *)(v2 + 1120) = v33;
  *(_DWORD *)(v2 + 1124) = v35;
  *(_DWORD *)(v2 + 1128) = v37;
  *(_DWORD *)(v2 + 1132) = v39;
  *(_DWORD *)(v2 + 1136) = v41;
  *(_OWORD *)(v2 + 1144) = xmmword_23D9BDC40;
  *(_OWORD *)(v2 + 1160) = xmmword_23D9BDC50;
  *(_OWORD *)(v2 + 1176) = xmmword_23D9BDC60;
  *(_WORD *)(v2 + 1192) = 257;
  *(_DWORD *)(v2 + 1194) = v71;
  *(_WORD *)(v2 + 1198) = v72;
  *(_QWORD *)(v2 + 1200) = 15;
  *(_OWORD *)(v2 + 1208) = xmmword_23D9BDC70;
  *(_QWORD *)(v2 + 1224) = v42;
  *(_QWORD *)(v2 + 1232) = 2000;
  *(_QWORD *)(v2 + 1240) = v43;
  v44 = -[HandsKitConfig ThresholdArmScrollDurationMin](v16, sel_ThresholdArmScrollDurationMin);
  v45 = -[HandsKitConfig ThresholdArmScrollDurationMax](v16, sel_ThresholdArmScrollDurationMax);
  -[HandsKitConfig ThresholdScrollPinchCentroidMovement](v16, sel_ThresholdScrollPinchCentroidMovement);
  v47 = v46;
  -[HandsKitConfig ThresholdScrollPinkyKnuckleMovement](v16, sel_ThresholdScrollPinkyKnuckleMovement);
  v49 = v48;
  -[HandsKitConfig ThresholdArmScrollWristPitch](v16, sel_ThresholdArmScrollWristPitch);
  v51 = v50;
  -[HandsKitConfig ThresholdArmScrollWristRoll](v16, sel_ThresholdArmScrollWristRoll);
  v53 = v52;
  LOBYTE(v15) = -[HandsKitConfig EnableWristScroll](v16, sel_EnableWristScroll);
  v54 = -[HandsKitConfig EnableArmScroll](v16, sel_EnableArmScroll);
  *(_OWORD *)(v2 + 1144) = xmmword_23D9BDC40;
  *(_QWORD *)(v2 + 1160) = v44;
  *(_QWORD *)(v2 + 1168) = v45;
  *(_DWORD *)(v2 + 1176) = v47;
  *(_DWORD *)(v2 + 1180) = v49;
  *(_DWORD *)(v2 + 1184) = v51;
  *(_DWORD *)(v2 + 1188) = v53;
  *(_BYTE *)(v2 + 1192) = v15;
  *(_BYTE *)(v2 + 1193) = v54;
  -[HandsKitConfig ThresholdTapDurationMax](v16, sel_ThresholdTapDurationMax);
  if ((~LODWORD(v55) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v55 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v55 < 9.2234e18)
  {
    v56 = (uint64_t)v55;
    -[HandsKitConfig ThresholdTapPinchCentroidMovement](v16, sel_ThresholdTapPinchCentroidMovement);
    v58 = v57;
    -[HandsKitConfig ThresholdTapPinkyKnuckleMovement](v16, sel_ThresholdTapPinkyKnuckleMovement);
    v60 = v59;
    -[HandsKitConfig ThresholdTapHoverDistance](v16, sel_ThresholdTapHoverDistance);
    v62 = v61;
    -[HandsKitConfig ThresholdTapHDVectorDiffAngle](v16, sel_ThresholdTapHDVectorDiffAngle);
    *(_QWORD *)(v2 + 1200) = v56;
    *(_DWORD *)(v2 + 1208) = v58;
    *(_DWORD *)(v2 + 1212) = v60;
    *(_DWORD *)(v2 + 1216) = v62;
    *(_DWORD *)(v2 + 1220) = v63;
    *(_BYTE *)(v2 + 1003) = -[HandsKitConfig SerializeInternalData](v16, sel_SerializeInternalData);
    RecoverRepetitivePinch.reset()();
    return;
  }
LABEL_7:
  __break(1u);
}

Swift::Void __swiftcall RecoverRepetitivePinch.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  if (!*(_QWORD *)(v0 + 16))
  {
    __break(1u);
    goto LABEL_9;
  }
  swift_retain();
  PinchGesturesForRecovery.reset()();
  swift_release();
  v2 = *(_QWORD *)(v0 + 1008);
  if (!v2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_beginAccess();
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 24) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v1 + 1016);
  if (!v4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = v3;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v1 + 1024);
  if (!v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_beginAccess();
  *(_QWORD *)(v5 + 24) = v3;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v1 + 1032);
  if (!v6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_beginAccess();
  *(_QWORD *)(v6 + 24) = v3;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v1 + 1040);
  if (v7)
  {
    swift_beginAccess();
    *(_QWORD *)(v7 + 24) = v3;
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 28) = 0;
    *(_QWORD *)(v1 + 44) = 0;
    *(_QWORD *)(v1 + 36) = 0;
    *(_BYTE *)(v1 + 52) = 1;
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *(_BYTE *)(v1 + 80) = 1;
    swift_beginAccess();
    *(_QWORD *)(v1 + 88) = v3;
    *(_QWORD *)(v1 + 96) = 33;
    swift_bridgeObjectRelease();
    type metadata accessor for ScrollCache(0);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v3;
    *(_QWORD *)(v1 + 104) = v8;
    swift_release();
    type metadata accessor for TapCache(0);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v1 + 112) = v9;
    swift_release();
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t RecoverRepetitivePinch.updateFeatureBuffer(_:_:)(void *__src, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int32 v66;
  unint64_t v67;
  unint64_t v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int v94;
  char v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  unsigned int v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  __int128 v137;
  _QWORD v138[74];
  _OWORD __srca[37];
  char v140;
  __int16 v141;
  char v142;
  char v143;
  __int16 v144;
  char v145;
  char v146;
  __int16 v147;
  char v148;
  char v149;
  __int16 v150;
  char v151;
  char v152;
  __int16 v153;
  char v154;
  char v155;
  __int16 v156;
  char v157;
  char v158;
  int v159;
  __int16 v160;
  char v161;
  __int16 v162;
  char v163;
  char v164;
  __int16 v165;
  char v166;
  char v167;
  __int16 v168;
  char v169;
  char v170;
  __int16 v171;
  char v172;
  char v173;
  __int16 v174;
  char v175;
  char v176;
  _BYTE v177[7];
  char v178;
  __int16 v179;
  char v180;
  char v181;
  __int16 v182;
  char v183;
  char v184;
  _BYTE v185[7];
  char v186;
  _BYTE v187[7];
  char v188;
  __int16 v189;
  char v190;
  char v191;
  __int16 v192;
  char v193;
  __int16 v194;
  char v195;
  __int16 v196;
  char v197;
  __int16 v198;
  char v199;
  __int16 v200;
  char v201;
  __int16 v202;
  char v203;
  int v204;
  __int16 v205;
  __int16 v206;
  char v207;
  __int16 v208;
  char v209;
  __int16 v210;
  char v211;
  __int16 v212;
  char v213;
  __int16 v214;
  char v215;
  _DWORD v216[2];
  __int16 v217;
  char v218;
  __int16 v219;
  char v220;
  _DWORD v221[2];
  _DWORD v222[2];
  __int16 v223;
  char v224;
  int v225;
  __int16 v226;
  __int16 v227;
  char v228;
  __int16 v229;
  char v230;
  __int16 v231;
  char v232;
  __int16 v233;
  char v234;
  __int16 v235;
  char v236;
  __int16 v237;
  char v238;
  int v239;
  __int16 v240;
  __int16 v241;
  char v242;
  __int16 v243;
  char v244;
  __int16 v245;
  char v246;
  __int16 v247;
  char v248;
  int v249;
  __int16 v250;
  char v251;
  __int16 v252;
  char v253;
  char v254;
  __int16 v255;
  char v256;
  char v257;
  __int16 v258;
  char v259;
  char v260;
  __int16 v261;
  char v262;
  char v263;
  __int16 v264;
  char v265;
  char v266;
  __int16 v267;
  char v268;
  char v269;
  int v270;
  __int16 v271;
  char v272;
  __int16 v273;
  char v274;
  char v275;
  __int16 v276;
  char v277;
  char v278;
  __int16 v279;
  char v280;
  char v281;
  __int16 v282;
  char v283;
  char v284;
  __int16 v285;
  char v286;
  char v287;
  _BYTE v288[7];
  char v289;
  __int16 v290;
  char v291;
  char v292;
  __int16 v293;
  char v294;
  char v295;
  _BYTE v296[7];
  char v297;
  _BYTE v298[7];
  char v299;
  __int16 v300;
  char v301;
  char v302;
  _OWORD __dst[36];

  v3 = v2;
  memcpy(__dst, __src, 0x228uLL);
  v5 = *((_QWORD *)a2 + 2);
  if (!v5
    || (a2[236] & 1) != 0
    || (LODWORD(v6) = a2[4], (_DWORD)v6 == 2)
    || (a2[249] & 1) != 0
    || (a2[280] & 1) != 0)
  {
    RecoverRepetitivePinch.reset()();
    return 0;
  }
  v9 = *((_QWORD *)a2 + 3);
  v8 = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)a2 + 6);
  v12 = *((_QWORD *)a2 + 7);
  v13 = *((_QWORD *)a2 + 8);
  v14 = *((_QWORD *)a2 + 9);
  v15 = *((_QWORD *)a2 + 10);
  v16 = *((_QWORD *)a2 + 11);
  v17 = *((_QWORD *)a2 + 12);
  v18 = *((_QWORD *)a2 + 13);
  v19 = *((_QWORD *)a2 + 14);
  v21 = *((_QWORD *)a2 + 15);
  v20 = *((_QWORD *)a2 + 16);
  v22 = *((_DWORD *)a2 + 58);
  v116 = *((_QWORD *)a2 + 30);
  v115 = a2[248];
  v23 = *((_DWORD *)a2 + 69);
  v135 = (float32x4_t)__dst[14];
  v136 = (float32x4_t)__dst[13];
  v133 = (float32x4_t)__dst[16];
  v134 = (float32x4_t)__dst[15];
  v138[0] = *((_QWORD *)a2 + 2);
  v138[1] = v9;
  v119 = v12;
  v120 = v10;
  v138[2] = v8;
  v138[3] = v10;
  v123 = v11;
  v124 = v8;
  v138[4] = v11;
  v138[5] = v12;
  v118 = v14;
  v138[6] = v13;
  v138[7] = v14;
  v125 = v13;
  v126 = v21;
  v121 = v16;
  v122 = v18;
  v138[9] = v16;
  v127 = v15;
  v128 = v17;
  v138[8] = v15;
  v138[11] = v18;
  v138[10] = v17;
  v138[13] = v21;
  v129 = v19;
  v130 = HIDWORD(v20);
  v138[12] = v19;
  v114 = v20 & 1;
  LOWORD(v138[14]) = v20 & 0x101;
  v113 = (v20 >> 8) & 1;
  HIDWORD(v138[14]) = HIDWORD(v20);
  swift_bridgeObjectRetain_n();
  v117 = v9;
  swift_bridgeObjectRetain_n();
  HandPose.init(_:from:)((uint64_t)v138, (uint64_t)__srca, v136, v135, v134, v133);
  v137 = __srca[0];
  v110 = __srca[2];
  v111 = __srca[1];
  v108 = __srca[4];
  v109 = __srca[3];
  v106 = __srca[6];
  v107 = __srca[5];
  v104 = BYTE1(__srca[7]);
  v105 = __srca[7];
  v24 = DWORD1(__srca[7]);
  v25 = *((_QWORD *)&__dst[12] + 1);
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(__dst);
  v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith19V14prewittCurrents5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v25);
  swift_bridgeObjectRelease();
  v27 = specialized Sequence<>.max()(v26);
  v29 = v28;
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
    v30 = -1;
  else
    v30 = v27;
  v31 = swift_bridgeObjectRetain();
  v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith22V17prewittPulseWidths5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v31);
  swift_bridgeObjectRelease();
  v33 = specialized Sequence<>.max()(v32);
  v35 = v34;
  swift_bridgeObjectRelease();
  outlined release of HandsKitData(__dst);
  if ((v35 & 1) != 0)
    v36 = -1;
  else
    v36 = v33;
  if (*(_QWORD *)(v3 + 1232) >= v30 || *(_QWORD *)(v3 + 1240) >= v36)
  {
    if (v30 >= *(_QWORD *)(v3 + 1224))
      v37 = 2;
    else
      v37 = 2 * (v36 >= *(_QWORD *)(v3 + 1240));
  }
  else
  {
    v37 = 1;
  }
  v112 = v37;
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(__dst);
  v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith19V14prewittCurrents5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v25);
  swift_bridgeObjectRelease();
  v39 = specialized Sequence<>.max()(v38);
  v41 = v40;
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    v42 = -1;
  else
    v42 = v39;
  v103 = v42;
  v43 = swift_bridgeObjectRetain();
  v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith22V17prewittPulseWidths5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v43);
  swift_bridgeObjectRelease();
  v45 = specialized Sequence<>.max()(v44);
  v47 = v46;
  swift_bridgeObjectRelease();
  outlined release of HandsKitData(__dst);
  if ((v47 & 1) != 0)
    v48 = -1;
  else
    v48 = v45;
  v102 = v48;
  if (*(_QWORD *)(v25 + 16))
  {
    v49 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
    if ((v50 & 1) != 0)
      v51 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 192 * v49 + 160);
    else
      v51 = -1;
    v100 = v51;
    if (*(_QWORD *)(v25 + 16))
    {
      v53 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
      if ((v54 & 1) != 0)
        v55 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 192 * v53 + 168);
      else
        v55 = -1;
      v99 = v55;
      if (*(_QWORD *)(v25 + 16) && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1), (v57 & 1) != 0))
        v52 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 192 * v56 + 176);
      else
        v52 = -1;
    }
    else
    {
      v52 = -1;
      v99 = -1;
    }
  }
  else
  {
    v52 = -1;
    v99 = -1;
    v100 = -1;
  }
  v98 = v52;
  v58 = &a2[*(int *)(type metadata accessor for HandDescriptor() + 112)];
  if ((v58[49] & 1) != 0 || (v58[32] & 1) != 0)
  {
    v101 = 0;
    v59 = 1;
  }
  else
  {
    v59 = 0;
    v101 = *((_QWORD *)v58 + 2);
  }
  if (*(_QWORD *)(v137 + 16) < 0xAuLL)
  {
    __break(1u);
    goto LABEL_57;
  }
  v60 = *((_QWORD *)&__dst[21] + 1);
  v96 = *(_QWORD *)&__dst[21];
  v41 = LODWORD(__dst[22]);
  v135.i64[0] = DWORD1(__dst[22]);
  v25 = *((_QWORD *)&__dst[22] + 1);
  v97 = *((_DWORD *)a2 + 68);
  v61 = swift_bridgeObjectRetain();
  v134.i64[0] = specialized Sequence<>.min()(v61);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v137 + 16) < 9uLL)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v95 = v59;
  v62 = swift_bridgeObjectRetain();
  v133.i64[0] = specialized Sequence<>.max()(v62);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v137 + 16) < 5uLL)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v63 = swift_bridgeObjectRetain();
  v64 = specialized Sequence<>.min()(v63);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v137 + 16) >= 4uLL)
  {
    v131 = v41;
    v132 = v25;
    LOBYTE(v25) = v6 & 1;
    v65 = swift_bridgeObjectRetain();
    v6 = specialized Sequence<>.max()(v65);
    swift_bridgeObjectRelease();
    v302 = 1;
    v299 = 1;
    v297 = 0;
    v295 = 0;
    v292 = 1;
    v289 = 1;
    v287 = v95;
    v284 = 0;
    v281 = v134.i8[4] & 1;
    v278 = v133.i8[4] & 1;
    v275 = BYTE4(v64) & 1;
    v272 = BYTE4(v6) & 1;
    v269 = 0;
    v266 = 1;
    v263 = 1;
    v260 = 1;
    v257 = 1;
    v254 = 1;
    v251 = 1;
    a2 = (char *)*((_QWORD *)a2 + 32);
    swift_bridgeObjectRetain();
    v94 = v64;
    v41 = v60;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_48;
    goto LABEL_60;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a2 + 2) + 1, 1, a2);
LABEL_48:
  v66 = v135.i32[0];
  v68 = *((_QWORD *)a2 + 2);
  v67 = *((_QWORD *)a2 + 3);
  if (v68 >= v67 >> 1)
  {
    v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, a2);
    v66 = v135.i32[0];
    a2 = v93;
  }
  *((_QWORD *)a2 + 2) = v68 + 1;
  *(_DWORD *)&a2[4 * v68 + 32] = v23;
  *(_QWORD *)&__srca[0] = a2;
  BYTE12(__srca[0]) = v25;
  *(_QWORD *)&__srca[1] = v116;
  BYTE8(__srca[1]) = v115 & 1;
  *(_QWORD *)&__srca[4] = v5;
  *((_QWORD *)&__srca[4] + 1) = v117;
  DWORD2(__srca[0]) = v22;
  *(_QWORD *)((char *)&__srca[1] + 12) = v41;
  *(_QWORD *)((char *)&__srca[2] + 4) = __PAIR64__(v66, v131);
  *(_QWORD *)((char *)&__srca[2] + 12) = v132;
  *((_QWORD *)&__srca[5] + 1) = v120;
  *(_QWORD *)&__srca[5] = v124;
  *((_QWORD *)&__srca[6] + 1) = v119;
  *(_QWORD *)&__srca[6] = v123;
  *((_QWORD *)&__srca[7] + 1) = v118;
  *(_QWORD *)&__srca[7] = v125;
  *((_QWORD *)&__srca[8] + 1) = v121;
  *(_QWORD *)&__srca[8] = v127;
  *((_QWORD *)&__srca[9] + 1) = v122;
  *(_QWORD *)&__srca[9] = v128;
  *((_QWORD *)&__srca[10] + 1) = v126;
  *(_QWORD *)&__srca[10] = v129;
  LOBYTE(__srca[11]) = v114;
  BYTE1(__srca[11]) = v113;
  DWORD1(__srca[11]) = v130;
  __srca[12] = v137;
  __srca[13] = v111;
  __srca[14] = v110;
  __srca[15] = v109;
  __srca[16] = v108;
  __srca[17] = v107;
  __srca[18] = v106;
  LOBYTE(__srca[19]) = v105;
  BYTE1(__srca[19]) = v104;
  DWORD1(__srca[19]) = v24;
  WORD4(__srca[19]) = 523;
  *(_QWORD *)((char *)&__srca[20] + 4) = 0;
  *(_QWORD *)((char *)&__srca[19] + 12) = 0;
  *(_QWORD *)((char *)&__srca[20] + 12) = 0;
  BYTE4(__srca[21]) = v302;
  *(_WORD *)((char *)&__srca[21] + 5) = v300;
  BYTE7(__srca[21]) = v301;
  *((_QWORD *)&__srca[21] + 1) = 0;
  __srca[22] = 0uLL;
  LOBYTE(__srca[23]) = v299;
  *(_DWORD *)((char *)&__srca[23] + 1) = *(_DWORD *)v298;
  DWORD1(__srca[23]) = *(_DWORD *)&v298[3];
  *((_QWORD *)&__srca[23] + 1) = v96;
  LOBYTE(__srca[24]) = v297;
  *(_DWORD *)((char *)&__srca[24] + 1) = *(_DWORD *)v296;
  DWORD1(__srca[24]) = *(_DWORD *)&v296[3];
  *((_QWORD *)&__srca[24] + 1) = v96;
  LOBYTE(__srca[25]) = v295;
  *(_WORD *)((char *)&__srca[25] + 1) = v293;
  BYTE3(__srca[25]) = v294;
  DWORD1(__srca[25]) = 0;
  BYTE8(__srca[25]) = v292;
  *(_WORD *)((char *)&__srca[25] + 9) = v290;
  BYTE11(__srca[25]) = v291;
  HIDWORD(__srca[25]) = 0;
  LOBYTE(__srca[26]) = v289;
  *(_DWORD *)((char *)&__srca[26] + 1) = *(_DWORD *)v288;
  DWORD1(__srca[26]) = *(_DWORD *)&v288[3];
  *((_QWORD *)&__srca[26] + 1) = v101;
  LOBYTE(__srca[27]) = v287;
  *(_WORD *)((char *)&__srca[27] + 1) = v285;
  BYTE3(__srca[27]) = v286;
  DWORD1(__srca[27]) = v97;
  BYTE8(__srca[27]) = v284;
  *(_WORD *)((char *)&__srca[27] + 9) = v282;
  BYTE11(__srca[27]) = v283;
  HIDWORD(__srca[27]) = v134.i32[0];
  LOBYTE(__srca[28]) = v281;
  *(_WORD *)((char *)&__srca[28] + 1) = v279;
  BYTE3(__srca[28]) = v280;
  DWORD1(__srca[28]) = v133.i32[0];
  BYTE8(__srca[28]) = v278;
  *(_WORD *)((char *)&__srca[28] + 9) = v276;
  BYTE11(__srca[28]) = v277;
  HIDWORD(__srca[28]) = v94;
  LOBYTE(__srca[29]) = v275;
  *(_WORD *)((char *)&__srca[29] + 1) = v273;
  BYTE3(__srca[29]) = v274;
  DWORD1(__srca[29]) = v6;
  BYTE8(__srca[29]) = v272;
  BYTE9(__srca[29]) = v112;
  *(_DWORD *)((char *)&__srca[29] + 10) = v270;
  HIWORD(__srca[29]) = v271;
  *(_QWORD *)&__srca[30] = v103;
  *((_QWORD *)&__srca[30] + 1) = v102;
  *(_QWORD *)&__srca[31] = 0;
  *((_QWORD *)&__srca[31] + 1) = v100;
  *(_QWORD *)&__srca[32] = v99;
  *((_QWORD *)&__srca[32] + 1) = v98;
  LOBYTE(__srca[33]) = v269;
  *(_WORD *)((char *)&__srca[33] + 1) = v267;
  BYTE3(__srca[33]) = v268;
  DWORD1(__srca[33]) = 0;
  BYTE8(__srca[33]) = v266;
  *(_WORD *)((char *)&__srca[33] + 9) = v264;
  BYTE11(__srca[33]) = v265;
  HIDWORD(__srca[33]) = 0;
  LOBYTE(__srca[34]) = v263;
  *(_WORD *)((char *)&__srca[34] + 1) = v261;
  BYTE3(__srca[34]) = v262;
  DWORD1(__srca[34]) = 0;
  BYTE8(__srca[34]) = v260;
  *(_WORD *)((char *)&__srca[34] + 9) = v258;
  BYTE11(__srca[34]) = v259;
  HIDWORD(__srca[34]) = 0;
  LOBYTE(__srca[35]) = v257;
  *(_WORD *)((char *)&__srca[35] + 1) = v255;
  BYTE3(__srca[35]) = v256;
  DWORD1(__srca[35]) = 0;
  BYTE8(__srca[35]) = v254;
  *(_WORD *)((char *)&__srca[35] + 9) = v252;
  BYTE11(__srca[35]) = v253;
  HIDWORD(__srca[35]) = 0;
  LOBYTE(__srca[36]) = v251;
  BYTE1(__srca[36]) = 5;
  memcpy(v138, __srca, 0x242uLL);
  swift_beginAccess();
  TntSingleHandSubsequence.pushFrameFeature(_:)(v138);
  swift_endAccess();
  outlined release of SingleHandFrameFeatures((uint64_t)__srca);
  v191 = 1;
  v188 = 1;
  v186 = 1;
  v184 = 1;
  v181 = 1;
  v178 = 1;
  v176 = 1;
  v173 = 1;
  v170 = 1;
  v167 = 1;
  v164 = 1;
  v161 = 1;
  v158 = 1;
  v155 = 1;
  v152 = 1;
  v149 = 1;
  v146 = 1;
  v143 = 1;
  v140 = 1;
  v223 = v189;
  v224 = v190;
  v222[0] = *(_DWORD *)v187;
  *(_DWORD *)((char *)v222 + 3) = *(_DWORD *)&v187[3];
  *(_DWORD *)((char *)v221 + 3) = *(_DWORD *)&v185[3];
  v221[0] = *(_DWORD *)v185;
  v219 = v182;
  v220 = v183;
  v217 = v179;
  v218 = v180;
  v216[0] = *(_DWORD *)v177;
  *(_DWORD *)((char *)v216 + 3) = *(_DWORD *)&v177[3];
  v215 = v175;
  v214 = v174;
  v213 = v172;
  v212 = v171;
  v211 = v169;
  v210 = v168;
  v209 = v166;
  v208 = v165;
  v207 = v163;
  v206 = v162;
  v205 = v160;
  v204 = v159;
  v203 = v157;
  v202 = v156;
  v201 = v154;
  v200 = v153;
  v199 = v151;
  v198 = v150;
  v197 = v148;
  v196 = v147;
  v195 = v145;
  v194 = v144;
  v193 = v142;
  v192 = v141;
  v248 = v172;
  v247 = v171;
  v246 = v169;
  v245 = v168;
  v244 = v166;
  v243 = v165;
  v242 = v163;
  v241 = v162;
  v240 = v160;
  v239 = v159;
  v238 = v157;
  v237 = v156;
  v236 = v154;
  v235 = v153;
  v234 = v151;
  v233 = v150;
  v232 = v148;
  v231 = v147;
  v230 = v145;
  v229 = v144;
  v228 = v142;
  v227 = v141;
  swift_beginAccess();
  *(_QWORD *)(v3 + 168) = 0;
  *(_BYTE *)(v3 + 176) = 11;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_BYTE *)(v3 + 177) = 2;
  *(_QWORD *)(v3 + 180) = 0;
  *(_QWORD *)(v3 + 188) = 0;
  *(_QWORD *)(v3 + 196) = 0;
  *(_BYTE *)(v3 + 204) = 1;
  *(_WORD *)(v3 + 205) = v189;
  *(_BYTE *)(v3 + 207) = v190;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_BYTE *)(v3 + 232) = 1;
  *(_DWORD *)(v3 + 233) = *(_DWORD *)v187;
  *(_DWORD *)(v3 + 236) = *(_DWORD *)&v187[3];
  *(_QWORD *)(v3 + 240) = 0;
  *(_BYTE *)(v3 + 248) = 1;
  *(_DWORD *)(v3 + 249) = *(_DWORD *)v185;
  *(_DWORD *)(v3 + 252) = *(_DWORD *)&v185[3];
  *(_QWORD *)(v3 + 256) = 0;
  *(_BYTE *)(v3 + 264) = 1;
  *(_WORD *)(v3 + 265) = v182;
  *(_BYTE *)(v3 + 267) = v183;
  *(_DWORD *)(v3 + 268) = 0;
  *(_BYTE *)(v3 + 272) = 1;
  *(_BYTE *)(v3 + 275) = v180;
  *(_WORD *)(v3 + 273) = v179;
  *(_DWORD *)(v3 + 276) = 0;
  *(_BYTE *)(v3 + 280) = 1;
  *(_DWORD *)(v3 + 284) = *(_DWORD *)&v177[3];
  *(_DWORD *)(v3 + 281) = *(_DWORD *)v177;
  *(_QWORD *)(v3 + 288) = 0;
  *(_BYTE *)(v3 + 296) = 1;
  *(_BYTE *)(v3 + 299) = v175;
  *(_WORD *)(v3 + 297) = v174;
  *(_DWORD *)(v3 + 300) = 0;
  *(_BYTE *)(v3 + 304) = 1;
  v69 = v171;
  *(_BYTE *)(v3 + 307) = v172;
  *(_WORD *)(v3 + 305) = v69;
  *(_DWORD *)(v3 + 308) = 0;
  *(_BYTE *)(v3 + 312) = 1;
  v70 = v168;
  *(_BYTE *)(v3 + 315) = v169;
  *(_WORD *)(v3 + 313) = v70;
  *(_DWORD *)(v3 + 316) = 0;
  *(_BYTE *)(v3 + 320) = 1;
  v71 = v165;
  *(_BYTE *)(v3 + 323) = v166;
  *(_WORD *)(v3 + 321) = v71;
  *(_DWORD *)(v3 + 324) = 0;
  *(_BYTE *)(v3 + 328) = 1;
  v72 = v162;
  *(_BYTE *)(v3 + 331) = v163;
  *(_WORD *)(v3 + 329) = v72;
  *(_DWORD *)(v3 + 332) = 0;
  result = 1;
  *(_BYTE *)(v3 + 336) = 1;
  *(_BYTE *)(v3 + 337) = 3;
  v73 = v159;
  *(_WORD *)(v3 + 342) = v160;
  *(_DWORD *)(v3 + 338) = v73;
  *(_OWORD *)(v3 + 360) = 0u;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 344) = 0u;
  *(_BYTE *)(v3 + 392) = 1;
  LOWORD(v73) = v156;
  *(_BYTE *)(v3 + 395) = v157;
  *(_WORD *)(v3 + 393) = v73;
  *(_DWORD *)(v3 + 396) = 0;
  *(_BYTE *)(v3 + 400) = 1;
  LOWORD(v73) = v153;
  *(_BYTE *)(v3 + 403) = v154;
  *(_WORD *)(v3 + 401) = v73;
  *(_DWORD *)(v3 + 404) = 0;
  *(_BYTE *)(v3 + 408) = 1;
  LOWORD(v73) = v150;
  *(_BYTE *)(v3 + 411) = v151;
  *(_WORD *)(v3 + 409) = v73;
  *(_DWORD *)(v3 + 412) = 0;
  *(_BYTE *)(v3 + 416) = 1;
  LOWORD(v73) = v147;
  *(_BYTE *)(v3 + 419) = v148;
  *(_WORD *)(v3 + 417) = v73;
  *(_DWORD *)(v3 + 420) = 0;
  *(_BYTE *)(v3 + 424) = 1;
  LOWORD(v73) = v144;
  *(_BYTE *)(v3 + 427) = v145;
  *(_WORD *)(v3 + 425) = v73;
  *(_DWORD *)(v3 + 428) = 0;
  *(_BYTE *)(v3 + 432) = 1;
  v74 = v141;
  *(_BYTE *)(v3 + 435) = v142;
  *(_WORD *)(v3 + 433) = v74;
  *(_DWORD *)(v3 + 436) = 0;
  *(_BYTE *)(v3 + 440) = 1;
  *(_BYTE *)(v3 + 441) = 6;
  v75 = v249;
  *(_WORD *)(v3 + 446) = v250;
  *(_DWORD *)(v3 + 442) = v75;
  *(_QWORD *)(v3 + 448) = 0;
  *(_WORD *)(v3 + 456) = 523;
  *(_QWORD *)(v3 + 468) = 0;
  *(_QWORD *)(v3 + 460) = 0;
  *(_QWORD *)(v3 + 476) = 0;
  *(_BYTE *)(v3 + 484) = 1;
  v76 = v189;
  *(_BYTE *)(v3 + 487) = v190;
  *(_WORD *)(v3 + 485) = v76;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  *(_BYTE *)(v3 + 512) = 1;
  v77 = *(_DWORD *)v187;
  *(_DWORD *)(v3 + 516) = *(_DWORD *)&v187[3];
  *(_DWORD *)(v3 + 513) = v77;
  *(_QWORD *)(v3 + 520) = 0;
  *(_BYTE *)(v3 + 528) = 1;
  v78 = *(_DWORD *)v185;
  *(_DWORD *)(v3 + 532) = *(_DWORD *)&v185[3];
  *(_DWORD *)(v3 + 529) = v78;
  *(_QWORD *)(v3 + 536) = 0;
  *(_BYTE *)(v3 + 544) = 1;
  LOWORD(v78) = v182;
  *(_BYTE *)(v3 + 547) = v183;
  *(_WORD *)(v3 + 545) = v78;
  *(_DWORD *)(v3 + 548) = 0;
  *(_BYTE *)(v3 + 552) = 1;
  LOWORD(v78) = v179;
  *(_BYTE *)(v3 + 555) = v180;
  *(_WORD *)(v3 + 553) = v78;
  *(_DWORD *)(v3 + 556) = 0;
  *(_BYTE *)(v3 + 560) = 1;
  v79 = *(_DWORD *)v177;
  *(_DWORD *)(v3 + 564) = *(_DWORD *)&v177[3];
  *(_DWORD *)(v3 + 561) = v79;
  *(_QWORD *)(v3 + 568) = 0;
  *(_BYTE *)(v3 + 576) = 1;
  LOWORD(v79) = v174;
  *(_BYTE *)(v3 + 579) = v175;
  *(_WORD *)(v3 + 577) = v79;
  *(_DWORD *)(v3 + 580) = 0;
  *(_BYTE *)(v3 + 584) = 1;
  LOWORD(v79) = v247;
  *(_BYTE *)(v3 + 587) = v248;
  *(_WORD *)(v3 + 585) = v79;
  *(_DWORD *)(v3 + 588) = 0;
  *(_BYTE *)(v3 + 592) = 1;
  LOWORD(v79) = v245;
  *(_BYTE *)(v3 + 595) = v246;
  *(_WORD *)(v3 + 593) = v79;
  *(_DWORD *)(v3 + 596) = 0;
  *(_BYTE *)(v3 + 600) = 1;
  LOWORD(v79) = v243;
  *(_BYTE *)(v3 + 603) = v244;
  *(_WORD *)(v3 + 601) = v79;
  *(_DWORD *)(v3 + 604) = 0;
  *(_BYTE *)(v3 + 608) = 1;
  LOWORD(v79) = v241;
  *(_BYTE *)(v3 + 611) = v242;
  *(_WORD *)(v3 + 609) = v79;
  *(_DWORD *)(v3 + 612) = 0;
  *(_BYTE *)(v3 + 616) = 1;
  *(_BYTE *)(v3 + 617) = 3;
  v80 = v239;
  *(_WORD *)(v3 + 622) = v240;
  *(_DWORD *)(v3 + 618) = v80;
  *(_OWORD *)(v3 + 640) = 0u;
  *(_OWORD *)(v3 + 656) = 0u;
  *(_OWORD *)(v3 + 624) = 0u;
  *(_BYTE *)(v3 + 672) = 1;
  LOWORD(v80) = v237;
  *(_BYTE *)(v3 + 675) = v238;
  *(_WORD *)(v3 + 673) = v80;
  *(_DWORD *)(v3 + 676) = 0;
  *(_BYTE *)(v3 + 680) = 1;
  LOWORD(v80) = v235;
  *(_BYTE *)(v3 + 683) = v236;
  *(_WORD *)(v3 + 681) = v80;
  *(_DWORD *)(v3 + 684) = 0;
  *(_BYTE *)(v3 + 688) = 1;
  LOWORD(v80) = v233;
  *(_BYTE *)(v3 + 691) = v234;
  *(_WORD *)(v3 + 689) = v80;
  *(_DWORD *)(v3 + 692) = 0;
  *(_BYTE *)(v3 + 696) = 1;
  LOWORD(v80) = v231;
  *(_BYTE *)(v3 + 699) = v232;
  *(_WORD *)(v3 + 697) = v80;
  *(_DWORD *)(v3 + 700) = 0;
  *(_BYTE *)(v3 + 704) = 1;
  LOWORD(v75) = v229;
  *(_BYTE *)(v3 + 707) = v230;
  *(_WORD *)(v3 + 705) = v75;
  *(_DWORD *)(v3 + 708) = 0;
  *(_BYTE *)(v3 + 712) = 1;
  LOWORD(v75) = v227;
  *(_BYTE *)(v3 + 715) = v228;
  *(_WORD *)(v3 + 713) = v75;
  *(_DWORD *)(v3 + 716) = 0;
  *(_BYTE *)(v3 + 720) = 1;
  *(_BYTE *)(v3 + 721) = 6;
  v81 = v225;
  *(_WORD *)(v3 + 726) = v226;
  *(_DWORD *)(v3 + 722) = v81;
  *(_QWORD *)(v3 + 728) = 0;
  *(_WORD *)(v3 + 736) = 523;
  *(_QWORD *)(v3 + 748) = 0;
  *(_QWORD *)(v3 + 740) = 0;
  *(_QWORD *)(v3 + 756) = 0;
  *(_BYTE *)(v3 + 764) = 1;
  LOWORD(v80) = v223;
  *(_BYTE *)(v3 + 767) = v224;
  *(_WORD *)(v3 + 765) = v80;
  *(_QWORD *)(v3 + 776) = 0;
  *(_QWORD *)(v3 + 768) = 0;
  *(_QWORD *)(v3 + 784) = 0;
  *(_BYTE *)(v3 + 792) = 1;
  v82 = v222[0];
  *(_DWORD *)(v3 + 796) = *(_DWORD *)((char *)v222 + 3);
  *(_DWORD *)(v3 + 793) = v82;
  *(_QWORD *)(v3 + 800) = 0;
  *(_BYTE *)(v3 + 808) = 1;
  v83 = v221[0];
  *(_DWORD *)(v3 + 812) = *(_DWORD *)((char *)v221 + 3);
  *(_DWORD *)(v3 + 809) = v83;
  *(_QWORD *)(v3 + 816) = 0;
  *(_BYTE *)(v3 + 824) = 1;
  LOWORD(v83) = v219;
  *(_BYTE *)(v3 + 827) = v220;
  *(_WORD *)(v3 + 825) = v83;
  *(_DWORD *)(v3 + 828) = 0;
  *(_BYTE *)(v3 + 832) = 1;
  LOWORD(v83) = v217;
  *(_BYTE *)(v3 + 835) = v218;
  *(_WORD *)(v3 + 833) = v83;
  *(_DWORD *)(v3 + 836) = 0;
  *(_BYTE *)(v3 + 840) = 1;
  v84 = v216[0];
  *(_DWORD *)(v3 + 844) = *(_DWORD *)((char *)v216 + 3);
  *(_DWORD *)(v3 + 841) = v84;
  *(_QWORD *)(v3 + 848) = 0;
  *(_BYTE *)(v3 + 856) = 1;
  LOWORD(v84) = v214;
  *(_BYTE *)(v3 + 859) = v215;
  *(_WORD *)(v3 + 857) = v84;
  *(_DWORD *)(v3 + 860) = 0;
  *(_BYTE *)(v3 + 864) = 1;
  LOWORD(v84) = v212;
  *(_BYTE *)(v3 + 867) = v213;
  *(_WORD *)(v3 + 865) = v84;
  *(_DWORD *)(v3 + 868) = 0;
  *(_BYTE *)(v3 + 872) = 1;
  LOWORD(v84) = v210;
  *(_BYTE *)(v3 + 875) = v211;
  *(_WORD *)(v3 + 873) = v84;
  *(_DWORD *)(v3 + 876) = 0;
  *(_BYTE *)(v3 + 880) = 1;
  LOWORD(v84) = v208;
  *(_BYTE *)(v3 + 883) = v209;
  *(_WORD *)(v3 + 881) = v84;
  *(_DWORD *)(v3 + 884) = 0;
  *(_BYTE *)(v3 + 888) = 1;
  LOWORD(v84) = v206;
  *(_BYTE *)(v3 + 891) = v207;
  *(_WORD *)(v3 + 889) = v84;
  *(_DWORD *)(v3 + 892) = 0;
  *(_BYTE *)(v3 + 896) = 1;
  *(_BYTE *)(v3 + 897) = 3;
  v85 = v204;
  *(_WORD *)(v3 + 902) = v205;
  *(_DWORD *)(v3 + 898) = v85;
  *(_OWORD *)(v3 + 920) = 0u;
  *(_OWORD *)(v3 + 936) = 0u;
  *(_OWORD *)(v3 + 904) = 0u;
  *(_BYTE *)(v3 + 952) = 1;
  LOWORD(v85) = v202;
  *(_BYTE *)(v3 + 955) = v203;
  *(_WORD *)(v3 + 953) = v85;
  *(_DWORD *)(v3 + 956) = 0;
  *(_BYTE *)(v3 + 960) = 1;
  LOWORD(v85) = v200;
  *(_BYTE *)(v3 + 963) = v201;
  *(_WORD *)(v3 + 961) = v85;
  *(_DWORD *)(v3 + 964) = 0;
  *(_BYTE *)(v3 + 968) = 1;
  LOWORD(v85) = v198;
  *(_BYTE *)(v3 + 971) = v199;
  *(_WORD *)(v3 + 969) = v85;
  *(_DWORD *)(v3 + 972) = 0;
  *(_BYTE *)(v3 + 976) = 1;
  LOWORD(v85) = v196;
  *(_BYTE *)(v3 + 979) = v197;
  *(_WORD *)(v3 + 977) = v85;
  *(_DWORD *)(v3 + 980) = 0;
  *(_BYTE *)(v3 + 984) = 1;
  LOWORD(v85) = v194;
  *(_BYTE *)(v3 + 987) = v195;
  *(_WORD *)(v3 + 985) = v85;
  *(_DWORD *)(v3 + 988) = 0;
  *(_BYTE *)(v3 + 992) = 1;
  v86 = v192;
  *(_BYTE *)(v3 + 995) = v193;
  *(_WORD *)(v3 + 993) = v86;
  *(_DWORD *)(v3 + 996) = 0;
  *(_BYTE *)(v3 + 1000) = 1;
  *(_WORD *)(v3 + 1001) = 6;
  v87 = *(_QWORD *)(v3 + 1008);
  if (!v87)
  {
    __break(1u);
    goto LABEL_62;
  }
  swift_beginAccess();
  v88 = v131 | (v135.i64[0] << 32);
  swift_retain();
  specialized static PinchRecoveryAnalytics.cleanupBuffer(_:_:_:_:)(60.0, v41, v88, v132, (char **)(v87 + 24), 50);
  swift_endAccess();
  result = swift_release();
  v89 = *(_QWORD *)(v3 + 1016);
  if (!v89)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  swift_beginAccess();
  swift_retain();
  specialized static PinchRecoveryAnalytics.cleanupBuffer(_:_:_:_:)(60.0, v41, v88, v132, (char **)(v89 + 24), 50);
  swift_endAccess();
  result = swift_release();
  v90 = *(_QWORD *)(v3 + 1024);
  if (!v90)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  swift_beginAccess();
  swift_retain();
  specialized static PinchRecoveryAnalytics.cleanupBuffer(_:_:_:_:)(60.0, v41, v88, v132, (char **)(v90 + 24), 50);
  swift_endAccess();
  result = swift_release();
  v91 = *(_QWORD *)(v3 + 1032);
  if (!v91)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  swift_beginAccess();
  swift_retain();
  specialized static PinchRecoveryAnalytics.cleanupBuffer(_:_:_:_:)(60.0, v41, v88, v132, (char **)(v91 + 24), 50);
  swift_endAccess();
  result = swift_release();
  v92 = *(_QWORD *)(v3 + 1040);
  if (v92)
  {
    swift_beginAccess();
    swift_retain();
    specialized static PinchRecoveryAnalytics.cleanupBuffer(_:_:_:_:)(60.0, v41, v88, v132, (char **)(v92 + 24), 50);
    swift_endAccess();
    swift_release();
    return 1;
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t RecoverRepetitivePinch.isCurrentlyPinching(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _OWORD v22[3];
  __int16 v23;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 344);
  v4 = *(unsigned int *)(a1 + 352);
  v5 = *(unsigned int *)(a1 + 356);
  v6 = *(_QWORD *)(a1 + 360);
  result = swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_QWORD *)(v2 + 96);
  v10 = *(_QWORD *)(v8 + 16);
  if (v10 == v9 && v10 != 0 && *(_BYTE *)(v8 + 592 * v9 - 548) == 1)
  {
    result = TntSingleHandSubsequence.getMakeFrameByPinchDown()();
    v12 = *(_QWORD *)(v8 + 16) - 1;
    if (result != v12)
    {
      v13 = result;
      swift_bridgeObjectRetain();
      v14 = (unint64_t)TntSingleHandSubsequence.getFramePose(_:_:)(0, v12);
      result = swift_bridgeObjectRelease();
      if (v14)
      {
        if (*(_QWORD *)(v2 + 16))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 16);
          v23 = *(_WORD *)(v2 + 1192);
          v16 = *(_OWORD *)(v2 + 1160);
          v22[0] = *(_OWORD *)(v2 + 1144);
          v22[1] = v16;
          v22[2] = *(_OWORD *)(v2 + 1176);
          v20 = *(_OWORD *)(v2 + 1200);
          v21 = *(_QWORD *)(v2 + 1216);
          swift_retain();
          PinchGesturesForRecovery.reset()();
          PinchGesturesForRecovery.processScrollDetector(_:_:_:_:)(v14, v13, v15, (uint64_t)v22, &v19);
          v17 = v19;
          PinchGesturesForRecovery.processTapDetector(_:_:_:_:)(v14, v13, v15, (float *)&v20, &v19);
          swift_release();
          result = swift_bridgeObjectRelease();
          v18 = v19;
          if ((v17 & 0x200) != 0)
          {
            *(_QWORD *)(v2 + 28) = v3;
            *(_QWORD *)(v2 + 36) = v4 | (v5 << 32);
            *(_QWORD *)(v2 + 44) = v6;
            *(_BYTE *)(v2 + 52) = 0;
            *(_BYTE *)(v2 + 24) = 0;
          }
          if ((v18 & 0x20) != 0)
          {
            *(_QWORD *)(v2 + 56) = v3;
            *(_QWORD *)(v2 + 64) = v4 | (v5 << 32);
            *(_QWORD *)(v2 + 72) = v6;
            *(_BYTE *)(v2 + 80) = 0;
            *(_BYTE *)(v2 + 25) = 0;
          }
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  return result;
}

uint64_t addTemplates #1 (_:_:_:_:) in RecoverRepetitivePinch.detectPinchAndPopulateCache(_:_:_:_:)(unint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v24;

  v9 = *(unsigned int *)(a5 + 352);
  v10 = *(unsigned int *)(a5 + 356);
  v11 = *(_QWORD *)(a5 + 360);
  v24 = *(_QWORD *)(a5 + 344);
  if ((a4 & 1) != 0)
  {
    result = swift_beginAccess();
    v13 = *(_QWORD *)(a6 + 1032);
    if (v13)
    {
      v20 = *(_BYTE *)(a7 + 136);
      v14 = *(_QWORD *)(a6 + 88);
      v15 = *(_QWORD *)(a6 + 96);
      swift_beginAccess();
      v16 = v9 | (v10 << 32);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      ScrollCache.addTemplates(_:_:_:_:_:_:_:)(v14, v15, a1, a2, v24, v16, v11, v20, a6 + 168, v13);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      *(_BYTE *)(a6 + 24) = 1;
      *(_QWORD *)(a6 + 28) = v24;
      *(_QWORD *)(a6 + 36) = v16;
      *(_QWORD *)(a6 + 44) = v11;
      *(_BYTE *)(a6 + 52) = 0;
      goto LABEL_6;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  result = swift_beginAccess();
  v17 = *(_QWORD *)(a6 + 1040);
  if (!v17)
    goto LABEL_10;
  v21 = *(_BYTE *)(a7 + 136);
  v19 = *(_QWORD *)(a6 + 88);
  v18 = *(_QWORD *)(a6 + 96);
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  TapCache.addTemplates(_:_:_:_:_:_:_:)(v19, v18, a1, a2, v24, v9 | (v10 << 32), v11, v21, a6 + 448, v17);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(a6 + 25) = 1;
  *(_QWORD *)(a6 + 56) = v24;
  *(_QWORD *)(a6 + 64) = v9 | (v10 << 32);
  *(_QWORD *)(a6 + 72) = v11;
  *(_BYTE *)(a6 + 80) = 0;
LABEL_6:
  result = swift_beginAccess();
  if ((a3 & 1) != 0)
    *(_QWORD *)(a6 + 120) = 2048;
  else
    *(_QWORD *)(a6 + 144) = 64;
  return result;
}

uint64_t RecoverRepetitivePinch.shouldRecoverScroll(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t inited;
  unint64_t v44;
  int v45;
  __int16 v46;

  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinch.shouldRecoverImplementationInput<RecoverScrollPinchData>);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (uint64_t *)((char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_BYTE *)(v4 + 1048) != 1)
  {
    v41 = 0;
    return v41 & 1;
  }
  v44 = HIDWORD(a3);
  type metadata accessor for ScrollRecoverSimilarity(0);
  inited = swift_initStackObject();
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 96);
  v14 = *(_QWORD *)(v4 + 104);
  v15 = a1;
  v16 = *(_QWORD *)(v4 + 88);
  outlined init with copy of TrackingUpdateDataPB(v15, (uint64_t)v12 + v9[8], (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v17 = *(_QWORD *)(v4 + 44);
  v18 = *(_BYTE *)(v4 + 52);
  v19 = *(_BYTE *)(v4 + 24);
  v20 = *(_BYTE *)(v4 + 1049);
  v21 = *(_BYTE *)(v4 + 1050);
  v22 = *(_BYTE *)(v4 + 1051);
  v23 = *(_QWORD *)(v4 + 1056);
  v24 = *(_DWORD *)(v4 + 1064);
  v25 = *(_QWORD *)(v4 + 1072);
  v26 = *(_DWORD *)(v4 + 1136);
  v27 = *(_BYTE *)(v4 + 1192);
  v28 = *(_BYTE *)(v4 + 1193);
  result = *(_QWORD *)(v4 + 1200);
  v30 = *(_QWORD *)(v4 + 1240);
  *v12 = v16;
  v12[1] = v13;
  v12[2] = v14;
  v31 = (char *)v12 + v9[9];
  *(_OWORD *)v31 = *(_OWORD *)(v4 + 28);
  *((_QWORD *)v31 + 2) = v17;
  v31[24] = v18;
  v32 = (char *)v12 + v9[10];
  *(_QWORD *)v32 = a2;
  v33 = v44;
  *((_DWORD *)v32 + 2) = a3;
  *((_DWORD *)v32 + 3) = v33;
  *((_QWORD *)v32 + 2) = a4;
  *((_BYTE *)v12 + v9[11]) = v19;
  v34 = (char *)v12 + v9[12];
  *v34 = 1;
  v34[1] = v20;
  v34[2] = v21;
  v34[3] = v22;
  *((_QWORD *)v34 + 1) = v23;
  *((_DWORD *)v34 + 4) = v24;
  *((_QWORD *)v34 + 3) = v25;
  v35 = *(_OWORD *)(v4 + 1096);
  *((_OWORD *)v34 + 2) = *(_OWORD *)(v4 + 1080);
  *((_OWORD *)v34 + 3) = v35;
  *((_OWORD *)v34 + 4) = *(_OWORD *)(v4 + 1112);
  *((_QWORD *)v34 + 10) = *(_QWORD *)(v4 + 1128);
  *((_DWORD *)v34 + 22) = v26;
  v36 = *(_OWORD *)(v4 + 1160);
  *((_OWORD *)v34 + 6) = *(_OWORD *)(v4 + 1144);
  *((_OWORD *)v34 + 7) = v36;
  *((_OWORD *)v34 + 8) = *(_OWORD *)(v4 + 1176);
  v34[144] = v27;
  v34[145] = v28;
  v37 = v45;
  *((_WORD *)v34 + 75) = v46;
  *(_DWORD *)(v34 + 146) = v37;
  *((_QWORD *)v34 + 19) = result;
  v38 = *(_OWORD *)(v4 + 1224);
  *((_OWORD *)v34 + 10) = *(_OWORD *)(v4 + 1208);
  *((_OWORD *)v34 + 11) = v38;
  *((_QWORD *)v34 + 24) = v30;
  v39 = (char *)v12 + v9[13];
  *(_QWORD *)v39 = 14;
  v39[8] = 1;
  v40 = *(_QWORD *)(v4 + 1008);
  if (v40)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v41 = specialized static RecoverRepetitivePinch.shouldRecoverImplementation<A>(_:_:_:_:)(v12, (_QWORD *)(v4 + 168), inited, v40);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for RecoverRepetitivePinch.shouldRecoverImplementationInput<RecoverScrollPinchData>);
    return v41 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized static RecoverRepetitivePinch.shouldRecoverImplementation<A>(_:_:_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t i;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v44[272];
  _BYTE v45[352];
  _BYTE v46[352];
  _BYTE v47[352];
  _QWORD __src[44];
  _BYTE __dst[360];
  _OWORD v50[12];
  uint64_t v51;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinch.shouldRecoverImplementationInput<RecoverScrollPinchData>);
  v8 = (char *)a1 + *(int *)(v7 + 36);
  if ((v8[24] & 1) != 0)
    return 0;
  v9 = *a1;
  v10 = a1[1];
  if (*(_QWORD *)(*a1 + 16) != v10)
    return 0;
  v11 = (int *)v7;
  v41 = *(_QWORD *)v8;
  v42 = *((_QWORD *)v8 + 2);
  v40 = *((_QWORD *)v8 + 1);
  v12 = a1[2] + 16;
  swift_beginAccess();
  v13 = *(_QWORD *)(*(_QWORD *)v12 + 16);
  if (!v13)
    return 0;
  v39 = a4;
  v14 = 0;
  for (i = 32; ; i += 352)
  {
    if (v14 < *(_QWORD *)(*(_QWORD *)v12 + 16))
    {
      memmove(__dst, (const void *)(*(_QWORD *)v12 + i), 0x160uLL);
      v16 = (char *)a1 + v11[8];
      v17 = (_QWORD *)((char *)a1 + v11[10]);
      v18 = *v17;
      v19 = v17[1];
      v20 = v17[2];
      v21 = *((_BYTE *)a1 + v11[11]);
      v22 = (char *)a1 + v11[12];
      v23 = *((_OWORD *)v22 + 11);
      v50[10] = *((_OWORD *)v22 + 10);
      v50[11] = v23;
      v51 = *((_QWORD *)v22 + 24);
      v24 = *((_OWORD *)v22 + 7);
      v50[6] = *((_OWORD *)v22 + 6);
      v50[7] = v24;
      v25 = *((_OWORD *)v22 + 9);
      v50[8] = *((_OWORD *)v22 + 8);
      v50[9] = v25;
      v26 = *((_OWORD *)v22 + 3);
      v50[2] = *((_OWORD *)v22 + 2);
      v50[3] = v26;
      v27 = *((_OWORD *)v22 + 5);
      v50[4] = *((_OWORD *)v22 + 4);
      v50[5] = v27;
      v28 = *((_OWORD *)v22 + 1);
      v50[0] = *(_OWORD *)v22;
      v50[1] = v28;
      LOBYTE(v38) = v21;
      (*(void (**)(_QWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, _BYTE *, _OWORD *))(*(_QWORD *)a3 + 88))(__src, v16, v18, v19, v20, v9, v10, v41, v40, v42, v38, __dst, v50);
      v29 = __src[0];
      *a2 = __src[0];
      v30 = (char *)a1 + v11[13];
      v31 = *(_QWORD *)v30;
      if (((v30[8] & 1) != 0 || v31 - 65 >= 0xFFFFFFFFFFFFFF7FLL && (v31 & 0x8000000000000000) == 0 && v31 < 0x40)
        && ((1 << v31) & v29) != 0)
      {
        break;
      }
    }
    if (v13 == ++v14)
      return 0;
  }
  if (v14 >= *(_QWORD *)(*(_QWORD *)v12 + 16))
  {
    _s5Hands19RecoverTapPinchDataVSgWOi0_((uint64_t)v47);
    outlined init with take of ImageData?((uint64_t)v47, (uint64_t)__src, &demangling cache variable for type metadata for RecoverScrollPinchData?);
  }
  else
  {
    swift_beginAccess();
    specialized Array.remove(at:)(v14, __src);
    memcpy(v47, __src, sizeof(v47));
    v32 = *(_QWORD **)v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v12 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
      *(_QWORD *)v12 = v32;
    }
    v35 = v32[2];
    v34 = v32[3];
    if (v35 >= v34 >> 1)
    {
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
      *(_QWORD *)v12 = v32;
    }
    v32[2] = v35 + 1;
    memcpy(&v32[44 * v35 + 4], v47, 0x160uLL);
    swift_endAccess();
    _s5Hands13PoseImageCropVSgWOi_(__src);
  }
  outlined init with take of ImageData?((uint64_t)__src, (uint64_t)v46, &demangling cache variable for type metadata for RecoverScrollPinchData?);
  outlined init with take of ImageData?((uint64_t)v46, (uint64_t)v47, &demangling cache variable for type metadata for RecoverScrollPinchData?);
  if (_s5Hands19RecoverTapPinchDataVSgWOgTm((uint64_t)v47) != 1)
  {
    outlined init with take of ImageData?((uint64_t)v46, (uint64_t)v45, &demangling cache variable for type metadata for RecoverScrollPinchData?);
    v37 = *(_BYTE *)(v39 + 16);
    memcpy(v44, v45, 0x10AuLL);
    swift_beginAccess();
    specialized static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(v37, v44, v39 + 24, (uint64_t)(a2 + 1));
    swift_endAccess();
  }
  return 1;
}

{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t i;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v44[272];
  _BYTE v45[352];
  _BYTE v46[352];
  _BYTE v47[352];
  _QWORD __src[44];
  _BYTE __dst[360];
  _OWORD v50[12];
  uint64_t v51;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinch.shouldRecoverImplementationInput<RecoverTapPinchData>);
  v8 = (char *)a1 + *(int *)(v7 + 36);
  if ((v8[24] & 1) != 0)
    return 0;
  v9 = *a1;
  v10 = a1[1];
  if (*(_QWORD *)(*a1 + 16) != v10)
    return 0;
  v11 = (int *)v7;
  v41 = *(_QWORD *)v8;
  v42 = *((_QWORD *)v8 + 2);
  v40 = *((_QWORD *)v8 + 1);
  v12 = a1[2] + 16;
  swift_beginAccess();
  v13 = *(_QWORD *)(*(_QWORD *)v12 + 16);
  if (!v13)
    return 0;
  v39 = a4;
  v14 = 0;
  for (i = 32; ; i += 352)
  {
    if (v14 < *(_QWORD *)(*(_QWORD *)v12 + 16))
    {
      memmove(__dst, (const void *)(*(_QWORD *)v12 + i), 0x160uLL);
      v16 = (char *)a1 + v11[8];
      v17 = (_QWORD *)((char *)a1 + v11[10]);
      v18 = *v17;
      v19 = v17[1];
      v20 = v17[2];
      v21 = *((_BYTE *)a1 + v11[11]);
      v22 = (char *)a1 + v11[12];
      v23 = *((_OWORD *)v22 + 11);
      v50[10] = *((_OWORD *)v22 + 10);
      v50[11] = v23;
      v51 = *((_QWORD *)v22 + 24);
      v24 = *((_OWORD *)v22 + 7);
      v50[6] = *((_OWORD *)v22 + 6);
      v50[7] = v24;
      v25 = *((_OWORD *)v22 + 9);
      v50[8] = *((_OWORD *)v22 + 8);
      v50[9] = v25;
      v26 = *((_OWORD *)v22 + 3);
      v50[2] = *((_OWORD *)v22 + 2);
      v50[3] = v26;
      v27 = *((_OWORD *)v22 + 5);
      v50[4] = *((_OWORD *)v22 + 4);
      v50[5] = v27;
      v28 = *((_OWORD *)v22 + 1);
      v50[0] = *(_OWORD *)v22;
      v50[1] = v28;
      LOBYTE(v38) = v21;
      (*(void (**)(_QWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, _BYTE *, _OWORD *))(*(_QWORD *)a3 + 88))(__src, v16, v18, v19, v20, v9, v10, v41, v40, v42, v38, __dst, v50);
      v29 = __src[0];
      *a2 = __src[0];
      v30 = (char *)a1 + v11[13];
      v31 = *(_QWORD *)v30;
      if (((v30[8] & 1) != 0 || v31 - 65 >= 0xFFFFFFFFFFFFFF7FLL && (v31 & 0x8000000000000000) == 0 && v31 < 0x40)
        && ((1 << v31) & v29) != 0)
      {
        break;
      }
    }
    if (v13 == ++v14)
      return 0;
  }
  if (v14 >= *(_QWORD *)(*(_QWORD *)v12 + 16))
  {
    _s5Hands19RecoverTapPinchDataVSgWOi0_((uint64_t)v47);
    outlined init with take of ImageData?((uint64_t)v47, (uint64_t)__src, &demangling cache variable for type metadata for RecoverTapPinchData?);
  }
  else
  {
    swift_beginAccess();
    specialized Array.remove(at:)(v14, __src);
    memcpy(v47, __src, sizeof(v47));
    v32 = *(_QWORD **)v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v12 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
      *(_QWORD *)v12 = v32;
    }
    v35 = v32[2];
    v34 = v32[3];
    if (v35 >= v34 >> 1)
    {
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
      *(_QWORD *)v12 = v32;
    }
    v32[2] = v35 + 1;
    memcpy(&v32[44 * v35 + 4], v47, 0x160uLL);
    swift_endAccess();
    _s5Hands13PoseImageCropVSgWOi_(__src);
  }
  outlined init with take of ImageData?((uint64_t)__src, (uint64_t)v46, &demangling cache variable for type metadata for RecoverTapPinchData?);
  outlined init with take of ImageData?((uint64_t)v46, (uint64_t)v47, &demangling cache variable for type metadata for RecoverTapPinchData?);
  if (_s5Hands19RecoverTapPinchDataVSgWOgTm((uint64_t)v47) != 1)
  {
    outlined init with take of ImageData?((uint64_t)v46, (uint64_t)v45, &demangling cache variable for type metadata for RecoverTapPinchData?);
    v37 = *(_BYTE *)(v39 + 16);
    memcpy(v44, v45, 0x10AuLL);
    swift_beginAccess();
    specialized static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(v37, v44, v39 + 24, (uint64_t)(a2 + 1));
    swift_endAccess();
  }
  return 1;
}

uint64_t RecoverRepetitivePinch.shouldRecoverTap(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t inited;
  unint64_t v44;
  int v45;
  __int16 v46;

  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinch.shouldRecoverImplementationInput<RecoverTapPinchData>);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (uint64_t *)((char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_BYTE *)(v4 + 1049) != 1)
  {
    v41 = 0;
    return v41 & 1;
  }
  v44 = HIDWORD(a3);
  type metadata accessor for TapRecoverSimilarity(0);
  inited = swift_initStackObject();
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 96);
  v14 = *(_QWORD *)(v4 + 112);
  v15 = a1;
  v16 = *(_QWORD *)(v4 + 88);
  outlined init with copy of TrackingUpdateDataPB(v15, (uint64_t)v12 + v9[8], (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v17 = *(_QWORD *)(v4 + 72);
  v18 = *(_BYTE *)(v4 + 80);
  v19 = *(_BYTE *)(v4 + 25);
  v20 = *(_BYTE *)(v4 + 1048);
  v21 = *(_BYTE *)(v4 + 1050);
  v22 = *(_BYTE *)(v4 + 1051);
  v23 = *(_QWORD *)(v4 + 1056);
  v24 = *(_DWORD *)(v4 + 1064);
  v25 = *(_QWORD *)(v4 + 1072);
  v26 = *(_DWORD *)(v4 + 1136);
  v27 = *(_BYTE *)(v4 + 1192);
  v28 = *(_BYTE *)(v4 + 1193);
  result = *(_QWORD *)(v4 + 1200);
  v30 = *(_QWORD *)(v4 + 1240);
  *v12 = v16;
  v12[1] = v13;
  v12[2] = v14;
  v31 = (char *)v12 + v9[9];
  *(_OWORD *)v31 = *(_OWORD *)(v4 + 56);
  *((_QWORD *)v31 + 2) = v17;
  v31[24] = v18;
  v32 = (char *)v12 + v9[10];
  *(_QWORD *)v32 = a2;
  v33 = v44;
  *((_DWORD *)v32 + 2) = a3;
  *((_DWORD *)v32 + 3) = v33;
  *((_QWORD *)v32 + 2) = a4;
  *((_BYTE *)v12 + v9[11]) = v19;
  v34 = (char *)v12 + v9[12];
  *v34 = v20;
  v34[1] = 1;
  v34[2] = v21;
  v34[3] = v22;
  *((_QWORD *)v34 + 1) = v23;
  *((_DWORD *)v34 + 4) = v24;
  *((_QWORD *)v34 + 3) = v25;
  v35 = *(_OWORD *)(v4 + 1096);
  *((_OWORD *)v34 + 2) = *(_OWORD *)(v4 + 1080);
  *((_OWORD *)v34 + 3) = v35;
  *((_OWORD *)v34 + 4) = *(_OWORD *)(v4 + 1112);
  *((_QWORD *)v34 + 10) = *(_QWORD *)(v4 + 1128);
  *((_DWORD *)v34 + 22) = v26;
  v36 = *(_OWORD *)(v4 + 1160);
  *((_OWORD *)v34 + 6) = *(_OWORD *)(v4 + 1144);
  *((_OWORD *)v34 + 7) = v36;
  *((_OWORD *)v34 + 8) = *(_OWORD *)(v4 + 1176);
  v34[144] = v27;
  v34[145] = v28;
  v37 = v45;
  *((_WORD *)v34 + 75) = v46;
  *(_DWORD *)(v34 + 146) = v37;
  *((_QWORD *)v34 + 19) = result;
  v38 = *(_OWORD *)(v4 + 1224);
  *((_OWORD *)v34 + 10) = *(_OWORD *)(v4 + 1208);
  *((_OWORD *)v34 + 11) = v38;
  *((_QWORD *)v34 + 24) = v30;
  v39 = (char *)v12 + v9[13];
  *(_QWORD *)v39 = 15;
  v39[8] = 1;
  v40 = *(_QWORD *)(v4 + 1016);
  if (v40)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v41 = specialized static RecoverRepetitivePinch.shouldRecoverImplementation<A>(_:_:_:_:)(v12, (_QWORD *)(v4 + 448), inited, v40);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for RecoverRepetitivePinch.shouldRecoverImplementationInput<RecoverTapPinchData>);
    return v41 & 1;
  }
  __break(1u);
  return result;
}

uint64_t RecoverRepetitivePinch.recoverPinch(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v20[4];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v9 = type metadata accessor for HandPinchEvent(0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TrackingUpdateDataPB(a1, a4, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  *(_BYTE *)(a4 + 4) = 1;
  v13 = (uint64_t *)(v4 + 88);
  swift_beginAccess();
  v14 = *(_QWORD **)(v4 + 88);
  v15 = v14[2];
  if (v15)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    *v13 = (uint64_t)v14;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v14 = (_QWORD *)result;
      *v13 = result;
    }
    if (v15 > v14[2])
    {
      __break(1u);
      goto LABEL_14;
    }
    *((_BYTE *)&v14[74 * v15 - 68] - 4) = 1;
  }
  result = swift_endAccess();
  v17 = *(unsigned __int8 *)(a1 + 4);
  if (v17 == 2)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if ((v17 & 1) == 0)
  {
    *(_QWORD *)(a4 + 240) = 11;
    *(_WORD *)(a4 + 248) = 1;
    v18 = a4 + *(int *)(type metadata accessor for HandDescriptor() + 112);
    if ((*(_BYTE *)(v18 + 49) & 1) == 0 && (*(_BYTE *)(v18 + 32) & 1) == 0)
      *(_QWORD *)v18 |= 0x20uLL;
    static HandPinchEvent.generateRepetitiveInteractionPinchEvent(hand:timestamp:)(a1, a2, a3, (uint64_t)v12);
    v21 = xmmword_23D9AB690;
    v22 = 0;
    v23 = 0;
    v20[3] = v9;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v20);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v12, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandPinchEvent);
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD0000000000000A4, 0x800000023D9D7C90, 437, (uint64_t *)&v21, (uint64_t)v20, MEMORY[0x24BEE4AF8]);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandPinchEvent);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
  }
  return result;
}

Swift::Void __swiftcall RecoverRepetitivePinch.retirePinchCache(_:)(CMTime a1)
{
  uint64_t v1;
  CMTimeEpoch epoch;
  uint64_t v3;
  CMTimeValue value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  _OWORD v26[12];
  uint64_t v27;
  _OWORD v28[12];
  uint64_t v29;

  epoch = a1.epoch;
  v3 = *(_QWORD *)&a1.timescale;
  value = a1.value;
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_BYTE *)(v1 + 80);
  v9 = *(_OWORD *)(v1 + 1224);
  v28[10] = *(_OWORD *)(v1 + 1208);
  v28[11] = v9;
  v29 = *(_QWORD *)(v1 + 1240);
  v10 = *(_OWORD *)(v1 + 1160);
  v28[6] = *(_OWORD *)(v1 + 1144);
  v28[7] = v10;
  v11 = *(_OWORD *)(v1 + 1192);
  v28[8] = *(_OWORD *)(v1 + 1176);
  v28[9] = v11;
  v12 = *(_OWORD *)(v1 + 1096);
  v28[2] = *(_OWORD *)(v1 + 1080);
  v28[3] = v12;
  v13 = *(_OWORD *)(v1 + 1128);
  v28[4] = *(_OWORD *)(v1 + 1112);
  v28[5] = v13;
  v14 = *(_OWORD *)(v1 + 1064);
  v28[0] = *(_OWORD *)(v1 + 1048);
  v28[1] = v14;
  swift_retain();
  LOBYTE(v5) = specialized PinchCache.retire(currentTime:pinchAnchorTime:_:)(value, v3, epoch, v5, v6, v7, v8, (uint64_t)v28, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_release();
  if ((v5 & 1) != 0)
    *(_BYTE *)(v1 + 25) = 0;
  v15 = *(_QWORD *)(v1 + 28);
  v16 = *(_QWORD *)(v1 + 36);
  v17 = *(_QWORD *)(v1 + 44);
  v18 = *(_BYTE *)(v1 + 52);
  v19 = *(_OWORD *)(v1 + 1224);
  v26[10] = *(_OWORD *)(v1 + 1208);
  v26[11] = v19;
  v27 = *(_QWORD *)(v1 + 1240);
  v20 = *(_OWORD *)(v1 + 1160);
  v26[6] = *(_OWORD *)(v1 + 1144);
  v26[7] = v20;
  v21 = *(_OWORD *)(v1 + 1192);
  v26[8] = *(_OWORD *)(v1 + 1176);
  v26[9] = v21;
  v22 = *(_OWORD *)(v1 + 1096);
  v26[2] = *(_OWORD *)(v1 + 1080);
  v26[3] = v22;
  v23 = *(_OWORD *)(v1 + 1128);
  v26[4] = *(_OWORD *)(v1 + 1112);
  v26[5] = v23;
  v24 = *(_OWORD *)(v1 + 1064);
  v26[0] = *(_OWORD *)(v1 + 1048);
  v26[1] = v24;
  swift_retain();
  v25 = specialized PinchCache.retire(currentTime:pinchAnchorTime:_:)(value, v3, epoch, v15, v16, v17, v18, (uint64_t)v26, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_release();
  if ((v25 & 1) != 0)
    *(_BYTE *)(v1 + 24) = 0;
}

uint64_t RecoverRepetitivePinch.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t RecoverRepetitivePinch.__deallocating_deinit()
{
  RecoverRepetitivePinch.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RecoverRepetitivePinch()
{
  return objc_opt_self();
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RecoverRepetitivePinch.config(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[200])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RecoverRepetitivePinch.config(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 200) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecoverRepetitivePinch.config()
{
  return &type metadata for RecoverRepetitivePinch.config;
}

uint64_t specialized PinchCache.retire(currentTime:pinchAnchorTime:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  double v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;

  v12 = *(_QWORD *)(a8 + 8);
  v13 = v9 + 16;
  swift_beginAccess();
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 16);
  if (v14 < v12)
  {
LABEL_2:
    if ((a7 & 1) != 0)
      return 0;
    CMTime.seconds.getter();
    v16 = v15;
    CMTime.seconds.getter();
    *(float *)&v17 = v17;
    if (*(float *)(a8 + 16) >= (float)(v16 - *(float *)&v17))
      return 0;
    goto LABEL_13;
  }
  if (!v14)
  {
LABEL_13:
    *(_QWORD *)v13 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    return 1;
  }
  while (1)
  {
    swift_beginAccess();
    v19 = *(_QWORD **)v13;
    v20 = *(_QWORD *)(*(_QWORD *)v13 + 16);
    if (!v20)
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v13 = v19;
    if (!isUniquelyReferenced_nonNull_native || (unint64_t)(v20 - 1) > v19[3] >> 1)
    {
      v19 = (_QWORD *)a9();
      *(_QWORD *)v13 = v19;
    }
    v22 = v19[2];
    if (!v22)
      goto LABEL_15;
    memmove(v19 + 4, v19 + 48, 352 * v22 - 352);
    v19[2] = v22 - 1;
    *(_QWORD *)v13 = v19;
    swift_endAccess();
    v23 = v19[2];
    if (v23 < v12)
      goto LABEL_2;
    if (!v23)
      goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *_s5Hands19RecoverTapPinchDataVSgWOi0_(uint64_t a1)
{
  _OWORD *result;

  *(_QWORD *)a1 = 768;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  result = (_OWORD *)(a1 + 8);
  result[16] = 0u;
  result[17] = 0u;
  result[18] = 0u;
  result[19] = 0u;
  result[20] = 0u;
  return result;
}

uint64_t specialized RecoverRepetitivePinch.init(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  char v8;
  __int16 v9;
  char v10;
  __int16 v11;
  char v12;
  __int16 v13;
  char v14;
  __int16 v15;
  char v16;
  __int16 v17;
  char v18;
  int v19;
  __int16 v20;
  __int16 v21;
  char v22;
  __int16 v23;
  char v24;
  __int16 v25;
  char v26;
  __int16 v27;
  char v28;
  __int16 v29;
  char v30;
  _BYTE v31[7];
  __int16 v32;
  char v33;
  __int16 v34;
  char v35;
  _BYTE v36[7];
  _BYTE v37[7];
  __int16 v38;
  char v39;
  int v40;
  __int16 v41;
  __int16 v42;
  char v43;
  __int16 v44;
  char v45;
  __int16 v46;
  char v47;
  __int16 v48;
  char v49;
  __int16 v50;
  char v51;
  __int16 v52;
  char v53;
  int v54;
  __int16 v55;
  __int16 v56;
  char v57;
  __int16 v58;
  char v59;
  __int16 v60;
  char v61;
  __int16 v62;
  char v63;
  __int16 v64;
  char v65;
  _BYTE v66[7];
  __int16 v67;
  char v68;
  __int16 v69;
  char v70;
  _BYTE v71[7];
  _BYTE v72[7];
  __int16 v73;
  char v74;
  int v75;
  __int16 v76;
  __int16 v77;
  char v78;
  __int16 v79;
  char v80;
  __int16 v81;
  char v82;
  __int16 v83;
  char v84;
  __int16 v85;
  char v86;
  __int16 v87;
  char v88;
  int v89;
  __int16 v90;
  __int16 v91;
  char v92;
  __int16 v93;
  char v94;
  __int16 v95;
  char v96;
  __int16 v97;
  char v98;
  __int16 v99;
  char v100;
  _BYTE v101[7];
  __int16 v102;
  char v103;
  __int16 v104;
  char v105;
  _BYTE v106[7];
  _BYTE v107[7];
  __int16 v108;
  char v109;
  int v110;
  __int16 v111;

  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 28) = 0;
  *(_QWORD *)(v1 + 44) = 0;
  *(_QWORD *)(v1 + 36) = 0;
  *(_BYTE *)(v1 + 52) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 80) = 1;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 88) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 96) = 33;
  type metadata accessor for ScrollCache(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v1 + 104) = v4;
  type metadata accessor for TapCache(0);
  v5 = swift_allocObject();
  *(_QWORD *)(v1 + 112) = v5;
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_QWORD *)(v1 + 168) = 0;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_WORD *)(v1 + 176) = 523;
  *(_QWORD *)(v1 + 188) = 0;
  *(_QWORD *)(v1 + 196) = 0;
  *(_QWORD *)(v1 + 180) = 0;
  *(_BYTE *)(v1 + 204) = 1;
  *(_BYTE *)(v1 + 207) = v109;
  *(_WORD *)(v1 + 205) = v108;
  *(_QWORD *)(v1 + 216) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_BYTE *)(v1 + 232) = 1;
  *(_DWORD *)(v1 + 236) = *(_DWORD *)&v107[3];
  *(_DWORD *)(v1 + 233) = *(_DWORD *)v107;
  *(_QWORD *)(v1 + 240) = 0;
  *(_BYTE *)(v1 + 248) = 1;
  *(_DWORD *)(v1 + 252) = *(_DWORD *)&v106[3];
  *(_DWORD *)(v1 + 249) = *(_DWORD *)v106;
  *(_QWORD *)(v1 + 256) = 0;
  *(_BYTE *)(v1 + 264) = 1;
  *(_WORD *)(v1 + 265) = v104;
  *(_BYTE *)(v1 + 267) = v105;
  *(_DWORD *)(v1 + 268) = 0;
  *(_BYTE *)(v1 + 272) = 1;
  *(_BYTE *)(v1 + 275) = v103;
  *(_WORD *)(v1 + 273) = v102;
  *(_DWORD *)(v1 + 276) = 0;
  *(_BYTE *)(v1 + 280) = 1;
  *(_DWORD *)(v1 + 284) = *(_DWORD *)&v101[3];
  *(_DWORD *)(v1 + 281) = *(_DWORD *)v101;
  *(_QWORD *)(v1 + 288) = 0;
  *(_BYTE *)(v1 + 296) = 1;
  *(_WORD *)(v1 + 297) = v99;
  *(_BYTE *)(v1 + 299) = v100;
  *(_DWORD *)(v1 + 300) = 0;
  *(_BYTE *)(v1 + 304) = 1;
  *(_BYTE *)(v1 + 307) = v98;
  *(_WORD *)(v1 + 305) = v97;
  *(_DWORD *)(v1 + 308) = 0;
  *(_BYTE *)(v1 + 312) = 1;
  *(_WORD *)(v1 + 313) = v95;
  *(_BYTE *)(v1 + 315) = v96;
  *(_DWORD *)(v1 + 316) = 0;
  *(_BYTE *)(v1 + 320) = 1;
  *(_WORD *)(v1 + 321) = v93;
  *(_BYTE *)(v1 + 323) = v94;
  *(_DWORD *)(v1 + 324) = 0;
  *(_BYTE *)(v1 + 328) = 1;
  *(_BYTE *)(v1 + 331) = v92;
  *(_WORD *)(v1 + 329) = v91;
  *(_DWORD *)(v1 + 332) = 0;
  *(_WORD *)(v1 + 336) = 769;
  *(_DWORD *)(v1 + 338) = v89;
  *(_WORD *)(v1 + 342) = v90;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_BYTE *)(v1 + 392) = 1;
  *(_WORD *)(v1 + 393) = v87;
  *(_BYTE *)(v1 + 395) = v88;
  *(_DWORD *)(v1 + 396) = 0;
  *(_BYTE *)(v1 + 400) = 1;
  *(_WORD *)(v1 + 401) = v85;
  *(_BYTE *)(v1 + 403) = v86;
  *(_DWORD *)(v1 + 404) = 0;
  *(_BYTE *)(v1 + 408) = 1;
  *(_WORD *)(v1 + 409) = v83;
  *(_BYTE *)(v1 + 411) = v84;
  *(_DWORD *)(v1 + 412) = 0;
  *(_BYTE *)(v1 + 416) = 1;
  *(_WORD *)(v1 + 417) = v81;
  *(_BYTE *)(v1 + 419) = v82;
  *(_DWORD *)(v1 + 420) = 0;
  *(_BYTE *)(v1 + 424) = 1;
  *(_BYTE *)(v1 + 427) = v80;
  *(_WORD *)(v1 + 425) = v79;
  *(_DWORD *)(v1 + 428) = 0;
  *(_BYTE *)(v1 + 432) = 1;
  *(_BYTE *)(v1 + 435) = v78;
  *(_WORD *)(v1 + 433) = v77;
  *(_DWORD *)(v1 + 436) = 0;
  *(_WORD *)(v1 + 440) = 1537;
  *(_WORD *)(v1 + 446) = v76;
  *(_DWORD *)(v1 + 442) = v75;
  *(_QWORD *)(v1 + 448) = 0;
  *(_WORD *)(v1 + 456) = 523;
  *(_QWORD *)(v1 + 468) = 0;
  *(_QWORD *)(v1 + 460) = 0;
  *(_QWORD *)(v1 + 476) = 0;
  *(_BYTE *)(v1 + 484) = 1;
  *(_BYTE *)(v1 + 487) = v74;
  *(_WORD *)(v1 + 485) = v73;
  *(_QWORD *)(v1 + 496) = 0;
  *(_QWORD *)(v1 + 504) = 0;
  *(_QWORD *)(v1 + 488) = 0;
  *(_BYTE *)(v1 + 512) = 1;
  *(_DWORD *)(v1 + 516) = *(_DWORD *)&v72[3];
  *(_DWORD *)(v1 + 513) = *(_DWORD *)v72;
  *(_QWORD *)(v1 + 520) = 0;
  *(_BYTE *)(v1 + 528) = 1;
  *(_DWORD *)(v1 + 532) = *(_DWORD *)&v71[3];
  *(_DWORD *)(v1 + 529) = *(_DWORD *)v71;
  *(_QWORD *)(v1 + 536) = 0;
  *(_BYTE *)(v1 + 544) = 1;
  *(_BYTE *)(v1 + 547) = v70;
  *(_WORD *)(v1 + 545) = v69;
  *(_DWORD *)(v1 + 548) = 0;
  *(_BYTE *)(v1 + 552) = 1;
  *(_WORD *)(v1 + 553) = v67;
  *(_BYTE *)(v1 + 555) = v68;
  *(_DWORD *)(v1 + 556) = 0;
  *(_BYTE *)(v1 + 560) = 1;
  *(_DWORD *)(v1 + 564) = *(_DWORD *)&v66[3];
  *(_DWORD *)(v1 + 561) = *(_DWORD *)v66;
  *(_QWORD *)(v1 + 568) = 0;
  *(_BYTE *)(v1 + 576) = 1;
  *(_BYTE *)(v1 + 579) = v65;
  *(_WORD *)(v1 + 577) = v64;
  *(_DWORD *)(v1 + 580) = 0;
  *(_BYTE *)(v1 + 584) = 1;
  *(_WORD *)(v1 + 585) = v62;
  *(_BYTE *)(v1 + 587) = v63;
  *(_DWORD *)(v1 + 588) = 0;
  *(_BYTE *)(v1 + 592) = 1;
  *(_BYTE *)(v1 + 595) = v61;
  *(_WORD *)(v1 + 593) = v60;
  *(_DWORD *)(v1 + 596) = 0;
  *(_BYTE *)(v1 + 600) = 1;
  *(_BYTE *)(v1 + 603) = v59;
  *(_WORD *)(v1 + 601) = v58;
  *(_DWORD *)(v1 + 604) = 0;
  *(_BYTE *)(v1 + 608) = 1;
  *(_WORD *)(v1 + 609) = v56;
  *(_BYTE *)(v1 + 611) = v57;
  *(_DWORD *)(v1 + 612) = 0;
  *(_WORD *)(v1 + 616) = 769;
  *(_WORD *)(v1 + 622) = v55;
  *(_DWORD *)(v1 + 618) = v54;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_BYTE *)(v1 + 672) = 1;
  *(_BYTE *)(v1 + 675) = v53;
  *(_WORD *)(v1 + 673) = v52;
  *(_DWORD *)(v1 + 676) = 0;
  *(_BYTE *)(v1 + 680) = 1;
  *(_BYTE *)(v1 + 683) = v51;
  *(_WORD *)(v1 + 681) = v50;
  *(_DWORD *)(v1 + 684) = 0;
  *(_BYTE *)(v1 + 688) = 1;
  *(_BYTE *)(v1 + 691) = v49;
  *(_WORD *)(v1 + 689) = v48;
  *(_DWORD *)(v1 + 692) = 0;
  *(_BYTE *)(v1 + 696) = 1;
  *(_BYTE *)(v1 + 699) = v47;
  *(_WORD *)(v1 + 697) = v46;
  *(_DWORD *)(v1 + 700) = 0;
  *(_BYTE *)(v1 + 704) = 1;
  *(_BYTE *)(v1 + 707) = v45;
  *(_WORD *)(v1 + 705) = v44;
  *(_DWORD *)(v1 + 708) = 0;
  *(_BYTE *)(v1 + 712) = 1;
  *(_BYTE *)(v1 + 715) = v43;
  *(_WORD *)(v1 + 713) = v42;
  *(_DWORD *)(v1 + 716) = 0;
  *(_WORD *)(v1 + 720) = 1537;
  *(_WORD *)(v1 + 726) = v41;
  *(_DWORD *)(v1 + 722) = v40;
  *(_QWORD *)(v1 + 728) = 0;
  *(_WORD *)(v1 + 736) = 523;
  *(_QWORD *)(v1 + 748) = 0;
  *(_QWORD *)(v1 + 740) = 0;
  *(_QWORD *)(v1 + 756) = 0;
  *(_BYTE *)(v1 + 764) = 1;
  *(_BYTE *)(v1 + 767) = v39;
  *(_WORD *)(v1 + 765) = v38;
  *(_QWORD *)(v1 + 776) = 0;
  *(_QWORD *)(v1 + 768) = 0;
  *(_QWORD *)(v1 + 784) = 0;
  *(_BYTE *)(v1 + 792) = 1;
  *(_DWORD *)(v1 + 796) = *(_DWORD *)&v37[3];
  *(_DWORD *)(v1 + 793) = *(_DWORD *)v37;
  *(_QWORD *)(v1 + 800) = 0;
  *(_BYTE *)(v1 + 808) = 1;
  *(_DWORD *)(v1 + 812) = *(_DWORD *)&v36[3];
  *(_DWORD *)(v1 + 809) = *(_DWORD *)v36;
  *(_QWORD *)(v1 + 816) = 0;
  *(_BYTE *)(v1 + 824) = 1;
  *(_BYTE *)(v1 + 827) = v35;
  *(_WORD *)(v1 + 825) = v34;
  *(_DWORD *)(v1 + 828) = 0;
  *(_BYTE *)(v1 + 832) = 1;
  *(_BYTE *)(v1 + 835) = v33;
  *(_WORD *)(v1 + 833) = v32;
  *(_DWORD *)(v1 + 836) = 0;
  *(_BYTE *)(v1 + 840) = 1;
  *(_DWORD *)(v1 + 844) = *(_DWORD *)&v31[3];
  *(_DWORD *)(v1 + 841) = *(_DWORD *)v31;
  *(_QWORD *)(v1 + 848) = 0;
  *(_BYTE *)(v1 + 856) = 1;
  *(_BYTE *)(v1 + 859) = v30;
  *(_WORD *)(v1 + 857) = v29;
  *(_DWORD *)(v1 + 860) = 0;
  *(_BYTE *)(v1 + 864) = 1;
  *(_BYTE *)(v1 + 867) = v28;
  *(_WORD *)(v1 + 865) = v27;
  *(_DWORD *)(v1 + 868) = 0;
  *(_BYTE *)(v1 + 872) = 1;
  *(_BYTE *)(v1 + 875) = v26;
  *(_WORD *)(v1 + 873) = v25;
  *(_DWORD *)(v1 + 876) = 0;
  *(_BYTE *)(v1 + 880) = 1;
  *(_BYTE *)(v1 + 883) = v24;
  *(_WORD *)(v1 + 881) = v23;
  *(_DWORD *)(v1 + 884) = 0;
  *(_BYTE *)(v1 + 888) = 1;
  *(_BYTE *)(v1 + 891) = v22;
  *(_WORD *)(v1 + 889) = v21;
  *(_DWORD *)(v1 + 892) = 0;
  *(_WORD *)(v1 + 896) = 769;
  *(_WORD *)(v1 + 902) = v20;
  *(_DWORD *)(v1 + 898) = v19;
  *(_OWORD *)(v1 + 920) = 0u;
  *(_OWORD *)(v1 + 936) = 0u;
  *(_OWORD *)(v1 + 904) = 0u;
  *(_BYTE *)(v1 + 952) = 1;
  *(_BYTE *)(v1 + 955) = v18;
  *(_WORD *)(v1 + 953) = v17;
  *(_DWORD *)(v1 + 956) = 0;
  *(_BYTE *)(v1 + 960) = 1;
  *(_BYTE *)(v1 + 963) = v16;
  *(_WORD *)(v1 + 961) = v15;
  *(_DWORD *)(v1 + 964) = 0;
  *(_BYTE *)(v1 + 968) = 1;
  *(_BYTE *)(v1 + 971) = v14;
  *(_WORD *)(v1 + 969) = v13;
  *(_DWORD *)(v1 + 972) = 0;
  *(_BYTE *)(v1 + 976) = 1;
  *(_BYTE *)(v1 + 979) = v12;
  *(_WORD *)(v1 + 977) = v11;
  *(_DWORD *)(v1 + 980) = 0;
  *(_BYTE *)(v1 + 984) = 1;
  *(_BYTE *)(v1 + 987) = v10;
  *(_WORD *)(v1 + 985) = v9;
  *(_DWORD *)(v1 + 988) = 0;
  *(_BYTE *)(v1 + 992) = 1;
  *(_BYTE *)(v1 + 995) = v8;
  *(_WORD *)(v1 + 993) = v7;
  *(_DWORD *)(v1 + 996) = 0;
  *(_BYTE *)(v1 + 1000) = 1;
  *(_WORD *)(v1 + 1001) = 6;
  *(_BYTE *)(v1 + 1003) = 0;
  *(_QWORD *)(v1 + 1040) = 0;
  *(_OWORD *)(v1 + 1008) = 0u;
  *(_OWORD *)(v1 + 1024) = 0u;
  *(_DWORD *)(v1 + 1048) = 65793;
  *(_QWORD *)(v1 + 1056) = 5;
  *(_DWORD *)(v1 + 1064) = 0x40000000;
  *(_QWORD *)(v1 + 1072) = 4;
  *(_OWORD *)(v1 + 1080) = xmmword_23D9BDC80;
  *(_OWORD *)(v1 + 1096) = xmmword_23D9BDC90;
  *(_OWORD *)(v1 + 1112) = xmmword_23D9A5D80;
  *(_QWORD *)(v1 + 1128) = 0x3CF5C28F3D4CCCCDLL;
  *(_DWORD *)(v1 + 1136) = 1106247680;
  *(_QWORD *)(v1 + 1144) = 1;
  *(_OWORD *)(v1 + 1152) = xmmword_23D9BDCA0;
  *(_QWORD *)(v1 + 1168) = 30;
  *(_OWORD *)(v1 + 1176) = xmmword_23D9BDC60;
  *(_WORD *)(v1 + 1192) = 257;
  *(_WORD *)(v1 + 1198) = v111;
  *(_DWORD *)(v1 + 1194) = v110;
  *(_QWORD *)(v1 + 1200) = 15;
  *(_OWORD *)(v1 + 1208) = xmmword_23D9BDC70;
  *(_QWORD *)(v1 + 1224) = 2000;
  *(_OWORD *)(v1 + 1232) = xmmword_23D9BDCB0;
  RecoverRepetitivePinch.reconfig(_:)(a1);
  return v1;
}

void specialized RecoverRepetitivePinch.detectPinchAndPopulateCache(_:_:_:_:)(void *__src, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  Swift::Int v18;
  __int128 v19;
  char v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  char v25;
  unsigned __int8 v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  Swift::Int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  int v51;
  float v52;
  __int128 v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  char v63;
  int v64;
  float v65;
  __int128 v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77[272];
  _BYTE v78[272];
  _OWORD __srca[17];
  _BYTE __dst[560];
  __int128 v81;
  uint64_t v82;
  _OWORD v83[3];
  __int16 v84;
  __int128 v85;
  uint64_t v86;
  _OWORD v87[3];
  __int16 v88;
  _OWORD v89[12];
  uint64_t v90;

  v4 = v3;
  memcpy(__dst, __src, 0x228uLL);
  swift_beginAccess();
  v7 = *(_QWORD *)(v4 + 88);
  v8 = *(_QWORD *)(v4 + 96);
  v9 = *(_QWORD *)(v7 + 16);
  if (v9 != v8 || v9 == 0)
    return;
  v75 = v4 + 88;
  v76 = a2;
  v11 = *(float *)(a3 + 100) < *(float *)(v7 + 592 * v8 - 552);
  swift_beginAccess();
  *(_BYTE *)(v4 + 1002) = v11;
  type metadata accessor for RepetitivePinchHelpers();
  v12 = *(_OWORD *)(v4 + 1224);
  v89[10] = *(_OWORD *)(v4 + 1208);
  v89[11] = v12;
  v90 = *(_QWORD *)(v4 + 1240);
  v13 = *(_OWORD *)(v4 + 1160);
  v89[6] = *(_OWORD *)(v4 + 1144);
  v89[7] = v13;
  v14 = *(_OWORD *)(v4 + 1176);
  v89[9] = *(_OWORD *)(v4 + 1192);
  v89[8] = v14;
  v15 = *(_OWORD *)(v4 + 1096);
  v89[2] = *(_OWORD *)(v4 + 1080);
  v89[3] = v15;
  v16 = *(_OWORD *)(v4 + 1112);
  v89[5] = *(_OWORD *)(v4 + 1128);
  v89[4] = v16;
  v17 = *(_OWORD *)(v4 + 1048);
  v89[1] = *(_OWORD *)(v4 + 1064);
  v89[0] = v17;
  v18 = swift_bridgeObjectRetain();
  static RepetitivePinchHelpers.isPotentialMissedPinch(_:_:_:)(v18, a3, (uint64_t)v89, (uint64_t)__srca);
  v19 = __srca[0];
  v20 = __srca[1];
  v74 = *((_QWORD *)&__srca[1] + 1);
  v21 = __srca[2];
  v22 = *((_QWORD *)&__srca[2] + 1);
  v23 = __srca[3];
  static RepetitivePinchHelpers.isPotentialMissedScrollBreak(_:_:_:)(v7, v8, a3, (float *)v89, (uint64_t)__srca);
  swift_bridgeObjectRelease();
  v24 = __srca[0];
  v25 = __srca[1];
  v73 = *((_QWORD *)&__srca[1] + 1);
  v26 = __srca[2];
  *(_QWORD *)(v4 + 120) = v19;
  *(_QWORD *)(v4 + 144) = v24;
  if ((v19 & 0x400) != 0 && (v20 & 1) == 0 && (v21 & 1) == 0)
  {
    v27 = *(_BYTE *)(v4 + 1050) ? v22 : v74;
    if ((*(_BYTE *)(v4 + 1050) & v23 & 1) == 0)
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16) - 1;
      swift_bridgeObjectRetain();
      v29 = (unint64_t)TntSingleHandSubsequence.getFramePose(_:_:)(0, v28);
      swift_bridgeObjectRelease();
      if (v29)
      {
        if (!*(_QWORD *)(v4 + 16))
        {
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
          return;
        }
        v88 = *(_WORD *)(v4 + 1192);
        v30 = *(_OWORD *)(v4 + 1160);
        v87[0] = *(_OWORD *)(v4 + 1144);
        v87[1] = v30;
        v87[2] = *(_OWORD *)(v4 + 1176);
        v85 = *(_OWORD *)(v4 + 1200);
        v86 = *(_QWORD *)(v4 + 1216);
        swift_retain();
        PinchGesturesForRecovery.reset()();
        PinchGesturesForRecovery.processScrollDetector(_:_:_:_:)(v29, *((uint64_t *)&v19 + 1), v74, (uint64_t)v87, (uint64_t *)__srca);
        v31 = *(_QWORD *)&__srca[0];
        PinchGesturesForRecovery.processTapDetector(_:_:_:_:)(v29, *((uint64_t *)&v19 + 1), v27, (float *)&v85, (uint64_t *)__srca);
        swift_release();
        swift_bridgeObjectRelease();
        v32 = *(_QWORD *)&__srca[0];
        *(_QWORD *)(v4 + 128) = v31;
        *(_QWORD *)(v4 + 136) = v32;
        if ((v31 & 0x200) != 0)
        {
          if (__OFSUB__(v74, 1))
            goto LABEL_48;
          addTemplates #1 (_:_:_:_:) in RecoverRepetitivePinch.detectPinchAndPopulateCache(_:_:_:_:)(*((unint64_t *)&v19 + 1), v74 - 1, 1, 1, (uint64_t)__dst, v4, v76);
          v32 = *(_QWORD *)(v4 + 136);
        }
        if ((v32 & 0x20) != 0)
          addTemplates #1 (_:_:_:_:) in RecoverRepetitivePinch.detectPinchAndPopulateCache(_:_:_:_:)(*((unint64_t *)&v19 + 1), v27, 1, 0, (uint64_t)__dst, v4, v76);
        v33 = *(_QWORD *)(v4 + 1024);
        if (!v33)
          goto LABEL_55;
        v34 = *(_QWORD *)(v4 + 88);
        v35 = *(_BYTE *)(v76 + 136);
        v36 = *(_BYTE *)(v33 + 16);
        swift_beginAccess();
        swift_beginAccess();
        type metadata accessor for PinchRecoveryAnalytics();
        swift_bridgeObjectRetain();
        swift_retain();
        static PinchRecoveryAnalytics.buildAnalyticData(_:_:_:_:_:)(4uLL, v35, *((uint64_t *)&v19 + 1), v74, v34, (uint64_t)v77);
        outlined init with take of ImageData?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for PinchRecoveryAnalyticsData?);
        outlined init with take of ImageData?((uint64_t)v78, (uint64_t)__srca, &demangling cache variable for type metadata for PinchRecoveryAnalyticsData?);
        if (_s5Hands19RecoverTapPinchDataVSgWOgTm((uint64_t)__srca) != 1)
        {
          memcpy(v77, __srca, 0x10AuLL);
          specialized static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(v36, v77, v33 + 24, v4 + 736);
        }
        swift_endAccess();
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  if ((*(_BYTE *)(v4 + 144) & 0x20) != 0)
    v37 = v25;
  else
    v37 = 1;
  if (((v37 | v26) & 1) == 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16) - 1;
    swift_bridgeObjectRetain();
    v39 = (unint64_t)TntSingleHandSubsequence.getFramePose(_:_:)(0, v38);
    swift_bridgeObjectRelease();
    if (v39)
    {
      if (!*(_QWORD *)(v4 + 16))
      {
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      v84 = *(_WORD *)(v4 + 1192);
      v40 = *(_OWORD *)(v4 + 1160);
      v83[0] = *(_OWORD *)(v4 + 1144);
      v83[1] = v40;
      v83[2] = *(_OWORD *)(v4 + 1176);
      v81 = *(_OWORD *)(v4 + 1200);
      v82 = *(_QWORD *)(v4 + 1216);
      swift_retain();
      PinchGesturesForRecovery.reset()();
      PinchGesturesForRecovery.processScrollDetector(_:_:_:_:)(v39, *((uint64_t *)&v24 + 1), v73, (uint64_t)v83, (uint64_t *)__srca);
      v41 = *(_QWORD *)&__srca[0];
      PinchGesturesForRecovery.processTapDetector(_:_:_:_:)(v39, *((uint64_t *)&v24 + 1), v73, (float *)&v81, (uint64_t *)__srca);
      swift_release();
      swift_bridgeObjectRelease();
      v42 = *(_QWORD *)&__srca[0];
      *(_QWORD *)(v4 + 152) = v41;
      *(_QWORD *)(v4 + 160) = v42;
      if ((v41 & 0x200) == 0)
      {
LABEL_35:
        if (*(_BYTE *)(v4 + 1051) != 1 || (*(_BYTE *)(v4 + 160) & 0x20) == 0)
          goto LABEL_41;
        if ((*((_QWORD *)&v24 + 1) & 0x8000000000000000) == 0)
        {
          if (*((_QWORD *)&v24 + 1) < *(_QWORD *)(*(_QWORD *)v75 + 16))
          {
            v56 = *(_QWORD *)v75 + 592 * *((_QWORD *)&v24 + 1);
            v57 = *(_OWORD *)(v56 + 128);
            v58 = *(_OWORD *)(v56 + 144);
            v59 = *(_OWORD *)(v56 + 160);
            v60 = *(_OWORD *)(v56 + 176);
            v61 = *(_OWORD *)(v56 + 192);
            v62 = *(_BYTE *)(v56 + 208);
            v63 = *(_BYTE *)(v56 + 209);
            v64 = *(_DWORD *)(v56 + 212);
            v65 = *(float *)(v4 + 1096);
            v66 = *(_OWORD *)(v56 + 112);
            __srca[0] = *(_OWORD *)(v56 + 96);
            __srca[1] = v66;
            __srca[2] = v57;
            __srca[3] = v58;
            __srca[4] = v59;
            __srca[5] = v60;
            __srca[6] = v61;
            LOBYTE(__srca[7]) = v62;
            BYTE1(__srca[7]) = v63;
            DWORD1(__srca[7]) = v64;
            HandPose.getHoverDistanceVector()();
            v68 = vmulq_f32(v67, v67);
            if (v65 >= sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).f32[0]))addTemplates #1 (_:_:_:_:) in RecoverRepetitivePinch.detectPinchAndPopulateCache(_:_:_:_:)(*((unint64_t *)&v24 + 1), v73, 0, 0, (uint64_t)__dst, v4, v76);
LABEL_41:
            v69 = *(_QWORD *)(v4 + 1024);
            if (v69)
            {
              v70 = *(_QWORD *)(v4 + 88);
              v71 = *(_BYTE *)(v76 + 136);
              v72 = *(_BYTE *)(v69 + 16);
              swift_beginAccess();
              swift_beginAccess();
              type metadata accessor for PinchRecoveryAnalytics();
              swift_bridgeObjectRetain();
              swift_retain();
              static PinchRecoveryAnalytics.buildAnalyticData(_:_:_:_:_:)(4uLL, v71, *((uint64_t *)&v24 + 1), v73, v70, (uint64_t)v77);
              outlined init with take of ImageData?((uint64_t)v77, (uint64_t)v78, &demangling cache variable for type metadata for PinchRecoveryAnalyticsData?);
              outlined init with take of ImageData?((uint64_t)v78, (uint64_t)__srca, &demangling cache variable for type metadata for PinchRecoveryAnalyticsData?);
              if (_s5Hands19RecoverTapPinchDataVSgWOgTm((uint64_t)__srca) != 1)
              {
                memcpy(v77, __srca, 0x10AuLL);
                specialized static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(v72, v77, v69 + 24, v4 + 736);
              }
              swift_endAccess();
              swift_endAccess();
              swift_bridgeObjectRelease();
              swift_release();
              return;
            }
            goto LABEL_53;
          }
          goto LABEL_51;
        }
        goto LABEL_49;
      }
      if ((*((_QWORD *)&v24 + 1) & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*((_QWORD *)&v24 + 1) < *(_QWORD *)(*(_QWORD *)v75 + 16))
      {
        v43 = *(_QWORD *)v75 + 592 * *((_QWORD *)&v24 + 1);
        v44 = *(_OWORD *)(v43 + 128);
        v45 = *(_OWORD *)(v43 + 144);
        v46 = *(_OWORD *)(v43 + 160);
        v47 = *(_OWORD *)(v43 + 176);
        v48 = *(_OWORD *)(v43 + 192);
        v49 = *(_BYTE *)(v43 + 208);
        v50 = *(_BYTE *)(v43 + 209);
        v51 = *(_DWORD *)(v43 + 212);
        v52 = *(float *)(v4 + 1096);
        v53 = *(_OWORD *)(v43 + 112);
        __srca[0] = *(_OWORD *)(v43 + 96);
        __srca[1] = v53;
        __srca[2] = v44;
        __srca[3] = v45;
        __srca[4] = v46;
        __srca[5] = v47;
        __srca[6] = v48;
        LOBYTE(__srca[7]) = v49;
        BYTE1(__srca[7]) = v50;
        DWORD1(__srca[7]) = v51;
        HandPose.getHoverDistanceVector()();
        v55 = vmulq_f32(v54, v54);
        if (v52 >= sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]))
        {
          if (__OFSUB__(v73, 1))
          {
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
            goto LABEL_52;
          }
          addTemplates #1 (_:_:_:_:) in RecoverRepetitivePinch.detectPinchAndPopulateCache(_:_:_:_:)(*((unint64_t *)&v24 + 1), v73 - 1, 0, 1, (uint64_t)__dst, v4, v76);
        }
        goto LABEL_35;
      }
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
  }
}

uint64_t _s5Hands19RecoverTapPinchDataVSgWOgTm(uint64_t a1)
{
  unsigned int v1;
  int v2;

  v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 >= 2)
    v2 = ((v1 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v2 = -2;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t type metadata instantiation function for RecoverRepetitivePinch.shouldRecoverImplementationInput()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for RecoverRepetitivePinch.shouldRecoverImplementationInput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HandDescriptor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for RecoverRepetitivePinch.shouldRecoverImplementationInput(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, _QWORD, uint64_t, int *);
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  __int128 v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  int *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t);
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD *v182;
  _OWORD *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *__dst;
  int *__dsta;
  char *__dstb;
  _QWORD *v209;
  int *v210;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    v16 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a3[8];
    v209 = a1;
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    *(_DWORD *)v8 = *(_DWORD *)((char *)a2 + v7);
    *((_WORD *)v8 + 2) = *(_WORD *)((char *)a2 + v7 + 4);
    *((_DWORD *)v8 + 2) = *(_DWORD *)((char *)a2 + v7 + 8);
    v10 = (_QWORD *)((char *)a2 + v7 + 16);
    v11 = *v10;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v11)
    {
      v12 = *((_QWORD *)v9 + 3);
      *((_QWORD *)v8 + 2) = v11;
      *((_QWORD *)v8 + 3) = v12;
      v13 = *((_OWORD *)v9 + 3);
      *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
      *((_OWORD *)v8 + 3) = v13;
      v14 = *((_OWORD *)v9 + 5);
      *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
      *((_OWORD *)v8 + 5) = v14;
      v15 = *((_OWORD *)v9 + 7);
      *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
      *((_OWORD *)v8 + 7) = v15;
      v8[128] = v9[128];
      v8[129] = v9[129];
      *((_DWORD *)v8 + 33) = *((_DWORD *)v9 + 33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v17 = *((_OWORD *)v9 + 6);
      *((_OWORD *)v8 + 5) = *((_OWORD *)v9 + 5);
      *((_OWORD *)v8 + 6) = v17;
      *((_OWORD *)v8 + 7) = *((_OWORD *)v9 + 7);
      *((_QWORD *)v8 + 16) = *((_QWORD *)v9 + 16);
      v18 = *((_OWORD *)v9 + 2);
      *((_OWORD *)v8 + 1) = *(_OWORD *)v10;
      *((_OWORD *)v8 + 2) = v18;
      v19 = *((_OWORD *)v9 + 4);
      *((_OWORD *)v8 + 3) = *((_OWORD *)v9 + 3);
      *((_OWORD *)v8 + 4) = v19;
    }
    v20 = *((_QWORD *)v9 + 25);
    v8[136] = v9[136];
    *(_WORD *)(v8 + 137) = *(_WORD *)(v9 + 137);
    *((_QWORD *)v8 + 18) = *((_QWORD *)v9 + 18);
    v21 = *((_OWORD *)v9 + 11);
    *((_OWORD *)v8 + 10) = *((_OWORD *)v9 + 10);
    *((_OWORD *)v8 + 11) = v21;
    v8[192] = v9[192];
    if (v20)
    {
      v22 = *((_QWORD *)v9 + 26);
      *((_QWORD *)v8 + 25) = v20;
      *((_QWORD *)v8 + 26) = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v8 + 200) = *(_OWORD *)(v9 + 200);
    }
    *(_OWORD *)(v8 + 216) = *(_OWORD *)(v9 + 216);
    *((_DWORD *)v8 + 58) = *((_DWORD *)v9 + 58);
    v8[236] = v9[236];
    *((_QWORD *)v8 + 30) = *((_QWORD *)v9 + 30);
    *((_DWORD *)v8 + 62) = *((_DWORD *)v9 + 62);
    *((_QWORD *)v8 + 32) = *((_QWORD *)v9 + 32);
    *((_DWORD *)v8 + 66) = *((_DWORD *)v9 + 66);
    v8[268] = v9[268];
    *((_DWORD *)v8 + 68) = *((_DWORD *)v9 + 68);
    *((_DWORD *)v8 + 69) = *((_DWORD *)v9 + 69);
    *((_WORD *)v8 + 140) = *((_WORD *)v9 + 140);
    v23 = (int *)type metadata accessor for HandDescriptor();
    v24 = v23[17];
    v25 = &v8[v24];
    v26 = &v9[v24];
    v27 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    if (v29(v26, 1, v27))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = type metadata accessor for UnknownStorage();
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
      v32(v25, v26, v31);
      v33 = *(int *)(v27 + 20);
      __dst = &v25[v33];
      v34 = &v26[v33];
      v35 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v202 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v34, 1, v35))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
        memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v34;
        v37 = *(int *)(v35 + 20);
        v199 = &v34[v37];
        v200 = &__dst[v37];
        swift_bridgeObjectRetain();
        v32(v200, v199, v31);
        v38 = *(int *)(v35 + 24);
        v39 = &__dst[v38];
        v40 = &v34[v38];
        *(_DWORD *)v39 = *(_DWORD *)v40;
        v39[4] = v40[4];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56))(__dst, 0, 1, v35);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    *(_QWORD *)&v8[v23[18]] = *(_QWORD *)&v9[v23[18]];
    v41 = v23[19];
    v42 = &v8[v41];
    v43 = &v9[v41];
    *(_OWORD *)v42 = *(_OWORD *)v43;
    v42[16] = v43[16];
    v44 = v23[20];
    v45 = &v8[v44];
    v46 = &v9[v44];
    *(_OWORD *)v45 = *(_OWORD *)v46;
    v45[16] = v46[16];
    v47 = v23[21];
    v48 = &v8[v47];
    v49 = &v9[v47];
    *(_OWORD *)v48 = *(_OWORD *)v49;
    v48[16] = v49[16];
    v50 = v23[22];
    v51 = &v8[v50];
    v52 = &v9[v50];
    v51[64] = v52[64];
    v53 = *((_OWORD *)v52 + 3);
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    *((_OWORD *)v51 + 3) = v53;
    v54 = *((_OWORD *)v52 + 1);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v54;
    *(_QWORD *)&v8[v23[23]] = *(_QWORD *)&v9[v23[23]];
    v55 = v23[24];
    v56 = &v8[v55];
    v57 = &v9[v55];
    v58 = type metadata accessor for HandDescriptorInternal();
    v59 = *(_QWORD *)(v58 - 8);
    v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v210 = v23;
    if (v60(v57, 1, v58))
    {
      v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      v203 = v59;
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v57[8];
      v62 = *((_QWORD *)v57 + 6);
      swift_bridgeObjectRetain();
      __dsta = (int *)v58;
      if (v62)
      {
        *((_QWORD *)v56 + 2) = *((_QWORD *)v57 + 2);
        *((_WORD *)v56 + 12) = *((_WORD *)v57 + 12);
        *((_QWORD *)v56 + 4) = *((_QWORD *)v57 + 4);
        v56[40] = v57[40];
        v63 = *((_QWORD *)v57 + 7);
        v64 = *((_QWORD *)v57 + 8);
        *((_QWORD *)v56 + 6) = v62;
        *((_QWORD *)v56 + 7) = v63;
        v65 = *((_QWORD *)v57 + 9);
        v66 = *((_QWORD *)v57 + 10);
        *((_QWORD *)v56 + 8) = v64;
        *((_QWORD *)v56 + 9) = v65;
        *((_QWORD *)v56 + 10) = v66;
        *((_DWORD *)v56 + 22) = *((_DWORD *)v57 + 22);
        v67 = *((_QWORD *)v57 + 13);
        *((_QWORD *)v56 + 12) = *((_QWORD *)v57 + 12);
        *((_QWORD *)v56 + 13) = v67;
        v56[120] = v57[120];
        *((_QWORD *)v56 + 14) = *((_QWORD *)v57 + 14);
        *(_QWORD *)(v56 + 124) = *(_QWORD *)(v57 + 124);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v58 = (uint64_t)__dsta;
        swift_bridgeObjectRetain();
      }
      else
      {
        v68 = *((_OWORD *)v57 + 6);
        *((_OWORD *)v56 + 5) = *((_OWORD *)v57 + 5);
        *((_OWORD *)v56 + 6) = v68;
        *((_OWORD *)v56 + 7) = *((_OWORD *)v57 + 7);
        *((_DWORD *)v56 + 32) = *((_DWORD *)v57 + 32);
        v69 = *((_OWORD *)v57 + 2);
        *((_OWORD *)v56 + 1) = *((_OWORD *)v57 + 1);
        *((_OWORD *)v56 + 2) = v69;
        v70 = *((_OWORD *)v57 + 4);
        *((_OWORD *)v56 + 3) = *((_OWORD *)v57 + 3);
        *((_OWORD *)v56 + 4) = v70;
      }
      *((_QWORD *)v56 + 17) = *((_QWORD *)v57 + 17);
      *((_QWORD *)v56 + 18) = *((_QWORD *)v57 + 18);
      *((_QWORD *)v56 + 19) = *((_QWORD *)v57 + 19);
      memcpy(v56 + 160, v57 + 160, 0x373uLL);
      v71 = *(int *)(v58 + 40);
      v201 = &v56[v71];
      v72 = &v57[v71];
      v73 = type metadata accessor for ActionInternalPB(0);
      v74 = *(_QWORD *)(v73 - 8);
      v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v75(v72, 1, v73))
      {
        v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
        memcpy(v201, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        *v201 = *v72;
        v77 = *(int *)(v73 + 20);
        v78 = &v201[v77];
        v79 = &v72[v77];
        v80 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v201, 0, 1, v73);
      }
      v81 = __dsta[11];
      v82 = &v56[v81];
      v83 = &v57[v81];
      v84 = type metadata accessor for UnsureInternalPB(0);
      v85 = *(_QWORD *)(v84 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
      {
        v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        v87 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v82, v83, v87);
        *(_QWORD *)&v82[*(int *)(v84 + 20)] = *(_QWORD *)&v83[*(int *)(v84 + 20)];
        v88 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56);
        swift_retain();
        v88(v82, 0, 1, v84);
      }
      v89 = __dsta[12];
      v90 = &v56[v89];
      v91 = &v57[v89];
      v92 = type metadata accessor for ObjectInteractionStateInternalPB(0);
      v93 = *(_QWORD *)(v92 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
        memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        v95 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v90, v91, v95);
        *(_QWORD *)&v90[*(int *)(v92 + 20)] = *(_QWORD *)&v91[*(int *)(v92 + 20)];
        v96 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56);
        swift_retain();
        v96(v90, 0, 1, v92);
      }
      v97 = __dsta[13];
      v98 = &v56[v97];
      v99 = &v57[v97];
      v100 = type metadata accessor for HomePinchInternalPB(0);
      v101 = *(_QWORD *)(v100 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
      {
        v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
        memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v98 = *(_QWORD *)v99;
        v103 = *(int *)(v100 + 20);
        v104 = &v98[v103];
        v105 = &v99[v103];
        v106 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v104, v105, v106);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
      }
      v23 = v210;
      *(_QWORD *)&v56[__dsta[14]] = *(_QWORD *)&v57[__dsta[14]];
      v107 = *(void (**)(char *, _QWORD, uint64_t, int *))(v203 + 56);
      swift_bridgeObjectRetain();
      v107(v56, 0, 1, __dsta);
    }
    v108 = v23[25];
    v109 = &v8[v108];
    v110 = &v9[v108];
    *(_QWORD *)v109 = *(_QWORD *)v110;
    v109[8] = v110[8];
    *(_QWORD *)&v8[v23[26]] = *(_QWORD *)&v9[v23[26]];
    v111 = v23[27];
    v112 = &v8[v111];
    v113 = &v9[v111];
    v112[8] = v113[8];
    *(_QWORD *)v112 = *(_QWORD *)v113;
    v114 = v23[28];
    v115 = &v8[v114];
    v116 = &v9[v114];
    v117 = *((_OWORD *)v116 + 1);
    *(_OWORD *)v115 = *(_OWORD *)v116;
    *((_OWORD *)v115 + 1) = v117;
    *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
    *((_WORD *)v115 + 24) = *((_WORD *)v116 + 24);
    *(_QWORD *)&v8[v23[29]] = *(_QWORD *)&v9[v23[29]];
    v118 = v23[30];
    v119 = &v8[v118];
    v120 = &v9[v118];
    *(_QWORD *)v119 = *(_QWORD *)v120;
    v119[8] = v120[8];
    v121 = v23[31];
    v122 = &v8[v121];
    v123 = &v9[v121];
    v124 = *(_QWORD *)&v9[v121];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v124)
    {
      v125 = *((_QWORD *)v123 + 1);
      v126 = *((_QWORD *)v123 + 2);
      *(_QWORD *)v122 = v124;
      *((_QWORD *)v122 + 1) = v125;
      v127 = *((_QWORD *)v123 + 3);
      v128 = *((_QWORD *)v123 + 4);
      *((_QWORD *)v122 + 2) = v126;
      *((_QWORD *)v122 + 3) = v127;
      v129 = *((_QWORD *)v123 + 5);
      v130 = *((_QWORD *)v123 + 6);
      *((_QWORD *)v122 + 4) = v128;
      *((_QWORD *)v122 + 5) = v129;
      *((_QWORD *)v122 + 6) = v130;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v131 = *((_OWORD *)v123 + 1);
      *(_OWORD *)v122 = *(_OWORD *)v123;
      *((_OWORD *)v122 + 1) = v131;
      *((_OWORD *)v122 + 2) = *((_OWORD *)v123 + 2);
      *((_QWORD *)v122 + 6) = *((_QWORD *)v123 + 6);
    }
    v132 = v210;
    v133 = v210[32];
    v134 = &v8[v133];
    v135 = &v9[v133];
    v136 = *((_OWORD *)v135 + 3);
    *((_OWORD *)v134 + 2) = *((_OWORD *)v135 + 2);
    *((_OWORD *)v134 + 3) = v136;
    *(_QWORD *)(v134 + 62) = *(_QWORD *)(v135 + 62);
    v137 = *((_OWORD *)v135 + 1);
    *(_OWORD *)v134 = *(_OWORD *)v135;
    *((_OWORD *)v134 + 1) = v137;
    v138 = v210[33];
    v139 = &v8[v138];
    v140 = &v9[v138];
    *(_QWORD *)v139 = *(_QWORD *)v140;
    v139[8] = v140[8];
    v141 = v210[34];
    v142 = &v8[v141];
    v143 = &v9[v141];
    *(_DWORD *)v142 = *(_DWORD *)v143;
    *((_QWORD *)v142 + 1) = *((_QWORD *)v143 + 1);
    v144 = v210[35];
    v145 = &v8[v144];
    v146 = &v9[v144];
    *((_DWORD *)v145 + 16) = *(_DWORD *)&v9[v144 + 64];
    v147 = *(_OWORD *)&v9[v144 + 48];
    *((_OWORD *)v145 + 2) = *(_OWORD *)&v9[v144 + 32];
    *((_OWORD *)v145 + 3) = v147;
    v148 = *(_OWORD *)&v9[v144 + 16];
    *(_OWORD *)v145 = *(_OWORD *)&v9[v144];
    *((_OWORD *)v145 + 1) = v148;
    v149 = *(_OWORD *)&v9[v144 + 128];
    *((_OWORD *)v145 + 7) = *(_OWORD *)&v9[v144 + 112];
    *((_OWORD *)v145 + 8) = v149;
    v150 = *(_OWORD *)&v9[v144 + 96];
    *((_OWORD *)v145 + 5) = *(_OWORD *)&v9[v144 + 80];
    *((_OWORD *)v145 + 6) = v150;
    v151 = &v9[v144 + 144];
    v152 = *(_QWORD *)v151;
    swift_bridgeObjectRetain();
    if (v152)
    {
      v153 = *((_QWORD *)v146 + 19);
      *((_QWORD *)v145 + 18) = v152;
      *((_QWORD *)v145 + 19) = v153;
      v154 = *((_OWORD *)v146 + 11);
      *((_OWORD *)v145 + 10) = *((_OWORD *)v146 + 10);
      *((_OWORD *)v145 + 11) = v154;
      v155 = *((_OWORD *)v146 + 13);
      *((_OWORD *)v145 + 12) = *((_OWORD *)v146 + 12);
      *((_OWORD *)v145 + 13) = v155;
      v156 = *((_OWORD *)v146 + 15);
      *((_OWORD *)v145 + 14) = *((_OWORD *)v146 + 14);
      *((_OWORD *)v145 + 15) = v156;
      v145[256] = v146[256];
      v145[257] = v146[257];
      *((_DWORD *)v145 + 65) = *((_DWORD *)v146 + 65);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v157 = *((_OWORD *)v146 + 14);
      *((_OWORD *)v145 + 13) = *((_OWORD *)v146 + 13);
      *((_OWORD *)v145 + 14) = v157;
      *((_OWORD *)v145 + 15) = *((_OWORD *)v146 + 15);
      *((_QWORD *)v145 + 32) = *((_QWORD *)v146 + 32);
      v158 = *((_OWORD *)v146 + 10);
      *((_OWORD *)v145 + 9) = *(_OWORD *)v151;
      *((_OWORD *)v145 + 10) = v158;
      v159 = *((_OWORD *)v146 + 12);
      *((_OWORD *)v145 + 11) = *((_OWORD *)v146 + 11);
      *((_OWORD *)v145 + 12) = v159;
    }
    v160 = *((_QWORD *)v146 + 34);
    *((_QWORD *)v145 + 33) = *((_QWORD *)v146 + 33);
    *((_QWORD *)v145 + 34) = v160;
    v161 = v210[36];
    v162 = &v8[v161];
    v163 = &v9[v161];
    v164 = type metadata accessor for PartialHandMultiCam(0);
    v165 = *(_QWORD *)(v164 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48))(v163, 1, v164))
    {
      v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
      memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
    }
    else
    {
      v167 = *((_QWORD *)v163 + 1);
      *(_QWORD *)v162 = *(_QWORD *)v163;
      *((_QWORD *)v162 + 1) = v167;
      v168 = *(int *)(v164 + 24);
      __dstb = &v162[v168];
      v169 = &v163[v168];
      v170 = type metadata accessor for UnknownStorage();
      v171 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v171(__dstb, v169, v170);
      v132 = v210;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v162, 0, 1, v164);
    }
    v172 = v132[37];
    v173 = &v8[v172];
    v174 = &v9[v172];
    *(_QWORD *)v173 = *(_QWORD *)v174;
    v173[8] = v174[8];
    v175 = v132[38];
    v176 = &v8[v175];
    v177 = &v9[v175];
    *(_QWORD *)(v176 + 45) = *(_QWORD *)(v177 + 45);
    v178 = *((_OWORD *)v177 + 2);
    v179 = *(_OWORD *)v177;
    *((_OWORD *)v176 + 1) = *((_OWORD *)v177 + 1);
    *((_OWORD *)v176 + 2) = v178;
    *(_OWORD *)v176 = v179;
    v180 = a3[9];
    v181 = a3[10];
    v16 = v209;
    v182 = (_OWORD *)((char *)v209 + v180);
    v183 = (_OWORD *)((char *)a2 + v180);
    *v182 = *v183;
    *(_OWORD *)((char *)v182 + 9) = *(_OWORD *)((char *)v183 + 9);
    v184 = (char *)v209 + v181;
    v185 = (char *)a2 + v181;
    *(_OWORD *)v184 = *(_OWORD *)v185;
    *((_QWORD *)v184 + 2) = *((_QWORD *)v185 + 2);
    v186 = a3[12];
    *((_BYTE *)v209 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v187 = (char *)v209 + v186;
    v188 = (char *)a2 + v186;
    v189 = *((_OWORD *)v188 + 3);
    *((_OWORD *)v187 + 2) = *((_OWORD *)v188 + 2);
    *((_OWORD *)v187 + 3) = v189;
    v190 = *((_OWORD *)v188 + 1);
    *(_OWORD *)v187 = *(_OWORD *)v188;
    *((_OWORD *)v187 + 1) = v190;
    v191 = *((_OWORD *)v188 + 7);
    *((_OWORD *)v187 + 6) = *((_OWORD *)v188 + 6);
    *((_OWORD *)v187 + 7) = v191;
    v192 = *((_OWORD *)v188 + 5);
    *((_OWORD *)v187 + 4) = *((_OWORD *)v188 + 4);
    *((_OWORD *)v187 + 5) = v192;
    *((_QWORD *)v187 + 24) = *((_QWORD *)v188 + 24);
    v193 = *((_OWORD *)v188 + 11);
    *((_OWORD *)v187 + 10) = *((_OWORD *)v188 + 10);
    *((_OWORD *)v187 + 11) = v193;
    v194 = *((_OWORD *)v188 + 9);
    *((_OWORD *)v187 + 8) = *((_OWORD *)v188 + 8);
    *((_OWORD *)v187 + 9) = v194;
    v195 = a3[13];
    v196 = (char *)v209 + v195;
    v197 = (char *)a2 + v195;
    *(_QWORD *)v196 = *(_QWORD *)v197;
    v196[8] = v197[8];
  }
  return v16;
}

uint64_t destroy for RecoverRepetitivePinch.shouldRecoverImplementationInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;

  swift_bridgeObjectRelease();
  swift_release();
  v4 = a1 + *(int *)(a2 + 32);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v4 + 200))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for HandDescriptor();
  v6 = v4 + v5[17];
  v7 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v6, v8);
    v10 = v6 + *(int *)(v7 + 20);
    v11 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      v9(v10 + *(int *)(v11 + 20), v8);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v4 + v5[24];
  v13 = (int *)type metadata accessor for HandDescriptorInternal();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v12, 1, v13))
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v12 + 48))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v12 + v13[10];
    v15 = type metadata accessor for ActionInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      v16 = v14 + *(int *)(v15 + 20);
      v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    }
    v18 = v12 + v13[11];
    v19 = type metadata accessor for UnsureInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
    {
      v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
      swift_release();
    }
    v21 = v12 + v13[12];
    v22 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
    {
      v23 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
      swift_release();
    }
    v24 = v12 + v13[13];
    v25 = type metadata accessor for HomePinchInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
    {
      v26 = v24 + *(int *)(v25 + 20);
      v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + v5[31]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + v5[35] + 144))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v28 = v4 + v5[36];
  v29 = type metadata accessor for PartialHandMultiCam(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v28 + *(int *)(v29 + 24);
    v32 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  }
  return result;
}

__n128 initializeWithCopy for RecoverRepetitivePinch.shouldRecoverImplementationInput(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v103)(char *, _QWORD, uint64_t, int *);
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  int *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  _OWORD *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __n128 result;
  __int128 v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *__dst;
  int *__dsta;
  char *__dstb;
  int *v206;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  v4 = a3[8];
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_DWORD *)v5 = *(_DWORD *)((char *)a2 + v4);
  *((_WORD *)v5 + 2) = *(_WORD *)((char *)a2 + v4 + 4);
  *((_DWORD *)v5 + 2) = *(_DWORD *)((char *)a2 + v4 + 8);
  v7 = (_QWORD *)((char *)a2 + v4 + 16);
  v8 = *v7;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8)
  {
    v9 = *((_QWORD *)v6 + 3);
    *((_QWORD *)v5 + 2) = v8;
    *((_QWORD *)v5 + 3) = v9;
    v10 = *((_OWORD *)v6 + 3);
    *((_OWORD *)v5 + 2) = *((_OWORD *)v6 + 2);
    *((_OWORD *)v5 + 3) = v10;
    v11 = *((_OWORD *)v6 + 5);
    *((_OWORD *)v5 + 4) = *((_OWORD *)v6 + 4);
    *((_OWORD *)v5 + 5) = v11;
    v12 = *((_OWORD *)v6 + 7);
    *((_OWORD *)v5 + 6) = *((_OWORD *)v6 + 6);
    *((_OWORD *)v5 + 7) = v12;
    v5[128] = v6[128];
    v5[129] = v6[129];
    *((_DWORD *)v5 + 33) = *((_DWORD *)v6 + 33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *((_OWORD *)v6 + 6);
    *((_OWORD *)v5 + 5) = *((_OWORD *)v6 + 5);
    *((_OWORD *)v5 + 6) = v13;
    *((_OWORD *)v5 + 7) = *((_OWORD *)v6 + 7);
    *((_QWORD *)v5 + 16) = *((_QWORD *)v6 + 16);
    v14 = *((_OWORD *)v6 + 2);
    *((_OWORD *)v5 + 1) = *(_OWORD *)v7;
    *((_OWORD *)v5 + 2) = v14;
    v15 = *((_OWORD *)v6 + 4);
    *((_OWORD *)v5 + 3) = *((_OWORD *)v6 + 3);
    *((_OWORD *)v5 + 4) = v15;
  }
  v16 = *((_QWORD *)v6 + 25);
  v5[136] = v6[136];
  *(_WORD *)(v5 + 137) = *(_WORD *)(v6 + 137);
  *((_QWORD *)v5 + 18) = *((_QWORD *)v6 + 18);
  v17 = *((_OWORD *)v6 + 11);
  *((_OWORD *)v5 + 10) = *((_OWORD *)v6 + 10);
  *((_OWORD *)v5 + 11) = v17;
  v5[192] = v6[192];
  if (v16)
  {
    v18 = *((_QWORD *)v6 + 26);
    *((_QWORD *)v5 + 25) = v16;
    *((_QWORD *)v5 + 26) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(v5 + 200) = *(_OWORD *)(v6 + 200);
  }
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(v6 + 216);
  *((_DWORD *)v5 + 58) = *((_DWORD *)v6 + 58);
  v5[236] = v6[236];
  *((_QWORD *)v5 + 30) = *((_QWORD *)v6 + 30);
  *((_DWORD *)v5 + 62) = *((_DWORD *)v6 + 62);
  *((_QWORD *)v5 + 32) = *((_QWORD *)v6 + 32);
  *((_DWORD *)v5 + 66) = *((_DWORD *)v6 + 66);
  v5[268] = v6[268];
  *((_DWORD *)v5 + 68) = *((_DWORD *)v6 + 68);
  *((_DWORD *)v5 + 69) = *((_DWORD *)v6 + 69);
  *((_WORD *)v5 + 140) = *((_WORD *)v6 + 140);
  v19 = (int *)type metadata accessor for HandDescriptor();
  v20 = v19[17];
  v21 = &v5[v20];
  v22 = &v6[v20];
  v23 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  if (v25(v22, 1, v23))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = type metadata accessor for UnknownStorage();
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
    v28(v21, v22, v27);
    v29 = *(int *)(v23 + 20);
    __dst = &v21[v29];
    v30 = &v22[v29];
    v31 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v198 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v30, 1, v31))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v30;
      v33 = *(int *)(v31 + 20);
      v195 = &v30[v33];
      v196 = &__dst[v33];
      swift_bridgeObjectRetain();
      v28(v196, v195, v27);
      v34 = *(int *)(v31 + 24);
      v35 = &__dst[v34];
      v36 = &v30[v34];
      *(_DWORD *)v35 = *(_DWORD *)v36;
      v35[4] = v36[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v198 + 56))(__dst, 0, 1, v31);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_QWORD *)&v5[v19[18]] = *(_QWORD *)&v6[v19[18]];
  v37 = v19[19];
  v38 = &v5[v37];
  v39 = &v6[v37];
  *(_OWORD *)v38 = *(_OWORD *)v39;
  v38[16] = v39[16];
  v40 = v19[20];
  v41 = &v5[v40];
  v42 = &v6[v40];
  *(_OWORD *)v41 = *(_OWORD *)v42;
  v41[16] = v42[16];
  v43 = v19[21];
  v44 = &v5[v43];
  v45 = &v6[v43];
  *(_OWORD *)v44 = *(_OWORD *)v45;
  v44[16] = v45[16];
  v46 = v19[22];
  v47 = &v5[v46];
  v48 = &v6[v46];
  v47[64] = v48[64];
  v49 = *((_OWORD *)v48 + 3);
  *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
  *((_OWORD *)v47 + 3) = v49;
  v50 = *((_OWORD *)v48 + 1);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *((_OWORD *)v47 + 1) = v50;
  *(_QWORD *)&v5[v19[23]] = *(_QWORD *)&v6[v19[23]];
  v51 = v19[24];
  v52 = &v5[v51];
  v53 = &v6[v51];
  v54 = type metadata accessor for HandDescriptorInternal();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v206 = v19;
  if (v56(v53, 1, v54))
  {
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v199 = v55;
    *(_QWORD *)v52 = *(_QWORD *)v53;
    v52[8] = v53[8];
    v58 = *((_QWORD *)v53 + 6);
    swift_bridgeObjectRetain();
    __dsta = (int *)v54;
    if (v58)
    {
      *((_QWORD *)v52 + 2) = *((_QWORD *)v53 + 2);
      *((_WORD *)v52 + 12) = *((_WORD *)v53 + 12);
      *((_QWORD *)v52 + 4) = *((_QWORD *)v53 + 4);
      v52[40] = v53[40];
      v59 = *((_QWORD *)v53 + 7);
      v60 = *((_QWORD *)v53 + 8);
      *((_QWORD *)v52 + 6) = v58;
      *((_QWORD *)v52 + 7) = v59;
      v62 = *((_QWORD *)v53 + 9);
      v61 = *((_QWORD *)v53 + 10);
      *((_QWORD *)v52 + 8) = v60;
      *((_QWORD *)v52 + 9) = v62;
      *((_QWORD *)v52 + 10) = v61;
      *((_DWORD *)v52 + 22) = *((_DWORD *)v53 + 22);
      v63 = *((_QWORD *)v53 + 13);
      *((_QWORD *)v52 + 12) = *((_QWORD *)v53 + 12);
      *((_QWORD *)v52 + 13) = v63;
      v52[120] = v53[120];
      *((_QWORD *)v52 + 14) = *((_QWORD *)v53 + 14);
      *(_QWORD *)(v52 + 124) = *(_QWORD *)(v53 + 124);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54 = (uint64_t)__dsta;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v64 = *((_OWORD *)v53 + 6);
      *((_OWORD *)v52 + 5) = *((_OWORD *)v53 + 5);
      *((_OWORD *)v52 + 6) = v64;
      *((_OWORD *)v52 + 7) = *((_OWORD *)v53 + 7);
      *((_DWORD *)v52 + 32) = *((_DWORD *)v53 + 32);
      v65 = *((_OWORD *)v53 + 2);
      *((_OWORD *)v52 + 1) = *((_OWORD *)v53 + 1);
      *((_OWORD *)v52 + 2) = v65;
      v66 = *((_OWORD *)v53 + 4);
      *((_OWORD *)v52 + 3) = *((_OWORD *)v53 + 3);
      *((_OWORD *)v52 + 4) = v66;
    }
    *((_QWORD *)v52 + 17) = *((_QWORD *)v53 + 17);
    *((_QWORD *)v52 + 18) = *((_QWORD *)v53 + 18);
    *((_QWORD *)v52 + 19) = *((_QWORD *)v53 + 19);
    memcpy(v52 + 160, v53 + 160, 0x373uLL);
    v67 = *(int *)(v54 + 40);
    v197 = &v52[v67];
    v68 = &v53[v67];
    v69 = type metadata accessor for ActionInternalPB(0);
    v70 = *(_QWORD *)(v69 - 8);
    v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v71(v68, 1, v69))
    {
      v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(v197, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      *v197 = *v68;
      v73 = *(int *)(v69 + 20);
      v74 = &v197[v73];
      v75 = &v68[v73];
      v76 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v197, 0, 1, v69);
    }
    v77 = __dsta[11];
    v78 = &v52[v77];
    v79 = &v53[v77];
    v80 = type metadata accessor for UnsureInternalPB(0);
    v81 = *(_QWORD *)(v80 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
    {
      v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      v83 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v78, v79, v83);
      *(_QWORD *)&v78[*(int *)(v80 + 20)] = *(_QWORD *)&v79[*(int *)(v80 + 20)];
      v84 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56);
      swift_retain();
      v84(v78, 0, 1, v80);
    }
    v85 = __dsta[12];
    v86 = &v52[v85];
    v87 = &v53[v85];
    v88 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v89 = *(_QWORD *)(v88 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
    {
      v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      v91 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v86, v87, v91);
      *(_QWORD *)&v86[*(int *)(v88 + 20)] = *(_QWORD *)&v87[*(int *)(v88 + 20)];
      v92 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56);
      swift_retain();
      v92(v86, 0, 1, v88);
    }
    v93 = __dsta[13];
    v94 = &v52[v93];
    v95 = &v53[v93];
    v96 = type metadata accessor for HomePinchInternalPB(0);
    v97 = *(_QWORD *)(v96 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
    {
      v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v94 = *(_QWORD *)v95;
      v99 = *(int *)(v96 + 20);
      v100 = &v94[v99];
      v101 = &v95[v99];
      v102 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v100, v101, v102);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
    }
    v19 = v206;
    *(_QWORD *)&v52[__dsta[14]] = *(_QWORD *)&v53[__dsta[14]];
    v103 = *(void (**)(char *, _QWORD, uint64_t, int *))(v199 + 56);
    swift_bridgeObjectRetain();
    v103(v52, 0, 1, __dsta);
  }
  v104 = v19[25];
  v105 = &v5[v104];
  v106 = &v6[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  v105[8] = v106[8];
  *(_QWORD *)&v5[v19[26]] = *(_QWORD *)&v6[v19[26]];
  v107 = v19[27];
  v108 = &v5[v107];
  v109 = &v6[v107];
  v108[8] = v109[8];
  *(_QWORD *)v108 = *(_QWORD *)v109;
  v110 = v19[28];
  v111 = &v5[v110];
  v112 = &v6[v110];
  v113 = *((_OWORD *)v112 + 1);
  *(_OWORD *)v111 = *(_OWORD *)v112;
  *((_OWORD *)v111 + 1) = v113;
  *((_OWORD *)v111 + 2) = *((_OWORD *)v112 + 2);
  *((_WORD *)v111 + 24) = *((_WORD *)v112 + 24);
  *(_QWORD *)&v5[v19[29]] = *(_QWORD *)&v6[v19[29]];
  v114 = v19[30];
  v115 = &v5[v114];
  v116 = &v6[v114];
  *(_QWORD *)v115 = *(_QWORD *)v116;
  v115[8] = v116[8];
  v117 = v19[31];
  v118 = &v5[v117];
  v119 = &v6[v117];
  v120 = *(_QWORD *)&v6[v117];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v120)
  {
    v121 = *((_QWORD *)v119 + 1);
    v122 = *((_QWORD *)v119 + 2);
    *(_QWORD *)v118 = v120;
    *((_QWORD *)v118 + 1) = v121;
    v123 = *((_QWORD *)v119 + 3);
    v124 = *((_QWORD *)v119 + 4);
    *((_QWORD *)v118 + 2) = v122;
    *((_QWORD *)v118 + 3) = v123;
    v125 = *((_QWORD *)v119 + 5);
    v126 = *((_QWORD *)v119 + 6);
    *((_QWORD *)v118 + 4) = v124;
    *((_QWORD *)v118 + 5) = v125;
    *((_QWORD *)v118 + 6) = v126;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v127 = *((_OWORD *)v119 + 1);
    *(_OWORD *)v118 = *(_OWORD *)v119;
    *((_OWORD *)v118 + 1) = v127;
    *((_OWORD *)v118 + 2) = *((_OWORD *)v119 + 2);
    *((_QWORD *)v118 + 6) = *((_QWORD *)v119 + 6);
  }
  v128 = v206;
  v129 = v206[32];
  v130 = &v5[v129];
  v131 = &v6[v129];
  v132 = *((_OWORD *)v131 + 3);
  *((_OWORD *)v130 + 2) = *((_OWORD *)v131 + 2);
  *((_OWORD *)v130 + 3) = v132;
  *(_QWORD *)(v130 + 62) = *(_QWORD *)(v131 + 62);
  v133 = *((_OWORD *)v131 + 1);
  *(_OWORD *)v130 = *(_OWORD *)v131;
  *((_OWORD *)v130 + 1) = v133;
  v134 = v206[33];
  v135 = &v5[v134];
  v136 = &v6[v134];
  *(_QWORD *)v135 = *(_QWORD *)v136;
  v135[8] = v136[8];
  v137 = v206[34];
  v138 = &v5[v137];
  v139 = &v6[v137];
  *(_DWORD *)v138 = *(_DWORD *)v139;
  *((_QWORD *)v138 + 1) = *((_QWORD *)v139 + 1);
  v140 = v206[35];
  v141 = &v5[v140];
  v142 = &v6[v140];
  *((_DWORD *)v141 + 16) = *(_DWORD *)&v6[v140 + 64];
  v143 = *(_OWORD *)&v6[v140 + 48];
  *((_OWORD *)v141 + 2) = *(_OWORD *)&v6[v140 + 32];
  *((_OWORD *)v141 + 3) = v143;
  v144 = *(_OWORD *)&v6[v140 + 16];
  *(_OWORD *)v141 = *(_OWORD *)&v6[v140];
  *((_OWORD *)v141 + 1) = v144;
  v145 = *(_OWORD *)&v6[v140 + 128];
  *((_OWORD *)v141 + 7) = *(_OWORD *)&v6[v140 + 112];
  *((_OWORD *)v141 + 8) = v145;
  v146 = *(_OWORD *)&v6[v140 + 96];
  *((_OWORD *)v141 + 5) = *(_OWORD *)&v6[v140 + 80];
  *((_OWORD *)v141 + 6) = v146;
  v147 = &v6[v140 + 144];
  v148 = *(_QWORD *)v147;
  swift_bridgeObjectRetain();
  if (v148)
  {
    v149 = *((_QWORD *)v142 + 19);
    *((_QWORD *)v141 + 18) = v148;
    *((_QWORD *)v141 + 19) = v149;
    v150 = *((_OWORD *)v142 + 11);
    *((_OWORD *)v141 + 10) = *((_OWORD *)v142 + 10);
    *((_OWORD *)v141 + 11) = v150;
    v151 = *((_OWORD *)v142 + 13);
    *((_OWORD *)v141 + 12) = *((_OWORD *)v142 + 12);
    *((_OWORD *)v141 + 13) = v151;
    v152 = *((_OWORD *)v142 + 15);
    *((_OWORD *)v141 + 14) = *((_OWORD *)v142 + 14);
    *((_OWORD *)v141 + 15) = v152;
    v141[256] = v142[256];
    v141[257] = v142[257];
    *((_DWORD *)v141 + 65) = *((_DWORD *)v142 + 65);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v153 = *((_OWORD *)v142 + 14);
    *((_OWORD *)v141 + 13) = *((_OWORD *)v142 + 13);
    *((_OWORD *)v141 + 14) = v153;
    *((_OWORD *)v141 + 15) = *((_OWORD *)v142 + 15);
    *((_QWORD *)v141 + 32) = *((_QWORD *)v142 + 32);
    v154 = *((_OWORD *)v142 + 10);
    *((_OWORD *)v141 + 9) = *(_OWORD *)v147;
    *((_OWORD *)v141 + 10) = v154;
    v155 = *((_OWORD *)v142 + 12);
    *((_OWORD *)v141 + 11) = *((_OWORD *)v142 + 11);
    *((_OWORD *)v141 + 12) = v155;
  }
  v156 = *((_QWORD *)v142 + 34);
  *((_QWORD *)v141 + 33) = *((_QWORD *)v142 + 33);
  *((_QWORD *)v141 + 34) = v156;
  v157 = v206[36];
  v158 = &v5[v157];
  v159 = &v6[v157];
  v160 = type metadata accessor for PartialHandMultiCam(0);
  v161 = *(_QWORD *)(v160 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160))
  {
    v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
  }
  else
  {
    v163 = *((_QWORD *)v159 + 1);
    *(_QWORD *)v158 = *(_QWORD *)v159;
    *((_QWORD *)v158 + 1) = v163;
    v164 = *(int *)(v160 + 24);
    __dstb = &v158[v164];
    v165 = &v159[v164];
    v166 = type metadata accessor for UnknownStorage();
    v167 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v167(__dstb, v165, v166);
    v128 = v206;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
  }
  v168 = v128[37];
  v169 = &v5[v168];
  v170 = &v6[v168];
  *(_QWORD *)v169 = *(_QWORD *)v170;
  v169[8] = v170[8];
  v171 = v128[38];
  v172 = &v5[v171];
  v173 = &v6[v171];
  *(_QWORD *)(v172 + 45) = *(_QWORD *)(v173 + 45);
  v174 = *((_OWORD *)v173 + 2);
  v175 = *(_OWORD *)v173;
  *((_OWORD *)v172 + 1) = *((_OWORD *)v173 + 1);
  *((_OWORD *)v172 + 2) = v174;
  *(_OWORD *)v172 = v175;
  v176 = a3[9];
  v177 = a3[10];
  v178 = (_OWORD *)((char *)a1 + v176);
  v179 = (_OWORD *)((char *)a2 + v176);
  *v178 = *v179;
  *(_OWORD *)((char *)v178 + 9) = *(_OWORD *)((char *)v179 + 9);
  v180 = (char *)a1 + v177;
  v181 = (char *)a2 + v177;
  *(_OWORD *)v180 = *(_OWORD *)v181;
  *((_QWORD *)v180 + 2) = *((_QWORD *)v181 + 2);
  v182 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v183 = (char *)a1 + v182;
  v184 = (char *)a2 + v182;
  v185 = *((_OWORD *)v184 + 3);
  *((_OWORD *)v183 + 2) = *((_OWORD *)v184 + 2);
  *((_OWORD *)v183 + 3) = v185;
  v186 = *((_OWORD *)v184 + 1);
  *(_OWORD *)v183 = *(_OWORD *)v184;
  *((_OWORD *)v183 + 1) = v186;
  v187 = *((_OWORD *)v184 + 7);
  *((_OWORD *)v183 + 6) = *((_OWORD *)v184 + 6);
  *((_OWORD *)v183 + 7) = v187;
  v188 = *((_OWORD *)v184 + 5);
  *((_OWORD *)v183 + 4) = *((_OWORD *)v184 + 4);
  *((_OWORD *)v183 + 5) = v188;
  *((_QWORD *)v183 + 24) = *((_QWORD *)v184 + 24);
  v189 = *((_OWORD *)v184 + 11);
  *((_OWORD *)v183 + 10) = *((_OWORD *)v184 + 10);
  *((_OWORD *)v183 + 11) = v189;
  result = *((__n128 *)v184 + 8);
  v191 = *((_OWORD *)v184 + 9);
  *((__n128 *)v183 + 8) = result;
  *((_OWORD *)v183 + 9) = v191;
  v192 = a3[13];
  v193 = (char *)a1 + v192;
  v194 = (char *)a2 + v192;
  *(_QWORD *)v193 = *(_QWORD *)v194;
  v193[8] = v194[8];
  return result;
}

float assignWithCopy for RecoverRepetitivePinch.shouldRecoverImplementationInput(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  char v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  __int128 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(char *, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v148;
  _QWORD *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  void (*v158)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  int *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(char *, uint64_t, uint64_t);
  int v184;
  int v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t (*v196)(char *, uint64_t, uint64_t);
  int v197;
  int v198;
  uint64_t v199;
  void (*v200)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (*v207)(char *, uint64_t, uint64_t);
  int v208;
  int v209;
  uint64_t v210;
  void (*v211)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(char *, uint64_t, uint64_t);
  int v219;
  int v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t (*v292)(char *, uint64_t, uint64_t);
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  int *v297;
  void (*v298)(char *, char *, uint64_t);
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  int v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _OWORD *v311;
  __int128 *v312;
  __int128 v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  char *v318;
  char *v319;
  float result;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  char *v341;
  int *v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  char *v347;
  int *v348;
  int *v349;
  int *v350;
  int *v351;
  char *v352;
  int *v353;
  _QWORD *v354;
  _QWORD *v355;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = a3[8];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_DWORD *)v7 = *(_DWORD *)((char *)a2 + v6);
  v7[4] = *((_BYTE *)a2 + v6 + 4);
  v7[5] = *((_BYTE *)a2 + v6 + 5);
  *((_DWORD *)v7 + 2) = *(_DWORD *)((char *)a2 + v6 + 8);
  v9 = (_OWORD *)((char *)a1 + v6 + 16);
  v11 = (_QWORD *)((char *)a2 + v6 + 16);
  v10 = *v11;
  if (*(_QWORD *)v9)
  {
    if (v10)
    {
      *((_QWORD *)v7 + 2) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      *((_OWORD *)v7 + 3) = *((_OWORD *)v8 + 3);
      *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
      *((_OWORD *)v7 + 5) = *((_OWORD *)v8 + 5);
      *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
      *((_OWORD *)v7 + 7) = *((_OWORD *)v8 + 7);
      v7[128] = v8[128];
      v7[129] = v8[129];
      *((_DWORD *)v7 + 33) = *((_DWORD *)v8 + 33);
    }
    else
    {
      outlined destroy of HandPose((uint64_t)(v7 + 16));
      v16 = *((_OWORD *)v8 + 4);
      v18 = *(_OWORD *)v11;
      v17 = *((_OWORD *)v8 + 2);
      *((_OWORD *)v7 + 3) = *((_OWORD *)v8 + 3);
      *((_OWORD *)v7 + 4) = v16;
      *v9 = v18;
      *((_OWORD *)v7 + 2) = v17;
      v20 = *((_OWORD *)v8 + 6);
      v19 = *((_OWORD *)v8 + 7);
      v21 = *((_OWORD *)v8 + 5);
      *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
      *((_OWORD *)v7 + 6) = v20;
      *((_OWORD *)v7 + 7) = v19;
      *((_OWORD *)v7 + 5) = v21;
    }
  }
  else if (v10)
  {
    *((_QWORD *)v7 + 2) = v10;
    *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
    v12 = *((_OWORD *)v8 + 3);
    *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
    *((_OWORD *)v7 + 3) = v12;
    v13 = *((_OWORD *)v8 + 4);
    v14 = *((_OWORD *)v8 + 5);
    v15 = *((_OWORD *)v8 + 7);
    *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
    *((_OWORD *)v7 + 7) = v15;
    *((_OWORD *)v7 + 4) = v13;
    *((_OWORD *)v7 + 5) = v14;
    v7[128] = v8[128];
    v7[129] = v8[129];
    *((_DWORD *)v7 + 33) = *((_DWORD *)v8 + 33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = *(_OWORD *)v11;
    v23 = *((_OWORD *)v8 + 2);
    v24 = *((_OWORD *)v8 + 4);
    *((_OWORD *)v7 + 3) = *((_OWORD *)v8 + 3);
    *((_OWORD *)v7 + 4) = v24;
    *v9 = v22;
    *((_OWORD *)v7 + 2) = v23;
    v25 = *((_OWORD *)v8 + 5);
    v26 = *((_OWORD *)v8 + 6);
    v27 = *((_OWORD *)v8 + 7);
    *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
    *((_OWORD *)v7 + 6) = v26;
    *((_OWORD *)v7 + 7) = v27;
    *((_OWORD *)v7 + 5) = v25;
  }
  v28 = *((_QWORD *)v7 + 25);
  v7[136] = v8[136];
  v7[137] = v8[137];
  v7[138] = v8[138];
  *((_QWORD *)v7 + 18) = *((_QWORD *)v8 + 18);
  v29 = *((_OWORD *)v8 + 10);
  v30 = *((_OWORD *)v8 + 11);
  v7[192] = v8[192];
  *((_OWORD *)v7 + 11) = v30;
  *((_OWORD *)v7 + 10) = v29;
  v31 = *((_QWORD *)v8 + 25);
  v354 = a2;
  v355 = a1;
  v353 = a3;
  if (v28)
  {
    if (v31)
    {
      *((_QWORD *)v7 + 25) = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v7 + 26) = *((_QWORD *)v8 + 26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined destroy of PoseSpec((uint64_t)(v7 + 200));
  }
  else if (v31)
  {
    *((_QWORD *)v7 + 25) = v31;
    *((_QWORD *)v7 + 26) = *((_QWORD *)v8 + 26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  *(_OWORD *)(v7 + 200) = *(_OWORD *)(v8 + 200);
LABEL_15:
  *((_DWORD *)v7 + 54) = *((_DWORD *)v8 + 54);
  *((_DWORD *)v7 + 55) = *((_DWORD *)v8 + 55);
  *((_DWORD *)v7 + 56) = *((_DWORD *)v8 + 56);
  *((_DWORD *)v7 + 57) = *((_DWORD *)v8 + 57);
  v32 = *((_DWORD *)v8 + 58);
  v7[236] = v8[236];
  *((_DWORD *)v7 + 58) = v32;
  v33 = *((_QWORD *)v8 + 30);
  *((_WORD *)v7 + 124) = *((_WORD *)v8 + 124);
  *((_QWORD *)v7 + 30) = v33;
  v7[250] = v8[250];
  v7[251] = v8[251];
  *((_QWORD *)v7 + 32) = *((_QWORD *)v8 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = *((_DWORD *)v8 + 66);
  v7[268] = v8[268];
  *((_DWORD *)v7 + 66) = v34;
  *((_DWORD *)v7 + 68) = *((_DWORD *)v8 + 68);
  v35 = *((_DWORD *)v8 + 69);
  v7[280] = v8[280];
  *((_DWORD *)v7 + 69) = v35;
  v7[281] = v8[281];
  v36 = (int *)type metadata accessor for HandDescriptor();
  v37 = v36[17];
  v38 = &v7[v37];
  v39 = &v8[v37];
  v40 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      v344 = v8;
      v348 = v36;
      v45 = type metadata accessor for UnknownStorage();
      v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
      v46(v38, v39, v45);
      v47 = *(int *)(v40 + 20);
      v48 = &v38[v47];
      v49 = &v39[v47];
      v50 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v66 = *(int *)(v50 + 20);
        v339 = &v49[v66];
        v341 = &v48[v66];
        swift_bridgeObjectRetain();
        v46(v341, v339, v45);
        v67 = *(int *)(v50 + 24);
        v68 = &v48[v67];
        v69 = &v49[v67];
        v70 = v69[4];
        *(_DWORD *)v68 = *(_DWORD *)v69;
        v68[4] = v70;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      v8 = v344;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      v36 = v348;
      goto LABEL_32;
    }
LABEL_21:
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_32;
  }
  if (v44)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v38, type metadata accessor for ThumbIndexTapFeaturesPB);
    goto LABEL_21;
  }
  v345 = v8;
  v349 = v36;
  v54 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(void (**)(char *, char *, uint64_t))(v55 + 24);
  v56(v38, v39, v54);
  v57 = *(int *)(v40 + 20);
  v58 = &v38[v57];
  v59 = &v39[v57];
  v60 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v61 = *(_QWORD *)(v60 - 8);
  v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  v63 = v62(v58, 1, v60);
  v64 = v62(v59, 1, v60);
  if (v63)
  {
    if (v64)
    {
      v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v72 = *(int *)(v60 + 20);
      v73 = &v58[v72];
      v74 = &v59[v72];
      v75 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
      swift_bridgeObjectRetain();
      v75(v73, v74, v54);
      v76 = *(int *)(v60 + 24);
      v77 = &v58[v76];
      v78 = &v59[v76];
      v79 = v78[4];
      *(_DWORD *)v77 = *(_DWORD *)v78;
      v77[4] = v79;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
    }
    v8 = v345;
    v36 = v349;
  }
  else
  {
    v8 = v345;
    if (v64)
    {
      outlined destroy of Matrix3x3PB((uint64_t)v58, type metadata accessor for RawThumbIndexTapFeaturesPB);
      v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v58 = *(_QWORD *)v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v56(&v58[*(int *)(v60 + 20)], &v59[*(int *)(v60 + 20)], v54);
      v167 = *(int *)(v60 + 24);
      v168 = &v58[v167];
      v169 = &v59[v167];
      v170 = v169[4];
      *(_DWORD *)v168 = *(_DWORD *)v169;
      v168[4] = v170;
    }
    v36 = v349;
  }
LABEL_32:
  *(_QWORD *)&v7[v36[18]] = *(_QWORD *)&v8[v36[18]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v80 = v36[19];
  v81 = &v7[v80];
  v82 = &v8[v80];
  v83 = *(_OWORD *)v82;
  v81[16] = v82[16];
  *(_OWORD *)v81 = v83;
  v84 = v36[20];
  v85 = &v7[v84];
  v86 = &v8[v84];
  v87 = v86[16];
  *(_OWORD *)v85 = *(_OWORD *)v86;
  v85[16] = v87;
  v88 = v36[21];
  v89 = &v7[v88];
  v90 = &v8[v88];
  v91 = v90[16];
  *(_OWORD *)v89 = *(_OWORD *)v90;
  v89[16] = v91;
  v92 = v36[22];
  v93 = &v7[v92];
  v94 = &v8[v92];
  *(_OWORD *)v93 = *(_OWORD *)v94;
  v95 = *((_OWORD *)v94 + 1);
  v96 = *((_OWORD *)v94 + 2);
  v97 = *((_OWORD *)v94 + 3);
  v93[64] = v94[64];
  *((_OWORD *)v93 + 2) = v96;
  *((_OWORD *)v93 + 3) = v97;
  *((_OWORD *)v93 + 1) = v95;
  *(_QWORD *)&v7[v36[23]] = *(_QWORD *)&v8[v36[23]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v98 = v36[24];
  v99 = (uint64_t)&v7[v98];
  v100 = &v8[v98];
  v101 = type metadata accessor for HandDescriptorInternal();
  v102 = *(_QWORD *)(v101 - 8);
  v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
  v104 = v103(v99, 1, v101);
  v105 = v103((uint64_t)v100, 1, v101);
  if (!v104)
  {
    if (v105)
    {
      outlined destroy of Matrix3x3PB(v99, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      goto LABEL_38;
    }
    v351 = v36;
    *(_QWORD *)v99 = *(_QWORD *)v100;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v99 + 8) = v100[8];
    v110 = (_OWORD *)(v99 + 16);
    v111 = (__int128 *)(v100 + 16);
    v112 = *((_QWORD *)v100 + 6);
    v347 = v8;
    if (*(_QWORD *)(v99 + 48))
    {
      if (v112)
      {
        *(_DWORD *)(v99 + 16) = *((_DWORD *)v100 + 4);
        *(_DWORD *)(v99 + 20) = *((_DWORD *)v100 + 5);
        *(_BYTE *)(v99 + 24) = v100[24];
        *(_BYTE *)(v99 + 25) = v100[25];
        v113 = *((_QWORD *)v100 + 4);
        *(_BYTE *)(v99 + 40) = v100[40];
        *(_QWORD *)(v99 + 32) = v113;
        *(_QWORD *)(v99 + 48) = *((_QWORD *)v100 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v99 + 56) = *((_QWORD *)v100 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v99 + 64) = *((_QWORD *)v100 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v99 + 72) = *((_QWORD *)v100 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v99 + 80) = *((_QWORD *)v100 + 10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_DWORD *)(v99 + 88) = *((_DWORD *)v100 + 22);
        *(_QWORD *)(v99 + 96) = *((_QWORD *)v100 + 12);
        *(_QWORD *)(v99 + 104) = *((_QWORD *)v100 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v114 = *((_QWORD *)v100 + 14);
        *(_BYTE *)(v99 + 120) = v100[120];
        *(_QWORD *)(v99 + 112) = v114;
        *(_DWORD *)(v99 + 124) = *((_DWORD *)v100 + 31);
        *(_DWORD *)(v99 + 128) = *((_DWORD *)v100 + 32);
      }
      else
      {
        outlined destroy of PinchInternalData(v99 + 16);
        v161 = *((_OWORD *)v100 + 4);
        v163 = *v111;
        v162 = *((_OWORD *)v100 + 2);
        *(_OWORD *)(v99 + 48) = *((_OWORD *)v100 + 3);
        *(_OWORD *)(v99 + 64) = v161;
        *v110 = v163;
        *(_OWORD *)(v99 + 32) = v162;
        v165 = *((_OWORD *)v100 + 6);
        v164 = *((_OWORD *)v100 + 7);
        v166 = *((_OWORD *)v100 + 5);
        *(_DWORD *)(v99 + 128) = *((_DWORD *)v100 + 32);
        *(_OWORD *)(v99 + 96) = v165;
        *(_OWORD *)(v99 + 112) = v164;
        *(_OWORD *)(v99 + 80) = v166;
      }
    }
    else if (v112)
    {
      *(_DWORD *)(v99 + 16) = *((_DWORD *)v100 + 4);
      *(_DWORD *)(v99 + 20) = *((_DWORD *)v100 + 5);
      *(_BYTE *)(v99 + 24) = v100[24];
      *(_BYTE *)(v99 + 25) = v100[25];
      v159 = *((_QWORD *)v100 + 4);
      *(_BYTE *)(v99 + 40) = v100[40];
      *(_QWORD *)(v99 + 32) = v159;
      *(_QWORD *)(v99 + 48) = *((_QWORD *)v100 + 6);
      *(_QWORD *)(v99 + 56) = *((_QWORD *)v100 + 7);
      *(_QWORD *)(v99 + 64) = *((_QWORD *)v100 + 8);
      *(_QWORD *)(v99 + 72) = *((_QWORD *)v100 + 9);
      *(_QWORD *)(v99 + 80) = *((_QWORD *)v100 + 10);
      *(_DWORD *)(v99 + 88) = *((_DWORD *)v100 + 22);
      *(_QWORD *)(v99 + 96) = *((_QWORD *)v100 + 12);
      *(_QWORD *)(v99 + 104) = *((_QWORD *)v100 + 13);
      v160 = *((_QWORD *)v100 + 14);
      *(_BYTE *)(v99 + 120) = v100[120];
      *(_QWORD *)(v99 + 112) = v160;
      *(_DWORD *)(v99 + 124) = *((_DWORD *)v100 + 31);
      *(_DWORD *)(v99 + 128) = *((_DWORD *)v100 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v171 = *v111;
      v172 = *((_OWORD *)v100 + 2);
      v173 = *((_OWORD *)v100 + 4);
      *(_OWORD *)(v99 + 48) = *((_OWORD *)v100 + 3);
      *(_OWORD *)(v99 + 64) = v173;
      *v110 = v171;
      *(_OWORD *)(v99 + 32) = v172;
      v174 = *((_OWORD *)v100 + 5);
      v175 = *((_OWORD *)v100 + 6);
      v176 = *((_OWORD *)v100 + 7);
      *(_DWORD *)(v99 + 128) = *((_DWORD *)v100 + 32);
      *(_OWORD *)(v99 + 96) = v175;
      *(_OWORD *)(v99 + 112) = v176;
      *(_OWORD *)(v99 + 80) = v174;
    }
    *(_QWORD *)(v99 + 136) = *((_QWORD *)v100 + 17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v99 + 144) = *((_DWORD *)v100 + 36);
    *(_DWORD *)(v99 + 148) = *((_DWORD *)v100 + 37);
    *(_QWORD *)(v99 + 152) = *((_QWORD *)v100 + 19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    memcpy((void *)(v99 + 160), v100 + 160, 0x373uLL);
    v177 = (int *)v101;
    v178 = *(int *)(v101 + 40);
    v179 = (char *)(v99 + v178);
    v180 = &v100[v178];
    v181 = type metadata accessor for ActionInternalPB(0);
    v182 = *(_QWORD *)(v181 - 8);
    v183 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v182 + 48);
    v184 = v183(v179, 1, v181);
    v185 = v183(v180, 1, v181);
    if (v184)
    {
      if (!v185)
      {
        *v179 = *v180;
        v186 = *(int *)(v181 + 20);
        v187 = &v179[v186];
        v188 = &v180[v186];
        v189 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 16))(v187, v188, v189);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v179, 0, 1, v181);
        goto LABEL_67;
      }
    }
    else
    {
      if (!v185)
      {
        *v179 = *v180;
        v329 = *(int *)(v181 + 20);
        v330 = &v179[v329];
        v331 = &v180[v329];
        v332 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v332 - 8) + 24))(v330, v331, v332);
LABEL_67:
        v191 = v177[11];
        v192 = (char *)(v99 + v191);
        v193 = &v100[v191];
        v194 = type metadata accessor for UnsureInternalPB(0);
        v195 = *(_QWORD *)(v194 - 8);
        v196 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v195 + 48);
        v197 = v196(v192, 1, v194);
        v198 = v196(v193, 1, v194);
        if (v197)
        {
          if (!v198)
          {
            v199 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v199 - 8) + 16))(v192, v193, v199);
            *(_QWORD *)&v192[*(int *)(v194 + 20)] = *(_QWORD *)&v193[*(int *)(v194 + 20)];
            v200 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v195 + 56);
            swift_retain();
            v200(v192, 0, 1, v194);
            goto LABEL_73;
          }
        }
        else
        {
          if (!v198)
          {
            v333 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v333 - 8) + 24))(v192, v193, v333);
            *(_QWORD *)&v192[*(int *)(v194 + 20)] = *(_QWORD *)&v193[*(int *)(v194 + 20)];
            swift_retain();
            swift_release();
LABEL_73:
            v202 = v177[12];
            v203 = (char *)(v99 + v202);
            v204 = &v100[v202];
            v205 = type metadata accessor for ObjectInteractionStateInternalPB(0);
            v206 = *(_QWORD *)(v205 - 8);
            v207 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v206 + 48);
            v208 = v207(v203, 1, v205);
            v209 = v207(v204, 1, v205);
            if (v208)
            {
              if (!v209)
              {
                v210 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v210 - 8) + 16))(v203, v204, v210);
                *(_QWORD *)&v203[*(int *)(v205 + 20)] = *(_QWORD *)&v204[*(int *)(v205 + 20)];
                v211 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56);
                swift_retain();
                v211(v203, 0, 1, v205);
                goto LABEL_79;
              }
            }
            else
            {
              if (!v209)
              {
                v334 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v334 - 8) + 24))(v203, v204, v334);
                *(_QWORD *)&v203[*(int *)(v205 + 20)] = *(_QWORD *)&v204[*(int *)(v205 + 20)];
                swift_retain();
                swift_release();
LABEL_79:
                v213 = v177[13];
                v214 = (char *)(v99 + v213);
                v215 = &v100[v213];
                v216 = type metadata accessor for HomePinchInternalPB(0);
                v217 = *(_QWORD *)(v216 - 8);
                v218 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v217 + 48);
                v219 = v218(v214, 1, v216);
                v220 = v218(v215, 1, v216);
                if (v219)
                {
                  if (!v220)
                  {
                    *(_QWORD *)v214 = *(_QWORD *)v215;
                    v221 = *(int *)(v216 + 20);
                    v222 = &v214[v221];
                    v223 = &v215[v221];
                    v224 = type metadata accessor for UnknownStorage();
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v224 - 8) + 16))(v222, v223, v224);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
LABEL_85:
                    v8 = v347;
                    *(_QWORD *)(v99 + v177[14]) = *(_QWORD *)&v100[v177[14]];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v36 = v351;
                    goto LABEL_86;
                  }
                }
                else
                {
                  if (!v220)
                  {
                    *(_QWORD *)v214 = *(_QWORD *)v215;
                    v335 = *(int *)(v216 + 20);
                    v336 = &v214[v335];
                    v337 = &v215[v335];
                    v338 = type metadata accessor for UnknownStorage();
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v338 - 8) + 24))(v336, v337, v338);
                    goto LABEL_85;
                  }
                  outlined destroy of Matrix3x3PB((uint64_t)v214, type metadata accessor for HomePinchInternalPB);
                }
                v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
                memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
                goto LABEL_85;
              }
              outlined destroy of Matrix3x3PB((uint64_t)v203, type metadata accessor for ObjectInteractionStateInternalPB);
            }
            v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
            memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
            goto LABEL_79;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v192, type metadata accessor for UnsureInternalPB);
        }
        v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
        memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
        goto LABEL_73;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v179, type metadata accessor for ActionInternalPB);
    }
    v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
    goto LABEL_67;
  }
  if (v105)
  {
LABEL_38:
    v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy((void *)v99, v100, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_86;
  }
  v340 = v102;
  v346 = v8;
  v350 = v36;
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *(_BYTE *)(v99 + 8) = v100[8];
  v106 = *((_QWORD *)v100 + 6);
  swift_bridgeObjectRetain();
  if (v106)
  {
    *(_DWORD *)(v99 + 16) = *((_DWORD *)v100 + 4);
    *(_DWORD *)(v99 + 20) = *((_DWORD *)v100 + 5);
    *(_BYTE *)(v99 + 24) = v100[24];
    *(_BYTE *)(v99 + 25) = v100[25];
    v107 = *((_QWORD *)v100 + 4);
    *(_BYTE *)(v99 + 40) = v100[40];
    *(_QWORD *)(v99 + 32) = v107;
    *(_QWORD *)(v99 + 48) = *((_QWORD *)v100 + 6);
    *(_QWORD *)(v99 + 56) = *((_QWORD *)v100 + 7);
    *(_QWORD *)(v99 + 64) = *((_QWORD *)v100 + 8);
    *(_QWORD *)(v99 + 72) = *((_QWORD *)v100 + 9);
    *(_QWORD *)(v99 + 80) = *((_QWORD *)v100 + 10);
    *(_DWORD *)(v99 + 88) = *((_DWORD *)v100 + 22);
    *(_QWORD *)(v99 + 96) = *((_QWORD *)v100 + 12);
    *(_QWORD *)(v99 + 104) = *((_QWORD *)v100 + 13);
    v108 = *((_QWORD *)v100 + 14);
    *(_BYTE *)(v99 + 120) = v100[120];
    *(_QWORD *)(v99 + 112) = v108;
    *(_DWORD *)(v99 + 124) = *((_DWORD *)v100 + 31);
    *(_DWORD *)(v99 + 128) = *((_DWORD *)v100 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v115 = *((_OWORD *)v100 + 1);
    v116 = *((_OWORD *)v100 + 2);
    v117 = *((_OWORD *)v100 + 4);
    *(_OWORD *)(v99 + 48) = *((_OWORD *)v100 + 3);
    *(_OWORD *)(v99 + 64) = v117;
    *(_OWORD *)(v99 + 16) = v115;
    *(_OWORD *)(v99 + 32) = v116;
    v118 = *((_OWORD *)v100 + 5);
    v119 = *((_OWORD *)v100 + 6);
    v120 = *((_OWORD *)v100 + 7);
    *(_DWORD *)(v99 + 128) = *((_DWORD *)v100 + 32);
    *(_OWORD *)(v99 + 96) = v119;
    *(_OWORD *)(v99 + 112) = v120;
    *(_OWORD *)(v99 + 80) = v118;
  }
  *(_QWORD *)(v99 + 136) = *((_QWORD *)v100 + 17);
  *(_DWORD *)(v99 + 144) = *((_DWORD *)v100 + 36);
  *(_DWORD *)(v99 + 148) = *((_DWORD *)v100 + 37);
  *(_QWORD *)(v99 + 152) = *((_QWORD *)v100 + 19);
  memcpy((void *)(v99 + 160), v100 + 160, 0x373uLL);
  v342 = (int *)v101;
  v121 = *(int *)(v101 + 40);
  v122 = (char *)(v99 + v121);
  v123 = &v100[v121];
  v124 = type metadata accessor for ActionInternalPB(0);
  v125 = *(_QWORD *)(v124 - 8);
  v126 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v126(v123, 1, v124))
  {
    v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
  }
  else
  {
    *v122 = *v123;
    v128 = *(int *)(v124 + 20);
    v129 = &v122[v128];
    v130 = &v123[v128];
    v131 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v130, v131);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
  }
  v132 = v342[11];
  v133 = (char *)(v99 + v132);
  v134 = &v100[v132];
  v135 = type metadata accessor for UnsureInternalPB(0);
  v136 = *(_QWORD *)(v135 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
  {
    v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
  }
  else
  {
    v138 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16))(v133, v134, v138);
    *(_QWORD *)&v133[*(int *)(v135 + 20)] = *(_QWORD *)&v134[*(int *)(v135 + 20)];
    v139 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56);
    swift_retain();
    v139(v133, 0, 1, v135);
  }
  v140 = v342[12];
  v141 = (char *)(v99 + v140);
  v142 = &v100[v140];
  v143 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v144 = *(_QWORD *)(v143 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143))
  {
    v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
  }
  else
  {
    v146 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 16))(v141, v142, v146);
    *(_QWORD *)&v141[*(int *)(v143 + 20)] = *(_QWORD *)&v142[*(int *)(v143 + 20)];
    v147 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56);
    swift_retain();
    v147(v141, 0, 1, v143);
  }
  v148 = v342[13];
  v149 = (_QWORD *)(v99 + v148);
  v150 = &v100[v148];
  v151 = type metadata accessor for HomePinchInternalPB(0);
  v152 = *(_QWORD *)(v151 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
  {
    v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
  }
  else
  {
    *v149 = *(_QWORD *)v150;
    v154 = *(int *)(v151 + 20);
    v155 = (char *)v149 + v154;
    v156 = &v150[v154];
    v157 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 16))(v155, v156, v157);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v149, 0, 1, v151);
  }
  *(_QWORD *)(v99 + v342[14]) = *(_QWORD *)&v100[v342[14]];
  v158 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v340 + 56);
  swift_bridgeObjectRetain();
  v158(v99, 0, 1, v342);
  v8 = v346;
  v36 = v350;
LABEL_86:
  v226 = v36[25];
  v227 = &v7[v226];
  v228 = &v8[v226];
  v229 = *(_QWORD *)v228;
  v227[8] = v228[8];
  *(_QWORD *)v227 = v229;
  *(_QWORD *)&v7[v36[26]] = *(_QWORD *)&v8[v36[26]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v230 = v36[27];
  v231 = &v7[v230];
  v232 = &v8[v230];
  v233 = *(_QWORD *)v232;
  v231[8] = v232[8];
  *(_QWORD *)v231 = v233;
  v234 = v36[28];
  v235 = &v7[v234];
  v236 = &v8[v234];
  v238 = *((_OWORD *)v236 + 1);
  v237 = *((_OWORD *)v236 + 2);
  v239 = *(_OWORD *)v236;
  *((_WORD *)v235 + 24) = *((_WORD *)v236 + 24);
  *((_OWORD *)v235 + 1) = v238;
  *((_OWORD *)v235 + 2) = v237;
  *(_OWORD *)v235 = v239;
  *(_QWORD *)&v7[v36[29]] = *(_QWORD *)&v8[v36[29]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v240 = v36[30];
  v241 = &v7[v240];
  v242 = &v8[v240];
  v243 = *(_QWORD *)v242;
  v241[8] = v242[8];
  *(_QWORD *)v241 = v243;
  v244 = v36[31];
  v245 = &v7[v244];
  v246 = &v8[v244];
  v247 = *(_QWORD *)&v8[v244];
  if (*(_QWORD *)&v7[v244])
  {
    if (v247)
    {
      *(_QWORD *)v245 = v247;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v245 + 1) = *((_QWORD *)v246 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v245 + 2) = *((_QWORD *)v246 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v245 + 3) = *((_QWORD *)v246 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v245 + 4) = *((_QWORD *)v246 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v245 + 5) = *((_QWORD *)v246 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v245 + 6) = *((_QWORD *)v246 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ObjectInteractionData((uint64_t)&v7[v244]);
      v249 = *((_OWORD *)v246 + 1);
      v248 = *((_OWORD *)v246 + 2);
      v250 = *(_OWORD *)v246;
      *((_QWORD *)v245 + 6) = *((_QWORD *)v246 + 6);
      *((_OWORD *)v245 + 1) = v249;
      *((_OWORD *)v245 + 2) = v248;
      *(_OWORD *)v245 = v250;
    }
  }
  else if (v247)
  {
    *(_QWORD *)v245 = v247;
    *((_QWORD *)v245 + 1) = *((_QWORD *)v246 + 1);
    *((_QWORD *)v245 + 2) = *((_QWORD *)v246 + 2);
    *((_QWORD *)v245 + 3) = *((_QWORD *)v246 + 3);
    *((_QWORD *)v245 + 4) = *((_QWORD *)v246 + 4);
    *((_QWORD *)v245 + 5) = *((_QWORD *)v246 + 5);
    *((_QWORD *)v245 + 6) = *((_QWORD *)v246 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v251 = *(_OWORD *)v246;
    v252 = *((_OWORD *)v246 + 1);
    v253 = *((_OWORD *)v246 + 2);
    *((_QWORD *)v245 + 6) = *((_QWORD *)v246 + 6);
    *((_OWORD *)v245 + 1) = v252;
    *((_OWORD *)v245 + 2) = v253;
    *(_OWORD *)v245 = v251;
  }
  v254 = v36[32];
  v255 = &v7[v254];
  v256 = &v8[v254];
  *(_QWORD *)v255 = *(_QWORD *)v256;
  *((_DWORD *)v255 + 2) = *((_DWORD *)v256 + 2);
  *((_DWORD *)v255 + 3) = *((_DWORD *)v256 + 3);
  *((_QWORD *)v255 + 2) = *((_QWORD *)v256 + 2);
  *((_OWORD *)v255 + 2) = *((_OWORD *)v256 + 2);
  *((_QWORD *)v255 + 6) = *((_QWORD *)v256 + 6);
  v255[56] = v256[56];
  *((_DWORD *)v255 + 15) = *((_DWORD *)v256 + 15);
  *((_DWORD *)v255 + 16) = *((_DWORD *)v256 + 16);
  v255[68] = v256[68];
  v255[69] = v256[69];
  v257 = v36[33];
  v258 = &v7[v257];
  v259 = &v8[v257];
  v260 = *(_QWORD *)v259;
  v258[8] = v259[8];
  *(_QWORD *)v258 = v260;
  v261 = v36[34];
  v262 = &v7[v261];
  v263 = &v8[v261];
  *(_DWORD *)v262 = *(_DWORD *)v263;
  *((_QWORD *)v262 + 1) = *((_QWORD *)v263 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v264 = v36[35];
  v265 = &v7[v264];
  v266 = &v8[v264];
  *(_OWORD *)v265 = *(_OWORD *)&v8[v264];
  *((_OWORD *)v265 + 1) = *(_OWORD *)&v8[v264 + 16];
  *((_OWORD *)v265 + 2) = *(_OWORD *)&v8[v264 + 32];
  *((_OWORD *)v265 + 3) = *(_OWORD *)&v8[v264 + 48];
  *((_DWORD *)v265 + 16) = *(_DWORD *)&v8[v264 + 64];
  *((_OWORD *)v265 + 5) = *(_OWORD *)&v8[v264 + 80];
  *((_OWORD *)v265 + 6) = *(_OWORD *)&v8[v264 + 96];
  *((_OWORD *)v265 + 7) = *(_OWORD *)&v8[v264 + 112];
  *((_OWORD *)v265 + 8) = *(_OWORD *)&v8[v264 + 128];
  v267 = (uint64_t)&v7[v264 + 144];
  v269 = (uint64_t)&v8[v264 + 144];
  v268 = *(_QWORD *)v269;
  if (*(_QWORD *)v267)
  {
    if (v268)
    {
      *((_QWORD *)v265 + 18) = v268;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v265 + 19) = *((_QWORD *)v266 + 19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_OWORD *)v265 + 10) = *((_OWORD *)v266 + 10);
      *((_OWORD *)v265 + 11) = *((_OWORD *)v266 + 11);
      *((_OWORD *)v265 + 12) = *((_OWORD *)v266 + 12);
      *((_OWORD *)v265 + 13) = *((_OWORD *)v266 + 13);
      *((_OWORD *)v265 + 14) = *((_OWORD *)v266 + 14);
      *((_OWORD *)v265 + 15) = *((_OWORD *)v266 + 15);
      v265[256] = v266[256];
      v265[257] = v266[257];
      *((_DWORD *)v265 + 65) = *((_DWORD *)v266 + 65);
    }
    else
    {
      outlined destroy of HandPose((uint64_t)&v7[v264 + 144]);
      v274 = *(_OWORD *)(v269 + 48);
      v276 = *(_OWORD *)v269;
      v275 = *(_OWORD *)(v269 + 16);
      *(_OWORD *)(v267 + 32) = *(_OWORD *)(v269 + 32);
      *(_OWORD *)(v267 + 48) = v274;
      *(_OWORD *)v267 = v276;
      *(_OWORD *)(v267 + 16) = v275;
      v278 = *(_OWORD *)(v269 + 80);
      v277 = *(_OWORD *)(v269 + 96);
      v279 = *(_OWORD *)(v269 + 64);
      *(_QWORD *)(v267 + 112) = *(_QWORD *)(v269 + 112);
      *(_OWORD *)(v267 + 80) = v278;
      *(_OWORD *)(v267 + 96) = v277;
      *(_OWORD *)(v267 + 64) = v279;
    }
  }
  else if (v268)
  {
    *((_QWORD *)v265 + 18) = v268;
    *((_QWORD *)v265 + 19) = *((_QWORD *)v266 + 19);
    v270 = *((_OWORD *)v266 + 11);
    *((_OWORD *)v265 + 10) = *((_OWORD *)v266 + 10);
    *((_OWORD *)v265 + 11) = v270;
    v271 = *((_OWORD *)v266 + 12);
    v272 = *((_OWORD *)v266 + 13);
    v273 = *((_OWORD *)v266 + 15);
    *((_OWORD *)v265 + 14) = *((_OWORD *)v266 + 14);
    *((_OWORD *)v265 + 15) = v273;
    *((_OWORD *)v265 + 12) = v271;
    *((_OWORD *)v265 + 13) = v272;
    v265[256] = v266[256];
    v265[257] = v266[257];
    *((_DWORD *)v265 + 65) = *((_DWORD *)v266 + 65);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v280 = *(_OWORD *)v269;
    v281 = *(_OWORD *)&v8[v264 + 160];
    v282 = *(_OWORD *)&v8[v264 + 192];
    *(_OWORD *)&v7[v264 + 176] = *(_OWORD *)&v8[v264 + 176];
    *(_OWORD *)&v7[v264 + 192] = v282;
    *(_OWORD *)v267 = v280;
    *(_OWORD *)&v7[v264 + 160] = v281;
    v283 = *(_OWORD *)&v8[v264 + 208];
    v284 = *(_OWORD *)&v8[v264 + 224];
    v285 = *(_OWORD *)&v8[v264 + 240];
    *(_QWORD *)&v7[v264 + 256] = *(_QWORD *)&v8[v264 + 256];
    *(_OWORD *)&v7[v264 + 224] = v284;
    *(_OWORD *)&v7[v264 + 240] = v285;
    *(_OWORD *)&v7[v264 + 208] = v283;
  }
  *((_QWORD *)v265 + 33) = *((_QWORD *)v266 + 33);
  *((_QWORD *)v265 + 34) = *((_QWORD *)v266 + 34);
  v286 = v36[36];
  v287 = &v7[v286];
  v288 = v8;
  v289 = &v8[v286];
  v290 = type metadata accessor for PartialHandMultiCam(0);
  v291 = *(_QWORD *)(v290 - 8);
  v292 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v291 + 48);
  v293 = v292(v287, 1, v290);
  v294 = v292(v289, 1, v290);
  if (!v293)
  {
    if (!v294)
    {
      *(_QWORD *)v287 = *(_QWORD *)v289;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v287 + 1) = *((_QWORD *)v289 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v325 = *(int *)(v290 + 24);
      v326 = &v287[v325];
      v327 = &v289[v325];
      v328 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v328 - 8) + 24))(v326, v327, v328);
      goto LABEL_106;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v287, type metadata accessor for PartialHandMultiCam);
    goto LABEL_105;
  }
  if (v294)
  {
LABEL_105:
    v299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v287, v289, *(_QWORD *)(*(_QWORD *)(v299 - 8) + 64));
    goto LABEL_106;
  }
  *(_QWORD *)v287 = *(_QWORD *)v289;
  *((_QWORD *)v287 + 1) = *((_QWORD *)v289 + 1);
  v295 = *(int *)(v290 + 24);
  v352 = &v287[v295];
  v343 = &v289[v295];
  v296 = type metadata accessor for UnknownStorage();
  v297 = v36;
  v298 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v296 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v298(v352, v343, v296);
  v36 = v297;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v291 + 56))(v287, 0, 1, v290);
LABEL_106:
  v300 = v36[37];
  v301 = &v7[v300];
  v302 = &v288[v300];
  *v301 = *v302;
  v303 = *((_DWORD *)v302 + 1);
  v301[8] = v302[8];
  *((_DWORD *)v301 + 1) = v303;
  v304 = v36[38];
  v305 = &v7[v304];
  v306 = &v288[v304];
  *v305 = *v306;
  v305[1] = v306[1];
  v305[2] = v306[2];
  v305[3] = v306[3];
  v307 = *((_QWORD *)v306 + 1);
  v305[16] = v306[16];
  *((_QWORD *)v305 + 1) = v307;
  v308 = *((_QWORD *)v306 + 3);
  v305[32] = v306[32];
  *((_QWORD *)v305 + 3) = v308;
  v309 = *((_QWORD *)v306 + 5);
  v305[48] = v306[48];
  *((_QWORD *)v305 + 5) = v309;
  v305[49] = v306[49];
  v305[50] = v306[50];
  v305[51] = v306[51];
  v305[52] = v306[52];
  v310 = v353[9];
  v311 = (_OWORD *)((char *)v355 + v310);
  v312 = (__int128 *)((char *)v354 + v310);
  v313 = *v312;
  *(_OWORD *)((char *)v311 + 9) = *(__int128 *)((char *)v312 + 9);
  *v311 = v313;
  v314 = v353[10];
  v315 = (char *)v355 + v314;
  v316 = (char *)v354 + v314;
  *(_QWORD *)v315 = *(_QWORD *)v316;
  *((_DWORD *)v315 + 2) = *((_DWORD *)v316 + 2);
  *((_DWORD *)v315 + 3) = *((_DWORD *)v316 + 3);
  *((_QWORD *)v315 + 2) = *((_QWORD *)v316 + 2);
  *((_BYTE *)v355 + v353[11]) = *((_BYTE *)v354 + v353[11]);
  v317 = v353[12];
  v318 = (char *)v355 + v317;
  v319 = (char *)v354 + v317;
  *v318 = *v319;
  v318[1] = v319[1];
  v318[2] = v319[2];
  v318[3] = v319[3];
  *((_QWORD *)v318 + 1) = *((_QWORD *)v319 + 1);
  *((_DWORD *)v318 + 4) = *((_DWORD *)v319 + 4);
  *((_QWORD *)v318 + 3) = *((_QWORD *)v319 + 3);
  *((_DWORD *)v318 + 8) = *((_DWORD *)v319 + 8);
  *((_DWORD *)v318 + 9) = *((_DWORD *)v319 + 9);
  *((_DWORD *)v318 + 10) = *((_DWORD *)v319 + 10);
  *((_DWORD *)v318 + 11) = *((_DWORD *)v319 + 11);
  *((_DWORD *)v318 + 12) = *((_DWORD *)v319 + 12);
  *((_DWORD *)v318 + 13) = *((_DWORD *)v319 + 13);
  *((_DWORD *)v318 + 14) = *((_DWORD *)v319 + 14);
  *((_DWORD *)v318 + 15) = *((_DWORD *)v319 + 15);
  *((_DWORD *)v318 + 16) = *((_DWORD *)v319 + 16);
  *((_DWORD *)v318 + 17) = *((_DWORD *)v319 + 17);
  *((_DWORD *)v318 + 18) = *((_DWORD *)v319 + 18);
  *((_DWORD *)v318 + 19) = *((_DWORD *)v319 + 19);
  *((_DWORD *)v318 + 20) = *((_DWORD *)v319 + 20);
  *((_DWORD *)v318 + 21) = *((_DWORD *)v319 + 21);
  *((_DWORD *)v318 + 22) = *((_DWORD *)v319 + 22);
  *((_QWORD *)v318 + 12) = *((_QWORD *)v319 + 12);
  *((_QWORD *)v318 + 13) = *((_QWORD *)v319 + 13);
  *((_QWORD *)v318 + 14) = *((_QWORD *)v319 + 14);
  *((_QWORD *)v318 + 15) = *((_QWORD *)v319 + 15);
  *((_DWORD *)v318 + 32) = *((_DWORD *)v319 + 32);
  *((_DWORD *)v318 + 33) = *((_DWORD *)v319 + 33);
  *((_DWORD *)v318 + 34) = *((_DWORD *)v319 + 34);
  *((_DWORD *)v318 + 35) = *((_DWORD *)v319 + 35);
  v318[144] = v319[144];
  v318[145] = v319[145];
  *((_QWORD *)v318 + 19) = *((_QWORD *)v319 + 19);
  *((_DWORD *)v318 + 40) = *((_DWORD *)v319 + 40);
  *((_DWORD *)v318 + 41) = *((_DWORD *)v319 + 41);
  *((_DWORD *)v318 + 42) = *((_DWORD *)v319 + 42);
  result = *((float *)v319 + 43);
  *((float *)v318 + 43) = result;
  *((_QWORD *)v318 + 22) = *((_QWORD *)v319 + 22);
  *((_QWORD *)v318 + 23) = *((_QWORD *)v319 + 23);
  *((_QWORD *)v318 + 24) = *((_QWORD *)v319 + 24);
  v321 = v353[13];
  v322 = (char *)v355 + v321;
  v323 = (char *)v354 + v321;
  v324 = *(_QWORD *)v323;
  v322[8] = v323[8];
  *(_QWORD *)v322 = v324;
  return result;
}

uint64_t initializeWithTake for RecoverRepetitivePinch.shouldRecoverImplementationInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int *v49;
  unsigned int (**v50)(_QWORD *, uint64_t, int *);
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  _OWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  _OWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  _BYTE *v151;
  char *v152;
  char *__dst;
  void *__dsta;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v3 = a2;
  v4 = a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = a3[8];
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_DWORD *)v6 = *(_DWORD *)(a2 + v5);
  *(_WORD *)(v6 + 4) = *(_WORD *)(a2 + v5 + 4);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(a2 + v5 + 8);
  v8 = *(_OWORD *)(a2 + v5 + 64);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 64) = v8;
  v9 = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 128) = *(_QWORD *)(a2 + v5 + 128);
  v10 = *(_OWORD *)(a2 + v5 + 112);
  v11 = *(_OWORD *)(a2 + v5 + 80);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a2 + v5 + 96);
  *(_OWORD *)(v6 + 112) = v10;
  *(_OWORD *)(v6 + 80) = v11;
  *(_BYTE *)(v6 + 136) = *(_BYTE *)(a2 + v5 + 136);
  *(_WORD *)(v6 + 137) = *(_WORD *)(a2 + v5 + 137);
  *(_QWORD *)(v6 + 144) = *(_QWORD *)(a2 + v5 + 144);
  v12 = *(_OWORD *)(a2 + v5 + 176);
  *(_OWORD *)(v6 + 160) = *(_OWORD *)(a2 + v5 + 160);
  *(_OWORD *)(v6 + 176) = v12;
  *(_BYTE *)(v6 + 192) = *(_BYTE *)(a2 + v5 + 192);
  *(_OWORD *)(v6 + 200) = *(_OWORD *)(a2 + v5 + 200);
  *(_OWORD *)(v6 + 216) = *(_OWORD *)(a2 + v5 + 216);
  v13 = *(_OWORD *)(a2 + v5 + 232);
  v14 = *(_OWORD *)(a2 + v5 + 248);
  v15 = *(_OWORD *)(a2 + v5 + 264);
  *(_BYTE *)(v6 + 280) = *(_BYTE *)(a2 + v5 + 280);
  *(_OWORD *)(a1 + v5 + 264) = v15;
  *(_OWORD *)(v6 + 248) = v14;
  *(_OWORD *)(v6 + 232) = v13;
  *(_BYTE *)(v6 + 281) = *(_BYTE *)(a2 + v5 + 281);
  v16 = (int *)type metadata accessor for HandDescriptor();
  v17 = v16[17];
  v18 = (char *)(v6 + v17);
  v19 = (char *)(v7 + v17);
  v20 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v155 = v3;
    v157 = v4;
    v23 = type metadata accessor for UnknownStorage();
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
    v24(v18, v19, v23);
    v25 = *(int *)(v20 + 20);
    __dst = &v18[v25];
    v26 = &v19[v25];
    v27 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v150 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v26, 1, v27))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v26;
      v24(&__dst[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v23);
      v29 = *(int *)(v27 + 24);
      v30 = &__dst[v29];
      v31 = &v26[v29];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v30[4] = v31[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56))(__dst, 0, 1, v27);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    v3 = v155;
    v4 = v157;
  }
  *(_QWORD *)(v6 + v16[18]) = *(_QWORD *)(v7 + v16[18]);
  v32 = v16[19];
  v33 = v6 + v32;
  v34 = v7 + v32;
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  v35 = v16[20];
  v36 = v6 + v35;
  v37 = v7 + v35;
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  v38 = v16[21];
  v39 = v6 + v38;
  v40 = v7 + v38;
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_BYTE *)(v39 + 16) = *(_BYTE *)(v40 + 16);
  v41 = v16[22];
  v42 = v6 + v41;
  v43 = v7 + v41;
  *(_BYTE *)(v42 + 64) = *(_BYTE *)(v43 + 64);
  v44 = *(_OWORD *)(v43 + 48);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v43 + 32);
  *(_OWORD *)(v42 + 48) = v44;
  v45 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v45;
  *(_QWORD *)(v6 + v16[23]) = *(_QWORD *)(v7 + v16[23]);
  v46 = v16[24];
  v47 = (_QWORD *)(v6 + v46);
  v48 = (_QWORD *)(v7 + v46);
  v49 = (int *)type metadata accessor for HandDescriptorInternal();
  v50 = (unsigned int (**)(_QWORD *, uint64_t, int *))*((_QWORD *)v49 - 1);
  if (v50[6](v48, 1, v49))
  {
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    __dsta = v50;
    v156 = v3;
    v158 = v4;
    *v47 = *v48;
    *((_BYTE *)v47 + 8) = *((_BYTE *)v48 + 8);
    v52 = *((_OWORD *)v48 + 6);
    *((_OWORD *)v47 + 5) = *((_OWORD *)v48 + 5);
    *((_OWORD *)v47 + 6) = v52;
    *((_OWORD *)v47 + 7) = *((_OWORD *)v48 + 7);
    *((_DWORD *)v47 + 32) = *((_DWORD *)v48 + 32);
    v53 = *((_OWORD *)v48 + 2);
    *((_OWORD *)v47 + 1) = *((_OWORD *)v48 + 1);
    *((_OWORD *)v47 + 2) = v53;
    v54 = *((_OWORD *)v48 + 4);
    *((_OWORD *)v47 + 3) = *((_OWORD *)v48 + 3);
    *((_OWORD *)v47 + 4) = v54;
    v47[17] = v48[17];
    *((_OWORD *)v47 + 9) = *((_OWORD *)v48 + 9);
    memcpy(v47 + 20, v48 + 20, 0x373uLL);
    v55 = v49[10];
    v56 = (char *)v47 + v55;
    v57 = (char *)v48 + v55;
    v58 = type metadata accessor for ActionInternalPB(0);
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      *v56 = *v57;
      v61 = *(int *)(v58 + 20);
      v151 = &v56[v61];
      v62 = &v57[v61];
      v63 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v151, v62, v63);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
    v64 = v49[11];
    v65 = (char *)v47 + v64;
    v66 = (char *)v48 + v64;
    v67 = type metadata accessor for UnsureInternalPB(0);
    v68 = *(_QWORD *)(v67 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
    {
      v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      v70 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v65, v66, v70);
      *(_QWORD *)&v65[*(int *)(v67 + 20)] = *(_QWORD *)&v66[*(int *)(v67 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
    }
    v71 = v49[12];
    v72 = (char *)v47 + v71;
    v73 = (char *)v48 + v71;
    v74 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v75 = *(_QWORD *)(v74 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
    {
      v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    }
    else
    {
      v77 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v72, v73, v77);
      *(_QWORD *)&v72[*(int *)(v74 + 20)] = *(_QWORD *)&v73[*(int *)(v74 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
    }
    v78 = v49[13];
    v79 = (_QWORD *)((char *)v47 + v78);
    v80 = (_QWORD *)((char *)v48 + v78);
    v81 = type metadata accessor for HomePinchInternalPB(0);
    v82 = *(_QWORD *)(v81 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
    {
      v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    }
    else
    {
      *v79 = *v80;
      v84 = *(int *)(v81 + 20);
      v152 = (char *)v79 + v84;
      v85 = (char *)v80 + v84;
      v86 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v152, v85, v86);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
    }
    v4 = v158;
    *(_QWORD *)((char *)v47 + v49[14]) = *(_QWORD *)((char *)v48 + v49[14]);
    (*((void (**)(_QWORD *, _QWORD, uint64_t, int *))__dsta + 7))(v47, 0, 1, v49);
    v3 = v156;
  }
  v87 = v16[25];
  v88 = v6 + v87;
  v89 = v7 + v87;
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *(_BYTE *)(v88 + 8) = *(_BYTE *)(v89 + 8);
  *(_QWORD *)(v6 + v16[26]) = *(_QWORD *)(v7 + v16[26]);
  v90 = v16[27];
  v91 = v6 + v90;
  v92 = v7 + v90;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v93 = v16[28];
  v94 = v6 + v93;
  v95 = v7 + v93;
  v96 = *(_OWORD *)(v95 + 16);
  *(_OWORD *)v94 = *(_OWORD *)v95;
  *(_OWORD *)(v94 + 16) = v96;
  *(_OWORD *)(v94 + 32) = *(_OWORD *)(v95 + 32);
  *(_WORD *)(v94 + 48) = *(_WORD *)(v95 + 48);
  *(_QWORD *)(v6 + v16[29]) = *(_QWORD *)(v7 + v16[29]);
  v97 = v16[30];
  v98 = v6 + v97;
  v99 = v7 + v97;
  *(_BYTE *)(v98 + 8) = *(_BYTE *)(v99 + 8);
  *(_QWORD *)v98 = *(_QWORD *)v99;
  v100 = v16[31];
  v101 = v6 + v100;
  v102 = (__int128 *)(v7 + v100);
  *(_QWORD *)(v101 + 48) = *((_QWORD *)v102 + 6);
  v103 = v102[2];
  v104 = *v102;
  *(_OWORD *)(v101 + 16) = v102[1];
  *(_OWORD *)(v101 + 32) = v103;
  *(_OWORD *)v101 = v104;
  v105 = v16[32];
  v106 = v6 + v105;
  v107 = v7 + v105;
  v108 = *(_OWORD *)(v107 + 48);
  *(_OWORD *)(v106 + 32) = *(_OWORD *)(v107 + 32);
  *(_OWORD *)(v106 + 48) = v108;
  *(_QWORD *)(v106 + 62) = *(_QWORD *)(v107 + 62);
  v109 = *(_OWORD *)(v107 + 16);
  *(_OWORD *)v106 = *(_OWORD *)v107;
  *(_OWORD *)(v106 + 16) = v109;
  v110 = v16[33];
  v111 = v6 + v110;
  v112 = v7 + v110;
  *(_QWORD *)v111 = *(_QWORD *)v112;
  *(_BYTE *)(v111 + 8) = *(_BYTE *)(v112 + 8);
  *(_OWORD *)(v6 + v16[34]) = *(_OWORD *)(v7 + v16[34]);
  memcpy((void *)(v6 + v16[35]), (const void *)(v7 + v16[35]), 0x118uLL);
  v113 = v16[36];
  v114 = (_OWORD *)(v6 + v113);
  v115 = (_OWORD *)(v7 + v113);
  v116 = type metadata accessor for PartialHandMultiCam(0);
  v117 = *(_QWORD *)(v116 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
  {
    v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    *v114 = *v115;
    v119 = *(int *)(v116 + 24);
    v120 = (char *)v114 + v119;
    v121 = (char *)v115 + v119;
    v122 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 32))(v120, v121, v122);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
  }
  v123 = v16[37];
  v124 = v6 + v123;
  v125 = v7 + v123;
  *(_QWORD *)v124 = *(_QWORD *)v125;
  *(_BYTE *)(v124 + 8) = *(_BYTE *)(v125 + 8);
  v126 = v16[38];
  v127 = v6 + v126;
  v128 = (__int128 *)(v7 + v126);
  *(_QWORD *)(v127 + 45) = *(_QWORD *)((char *)v128 + 45);
  v129 = v128[2];
  v130 = *v128;
  *(_OWORD *)(v127 + 16) = v128[1];
  *(_OWORD *)(v127 + 32) = v129;
  *(_OWORD *)v127 = v130;
  v131 = a3[9];
  v132 = a3[10];
  v133 = (_OWORD *)(v4 + v131);
  v134 = (_OWORD *)(v3 + v131);
  *v133 = *v134;
  *(_OWORD *)((char *)v133 + 9) = *(_OWORD *)((char *)v134 + 9);
  v135 = v4 + v132;
  v136 = v3 + v132;
  *(_OWORD *)v135 = *(_OWORD *)v136;
  *(_QWORD *)(v135 + 16) = *(_QWORD *)(v136 + 16);
  v137 = a3[12];
  *(_BYTE *)(v4 + a3[11]) = *(_BYTE *)(v3 + a3[11]);
  v138 = v4 + v137;
  v139 = v3 + v137;
  v140 = *(_OWORD *)(v139 + 48);
  *(_OWORD *)(v138 + 32) = *(_OWORD *)(v139 + 32);
  *(_OWORD *)(v138 + 48) = v140;
  v141 = *(_OWORD *)(v139 + 16);
  *(_OWORD *)v138 = *(_OWORD *)v139;
  *(_OWORD *)(v138 + 16) = v141;
  v142 = *(_OWORD *)(v139 + 112);
  *(_OWORD *)(v138 + 96) = *(_OWORD *)(v139 + 96);
  *(_OWORD *)(v138 + 112) = v142;
  v143 = *(_OWORD *)(v139 + 80);
  *(_OWORD *)(v138 + 64) = *(_OWORD *)(v139 + 64);
  *(_OWORD *)(v138 + 80) = v143;
  *(_QWORD *)(v138 + 192) = *(_QWORD *)(v139 + 192);
  v144 = *(_OWORD *)(v139 + 176);
  *(_OWORD *)(v138 + 160) = *(_OWORD *)(v139 + 160);
  *(_OWORD *)(v138 + 176) = v144;
  v145 = *(_OWORD *)(v139 + 144);
  *(_OWORD *)(v138 + 128) = *(_OWORD *)(v139 + 128);
  *(_OWORD *)(v138 + 144) = v145;
  v146 = a3[13];
  v147 = v4 + v146;
  v148 = v3 + v146;
  *(_QWORD *)v147 = *(_QWORD *)v148;
  *(_BYTE *)(v147 + 8) = *(_BYTE *)(v148 + 8);
  return v4;
}

_QWORD *assignWithTake for RecoverRepetitivePinch.shouldRecoverImplementationInput(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  int v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  int v121;
  int v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  int v134;
  size_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  int v152;
  size_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t (*v161)(char *, uint64_t, uint64_t);
  int v162;
  int v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  __int128 v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(char *, uint64_t, uint64_t);
  int v219;
  int v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _OWORD *v236;
  _OWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void (**__src)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *__srca;
  char *__srcd;
  char *__srce;
  _QWORD *__srcb;
  _QWORD *__srcc;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  int *v270;
  _QWORD *v271;
  char *__dst;
  int *__dsta;

  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a2[2];
  v5[1] = a2[1];
  v5[2] = v6;
  swift_release();
  v7 = a3[8];
  v8 = (char *)v5 + v7;
  v9 = (char *)a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)((char *)a2 + v7);
  *((_WORD *)v8 + 2) = *(_WORD *)((char *)a2 + v7 + 4);
  *((_DWORD *)v8 + 2) = *(_DWORD *)((char *)a2 + v7 + 8);
  v10 = (uint64_t)v5 + v7 + 16;
  v12 = (uint64_t)a2 + v7 + 16;
  v11 = *(_QWORD *)v12;
  if (*(_QWORD *)v10)
  {
    if (v11)
    {
      *((_QWORD *)v8 + 2) = v11;
      swift_bridgeObjectRelease();
      *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
      swift_bridgeObjectRelease();
      v13 = *((_OWORD *)v9 + 3);
      *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
      *((_OWORD *)v8 + 3) = v13;
      v14 = *((_OWORD *)v9 + 5);
      *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
      *((_OWORD *)v8 + 5) = v14;
      v15 = *((_OWORD *)v9 + 7);
      *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
      *((_OWORD *)v8 + 7) = v15;
      v8[128] = v9[128];
      v8[129] = v9[129];
      *((_DWORD *)v8 + 33) = *((_DWORD *)v9 + 33);
      goto LABEL_6;
    }
    outlined destroy of HandPose(v10);
  }
  v16 = *(_OWORD *)(v12 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(v10 + 80) = v16;
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(v12 + 96);
  *(_QWORD *)(v10 + 112) = *(_QWORD *)(v12 + 112);
  v17 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v12;
  *(_OWORD *)(v10 + 16) = v17;
  v18 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v10 + 48) = v18;
LABEL_6:
  v19 = *((_QWORD *)v9 + 25);
  v20 = *((_QWORD *)v8 + 25);
  v8[136] = v9[136];
  v8[137] = v9[137];
  v8[138] = v9[138];
  *((_QWORD *)v8 + 18) = *((_QWORD *)v9 + 18);
  *((_OWORD *)v8 + 10) = *((_OWORD *)v9 + 10);
  *((_OWORD *)v8 + 11) = *((_OWORD *)v9 + 11);
  v8[192] = v9[192];
  v270 = a3;
  v271 = a2;
  if (v20)
  {
    if (v19)
    {
      *((_QWORD *)v8 + 25) = v19;
      swift_bridgeObjectRelease();
      *((_QWORD *)v8 + 26) = *((_QWORD *)v9 + 26);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of PoseSpec((uint64_t)(v8 + 200));
  }
  *(_OWORD *)(v8 + 200) = *(_OWORD *)(v9 + 200);
LABEL_11:
  *(_OWORD *)(v8 + 216) = *(_OWORD *)(v9 + 216);
  *((_DWORD *)v8 + 58) = *((_DWORD *)v9 + 58);
  v8[236] = v9[236];
  *((_QWORD *)v8 + 30) = *((_QWORD *)v9 + 30);
  *((_WORD *)v8 + 124) = *((_WORD *)v9 + 124);
  v8[250] = v9[250];
  v8[251] = v9[251];
  *((_QWORD *)v8 + 32) = *((_QWORD *)v9 + 32);
  swift_bridgeObjectRelease();
  *((_DWORD *)v8 + 66) = *((_DWORD *)v9 + 66);
  v8[268] = v9[268];
  *((_DWORD *)v8 + 68) = *((_DWORD *)v9 + 68);
  *((_DWORD *)v8 + 69) = *((_DWORD *)v9 + 69);
  v8[280] = v9[280];
  v8[281] = v9[281];
  v21 = (int *)type metadata accessor for HandDescriptor();
  v22 = v21[17];
  v23 = &v8[v22];
  v24 = &v9[v22];
  v25 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      v267 = v5;
      v30 = type metadata accessor for UnknownStorage();
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
      v31(v23, v24, v30);
      v32 = *(int *)(v25 + 20);
      __dst = &v23[v32];
      v33 = &v24[v32];
      v34 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      __src = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v34 - 8);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v33, 1, v34))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
        memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v33;
        v31(&__dst[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v30);
        v49 = *(int *)(v34 + 24);
        v50 = &__dst[v49];
        v51 = &v33[v49];
        *(_DWORD *)v50 = *(_DWORD *)v51;
        v50[4] = v51[4];
        __src[7](__dst, 0, 1, v34);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_27;
    }
LABEL_17:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_28;
  }
  if (v29)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v23, type metadata accessor for ThumbIndexTapFeaturesPB);
    goto LABEL_17;
  }
  v267 = v5;
  v37 = type metadata accessor for UnknownStorage();
  __srca = *(_QWORD **)(v37 - 8);
  v38 = (void (*)(char *, char *, uint64_t))__srca[5];
  v38(v23, v24, v37);
  v39 = *(int *)(v25 + 20);
  v40 = &v23[v39];
  v41 = &v24[v39];
  v42 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v258 = *(_QWORD *)(v42 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v258 + 48);
  v44 = v43(v40, 1, v42);
  v45 = v43(v41, 1, v42);
  if (!v44)
  {
    if (!v45)
    {
      *(_QWORD *)v40 = *(_QWORD *)v41;
      swift_bridgeObjectRelease();
      v38(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v37);
      v138 = *(int *)(v42 + 24);
      v139 = &v40[v138];
      v140 = &v41[v138];
      *(_DWORD *)v139 = *(_DWORD *)v140;
      v139[4] = v140[4];
      goto LABEL_27;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v40, type metadata accessor for RawThumbIndexTapFeaturesPB);
    goto LABEL_26;
  }
  if (v45)
  {
LABEL_26:
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_27;
  }
  *(_QWORD *)v40 = *(_QWORD *)v41;
  ((void (*)(char *, char *, uint64_t))__srca[4])(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v37);
  v46 = *(int *)(v42 + 24);
  v47 = &v40[v46];
  v48 = &v41[v46];
  *(_DWORD *)v47 = *(_DWORD *)v48;
  v47[4] = v48[4];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v258 + 56))(v40, 0, 1, v42);
LABEL_27:
  v5 = v267;
LABEL_28:
  *(_QWORD *)&v8[v21[18]] = *(_QWORD *)&v9[v21[18]];
  swift_bridgeObjectRelease();
  v53 = v21[19];
  v54 = &v8[v53];
  v55 = &v9[v53];
  *(_OWORD *)v54 = *(_OWORD *)v55;
  v54[16] = v55[16];
  v56 = v21[20];
  v57 = &v8[v56];
  v58 = &v9[v56];
  v57[16] = v58[16];
  *(_OWORD *)v57 = *(_OWORD *)v58;
  v59 = v21[21];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v60[16] = v61[16];
  *(_OWORD *)v60 = *(_OWORD *)v61;
  v62 = v21[22];
  v63 = &v8[v62];
  v64 = &v9[v62];
  v63[64] = v64[64];
  v65 = *((_OWORD *)v64 + 3);
  *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
  *((_OWORD *)v63 + 3) = v65;
  v66 = *((_OWORD *)v64 + 1);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *((_OWORD *)v63 + 1) = v66;
  *(_QWORD *)&v8[v21[23]] = *(_QWORD *)&v9[v21[23]];
  swift_bridgeObjectRelease();
  v67 = v21[24];
  v68 = (uint64_t)&v8[v67];
  v69 = &v9[v67];
  v70 = type metadata accessor for HandDescriptorInternal();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  v73 = v72(v68, 1, v70);
  __dsta = (int *)v70;
  v74 = v72((uint64_t)v69, 1, v70);
  if (!v73)
  {
    if (v74)
    {
      outlined destroy of Matrix3x3PB(v68, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      goto LABEL_34;
    }
    *(_QWORD *)v68 = *(_QWORD *)v69;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v68 + 8) = v69[8];
    v269 = v5;
    if (*(_QWORD *)(v68 + 48))
    {
      v85 = *((_QWORD *)v69 + 6);
      if (v85)
      {
        *(_QWORD *)(v68 + 16) = *((_QWORD *)v69 + 2);
        *(_BYTE *)(v68 + 24) = v69[24];
        *(_BYTE *)(v68 + 25) = v69[25];
        *(_QWORD *)(v68 + 32) = *((_QWORD *)v69 + 4);
        *(_BYTE *)(v68 + 40) = v69[40];
        *(_QWORD *)(v68 + 48) = v85;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v68 + 56) = *((_QWORD *)v69 + 7);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v68 + 64) = *((_QWORD *)v69 + 8);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v68 + 72) = *((_QWORD *)v69 + 9);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v68 + 80) = *((_QWORD *)v69 + 10);
        swift_bridgeObjectRelease();
        *(_DWORD *)(v68 + 88) = *((_DWORD *)v69 + 22);
        v86 = *((_QWORD *)v69 + 13);
        *(_QWORD *)(v68 + 96) = *((_QWORD *)v69 + 12);
        *(_QWORD *)(v68 + 104) = v86;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v68 + 112) = *((_QWORD *)v69 + 14);
        *(_BYTE *)(v68 + 120) = v69[120];
        *(_QWORD *)(v68 + 124) = *(_QWORD *)(v69 + 124);
        goto LABEL_51;
      }
      outlined destroy of PinchInternalData(v68 + 16);
    }
    v113 = *((_OWORD *)v69 + 6);
    *(_OWORD *)(v68 + 80) = *((_OWORD *)v69 + 5);
    *(_OWORD *)(v68 + 96) = v113;
    *(_OWORD *)(v68 + 112) = *((_OWORD *)v69 + 7);
    *(_DWORD *)(v68 + 128) = *((_DWORD *)v69 + 32);
    v114 = *((_OWORD *)v69 + 2);
    *(_OWORD *)(v68 + 16) = *((_OWORD *)v69 + 1);
    *(_OWORD *)(v68 + 32) = v114;
    v115 = *((_OWORD *)v69 + 4);
    *(_OWORD *)(v68 + 48) = *((_OWORD *)v69 + 3);
    *(_OWORD *)(v68 + 64) = v115;
LABEL_51:
    *(_QWORD *)(v68 + 136) = *((_QWORD *)v69 + 17);
    swift_bridgeObjectRelease();
    *(_DWORD *)(v68 + 144) = *((_DWORD *)v69 + 36);
    *(_DWORD *)(v68 + 148) = *((_DWORD *)v69 + 37);
    *(_QWORD *)(v68 + 152) = *((_QWORD *)v69 + 19);
    swift_bridgeObjectRelease();
    memcpy((void *)(v68 + 160), v69 + 160, 0x373uLL);
    v116 = *(int *)(v70 + 40);
    v117 = (char *)(v68 + v116);
    v118 = &v69[v116];
    v119 = type metadata accessor for ActionInternalPB(0);
    __srcb = *(_QWORD **)(v119 - 8);
    v120 = (uint64_t (*)(char *, uint64_t, uint64_t))__srcb[6];
    v121 = v120(v117, 1, v119);
    v122 = v120(v118, 1, v119);
    if (v121)
    {
      if (!v122)
      {
        *v117 = *v118;
        v123 = *(int *)(v119 + 20);
        v124 = &v117[v123];
        v125 = &v118[v123];
        v126 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v124, v125, v126);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcb[7])(v117, 0, 1, v119);
        goto LABEL_57;
      }
    }
    else
    {
      if (!v122)
      {
        *v117 = *v118;
        v141 = *(int *)(v119 + 20);
        v142 = &v117[v141];
        v143 = &v118[v141];
        v144 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 40))(v142, v143, v144);
LABEL_57:
        v128 = __dsta[11];
        v129 = v68 + v128;
        v130 = &v69[v128];
        v131 = type metadata accessor for UnsureInternalPB(0);
        v132 = *(_QWORD *)(v131 - 8);
        v133 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 48);
        v259 = v129;
        LODWORD(v129) = v133(v129, 1, v131);
        v134 = v133((uint64_t)v130, 1, v131);
        if ((_DWORD)v129)
        {
          if (v134)
          {
            v135 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?)
                                         - 8)
                             + 64);
            v136 = (void *)v259;
LABEL_62:
            memcpy(v136, v130, v135);
            goto LABEL_67;
          }
          v137 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v259, v130, v137);
          *(_QWORD *)(v259 + *(int *)(v131 + 20)) = *(_QWORD *)&v130[*(int *)(v131 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v132 + 56))(v259, 0, 1, v131);
        }
        else
        {
          if (v134)
          {
            outlined destroy of Matrix3x3PB(v259, type metadata accessor for UnsureInternalPB);
            v135 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?)
                                         - 8)
                             + 64);
            v136 = (void *)v259;
            goto LABEL_62;
          }
          v145 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 40))(v259, v130, v145);
          *(_QWORD *)(v259 + *(int *)(v131 + 20)) = *(_QWORD *)&v130[*(int *)(v131 + 20)];
          swift_release();
        }
LABEL_67:
        v146 = __dsta[12];
        v147 = v68 + v146;
        v148 = &v69[v146];
        v149 = type metadata accessor for ObjectInteractionStateInternalPB(0);
        v150 = *(_QWORD *)(v149 - 8);
        v151 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v150 + 48);
        v260 = v147;
        LODWORD(v147) = v151(v147, 1, v149);
        v152 = v151((uint64_t)v148, 1, v149);
        if ((_DWORD)v147)
        {
          if (v152)
          {
            v153 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?)
                                         - 8)
                             + 64);
            v154 = (void *)v260;
LABEL_72:
            memcpy(v154, v148, v153);
            goto LABEL_75;
          }
          v155 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v155 - 8) + 32))(v260, v148, v155);
          *(_QWORD *)(v260 + *(int *)(v149 + 20)) = *(_QWORD *)&v148[*(int *)(v149 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v150 + 56))(v260, 0, 1, v149);
        }
        else
        {
          if (v152)
          {
            outlined destroy of Matrix3x3PB(v260, type metadata accessor for ObjectInteractionStateInternalPB);
            v153 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?)
                                         - 8)
                             + 64);
            v154 = (void *)v260;
            goto LABEL_72;
          }
          v156 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v156 - 8) + 40))(v260, v148, v156);
          *(_QWORD *)(v260 + *(int *)(v149 + 20)) = *(_QWORD *)&v148[*(int *)(v149 + 20)];
          swift_release();
        }
LABEL_75:
        v157 = __dsta[13];
        v158 = (char *)(v68 + v157);
        v159 = &v69[v157];
        v160 = type metadata accessor for HomePinchInternalPB(0);
        __srcc = *(_QWORD **)(v160 - 8);
        v161 = (uint64_t (*)(char *, uint64_t, uint64_t))__srcc[6];
        v162 = v161(v158, 1, v160);
        v163 = v161(v159, 1, v160);
        if (v162)
        {
          if (!v163)
          {
            *(_QWORD *)v158 = *(_QWORD *)v159;
            v164 = *(int *)(v160 + 20);
            v165 = &v158[v164];
            v166 = &v159[v164];
            v167 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32))(v165, v166, v167);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcc[7])(v158, 0, 1, v160);
LABEL_81:
            v5 = v269;
            *(_QWORD *)(v68 + __dsta[14]) = *(_QWORD *)&v69[__dsta[14]];
            swift_bridgeObjectRelease();
            goto LABEL_82;
          }
        }
        else
        {
          if (!v163)
          {
            *(_QWORD *)v158 = *(_QWORD *)v159;
            v254 = *(int *)(v160 + 20);
            v255 = &v158[v254];
            v256 = &v159[v254];
            v257 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v257 - 8) + 40))(v255, v256, v257);
            goto LABEL_81;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v158, type metadata accessor for HomePinchInternalPB);
        }
        v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
        memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
        goto LABEL_81;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v117, type metadata accessor for ActionInternalPB);
    }
    v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
    goto LABEL_57;
  }
  if (v74)
  {
LABEL_34:
    v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy((void *)v68, v69, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_82;
  }
  v268 = v5;
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_BYTE *)(v68 + 8) = v69[8];
  v75 = *((_OWORD *)v69 + 6);
  *(_OWORD *)(v68 + 80) = *((_OWORD *)v69 + 5);
  *(_OWORD *)(v68 + 96) = v75;
  *(_OWORD *)(v68 + 112) = *((_OWORD *)v69 + 7);
  *(_DWORD *)(v68 + 128) = *((_DWORD *)v69 + 32);
  v76 = *((_OWORD *)v69 + 2);
  *(_OWORD *)(v68 + 16) = *((_OWORD *)v69 + 1);
  *(_OWORD *)(v68 + 32) = v76;
  v77 = *((_OWORD *)v69 + 4);
  *(_OWORD *)(v68 + 48) = *((_OWORD *)v69 + 3);
  *(_OWORD *)(v68 + 64) = v77;
  *(_QWORD *)(v68 + 136) = *((_QWORD *)v69 + 17);
  *(_OWORD *)(v68 + 144) = *((_OWORD *)v69 + 9);
  memcpy((void *)(v68 + 160), v69 + 160, 0x373uLL);
  v78 = *(int *)(v70 + 40);
  v79 = (char *)(v68 + v78);
  v80 = &v69[v78];
  v81 = type metadata accessor for ActionInternalPB(0);
  v82 = *(_QWORD *)(v81 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
  {
    v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    *v79 = *v80;
    v87 = *(int *)(v81 + 20);
    __srcd = &v79[v87];
    v88 = &v80[v87];
    v89 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(__srcd, v88, v89);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  }
  v90 = __dsta[11];
  v91 = (char *)(v68 + v90);
  v92 = &v69[v90];
  v93 = type metadata accessor for UnsureInternalPB(0);
  v94 = *(_QWORD *)(v93 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
  {
    v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
  }
  else
  {
    v96 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v91, v92, v96);
    *(_QWORD *)&v91[*(int *)(v93 + 20)] = *(_QWORD *)&v92[*(int *)(v93 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
  }
  v97 = __dsta[12];
  v98 = (char *)(v68 + v97);
  v99 = &v69[v97];
  v100 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v101 = *(_QWORD *)(v100 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
  {
    v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
  }
  else
  {
    v103 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v98, v99, v103);
    *(_QWORD *)&v98[*(int *)(v100 + 20)] = *(_QWORD *)&v99[*(int *)(v100 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
  }
  v104 = __dsta[13];
  v105 = (_QWORD *)(v68 + v104);
  v106 = &v69[v104];
  v107 = type metadata accessor for HomePinchInternalPB(0);
  v108 = *(_QWORD *)(v107 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
  {
    v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
  }
  else
  {
    *v105 = *(_QWORD *)v106;
    v110 = *(int *)(v107 + 20);
    __srce = (char *)v105 + v110;
    v111 = &v106[v110];
    v112 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 32))(__srce, v111, v112);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
  }
  *(_QWORD *)(v68 + __dsta[14]) = *(_QWORD *)&v69[__dsta[14]];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v71 + 56))(v68, 0, 1);
  v5 = v268;
LABEL_82:
  v169 = v21[25];
  v170 = &v8[v169];
  v171 = &v9[v169];
  *(_QWORD *)v170 = *(_QWORD *)v171;
  v170[8] = v171[8];
  *(_QWORD *)&v8[v21[26]] = *(_QWORD *)&v9[v21[26]];
  swift_bridgeObjectRelease();
  v172 = v21[27];
  v173 = &v8[v172];
  v174 = &v9[v172];
  *(_QWORD *)v173 = *(_QWORD *)v174;
  v173[8] = v174[8];
  v175 = v21[28];
  v176 = &v8[v175];
  v177 = &v9[v175];
  *((_WORD *)v176 + 24) = *((_WORD *)v177 + 24);
  v178 = *((_OWORD *)v177 + 2);
  v179 = *(_OWORD *)v177;
  *((_OWORD *)v176 + 1) = *((_OWORD *)v177 + 1);
  *((_OWORD *)v176 + 2) = v178;
  *(_OWORD *)v176 = v179;
  *(_QWORD *)&v8[v21[29]] = *(_QWORD *)&v9[v21[29]];
  swift_bridgeObjectRelease();
  v180 = v21[30];
  v181 = &v8[v180];
  v182 = &v9[v180];
  v181[8] = v182[8];
  *(_QWORD *)v181 = *(_QWORD *)v182;
  v183 = v21[31];
  v184 = &v8[v183];
  v185 = &v9[v183];
  if (*(_QWORD *)&v8[v183])
  {
    if (*(_QWORD *)v185)
    {
      *(_QWORD *)v184 = *(_QWORD *)v185;
      swift_bridgeObjectRelease();
      *((_QWORD *)v184 + 1) = *((_QWORD *)v185 + 1);
      swift_bridgeObjectRelease();
      *((_QWORD *)v184 + 2) = *((_QWORD *)v185 + 2);
      swift_bridgeObjectRelease();
      *((_QWORD *)v184 + 3) = *((_QWORD *)v185 + 3);
      swift_bridgeObjectRelease();
      *((_QWORD *)v184 + 4) = *((_QWORD *)v185 + 4);
      swift_bridgeObjectRelease();
      *((_QWORD *)v184 + 5) = *((_QWORD *)v185 + 5);
      swift_bridgeObjectRelease();
      *((_QWORD *)v184 + 6) = *((_QWORD *)v185 + 6);
      swift_bridgeObjectRelease();
      goto LABEL_87;
    }
    outlined destroy of ObjectInteractionData((uint64_t)v184);
  }
  v186 = *((_OWORD *)v185 + 1);
  *(_OWORD *)v184 = *(_OWORD *)v185;
  *((_OWORD *)v184 + 1) = v186;
  *((_OWORD *)v184 + 2) = *((_OWORD *)v185 + 2);
  *((_QWORD *)v184 + 6) = *((_QWORD *)v185 + 6);
LABEL_87:
  v187 = v21[32];
  v188 = &v8[v187];
  v189 = &v9[v187];
  *(_QWORD *)v188 = *(_QWORD *)v189;
  *((_QWORD *)v188 + 1) = *((_QWORD *)v189 + 1);
  *((_QWORD *)v188 + 2) = *((_QWORD *)v189 + 2);
  *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
  *((_QWORD *)v188 + 6) = *((_QWORD *)v189 + 6);
  v188[56] = v189[56];
  *(_QWORD *)(v188 + 60) = *(_QWORD *)(v189 + 60);
  v188[68] = v189[68];
  v188[69] = v189[69];
  v190 = v21[33];
  v191 = &v8[v190];
  v192 = &v9[v190];
  *(_QWORD *)v191 = *(_QWORD *)v192;
  v191[8] = v192[8];
  v193 = v21[34];
  v194 = &v8[v193];
  v195 = &v9[v193];
  *(_DWORD *)v194 = *(_DWORD *)v195;
  *((_QWORD *)v194 + 1) = *((_QWORD *)v195 + 1);
  swift_bridgeObjectRelease();
  v196 = v21[35];
  v197 = &v8[v196];
  v198 = &v9[v196];
  v199 = *(_OWORD *)&v9[v196 + 16];
  *(_OWORD *)v197 = *(_OWORD *)&v9[v196];
  *((_OWORD *)v197 + 1) = v199;
  v200 = *(_OWORD *)&v9[v196 + 48];
  *((_OWORD *)v197 + 2) = *(_OWORD *)&v9[v196 + 32];
  *((_OWORD *)v197 + 3) = v200;
  *((_DWORD *)v197 + 16) = *(_DWORD *)&v9[v196 + 64];
  v201 = *(_OWORD *)&v9[v196 + 96];
  *((_OWORD *)v197 + 5) = *(_OWORD *)&v9[v196 + 80];
  *((_OWORD *)v197 + 6) = v201;
  v202 = *(_OWORD *)&v9[v196 + 128];
  *((_OWORD *)v197 + 7) = *(_OWORD *)&v9[v196 + 112];
  *((_OWORD *)v197 + 8) = v202;
  v203 = (uint64_t)&v8[v196 + 144];
  v205 = (uint64_t)&v9[v196 + 144];
  v204 = *(_QWORD *)v205;
  if (*(_QWORD *)v203)
  {
    if (v204)
    {
      *((_QWORD *)v197 + 18) = v204;
      swift_bridgeObjectRelease();
      *((_QWORD *)v197 + 19) = *((_QWORD *)v198 + 19);
      swift_bridgeObjectRelease();
      v206 = *((_OWORD *)v198 + 11);
      *((_OWORD *)v197 + 10) = *((_OWORD *)v198 + 10);
      *((_OWORD *)v197 + 11) = v206;
      v207 = *((_OWORD *)v198 + 13);
      *((_OWORD *)v197 + 12) = *((_OWORD *)v198 + 12);
      *((_OWORD *)v197 + 13) = v207;
      v208 = *((_OWORD *)v198 + 15);
      *((_OWORD *)v197 + 14) = *((_OWORD *)v198 + 14);
      *((_OWORD *)v197 + 15) = v208;
      v197[256] = v198[256];
      v197[257] = v198[257];
      *((_DWORD *)v197 + 65) = *((_DWORD *)v198 + 65);
      goto LABEL_92;
    }
    outlined destroy of HandPose(v203);
  }
  v209 = *(_OWORD *)(v205 + 80);
  *(_OWORD *)(v203 + 64) = *(_OWORD *)(v205 + 64);
  *(_OWORD *)(v203 + 80) = v209;
  *(_OWORD *)(v203 + 96) = *(_OWORD *)(v205 + 96);
  *(_QWORD *)(v203 + 112) = *(_QWORD *)(v205 + 112);
  v210 = *(_OWORD *)(v205 + 16);
  *(_OWORD *)v203 = *(_OWORD *)v205;
  *(_OWORD *)(v203 + 16) = v210;
  v211 = *(_OWORD *)(v205 + 48);
  *(_OWORD *)(v203 + 32) = *(_OWORD *)(v205 + 32);
  *(_OWORD *)(v203 + 48) = v211;
LABEL_92:
  v212 = *((_QWORD *)v198 + 34);
  *((_QWORD *)v197 + 33) = *((_QWORD *)v198 + 33);
  *((_QWORD *)v197 + 34) = v212;
  v213 = v21[36];
  v214 = &v8[v213];
  v215 = &v9[v213];
  v216 = type metadata accessor for PartialHandMultiCam(0);
  v217 = *(_QWORD *)(v216 - 8);
  v218 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v217 + 48);
  v219 = v218(v214, 1, v216);
  v220 = v218(v215, 1, v216);
  if (!v219)
  {
    if (!v220)
    {
      *(_QWORD *)v214 = *(_QWORD *)v215;
      swift_bridgeObjectRelease();
      *((_QWORD *)v214 + 1) = *((_QWORD *)v215 + 1);
      swift_bridgeObjectRelease();
      v250 = *(int *)(v216 + 24);
      v251 = &v214[v250];
      v252 = &v215[v250];
      v253 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v253 - 8) + 40))(v251, v252, v253);
      goto LABEL_98;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v214, type metadata accessor for PartialHandMultiCam);
    goto LABEL_97;
  }
  if (v220)
  {
LABEL_97:
    v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
    goto LABEL_98;
  }
  *(_OWORD *)v214 = *(_OWORD *)v215;
  v221 = *(int *)(v216 + 24);
  v222 = &v214[v221];
  v223 = &v215[v221];
  v224 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v224 - 8) + 32))(v222, v223, v224);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
LABEL_98:
  v226 = v21[37];
  v227 = &v8[v226];
  v228 = &v9[v226];
  *v227 = *v228;
  *((_DWORD *)v227 + 1) = *((_DWORD *)v228 + 1);
  v227[8] = v228[8];
  v229 = v21[38];
  v230 = &v8[v229];
  v231 = &v9[v229];
  *v230 = *v231;
  v230[1] = v231[1];
  v230[2] = v231[2];
  v230[3] = v231[3];
  *((_QWORD *)v230 + 1) = *((_QWORD *)v231 + 1);
  v230[16] = v231[16];
  v232 = *((_QWORD *)v231 + 3);
  v230[32] = v231[32];
  *((_QWORD *)v230 + 3) = v232;
  v233 = *((_QWORD *)v231 + 5);
  v230[48] = v231[48];
  *((_QWORD *)v230 + 5) = v233;
  v230[49] = v231[49];
  v230[50] = v231[50];
  v230[51] = v231[51];
  v230[52] = v231[52];
  v234 = v270[9];
  v235 = v270[10];
  v236 = (_OWORD *)((char *)v5 + v234);
  v237 = (_OWORD *)((char *)v271 + v234);
  *v236 = *v237;
  *(_OWORD *)((char *)v236 + 9) = *(_OWORD *)((char *)v237 + 9);
  v238 = (_QWORD *)((char *)v5 + v235);
  v239 = (_QWORD *)((char *)v271 + v235);
  *v238 = *v239;
  v238[1] = v239[1];
  v238[2] = v239[2];
  v240 = v270[12];
  *((_BYTE *)v5 + v270[11]) = *((_BYTE *)v271 + v270[11]);
  v241 = (char *)v5 + v240;
  v242 = (char *)v271 + v240;
  *v241 = *v242;
  v241[1] = v242[1];
  v241[2] = v242[2];
  v241[3] = v242[3];
  *((_QWORD *)v241 + 1) = *((_QWORD *)v242 + 1);
  *((_DWORD *)v241 + 4) = *((_DWORD *)v242 + 4);
  *((_QWORD *)v241 + 3) = *((_QWORD *)v242 + 3);
  v243 = *((_OWORD *)v242 + 3);
  *((_OWORD *)v241 + 2) = *((_OWORD *)v242 + 2);
  *((_OWORD *)v241 + 3) = v243;
  *((_OWORD *)v241 + 4) = *((_OWORD *)v242 + 4);
  *((_QWORD *)v241 + 10) = *((_QWORD *)v242 + 10);
  *((_DWORD *)v241 + 22) = *((_DWORD *)v242 + 22);
  v244 = *((_OWORD *)v242 + 7);
  *((_OWORD *)v241 + 6) = *((_OWORD *)v242 + 6);
  *((_OWORD *)v241 + 7) = v244;
  *((_OWORD *)v241 + 8) = *((_OWORD *)v242 + 8);
  v241[144] = v242[144];
  v241[145] = v242[145];
  *((_QWORD *)v241 + 19) = *((_QWORD *)v242 + 19);
  v245 = *((_OWORD *)v242 + 11);
  *((_OWORD *)v241 + 10) = *((_OWORD *)v242 + 10);
  *((_OWORD *)v241 + 11) = v245;
  *((_QWORD *)v241 + 24) = *((_QWORD *)v242 + 24);
  v246 = v270[13];
  v247 = (char *)v5 + v246;
  v248 = (char *)v271 + v246;
  *(_QWORD *)v247 = *(_QWORD *)v248;
  v247[8] = v248[8];
  return v5;
}

uint64_t getEnumTagSinglePayload for RecoverRepetitivePinch.shouldRecoverImplementationInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8E5550(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for HandDescriptor();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RecoverRepetitivePinch.shouldRecoverImplementationInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D8E55D8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for HandDescriptor();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for RecoverRepetitivePinch.shouldRecoverImplementationInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RecoverRepetitivePinch.shouldRecoverImplementationInput);
}

uint64_t VideoDataStructs.CameraTrackInfo.streamName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void VideoDataStructs.CameraTrackInfo.camera.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t VideoDataStructs.CameraTrackInfo.hasFrameID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t VideoDataStructs.CameraTrackInfo.isUnwarped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t VideoDataStructs.CameraTrackInfo.isPyramid.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 27);
}

uint64_t VideoDataStructs.CameraTrackInfo.isBinned.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 28);
}

double VideoDataStructs.CameraTrackInfo.imageSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t VideoDataStructs.CameraTrackInfo.init(streamName:hasFrameID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String_optional v10;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  Swift::String v17;
  Swift::String v18;
  Swift::Bool v19;
  Swift::String v20;
  Swift::String v21;
  Swift::Bool v22;
  Swift::String v23;
  Swift::Bool v24;
  Swift::String v25;
  double v26;
  uint64_t result;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v7 = String.lowercased()();
  v8 = 0xE000000000000000;
  v32 = 0;
  v33 = 0xE000000000000000;
  v9 = ((unint64_t)v7._object >> 56) & 0xF;
  if (((uint64_t)v7._object & 0x2000000000000000) == 0)
    v9 = v7._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v29 = v7;
  v30 = 0;
  v31 = v9;
  swift_bridgeObjectRetain();
  v10 = String.Iterator.next()();
  if (v10.value._object)
  {
    countAndFlagsBits = v10.value._countAndFlagsBits;
    object = v10.value._object;
    do
    {
      if ((countAndFlagsBits != 95 || object != (void *)0xE100000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        MEMORY[0x2426373C0](countAndFlagsBits, object);
      }
      swift_bridgeObjectRelease();
      v13 = String.Iterator.next()();
      countAndFlagsBits = v13.value._countAndFlagsBits;
      object = v13.value._object;
    }
    while (v13.value._object);
    v14 = v32;
    v8 = v33;
  }
  else
  {
    v14 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  static VideoDataStructs.CameraTrackInfo.resolveCameraSourceFromStream(from:)((uint64_t)&v29);
  swift_bridgeObjectRelease();
  v15 = v29._countAndFlagsBits;
  v16 = (char)v29._object;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 1969369715;
  v17._object = (void *)0xE400000000000000;
  if (String.hasSuffix(_:)(v17)
    || (v18._countAndFlagsBits = 0x3132753273, v18._object = (void *)0xE500000000000000, String.hasSuffix(_:)(v18)))
  {
    v19 = 1;
  }
  else
  {
    v20._countAndFlagsBits = 7680627;
    v20._object = (void *)0xE300000000000000;
    v19 = String.hasSuffix(_:)(v20);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = 1886859891;
  v21._object = (void *)0xE400000000000000;
  v22 = String.hasSuffix(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 1969369715;
  v23._object = (void *)0xE400000000000000;
  if (String.hasSuffix(_:)(v23))
  {
    v24 = 1;
  }
  else
  {
    v25._countAndFlagsBits = 2002924147;
    v25._object = (void *)0xE400000000000000;
    v24 = String.hasSuffix(_:)(v25);
  }
  swift_bridgeObjectRelease();
  v26 = specialized static VideoDataStructs.CameraTrackInfo.resolveImageSize(from:)(v14, v8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = v15;
  *(_BYTE *)(a4 + 24) = v16;
  *(_BYTE *)(a4 + 25) = a3 & 1;
  *(_BYTE *)(a4 + 26) = v19;
  *(_BYTE *)(a4 + 27) = v22;
  *(_BYTE *)(a4 + 28) = v24;
  *(double *)(a4 + 32) = v26;
  return result;
}

uint64_t static VideoDataStructs.CameraTrackInfo.resolveCameraSourceFromStream(from:)@<X0>(uint64_t a1@<X8>)
{
  Swift::String_optional v1;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t result;
  int64_t v21;

  String.lowercased()();
  swift_bridgeObjectRetain();
  v1 = String.Iterator.next()();
  if (v1.value._object)
  {
    countAndFlagsBits = v1.value._countAndFlagsBits;
    object = v1.value._object;
    do
    {
      if ((countAndFlagsBits != 95 || object != (void *)0xE100000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        MEMORY[0x2426373C0](countAndFlagsBits, object);
      }
      swift_bridgeObjectRelease();
      v4 = String.Iterator.next()();
      countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for _cameraSignatureDictionary != -1)
LABEL_34:
    swift_once();
  v5 = static VideoDataStructs.CameraTrackInfo._cameraSignatureDictionary;
  v6 = (char *)static VideoDataStructs.CameraTrackInfo._cameraSignatureDictionary + 64;
  v7 = 1 << *((_BYTE *)static VideoDataStructs.CameraTrackInfo._cameraSignatureDictionary + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *((_QWORD *)static VideoDataStructs.CameraTrackInfo._cameraSignatureDictionary + 8);
  v21 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v10 << 6);
LABEL_13:
    v13 = v5[7] + 16 * v12;
    v14 = *(_QWORD *)v13;
    v15 = *(_BYTE *)(v13 + 8);
    lazy protocol witness table accessor for type String and conformance String();
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      result = swift_release();
      goto LABEL_31;
    }
  }
  v16 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v16 >= v21)
    goto LABEL_30;
  v17 = *(_QWORD *)&v6[8 * v16];
  ++v10;
  if (v17)
    goto LABEL_28;
  v10 = v16 + 1;
  if (v16 + 1 >= v21)
    goto LABEL_30;
  v17 = *(_QWORD *)&v6[8 * v10];
  if (v17)
    goto LABEL_28;
  v10 = v16 + 2;
  if (v16 + 2 >= v21)
    goto LABEL_30;
  v17 = *(_QWORD *)&v6[8 * v10];
  if (v17)
  {
LABEL_28:
    v9 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v10 << 6);
    goto LABEL_13;
  }
  v18 = v16 + 3;
  if (v18 < v21)
  {
    v17 = *(_QWORD *)&v6[8 * v18];
    if (!v17)
    {
      while (1)
      {
        v10 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_33;
        if (v10 >= v21)
          goto LABEL_30;
        v17 = *(_QWORD *)&v6[8 * v10];
        ++v18;
        if (v17)
          goto LABEL_28;
      }
    }
    v10 = v18;
    goto LABEL_28;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  swift_release();
  result = String.hashValue.getter();
  v14 = result;
  v15 = 0;
LABEL_31:
  *(_QWORD *)a1 = v14;
  *(_BYTE *)(a1 + 8) = v15;
  return result;
}

uint64_t VideoDataStructs.CameraTrackInfo.at1280Resolution()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  Swift::String v4;

  v3 = *(_BYTE *)(v1 + 25);
  v4 = VideoDataStructs.CameraTrackInfo.get1280ResolutionStreamKey()();
  return VideoDataStructs.CameraTrackInfo.init(streamName:hasFrameID:)(v4._countAndFlagsBits, (uint64_t)v4._object, v3, a1);
}

Swift::String __swiftcall VideoDataStructs.CameraTrackInfo.get1280ResolutionStreamKey()()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Swift::String result;

  v2 = *v0;
  v1 = (void *)v0[1];
  v3._countAndFlagsBits = 1969369715;
  v3._object = (void *)0xE400000000000000;
  if (String.hasSuffix(_:)(v3)
    || (v4._countAndFlagsBits = 2002924147, v4._object = (void *)0xE400000000000000, String.hasSuffix(_:)(v4))
    || (v5._countAndFlagsBits = 0x3132753273, v5._object = (void *)0xE500000000000000, String.hasSuffix(_:)(v5))
    || (v6._countAndFlagsBits = 1886859891, v6._object = (void *)0xE400000000000000, String.hasSuffix(_:)(v6)))
  {
    lazy protocol witness table accessor for type String and conformance String();
    v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v1 = v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v8 = v2;
  v9 = v1;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

uint64_t VideoDataStructs.CameraTrackInfo.at640Resolution(binned:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 25);
  v6._countAndFlagsBits = 7680627;
  v6._object = (void *)0xE300000000000000;
  if (String.hasSuffix(_:)(v6)
    || (v7._countAndFlagsBits = 7811699, v7._object = (void *)0xE300000000000000, String.hasSuffix(_:)(v7)))
  {
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v4 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v9;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return VideoDataStructs.CameraTrackInfo.init(streamName:hasFrameID:)(v4, v3, v5, a1);
}

Swift::String __swiftcall VideoDataStructs.CameraTrackInfo.get640ResolutionStreamKey(binned:)(Swift::Bool binned)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Swift::String result;

  v3 = *v1;
  v2 = (void *)v1[1];
  v4._countAndFlagsBits = 7680627;
  v4._object = (void *)0xE300000000000000;
  if (String.hasSuffix(_:)(v4)
    || (v5._countAndFlagsBits = 7811699, v5._object = (void *)0xE300000000000000, String.hasSuffix(_:)(v5)))
  {
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v8 = v3;
  v9 = v2;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

void *one-time initialization function for _cameraSignatureDictionary()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for _cameraSignatureDictionary);
  static VideoDataStructs.CameraTrackInfo._cameraSignatureDictionary = result;
  return result;
}

Swift::String __swiftcall VideoDataStructs.CameraTrackInfo.getWarpedStreamKey()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v2 = *(_QWORD *)v0;
  v1 = *(void **)(v0 + 8);
  if (*(_BYTE *)(v0 + 26) == 1)
  {
    lazy protocol witness table accessor for type String and conformance String();
    if ((StringProtocol.contains<A>(_:)() & 1) == 0)
      StringProtocol.contains<A>(_:)();
    v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v1 = v3;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v4 = v2;
  v5 = v1;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

Swift::String __swiftcall VideoDataStructs.CameraTrackInfo.getWarpedCalibStreamKey()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  Swift::String result;

  v1 = *(unsigned __int8 *)(v0 + 26);
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0 && v1 && (StringProtocol.contains<A>(_:)() & 1) == 0)
    StringProtocol.contains<A>(_:)();
  v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

__n128 VideoDataStructs.CameraTrackInfo.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  __n128 result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 26);
  v5 = *(_BYTE *)(v1 + 27);
  v7 = *(_QWORD *)(v1 + 32);
  Hasher.init()();
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v9;
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(HIDWORD(v7));
  return result;
}

Swift::Int VideoDataStructs.CameraTrackInfo.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _BYTE v9[88];
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 25);
  v4 = *(_BYTE *)(v0 + 26);
  v5 = *(_BYTE *)(v0 + 27);
  v6 = *(_BYTE *)(v0 + 28);
  v7 = *(_QWORD *)(v0 + 32);
  *(_OWORD *)&v9[72] = *(_OWORD *)v0;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  Hasher.init(_seed:)();
  VideoDataStructs.CameraTrackInfo.hash(into:)((uint64_t)v9);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VideoDataStructs.CameraTrackInfo()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _BYTE v9[88];
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 25);
  v4 = *(_BYTE *)(v0 + 26);
  v5 = *(_BYTE *)(v0 + 27);
  v6 = *(_BYTE *)(v0 + 28);
  v7 = *(_QWORD *)(v0 + 32);
  *(_OWORD *)&v9[72] = *(_OWORD *)v0;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  Hasher.init(_seed:)();
  VideoDataStructs.CameraTrackInfo.hash(into:)((uint64_t)v9);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VideoDataStructs.CameraTrackInfo()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _BYTE v9[88];
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 25);
  v4 = *(_BYTE *)(v0 + 26);
  v5 = *(_BYTE *)(v0 + 27);
  v6 = *(_BYTE *)(v0 + 28);
  v7 = *(_QWORD *)(v0 + 32);
  *(_OWORD *)&v9[72] = *(_OWORD *)v0;
  v10 = v1;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  Hasher.init(_seed:)();
  VideoDataStructs.CameraTrackInfo.hash(into:)((uint64_t)v9);
  return Hasher._finalize()();
}

BOOL specialized static VideoDataStructs.CameraTrackInfo.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  Swift::Int v16;
  __int128 v18;
  _BYTE v19[72];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_BYTE *)a1 + 24);
  v4 = *((_BYTE *)a1 + 25);
  v5 = *((_BYTE *)a1 + 26);
  v6 = *((_BYTE *)a1 + 27);
  v7 = *((_BYTE *)a1 + 28);
  v8 = *((_QWORD *)a1 + 4);
  v18 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *((_BYTE *)a2 + 25);
  v12 = *((_BYTE *)a2 + 26);
  v13 = *((_BYTE *)a2 + 27);
  v14 = *((_BYTE *)a2 + 28);
  v15 = *((_QWORD *)a2 + 4);
  v20 = *a1;
  v21 = v2;
  v22 = v3;
  v23 = v4;
  v24 = v5;
  v25 = v6;
  v26 = v7;
  v27 = v8;
  Hasher.init(_seed:)();
  VideoDataStructs.CameraTrackInfo.hash(into:)((uint64_t)v19);
  v16 = Hasher._finalize()();
  v20 = v18;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v25 = v13;
  v26 = v14;
  v27 = v15;
  Hasher.init(_seed:)();
  VideoDataStructs.CameraTrackInfo.hash(into:)((uint64_t)v19);
  return v16 == Hasher._finalize()();
}

uint64_t specialized static VideoDataStructs.CameraTrackInfo.createWarpedStreamKey(for:asBinned:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
    return ((uint64_t (*)(_QWORD, _QWORD))((char *)nullsub_1 + 4 * algn_23D9BDE3E[v1]))(0, 0);
  switch(v1)
  {
    case 2:
      v3 = 0x5F6C6D616364;
      return v3 & 0xFFFFFFFFFFFFLL | 0x3273000000000000;
    case 3:
      v3 = 0x5F726D616364;
      return v3 & 0xFFFFFFFFFFFFLL | 0x3273000000000000;
    case 4:
      v4 = 0x5F6C6D616364;
      return (v4 & 0xFFFFFFFFFFFFLL | 0x3273000000000000) + 15;
    case 5:
      v4 = 0x5F726D616364;
      return (v4 & 0xFFFFFFFFFFFFLL | 0x3273000000000000) + 15;
    case 6:
      v5 = 0x5F6C6D616364;
      goto LABEL_12;
    case 7:
      v5 = 0x5F726D616364;
LABEL_12:
      result = (v5 & 0xFFFFFFFFFFFFLL | 0x3273000000000000) + 6;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

double specialized static VideoDataStructs.CameraTrackInfo.resolveImageSize(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  int32x2_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  char v16;
  void (*v17)(char *, uint64_t);
  char v18;
  char v19;
  Swift::String v20;
  Swift::String v21;
  unsigned int v22;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9._countAndFlagsBits = 1886859891;
  v9._object = (void *)0xE400000000000000;
  if (String.hasSuffix(_:)(v9))
  {
    v10 = (int32x2_t)0x46000000280;
  }
  else
  {
    v11._countAndFlagsBits = 0x642E63697274656DLL;
    v11._object = (void *)0xEC00000068747065;
    if (String.hasSuffix(_:)(v11))
    {
      v10 = (int32x2_t)0x10000000140;
    }
    else
    {
      v12._countAndFlagsBits = 0xD000000000000021;
      v12._object = (void *)0x800000023D9D7D40;
      v10 = (int32x2_t)0x80000000A0;
      if (!String.hasSuffix(_:)(v12))
      {
        v13._countAndFlagsBits = 0xD000000000000023;
        v13._object = (void *)0x800000023D9D7D70;
        if (!String.hasSuffix(_:)(v13))
        {
          v14._countAndFlagsBits = 0x6369746E616D6573;
          v14._object = (void *)0xEE006C6562616C2ELL;
          if (!String.hasSuffix(_:)(v14))
          {
            v15._object = (void *)0x800000023D9C4020;
            v15._countAndFlagsBits = 0xD000000000000015;
            if (!String.hasSuffix(_:)(v15))
            {
              v26 = a1;
              v27 = a2;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring));
              Regex.init(_regexString:version:)();
              lazy protocol witness table accessor for type String and conformance String();
              lazy protocol witness table accessor for type Regex<(Substring, Substring)> and conformance Regex<A>();
              v16 = BidirectionalCollection<>.contains<A>(_:)();
              v17 = *(void (**)(char *, uint64_t))(v5 + 8);
              v17(v8, v4);
              v10 = (int32x2_t)0x10000000140;
              if ((v16 & 1) == 0)
              {
                v26 = a1;
                v27 = a2;
                Regex.init(_regexString:version:)();
                v18 = BidirectionalCollection<>.contains<A>(_:)();
                v17(v8, v4);
                if ((v18 & 1) != 0)
                {
                  v10 = (int32x2_t)0x40000000500;
                }
                else
                {
                  v26 = a1;
                  v27 = a2;
                  Regex.init(_regexString:version:)();
                  v19 = BidirectionalCollection<>.contains<A>(_:)();
                  v17(v8, v4);
                  if ((v19 & 1) != 0)
                  {
                    v10 = (int32x2_t)0x2C000000360;
                  }
                  else
                  {
                    v20._countAndFlagsBits = 1969369715;
                    v20._object = (void *)0xE400000000000000;
                    if (String.hasSuffix(_:)(v20)
                      || (v21._countAndFlagsBits = 2002924147,
                          v21._object = (void *)0xE400000000000000,
                          String.hasSuffix(_:)(v21)))
                    {
                      v22 = 640;
                    }
                    else
                    {
                      v24._countAndFlagsBits = 0x3132753273;
                      v24._object = (void *)0xE500000000000000;
                      v22 = 640;
                      if (!String.hasSuffix(_:)(v24))
                      {
                        v25._countAndFlagsBits = 1886859891;
                        v25._object = (void *)0xE400000000000000;
                        if (String.hasSuffix(_:)(v25))
                          v22 = 640;
                        else
                          v22 = 1280;
                      }
                    }
                    v10 = vdup_n_s32(v22);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return *(double *)&v10;
}

unint64_t lazy protocol witness table accessor for type VideoDataStructs.CameraTrackInfo and conformance VideoDataStructs.CameraTrackInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VideoDataStructs.CameraTrackInfo and conformance VideoDataStructs.CameraTrackInfo;
  if (!lazy protocol witness table cache variable for type VideoDataStructs.CameraTrackInfo and conformance VideoDataStructs.CameraTrackInfo)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for VideoDataStructs.CameraTrackInfo, &type metadata for VideoDataStructs.CameraTrackInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoDataStructs.CameraTrackInfo and conformance VideoDataStructs.CameraTrackInfo);
  }
  return result;
}

uint64_t initializeWithCopy for VideoDataStructs.CameraTrackInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VideoDataStructs.CameraTrackInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for VideoDataStructs.CameraTrackInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoDataStructs.CameraTrackInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoDataStructs.CameraTrackInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoDataStructs.CameraTrackInfo()
{
  return &type metadata for VideoDataStructs.CameraTrackInfo;
}

unint64_t lazy protocol witness table accessor for type Regex<(Substring, Substring)> and conformance Regex<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Regex<(Substring, Substring)> and conformance Regex<A>;
  if (!lazy protocol witness table cache variable for type Regex<(Substring, Substring)> and conformance Regex<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE7460], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Regex<(Substring, Substring)> and conformance Regex<A>);
  }
  return result;
}

uint64_t type metadata completion function for PinchCache()
{
  return swift_initClassMetadata2();
}

uint64_t PinchCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PinchCache);
}

uint64_t ScrollCache.addTemplates(_:_:_:_:_:_:_:)(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int8 v51[4];
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  int v62;
  char v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  int v68;
  char v69;
  int v70;
  char v71;
  int v72;
  char v73;
  int v74;
  char v75;
  int v76;
  __int16 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v81;
  int v82;
  char v83;
  int v84;
  char v85;
  int v86;
  char v87;
  int v88;
  char v89;
  int v90;
  char v91;
  int v92;
  __int16 v93;
  _OWORD __dst[17];
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  _BYTE v114[272];
  _BYTE v115[272];
  _OWORD __src[18];

  v11 = *(_QWORD *)(result + 16);
  if (v11 != a2 || v11 <= a4)
    return result;
  v13 = a3;
  if ((a3 & 0x8000000000000000) != 0)
    return result;
  v14 = v10;
  v21 = result;
  result = TntSingleHandSubsequence.getScrollDirection(_:_:)(a3, a4, result);
  if ((v23 & 1) != 0)
    return result;
  v24 = v22;
  v48 = result;
  v25 = type metadata accessor for PinchRecoveryAnalytics();
  v26 = a4;
  v27 = (unsigned __int8 *)v25;
  static PinchRecoveryAnalytics.buildAnalyticData(_:_:_:_:_:)(1uLL, a8 & 1, v13, v26, v21, (uint64_t)v114);
  outlined init with take of PinchRecoveryAnalyticsData?((uint64_t)v114, (uint64_t)v115);
  outlined init with take of PinchRecoveryAnalyticsData?((uint64_t)v115, (uint64_t)__src);
  result = _s5Hands19RecoverTapPinchDataVSgWOgTm((uint64_t)__src);
  if ((_DWORD)result == 1)
    return result;
  if (a2 <= v13)
  {
    __break(1u);
    goto LABEL_16;
  }
  v28 = v21 + 592 * v13;
  v29 = *(_OWORD *)(v28 + 256);
  v30 = *(_OWORD *)(v28 + 272);
  v27 = v51;
  v31 = *(_OWORD *)(v28 + 288);
  v32 = *(_OWORD *)(v28 + 304);
  v33 = *(_OWORD *)(v28 + 320);
  v34 = *(_BYTE *)(v28 + 336);
  v35 = *(_BYTE *)(v28 + 337);
  v36 = *(_DWORD *)(v28 + 340);
  v37 = *(_OWORD *)(v28 + 240);
  __dst[0] = *(_OWORD *)(v28 + 224);
  __dst[1] = v37;
  __dst[2] = v29;
  __dst[3] = v30;
  __dst[4] = v31;
  __dst[5] = v32;
  __dst[6] = v33;
  LOBYTE(__dst[7]) = v34;
  BYTE1(__dst[7]) = v35;
  DWORD1(__dst[7]) = v36;
  specialized static RepetitivePinchBasicFeature.handPalmNormalForRepetitivePinch(_:)((uint64_t)__dst);
  v47 = v38;
  v39 = *(_QWORD *)(v28 + 232);
  if (*(_QWORD *)(v39 + 16) < 7uLL)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v45 = HIDWORD(a6);
  v46 = *(_OWORD *)(v39 + 240);
  memcpy(__dst, __src, 0x10AuLL);
  v113 = BYTE12(__src[1]);
  v112 = BYTE8(__src[3]);
  v111 = BYTE8(__src[4]);
  v110 = BYTE8(__src[5]);
  v109 = __src[6];
  v108 = BYTE8(__src[6]);
  v107 = BYTE8(__src[7]);
  v106 = __src[8];
  v105 = BYTE8(__src[8]);
  v104 = __src[9];
  v103 = BYTE8(__src[9]);
  v102 = __src[10];
  v101 = BYTE8(__src[13]);
  v100 = __src[14];
  v99 = BYTE8(__src[14]);
  v98 = __src[15];
  v97 = BYTE8(__src[15]);
  v96 = __src[16];
  v95 = BYTE8(__src[16]);
  v51[0] = 6;
  v51[1] = BYTE1(__src[0]);
  v53 = *(_QWORD *)((char *)&__src[1] + 4);
  v54 = BYTE12(__src[1]);
  v78 = *(_OWORD *)((char *)&__src[10] + 8);
  v79 = *(_OWORD *)((char *)&__src[11] + 8);
  v80 = *(_OWORD *)((char *)&__src[12] + 8);
  v56 = *(_QWORD *)&__src[3];
  v57 = BYTE8(__src[3]);
  v58 = *(_QWORD *)&__src[4];
  v59 = BYTE8(__src[4]);
  v60 = *(_QWORD *)&__src[5];
  v61 = BYTE8(__src[5]);
  v62 = HIDWORD(__src[5]);
  v63 = __src[6];
  v64 = DWORD1(__src[6]);
  v65 = BYTE8(__src[6]);
  v66 = *(_QWORD *)&__src[7];
  v67 = BYTE8(__src[7]);
  v68 = HIDWORD(__src[7]);
  v69 = __src[8];
  v70 = DWORD1(__src[8]);
  v71 = BYTE8(__src[8]);
  v72 = HIDWORD(__src[8]);
  v73 = __src[9];
  v74 = DWORD1(__src[9]);
  v75 = BYTE8(__src[9]);
  v76 = HIDWORD(__src[9]);
  v77 = __src[10];
  v81 = BYTE8(__src[13]);
  v82 = HIDWORD(__src[13]);
  v83 = __src[14];
  v84 = DWORD1(__src[14]);
  v85 = BYTE8(__src[14]);
  v86 = HIDWORD(__src[14]);
  v87 = __src[15];
  v88 = DWORD1(__src[15]);
  v89 = BYTE8(__src[15]);
  v90 = HIDWORD(__src[15]);
  v91 = __src[16];
  v52 = *(_OWORD *)((char *)__src + 4);
  v92 = DWORD1(__src[16]);
  v93 = WORD4(__src[16]);
  v40 = *(_BYTE *)(a10 + 16);
  v55 = __src[2];
  swift_beginAccess();
  specialized static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(v40, v51, a10 + 24, a9 + 8);
  swift_endAccess();
  v27 = (unsigned __int8 *)(v14 + 16);
  swift_beginAccess();
  v13 = *(_QWORD *)(v14 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v14 + 16) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_17:
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, (_QWORD *)v13);
    *(_QWORD *)v27 = v13;
  }
  v43 = *(_QWORD *)(v13 + 16);
  v42 = *(_QWORD *)(v13 + 24);
  if (v43 >= v42 >> 1)
  {
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, (_QWORD *)v13);
    *(_QWORD *)v27 = v13;
  }
  *(_QWORD *)(v13 + 16) = v43 + 1;
  v44 = v13 + 352 * v43;
  memcpy((void *)(v44 + 32), __dst, 0x10CuLL);
  *(_QWORD *)(v44 + 300) = a5;
  *(_DWORD *)(v44 + 308) = a6;
  *(_DWORD *)(v44 + 312) = v45;
  *(_QWORD *)(v44 + 316) = a7;
  *(_QWORD *)(v44 + 324) = v49;
  *(_DWORD *)(v44 + 332) = v50;
  *(_OWORD *)(v44 + 336) = v47;
  *(_OWORD *)(v44 + 352) = v46;
  *(_QWORD *)(v44 + 368) = v48;
  *(_QWORD *)(v44 + 376) = v24;
  return swift_endAccess();
}

uint64_t type metadata accessor for ScrollCache(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ScrollCache);
}

uint64_t TapCache.addTemplates(_:_:_:_:_:_:_:)(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  char v31;
  int v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;
  int v44;
  __int128 v45;
  char v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  unsigned __int8 v57[4];
  __int128 v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  int v68;
  char v69;
  int v70;
  char v71;
  uint64_t v72;
  char v73;
  int v74;
  char v75;
  int v76;
  char v77;
  int v78;
  char v79;
  int v80;
  char v81;
  int v82;
  __int16 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;
  __int16 v88;
  char v89;
  int v90;
  char v91;
  __int16 v92;
  char v93;
  int v94;
  char v95;
  __int16 v96;
  char v97;
  int v98;
  char v99;
  __int16 v100;
  char v101;
  int v102;
  char v103;
  __int16 v104;
  char v105;
  int v106;
  char v107;
  __int16 v108;
  char v109;
  int v110;
  __int16 v111;
  _OWORD __dst[17];
  char v113;
  __int16 v114;
  char v115;
  char v116;
  __int16 v117;
  char v118;
  char v119;
  __int16 v120;
  char v121;
  char v122;
  __int16 v123;
  char v124;
  char v125;
  __int16 v126;
  char v127;
  char v128;
  __int16 v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  _BYTE v144[272];
  _BYTE v145[272];
  _OWORD __src[18];

  v11 = *(_QWORD *)(result + 16);
  if (v11 != a2 || v11 <= a4)
    return result;
  v13 = a3;
  if ((a3 & 0x8000000000000000) != 0)
    return result;
  v14 = v10;
  v21 = result;
  v22 = type metadata accessor for PinchRecoveryAnalytics();
  v23 = a4;
  v24 = v22;
  static PinchRecoveryAnalytics.buildAnalyticData(_:_:_:_:_:)(2uLL, a8 & 1, v13, v23, v21, (uint64_t)v144);
  outlined init with take of PinchRecoveryAnalyticsData?((uint64_t)v144, (uint64_t)v145);
  outlined init with take of PinchRecoveryAnalyticsData?((uint64_t)v145, (uint64_t)__src);
  result = _s5Hands19RecoverTapPinchDataVSgWOgTm((uint64_t)__src);
  if ((_DWORD)result == 1)
    return result;
  if (a2 <= v13)
  {
    __break(1u);
    goto LABEL_15;
  }
  v24 = v21 + 592 * v13;
  v25 = *(_OWORD *)(v24 + 256);
  v26 = *(_OWORD *)(v24 + 272);
  v13 = v24 + 224;
  v27 = *(_OWORD *)(v24 + 288);
  v28 = *(_OWORD *)(v24 + 304);
  v29 = *(_OWORD *)(v24 + 320);
  v30 = *(_BYTE *)(v24 + 336);
  v31 = *(_BYTE *)(v24 + 337);
  v32 = *(_DWORD *)(v24 + 340);
  v33 = *(_OWORD *)(v24 + 240);
  __dst[0] = *(_OWORD *)(v24 + 224);
  __dst[1] = v33;
  __dst[2] = v25;
  __dst[3] = v26;
  __dst[4] = v27;
  __dst[5] = v28;
  __dst[6] = v29;
  LOBYTE(__dst[7]) = v30;
  BYTE1(__dst[7]) = v31;
  DWORD1(__dst[7]) = v32;
  specialized static RepetitivePinchBasicFeature.handPalmNormalForRepetitivePinch(_:)((uint64_t)__dst);
  v35 = *(_QWORD *)(v24 + 232);
  if (*(_QWORD *)(v35 + 16) < 7uLL)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v54 = v34;
  v52 = HIDWORD(a6);
  v53 = *(_OWORD *)(v35 + 240);
  v36 = *(_OWORD *)(v24 + 240);
  v37 = *(_OWORD *)(v24 + 256);
  v38 = *(_OWORD *)(v24 + 272);
  v39 = *(_OWORD *)(v24 + 288);
  v40 = *(_OWORD *)(v24 + 304);
  v41 = *(_OWORD *)(v24 + 320);
  v42 = *(_BYTE *)(v24 + 336);
  v43 = *(_BYTE *)(v24 + 337);
  v44 = *(_DWORD *)(v24 + 340);
  *(_QWORD *)&__dst[0] = *(_QWORD *)(v24 + 224);
  *((_QWORD *)&__dst[0] + 1) = v35;
  __dst[1] = v36;
  __dst[2] = v37;
  __dst[3] = v38;
  __dst[4] = v39;
  __dst[5] = v40;
  __dst[6] = v41;
  LOBYTE(__dst[7]) = v42;
  BYTE1(__dst[7]) = v43;
  DWORD1(__dst[7]) = v44;
  HandPose.getSimplifiedPinchCentroid(isRaw:)();
  v51 = v45;
  memcpy(__dst, __src, 0x10AuLL);
  v143 = BYTE12(__src[1]);
  v142 = BYTE8(__src[3]);
  v141 = BYTE8(__src[4]);
  v140 = BYTE8(__src[5]);
  v139 = __src[6];
  v138 = BYTE8(__src[6]);
  v137 = BYTE8(__src[7]);
  v136 = __src[8];
  v135 = BYTE8(__src[8]);
  v134 = __src[9];
  v133 = BYTE8(__src[9]);
  v132 = __src[10];
  v131 = BYTE8(__src[13]);
  v128 = __src[14];
  v125 = BYTE8(__src[14]);
  v122 = __src[15];
  v119 = BYTE8(__src[15]);
  v116 = __src[16];
  v113 = BYTE8(__src[16]);
  v57[0] = 7;
  v57[1] = BYTE1(__src[0]);
  v59 = *(_QWORD *)((char *)&__src[1] + 4);
  v60 = BYTE12(__src[1]);
  v88 = v129;
  v92 = v126;
  v96 = v123;
  v100 = v120;
  v104 = v117;
  v84 = *(_OWORD *)((char *)&__src[10] + 8);
  v85 = *(_OWORD *)((char *)&__src[11] + 8);
  v86 = *(_OWORD *)((char *)&__src[12] + 8);
  v62 = *(_QWORD *)&__src[3];
  v63 = BYTE8(__src[3]);
  v64 = *(_QWORD *)&__src[4];
  v65 = BYTE8(__src[4]);
  v66 = *(_QWORD *)&__src[5];
  v67 = BYTE8(__src[5]);
  v68 = HIDWORD(__src[5]);
  v69 = __src[6];
  v70 = DWORD1(__src[6]);
  v71 = BYTE8(__src[6]);
  v72 = *(_QWORD *)&__src[7];
  v73 = BYTE8(__src[7]);
  v74 = HIDWORD(__src[7]);
  v75 = __src[8];
  v76 = DWORD1(__src[8]);
  v77 = BYTE8(__src[8]);
  v78 = HIDWORD(__src[8]);
  v79 = __src[9];
  v80 = DWORD1(__src[9]);
  v81 = BYTE8(__src[9]);
  v82 = HIDWORD(__src[9]);
  v83 = __src[10];
  v87 = BYTE8(__src[13]);
  v89 = v130;
  v90 = HIDWORD(__src[13]);
  v91 = __src[14];
  v93 = v127;
  v94 = DWORD1(__src[14]);
  v95 = BYTE8(__src[14]);
  v97 = v124;
  v98 = HIDWORD(__src[14]);
  v99 = __src[15];
  v101 = v121;
  v102 = DWORD1(__src[15]);
  v103 = BYTE8(__src[15]);
  v105 = v118;
  v108 = v114;
  v106 = HIDWORD(__src[15]);
  v107 = __src[16];
  v109 = v115;
  v58 = *(_OWORD *)((char *)__src + 4);
  v110 = DWORD1(__src[16]);
  v111 = WORD4(__src[16]);
  v46 = *(_BYTE *)(a10 + 16);
  v61 = __src[2];
  swift_beginAccess();
  specialized static PinchRecoveryAnalytics.sendCoreAnalytics(_:_:_:_:)(v46, v57, a10 + 24, a9 + 8);
  swift_endAccess();
  v24 = v14 + 16;
  swift_beginAccess();
  v13 = *(_QWORD *)(v14 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v14 + 16) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_16:
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, (_QWORD *)v13);
    *(_QWORD *)v24 = v13;
  }
  v49 = *(_QWORD *)(v13 + 16);
  v48 = *(_QWORD *)(v13 + 24);
  if (v49 >= v48 >> 1)
  {
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, (_QWORD *)v13);
    *(_QWORD *)v24 = v13;
  }
  *(_QWORD *)(v13 + 16) = v49 + 1;
  v50 = v13 + 352 * v49;
  memcpy((void *)(v50 + 32), __dst, 0x10CuLL);
  *(_QWORD *)(v50 + 300) = a5;
  *(_DWORD *)(v50 + 308) = a6;
  *(_DWORD *)(v50 + 312) = v52;
  *(_QWORD *)(v50 + 316) = a7;
  *(_QWORD *)(v50 + 324) = v55;
  *(_DWORD *)(v50 + 332) = v56;
  *(_OWORD *)(v50 + 336) = v54;
  *(_OWORD *)(v50 + 352) = v53;
  *(_OWORD *)(v50 + 368) = v51;
  return swift_endAccess();
}

uint64_t type metadata accessor for TapCache(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TapCache);
}

uint64_t type metadata completion function for ScrollCache()
{
  return swift_initClassMetadata2();
}

void CrossedPinch.updateAccidentalStates(_:_:)(float32x4_t *a1, unsigned __int8 a2)
{
  float32x4_t *v2;
  uint64_t v3;
  CMTimeValue v4;
  CMTimeEpoch v5;
  __int8 v6;
  uint64_t v7;
  uint64_t v8;
  CMTimeEpoch v9;
  uint64_t v10;
  CMTimeValue v11;
  double Seconds;
  float v13;
  float v14;
  CMTime time;

  v4 = a1[3].i64[0];
  v3 = a1[3].i64[1];
  v5 = a1[4].i64[0];
  v6 = a1[4].i8[8];
  if (a2 - 3 <= 1)
  {
    v8 = a1[5].i64[0];
    v7 = a1[5].i64[1];
    if (v2[1].f32[1] < specialized static PinchGestureHelper.similarity(_:_:)(v2[2], a1[8])
      && !(v6 & 1 | ((v2[3].i8[0] & 1) == 0)))
    {
      v2[4].i64[0] = v8;
      v2[4].i64[1] = v7;
      v2[5].i64[0] = v4;
      v2[5].i64[1] = v3;
      v2[6].i64[0] = v5;
      v2[6].i8[8] = 0;
    }
  }
  if ((v2[6].i8[8] & 1) == 0 && (v6 & 1) == 0)
  {
    v10 = v2[5].i64[1];
    v9 = v2[6].i64[0];
    v11 = v2[5].i64[0];
    if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
    {
      time.value = v4;
      *(_QWORD *)&time.timescale = v3;
      time.epoch = v5;
      Seconds = CMTimeGetSeconds(&time);
      time.value = v11;
      *(_QWORD *)&time.timescale = v10;
      time.epoch = v9;
      v13 = Seconds - CMTimeGetSeconds(&time);
      v14 = fabsf(v13);
    }
    else
    {
      v14 = INFINITY;
    }
    if (v2[3].f32[1] < v14)
    {
      v2[6].i64[0] = 0;
      v2[4] = 0u;
      v2[5] = 0u;
      v2[6].i8[8] = 1;
    }
  }
}

uint64_t CrossedPinch.checkIfAccidental(_:_:)(uint64_t result, uint64_t a2, double a3, float32x4_t a4)
{
  float32x2_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unint64_t v13;
  float32x2_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  float32x4_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v32;
  float v33;
  float32x4_t v34;
  float v35;
  float32x2_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;

  if ((*(_BYTE *)(a2 + 25) & 1) != 0)
    return 1;
  v7 = *(_QWORD *)(result + 104);
  v8 = *(float32x4_t *)(result + 144);
  if ((v4[13].i8[0] & 1) == 0)
  {
    v9 = *(int8x16_t *)(result + 80);
    v10 = v4[8];
    *(float32x2_t *)v11.f32 = vsub_f32(v10, *(float32x2_t *)v9.i8);
    *(float32x2_t *)&v11.u32[2] = vsub_f32(v4[9], (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
    v12 = vmulq_f32(v11, v11);
    a4 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)));
    if (v4[7].f32[0] >= sqrtf(a4.f32[0]))
      return 3;
  }
  v13 = *(_QWORD *)(v7 + 16);
  if (!v13)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v13 < 4)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v13 == 4)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v13 < 6)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v14 = *(float32x2_t *)(v7 + 32);
  *(float32x2_t *)a4.f32 = vsub_f32(v14, *(float32x2_t *)v8.f32);
  v15 = *(float *)(v7 + 40);
  a4.f32[2] = v15 - v8.f32[2];
  v16 = vmulq_f32(a4, a4);
  v17 = vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1));
  v16.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), v17).u32[0];
  v18 = *(float32x2_t *)(v7 + 80);
  *(float32x2_t *)v17.f32 = vsub_f32(v18, *(float32x2_t *)v8.f32);
  v19 = *(float *)(v7 + 88);
  v17.f32[2] = v19 - v8.f32[2];
  v20 = sqrtf(v16.f32[0]);
  v21 = vmulq_f32(v17, v17);
  v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
  v23 = *(float *)(v7 + 48);
  v24 = *(float *)(v7 + 52);
  v5.f32[0] = v14.f32[0] - v23;
  v25 = *(float *)(v7 + 56);
  v5.f32[1] = COERCE_FLOAT(HIDWORD(*(_QWORD *)(v7 + 32))) - v24;
  v5.f32[2] = v15 - v25;
  v26 = vmulq_f32(v5, v5);
  v27 = vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1));
  v28 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), v27).f32[0]);
  v27.f32[0] = v18.f32[0] - v23;
  v27.f32[1] = v18.f32[1] - v24;
  v27.f32[2] = v19 - v25;
  v29 = vmulq_f32(v27, v27);
  v30 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1)));
  v30.f32[0] = sqrtf(v30.f32[0]);
  if (v20 < (float)(v22 - v4[2].f32[0]) && v30.f32[0] < v28)
    return 4;
  v32 = *(float32x2_t *)(v7 + 96);
  *(float32x2_t *)v30.f32 = vsub_f32(v32, *(float32x2_t *)v8.f32);
  v33 = *(float *)(v7 + 104);
  v30.f32[2] = v33 - v8.f32[2];
  v34 = vmulq_f32(v30, v30);
  v35 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]);
  v36 = *(float32x2_t *)(v7 + 112);
  v37 = *(float *)(v7 + 120);
  result = 4;
  if (v20 >= v35
    || (v6.f32[0] = v32.f32[0] - v23,
        v6.f32[1] = v32.f32[1] - v24,
        v6.f32[2] = v33 - v25,
        v38 = vmulq_f32(v6, v6),
        sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]) >= v28))
  {
    *(float32x2_t *)v8.f32 = vsub_f32(v36, *(float32x2_t *)v8.f32);
    v8.f32[2] = v37 - v8.f32[2];
    v39 = vmulq_f32(v8, v8);
    v40 = vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1));
    v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), v40).f32[0]);
    v40.f32[0] = v36.f32[0] - v23;
    v40.f32[1] = v36.f32[1] - v24;
    v40.f32[2] = v37 - v25;
    v42 = vmulq_f32(v40, v40);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]) < v28&& v20 < v41)
    {
      return 4;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t CrossedPinch.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CrossedPinch()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for CrossedPinch.RepetitiveAccidentalStates(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CrossedPinch.RepetitiveAccidentalStates(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CrossedPinch.RepetitiveAccidentalStates()
{
  return &type metadata for CrossedPinch.RepetitiveAccidentalStates;
}

__n128 __swift_memcpy44_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CrossedPinch.ThresholdConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CrossedPinch.ThresholdConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CrossedPinch.ThresholdConfig()
{
  return &type metadata for CrossedPinch.ThresholdConfig;
}

BOOL protocol witness for PinchCancellationModule.process(_:_:) in conformance CrossedPinch(float32x4_t *a1, uint64_t a2, double a3, float32x4_t a4)
{
  unsigned __int8 v5;

  v5 = CrossedPinch.checkIfAccidental(_:_:)((uint64_t)a1, a2, a3, a4);
  CrossedPinch.updateAccidentalStates(_:_:)(a1, v5);
  return (unint64_t)v5 - 3 < 2;
}

uint64_t Frame.Timestamp.asSeconds.getter()
{
  return CMTime.seconds.getter();
}

__n128 Frame.init(frameID:masterTimestamp:midExposureTimestamp:previousFrame:)@<Q0>(unint64_t a1@<X0>, Float64 a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, Float64 a6@<D0>)
{
  char v11;
  CMTimeValue value;
  unint64_t v13;
  CMTimeEpoch epoch;
  CMTimeValue v15;
  unint64_t v16;
  CMTimeEpoch v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __n128 result;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  CMTime v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  _BYTE v40[144];

  v11 = a3 & 1;
  outlined init with take of Frame?(a4, (uint64_t)v40);
  CMTimeMakeWithSeconds(&v28, a6, 1000000);
  value = v28.value;
  v13 = *(_QWORD *)&v28.timescale;
  epoch = v28.epoch;
  if ((a3 & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    CMTimeMakeWithSeconds(&v28, a2, 1000000);
    v15 = v28.value;
    v16 = *(_QWORD *)&v28.timescale;
    v17 = v28.epoch;
  }
  outlined init with take of Frame?((uint64_t)v40, (uint64_t)&v28);
  Frame.init(frameID:masterTimestamp:midExposureTimestamp:previousFrame:)(a1, value, v13, epoch, v15, v16, v17, v11, (uint64_t)&v29, (uint64_t)&v28);
  v18 = v33;
  v19 = v34;
  v20 = v38;
  v21 = v39;
  result = v36;
  v23 = v37;
  v24 = v30;
  v25 = v35;
  v26 = v31;
  v27 = v32;
  *(_OWORD *)a5 = v29;
  *(_QWORD *)(a5 + 16) = v24;
  *(_OWORD *)(a5 + 24) = v26;
  *(_OWORD *)(a5 + 40) = v27;
  *(_BYTE *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 60) = v19;
  *(_QWORD *)(a5 + 68) = v25;
  *(__n128 *)(a5 + 76) = result;
  *(_OWORD *)(a5 + 92) = v23;
  *(_BYTE *)(a5 + 108) = v20;
  *(_QWORD *)(a5 + 112) = v21;
  return result;
}

uint64_t Frame.Timestamp.asCMTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Frame.init(frameID:masterTimestamp:midExposureTimestamp:previousFrame:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v15;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  _QWORD v46[4];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  _BYTE v53[144];

  v15 = a3;
  v19 = HIDWORD(a3);
  outlined init with take of Frame?(a10, (uint64_t)v53);
  v45 = a2;
  v44 = v15;
  v42 = a4;
  LODWORD(v43) = v19;
  if ((a8 & 1) == 0)
  {
    v45 = a5;
    v44 = a6;
    v42 = a7;
    v43 = HIDWORD(a6);
  }
  outlined init with take of Frame?((uint64_t)v53, (uint64_t)&v50);
  if (_s5Hands5FrameVSgWOg((uint64_t)&v50) == 1)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v24 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 8);
    v23 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
    v25 = *MEMORY[0x24BDC0D88];
    result = *MEMORY[0x24BDC0D88];
    v27 = v24;
    v28 = v23;
  }
  else
  {
    v41 = v19;
    v29 = v50;
    v25 = static CMTime.- infix(_:_:)();
    v24 = v30;
    v40 = v31;
    v52 = 0;
    result = static CMTime.- infix(_:_:)();
    v51 = 0;
    v22 = a1 - v29;
    if (a1 <= v29)
    {
      v47 = xmmword_23D9A7070;
      v48 = 0;
      v49 = 0;
      v46[0] = 0;
      v46[1] = 0xE000000000000000;
      v38 = v27;
      v39 = result;
      v37 = v28;
      _StringGuts.grow(_:)(78);
      v32._object = (void *)0x800000023D9D7EE0;
      v32._countAndFlagsBits = 0xD000000000000031;
      String.append(_:)(v32);
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = 0x6E65727275635B20;
      v34._object = (void *)0xEE00203D3C205D74;
      String.append(_:)(v34);
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 0x6F69766572705B20;
      v36._object = (void *)0xEB000000005D7375;
      String.append(_:)(v36);
      v46[3] = MEMORY[0x24BEE0D00];
      specialized static HLog.W(file:function:line:logArea:_:_:)(0xD00000000000004DLL, 0x800000023D9D7E90, 73, (uint64_t *)&v47, (uint64_t)v46, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v46);
      v28 = v37;
      v27 = v38;
      result = v39;
      v22 = 0;
      v21 = v52;
      v20 = v51;
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v23 = v40;
    LODWORD(v19) = v41;
  }
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 16) = v15;
  *(_DWORD *)(a9 + 20) = v19;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = v25;
  *(_QWORD *)(a9 + 40) = v24;
  *(_QWORD *)(a9 + 48) = v23;
  *(_BYTE *)(a9 + 56) = v21;
  *(_QWORD *)(a9 + 60) = v45;
  *(_DWORD *)(a9 + 68) = v44;
  *(_DWORD *)(a9 + 72) = v43;
  *(_QWORD *)(a9 + 76) = v42;
  *(_QWORD *)(a9 + 84) = result;
  *(_QWORD *)(a9 + 92) = v27;
  *(_QWORD *)(a9 + 100) = v28;
  *(_BYTE *)(a9 + 108) = v20;
  *(_QWORD *)(a9 + 112) = v22;
  return result;
}

uint64_t Frame.Timestamp.asUInt64.getter()
{
  uint64_t result;
  double v1;
  double v2;

  result = CMTime.seconds.getter();
  v2 = v1 * 1000000.0;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.84467441e19)
    return (unint64_t)v2;
LABEL_7:
  __break(1u);
  return result;
}

double Frame.Timestamp.elapsedAsSeconds.getter()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
    CMTime.seconds.getter();
  return result;
}

uint64_t Frame.Timestamp.elapsedAsCMTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t Frame.frameID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

__n128 Frame.masterTimestamp.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 16);
  result = *(__n128 *)(v1 + 24);
  v4 = *(_OWORD *)(v1 + 40);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

__n128 Frame.midExposureTimestamp.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 108);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 68);
  result = *(__n128 *)(v1 + 76);
  v4 = *(_OWORD *)(v1 + 92);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

uint64_t Frame.step.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t getEnumTagSinglePayload for Frame(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 120))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Frame(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 120) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Frame()
{
  return &type metadata for Frame;
}

__n128 __swift_memcpy49_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for Frame.Timestamp()
{
  return &type metadata for Frame.Timestamp;
}

uint64_t type metadata accessor for TwoHandOcclusionHelper()
{
  return objc_opt_self();
}

BOOL specialized static TwoHandOcclusionHelper.checkIfUpperHand(targetHandDepth:otherHandDepth:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return 0;
  if ((unint64_t)v2 < 2)
  {
    v4 = 0;
    v5 = 0.0;
LABEL_9:
    v9 = v2 - v4;
    v10 = (float *)(a1 + 4 * v4 + 32);
    do
    {
      v11 = *v10++;
      v5 = v5 + v11;
      --v9;
    }
    while (v9);
    goto LABEL_11;
  }
  v4 = v2 & 0x7FFFFFFFFFFFFFFELL;
  v7 = (float *)(a1 + 36);
  v5 = 0.0;
  v8 = v2 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v5 = (float)(v5 + *(v7 - 1)) + *v7;
    v7 += 2;
    v8 -= 2;
  }
  while (v8);
  if (v2 != v4)
    goto LABEL_9;
LABEL_11:
  v12 = (float)v2;
  if ((unint64_t)v3 >= 2)
  {
    v13 = v3 & 0x7FFFFFFFFFFFFFFELL;
    v15 = (float *)(a2 + 36);
    v14 = 0.0;
    v16 = v3 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v14 = (float)(v14 + *(v15 - 1)) + *v15;
      v15 += 2;
      v16 -= 2;
    }
    while (v16);
    if (v3 == v13)
      return (float)(v5 / v12) < (float)(v14 / (float)v3);
  }
  else
  {
    v13 = 0;
    v14 = 0.0;
  }
  v17 = v3 - v13;
  v18 = (float *)(a2 + 4 * v13 + 32);
  do
  {
    v19 = *v18++;
    v14 = v14 + v19;
    --v17;
  }
  while (v17);
  return (float)(v5 / v12) < (float)(v14 / (float)v3);
}

float specialized static TwoHandOcclusionHelper.calculateRelativePalmAngle(_:_:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float v4;
  float v5;
  float32x4_t v6;

  v2 = vmulq_f32(a1, a1);
  v3 = vmulq_f32(a2, a2);
  v4 = sqrtf(v2.f32[2] + vaddv_f32(*(float32x2_t *)v2.f32)) * sqrtf(v3.f32[2] + vaddv_f32(*(float32x2_t *)v3.f32));
  v5 = 0.0;
  if (v4 > 0.0)
  {
    v6 = vmulq_f32(a1, a2);
    return acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]/ v4)* 57.296;
  }
  return v5;
}

Swift::Void __swiftcall MakeBreakSourceHomeUI.reset()()
{
  _QWORD *v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = MEMORY[0x24BEE4AF8];
  v0[8] = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v0[9] = v1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v0[10] = v1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v0[11] = v1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v0[12] = v1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v0[13] = v1;
  swift_bridgeObjectRelease();
}

uint64_t MakeBreakSourceHomeUI.predict(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  Swift::String v18;
  uint64_t *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  _BYTE v38[32];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _BYTE v42[26];
  _OWORD v43[3];
  float v44;

  v3 = v2;
  v6 = type metadata accessor for HomePinchInternalPB(0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = 0;
  v31 = 256;
  v32 = 0;
  v33 = 256;
  v34 = 0;
  v35 = 256;
  v36 = 0;
  v37 = 256;
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  v40 = 2;
  v41 = 0u;
  memset(v42, 0, sizeof(v42));
  v29 = 0.0;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  UnknownStorage.init()();
  MakeBreakSourceHomeUI.extractFrameFeatures(_:_:)(a1, (uint64_t)&v26);
  MakeBreakSourceHomeUI.updateBufferData(_:)(&v26);
  MakeBreakSourceHomeUI.extractTemporalFeatures(_:)((uint64_t)&v26);
  v10 = 0;
  v11 = *(float *)&v26;
  v12 = *((float *)&v26 + 3);
  v13 = *((float *)&v27 + 1);
  v14 = *((float *)&v27 + 3);
  v15 = *(_QWORD *)((char *)&v28 + 4);
  v16 = v29;
  if (*((float *)&v26 + 3) > 0.3 && *((float *)&v27 + 3) > 0.05 && *(float *)&v26 < 0.15 && *((float *)&v28 + 2) < 0.1)
  {
    if (*((float *)&v27 + 1) < 0.011)
    {
      if (*((float *)&v27 + 1) >= *((float *)&v28 + 3))
      {
        v10 = 0;
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    v10 = 0;
    if (*((float *)&v28 + 1) < 0.01 && *((float *)&v27 + 1) < 0.031 && *((float *)&v27 + 1) < *((float *)&v28 + 3))
LABEL_11:
      v10 = 2 * (v29 < *(float *)(v3 + 40));
  }
LABEL_12:
  v17 = *(float *)&v28;
  v43[0] = v26;
  v43[1] = v27;
  v43[2] = v28;
  v44 = v29;
  if ((MakeBreakSourceHomeUI.isVisibleToSemiOccludedPinch(_:)((float *)v43) & 1) != 0)
    v10 |= 4uLL;
  if (v12 > 0.85 && v14 > 0.1 && v11 < 0.2 && v13 < 0.02 && v16 < *(float *)(v3 + 40))
    v10 |= 8uLL;
  if (v12 <= 0.8
    || v14 <= 0.1
    || v17 <= 0.05
    || *((float *)&v15 + 1) >= 0.3
    || *(float *)&v15 >= 0.0
    || v13 >= 0.01
    || v16 >= (float)(*(float *)(v3 + 40) * 0.5))
  {
    *v9 = v10;
    if (!v10)
      goto LABEL_30;
  }
  else
  {
    v10 |= 0x10uLL;
    *v9 = v10;
  }
  v30 = 7;
  v31 = 1;
  v22 = 0;
  v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v22 = 0xD000000000000014;
  v23 = 0x800000023D9D8130;
  v21 = v10;
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v24 = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000081, 0x800000023D9D80A0, 78, (uint64_t)&v22, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v22);
LABEL_30:
  if (MakeBreakSourceHomeUI.breakHomeUIPinch(_:)((float *)&v26))
  {
    v34 = 7;
    v35 = 1;
  }
  v24 = v6;
  v25 = lazy protocol witness table accessor for type HomePinchInternalPB and conformance HomePinchInternalPB(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
  v19 = __swift_allocate_boxed_opaque_existential_0(&v22);
  outlined init with take of HomePinchInternalPB((uint64_t)v9, (uint64_t)v19);
  outlined assign with take of PinchInternalDataType?((uint64_t)&v22, (uint64_t)v38);
  outlined init with copy of UnitResult((uint64_t)&v30, a2);
  return outlined destroy of UnitResult((uint64_t)&v30);
}

uint64_t MakeBreakSourceHomeUI.extractFrameFeatures(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  float v5;
  int v6;
  int v7;
  int v8;
  float32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x4_t v15;
  int v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  float i;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  float v43;
  float32x4_t v44;
  __int128 v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[14];
  __int16 v58;
  int v59;

  v4 = *(_QWORD *)result;
  v5 = *(float *)(result + 120);
  v6 = *(unsigned __int8 *)(result + 124);
  v8 = *(_DWORD *)(result + 136);
  v7 = *(_DWORD *)(result + 140);
  if (!*(_QWORD *)result)
  {
    *(_QWORD *)a2 = 0x7FC0000000000000;
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v8;
    *(_DWORD *)(a2 + 16) = v7;
    v46 = 0.0;
    if (!v6)
      v46 = v5;
    *(float *)(a2 + 24) = v46;
    return result;
  }
  if (*(_QWORD *)(v4 + 16) < 0xAuLL)
    goto LABEL_66;
  v9 = *(float32x2_t **)(result + 8);
  v10 = *(_QWORD *)(result + 40);
  v55 = *(_QWORD *)(result + 32);
  v56 = *(_QWORD *)(result + 16);
  v11 = *(_QWORD *)(result + 56);
  v53 = *(_QWORD *)(result + 64);
  v54 = *(_QWORD *)(result + 48);
  v49 = *(_QWORD *)(result + 72);
  v50 = *(_QWORD *)(result + 24);
  v51 = *(_QWORD *)(result + 96);
  v52 = *(_QWORD *)(result + 80);
  v12 = *(_QWORD *)(result + 112);
  v47 = *(_QWORD *)(result + 104);
  v48 = *(_QWORD *)(result + 88);
  v13 = swift_bridgeObjectRetain();
  v14 = specialized Sequence<>.max()(v13);
  result = swift_bridgeObjectRelease();
  if ((v14 & 0x100000000) != 0)
    v16 = 0;
  else
    v16 = v14;
  *(_DWORD *)a2 = v16;
  if (*(_QWORD *)(v4 + 16) < 0xAuLL)
    goto LABEL_67;
  v17 = 0;
  v18 = *(_QWORD *)(v4 + 1336);
  v19 = 1 << *(_BYTE *)(v18 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v18 + 64;
  v22 = v20 & *(_QWORD *)(v18 + 64);
  v23 = (unint64_t)(v19 + 63) >> 6;
  for (i = 0.0; ; i = i + *(float *)(*(_QWORD *)(v18 + 56) + 4 * v26))
  {
    if (v22)
    {
      v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v26 = v25 | (v17 << 6);
      continue;
    }
    v27 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v27 >= v23)
      goto LABEL_31;
    v28 = *(_QWORD *)(v21 + 8 * v27);
    ++v17;
    if (v28)
      goto LABEL_30;
    v17 = v27 + 1;
    if (v27 + 1 >= v23)
      goto LABEL_31;
    v28 = *(_QWORD *)(v21 + 8 * v17);
    if (v28)
      goto LABEL_30;
    v17 = v27 + 2;
    if (v27 + 2 >= v23)
      goto LABEL_31;
    v28 = *(_QWORD *)(v21 + 8 * v17);
    if (v28)
      goto LABEL_30;
    v17 = v27 + 3;
    if (v27 + 3 >= v23)
      goto LABEL_31;
    v28 = *(_QWORD *)(v21 + 8 * v17);
    if (v28)
      goto LABEL_30;
    v17 = v27 + 4;
    if (v27 + 4 >= v23)
      goto LABEL_31;
    v28 = *(_QWORD *)(v21 + 8 * v17);
    if (v28)
      goto LABEL_30;
    v29 = v27 + 5;
    if (v29 >= v23)
      goto LABEL_31;
    v28 = *(_QWORD *)(v21 + 8 * v29);
    if (!v28)
      break;
    v17 = v29;
LABEL_30:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v17 << 6);
  }
  while (1)
  {
    v17 = v29 + 1;
    if (__OFADD__(v29, 1))
      goto LABEL_71;
    if (v17 >= v23)
      break;
    v28 = *(_QWORD *)(v21 + 8 * v17);
    ++v29;
    if (v28)
      goto LABEL_30;
  }
LABEL_31:
  if (*(_QWORD *)(v4 + 16) < 0xAuLL)
    goto LABEL_68;
  *(float *)(a2 + 4) = i / (float)*(uint64_t *)(*(_QWORD *)(v4 + 1336) + 16);
  if (*(_QWORD *)(v4 + 16) < 0xAuLL)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v30 = 0;
  v31 = *(_QWORD *)(v4 + 1336);
  v32 = 1 << *(_BYTE *)(v31 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v31 + 64;
  v35 = v33 & *(_QWORD *)(v31 + 64);
  v36 = (unint64_t)(v32 + 63) >> 6;
  v37 = 0.0;
  while (2)
  {
    if (v35)
    {
      v38 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v39 = v38 | (v30 << 6);
LABEL_37:
      v37 = v37 + *(float *)(*(_QWORD *)(v31 + 56) + 4 * v39);
      continue;
    }
    break;
  }
  v40 = v30 + 1;
  if (__OFADD__(v30, 1))
    goto LABEL_65;
  if (v40 < v36)
  {
    v41 = *(_QWORD *)(v34 + 8 * v40);
    ++v30;
    if (!v41)
    {
      v30 = v40 + 1;
      if (v40 + 1 >= v36)
        goto LABEL_57;
      v41 = *(_QWORD *)(v34 + 8 * v30);
      if (!v41)
      {
        v30 = v40 + 2;
        if (v40 + 2 >= v36)
          goto LABEL_57;
        v41 = *(_QWORD *)(v34 + 8 * v30);
        if (!v41)
        {
          v30 = v40 + 3;
          if (v40 + 3 >= v36)
            goto LABEL_57;
          v41 = *(_QWORD *)(v34 + 8 * v30);
          if (!v41)
          {
            v30 = v40 + 4;
            if (v40 + 4 >= v36)
              goto LABEL_57;
            v41 = *(_QWORD *)(v34 + 8 * v30);
            if (!v41)
            {
              v42 = v40 + 5;
              if (v42 >= v36)
                goto LABEL_57;
              v41 = *(_QWORD *)(v34 + 8 * v42);
              if (!v41)
              {
                while (1)
                {
                  v30 = v42 + 1;
                  if (__OFADD__(v42, 1))
                    goto LABEL_72;
                  if (v30 >= v36)
                    goto LABEL_57;
                  v41 = *(_QWORD *)(v34 + 8 * v30);
                  ++v42;
                  if (v41)
                    goto LABEL_56;
                }
              }
              v30 = v42;
            }
          }
        }
      }
    }
LABEL_56:
    v35 = (v41 - 1) & v41;
    v39 = __clz(__rbit64(v41)) + (v30 << 6);
    goto LABEL_37;
  }
LABEL_57:
  *(float *)(a2 + 8) = v37;
  *(_DWORD *)(a2 + 12) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  v43 = 0.0;
  if (!v6)
    v43 = v5;
  *(float *)(a2 + 24) = v43;
  if (*(_QWORD *)&v9[2] >= 0xAuLL)
  {
    *(float32x2_t *)v15.f32 = vsub_f32(v9[40], v9[20]);
    v15.f32[2] = v9[41].f32[0] - v9[21].f32[0];
    v44 = vmulq_f32(v15, v15);
    *(float *)(a2 + 20) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]);
    v57[0] = v4;
    v57[1] = v9;
    v57[2] = v56;
    v57[3] = v50;
    v57[4] = v55;
    v57[5] = v10;
    v57[6] = v54;
    v57[7] = v11;
    v57[8] = v53;
    v57[9] = v49;
    v57[10] = v52;
    v57[11] = v48;
    v57[12] = v51;
    v57[13] = v47;
    v58 = v12 & 0x101;
    v59 = HIDWORD(v12);
    result = specialized static RepetitivePinchBasicFeature.handPalmNormalForRepetitivePinch(_:)((uint64_t)v57);
    *(_OWORD *)(v2 + 48) = v45;
    return result;
  }
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

void MakeBreakSourceHomeUI.extractTemporalFeatures(_:)(uint64_t a1)
{
  float32x4_t *v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  BOOL v26;
  float v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  float32x4_t v32;
  __int128 v33;
  uint64_t v34[4];

  swift_beginAccess();
  v3 = swift_bridgeObjectRetain();
  specialized static PinchFilterHelper.FittedLineSlope(_:)(v3);
  v5 = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 28) = v5;
  swift_beginAccess();
  v6 = swift_bridgeObjectRetain();
  specialized static PinchFilterHelper.FittedLineSlope(_:)(v6);
  v8 = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = v8;
  v9 = &v1[5].i8[8];
  swift_beginAccess();
  v10 = swift_bridgeObjectRetain();
  specialized static PinchFilterHelper.FittedLineSlope(_:)(v10);
  v12 = v11;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 36) = v12;
  v34[0] = v1[4].i64[1];
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(v34);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v1[4].i64[1] + 16) >> 1;
  if (v13 >= *(_QWORD *)(v34[0] + 16))
  {
    __break(1u);
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(v34[0] + 4 * v13 + 32);
  swift_release();
  *(_DWORD *)(a1 + 40) = v14;
  v34[0] = *(_QWORD *)v9;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(v34);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(*(_QWORD *)v9 + 16) >> 1;
  if (v15 >= *(_QWORD *)(v34[0] + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = *(_DWORD *)(v34[0] + 4 * v15 + 32);
  swift_release();
  *(_DWORD *)(a1 + 44) = v16;
  swift_beginAccess();
  v17 = (float32x4_t *)v1[4].i64[0];
  if (v17[1].i64[0])
  {
    v18 = 0;
    v19 = v17[2];
    goto LABEL_10;
  }
LABEL_9:
  __break(1u);
  swift_release();
  __break(1u);
LABEL_10:
  while (1)
  {
    v32 = v19;
    v21 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
    v33 = 0u;
    v22 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
    v20 = v21 == v22;
    if (v18 == 2)
      break;
    while (1)
    {
      ++v18;
      if (v20)
        break;
      if (v18 == 2)
        goto LABEL_14;
      v20 = 0;
    }
  }
  v23 = 0.0;
  if (v21 != v22)
  {
LABEL_14:
    v24 = 0;
    v25 = v1[3];
    while (1)
    {
      v30 = v25;
      v27 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
      v31 = 0u;
      v28 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
      v26 = v27 == v28;
      if (v24 == 2)
        break;
      while (1)
      {
        ++v24;
        if (v26)
          break;
        if (v24 == 2)
          goto LABEL_20;
        v26 = 0;
      }
    }
    v23 = 0.0;
    if (v27 != v28)
    {
LABEL_20:
      v29 = vmulq_f32(v19, v25);
      v23 = (float)(acosf(fmaxf(fminf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0], 1.0), -1.0))/ 3.14)* 180.0;
    }
  }
  *(float *)(a1 + 48) = v23;
}

uint64_t MakeBreakSourceHomeUI.updateBufferData(_:)(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;

  v2 = v1;
  v4 = v1 + 72;
  swift_beginAccess();
  v5 = *(char **)(v2 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 72) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
    *(_QWORD *)v4 = v5;
  }
  v8 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v5);
    *(_QWORD *)v4 = v5;
  }
  v9 = a1[1];
  *((_QWORD *)v5 + 2) = v8 + 1;
  *(_DWORD *)&v5[4 * v8 + 32] = v9;
  v10 = *(_QWORD *)(v2 + 72);
  swift_endAccess();
  if (*(_QWORD *)(v2 + 24) < *(_QWORD *)(v10 + 16))
  {
    result = swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
    {
      __break(1u);
      goto LABEL_45;
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    swift_endAccess();
  }
  v12 = v2 + 80;
  swift_beginAccess();
  v13 = *(char **)(v2 + 80);
  v14 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 80) = v13;
  if ((v14 & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    *(_QWORD *)v12 = v13;
  }
  v16 = *((_QWORD *)v13 + 2);
  v15 = *((_QWORD *)v13 + 3);
  if (v16 >= v15 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v13);
    *(_QWORD *)v12 = v13;
  }
  v17 = a1[2];
  *((_QWORD *)v13 + 2) = v16 + 1;
  *(_DWORD *)&v13[4 * v16 + 32] = v17;
  v18 = *(_QWORD *)(v2 + 80);
  swift_endAccess();
  if (*(_QWORD *)(v2 + 24) < *(_QWORD *)(v18 + 16))
  {
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v12 + 16))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
      goto LABEL_15;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_15:
  v19 = v2 + 96;
  swift_beginAccess();
  v20 = *(char **)(v2 + 96);
  v21 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 96) = v20;
  if ((v21 & 1) == 0)
  {
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
    *(_QWORD *)v19 = v20;
  }
  v23 = *((_QWORD *)v20 + 2);
  v22 = *((_QWORD *)v20 + 3);
  if (v23 >= v22 >> 1)
  {
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v20);
    *(_QWORD *)v19 = v20;
  }
  v24 = a1[3];
  *((_QWORD *)v20 + 2) = v23 + 1;
  *(_DWORD *)&v20[4 * v23 + 32] = v24;
  v25 = *(_QWORD *)(v2 + 96);
  swift_endAccess();
  if (*(_QWORD *)(v2 + 24) < *(_QWORD *)(v25 + 16))
  {
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v19 + 16))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
      goto LABEL_22;
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_22:
  v26 = v2 + 104;
  swift_beginAccess();
  v27 = *(char **)(v2 + 104);
  v28 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 104) = v27;
  if ((v28 & 1) == 0)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    *(_QWORD *)v26 = v27;
  }
  v30 = *((_QWORD *)v27 + 2);
  v29 = *((_QWORD *)v27 + 3);
  if (v30 >= v29 >> 1)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v27);
    *(_QWORD *)v26 = v27;
  }
  v31 = a1[4];
  *((_QWORD *)v27 + 2) = v30 + 1;
  *(_DWORD *)&v27[4 * v30 + 32] = v31;
  v32 = *(_QWORD *)(v2 + 104);
  swift_endAccess();
  if (*(_QWORD *)(v2 + 24) < *(_QWORD *)(v32 + 16))
  {
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v26 + 16))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
      goto LABEL_29;
    }
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_29:
  v33 = v2 + 88;
  swift_beginAccess();
  v34 = *(char **)(v2 + 88);
  v35 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 88) = v34;
  if ((v35 & 1) == 0)
  {
    v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
    *(_QWORD *)v33 = v34;
  }
  v37 = *((_QWORD *)v34 + 2);
  v36 = *((_QWORD *)v34 + 3);
  if (v37 >= v36 >> 1)
  {
    v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v34);
    *(_QWORD *)v33 = v34;
  }
  v38 = a1[5];
  *((_QWORD *)v34 + 2) = v37 + 1;
  *(_DWORD *)&v34[4 * v37 + 32] = v38;
  v39 = *(_QWORD *)(v2 + 88);
  swift_endAccess();
  if (*(_QWORD *)(v2 + 24) < *(_QWORD *)(v39 + 16))
  {
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v33 + 16))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
      goto LABEL_36;
    }
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_36:
  v46 = *(_OWORD *)(v2 + 48);
  v40 = v2 + 64;
  swift_beginAccess();
  v41 = *(_QWORD **)(v2 + 64);
  v42 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 64) = v41;
  if ((v42 & 1) == 0)
  {
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
    *(_QWORD *)v40 = v41;
  }
  v44 = v41[2];
  v43 = v41[3];
  if (v44 >= v43 >> 1)
  {
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v41);
    *(_QWORD *)v40 = v41;
  }
  v41[2] = v44 + 1;
  *(_OWORD *)&v41[2 * v44 + 4] = v46;
  v45 = *(_QWORD *)(v2 + 64);
  result = swift_endAccess();
  if (*(_QWORD *)(v2 + 32) < *(_QWORD *)(v45 + 16))
  {
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v40 + 16))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      return swift_endAccess();
    }
LABEL_49:
    __break(1u);
  }
  return result;
}

unint64_t MakeBreakSourceHomeUI.isVisibleToSemiOccludedPinch(_:)(float *a1)
{
  uint64_t v1;
  float v2;
  float v4;
  float v5;
  float v6;
  float v7;
  unint64_t result;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  float v12;

  v2 = a1[3];
  if (v2 <= 0.6)
    return 0;
  v4 = a1[7];
  if (v4 <= 0.05)
    return 0;
  v5 = a1[8];
  if (v5 <= 0.015)
    return 0;
  v6 = a1[10];
  if (v6 >= 0.15)
  {
    v9 = v5 <= 0.03 || v2 <= 0.7;
    v10 = !v9 && v6 < 0.5;
    if (!v10 || a1[12] >= (float)(*(float *)(v1 + 40) * 0.5))
      return 0;
  }
  v7 = a1[5];
  if (v7 < 0.018)
    return a1[12] < *(float *)(v1 + 40);
  if (a1[9] >= 0.0)
    return 0;
  swift_beginAccess();
  v11 = *(_QWORD *)(v1 + 88);
  result = specialized Sequence<>.max()(v11);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v12 = *(float *)&result;
  result = specialized Sequence<>.min()(v11);
  if ((result & 0x100000000) != 0)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if ((float)(v12 - *(float *)&result) > 0.04)
    return a1[12] < *(float *)(v1 + 40);
  result = 0;
  if (v4 > 0.08 && v7 < 0.02)
  {
    if (a1[12] < (float)(*(float *)(v1 + 40) * 0.5))
      return a1[12] < *(float *)(v1 + 40);
    return 0;
  }
  return result;
}

BOOL MakeBreakSourceHomeUI.breakHomeUIPinch(_:)(float *a1)
{
  uint64_t v1;
  float v2;
  _BOOL8 result;
  unint64_t v5;
  float v6;
  float v7;
  BOOL v8;

  v2 = a1[3];
  result = 1;
  if (v2 >= 0.1)
  {
    if (v2 >= 0.55
      || a1[7] >= -0.05
      || (swift_beginAccess(), v5 = specialized Sequence<>.max()(*(_QWORD *)(v1 + 96)), (v5 & 0x100000000) != 0)
      || *(float *)&v5 <= 0.85)
    {
      if (v2 >= 0.3 || ((v6 = a1[5], v6 <= 0.02) || a1[9] <= 0.0) && (v6 <= 0.012 || a1[9] <= 0.0 || a1[1] >= 0.2))
      {
        v7 = a1[5];
        v8 = v2 >= 0.5 || v7 <= 0.02;
        if ((v8 || a1[9] <= 0.0 || a1[10] >= 0.2) && (v7 <= 0.025 || a1[9] <= 0.0 || a1[10] >= 0.2))
          return 0;
      }
    }
  }
  return result;
}

uint64_t MakeBreakSourceHomeUI.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MakeBreakSourceHomeUI()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in HomePinchInternalPB()
{
  return lazy protocol witness table accessor for type HomePinchInternalPB and conformance HomePinchInternalPB(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
}

void protocol witness for PinchAlgorithmUnit.reset() in conformance MakeBreakSourceHomeUI()
{
  MakeBreakSourceHomeUI.reset()();
}

uint64_t protocol witness for PinchAlgorithmUnit.predict(_:) in conformance MakeBreakSourceHomeUI@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MakeBreakSourceHomeUI.predict(_:)(a1, a2);
}

uint64_t protocol witness for PinchInternalDataType.save(into:) in conformance HomePinchInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = type metadata accessor for HandDescriptorInternal();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = a1 + *(int *)(v5 + 52);
    outlined destroy of HomePinchInternalPB?(v7);
    outlined init with copy of HomePinchInternalPB(v2, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v7, 0, 1, a2);
  }
  return result;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance HomePinchInternalPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of HomePinchInternalPB(v1, a1);
}

uint64_t instantiation function for generic protocol witness table for HomePinchInternalPB(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type HomePinchInternalPB and conformance HomePinchInternalPB(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined destroy of HomePinchInternalPB?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of HomePinchInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HomePinchInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized MakeBreakSourceHomeUI.init(_:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 16) = 0;
  *(_OWORD *)(v0 + 24) = xmmword_23D9BE030;
  *(_DWORD *)(v0 + 40) = 1095761920;
  *(_OWORD *)(v0 + 48) = 0u;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 64) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 72) = v1;
  *(_QWORD *)(v0 + 80) = v1;
  *(_QWORD *)(v0 + 88) = v1;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v1;
  MakeBreakSourceHomeUI.reset()();
  return v0;
}

uint64_t lazy protocol witness table accessor for type HomePinchInternalPB and conformance HomePinchInternalPB(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for HomePinchInternalPB(255);
    result = MEMORY[0x242638C74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of HomePinchInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HomePinchInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t VideoDataStructs.UserEventData.frameID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

_QWORD *VideoDataStructs.UserEventData.handsData.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _QWORD v5[70];

  v3 = (const void *)(v1 + 16);
  memcpy(v5, v3, 0x228uLL);
  memcpy(a1, v3, 0x228uLL);
  return outlined retain of HandsKitData(v5);
}

double VideoDataStructs.UserEventData.displayTimeRange.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + 608);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 568);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 576);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 584);
  result = *(double *)(v1 + 600);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v2;
  return result;
}

double VideoDataStructs.UserEventData.init(frameID:handsData:displayTimeRange:)@<D0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double result;
  _BYTE v10[560];

  v7 = *a3;
  v8 = a3[5];
  memcpy(&v10[8], a2, 0x228uLL);
  *(_QWORD *)a4 = a1;
  memcpy((void *)(a4 + 8), v10, 0x230uLL);
  *(_QWORD *)(a4 + 568) = v7;
  *(_QWORD *)(a4 + 576) = a3[1];
  *(_OWORD *)(a4 + 584) = *((_OWORD *)a3 + 1);
  result = *((double *)a3 + 4);
  *(double *)(a4 + 600) = result;
  *(_QWORD *)(a4 + 608) = v8;
  return result;
}

uint64_t destroy for VideoDataStructs.UserEventData(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 536))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VideoDataStructs.UserEventData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = v5[1];
    *(_OWORD *)(a1 + 24) = *v5;
    *(_OWORD *)(a1 + 40) = v9;
    v10 = v5[3];
    *(_OWORD *)(a1 + 56) = v5[2];
    *(_OWORD *)(a1 + 72) = v10;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = *(_QWORD *)(a2 + 136);
  v14 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 144) = v14;
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v15;
  v16 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v16;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v17;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v18 = *(_OWORD *)(a2 + 224);
  v19 = *(_OWORD *)(a2 + 240);
  v20 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v20;
  *(_OWORD *)(a1 + 224) = v18;
  *(_OWORD *)(a1 + 240) = v19;
  v21 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v21;
  v22 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v22;
  v23 = *(_OWORD *)(a2 + 352);
  v24 = *(_OWORD *)(a2 + 368);
  v25 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v25;
  *(_OWORD *)(a1 + 352) = v23;
  *(_OWORD *)(a1 + 368) = v24;
  v26 = *(_OWORD *)(a2 + 416);
  v27 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v27;
  *(_OWORD *)(a1 + 416) = v26;
  v28 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = v28;
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  v29 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v29;
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v30 = (_OWORD *)(a1 + 512);
  v31 = (_OWORD *)(a2 + 512);
  v32 = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v32)
  {
    *v30 = *v31;
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = v32;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v33 = *(_OWORD *)(a2 + 528);
    *v30 = *v31;
    *(_OWORD *)(a1 + 528) = v33;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  }
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  v34 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v34;
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VideoDataStructs.UserEventData(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v6 = (__int128 *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of HandsKitDataInternal(a1 + 24);
      v7 = *(_OWORD *)(a2 + 72);
      v9 = *v6;
      v8 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v7;
      *v4 = v9;
      *(_OWORD *)(a1 + 40) = v8;
    }
  }
  else if (v5)
  {
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v6;
    v11 = *(_OWORD *)(a2 + 40);
    v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *v4 = v10;
    *(_OWORD *)(a1 + 40) = v11;
  }
  v13 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v13;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v14;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  v15 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 + 393);
  *(_OWORD *)(a1 + 384) = v15;
  *(_QWORD *)(a1 + 412) = *(_QWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 428) = *(_QWORD *)(a2 + 428);
  v16 = *(_OWORD *)(a2 + 436);
  *(_OWORD *)(a1 + 445) = *(_OWORD *)(a2 + 445);
  *(_OWORD *)(a1 + 436) = v16;
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = (_OWORD *)(a1 + 512);
  v18 = (_OWORD *)(a2 + 512);
  v19 = *(_QWORD *)(a2 + 536);
  if (*(_QWORD *)(a1 + 536))
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_DWORD *)(a1 + 520) = *(_DWORD *)(a2 + 520);
      *(_DWORD *)(a1 + 524) = *(_DWORD *)(a2 + 524);
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of ObjectInteractionResultsByHand(a1 + 512);
      v21 = *(_QWORD *)(a2 + 544);
      v22 = *(_OWORD *)(a2 + 528);
      *v17 = *v18;
      *(_OWORD *)(a1 + 528) = v22;
      *(_QWORD *)(a1 + 544) = v21;
    }
  }
  else
  {
    v20 = *v18;
    if (v19)
    {
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *v17 = v20;
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      v23 = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *v17 = v20;
      *(_OWORD *)(a1 + 528) = v23;
    }
  }
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
  *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_DWORD *)(a1 + 600) = *(_DWORD *)(a2 + 600);
  *(_DWORD *)(a1 + 604) = *(_DWORD *)(a2 + 604);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  return a1;
}

void *__swift_memcpy616_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x268uLL);
}

uint64_t assignWithTake for VideoDataStructs.UserEventData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v5;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of HandsKitDataInternal(a1 + 24);
  }
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v7;
LABEL_6:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  v8 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRelease();
  v9 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v9;
  v10 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v10;
  v11 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v11;
  v12 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v12;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 + 393);
  *(_QWORD *)(a1 + 412) = *(_QWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 428) = *(_QWORD *)(a2 + 428);
  *(_OWORD *)(a1 + 445) = *(_OWORD *)(a2 + 445);
  *(_OWORD *)(a1 + 436) = *(_OWORD *)(a2 + 436);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  swift_release();
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_release();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 536))
  {
LABEL_10:
    v14 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v14;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(a2 + 536);
  if (!v13)
  {
    outlined destroy of ObjectInteractionResultsByHand(a1 + 512);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_release();
LABEL_11:
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoDataStructs.UserEventData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 616))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoDataStructs.UserEventData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 616) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 616) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoDataStructs.UserEventData()
{
  return &type metadata for VideoDataStructs.UserEventData;
}

void HandsSessionSettings.init()(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

void *static HandSkeleton.JointName.allCases.getter()
{
  return &outlined read-only object #0 of static HandSkeleton.JointName.allCases.getter;
}

uint64_t HandSkeleton.JointName.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t Hand.init(id:chirality:confidence:action:skeleton:originFromHandTransform:)@<X0>(unint64_t result@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t *a4@<X3>, __n128 *a5@<X8>, float a6@<S0>, __n128 a7@<Q1>, __n128 a8@<Q2>, __n128 a9@<Q3>, __n128 a10@<Q4>)
{
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;

  v10 = *a2;
  v11 = *a3;
  v12 = *a4;
  a5->n128_u64[0] = result;
  a5->n128_u8[8] = v10;
  a5->n128_f32[3] = a6;
  a5[1].n128_u8[0] = v11;
  a5[1].n128_u64[1] = v12;
  a5[2] = a7;
  a5[3] = a8;
  a5[4] = a9;
  a5[5] = a10;
  return result;
}

Hands::HandsOutput __swiftcall HandsOutput.init(hands:)(Hands::HandsOutput hands)
{
  Hands::HandsOutput *v1;

  v1->hands._rawValue = hands.hands._rawValue;
  return hands;
}

Hands::HandSkeleton::JointName_optional __swiftcall HandSkeleton.JointName.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;
  char v3;

  v2 = 0;
  v3 = 9;
  switch(rawValue)
  {
    case 0:
      goto LABEL_11;
    case 1:
      v2 = 1;
      goto LABEL_11;
    case 2:
      v2 = 2;
      goto LABEL_11;
    case 3:
      v2 = 3;
      goto LABEL_11;
    case 4:
      v2 = 4;
      goto LABEL_11;
    case 5:
      v2 = 5;
      goto LABEL_11;
    case 6:
      v2 = 6;
      goto LABEL_11;
    case 7:
      v2 = 7;
      goto LABEL_11;
    case 8:
      v2 = 8;
LABEL_11:
      v3 = v2;
      goto LABEL_12;
    case 9:
LABEL_12:
      *v1 = v3;
      break;
    case 10:
      *v1 = 10;
      break;
    case 11:
      *v1 = 11;
      break;
    case 12:
      *v1 = 12;
      break;
    case 13:
      *v1 = 13;
      break;
    case 14:
      *v1 = 14;
      break;
    case 15:
      *v1 = 15;
      break;
    case 16:
      *v1 = 16;
      break;
    case 17:
      *v1 = 17;
      break;
    case 18:
      *v1 = 18;
      break;
    case 19:
      *v1 = 19;
      break;
    case 20:
      *v1 = 20;
      break;
    case 21:
      *v1 = 21;
      break;
    case 22:
      *v1 = 22;
      break;
    case 23:
      *v1 = 23;
      break;
    case 24:
      *v1 = 24;
      break;
    case 25:
      *v1 = 25;
      break;
    case 26:
      *v1 = 26;
      break;
    default:
      *v1 = 27;
      break;
  }
  return (Hands::HandSkeleton::JointName_optional)rawValue;
}

void __swiftcall HandSkeleton.Joint.init(name:parent:originFromJointTransform:parentFromJointTransform:)(Hands::HandSkeleton::Joint *__return_ptr retstr, Hands::HandSkeleton::JointName name, Hands::HandSkeleton::JointName_optional parent, simd_float4x4 *originFromJointTransform, simd_float4x4 *parentFromJointTransform)
{
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  Hands::HandSkeleton::JointName v13;

  v13 = *(_BYTE *)parent.value;
  retstr->name = *(_BYTE *)name;
  retstr->parentJointName.value = v13;
  retstr->originFromJointTransform.columns[0] = v5;
  retstr->originFromJointTransform.columns[1] = v6;
  retstr->originFromJointTransform.columns[2] = v7;
  retstr->originFromJointTransform.columns[3] = v8;
  retstr->parentFromJointTransform.columns[0] = v9;
  retstr->parentFromJointTransform.columns[1] = v10;
  retstr->parentFromJointTransform.columns[2] = v11;
  retstr->parentFromJointTransform.columns[3] = v12;
}

uint64_t HandsSessionPrototypeSettings.enableLogging.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t HandsSessionPrototypeSettings.enableLogging.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*HandsSessionPrototypeSettings.enableLogging.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsSessionPrototypeSettings.loggingLevel.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t HandsSessionPrototypeSettings.loggingLevel.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*HandsSessionPrototypeSettings.loggingLevel.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float HandsSessionPrototypeSettings.wristStdDevLowerThreshold.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void HandsSessionPrototypeSettings.wristStdDevLowerThreshold.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*HandsSessionPrototypeSettings.wristStdDevLowerThreshold.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float HandsSessionPrototypeSettings.wristStdDevUpperThreshold.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void HandsSessionPrototypeSettings.wristStdDevUpperThreshold.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*HandsSessionPrototypeSettings.wristStdDevUpperThreshold.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsSessionPrototypeSettings.enableGracefulFailureHandOutOfFOV.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t HandsSessionPrototypeSettings.enableGracefulFailureHandOutOfFOV.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*HandsSessionPrototypeSettings.enableGracefulFailureHandOutOfFOV.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsSessionPrototypeSettings.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D8EB070 + 4 * byte_23D9BE13B[a1]))(0x6F4C656C62616E65, 0xED0000676E696767);
}

uint64_t sub_23D8EB070()
{
  return 0x4C676E6967676F6CLL;
}

unint64_t sub_23D8EB090()
{
  return 0xD000000000000019;
}

unint64_t sub_23D8EB0B8()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HandsSessionPrototypeSettings.CodingKeys()
{
  unsigned __int8 *v0;

  return HandsSessionPrototypeSettings.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HandsSessionPrototypeSettings.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized HandsSessionPrototypeSettings.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance HandsSessionPrototypeSettings.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance HandsSessionPrototypeSettings.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandsSessionPrototypeSettings.CodingKeys()
{
  lazy protocol witness table accessor for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandsSessionPrototypeSettings.CodingKeys()
{
  lazy protocol witness table accessor for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t HandsSessionPrototypeSettings.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  _DWORD v11[2];
  int v12;
  char v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<HandsSessionPrototypeSettings.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_DWORD *)(v1 + 4);
  v11[1] = *(unsigned __int8 *)(v1 + 16);
  v12 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v14 = v12;
    v17 = 1;
    type metadata accessor for HandyLoggerLogLevel(0);
    lazy protocol witness table accessor for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel(&lazy protocol witness table cache variable for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel, (uint64_t)&protocol conformance descriptor for HandyLoggerLogLevel);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v16 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v15 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t lazy protocol witness table accessor for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionPrototypeSettings.CodingKeys, &unk_250E43C88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionPrototypeSettings.CodingKeys, &unk_250E43C88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionPrototypeSettings.CodingKeys, &unk_250E43C88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionPrototypeSettings.CodingKeys, &unk_250E43C88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys);
  }
  return result;
}

uint64_t HandsSessionPrototypeSettings.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v15;
  int v16;
  char v17;
  _BYTE v18[16];
  int v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<HandsSessionPrototypeSettings.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HandsSessionPrototypeSettings.CodingKeys and conformance HandsSessionPrototypeSettings.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v23 = 0;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    type metadata accessor for HandyLoggerLogLevel(0);
    v22 = 1;
    lazy protocol witness table accessor for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel(&lazy protocol witness table cache variable for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel, (uint64_t)&protocol conformance descriptor for HandyLoggerLogLevel);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v19;
    v21 = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    v13 = v12;
    v20 = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    v16 = v15;
    v18[15] = 4;
    v17 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    *(_BYTE *)a2 = v10 & 1;
    *(_DWORD *)(a2 + 4) = v11;
    *(_DWORD *)(a2 + 8) = v13;
    *(_DWORD *)(a2 + 12) = v16;
    *(_BYTE *)(a2 + 16) = v17 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t lazy protocol witness table accessor for type HandyLoggerLogLevel and conformance HandyLoggerLogLevel(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for HandyLoggerLogLevel(255);
    result = MEMORY[0x242638C74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance HandsSessionPrototypeSettings@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HandsSessionPrototypeSettings.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HandsSessionPrototypeSettings(_QWORD *a1)
{
  return HandsSessionPrototypeSettings.encode(to:)(a1);
}

double HandsSessionSettings.prototypeSettings.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  double result;

  v2 = *(_DWORD *)(v1 + 4);
  v3 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_DWORD *)(a1 + 4) = v2;
  result = *(double *)(v1 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

double HandsSessionSettings.prototypeSettings.setter(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  double result;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)v1 = *(_BYTE *)a1;
  *(_DWORD *)(v1 + 4) = v2;
  result = *(double *)(a1 + 8);
  *(double *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 16) = v3;
  return result;
}

uint64_t (*HandsSessionSettings.prototypeSettings.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HandsSessionSettings.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance HandsSessionSettings.CodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HandsSessionSettings.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance HandsSessionSettings.CodingKeys()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HandsSessionSettings.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized HandsSessionSettings.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance HandsSessionSettings.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandsSessionSettings.CodingKeys()
{
  lazy protocol witness table accessor for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandsSessionSettings.CodingKeys()
{
  lazy protocol witness table accessor for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t HandsSessionSettings.encode(to:)(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  char v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  char v16;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<HandsSessionSettings.CodingKeys>);
  v12 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = *((_DWORD *)v2 + 1);
  v10 = v2[16];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v8;
  v14 = v9;
  v15 = *((_QWORD *)v2 + 1);
  v16 = v10;
  lazy protocol witness table accessor for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionSettings.CodingKeys, &unk_250E43BF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionSettings.CodingKeys, &unk_250E43BF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionSettings.CodingKeys, &unk_250E43BF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionSettings.CodingKeys, &unk_250E43BF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings;
  if (!lazy protocol witness table cache variable for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionPrototypeSettings, &type metadata for HandsSessionPrototypeSettings);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings;
  if (!lazy protocol witness table cache variable for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionPrototypeSettings, &type metadata for HandsSessionPrototypeSettings);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings);
  }
  return result;
}

uint64_t HandsSessionSettings.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  char v11;
  uint64_t v12;
  _BYTE v14[16];
  int v15;
  uint64_t v16;
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<HandsSessionSettings.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HandsSessionSettings.CodingKeys and conformance HandsSessionSettings.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v10 = v15;
    v11 = v17;
    v12 = v16;
    *(_BYTE *)a2 = v14[12];
    *(_DWORD *)(a2 + 4) = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_BYTE *)(a2 + 16) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance HandsSessionSettings@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HandsSessionSettings.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HandsSessionSettings(_QWORD *a1)
{
  return HandsSessionSettings.encode(to:)(a1);
}

BOOL static CameraCalibration.CameraModel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CameraCalibration.CameraModel.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void CameraCalibration.cameraModel.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

double CameraCalibration.imageSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

__n128 CameraCalibration.intrinsics.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 CameraCalibration.distortion.getter()
{
  __n128 *v0;

  return v0[4];
}

__int128 *static CameraCalibration.rectilinear(imageSize:intrinsics:)@<X0>(__int128 *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v3 = *result;
  v4 = result[1];
  v5 = result[2];
  *(_BYTE *)a2 = 0;
  *(double *)(a2 + 8) = a3;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

__int128 *static CameraCalibration.kannala(imageSize:intrinsics:distortion:)@<X0>(__int128 *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, __n128 a4@<Q1>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *result;
  v5 = result[1];
  v6 = result[2];
  *(_BYTE *)a2 = 1;
  *(double *)(a2 + 8) = a3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 48) = v6;
  *(__n128 *)(a2 + 64) = a4;
  return result;
}

uint64_t CameraMetadata.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

double CameraMetadata.calibration.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = *(double *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 48);
  v4 = *(_OWORD *)(v1 + 64);
  v5 = *(_OWORD *)(v1 + 80);
  v6 = *(_OWORD *)(v1 + 96);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 32);
  *(double *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  return result;
}

double CameraMetadata.init(timestamp:calibration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>)
{
  char v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_BYTE *)a4;
  result = a4[1];
  v7 = *((_OWORD *)a4 + 1);
  v8 = *((_OWORD *)a4 + 2);
  v9 = *((_OWORD *)a4 + 3);
  v10 = *((_OWORD *)a4 + 4);
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 32) = v5;
  *(double *)(a5 + 40) = result;
  *(_OWORD *)(a5 + 48) = v7;
  *(_OWORD *)(a5 + 64) = v8;
  *(_OWORD *)(a5 + 80) = v9;
  *(_OWORD *)(a5 + 96) = v10;
  return result;
}

uint64_t HandSkeleton.JointName.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D8EBC38 + 4 * byte_23D9BE140[*v0]))(0x7473697277, 0xE500000000000000);
}

uint64_t sub_23D8EBC38()
{
  return 0x756E4B626D756874;
}

unint64_t sub_23D8EBC58()
{
  return 0xD000000000000015;
}

uint64_t sub_23D8EBE8C()
{
  return 0x576D726165726F66;
}

uint64_t sub_23D8EBEAC()
{
  return 0x416D726165726F66;
}

Hands::HandSkeleton::JointName_optional protocol witness for RawRepresentable.init(rawValue:) in conformance HandSkeleton.JointName(Swift::Int *a1)
{
  return HandSkeleton.JointName.init(rawValue:)(*a1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance HandSkeleton.JointName(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static HandSkeleton.JointName.allCases.getter;
}

void HandSkeleton.Joint.name.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void HandSkeleton.Joint.parentJointName.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *HandSkeleton.Joint.parentJointName.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*HandSkeleton.Joint.parentJointName.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

__n128 HandSkeleton.Joint.originFromJointTransform.getter()
{
  __n128 *v0;

  return v0[1];
}

void HandSkeleton.Joint.originFromJointTransform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 *v4;

  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*HandSkeleton.Joint.originFromJointTransform.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

__n128 HandSkeleton.Joint.parentFromJointTransform.getter()
{
  __n128 *v0;

  return v0[5];
}

void HandSkeleton.Joint.parentFromJointTransform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 *v4;

  v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  v4[8] = a4;
}

uint64_t (*HandSkeleton.Joint.parentFromJointTransform.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandSkeleton.Joint.description.getter()
{
  return HandSkeleton.JointName.description.getter();
}

void __swiftcall HandSkeleton.joint(jointName:)(Hands::HandSkeleton::Joint *__return_ptr retstr, Hands::HandSkeleton::JointName jointName)
{
  uint64_t v2;
  uint64_t v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;

  if (*(_QWORD *)(*(_QWORD *)v2 + 16) <= (unint64_t)*(unsigned __int8 *)jointName)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)v2 + 144 * *(unsigned __int8 *)jointName;
    v4 = *(simd_float4 *)(v3 + 48);
    v5 = *(simd_float4 *)(v3 + 64);
    v6 = *(simd_float4 *)(v3 + 80);
    v7 = *(simd_float4 *)(v3 + 96);
    v8 = *(simd_float4 *)(v3 + 112);
    v9 = *(simd_float4 *)(v3 + 128);
    v10 = *(simd_float4 *)(v3 + 144);
    v11 = *(simd_float4 *)(v3 + 160);
    *(_WORD *)&retstr->name = *(_WORD *)(v3 + 32);
    retstr->originFromJointTransform.columns[0] = v4;
    retstr->originFromJointTransform.columns[1] = v5;
    retstr->originFromJointTransform.columns[2] = v6;
    retstr->originFromJointTransform.columns[3] = v7;
    retstr->parentFromJointTransform.columns[0] = v8;
    retstr->parentFromJointTransform.columns[1] = v9;
    retstr->parentFromJointTransform.columns[2] = v10;
    retstr->parentFromJointTransform.columns[3] = v11;
  }
}

double static HandSkeleton.structure()()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[HandSkeleton.JointName]>);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 6;
  *(_OWORD *)(v0 + 16) = xmmword_23D9A96F0;
  *(_QWORD *)(v0 + 32) = &outlined read-only object #0 of static HandSkeleton.structure();
  *(_QWORD *)(v0 + 40) = &outlined read-only object #1 of static HandSkeleton.structure();
  *(_QWORD *)(v0 + 48) = &outlined read-only object #2 of static HandSkeleton.structure();
  *(_QWORD *)(v0 + 56) = &outlined read-only object #3 of static HandSkeleton.structure();
  *(_QWORD *)(v0 + 64) = &outlined read-only object #4 of static HandSkeleton.structure();
  *(_QWORD *)(v0 + 72) = &outlined read-only object #5 of static HandSkeleton.structure();
  return result;
}

uint64_t Hand.Chirality.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7468676972;
  else
    return 1952867692;
}

void *static Hand.Chirality.allCases.getter()
{
  return &outlined read-only object #0 of static Hand.Chirality.allCases.getter;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Hand.Chirality()
{
  _BYTE *v0;

  if (*v0)
    return 0x7468676972;
  else
    return 1952867692;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Hand.Chirality(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Hand.Chirality;
}

uint64_t static Hand.Action.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Hand.Action.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  static Hand.Action.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Hand.Action.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraModel.allCases.modify;
}

BOOL static Hand.Action.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Hand.Action.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Hand.Action.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Hand.Action@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  *a1 = static Hand.Action.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t Hand.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void Hand.chirality.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

float Hand.confidence.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void Hand.action.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t Hand.handSkeleton.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

__n128 Hand.originFromHandTransform.getter()
{
  __n128 *v0;

  return v0[2];
}

uint64_t HandsInput.images.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandsInput.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 HandsInput.init(image:metadata:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;

  v6 = a2->n128_u64[0];
  v7 = a2[1].n128_i64[0];
  v8 = a2[2].n128_i8[0];
  v9 = a2[2].n128_i64[1];
  v15 = a2[4];
  v16 = a2[3];
  v13 = a2[6];
  v14 = a2[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23D9BE950;
  *(_QWORD *)(v10 + 32) = a1;
  v17 = v10;
  specialized Array._endMutation()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraMetadata>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23D9A70A0;
  *(_QWORD *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = a2->n128_u64[1];
  *(_QWORD *)(v11 + 48) = v7;
  *(_BYTE *)(v11 + 64) = v8;
  *(_QWORD *)(v11 + 72) = v9;
  *(__n128 *)(v11 + 80) = v16;
  *(__n128 *)(v11 + 96) = v15;
  result = v13;
  *(__n128 *)(v11 + 112) = v14;
  *(__n128 *)(v11 + 128) = v13;
  *a3 = v17;
  a3[1] = v11;
  return result;
}

uint64_t HandsOutput.hands.getter()
{
  return swift_bridgeObjectRetain();
}

Hands::HandsOutput __swiftcall HandsOutput.init()()
{
  _QWORD *v0;
  Hands::HandsOutput result;

  *v0 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t instantiation function for generic protocol witness table for HandsSessionPrototypeSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for HandsSessionPrototypeSettings(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings, (uint64_t (*)(void))lazy protocol witness table accessor for type HandsSessionPrototypeSettings and conformance HandsSessionPrototypeSettings);
}

uint64_t instantiation function for generic protocol witness table for HandsSessionSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for HandsSessionPrototypeSettings(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type HandsSessionSettings and conformance HandsSessionSettings, (uint64_t (*)(void))lazy protocol witness table accessor for type HandsSessionSettings and conformance HandsSessionSettings);
}

uint64_t instantiation function for generic protocol witness table for HandsSessionPrototypeSettings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HandsSessionSettings and conformance HandsSessionSettings()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionSettings and conformance HandsSessionSettings;
  if (!lazy protocol witness table cache variable for type HandsSessionSettings and conformance HandsSessionSettings)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionSettings, &type metadata for HandsSessionSettings);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionSettings and conformance HandsSessionSettings);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandsSessionSettings and conformance HandsSessionSettings;
  if (!lazy protocol witness table cache variable for type HandsSessionSettings and conformance HandsSessionSettings)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsSessionSettings, &type metadata for HandsSessionSettings);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsSessionSettings and conformance HandsSessionSettings);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CameraCalibration.CameraModel and conformance CameraCalibration.CameraModel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraCalibration.CameraModel and conformance CameraCalibration.CameraModel;
  if (!lazy protocol witness table cache variable for type CameraCalibration.CameraModel and conformance CameraCalibration.CameraModel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraCalibration.CameraModel, &type metadata for CameraCalibration.CameraModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraCalibration.CameraModel and conformance CameraCalibration.CameraModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandSkeleton.JointName and conformance HandSkeleton.JointName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandSkeleton.JointName and conformance HandSkeleton.JointName;
  if (!lazy protocol witness table cache variable for type HandSkeleton.JointName and conformance HandSkeleton.JointName)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandSkeleton.JointName, &type metadata for HandSkeleton.JointName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandSkeleton.JointName and conformance HandSkeleton.JointName);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HandSkeleton.JointName()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [HandSkeleton.JointName] and conformance [A], &demangling cache variable for type metadata for [HandSkeleton.JointName]);
}

unint64_t lazy protocol witness table accessor for type Hand.Chirality and conformance Hand.Chirality()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Hand.Chirality and conformance Hand.Chirality;
  if (!lazy protocol witness table cache variable for type Hand.Chirality and conformance Hand.Chirality)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for Hand.Chirality, &type metadata for Hand.Chirality);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Hand.Chirality and conformance Hand.Chirality);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Hand.Chirality()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [Hand.Chirality] and conformance [A], &demangling cache variable for type metadata for [Hand.Chirality]);
}

unint64_t lazy protocol witness table accessor for type Hand.Action and conformance Hand.Action()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Hand.Action and conformance Hand.Action;
  if (!lazy protocol witness table cache variable for type Hand.Action and conformance Hand.Action)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for Hand.Action, &type metadata for Hand.Action);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Hand.Action and conformance Hand.Action);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Hand.Action()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [Hand.Action] and conformance [A], &demangling cache variable for type metadata for [Hand.Action]);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in Hand()
{
  return MEMORY[0x24BEE4578];
}

__n128 __swift_memcpy17_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for HandsSessionPrototypeSettings()
{
  return &type metadata for HandsSessionPrototypeSettings;
}

ValueMetadata *type metadata accessor for HandsSessionSettings()
{
  return &type metadata for HandsSessionSettings;
}

uint64_t getEnumTagSinglePayload for CameraCalibration(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[80])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraCalibration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraCalibration()
{
  return &type metadata for CameraCalibration;
}

ValueMetadata *type metadata accessor for CameraCalibration.CameraModel()
{
  return &type metadata for CameraCalibration.CameraModel;
}

__n128 __swift_memcpy112_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for CameraMetadata(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraMetadata()
{
  return &type metadata for CameraMetadata;
}

ValueMetadata *type metadata accessor for HandSkeleton()
{
  return &type metadata for HandSkeleton;
}

uint64_t getEnumTagSinglePayload for HandSkeleton.JointName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE6)
    goto LABEL_17;
  if (a2 + 26 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 26) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 26;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 26;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 26;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v8 = v6 - 27;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HandSkeleton.JointName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_23D8EC9C4 + 4 * byte_23D9BE160[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_23D8EC9F8 + 4 * byte_23D9BE15B[v4]))();
}

uint64_t sub_23D8EC9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8ECA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8ECA08);
  return result;
}

uint64_t sub_23D8ECA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8ECA1CLL);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_23D8ECA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8ECA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HandSkeleton.JointName()
{
  return &type metadata for HandSkeleton.JointName;
}

uint64_t getEnumTagSinglePayload for HandSkeleton.Joint(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xE6 && a1[144])
    return (*(_DWORD *)a1 + 230);
  v3 = *a1;
  v4 = v3 >= 0x1B;
  v5 = v3 - 27;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HandSkeleton.Joint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE5)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 230;
    if (a3 >= 0xE6)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0xE6)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 26;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandSkeleton.Joint()
{
  return &type metadata for HandSkeleton.Joint;
}

uint64_t initializeWithCopy for Hand(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Hand(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for Hand(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for Hand(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Hand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Hand()
{
  return &type metadata for Hand;
}

uint64_t storeEnumTagSinglePayload for CameraCalibration.CameraModel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D8ECD40 + 4 * byte_23D9BE16A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D8ECD74 + 4 * byte_23D9BE165[v4]))();
}

uint64_t sub_23D8ECD74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8ECD7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8ECD84);
  return result;
}

uint64_t sub_23D8ECD90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8ECD98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D8ECD9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8ECDA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Hand.Chirality()
{
  return &type metadata for Hand.Chirality;
}

uint64_t storeEnumTagSinglePayload for Hand.Action(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23D8ECE0C + 4 * byte_23D9BE174[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23D8ECE40 + 4 * byte_23D9BE16F[v4]))();
}

uint64_t sub_23D8ECE40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8ECE48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8ECE50);
  return result;
}

uint64_t sub_23D8ECE5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8ECE64);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23D8ECE68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8ECE70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Hand.Action()
{
  return &type metadata for Hand.Action;
}

ValueMetadata *type metadata accessor for HandsInput()
{
  return &type metadata for HandsInput;
}

ValueMetadata *type metadata accessor for HandsOutput()
{
  return &type metadata for HandsOutput;
}

ValueMetadata *type metadata accessor for WristCounts()
{
  return &type metadata for WristCounts;
}

uint64_t storeEnumTagSinglePayload for HandsSessionSettings.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23D8ECEFC + 4 * byte_23D9BE179[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23D8ECF1C + 4 * byte_23D9BE17E[v4]))();
}

_BYTE *sub_23D8ECEFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23D8ECF1C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D8ECF24(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D8ECF2C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D8ECF34(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D8ECF3C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for HandsSessionSettings.CodingKeys()
{
  return &unk_250E43BF8;
}

uint64_t storeEnumTagSinglePayload for HandsSessionPrototypeSettings.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23D8ECFA4 + 4 * byte_23D9BE188[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23D8ECFD8 + 4 * byte_23D9BE183[v4]))();
}

uint64_t sub_23D8ECFD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8ECFE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8ECFE8);
  return result;
}

uint64_t sub_23D8ECFF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8ECFFCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23D8ED000(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8ED008(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for HandsSessionPrototypeSettings.CodingKeys()
{
  return &unk_250E43C88;
}

uint64_t specialized HandsSessionPrototypeSettings.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F4C656C62616E65 && a2 == 0xED0000676E696767;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C676E6967676F6CLL && a2 == 0xEC0000006C657665
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000023D9D8390
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000023D9D83B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x800000023D9D83D0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized HandsSessionSettings.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023D9D8400)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JpegEncoder.JpegRes()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance JpegEncoder.JpegRes()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JpegEncoder.JpegRes()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t JpegEncoder.__allocating_init(quality:)(float a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = swift_allocObject();
  *(float *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v3 = (void *)objc_opt_self();
  v4 = (void *)MEMORY[0x2426372E8](0xD000000000000017, 0x800000023D9D8420);
  v5 = objc_msgSend(v3, sel_createHighPriorityQueueWithKey_, v4);

  *(_QWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 40) = dispatch_semaphore_create(0);
  return v2;
}

uint64_t JpegEncoder.init(quality:)(float a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  *(float *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2 = (void *)objc_opt_self();
  v3 = (void *)MEMORY[0x2426372E8](0xD000000000000017, 0x800000023D9D8420);
  v4 = objc_msgSend(v2, sel_createHighPriorityQueueWithKey_, v3);

  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = dispatch_semaphore_create(0);
  return v1;
}

void JpegEncoder.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  CMTimeValue v7;
  uint64_t v8;
  CMTimeEpoch v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  OpaqueVTCompressionSession *v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  CMTime v17;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  v7 = *MEMORY[0x24BDC0D40];
  v8 = *(_QWORD *)(MEMORY[0x24BDC0D40] + 8);
  v9 = *(_QWORD *)(MEMORY[0x24BDC0D40] + 16);
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v14 >= v6)
      goto LABEL_21;
    v15 = *(_QWORD *)(v2 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v6)
        goto LABEL_21;
      v15 = *(_QWORD *)(v2 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v6)
          goto LABEL_21;
        v15 = *(_QWORD *)(v2 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v5 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    v13 = (OpaqueVTCompressionSession *)*(id *)(*(_QWORD *)(v1 + 56) + 8 * v12);
    v17.value = v7;
    *(_QWORD *)&v17.timescale = v8;
    v17.epoch = v9;
    VTCompressionSessionCompleteFrames(v13, &v17);
    VTCompressionSessionInvalidate(v13);

  }
  v16 = v14 + 3;
  if (v16 >= v6)
  {
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
  v15 = *(_QWORD *)(v2 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v6)
      goto LABEL_21;
    v15 = *(_QWORD *)(v2 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

uint64_t JpegEncoder.__deallocating_deinit()
{
  JpegEncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t JpegEncoder.encodeSync(image:timestamp:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23D9AB950;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v4;
  swift_retain();
  swift_retain();
  JpegEncoder.encode(image:timestamp:refMark:completion:)(a1, a2, a3, a4, 0, (uint64_t)partial apply for closure #1 in JpegEncoder.encodeSync(image:timestamp:), v10);
  swift_release();
  OS_dispatch_semaphore.wait()();
  swift_beginAccess();
  v11 = *(_QWORD *)(v9 + 16);
  outlined copy of Data?(v11, *(_QWORD *)(v9 + 24));
  swift_release();
  return v11;
}

Swift::Int closure #1 in JpegEncoder.encodeSync(image:timestamp:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;

  swift_beginAccess();
  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 24) = a3;
  outlined copy of Data?(a2, a3);
  outlined consume of Data?(v7, v8);
  return OS_dispatch_semaphore.signal()();
}

uint64_t JpegEncoder.encode(image:timestamp:refMark:completion:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v13;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t result;
  NSObject *queue;
  _QWORD aBlock[6];

  v8 = v7;
  v13 = a3;
  queue = *(NSObject **)(v7 + 32);
  v16 = HIDWORD(a3);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = v8;
  *(_QWORD *)(v17 + 32) = a2;
  *(_DWORD *)(v17 + 40) = v13;
  *(_DWORD *)(v17 + 44) = v16;
  *(_QWORD *)(v17 + 48) = a4;
  *(_QWORD *)(v17 + 56) = a6;
  *(_QWORD *)(v17 + 64) = a7;
  *(_QWORD *)(v17 + 72) = a5;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:);
  *(_QWORD *)(v18 + 24) = v17;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_22;
  v19 = _Block_copy(aBlock);
  v20 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(queue, v19);
  _Block_release(v19);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v16 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:)(__CVBuffer *a1, uint64_t a2, CMTimeValue a3, uint64_t a4, CMTimeEpoch a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t Width;
  size_t v16;
  size_t Height;
  size_t v18;
  CMTimeEpoch v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeEpoch epoch;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  OSStatus v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  OSType PixelFormatType;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  int v44;
  OpaqueVTCompressionSession *session;
  uint64_t v46;
  uint64_t v47;
  _BYTE duration[32];
  CMTime aBlock;
  void *v51;
  uint64_t (*v52)(uint64_t, uint64_t, void *);
  _QWORD *v53;
  CMTime v54;

  Width = CVPixelBufferGetWidth(a1);
  if ((Width & 0x8000000000000000) != 0
    || (v16 = Width, HIDWORD(Width))
    || (Height = CVPixelBufferGetHeight(a1), (Height & 0x8000000000000000) != 0)
    || (v18 = Height, v46 = a6, v47 = a8, HIDWORD(Height)))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v19 = a5;
    swift_beginAccess();
    v20 = *(_QWORD *)(a2 + 24);
    v44 = v18;
    if (*(_QWORD *)(v20 + 16)
      && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16 | (v18 << 32)), (v22 & 1) != 0))
    {
      v23 = *(void **)(*(_QWORD *)(v20 + 56) + 8 * v21);
    }
    else
    {
      v23 = (void *)specialized closure #1 in implicit closure #1 in closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:)(a2, v16 | (v18 << 32));
    }
    session = v23;
    v54 = CMTime.init(value:timescale:)(1, 20);
    value = v54.value;
    timescale = v54.timescale;
    epoch = v54.epoch;
    v27 = HIDWORD(*(_QWORD *)&v54.timescale);
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = a3;
    v28[3] = a4;
    v28[4] = v19;
    v28[5] = v46;
    v28[6] = a7;
    v28[7] = v47;
    v52 = partial apply for closure #2 in closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:);
    v53 = v28;
    aBlock.value = MEMORY[0x24BDAC760];
    *(_QWORD *)&aBlock.timescale = 1107296256;
    aBlock.epoch = (CMTimeEpoch)thunk for @escaping @callee_guaranteed @Sendable (@unowned Int32, @unowned VTEncodeInfoFlags, @guaranteed CMSampleBufferRef?) -> ();
    v51 = &block_descriptor_15;
    v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    aBlock.value = a3;
    *(_QWORD *)&aBlock.timescale = a4;
    aBlock.epoch = v19;
    *(_QWORD *)duration = value;
    *(_QWORD *)&duration[8] = __PAIR64__(v27, timescale);
    *(_QWORD *)&duration[16] = epoch;
    v30 = VTCompressionSessionEncodeFrameWithOutputHandler(session, a1, &aBlock, (CMTime *)duration, 0, 0, v29);
    _Block_release(v29);
    if (v30 == noErr.getter())
    {

    }
    else
    {
      aBlock.value = 0;
      *(_QWORD *)&aBlock.timescale = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v31._object = (void *)0x800000023D9D8520;
      v31._countAndFlagsBits = 0xD000000000000023;
      String.append(_:)(v31);
      *(_DWORD *)duration = v16;
      v32 = MEMORY[0x24BEE44F0];
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = 2127904;
      v34._object = (void *)0xE300000000000000;
      String.append(_:)(v34);
      *(_DWORD *)duration = v44;
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 23328;
      v36._object = (void *)0xE200000000000000;
      String.append(_:)(v36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_23D9A70A0;
      PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      v39 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v37 + 56) = v32;
      *(_QWORD *)(v37 + 64) = v39;
      *(_DWORD *)(v37 + 32) = PixelFormatType;
      v40._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 541073501;
      v41._object = (void *)0xE400000000000000;
      String.append(_:)(v41);
      Float.write<A>(to:)();
      v42._countAndFlagsBits = 8250;
      v42._object = (void *)0xE200000000000000;
      String.append(_:)(v42);
      *(_DWORD *)duration = v30;
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v51 = (void *)MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      memset(duration, 0, sizeof(duration));
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)duration, 0xD00000000000004CLL, 0x800000023D9D8480, 74, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
    }
  }
}

uint64_t closure #2 in closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, unint64_t), uint64_t a8, uint64_t a9)
{
  opaqueCMSampleBuffer *v11;
  OpaqueCMBlockBuffer *v12;
  OpaqueCMBlockBuffer *v13;
  OSStatus DataPointer;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  CMTime v20;
  char *dataPointerOut[2];

  dataPointerOut[1] = *(char **)MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v11 = a3;
    v12 = CMSampleBufferGetDataBuffer(v11);
    if (v12)
    {
      v13 = v12;
      CMSampleBufferGetOutputPresentationTimeStamp(&v20, v11);
      if (v20.value == a4)
      {
        v19 = 0;
        v20.value = 0;
        dataPointerOut[0] = 0;
        DataPointer = CMBlockBufferGetDataPointer(v13, 0, (size_t *)&v20, (size_t *)&v19, dataPointerOut);
        if (DataPointer == noErr.getter() && v19 >= 1 && dataPointerOut[0])
        {
          v15 = specialized Data.init(bytes:count:)(dataPointerOut[0], v19);
          v17 = v16;
          outlined copy of Data._Representation(v15, v16);
          a7(a9, v15, v17);

          outlined consume of Data._Representation(v15, v17);
          return outlined consume of Data._Representation(v15, v17);
        }
      }

    }
  }
  return ((uint64_t (*)(uint64_t, _QWORD, unint64_t))a7)(a9, 0, 0xF000000000000000);
}

void thunk for @escaping @callee_guaranteed @Sendable (@unowned Int32, @unowned VTEncodeInfoFlags, @guaranteed CMSampleBufferRef?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void (*v7)(uint64_t, uint64_t, void *);
  id v8;

  v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  swift_retain();
  v8 = a4;
  v7(a2, a3, a4);
  swift_release();

}

OpaqueVTCompressionSession *JpegEncoder.createSession(resolution:)(uint64_t width)
{
  void *outputCallbackRefCon;
  OSStatus v2;
  Swift::String v3;
  const __CFString *v4;
  OpaqueVTCompressionSession *v5;
  Class isa;
  _OWORD v8[2];
  _QWORD v9[4];
  VTCompressionSessionRef v10[2];

  v10[1] = *(VTCompressionSessionRef *)MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  if ((width & 0x8000000080000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = VTCompressionSessionCreate(0, width, SHIDWORD(width), 0x6A706567u, 0, 0, 0, 0, outputCallbackRefCon, v10);
  if (v2 != noErr.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v9[0] = 0xD00000000000001FLL;
    v9[1] = 0x800000023D9D84D0;
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v9[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v8, 0, sizeof(v8));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v8, 0xD00000000000004CLL, 0x800000023D9D8480, 83, (uint64_t)v9, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  }
  if (!v10[0])
LABEL_7:
    __break(1u);
  v4 = (const __CFString *)*MEMORY[0x24BDF9338];
  v5 = v10[0];
  isa = Float._bridgeToObjectiveC()().super.super.isa;
  VTSessionSetProperty(v5, v4, isa);

  return v5;
}

uint64_t sub_23D8EE3E4()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject();
}

uint64_t sub_23D8EE418()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in JpegEncoder.encodeSync(image:timestamp:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return closure #1 in JpegEncoder.encodeSync(image:timestamp:)(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_23D8EE44C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:)()
{
  uint64_t v0;

  closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:)(*(__CVBuffer **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_23D8EE494()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t type metadata accessor for JpegEncoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for JpegEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JpegEncoder.__allocating_init(quality:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of JpegEncoder.encodeSync(image:timestamp:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of JpegEncoder.encode(image:timestamp:refMark:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

ValueMetadata *type metadata accessor for JpegEncoder.JpegRes()
{
  return &type metadata for JpegEncoder.JpegRes;
}

unint64_t lazy protocol witness table accessor for type JpegEncoder.JpegRes and conformance JpegEncoder.JpegRes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JpegEncoder.JpegRes and conformance JpegEncoder.JpegRes;
  if (!lazy protocol witness table cache variable for type JpegEncoder.JpegRes and conformance JpegEncoder.JpegRes)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for JpegEncoder.JpegRes, &type metadata for JpegEncoder.JpegRes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JpegEncoder.JpegRes and conformance JpegEncoder.JpegRes);
  }
  return result;
}

uint64_t specialized closure #1 in implicit closure #1 in closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:)(uint64_t a1, unint64_t width)
{
  OpaqueVTCompressionSession *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = JpegEncoder.createSession(resolution:)(width);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v4, width, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  result = swift_endAccess();
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v7 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(width);
    if ((v8 & 1) != 0)
      return *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * result);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23D8EE620()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return closure #2 in closure #1 in JpegEncoder.encode(image:timestamp:refMark:completion:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(void (**)(uint64_t, uint64_t, unint64_t))(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
}

uint64_t getEnumTagSinglePayload for EnrollmentDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8EE684(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for EnrollmentDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D8EE70C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for EnrollmentDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for EnrollmentDataPB);
}

uint64_t *initializeBufferWithCopyOfBuffer for EnrollmentResultsPB(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for EnrollmentDataPB(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
    if (v17(v14, 1, v15))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      v20 = *(int *)(v15 + 20);
      v45 = v10;
      v21 = v11;
      v22 = (char *)v13 + v20;
      v23 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v24 = v22;
      v11 = v21;
      v10 = v45;
      v11(v24, v23, v45);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v25 = a3[8];
    v26 = (uint64_t *)((char *)v4 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    if (v17((uint64_t *)((char *)a2 + v25), 1, v15))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v26 = *v27;
      v29 = *(int *)(v15 + 20);
      v30 = v10;
      v31 = v11;
      v32 = (char *)v26 + v29;
      v33 = (char *)v27 + v29;
      swift_bridgeObjectRetain();
      v34 = v32;
      v11 = v31;
      v10 = v30;
      v11(v34, v33, v30);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v15);
    }
    v35 = a3[9];
    v36 = a3[10];
    v37 = (char *)v4 + v35;
    v38 = (char *)a2 + v35;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_WORD *)v37 + 4) = *((_WORD *)v38 + 4);
    v39 = (uint64_t *)((char *)v4 + v36);
    v40 = (uint64_t *)((char *)a2 + v36);
    v41 = type metadata accessor for MissingFingerDataPB(0);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      *v39 = *v40;
      v11((char *)v39 + *(int *)(v41 + 24), (char *)v40 + *(int *)(v41 + 24), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
  }
  return v4;
}

uint64_t type metadata accessor for MissingFingerDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for MissingFingerDataPB);
}

uint64_t destroy for EnrollmentResultsPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for EnrollmentDataPB(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 20), v5);
  }
  v9 = a1 + a2[8];
  if (!v8(v9, 1, v7))
  {
    swift_bridgeObjectRelease();
    v13(v9 + *(int *)(v7 + 20), v5);
  }
  v10 = a1 + a2[10];
  v11 = type metadata accessor for MissingFingerDataPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v10 + *(int *)(v11 + 24), v5);
  return result;
}

uint64_t initializeWithCopy for EnrollmentResultsPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for EnrollmentDataPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v18 = *(int *)(v14 + 20);
    v43 = v9;
    v19 = v10;
    v20 = (char *)v12 + v18;
    v21 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v22 = v20;
    v10 = v19;
    v9 = v43;
    v10((uint64_t)v22, (uint64_t)v21, v43);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v23 = a3[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  if (v16((_QWORD *)(a2 + v23), 1, v14))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *v24 = *v25;
    v27 = *(int *)(v14 + 20);
    v28 = v9;
    v29 = v10;
    v30 = (char *)v24 + v27;
    v31 = (char *)v25 + v27;
    swift_bridgeObjectRetain();
    v32 = v30;
    v10 = v29;
    v9 = v28;
    v10((uint64_t)v32, (uint64_t)v31, v28);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v33 = a3[9];
  v34 = a3[10];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_WORD *)(v35 + 8) = *(_WORD *)(v36 + 8);
  v37 = (_QWORD *)(a1 + v34);
  v38 = (_QWORD *)(a2 + v34);
  v39 = type metadata accessor for MissingFingerDataPB(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    *v37 = *v38;
    v10((uint64_t)v37 + *(int *)(v39 + 24), (uint64_t)v38 + *(int *)(v39 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  return a1;
}

uint64_t assignWithCopy for EnrollmentResultsPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  v47 = *(void (**)(char *, char *, uint64_t))(v48 + 24);
  ((void (*)(uint64_t, uint64_t))v47)(v7, v8);
  v10 = a3[7];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = type metadata accessor for EnrollmentDataPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *v11 = *v12;
      v18 = *(int *)(v13 + 20);
      v19 = (char *)v11 + v18;
      v20 = (char *)v12 + v18;
      v21 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
      swift_bridgeObjectRetain();
      v21(v19, v20, v49);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for EnrollmentDataPB);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *v11 = *v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47((char *)v11 + *(int *)(v13 + 20), (char *)v12 + *(int *)(v13 + 20), v49);
LABEL_7:
  v23 = a3[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = v15((_QWORD *)(a1 + v23), 1, v13);
  v27 = v15(v25, 1, v13);
  if (v26)
  {
    if (!v27)
    {
      *v24 = *v25;
      v28 = *(int *)(v13 + 20);
      v29 = (char *)v24 + v28;
      v30 = (char *)v25 + v28;
      v31 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
      swift_bridgeObjectRetain();
      v31(v29, v30, v49);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v24, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v24, type metadata accessor for EnrollmentDataPB);
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  *v24 = *v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47((char *)v24 + *(int *)(v13 + 20), (char *)v25 + *(int *)(v13 + 20), v49);
LABEL_13:
  v33 = a3[9];
  v34 = a1 + v33;
  v35 = (uint64_t *)(a2 + v33);
  v36 = *v35;
  *(_WORD *)(v34 + 8) = *((_WORD *)v35 + 4);
  *(_QWORD *)v34 = v36;
  v37 = a3[10];
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = type metadata accessor for MissingFingerDataPB(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      *(_DWORD *)v38 = *(_DWORD *)v39;
      *((_DWORD *)v38 + 1) = *((_DWORD *)v39 + 1);
      v47(&v38[*(int *)(v40 + 24)], &v39[*(int *)(v40 + 24)], v49);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v38, type metadata accessor for MissingFingerDataPB);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    return a1;
  }
  *(_DWORD *)v38 = *(_DWORD *)v39;
  *((_DWORD *)v38 + 1) = *((_DWORD *)v39 + 1);
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(&v38[*(int *)(v40 + 24)], &v39[*(int *)(v40 + 24)], v49);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  return a1;
}

uint64_t initializeWithTake for EnrollmentResultsPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for EnrollmentDataPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[8];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  if (v16((_QWORD *)(a2 + v18), 1, v14))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *v19 = *v20;
    v10((char *)v19 + *(int *)(v14 + 20), (char *)v20 + *(int *)(v14 + 20), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  v22 = a3[9];
  v23 = a3[10];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_WORD *)(v24 + 8) = *(_WORD *)(v25 + 8);
  v26 = (_QWORD *)(a1 + v23);
  v27 = (_QWORD *)(a2 + v23);
  v28 = type metadata accessor for MissingFingerDataPB(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    *v26 = *v27;
    v10((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

uint64_t assignWithTake for EnrollmentResultsPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v39 = *(_QWORD *)(v9 - 8);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v38(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for EnrollmentDataPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v11[*(int *)(v13 + 20)], &v12[*(int *)(v13 + 20)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for EnrollmentDataPB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRelease();
  v38((uint64_t)&v11[*(int *)(v13 + 20)], (uint64_t)&v12[*(int *)(v13 + 20)], v9);
LABEL_7:
  v19 = a3[8];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = v15((char *)(a1 + v19), 1, v13);
  v23 = v15(v21, 1, v13);
  if (v22)
  {
    if (!v23)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v20[*(int *)(v13 + 20)], &v21[*(int *)(v13 + 20)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for EnrollmentDataPB);
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  swift_bridgeObjectRelease();
  v38((uint64_t)&v20[*(int *)(v13 + 20)], (uint64_t)&v21[*(int *)(v13 + 20)], v9);
LABEL_13:
  v25 = a3[9];
  v26 = a3[10];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_WORD *)(v27 + 8) = *(_WORD *)(v28 + 8);
  v29 = (_QWORD *)(a1 + v26);
  v30 = (_QWORD *)(a2 + v26);
  v31 = type metadata accessor for MissingFingerDataPB(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      *v29 = *v30;
      v38((uint64_t)v29 + *(int *)(v31 + 24), (uint64_t)v30 + *(int *)(v31 + 24), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v29, type metadata accessor for MissingFingerDataPB);
    goto LABEL_18;
  }
  if (v35)
  {
LABEL_18:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  *v29 = *v30;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))((char *)v29 + *(int *)(v31 + 24), (char *)v30 + *(int *)(v31 + 24), v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnrollmentResultsPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8EF714(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    v7 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v10;
      v9 = a3[7];
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[10];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for EnrollmentResultsPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8EF7BC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[7];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[10];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for EnrollmentResultsPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for EnrollmentResultsPB);
}

void type metadata completion function for EnrollmentResultsPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for EnrollmentDataPB?, (void (*)(uint64_t))type metadata accessor for EnrollmentDataPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for MissingFingerDataPB?, (void (*)(uint64_t))type metadata accessor for MissingFingerDataPB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_DWORD *assignWithCopy for MissingFingerDataPB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MissingFingerDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8EF9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MissingFingerDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8EFA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for MissingFingerDataPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t EnrollmentDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
  }
  return result;
}

uint64_t EnrollmentDataPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for EnrollmentDataPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance EnrollmentDataPB()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance EnrollmentDataPB()
{
  return EnrollmentDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance EnrollmentDataPB()
{
  return EnrollmentDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance EnrollmentDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance EnrollmentDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static EnrollmentDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EnrollmentDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EnrollmentDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
  return Message.hash(into:)();
}

uint64_t MissingFingerDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t MissingFingerDataPB.traverse<A>(visitor:)()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for MissingFingerDataPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MissingFingerDataPB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MissingFingerDataPB()
{
  return MissingFingerDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MissingFingerDataPB()
{
  return MissingFingerDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MissingFingerDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MissingFingerDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MissingFingerDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MissingFingerDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MissingFingerDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
  return Message.hash(into:)();
}

uint64_t EnrollmentResultsPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 2:
          closure #2 in EnrollmentResultsPB.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in EnrollmentResultsPB.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in EnrollmentResultsPB.decodeMessage<A>(decoder:)();
          break;
        case 5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 6:
          closure #6 in EnrollmentResultsPB.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in EnrollmentResultsPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for EnrollmentResultsPB(0);
  type metadata accessor for EnrollmentDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in EnrollmentResultsPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for EnrollmentResultsPB(0);
  type metadata accessor for EnrollmentDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #4 in EnrollmentResultsPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for EnrollmentResultsPB(0);
  lazy protocol witness table accessor for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #6 in EnrollmentResultsPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for EnrollmentResultsPB(0);
  type metadata accessor for MissingFingerDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t EnrollmentResultsPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (*(float *)v3 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in EnrollmentResultsPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in EnrollmentResultsPB.traverse<A>(visitor:)(v3, a1, a2, a3);
      closure #3 in EnrollmentResultsPB.traverse<A>(visitor:)(v3);
      if (*(double *)(v3 + 8) != 0.0)
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
      closure #4 in EnrollmentResultsPB.traverse<A>(visitor:)(v3, a1, a2, a3);
      type metadata accessor for EnrollmentResultsPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in EnrollmentResultsPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EnrollmentDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for EnrollmentResultsPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for EnrollmentDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for EnrollmentDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for EnrollmentDataPB);
}

uint64_t closure #2 in EnrollmentResultsPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EnrollmentDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for EnrollmentResultsPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for EnrollmentDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for EnrollmentDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for EnrollmentDataPB);
}

uint64_t closure #3 in EnrollmentResultsPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for EnrollmentResultsPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in EnrollmentResultsPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MissingFingerDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for EnrollmentResultsPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for MissingFingerDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for MissingFingerDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for MissingFingerDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for MissingFingerDataPB);
}

uint64_t protocol witness for Message.init() in conformance EnrollmentResultsPB@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  UnknownStorage.init()();
  v4 = a2 + a1[7];
  v5 = type metadata accessor for EnrollmentDataPB(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(a2 + a1[8], 1, 1, v5);
  v7 = a1[10];
  v8 = a2 + a1[9];
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  v9 = a2 + v7;
  v10 = type metadata accessor for MissingFingerDataPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance EnrollmentResultsPB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance EnrollmentResultsPB()
{
  return EnrollmentResultsPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance EnrollmentResultsPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnrollmentResultsPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance EnrollmentResultsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance EnrollmentResultsPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static EnrollmentResultsPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EnrollmentResultsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EnrollmentResultsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in EnrollmentResultsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
}

uint64_t base witness table accessor for Message in EnrollmentResultsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
}

uint64_t base witness table accessor for Hashable in EnrollmentResultsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
}

uint64_t base witness table accessor for Equatable in MissingFingerDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
}

uint64_t base witness table accessor for Message in MissingFingerDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
}

uint64_t base witness table accessor for Hashable in MissingFingerDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MissingFingerDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MissingFingerDataPB and conformance MissingFingerDataPB, type metadata accessor for MissingFingerDataPB, (uint64_t)&protocol conformance descriptor for MissingFingerDataPB);
}

uint64_t base witness table accessor for Equatable in EnrollmentDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
}

uint64_t base witness table accessor for Message in EnrollmentDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
}

uint64_t base witness table accessor for Hashable in EnrollmentDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in EnrollmentDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentDataPB and conformance EnrollmentDataPB, type metadata accessor for EnrollmentDataPB, (uint64_t)&protocol conformance descriptor for EnrollmentDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in EnrollmentResultsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
}

uint64_t specialized static MissingFingerDataPB.== infix(_:_:)(_DWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *(_DWORD *)a2 && a1[1] == *((_DWORD *)a2 + 1))
  {
    v13 = type metadata accessor for MissingFingerDataPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, &a2[*(int *)(v13 + 24)], v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static EnrollmentResultsPB.== infix(_:_:)(float *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  int *v64;
  uint64_t v65;
  float *v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  char v84;
  uint64_t *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char v103;
  void (*v104)(char *, uint64_t);
  uint64_t v106;
  _DWORD *v107;
  _DWORD *v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  float *v116;
  float *v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  char *v121;
  char *v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v122 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v121 = (char *)&v111 - v10;
  v129 = type metadata accessor for MissingFingerDataPB(0);
  v125 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129, v11);
  v120 = (_DWORD *)((char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MissingFingerDataPB?, MissingFingerDataPB?));
  MEMORY[0x24BDAC7A8](v124, v13);
  v127 = (uint64_t)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissingFingerDataPB?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v123 = (_DWORD *)((char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18, v19);
  v126 = (uint64_t)&v111 - v20;
  MEMORY[0x24BDAC7A8](v21, v22);
  v130 = (uint64_t)&v111 - v23;
  v24 = type metadata accessor for EnrollmentDataPB(0);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24, v26);
  v128 = (uint64_t *)((char *)&v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v28, v29);
  v131 = (uint64_t *)((char *)&v111 - v30);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EnrollmentDataPB?, EnrollmentDataPB?));
  MEMORY[0x24BDAC7A8](v31, v32);
  v132 = (uint64_t)&v111 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34, v35);
  v37 = (char *)&v111 - v36;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentDataPB?);
  MEMORY[0x24BDAC7A8](v38, v39);
  MEMORY[0x24BDAC7A8](v40, v41);
  MEMORY[0x24BDAC7A8](v42, v43);
  MEMORY[0x24BDAC7A8](v44, v45);
  v133 = (uint64_t *)((char *)&v111 - v46);
  MEMORY[0x24BDAC7A8](v47, v48);
  v50 = (char *)&v111 - v49;
  MEMORY[0x24BDAC7A8](v51, v52);
  v57 = (char *)&v111 - v56;
  if (*a1 != *a2)
    goto LABEL_34;
  v118 = v55;
  v119 = v54;
  v113 = v5;
  v114 = (uint64_t *)v53;
  v115 = v4;
  v58 = type metadata accessor for EnrollmentResultsPB(0);
  v59 = *(int *)(v58 + 28);
  v116 = a1;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a1 + v59, (uint64_t)v57, &demangling cache variable for type metadata for EnrollmentDataPB?);
  v60 = (int *)v58;
  v61 = *(int *)(v58 + 28);
  v117 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a2 + v61, (uint64_t)v50, &demangling cache variable for type metadata for EnrollmentDataPB?);
  v62 = (uint64_t)&v37[*(int *)(v31 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v57, (uint64_t)v37, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v50, v62, &demangling cache variable for type metadata for EnrollmentDataPB?);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v63((uint64_t)v37, 1, v24) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v50, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v57, &demangling cache variable for type metadata for EnrollmentDataPB?);
    if (v63(v62, 1, v24) == 1)
    {
      v112 = v31;
      outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for EnrollmentDataPB?);
      goto LABEL_5;
    }
LABEL_10:
    v73 = &demangling cache variable for type metadata for (EnrollmentDataPB?, EnrollmentDataPB?);
    v74 = (uint64_t)v37;
LABEL_33:
    outlined destroy of Coordinate3DPB?(v74, v73);
    goto LABEL_34;
  }
  v72 = v133;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v37, (uint64_t)v133, &demangling cache variable for type metadata for EnrollmentDataPB?);
  if (v63(v62, 1, v24) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v50, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v57, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v72, type metadata accessor for EnrollmentDataPB);
    goto LABEL_10;
  }
  v75 = v131;
  outlined init with take of Matrix2dPB(v62, (uint64_t)v131, type metadata accessor for EnrollmentDataPB);
  if (!specialized static Array<A>.== infix(_:_:)(*v72, *v75))
  {
    outlined destroy of Matrix3x3PB((uint64_t)v75, type metadata accessor for EnrollmentDataPB);
    v79 = &demangling cache variable for type metadata for EnrollmentDataPB?;
    outlined destroy of Coordinate3DPB?((uint64_t)v50, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v57, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v72, type metadata accessor for EnrollmentDataPB);
    v74 = (uint64_t)v37;
LABEL_32:
    v73 = v79;
    goto LABEL_33;
  }
  v112 = v31;
  v76 = (uint64_t)v72;
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v75, type metadata accessor for EnrollmentDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v50, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v57, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined destroy of Matrix3x3PB(v76, type metadata accessor for EnrollmentDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for EnrollmentDataPB?);
  if ((v77 & 1) == 0)
    goto LABEL_34;
LABEL_5:
  v64 = v60;
  v65 = v60[8];
  v66 = v116;
  v67 = v119;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v116 + v65, v119, &demangling cache variable for type metadata for EnrollmentDataPB?);
  v68 = v117;
  v69 = v118;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v117 + v64[8], v118, &demangling cache variable for type metadata for EnrollmentDataPB?);
  v70 = v132;
  v71 = v132 + *(int *)(v112 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v67, v132, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v69, v71, &demangling cache variable for type metadata for EnrollmentDataPB?);
  if (v63(v70, 1, v24) == 1)
  {
    outlined destroy of Coordinate3DPB?(v69, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for EnrollmentDataPB?);
    if (v63(v71, 1, v24) == 1)
    {
      outlined destroy of Coordinate3DPB?(v70, &demangling cache variable for type metadata for EnrollmentDataPB?);
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v78 = v114;
  outlined init with copy of (Int32, Matrix2dPB)(v70, (uint64_t)v114, &demangling cache variable for type metadata for EnrollmentDataPB?);
  if (v63(v71, 1, v24) == 1)
  {
    outlined destroy of Coordinate3DPB?(v118, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Coordinate3DPB?(v119, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v78, type metadata accessor for EnrollmentDataPB);
LABEL_16:
    v73 = &demangling cache variable for type metadata for (EnrollmentDataPB?, EnrollmentDataPB?);
    v74 = v70;
    goto LABEL_33;
  }
  v80 = v128;
  outlined init with take of Matrix2dPB(v71, (uint64_t)v128, type metadata accessor for EnrollmentDataPB);
  if (!specialized static Array<A>.== infix(_:_:)(*v78, *v80))
  {
    outlined destroy of Matrix3x3PB((uint64_t)v80, type metadata accessor for EnrollmentDataPB);
    v79 = &demangling cache variable for type metadata for EnrollmentDataPB?;
    outlined destroy of Coordinate3DPB?(v118, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Coordinate3DPB?(v119, &demangling cache variable for type metadata for EnrollmentDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v78, type metadata accessor for EnrollmentDataPB);
    v74 = v70;
    goto LABEL_32;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v81 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v80, type metadata accessor for EnrollmentDataPB);
  outlined destroy of Coordinate3DPB?(v118, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined destroy of Coordinate3DPB?(v119, &demangling cache variable for type metadata for EnrollmentDataPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v78, type metadata accessor for EnrollmentDataPB);
  outlined destroy of Coordinate3DPB?(v70, &demangling cache variable for type metadata for EnrollmentDataPB?);
  if ((v81 & 1) == 0)
    goto LABEL_34;
LABEL_20:
  v82 = v64[9];
  v83 = (uint64_t *)((char *)v66 + v82);
  v84 = *((_BYTE *)v66 + v82 + 9);
  v85 = (uint64_t *)((char *)v68 + v82);
  v86 = *((_BYTE *)v68 + v82 + 9);
  if ((v84 & 1) != 0)
  {
    v87 = v129;
    v88 = v130;
    if ((v86 & 1) == 0)
      goto LABEL_34;
  }
  else
  {
    v87 = v129;
    v88 = v130;
    if ((v86 & 1) != 0)
      goto LABEL_34;
    v89 = *v83;
    v90 = *v85;
    if ((v85[1] & 1) != 0)
      __asm { BR              X11 }
    if (v89 != v90)
      goto LABEL_34;
  }
  if (*((double *)v66 + 1) != *((double *)v68 + 1))
  {
LABEL_34:
    v103 = 0;
    return v103 & 1;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v66 + v64[10], v88, &demangling cache variable for type metadata for MissingFingerDataPB?);
  v91 = v126;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v68 + v64[10], v126, &demangling cache variable for type metadata for MissingFingerDataPB?);
  v92 = v127;
  v93 = v127 + *(int *)(v124 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v88, v127, &demangling cache variable for type metadata for MissingFingerDataPB?);
  v94 = v92;
  outlined init with copy of (Int32, Matrix2dPB)(v91, v93, &demangling cache variable for type metadata for MissingFingerDataPB?);
  v95 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
  if (v95(v94, 1, v87) == 1)
  {
    outlined destroy of Coordinate3DPB?(v91, &demangling cache variable for type metadata for MissingFingerDataPB?);
    v94 = v127;
    outlined destroy of Coordinate3DPB?(v88, &demangling cache variable for type metadata for MissingFingerDataPB?);
    if (v95(v93, 1, v87) == 1)
    {
      outlined destroy of Coordinate3DPB?(v94, &demangling cache variable for type metadata for MissingFingerDataPB?);
      goto LABEL_30;
    }
    goto LABEL_39;
  }
  v106 = v87;
  v107 = v123;
  outlined init with copy of (Int32, Matrix2dPB)(v94, (uint64_t)v123, &demangling cache variable for type metadata for MissingFingerDataPB?);
  if (v95(v93, 1, v106) == 1)
  {
    outlined destroy of Coordinate3DPB?(v126, &demangling cache variable for type metadata for MissingFingerDataPB?);
    outlined destroy of Coordinate3DPB?(v130, &demangling cache variable for type metadata for MissingFingerDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v107, type metadata accessor for MissingFingerDataPB);
LABEL_39:
    v73 = &demangling cache variable for type metadata for (MissingFingerDataPB?, MissingFingerDataPB?);
    v74 = v94;
    goto LABEL_33;
  }
  v108 = v120;
  outlined init with take of Matrix2dPB(v93, (uint64_t)v120, type metadata accessor for MissingFingerDataPB);
  v109 = v126;
  if (*v107 != *v108 || v107[1] != v108[1])
  {
    outlined destroy of Matrix3x3PB((uint64_t)v108, type metadata accessor for MissingFingerDataPB);
    v79 = &demangling cache variable for type metadata for MissingFingerDataPB?;
    outlined destroy of Coordinate3DPB?(v109, &demangling cache variable for type metadata for MissingFingerDataPB?);
    outlined destroy of Coordinate3DPB?(v130, &demangling cache variable for type metadata for MissingFingerDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v107, type metadata accessor for MissingFingerDataPB);
    v74 = v127;
    goto LABEL_32;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v110 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v108, type metadata accessor for MissingFingerDataPB);
  outlined destroy of Coordinate3DPB?(v109, &demangling cache variable for type metadata for MissingFingerDataPB?);
  outlined destroy of Coordinate3DPB?(v130, &demangling cache variable for type metadata for MissingFingerDataPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v107, type metadata accessor for MissingFingerDataPB);
  outlined destroy of Coordinate3DPB?(v127, &demangling cache variable for type metadata for MissingFingerDataPB?);
  if ((v110 & 1) == 0)
    goto LABEL_34;
LABEL_30:
  v96 = (uint64_t)v66 + v64[6];
  v97 = v113;
  v98 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
  v99 = v121;
  v100 = v115;
  v98(v121, v96, v115);
  v101 = (uint64_t)v68 + v64[6];
  v102 = v122;
  v98(v122, v101, v100);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v103 = dispatch thunk of static Equatable.== infix(_:_:)();
  v104 = *(void (**)(char *, uint64_t))(v97 + 8);
  v104(v102, v100);
  v104(v99, v100);
  return v103 & 1;
}

uint64_t specialized static EnrollmentDataPB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    v13 = type metadata accessor for EnrollmentDataPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 20), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_23D8F2048()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_23D8F215C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_23D8F2228()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  void *v0;

  Hasher.init(_seed:)();
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v0 = (void *)NSString.init(stringLiteral:)();
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int sub_23D8F23C4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  _BYTE v22[32];
  __int128 v23;
  _OWORD v24[2];
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v20 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v1 + 63) >> 6;
  v27 = a1;
  result = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v3)
    goto LABEL_6;
LABEL_7:
  v9 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v9 < v21)
    {
      v10 = *(_QWORD *)(v20 + 8 * v9);
      ++v5;
      if (v10)
        goto LABEL_22;
      v5 = v9 + 1;
      if (v9 + 1 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
        goto LABEL_22;
      v5 = v9 + 2;
      if (v9 + 2 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
        goto LABEL_22;
      v5 = v9 + 3;
      if (v9 + 3 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
      {
LABEL_22:
        v3 = (v10 - 1) & v10;
        for (i = __clz(__rbit64(v10)) + (v5 << 6); ; i = v7 | (v5 << 6))
        {
          v12 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
          v14 = *v12;
          v13 = v12[1];
          outlined init with copy of Any(*(_QWORD *)(v27 + 56) + 32 * i, (uint64_t)v26);
          *(_QWORD *)&v25 = v14;
          *((_QWORD *)&v25 + 1) = v13;
          v23 = v25;
          v24[0] = v26[0];
          v24[1] = v26[1];
          outlined init with copy of Any((uint64_t)v24, (uint64_t)v22);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v15 = specialized PoseDnnOutputLayer.init(rawValue:)();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
          if (v15 == 18)
          {
            result = outlined destroy of Coordinate3DPB?((uint64_t)&v23, &demangling cache variable for type metadata for (key: String, value: Any));
            if (!v3)
              goto LABEL_7;
          }
          else
          {
            outlined init with copy of Any((uint64_t)v24, (uint64_t)v22);
            type metadata accessor for IONamedSlice();
            swift_allocObject();
            v16 = IONamedSlice.init(_:)((uint64_t)v22);
            outlined destroy of Coordinate3DPB?((uint64_t)&v23, &demangling cache variable for type metadata for (key: String, value: Any));
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            v18 = v6[2];
            v17 = v6[3];
            if (v18 >= v17 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            v6[2] = v18 + 1;
            v19 = &v6[2 * v18];
            *((_BYTE *)v19 + 32) = v15;
            v19[5] = v16;
            if (!v3)
              goto LABEL_7;
          }
LABEL_6:
          v7 = __clz(__rbit64(v3));
          v3 &= v3 - 1;
        }
      }
      v11 = v9 + 4;
      if (v11 < v21)
      {
        v10 = *(_QWORD *)(v20 + 8 * v11);
        if (v10)
        {
          v5 = v11;
          goto LABEL_22;
        }
        while (1)
        {
          v5 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_32;
          if (v5 >= v21)
            break;
          v10 = *(_QWORD *)(v20 + 8 * v5);
          ++v11;
          if (v10)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v6;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  _BYTE v22[32];
  __int128 v23;
  _OWORD v24[2];
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v20 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v1 + 63) >> 6;
  v27 = a1;
  result = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v3)
    goto LABEL_6;
LABEL_7:
  v9 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v9 < v21)
    {
      v10 = *(_QWORD *)(v20 + 8 * v9);
      ++v5;
      if (v10)
        goto LABEL_22;
      v5 = v9 + 1;
      if (v9 + 1 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
        goto LABEL_22;
      v5 = v9 + 2;
      if (v9 + 2 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
        goto LABEL_22;
      v5 = v9 + 3;
      if (v9 + 3 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
      {
LABEL_22:
        v3 = (v10 - 1) & v10;
        for (i = __clz(__rbit64(v10)) + (v5 << 6); ; i = v7 | (v5 << 6))
        {
          v12 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
          v14 = *v12;
          v13 = v12[1];
          outlined init with copy of Any(*(_QWORD *)(v27 + 56) + 32 * i, (uint64_t)v26);
          *(_QWORD *)&v25 = v14;
          *((_QWORD *)&v25 + 1) = v13;
          v23 = v25;
          v24[0] = v26[0];
          v24[1] = v26[1];
          outlined init with copy of Any((uint64_t)v24, (uint64_t)v22);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v15 = specialized PoseDnnInputLayer.init(rawValue:)();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
          if (v15 == 21)
          {
            result = outlined destroy of Coordinate3DPB?((uint64_t)&v23, &demangling cache variable for type metadata for (key: String, value: Any));
            if (!v3)
              goto LABEL_7;
          }
          else
          {
            outlined init with copy of Any((uint64_t)v24, (uint64_t)v22);
            type metadata accessor for IONamedSlice();
            swift_allocObject();
            v16 = IONamedSlice.init(_:)((uint64_t)v22);
            outlined destroy of Coordinate3DPB?((uint64_t)&v23, &demangling cache variable for type metadata for (key: String, value: Any));
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            v18 = v6[2];
            v17 = v6[3];
            if (v18 >= v17 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            v6[2] = v18 + 1;
            v19 = &v6[2 * v18];
            *((_BYTE *)v19 + 32) = v15;
            v19[5] = v16;
            if (!v3)
              goto LABEL_7;
          }
LABEL_6:
          v7 = __clz(__rbit64(v3));
          v3 &= v3 - 1;
        }
      }
      v11 = v9 + 4;
      if (v11 < v21)
      {
        v10 = *(_QWORD *)(v20 + 8 * v11);
        if (v10)
        {
          v5 = v11;
          goto LABEL_22;
        }
        while (1)
        {
          v5 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_32;
          if (v5 >= v21)
            break;
          v10 = *(_QWORD *)(v20 + 8 * v5);
          ++v11;
          if (v10)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v6;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;
  _BYTE v23[32];
  Swift::String v24;
  _OWORD v25[2];
  Swift::String v26;
  _OWORD v27[2];
  uint64_t v28;

  v21 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v1 + 63) >> 6;
  v28 = a1;
  result = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v3)
    goto LABEL_6;
LABEL_7:
  v9 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v9 < v22)
    {
      v10 = *(_QWORD *)(v21 + 8 * v9);
      ++v5;
      if (v10)
        goto LABEL_22;
      v5 = v9 + 1;
      if (v9 + 1 >= v22)
        goto LABEL_30;
      v10 = *(_QWORD *)(v21 + 8 * v5);
      if (v10)
        goto LABEL_22;
      v5 = v9 + 2;
      if (v9 + 2 >= v22)
        goto LABEL_30;
      v10 = *(_QWORD *)(v21 + 8 * v5);
      if (v10)
        goto LABEL_22;
      v5 = v9 + 3;
      if (v9 + 3 >= v22)
        goto LABEL_30;
      v10 = *(_QWORD *)(v21 + 8 * v5);
      if (v10)
      {
LABEL_22:
        v3 = (v10 - 1) & v10;
        for (i = __clz(__rbit64(v10)) + (v5 << 6); ; i = v7 | (v5 << 6))
        {
          v12 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
          v14 = *v12;
          v13 = (void *)v12[1];
          outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * i, (uint64_t)v27);
          v26._countAndFlagsBits = v14;
          v26._object = v13;
          v24 = v26;
          v25[0] = v27[0];
          v25[1] = v27[1];
          v15 = v26;
          outlined init with copy of Any((uint64_t)v25, (uint64_t)v23);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PinchDnnOutputLayer.init(rawValue:), v15);
          swift_bridgeObjectRelease();
          if (v16 >= 4)
          {
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
            result = outlined destroy of Coordinate3DPB?((uint64_t)&v24, &demangling cache variable for type metadata for (key: String, value: Any));
            if (!v3)
              goto LABEL_7;
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
            outlined init with copy of Any((uint64_t)v25, (uint64_t)v23);
            type metadata accessor for IONamedSlice();
            swift_allocObject();
            v17 = IONamedSlice.init(_:)((uint64_t)v23);
            outlined destroy of Coordinate3DPB?((uint64_t)&v24, &demangling cache variable for type metadata for (key: String, value: Any));
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            v19 = v6[2];
            v18 = v6[3];
            if (v19 >= v18 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            v6[2] = v19 + 1;
            v20 = &v6[2 * v19];
            *((_BYTE *)v20 + 32) = v16;
            v20[5] = v17;
            if (!v3)
              goto LABEL_7;
          }
LABEL_6:
          v7 = __clz(__rbit64(v3));
          v3 &= v3 - 1;
        }
      }
      v11 = v9 + 4;
      if (v11 < v22)
      {
        v10 = *(_QWORD *)(v21 + 8 * v11);
        if (v10)
        {
          v5 = v11;
          goto LABEL_22;
        }
        while (1)
        {
          v5 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_32;
          if (v5 >= v22)
            break;
          v10 = *(_QWORD *)(v21 + 8 * v5);
          ++v11;
          if (v10)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v6;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  _BYTE v22[32];
  __int128 v23;
  _OWORD v24[2];
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v20 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v1 + 63) >> 6;
  v27 = a1;
  result = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v3)
    goto LABEL_6;
LABEL_7:
  v9 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v9 < v21)
    {
      v10 = *(_QWORD *)(v20 + 8 * v9);
      ++v5;
      if (v10)
        goto LABEL_22;
      v5 = v9 + 1;
      if (v9 + 1 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
        goto LABEL_22;
      v5 = v9 + 2;
      if (v9 + 2 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
        goto LABEL_22;
      v5 = v9 + 3;
      if (v9 + 3 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v5);
      if (v10)
      {
LABEL_22:
        v3 = (v10 - 1) & v10;
        for (i = __clz(__rbit64(v10)) + (v5 << 6); ; i = v7 | (v5 << 6))
        {
          v12 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
          v14 = *v12;
          v13 = v12[1];
          outlined init with copy of Any(*(_QWORD *)(v27 + 56) + 32 * i, (uint64_t)v26);
          *(_QWORD *)&v25 = v14;
          *((_QWORD *)&v25 + 1) = v13;
          v23 = v25;
          v24[0] = v26[0];
          v24[1] = v26[1];
          outlined init with copy of Any((uint64_t)v24, (uint64_t)v22);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v15 = specialized PinchDnnInputLayer.init(rawValue:)();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
          if (v15 == 23)
          {
            result = outlined destroy of Coordinate3DPB?((uint64_t)&v23, &demangling cache variable for type metadata for (key: String, value: Any));
            if (!v3)
              goto LABEL_7;
          }
          else
          {
            outlined init with copy of Any((uint64_t)v24, (uint64_t)v22);
            type metadata accessor for IONamedSlice();
            swift_allocObject();
            v16 = IONamedSlice.init(_:)((uint64_t)v22);
            outlined destroy of Coordinate3DPB?((uint64_t)&v23, &demangling cache variable for type metadata for (key: String, value: Any));
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            v18 = v6[2];
            v17 = v6[3];
            if (v18 >= v17 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v6);
              v6 = (_QWORD *)result;
            }
            v6[2] = v18 + 1;
            v19 = &v6[2 * v18];
            *((_BYTE *)v19 + 32) = v15;
            v19[5] = v16;
            if (!v3)
              goto LABEL_7;
          }
LABEL_6:
          v7 = __clz(__rbit64(v3));
          v3 &= v3 - 1;
        }
      }
      v11 = v9 + 4;
      if (v11 < v21)
      {
        v10 = *(_QWORD *)(v20 + 8 * v11);
        if (v10)
        {
          v5 = v11;
          goto LABEL_22;
        }
        while (1)
        {
          v5 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_32;
          if (v5 >= v21)
            break;
          v10 = *(_QWORD *)(v20 + 8 * v5);
          ++v11;
          if (v10)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v6;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized TypedKeysDictionary.makeIterator()(uint64_t a1)
{
  return specialized TypedKeysDictionary.makeIterator()(a1, (uint64_t)&unk_250E441B0, &demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<(key: PinchDnnInputLayer, value: IONamedSlice)>>, (uint64_t)partial apply for specialized closure #1 in TypedKeysDictionary.makeIterator());
}

uint64_t specialized TypedKeysDictionary.makeIterator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v7 = -1;
  v8 = -1 << *(_BYTE *)(a1 + 32);
  v9 = a1 + 64;
  if (-v8 < 64)
    v7 = ~(-1 << -(char)v8);
  v10 = v7 & *(_QWORD *)(a1 + 64);
  v11 = ~v8;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = v9;
  v12[4] = v11;
  v12[5] = 0;
  v12[6] = v10;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a4;
  *(_QWORD *)(v13 + 24) = v12;
  swift_bridgeObjectRetain();
  return v13;
}

unint64_t specialized static ModelParams.getNamedSlices<A>(_:key:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  ValueMetadata *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v37[3];
  ValueMetadata *v38;
  __int128 v39;
  __int128 v40;

  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v5 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PoseDnnInputLayer]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 16);
      if (!v6)
      {
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
        {
LABEL_54:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PoseDnnInputLayer, IONamedSlice>);
          v33 = static _DictionaryStorage.allocate(capacity:)();
          goto LABEL_55;
        }
LABEL_51:
        v33 = MEMORY[0x24BEE4B00];
LABEL_55:
        v37[0] = v33;
        v34 = swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v34, 1, v37, specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
        swift_bridgeObjectRelease();
        return v37[0];
      }
      *(_QWORD *)&v39 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      v7 = (_QWORD *)v39;
      type metadata accessor for IONamedSlice();
      v8 = 0;
      do
      {
        v9 = *(_BYTE *)(a2 + v8 + 32);
        v38 = &type metadata for PoseDnnInputLayer;
        LOBYTE(v37[0]) = v9;
        swift_allocObject();
        v10 = IONamedSlice.init(_:)((uint64_t)v37);
        *(_QWORD *)&v39 = v7;
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v7 = (_QWORD *)v39;
        }
        ++v8;
        v7[2] = v12 + 1;
        v13 = &v7[2 * v12];
        *((_BYTE *)v13 + 32) = v9;
        v13[5] = v10;
      }
      while (v6 != v8);
LABEL_53:
      swift_bridgeObjectRelease();
      if (v7[2])
        goto LABEL_54;
      goto LABEL_51;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  v14 = (ValueMetadata *)MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v17 = *(_QWORD *)(a2 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain();
        v18 = (uint64_t *)(a2 + 40);
        v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v20 = *(v18 - 1);
          v19 = *v18;
          swift_bridgeObjectRetain_n();
          v21 = specialized PoseDnnInputLayer.init(rawValue:)();
          if (v21 == 21)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v22 = v21;
            v38 = v14;
            v37[0] = v20;
            v37[1] = v19;
            type metadata accessor for IONamedSlice();
            swift_allocObject();
            v23 = IONamedSlice.init(_:)((uint64_t)v37);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
            v25 = v7[2];
            v24 = v7[3];
            if (v25 >= v24 >> 1)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v7);
            v7[2] = v25 + 1;
            v26 = &v7[2 * v25];
            *((_BYTE *)v26 + 32) = v22;
            v26[5] = v23;
          }
          v18 += 2;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      goto LABEL_53;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v27, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PoseDnnInputLayer : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v29 = specialized _NativeDictionary.mapValues<A>(_:)(a2, &demangling cache variable for type metadata for _DictionaryStorage<PoseDnnInputLayer, IONamedSlice>);
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v31 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v30, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v32 = specialized Sequence.compactMap<A>(_:)(a2);
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v32 + 16))
      {
        v33 = MEMORY[0x24BEE4B00];
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

{
  unint64_t v4;
  char v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  ValueMetadata *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v37[3];
  ValueMetadata *v38;
  __int128 v39;
  __int128 v40;

  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v5 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PoseDnnOutputLayer]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 16);
      if (!v6)
      {
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
        {
LABEL_54:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PoseDnnOutputLayer, IONamedSlice>);
          v33 = static _DictionaryStorage.allocate(capacity:)();
          goto LABEL_55;
        }
LABEL_51:
        v33 = MEMORY[0x24BEE4B00];
LABEL_55:
        v37[0] = v33;
        v34 = swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v34, 1, v37, specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
        swift_bridgeObjectRelease();
        return v37[0];
      }
      *(_QWORD *)&v39 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      v7 = (_QWORD *)v39;
      type metadata accessor for IONamedSlice();
      v8 = 0;
      do
      {
        v9 = *(_BYTE *)(a2 + v8 + 32);
        v38 = &type metadata for PoseDnnOutputLayer;
        LOBYTE(v37[0]) = v9;
        swift_allocObject();
        v10 = IONamedSlice.init(_:)((uint64_t)v37);
        *(_QWORD *)&v39 = v7;
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v7 = (_QWORD *)v39;
        }
        ++v8;
        v7[2] = v12 + 1;
        v13 = &v7[2 * v12];
        *((_BYTE *)v13 + 32) = v9;
        v13[5] = v10;
      }
      while (v6 != v8);
LABEL_53:
      swift_bridgeObjectRelease();
      if (v7[2])
        goto LABEL_54;
      goto LABEL_51;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  v14 = (ValueMetadata *)MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v17 = *(_QWORD *)(a2 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain();
        v18 = (uint64_t *)(a2 + 40);
        v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v20 = *(v18 - 1);
          v19 = *v18;
          swift_bridgeObjectRetain_n();
          v21 = specialized PoseDnnOutputLayer.init(rawValue:)();
          if (v21 == 18)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v22 = v21;
            v38 = v14;
            v37[0] = v20;
            v37[1] = v19;
            type metadata accessor for IONamedSlice();
            swift_allocObject();
            v23 = IONamedSlice.init(_:)((uint64_t)v37);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
            v25 = v7[2];
            v24 = v7[3];
            if (v25 >= v24 >> 1)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v7);
            v7[2] = v25 + 1;
            v26 = &v7[2 * v25];
            *((_BYTE *)v26 + 32) = v22;
            v26[5] = v23;
          }
          v18 += 2;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      goto LABEL_53;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v27, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PoseDnnOutputLayer : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v29 = specialized _NativeDictionary.mapValues<A>(_:)(a2, &demangling cache variable for type metadata for _DictionaryStorage<PoseDnnOutputLayer, IONamedSlice>);
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v31 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v30, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v32 = specialized Sequence.compactMap<A>(_:)(a2);
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v32 + 16))
      {
        v33 = MEMORY[0x24BEE4B00];
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

{
  unint64_t v4;
  char v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  ValueMetadata *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v37[3];
  ValueMetadata *v38;
  __int128 v39;
  __int128 v40;

  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v5 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PinchDnnInputLayer]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 16);
      if (!v6)
      {
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
        {
LABEL_54:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PinchDnnInputLayer, IONamedSlice>);
          v33 = static _DictionaryStorage.allocate(capacity:)();
          goto LABEL_55;
        }
LABEL_51:
        v33 = MEMORY[0x24BEE4B00];
LABEL_55:
        v37[0] = v33;
        v34 = swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v34, 1, v37, specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
        swift_bridgeObjectRelease();
        return v37[0];
      }
      *(_QWORD *)&v39 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      v7 = (_QWORD *)v39;
      type metadata accessor for IONamedSlice();
      v8 = 0;
      do
      {
        v9 = *(_BYTE *)(a2 + v8 + 32);
        v38 = &type metadata for PinchDnnInputLayer;
        LOBYTE(v37[0]) = v9;
        swift_allocObject();
        v10 = IONamedSlice.init(_:)((uint64_t)v37);
        *(_QWORD *)&v39 = v7;
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v7 = (_QWORD *)v39;
        }
        ++v8;
        v7[2] = v12 + 1;
        v13 = &v7[2 * v12];
        *((_BYTE *)v13 + 32) = v9;
        v13[5] = v10;
      }
      while (v6 != v8);
LABEL_53:
      swift_bridgeObjectRelease();
      if (v7[2])
        goto LABEL_54;
      goto LABEL_51;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  v14 = (ValueMetadata *)MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v17 = *(_QWORD *)(a2 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain();
        v18 = (uint64_t *)(a2 + 40);
        v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v20 = *(v18 - 1);
          v19 = *v18;
          swift_bridgeObjectRetain_n();
          v21 = specialized PinchDnnInputLayer.init(rawValue:)();
          if (v21 == 23)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v22 = v21;
            v38 = v14;
            v37[0] = v20;
            v37[1] = v19;
            type metadata accessor for IONamedSlice();
            swift_allocObject();
            v23 = IONamedSlice.init(_:)((uint64_t)v37);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
            v25 = v7[2];
            v24 = v7[3];
            if (v25 >= v24 >> 1)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v7);
            v7[2] = v25 + 1;
            v26 = &v7[2 * v25];
            *((_BYTE *)v26 + 32) = v22;
            v26[5] = v23;
          }
          v18 += 2;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      goto LABEL_53;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v27, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PinchDnnInputLayer : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v29 = specialized _NativeDictionary.mapValues<A>(_:)(a2, &demangling cache variable for type metadata for _DictionaryStorage<PinchDnnInputLayer, IONamedSlice>);
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v31 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v30, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v40 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v32 = specialized Sequence.compactMap<A>(_:)(a2);
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v32 + 16))
      {
        v33 = MEMORY[0x24BEE4B00];
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
  }
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t specialized static ModelParams.getNamedSlices<A>(_:key:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  ValueMetadata *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v38[3];
  ValueMetadata *v39;
  __int128 v40;
  __int128 v41;

  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v38), (v5 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v38);
  if (*((_QWORD *)&v41 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PinchDnnOutputLayer]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 16);
      if (!v6)
      {
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
        {
LABEL_54:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PinchDnnOutputLayer, IONamedSlice>);
          v34 = static _DictionaryStorage.allocate(capacity:)();
          goto LABEL_55;
        }
LABEL_51:
        v34 = MEMORY[0x24BEE4B00];
LABEL_55:
        v38[0] = v34;
        v35 = swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v35, 1, v38, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
        swift_bridgeObjectRelease();
        return v38[0];
      }
      *(_QWORD *)&v40 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      v7 = (_QWORD *)v40;
      type metadata accessor for IONamedSlice();
      v8 = 0;
      do
      {
        v9 = *(_BYTE *)(a2 + v8 + 32);
        v39 = &type metadata for PinchDnnOutputLayer;
        LOBYTE(v38[0]) = v9;
        swift_allocObject();
        v10 = IONamedSlice.init(_:)((uint64_t)v38);
        *(_QWORD *)&v40 = v7;
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v7 = (_QWORD *)v40;
        }
        ++v8;
        v7[2] = v12 + 1;
        v13 = &v7[2 * v12];
        *((_BYTE *)v13 + 32) = v9;
        v13[5] = v10;
      }
      while (v6 != v8);
LABEL_53:
      swift_bridgeObjectRelease();
      if (v7[2])
        goto LABEL_54;
      goto LABEL_51;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  v14 = (ValueMetadata *)MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v38), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v38);
  if (*((_QWORD *)&v41 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v17 = *(_QWORD *)(a2 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain();
        v18 = (void **)(a2 + 40);
        v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v20 = (uint64_t)*(v18 - 1);
          v19 = *v18;
          swift_bridgeObjectRetain_n();
          v21._countAndFlagsBits = v20;
          v21._object = v19;
          v22 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of specialized static ModelParams.getNamedSlices<A>(_:key:), v21);
          swift_bridgeObjectRelease();
          if (v22 >= 4)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v39 = v14;
            v38[0] = v20;
            v38[1] = v19;
            type metadata accessor for IONamedSlice();
            swift_allocObject();
            v23 = IONamedSlice.init(_:)((uint64_t)v38);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
            v25 = v7[2];
            v24 = v7[3];
            if (v25 >= v24 >> 1)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v7);
            v7[2] = v25 + 1;
            v26 = &v7[2 * v25];
            *((_BYTE *)v26 + 32) = v22;
            v26[5] = v23;
          }
          v18 += 2;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      goto LABEL_53;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v38), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v27, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v38);
  if (*((_QWORD *)&v41 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PinchDnnOutputLayer : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v29 = specialized _NativeDictionary.mapValues<A>(_:)(a2, &demangling cache variable for type metadata for _DictionaryStorage<PinchDnnOutputLayer, IONamedSlice>);
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v38), (v31 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v30, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v38);
  if (*((_QWORD *)&v41 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v32 = specialized Sequence.compactMap<A>(_:)(a2);
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v32 + 16))
      {
        v34 = MEMORY[0x24BEE4B00];
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
  }
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return v33;
}

uint64_t specialized BasePoseActionModelParams.init(_:modelPath:modelConfig:allowInternalModel:configurationName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  swift_retain();
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v7 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  specialized Dictionary.init(dictionaryLiteral:)(v14);
  *(_QWORD *)(v7 + 64) = v15;
  *(_QWORD *)(v7 + 72) = v14;
  *(_QWORD *)(v7 + 80) = v14;
  *(_QWORD *)(v7 + 88) = v14;
  *(_BYTE *)(v7 + 96) = a7;
  swift_release();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_BYTE *)(v7 + 48) = a6;
  if (a4)
  {
    *(_QWORD *)(v7 + 32) = a3;
    *(_QWORD *)(v7 + 40) = a4;
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    (*(void (**)(void))(*(_QWORD *)v7 + 184))();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(v7 + 32) = a1;
    *(_QWORD *)(v7 + 40) = a2;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t specialized BasePoseActionModelParams.reset(modelConfig:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;

  v2 = v1;
  v2[7] = specialized static ModelParams.getNamedSlices<A>(_:key:)(a1, 0x737475706E69);
  swift_bridgeObjectRelease();
  v2[8] = specialized static ModelParams.getNamedSlices<A>(_:key:)(a1, 0x7374757074756FLL);
  swift_bridgeObjectRelease();
  v4 = v2[7];
  v5 = MEMORY[0x24BEE4AF8];
  v46 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v6 = v46;
  specialized TypedKeysDictionary.makeIterator()(v4, (uint64_t)&unk_250E44200, &demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<(key: PoseDnnInputLayer, value: IONamedSlice)>>, (uint64_t)partial apply for specialized closure #1 in TypedKeysDictionary.makeIterator());
  while (1)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v45)
      break;
    v8 = v45[2];
    v7 = v45[3];
    swift_bridgeObjectRetain();
    swift_release();
    v46 = v6;
    v10 = *(_QWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v6 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v6 = v46;
    }
    *(_QWORD *)(v6 + 16) = v10 + 1;
    v11 = v6 + 16 * v10;
    *(_QWORD *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v7;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v12 = specialized Set.init<A>(_:)(v6);
  swift_release();
  v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v12);
  swift_bridgeObjectRelease();
  v44 = v13;
  swift_retain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v44);
  swift_release();
  v2[9] = (uint64_t)v44;
  swift_bridgeObjectRelease();
  v14 = v2[8];
  v46 = v5;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v15 = v46;
  specialized TypedKeysDictionary.makeIterator()(v14, (uint64_t)&unk_250E441D8, &demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<(key: PoseDnnOutputLayer, value: IONamedSlice)>>, (uint64_t)partial apply for specialized closure #1 in TypedKeysDictionary.makeIterator());
  while (1)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v45)
      break;
    v17 = v45[2];
    v16 = v45[3];
    swift_bridgeObjectRetain();
    swift_release();
    v46 = v15;
    v19 = *(_QWORD *)(v15 + 16);
    v18 = *(_QWORD *)(v15 + 24);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v15 = v46;
    }
    *(_QWORD *)(v15 + 16) = v19 + 1;
    v20 = v15 + 16 * v19;
    *(_QWORD *)(v20 + 32) = v17;
    *(_QWORD *)(v20 + 40) = v16;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v21 = specialized Set.init<A>(_:)(v15);
  swift_release();
  v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  v44 = v22;
  swift_retain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v44);
  swift_release();
  v2[10] = (uint64_t)v44;
  swift_bridgeObjectRelease();
  specialized TypedKeysDictionary.makeIterator()(v2[7], (uint64_t)&unk_250E44200, &demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<(key: PoseDnnInputLayer, value: IONamedSlice)>>, (uint64_t)partial apply for specialized closure #1 in TypedKeysDictionary.makeIterator());
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v23 = v45;
  v24 = MEMORY[0x24BEE4AF8];
  if (v45)
  {
    v25 = (char)v44;
    v26 = MEMORY[0x24BEE4AF8];
    while (v23[5])
    {
LABEL_17:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v46 = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
        v26 = v46;
      }
      v29 = *(_QWORD *)(v26 + 16);
      v28 = *(_QWORD *)(v26 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        v26 = v46;
      }
      *(_QWORD *)(v26 + 16) = v29 + 1;
      v30 = v26 + 16 * v29;
      *(_BYTE *)(v30 + 32) = v25;
      *(_QWORD *)(v30 + 40) = v23;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      v25 = (char)v44;
      v23 = v45;
      if (!v45)
        goto LABEL_24;
    }
    while (1)
    {
      swift_release();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      v23 = v45;
      if (!v45)
        break;
      if (v45[5])
      {
        v25 = (char)v44;
        goto LABEL_17;
      }
    }
  }
  else
  {
    v26 = MEMORY[0x24BEE4AF8];
  }
LABEL_24:
  swift_release();
  v31 = *(_QWORD *)(v26 + 16);
  if (v31)
  {
    v32 = v2;
    v44 = (_QWORD *)v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    v33 = 40;
    v34 = (uint64_t)v44;
    do
    {
      v35 = *(_QWORD *)(v26 + v33);
      v37 = *(_QWORD *)(v35 + 16);
      v36 = *(_QWORD *)(v35 + 24);
      v44 = (_QWORD *)v34;
      v39 = *(_QWORD *)(v34 + 16);
      v38 = *(_QWORD *)(v34 + 24);
      swift_bridgeObjectRetain();
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        v34 = (uint64_t)v44;
      }
      *(_QWORD *)(v34 + 16) = v39 + 1;
      v40 = v34 + 16 * v39;
      *(_QWORD *)(v40 + 32) = v37;
      *(_QWORD *)(v40 + 40) = v36;
      v33 += 16;
      --v31;
    }
    while (v31);
    swift_release();
    v2 = v32;
  }
  else
  {
    swift_release();
    v34 = MEMORY[0x24BEE4AF8];
  }
  v41 = specialized Set.init<A>(_:)(v34);
  swift_bridgeObjectRelease();
  v42 = specialized _copyCollectionToContiguousArray<A>(_:)(v41);
  swift_bridgeObjectRelease();
  v44 = v42;
  swift_retain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v44);
  swift_release();
  v2[11] = (uint64_t)v44;
  return swift_bridgeObjectRelease();
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;

  v2 = v1;
  v2[7] = specialized static ModelParams.getNamedSlices<A>(_:key:)(a1, 0x737475706E69);
  swift_bridgeObjectRelease();
  v2[8] = specialized static ModelParams.getNamedSlices<A>(_:key:)(a1, 0x7374757074756FLL);
  swift_bridgeObjectRelease();
  v4 = v2[7];
  v5 = MEMORY[0x24BEE4AF8];
  v46 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v6 = v46;
  specialized TypedKeysDictionary.makeIterator()(v4, (uint64_t)&unk_250E441B0, &demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<(key: PinchDnnInputLayer, value: IONamedSlice)>>, (uint64_t)partial apply for specialized closure #1 in TypedKeysDictionary.makeIterator());
  while (1)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v45)
      break;
    v8 = v45[2];
    v7 = v45[3];
    swift_bridgeObjectRetain();
    swift_release();
    v46 = v6;
    v10 = *(_QWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v6 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v6 = v46;
    }
    *(_QWORD *)(v6 + 16) = v10 + 1;
    v11 = v6 + 16 * v10;
    *(_QWORD *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v7;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v12 = specialized Set.init<A>(_:)(v6);
  swift_release();
  v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v12);
  swift_bridgeObjectRelease();
  v44 = v13;
  swift_retain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v44);
  swift_release();
  v2[9] = (uint64_t)v44;
  swift_bridgeObjectRelease();
  v14 = v2[8];
  v46 = v5;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v15 = v46;
  specialized TypedKeysDictionary.makeIterator()(v14, (uint64_t)&unk_250E44188, &demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<(key: PinchDnnOutputLayer, value: IONamedSlice)>>, (uint64_t)partial apply for specialized closure #1 in TypedKeysDictionary.makeIterator());
  while (1)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v45)
      break;
    v17 = v45[2];
    v16 = v45[3];
    swift_bridgeObjectRetain();
    swift_release();
    v46 = v15;
    v19 = *(_QWORD *)(v15 + 16);
    v18 = *(_QWORD *)(v15 + 24);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v15 = v46;
    }
    *(_QWORD *)(v15 + 16) = v19 + 1;
    v20 = v15 + 16 * v19;
    *(_QWORD *)(v20 + 32) = v17;
    *(_QWORD *)(v20 + 40) = v16;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v21 = specialized Set.init<A>(_:)(v15);
  swift_release();
  v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  v44 = v22;
  swift_retain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v44);
  swift_release();
  v2[10] = (uint64_t)v44;
  swift_bridgeObjectRelease();
  specialized TypedKeysDictionary.makeIterator()(v2[7], (uint64_t)&unk_250E441B0, &demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<(key: PinchDnnInputLayer, value: IONamedSlice)>>, (uint64_t)partial apply for specialized closure #1 in TypedKeysDictionary.makeIterator());
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v23 = v45;
  v24 = MEMORY[0x24BEE4AF8];
  if (v45)
  {
    v25 = (char)v44;
    v26 = MEMORY[0x24BEE4AF8];
    while (v23[5])
    {
LABEL_17:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v46 = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
        v26 = v46;
      }
      v29 = *(_QWORD *)(v26 + 16);
      v28 = *(_QWORD *)(v26 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        v26 = v46;
      }
      *(_QWORD *)(v26 + 16) = v29 + 1;
      v30 = v26 + 16 * v29;
      *(_BYTE *)(v30 + 32) = v25;
      *(_QWORD *)(v30 + 40) = v23;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      v25 = (char)v44;
      v23 = v45;
      if (!v45)
        goto LABEL_24;
    }
    while (1)
    {
      swift_release();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      v23 = v45;
      if (!v45)
        break;
      if (v45[5])
      {
        v25 = (char)v44;
        goto LABEL_17;
      }
    }
  }
  else
  {
    v26 = MEMORY[0x24BEE4AF8];
  }
LABEL_24:
  swift_release();
  v31 = *(_QWORD *)(v26 + 16);
  if (v31)
  {
    v32 = v2;
    v44 = (_QWORD *)v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    v33 = 40;
    v34 = (uint64_t)v44;
    do
    {
      v35 = *(_QWORD *)(v26 + v33);
      v37 = *(_QWORD *)(v35 + 16);
      v36 = *(_QWORD *)(v35 + 24);
      v44 = (_QWORD *)v34;
      v39 = *(_QWORD *)(v34 + 16);
      v38 = *(_QWORD *)(v34 + 24);
      swift_bridgeObjectRetain();
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        v34 = (uint64_t)v44;
      }
      *(_QWORD *)(v34 + 16) = v39 + 1;
      v40 = v34 + 16 * v39;
      *(_QWORD *)(v40 + 32) = v37;
      *(_QWORD *)(v40 + 40) = v36;
      v33 += 16;
      --v31;
    }
    while (v31);
    swift_release();
    v2 = v32;
  }
  else
  {
    swift_release();
    v34 = MEMORY[0x24BEE4AF8];
  }
  v41 = specialized Set.init<A>(_:)(v34);
  swift_bridgeObjectRelease();
  v42 = specialized _copyCollectionToContiguousArray<A>(_:)(v41);
  swift_bridgeObjectRelease();
  v44 = v42;
  swift_retain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v44);
  swift_release();
  v2[11] = (uint64_t)v44;
  return swift_bridgeObjectRelease();
}

void specialized BasePoseActionModelParams.resolveUberModelPath()()
{
  __asm { BR              X10 }
}

uint64_t sub_23D8F55D0()
{
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t PinchDnnInputLayer.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D8F5A58 + 4 * byte_23D9BEEFC[a1]))(0x6F6A5F7475706E69, 0xEF64335F73746E69);
}

unint64_t sub_23D8F5A58()
{
  return 0xD000000000000018;
}

uint64_t sub_23D8F5BA4()
{
  return 0x315F746E7466;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PinchDnnInputLayer(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = PinchDnnInputLayer.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == PinchDnnInputLayer.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PinchDnnInputLayer()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PinchDnnInputLayer.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchDnnInputLayer()
{
  unsigned __int8 *v0;

  PinchDnnInputLayer.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PinchDnnInputLayer()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PinchDnnInputLayer.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchDnnInputLayer@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized PinchDnnInputLayer.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PinchDnnInputLayer@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PinchDnnInputLayer.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PinchDnnInputLayer(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PinchDnnInputLayer.allCases.getter;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PinchDnnOutputLayer(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance PinchDnnOutputLayer()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PinchDnnOutputLayer()
{
  __asm { BR              X10 }
}

uint64_t sub_23D8F5E40()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PinchDnnOutputLayer(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchDnnOutputLayer@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized PinchDnnOutputLayer.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PinchDnnOutputLayer()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23D8F5F08 + 4 * byte_23D9BEF17[*v0]))();
}

void sub_23D8F5F08(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6552657275736E75;
  a1[1] = v1;
}

void sub_23D8F5F20(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000023D9C3C20;
}

void sub_23D8F5F40(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PinchDnnOutputLayer(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PinchDnnOutputLayer;
}

void one-time initialization function for defaultSearchMakeThresholdRange()
{
  static PinchModelParams.defaultSearchMakeThresholdRange = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultSearchMakeThresholdRange;
}

void one-time initialization function for defaultSearchBreakThresholdRange()
{
  static PinchModelParams.defaultSearchBreakThresholdRange = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultSearchBreakThresholdRange;
}

uint64_t PinchModelParams.init(modelNameOrPath:allowInternalModel:configurationName:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v4 + 108) = 0;
  *(_QWORD *)(v4 + 100) = 0;
  *(_QWORD *)(v4 + 121) = 0;
  *(_QWORD *)(v4 + 116) = 0;
  *(_OWORD *)(v4 + 132) = xmmword_23D9BF230;
  *(_OWORD *)(v4 + 148) = xmmword_23D9BF240;
  *(_QWORD *)(v4 + 168) = 15;
  *(_OWORD *)(v4 + 176) = xmmword_23D9BF250;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = xmmword_23D9BF260;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 216) = 1;
  *(_QWORD *)(v4 + 224) = v9;
  *(_QWORD *)(v4 + 232) = v9;
  v10 = (void *)MEMORY[0x2426372E8]();
  v11 = objc_msgSend(v10, sel_lastPathComponent);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  if (v12 == a1 && v14 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    a1 = 0;
    a2 = 0;
  }
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v16 = specialized BasePoseActionModelParams.init(_:modelPath:modelConfig:allowInternalModel:configurationName:)(v12, v14, a1, a2, v15, a3 & 1, a4);
  swift_retain();
  ModelParams.configure()();
  swift_release();
  return v16;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PinchModelParams.resolveModelPath()()
{
  uint64_t v0;
  void *v1;
  void (*v2)(char *, uint64_t);
  void (*v3)(char *, uint64_t);
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String result;

  v2 = *(void (**)(char *, uint64_t))(v0 + 32);
  v1 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  if ((specialized Sequence<>.starts<A>(with:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    specialized BasePoseActionModelParams.resolveUberModelPath()();
    if (v4)
    {
      v2 = v3;
      v1 = v4;
    }
    else
    {
      type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for ModelUtils);
      v5 = *(_QWORD *)(v0 + 16);
      v6 = *(void **)(v0 + 24);
      v7 = *(unsigned __int8 *)(v0 + 48);
      swift_bridgeObjectRetain();
      v2 = static ModelUtils.getPinchModelPath(_:_:)(v5, v6, v7);
      v1 = v8;
      swift_bridgeObjectRelease();
    }
  }
  v9 = (uint64_t)v2;
  v10 = v1;
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

Swift::Void __swiftcall PinchModelParams.reset(modelConfig:)(Swift::OpaquePointer modelConfig)
{
  _DWORD *v1;
  _DWORD *v2;
  unint64_t v4;
  char v5;
  int v6;
  int v7;
  unint64_t v8;
  char v9;
  int v10;
  int v11;
  unint64_t v12;
  char v13;
  int v14;
  int v15;
  unint64_t v16;
  char v17;
  int v18;
  int v19;
  unint64_t v20;
  char v21;
  int v22;
  int v23;
  unint64_t v24;
  char v25;
  int v26;
  int v27;
  unint64_t v28;
  char v29;
  int v30;
  int v31;
  unint64_t v32;
  char v33;
  int v34;
  int v35;
  unint64_t v36;
  char v37;
  int v38;
  int v39;
  unint64_t v40;
  char v41;
  unsigned __int8 v42;
  unint64_t v43;
  char v44;
  int v45;
  int v46;
  unint64_t v47;
  char v48;
  float v49;
  float v50;
  unint64_t v51;
  char v52;
  int v53;
  int v54;
  unint64_t v55;
  char v56;
  int v57;
  int v58;
  unint64_t v59;
  char v60;
  int v61;
  int v62;
  unint64_t v63;
  char v64;
  int v65;
  int v66;
  unint64_t v67;
  char v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  id v90;
  char *v91;
  char *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  id v96[2];
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;

  v2 = v1;
  strcpy((char *)v96, "make_threshold");
  HIBYTE(v96[1]) = -18;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v5 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v4, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v7 = 1062333317;
    goto LABEL_10;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v7 = v6;

LABEL_10:
  v1[25] = v7;
  v96[0] = (id)0x68745F6B61657262;
  v96[1] = (id)0xEF646C6F68736572;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v9 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v8, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_18;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    v11 = 1065017672;
    goto LABEL_19;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v11 = v10;

LABEL_19:
  v1[26] = v11;
  v96[0] = (id)0x68745F626D746E74;
  v96[1] = (id)0xEF646C6F68736572;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v13 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v12, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_27;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:
    v15 = 0;
    goto LABEL_28;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v15 = v14;

LABEL_28:
  v1[48] = v15;
  v96[0] = (id)0xD000000000000016;
  v96[1] = (id)0x800000023D9D88B0;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v17 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v16, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_36;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_36:
    v19 = 1058977874;
    goto LABEL_37;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v19 = v18;

LABEL_37:
  v1[27] = v19;
  v96[0] = (id)0xD000000000000015;
  v96[1] = (id)0x800000023D9D88D0;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v21 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v20, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_45;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_45:
    v23 = 981668463;
    goto LABEL_46;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v23 = v22;

LABEL_46:
  v1[28] = v23;
  v96[0] = (id)0xD000000000000015;
  v96[1] = (id)0x800000023D9D88F0;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v25 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v24, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_54;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_54:
    v27 = 1057467924;
    goto LABEL_55;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v27 = v26;

LABEL_55:
  v1[30] = v27;
  v96[0] = (id)0xD000000000000016;
  v96[1] = (id)0x800000023D9D8910;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v29 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v28, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_63;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_63:
    v31 = 0;
    goto LABEL_64;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v31 = v30;

LABEL_64:
  v1[31] = v31;
  v96[0] = (id)0xD000000000000016;
  v96[1] = (id)0x800000023D9D8930;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v33 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v32, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_72;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_72:
    v35 = 0;
    goto LABEL_73;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v35 = v34;

LABEL_73:
  v1[29] = v35;
  v96[0] = (id)0xD000000000000013;
  v96[1] = (id)0x800000023D9D8950;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v37 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v36, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_81;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_81:
    v39 = 1057803469;
    goto LABEL_82;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v39 = v38;

LABEL_82:
  v1[33] = v39;
  v96[0] = (id)0xD000000000000012;
  v96[1] = (id)0x800000023D9D8970;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v41 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v40, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_90;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_90:
    v42 = 0;
    goto LABEL_91;
  }
  v42 = objc_msgSend(v96[0], sel_BOOLValue);

LABEL_91:
  *((_BYTE *)v2 + 128) = v42;
  strcpy((char *)v96, "head_range_min");
  HIBYTE(v96[1]) = -18;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v44 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v43, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_99;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_99:
    v46 = 1057803469;
    goto LABEL_100;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v46 = v45;

LABEL_100:
  v2[34] = v46;
  strcpy((char *)v96, "head_range_max");
  HIBYTE(v96[1]) = -18;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v48 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v47, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_108;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_108:
    v50 = 0.75;
    goto LABEL_109;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v50 = v49;

LABEL_109:
  *((float *)v2 + 35) = v50;
  strcpy((char *)v96, "range_th_min");
  BYTE5(v96[1]) = 0;
  HIWORD(v96[1]) = -5120;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v52 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v51, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_117;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_117:
    v54 = 1002740646;
    goto LABEL_118;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v54 = v53;

LABEL_118:
  v2[36] = v54;
  strcpy((char *)v96, "range_th_max");
  BYTE5(v96[1]) = 0;
  HIWORD(v96[1]) = -5120;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v55 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v56 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v55, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_126;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_126:
    v58 = 1020054733;
    goto LABEL_127;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v58 = v57;

LABEL_127:
  v2[37] = v58;
  strcpy((char *)v96, "offset_min");
  BYTE3(v96[1]) = 0;
  HIDWORD(v96[1]) = -369098752;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v60 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v59, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_135;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_135:
    v62 = 1012202996;
    goto LABEL_136;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v62 = v61;

LABEL_136:
  v2[38] = v62;
  strcpy((char *)v96, "offset_max");
  BYTE3(v96[1]) = 0;
  HIDWORD(v96[1]) = -369098752;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v64 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v63, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_144;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_144:
    v66 = 1016296636;
    goto LABEL_145;
  }
  objc_msgSend(v96[0], sel_floatValue);
  v66 = v65;

LABEL_145:
  v2[39] = v66;
  strcpy((char *)v96, "pinch_max_gap");
  HIWORD(v96[1]) = -4864;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v67 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v97), (v68 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v67, (uint64_t)&v100);
  }
  else
  {
    v100 = 0u;
    v101 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v96[0], sel_floatValue);
      v70 = v69;

      goto LABEL_154;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  v70 = 1024416809;
LABEL_154:
  v2[40] = v70;
  v96[0] = (id)0xD00000000000001ELL;
  v96[1] = (id)0x800000023D9D8990;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v71 = (uint64_t)objc_msgSend(v96[0], sel_integerValue);

      goto LABEL_159;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  v71 = 15;
LABEL_159:
  *((_QWORD *)v2 + 21) = v71;
  v96[0] = (id)0xD00000000000001CLL;
  v96[1] = (id)0x800000023D9D89B0;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v96[0], sel_floatValue);
      v73 = v72;

      goto LABEL_164;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  v73 = 1109393408;
LABEL_164:
  v2[44] = v73;
  v96[0] = (id)0xD00000000000001ELL;
  v96[1] = (id)0x800000023D9D89D0;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v96[0], sel_floatValue);
      v75 = v74;

      goto LABEL_169;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  v75 = 1041865114;
LABEL_169:
  v2[45] = v75;
  v96[0] = (id)0xD00000000000001BLL;
  v96[1] = (id)0x800000023D9D89F0;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v96[0], sel_floatValue);
      v77 = v76;

      goto LABEL_174;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  v77 = 1064011039;
LABEL_174:
  v2[46] = v77;
  v96[0] = (id)0xD000000000000013;
  v96[1] = (id)0x800000023D9D8A10;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v96[0], sel_floatValue);
      v79 = v78;

      goto LABEL_179;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  v79 = 1017370378;
LABEL_179:
  v2[47] = v79;
  strcpy((char *)v96, "seqence_length");
  HIBYTE(v96[1]) = -18;
  v80 = MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_184;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_184:
    v82 = 8;
    goto LABEL_185;
  }
  v81 = (uint64_t)objc_msgSend(v96[0], sel_integerValue);

  *((_QWORD *)v2 + 25) = v81;
  if (v81 < 17)
    goto LABEL_186;
  v99 = v80;
  *(_QWORD *)&v97 = 0xD00000000000003BLL;
  *((_QWORD *)&v97 + 1) = 0x800000023D9D8BF0;
  type metadata accessor for HandyLoggerNeo();
  v100 = xmmword_23D9A9560;
  v101 = 0uLL;
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v100, 0xD000000000000077, 0x800000023D9D8A90, 160, (uint64_t)&v97, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v97);
  v82 = 16;
LABEL_185:
  *((_QWORD *)v2 + 25) = v82;
LABEL_186:
  v96[0] = (id)0x676E69646F636E65;
  v96[1] = (id)0xEF6874676E656C5FLL;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v83 = (uint64_t)objc_msgSend(v96[0], sel_integerValue);

      goto LABEL_191;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  v83 = 64;
LABEL_191:
  *((_QWORD *)v2 + 26) = v83;
  v96[0] = (id)0xD00000000000001BLL;
  v96[1] = (id)0x800000023D9D8A30;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    if (swift_dynamicCast())
    {
      v84 = v96[0];
      goto LABEL_198;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for defaultSearchMakeThresholdRange != -1)
    swift_once();
  v84 = (id)swift_bridgeObjectRetain();
LABEL_198:
  *((_QWORD *)v2 + 28) = v84;
  swift_bridgeObjectRelease();
  v96[0] = (id)0xD00000000000001CLL;
  v96[1] = (id)0x800000023D9D8A50;
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (*((_QWORD *)&v101 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    if (swift_dynamicCast())
    {
      v85 = v96[0];
      goto LABEL_205;
    }
  }
  else
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
  }
  if (one-time initialization token for defaultSearchBreakThresholdRange != -1)
    swift_once();
  v85 = (id)swift_bridgeObjectRetain();
LABEL_205:
  *((_QWORD *)v2 + 29) = v85;
  swift_bridgeObjectRelease();
  strcpy((char *)v96, "model_type");
  BYTE3(v96[1]) = 0;
  HIDWORD(v96[1]) = -369098752;
  v86 = MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_211;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_211:
    v88 = 0;
    v87 = (id)0xE000000000000000;
    goto LABEL_212;
  }
  v88 = v96[0];
  v87 = v96[1];
  if (v96[0] != (id)0x71657332716573 || v96[1] != (id)0xE700000000000000)
  {
LABEL_212:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_213;
    if (v88 == (id)0xD000000000000010 && v87 == (id)0x800000023D9D8A70)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v93 & 1) == 0)
      {
        v97 = xmmword_23D9A9560;
        v98 = 0;
        v99 = 0;
        *((_QWORD *)&v101 + 1) = v86;
        *(_QWORD *)&v100 = 0xD000000000000028;
        *((_QWORD *)&v100 + 1) = 0x800000023D9D8B10;
        v94 = MEMORY[0x24BEE4AF8];
        v95 = 182;
        goto LABEL_227;
      }
    }
    v97 = xmmword_23D9A9560;
    v98 = 0;
    v99 = 0;
    *((_QWORD *)&v101 + 1) = v86;
    *(_QWORD *)&v100 = 0xD000000000000028;
    *((_QWORD *)&v100 + 1) = 0x800000023D9D8B40;
    v94 = MEMORY[0x24BEE4AF8];
    v95 = 180;
LABEL_227:
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000077, 0x800000023D9D8A90, v95, (uint64_t *)&v97, (uint64_t)&v100, v94);
LABEL_228:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v100);
    specialized BasePoseActionModelParams.reset(modelConfig:)((uint64_t)modelConfig._rawValue);
    return;
  }
LABEL_213:
  swift_bridgeObjectRelease();
  v96[0] = (id)0xD000000000000017;
  v96[1] = (id)0x800000023D9D8B70;
  v89 = MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.getter((uint64_t)&v97, (uint64_t)modelConfig._rawValue, &v100);
  outlined destroy of AnyHashable((uint64_t)&v97);
  if (!*((_QWORD *)&v101 + 1))
  {
    outlined destroy of Coordinate3DPB?((uint64_t)&v100, &demangling cache variable for type metadata for Any?);
    goto LABEL_223;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_223:
    v97 = xmmword_23D9A9560;
    v98 = 0;
    v99 = 0;
    *((_QWORD *)&v101 + 1) = v89;
    *(_QWORD *)&v100 = 0xD000000000000028;
    *((_QWORD *)&v100 + 1) = 0x800000023D9D8B40;
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000077, 0x800000023D9D8A90, 170, (uint64_t *)&v97, (uint64_t)&v100, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v100);
    return;
  }
  v90 = v96[0];
  v91 = (char *)objc_msgSend(v96[0], sel_integerValue);
  v92 = v91 + 1;
  if (!__OFADD__(v91, 1))
  {
    *((_QWORD *)v2 + 27) = v92;
    if (*((_QWORD *)v2 + 25) < (uint64_t)v92)
    {
      v99 = v89;
      *(_QWORD *)&v97 = 0xD000000000000036;
      *((_QWORD *)&v97 + 1) = 0x800000023D9D8BB0;
      type metadata accessor for HandyLoggerNeo();
      v100 = xmmword_23D9A9560;
      v101 = 0uLL;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v100, 0xD000000000000077, 0x800000023D9D8A90, 175, (uint64_t)&v97, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v97);
      *((_QWORD *)v2 + 27) = *((_QWORD *)v2 + 25);
    }
    v97 = xmmword_23D9A9560;
    v98 = 0;
    v99 = 0;
    *((_QWORD *)&v101 + 1) = v89;
    *(_QWORD *)&v100 = 0xD00000000000001FLL;
    *((_QWORD *)&v100 + 1) = 0x800000023D9D8B90;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000077, 0x800000023D9D8A90, 178, (uint64_t *)&v97, (uint64_t)&v100, MEMORY[0x24BEE4AF8]);

    goto LABEL_228;
  }
  __break(1u);
}

uint64_t PinchModelParams.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PinchModelParams.__deallocating_deinit()
{
  BasePoseActionModelParams.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchModelParams()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PinchModelParams;
  if (!type metadata singleton initialization cache for PinchModelParams)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PinchModelParams()
{
  return swift_initClassMetadata2();
}

uint64_t storeEnumTagSinglePayload for PinchDnnOutputLayer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23D8F7F08 + 4 * byte_23D9BEF20[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23D8F7F3C + 4 * byte_23D9BEF1B[v4]))();
}

uint64_t sub_23D8F7F3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8F7F44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8F7F4CLL);
  return result;
}

uint64_t sub_23D8F7F58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8F7F60);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23D8F7F64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8F7F6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PinchDnnOutputLayer()
{
  return &type metadata for PinchDnnOutputLayer;
}

uint64_t getEnumTagSinglePayload for PinchDnnInputLayer(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEA)
    goto LABEL_17;
  if (a2 + 22 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 22) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 22;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 22;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 22;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x17;
  v8 = v6 - 23;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchDnnInputLayer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 22 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 22) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE9)
    return ((uint64_t (*)(void))((char *)&loc_23D8F8064 + 4 * byte_23D9BEF2A[v4]))();
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_23D8F8098 + 4 * byte_23D9BEF25[v4]))();
}

uint64_t sub_23D8F8098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8F80A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D8F80A8);
  return result;
}

uint64_t sub_23D8F80B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8F80BCLL);
  *(_BYTE *)result = a2 + 22;
  return result;
}

uint64_t sub_23D8F80C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8F80C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PinchDnnInputLayer()
{
  return &type metadata for PinchDnnInputLayer;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchDnnInputLayer()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchDnnInputLayer] and conformance [A], &demangling cache variable for type metadata for [PinchDnnInputLayer]);
}

unint64_t lazy protocol witness table accessor for type PinchDnnInputLayer and conformance PinchDnnInputLayer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchDnnInputLayer and conformance PinchDnnInputLayer;
  if (!lazy protocol witness table cache variable for type PinchDnnInputLayer and conformance PinchDnnInputLayer)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchDnnInputLayer, &type metadata for PinchDnnInputLayer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchDnnInputLayer and conformance PinchDnnInputLayer);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchDnnOutputLayer()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchDnnOutputLayer] and conformance [A], &demangling cache variable for type metadata for [PinchDnnOutputLayer]);
}

unint64_t lazy protocol witness table accessor for type PinchDnnOutputLayer and conformance PinchDnnOutputLayer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchDnnOutputLayer and conformance PinchDnnOutputLayer;
  if (!lazy protocol witness table cache variable for type PinchDnnOutputLayer and conformance PinchDnnOutputLayer)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchDnnOutputLayer, &type metadata for PinchDnnOutputLayer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchDnnOutputLayer and conformance PinchDnnOutputLayer);
  }
  return result;
}

uint64_t specialized closure #1 in TypedKeysDictionary.makeIterator()(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;

  result = swift_beginAccess();
  v4 = a1[5];
  v3 = a1[6];
  if (v3)
  {
    v5 = (v3 - 1) & v3;
    v6 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
    v7 = *(unsigned __int8 *)(*(_QWORD *)(a1[2] + 48) + v6);
    swift_retain();
LABEL_4:
    a1[5] = v4;
    a1[6] = v5;
    return v7;
  }
  v8 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    v9 = (unint64_t)(a1[4] + 64) >> 6;
    if (v8 >= v9)
    {
      v5 = 0;
      v7 = 0;
      goto LABEL_4;
    }
    v10 = a1[3];
    v11 = *(_QWORD *)(v10 + 8 * v8);
    if (v11)
      goto LABEL_8;
    if (v4 + 2 < v9)
    {
      v11 = *(_QWORD *)(v10 + 8 * (v4 + 2));
      if (v11)
      {
        v8 = v4 + 2;
LABEL_8:
        v5 = (v11 - 1) & v11;
        v6 = __clz(__rbit64(v11)) + (v8 << 6);
        v4 = v8;
        goto LABEL_3;
      }
      if (v4 + 3 >= v9)
      {
        v5 = 0;
        v7 = 0;
        v4 += 2;
        goto LABEL_4;
      }
      v11 = *(_QWORD *)(v10 + 8 * (v4 + 3));
      if (v11)
      {
        v8 = v4 + 3;
        goto LABEL_8;
      }
      v8 = v4 + 4;
      if (v4 + 4 >= v9)
      {
        v5 = 0;
        v7 = 0;
        v4 += 3;
        goto LABEL_4;
      }
      v11 = *(_QWORD *)(v10 + 8 * v8);
      if (v11)
        goto LABEL_8;
      v8 = v9 - 1;
      v12 = v4 + 5;
      while (v9 != v12)
      {
        v11 = *(_QWORD *)(v10 + 8 * v12++);
        if (v11)
        {
          v8 = v12 - 1;
          goto LABEL_8;
        }
      }
    }
    v5 = 0;
    v7 = 0;
    v4 = v8;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3, uint64_t (*a4)(uint64_t), void (*a5)(void), void (*a6)(void))
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  char v17;
  uint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v10 = *(unsigned __int8 *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)*a3;
  swift_retain();
  v14 = a4(v10);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  if (__OFADD__(v15, v16))
    goto LABEL_23;
  v17 = v13;
  if (v12[3] >= v15 + v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v13 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      a5();
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v14 >> 6) + 64) |= 1 << v14;
    *(_BYTE *)(v22[6] + v14) = v10;
    *(_QWORD *)(v22[7] + 8 * v14) = v11;
    v23 = v22[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v25;
    v26 = v6 - 1;
    if (v6 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (uint64_t *)(a1 + 56);
    while (1)
    {
      v28 = *((unsigned __int8 *)v27 - 8);
      v29 = *v27;
      v30 = (_QWORD *)*a3;
      swift_retain();
      v31 = a4(v28);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v24 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v24)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        ((void (*)(uint64_t, uint64_t))a6)(v35, 1);
        v31 = a4(v28);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      *(_BYTE *)(v38[6] + v31) = v28;
      *(_QWORD *)(v38[7] + 8 * v31) = v29;
      v39 = v38[2];
      v24 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v24)
        goto LABEL_24;
      v38[2] = v40;
      v27 += 2;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  a6();
  v18 = a4(v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v14 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x800000023D9C5160;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int64_t v23;

  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _DictionaryStorage.copy(original:)();
  v4 = (_QWORD *)result;
  v5 = 0;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 64;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    v16 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + i);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v22);
    outlined init with copy of Any((uint64_t)v22, (uint64_t)v21);
    type metadata accessor for IONamedSlice();
    swift_allocObject();
    v17 = IONamedSlice.init(_:)((uint64_t)v21);
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v4[6] + i) = v16;
    *(_QWORD *)(v4[7] + 8 * i) = v17;
    v18 = v4[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v4[2] = v20;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_24;
    if (v13 >= v23)
      return (uint64_t)v4;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v23)
        return (uint64_t)v4;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v23)
          return (uint64_t)v4;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v9 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v23)
    return (uint64_t)v4;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v23)
      return (uint64_t)v4;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized PinchDnnInputLayer.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x17)
    return 23;
  else
    return v0;
}

unint64_t specialized PinchDnnOutputLayer.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PinchDnnOutputLayer.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t objectdestroyTm_0()
{
  outlined consume of [CameraSource : Float].Iterator._Variant();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in TypedKeysDictionary.makeIterator()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = specialized closure #1 in TypedKeysDictionary.makeIterator()(v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t BaseDetectionModelParams.init(modelName:modelPath:options:configJson:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  char v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  float v25;
  float v26;
  double v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  double v44;
  void (*v45)(void *);
  double v47;
  __int128 v48;
  __int128 v49;

  v7 = v6;
  v14 = *(_QWORD *)(a6 + 16);
  swift_retain();
  if (v14)
  {
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x65685F7475706E69, 0xEC00000074686769);
    if ((v17 & 1) != 0
      && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v16, (uint64_t)&v48),
          swift_dynamicCast()))
    {
      v18 = v47;
      if (!*(_QWORD *)(a6 + 16))
      {
LABEL_5:
        v19 = 1.0;
        v20 = 448.0;
        goto LABEL_16;
      }
    }
    else
    {
      v18 = 448.0;
      if (!*(_QWORD *)(a6 + 16))
        goto LABEL_5;
    }
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x69775F7475706E69, 0xEB00000000687464);
    if ((v22 & 1) != 0
      && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v21, (uint64_t)&v48),
          swift_dynamicCast()))
    {
      v20 = v47;
    }
    else
    {
      v20 = 448.0;
    }
  }
  else
  {
    v18 = 448.0;
    v20 = 448.0;
  }
  v19 = 1.0;
  if (*(_QWORD *)(a6 + 16))
  {
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(0x68635F7475706E69, 0xEE00736C656E6E61);
    if ((v24 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v23, (uint64_t)&v48);
      if (swift_dynamicCast())
        v19 = v47;
    }
  }
LABEL_16:
  *(float *)&v15 = v20;
  v25 = v18;
  *((float *)&v15 + 1) = v25;
  v26 = v19;
  *((float *)&v15 + 2) = v26;
  *(_OWORD *)(v7 + 64) = v15;
  v27 = 0.5;
  if (*(_QWORD *)(a6 + 16))
  {
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x800000023D9D8D40);
    if ((v29 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v28, (uint64_t)&v48);
      if (swift_dynamicCast())
        v27 = v47;
    }
  }
  *(double *)(v7 + 80) = v27;
  v30 = 0x3FEA8F5C28F5C28FLL;
  if (*(_QWORD *)(a6 + 16))
  {
    v31 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x800000023D9D8D60);
    if ((v32 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v31, (uint64_t)&v48);
      if (swift_dynamicCast())
        v30 = *(_QWORD *)&v47;
    }
  }
  *(_QWORD *)(v7 + 96) = v30;
  if (*(_QWORD *)(a6 + 16)
    && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x800000023D9D8D80), (v34 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v33, (uint64_t)&v48), swift_dynamicCast()))
  {
    v35 = v47;
  }
  else
  {
    v35 = *(double *)(v7 + 96);
  }
  *(double *)(v7 + 88) = v35;
  v36 = 0x3FE999999999999ALL;
  if (*(_QWORD *)(a6 + 16))
  {
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x800000023D9D8DA0);
    if ((v38 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v37, (uint64_t)&v48);
      if (swift_dynamicCast())
        v36 = *(_QWORD *)&v47;
    }
  }
  *(_QWORD *)(v7 + 104) = v36;
  v39 = 0x3FC999999999999ALL;
  if (*(_QWORD *)(a6 + 16))
  {
    v40 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x800000023D9D8DC0);
    if ((v41 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v40, (uint64_t)&v48);
      if (swift_dynamicCast())
        v39 = *(_QWORD *)&v47;
    }
  }
  *(_QWORD *)(v7 + 112) = v39;
  if (*(_QWORD *)(a6 + 16)
    && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x800000023D9D8DE0), (v43 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v42, (uint64_t)&v48);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v49 + 1))
  {
    outlined destroy of Any?((uint64_t)&v48);
    goto LABEL_45;
  }
  if (!swift_dynamicCast())
  {
LABEL_45:
    v44 = 1.0;
    goto LABEL_46;
  }
  v44 = v47;
LABEL_46:
  *(double *)(v7 + 120) = v44;
  swift_release();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_BYTE *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  (*(void (**)(void))(*(_QWORD *)v7 + 184))();
  swift_bridgeObjectRelease();
  v45 = *(void (**)(void *))(*(_QWORD *)v7 + 456);
  swift_retain();
  v45(a5);
  swift_release();

  return v7;
}

Swift::Void __swiftcall BaseDetectionModelParams.reconfig(_:)(HandsKitConfig *a1)
{
  _QWORD *v1;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  -[HandsKitConfig DetectionConfidenceThresholdOverride](a1, sel_DetectionConfidenceThresholdOverride);
  if (v3 > 0.0)
  {
    -[HandsKitConfig DetectionConfidenceThresholdOverride](a1, sel_DetectionConfidenceThresholdOverride);
    v1[12] = v4;
  }
  -[HandsKitConfig DetectionLowerConfidenceThresholdOverride](a1, sel_DetectionLowerConfidenceThresholdOverride);
  if (v5 > 0.0)
  {
    -[HandsKitConfig DetectionLowerConfidenceThresholdOverride](a1, sel_DetectionLowerConfidenceThresholdOverride);
    v1[11] = v6;
  }
  -[HandsKitConfig DetectionChiralityThresholdOverride](a1, sel_DetectionChiralityThresholdOverride);
  if (v7 > 0.0)
  {
    -[HandsKitConfig DetectionChiralityThresholdOverride](a1, sel_DetectionChiralityThresholdOverride);
    v1[10] = v8;
  }
  -[HandsKitConfig DetectionUvOThresholdOverride](a1, sel_DetectionUvOThresholdOverride);
  if (v9 > 0.0)
  {
    -[HandsKitConfig DetectionUvOThresholdOverride](a1, sel_DetectionUvOThresholdOverride);
    v1[13] = v10;
  }
  -[HandsKitConfig DetectionDepthNormalizationFactorOverride](a1, sel_DetectionDepthNormalizationFactorOverride);
  if (v11 > 0.0)
  {
    -[HandsKitConfig DetectionDepthNormalizationFactorOverride](a1, sel_DetectionDepthNormalizationFactorOverride);
    v1[15] = v12;
  }
}

__n128 BaseDetectionModelParams.modelInputSize.getter()
{
  __n128 *v0;

  return v0[4];
}

double BaseDetectionModelParams.chiralityThreshold.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

double BaseDetectionModelParams.lowerConfidenceThreshold.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

double BaseDetectionModelParams.confidenceThreshold.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

double BaseDetectionModelParams.uvoConfidenceThreshold.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

double BaseDetectionModelParams.uvoMinimalDistance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

double BaseDetectionModelParams.depthNormalizationFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 120);
}

uint64_t BaseDetectionModelParams.__allocating_init(modelName:modelPath:options:configJson:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  BaseDetectionModelParams.init(modelName:modelPath:options:configJson:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t BaseDetectionModelParams.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BaseDetectionModelParams()
{
  return objc_opt_self();
}

uint64_t Matrix2d.toProtoBuf()@<X0>(uint64_t a1@<X0>, char a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for Matrix2dPB.FloatVectorPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
  type metadata accessor for Matrix2dPB(0);
  result = UnknownStorage.init()();
  *(_BYTE *)(a3 + 8) = a2;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v18 = a3;
    v19 = v11;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v14 = 0;
    v11 = v19;
    do
    {
      v15 = *(_QWORD *)(a1 + 8 * v14 + 32);
      swift_bridgeObjectRetain();
      UnknownStorage.init()();
      *v10 = v15;
      v19 = v11;
      v17 = *(_QWORD *)(v11 + 16);
      v16 = *(_QWORD *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v11 = v19;
      }
      ++v14;
      *(_QWORD *)(v11 + 16) = v17 + 1;
      outlined init with take of Matrix2dPB.FloatVectorPB((uint64_t)v10, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17);
    }
    while (v13 != v14);
    result = swift_bridgeObjectRelease();
    a3 = v18;
  }
  *(_QWORD *)(a3 + 16) = v11;
  return result;
}

void __swiftcall Matrix2d.toSimd4x4Float()(simd_float4x4_optional *__return_ptr retstr)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  BOOL v9;
  Swift::Bool v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;

  v9 = v2 == 4 && v3 == 4;
  v10 = !v9;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  if (!v9)
    goto LABEL_31;
  v15 = v1[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_33;
  }
  v16 = v1[4];
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v15 < 2)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v18 = v1[5];
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v15 < 3)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v20 = v1[6];
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v15 < 4)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v22 = v1[7];
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v17 < 2)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v19 < 2)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v21 < 2)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v23 < 2)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v17 < 3)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v19 < 3)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v21 < 3)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v23 < 3)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v17 < 4)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v19 < 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v21 < 4)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v23 >= 4)
  {
    v5.i32[0] = *(_DWORD *)(v16 + 32);
    v6.i32[0] = *(_DWORD *)(v16 + 36);
    v5.i32[1] = *(_DWORD *)(v18 + 32);
    v11.i64[0] = v5.i64[0];
    v11.i32[2] = *(_DWORD *)(v20 + 32);
    v11.i32[3] = *(_DWORD *)(v22 + 32);
    v6.i32[1] = *(_DWORD *)(v18 + 36);
    v12.i64[0] = v6.i64[0];
    v12.i32[2] = *(_DWORD *)(v20 + 36);
    v12.i32[3] = *(_DWORD *)(v22 + 36);
    v7.i32[0] = *(_DWORD *)(v16 + 40);
    v8.i32[0] = *(_DWORD *)(v16 + 44);
    v7.i32[1] = *(_DWORD *)(v18 + 40);
    v13.i64[0] = v7.i64[0];
    v13.i32[2] = *(_DWORD *)(v20 + 40);
    v13.i32[3] = *(_DWORD *)(v22 + 40);
    v8.i32[1] = *(_DWORD *)(v18 + 44);
    v14.i64[0] = v8.i64[0];
    v14.i32[2] = *(_DWORD *)(v20 + 44);
    v14.i32[3] = *(_DWORD *)(v22 + 44);
    if ((v4 & 1) == 0)
    {
      v24 = vzip1q_s32(v5, v7);
      v25 = vzip2q_s32(v11, v13);
      v26 = vzip1q_s32(v6, v8);
      v27 = vzip2q_s32(v12, v14);
      v11 = vzip1q_s32(v24, v26);
      v12 = vzip2q_s32(v24, v26);
      v13 = vzip1q_s32(v25, v27);
      v14 = vzip2q_s32(v25, v27);
    }
LABEL_31:
    retstr->value.columns[0] = (simd_float4)v11;
    retstr->value.columns[1] = (simd_float4)v12;
    retstr->value.columns[2] = (simd_float4)v13;
    retstr->value.columns[3] = (simd_float4)v14;
    retstr->is_nil = v10;
    return;
  }
LABEL_51:
  __break(1u);
}

uint64_t Matrix2d.toSimdFloat2List()(uint64_t a1, uint64_t a2, int64_t a3, char a4, int32x2_t a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _OWORD v21[2];
  _QWORD v22[4];

  v5 = Matrix2d.toRowMajor()(a1, a2, a3, a4, a5);
  if (v6 != 2)
  {
    v22[0] = 0;
    v22[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v7._object = (void *)0x800000023D9D8E50;
    v7._countAndFlagsBits = 0xD000000000000025;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0x6D756E206C6F6320;
    v9._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v22[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v21, 0, sizeof(v21));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v21, 0xD00000000000004ALL, 0x800000023D9D8E00, 106, (uint64_t)v22, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
  }
  v11 = *(_QWORD *)(v5 + 16);
  if (v11)
  {
    result = swift_bridgeObjectRetain();
    v13 = 0;
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v15 = *(_QWORD *)(v5 + 8 * v13 + 32);
      v16 = *(_QWORD *)(v15 + 16);
      if (!v16)
        break;
      if (v16 == 1)
        goto LABEL_16;
      v20 = *(_DWORD *)(v15 + 32);
      v19 = *(_DWORD *)(v15 + 36);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v18 = v14[2];
      v17 = v14[3];
      if (v18 >= v17 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v14);
      ++v13;
      v14[2] = v18 + 1;
      v14[v18 + 4] = __PAIR64__(v19, v20);
      result = swift_bridgeObjectRelease();
      if (v11 == v13)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_14:
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  return result;
}

void __swiftcall Matrix2d.toSimd3x3Float()(simd_float3x3_optional *__return_ptr retstr)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int32x4_t v5;
  BOOL v6;
  Swift::Bool v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int32x4_t v18;
  int32x4_t v19;

  v6 = v2 == 3 && v3 == 3;
  v7 = !v6;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  if (!v6)
    goto LABEL_24;
  v11 = v1[2];
  if (!v11)
  {
    __break(1u);
    goto LABEL_26;
  }
  v12 = v1[4];
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v11 < 2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v14 = v1[5];
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v11 < 3)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v16 = v1[6];
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v13 < 2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v15 < 2)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v17 < 2)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v13 < 3)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v15 < 3)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v17 >= 3)
  {
    v8.i32[0] = *(_DWORD *)(v12 + 32);
    v8.i32[1] = *(_DWORD *)(v14 + 32);
    v9.i32[3] = 0;
    v9.i32[0] = *(_DWORD *)(v12 + 36);
    *(uint64_t *)((char *)v9.i64 + 4) = *(unsigned int *)(v14 + 36);
    v10.i32[0] = *(_DWORD *)(v12 + 40);
    v10.i32[1] = *(_DWORD *)(v14 + 40);
    if ((v4 & 1) != 0)
    {
      v8.i32[2] = *(_DWORD *)(v16 + 32);
      v9.i32[2] = *(_DWORD *)(v16 + 36);
      v10.i32[2] = *(_DWORD *)(v16 + 40);
    }
    else
    {
      v18 = vzip1q_s32(v8, v10);
      v19 = vzip1q_s32(v9, (int32x4_t)0);
      v8 = vzip1q_s32(v18, v19);
      v9 = vzip2q_s32(v18, v19);
      v8.i32[2] = *(_DWORD *)(v12 + 40);
      v9.i32[2] = *(_DWORD *)(v14 + 40);
      v5.i32[1] = *(_DWORD *)(v16 + 36);
      v5.i32[2] = *(_DWORD *)(v16 + 40);
      v5.i32[0] = *(_DWORD *)(v16 + 32);
      v10 = v5;
    }
LABEL_24:
    retstr->value.columns[0] = (simd_float3)v8;
    retstr->value.columns[1] = (simd_float3)v9;
    retstr->value.columns[2] = (simd_float3)v10;
    retstr->is_nil = v7;
    return;
  }
LABEL_36:
  __break(1u);
}

uint64_t Matrix2d.toRowMajor()(uint64_t a1, uint64_t a2, int64_t a3, char a4, int32x2_t a5)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  unint64_t v11;
  int64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  if ((a4 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  a5.i32[0] = 0;
  v8 = specialized Array.init(repeating:count:)(a3, a5);
  result = specialized Array.init(repeating:count:)(v8, a2);
  if (a2 < 0)
    goto LABEL_31;
  v10 = (_QWORD *)result;
  if (!a2)
    return (uint64_t)v10;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v11 = 0;
    while (1)
    {
      if (v11 == a2)
        goto LABEL_29;
      if (a3)
        break;
LABEL_7:
      if (++v11 == a2)
        return (uint64_t)v10;
    }
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
      v13 = v12 < a3;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = 0;
      while (1)
      {
        v15 = *(_QWORD *)(a1 + 32 + 8 * v14);
        if (v11 >= *(_QWORD *)(v15 + 16))
          break;
        v16 = *(_DWORD *)(v15 + 4 * v11 + 32);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          v10 = (_QWORD *)result;
        }
        if (v11 >= v10[2])
          goto LABEL_27;
        v17 = v10[v11 + 4];
        result = swift_isUniquelyReferenced_nonNull_native();
        v10[v11 + 4] = v17;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
          v17 = result;
          v10[v11 + 4] = result;
        }
        if (v14 >= *(_QWORD *)(v17 + 16))
          goto LABEL_28;
        *(_DWORD *)(v17 + 4 * v14++ + 32) = v16;
        if (a3 == v14)
          goto LABEL_7;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
LABEL_31:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of Matrix2dPB.FloatVectorPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Matrix2dPB.FloatVectorPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Matrix2d.init(simd4x4float:)(int32x4_t a1, int32x4_t a2, int8x16_t a3, int32x4_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A7080;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v5 = swift_allocObject();
  *(_QWORD *)&v6 = vzip1q_s32(a1, a2).u64[0];
  *((_QWORD *)&v6 + 1) = vextq_s8(a3, (int8x16_t)vzip1q_s32(*(int32x4_t *)&a3, a4), 8uLL).i64[1];
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v4 + 32) = v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23D9A7080;
  *(int32x2_t *)(v7 + 32) = vzip2_s32(*(int32x2_t *)a1.i8, *(int32x2_t *)a2.i8);
  *(int32x2_t *)(v7 + 40) = vzip2_s32(*(int32x2_t *)a3.i8, *(int32x2_t *)a4.i8);
  *(_QWORD *)(v4 + 40) = v7;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23D9A7080;
  a2.i64[0] = vextq_s8((int8x16_t)a2, (int8x16_t)a2, 8uLL).u64[0];
  a1.i64[0] = vextq_s8((int8x16_t)a1, (int8x16_t)a1, 8uLL).u64[0];
  a4.i64[0] = vextq_s8((int8x16_t)a4, (int8x16_t)a4, 8uLL).u64[0];
  a3.i64[0] = vextq_s8(a3, a3, 8uLL).u64[0];
  *(int32x2_t *)(v8 + 32) = vzip1_s32(*(int32x2_t *)a1.i8, *(int32x2_t *)a2.i8);
  *(int32x2_t *)(v8 + 40) = vzip1_s32(*(int32x2_t *)a3.i8, *(int32x2_t *)a4.i8);
  *(_QWORD *)(v4 + 48) = v8;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23D9A7080;
  *(int32x2_t *)(v9 + 32) = vzip2_s32(*(int32x2_t *)a1.i8, *(int32x2_t *)a2.i8);
  *(int32x2_t *)(v9 + 40) = vzip2_s32(*(int32x2_t *)a3.i8, *(int32x2_t *)a4.i8);
  *(_QWORD *)(v4 + 56) = v9;
  return v4;
}

uint64_t specialized Matrix2d.init(simd3x3float:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v7;
  int8x16_t v8;
  __int128 v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_23D9A74A0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_23D9A74A0;
  v7 = *(int8x16_t *)(a1 + 16);
  v8 = *(int8x16_t *)a1;
  v9 = *(_OWORD *)(a1 + 32);
  *(int32x2_t *)(v3 + 32) = vzip1_s32(*(int32x2_t *)a1, *(int32x2_t *)v7.i8);
  *(_DWORD *)(v3 + 40) = v9;
  *(_QWORD *)(v2 + 32) = v3;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A74A0;
  *(int32x2_t *)(v4 + 32) = vzip2_s32(*(int32x2_t *)v8.i8, *(int32x2_t *)v7.i8);
  *(_DWORD *)(v4 + 40) = DWORD1(v9);
  *(_QWORD *)(v2 + 40) = v4;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  *(_DWORD *)(v5 + 40) = DWORD2(v9);
  *(int32x2_t *)(v5 + 32) = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  *(_QWORD *)(v2 + 48) = v5;
  return v2;
}

uint64_t specialized Matrix2d.init(protoBuf:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = type metadata accessor for Matrix2dPB.FloatVectorPB(0);
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Matrix2dPB.VectorPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 16);
  if (v12)
  {
    v38 = a1;
    v42 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    v13 = 0;
    v14 = *(unsigned __int8 *)(v7 + 80);
    v35 = v11;
    v40 = v11 + ((v14 + 32) & ~v14);
    v37 = v7;
    v39 = *(_QWORD *)(v7 + 72);
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v40 + v39 * v13, (uint64_t)v10, type metadata accessor for Matrix2dPB.VectorPB);
      v15 = *(_QWORD *)v10;
      v16 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      if (v16)
      {
        v17 = v12;
        v41 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
        v18 = 0;
        v19 = v41;
        v20 = *(_QWORD *)(v41 + 16);
        do
        {
          v21 = *(double *)(v15 + 8 * v18 + 32);
          v41 = v19;
          v22 = *(_QWORD *)(v19 + 24);
          if (v20 >= v22 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v20 + 1, 1);
            v19 = v41;
          }
          ++v18;
          v23 = v21;
          *(_QWORD *)(v19 + 16) = v20 + 1;
          *(float *)(v19 + 4 * v20++ + 32) = v23;
        }
        while (v16 != v18);
        swift_bridgeObjectRelease();
        v12 = v17;
      }
      else
      {
        v19 = MEMORY[0x24BEE4AF8];
      }
      outlined destroy of Matrix3x3PB((uint64_t)v10, type metadata accessor for Matrix2dPB.VectorPB);
      v24 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = v42;
      }
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = v42;
      }
      ++v13;
      *(_QWORD *)(v24 + 16) = v26 + 1;
      *(_QWORD *)(v24 + 8 * v26 + 32) = v19;
    }
    while (v13 != v12);
LABEL_23:
    swift_bridgeObjectRelease();
    a1 = v38;
    goto LABEL_24;
  }
  v27 = a1[2];
  v28 = *(_QWORD *)(v27 + 16);
  v24 = MEMORY[0x24BEE4AF8];
  if (v28)
  {
    v37 = v7;
    v38 = a1;
    v42 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
    v29 = v27 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
    v30 = *(_QWORD *)(v36 + 72);
    v24 = v42;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v29, (uint64_t)v5, type metadata accessor for Matrix2dPB.FloatVectorPB);
      v31 = *v5;
      swift_bridgeObjectRetain();
      outlined destroy of Matrix3x3PB((uint64_t)v5, type metadata accessor for Matrix2dPB.FloatVectorPB);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = v42;
      }
      v33 = *(_QWORD *)(v24 + 16);
      v32 = *(_QWORD *)(v24 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        v24 = v42;
      }
      *(_QWORD *)(v24 + 16) = v33 + 1;
      *(_QWORD *)(v24 + 8 * v33 + 32) = v31;
      v29 += v30;
      --v28;
    }
    while (v28);
    goto LABEL_23;
  }
LABEL_24:
  outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for Matrix2dPB);
  return v24;
}

uint64_t RejectedHandPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        closure #1 in RejectedHandPB.decodeMessage<A>(decoder:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    closure #3 in RejectedHandPB.decodeMessage<A>(decoder:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t closure #1 in RejectedHandPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for RejectedHandPB(0);
  type metadata accessor for BasicHandDescriptorPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in RejectedHandPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for RejectedHandPB(0);
  type metadata accessor for HandDescriptorPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t RejectedHandPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in RejectedHandPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3)
    {
      lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #2 in RejectedHandPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    type metadata accessor for RejectedHandPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in RejectedHandPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BasicHandDescriptorPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RejectedHandPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for BasicHandDescriptorPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type BasicHandDescriptorPB and conformance BasicHandDescriptorPB, type metadata accessor for BasicHandDescriptorPB, (uint64_t)&protocol conformance descriptor for BasicHandDescriptorPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for BasicHandDescriptorPB);
}

uint64_t closure #2 in RejectedHandPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandDescriptorPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RejectedHandPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for HandDescriptorPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandDescriptorPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandDescriptorPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandDescriptorPB);
}

uint64_t protocol witness for Message.init() in conformance RejectedHandPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for BasicHandDescriptorPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 28);
  v7 = type metadata accessor for HandDescriptorPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance RejectedHandPB()
{
  return 0x64657463656A6552;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance RejectedHandPB()
{
  return RejectedHandPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance RejectedHandPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RejectedHandPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance RejectedHandPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance RejectedHandPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RejectedHandPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RejectedHandPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RejectedHandPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
  return Message.hash(into:)();
}

uint64_t HandsKitDataInternalPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          closure #1 in HandsKitDataInternalPB.decodeMessage<A>(decoder:)();
          goto LABEL_6;
        case 2:
          type metadata accessor for HandsKitDataInternalPB(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_6;
        case 3:
          v4 = v3;
          closure #3 in HandsKitDataInternalPB.decodeMessage<A>(decoder:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for DetectionSpecItemPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
          goto LABEL_5;
        case 7:
          type metadata accessor for HandDescriptorPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
          goto LABEL_5;
        case 11:
          type metadata accessor for RejectedHandPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
LABEL_5:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in HandsKitDataInternalPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for HandsKitDataInternalPB(0);
  type metadata accessor for TrackingInfosPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in HandsKitDataInternalPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for HandsKitDataInternalPB(0);
  type metadata accessor for SchedulingDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t HandsKitDataInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in HandsKitDataInternalPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in HandsKitDataInternalPB.traverse<A>(visitor:)((uint64_t)v3);
    closure #3 in HandsKitDataInternalPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (*(_QWORD *)(*v3 + 16))
    {
      type metadata accessor for DetectionSpecItemPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(v3[1] + 16))
    {
      type metadata accessor for HandDescriptorPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(v3[2] + 16))
    {
      type metadata accessor for RejectedHandPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for HandsKitDataInternalPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in HandsKitDataInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TrackingInfosPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HandsKitDataInternalPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for TrackingInfosPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TrackingInfosPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TrackingInfosPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingInfosPB and conformance TrackingInfosPB, type metadata accessor for TrackingInfosPB, (uint64_t)&protocol conformance descriptor for TrackingInfosPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TrackingInfosPB);
}

uint64_t closure #2 in HandsKitDataInternalPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for HandsKitDataInternalPB(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 36)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in HandsKitDataInternalPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SchedulingDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HandsKitDataInternalPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for SchedulingDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for SchedulingDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for SchedulingDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB, type metadata accessor for SchedulingDataPB, (uint64_t)&protocol conformance descriptor for SchedulingDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for SchedulingDataPB);
}

uint64_t protocol witness for Message.init() in conformance HandsKitDataInternalPB@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  a2[2] = v4;
  UnknownStorage.init()();
  v5 = (char *)a2 + a1[8];
  v6 = type metadata accessor for TrackingInfosPB(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a1[10];
  *((_BYTE *)a2 + a1[9]) = 2;
  v8 = (char *)a2 + v7;
  v9 = type metadata accessor for SchedulingDataPB(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandsKitDataInternalPB()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandsKitDataInternalPB()
{
  return HandsKitDataInternalPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandsKitDataInternalPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandsKitDataInternalPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandsKitDataInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandsKitDataInternalPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandsKitDataInternalPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandsKitDataInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandsKitDataInternalPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
  return Message.hash(into:)();
}

uint64_t HandsKitDataPB._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  v2 = v0
     + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
  v3 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sessionID);
  *v4 = 0;
  v4[1] = 0xE000000000000000;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages) = v1;
  v5 = v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
  v6 = type metadata accessor for HandsKitDataInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  v8 = type metadata accessor for EnrollmentResultsPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0
     + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  v10 = type metadata accessor for Matrix2dPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v0
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
  v12 = type metadata accessor for ImageCalibrationDataPB(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(v0+ OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration, 1, 1, v12);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors) = v1;
  *(_DWORD *)(v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__version) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__frameID) = 0;
  v14 = v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sourceID;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v0
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  v16 = type metadata accessor for DetectionResultsByChiralityPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return v0;
}

uint64_t HandsKitDataPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _DWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v93 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v92 = (uint64_t)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v90 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentResultsPB?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v86 = (uint64_t)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataInternalPB?);
  MEMORY[0x24BDAC7A8](v16, v17);
  v83 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v19, v20);
  v78 = (uint64_t)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x24BEE4AF8];
  v23 = v22;
  v24 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
  v25 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sessionID);
  *v26 = 0;
  v26[1] = 0xE000000000000000;
  v27 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
  *v27 = v23;
  v28 = v1 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
  v79 = v1 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
  v29 = type metadata accessor for HandsKitDataInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  v80 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  v31 = type metadata accessor for EnrollmentResultsPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  v81 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  v33 = type metadata accessor for Matrix2dPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v34 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
  v82 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
  v35 = type metadata accessor for ImageCalibrationDataPB(0);
  v36 = *(void (**)(void))(*(_QWORD *)(v35 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v36)(v34, 1, 1, v35);
  v84 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
  v36();
  v85 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors);
  *v85 = MEMORY[0x24BEE4AF8];
  v87 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__version);
  *v87 = 0;
  v88 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__frameID);
  *v88 = 0;
  v37 = v1 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sourceID;
  v89 = v37;
  *(_QWORD *)v37 = 0;
  *(_BYTE *)(v37 + 8) = 1;
  v38 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  v91 = v1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  v39 = type metadata accessor for DetectionResultsByChiralityPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  swift_beginAccess();
  v40 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
  swift_beginAccess();
  v42 = v78;
  outlined init with copy of (Int32, Matrix2dPB)(v41, v78, &demangling cache variable for type metadata for CMTimeProtobuf?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v42, v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
  swift_endAccess();
  v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sessionID);
  swift_beginAccess();
  v45 = *v43;
  v44 = v43[1];
  swift_beginAccess();
  *v26 = v45;
  v26[1] = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
  swift_beginAccess();
  v47 = *v46;
  swift_beginAccess();
  *v27 = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v48 = a1 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
  swift_beginAccess();
  v49 = v83;
  outlined init with copy of (Int32, Matrix2dPB)(v48, v83, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  v50 = v79;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v49, v50, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  swift_endAccess();
  v51 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  swift_beginAccess();
  v52 = v86;
  outlined init with copy of (Int32, Matrix2dPB)(v51, v86, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  v53 = v80;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v52, v53, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  swift_endAccess();
  v54 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  swift_beginAccess();
  v55 = v90;
  outlined init with copy of (Int32, Matrix2dPB)(v54, v90, &demangling cache variable for type metadata for Matrix2dPB?);
  v56 = v81;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v55, v56, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_endAccess();
  v57 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
  swift_beginAccess();
  v58 = v92;
  outlined init with copy of (Int32, Matrix2dPB)(v57, v92, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v59 = v82;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v58, v59, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  swift_endAccess();
  v60 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v60, v58, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v61 = v84;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v58, v61, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  swift_endAccess();
  v62 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors);
  swift_beginAccess();
  v63 = *v62;
  v64 = v85;
  swift_beginAccess();
  *v64 = v63;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v65 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__version);
  swift_beginAccess();
  LODWORD(v65) = *v65;
  v66 = v87;
  swift_beginAccess();
  *v66 = (_DWORD)v65;
  v67 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__frameID);
  swift_beginAccess();
  v68 = *v67;
  v69 = v88;
  swift_beginAccess();
  *v69 = v68;
  v70 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sourceID);
  swift_beginAccess();
  v71 = *v70;
  LOBYTE(v70) = *((_BYTE *)v70 + 8);
  v72 = v89;
  swift_beginAccess();
  *(_QWORD *)v72 = v71;
  *(_BYTE *)(v72 + 8) = (_BYTE)v70;
  v73 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  swift_beginAccess();
  v74 = v93;
  outlined init with copy of (Int32, Matrix2dPB)(v73, v93, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  swift_release();
  v75 = v91;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v74, v75, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  swift_endAccess();
  return v2;
}

uint64_t HandsKitDataPB._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp, &demangling cache variable for type metadata for CMTimeProtobuf?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  return v0;
}

uint64_t HandsKitDataPB._StorageClass.__deallocating_deinit()
{
  HandsKitDataPB._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandsKitDataPB._StorageClass()
{
  return type metadata accessor for HandsKitDataPB._StorageClass(0);
}

uint64_t type metadata accessor for HandsKitDataPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandsKitDataPB._StorageClass);
}

void type metadata completion function for HandsKitDataPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandsKitDataInternalPB?, (void (*)(uint64_t))type metadata accessor for HandsKitDataInternalPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for EnrollmentResultsPB?, (void (*)(uint64_t))type metadata accessor for EnrollmentResultsPB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ImageCalibrationDataPB?, (void (*)(uint64_t))type metadata accessor for ImageCalibrationDataPB);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for DetectionResultsByChiralityPB?, (void (*)(uint64_t))type metadata accessor for DetectionResultsByChiralityPB);
            if (v5 <= 0x3F)
              swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for HandsKitDataInternalPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandsKitDataInternalPB);
}

_QWORD *initializeBufferWithCopyOfBuffer for HandsKitDataInternalPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v38;
  uint64_t v39;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v11;
    v15 = v13;
    v13(v10, v14, v12);
    v16 = a3[8];
    v17 = (_QWORD *)((char *)v7 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = type metadata accessor for TrackingInfosPB(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = v18[1];
      *v17 = *v18;
      v17[1] = v22;
      v23 = *(int *)(v19 + 24);
      v24 = (char *)v17 + v23;
      v25 = (char *)v18 + v23;
      swift_bridgeObjectRetain();
      v15(v24, v25, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v26 = a3[10];
    *((_BYTE *)v7 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v27 = (_QWORD *)((char *)v7 + v26);
    v28 = (_QWORD *)((char *)a2 + v26);
    v29 = type metadata accessor for SchedulingDataPB(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      *v27 = *v28;
      v32 = v28[2];
      v27[1] = v28[1];
      v27[2] = v32;
      v33 = v28[4];
      v27[3] = v28[3];
      v27[4] = v33;
      v39 = v12;
      v34 = v28[6];
      v27[5] = v28[5];
      v27[6] = v34;
      v27[7] = v28[7];
      v35 = *(int *)(v29 + 52);
      v38 = (char *)v27 + v35;
      v36 = (char *)v28 + v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15(v38, v36, v39);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
  }
  return v7;
}

uint64_t destroy for HandsKitDataInternalPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[8];
  v7 = type metadata accessor for TrackingInfosPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 24), v5);
  }
  v8 = a1 + a2[10];
  v9 = type metadata accessor for SchedulingDataPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 52), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for HandsKitDataInternalPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v36;
  uint64_t v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v9;
  v13 = v11;
  v11(v8, v12, v10);
  v14 = a3[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = type metadata accessor for TrackingInfosPB(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = v16[1];
    *v15 = *v16;
    v15[1] = v20;
    v21 = *(int *)(v17 + 24);
    v22 = (char *)v15 + v21;
    v23 = (char *)v16 + v21;
    swift_bridgeObjectRetain();
    v13(v22, v23, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v24 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v27 = type metadata accessor for SchedulingDataPB(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *v25 = *v26;
    v30 = v26[2];
    v25[1] = v26[1];
    v25[2] = v30;
    v31 = v26[4];
    v25[3] = v26[3];
    v25[4] = v31;
    v37 = v10;
    v32 = v26[6];
    v25[5] = v26[5];
    v25[6] = v32;
    v25[7] = v26[7];
    v33 = *(int *)(v27 + 52);
    v36 = (char *)v25 + v33;
    v34 = (char *)v26 + v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v36, v34, v37);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  return a1;
}

_QWORD *assignWithCopy for HandsKitDataInternalPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v37 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  v10 = *(void (**)(char *, char *))(v37 + 24);
  v10(v7, v8);
  v11 = a3[8];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for TrackingInfosPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      v19 = *(int *)(v14 + 24);
      v20 = (char *)v12 + v19;
      v21 = (char *)v13 + v19;
      v22 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v39);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for TrackingInfosPB);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v39);
LABEL_7:
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v24 = a3[10];
  v25 = (uint64_t)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for SchedulingDataPB(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29((uint64_t)v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_DWORD *)(v25 + 4) = *((_DWORD *)v26 + 1);
      *(_QWORD *)(v25 + 8) = *((_QWORD *)v26 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 16) = *((_QWORD *)v26 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 24) = *((_QWORD *)v26 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 32) = *((_QWORD *)v26 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 40) = *((_QWORD *)v26 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 48) = *((_QWORD *)v26 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 56) = *((_QWORD *)v26 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v10)(v25 + *(int *)(v27 + 52), &v26[*(int *)(v27 + 52)], v39);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v25, type metadata accessor for SchedulingDataPB);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
    memcpy((void *)v25, v26, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_DWORD *)(v25 + 4) = *((_DWORD *)v26 + 1);
  *(_QWORD *)(v25 + 8) = *((_QWORD *)v26 + 1);
  *(_QWORD *)(v25 + 16) = *((_QWORD *)v26 + 2);
  *(_QWORD *)(v25 + 24) = *((_QWORD *)v26 + 3);
  *(_QWORD *)(v25 + 32) = *((_QWORD *)v26 + 4);
  *(_QWORD *)(v25 + 40) = *((_QWORD *)v26 + 5);
  *(_QWORD *)(v25 + 48) = *((_QWORD *)v26 + 6);
  *(_QWORD *)(v25 + 56) = *((_QWORD *)v26 + 7);
  v32 = *(int *)(v27 + 52);
  v33 = &v26[v32];
  v36 = v25 + v32;
  v38 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38(v36, v33, v39);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t initializeWithTake for HandsKitDataInternalPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for TrackingInfosPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = type metadata accessor for SchedulingDataPB(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *(_OWORD *)(v18 + 1) = *(_OWORD *)(v19 + 1);
    *(_OWORD *)(v18 + 3) = *(_OWORD *)(v19 + 3);
    *(_OWORD *)(v18 + 5) = *(_OWORD *)(v19 + 5);
    v18[7] = v19[7];
    v10((char *)v18 + *(int *)(v20 + 52), (char *)v19 + *(int *)(v20 + 52), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

_QWORD *assignWithTake for HandsKitDataInternalPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v31 = *(_QWORD *)(v9 - 8);
  v30 = *(void (**)(char *, char *, uint64_t))(v31 + 40);
  v30(v7, v8, v9);
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for TrackingInfosPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for TrackingInfosPB);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v29 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v29;
  swift_bridgeObjectRelease();
  v30(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = type metadata accessor for SchedulingDataPB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      v20[1] = v21[1];
      swift_bridgeObjectRelease();
      v20[2] = v21[2];
      swift_bridgeObjectRelease();
      v20[3] = v21[3];
      swift_bridgeObjectRelease();
      v20[4] = v21[4];
      swift_bridgeObjectRelease();
      v20[5] = v21[5];
      swift_bridgeObjectRelease();
      v20[6] = v21[6];
      swift_bridgeObjectRelease();
      v20[7] = v21[7];
      swift_bridgeObjectRelease();
      v30((char *)v20 + *(int *)(v22 + 52), (char *)v21 + *(int *)(v22 + 52), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for SchedulingDataPB);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *v20 = *v21;
  *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 1);
  *(_OWORD *)(v20 + 3) = *(_OWORD *)(v21 + 3);
  *(_OWORD *)(v20 + 5) = *(_OWORD *)(v21 + 5);
  v20[7] = v21[7];
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))((char *)v20 + *(int *)(v22 + 52), (char *)v21 + *(int *)(v22 + 52), v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandsKitDataInternalPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8FE080(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandsKitDataInternalPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D8FE158(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for HandsKitDataInternalPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TrackingInfosPB?, (void (*)(uint64_t))type metadata accessor for TrackingInfosPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for SchedulingDataPB?, (void (*)(uint64_t))type metadata accessor for SchedulingDataPB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for RejectedHandPB(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  unsigned int (*v51)(_DWORD *, uint64_t, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a3[5];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[6];
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = (int *)type metadata accessor for BasicHandDescriptorPB(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v48 = v16;
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      *((_BYTE *)v13 + 16) = *((_BYTE *)v14 + 16);
      *((_DWORD *)v13 + 5) = *((_DWORD *)v14 + 5);
      v20 = v15[8];
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v11((uint64_t)v21, (uint64_t)v22, v10);
      v23 = v15[9];
      v24 = (_DWORD *)((char *)v13 + v23);
      v49 = v10;
      v50 = (void (*)(char *, char *, uint64_t))v11;
      v25 = (_DWORD *)((char *)v14 + v23);
      v26 = type metadata accessor for Coordinate3DPB(0);
      v27 = *(_QWORD *)(v26 - 8);
      v51 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48);
      v47 = v27;
      if (v51(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v24 = *(_QWORD *)v25;
        v24[2] = v25[2];
        v50((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v49);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v29 = v15[10];
      v30 = (_DWORD *)((char *)v13 + v29);
      v31 = (_DWORD *)((char *)v14 + v29);
      if (v51((_QWORD *)((char *)v14 + v29), 1, v26))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        v10 = v49;
        v11 = (void (*)(uint64_t, uint64_t, uint64_t))v50;
      }
      else
      {
        *(_QWORD *)v30 = *(_QWORD *)v31;
        v30[2] = v31[2];
        v33 = *(int *)(v26 + 28);
        v34 = (char *)v31 + v33;
        v10 = v49;
        v11 = (void (*)(uint64_t, uint64_t, uint64_t))v50;
        v50((char *)v30 + v33, v34, v49);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v30, 0, 1, v26);
      }
      v35 = v15[11];
      v36 = (_DWORD *)((char *)v13 + v35);
      v37 = (_DWORD *)((char *)v14 + v35);
      if (v51(v37, 1, v26))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v36[2] = v37[2];
        v11((uint64_t)v36 + *(int *)(v26 + 28), (uint64_t)v37 + *(int *)(v26 + 28), v10);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v36, 0, 1, v26);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v48 + 56))(v13, 0, 1, v15);
    }
    v39 = a3[7];
    v40 = (char *)v4 + v39;
    v41 = (char *)a2 + v39;
    v42 = type metadata accessor for HandDescriptorPB(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v11((uint64_t)v40, (uint64_t)v41, v10);
      *(_QWORD *)&v40[*(int *)(v42 + 20)] = *(_QWORD *)&v41[*(int *)(v42 + 20)];
      v45 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56);
      swift_retain();
      v45(v40, 0, 1, v42);
    }
  }
  return v4;
}

uint64_t destroy for RejectedHandPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[6];
  v8 = (int *)type metadata accessor for BasicHandDescriptorPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    v6(v7 + v8[8], v5);
    v9 = v7 + v8[9];
    v10 = type metadata accessor for Coordinate3DPB(0);
    v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
    if (!v11(v9, 1, v10))
      v6(v9 + *(int *)(v10 + 28), v5);
    v12 = v7 + v8[10];
    if (!v11(v12, 1, v10))
      v6(v12 + *(int *)(v10 + 28), v5);
    v13 = v7 + v8[11];
    if (!v11(v13, 1, v10))
      v6(v13 + *(int *)(v10 + 28), v5);
  }
  v14 = a1 + a2[7];
  v15 = type metadata accessor for HandDescriptorPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15);
  if (!(_DWORD)result)
  {
    v6(v14, v5);
    return swift_release();
  }
  return result;
}

