uint64_t initializeWithCopy for MissedPinchStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for MissedPinchStatePB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for MissedPinchStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for MissedPinchStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MissedPinchByBreakStatePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_3Tm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MissedPinchByBreakStatePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_4Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for MissedPinchStatePB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MissedScrollStatePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MissedScrollStatePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for MissedScrollStatePB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_OWORD *initializeWithCopy for MissedScrollStatePB(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for MissedScrollStatePB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for MissedScrollStatePB(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MissedScrollByBreakStatePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MissedScrollByBreakStatePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for MissedScrollStatePB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ScrollBreak.process(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  int v19;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for HandDescriptor();
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (char *)&v38 - v13;
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)&v38 - v16;
  ScrollBreak.updatePrev3DJointVector()();
  result = ScrollBreak.update3DJointVector(_:)(a2);
  v19 = *(unsigned __int8 *)(a1 + 4);
  if (v19 != 2 && (v19 & 1) == 0)
  {
    *(_BYTE *)(v2 + 56) = 0;
    return result;
  }
  outlined init with copy of HandDescriptor(a1, (uint64_t)v17);
  v21 = *(unsigned __int8 *)(v2 + 56);
  outlined init with copy of HandDescriptor((uint64_t)v17, (uint64_t)v14);
  if (v21 == 1)
  {
    outlined destroy of HandDescriptor((uint64_t)v14);
LABEL_9:
    outlined destroy of HandDescriptor((uint64_t)v17);
    goto LABEL_11;
  }
  v22 = v14[4];
  outlined destroy of HandDescriptor((uint64_t)v14);
  if ((v22 & 1) == 0)
    goto LABEL_9;
  outlined destroy of HandDescriptor((uint64_t)v17);
  ScrollBreak.updateStatesOnMake(_:)();
LABEL_11:
  outlined init with copy of HandDescriptor(a1, (uint64_t)v10);
  v23 = *(_QWORD *)(v3 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 64);
    swift_retain();
    swift_bridgeObjectRetain();
    ScrollBreak.updateFeatureVector(_:_:)((uint64_t)v10, v24, v25);
    swift_release();
    swift_bridgeObjectRelease();
  }
  ScrollBreak.updateCondFeatureVector()();
  outlined destroy of HandDescriptor((uint64_t)v10);
  if (*(_QWORD *)(v3 + 16))
  {
    swift_beginAccess();
    v26 = *(_QWORD **)(v3 + 64);
    v27 = *(_QWORD *)(v3 + 88);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = PinchCancellationModel.predict(_:_:)(v26, v27);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v28[2] < 2uLL)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v29 = *((_DWORD *)v28 + 9);
    swift_release();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v3 + 60) = v29;
  }
  result = ScrollBreak.checkForBreak(_:)(a2);
  if (result == 5)
  {
    result = ScrollBreak.breakPinch(_:)(a1);
    v30 = a1 + *(int *)(v6 + 108);
    v31 = *(_QWORD *)v30 | 0x80;
    if (*(_BYTE *)(v30 + 8))
      v31 = 128;
    *(_QWORD *)v30 = v31;
    *(_BYTE *)(v30 + 8) = 0;
  }
  v32 = *(_QWORD *)(v3 + 48);
  v33 = __OFADD__(v32, 1);
  v34 = v32 + 1;
  if (v33)
  {
    __break(1u);
    goto LABEL_28;
  }
  *(_QWORD *)(v3 + 48) = v34;
  v35 = *(unsigned __int8 *)(v3 + 104);
  if (v35 == 2)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  if ((v35 & 1) != 0)
  {
    v36 = a1 + *(int *)(v6 + 96);
    v37 = type metadata accessor for HandDescriptorInternal();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37);
    if (!(_DWORD)result)
    {
      if (*(_QWORD *)(v36 + 48))
        *(_DWORD *)(v36 + 128) = *(_DWORD *)(v3 + 60);
    }
  }
  return result;
}

uint64_t ScrollBreak.checkForBreak(_:)(uint64_t a1)
{
  uint64_t v1;

  if (!*(_QWORD *)(v1 + 16))
    return 0;
  if (*(_BYTE *)(v1 + 56) == 1)
    __asm { BR              X10 }
  return 1;
}

void ScrollBreak.updateStatesOnMake(_:)()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  int32x2_t v3;
  int32x2_t v4;

  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_DWORD *)(v0 + 60) = 1065353216;
  *(_BYTE *)(v0 + 56) = 1;
  v1 = *(unint64_t **)(v0 + 16);
  if (v1)
  {
    v2 = v1[12];
    swift_retain();
    v3.i32[0] = 0;
    v1[13] = specialized Array.init(repeating:count:)(v2, v3);
    swift_bridgeObjectRelease();
    v4.i32[0] = 0;
    v1[14] = specialized Array.init(repeating:count:)(v1[12], v4);
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t ScrollBreak.breakPinch(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 4) = 0;
  result = type metadata accessor for HandDescriptor();
  v4 = a1 + *(int *)(result + 112);
  if ((*(_BYTE *)(v4 + 49) & 1) == 0 && (*(_BYTE *)(v4 + 32) & 1) == 0)
    *(_QWORD *)(v4 + 8) |= 4uLL;
  v5 = *(unsigned __int8 *)(v1 + 104);
  if (v5 == 2)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v5 & 1) == 0)
  {
LABEL_9:
    *(_BYTE *)(v1 + 56) = 0;
    return result;
  }
  v6 = a1 + *(int *)(result + 96);
  v7 = type metadata accessor for HandDescriptorInternal();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if ((_DWORD)result == 1)
    goto LABEL_11;
  if (*(_QWORD *)(v6 + 48))
  {
    *(_QWORD *)(v6 + 32) = 12;
    *(_BYTE *)(v6 + 40) = 1;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t ScrollBreak.update3DJointVector(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(_QWORD *)(result + 208))
  {
    v2 = *(_QWORD *)(result + 216);
    if (*(_QWORD *)(v2 + 16))
    {
      v3 = 0;
      v4 = 0;
      v5 = (__int128 *)(v2 + 48);
      while (1)
      {
        v9 = *v5;
        swift_beginAccess();
        v6 = *(_QWORD *)(v1 + 72);
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + 72) = v6;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
          v6 = result;
          *(_QWORD *)(v1 + 72) = result;
        }
        if (v3 >= *(_QWORD *)(v6 + 16))
          break;
        *(_DWORD *)(v6 + 4 * v3 + 32) = v9;
        swift_endAccess();
        v10 = *v5;
        swift_beginAccess();
        v7 = *(_QWORD *)(v1 + 72);
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + 72) = v7;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          v7 = result;
          *(_QWORD *)(v1 + 72) = result;
        }
        if (v3 + 1 >= *(_QWORD *)(v7 + 16))
          break;
        *(_DWORD *)(v7 + 4 * v3 + 36) = DWORD1(v10);
        swift_endAccess();
        v11 = *v5;
        swift_beginAccess();
        v8 = *(_QWORD *)(v1 + 72);
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + 72) = v8;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
          v8 = result;
          *(_QWORD *)(v1 + 72) = result;
        }
        if (v3 + 2 >= *(_QWORD *)(v8 + 16))
          break;
        *(_DWORD *)(v8 + 4 * v3 + 40) = DWORD2(v11);
        result = swift_endAccess();
        if (v3 == 78)
          return result;
        ++v4;
        v5 += 2;
        v3 += 3;
        if (v4 >= *(_QWORD *)(v2 + 16))
          goto LABEL_18;
      }
      __break(1u);
    }
LABEL_18:
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static ScrollBreak.featureSelection(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _BYTE *v9;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  if (!*(_QWORD *)(a2 + 16))
  {
    v14 = 0u;
    v15 = 0u;
    goto LABEL_8;
  }
  v5 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
  if ((v8 & 1) == 0)
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v14);
    lazy protocol witness table accessor for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError();
    swift_allocError();
    *v9 = 1;
    return swift_willThrow();
  }
  outlined init with take of Any(&v14, v16);
  outlined init with copy of Any((uint64_t)v16, (uint64_t)&v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
    *a3 = v17;
  }
  else if (swift_dynamicCast())
  {
    v11 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_23D9A70A0;
    *(_DWORD *)(v12 + 32) = v11;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
    *a3 = v12;
  }
  else
  {
    lazy protocol witness table accessor for type ScrollBreakNetworkInputError and conformance ScrollBreakNetworkInputError();
    swift_allocError();
    *v13 = 0;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v14);
}

uint64_t ScrollBreak.updateFeatureVector(_:_:)(uint64_t a1, uint64_t a2, int32x2_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  unint64_t v23;
  char v24;
  int v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;

  v4 = *(_QWORD *)(v3 + 96);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 + 0x4000000000000000 < 0)
    goto LABEL_46;
  v6 = v3;
  a3.i32[0] = 0;
  v9 = specialized Array.init(repeating:count:)(2 * v5, a3);
  v10 = *(_QWORD *)(v4 + 16);
  if (v10)
  {
    v42 = a2;
    v43 = v3;
    v11 = *(_QWORD **)(a1 + 200);
    swift_bridgeObjectRetain();
    v12 = 0;
    v13 = 0x4000000000000000;
    while (1)
    {
      if (v11)
      {
        v14 = *(_QWORD *)(a1 + 16);
        if (!v14)
          goto LABEL_48;
        v15 = *(_QWORD *)(v4 + 8 * v13 + 32);
        if ((v15 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (v15 >= *(_QWORD *)(v14 + 16))
          goto LABEL_34;
        v16 = v11[2];
        if (!v16)
          goto LABEL_35;
        if (v16 == 1)
          goto LABEL_36;
        if (v13 < 0)
          goto LABEL_37;
        v17 = v11[4];
        if (v17 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_38;
        if (v17 > 0x7FFFFFFF)
          goto LABEL_39;
        v18 = *(_QWORD *)(v14 + 144 * v15 + 40);
        if (!*(_QWORD *)(v18 + 16))
          goto LABEL_40;
        v19 = v11[6];
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
        if ((v21 & 1) == 0)
          goto LABEL_41;
        v22 = *(_DWORD *)(*(_QWORD *)(v18 + 56) + 4 * v20);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v12 & 0x8000000000000000) != 0)
            goto LABEL_26;
        }
        else
        {
          v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          if ((v12 & 0x8000000000000000) != 0)
          {
LABEL_26:
            __break(1u);
LABEL_27:
            swift_bridgeObjectRelease();
            a2 = v42;
            v6 = v43;
            break;
          }
        }
        if (v12 >= *(_QWORD *)(v9 + 16))
          goto LABEL_42;
        *(_DWORD *)(v9 + 4 * v12 + 32) = v22;
        if (v19 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_43;
        if (v19 > 0x7FFFFFFF)
          goto LABEL_44;
        if (!*(_QWORD *)(v18 + 16))
          goto LABEL_47;
        v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
        if ((v24 & 1) == 0)
          goto LABEL_47;
        v25 = *(_DWORD *)(*(_QWORD *)(v18 + 56) + 4 * v23);
        swift_bridgeObjectRelease();
        if (v12 + 1 >= *(_QWORD *)(v9 + 16))
          goto LABEL_45;
        *(_DWORD *)(v9 + 4 * v12 + 36) = v25;
      }
      ++v13;
      v12 += 2;
      if (!--v10)
        goto LABEL_27;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9AC830;
  *(_QWORD *)(inited + 32) = 0x61725F65726F6373;
  *(_QWORD *)(inited + 40) = 0xE900000000000077;
  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
    goto LABEL_49;
  v27 = inited;
  v28 = MEMORY[0x24BEE14E8];
  *(_DWORD *)(inited + 48) = *(_DWORD *)(a1 + 276);
  *(_QWORD *)(inited + 72) = v28;
  *(_QWORD *)(inited + 80) = 0x65726F6373;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  if ((*(_BYTE *)(a1 + 236) & 1) != 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v29 = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(inited + 96) = *(_DWORD *)(a1 + 232);
  v30 = *(_DWORD *)(a1 + 220);
  *(_DWORD *)(inited + 144) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(inited + 192) = v30;
  *(_QWORD *)(inited + 120) = v28;
  *(_QWORD *)(inited + 128) = 0x636F5F68636E6970;
  *(_QWORD *)(inited + 136) = 0xE900000000000063;
  *(_QWORD *)(inited + 168) = v28;
  *(_QWORD *)(inited + 176) = 0xD000000000000014;
  *(_QWORD *)(inited + 184) = 0x800000023D9C3CB0;
  *(_QWORD *)(inited + 216) = v28;
  *(_QWORD *)(inited + 224) = 0x7275736E755F6468;
  *(_QWORD *)(inited + 232) = 0xEF65726F63735F65;
  *(_DWORD *)(inited + 240) = v29;
  *(_QWORD *)(inited + 264) = v28;
  *(_QWORD *)(inited + 272) = 0xD000000000000011;
  *(_QWORD *)(inited + 280) = 0x800000023D9C3CF0;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  HandPose.getHoverDistanceVector()();
  v32 = vmulq_f32(v31, v31);
  *(float *)(v27 + 288) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]);
  *(_QWORD *)(v27 + 312) = v28;
  strcpy((char *)(v27 + 320), "score_aheads");
  *(_BYTE *)(v27 + 333) = 0;
  *(_WORD *)(v27 + 334) = -5120;
  v33 = *(_QWORD *)(a1 + 256);
  v34 = *(_DWORD *)(a1 + 264);
  v35 = *(_BYTE *)(a1 + 268);
  v36 = *(_DWORD *)(a1 + 272);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  *(_QWORD *)(v27 + 360) = v37;
  *(_QWORD *)(v27 + 368) = 0xD000000000000010;
  *(_QWORD *)(v27 + 336) = v33;
  *(_QWORD *)(v27 + 376) = 0x800000023D9C7A80;
  *(_DWORD *)(v27 + 384) = v36;
  *(_QWORD *)(v27 + 408) = v28;
  *(_QWORD *)(v27 + 416) = 0xD000000000000011;
  *(_QWORD *)(v27 + 424) = 0x800000023D9CADC0;
  if ((v35 & 1) == 0)
  {
    *(_DWORD *)(v27 + 432) = v34;
    *(_QWORD *)(v27 + 456) = v28;
    *(_QWORD *)(v27 + 464) = 0xD000000000000015;
    *(_QWORD *)(v27 + 504) = v37;
    *(_QWORD *)(v27 + 472) = 0x800000023D9CC8B0;
    *(_QWORD *)(v27 + 480) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = specialized Dictionary.init(dictionaryLiteral:)(v27);
    v39 = specialized Sequence.compactMap<A>(_:)(a2, v38);
    v40 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v6 + 64) = v40;
    return swift_bridgeObjectRelease();
  }
LABEL_52:
  __break(1u);
  swift_bridgeObjectRelease();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

Swift::Void __swiftcall ScrollBreak.updatePrev3DJointVector()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v9 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = 0;
    v4 = v9;
    v6 = *(_QWORD *)(v9 + 16);
    do
    {
      v7 = *(_DWORD *)(v2 + 4 * v5 + 32);
      v8 = *(_QWORD *)(v9 + 24);
      if (v6 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v6 + 1, 1);
      ++v5;
      *(_QWORD *)(v9 + 16) = v6 + 1;
      *(_DWORD *)(v9 + 4 * v6++ + 32) = v7;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v1 + 80) = v4;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ScrollBreak.updateCondFeatureVector()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  float *v7;
  unint64_t v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (v0[2])
  {
    v1 = v0;
    swift_beginAccess();
    v2 = v0[9];
    v3 = v1[10];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg5021_sS3fIgyyd_Sf_SftSfs5f112OIegnrzr_TR107_s5Hands13TrackingUtilsC32voteHandByLegacyJointUncertainty9handPose00J5Pose1SiAA0E4PoseV_AHtFZS2f_K16XEfU1_Tf3nnnpf_nTf1cn_n(v2, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v4 + 16);
    v6 = MEMORY[0x24BEE4AF8];
    if (v5)
    {
      v21 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v6 = v21;
      v20 = v4;
      v7 = (float *)(v4 + 32);
      v8 = *(_QWORD *)(v21 + 16);
      do
      {
        v9 = *v7;
        v10 = *(_QWORD *)(v21 + 24);
        if (v8 >= v10 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v8 + 1, 1);
        *(_QWORD *)(v21 + 16) = v8 + 1;
        *(float *)(v21 + 4 * v8 + 32) = v9 * 100.0;
        ++v7;
        ++v8;
        --v5;
      }
      while (v5);
      v4 = v20;
    }
    v11 = v1[9];
    v12 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRetain();
    v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg583_s5Hands18PinchGestureHelperC32computeJointPositionInWristCoordySaySfGAEFZSfSiXEfU_SaySfGTf1cn_nTf4ng_n(0, v12, v11);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A74A0;
    *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
    *(_QWORD *)(inited + 40) = 0x800000023D9CC870;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    *(_QWORD *)(inited + 48) = v13;
    *(_QWORD *)(inited + 72) = v15;
    strcpy((char *)(inited + 80), "joint_velocity");
    *(_BYTE *)(inited + 95) = -18;
    *(_QWORD *)(inited + 96) = v4;
    *(_QWORD *)(inited + 120) = v15;
    *(_QWORD *)(inited + 128) = 0xD000000000000015;
    *(_QWORD *)(inited + 168) = v15;
    *(_QWORD *)(inited + 136) = 0x800000023D9CC890;
    *(_QWORD *)(inited + 144) = v6;
    v16 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v17 = swift_bridgeObjectRetain();
    v18 = specialized Sequence.compactMap<A>(_:)(v17, v16);
    v19 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v18);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1[11] = v19;
    swift_bridgeObjectRelease();
  }
}

uint64_t ScrollBreak.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScrollBreak()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ScrollBreak.BreakFeatures()
{
  return &type metadata for ScrollBreak.BreakFeatures;
}

uint64_t getEnumTagSinglePayload for ScrollBreak.InternalStates(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollBreak.InternalStates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollBreak.InternalStates()
{
  return &type metadata for ScrollBreak.InternalStates;
}

ValueMetadata *type metadata accessor for ScrollBreak.ThresholdConfig()
{
  return &type metadata for ScrollBreak.ThresholdConfig;
}

void specialized ScrollBreak.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  unint64_t *v30;
  unint64_t v31;
  int32x2_t v32;
  int32x2_t v33;
  _QWORD v34[4];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  v4 = v1 + 40;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 60) = 1065353216;
  v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v5 + 16) = 81;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_DWORD *)(v5 + 352) = 0;
  v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v6 + 16) = 81;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_DWORD *)(v6 + 352) = 0;
  v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v7 + 16) = 81;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 240) = 0u;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_OWORD *)(v7 + 288) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_DWORD *)(v7 + 352) = 0;
  *(_QWORD *)(v2 + 64) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 72) = v5;
  *(_QWORD *)(v2 + 80) = v6;
  *(_QWORD *)(v2 + 88) = v7;
  *(_QWORD *)(v2 + 96) = &outlined read-only object #0 of ScrollBreak.init(_:);
  *(_BYTE *)(v2 + 104) = 2;
  v8 = objc_msgSend(a1, sel_PinchBreakModelName);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  LODWORD(v8) = objc_msgSend(a1, sel_AllowInternalModel);
  type metadata accessor for PinchCancellationModel();
  swift_allocObject();
  *(_QWORD *)(v2 + 16) = PinchCancellationModel.init(_:_:)(v9, v11, (int)v8);
  swift_release();
  v12 = a1;
  objc_msgSend(v12, sel_ScrollBreakDistanceThreshold);
  v14 = v13;
  LODWORD(v9) = objc_msgSend(v12, sel_ScrollBreakCounterThreshold);

  *(_DWORD *)(v2 + 24) = v14;
  *(_QWORD *)(v2 + 32) = (int)v9;
  v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v15 + 16) = 81;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_OWORD *)(v15 + 144) = 0u;
  *(_OWORD *)(v15 + 160) = 0u;
  *(_OWORD *)(v15 + 176) = 0u;
  *(_OWORD *)(v15 + 192) = 0u;
  *(_OWORD *)(v15 + 208) = 0u;
  *(_OWORD *)(v15 + 224) = 0u;
  *(_OWORD *)(v15 + 240) = 0u;
  *(_OWORD *)(v15 + 256) = 0u;
  *(_OWORD *)(v15 + 272) = 0u;
  *(_OWORD *)(v15 + 288) = 0u;
  *(_OWORD *)(v15 + 304) = 0u;
  *(_OWORD *)(v15 + 320) = 0u;
  *(_OWORD *)(v15 + 336) = 0u;
  *(_DWORD *)(v15 + 352) = 0;
  v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v16 + 16) = 81;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(_OWORD *)(v16 + 160) = 0u;
  *(_OWORD *)(v16 + 176) = 0u;
  *(_OWORD *)(v16 + 192) = 0u;
  *(_OWORD *)(v16 + 208) = 0u;
  *(_OWORD *)(v16 + 224) = 0u;
  *(_OWORD *)(v16 + 240) = 0u;
  *(_OWORD *)(v16 + 256) = 0u;
  *(_OWORD *)(v16 + 272) = 0u;
  *(_OWORD *)(v16 + 288) = 0u;
  *(_OWORD *)(v16 + 304) = 0u;
  *(_OWORD *)(v16 + 320) = 0u;
  *(_OWORD *)(v16 + 336) = 0u;
  *(_DWORD *)(v16 + 352) = 0;
  v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v17 + 16) = 81;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_OWORD *)(v17 + 160) = 0u;
  *(_OWORD *)(v17 + 176) = 0u;
  *(_OWORD *)(v17 + 192) = 0u;
  *(_OWORD *)(v17 + 208) = 0u;
  *(_OWORD *)(v17 + 224) = 0u;
  *(_OWORD *)(v17 + 240) = 0u;
  *(_OWORD *)(v17 + 256) = 0u;
  *(_OWORD *)(v17 + 272) = 0u;
  *(_OWORD *)(v17 + 288) = 0u;
  *(_OWORD *)(v17 + 304) = 0u;
  *(_OWORD *)(v17 + 320) = 0u;
  *(_OWORD *)(v17 + 336) = 0u;
  *(_DWORD *)(v17 + 352) = 0;
  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 72) = v15;
  *(_QWORD *)(v2 + 80) = v16;
  *(_QWORD *)(v2 + 88) = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v2 + 60) = 1065353216;
  *(_BYTE *)(v2 + 104) = objc_msgSend(v12, sel_SerializeInternalData);
  v35 = xmmword_23D9A9560;
  v36 = 0;
  v37 = 0;
  v34[0] = 0;
  v34[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(86);
  v18._countAndFlagsBits = 0xD000000000000024;
  v18._object = (void *)0x800000023D9CFC80;
  String.append(_:)(v18);
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19)
  {
    __break(1u);
    goto LABEL_8;
  }
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(void **)(v19 + 24);
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD000000000000018;
  v23._object = (void *)0x800000023D9CFCB0;
  String.append(_:)(v23);
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v24 = swift_bridgeObjectRetain();
  v25._countAndFlagsBits = MEMORY[0x2426374F8](v24, MEMORY[0x24BEE14E8]);
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0xD000000000000014;
  v26._object = (void *)0x800000023D9CFCD0;
  String.append(_:)(v26);
  v27 = MEMORY[0x24BEE0D00];
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }
  v28 = swift_bridgeObjectRetain();
  v29._countAndFlagsBits = MEMORY[0x2426374F8](v28, MEMORY[0x24BEE1768]);
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34[3] = v27;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000089, 0x800000023D9CFBB0, 88, (uint64_t *)&v35, (uint64_t)v34, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
  v30 = *(unint64_t **)(v2 + 16);
  if (v30)
  {
    v31 = v30[12];
    swift_retain();
    v32.i32[0] = 0;
    v30[15] = specialized Array.init(repeating:count:)(v31, v32);
    swift_bridgeObjectRelease();
    v33.i32[0] = 0;
    v30[16] = specialized Array.init(repeating:count:)(v30[12], v33);
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized ScrollBreak._getThresholdAtTime(_:_:_:)(uint64_t result, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = a2[2];
  if (!v3)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a2[4] > result)
  {
    if (*(_QWORD *)(a3 + 16))
      return result;
    goto LABEL_12;
  }
  if (v3 < 2)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v4 = *(_QWORD *)(a3 + 16);
  if (a2[5] <= result)
  {
    if (v4 < 3)
LABEL_15:
      __break(1u);
  }
  else if (v4 < 2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScrollBreakNetworkInputError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D7F575C + 4 * byte_23D9B30F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D7F5790 + 4 * asc_23D9B30F0[v4]))();
}

uint64_t sub_23D7F5790(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7F5798(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7F57A0);
  return result;
}

uint64_t sub_23D7F57AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7F57B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D7F57B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7F57C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollBreakNetworkInputError()
{
  return &type metadata for ScrollBreakNetworkInputError;
}

__n128 PinchFrameFeatureProcessor.update(_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  float v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int16 v72;
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  Swift::Float v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  double v103;
  unsigned int v104;
  uint64_t v105;
  Swift::Bool v106;
  int v107;
  int v108;
  __int128 v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  char v118;
  char v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __n128 result;
  unint64_t v127;
  uint64_t v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  unint64_t v135;
  char v136;
  int v137;
  char v138;
  uint64_t v139;
  char v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  char v155;
  unsigned int v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  __int128 v162;
  char v163;
  char v164;
  uint64_t v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  char v172;
  int v173;
  uint64_t v174;
  char v175;
  unsigned int v176;
  uint64_t v177;
  char v178;
  unsigned int v179;
  char v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  char v200;
  unsigned int v201;
  unsigned int v202;
  char v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  char v210;
  unsigned int v211;
  char v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  char v224;
  unsigned int v225;
  char v226;
  unsigned int v227;
  char v228;
  char v229;
  unsigned int v230;
  char v231;
  char v232;
  int v233;
  uint64_t v234;
  char v235;
  char v236;
  __int128 v237;
  uint64_t v238;
  char v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  unsigned __int8 v247;
  unint64_t v248;
  char v249;
  Swift::OpaquePointer v250;
  char v251;
  uint64_t v252;
  __n128 v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  unint64_t v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  char v265;
  char v266;
  uint64_t v267;
  Swift::Int v268;
  Swift::Int v269;
  char v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  float32x4_t v274;
  int v275;
  float32x4_t v276;
  __int128 v277;
  float32x4_t v278;
  float v279;
  uint64_t v280;
  unsigned int v281;
  float32x4_t v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __int128 v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _OWORD v337[49];
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  char v343;
  _OWORD __dst[49];
  _OWORD v345[49];
  char v346;
  char v347;
  char v348;
  char v349;
  _OWORD __src[49];
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  char v358;
  _BYTE v359[7];
  char v360;
  _BYTE v361[7];
  char v362;
  __int16 v363;
  char v364;
  _BYTE v365[11];
  __int16 v366;
  uint64_t v367[15];
  int v368;
  char v369;
  char v370;
  uint64_t v371;
  float v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t v375;
  char v376;
  void *v377;
  void *v378;
  char v379;
  char v380;
  int v381;
  __int16 v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  char v404;
  _BYTE v405[7];
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  int v410;
  int v411;
  unint64_t v412;
  int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  uint64_t v417;
  int v418;
  char v419;
  __int16 v420;
  char v421;
  uint64_t v422;
  char v423;
  char v424;
  char v425;
  char v426;
  uint64_t v427;
  char v428;
  _BYTE v429[7];
  uint64_t v430;
  char v431;
  _BYTE v432[7];
  uint64_t v433;
  char v434;
  char v435;
  char v436;
  char v437;
  char v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  __int128 v447;
  __int128 v448;
  uint64_t v449;
  unsigned __int128 v450;
  uint64_t v451;
  __int128 v452;
  Swift::Int v453;
  char v454;
  int v455;
  int v456;
  char v457;
  char v458;
  char v459;
  _BYTE v460[7];
  char v461;
  _BYTE v462[7];
  char v463;
  __int16 v464;
  char v465;
  _BYTE v466[11];
  __int16 v467;
  _OWORD v468[49];
  _BYTE v469[774];
  __int16 v470;
  char v471;
  _BYTE v472[171];
  char v473;
  _BYTE v474[7];
  char v475;
  _BYTE v476[7];
  char v477;
  __int16 v478;
  char v479;
  _BYTE v480[11];
  __int16 v481;
  _BYTE v482[7];
  char v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  uint64_t v492;
  _BYTE v493[80];
  _OWORD v494[49];
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  __int128 v503;
  __int128 v504;
  uint64_t v505;

  v3 = (const void *)MEMORY[0x24BDAC7A8](a1, a2);
  v254 = v2;
  v5 = v4;
  v7 = v6;
  v128 = v8;
  memcpy(v494, v3, 0x306uLL);
  v9 = v5[9];
  v503 = v5[8];
  v504 = v9;
  v505 = *((_QWORD *)v5 + 20);
  v10 = (float32x4_t)v5[5];
  v499 = (float32x4_t)v5[4];
  v500 = v10;
  v11 = (float32x4_t)v5[6];
  v502 = (float32x4_t)v5[7];
  v501 = v11;
  v12 = v5[1];
  v495 = *v5;
  v496 = v12;
  v13 = v5[2];
  v498 = v5[3];
  v497 = v13;
  v14 = *((_QWORD *)&v494[24] + 1);
  v15 = *(_QWORD *)&v494[25];
  v16 = *(_QWORD *)&v494[0];
  v17 = *(_QWORD *)&v494[15];
  v324 = *(_QWORD *)&v494[24];
  swift_bridgeObjectRetain();
  v322 = v14;
  swift_bridgeObjectRetain();
  v320 = v15;
  swift_bridgeObjectRetain();
  outlined retain of PinchFrameFeatures((uint64_t *)v494);
  outlined retain of PostProcessingMetaData(&v495);
  outlined release of PostProcessingMetaData(&v494[33]);
  v18 = *(_QWORD *)(v7 + 24);
  v19 = *(_QWORD *)(v7 + 32);
  v20 = *(_QWORD *)(v7 + 104);
  v294 = *(_QWORD *)(v7 + 128);
  v314 = *(_QWORD *)(v7 + 16);
  v315 = v19;
  v297 = *(_QWORD *)(v7 + 48);
  v291 = *(_QWORD *)(v7 + 64);
  v290 = *(_QWORD *)(v7 + 80);
  v293 = *(_QWORD *)(v7 + 96);
  v289 = v18;
  v288 = *(_QWORD *)(v7 + 40);
  v296 = *(_QWORD *)(v7 + 56);
  v295 = *(_QWORD *)(v7 + 72);
  v313 = *(_QWORD *)(v7 + 88);
  v292 = v20;
  v316 = *(_QWORD *)(v7 + 112);
  v312 = *(_QWORD *)(v7 + 120);
  if (v314)
  {
    v264 = v17;
    v21 = *(_QWORD *)(v7 + 64);
    v22 = *(_QWORD *)(v7 + 80);
    v23 = *(_QWORD *)(v7 + 96);
    v24 = v16;
    v25 = *(_QWORD *)(v7 + 40);
    v26 = *(_QWORD *)(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of HandPose?(v24);
    v203 = *(_BYTE *)(v7 + 136);
    *(_QWORD *)&v468[0] = v314;
    *((_QWORD *)&v468[0] + 1) = v18;
    *((_QWORD *)&v468[1] + 1) = v25;
    *(_QWORD *)&v468[1] = v315;
    *((_QWORD *)&v468[2] + 1) = v26;
    *(_QWORD *)&v468[2] = v297;
    *((_QWORD *)&v468[3] + 1) = v295;
    *(_QWORD *)&v468[3] = v21;
    *((_QWORD *)&v468[4] + 1) = v313;
    *(_QWORD *)&v468[4] = v22;
    *((_QWORD *)&v468[5] + 1) = v20;
    *(_QWORD *)&v468[5] = v23;
    *((_QWORD *)&v468[6] + 1) = v312;
    *(_QWORD *)&v468[6] = v316;
    LOWORD(v468[7]) = v294 & 0x101;
    DWORD1(v468[7]) = HIDWORD(v294);
    v282 = v499;
    v276 = v501;
    v278 = v500;
    v274 = v502;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HandPose.init(_:from:)((uint64_t)v468, (uint64_t)v469, v282, v278, v276, v274);
    outlined consume of HandPose?(v264);
    v139 = *(_QWORD *)&v469[8];
    v301 = *(_QWORD *)v469;
    v330 = *(_QWORD *)&v469[24];
    v333 = *(_QWORD *)&v469[16];
    v286 = *(_QWORD *)&v469[40];
    v298 = *(_QWORD *)&v469[32];
    v283 = *(_QWORD *)&v469[56];
    v284 = *(_QWORD *)&v469[48];
    v326 = *(_QWORD *)&v469[72];
    v328 = *(_QWORD *)&v469[64];
    v303 = *(_QWORD *)&v469[88];
    v306 = *(_QWORD *)&v469[80];
    v27 = 256;
    if (!v469[113])
      v27 = 0;
    v318 = v27 | v469[112] | ((unint64_t)*(unsigned int *)&v469[116] << 32);
    v308 = *(_QWORD *)&v469[104];
    v310 = *(_QWORD *)&v469[96];
    *(_QWORD *)v469 = v314;
    *(_QWORD *)&v469[8] = v18;
    *(_QWORD *)&v469[24] = v288;
    *(_QWORD *)&v469[16] = v315;
    *(_QWORD *)&v469[40] = v296;
    *(_QWORD *)&v469[32] = v297;
    *(_QWORD *)&v469[56] = v295;
    *(_QWORD *)&v469[48] = v291;
    *(_QWORD *)&v469[72] = v313;
    *(_QWORD *)&v469[64] = v290;
    *(_QWORD *)&v469[88] = v20;
    *(_QWORD *)&v469[80] = v293;
    *(_QWORD *)&v469[104] = v312;
    *(_QWORD *)&v469[96] = v316;
    *(_WORD *)&v469[112] = v294 & 0x101;
    *(_DWORD *)&v469[116] = HIDWORD(v294);
    HandPose.getHoverDistanceVector()();
    v29 = vmulq_f32(v28, v28);
    *(_QWORD *)v469 = v314;
    *(_QWORD *)&v469[8] = v18;
    *(_QWORD *)&v469[24] = v288;
    *(_QWORD *)&v469[16] = v315;
    *(_QWORD *)&v469[40] = v296;
    *(_QWORD *)&v469[32] = v297;
    *(_QWORD *)&v469[56] = v295;
    *(_QWORD *)&v469[48] = v291;
    *(_QWORD *)&v469[72] = v313;
    *(_QWORD *)&v469[64] = v290;
    *(_QWORD *)&v469[88] = v20;
    *(_QWORD *)&v469[80] = v293;
    *(_QWORD *)&v469[104] = v312;
    *(_QWORD *)&v469[96] = v316;
    LODWORD(v199) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
    *(_WORD *)&v469[112] = v294 & 0x101;
    *(_DWORD *)&v469[116] = HIDWORD(v294);
    HandPose.getHoverDistanceVector()();
    v31 = vmulq_f32(v30, v30);
    HIDWORD(v199) = HoverDistanceReductionCalculator.getHoverDistanceReduction(_:)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]));
  }
  else
  {
    v32 = v16;
    v33 = *(_QWORD *)(v7 + 24);
    v34 = *(_QWORD *)(v7 + 40);
    v35 = *(_QWORD *)(v7 + 48);
    v36 = *(_QWORD *)(v7 + 56);
    v37 = *(_QWORD *)(v7 + 64);
    v38 = *(_QWORD *)(v7 + 72);
    v39 = *(_QWORD *)(v7 + 80);
    outlined consume of HandPose?(v32);
    v199 = *((_QWORD *)&v494[22] + 1);
    v203 = BYTE13(v494[7]);
    outlined consume of HandPose?(v17);
    v301 = 0;
    v139 = v33;
    v333 = v19;
    v330 = v34;
    v298 = v35;
    v286 = v36;
    v284 = v37;
    v283 = v38;
    v328 = v39;
    v326 = v313;
    v306 = v293;
    v303 = v292;
    v310 = v316;
    v308 = v312;
    v318 = v294;
  }
  v335 = *(_QWORD *)&v494[8];
  v40 = *(_QWORD *)(v7 + 200);
  if (v40)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v335 = v40;
  }
  v218 = *(_DWORD *)(v7 + 264);
  v41 = *(_BYTE *)(v7 + 268);
  if (*(_BYTE *)(v7 + 280))
    v42 = 0.0;
  else
    v42 = *(float *)(v7 + 276);
  v43 = *(_DWORD *)(v7 + 272);
  v215 = *(_QWORD *)(v7 + 256);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  v44 = type metadata accessor for HandDescriptor();
  v45 = v7 + *(int *)(v44 + 120);
  v221 = *(_QWORD *)v45;
  v46 = *(_BYTE *)(v45 + 8);
  v127 = v7;
  v47 = v7 + *(int *)(v44 + 124);
  v281 = v43;
  v279 = v42;
  v224 = v46;
  if (*(_QWORD *)v47)
  {
    v48 = *(void **)(v47 + 16);
    v196 = *(void **)v47;
    swift_bridgeObjectRetain_n();
    v49 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRelease();
    v196 = &outlined read-only object #0 of PinchFrameFeatureProcessor.update(_:_:_:);
    v49 = &outlined read-only object #1 of PinchFrameFeatureProcessor.update(_:_:_:);
  }
  v212 = v494[12];
  v210 = BYTE1(v494[12]);
  v206 = *(_QWORD *)&v494[13];
  v208 = *((_QWORD *)&v494[12] + 1);
  v50 = *((_QWORD *)&v494[13] + 1);
  v161 = *((_QWORD *)&v494[13] + 1);
  v51 = *(_QWORD *)&v494[14];
  v143 = *(_QWORD *)&v494[14];
  v52 = DWORD1(v494[23]);
  v54 = *(_QWORD *)&v494[23];
  v189 = HIDWORD(v54);
  v53 = v54;
  v192 = v494[23];
  v226 = BYTE8(v494[23]);
  v55 = HIDWORD(v494[25]);
  v57 = *((_QWORD *)&v494[25] + 1);
  v184 = HIDWORD(v57);
  v56 = v57;
  v186 = DWORD2(v494[25]);
  v58 = *(_QWORD *)&v494[26];
  v59 = DWORD2(v494[26]);
  v181 = DWORD1(v494[26]);
  v60 = HIDWORD(v494[26]);
  v176 = HIDWORD(v494[26]);
  v179 = DWORD2(v494[26]);
  v61 = v494[27];
  v173 = v494[27];
  v156 = DWORD2(v494[27]);
  v158 = DWORD1(v494[27]);
  v153 = HIDWORD(v494[27]);
  v62 = *(_QWORD *)&v494[28];
  v148 = DWORD2(v494[28]);
  v228 = BYTE12(v494[28]);
  v63 = *(_QWORD *)&v494[29];
  v64 = BYTE8(v494[29]);
  v137 = BYTE8(v494[29]);
  v231 = BYTE9(v494[29]);
  v236 = BYTE10(v494[29]);
  v239 = BYTE11(v494[29]);
  v65 = BYTE8(v494[30]);
  v171 = BYTE8(v494[30]);
  v234 = *(_QWORD *)&v494[30];
  v242 = *(_QWORD *)&v494[31];
  v66 = BYTE8(v494[31]);
  v169 = BYTE8(v494[31]);
  v244 = *(_QWORD *)&v494[32];
  v67 = BYTE8(v494[32]);
  v166 = BYTE8(v494[32]);
  v255 = BYTE9(v494[32]);
  v251 = BYTE10(v494[32]);
  v249 = BYTE11(v494[32]);
  v246 = BYTE12(v494[32]);
  v68 = *((_QWORD *)&v494[44] + 1);
  v261 = *(_QWORD *)&v494[44];
  v262 = *(_QWORD *)&v494[45];
  v277 = v494[46];
  v268 = *(_QWORD *)&v494[47];
  v266 = BYTE8(v494[47]);
  v275 = HIDWORD(v494[47]);
  v272 = v494[48];
  v265 = BYTE4(v494[48]);
  v270 = BYTE5(v494[48]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for PinchJointOcclusion();
  v346 = v41;
  v349 = v65;
  v348 = v66;
  v347 = v67;
  BYTE12(__src[7]) = v41;
  BYTE8(__src[30]) = v65;
  BYTE8(__src[31]) = v66;
  BYTE8(__src[32]) = v67;
  *(_QWORD *)&__src[43] = v505;
  *(_QWORD *)&__src[0] = v314;
  *((_QWORD *)&__src[0] + 1) = v289;
  *(_QWORD *)&__src[1] = v315;
  *((_QWORD *)&__src[1] + 1) = v288;
  *(_QWORD *)&__src[2] = v297;
  *((_QWORD *)&__src[2] + 1) = v296;
  *(_QWORD *)&__src[3] = v291;
  *((_QWORD *)&__src[3] + 1) = v295;
  *(_QWORD *)&__src[4] = v290;
  *((_QWORD *)&__src[4] + 1) = v313;
  *(_QWORD *)&__src[5] = v293;
  *((_QWORD *)&__src[5] + 1) = v292;
  *(_QWORD *)&__src[6] = v316;
  *((_QWORD *)&__src[6] + 1) = v312;
  *(_QWORD *)&__src[7] = v294;
  DWORD2(__src[7]) = v218;
  BYTE13(__src[7]) = v203;
  *(_QWORD *)&__src[8] = v335;
  *((_QWORD *)&__src[8] + 1) = __PAIR64__(v281, LODWORD(v279));
  *(_QWORD *)&__src[9] = v215;
  *((_QWORD *)&__src[9] + 1) = v221;
  LOBYTE(__src[10]) = v224;
  *((_QWORD *)&__src[10] + 1) = v196;
  *(_QWORD *)&__src[11] = v49;
  LOBYTE(__src[12]) = v212;
  BYTE1(__src[12]) = v210;
  *((_QWORD *)&__src[12] + 1) = v208;
  *(_QWORD *)&__src[13] = v206;
  *((_QWORD *)&__src[13] + 1) = v50;
  *(_QWORD *)&__src[14] = v51;
  *(_QWORD *)&__src[15] = v301;
  *((_QWORD *)&__src[15] + 1) = v139;
  *(_QWORD *)&__src[16] = v333;
  *((_QWORD *)&__src[16] + 1) = v330;
  *(_QWORD *)&__src[17] = v298;
  *((_QWORD *)&__src[17] + 1) = v286;
  *(_QWORD *)&__src[18] = v284;
  *((_QWORD *)&__src[18] + 1) = v283;
  *(_QWORD *)&__src[19] = v328;
  *((_QWORD *)&__src[19] + 1) = v326;
  *(_QWORD *)&__src[20] = v306;
  *((_QWORD *)&__src[20] + 1) = v303;
  *(_QWORD *)&__src[21] = v310;
  *((_QWORD *)&__src[21] + 1) = v308;
  *(_QWORD *)&__src[22] = v318;
  *((_QWORD *)&__src[22] + 1) = v199;
  *(_QWORD *)&__src[23] = __PAIR64__(v52, v53);
  BYTE8(__src[23]) = v226;
  *(_QWORD *)&__src[24] = v324;
  *((_QWORD *)&__src[24] + 1) = v322;
  *(_QWORD *)&__src[25] = v320;
  *((_QWORD *)&__src[25] + 1) = __PAIR64__(v55, v56);
  *(_QWORD *)&__src[26] = v58;
  *((_QWORD *)&__src[26] + 1) = __PAIR64__(v60, v59);
  *(_QWORD *)&__src[27] = __PAIR64__(v158, v61);
  *((_QWORD *)&__src[27] + 1) = __PAIR64__(v153, v156);
  *(_QWORD *)&__src[28] = v62;
  DWORD2(__src[28]) = v148;
  BYTE12(__src[28]) = v228;
  *(_QWORD *)&__src[29] = v63;
  BYTE8(__src[29]) = v64;
  BYTE9(__src[29]) = v231;
  BYTE10(__src[29]) = v236;
  BYTE11(__src[29]) = v239;
  *(_QWORD *)&__src[30] = v234;
  *(_QWORD *)&__src[31] = v242;
  *(_QWORD *)&__src[32] = v244;
  BYTE9(__src[32]) = v255;
  BYTE10(__src[32]) = v251;
  BYTE11(__src[32]) = v249;
  BYTE12(__src[32]) = v246;
  __src[41] = v503;
  __src[42] = v504;
  __src[37] = v499;
  __src[38] = v500;
  __src[40] = v502;
  __src[39] = v501;
  __src[33] = v495;
  __src[34] = v496;
  __src[36] = v498;
  __src[35] = v497;
  __src[44] = __PAIR128__(v68, v261);
  *(_QWORD *)&__src[45] = v262;
  __src[46] = v277;
  *(_QWORD *)&__src[47] = v268;
  BYTE8(__src[47]) = v266;
  HIDWORD(__src[47]) = v275;
  LODWORD(__src[48]) = v272;
  BYTE4(__src[48]) = v265;
  BYTE5(__src[48]) = v270;
  outlined copy of HandPose?(v314);
  swift_bridgeObjectRetain();
  outlined copy of HandPose?(v301);
  outlined retain of PinchFrameFeatures((uint64_t *)__src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v301);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v314);
  memcpy(v468, __src, 0x306uLL);
  static PinchJointOcclusion.update(_:)(v468, (uint64_t)v345);
  outlined release of PinchFrameFeatures((uint64_t *)__src);
  v362 = v171;
  v360 = v169;
  v358 = v166;
  v368 = v218;
  v370 = v203;
  v371 = v335;
  v374 = v215;
  v375 = v221;
  v376 = v224;
  v377 = v196;
  v378 = v49;
  v379 = v212;
  v380 = v210;
  v383 = v208;
  v384 = v206;
  v385 = v161;
  v386 = v143;
  v387 = v301;
  v388 = v139;
  v389 = v333;
  v390 = v330;
  v391 = v298;
  v392 = v286;
  v393 = v284;
  v394 = v283;
  v395 = v328;
  v396 = v326;
  v369 = v346;
  v382 = v366;
  v381 = *(_DWORD *)&v365[7];
  v397 = v306;
  v216 = *((_QWORD *)&v345[0] + 1);
  v398 = v303;
  v399 = v310;
  v222 = *(_QWORD *)&v345[0];
  v69 = v345[1];
  v400 = v308;
  v401 = v318;
  v404 = v226;
  *(_DWORD *)v405 = *(_DWORD *)v365;
  *(_DWORD *)&v405[3] = *(_DWORD *)&v365[3];
  v219 = *(_QWORD *)&v345[2];
  v406 = v324;
  v407 = v322;
  v70 = v345[3];
  v213 = *((_QWORD *)&v345[2] + 1);
  v408 = v320;
  v419 = v228;
  v420 = v363;
  v421 = v364;
  v71 = v345[4];
  v424 = v231;
  *(_DWORD *)v429 = *(_DWORD *)v361;
  *(_DWORD *)v432 = *(_DWORD *)v359;
  v331 = v345[5];
  v162 = *(_OWORD *)((char *)&v345[12] + 8);
  v167 = DWORD1(v345[23]);
  v425 = v236;
  v164 = BYTE8(v345[23]);
  LODWORD(v208) = DWORD2(v345[28]);
  v426 = v239;
  LOBYTE(v206) = BYTE12(v345[28]);
  v427 = v234;
  v428 = v171;
  *(_DWORD *)&v429[3] = *(_DWORD *)&v361[3];
  LOBYTE(v234) = BYTE9(v345[29]);
  v430 = v242;
  v431 = v169;
  *(_DWORD *)&v432[3] = *(_DWORD *)&v359[3];
  v232 = BYTE10(v345[29]);
  v433 = v244;
  v434 = v358;
  v229 = BYTE11(v345[29]);
  v435 = v255;
  LOBYTE(v143) = BYTE8(v345[30]);
  v436 = v251;
  v141 = BYTE8(v345[31]);
  v437 = v249;
  v140 = BYTE8(v345[32]);
  v438 = v246;
  v449 = v505;
  v204 = BYTE9(v345[32]);
  v450 = __PAIR128__(v68, v261);
  v197 = BYTE10(v345[32]);
  v72 = *(_WORD *)((char *)&v345[32] + 11);
  v355 = *(_OWORD *)((char *)&v345[33] + 8);
  v356 = *(_OWORD *)((char *)&v345[34] + 8);
  v357 = *(_OWORD *)((char *)&v345[35] + 8);
  v351 = v345[37];
  v352 = v345[38];
  v353 = v345[39];
  v354 = v345[40];
  v237 = v345[46];
  v240 = HIDWORD(v345[47]);
  LODWORD(v244) = v345[48];
  v451 = v262;
  v247 = BYTE5(v345[48]);
  LOBYTE(v242) = BYTE4(v345[48]);
  v367[0] = v314;
  v367[1] = v289;
  v367[2] = v315;
  v367[3] = v288;
  v367[4] = v297;
  v367[5] = v296;
  v367[6] = v291;
  v367[7] = v295;
  v367[8] = v290;
  v367[9] = v313;
  v367[10] = v293;
  v367[11] = v292;
  v367[12] = v316;
  v367[13] = v312;
  v367[14] = v294;
  v372 = v279;
  v373 = v281;
  v402 = v199;
  v403 = __PAIR64__(v189, v192);
  v409 = __PAIR64__(v184, v186);
  v410 = v58;
  v411 = v181;
  v412 = __PAIR64__(v176, v179);
  v413 = v173;
  v414 = v158;
  v415 = v156;
  v416 = v153;
  v417 = v62;
  v418 = v148;
  v422 = v63;
  v423 = v137;
  v453 = v268;
  v454 = v266;
  v457 = v265;
  v252 = *((_QWORD *)&v345[8] + 1);
  v439 = v495;
  v440 = v496;
  v444 = v500;
  v443 = v499;
  v441 = v497;
  v442 = v498;
  v448 = v504;
  v447 = v503;
  v445 = v501;
  v446 = v502;
  v452 = v277;
  v73 = *((_QWORD *)&v345[22] + 1);
  v455 = v275;
  v456 = v272;
  v458 = v270;
  v258 = *((_QWORD *)&v345[25] + 1);
  v74 = v345[26];
  v76 = *((_QWORD *)&v345[27] + 1);
  v75 = *(_QWORD *)&v345[27];
  v77 = *(_QWORD *)&v345[28];
  v78 = *(_QWORD *)&v345[29];
  v79 = v345[6];
  v80 = v345[7];
  v271 = *(_QWORD *)&v345[8];
  v135 = *((_QWORD *)&v345[9] + 1);
  v250._rawValue = *(void **)&v345[9];
  v132 = v345[10];
  v273 = *((_QWORD *)&v345[10] + 1);
  v280 = *(_QWORD *)&v345[11];
  v134 = v345[12];
  v133 = BYTE1(v345[12]);
  v145 = *((_QWORD *)&v345[13] + 1);
  v146 = *(_QWORD *)&v345[14];
  v285 = v345[15];
  v299 = v345[16];
  v304 = v345[17];
  v81 = v345[18];
  v82 = v345[19];
  v83 = v345[20];
  v84 = v345[21];
  v256 = *(_QWORD *)&v345[22];
  v150 = *((_QWORD *)&v345[24] + 1);
  v151 = *(_QWORD *)&v345[24];
  v149 = *(_QWORD *)&v345[25];
  LOBYTE(v156) = BYTE8(v345[29]);
  v159 = *(_QWORD *)&v345[30];
  v174 = *(_QWORD *)&v345[31];
  v177 = *(_QWORD *)&v345[32];
  v269 = *(_QWORD *)&v345[33];
  v154 = *((_QWORD *)&v345[36] + 1);
  v260 = v345[41];
  v263 = v345[42];
  v267 = *(_QWORD *)&v345[43];
  v187 = *(_QWORD *)&v345[44];
  v190 = *(_QWORD *)&v345[45];
  v194 = *(_QWORD *)&v345[47];
  v200 = BYTE8(v345[47]);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v182 = *((_QWORD *)&v345[44] + 1);
  outlined copy of HandPose?(v222);
  swift_bridgeObjectRetain();
  outlined copy of HandPose?(v285);
  outlined copy of ObjectInteractionResultsByHand?(v260, *((uint64_t *)&v260 + 1), v263, *((uint64_t *)&v263 + 1));
  outlined release of PinchFrameFeatures(v367);
  v85 = PinchBreakRangeCalculator.updatePinchScoreWithBreakRange(_:_:_:_:)(v269, v250, *(Swift::Float *)&v258, *(Swift::Float *)&v252);
  swift_bridgeObjectRelease();
  v463 = v143;
  v461 = v141;
  v459 = v140;
  LOBYTE(v468[10]) = v132;
  v468[7] = v80;
  *(_QWORD *)&v468[0] = v222;
  *((_QWORD *)&v468[0] + 1) = v216;
  v468[1] = v69;
  *(_QWORD *)&v468[2] = v219;
  *((_QWORD *)&v468[2] + 1) = v213;
  v468[3] = v70;
  v468[4] = v71;
  v468[5] = v331;
  v468[6] = v79;
  *(_QWORD *)&v468[8] = v271;
  *((_QWORD *)&v468[8] + 1) = v252;
  v468[9] = __PAIR128__(v135, (unint64_t)v250._rawValue);
  *((_QWORD *)&v468[10] + 1) = v273;
  *(_QWORD *)&v468[11] = v280;
  LOBYTE(v468[12]) = v134;
  BYTE1(v468[12]) = v133;
  WORD3(v468[12]) = v467;
  *(_DWORD *)((char *)&v468[12] + 2) = *(_DWORD *)&v466[7];
  *(_OWORD *)((char *)&v468[12] + 8) = v162;
  *((_QWORD *)&v468[13] + 1) = v145;
  *(_QWORD *)&v468[14] = v146;
  v468[15] = v285;
  v468[16] = v299;
  v468[17] = v304;
  v468[18] = v81;
  v468[19] = v82;
  v468[20] = v83;
  v468[21] = v84;
  *(_QWORD *)&v468[22] = v256;
  *((_QWORD *)&v468[22] + 1) = v73;
  *(_QWORD *)&v468[23] = __PAIR64__(v167, LODWORD(v85));
  BYTE8(v468[23]) = v164;
  *(_DWORD *)((char *)&v468[23] + 9) = *(_DWORD *)v466;
  HIDWORD(v468[23]) = *(_DWORD *)&v466[3];
  *(_QWORD *)&v468[24] = v151;
  *((_QWORD *)&v468[24] + 1) = v150;
  *(_QWORD *)&v468[25] = v149;
  *((_QWORD *)&v468[25] + 1) = v258;
  v468[26] = v74;
  v468[27] = __PAIR128__(v76, v75);
  *(_QWORD *)&v468[28] = v77;
  DWORD2(v468[28]) = v208;
  BYTE12(v468[28]) = v206;
  *(_WORD *)((char *)&v468[28] + 13) = v464;
  HIBYTE(v468[28]) = v465;
  *(_QWORD *)&v468[29] = v78;
  BYTE8(v468[29]) = v156;
  BYTE9(v468[29]) = v234;
  BYTE10(v468[29]) = v232;
  BYTE11(v468[29]) = v229;
  *(_QWORD *)&v468[30] = v159;
  BYTE8(v468[30]) = v143;
  *(_DWORD *)((char *)&v468[30] + 9) = *(_DWORD *)v462;
  HIDWORD(v468[30]) = *(_DWORD *)&v462[3];
  *(_QWORD *)&v468[31] = v174;
  BYTE8(v468[31]) = v141;
  *(_DWORD *)((char *)&v468[31] + 9) = *(_DWORD *)v460;
  HIDWORD(v468[31]) = *(_DWORD *)&v460[3];
  *(_QWORD *)&v468[32] = v177;
  BYTE8(v468[32]) = v140;
  BYTE9(v468[32]) = v204;
  BYTE10(v468[32]) = v197;
  *(_WORD *)((char *)&v468[32] + 11) = v72;
  *(_QWORD *)&v468[33] = v269;
  *(_OWORD *)((char *)&v468[33] + 8) = v355;
  *(_OWORD *)((char *)&v468[34] + 8) = v356;
  *(_OWORD *)((char *)&v468[35] + 8) = v357;
  *((_QWORD *)&v468[36] + 1) = v154;
  v468[40] = v354;
  v468[39] = v353;
  v468[38] = v352;
  v468[37] = v351;
  v468[41] = v260;
  v468[42] = v263;
  *(_QWORD *)&v468[43] = v267;
  *(_QWORD *)&v468[44] = v187;
  *((_QWORD *)&v468[44] + 1) = v182;
  *(_QWORD *)&v468[45] = v190;
  v468[46] = v237;
  *(_QWORD *)&v468[47] = v194;
  BYTE8(v468[47]) = v200;
  HIDWORD(v468[47]) = v240;
  LODWORD(v468[48]) = v244;
  WORD2(v468[48]) = __PAIR16__(v247, v242);
  swift_retain();
  outlined retain of PinchFrameFeatures((uint64_t *)v468);
  outlined consume of ObjectInteractionResultsByHand?(v260, *((uint64_t *)&v260 + 1), v263, *((uint64_t *)&v263 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v285);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v222);
  memcpy(__dst, v468, 0x306uLL);
  PinchUncertaintyFilters.update(_:)(__dst, (uint64_t)v345);
  swift_release();
  outlined release of PinchFrameFeatures((uint64_t *)v468);
  memcpy(v469, v345, sizeof(v469));
  v287 = *(_QWORD *)v469;
  v86 = *(_DWORD *)&v469[136];
  v230 = *(_DWORD *)&v469[140];
  v319 = *(_QWORD *)&v469[144];
  v195 = *(_QWORD *)&v469[152];
  v87 = *(_QWORD *)&v469[168];
  v257 = *(_QWORD *)&v469[176];
  v142 = v469[192];
  v193 = v469[193];
  v188 = *(_QWORD *)&v469[208];
  v191 = *(_QWORD *)&v469[200];
  v183 = *(_QWORD *)&v469[224];
  v185 = *(_QWORD *)&v469[216];
  v227 = *(_DWORD *)&v469[360];
  v225 = *(_DWORD *)&v469[364];
  v223 = *(_DWORD *)&v469[368];
  v220 = *(_DWORD *)&v469[372];
  v217 = *(_DWORD *)&v469[408];
  v214 = *(_DWORD *)&v469[412];
  v211 = *(_DWORD *)&v469[416];
  v209 = *(_DWORD *)&v469[420];
  v207 = *(_DWORD *)&v469[424];
  v205 = *(_DWORD *)&v469[428];
  v202 = *(_DWORD *)&v469[432];
  v201 = *(_DWORD *)&v469[436];
  v198 = *(_DWORD *)&v469[440];
  v88 = *(_DWORD *)&v469[452];
  v490 = v345[6];
  v491 = v345[7];
  v486 = v345[2];
  v487 = v345[3];
  v489 = v345[5];
  v488 = v345[4];
  v485 = v345[1];
  v484 = v345[0];
  *(_OWORD *)&v472[115] = *(_OWORD *)&v469[640];
  *(_OWORD *)&v472[131] = *(_OWORD *)&v469[656];
  *(_OWORD *)&v472[147] = *(_OWORD *)&v469[672];
  *(_OWORD *)&v472[51] = *(_OWORD *)&v469[576];
  *(_OWORD *)&v472[67] = *(_OWORD *)&v469[592];
  v89 = *(_DWORD *)&v469[456];
  v492 = *(_QWORD *)&v345[8];
  *(_QWORD *)&v472[163] = *(_QWORD *)&v469[688];
  *(_OWORD *)&v472[83] = *(_OWORD *)&v469[608];
  *(_OWORD *)&v472[99] = *(_OWORD *)&v469[624];
  *(_OWORD *)&v472[3] = *(_OWORD *)&v469[528];
  v253 = *(__n128 *)&v469[736];
  *(_OWORD *)&v472[19] = *(_OWORD *)&v469[544];
  v90 = *(_DWORD *)&v469[764];
  v136 = v469[160];
  v483 = v469[160];
  v130 = v469[488];
  v131 = v469[504];
  v477 = v469[488];
  v475 = v469[504];
  v129 = v469[520];
  v473 = v469[520];
  *(_OWORD *)&v472[35] = *(_OWORD *)&v469[560];
  v325 = *(_QWORD *)&v469[240];
  v323 = *(_QWORD *)&v469[248];
  v336 = *(_QWORD *)&v469[256];
  v334 = *(_QWORD *)&v469[264];
  v332 = *(_QWORD *)&v469[272];
  v259 = *(_QWORD *)&v469[280];
  v329 = *(_QWORD *)&v469[288];
  v327 = *(_QWORD *)&v469[296];
  v321 = *(_QWORD *)&v469[304];
  v305 = *(_QWORD *)&v469[312];
  v302 = *(_QWORD *)&v469[320];
  v300 = *(_QWORD *)&v469[328];
  v307 = *(_QWORD *)&v469[336];
  v311 = *(_QWORD *)&v469[344];
  v309 = *(_QWORD *)&v469[352];
  v147 = v469[376];
  v91 = *(_QWORD *)&v469[384];
  v92 = *(_QWORD *)&v469[392];
  v93 = *(_QWORD *)&v469[400];
  v155 = v469[472];
  v157 = v469[473];
  v160 = v469[474];
  v163 = v469[475];
  v165 = *(_QWORD *)&v469[480];
  v168 = *(_QWORD *)&v469[496];
  v170 = *(_QWORD *)&v469[512];
  v172 = v469[521];
  v175 = v469[522];
  v178 = v469[523];
  v180 = v469[524];
  v94 = *(_OWORD *)&v469[656];
  v95 = *(_OWORD *)&v469[672];
  v245 = *(_QWORD *)&v469[704];
  v243 = *(_DWORD *)&v469[712];
  v241 = *(_DWORD *)&v469[716];
  v144 = *(_QWORD *)&v469[720];
  v238 = *(_QWORD *)&v469[752];
  v235 = v469[760];
  v233 = *(_DWORD *)&v469[768];
  LOBYTE(v248) = v469[772];
  LOBYTE(v250._rawValue) = v469[773];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of HandPose?(v287);
  swift_bridgeObjectRetain();
  outlined copy of HandPose?(v325);
  outlined copy of ObjectInteractionResultsByHand?(v94, *((uint64_t *)&v94 + 1), v95, *((uint64_t *)&v95 + 1));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v152 = v91;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of HandPose?(v287);
  swift_bridgeObjectRetain();
  outlined copy of HandPose?(v325);
  outlined copy of ObjectInteractionResultsByHand?(v94, *((uint64_t *)&v94 + 1), v95, *((uint64_t *)&v95 + 1));
  outlined retain of PinchFrameFeatures((uint64_t *)v469);
  outlined release of PinchFrameFeatures((uint64_t *)v468);
  if (v137 == 2)
  {
    v96 = v257;
    v97 = v87;
    outlined release of PinchFrameFeatures((uint64_t *)v469);
    v98 = 0.5;
  }
  else
  {
    v96 = v257;
    v97 = v87;
    if ((v137 & 1) != 0 || *(_BYTE *)(v254 + 72) != 1)
    {
      memcpy(v345, v469, 0x306uLL);
      IntentionBreakScoreCalculator.getScore(_:)((uint64_t)v345);
      v98 = v99;
      outlined release of PinchFrameFeatures((uint64_t *)v469);
    }
    else
    {
      outlined release of PinchFrameFeatures((uint64_t *)v469);
      v98 = 0.5;
    }
  }
  v100 = *(_QWORD *)&v469[464];
  v343 = v130;
  v342 = v131;
  v341 = v129;
  *(_QWORD *)&v345[8] = *(_QWORD *)&v469[128];
  BYTE8(v345[30]) = v130;
  BYTE8(v345[31]) = v131;
  BYTE8(v345[32]) = v129;
  *(_QWORD *)&v345[43] = *(_QWORD *)&v469[688];
  v345[6] = *(_OWORD *)&v469[96];
  v345[7] = *(_OWORD *)&v469[112];
  v345[2] = *(_OWORD *)&v469[32];
  v345[3] = *(_OWORD *)&v469[48];
  v345[5] = *(_OWORD *)&v469[80];
  v345[4] = *(_OWORD *)&v469[64];
  v345[1] = *(_OWORD *)&v469[16];
  v345[0] = *(_OWORD *)v469;
  *((_QWORD *)&v345[8] + 1) = __PAIR64__(v230, v86);
  *(_QWORD *)&v345[9] = v319;
  *((_QWORD *)&v345[9] + 1) = v195;
  LOBYTE(v345[10]) = v136;
  *((_QWORD *)&v345[10] + 1) = v97;
  *(_QWORD *)&v345[11] = v96;
  LOBYTE(v345[12]) = v142;
  BYTE1(v345[12]) = v193;
  *((_QWORD *)&v345[12] + 1) = v191;
  *(_QWORD *)&v345[13] = v188;
  *((_QWORD *)&v345[13] + 1) = v185;
  *(_QWORD *)&v345[14] = v183;
  *(_QWORD *)&v345[15] = v325;
  *((_QWORD *)&v345[15] + 1) = v323;
  *(_QWORD *)&v345[16] = v336;
  *((_QWORD *)&v345[16] + 1) = v334;
  *(_QWORD *)&v345[17] = v332;
  *((_QWORD *)&v345[17] + 1) = v259;
  *(_QWORD *)&v345[18] = v329;
  *((_QWORD *)&v345[18] + 1) = v327;
  *(_QWORD *)&v345[19] = v321;
  *((_QWORD *)&v345[19] + 1) = v305;
  *(_QWORD *)&v345[20] = v302;
  *((_QWORD *)&v345[20] + 1) = v300;
  *(_QWORD *)&v345[21] = v307;
  *((_QWORD *)&v345[21] + 1) = v311;
  *(_QWORD *)&v345[22] = v309;
  *((_QWORD *)&v345[22] + 1) = __PAIR64__(v225, v227);
  *(_QWORD *)&v345[23] = __PAIR64__(v220, v223);
  BYTE8(v345[23]) = v147;
  *(_QWORD *)&v345[24] = v152;
  *((_QWORD *)&v345[24] + 1) = v92;
  *(_QWORD *)&v345[25] = v93;
  *((_QWORD *)&v345[25] + 1) = __PAIR64__(v214, v217);
  *(_QWORD *)&v345[26] = __PAIR64__(v209, v211);
  *((_QWORD *)&v345[26] + 1) = __PAIR64__(v205, v207);
  *(_QWORD *)&v345[27] = __PAIR64__(v201, v202);
  *((_QWORD *)&v345[27] + 1) = __PAIR64__(LODWORD(v98), v198);
  *(_QWORD *)&v345[28] = __PAIR64__(v88, *(unsigned int *)&v469[448]);
  DWORD2(v345[28]) = v89;
  v138 = v469[460];
  BYTE12(v345[28]) = v469[460];
  *(_QWORD *)&v345[29] = *(_QWORD *)&v469[464];
  BYTE8(v345[29]) = v155;
  BYTE9(v345[29]) = v157;
  BYTE10(v345[29]) = v160;
  BYTE11(v345[29]) = v163;
  *(_QWORD *)&v345[30] = v165;
  *(_QWORD *)&v345[31] = v168;
  *(_QWORD *)&v345[32] = v170;
  BYTE9(v345[32]) = v172;
  BYTE10(v345[32]) = v175;
  BYTE11(v345[32]) = v178;
  BYTE12(v345[32]) = v180;
  v345[41] = *(_OWORD *)&v469[656];
  v345[42] = *(_OWORD *)&v469[672];
  v345[37] = *(_OWORD *)&v469[592];
  v345[38] = *(_OWORD *)&v469[608];
  v345[40] = *(_OWORD *)&v469[640];
  v345[39] = *(_OWORD *)&v469[624];
  v345[33] = *(_OWORD *)&v469[528];
  v345[34] = *(_OWORD *)&v469[544];
  v345[36] = *(_OWORD *)&v469[576];
  v345[35] = *(_OWORD *)&v469[560];
  *(_QWORD *)&v345[44] = v245;
  *((_QWORD *)&v345[44] + 1) = __PAIR64__(v241, v243);
  *(_QWORD *)&v345[45] = v144;
  v345[46] = v253;
  *(_QWORD *)&v345[47] = v238;
  BYTE8(v345[47]) = v235;
  HIDWORD(v345[47]) = v90;
  LODWORD(v345[48]) = v233;
  BYTE4(v345[48]) = v248;
  BYTE5(v345[48]) = v250._rawValue;
  outlined retain of PinchFrameFeatures((uint64_t *)v345);
  outlined consume of ObjectInteractionResultsByHand?(v94, *((uint64_t *)&v94 + 1), v95, *((uint64_t *)&v95 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v325);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v287);
  memcpy(__dst, v345, 0x306uLL);
  IntentionBreakScoreCalculator.getScore(_:)((uint64_t)__dst);
  v102 = v101;
  outlined release of PinchFrameFeatures((uint64_t *)v345);
  if (v314)
  {
    *(_QWORD *)&__dst[0] = v314;
    *((_QWORD *)&__dst[0] + 1) = v289;
    *((_QWORD *)&__dst[1] + 1) = v288;
    *(_QWORD *)&__dst[1] = v315;
    *((_QWORD *)&__dst[2] + 1) = v296;
    *(_QWORD *)&__dst[2] = v297;
    *((_QWORD *)&__dst[3] + 1) = v295;
    *(_QWORD *)&__dst[3] = v291;
    *((_QWORD *)&__dst[4] + 1) = v313;
    *(_QWORD *)&__dst[4] = v290;
    *((_QWORD *)&__dst[5] + 1) = v292;
    *(_QWORD *)&__dst[5] = v293;
    *((_QWORD *)&__dst[6] + 1) = v312;
    *(_QWORD *)&__dst[6] = v316;
    LOWORD(__dst[7]) = v294 & 0x101;
    DWORD1(__dst[7]) = HIDWORD(v294);
    LODWORD(v103) = v86;
    AverageSidePinchAngleCalculator.getAverageSidePinchAngle(_:_:_:)((uint64_t)__dst, v103, *(float *)&v469[536]);
    v88 = v104;
  }
  v340 = v130;
  v339 = v131;
  v338 = v129;
  *(_QWORD *)&__dst[8] = *(_QWORD *)&v469[128];
  LOBYTE(__dst[10]) = v136;
  BYTE12(__dst[28]) = v138;
  BYTE8(__dst[30]) = v130;
  BYTE8(__dst[31]) = v131;
  BYTE8(__dst[32]) = v129;
  *(_QWORD *)&__dst[43] = *(_QWORD *)&v469[688];
  __dst[6] = *(_OWORD *)&v469[96];
  __dst[7] = *(_OWORD *)&v469[112];
  __dst[2] = *(_OWORD *)&v469[32];
  __dst[3] = *(_OWORD *)&v469[48];
  __dst[5] = *(_OWORD *)&v469[80];
  __dst[4] = *(_OWORD *)&v469[64];
  __dst[1] = *(_OWORD *)&v469[16];
  __dst[0] = *(_OWORD *)v469;
  *(_QWORD *)&__dst[29] = v100;
  __dst[41] = *(_OWORD *)&v469[656];
  __dst[42] = *(_OWORD *)&v469[672];
  __dst[37] = *(_OWORD *)&v469[592];
  __dst[38] = *(_OWORD *)&v469[608];
  __dst[40] = *(_OWORD *)&v469[640];
  __dst[39] = *(_OWORD *)&v469[624];
  v105 = *(_QWORD *)(v254 + 64);
  *((_QWORD *)&__dst[8] + 1) = __PAIR64__(v230, v86);
  *(_QWORD *)&__dst[9] = v319;
  *((_QWORD *)&__dst[9] + 1) = v195;
  *((_QWORD *)&__dst[10] + 1) = v87;
  *(_QWORD *)&__dst[11] = v257;
  LOBYTE(__dst[12]) = v142;
  BYTE1(__dst[12]) = v193;
  *((_QWORD *)&__dst[12] + 1) = v191;
  *(_QWORD *)&__dst[13] = v188;
  *((_QWORD *)&__dst[13] + 1) = v185;
  *(_QWORD *)&__dst[14] = v183;
  *(_QWORD *)&__dst[15] = v325;
  *((_QWORD *)&__dst[15] + 1) = v323;
  *(_QWORD *)&__dst[16] = v336;
  *((_QWORD *)&__dst[16] + 1) = v334;
  *(_QWORD *)&__dst[17] = v332;
  *((_QWORD *)&__dst[17] + 1) = v259;
  *(_QWORD *)&__dst[18] = v329;
  *((_QWORD *)&__dst[18] + 1) = v327;
  *(_QWORD *)&__dst[19] = v321;
  *((_QWORD *)&__dst[19] + 1) = v305;
  *(_QWORD *)&__dst[20] = v302;
  *((_QWORD *)&__dst[20] + 1) = v300;
  *(_QWORD *)&__dst[21] = v307;
  *((_QWORD *)&__dst[21] + 1) = v311;
  *(_QWORD *)&__dst[22] = v309;
  *((_QWORD *)&__dst[22] + 1) = __PAIR64__(v225, v227);
  *(_QWORD *)&__dst[23] = __PAIR64__(v220, v223);
  BYTE8(__dst[23]) = v147;
  *(_QWORD *)&__dst[24] = v152;
  *((_QWORD *)&__dst[24] + 1) = v92;
  *(_QWORD *)&__dst[25] = v93;
  *((_QWORD *)&__dst[25] + 1) = __PAIR64__(v214, v217);
  *(_QWORD *)&__dst[26] = __PAIR64__(v209, v211);
  *((_QWORD *)&__dst[26] + 1) = __PAIR64__(v205, v207);
  *(_QWORD *)&__dst[27] = __PAIR64__(v201, v202);
  *((_QWORD *)&__dst[27] + 1) = __PAIR64__(LODWORD(v98), v198);
  *(_QWORD *)&__dst[28] = __PAIR64__(v88, v102);
  DWORD2(__dst[28]) = v89;
  BYTE8(__dst[29]) = v155;
  BYTE9(__dst[29]) = v157;
  BYTE10(__dst[29]) = v160;
  BYTE11(__dst[29]) = v163;
  *(_QWORD *)&__dst[30] = v165;
  *(_QWORD *)&__dst[31] = v168;
  *(_QWORD *)&__dst[32] = v170;
  BYTE9(__dst[32]) = v172;
  BYTE10(__dst[32]) = v175;
  BYTE11(__dst[32]) = v178;
  BYTE12(__dst[32]) = v180;
  __dst[33] = *(_OWORD *)&v469[528];
  __dst[34] = *(_OWORD *)&v469[544];
  __dst[36] = *(_OWORD *)&v469[576];
  __dst[35] = *(_OWORD *)&v469[560];
  *(_QWORD *)&__dst[44] = v245;
  *((_QWORD *)&__dst[44] + 1) = __PAIR64__(v241, v243);
  *(_QWORD *)&__dst[45] = v144;
  __dst[46] = v253;
  *(_QWORD *)&__dst[47] = v238;
  BYTE8(__dst[47]) = v235;
  HIDWORD(__dst[47]) = v90;
  LODWORD(__dst[48]) = v233;
  BYTE4(__dst[48]) = v248;
  BYTE5(__dst[48]) = v250._rawValue;
  outlined retain of PinchFrameFeatures((uint64_t *)__dst);
  outlined consume of ObjectInteractionResultsByHand?(v94, *((uint64_t *)&v94 + 1), v95, *((uint64_t *)&v95 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v325);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v287);
  memcpy(v337, __dst, 0x306uLL);
  StaticHandCalculator.update(_:)((uint64_t *)v337);
  outlined release of PinchFrameFeatures((uint64_t *)__dst);
  v106 = StaticHandCalculator.isStaticPalm()();
  swift_beginAccess();
  v107 = *(_DWORD *)(v105 + 100);
  swift_beginAccess();
  v108 = *(_DWORD *)(v105 + 96);
  *(_QWORD *)&v109 = v144;
  if (*((_QWORD *)&v504 + 1))
  {
    v337[0] = v503;
    v337[1] = v504;
    *(_QWORD *)&v337[2] = v505;
    v317 = v109;
    ObjectInteractionResultsByHand.getObjectInteractionInfo(forHand:)(v127, (uint64_t)v493);
    outlined init with take of ObjectInteractionInfo?((uint64_t)v493, (uint64_t)v337);
    v109 = v317;
    v110 = LODWORD(v337[4]) | ((unint64_t)WORD2(v337[4]) << 32);
    v111 = v128;
    v112 = v142;
    if ((v110 & 0xFF00000000) != 0x200000000)
    {
      v245 = *(_QWORD *)&v337[0];
      v250._rawValue = (void *)(v110 >> 40);
      v248 = HIDWORD(v110);
      v241 = HIDWORD(v337[0]);
      v243 = DWORD2(v337[0]);
      v109 = v337[1];
      v253 = (__n128)v337[2];
      v238 = *(_QWORD *)&v337[3];
      v235 = BYTE8(v337[3]);
      v470 = *(_WORD *)((char *)&v337[3] + 9);
      v471 = BYTE11(v337[3]);
      v233 = v337[4];
      v90 = HIDWORD(v337[3]);
    }
  }
  else
  {
    v111 = v128;
    v112 = v142;
  }
  *(_QWORD *)(v111 + 144) = v319;
  *(_QWORD *)(v111 + 152) = v195;
  *(_QWORD *)(v111 + 168) = v87;
  *(_QWORD *)(v111 + 176) = v257;
  *(_BYTE *)(v111 + 192) = v112;
  *(_BYTE *)(v111 + 193) = v193;
  *(_QWORD *)(v111 + 200) = v191;
  *(_QWORD *)(v111 + 208) = v188;
  *(_QWORD *)(v111 + 216) = v185;
  *(_QWORD *)(v111 + 224) = v183;
  *(_QWORD *)(v111 + 240) = v325;
  *(_QWORD *)(v111 + 248) = v323;
  *(_QWORD *)(v111 + 256) = v336;
  *(_QWORD *)(v111 + 264) = v334;
  *(_QWORD *)(v111 + 272) = v332;
  *(_QWORD *)(v111 + 280) = v259;
  *(_QWORD *)(v111 + 288) = v329;
  *(_QWORD *)(v111 + 296) = v327;
  *(_QWORD *)(v111 + 304) = v321;
  *(_QWORD *)(v111 + 312) = v305;
  *(_QWORD *)(v111 + 320) = v302;
  *(_QWORD *)(v111 + 328) = v300;
  *(_DWORD *)(v111 + 377) = *(_DWORD *)v480;
  *(_WORD *)(v111 + 461) = v478;
  *(_DWORD *)(v111 + 489) = *(_DWORD *)v476;
  *(_DWORD *)(v111 + 505) = *(_DWORD *)v474;
  *(_WORD *)(v111 + 761) = v470;
  v113 = v491;
  *(_OWORD *)(v111 + 96) = v490;
  *(_OWORD *)(v111 + 112) = v113;
  *(_QWORD *)(v111 + 128) = v492;
  v114 = v487;
  *(_OWORD *)(v111 + 32) = v486;
  *(_OWORD *)(v111 + 48) = v114;
  v115 = v489;
  *(_OWORD *)(v111 + 64) = v488;
  *(_OWORD *)(v111 + 80) = v115;
  v116 = v485;
  *(_OWORD *)v111 = v484;
  *(_OWORD *)(v111 + 16) = v116;
  *(_DWORD *)(v111 + 161) = *(_DWORD *)v482;
  *(_DWORD *)(v111 + 164) = *(_DWORD *)&v482[3];
  *(_DWORD *)(v111 + 194) = *(_DWORD *)&v480[7];
  *(_WORD *)(v111 + 198) = v481;
  *(_DWORD *)(v111 + 380) = *(_DWORD *)&v480[3];
  *(_BYTE *)(v111 + 463) = v479;
  *(_DWORD *)(v111 + 492) = *(_DWORD *)&v476[3];
  *(_DWORD *)(v111 + 508) = *(_DWORD *)&v474[3];
  v117 = v483;
  *(_BYTE *)(v111 + 763) = v471;
  v118 = v477;
  *(_BYTE *)(v111 + 160) = v117;
  v119 = v475;
  *(_QWORD *)(v111 + 336) = v307;
  v120 = v473;
  *(_DWORD *)(v111 + 136) = v86;
  *(_DWORD *)(v111 + 140) = v230;
  *(_QWORD *)(v111 + 344) = v311;
  *(_QWORD *)(v111 + 352) = v309;
  *(_DWORD *)(v111 + 360) = v227;
  *(_DWORD *)(v111 + 364) = v225;
  *(_DWORD *)(v111 + 368) = v223;
  *(_DWORD *)(v111 + 372) = v220;
  *(_BYTE *)(v111 + 376) = v147;
  *(_QWORD *)(v111 + 384) = v152;
  *(_QWORD *)(v111 + 392) = v92;
  *(_QWORD *)(v111 + 400) = v93;
  *(_DWORD *)(v111 + 408) = v217;
  *(_DWORD *)(v111 + 412) = v214;
  *(_DWORD *)(v111 + 416) = v211;
  *(_DWORD *)(v111 + 420) = v209;
  *(_DWORD *)(v111 + 424) = v207;
  *(_DWORD *)(v111 + 428) = v205;
  *(_DWORD *)(v111 + 432) = v202;
  *(_DWORD *)(v111 + 436) = v201;
  *(_DWORD *)(v111 + 440) = v198;
  *(float *)(v111 + 444) = v98;
  *(_DWORD *)(v111 + 448) = v102;
  *(_DWORD *)(v111 + 452) = v88;
  *(_DWORD *)(v111 + 456) = v89;
  *(_BYTE *)(v111 + 460) = v106;
  *(_DWORD *)(v111 + 464) = v107;
  *(_DWORD *)(v111 + 468) = v108;
  *(_BYTE *)(v111 + 472) = v155;
  *(_BYTE *)(v111 + 473) = v157;
  *(_BYTE *)(v111 + 474) = v160;
  *(_BYTE *)(v111 + 475) = v163;
  *(_QWORD *)(v111 + 480) = v165;
  *(_BYTE *)(v111 + 488) = v118;
  *(_QWORD *)(v111 + 496) = v168;
  *(_BYTE *)(v111 + 504) = v119;
  *(_QWORD *)(v111 + 512) = v170;
  *(_BYTE *)(v111 + 520) = v120;
  *(_BYTE *)(v111 + 521) = v172;
  *(_BYTE *)(v111 + 522) = v175;
  *(_BYTE *)(v111 + 523) = v178;
  *(_BYTE *)(v111 + 524) = v180;
  v121 = *(_OWORD *)&v472[144];
  *(_OWORD *)(v111 + 653) = *(_OWORD *)&v472[128];
  *(_OWORD *)(v111 + 669) = v121;
  *(_OWORD *)(v111 + 680) = *(_OWORD *)&v472[155];
  v122 = *(_OWORD *)&v472[80];
  *(_OWORD *)(v111 + 589) = *(_OWORD *)&v472[64];
  *(_OWORD *)(v111 + 605) = v122;
  v123 = *(_OWORD *)&v472[112];
  *(_OWORD *)(v111 + 621) = *(_OWORD *)&v472[96];
  *(_OWORD *)(v111 + 637) = v123;
  v124 = *(_OWORD *)&v472[16];
  *(_OWORD *)(v111 + 525) = *(_OWORD *)v472;
  *(_OWORD *)(v111 + 541) = v124;
  v125 = *(_OWORD *)&v472[48];
  *(_OWORD *)(v111 + 557) = *(_OWORD *)&v472[32];
  *(_OWORD *)(v111 + 573) = v125;
  *(_QWORD *)(v111 + 704) = v245;
  *(_DWORD *)(v111 + 712) = v243;
  *(_DWORD *)(v111 + 716) = v241;
  result = v253;
  *(_OWORD *)(v111 + 720) = v109;
  *(__n128 *)(v111 + 736) = v253;
  *(_QWORD *)(v111 + 752) = v238;
  *(_BYTE *)(v111 + 760) = v235;
  *(_DWORD *)(v111 + 764) = v90;
  *(_DWORD *)(v111 + 768) = v233;
  *(_BYTE *)(v111 + 772) = v248;
  *(_BYTE *)(v111 + 773) = v250._rawValue;
  return result;
}

uint64_t PinchFrameFeatureProcessor.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t PinchFrameFeatureProcessor.__deallocating_deinit()
{
  PinchFrameFeatureProcessor.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchFrameFeatureProcessor()
{
  return objc_opt_self();
}

uint64_t outlined init with take of ObjectInteractionInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized PinchFrameFeatureProcessor.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v2 = v1;
  *(_BYTE *)(v1 + 72) = 1;
  type metadata accessor for PinchUncertaintyFilters();
  swift_allocObject();
  *(_QWORD *)(v1 + 16) = PinchUncertaintyFilters.init()();
  v4 = objc_msgSend(a1, sel_PinchIntentionModelName);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  LOBYTE(v4) = objc_msgSend(a1, sel_EnableObjectInteractionState);
  v8 = objc_msgSend(a1, sel_AllowInternalModel);
  type metadata accessor for IntentionBreakScoreCalculator();
  swift_allocObject();
  *(_QWORD *)(v2 + 32) = IntentionBreakScoreCalculator.init(modelName:enable:allowInternalModel:outputIndex:)(v5, v7, (char)v4, v8, 0);
  v9 = objc_msgSend(a1, sel_PinchBreakModelName);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  LOBYTE(v9) = objc_msgSend(a1, sel_AllowInternalModel);
  swift_allocObject();
  *(_QWORD *)(v2 + 40) = IntentionBreakScoreCalculator.init(modelName:enable:allowInternalModel:outputIndex:)(v10, v12, 0, (char)v9, 1);
  LODWORD(v12) = objc_msgSend(a1, sel_EnableObjectInteractionState);
  type metadata accessor for HoverDistanceReductionCalculator();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_DWORD *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 44) = (_BYTE)v12;
  if ((_DWORD)v12)
  {
    result = specialized CircularBuffer.init(buffer:capacity:writePtr:)(MEMORY[0x24BEE4AF8], 8, 0);
    if (!v15)
    {
      __break(1u);
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
    v17 = result;
    v18 = v15;
    v19 = v16;
    swift_beginAccess();
    *(_QWORD *)(v13 + 16) = v17;
    *(_QWORD *)(v13 + 24) = v18;
    *(_QWORD *)(v13 + 32) = v19;
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v2 + 48) = v13;
  v20 = objc_msgSend(a1, sel_EnableObjectInteractionState);
  type metadata accessor for AverageSidePinchAngleCalculator();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_DWORD *)(v21 + 64) = 0;
  *(_BYTE *)(v21 + 68) = v20;
  if (!v20)
  {
LABEL_8:
    *(_QWORD *)(v2 + 56) = v21;
    type metadata accessor for StaticHandCalculator();
    swift_allocObject();
    v32 = a1;
    v33 = specialized StaticHandCalculator.init(_:)(v32);

    *(_QWORD *)(v2 + 64) = v33;
    LOBYTE(v33) = objc_msgSend(v32, sel_EnableActionBreakRangeFilter);
    objc_msgSend(v32, sel_RelaxedBreakThreshold);
    v35 = v34;
    type metadata accessor for PinchBreakRangeCalculator();
    v36 = swift_allocObject();
    *(_BYTE *)(v36 + 16) = v33;
    *(_DWORD *)(v36 + 20) = v35;
    *(_QWORD *)(v2 + 24) = v36;
    *(_BYTE *)(v2 + 72) = objc_msgSend(v32, sel_OisUseLstmInEatingModeOnly);
    return v2;
  }
  result = specialized CircularBuffer.init(buffer:capacity:writePtr:)(MEMORY[0x24BEE4AF8], 8, 0);
  if (!v22)
    goto LABEL_10;
  v24 = result;
  v25 = v22;
  v26 = v23;
  swift_beginAccess();
  *(_QWORD *)(v21 + 16) = v24;
  *(_QWORD *)(v21 + 24) = v25;
  *(_QWORD *)(v21 + 32) = v26;
  swift_bridgeObjectRelease();
  result = specialized CircularBuffer.init(buffer:capacity:writePtr:)(MEMORY[0x24BEE4AF8], 8, 0);
  if (v27)
  {
    v29 = result;
    v30 = v27;
    v31 = v28;
    swift_beginAccess();
    *(_QWORD *)(v21 + 40) = v29;
    *(_QWORD *)(v21 + 48) = v30;
    *(_QWORD *)(v21 + 56) = v31;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_11:
  __break(1u);
  return result;
}

__CVBuffer *WarperMeshCache.getWarperMesh(warperMeshData:cameraSource:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __CVBuffer *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  __CVBuffer *v16;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  if (!a1 || !*(_QWORD *)(a1 + 16))
    return 0;
  v4 = v2;
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 24);
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
  if ((v9 & 1) == 0)
  {
LABEL_9:
    swift_endAccess();
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  swift_endAccess();
  if (specialized static Array<A>.== infix(_:_:)(a1, *(_QWORD *)(v10 + 16)))
  {
    swift_retain();
    swift_bridgeObjectRelease();
    v11 = (__CVBuffer *)*(id *)(v10 + 24);
    swift_release();
    return v11;
  }
LABEL_10:
  *(_QWORD *)&v23 = v5;
  BYTE8(v23) = v6;
  v11 = WarperMeshGenerator.createWarperMesh(_:_:)(a1, (uint64_t)&v23);
  if (v11)
  {
    v12 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v4 + 32) + 136);
    v13 = swift_retain();
    atomic_store(1u, (unsigned __int8 *)v12(v13));
    swift_release();
    v23 = xmmword_23D9B32A0;
    v24 = 0;
    v25 = 0;
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)&v20 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v14._countAndFlagsBits = 0xD000000000000018;
    v14._object = (void *)0x800000023D9CFEF0;
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)();
    v22 = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005FLL, 0x800000023D9CFE60, 90, (uint64_t *)&v23, (uint64_t)&v20, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v20);
    type metadata accessor for WarperMeshCameraState();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = v5;
    *(_BYTE *)(v15 + 56) = v6;
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = v11;
    swift_beginAccess();
    v16 = v11;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v20 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v5, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v4 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v23 = 0;
    *((_QWORD *)&v23 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v18._countAndFlagsBits = 0xD000000000000021;
    v18._object = (void *)0x800000023D9CFEC0;
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)();
    v25 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v20 = xmmword_23D9B32A0;
    v21 = 0;
    v22 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v20, 0xD00000000000005FLL, 0x800000023D9CFE60, 86, (uint64_t)&v23, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v23);
  }
  return v11;
}

CVBufferRef WarperMeshCache.getWarperMeshSplit(warperMeshData:cameraSource:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  CVBufferRef v11;
  void *v12;
  __CVBuffer *v13;
  id v14;
  Swift::tuple_CVBufferRef_CVBufferRef_optional v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  void *v24;
  __CVBuffer *v25;
  __CVBuffer *v26;
  Swift::String v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v4 = v2;
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6), (v9 & 1) != 0))
  {
    v10 = *(uint64_t **)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_endAccess();
    if (specialized static Array<A>.== infix(_:_:)(a1, v10[2]))
    {
      v11 = (CVBufferRef)v10[4];
      if (v11)
      {
        v12 = (void *)v10[5];
        v13 = v11;
        v14 = v12;
        return v11;
      }
    }
  }
  else
  {
    swift_endAccess();
  }
  v15 = WarperMeshGenerator.getWarperMeshSplit(_:)((Swift::OpaquePointer)a1);
  v11 = v15.value._0;
  if (v15.value._0)
  {
    v16 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v4 + 32) + 136);
    v17 = swift_retain();
    atomic_store(1u, (unsigned __int8 *)v16(v17));
    swift_release();
    v32 = xmmword_23D9B32A0;
    v33 = 0;
    v34 = 0;
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v18._countAndFlagsBits = 0xD000000000000021;
    v18._object = (void *)0x800000023D9CFF40;
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)();
    v31 = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005FLL, 0x800000023D9CFE60, 110, (uint64_t *)&v32, (uint64_t)&v29, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29);
    swift_beginAccess();
    v19 = *(_QWORD *)(v4 + 24);
    if (*(_QWORD *)(v19 + 16) && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6), (v21 & 1) != 0))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      swift_endAccess();
      v23 = *(void **)(v22 + 32);
      v24 = *(void **)(v22 + 40);
      *(Swift::tuple_CVBufferRef_CVBufferRef_optional *)(v22 + 32) = v15;
      v25 = v15.value._0;
      v26 = v15.value._1;
      outlined consume of (CVBufferRef, CVBufferRef)?(v23, v24);
    }
    else
    {
      swift_endAccess();
    }
  }
  else
  {
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    v27._countAndFlagsBits = 0xD00000000000002ALL;
    v27._object = (void *)0x800000023D9CFF10;
    String.append(_:)(v27);
    _print_unlocked<A, B>(_:_:)();
    v34 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v29 = xmmword_23D9B32A0;
    v30 = 0;
    v31 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v29, 0xD00000000000005FLL, 0x800000023D9CFE60, 106, (uint64_t)&v32, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v32);
  }
  return v11;
}

id *WarperMeshCameraState.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();

  outlined consume of (CVBufferRef, CVBufferRef)?(v0[4], v0[5]);
  return v0;
}

uint64_t WarperMeshCameraState.__deallocating_deinit()
{
  id *v0;

  swift_bridgeObjectRelease();

  outlined consume of (CVBufferRef, CVBufferRef)?(v0[4], v0[5]);
  return swift_deallocClassInstance();
}

uint64_t WarperMeshCache.generator.getter()
{
  return swift_retain();
}

_QWORD *WarperMeshCache.__allocating_init(imageWidth:imageHeight:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_allocObject();
  v4[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedAtomic<Bool>);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  v4[4] = v5;
  type metadata accessor for WarperMeshGenerator();
  swift_allocObject();
  v4[2] = WarperMeshGenerator.init(imageWidth:imageHeight:)(a1, a2);
  return v4;
}

_QWORD *WarperMeshCache.init(imageWidth:imageHeight:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;

  v3 = v2;
  v3[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedAtomic<Bool>);
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = 0;
  v3[4] = v6;
  type metadata accessor for WarperMeshGenerator();
  swift_allocObject();
  v3[2] = WarperMeshGenerator.init(imageWidth:imageHeight:)(a1, a2);
  return v3;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  float *v18;

  v4 = type metadata accessor for Coordinate2DPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (float *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (float *)((char *)&v17 - v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
      return 1;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v17 = *(_QWORD *)(v10 + 72);
    v18 = (float *)((char *)&v17 - v11);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v14, (uint64_t)v12, type metadata accessor for Coordinate2DPB);
      outlined init with copy of TrackingUpdateDataPB(a2 + v14, (uint64_t)v7, type metadata accessor for Coordinate2DPB);
      if (*v12 != *v7)
        break;
      if (v12[1] != v7[1])
        break;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      v12 = v18;
      if ((v15 & 1) == 0)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for Coordinate2DPB);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Coordinate2DPB);
      v14 += v17;
      if (!--v13)
        return 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for Coordinate2DPB);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Coordinate2DPB);
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t *v3;
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a1 + 32);
  for (i = (_BYTE *)(a2 + 40); ; i += 16)
  {
    v6 = *v3;
    v3 += 2;
    v5 = v6;
    v7 = *((_QWORD *)i - 1);
    if (*i == 1)
      break;
    if (v5 != v7)
      return 0;
    if (!--v2)
      return 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_23D7F964C + 4 * byte_23D9B32B0[v7]))();
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for PinchModelInferenceOutputPB, specialized static Dictionary<>.== infix(_:_:));
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for PinchModelInferenceInputPB, specialized static Dictionary<>.== infix(_:_:));
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for DetectionResultPB, (uint64_t (*)(char *, char *))specialized static DetectionResultPB.== infix(_:_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  char *v19;

  v4 = type metadata accessor for SequenceFrameDataPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (uint64_t *)((char *)&v18 - v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
      return 1;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v18 = *(_QWORD *)(v10 + 72);
    v19 = (char *)&v18 - v11;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v14, (uint64_t)v12, type metadata accessor for SequenceFrameDataPB);
      outlined init with copy of TrackingUpdateDataPB(a2 + v14, (uint64_t)v7, type metadata accessor for SequenceFrameDataPB);
      if (*v12 != *v7)
        break;
      specialized static Dictionary<>.== infix(_:_:)(v12[1], v7[1]);
      if ((v15 & 1) == 0)
        break;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      v12 = v19;
      if ((v16 & 1) == 0)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for SequenceFrameDataPB);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for SequenceFrameDataPB);
      v14 += v18;
      if (!--v13)
        return 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for SequenceFrameDataPB);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for SequenceFrameDataPB);
  }
  return 0;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for TrackingModuleIOPB, (uint64_t (*)(char *, char *))static TrackingModuleIOPB.== infix(_:_:));
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for RejectedHandPB, (uint64_t (*)(char *, char *))static RejectedHandPB.== infix(_:_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for CountByCameraSource(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (uint64_t *)((char *)&v17 - v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v13 && a1 != a2)
  {
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v17 = *(_QWORD *)(v10 + 72);
    v18 = a2;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v14, (uint64_t)v12, type metadata accessor for CountByCameraSource);
      outlined init with copy of TrackingUpdateDataPB(a2 + v14, (uint64_t)v7, type metadata accessor for CountByCameraSource);
      v15 = *(_QWORD *)v7;
      if (v7[8] == 1)
        __asm { BR              X10 }
      if (*v12 != v15)
        break;
      if (v12[2] != *((_QWORD *)v7 + 2))
        break;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for CountByCameraSource);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for CountByCameraSource);
      a2 = v18;
      v14 += v17;
      if (!--v13)
        return 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for CountByCameraSource);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for CountByCameraSource);
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a1 + 32);
  for (i = (_BYTE *)(a2 + 40); ; i += 16)
  {
    v6 = *v3;
    v3 += 2;
    v5 = v6;
    v7 = *((_QWORD *)i - 1);
    if (*i == 1)
      break;
    if (v5 != v7)
      return 0;
    if (!--v2)
      return 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_23D7FA8A8 + 4 * byte_23D9B32CC[v7]))();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;

  v4 = type metadata accessor for HandDescriptorPB(0);
  v120 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v118 = (uint64_t)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandDescriptorPB?, HandDescriptorPB?));
  MEMORY[0x24BDAC7A8](v121, v11);
  v119 = (uint64_t)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BasicHandDescriptorPB(0);
  v114 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13, v14);
  v113 = (uint64_t)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?);
  MEMORY[0x24BDAC7A8](v16, v17);
  v115 = (uint64_t)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (BasicHandDescriptorPB?, BasicHandDescriptorPB?));
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for RejectedHandPB(0);
  v110 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124, v23);
  v25 = (char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v27);
  v125 = (char *)&v97 - v28;
  v29 = type metadata accessor for TrackingFAInternalFramePB(0);
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (_DWORD *)((char *)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v33, v34);
  v122 = (uint64_t)&v97 - v37;
  v38 = *(_QWORD *)(a1 + 16);
  if (v38 != *(_QWORD *)(a2 + 16))
    goto LABEL_41;
  if (!v38 || a1 == a2)
  {
    v95 = 1;
    return v95 & 1;
  }
  v100 = v35;
  v39 = 0;
  v40 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  v41 = a1 + v40;
  v111 = v19;
  v42 = a2 + v40;
  v43 = *(_QWORD *)(v36 + 72);
  v44 = &demangling cache variable for type metadata for HandDescriptorPB?;
  v112 = v4;
  v107 = v42;
  v108 = v10;
  v109 = v32;
  v99 = v38;
  v98 = v41;
  v97 = v43;
  while (1)
  {
    v103 = v39;
    v45 = v43 * v39;
    v46 = (int *)v122;
    outlined init with copy of TrackingUpdateDataPB(v41 + v43 * v39, v122, type metadata accessor for TrackingFAInternalFramePB);
    outlined init with copy of TrackingUpdateDataPB(v42 + v45, (uint64_t)v32, type metadata accessor for TrackingFAInternalFramePB);
    v47 = *v46;
    v48 = *v32;
    v49 = (uint64_t)v125;
    v50 = v114;
    if (v47 != v48)
      goto LABEL_40;
    v51 = *((_QWORD *)v109 + 1);
    v116 = *(_QWORD *)(v122 + 8);
    v52 = *(_QWORD *)(v116 + 16);
    if (v52 != *(_QWORD *)(v51 + 16))
      goto LABEL_40;
    if (v52 && v116 != v51)
      break;
LABEL_29:
    v94 = v122;
    v32 = v109;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v95 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for TrackingFAInternalFramePB);
    outlined destroy of Matrix3x3PB(v94, type metadata accessor for TrackingFAInternalFramePB);
    if ((v95 & 1) != 0)
    {
      v39 = v103 + 1;
      v4 = v112;
      v41 = v98;
      v43 = v97;
      if (v103 + 1 != v99)
        continue;
    }
    return v95 & 1;
  }
  v53 = 0;
  v54 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
  v104 = *(_QWORD *)(v110 + 72);
  v102 = v25;
  v101 = v22;
  v105 = v52;
  v106 = v51;
  while (1)
  {
    v123 = v53;
    v55 = v54;
    outlined init with copy of TrackingUpdateDataPB(v116 + v54, v49, type metadata accessor for RejectedHandPB);
    if (v123 >= *(_QWORD *)(v51 + 16))
    {
      __break(1u);
      JUMPOUT(0x23D7FB344);
    }
    v117 = v55;
    outlined init with copy of TrackingUpdateDataPB(v51 + v55, (uint64_t)v25, type metadata accessor for RejectedHandPB);
    v56 = *(int *)(v124 + 24);
    v57 = v49 + v56;
    v58 = (uint64_t)&v25[v56];
    v59 = (uint64_t)&v22[*(int *)(v111 + 48)];
    outlined init with copy of (Int32, Matrix2dPB)(v57, (uint64_t)v22, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
    outlined init with copy of (Int32, Matrix2dPB)(v58, v59, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
    v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
    if (v60((uint64_t)v22, 1, v13) == 1)
    {
      v61 = v60(v59, 1, v13);
      v62 = v125;
      if (v61 != 1)
        goto LABEL_34;
      v63 = v13;
      outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
      v64 = v121;
    }
    else
    {
      v65 = v13;
      v66 = v115;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v22, v115, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
      v63 = v65;
      if (v60(v59, 1, v65) == 1)
      {
        outlined destroy of Matrix3x3PB(v66, type metadata accessor for BasicHandDescriptorPB);
        v62 = v125;
LABEL_34:
        outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for (BasicHandDescriptorPB?, BasicHandDescriptorPB?));
        goto LABEL_39;
      }
      v67 = v113;
      outlined init with take of Matrix2dPB(v59, v113, type metadata accessor for BasicHandDescriptorPB);
      v68 = static BasicHandDescriptorPB.== infix(_:_:)(v66, v67);
      outlined destroy of Matrix3x3PB(v67, type metadata accessor for BasicHandDescriptorPB);
      outlined destroy of Matrix3x3PB(v66, type metadata accessor for BasicHandDescriptorPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v22, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
      v62 = v125;
      v64 = v121;
      v44 = &demangling cache variable for type metadata for HandDescriptorPB?;
      if ((v68 & 1) == 0)
        goto LABEL_39;
    }
    v69 = *(_QWORD *)v25;
    if (v25[8] == 1)
      __asm { BR              X10 }
    if (*v62 != v69)
      goto LABEL_39;
    v70 = v50;
    v71 = *(int *)(v124 + 28);
    v72 = (uint64_t)v62 + v71;
    v73 = (uint64_t)&v25[v71];
    v74 = v4;
    v75 = v44;
    v76 = v119;
    v77 = v119 + *(int *)(v64 + 48);
    outlined init with copy of (Int32, Matrix2dPB)(v72, v119, v75);
    outlined init with copy of (Int32, Matrix2dPB)(v73, v77, v75);
    v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
    if (v78(v76, 1, v74) != 1)
      break;
    v79 = v78(v77, 1, v74) == 1;
    v80 = v76;
    if (!v79)
      goto LABEL_36;
    v44 = &demangling cache variable for type metadata for HandDescriptorPB?;
    outlined destroy of Coordinate3DPB?(v80, &demangling cache variable for type metadata for HandDescriptorPB?);
    v50 = v70;
    v42 = v107;
LABEL_27:
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v4 = v112;
    v92 = dispatch thunk of static Equatable.== infix(_:_:)();
    v49 = (uint64_t)v125;
    v93 = v92;
    outlined destroy of Matrix3x3PB((uint64_t)v25, type metadata accessor for RejectedHandPB);
    outlined destroy of Matrix3x3PB(v49, type metadata accessor for RejectedHandPB);
    v13 = v63;
    v51 = v106;
    if ((v93 & 1) == 0)
      goto LABEL_40;
    v53 = v123 + 1;
    v54 = v117 + v104;
    if (v105 == v123 + 1)
      goto LABEL_29;
  }
  v81 = v63;
  v82 = v76;
  v83 = (uint64_t)v108;
  outlined init with copy of (Int32, Matrix2dPB)(v76, (uint64_t)v108, v75);
  if (v78(v77, 1, v74) == 1)
  {
    outlined destroy of Matrix3x3PB(v83, type metadata accessor for HandDescriptorPB);
    v80 = v76;
    v25 = v102;
LABEL_36:
    outlined destroy of Coordinate3DPB?(v80, &demangling cache variable for type metadata for (HandDescriptorPB?, HandDescriptorPB?));
    goto LABEL_38;
  }
  v44 = v75;
  v84 = v118;
  outlined init with take of Matrix2dPB(v77, v118, type metadata accessor for HandDescriptorPB);
  v85 = *(int *)(v74 + 20);
  v86 = *(_QWORD *)(v83 + v85);
  v87 = *(_QWORD *)(v84 + v85);
  if (v86 == v87
    || (swift_retain(),
        swift_retain(),
        v88 = closure #1 in static HandDescriptorPB.== infix(_:_:)(v86, v87),
        swift_release(),
        swift_release(),
        (v88 & 1) != 0))
  {
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v89 = (uint64_t)v108;
    v90 = v118;
    v91 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of Matrix3x3PB(v90, type metadata accessor for HandDescriptorPB);
    outlined destroy of Matrix3x3PB(v89, type metadata accessor for HandDescriptorPB);
    outlined destroy of Coordinate3DPB?(v82, v44);
    v63 = v81;
    v50 = v70;
    v25 = v102;
    v62 = v125;
    v22 = v101;
    v42 = v107;
    if ((v91 & 1) == 0)
      goto LABEL_39;
    goto LABEL_27;
  }
  outlined destroy of Matrix3x3PB(v118, type metadata accessor for HandDescriptorPB);
  outlined destroy of Matrix3x3PB((uint64_t)v108, type metadata accessor for HandDescriptorPB);
  outlined destroy of Coordinate3DPB?(v82, &demangling cache variable for type metadata for HandDescriptorPB?);
  v25 = v102;
LABEL_38:
  v62 = v125;
LABEL_39:
  outlined destroy of Matrix3x3PB((uint64_t)v25, type metadata accessor for RejectedHandPB);
  outlined destroy of Matrix3x3PB((uint64_t)v62, type metadata accessor for RejectedHandPB);
LABEL_40:
  outlined destroy of Matrix3x3PB((uint64_t)v109, type metadata accessor for TrackingFAInternalFramePB);
  outlined destroy of Matrix3x3PB(v122, type metadata accessor for TrackingFAInternalFramePB);
LABEL_41:
  v95 = 0;
  return v95 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for HandStatisticsLogging.CountByHandPresence(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (uint64_t *)((char *)&v18 - v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v13 && a1 != a2)
  {
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v18 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v14, (uint64_t)v12, type metadata accessor for HandStatisticsLogging.CountByHandPresence);
      outlined init with copy of TrackingUpdateDataPB(a2 + v14, (uint64_t)v7, type metadata accessor for HandStatisticsLogging.CountByHandPresence);
      v15 = *(_QWORD *)v7;
      if (v7[8] == 1)
        __asm { BR              X10 }
      if (*v12 != v15)
        break;
      if (v12[2] != *((_QWORD *)v7 + 2))
        break;
      v19 = v13;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v16 = v19;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for HandStatisticsLogging.CountByHandPresence);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandStatisticsLogging.CountByHandPresence);
      v14 += v18;
      v13 = v16 - 1;
      if (!v13)
        return 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for HandStatisticsLogging.CountByHandPresence);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandStatisticsLogging.CountByHandPresence);
    return 0;
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;

  v4 = type metadata accessor for HandStatisticsLogging.CountByRejectionReason(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (uint64_t *)((char *)&v18 - v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v13 && a1 != a2)
  {
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v18 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v14, (uint64_t)v12, type metadata accessor for HandStatisticsLogging.CountByRejectionReason);
      outlined init with copy of TrackingUpdateDataPB(a2 + v14, (uint64_t)v7, type metadata accessor for HandStatisticsLogging.CountByRejectionReason);
      v15 = *(_QWORD *)v7;
      if (v7[8] == 1)
        __asm { BR              X10 }
      if (*v12 != v15)
        break;
      if (v12[2] != *((_QWORD *)v7 + 2))
        break;
      v19 = v14;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v16 = v19;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for HandStatisticsLogging.CountByRejectionReason);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandStatisticsLogging.CountByRejectionReason);
      v14 = v16 + v18;
      if (!--v13)
        return 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for HandStatisticsLogging.CountByRejectionReason);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandStatisticsLogging.CountByRejectionReason);
    return 0;
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  double *v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for Matrix2dPB.VectorPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (char *)&v29 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v21 = 1;
      return v21 & 1;
    }
    v14 = 0;
    v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v29 = a2 + v15;
    v30 = a1 + v15;
    v16 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v30 + v16 * v14, (uint64_t)v12, type metadata accessor for Matrix2dPB.VectorPB);
      outlined init with copy of TrackingUpdateDataPB(v29 + v16 * v14, (uint64_t)v7, type metadata accessor for Matrix2dPB.VectorPB);
      v17 = *(double **)v12;
      v18 = *(double **)v7;
      v19 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      if (v19 != *(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      if (v19)
        v20 = v17 == v18;
      else
        v20 = 1;
      if (!v20)
      {
        if (v17[4] != v18[4])
          break;
        if (v19 != 1)
        {
          if (v17[5] != v18[5])
            break;
          v22 = v17 + 6;
          v23 = v18 + 6;
          v24 = v19 - 2;
          while (v24)
          {
            v25 = *v22++;
            v26 = v25;
            v27 = *v23++;
            --v24;
            if (v26 != v27)
              goto LABEL_19;
          }
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for Matrix2dPB.VectorPB);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Matrix2dPB.VectorPB);
      if ((v21 & 1) != 0 && ++v14 != v13)
        continue;
      return v21 & 1;
    }
LABEL_19:
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for Matrix2dPB.VectorPB);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Matrix2dPB.VectorPB);
  }
  v21 = 0;
  return v21 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for Matrix2dPB.FloatVectorPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (char *)&v29 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v21 = 1;
      return v21 & 1;
    }
    v14 = 0;
    v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v29 = a2 + v15;
    v30 = a1 + v15;
    v16 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v30 + v16 * v14, (uint64_t)v12, type metadata accessor for Matrix2dPB.FloatVectorPB);
      outlined init with copy of TrackingUpdateDataPB(v29 + v16 * v14, (uint64_t)v7, type metadata accessor for Matrix2dPB.FloatVectorPB);
      v17 = *(float **)v12;
      v18 = *(float **)v7;
      v19 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      if (v19 != *(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      if (v19)
        v20 = v17 == v18;
      else
        v20 = 1;
      if (!v20)
      {
        if (v17[8] != v18[8])
          break;
        if (v19 != 1)
        {
          if (v17[9] != v18[9])
            break;
          v22 = v17 + 10;
          v23 = v18 + 10;
          v24 = v19 - 2;
          while (v24)
          {
            v25 = *v22++;
            v26 = v25;
            v27 = *v23++;
            --v24;
            if (v26 != v27)
              goto LABEL_19;
          }
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for Matrix2dPB.FloatVectorPB);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Matrix2dPB.FloatVectorPB);
      if ((v21 & 1) != 0 && ++v14 != v13)
        continue;
      return v21 & 1;
    }
LABEL_19:
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for Matrix2dPB.FloatVectorPB);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Matrix2dPB.FloatVectorPB);
  }
  v21 = 0;
  return v21 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t result;
  float *v23;
  float *v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for FeatureVectorPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (uint64_t *)((char *)&v29 - v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v13 && a1 != a2)
  {
    v14 = 0;
    v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v29 = a2 + v15;
    v30 = a1 + v15;
    v16 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v30 + v16 * v14, (uint64_t)v12, type metadata accessor for FeatureVectorPB);
      outlined init with copy of TrackingUpdateDataPB(v29 + v16 * v14, (uint64_t)v7, type metadata accessor for FeatureVectorPB);
      v17 = *(_QWORD *)v7;
      if (v7[8] == 1)
        __asm { BR              X10 }
      if (*v12 != v17)
        break;
      v18 = v12[2];
      v19 = *((_QWORD *)v7 + 2);
      v20 = *(_QWORD *)(v18 + 16);
      if (v20 != *(_QWORD *)(v19 + 16))
        break;
      if (v20)
        v21 = v18 == v19;
      else
        v21 = 1;
      if (!v21)
      {
        if (*(float *)(v18 + 32) != *(float *)(v19 + 32))
          break;
        if (v20 != 1)
        {
          if (*(float *)(v18 + 36) != *(float *)(v19 + 36))
            break;
          v23 = (float *)(v18 + 40);
          v24 = (float *)(v19 + 40);
          v25 = v20 - 2;
          while (v25)
          {
            v26 = *v23++;
            v27 = v26;
            v28 = *v24++;
            --v25;
            if (v27 != v28)
              goto LABEL_22;
          }
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      ++v14;
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for FeatureVectorPB);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for FeatureVectorPB);
      result = 1;
      if (v14 == v13)
        return result;
    }
LABEL_22:
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for FeatureVectorPB);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for FeatureVectorPB);
    return 0;
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v16 = type metadata accessor for Coordinate3DPB(0);
  MEMORY[0x24BDAC7A8](v16, v4);
  v6 = (float *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7, v8);
  v11 = (float *)((char *)&v15 - v10);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 == *(_QWORD *)(a2 + 16))
  {
    if (!v12 || a1 == a2)
      return 1;
    v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v15 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v13, (uint64_t)v11, type metadata accessor for Coordinate3DPB);
      outlined init with copy of TrackingUpdateDataPB(a2 + v13, (uint64_t)v6, type metadata accessor for Coordinate3DPB);
      if (*v11 != *v6)
        break;
      if (v11[1] != v6[1])
        break;
      if (v11[2] != v6[2])
        break;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v6, type metadata accessor for Coordinate3DPB);
      outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate3DPB);
      v13 += v15;
      if (!--v12)
        return 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v6, type metadata accessor for Coordinate3DPB);
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate3DPB);
  }
  return 0;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for PinchModelFramePB, closure #1 in static PinchModelFramePB.== infix(_:_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;

  v4 = type metadata accessor for PartialHand(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (uint64_t *)((char *)&v20 - v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v13 && a1 != a2)
  {
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v20 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v14, (uint64_t)v12, type metadata accessor for PartialHand);
      outlined init with copy of TrackingUpdateDataPB(a2 + v14, (uint64_t)v7, type metadata accessor for PartialHand);
      v15 = *(_QWORD *)v7;
      if (v7[8] == 1)
        __asm { BR              X10 }
      if (*v12 != v15)
        break;
      v16 = *((_QWORD *)v7 + 2);
      if (v7[24] == 1)
        __asm { BR              X10 }
      if (v12[2] != v16)
        break;
      type metadata accessor for UnknownStorage();
      v21 = v14;
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = v21;
      if ((v17 & 1) == 0)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for PartialHand);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for PartialHand);
      v14 = v18 + v20;
      if (!--v13)
        return 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for PartialHand);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for PartialHand);
    return 0;
  }
  return 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for FeatureVectorPerFramePB, specialized static Array<A>.== infix(_:_:));
}

{
  uint64_t v2;
  uint64_t *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 32);
    v4 = (_BYTE *)(a2 + 40);
    do
    {
      v6 = *v3;
      v3 += 2;
      v5 = v6;
      v7 = *((_QWORD *)v4 - 1);
      if (*v4 == 1)
      {
        if (v7)
        {
          if (v7 == 1)
          {
            if (v5 != 1)
              return 0;
          }
          else if (v5 != 2)
          {
            return 0;
          }
        }
        else if (v5)
        {
          return 0;
        }
      }
      else if (v5 != v7)
      {
        return 0;
      }
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for DetectionSpecPB, (uint64_t (*)(char *, char *))static DetectionSpecPB.== infix(_:_:));
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for DetectionSpecItemPB, (uint64_t (*)(char *, char *))static DetectionSpecItemPB.== infix(_:_:));
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for HandGTDescriptorPB, closure #1 in static HandGTDescriptorPB.== infix(_:_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for EstimatedBoundingBoxPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (char *)&v41 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v27 = 1;
      return v27 & 1;
    }
    v14 = 0;
    v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v42 = a1 + v15;
    v16 = a2 + v15;
    v17 = *(_QWORD *)(v10 + 72);
    v41 = v17;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v42 + v17 * v14, (uint64_t)v12, type metadata accessor for EstimatedBoundingBoxPB);
      outlined init with copy of TrackingUpdateDataPB(v16 + v17 * v14, (uint64_t)v7, type metadata accessor for EstimatedBoundingBoxPB);
      v18 = *(float **)v12;
      v19 = *(float **)v7;
      v20 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      if (v20 != *(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      if (v20)
        v21 = v18 == v19;
      else
        v21 = 1;
      if (!v21)
      {
        if (v18[8] != v19[8])
          break;
        if (v20 != 1)
        {
          if (v18[9] != v19[9])
            break;
          v28 = v18 + 10;
          v29 = v19 + 10;
          v30 = v20 - 2;
          while (v30)
          {
            v31 = *v28++;
            v32 = v31;
            v33 = *v29++;
            --v30;
            if (v32 != v33)
              goto LABEL_36;
          }
        }
      }
      v22 = *((_QWORD *)v12 + 1);
      v23 = *((_QWORD *)v7 + 1);
      v24 = *(_QWORD *)(v22 + 16);
      if (v24 != *(_QWORD *)(v23 + 16))
        break;
      if (v24)
        v25 = v22 == v23;
      else
        v25 = 1;
      if (!v25)
      {
        if (*(float *)(v22 + 32) != *(float *)(v23 + 32))
          break;
        if (v24 != 1)
        {
          if (*(float *)(v22 + 36) != *(float *)(v23 + 36))
            break;
          v34 = (float *)(v22 + 40);
          v35 = (float *)(v23 + 40);
          v36 = v24 - 2;
          while (v36)
          {
            v37 = *v34++;
            v38 = v37;
            v39 = *v35++;
            --v36;
            if (v38 != v39)
              goto LABEL_36;
          }
        }
      }
      if (*((float *)v12 + 4) != *((float *)v7 + 4) || *((float *)v12 + 5) != *((float *)v7 + 5))
        break;
      v26 = *((_QWORD *)v7 + 3);
      if (v7[32] == 1)
        __asm { BR              X10 }
      if (*((_QWORD *)v12 + 3) != v26)
        break;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for EstimatedBoundingBoxPB);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for EstimatedBoundingBoxPB);
      if ((v27 & 1) != 0)
      {
        ++v14;
        v17 = v41;
        if (v14 != v13)
          continue;
      }
      return v27 & 1;
    }
LABEL_36:
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for EstimatedBoundingBoxPB);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for EstimatedBoundingBoxPB);
  }
  v27 = 0;
  return v27 & 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for JointTransformPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static JointTransformPB.== infix(_:_:));
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for TrackingInfoPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static TrackingInfoPB.== infix(_:_:));
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for HandDescriptorPB, closure #1 in static HandDescriptorPB.== infix(_:_:));
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for HandsFAResultRowPB, closure #1 in static HandsFAResultRowPB.== infix(_:_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for HandPresence(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (float *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (float *)((char *)&v22 - v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v18 = 1;
      return v18 & 1;
    }
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v22 = *(_QWORD *)(v10 + 72);
    v15 = v13 - 1;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v14, (uint64_t)v12, type metadata accessor for HandPresence);
      outlined init with copy of TrackingUpdateDataPB(a2 + v14, (uint64_t)v7, type metadata accessor for HandPresence);
      v16 = *(_QWORD *)v7;
      if (*((_BYTE *)v7 + 8) == 1)
        __asm { BR              X10 }
      if (*(_QWORD *)v12 != v16 || v12[3] != v7[3])
        break;
      v23 = v15;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v17 = v23;
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for HandPresence);
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandPresence);
      v19 = v17 != 0;
      v15 = v17 - 1;
      v20 = v19;
      if ((v18 & 1) != 0)
      {
        v14 += v22;
        if ((v20 & 1) != 0)
          continue;
      }
      return v18 & 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for HandPresence);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandPresence);
  }
  v18 = 0;
  return v18 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = type metadata accessor for Coordinate2DPB(0);
  v4 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48, v5);
  v7 = (float *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (float *)((char *)&v37 - v10);
  v12 = type metadata accessor for CropBoxPB(0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v20 = (char *)&v37 - v19;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 != *(_QWORD *)(a2 + 16))
  {
LABEL_23:
    v35 = 0;
    return v35 & 1;
  }
  if (v21 && a1 != a2)
  {
    v38 = v4;
    v22 = 0;
    v23 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v24 = a1 + v23;
    v25 = a2 + v23;
    v26 = *(_QWORD *)(v18 + 72);
    v45 = (char *)&v37 - v19;
    v46 = v15;
    v42 = v21;
    v43 = v12;
    v40 = v25;
    v41 = v24;
    v39 = v26;
    while (1)
    {
      v44 = v22;
      v27 = v26 * v22;
      outlined init with copy of TrackingUpdateDataPB(v24 + v26 * v22, (uint64_t)v20, type metadata accessor for CropBoxPB);
      outlined init with copy of TrackingUpdateDataPB(v25 + v27, (uint64_t)v15, type metadata accessor for CropBoxPB);
      v28 = *(_QWORD *)v20;
      v29 = *(_QWORD *)v15;
      v30 = *(_QWORD *)(*(_QWORD *)v20 + 16);
      if (v30 != *(_QWORD *)(*(_QWORD *)v15 + 16))
        break;
      if (v30 && v28 != v29)
      {
        v31 = 0;
        v32 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
        v47 = *(_QWORD *)(v38 + 72);
        while (1)
        {
          outlined init with copy of TrackingUpdateDataPB(v28 + v32, (uint64_t)v11, type metadata accessor for Coordinate2DPB);
          if (v31 >= *(_QWORD *)(v29 + 16))
          {
            __break(1u);
            JUMPOUT(0x23D7FD560);
          }
          outlined init with copy of TrackingUpdateDataPB(v29 + v32, (uint64_t)v7, type metadata accessor for Coordinate2DPB);
          if (*v11 != *v7 || v11[1] != v7[1])
            break;
          type metadata accessor for UnknownStorage();
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v33 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for Coordinate2DPB);
          outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate2DPB);
          if ((v33 & 1) == 0)
            goto LABEL_22;
          ++v31;
          v32 += v47;
          if (v30 == v31)
            goto LABEL_14;
        }
        outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for Coordinate2DPB);
        outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Coordinate2DPB);
        break;
      }
LABEL_14:
      v34 = *((_QWORD *)v46 + 1);
      if (v46[16] == 1)
        __asm { BR              X10 }
      if (*((_QWORD *)v45 + 1) != v34)
        break;
      v20 = v45;
      v15 = v46;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v15, type metadata accessor for CropBoxPB);
      outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for CropBoxPB);
      if ((v35 & 1) != 0)
      {
        v22 = v44 + 1;
        v24 = v41;
        v26 = v39;
        v25 = v40;
        if (v44 + 1 != v42)
          continue;
      }
      return v35 & 1;
    }
LABEL_22:
    outlined destroy of Matrix3x3PB((uint64_t)v46, type metadata accessor for CropBoxPB);
    outlined destroy of Matrix3x3PB((uint64_t)v45, type metadata accessor for CropBoxPB);
    goto LABEL_23;
  }
  v35 = 1;
  return v35 & 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for PoseImageCropPB, (uint64_t (*)(char *, char *))static PoseImageCropPB.== infix(_:_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  BOOL v36;
  uint64_t *v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = type metadata accessor for Matrix2dPB(0);
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v43, v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for LocalizerPB(0);
  MEMORY[0x24BDAC7A8](v46, v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v19);
  v22 = (char **)((char *)&v39 - v21);
  v23 = *(_QWORD *)(a1 + 16);
  if (v23 != *(_QWORD *)(a2 + 16))
    goto LABEL_29;
  if (!v23 || a1 == a2)
  {
    v34 = 1;
    return v34 & 1;
  }
  v39 = v7;
  v24 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v40 = *(_QWORD *)(v20 + 72);
  v41 = a1;
  v25 = v23 - 1;
  v42 = a2;
  while (1)
  {
    outlined init with copy of TrackingUpdateDataPB(a1 + v24, (uint64_t)v22, type metadata accessor for LocalizerPB);
    outlined init with copy of TrackingUpdateDataPB(a2 + v24, (uint64_t)v17, type metadata accessor for LocalizerPB);
    v26 = *(int *)(v46 + 24);
    v27 = (uint64_t)&v17[v26];
    v28 = (uint64_t)&v14[*(int *)(v43 + 48)];
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v22 + v26, (uint64_t)v14, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined init with copy of (Int32, Matrix2dPB)(v27, v28, &demangling cache variable for type metadata for Matrix2dPB?);
    v29 = v45;
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
    if (v30((uint64_t)v14, 1, v45) == 1)
    {
      if (v30(v28, 1, v29) != 1)
      {
        v37 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
        goto LABEL_27;
      }
      outlined destroy of Coordinate3DPB?((uint64_t)v14, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_13;
    }
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v14, (uint64_t)v11, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v30(v28, 1, v29) == 1)
      break;
    v31 = (uint64_t)v39;
    outlined init with take of Matrix2dPB(v28, (uint64_t)v39, type metadata accessor for Matrix2dPB);
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v11, *(_QWORD *)v31) & 1) == 0
      || v11[8] != *(_BYTE *)(v31 + 8)
      || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v11 + 2), *(_QWORD *)(v31 + 16)) & 1) == 0)
    {
      outlined destroy of Matrix3x3PB(v31, type metadata accessor for Matrix2dPB);
      v37 = &demangling cache variable for type metadata for Matrix2dPB?;
      goto LABEL_26;
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of Matrix3x3PB(v31, type metadata accessor for Matrix2dPB);
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Matrix2dPB);
    outlined destroy of Coordinate3DPB?((uint64_t)v14, &demangling cache variable for type metadata for Matrix2dPB?);
    if ((v32 & 1) == 0)
      goto LABEL_28;
LABEL_13:
    v33 = *(_QWORD *)v17;
    if (v17[8] == 1)
      __asm { BR              X10 }
    if (*v22 != v33)
      goto LABEL_28;
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of Matrix3x3PB((uint64_t)v17, type metadata accessor for LocalizerPB);
    outlined destroy of Matrix3x3PB((uint64_t)v22, type metadata accessor for LocalizerPB);
    v36 = v25-- != 0;
    if ((v34 & 1) != 0)
    {
      a1 = v41;
      v24 += v40;
      a2 = v42;
      if (v36)
        continue;
    }
    return v34 & 1;
  }
  v37 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
LABEL_26:
  outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for Matrix2dPB);
LABEL_27:
  outlined destroy of Coordinate3DPB?((uint64_t)v14, v37);
LABEL_28:
  outlined destroy of Matrix3x3PB((uint64_t)v17, type metadata accessor for LocalizerPB);
  outlined destroy of Matrix3x3PB((uint64_t)v22, type metadata accessor for LocalizerPB);
LABEL_29:
  v34 = 0;
  return v34 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;

  v4 = type metadata accessor for MonoHandPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 == *(_QWORD *)(a2 + 16))
  {
    if (!v12 || a1 == a2)
    {
      v28 = 1;
      return v28 & 1;
    }
    v45 = (uint64_t *)((char *)&v42 - v11);
    v13 = 0;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v15 = a1 + v14;
    v16 = a2 + v14;
    v17 = *(_QWORD *)(v10 + 72);
    v43 = v17;
    while (1)
    {
      v18 = v45;
      outlined init with copy of TrackingUpdateDataPB(v15 + v17 * v13, (uint64_t)v45, type metadata accessor for MonoHandPB);
      outlined init with copy of TrackingUpdateDataPB(v16 + v17 * v13, (uint64_t)v7, type metadata accessor for MonoHandPB);
      v19 = *(_QWORD *)v7;
      if (v7[8] == 1)
        __asm { BR              X10 }
      if (*v18 != v19)
        break;
      v20 = v18[2];
      v21 = *((_QWORD *)v7 + 2);
      v22 = *(_QWORD *)(v20 + 16);
      if (v22 != *(_QWORD *)(v21 + 16))
        break;
      if (v22)
        v23 = v20 == v21;
      else
        v23 = 1;
      if (!v23)
      {
        if (*(float *)(v20 + 32) != *(float *)(v21 + 32))
          break;
        v29 = (float *)(v20 + 36);
        v30 = (float *)(v21 + 36);
        v31 = v22 - 1;
        while (v31)
        {
          v32 = *v29++;
          v33 = v32;
          v34 = *v30++;
          --v31;
          if (v33 != v34)
            goto LABEL_32;
        }
      }
      v24 = v18[3];
      v25 = *((_QWORD *)v7 + 3);
      v26 = *(_QWORD *)(v24 + 16);
      if (v26 != *(_QWORD *)(v25 + 16))
        break;
      if (v26)
        v27 = v24 == v25;
      else
        v27 = 1;
      if (!v27)
      {
        if (*(float *)(v24 + 32) != *(float *)(v25 + 32))
          break;
        v35 = (float *)(v24 + 36);
        v36 = (float *)(v25 + 36);
        v37 = v26 - 1;
        while (v37)
        {
          v38 = *v35++;
          v39 = v38;
          v40 = *v36++;
          --v37;
          if (v39 != v40)
            goto LABEL_32;
        }
      }
      v44 = &v7[*(int *)(v4 + 28)];
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for MonoHandPB);
      outlined destroy of Matrix3x3PB((uint64_t)v18, type metadata accessor for MonoHandPB);
      if ((v28 & 1) != 0)
      {
        ++v13;
        v17 = v43;
        if (v13 != v12)
          continue;
      }
      return v28 & 1;
    }
LABEL_32:
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for MonoHandPB);
    outlined destroy of Matrix3x3PB((uint64_t)v18, type metadata accessor for MonoHandPB);
  }
  v28 = 0;
  return v28 & 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for ImageDataPB, (uint64_t (*)(char *, char *))static ImageDataPB.== infix(_:_:));
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD);

  v25 = a4;
  v24 = a3(0);
  MEMORY[0x24BDAC7A8](v24, v7);
  v9 = (uint64_t *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10, v11);
  v14 = (uint64_t *)((char *)&v22 - v13);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 != *(_QWORD *)(a2 + 16))
  {
LABEL_14:
    v18 = 0;
    return v18 & 1;
  }
  if (v15 && a1 != a2)
  {
    v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v23 = *(_QWORD *)(v12 + 72);
    v17 = v15 - 1;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v16, (uint64_t)v14, a3);
      outlined init with copy of TrackingUpdateDataPB(a2 + v16, (uint64_t)v9, a3);
      if ((v25(*v14, *v9) & 1) == 0)
        break;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v9, a3);
      outlined destroy of Matrix3x3PB((uint64_t)v14, a3);
      v20 = v17-- != 0;
      if ((v18 & 1) != 0)
      {
        v16 += v23;
        if (v20)
          continue;
      }
      return v18 & 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v9, a3);
    outlined destroy of Matrix3x3PB((uint64_t)v14, a3);
    goto LABEL_14;
  }
  v18 = 1;
  return v18 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v23;
  uint64_t v25;

  v8 = a3(0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v16 = (char *)&v25 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      v21 = 1;
    }
    else
    {
      v18 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v19 = *(_QWORD *)(v14 + 72);
      v20 = v17 - 1;
      do
      {
        outlined init with copy of TrackingUpdateDataPB(a1 + v18, (uint64_t)v16, a3);
        outlined init with copy of TrackingUpdateDataPB(a2 + v18, (uint64_t)v11, a3);
        v21 = a4(v16, v11);
        outlined destroy of Matrix3x3PB((uint64_t)v11, a3);
        outlined destroy of Matrix3x3PB((uint64_t)v16, a3);
        v23 = v20-- != 0;
        if ((v21 & 1) == 0)
          break;
        v18 += v19;
      }
      while (v23);
    }
  }
  else
  {
    v21 = 0;
  }
  return v21 & 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v3 = (int *)(a1 + 36);
  v4 = (int *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v4 = (unsigned __int8 *)(a1 + 33);
  v5 = (unsigned __int8 *)(a2 + 33);
  v6 = v2 - 1;
  do
  {
    result = v6 == 0;
    if (!v6)
      break;
    v8 = *v4++;
    v7 = v8;
    v9 = *v5++;
    --v6;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (int *)(a1 + 36);
  v6 = (int *)(a2 + 36);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  BOOL v24;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v27 = a4;
  v29 = a3(0);
  MEMORY[0x24BDAC7A8](v29, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v22 = 0;
    return v22 & 1;
  }
  if (v15 && a1 != a2)
  {
    v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = *(_QWORD *)(v12 + 72);
    v17 = v15 - 1;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v16, (uint64_t)v14, a3);
      outlined init with copy of TrackingUpdateDataPB(a2 + v16, (uint64_t)v9, a3);
      v18 = *(int *)(v29 + 20);
      v19 = *(_QWORD *)&v14[v18];
      v20 = *(_QWORD *)&v9[v18];
      if (v19 != v20)
      {
        swift_retain();
        swift_retain();
        v21 = v27(v19, v20);
        swift_release();
        swift_release();
        if ((v21 & 1) == 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB((uint64_t)v9, a3);
      outlined destroy of Matrix3x3PB((uint64_t)v14, a3);
      v24 = v17-- != 0;
      if ((v22 & 1) != 0)
      {
        v16 += v28;
        if (v24)
          continue;
      }
      return v22 & 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v9, a3);
    outlined destroy of Matrix3x3PB((uint64_t)v14, a3);
    goto LABEL_15;
  }
  v22 = 1;
  return v22 & 1;
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;

  v24 = a4;
  v25 = a3(0);
  MEMORY[0x24BDAC7A8](v25, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
      return 1;
    v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v23 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1 + v16, (uint64_t)v14, a3);
      outlined init with copy of TrackingUpdateDataPB(a2 + v16, (uint64_t)v9, a3);
      v17 = *(int *)(v25 + 20);
      v18 = *(_QWORD *)&v14[v17];
      v19 = *(_QWORD *)&v9[v17];
      if (v18 != v19)
      {
        swift_retain();
        swift_retain();
        v20 = v24(v18, v19);
        swift_release();
        swift_release();
        if ((v20 & 1) == 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v9, a3);
      outlined destroy of Matrix3x3PB((uint64_t)v14, a3);
      v16 += v23;
      if (!--v15)
        return 1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v9, a3);
    outlined destroy of Matrix3x3PB((uint64_t)v14, a3);
  }
  return 0;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t WarperMeshCache.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t WarperMeshCache.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CalibrationDataCache.CalibrationInputs(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return specialized static CalibrationDataCache.CalibrationInputs.== infix(_:_:)((uint64_t *)v5, (uint64_t *)v7) & 1;
}

uint64_t CalibrationDataCache.CalibrationCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id CalibrationDataCache.__allocating_init(config:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized CalibrationDataCache.init(config:)(a1);

  return v4;
}

id CalibrationDataCache.init(config:)(void *a1)
{
  id v2;

  v2 = specialized CalibrationDataCache.init(config:)(a1);

  return v2;
}

id CalibrationDataCache.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CalibrationDataCache.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CalibrationDataCache.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CalibrationDataCache();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, char a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  _QWORD *v6;
  _QWORD **v7;
  char v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  __n128 *v19;
  char v20;

  v7 = (_QWORD **)v6;
  v9 = a1;
  v10 = (_QWORD *)*v6;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v18 = *v7;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (__n128 *)(v18[7] + (v12 << 6));
        *v19 = a3;
        v19[1] = a4;
        v19[2] = a5;
        v19[3] = a6;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, v9 & 1, v18, a3, a4, a5, a6);
    }
    if (v17 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9 & 1);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v7;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, v9 & 1, v18, a3, a4, a5, a6);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];

        *(_QWORD *)(v17 + 8 * v10) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 104 * v10;
        v18 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(v17 + 64) = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(v17 + 80) = v18;
        *(_BYTE *)(v17 + 96) = *(_BYTE *)(a1 + 96);
        v19 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v17 = *(_OWORD *)a1;
        *(_OWORD *)(v17 + 16) = v19;
        v20 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(v17 + 32) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v17 + 48) = v20;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for HandsKitDataPB(0);
        return outlined assign with take of ImageCalibrationDataPB(a1, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, type metadata accessor for HandsKitDataPB);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt64 a2, int a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  char v7;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v5 = (_QWORD **)v4;
  v7 = a3;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 80 * v12;
        v20 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(v19 + 32) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v19 + 48) = v20;
        *(_QWORD *)(v19 + 62) = *(_QWORD *)(a1 + 62);
        v21 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v19 = *(_OWORD *)a1;
        *(_OWORD *)(v19 + 16) = v21;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v7 & 1, a1, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, v7 & 1);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v7 & 1, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  char v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v9 = a3 & 1;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v9);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v5 = v4;
  v9 = a3 & 1;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(v18 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v9);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  int64_t result;
  char v18;
  int64_t v19;
  _QWORD *v20;
  __n128 *v21;
  char v22;

  v8 = (_QWORD **)v7;
  v11 = (_QWORD *)*v7;
  v12 = a2 & 1;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1);
  v15 = v11[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v11[3];
    if (v19 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v8;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (__n128 *)(v20[7] + (v14 << 6));
        *v21 = a4;
        v21[1] = a5;
        v21[2] = a6;
        v21[3] = a7;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a1, v12, v20, a4, a5, a6, a7);
    }
    if (v19 >= result && (a3 & 1) == 0)
    {
      result = (int64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1, v12);
    if ((v18 & 1) == (v22 & 1))
    {
      v14 = result;
      v20 = *v8;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a1, v12, v20, a4, a5, a6, a7);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  type metadata accessor for ARVinoJointIndexes(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for Logger();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v10 = v7;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);
        result = swift_release();
        *(_QWORD *)(v24 + 8 * v17) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(v18 + 56);

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  char v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t result;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v9 = a3 & 1;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of PoseImageCrop((uint64_t)a1, v18[7] + 176 * v12);
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v9);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of PoseImageCrop((uint64_t)a1, v18[7] + 176 * v12);
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  char v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t result;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v9 = a3 & 1;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of ImageData((uint64_t)a1, v18[7] + 192 * v12);
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v9);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of ImageData((uint64_t)a1, v18[7] + 192 * v12);
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3, float a4)
{
  _QWORD *v4;
  _QWORD **v5;
  char v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int64_t result;
  char v16;
  int64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v9 = a2 & 1;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(float *)(v18[7] + 4 * v12) = a4;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v9, v18, a4);
    }
    if (v17 >= result && (a3 & 1) == 0)
    {
      result = (int64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1, v9);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v9, v18, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + (v10 << 6));
        v18 = a1[1];
        *v17 = *a1;
        v17[1] = v18;
        v17[2] = a1[2];
        *(_OWORD *)((char *)v17 + 41) = *(_OWORD *)((char *)a1 + 41);
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  type metadata accessor for ARVinoJointIndexes(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(void *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  void *result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return (void *)outlined assign with take of HandsKitData((uint64_t)a1, v16[7] + 560 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return (void *)outlined assign with take of HandsKitData((uint64_t)a1, v16[7] + 560 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  char v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
    goto LABEL_9;
  if (v19 >= result && (a5 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_13:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = result;
LABEL_9:
  v21 = a2 & 1;
  v22 = *v6;
  if ((v18 & 1) != 0)
  {
    v23 = v22[7] + 16 * v14;
    *(_QWORD *)v23 = a1;
    *(_BYTE *)(v23 + 8) = v21 != 0;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, v21, v22);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, __n128 a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 *v17;
  char v18;

  v5 = (_QWORD **)v4;
  v8 = (_QWORD *)*v4;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v16 = *v5;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (__n128 *)(v16[7] + 32 * v10);
        *v17 = a3;
        v17[1] = a4;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3, a4);
    }
    if (v15 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v14 & 1) == (v18 & 1))
    {
      v10 = result;
      v16 = *v5;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;

  v9 = v6;
  v13 = *v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v9;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = *(_QWORD *)(v21 + 56);
        result = swift_release();
        *(_QWORD *)(v22 + 8 * v15) = a1;
        return result;
      }
      return a6(v15, a2, a1, v21);
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v25 & 1))
    {
      v15 = v24;
      v21 = *v9;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      return a6(v15, a2, a1, v21);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;

  v9 = v6;
  v13 = *v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v9;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = *(_QWORD *)(v21 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v22 + 8 * v15) = a1;
        return result;
      }
      return a6(v15, a2, a1, v21);
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v25 & 1))
    {
      v15 = v24;
      v21 = *v9;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      return a6(v15, a2, a1, v21);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for ImageCalibrationDataPB(0);
        return outlined assign with take of ImageCalibrationDataPB(a1, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, type metadata accessor for ImageCalibrationDataPB);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v10 = v7;
  v14 = *v7;
  v15 = a2 & 0xFFFFFFFF00000001;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 0xFFFFFFFF00000001, a3);
  v18 = *(_QWORD *)(v14 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v14 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);

        *(_QWORD *)(v24 + 8 * v17) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v15, a3);
    if ((v21 & 1) == (v26 & 1))
    {
      v17 = v25;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, v15, a3, a1, v23);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, __n128 a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  result = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        *(__n128 *)(v15[7] + 16 * v9) = a3;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v9, a1, v15, a3);
    }
    if (v14 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v13 & 1) == (v16 & 1))
    {
      v9 = result;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v9, a1, v15, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];

        *(_QWORD *)(v17 + 8 * v10) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of TrackingUpdateData((uint64_t)a1, v16[7] + 96 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of TrackingUpdateData((uint64_t)a1, v16[7] + 96 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

BOOL specialized static CalibrationDataCache.CalibrationIntrinsics.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint32x4_t v2;
  uint64_t v4;
  __int128 v5;
  int32x2_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  int32x2_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  float v14;
  float v15;
  int32x2_t v16;
  __int128 v17;
  __int128 v18;

  v2 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 16), *(float32x4_t *)(a2 + 16)), (int8x16_t)vceqq_f32(*(float32x4_t *)a1, *(float32x4_t *)a2)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a2 + 32)));
  v2.i32[3] = v2.i32[2];
  if ((vminvq_u32(v2) & 0x80000000) == 0)
    return 0;
  v4 = 0;
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(int32x2_t *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(unsigned __int8 *)(a1 + 80);
  v9 = *(_OWORD *)(a2 + 48);
  v10 = *(int32x2_t *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(unsigned __int8 *)(a2 + 80);
  while (1)
  {
    v17 = v5;
    v14 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v18 = v9;
    v15 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v13 = v14 == v15;
    if (v4 == 3)
      break;
    while (1)
    {
      ++v4;
      if (v13)
        break;
      if (v4 == 3)
        return 0;
      v13 = 0;
    }
  }
  if (v14 != v15)
    return 0;
  v16 = vceq_s32(v6, v10);
  if ((v16.i8[0] & 1) == 0 || (v16.i8[4] & 1) == 0)
    return 0;
  if (v8)
    v7 = v7 != 0;
  if (v12)
  {
    if (v11)
      return v7 == 1;
    if (v7)
      return 0;
  }
  else if (v7 != v11)
  {
    return 0;
  }
  return 1;
}

BOOL specialized static CalibrationDataCache.CameraCalibrationInputs.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[10];
  char v66;
  _OWORD v67[5];
  char v68;
  char v69;

  v3 = *(_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v10 = *(_BYTE *)(a1 + 160);
  v11 = *(_QWORD *)(a1 + 168);
  v12 = *((_BYTE *)a2 + 81);
  v13 = a2[12];
  v14 = a2[13];
  v16 = a2[14];
  v15 = a2[15];
  v18 = a2[16];
  v17 = a2[17];
  v20 = a2[18];
  v19 = a2[19];
  v21 = *((unsigned __int8 *)a2 + 160);
  v22 = a2[21];
  if ((*(_BYTE *)(a1 + 81) & 1) != 0)
  {
    if ((*((_BYTE *)a2 + 81) & 1) == 0)
      return 0;
  }
  else
  {
    v61 = *((unsigned __int8 *)a2 + 160);
    v62 = *(_BYTE *)(a1 + 160);
    v63 = *(_QWORD *)(a1 + 112);
    v64 = *(_QWORD *)(a1 + 104);
    v23 = *a2;
    v24 = a2[1];
    v25 = a2[2];
    v26 = a2[3];
    v27 = a2[4];
    v28 = a2[5];
    v30 = a2[6];
    v29 = a2[7];
    v31 = a2[8];
    v32 = a2[9];
    v33 = *((_BYTE *)a2 + 80);
    v34 = *(_BYTE *)(a1 + 80);
    v35 = *(_OWORD *)(a1 + 16);
    v67[0] = *(_OWORD *)a1;
    v67[1] = v35;
    v36 = *(_OWORD *)(a1 + 48);
    v67[2] = *(_OWORD *)(a1 + 32);
    v67[3] = v36;
    v67[4] = *(_OWORD *)(a1 + 64);
    v68 = v34;
    v69 = 0;
    if ((v12 & 1) != 0)
      return 0;
    v65[0] = v23;
    v65[1] = v24;
    v65[2] = v25;
    v65[3] = v26;
    v65[4] = v27;
    v65[5] = v28;
    v65[6] = v30;
    v65[7] = v29;
    v65[8] = v31;
    v65[9] = v32;
    v66 = v33 & 1;
    v60 = v7;
    v57 = v6;
    v58 = v20;
    v37 = v11;
    v38 = v22;
    v59 = v13;
    v39 = v9;
    v40 = v19;
    v56 = v14;
    v41 = v15;
    v42 = v8;
    v43 = v16;
    v44 = v18;
    v45 = v17;
    v46 = specialized static CalibrationDataCache.CalibrationIntrinsics.== infix(_:_:)((uint64_t)v67, (uint64_t)v65);
    v17 = v45;
    v18 = v44;
    v16 = v43;
    v8 = v42;
    v15 = v41;
    v19 = v40;
    v9 = v39;
    v13 = v59;
    v7 = v60;
    v22 = v38;
    v14 = v56;
    v6 = v57;
    v11 = v37;
    v20 = v58;
    v4 = v63;
    v2 = v64;
    v21 = v61;
    v10 = v62;
    if (!v46)
      return 0;
  }
  if ((v10 & 1) != 0)
  {
    if (!v21)
      return 0;
  }
  else
  {
    if ((v21 & 1) != 0)
      return 0;
    v47.i64[0] = v3;
    v47.i64[1] = v2;
    v48.i64[0] = v4;
    v48.i64[1] = v5;
    v49.i64[0] = v7;
    v49.i64[1] = v6;
    v50.i64[0] = v9;
    v50.i64[1] = v8;
    v51.i64[0] = v13;
    v51.i64[1] = v14;
    v52.i64[0] = v16;
    v52.i64[1] = v15;
    v53.i64[0] = v18;
    v53.i64[1] = v17;
    v54.i64[0] = v20;
    v54.i64[1] = v19;
    if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v48, v52), (int8x16_t)vceqq_f32(v47, v51)), vandq_s8((int8x16_t)vceqq_f32(v49, v53), (int8x16_t)vceqq_f32(v50, v54)))) & 0x80000000) == 0)return 0;
  }
  if (v11)
    return v22 && specialized static Array<A>.== infix(_:_:)(v11, v22);
  return !v22;
}

uint64_t specialized static CalibrationDataCache.CalibrationInputs.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  float32x4_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int8 v41;
  uint64_t v42;
  uint32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x2_t v47;
  uint64_t v48;
  __int8 v49;
  uint64_t v50;
  __int128 v51;
  BOOL v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  int *v60;
  int *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int32x2_t v66;
  int64_t v67;
  __int128 v68;
  __int128 v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  __int128 v80;

  if ((a1[4] & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 32))
      return 0;
  }
  else if ((a2[4] & 1) != 0 || (static CMTime.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  v4 = *a1;
  v5 = *a2;
  if (*(_QWORD *)(v4 + 16) != *(_QWORD *)(v5 + 16))
    return 0;
  v6 = v4 + 64;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v67 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
LABEL_10:
  if (v9)
  {
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v11 << 6);
    goto LABEL_26;
  }
  v14 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_74;
  }
  if (v14 >= v67)
    goto LABEL_72;
  v15 = *(_QWORD *)(v6 + 8 * v14);
  ++v11;
  if (v15)
    goto LABEL_25;
  v11 = v14 + 1;
  if (v14 + 1 >= v67)
    goto LABEL_72;
  v15 = *(_QWORD *)(v6 + 8 * v11);
  if (v15)
    goto LABEL_25;
  v11 = v14 + 2;
  if (v14 + 2 >= v67)
    goto LABEL_72;
  v15 = *(_QWORD *)(v6 + 8 * v11);
  if (v15)
  {
LABEL_25:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_26:
    v17 = *(_QWORD *)(v4 + 48) + 16 * v13;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v4 + 56) + 176 * v13;
    v21 = *(float32x4_t *)(v20 + 32);
    v22 = *(float32x4_t *)v20;
    v71 = *(float32x4_t *)(v20 + 16);
    v72 = v21;
    v23 = *(float32x4_t *)(v20 + 96);
    v25 = *(_OWORD *)(v20 + 48);
    v24 = *(_OWORD *)(v20 + 64);
    v75 = *(_OWORD *)(v20 + 80);
    v76 = v23;
    v73 = v25;
    v74 = v24;
    v26 = *(_OWORD *)(v20 + 160);
    v28 = *(float32x4_t *)(v20 + 112);
    v27 = *(float32x4_t *)(v20 + 128);
    v79 = *(float32x4_t *)(v20 + 144);
    v80 = v26;
    v77 = v28;
    v78 = v27;
    v70 = v22;
    v29 = *(_QWORD *)(v5 + 16);
    outlined retain of CalibrationDataCache.CameraCalibrationInputs((uint64_t)&v70);
    if (!v29 || (v30 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v31 & 1) == 0))
    {
      swift_release();
      outlined release of CalibrationDataCache.CameraCalibrationInputs((uint64_t)&v70);
      return 0;
    }
    v32 = (float32x4_t *)(*(_QWORD *)(v5 + 56) + 176 * v30);
    v34 = v32[6].i64[0];
    v33 = v32[6].i64[1];
    v36 = v32[7].i64[0];
    v35 = v32[7].i64[1];
    v38 = v32[8].i64[0];
    v37 = v32[8].i64[1];
    v40 = v32[9].i64[0];
    v39 = v32[9].i64[1];
    v41 = v32[10].i8[0];
    v42 = v32[10].i64[1];
    if ((BYTE1(v75) & 1) != 0)
    {
      if ((v32[5].i8[1] & 1) == 0)
        goto LABEL_68;
      goto LABEL_30;
    }
    if ((v32[5].i8[1] & 1) != 0)
      goto LABEL_68;
    v43 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v71, v32[1]), (int8x16_t)vceqq_f32(v72, v32[2])), (int8x16_t)vceqq_f32(v70, *v32));
    v43.i32[3] = v43.i32[2];
    if ((vminvq_u32(v43) & 0x80000000) == 0)
      goto LABEL_68;
    v44 = 0;
    v45 = v32[3].i64[0];
    v46 = v32[3].i64[1];
    v47 = *(int32x2_t *)v32[4].f32;
    v48 = v32[4].i64[1];
    v49 = v32[5].i8[0];
    v50 = *((_QWORD *)&v74 + 1);
    *(_QWORD *)&v51 = v45;
    *((_QWORD *)&v51 + 1) = v46;
    v52 = 1;
    while (1)
    {
      if (v52)
      {
        v68 = v73;
        v53 = *(float *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFF3 | (4 * (v44 & 3)));
        v69 = v51;
        v54 = *(float *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFF3 | (4 * (v44 & 3)));
        v52 = v53 == v54;
        if (v44 == 3)
        {
          if (v53 != v54)
            goto LABEL_68;
          v66 = vceq_s32(*(int32x2_t *)&v74, v47);
          if ((v66.i8[0] & 1) == 0 || (v66.i8[4] & 1) == 0)
            goto LABEL_68;
          if ((v75 & 1) != 0)
            v50 = *((_QWORD *)&v74 + 1) != 0;
          if ((v49 & 1) != 0)
          {
            if (!v48)
            {
              if (v50)
                goto LABEL_68;
              goto LABEL_30;
            }
            if (v50 == 1)
              goto LABEL_30;
            goto LABEL_68;
          }
          if (v50 != v48)
            goto LABEL_68;
LABEL_30:
          if ((v80 & 1) == 0)
          {
            if ((v41 & 1) == 0)
            {
              v55.i64[0] = v34;
              v55.i64[1] = v33;
              v56.i64[0] = v36;
              v56.i64[1] = v35;
              v57.i64[0] = v38;
              v57.i64[1] = v37;
              v58.i64[0] = v40;
              v58.i64[1] = v39;
              if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v78, v57), (int8x16_t)vceqq_f32(v79, v58)), vandq_s8((int8x16_t)vceqq_f32(v77, v56), (int8x16_t)vceqq_f32(v76, v55)))) & 0x80000000) != 0)goto LABEL_43;
            }
LABEL_68:
            outlined release of CalibrationDataCache.CameraCalibrationInputs((uint64_t)&v70);
LABEL_69:
            swift_release();
            return 0;
          }
          if ((v41 & 1) == 0)
            goto LABEL_68;
LABEL_43:
          if (!*((_QWORD *)&v80 + 1))
          {
            result = outlined release of CalibrationDataCache.CameraCalibrationInputs((uint64_t)&v70);
            if (!v42)
              goto LABEL_10;
            goto LABEL_69;
          }
          if (!v42)
            goto LABEL_68;
          v59 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 16);
          if (v59 != *(_QWORD *)(v42 + 16))
            goto LABEL_68;
          if (v59 && *((_QWORD *)&v80 + 1) != v42)
          {
            if (*(_DWORD *)(*((_QWORD *)&v80 + 1) + 32) != *(_DWORD *)(v42 + 32))
              goto LABEL_68;
            v60 = (int *)(*((_QWORD *)&v80 + 1) + 36);
            v61 = (int *)(v42 + 36);
            v62 = v59 - 1;
            while (v62)
            {
              v64 = *v60++;
              v63 = v64;
              v65 = *v61++;
              --v62;
              if (v63 != v65)
                goto LABEL_68;
            }
          }
          result = outlined release of CalibrationDataCache.CameraCalibrationInputs((uint64_t)&v70);
          goto LABEL_10;
        }
      }
      else
      {
        if (v44 == 3)
          goto LABEL_68;
        v52 = 0;
      }
      ++v44;
    }
  }
  v16 = v14 + 3;
  if (v16 >= v67)
  {
LABEL_72:
    swift_release();
    return 1;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v67)
      goto LABEL_72;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for WarperMeshCameraState()
{
  return objc_opt_self();
}

void outlined consume of (CVBufferRef, CVBufferRef)?(void *a1, void *a2)
{
  if (a1)
  {

  }
}

id specialized CalibrationDataCache.init(config:)(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  objc_class *v24;
  unint64_t v26;
  uint64_t v27;
  id v28;
  objc_super v29;
  uint64_t v30;

  v28 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v2, v4);
  v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v5, v6);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = OBJC_IVAR____TtC5Hands20CalibrationDataCache__asyncQ;
  v26 = type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x24BEE5758], v7);
  v12 = v1;
  static DispatchQoS.unspecified.getter();
  v30 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v3, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)&v1[v27] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v13 = OBJC_IVAR____TtC5Hands20CalibrationDataCache__calibrationCache;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedAtomic<CalibrationDataCache.CalibrationCache?>);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)&v12[v13] = v14;
  v15 = v28;
  if (objc_msgSend(v28, sel_Enable640Mode))
    v16 = 640;
  else
    v16 = 1280;
  *(_QWORD *)&v12[OBJC_IVAR____TtC5Hands20CalibrationDataCache__config] = v15;
  v17 = v15;
  type metadata accessor for WarperMeshCache();
  v18 = (_QWORD *)swift_allocObject();
  v19 = v17;
  v20 = MEMORY[0x24BEE4AF8];
  v18[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedAtomic<Bool>);
  v21 = swift_allocObject();
  *(_BYTE *)(v21 + 16) = 0;
  v18[4] = v21;
  type metadata accessor for WarperMeshGenerator();
  swift_allocObject();
  v18[2] = WarperMeshGenerator.init(imageWidth:imageHeight:)(v16, v16);
  *(_QWORD *)&v12[OBJC_IVAR____TtC5Hands20CalibrationDataCache__warperMeshCache] = v18;
  v22 = specialized Dictionary.init(dictionaryLiteral:)(v20);
  v23 = &v12[OBJC_IVAR____TtC5Hands20CalibrationDataCache__incomingInputs];
  *(_QWORD *)v23 = v22;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = 0;
  v23[32] = 1;

  v24 = (objc_class *)type metadata accessor for CalibrationDataCache();
  v29.receiver = v12;
  v29.super_class = v24;
  return objc_msgSendSuper2(&v29, sel_init);
}

uint64_t type metadata accessor for CalibrationDataCache()
{
  return objc_opt_self();
}

uint64_t method lookup function for WarperMeshCameraState()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for WarperMeshCache()
{
  return objc_opt_self();
}

uint64_t method lookup function for WarperMeshCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WarperMeshCache.__allocating_init(imageWidth:imageHeight:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for CalibrationDataCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CalibrationDataCache.__allocating_init(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t type metadata accessor for CalibrationDataCache.CalibrationCache()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for CalibrationDataCache.CalibrationInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CalibrationDataCache.CalibrationInputs(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CalibrationDataCache.CalibrationInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalibrationDataCache.CalibrationInputs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalibrationDataCache.CalibrationInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalibrationDataCache.CalibrationInputs()
{
  return &type metadata for CalibrationDataCache.CalibrationInputs;
}

uint64_t associated type witness table accessor for AtomicValue.AtomicRepresentation : AtomicStorage in CalibrationDataCache.CalibrationCache()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type AtomicReferenceStorage<CalibrationDataCache.CalibrationCache> and conformance AtomicReferenceStorage<A>, &demangling cache variable for type metadata for AtomicReferenceStorage<CalibrationDataCache.CalibrationCache>, MEMORY[0x24BE09578]);
}

uint64_t associated type witness table accessor for AtomicOptionalWrappable.AtomicOptionalRepresentation : AtomicStorage in CalibrationDataCache.CalibrationCache()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type AtomicOptionalReferenceStorage<CalibrationDataCache.CalibrationCache> and conformance AtomicOptionalReferenceStorage<A>, &demangling cache variable for type metadata for AtomicOptionalReferenceStorage<CalibrationDataCache.CalibrationCache>, MEMORY[0x24BE09588]);
}

uint64_t instantiation function for generic protocol witness table for CalibrationDataCache.CalibrationCache(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationDataCache.CalibrationCache and conformance CalibrationDataCache.CalibrationCache, (uint64_t (*)(uint64_t))type metadata accessor for CalibrationDataCache.CalibrationCache, (uint64_t)&protocol conformance descriptor for CalibrationDataCache.CalibrationCache);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CalibrationDataCache.CalibrationCache and conformance CalibrationDataCache.CalibrationCache, (uint64_t (*)(uint64_t))type metadata accessor for CalibrationDataCache.CalibrationCache, (uint64_t)&protocol conformance descriptor for CalibrationDataCache.CalibrationCache);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined retain of CalibrationDataCache.CameraCalibrationInputs(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of CalibrationDataCache.CameraCalibrationInputs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined assign with take of TrackingUpdateData(uint64_t a1, uint64_t a2)
{
  assignWithTake for TrackingUpdateData(a2, a1);
  return a2;
}

uint64_t outlined assign with take of PoseImageCrop(uint64_t a1, uint64_t a2)
{
  assignWithTake for PoseImageCrop(a2, a1);
  return a2;
}

uint64_t outlined assign with take of ImageData(uint64_t a1, uint64_t a2)
{
  assignWithTake for ImageData(a2, a1);
  return a2;
}

uint64_t outlined assign with take of HandsKitData(uint64_t a1, uint64_t a2)
{
  assignWithTake for HandsKitData(a2, a1);
  return a2;
}

uint64_t outlined assign with take of ImageCalibrationDataPB(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t destroy for CalibrationDataCache.CameraCalibrationInputs()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CalibrationDataCache.CameraCalibrationInputs(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CalibrationDataCache.CameraCalibrationInputs(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  v8 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy176_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for CalibrationDataCache.CameraCalibrationInputs(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalibrationDataCache.CameraCalibrationInputs(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 168);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalibrationDataCache.CameraCalibrationInputs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 176) = 0;
    if (a2)
      *(_QWORD *)(result + 168) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalibrationDataCache.CameraCalibrationInputs()
{
  return &type metadata for CalibrationDataCache.CameraCalibrationInputs;
}

__n128 __swift_memcpy81_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CalibrationDataCache.CalibrationIntrinsics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CalibrationDataCache.CalibrationIntrinsics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 81) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CalibrationDataCache.CalibrationIntrinsics()
{
  return &type metadata for CalibrationDataCache.CalibrationIntrinsics;
}

uint64_t getEnumTagSinglePayload for PinchInfo(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PinchInfo(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 49) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PinchInfo()
{
  return &type metadata for PinchInfo;
}

unint64_t lazy protocol witness table accessor for type PinchInfoPB and conformance PinchInfoPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB;
  if (!lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB)
  {
    v1 = type metadata accessor for PinchInfoPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchInfoPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB);
  }
  return result;
}

uint64_t PinchInfo.toProtoBuf()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = type metadata accessor for PinchStatusPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v19 = v1[3];
  v20 = v8;
  v11 = *((_BYTE *)v1 + 32);
  v21 = v1[5];
  v12 = *((_BYTE *)v1 + 48);
  *a1 = 0;
  v13 = type metadata accessor for PinchInfoPB(0);
  UnknownStorage.init()();
  v14 = (uint64_t)a1 + *(int *)(v13 + 24);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  result = v15(v14, 1, 1, v3);
  if ((v11 & 1) == 0)
  {
    UnknownStorage.init()();
    *v7 = v20;
    v7[1] = v9;
    v17 = v19;
    v7[2] = v10;
    v7[3] = v17;
    outlined destroy of PinchStatusPB?(v14);
    outlined init with take of PinchStatusPB((uint64_t)v7, v14);
    result = v15(v14, 0, 1, v3);
  }
  if ((v12 & 1) == 0)
    *a1 = v21;
  return result;
}

double PinchInfo.init(protoBuf:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PinchStatusPB(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PinchInfoPB(0);
  outlined init with copy of PinchStatusPB?((uint64_t)a1 + *(int *)(v13 + 24), (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    UnknownStorage.init()();
    outlined destroy of PinchStatusPB?((uint64_t)v7);
  }
  else
  {
    outlined init with take of PinchStatusPB((uint64_t)v7, (uint64_t)v12);
  }
  v18 = *(_OWORD *)v12;
  v14 = *((_QWORD *)v12 + 2);
  v15 = *((_QWORD *)v12 + 3);
  outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for PinchStatusPB);
  v16 = *a1;
  outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for PinchInfoPB);
  result = *(double *)&v18;
  *(_OWORD *)a2 = v18;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v15;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v16;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

uint64_t outlined destroy of PinchStatusPB?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for OperationalEnvelopeSignals(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OperationalEnvelopeSignals(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OperationalEnvelopeSignals(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for OperationalEnvelopeSignals()
{
  return &type metadata for OperationalEnvelopeSignals;
}

unint64_t lazy protocol witness table accessor for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB;
  if (!lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB)
  {
    v1 = type metadata accessor for OperationalEnvelopeSignalsPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OperationalEnvelopeSignalsPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSfG_s5Int32V_Sfts5NeverOTg5010_s5Hands12ef5OSfs5g34VSfIgnydd_AC3key_Sf5valuetAE_Sfts5H110OIegnrzr_TR063_s5Hands26OperationalEnvelopeSignalsV10toProtoBufAA0bcD2PBVyFs5d9V_SftAA12bc2O_T5XEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v28 = *(_QWORD *)(a1 + 16);
  v29 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v29;
  v5 = specialized Dictionary.startIndex.getter(a1);
  v6 = v28;
  v7 = 0;
  v8 = a1 + 64;
  v9 = *(_BYTE *)(a1 + 32);
  v10 = a1 + 80;
  result = 0x7FFFFFFFLL;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << v9)
  {
    v13 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v4)
      goto LABEL_27;
    v14 = *(_QWORD *)(a1 + 48) + 16 * v5;
    v15 = *(_QWORD *)v14;
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v5);
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    {
      if (v15 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_28;
      if (v15 > 0x7FFFFFFF)
        goto LABEL_29;
    }
    v18 = *(_QWORD *)(v29 + 16);
    v17 = *(_QWORD *)(v29 + 24);
    if (v18 >= v17 >> 1)
    {
      v26 = v8;
      v27 = v4;
      v25 = v10;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      result = 0x7FFFFFFFLL;
      v10 = v25;
      v8 = v26;
      v4 = v27;
      v6 = v28;
    }
    *(_QWORD *)(v29 + 16) = v18 + 1;
    v19 = v29 + 8 * v18;
    *(_DWORD *)(v19 + 32) = v15;
    *(_DWORD *)(v19 + 36) = v16;
    v9 = *(_BYTE *)(a1 + 32);
    v12 = 1 << v9;
    if (v5 >= 1 << v9)
      goto LABEL_30;
    v20 = *(_QWORD *)(v8 + 8 * v13);
    if ((v20 & (1 << v5)) == 0)
      goto LABEL_31;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v4)
      goto LABEL_32;
    v21 = v20 & (-2 << (v5 & 0x3F));
    if (v21)
    {
      v12 = __clz(__rbit64(v21)) | v5 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = v13 + 1;
      v23 = (v12 + 63) >> 6;
      if (v13 + 1 < v23)
      {
        v24 = *(_QWORD *)(v8 + 8 * v22);
        if (v24)
        {
LABEL_23:
          v12 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v13)
          {
            v24 = *(_QWORD *)(v10 + 8 * v13++);
            if (v24)
            {
              v22 = v13 + 1;
              goto LABEL_23;
            }
          }
        }
      }
    }
    ++v7;
    v5 = v12;
    if (v7 == v6)
      return v2;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t OperationalEnvelopeSignals.toProtoBuf()@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for OperationalEnvelopeSignalsPB(0);
  UnknownStorage.init()();
  *(float *)a1 = a2;
  v4 = swift_bridgeObjectRetain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSfG_s5Int32V_Sfts5NeverOTg5010_s5Hands12ef5OSfs5g34VSfIgnydd_AC3key_Sf5valuetAE_Sfts5H110OIegnrzr_TR063_s5Hands26OperationalEnvelopeSignalsV10toProtoBufAA0bcD2PBVyFs5d9V_SftAA12bc2O_T5XEfU_Tf3nnnpf_nTf1cn_n(v4);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
    v6 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v6 = MEMORY[0x24BEE4B00];
  }
  v9 = v6;
  v7 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, 1, &v9);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = v9;
  return result;
}

Swift::Bool __swiftcall OperationalEnvelopeSignals.almostEqual(to:withThreshold:)(Hands::OperationalEnvelopeSignals to, Swift::Double withThreshold)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  _QWORD *rawValue;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  float v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v4 = v2;
  rawValue = to.visibilityScores._rawValue;
  v7 = vabds_f32(v3, to.handToHmdDistance) < withThreshold
    || (LODWORD(v3) & 0x7FFFFFFF) == 0x7F800000
    && (~LODWORD(to.handToHmdDistance) & 0x7F800000) == 0
    && (LODWORD(to.handToHmdDistance) & 0x7FFFFF) == 0;
  v8 = v2 + 64;
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  LOBYTE(v13) = swift_bridgeObjectRetain();
  v14 = 0;
  while (1)
  {
    while (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      if (rawValue[2])
      {
LABEL_10:
        v15 = *(float *)(*(_QWORD *)(v4 + 56) + 4 * v18);
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v18), *(_BYTE *)(*(_QWORD *)(v4 + 48) + 16 * v18 + 8));
        if ((v16 & 1) != 0)
          v7 &= vabds_f32(*(float *)(rawValue[7] + 4 * v13), v15) < withThreshold;
      }
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v12)
      goto LABEL_30;
    v20 = *(_QWORD *)(v8 + 8 * v19);
    ++v14;
    if (!v20)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_30;
      v20 = *(_QWORD *)(v8 + 8 * v14);
      if (!v20)
      {
        v14 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_30;
        v20 = *(_QWORD *)(v8 + 8 * v14);
        if (!v20)
          break;
      }
    }
LABEL_28:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v14 << 6);
    if (rawValue[2])
      goto LABEL_10;
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_30:
    swift_release();
    LOBYTE(v13) = v7 & 1;
    return v13;
  }
  v20 = *(_QWORD *)(v8 + 8 * v21);
  if (v20)
  {
    v14 = v21;
    goto LABEL_28;
  }
  while (1)
  {
    v14 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v14 >= v12)
      goto LABEL_30;
    v20 = *(_QWORD *)(v8 + 8 * v14);
    ++v21;
    if (v20)
      goto LABEL_28;
  }
LABEL_32:
  __break(1u);
  return v13;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance OperationalEnvelopeSignals@<X0>(uint64_t a1@<X8>)
{
  float *v1;

  return OperationalEnvelopeSignals.toProtoBuf()(a1, *v1);
}

void specialized EnumeratedSequence.Iterator.next()(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes));
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](v3, v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v11 = *(_QWORD *)(*v1 + 16);
  if (v9 == v11)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(a1, 1, 1, v3, v6);
    return;
  }
  if (v9 >= v11)
  {
    __break(1u);
  }
  else
  {
    v12 = type metadata accessor for DerivedHandAttributes(0);
    v13 = v10
        + ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v9;
    v1[1] = v9 + 1;
    v14 = (uint64_t)&v8[*(int *)(v3 + 48)];
    v15 = v1[2];
    outlined init with copy of TrackingUpdateDataPB(v13, v14, type metadata accessor for DerivedHandAttributes);
    if (!__OFADD__(v15, 1))
    {
      v1[2] = v15 + 1;
      v16 = (uint64_t)a1 + *(int *)(v3 + 48);
      *a1 = v15;
      outlined init with take of DerivedHandAttributes(v14, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
      return;
    }
  }
  __break(1u);
}

void specialized ValueStatistics.update(with:takeAbsolute:)(char a1, double a2)
{
  uint64_t v2;
  double v3;
  int v4;
  BOOL v5;
  int v6;
  double v7;
  double v8;

  if (*(_BYTE *)(v2 + 56) == 1)
  {
    *(double *)(v2 + 48) = a2;
    *(_BYTE *)(v2 + 56) = 0;
  }
  v3 = fabs(a2);
  if ((a1 & 1) == 0)
    v3 = a2;
  *(double *)v2 = v3 + *(double *)v2;
  v4 = *(_DWORD *)(v2 + 8);
  v5 = __CFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v2 + 8) = v6;
    v7 = *(double *)(v2 + 16);
    if (*(_BYTE *)(v2 + 24))
      v7 = v3;
    if (v7 >= v3)
      v7 = v3;
    *(double *)(v2 + 16) = v7;
    *(_BYTE *)(v2 + 24) = 0;
    v8 = *(double *)(v2 + 32);
    if (*(_BYTE *)(v2 + 40))
      v8 = v3;
    if (v3 <= v8)
      v3 = v8;
    *(double *)(v2 + 32) = v3;
    *(_BYTE *)(v2 + 40) = 0;
    *(double *)(v2 + 64) = a2;
    *(_BYTE *)(v2 + 72) = 0;
    *(CFTimeInterval *)(v2 + 88) = CACurrentMediaTime();
    *(_BYTE *)(v2 + 96) = 0;
  }
}

void specialized ValueStatistics.update(with:takeAbsolute:)(char a1, float a2)
{
  uint64_t v2;
  float v3;
  int v4;
  BOOL v5;
  int v6;
  float v7;
  float v8;

  if (*(_BYTE *)(v2 + 28) == 1)
  {
    *(float *)(v2 + 24) = a2;
    *(_BYTE *)(v2 + 28) = 0;
  }
  v3 = fabsf(a2);
  if ((a1 & 1) == 0)
    v3 = a2;
  *(float *)v2 = v3 + *(float *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  v5 = __CFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v2 + 4) = v6;
    v7 = *(float *)(v2 + 8);
    if (*(_BYTE *)(v2 + 12))
      v7 = v3;
    if (v7 >= v3)
      v7 = v3;
    *(float *)(v2 + 8) = v7;
    *(_BYTE *)(v2 + 12) = 0;
    v8 = *(float *)(v2 + 16);
    if (*(_BYTE *)(v2 + 20))
      v8 = v3;
    if (v3 <= v8)
      v3 = v8;
    *(float *)(v2 + 16) = v3;
    *(_BYTE *)(v2 + 20) = 0;
    *(float *)(v2 + 32) = a2;
    *(_BYTE *)(v2 + 36) = 0;
    *(CFTimeInterval *)(v2 + 48) = CACurrentMediaTime();
    *(_BYTE *)(v2 + 56) = 0;
  }
}

uint64_t PinchStatisticsStructs.PinchAttribute.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, const void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTimeInterval v20;
  CFTimeInterval v21;
  CFTimeInterval v22;
  CFTimeInterval v23;
  CFTimeInterval v24;
  CFTimeInterval v25;
  CFTimeInterval v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int16 v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  CFTimeInterval v40;
  unint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  CFTimeInterval v44;
  char v45;
  uint64_t v46;
  CFTimeInterval v47;
  char v48;
  uint64_t v49;
  CFTimeInterval v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  uint64_t v74;
  char v75;
  char v76;
  int *v77;
  uint64_t v78;
  float v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t result;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  CFTimeInterval v131;
  int v132;
  CFTimeInterval v133;
  int v134;
  CFTimeInterval v135;
  int v136;
  CFTimeInterval v137;
  int v138;
  CFTimeInterval v139;
  int v140;
  CFTimeInterval v141;
  CFTimeInterval v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _QWORD v150[16];
  unint64_t v151;
  int *v152;
  char *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  __int16 v160;
  char v161;
  char v162;
  __int16 v163;
  char v164;
  char v165;
  __int16 v166;
  char v167;
  char v168;
  __int16 v169;
  char v170;
  char v171;
  _BYTE v172[7];
  char v173;
  char v174;
  _BYTE v175[7];
  char v176;
  char v177;
  char v178;
  int v179;
  __int16 v180;
  char v181;
  __int16 v182;
  char v183;
  char v184;
  __int16 v185;
  char v186;
  char v187;
  __int16 v188;
  char v189;
  char v190;
  __int16 v191;
  char v192;
  char v193;
  _BYTE v194[7];
  char v195;
  __int16 v196;
  char v197;
  char v198;
  __int16 v199;
  char v200;
  char v201;
  __int16 v202;
  char v203;
  char v204;
  __int16 v205;
  char v206;
  char v207;
  _BYTE v208[7];
  char v209;
  __int16 v210;
  char v211;
  char v212;
  __int16 v213;
  char v214;
  char v215;
  __int16 v216;
  char v217;
  char v218;
  __int16 v219;
  char v220;
  char v221;
  _BYTE v222[7];
  char v223;
  __int16 v224;
  char v225;
  char v226;
  __int16 v227;
  char v228;
  char v229;
  __int16 v230;
  char v231;
  char v232;
  __int16 v233;
  char v234;
  char v235;
  _BYTE v236[7];
  char v237;
  __int16 v238;
  char v239;
  char v240;
  __int16 v241;
  char v242;
  char v243;
  __int16 v244;
  char v245;
  char v246;
  __int16 v247;
  char v248;
  char v249;
  __int16 v250;
  char v251;
  char v252;
  __int16 v253;
  char v254;
  char v255;
  __int16 v256;
  char v257;
  char v258;
  __int16 v259;
  char v260;
  char v261;
  __int16 v262;
  char v263;
  char v264;
  _BYTE v265[7];
  char v266;
  __int16 v267;
  char v268;
  char v269;
  __int16 v270;
  char v271;
  char v272;
  __int16 v273;
  char v274;
  char v275;
  __int16 v276;
  char v277;
  char v278;
  unint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  char v283;
  int v284;
  char v285;
  int v286;
  char v287;
  int v288;
  char v289;
  CFTimeInterval v290;
  uint64_t v291;
  char v292;
  int v293;
  uint64_t v294;
  char v295;
  int v296;
  char v297;
  int v298;
  char v299;
  int v300;
  char v301;
  CFTimeInterval v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  char v308;
  int v309;
  char v310;
  int v311;
  char v312;
  int v313;
  char v314;
  CFTimeInterval v315;
  uint64_t v316;
  char v317;
  int v318;
  uint64_t v319;
  char v320;
  int v321;
  char v322;
  int v323;
  char v324;
  int v325;
  char v326;
  CFTimeInterval v327;
  uint64_t v328;
  char v329;
  int v330;
  uint64_t v331;
  char v332;
  int v333;
  char v334;
  int v335;
  char v336;
  int v337;
  char v338;
  CFTimeInterval v339;
  uint64_t v340;
  char v341;
  int v342;
  uint64_t v343;
  char v344;
  int v345;
  char v346;
  int v347;
  char v348;
  int v349;
  char v350;
  CFTimeInterval v351;
  uint64_t v352;
  char v353;
  int v354;
  uint64_t v355;
  char v356;
  int v357;
  char v358;
  int v359;
  char v360;
  int v361;
  char v362;
  CFTimeInterval v363;
  uint64_t v364;
  char v365;
  char v366;
  uint64_t v367;
  char v368;
  __int16 v369;
  char v370;
  uint64_t v371;
  char v372;
  __int16 v373;
  char v374;
  __int128 v375;
  uint64_t v376;
  char v377;
  uint64_t v378;
  char v379;
  char v380;
  uint64_t v381;
  int v382;
  char v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  char v387;
  int v388;
  char v389;
  int v390;
  char v391;
  int v392;
  char v393;
  int v394;
  char v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  __int16 v409;
  int v410;
  __int128 v411;
  int v412;
  char v413;
  int v414;
  char v415;
  int v416;
  char v417;
  CFTimeInterval v418;
  uint64_t v419;
  char v420;
  __int128 v421;
  int v422;
  char v423;
  int v424;
  char v425;
  int v426;
  char v427;
  CFTimeInterval v428;
  uint64_t v429;
  char v430;
  __int128 v431;
  int v432;
  char v433;
  int v434;
  char v435;
  int v436;
  char v437;
  CFTimeInterval v438;
  uint64_t v439;
  char v440;
  __int128 v441;
  int v442;
  char v443;
  int v444;
  char v445;
  int v446;
  char v447;
  CFTimeInterval v448;
  uint64_t v449;
  char v450;
  _QWORD v451[72];

  v157 = a4;
  v158 = a3;
  v156 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes??);
  MEMORY[0x24BDAC7A8](v9, v10);
  v154 = (_QWORD *)((char *)v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v152 = *(int **)(v12 - 8);
  v153 = (char *)v12;
  MEMORY[0x24BDAC7A8](v12, v13);
  v155 = (uint64_t)v150 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v451, a5, 0x228uLL);
  __asm { FMOV            V0.2S, #-1.0 }
  v305 = _D0;
  v381 = 0;
  v382 = 0;
  v383 = 1;
  v384 = 0u;
  v385 = 0u;
  v386 = 0u;
  v387 = 1;
  v388 = 0;
  v389 = 1;
  v390 = 0;
  v391 = 1;
  v392 = 0;
  v393 = 1;
  v394 = 0;
  v395 = 1;
  v279 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v280 = *(_DWORD *)a1;
  v20 = CACurrentMediaTime();
  v281 = 0;
  v282 = 0;
  v283 = 1;
  v284 = 0;
  v285 = 1;
  v286 = 0;
  v287 = 1;
  v288 = 0;
  v289 = 1;
  v290 = v20;
  v291 = 0;
  v292 = 1;
  v21 = CACurrentMediaTime();
  v293 = 0;
  v294 = 0;
  v295 = 1;
  v296 = 0;
  v297 = 1;
  v298 = 0;
  v299 = 1;
  v300 = 0;
  v301 = 1;
  v302 = v21;
  v303 = 0;
  v304 = 1;
  v22 = CACurrentMediaTime();
  v330 = 0;
  v331 = 0;
  v332 = 1;
  v333 = 0;
  v334 = 1;
  v335 = 0;
  v336 = 1;
  v337 = 0;
  v338 = 1;
  v339 = v22;
  v340 = 0;
  v341 = 1;
  v23 = CACurrentMediaTime();
  v342 = 0;
  v343 = 0;
  v344 = 1;
  v345 = 0;
  v346 = 1;
  v347 = 0;
  v348 = 1;
  v349 = 0;
  v350 = 1;
  v351 = v23;
  v352 = 0;
  v353 = 1;
  v24 = CACurrentMediaTime();
  v354 = 0;
  v355 = 0;
  v356 = 1;
  v357 = 0;
  v358 = 1;
  v359 = 0;
  v360 = 1;
  v361 = 0;
  v362 = 1;
  v363 = v24;
  v364 = 0;
  v365 = 1;
  v25 = CACurrentMediaTime();
  v306 = 0;
  v307 = 0;
  v308 = 1;
  v309 = 0;
  v310 = 1;
  v311 = 0;
  v312 = 1;
  v313 = 0;
  v314 = 1;
  v315 = v25;
  v316 = 0;
  v317 = 1;
  v26 = CACurrentMediaTime();
  v318 = 0;
  v319 = 0;
  v320 = 1;
  v321 = 0;
  v322 = 1;
  v323 = 0;
  v324 = 1;
  v325 = 0;
  v326 = 1;
  v327 = v26;
  v328 = 0;
  v329 = 1;
  v27 = (int *)type metadata accessor for DerivedHandAttributes(0);
  v366 = *(_BYTE *)(a1 + v27[8]);
  v28 = a1 + v27[9];
  v29 = *(_QWORD *)v28;
  v30 = *(_BYTE *)(v28 + 8);
  v31 = *(_BYTE *)(v28 + 11);
  v32 = *(_WORD *)(v28 + 9);
  v33 = *(_QWORD *)(v28 + 16);
  v34 = *(_BYTE *)(v28 + 24);
  v35 = *(_BYTE *)(v28 + 27);
  LOWORD(v28) = *(_WORD *)(v28 + 25);
  v367 = v29;
  v368 = v30;
  v369 = v32;
  v370 = v31;
  v371 = v33;
  v372 = v34;
  v373 = v28;
  v374 = v35;
  v36 = a1 + v27[10];
  v37 = *(_QWORD *)(v36 + 16);
  v38 = *(_BYTE *)(v36 + 24);
  v375 = *(_OWORD *)v36;
  v376 = v37;
  v377 = v38;
  LOBYTE(v37) = *(_BYTE *)(a1 + 248);
  v39 = *(_BYTE *)(a1 + 249);
  v378 = *(_QWORD *)(a1 + 240);
  v379 = v37;
  v380 = v39;
  v40 = CACurrentMediaTime();
  LODWORD(v441) = 0;
  *(_QWORD *)((char *)&v441 + 4) = 0;
  BYTE12(v441) = 1;
  v442 = 0;
  v443 = 1;
  v444 = 0;
  v445 = 1;
  v446 = 0;
  v447 = 1;
  v448 = v40;
  v449 = 0;
  v450 = 1;
  v41 = v279;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v396 = v41;
  v279 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v441, 4uLL, isUniquelyReferenced_nonNull_native);
  v43 = v396;
  swift_bridgeObjectRelease();
  v44 = CACurrentMediaTime();
  LODWORD(v431) = 0;
  *(_QWORD *)((char *)&v431 + 4) = 0;
  BYTE12(v431) = 1;
  v432 = 0;
  v433 = 1;
  v434 = 0;
  v435 = 1;
  v436 = 0;
  v437 = 1;
  v438 = v44;
  v439 = 0;
  v440 = 1;
  v45 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v396 = v43;
  v279 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v431, 3uLL, v45);
  v46 = v396;
  swift_bridgeObjectRelease();
  v47 = CACurrentMediaTime();
  LODWORD(v421) = 0;
  *(_QWORD *)((char *)&v421 + 4) = 0;
  BYTE12(v421) = 1;
  v422 = 0;
  v423 = 1;
  v424 = 0;
  v425 = 1;
  v426 = 0;
  v427 = 1;
  v428 = v47;
  v429 = 0;
  v430 = 1;
  v48 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v396 = v46;
  v279 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v421, 9uLL, v48);
  v49 = v396;
  swift_bridgeObjectRelease();
  v50 = CACurrentMediaTime();
  LODWORD(v411) = 0;
  *(_QWORD *)((char *)&v411 + 4) = 0;
  BYTE12(v411) = 1;
  v412 = 0;
  v413 = 1;
  v414 = 0;
  v415 = 1;
  v416 = 0;
  v417 = 1;
  v418 = v50;
  v419 = 0;
  v420 = 1;
  v51 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v396 = v49;
  v279 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v411, 8uLL, v51);
  v279 = v396;
  swift_bridgeObjectRelease();
  v52 = v156;
  v53 = v157;
  v54 = v158;
  PinchStatisticsStructs.PinchAttribute.estimateReadyToPinchHoverDistanceAndTimeOffset(_:_:)(a1, v156, v158, v157);
  v55 = (uint64_t)v154;
  specialized CircularBuffer.last.getter(v52, v54, v53, (uint64_t)v154);
  if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v152 + 6))(v55, 1, v153) == 1)
  {
    v56 = v155;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*((_QWORD *)v27 - 1) + 56))(v155, 1, 1, v27);
    outlined destroy of Coordinate3DPB?(v55, &demangling cache variable for type metadata for DerivedHandAttributes??);
  }
  else
  {
    v56 = v155;
    outlined init with take of ImageData?(v55, v155, &demangling cache variable for type metadata for DerivedHandAttributes?);
  }
  v57 = *(_QWORD *)(a1 + 16);
  v153 = &v380;
  v154 = &v381;
  if (v57)
  {
    v152 = v27;
    v59 = *(_QWORD *)(a1 + 24);
    v58 = *(_QWORD *)(a1 + 32);
    v60 = *(_QWORD *)(a1 + 40);
    v61 = *(_QWORD *)(a1 + 48);
    v62 = *(_QWORD *)(a1 + 56);
    v63 = *(_QWORD *)(a1 + 64);
    v65 = *(_QWORD *)(a1 + 72);
    v64 = *(_QWORD *)(a1 + 80);
    v66 = *(_QWORD *)(a1 + 88);
    v67 = *(_QWORD *)(a1 + 96);
    v68 = *(_QWORD *)(a1 + 104);
    v69 = *(_QWORD *)(a1 + 112);
    v70 = *(_QWORD *)(a1 + 120);
    v71 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)&v396 = v57;
    *((_QWORD *)&v396 + 1) = v59;
    v398 = v60;
    v397 = v58;
    v400 = v62;
    v399 = v61;
    v402 = v65;
    v401 = v63;
    v404 = v66;
    v403 = v64;
    v406 = v68;
    v405 = v67;
    v408 = v70;
    v407 = v69;
    v409 = v71 & 0x101;
    v410 = HIDWORD(v71);
    if ((*(_BYTE *)(a1 + 236) & 1) != 0 || (*(_BYTE *)(a1 + 280) & 1) != 0)
    {
      v56 = v155;
    }
    else
    {
      v150[1] = &v281;
      v150[3] = &v330;
      v150[4] = &v342;
      v150[2] = &v354;
      v150[5] = &v306;
      v150[6] = &v318;
      v72 = *(float *)(a1 + 232);
      v73 = *(float *)(a1 + 276);
      v74 = *(_QWORD *)(a1 + 240);
      v75 = *(_BYTE *)(a1 + 248);
      v150[14] = v65;
      v150[15] = v64;
      v76 = *(_BYTE *)(a1 + 249);
      v378 = v74;
      v379 = v75;
      v380 = v76;
      v150[7] = v68;
      v150[8] = v66;
      v151 = v279;
      v150[9] = v58;
      v150[10] = v60;
      v150[11] = v61;
      v150[12] = v62;
      v150[13] = v63;
      swift_bridgeObjectRetain();
      outlined copy of HandPose?(v57);
      v150[0] = v59;
      specialized Sequence.forEach(_:)(v151, (uint64_t)&v279, (uint64_t)&v396);
      outlined consume of HandPose?(v57);
      swift_bridgeObjectRelease();
      v77 = v152;
      specialized ValueStatistics.update(with:takeAbsolute:)(0, *(float *)(a1 + v152[7]));
      v78 = a1 + v77[6];
      if ((*(_BYTE *)(v78 + 4) & 1) == 0)
        specialized ValueStatistics.update(with:takeAbsolute:)(0, *(float *)v78);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, *(float *)(a1 + 272));
      specialized ValueStatistics.update(with:takeAbsolute:)(0, v73);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, v72);
      v56 = v155;
      v79 = closure #2 in PinchStatisticsStructs.PinchAttribute.updateWithHand(_:_:_:)(v155, &v396);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, v79);
      v80 = closure #3 in PinchStatisticsStructs.PinchAttribute.updateWithHand(_:_:_:)(v56, &v396);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, v80);
    }
  }
  outlined destroy of Coordinate3DPB?(v56, &demangling cache variable for type metadata for DerivedHandAttributes?);
  PinchStatisticsStructs.PinchAttribute.setUpTravelDistBefore(_:_:)((_QWORD *)a1, v156, v158, v157);
  swift_bridgeObjectRelease();
  v81 = v451[25];
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(v451);
  v82 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith19V14prewittCurrents5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v81);
  swift_bridgeObjectRelease();
  v83 = specialized Sequence<>.max()(v82);
  v85 = v84;
  swift_bridgeObjectRelease();
  if ((v85 & 1) != 0)
    v86 = -1;
  else
    v86 = v83;
  v87 = swift_bridgeObjectRetain();
  v88 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith22V17prewittPulseWidths5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v87);
  swift_bridgeObjectRelease();
  v89 = specialized Sequence<>.max()(v88);
  v91 = v90;
  swift_bridgeObjectRelease();
  outlined release of HandsKitData(v451);
  if ((v91 & 1) != 0)
    v92 = -1;
  else
    v92 = v89;
  if (!*(_QWORD *)(v81 + 16))
  {
    v98 = -1;
    v95 = -1;
    goto LABEL_30;
  }
  v93 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
  if ((v94 & 1) == 0)
  {
    v95 = -1;
    if (*(_QWORD *)(v81 + 16))
      goto LABEL_21;
LABEL_26:
    v98 = -1;
    goto LABEL_30;
  }
  v95 = *(_QWORD *)(*(_QWORD *)(v81 + 56) + 192 * v93 + 160);
  if (!*(_QWORD *)(v81 + 16))
    goto LABEL_26;
LABEL_21:
  v96 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
  if ((v97 & 1) != 0)
  {
    v98 = *(_QWORD *)(*(_QWORD *)(v81 + 56) + 192 * v96 + 168);
    if (!*(_QWORD *)(v81 + 16))
      goto LABEL_30;
  }
  else
  {
    v98 = -1;
    if (!*(_QWORD *)(v81 + 16))
      goto LABEL_30;
  }
  v99 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
  if ((v100 & 1) != 0)
  {
    v101 = *(_QWORD *)(*(_QWORD *)(v81 + 56) + 192 * v99 + 176);
    goto LABEL_31;
  }
LABEL_30:
  v101 = -1;
LABEL_31:
  result = (uint64_t)outlined release of HandsKitData(v451);
  *(_QWORD *)&v384 = v86;
  *((_QWORD *)&v384 + 1) = v92;
  *(_QWORD *)&v385 = 0;
  *((_QWORD *)&v385 + 1) = v95;
  *(_QWORD *)&v386 = v98;
  *((_QWORD *)&v386 + 1) = v101;
  v103 = (uint64_t)v154;
  *((_BYTE *)v154 + 68) = 0;
  if (!v57)
  {
    v388 = 0;
    LOBYTE(v113) = 1;
    *(_BYTE *)(v103 + 76) = 1;
    v390 = 0;
    *(_BYTE *)(v103 + 84) = 1;
    v392 = 0;
    *(_BYTE *)(v103 + 92) = 1;
    result = outlined destroy of Matrix3x3PB(a1, type metadata accessor for DerivedHandAttributes);
    v112 = 0;
    goto LABEL_38;
  }
  if (*(_QWORD *)(v57 + 16) < 0xAuLL)
  {
    __break(1u);
    goto LABEL_40;
  }
  v104 = swift_bridgeObjectRetain();
  v105 = specialized Sequence<>.min()(v104);
  result = swift_bridgeObjectRelease();
  v388 = v105;
  *(_BYTE *)(v103 + 76) = BYTE4(v105) & 1;
  if (*(_QWORD *)(v57 + 16) < 9uLL)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v106 = swift_bridgeObjectRetain();
  v107 = specialized Sequence<>.max()(v106);
  result = swift_bridgeObjectRelease();
  v390 = v107;
  *(_BYTE *)(v103 + 84) = BYTE4(v107) & 1;
  if (*(_QWORD *)(v57 + 16) < 5uLL)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v108 = swift_bridgeObjectRetain();
  v109 = specialized Sequence<>.min()(v108);
  result = swift_bridgeObjectRelease();
  v392 = v109;
  *(_BYTE *)(v103 + 92) = BYTE4(v109) & 1;
  if (*(_QWORD *)(v57 + 16) >= 4uLL)
  {
    v110 = swift_bridgeObjectRetain();
    v111 = specialized Sequence<>.max()(v110);
    v112 = v111;
    v113 = HIDWORD(v111) & 1;
    outlined destroy of Matrix3x3PB(a1, type metadata accessor for DerivedHandAttributes);
    result = swift_bridgeObjectRelease();
LABEL_38:
    *(_DWORD *)(a6 + 276) = *(_DWORD *)&v222[3];
    *(_DWORD *)(a6 + 273) = *(_DWORD *)v222;
    *(_WORD *)(a6 + 293) = v219;
    *(_WORD *)(a6 + 301) = v216;
    *(_WORD *)(a6 + 309) = v213;
    *(_WORD *)(a6 + 317) = v210;
    *(_DWORD *)(a6 + 340) = *(_DWORD *)&v208[3];
    *(_DWORD *)(a6 + 337) = *(_DWORD *)v208;
    *(_WORD *)(a6 + 357) = v205;
    *(_WORD *)(a6 + 365) = v202;
    *(_WORD *)(a6 + 373) = v199;
    *(_WORD *)(a6 + 381) = v196;
    *(_DWORD *)(a6 + 404) = *(_DWORD *)&v194[3];
    *(_DWORD *)(a6 + 401) = *(_DWORD *)v194;
    *(_WORD *)(a6 + 421) = v191;
    *(_WORD *)(a6 + 429) = v188;
    *(_WORD *)(a6 + 437) = v185;
    *(_WORD *)(a6 + 445) = v182;
    *(_DWORD *)(a6 + 466) = v179;
    *(_DWORD *)(a6 + 532) = *(_DWORD *)&v175[3];
    *(_DWORD *)(a6 + 529) = *(_DWORD *)v175;
    *(_DWORD *)(a6 + 564) = *(_DWORD *)&v172[3];
    *(_DWORD *)(a6 + 561) = *(_DWORD *)v172;
    *(_WORD *)(a6 + 617) = v169;
    *(_WORD *)(a6 + 625) = v166;
    *(_WORD *)(a6 + 633) = v163;
    v278 = v283;
    v275 = v285;
    v272 = v287;
    v269 = v289;
    v266 = v292;
    v264 = v295;
    v261 = v297;
    v258 = v299;
    v255 = v301;
    v252 = v304;
    v249 = v308;
    v246 = v310;
    v243 = v312;
    v240 = v314;
    v237 = v317;
    v235 = v320;
    v232 = v322;
    v229 = v324;
    v226 = v326;
    v223 = v329;
    v221 = v332;
    v218 = v334;
    v215 = v336;
    v212 = v338;
    v209 = v341;
    v207 = v344;
    v204 = v346;
    v201 = v348;
    v198 = v350;
    v195 = v353;
    v193 = v356;
    v190 = v358;
    v187 = v360;
    v184 = v362;
    v181 = v365;
    v178 = v368;
    v177 = v372;
    v176 = v377;
    v174 = *v153;
    v173 = *(_BYTE *)(v103 + 12);
    v171 = *(_BYTE *)(v103 + 68);
    v168 = *(_BYTE *)(v103 + 76);
    v165 = *(_BYTE *)(v103 + 84);
    v162 = *(_BYTE *)(v103 + 92);
    v159 = v113;
    *(_QWORD *)a6 = v279;
    *(_BYTE *)(a6 + 28) = v278;
    *(_WORD *)(a6 + 29) = v276;
    *(_BYTE *)(a6 + 31) = v277;
    *(_DWORD *)(a6 + 32) = v284;
    *(_BYTE *)(a6 + 36) = v275;
    *(_BYTE *)(a6 + 39) = v274;
    *(_WORD *)(a6 + 37) = v273;
    *(_DWORD *)(a6 + 40) = v286;
    *(_BYTE *)(a6 + 44) = v272;
    *(_BYTE *)(a6 + 47) = v271;
    *(_WORD *)(a6 + 45) = v270;
    *(_DWORD *)(a6 + 48) = v288;
    *(_BYTE *)(a6 + 52) = v269;
    *(_BYTE *)(a6 + 55) = v268;
    *(_WORD *)(a6 + 53) = v267;
    *(_QWORD *)(a6 + 64) = v291;
    *(_BYTE *)(a6 + 72) = v266;
    *(_DWORD *)(a6 + 76) = *(_DWORD *)&v265[3];
    *(_DWORD *)(a6 + 73) = *(_DWORD *)v265;
    *(_BYTE *)(a6 + 92) = v264;
    *(_BYTE *)(a6 + 95) = v263;
    *(_WORD *)(a6 + 93) = v262;
    v114 = v282;
    v115 = v294;
    v116 = v307;
    v117 = v305;
    v118 = v319;
    *(_DWORD *)(a6 + 96) = v296;
    *(_BYTE *)(a6 + 100) = v261;
    *(_BYTE *)(a6 + 103) = v260;
    *(_WORD *)(a6 + 101) = v259;
    *(_DWORD *)(a6 + 104) = v298;
    *(_BYTE *)(a6 + 108) = v258;
    *(_BYTE *)(a6 + 111) = v257;
    *(_WORD *)(a6 + 109) = v256;
    *(_DWORD *)(a6 + 112) = v300;
    *(_BYTE *)(a6 + 116) = v255;
    *(_BYTE *)(a6 + 119) = v254;
    *(_WORD *)(a6 + 117) = v253;
    *(_QWORD *)(a6 + 128) = v303;
    *(_BYTE *)(a6 + 136) = v252;
    *(_BYTE *)(a6 + 139) = v251;
    *(_WORD *)(a6 + 137) = v250;
    *(_BYTE *)(a6 + 164) = v249;
    *(_BYTE *)(a6 + 167) = v248;
    *(_WORD *)(a6 + 165) = v247;
    *(_DWORD *)(a6 + 168) = v309;
    *(_BYTE *)(a6 + 172) = v246;
    *(_BYTE *)(a6 + 175) = v245;
    *(_WORD *)(a6 + 173) = v244;
    *(_DWORD *)(a6 + 176) = v311;
    *(_BYTE *)(a6 + 180) = v243;
    *(_BYTE *)(a6 + 183) = v242;
    *(_WORD *)(a6 + 181) = v241;
    *(_DWORD *)(a6 + 184) = v313;
    *(_BYTE *)(a6 + 188) = v240;
    *(_BYTE *)(a6 + 191) = v239;
    *(_WORD *)(a6 + 189) = v238;
    *(_QWORD *)(a6 + 200) = v316;
    *(_BYTE *)(a6 + 208) = v237;
    *(_DWORD *)(a6 + 212) = *(_DWORD *)&v236[3];
    *(_DWORD *)(a6 + 209) = *(_DWORD *)v236;
    *(_BYTE *)(a6 + 228) = v235;
    *(_BYTE *)(a6 + 231) = v234;
    *(_WORD *)(a6 + 229) = v233;
    *(_DWORD *)(a6 + 232) = v321;
    *(_BYTE *)(a6 + 236) = v232;
    *(_BYTE *)(a6 + 239) = v231;
    *(_WORD *)(a6 + 237) = v230;
    *(_DWORD *)(a6 + 240) = v323;
    *(_BYTE *)(a6 + 244) = v229;
    *(_BYTE *)(a6 + 247) = v228;
    *(_WORD *)(a6 + 245) = v227;
    *(_DWORD *)(a6 + 248) = v325;
    *(_BYTE *)(a6 + 252) = v226;
    *(_BYTE *)(a6 + 255) = v225;
    v119 = v328;
    *(_WORD *)(a6 + 253) = v224;
    v120 = v333;
    *(_QWORD *)(a6 + 264) = v119;
    *(_BYTE *)(a6 + 272) = v223;
    *(_BYTE *)(a6 + 292) = v221;
    *(_BYTE *)(a6 + 295) = v220;
    LODWORD(v119) = v335;
    *(_DWORD *)(a6 + 296) = v120;
    *(_BYTE *)(a6 + 300) = v218;
    *(_BYTE *)(a6 + 303) = v217;
    v121 = v337;
    *(_DWORD *)(a6 + 304) = v119;
    *(_BYTE *)(a6 + 308) = v215;
    *(_BYTE *)(a6 + 311) = v214;
    v122 = v340;
    *(_DWORD *)(a6 + 312) = v121;
    *(_BYTE *)(a6 + 316) = v212;
    *(_BYTE *)(a6 + 319) = v211;
    v123 = v345;
    *(_QWORD *)(a6 + 328) = v122;
    *(_BYTE *)(a6 + 336) = v209;
    *(_BYTE *)(a6 + 356) = v207;
    *(_BYTE *)(a6 + 359) = v206;
    LODWORD(v122) = v347;
    *(_DWORD *)(a6 + 360) = v123;
    *(_BYTE *)(a6 + 364) = v204;
    *(_BYTE *)(a6 + 367) = v203;
    v124 = v349;
    *(_DWORD *)(a6 + 368) = v122;
    *(_BYTE *)(a6 + 372) = v201;
    *(_BYTE *)(a6 + 375) = v200;
    v125 = v352;
    *(_DWORD *)(a6 + 376) = v124;
    *(_BYTE *)(a6 + 380) = v198;
    *(_BYTE *)(a6 + 383) = v197;
    v126 = v357;
    *(_QWORD *)(a6 + 392) = v125;
    *(_BYTE *)(a6 + 400) = v195;
    *(_BYTE *)(a6 + 420) = v193;
    *(_BYTE *)(a6 + 423) = v192;
    LODWORD(v125) = v359;
    *(_DWORD *)(a6 + 424) = v126;
    *(_BYTE *)(a6 + 428) = v190;
    *(_BYTE *)(a6 + 431) = v189;
    v127 = v361;
    *(_DWORD *)(a6 + 432) = v125;
    *(_BYTE *)(a6 + 436) = v187;
    *(_BYTE *)(a6 + 439) = v186;
    v128 = v364;
    *(_DWORD *)(a6 + 440) = v127;
    *(_BYTE *)(a6 + 444) = v184;
    *(_BYTE *)(a6 + 447) = v183;
    LOBYTE(v127) = v366;
    *(_QWORD *)(a6 + 456) = v128;
    *(_BYTE *)(a6 + 464) = v181;
    *(_BYTE *)(a6 + 465) = v127;
    *(_WORD *)(a6 + 470) = v180;
    *(_WORD *)(a6 + 641) = v160;
    v129 = v371;
    *(_QWORD *)(a6 + 472) = v367;
    *(_BYTE *)(a6 + 480) = v178;
    *(_QWORD *)(a6 + 488) = v129;
    *(_BYTE *)(a6 + 496) = v177;
    *(_QWORD *)(a6 + 520) = v376;
    *(_BYTE *)(a6 + 528) = v176;
    *(_QWORD *)(a6 + 536) = v378;
    *(_BYTE *)(a6 + 544) = v379;
    *(_BYTE *)(a6 + 545) = v174;
    *(_DWORD *)(a6 + 556) = v382;
    *(_BYTE *)(a6 + 560) = v173;
    *(_BYTE *)(a6 + 616) = v171;
    *(_BYTE *)(a6 + 619) = v170;
    *(_DWORD *)(a6 + 620) = v388;
    *(_BYTE *)(a6 + 624) = v168;
    *(_BYTE *)(a6 + 627) = v167;
    *(_DWORD *)(a6 + 628) = v390;
    *(_BYTE *)(a6 + 632) = v165;
    *(_BYTE *)(a6 + 635) = v164;
    *(_DWORD *)(a6 + 636) = v392;
    *(_BYTE *)(a6 + 640) = v162;
    *(_BYTE *)(a6 + 643) = v161;
    *(_DWORD *)(a6 + 644) = v112;
    *(_BYTE *)(a6 + 648) = v159;
    v130 = v281;
    v131 = v290;
    v132 = v293;
    v133 = v302;
    v134 = v306;
    v135 = v315;
    v136 = v318;
    v137 = v327;
    v138 = v330;
    v139 = v339;
    *(_DWORD *)(a6 + 8) = v280;
    v140 = v342;
    *(_DWORD *)(a6 + 16) = v130;
    v141 = v351;
    *(_QWORD *)(a6 + 20) = v114;
    LODWORD(v114) = v354;
    *(CFTimeInterval *)(a6 + 56) = v131;
    v142 = v363;
    *(_DWORD *)(a6 + 80) = v132;
    *(_QWORD *)(a6 + 84) = v115;
    *(CFTimeInterval *)(a6 + 120) = v133;
    *(_QWORD *)(a6 + 140) = v117;
    *(_DWORD *)(a6 + 152) = v134;
    *(_QWORD *)(a6 + 156) = v116;
    *(CFTimeInterval *)(a6 + 192) = v135;
    *(_DWORD *)(a6 + 216) = v136;
    *(_QWORD *)(a6 + 220) = v118;
    *(CFTimeInterval *)(a6 + 256) = v137;
    *(_DWORD *)(a6 + 280) = v138;
    *(CFTimeInterval *)(a6 + 320) = v139;
    *(_DWORD *)(a6 + 344) = v140;
    *(CFTimeInterval *)(a6 + 384) = v141;
    *(_DWORD *)(a6 + 408) = v114;
    *(CFTimeInterval *)(a6 + 448) = v142;
    *(_BYTE *)(a6 + 483) = v370;
    *(_WORD *)(a6 + 481) = v369;
    *(_BYTE *)(a6 + 499) = v374;
    v143 = v331;
    v144 = v343;
    v145 = v355;
    v146 = v375;
    *(_WORD *)(a6 + 497) = v373;
    v147 = *(_OWORD *)(v103 + 20);
    v148 = *(_OWORD *)(v103 + 36);
    v149 = *(_OWORD *)(v103 + 52);
    *(_QWORD *)(a6 + 548) = *(_QWORD *)v103;
    *(_OWORD *)(a6 + 568) = v147;
    *(_OWORD *)(a6 + 584) = v148;
    *(_QWORD *)(a6 + 284) = v143;
    *(_QWORD *)(a6 + 348) = v144;
    *(_QWORD *)(a6 + 412) = v145;
    *(_OWORD *)(a6 + 504) = v146;
    *(_OWORD *)(a6 + 600) = v149;
    return result;
  }
LABEL_42:
  __break(1u);
  return result;
}

void PinchStatisticsStructs.PinchAttribute.updateWithHand(_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 80);
    v13 = *(_QWORD *)(a1 + 88);
    v14 = *(_QWORD *)(a1 + 96);
    v15 = *(_QWORD *)(a1 + 104);
    v16 = *(_QWORD *)(a1 + 112);
    v18 = *(_QWORD *)(a1 + 120);
    v17 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)&v29 = *(_QWORD *)(a1 + 16);
    *((_QWORD *)&v29 + 1) = v6;
    v30 = v5;
    v31 = v7;
    v32 = v8;
    v33 = v9;
    v34 = v10;
    v35 = v12;
    v36 = v11;
    v37 = v13;
    v38 = v14;
    v39 = v15;
    v40 = v16;
    v41 = v18;
    v42 = v17 & 0x101;
    v43 = HIDWORD(v17);
    if ((*(_BYTE *)(a1 + 236) & 1) == 0 && (*(_BYTE *)(a1 + 280) & 1) == 0)
    {
      v19 = *(float *)(a1 + 232);
      v20 = *(float *)(a1 + 276);
      v21 = *(_BYTE *)(a1 + 248);
      v22 = *(_BYTE *)(a1 + 249);
      *(_QWORD *)(v2 + 536) = *(_QWORD *)(a1 + 240);
      *(_BYTE *)(v2 + 544) = v21;
      *(_BYTE *)(v2 + 545) = v22;
      v28 = *(_QWORD *)v2;
      swift_bridgeObjectRetain();
      outlined copy of HandPose?(v3);
      specialized Sequence.forEach(_:)(v28, v2, (uint64_t)&v29);
      outlined consume of HandPose?(v3);
      swift_bridgeObjectRelease();
      v23 = type metadata accessor for DerivedHandAttributes(0);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, *(float *)(a1 + *(int *)(v23 + 28)));
      v24 = a1 + *(int *)(v23 + 24);
      if ((*(_BYTE *)(v24 + 4) & 1) == 0)
        specialized ValueStatistics.update(with:takeAbsolute:)(0, *(float *)v24);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, *(float *)(a1 + 272));
      specialized ValueStatistics.update(with:takeAbsolute:)(0, v20);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, v19);
      v25 = closure #2 in PinchStatisticsStructs.PinchAttribute.updateWithHand(_:_:_:)(a2, &v29);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, v25);
      v26 = closure #3 in PinchStatisticsStructs.PinchAttribute.updateWithHand(_:_:_:)(a2, &v29);
      specialized ValueStatistics.update(with:takeAbsolute:)(0, v26);
    }
  }
}

uint64_t PinchStatisticsStructs.PinchAttribute.estimateReadyToPinchHoverDistanceAndTimeOffset(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  _QWORD v34[2];
  _QWORD v35[4];

  v34[1] = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (hand: DerivedHandAttributes, searchWindowSize: Float)?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (hand: DerivedHandAttributes, searchWindowSize: Float));
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)v34 - v19;
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)v34 - v23;
  static PinchStatisticsStructs.PinchAttribute.findReadyToPinchFrame(_:)(a2, a3, a4, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for (hand: DerivedHandAttributes, searchWindowSize: Float)?);
    v35[3] = MEMORY[0x24BEE0D00];
    v35[0] = 0xD00000000000006ALL;
    v35[1] = 0x800000023D9D02A0;
    specialized static HLog.I(file:function:line:_:_:)(0xD00000000000006ALL, 0x800000023D9D0230, 231, (uint64_t)v35, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
  }
  else
  {
    v26 = *(int *)(v12 + 48);
    outlined init with take of DerivedHandAttributes((uint64_t)v11, (uint64_t)v24);
    v27 = *(_DWORD *)&v11[v26];
    *(_DWORD *)&v24[v26] = v27;
    v28 = *(int *)(v12 + 48);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v24, (uint64_t)v20, type metadata accessor for DerivedHandAttributes);
    *(_DWORD *)&v20[v28] = v27;
    v29 = *(unsigned int *)&v20[*(int *)(type metadata accessor for DerivedHandAttributes(0) + 28)];
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for DerivedHandAttributes);
    CMTime.seconds.getter();
    v31 = v30;
    v32 = *(int *)(v12 + 48);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v24, (uint64_t)v16, type metadata accessor for DerivedHandAttributes);
    *(_DWORD *)&v16[v32] = v27;
    outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for DerivedHandAttributes);
    CMTime.seconds.getter();
    *(float *)&v31 = v31 - v33;
    result = outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for (hand: DerivedHandAttributes, searchWindowSize: Float));
    *(_QWORD *)(v4 + 548) = v29 | ((unint64_t)LODWORD(v31) << 32);
    *(_DWORD *)(v4 + 556) = v27;
    *(_BYTE *)(v4 + 560) = 0;
  }
  return result;
}

void PinchStatisticsStructs.PinchAttribute.setUpTravelDistBefore(_:_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a3 + 16);
  if (v16)
  {
    v17 = specialized CircularBuffer.toList()(a2, a3, a4);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18 <= 7)
      v18 = 7;
    if (v16 < v18 - 7)
    {
      __break(1u);
    }
    else
    {
      v78 = v4;
      v75 = v12;
      v76 = v18 - 7;
      v19 = specialized _copyCollectionToContiguousArray<A>(_:)((int64_t *)(v18 - 7), v16);
      v20 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_5Hands8HandPoseVSgs5NeverOTg5082_s5Hands22PinchStatisticsStructsC0B9AttributeV21setUpTravelDistBeforeyyAA21Derivede44AttributesV_AA14CircularBufferVyAHSgGtFAA0L4F10VSgSiXEfU_SayAG0veW0VSgGTf1cn_nTf4ng_n((uint64_t)v19, v17);
      v74[0] = 0;
      swift_release();
      v5 = a1[2];
      v6 = a1[3];
      v21 = a1;
      a1 = (_QWORD *)a1[4];
      v12 = v21[5];
      v16 = v21[6];
      v4 = v21[7];
      a3 = v21[8];
      v22 = (_QWORD *)v21[9];
      v23 = v21[10];
      v24 = v21[11];
      v25 = v21[12];
      v26 = v21[13];
      v27 = v21[14];
      v74[1] = v21;
      v28 = v21[15];
      v83 = v21[16];
      v84 = v28;
      v85 = v27;
      v86 = v26;
      v87 = v25;
      v88 = v24;
      v89 = v23;
      v90 = v22;
      outlined copy of HandPose?(v5);
      v80 = v20;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v77 = v15;
      v79 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_6:
        v31 = v80[2];
        v30 = v80[3];
        v32 = v31 + 1;
        if (v31 >= v30 >> 1)
          v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v80);
        v33 = v80;
        v80[2] = v32;
        v34 = &v33[16 * v31];
        v34[4] = v5;
        v34[5] = v6;
        v34[6] = a1;
        v34[7] = v12;
        v34[8] = v16;
        v34[9] = v4;
        v35 = v90;
        v34[10] = a3;
        v34[11] = v35;
        v36 = v88;
        v34[12] = v89;
        v34[13] = v36;
        v37 = v86;
        v34[14] = v87;
        v34[15] = v37;
        v38 = v84;
        v34[16] = v85;
        v34[17] = v38;
        v34[18] = v83;
        v39 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
        v40 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v41 = *(v39 - 5);
          if (!v41)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            return;
          }
          v42 = *(v39 - 4);
          v43 = *(v39 - 1);
          v85 = *(v39 - 3);
          v86 = v43;
          v44 = v39[1];
          v45 = *v39;
          v81 = *(v39 - 2);
          v82 = v45;
          v46 = v39[3];
          v47 = v39[4];
          v48 = v39[5];
          v83 = v39[2];
          v84 = v47;
          v49 = v39[7];
          v87 = v39[6];
          v88 = v44;
          v51 = v39[8];
          v50 = v39[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v52 = swift_isUniquelyReferenced_nonNull_native();
          v89 = v51;
          if ((v52 & 1) == 0)
            v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
          v54 = v40[2];
          v53 = v40[3];
          v90 = v40;
          if (v54 >= v53 >> 1)
            v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v90);
          v55 = v90;
          v90[2] = v54 + 1;
          v40 = v55;
          v56 = &v55[16 * v54];
          v56[4] = v41;
          v56[5] = v42;
          v57 = v81;
          v56[6] = v85;
          v56[7] = v57;
          v58 = v82;
          v56[8] = v86;
          v56[9] = v58;
          v59 = v83;
          v56[10] = v88;
          v56[11] = v59;
          v60 = v84;
          v56[12] = v46;
          v56[13] = v60;
          v61 = v87;
          v56[14] = v48;
          v56[15] = v61;
          v62 = v89;
          v56[16] = v49;
          v56[17] = v62;
          *((_BYTE *)v56 + 144) = v50 & 1;
          *((_BYTE *)v56 + 145) = BYTE1(v50) & 1;
          v39 += 16;
          *((_DWORD *)v56 + 37) = HIDWORD(v50);
          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease();
        v63 = v40[2];
        v64 = 0;
        v65 = v79;
        if (v63 >= 2)
        {
          v66 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v63 - 1);
          swift_bridgeObjectRetain();
          v67 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5097_s5Hands14StatisticUtilsC19jointTravelDistanceySfSayAA8HandPoseVG_So18ARVinoJointIndexesVS2itFZs5d2VyM8GSiXEfU_Say5Hands0pQ0VGSo0tuV0VTf1cn_nTf4ngn_n(v66, (uint64_t)v40, 6);
          swift_release();
          specialized static StatisticUtils.travelDistance(_:)(v67);
          v64 = v68;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v69 = v78;
        *(_DWORD *)(v78 + 140) = v64;
        v70 = type metadata accessor for DerivedHandAttributes(0);
        v71 = (uint64_t)v77;
        if (v76 >= *(_QWORD *)(v65 + 16))
        {
          __break(1u);
        }
        else
        {
          v72 = v70;
          outlined init with copy of DerivedHandAttributes?(v65+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v76, (uint64_t)v77);
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 48))(v71, 1, v72) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of Matrix3x3PB(v71, type metadata accessor for DerivedHandAttributes);
            static CMTime.- infix(_:_:)();
            CMTime.seconds.getter();
            *(float *)&v73 = v73;
            *(_DWORD *)(v69 + 144) = LODWORD(v73);
            return;
          }
        }
        __break(1u);
        return;
      }
    }
    v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
    goto LABEL_6;
  }
}

float closure #2 in PinchStatisticsStructs.PinchAttribute.updateWithHand(_:_:_:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v52 - v14;
  outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)&v52 - v14);
  v16 = type metadata accessor for DerivedHandAttributes(0);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48);
  if (v17(v15, 1, v16) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v15, &demangling cache variable for type metadata for DerivedHandAttributes?);
    return 0.0;
  }
  else
  {
    v52 = a2;
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v15, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of Matrix3x3PB((uint64_t)v15, type metadata accessor for DerivedHandAttributes);
    v20 = *((_QWORD *)v7 + 2);
    v19 = *((_QWORD *)v7 + 3);
    v21 = *((_QWORD *)v7 + 4);
    v22 = *((_QWORD *)v7 + 5);
    v23 = *((_QWORD *)v7 + 6);
    v24 = *((_QWORD *)v7 + 7);
    v25 = *((_QWORD *)v7 + 8);
    v26 = *((_QWORD *)v7 + 9);
    v27 = *((_QWORD *)v7 + 10);
    v28 = *((_QWORD *)v7 + 11);
    v29 = *((_QWORD *)v7 + 12);
    v30 = *((_QWORD *)v7 + 14);
    v31 = *((_QWORD *)v7 + 15);
    v32 = *((_QWORD *)v7 + 16);
    v53 = *((_QWORD *)v7 + 13);
    v54 = v29;
    v55 = v28;
    v56 = v27;
    v57 = v19;
    v58 = v21;
    v59 = v22;
    v60 = v23;
    v61 = v24;
    v62 = v25;
    v63 = v26;
    outlined copy of HandPose?(v20);
    outlined destroy of Matrix3x3PB((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v18 = 0.0;
    if (v20)
    {
      outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v11);
      if (v17(v11, 1, v16) == 1)
      {
        outlined consume of HandPose?(v20);
        outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for DerivedHandAttributes?);
      }
      else
      {
        outlined init with copy of TrackingUpdateDataPB((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for DerivedHandAttributes);
        v33 = v7[4];
        outlined destroy of Matrix3x3PB((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v33 != 2 && (v33 & 1) != 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HandPose>);
          v34 = swift_allocObject();
          v35 = (uint64_t)v52;
          v36 = v52[4];
          v37 = v52[6];
          *(_OWORD *)(v34 + 112) = v52[5];
          *(_OWORD *)(v34 + 128) = v37;
          v38 = *(_OWORD *)v35;
          v39 = *(_OWORD *)(v35 + 16);
          *(_OWORD *)(v34 + 16) = xmmword_23D9A7050;
          *(_OWORD *)(v34 + 32) = v38;
          v40 = *(_OWORD *)(v35 + 32);
          v41 = *(_OWORD *)(v35 + 48);
          *(_OWORD *)(v34 + 48) = v39;
          *(_OWORD *)(v34 + 64) = v40;
          *(_QWORD *)(v34 + 144) = *(_QWORD *)(v35 + 112);
          *(_OWORD *)(v34 + 80) = v41;
          *(_OWORD *)(v34 + 96) = v36;
          v42 = v57;
          *(_QWORD *)(v34 + 160) = v20;
          *(_QWORD *)(v34 + 168) = v42;
          v43 = v59;
          *(_QWORD *)(v34 + 176) = v58;
          *(_QWORD *)(v34 + 184) = v43;
          v44 = v61;
          *(_QWORD *)(v34 + 192) = v60;
          *(_QWORD *)(v34 + 200) = v44;
          v45 = v63;
          *(_QWORD *)(v34 + 208) = v62;
          *(_QWORD *)(v34 + 216) = v45;
          v46 = v55;
          *(_QWORD *)(v34 + 224) = v56;
          *(_QWORD *)(v34 + 232) = v46;
          v47 = v53;
          *(_QWORD *)(v34 + 240) = v54;
          *(_QWORD *)(v34 + 248) = v47;
          *(_QWORD *)(v34 + 256) = v30;
          *(_QWORD *)(v34 + 264) = v31;
          *(_BYTE *)(v34 + 272) = v32 & 1;
          *(_BYTE *)(v34 + 273) = BYTE1(v32) & 1;
          *(_DWORD *)(v34 + 276) = HIDWORD(v32);
          v48 = specialized _copyCollectionToContiguousArray<A>(_:)(0, 1);
          outlined retain of HandPose(v35);
          v49 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5097_s5Hands14StatisticUtilsC19jointTravelDistanceySfSayAA8HandPoseVG_So18ARVinoJointIndexesVS2itFZs5d2VyM8GSiXEfU_Say5Hands0pQ0VGSo0tuV0VTf1cn_nTf4ngn_n(v48, v34, 6);
          swift_release();
          specialized static StatisticUtils.travelDistance(_:)(v49);
          v18 = v50;
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
        }
        else
        {
          outlined consume of HandPose?(v20);
        }
      }
    }
  }
  return v18;
}

float closure #3 in PinchStatisticsStructs.PinchAttribute.updateWithHand(_:_:_:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v53 - v14;
  outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)&v53 - v14);
  v16 = type metadata accessor for DerivedHandAttributes(0);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48);
  if (v17(v15, 1, v16) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v15, &demangling cache variable for type metadata for DerivedHandAttributes?);
    return 0.0;
  }
  else
  {
    v53 = a2;
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v15, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of Matrix3x3PB((uint64_t)v15, type metadata accessor for DerivedHandAttributes);
    v20 = *((_QWORD *)v7 + 2);
    v19 = *((_QWORD *)v7 + 3);
    v21 = *((_QWORD *)v7 + 4);
    v22 = *((_QWORD *)v7 + 5);
    v23 = *((_QWORD *)v7 + 6);
    v24 = *((_QWORD *)v7 + 7);
    v25 = *((_QWORD *)v7 + 8);
    v26 = *((_QWORD *)v7 + 9);
    v27 = *((_QWORD *)v7 + 10);
    v28 = *((_QWORD *)v7 + 11);
    v29 = *((_QWORD *)v7 + 12);
    v30 = *((_QWORD *)v7 + 14);
    v31 = *((_QWORD *)v7 + 15);
    v32 = *((_QWORD *)v7 + 16);
    v54 = *((_QWORD *)v7 + 13);
    v55 = v29;
    v56 = v28;
    v57 = v27;
    v58 = v19;
    v59 = v21;
    v60 = v22;
    v61 = v23;
    v62 = v24;
    v63 = v25;
    v64 = v26;
    outlined copy of HandPose?(v20);
    outlined destroy of Matrix3x3PB((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v18 = 0.0;
    if (v20)
    {
      outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v11);
      if (v17(v11, 1, v16) == 1)
      {
        outlined consume of HandPose?(v20);
        outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for DerivedHandAttributes?);
      }
      else
      {
        outlined init with copy of TrackingUpdateDataPB((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for DerivedHandAttributes);
        v33 = v7[4];
        outlined destroy of Matrix3x3PB((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v33 != 2 && (v33 & 1) != 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HandPose>);
          v34 = swift_allocObject();
          v35 = (uint64_t)v53;
          v36 = v53[4];
          v37 = v53[6];
          *(_OWORD *)(v34 + 112) = v53[5];
          *(_OWORD *)(v34 + 128) = v37;
          v38 = *(_OWORD *)v35;
          v39 = *(_OWORD *)(v35 + 16);
          *(_OWORD *)(v34 + 16) = xmmword_23D9A7050;
          *(_OWORD *)(v34 + 32) = v38;
          v40 = *(_OWORD *)(v35 + 32);
          v41 = *(_OWORD *)(v35 + 48);
          *(_OWORD *)(v34 + 48) = v39;
          *(_OWORD *)(v34 + 64) = v40;
          *(_QWORD *)(v34 + 144) = *(_QWORD *)(v35 + 112);
          *(_OWORD *)(v34 + 80) = v41;
          *(_OWORD *)(v34 + 96) = v36;
          v42 = v58;
          *(_QWORD *)(v34 + 160) = v20;
          *(_QWORD *)(v34 + 168) = v42;
          v43 = v60;
          *(_QWORD *)(v34 + 176) = v59;
          *(_QWORD *)(v34 + 184) = v43;
          v44 = v62;
          *(_QWORD *)(v34 + 192) = v61;
          *(_QWORD *)(v34 + 200) = v44;
          v45 = v64;
          *(_QWORD *)(v34 + 208) = v63;
          *(_QWORD *)(v34 + 216) = v45;
          v46 = v56;
          *(_QWORD *)(v34 + 224) = v57;
          *(_QWORD *)(v34 + 232) = v46;
          v47 = v54;
          *(_QWORD *)(v34 + 240) = v55;
          *(_QWORD *)(v34 + 248) = v47;
          *(_QWORD *)(v34 + 256) = v30;
          *(_QWORD *)(v34 + 264) = v31;
          *(_BYTE *)(v34 + 272) = v32 & 1;
          *(_BYTE *)(v34 + 273) = BYTE1(v32) & 1;
          *(_DWORD *)(v34 + 276) = HIDWORD(v32);
          v48 = specialized _copyCollectionToContiguousArray<A>(_:)(0, 1);
          outlined retain of HandPose(v35);
          _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg5082_s5Hands14StatisticUtilsC27pinchCentroidTravelDistanceySfSayAA8HandPoseVG_S2itFZs5d2VyN8GSiXEfU_Say5Hands0qR0VGTf1cn_nTf4ng_n(v48, v34);
          v50 = v49;
          swift_release();
          specialized static StatisticUtils.travelDistance(_:)(v50);
          v18 = v51;
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
        }
        else
        {
          outlined consume of HandPose?(v20);
        }
      }
    }
  }
  return v18;
}

uint64_t static PinchStatisticsStructs.PinchAttribute.findReadyToPinchFrame(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t result;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  unsigned int (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v124 = a4;
  v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes));
  v121 = *(_QWORD *)(v132 - 8);
  MEMORY[0x24BDAC7A8](v132, v7);
  v129 = (_QWORD *)((char *)v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9, v10);
  v133 = (_QWORD *)((char *)v116 - v11);
  MEMORY[0x24BDAC7A8](v12, v13);
  v128 = (_QWORD *)((char *)v116 - v14);
  MEMORY[0x24BDAC7A8](v15, v16);
  v130 = (uint64_t)v116 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v131 = (_QWORD *)((char *)v116 - v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes)?);
  MEMORY[0x24BDAC7A8](v21, v22);
  v126 = (char *)v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24, v25);
  v120 = (uint64_t)v116 - v26;
  v27 = type metadata accessor for DerivedHandAttributes(0);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27, v29);
  v118 = (uint64_t)v116 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31, v32);
  v119 = (uint64_t)v116 - v33;
  MEMORY[0x24BDAC7A8](v34, v35);
  v122 = (uint64_t)v116 - v36;
  MEMORY[0x24BDAC7A8](v37, v38);
  v123 = (uint64_t)v116 - v39;
  MEMORY[0x24BDAC7A8](v40, v41);
  v135 = (unint64_t)v116 - v42;
  MEMORY[0x24BDAC7A8](v43, v44);
  v46 = (char *)v116 - v45;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v48 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47, v49);
  v51 = (char *)v116 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v52, v53);
  v55 = (char *)v116 - v54;
  swift_bridgeObjectRetain();
  specialized Sequence.suffix(_:)(10, a1, a2, a3);
  v57 = *(_QWORD *)(v56 + 16);
  v134 = v27;
  if (v57)
  {
    v58 = *(unsigned __int8 *)(v48 + 80);
    v127 = v56;
    v59 = v56 + ((v58 + 32) & ~v58);
    v60 = *(_QWORD *)(v48 + 72);
    v61 = MEMORY[0x24BEE4AF8];
    v62 = v27;
    do
    {
      outlined init with copy of DerivedHandAttributes?(v59, (uint64_t)v55);
      outlined init with take of ImageData?((uint64_t)v55, (uint64_t)v51, &demangling cache variable for type metadata for DerivedHandAttributes?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v51, 1, v62) == 1)
      {
        outlined destroy of Coordinate3DPB?((uint64_t)v51, &demangling cache variable for type metadata for DerivedHandAttributes?);
      }
      else
      {
        outlined init with take of DerivedHandAttributes((uint64_t)v51, (uint64_t)v46);
        outlined init with take of DerivedHandAttributes((uint64_t)v46, v135);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v63 = v61;
        else
          v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v61 + 16) + 1, 1, v61);
        v65 = *(_QWORD *)(v63 + 16);
        v64 = *(_QWORD *)(v63 + 24);
        if (v65 >= v64 >> 1)
          v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v63);
        *(_QWORD *)(v63 + 16) = v65 + 1;
        v61 = v63;
        outlined init with take of DerivedHandAttributes(v135, v63+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v65);
        v62 = v134;
      }
      v59 += v60;
      --v57;
    }
    while (v57);
    swift_bridgeObjectRelease();
    v66 = v61;
  }
  else
  {
    swift_bridgeObjectRelease();
    v66 = MEMORY[0x24BEE4AF8];
  }
  v67 = v130;
  v68 = v133;
  v69 = v126;
  if (*(_QWORD *)(v66 + 16) != 10)
  {
    swift_bridgeObjectRelease();
    v139 = MEMORY[0x24BEE0D00];
    v136 = 0xD000000000000054;
    v137 = 0x800000023D9D0310;
    specialized static HLog.I(file:function:line:_:_:)(0xD00000000000006ALL, 0x800000023D9D0230, 249, (uint64_t)&v136, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v136);
    goto LABEL_33;
  }
  v70 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  outlined init with copy of TrackingUpdateDataPB(v66 + v70, v123, type metadata accessor for DerivedHandAttributes);
  v127 = *(_QWORD *)(v28 + 72);
  outlined init with copy of TrackingUpdateDataPB(v66 + v70 + 9 * v127, v122, type metadata accessor for DerivedHandAttributes);
  v137 = 0;
  v138 = 0;
  v136 = v66;
  specialized EnumeratedSequence.Iterator.next()(v69);
  v71 = v121;
  v72 = v132;
  v117 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  if (v117((uint64_t)v69, 1, v132) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined destroy of Coordinate3DPB?((uint64_t)v69, &demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes)?);
    v73 = v120;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v120, 1, 1, v72);
LABEL_31:
    swift_bridgeObjectRelease();
    if (v117(v73, 1, v72) != 1)
    {
      v105 = v73 + *(int *)(v72 + 48);
      v106 = v118;
      outlined init with take of DerivedHandAttributes(v105, v118);
      v107 = v119;
      outlined init with take of DerivedHandAttributes(v106, v119);
      v109 = v122;
      v108 = v123;
      static CMTime.- infix(_:_:)();
      CMTime.seconds.getter();
      v111 = v110;
      outlined destroy of Matrix3x3PB(v109, type metadata accessor for DerivedHandAttributes);
      outlined destroy of Matrix3x3PB(v108, type metadata accessor for DerivedHandAttributes);
      v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (hand: DerivedHandAttributes, searchWindowSize: Float));
      v113 = *(int *)(v112 + 48);
      v114 = v107;
      v115 = v124;
      outlined init with take of DerivedHandAttributes(v114, v124);
      *(float *)(v115 + v113) = v111;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v115, 0, 1, v112);
    }
    outlined destroy of Coordinate3DPB?(v73, &demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes)?);
    outlined destroy of Matrix3x3PB(v122, type metadata accessor for DerivedHandAttributes);
    outlined destroy of Matrix3x3PB(v123, type metadata accessor for DerivedHandAttributes);
LABEL_33:
    v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (hand: DerivedHandAttributes, searchWindowSize: Float));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v124, 1, 1, v104);
  }
  outlined init with take of ImageData?((uint64_t)v69, (uint64_t)v131, &demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes));
  v74 = v137;
  v75 = v138;
  v126 = (char *)v136;
  v76 = *(_QWORD *)(v136 + 16);
  v116[1] = v66;
  result = swift_bridgeObjectRetain();
  if (v74 == v76)
  {
LABEL_30:
    v137 = v74;
    v138 = v75;
    swift_bridgeObjectRelease();
    v73 = v120;
    outlined init with take of ImageData?((uint64_t)v131, v120, &demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes));
    v72 = v132;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v73, 0, 1, v132);
    goto LABEL_31;
  }
  v78 = (uint64_t)&v126[v70 + v74 * v127];
  v79 = type metadata accessor for DerivedHandAttributes;
  v80 = v131;
  v81 = v132;
  while (v74 < v76)
  {
    v82 = (uint64_t)v68 + *(int *)(v81 + 48);
    result = outlined init with copy of TrackingUpdateDataPB(v78, v82, v79);
    if (__OFADD__(v75, 1))
      goto LABEL_36;
    v135 = v74;
    v125 = v75 + 1;
    v83 = v79;
    v84 = (uint64_t)v128;
    v85 = (uint64_t)v128 + *(int *)(v81 + 48);
    *v128 = v75;
    outlined init with take of DerivedHandAttributes(v82, v85);
    outlined init with take of ImageData?(v84, v67, &demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes));
    v86 = *(int *)(v81 + 48);
    v87 = (uint64_t)v68 + v86;
    v88 = (_QWORD *)v67;
    *v68 = *v80;
    v130 = (uint64_t)v80 + v86;
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v80 + v86, (uint64_t)v68 + v86, v83);
    v89 = v134;
    v90 = *(float *)(v87 + *(int *)(v134 + 28));
    outlined destroy of Matrix3x3PB(v87, v83);
    v91 = *(int *)(v81 + 48);
    v92 = v129;
    v93 = (uint64_t)v129 + v91;
    v94 = v88;
    v95 = (uint64_t)v88 + v91;
    *v129 = *v94;
    outlined init with copy of TrackingUpdateDataPB(v95, v93, v83);
    v96 = *(float *)(v93 + *(int *)(v89 + 28));
    v97 = v93;
    v79 = v83;
    outlined destroy of Matrix3x3PB(v97, v83);
    if (v90 == v96)
    {
      v67 = (uint64_t)v94;
      if (*v80 < *v94)
        goto LABEL_28;
    }
    else
    {
      v98 = (uint64_t)v133 + *(int *)(v81 + 48);
      *v133 = *v80;
      outlined init with copy of TrackingUpdateDataPB(v130, v98, v83);
      v99 = *(float *)(v98 + *(int *)(v89 + 28));
      v100 = v98;
      v79 = v83;
      outlined destroy of Matrix3x3PB(v100, v83);
      v101 = v95;
      v102 = (uint64_t)v92 + *(int *)(v81 + 48);
      *v92 = *v94;
      outlined init with copy of TrackingUpdateDataPB(v101, v102, v83);
      v103 = *(float *)(v102 + *(int *)(v89 + 28));
      outlined destroy of Matrix3x3PB(v102, v83);
      v67 = (uint64_t)v94;
      if (v99 < v103)
      {
LABEL_28:
        outlined destroy of Coordinate3DPB?((uint64_t)v80, &demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes));
        result = outlined init with take of ImageData?(v67, (uint64_t)v80, &demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes));
        goto LABEL_21;
      }
    }
    result = outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for (offset: Int, element: DerivedHandAttributes));
LABEL_21:
    v74 = v135 + 1;
    v76 = *((_QWORD *)v126 + 2);
    v78 += v127;
    ++v75;
    v68 = v133;
    if (v135 + 1 == v76)
    {
      v75 = v125;
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PinchStatisticsStructs()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for PinchStatisticsStructs.PinchAttribute(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 140) = *(_QWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 193) = *(_OWORD *)(a2 + 193);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 257) = *(_OWORD *)(a2 + 257);
  v5 = *(_OWORD *)(a2 + 280);
  v6 = *(_OWORD *)(a2 + 296);
  v7 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 296) = v6;
  *(_OWORD *)(a1 + 312) = v7;
  *(_OWORD *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 385) = *(_OWORD *)(a2 + 385);
  v8 = *(_OWORD *)(a2 + 376);
  v9 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v8;
  *(_OWORD *)(a1 + 344) = v9;
  *(_OWORD *)(a1 + 449) = *(_OWORD *)(a2 + 449);
  v10 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v10;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_BYTE *)(a1 + 465) = *(_BYTE *)(a2 + 465);
  v11 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 484);
  *(_OWORD *)(a1 + 472) = v11;
  v12 = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 513) = *(_OWORD *)(a2 + 513);
  *(_OWORD *)(a1 + 504) = v12;
  v13 = *(_QWORD *)(a2 + 536);
  *(_WORD *)(a1 + 544) = *(_WORD *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v13;
  v14 = *(_QWORD *)(a2 + 548);
  *(_QWORD *)(a1 + 553) = *(_QWORD *)(a2 + 553);
  *(_QWORD *)(a1 + 548) = v14;
  v15 = *(_OWORD *)(a2 + 568);
  v16 = *(_OWORD *)(a2 + 584);
  v17 = *(_OWORD *)(a2 + 600);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(_OWORD *)(a1 + 584) = v16;
  *(_OWORD *)(a1 + 600) = v17;
  *(_OWORD *)(a1 + 568) = v15;
  LODWORD(v13) = *(_DWORD *)(a2 + 620);
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
  *(_DWORD *)(a1 + 620) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 628);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_DWORD *)(a1 + 628) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 636);
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(_DWORD *)(a1 + 636) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 644);
  *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
  *(_DWORD *)(a1 + 644) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PinchStatisticsStructs.PinchAttribute(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v4 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v4;
  v5 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v5;
  v6 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v6;
  v7 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  LODWORD(v8) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v9;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  LODWORD(v9) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v10 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v10;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  LODWORD(v10) = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_DWORD *)(a1 + 224) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  *(_DWORD *)(a1 + 240) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
  *(_DWORD *)(a1 + 248) = v10;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v11 = *(_QWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v11;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  LODWORD(v11) = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_DWORD *)(a1 + 304) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v11;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v12 = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v12;
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  LODWORD(v12) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 356) = *(_BYTE *)(a2 + 356);
  *(_DWORD *)(a1 + 352) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 364) = *(_BYTE *)(a2 + 364);
  *(_DWORD *)(a1 + 360) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 372) = *(_BYTE *)(a2 + 372);
  *(_DWORD *)(a1 + 368) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 380) = *(_BYTE *)(a2 + 380);
  *(_DWORD *)(a1 + 376) = v12;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v13 = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v13;
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  LODWORD(v13) = *(_DWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 420) = *(_BYTE *)(a2 + 420);
  *(_DWORD *)(a1 + 416) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 428) = *(_BYTE *)(a2 + 428);
  *(_DWORD *)(a1 + 424) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 432);
  *(_BYTE *)(a1 + 436) = *(_BYTE *)(a2 + 436);
  *(_DWORD *)(a1 + 432) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 444) = *(_BYTE *)(a2 + 444);
  *(_DWORD *)(a1 + 440) = v13;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v14 = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = v14;
  *(_BYTE *)(a1 + 465) = *(_BYTE *)(a2 + 465);
  v15 = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = v15;
  LOWORD(v15) = *(_WORD *)(a2 + 481);
  *(_BYTE *)(a1 + 483) = *(_BYTE *)(a2 + 483);
  *(_WORD *)(a1 + 481) = v15;
  v16 = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = v16;
  v17 = *(_WORD *)(a2 + 497);
  *(_BYTE *)(a1 + 499) = *(_BYTE *)(a2 + 499);
  *(_WORD *)(a1 + 497) = v17;
  v18 = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 513) = *(_OWORD *)(a2 + 513);
  *(_OWORD *)(a1 + 504) = v18;
  v19 = *(_QWORD *)(a2 + 536);
  *(_WORD *)(a1 + 544) = *(_WORD *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v19;
  v20 = *(_QWORD *)(a2 + 548);
  *(_QWORD *)(a1 + 553) = *(_QWORD *)(a2 + 553);
  *(_QWORD *)(a1 + 548) = v20;
  v21 = *(_OWORD *)(a2 + 568);
  v22 = *(_OWORD *)(a2 + 584);
  v23 = *(_OWORD *)(a2 + 600);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(_OWORD *)(a1 + 584) = v22;
  *(_OWORD *)(a1 + 600) = v23;
  *(_OWORD *)(a1 + 568) = v21;
  LODWORD(v19) = *(_DWORD *)(a2 + 620);
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
  *(_DWORD *)(a1 + 620) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 628);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_DWORD *)(a1 + 628) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 636);
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(_DWORD *)(a1 + 636) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 644);
  *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
  *(_DWORD *)(a1 + 644) = v19;
  return a1;
}

void *__swift_memcpy649_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x289uLL);
}

uint64_t assignWithTake for PinchStatisticsStructs.PinchAttribute(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v6 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = v6;
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v7 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 140) = *(_QWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v8 = *(_DWORD *)(a2 + 156);
  v9 = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 156) = v8;
  *(_DWORD *)(a1 + 160) = v9;
  v10 = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v10;
  v11 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v11;
  v12 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v12;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v13 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v13;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  LODWORD(v13) = *(_DWORD *)(a2 + 220);
  v14 = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_DWORD *)(a1 + 220) = v13;
  *(_DWORD *)(a1 + 224) = v14;
  LODWORD(v13) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  *(_DWORD *)(a1 + 240) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
  *(_DWORD *)(a1 + 248) = v13;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v15 = *(_QWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v15;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  LODWORD(v15) = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_DWORD *)(a1 + 304) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v15;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v16 = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v16;
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  LODWORD(v16) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 356) = *(_BYTE *)(a2 + 356);
  *(_DWORD *)(a1 + 352) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 364) = *(_BYTE *)(a2 + 364);
  *(_DWORD *)(a1 + 360) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 372) = *(_BYTE *)(a2 + 372);
  *(_DWORD *)(a1 + 368) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 380) = *(_BYTE *)(a2 + 380);
  *(_DWORD *)(a1 + 376) = v16;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v17 = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v17;
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  LODWORD(v17) = *(_DWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 420) = *(_BYTE *)(a2 + 420);
  *(_DWORD *)(a1 + 416) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 428) = *(_BYTE *)(a2 + 428);
  *(_DWORD *)(a1 + 424) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 432);
  *(_BYTE *)(a1 + 436) = *(_BYTE *)(a2 + 436);
  *(_DWORD *)(a1 + 432) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 444) = *(_BYTE *)(a2 + 444);
  *(_DWORD *)(a1 + 440) = v17;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v18 = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = v18;
  *(_BYTE *)(a1 + 465) = *(_BYTE *)(a2 + 465);
  v19 = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = v19;
  LOWORD(v19) = *(_WORD *)(a2 + 481);
  *(_BYTE *)(a1 + 483) = *(_BYTE *)(a2 + 483);
  *(_WORD *)(a1 + 481) = v19;
  v20 = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = v20;
  LOWORD(v14) = *(_WORD *)(a2 + 497);
  *(_BYTE *)(a1 + 499) = *(_BYTE *)(a2 + 499);
  *(_WORD *)(a1 + 497) = v14;
  v21 = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 513) = *(_OWORD *)(a2 + 513);
  *(_OWORD *)(a1 + 504) = v21;
  v22 = *(_QWORD *)(a2 + 536);
  *(_WORD *)(a1 + 544) = *(_WORD *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v22;
  v23 = *(_QWORD *)(a2 + 548);
  *(_QWORD *)(a1 + 553) = *(_QWORD *)(a2 + 553);
  *(_QWORD *)(a1 + 548) = v23;
  v24 = *(_OWORD *)(a2 + 568);
  v25 = *(_OWORD *)(a2 + 584);
  v26 = *(_OWORD *)(a2 + 600);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(_OWORD *)(a1 + 584) = v25;
  *(_OWORD *)(a1 + 600) = v26;
  *(_OWORD *)(a1 + 568) = v24;
  LODWORD(v22) = *(_DWORD *)(a2 + 620);
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 624);
  *(_DWORD *)(a1 + 620) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 628);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_DWORD *)(a1 + 628) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 636);
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(_DWORD *)(a1 + 636) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 644);
  *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
  *(_DWORD *)(a1 + 644) = v22;
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchStatisticsStructs.PinchAttribute(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 649))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchStatisticsStructs.PinchAttribute(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 648) = 0;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 649) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 649) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchStatisticsStructs.PinchAttribute()
{
  return &type metadata for PinchStatisticsStructs.PinchAttribute;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_5Hands8HandPoseVSgs5NeverOTg5082_s5Hands22PinchStatisticsStructsC0B9AttributeV21setUpTravelDistBeforeyyAA21Derivede44AttributesV_AA14CircularBufferVyAHSgGtFAA0L4F10VSgSiXEfU_SayAG0veW0VSgGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v5 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  if (!v14)
    return v15;
  v57 = v2;
  v72 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
  v15 = v72;
  v17 = (unint64_t *)(a1 + 32);
  v68 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v69 = v13;
  v18 = *(_QWORD *)(a2 + 16);
  v70 = v10;
  v71 = v18;
  while (1)
  {
    v20 = *v17++;
    v19 = v20;
    if (v20 >= v71)
      break;
    outlined init with copy of DerivedHandAttributes?(v68 + *(_QWORD *)(v10 + 72) * v19, (uint64_t)v13);
    v21 = type metadata accessor for DerivedHandAttributes(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v13, 1, v21) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v13, &demangling cache variable for type metadata for DerivedHandAttributes?);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      result = 0;
      v35 = 0;
    }
    else
    {
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v13, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for DerivedHandAttributes);
      v36 = v8[2];
      v66 = v8[3];
      v67 = v36;
      v37 = v8[4];
      v64 = v8[5];
      v65 = v37;
      v38 = v8[6];
      v39 = v8[7];
      v61 = v15;
      v62 = v38;
      v40 = v8[8];
      v41 = v8[9];
      v42 = v8[11];
      v63 = v8[10];
      v58 = v42;
      v43 = v8[12];
      v44 = (unint64_t *)v8[13];
      v60 = v14;
      v45 = v8[14];
      v46 = v8[15];
      v47 = v8[16];
      v59 = v17;
      v48 = v40;
      outlined copy of HandPose?(v36);
      outlined destroy of Matrix3x3PB((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v35 = v47;
      result = v46;
      v14 = v60;
      v15 = v61;
      v34 = v45;
      v33 = v44;
      v32 = v43;
      v26 = v62;
      v30 = v63;
      v29 = v41;
      v28 = v48;
      v27 = v39;
      v31 = v58;
      v17 = v59;
      v25 = v64;
      v24 = v65;
      v23 = v66;
      v22 = v67;
    }
    v72 = v15;
    v50 = *(_QWORD *)(v15 + 16);
    v49 = *(_QWORD *)(v15 + 24);
    if (v50 >= v49 >> 1)
    {
      v66 = v23;
      v67 = v22;
      v55 = v35;
      v56 = result;
      v64 = v25;
      v65 = v24;
      v61 = v28;
      v62 = v26;
      v52 = v29;
      v63 = v30;
      v53 = v31;
      v59 = v33;
      v60 = v32;
      v58 = v34;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
      v35 = v55;
      result = v56;
      v34 = v58;
      v33 = v59;
      v32 = v60;
      v28 = v61;
      v31 = v53;
      v26 = v62;
      v30 = v63;
      v29 = v52;
      v25 = v64;
      v24 = v65;
      v23 = v66;
      v22 = v67;
      v15 = v72;
    }
    *(_QWORD *)(v15 + 16) = v50 + 1;
    v51 = (_QWORD *)(v15 + (v50 << 7));
    v51[4] = v22;
    v51[5] = v23;
    v51[6] = v24;
    v51[7] = v25;
    v51[8] = v26;
    v51[9] = v27;
    v51[10] = v28;
    v51[11] = v29;
    v51[12] = v30;
    v51[13] = v31;
    v51[14] = v32;
    v51[15] = v33;
    v51[16] = v34;
    v51[17] = result;
    v51[18] = v35;
    --v14;
    v13 = v69;
    v10 = v70;
    if (!v14)
      return v15;
  }
  __break(1u);
  return result;
}

uint64_t specialized static PinchStatisticsStructs.PinchAttribute.getOcclusionAverage(_:_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  float i;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (*(_QWORD *)(*(_QWORD *)result + 16) <= a2)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v2 = *(_QWORD *)(*(_QWORD *)result + 144 * a2 + 40);
  if (!*(_QWORD *)(v2 + 16))
    return result;
  v3 = 0;
  v4 = v2 + 64;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  for (i = 0.0; ; i = i + *(float *)(*(_QWORD *)(v2 + 56) + 4 * v11))
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v3 << 6);
      continue;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v8)
      return result;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v8)
        return result;
      v13 = *(_QWORD *)(v4 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v8)
          return result;
        v13 = *(_QWORD *)(v4 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v8)
            return result;
          v13 = *(_QWORD *)(v4 + 8 * v3);
          if (!v13)
          {
            v3 = v12 + 4;
            if (v12 + 4 >= v8)
              return result;
            v13 = *(_QWORD *)(v4 + 8 * v3);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_27:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v3 << 6);
  }
  v14 = v12 + 5;
  if (v14 >= v8)
    return result;
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v3 = v14;
    goto LABEL_27;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v8)
      return result;
    v13 = *(_QWORD *)(v4 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_27;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  int v12;
  BOOL v13;
  int v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float v29;
  _OWORD v30[7];
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;

  v5 = *(_QWORD *)(a1 + 64);
  v33 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v18 = v17 | (v11 << 6);
    }
    else
    {
      v19 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v19 >= v9)
        return swift_release();
      v20 = *(_QWORD *)(v33 + 8 * v19);
      ++v11;
      if (!v20)
      {
        v11 = v19 + 1;
        if (v19 + 1 >= v9)
          return swift_release();
        v20 = *(_QWORD *)(v33 + 8 * v11);
        if (!v20)
        {
          v11 = v19 + 2;
          if (v19 + 2 >= v9)
            return swift_release();
          v20 = *(_QWORD *)(v33 + 8 * v11);
          if (!v20)
          {
            v11 = v19 + 3;
            if (v19 + 3 >= v9)
              return swift_release();
            v20 = *(_QWORD *)(v33 + 8 * v11);
            if (!v20)
            {
              v21 = v19 + 4;
              if (v21 >= v9)
                return swift_release();
              v20 = *(_QWORD *)(v33 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  v11 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_39;
                  if (v11 >= v9)
                    return swift_release();
                  v20 = *(_QWORD *)(v33 + 8 * v11);
                  ++v21;
                  if (v20)
                    goto LABEL_32;
                }
              }
              v11 = v21;
            }
          }
        }
      }
LABEL_32:
      v8 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v11 << 6);
    }
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v18);
    v24 = specialized Dictionary.subscript.modify(v32, v22);
    if ((*(_BYTE *)(v23 + 57) & 1) == 0)
      break;
LABEL_14:
    result = ((uint64_t (*)(_QWORD *, _QWORD))v24)(v32, 0);
  }
  v25 = v23;
  v26 = *(_OWORD *)(a3 + 80);
  v30[4] = *(_OWORD *)(a3 + 64);
  v30[5] = v26;
  v30[6] = *(_OWORD *)(a3 + 96);
  v31 = *(_QWORD *)(a3 + 112);
  v27 = *(_OWORD *)(a3 + 16);
  v30[0] = *(_OWORD *)a3;
  v30[1] = v27;
  v28 = *(_OWORD *)(a3 + 48);
  v30[2] = *(_OWORD *)(a3 + 32);
  v30[3] = v28;
  result = specialized static PinchStatisticsStructs.PinchAttribute.getOcclusionAverage(_:_:)((uint64_t)v30, v22);
  if ((*(_BYTE *)(v25 + 28) & 1) != 0)
  {
    *(float *)(v25 + 24) = v29;
    *(_BYTE *)(v25 + 28) = 0;
  }
  *(float *)v25 = v29 + *(float *)v25;
  v12 = *(_DWORD *)(v25 + 4);
  v13 = __CFADD__(v12, 1);
  v14 = v12 + 1;
  if (!v13)
  {
    *(_DWORD *)(v25 + 4) = v14;
    v15 = *(float *)(v25 + 8);
    if (*(_BYTE *)(v25 + 12))
      v15 = v29;
    if (v15 >= v29)
      v15 = v29;
    *(float *)(v25 + 8) = v15;
    *(_BYTE *)(v25 + 12) = 0;
    v16 = *(float *)(v25 + 16);
    if (*(_BYTE *)(v25 + 20))
      v16 = v29;
    if (v29 > v16)
      v16 = v29;
    *(float *)(v25 + 16) = v16;
    *(_BYTE *)(v25 + 20) = 0;
    *(float *)(v25 + 32) = v29;
    *(_BYTE *)(v25 + 36) = 0;
    *(CFTimeInterval *)(v25 + 48) = CACurrentMediaTime();
    *(_BYTE *)(v25 + 56) = 0;
    goto LABEL_14;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t outlined init with take of DerivedHandAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DerivedHandAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for PinchStatisticsStructs.ReadyToPinchFrameAttribute(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PinchStatisticsStructs.ReadyToPinchFrameAttribute(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PinchStatisticsStructs.ReadyToPinchFrameAttribute()
{
  return &type metadata for PinchStatisticsStructs.ReadyToPinchFrameAttribute;
}

uint64_t destroy for TrackingIntermediateData(_QWORD *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrackingIntermediateData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v4;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v6;
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  v8 = *(_QWORD *)(a2 + 160);
  v9 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v8;
  *(_QWORD *)(a1 + 168) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrackingIntermediateData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_QWORD *)(a1 + 32) = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
      *(_QWORD *)(a1 + 96) = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      *(_QWORD *)(a1 + 128) = a2[16];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 136) = a2[17];
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    }
    else
    {
      outlined destroy of SimilarityMatrixCollection(a1);
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      v7 = *((_OWORD *)a2 + 5);
      v9 = *((_OWORD *)a2 + 2);
      v8 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a1 + 48) = v8;
      v11 = *((_OWORD *)a2 + 7);
      v10 = *((_OWORD *)a2 + 8);
      v12 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 137) = *(_OWORD *)((char *)a2 + 137);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 96) = v12;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    v14 = *((_OWORD *)a2 + 2);
    v15 = *((_OWORD *)a2 + 3);
    v16 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v16;
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v15;
    v17 = *((_OWORD *)a2 + 6);
    v18 = *((_OWORD *)a2 + 7);
    v19 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)((char *)a2 + 137);
    *(_OWORD *)(a1 + 112) = v18;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 96) = v17;
  }
  *(_QWORD *)(a1 + 160) = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of SimilarityMatrixCollection(uint64_t a1)
{
  destroy for SimilarityMatrixCollection();
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for TrackingIntermediateData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (!*(_QWORD *)a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    outlined destroy of SimilarityMatrixCollection(a1);
LABEL_5:
    v4 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v4;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v6;
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
LABEL_6:
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingIntermediateData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingIntermediateData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 160) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackingIntermediateData()
{
  return &type metadata for TrackingIntermediateData;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64VSiG_AG_s5Int32Vts5NeverOTg5061_s5Hands24TrackingIntermediateDataV10toProtoBufAA0bcD2PBVyFs6d4V_s5E25VtAH3key_Si5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v27 = *(_QWORD *)(a1 + 16);
  v29 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v29;
  v4 = specialized Dictionary.startIndex.getter(a1);
  v6 = v27;
  v5 = a1;
  v7 = 0;
  v8 = a1 + 64;
  v9 = *(_BYTE *)(a1 + 32);
  v10 = a1 + 80;
  result = 0x7FFFFFFFLL;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << v9)
  {
    v13 = (unint64_t)v4 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v3)
      goto LABEL_26;
    v14 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v4);
    if (v14 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_27;
    if (v14 > 0x7FFFFFFF)
      goto LABEL_28;
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v4);
    v17 = *(_QWORD *)(v29 + 16);
    v16 = *(_QWORD *)(v29 + 24);
    if (v17 >= v16 >> 1)
    {
      v25 = v8;
      v26 = v3;
      v24 = v10;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      result = 0x7FFFFFFFLL;
      v10 = v24;
      v8 = v25;
      v3 = v26;
      v6 = v27;
      v5 = a1;
    }
    *(_QWORD *)(v29 + 16) = v17 + 1;
    v18 = v29 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v15;
    *(_DWORD *)(v18 + 40) = v14;
    v9 = *(_BYTE *)(v5 + 32);
    v12 = 1 << v9;
    if (v4 >= 1 << v9)
      goto LABEL_29;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    if ((v19 & (1 << v4)) == 0)
      goto LABEL_30;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v3)
      goto LABEL_31;
    v20 = v19 & (-2 << (v4 & 0x3F));
    if (v20)
    {
      v12 = __clz(__rbit64(v20)) | v4 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = v13 + 1;
      v22 = (v12 + 63) >> 6;
      if (v13 + 1 < v22)
      {
        v23 = *(_QWORD *)(v8 + 8 * v21);
        if (v23)
        {
LABEL_22:
          v12 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v13)
          {
            v23 = *(_QWORD *)(v10 + 8 * v13++);
            if (v23)
            {
              v21 = v13 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v7;
    v4 = v12;
    if (v7 == v6)
      return v2;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64V5Hands18TrackingUpdateDataVG_AG_AH0fgH2PBVts5NeverOTg504_ss6d9V5Hands18fgh43VAbC0cdE2PBVIgyndr_AB3key_AE5valuetAB_AGts5J118OIegnrzr_TR010_s5Hands24c12Intermediatee27V10toProtoBufAA0bcD2PBVyFs6a28V_AA0b6UpdatedH0VtAH_AA0bjD0W6XEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char v47;
  char v48;
  int v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, TrackingUpdateDataPB));
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (_QWORD *)((char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (!v7)
    return v8;
  v38[1] = v1;
  v59 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v8 = v59;
  result = specialized Dictionary.startIndex.getter(a1);
  v11 = result;
  v12 = 0;
  v13 = a1 + 64;
  v39 = a1 + 80;
  v40 = v7;
  v41 = v10;
  v42 = a1 + 64;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
  {
    v16 = (unint64_t)v11 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_24;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    v18 = *(_QWORD *)(a1 + 56) + 96 * v11;
    v19 = *(_BYTE *)(v18 + 32);
    v20 = *(_BYTE *)(v18 + 33);
    v21 = *(_DWORD *)(v18 + 36);
    v22 = *(_BYTE *)(v18 + 40);
    v23 = *(_DWORD *)(v18 + 44);
    v24 = *(_BYTE *)(v18 + 48);
    v25 = *(_QWORD *)(v18 + 56);
    v26 = *(_BYTE *)(v18 + 64);
    v27 = *(_BYTE *)(v18 + 65);
    v28 = *(_BYTE *)(v18 + 66);
    v29 = (uint64_t)v6 + *(int *)(v44 + 48);
    v30 = *(_OWORD *)(v18 + 16);
    v45 = *(_OWORD *)v18;
    v46 = v30;
    v47 = v19;
    v48 = v20;
    v49 = v21;
    v50 = v22;
    v51 = v23;
    v52 = v24;
    v53 = v25;
    v54 = v26;
    v55 = v27;
    v56 = v28;
    v57 = *(_QWORD *)(v18 + 68);
    v58 = *(_OWORD *)(v18 + 80);
    TrackingUpdateData.toProtoBuf()(v29);
    *v6 = v17;
    v59 = v8;
    v32 = *(_QWORD *)(v8 + 16);
    v31 = *(_QWORD *)(v8 + 24);
    if (v32 >= v31 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      v8 = v59;
    }
    *(_QWORD *)(v8 + 16) = v32 + 1;
    result = outlined init with take of ImageData?((uint64_t)v6, v8+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v32, &demangling cache variable for type metadata for (UInt64, TrackingUpdateDataPB));
    v14 = 1 << *(_BYTE *)(a1 + 32);
    if (v11 >= v14)
      goto LABEL_25;
    v13 = v42;
    v33 = *(_QWORD *)(v42 + 8 * v16);
    if ((v33 & (1 << v11)) == 0)
      goto LABEL_26;
    LODWORD(v10) = v41;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v41)
      goto LABEL_27;
    v34 = v33 & (-2 << (v11 & 0x3F));
    if (v34)
    {
      v14 = __clz(__rbit64(v34)) | v11 & 0xFFFFFFFFFFFFFFC0;
      v15 = v40;
    }
    else
    {
      v35 = v16 + 1;
      v36 = (unint64_t)(v14 + 63) >> 6;
      v15 = v40;
      if (v16 + 1 < v36)
      {
        v37 = *(_QWORD *)(v42 + 8 * v35);
        if (v37)
        {
LABEL_20:
          v14 = __clz(__rbit64(v37)) + (v35 << 6);
        }
        else
        {
          while (v36 - 2 != v16)
          {
            v37 = *(_QWORD *)(v39 + 8 * v16++);
            if (v37)
            {
              v35 = v16 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v12;
    v11 = v14;
    if (v12 == v15)
      return v8;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

Swift::Void __swiftcall TrackingIntermediateData.clear()()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  char v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 160) + 16))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3 = *(_QWORD *)(v0 + 160);
    *(_QWORD *)(v0 + 160) = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt64, Int>);
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v0 + 160) = v3;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 168) + 16))
  {
    v2 = swift_isUniquelyReferenced_nonNull_native();
    v4 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 168) = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt64, TrackingUpdateData>);
    _NativeDictionary.removeAll(isUnique:)(v2);
    *(_QWORD *)(v0 + 168) = v4;
    swift_bridgeObjectRelease();
  }
}

uint64_t TrackingIntermediateData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t updated;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[6];
  uint64_t v51[3];
  _OWORD v52[18];
  _OWORD v53[2];
  _OWORD v54[8];
  _OWORD v55[3];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v48 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v47 = (uint64_t)&v45 - v8;
  v9 = (int *)type metadata accessor for SimilarityMatrixCollectionPB(0);
  v46 = *((_QWORD *)v9 - 1);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v45 - v15;
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v45 - v19;
  UnknownStorage.init()();
  v21 = *(int *)(type metadata accessor for TrackingIntermediateDataPB(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v21) = static TrackingIntermediateDataPB._StorageClass.defaultInstance;
  v49 = v1;
  outlined init with take of ImageData?(v1, (uint64_t)v52, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  outlined init with take of ImageData?((uint64_t)v52, (uint64_t)v54, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  if (_s5Hands0A7KitDataVSgWOg((uint64_t *)v54) == 1)
  {
    swift_retain();
    UnknownStorage.init()();
    v22 = &v20[v9[5]];
    v23 = type metadata accessor for Matrix2dPB(0);
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
    v24(v22, 1, 1, v23);
    v24(&v20[v9[6]], 1, 1, v23);
    v24(&v20[v9[7]], 1, 1, v23);
    v24(&v20[v9[8]], 1, 1, v23);
    v24(&v20[v9[9]], 1, 1, v23);
  }
  else
  {
    v52[16] = v54[6];
    v52[17] = v54[7];
    v53[0] = v55[0];
    *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)v55 + 9);
    v52[12] = v54[2];
    v52[13] = v54[3];
    v52[14] = v54[4];
    v52[15] = v54[5];
    v52[10] = v54[0];
    v52[11] = v54[1];
    swift_retain();
    SimilarityMatrixCollection.toProtoBuf()((uint64_t)v12);
    outlined init with take of Matrix2dPB((uint64_t)v12, (uint64_t)v16, type metadata accessor for SimilarityMatrixCollectionPB);
    outlined init with take of Matrix2dPB((uint64_t)v16, (uint64_t)v20, type metadata accessor for SimilarityMatrixCollectionPB);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingIntermediateDataPB._StorageClass(0);
    swift_allocObject();
    v25 = swift_retain();
    *(_QWORD *)(a1 + v21) = TrackingIntermediateDataPB._StorageClass.init(copying:)(v25);
    swift_release();
  }
  v26 = *(_QWORD *)(a1 + v21);
  v27 = v47;
  outlined init with take of Matrix2dPB((uint64_t)v20, v47, type metadata accessor for SimilarityMatrixCollectionPB);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v46 + 56))(v27, 0, 1, v9);
  v28 = v48;
  outlined init with take of ImageData?(v27, v48, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  v29 = v26
      + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__similarityMatrixCollection;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of SimilarityMatrixCollectionPB?(v28, v29);
  swift_endAccess();
  swift_release();
  v30 = swift_bridgeObjectRetain();
  v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64VSiG_AG_s5Int32Vts5NeverOTg5061_s5Hands24TrackingIntermediateDataV10toProtoBufAA0bcD2PBVyFs6d4V_s5E25VtAH3key_Si5valuet_tXEfU_Tf1cn_n(v30);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v31 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Int32>);
    v32 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v32 = MEMORY[0x24BEE4B00];
  }
  v51[0] = v32;
  v33 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v33, 1, v51);
  swift_bridgeObjectRelease();
  v34 = v51[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingIntermediateDataPB._StorageClass(0);
    swift_allocObject();
    v35 = swift_retain();
    *(_QWORD *)(a1 + v21) = TrackingIntermediateDataPB._StorageClass.init(copying:)(v35);
    swift_release();
  }
  v36 = (uint64_t *)(*(_QWORD *)(a1 + v21)
                  + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__dataAssociationResult);
  swift_beginAccess();
  *v36 = v34;
  swift_bridgeObjectRelease();
  v37 = swift_bridgeObjectRetain();
  updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64V5Hands18TrackingUpdateDataVG_AG_AH0fgH2PBVts5NeverOTg504_ss6d9V5Hands18fgh43VAbC0cdE2PBVIgyndr_AB3key_AE5valuetAB_AGts5J118OIegnrzr_TR010_s5Hands24c12Intermediatee27V10toProtoBufAA0bcD2PBVyFs6a28V_AA0b6UpdatedH0VtAH_AA0bjD0W6XEfU0_Tf3nnnpf_nTf1cn_n(v37);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(updated + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TrackingUpdateDataPB>);
    v39 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v39 = MEMORY[0x24BEE4B00];
  }
  v50[0] = v39;
  v40 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v40, 1, v50);
  swift_bridgeObjectRelease();
  v41 = v50[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingIntermediateDataPB._StorageClass(0);
    swift_allocObject();
    v42 = swift_retain();
    *(_QWORD *)(a1 + v21) = TrackingIntermediateDataPB._StorageClass.init(copying:)(v42);
    swift_release();
  }
  v43 = (uint64_t *)(*(_QWORD *)(a1 + v21)
                  + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__trackingUpdateData);
  swift_beginAccess();
  *v43 = v41;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance TrackingIntermediateData@<X0>(uint64_t a1@<X8>)
{
  return TrackingIntermediateData.toProtoBuf()(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TrackingIntermediateData(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[11];
  _OWORD v14[11];

  v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v13[10] = a1[10];
  v3 = a1[5];
  v13[4] = a1[4];
  v13[5] = v3;
  v4 = a1[7];
  v13[6] = a1[6];
  v13[7] = v4;
  v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  v6 = a1[3];
  v13[2] = a1[2];
  v13[3] = v6;
  v7 = a2[9];
  v14[8] = a2[8];
  v14[9] = v7;
  v14[10] = a2[10];
  v8 = a2[5];
  v14[4] = a2[4];
  v14[5] = v8;
  v9 = a2[7];
  v14[6] = a2[6];
  v14[7] = v9;
  v10 = a2[1];
  v14[0] = *a2;
  v14[1] = v10;
  v11 = a2[3];
  v14[2] = a2[2];
  v14[3] = v11;
  return specialized static TrackingIntermediateData.== infix(_:_:)((uint64_t)v13, (uint64_t)v14) & 1;
}

unint64_t lazy protocol witness table accessor for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB;
  if (!lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB)
  {
    v1 = type metadata accessor for TrackingIntermediateDataPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingIntermediateDataPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB);
  }
  return result;
}

uint64_t outlined init with copy of (UInt64, TrackingUpdateDataPB)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, TrackingUpdateDataPB));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TrackingUpdateDataPB(uint64_t a1)
{
  uint64_t updated;

  updated = type metadata accessor for TrackingUpdateDataPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 8))(a1, updated);
  return a1;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized static TrackingIntermediateData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  _BYTE v86[160];
  _QWORD v87[4];
  char v88;
  char v89;
  unsigned int v90;
  char v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[21];
  uint64_t v117[20];
  uint64_t v118[20];
  uint64_t v119[21];

  outlined init with take of ImageData?(a1, (uint64_t)v117, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  outlined init with take of ImageData?(a2, (uint64_t)v118, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  outlined init with take of ImageData?((uint64_t)v117, (uint64_t)v119, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  if (_s5Hands0A7KitDataVSgWOg(v119) != 1)
  {
    outlined init with take of ImageData?((uint64_t)v118, (uint64_t)&v102, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
    if (_s5Hands0A7KitDataVSgWOg((uint64_t *)&v102) != 1)
    {
      outlined init with take of ImageData?((uint64_t)v118, (uint64_t)v86, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
      outlined init with take of ImageData?((uint64_t)v117, (uint64_t)v87, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
      if (!MatrixDouble2d.almostEqual(to:withThreshold:)(*(Hands::MatrixDouble2d *)v86, 2.22044605e-16))
        return 0;
      if (!MatrixDouble2d.almostEqual(to:withThreshold:)(*(Hands::MatrixDouble2d *)&v86[32], 2.22044605e-16))
        return 0;
      if (!MatrixDouble2d.almostEqual(to:withThreshold:)(*(Hands::MatrixDouble2d *)&v86[64], 2.22044605e-16))
        return 0;
      if (!MatrixDouble2d.almostEqual(to:withThreshold:)(*(Hands::MatrixDouble2d *)&v86[96], 2.22044605e-16))
        return 0;
      result = MatrixDouble2d.almostEqual(to:withThreshold:)(*(Hands::MatrixDouble2d *)&v86[128], 2.22044605e-16);
      if ((result & 1) == 0)
        return 0;
      goto LABEL_3;
    }
LABEL_29:
    outlined init with take of ImageData?((uint64_t)v117, (uint64_t)&v102, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
    outlined init with take of ImageData?((uint64_t)v118, (uint64_t)v116, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
    outlined retain of SimilarityMatrixCollection?(v117);
    outlined retain of SimilarityMatrixCollection?(v118);
    outlined release of (SimilarityMatrixCollection?, SimilarityMatrixCollection?)((uint64_t *)&v102);
    return 0;
  }
  outlined init with take of ImageData?((uint64_t)v118, (uint64_t)&v102, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  result = _s5Hands0A7KitDataVSgWOg((uint64_t *)&v102);
  if ((_DWORD)result != 1)
    goto LABEL_29;
LABEL_3:
  v5 = *(_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(a2 + 160);
  if (v6 == *(_QWORD *)(v7 + 16))
  {
    v8 = 0;
    v9 = v5 + 64;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v11 = -1;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v84 = (unint64_t)(v10 + 63) >> 6;
    while (1)
    {
      if (v12)
      {
        v13 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v14 = v13 | (v8 << 6);
        if (!v6)
          return 0;
      }
      else
      {
        v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
          return result;
        }
        if (v15 >= v84)
          goto LABEL_36;
        v16 = *(_QWORD *)(v9 + 8 * v15);
        ++v8;
        if (!v16)
        {
          v8 = v15 + 1;
          if (v15 + 1 >= v84)
            goto LABEL_36;
          v16 = *(_QWORD *)(v9 + 8 * v8);
          if (!v16)
          {
            v8 = v15 + 2;
            if (v15 + 2 >= v84)
              goto LABEL_36;
            v16 = *(_QWORD *)(v9 + 8 * v8);
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v84)
              {
LABEL_36:
                v25 = *(_QWORD *)(a1 + 168);
                v85 = *(_QWORD *)(a2 + 168);
                if (*(_QWORD *)(v25 + 16) == *(_QWORD *)(v85 + 16))
                {
                  v71 = v25 + 64;
                  v26 = 1 << *(_BYTE *)(v25 + 32);
                  v27 = -1;
                  if (v26 < 64)
                    v27 = ~(-1 << v26);
                  v28 = v27 & *(_QWORD *)(v25 + 64);
                  v72 = (unint64_t)(v26 + 63) >> 6;
                  result = swift_bridgeObjectRetain();
                  v29 = 0;
                  v73 = v25;
                  while (1)
                  {
                    if (v28)
                    {
                      v30 = __clz(__rbit64(v28));
                      v31 = (v28 - 1) & v28;
                      v32 = v30 | (v29 << 6);
                    }
                    else
                    {
                      v33 = v29 + 1;
                      if (__OFADD__(v29, 1))
                        goto LABEL_82;
                      if (v33 >= v72)
                      {
LABEL_79:
                        swift_release();
                        return 1;
                      }
                      v34 = *(_QWORD *)(v71 + 8 * v33);
                      ++v29;
                      if (!v34)
                      {
                        v29 = v33 + 1;
                        if (v33 + 1 >= v72)
                          goto LABEL_79;
                        v34 = *(_QWORD *)(v71 + 8 * v29);
                        if (!v34)
                        {
                          v29 = v33 + 2;
                          if (v33 + 2 >= v72)
                            goto LABEL_79;
                          v34 = *(_QWORD *)(v71 + 8 * v29);
                          if (!v34)
                          {
                            v35 = v33 + 3;
                            if (v35 >= v72)
                              goto LABEL_79;
                            v34 = *(_QWORD *)(v71 + 8 * v35);
                            if (!v34)
                            {
                              while (1)
                              {
                                v29 = v35 + 1;
                                if (__OFADD__(v35, 1))
                                  goto LABEL_83;
                                if (v29 >= v72)
                                  goto LABEL_79;
                                v34 = *(_QWORD *)(v71 + 8 * v29);
                                ++v35;
                                if (v34)
                                  goto LABEL_55;
                              }
                            }
                            v29 = v35;
                          }
                        }
                      }
LABEL_55:
                      v31 = (v34 - 1) & v34;
                      v32 = __clz(__rbit64(v34)) + (v29 << 6);
                    }
                    if (!*(_QWORD *)(v85 + 16))
                      goto LABEL_77;
                    v74 = v31;
                    v36 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v32);
                    v37 = *(_QWORD *)(v25 + 56) + 96 * v32;
                    v76 = *(_QWORD *)v37;
                    v77 = *(_QWORD *)(v37 + 8);
                    v78 = *(_QWORD *)(v37 + 16);
                    v79 = *(_QWORD *)(v37 + 24);
                    v38 = *(unsigned __int8 *)(v37 + 32);
                    v39 = *(unsigned __int8 *)(v37 + 33);
                    v40 = *(_DWORD *)(v37 + 36);
                    v41 = *(unsigned __int8 *)(v37 + 40);
                    v42 = *(unsigned int *)(v37 + 44);
                    v80 = *(unsigned __int8 *)(v37 + 48);
                    v43 = *(unsigned __int8 *)(v37 + 64);
                    v44 = *(unsigned __int8 *)(v37 + 65);
                    v75 = *(unsigned __int8 *)(v37 + 66);
                    v45 = *(_DWORD *)(v37 + 68);
                    v46 = *(_DWORD *)(v37 + 72);
                    v81 = *(_QWORD *)(v37 + 56);
                    v82 = *(_QWORD *)(v37 + 80);
                    v83 = *(_QWORD *)(v37 + 88);
                    specialized __RawDictionaryStorage.find<A>(_:)(v36);
                    if ((v47 & 1) == 0)
                      goto LABEL_77;
                    v48 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
                    if ((v49 & 1) == 0)
                    {
                      v66 = 256;
                      if (v39)
                        v67 = 256;
                      else
                        v67 = 0;
                      v68 = v67 | v38 | ((unint64_t)v40 << 32);
                      v106 = 0u;
                      v107 = 0u;
                      v104 = 0u;
                      v105 = 0u;
                      if (!v44)
                        v66 = 0;
                      v69 = v66 | v43;
                      v102 = 0uLL;
                      v103 = 0uLL;
                      v70 = 0x10000;
                      if (!v75)
                        v70 = 0;
                      v108 = v76;
                      v109 = v77;
                      v110 = v78;
                      v111 = v79;
                      v112 = v68;
                      v113 = v41 | (v42 << 32);
                      v114 = v80;
                      v115 = v81;
                      v116[0] = v69 | v70 | ((unint64_t)v45 << 32);
                      v116[1] = v46;
                      v116[2] = v82;
                      v116[3] = v83;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      outlined release of (TrackingUpdateData?, TrackingUpdateData?)((uint64_t *)&v102);
LABEL_77:
                      swift_release();
                      return 0;
                    }
                    v50 = *(_QWORD *)(v85 + 56) + 96 * v48;
                    v51 = *(unsigned __int8 *)(v50 + 48);
                    v52 = *(_QWORD *)(v50 + 56);
                    v53 = v29;
                    v54 = *(_QWORD *)(v50 + 80);
                    v55 = *(_QWORD *)(v50 + 88);
                    if (*(_BYTE *)(v50 + 33))
                      v56 = 256;
                    else
                      v56 = 0;
                    v57 = v56 | *(unsigned __int8 *)(v50 + 32) | ((unint64_t)*(unsigned int *)(v50 + 36) << 32);
                    v58 = *(unsigned __int8 *)(v50 + 40) | ((unint64_t)*(unsigned int *)(v50 + 44) << 32);
                    if (*(_BYTE *)(v50 + 65))
                      v59 = 256;
                    else
                      v59 = 0;
                    v60 = v59 | *(unsigned __int8 *)(v50 + 64);
                    v61 = 0x10000;
                    if (!*(_BYTE *)(v50 + 66))
                      v61 = 0;
                    v62 = v60 | v61;
                    v63 = *(unsigned int *)(v50 + 72);
                    v64 = v62 | ((unint64_t)*(unsigned int *)(v50 + 68) << 32);
                    v102 = *(_OWORD *)v50;
                    v103 = *(_OWORD *)(v50 + 16);
                    *(_QWORD *)&v104 = v57;
                    *((_QWORD *)&v104 + 1) = v58;
                    *(_QWORD *)&v105 = v51;
                    *((_QWORD *)&v105 + 1) = v52;
                    *(_QWORD *)&v106 = v64;
                    *((_QWORD *)&v106 + 1) = v63;
                    *(_QWORD *)&v107 = v54;
                    *((_QWORD *)&v107 + 1) = v55;
                    v87[0] = v76;
                    v87[1] = v77;
                    v87[2] = v78;
                    v87[3] = v79;
                    v88 = v38;
                    v89 = v39;
                    v90 = v40;
                    v91 = v41;
                    v92 = v42;
                    LOBYTE(v93) = v80;
                    v94 = v81;
                    v95 = v43;
                    v96 = v44;
                    v97 = v75;
                    v98 = v45;
                    LODWORD(v99) = v46;
                    v100 = v82;
                    v101 = v83;
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain_n();
                    v65 = specialized static TrackingUpdateData.== infix(_:_:)((float *)&v102, (uint64_t)v87);
                    v29 = v53;
                    swift_bridgeObjectRelease();
                    v25 = v73;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    result = swift_bridgeObjectRelease();
                    v28 = v74;
                    if ((v65 & 1) == 0)
                      goto LABEL_77;
                  }
                }
                return 0;
              }
              v16 = *(_QWORD *)(v9 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v8 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_81;
                  if (v8 >= v84)
                    goto LABEL_36;
                  v16 = *(_QWORD *)(v9 + 8 * v8);
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v8 = v17;
            }
          }
        }
LABEL_23:
        v12 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v8 << 6);
        if (!v6)
          return 0;
      }
      v18 = 8 * v14;
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v18);
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
      specialized __RawDictionaryStorage.find<A>(_:)(v19);
      if ((v21 & 1) == 0)
        return 0;
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
      if ((v23 & 1) == 0)
        return 0;
      v24 = v22;
      result = 0;
      if (*(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v24) != v20)
        return result;
    }
  }
  return 0;
}

uint64_t *outlined retain of SimilarityMatrixCollection?(uint64_t *a1)
{
  outlined copy of SimilarityMatrixCollection?(*a1);
  return a1;
}

uint64_t outlined copy of SimilarityMatrixCollection?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *outlined release of (SimilarityMatrixCollection?, SimilarityMatrixCollection?)(uint64_t *a1)
{
  uint64_t v3;

  v3 = a1[20];
  outlined consume of SimilarityMatrixCollection?(*a1);
  outlined consume of SimilarityMatrixCollection?(v3);
  return a1;
}

uint64_t outlined consume of SimilarityMatrixCollection?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *outlined release of (TrackingUpdateData?, TrackingUpdateData?)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = a1[13];
  v10 = a1[12];
  v3 = a1[14];
  v4 = a1[15];
  v5 = a1[16];
  v6 = a1[17];
  v7 = a1[18];
  v8 = a1[19];
  outlined consume of TrackingUpdateData?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  outlined consume of TrackingUpdateData?(v10, v2, v3, v4, v5, v6, v7, v8);
  return a1;
}

uint64_t outlined consume of TrackingUpdateData?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackingHandFilter()
{
  return &type metadata for TrackingHandFilter;
}

void one-time initialization function for _filterHandByDistanceRefCameras()
{
  static DetectionResultSync._filterHandByDistanceRefCameras = (uint64_t)&outlined read-only object #0 of one-time initialization function for _filterHandByDistanceRefCameras;
}

Swift::Void __swiftcall DetectionResultSync.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  float v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  *(_BYTE *)(v2 + 24) = -[HandsKitConfig EnableEnrolment](a1, sel_EnableEnrolment);
  -[HandsKitConfig HandRadius](a1, sel_HandRadius);
  *(_DWORD *)(v2 + 20) = v4;
  *(_BYTE *)(v2 + 32) = -[HandsKitConfig SerializeInternalData](a1, sel_SerializeInternalData);
  -[HandsKitConfig FilterDetectedHandsByDistanceThresh](a1, sel_FilterDetectedHandsByDistanceThresh);
  *(float *)(v2 + 28) = v5;
  *(_BYTE *)(v2 + 25) = v5 > 0.0;
  *(_BYTE *)(v2 + 56) = -[HandsKitConfig EnableDetectionSensitivity](a1, sel_EnableDetectionSensitivity);
  -[HandsKitConfig DetectionSensitivityNoiseMagnitude](a1, sel_DetectionSensitivityNoiseMagnitude);
  *(_DWORD *)(v2 + 60) = v6;
  *(_BYTE *)(v2 + 64) = -[HandsKitConfig PosePipelineType](a1, sel_PosePipelineType) != 2;
  type metadata accessor for Detection2DComputePipelineFactory();
  static Detection2DComputePipelineFactory.createModelParams(config:)(a1);
  *(_QWORD *)(v2 + 40) = v7;
  *(_QWORD *)(v2 + 48) = v8;
  swift_release();
}

uint64_t DetectionResultSync.sync(detectionSpecItems:detectionOuputs:input:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  float32x4_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  char v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  float v40;
  char v41;
  __int128 v42;
  float32x2_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  char v72;
  float32x4_t v73;
  float32x2_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char v78;
  float32x4_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  __int8 v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  char v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  _QWORD *v137;
  __int128 v138;
  __int128 v139;
  _QWORD *v140;
  __int128 v141;
  __int128 v142;
  unint64_t v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float32x4_t *v152;
  float32x4_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  float32x4_t v163;
  int v164;
  float32x4_t v165;
  __int128 v166;
  char v167;
  int32x4_t v168;
  float32x4_t v169;
  float32x4_t v170[35];
  _QWORD v171[70];
  _OWORD v172[35];
  _QWORD v173[72];

  v5 = v4;
  v148 = a4;
  v145 = (_QWORD *)((char *)a4 + 396);
  v146 = a1;
  v144 = (char *)&v172[24] + 8;
  v8 = type metadata accessor for HandDescriptor();
  v156 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v9);
  v154 = (uint64_t)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v149 = (uint64_t)&v143 - v13;
  MEMORY[0x24BDAC7A8](v14, v15);
  v159 = (uint64_t)&v143 - v16;
  MEMORY[0x24BDAC7A8](v17, v18);
  v158 = (uint64_t)&v143 - v19;
  MEMORY[0x24BDAC7A8](v20, v21);
  v157 = (uint64_t)&v143 - v22;
  v24 = *a2;
  v23 = a2[1];
  memcpy(v173, a3, 0x228uLL);
  v147 = v173[57];
  Hands_trace_CBridge();
  memcpy(v172, a3, 0x228uLL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Bool, [DetectionResult])>);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23D9A7050;
  *(_BYTE *)(v25 + 32) = 1;
  v161 = v25 + 32;
  v162 = v25;
  *(_QWORD *)(v25 + 40) = v24;
  *(_BYTE *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 56) = v23;
  outlined retain of HandsKitData(v173);
  v152 = &v170[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v28 = 0;
  v29 = 0;
  v30 = MEMORY[0x24BEE4AF8];
  v31 = xmmword_23D9A7060;
  v153 = (float32x4_t)xmmword_23D9A7060;
  v143 = (unint64_t)"eMagnitude";
  v150 = 0x800000023D9D0460;
  v151 = 0x800000023D9D04D0;
  v155 = v5;
  do
  {
    if (v29 >= *(_QWORD *)(v162 + 16))
    {
      __break(1u);
LABEL_78:
      __break(1u);
      return result;
    }
    v32 = v28;
    v33 = (unsigned __int8 *)(v161 + 16 * v29);
    v34 = *((_QWORD *)v33 + 1);
    if (*(_QWORD *)(v34 + 16))
    {
      v166 = v31;
      v163 = v27;
      v164 = v28;
      v35 = *(_QWORD *)(v5 + 40);
      if (!v35)
        goto LABEL_78;
      v160 = *v33;
      v36 = *(_QWORD *)(v5 + 48);
      swift_bridgeObjectRetain();
      swift_retain();
      v37 = (_QWORD *)specialized static DetectionUtils.topSelectionByUvO(handCandidates:modelParams:)(v34, v35, v36);
      v39 = v38;
      swift_release();
      swift_bridgeObjectRelease();
      if (v39[2])
      {
        memcpy(v171, v172, 0x228uLL);
        v40 = *(float *)(v5 + 60);
        v41 = *(_BYTE *)(v5 + 56);
        *(_QWORD *)&v42 = 0;
        DWORD2(v42) = 0;
        HIDWORD(v42) = HIDWORD(v166);
        v166 = v42;
        memcpy(v170, v172, 0x228uLL);
        outlined retain of HandsKitData(v171);
        v43 = (float32x2_t)specialized static DetectionResultSync.estimate3D(_:_:)(v39, (uint64_t)v170);
        v46 = v45;
        if ((v47 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v165 = (float32x4_t)v166;
        }
        else
        {
          *(float32x2_t *)v48.f32 = v43;
          v48.i64[1] = v44;
          if ((v41 & 1) != 0)
            *(float32x2_t *)v48.f32 = specialized static AlgorithmSensitivity.add_3DNoise(_center3D:noise_magnitude:)(*(_QWORD *)&v43, v43, v40);
          v165 = v48;
          swift_bridgeObjectRelease();
          v39 = v46;
        }
        outlined release of HandsKitData(v171);
        v49 = v39[2];
        if (v49)
        {
          v50 = v49 - 1;
          v51 = 4;
          v52 = MEMORY[0x24BEE4AF8];
          while (1)
          {
            v53 = *(float32x4_t *)&v39[v51 + 10];
            v54 = *(float32x4_t *)((char *)&v39[v51 + 11] + 1);
            v55 = *(float32x4_t *)&v39[v51 + 6];
            v170[4] = *(float32x4_t *)&v39[v51 + 8];
            v56 = *(float32x4_t *)&v39[v51 + 2];
            v57 = *(float32x4_t *)&v39[v51 + 4];
            v170[0] = *(float32x4_t *)&v39[v51];
            v170[1] = v56;
            *(float32x4_t *)((char *)&v170[5] + 9) = v54;
            v170[5] = v53;
            v170[2] = v57;
            v170[3] = v55;
            if (v170[4].u8[8] == 1)
            {
              outlined retain of DetectionResult((uint64_t)v170);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v168.i64[0] = v52;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v52 + 16) + 1, 1);
                v52 = v168.i64[0];
              }
              v60 = *(_QWORD *)(v52 + 16);
              v59 = *(_QWORD *)(v52 + 24);
              if (v60 >= v59 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
                v52 = v168.i64[0];
              }
              *(_QWORD *)(v52 + 16) = v60 + 1;
              v61 = v52 + 112 * v60;
              v62 = v170[0];
              v63 = v170[2];
              *(float32x4_t *)(v61 + 48) = v170[1];
              *(float32x4_t *)(v61 + 64) = v63;
              *(float32x4_t *)(v61 + 32) = v62;
              v64 = v170[3];
              v65 = v170[4];
              v66 = v170[5];
              *(float32x4_t *)(v61 + 121) = *(float32x4_t *)((char *)&v170[5] + 9);
              *(float32x4_t *)(v61 + 96) = v65;
              *(float32x4_t *)(v61 + 112) = v66;
              *(float32x4_t *)(v61 + 80) = v64;
            }
            if (!v50)
              break;
            --v50;
            v51 += 14;
          }
          swift_bridgeObjectRelease();
          v5 = v155;
        }
        else
        {
          swift_bridgeObjectRelease();
          v52 = MEMORY[0x24BEE4AF8];
        }
        v168 = (int32x4_t)v165;
        v169 = v165;
        memcpy(v170, v171, 0x228uLL);
        outlined retain of HandsKitData(v171);
        v67 = specialized static DetectionResultSync.checkIfValidCenter(_:_:_:_:_:)(&v168, v52, (uint64_t)v170, 0.1136);
        outlined release of HandsKitData(v171);
        if ((v67 & 1) != 0)
        {
          memcpy(v170, v171, 0x228uLL);
          v168 = (int32x4_t)v165;
          v169 = v165;
          outlined retain of HandsKitData(v171);
          v68 = v157;
          DetectionResultSync.buildHandDescripor(_:_:_:_:)((uint64_t)v170, &v168, v160, v157);
          swift_release();
          outlined release of HandsKitData(v171);
          outlined init with copy of HandDescriptor(v68, v158);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
          v70 = *(_QWORD *)(v30 + 16);
          v69 = *(_QWORD *)(v30 + 24);
          if (v70 >= v69 >> 1)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1, v30);
          *(_QWORD *)(v30 + 16) = v70 + 1;
          outlined init with take of HandDescriptor(v158, v30+ ((*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80))+ *(_QWORD *)(v156 + 72) * v70);
          outlined destroy of HandDescriptor(v157);
          if (!v37[2])
          {
LABEL_2:
            result = swift_bridgeObjectRelease();
            v27 = v163;
            v32 = v164;
            v31 = v166;
            goto LABEL_3;
          }
        }
        else
        {
          swift_release();
          if (!v37[2])
            goto LABEL_2;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        if (!v37[2])
          goto LABEL_2;
      }
      memcpy(v171, v172, 0x228uLL);
      v71 = *(float *)(v5 + 60);
      v72 = *(_BYTE *)(v5 + 56);
      v73.i64[0] = 0;
      v73.i32[2] = 0;
      v73.i32[3] = v163.i32[3];
      v163 = v73;
      memcpy(v170, v172, 0x228uLL);
      outlined retain of HandsKitData(v171);
      v74 = (float32x2_t)specialized static DetectionResultSync.estimate3D(_:_:)(v37, (uint64_t)v170);
      v77 = v76;
      if ((v78 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v165 = v163;
      }
      else
      {
        *(float32x2_t *)v79.f32 = v74;
        v79.i64[1] = v75;
        if ((v72 & 1) != 0)
          *(float32x2_t *)v79.f32 = specialized static AlgorithmSensitivity.add_3DNoise(_center3D:noise_magnitude:)(*(_QWORD *)&v74, v74, v71);
        v165 = v79;
        swift_bridgeObjectRelease();
        v37 = v77;
      }
      outlined release of HandsKitData(v171);
      v168 = (int32x4_t)v165;
      v169 = v165;
      memcpy(v170, v171, 0x228uLL);
      outlined retain of HandsKitData(v171);
      v80 = specialized static DetectionResultSync.checkIfValidCenter(_:_:_:_:_:)(&v168, (uint64_t)v37, (uint64_t)v170, 0.1136);
      outlined release of HandsKitData(v171);
      if ((v80 & 1) != 0)
      {
        v81 = v37[2];
        if (v81)
        {
          v82 = v81 - 1;
          v83 = 4;
          v84 = MEMORY[0x24BEE4AF8];
          while (1)
          {
            v85 = *(float32x4_t *)&v37[v83 + 10];
            v86 = *(float32x4_t *)((char *)&v37[v83 + 11] + 1);
            v87 = *(float32x4_t *)&v37[v83 + 6];
            v170[4] = *(float32x4_t *)&v37[v83 + 8];
            v88 = *(float32x4_t *)&v37[v83 + 2];
            v89 = *(float32x4_t *)&v37[v83 + 4];
            v170[0] = *(float32x4_t *)&v37[v83];
            v170[1] = v88;
            *(float32x4_t *)((char *)&v170[5] + 9) = v86;
            v170[5] = v85;
            v170[2] = v89;
            v170[3] = v87;
            if (v170[4].u8[8] == 1)
            {
              outlined retain of DetectionResult((uint64_t)v170);
              v90 = swift_isUniquelyReferenced_nonNull_native();
              v168.i64[0] = v84;
              if ((v90 & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v84 + 16) + 1, 1);
                v84 = v168.i64[0];
              }
              v92 = *(_QWORD *)(v84 + 16);
              v91 = *(_QWORD *)(v84 + 24);
              if (v92 >= v91 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
                v84 = v168.i64[0];
              }
              *(_QWORD *)(v84 + 16) = v92 + 1;
              v93 = v84 + 112 * v92;
              v94 = v170[0];
              v95 = v170[2];
              *(float32x4_t *)(v93 + 48) = v170[1];
              *(float32x4_t *)(v93 + 64) = v95;
              *(float32x4_t *)(v93 + 32) = v94;
              v96 = v170[3];
              v97 = v170[4];
              v98 = v170[5];
              *(float32x4_t *)(v93 + 121) = *(float32x4_t *)((char *)&v170[5] + 9);
              *(float32x4_t *)(v93 + 96) = v97;
              *(float32x4_t *)(v93 + 112) = v98;
              *(float32x4_t *)(v93 + 80) = v96;
            }
            if (!v82)
              break;
            --v82;
            v83 += 14;
          }
          swift_bridgeObjectRelease();
          v5 = v155;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        memcpy(v170, v171, 0x228uLL);
        v168 = (int32x4_t)v165;
        v169 = v165;
        outlined retain of HandsKitData(v171);
        DetectionResultSync.buildHandDescripor(_:_:_:_:)((uint64_t)v170, &v168, v160, v159);
        swift_release();
        outlined release of HandsKitData(v171);
        if ((*(_BYTE *)(v5 + 25) & 1) != 0
          && (v170[0] = v165,
              v170[1] = v165,
              (specialized static DetectionResultSync.checkIfEgocentricHandByDistance(_:_:_:isN301:)(v170, v173[61], *(float *)(v5 + 28)) & 1) == 0))
        {
          outlined init with copy of HandDescriptor(v159, v149);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
          v104 = *(_QWORD *)(v30 + 16);
          v103 = *(_QWORD *)(v30 + 24);
          if (v104 >= v103 >> 1)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1, v30);
          *(_QWORD *)(v30 + 16) = v104 + 1;
          outlined init with take of HandDescriptor(v149, v30+ ((*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80))+ *(_QWORD *)(v156 + 72) * v104);
        }
        else
        {
          v100 = v171[0];
          outlined init with copy of HandDescriptor(v159, v154);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v100 + 16) + 1, 1, v100);
          v102 = *(_QWORD *)(v100 + 16);
          v101 = *(_QWORD *)(v100 + 24);
          if (v102 >= v101 >> 1)
            v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1, v100);
          *(_QWORD *)(v100 + 16) = v102 + 1;
          outlined init with take of HandDescriptor(v154, v100+ ((*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80))+ *(_QWORD *)(v156 + 72) * v102);
          *(_QWORD *)&v172[0] = v100;
        }
        result = outlined destroy of HandDescriptor(v159);
      }
      else
      {
        swift_bridgeObjectRelease();
        v170[0] = v153;
        v99 = v152;
        v152->i64[0] = 0;
        v99->i64[1] = 0;
        v169.i64[1] = MEMORY[0x24BEE0D00];
        v168.i64[0] = 0xD000000000000036;
        v168.i64[1] = v151;
        specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000069, v150, 102, (uint64_t *)v170, (uint64_t)&v168, MEMORY[0x24BEE4AF8]);
        result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&v168);
      }
      v32 = v164;
      v31 = v166;
      v27 = v163;
    }
LABEL_3:
    v28 = 1;
    v29 = 1;
  }
  while ((v32 & 1) == 0);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Bool, [DetectionResult]));
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Hands_trace_CBridge();
  v171[0] = 0;
  LOBYTE(v171[1]) = 1;
  v105 = *(unsigned __int8 *)(v5 + 32);
  v106 = swift_bridgeObjectRetain();
  HandsKitData.recordRejected(hands:reason:save:)(v106, (uint64_t)v171, v105);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v5 + 32) == 1)
  {
    v107 = *((_QWORD *)&v172[0] + 1);
    swift_bridgeObjectRelease();
    if (!v107)
    {
      *((_QWORD *)&v172[0] + 1) = MEMORY[0x24BEE4AF8];
      v172[1] = 0uLL;
      v172[2] = 2uLL;
      v172[3] = 0uLL;
      *(_QWORD *)&v172[4] = MEMORY[0x24BEE4AF8];
    }
    v108 = v146;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)&v172[0] + 1) = v108;
  }
  else
  {
    swift_bridgeObjectRelease();
    v108 = v146;
  }
  v109 = *(_QWORD *)&v172[0];
  if (*(_QWORD *)(*(_QWORD *)&v172[0] + 16) <= 2uLL)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v110 = *((_QWORD *)&v172[4] + 1);
    result = LOBYTE(v172[5]);
    v111 = DWORD1(v172[5]);
    v112 = *(_QWORD *)&v172[8];
    v113 = *(_QWORD *)&v172[10];
    v114 = *((_QWORD *)&v172[11] + 1);
    v115 = v172[13];
    v116 = v172[14];
    v117 = v172[15];
    v118 = v172[16];
    v119 = v172[17];
    v120 = v172[18];
    v121 = v172[19];
    v122 = v172[20];
    v123 = *((_QWORD *)&v172[22] + 1);
    v124 = *(_QWORD *)&v172[24];
    v125 = v144;
    v126 = *v144;
    v127 = *(_QWORD *)(v144 + 4);
    v128 = v172[11];
    v129 = DWORD1(v172[25]);
    v130 = DWORD2(v172[25]);
    v131 = v144[52];
    v132 = v144[72];
    v133 = *(_OWORD *)((char *)&v172[29] + 8);
    v134 = *((_QWORD *)&v172[30] + 1);
    v135 = v172[33];
    v136 = *(_QWORD *)&v172[34];
    LOBYTE(v171[0]) = v172[5];
    v170[0].i8[0] = BYTE8(v172[8]);
    v168.i8[0] = v126;
    v167 = v131;
    v137 = v148;
    *v148 = v109;
    *(_OWORD *)(v137 + 1) = *(_OWORD *)((char *)v172 + 8);
    *(_OWORD *)(v137 + 3) = *(_OWORD *)((char *)&v172[1] + 8);
    *(_OWORD *)(v137 + 5) = *(_OWORD *)((char *)&v172[2] + 8);
    *(_OWORD *)(v137 + 7) = *(_OWORD *)((char *)&v172[3] + 8);
    v137[9] = v110;
    *((_BYTE *)v137 + 80) = result;
    *((_DWORD *)v137 + 21) = v111;
    v137[11] = *((_QWORD *)&v172[5] + 1);
    v138 = v172[7];
    *((_OWORD *)v137 + 6) = v172[6];
    *((_OWORD *)v137 + 7) = v138;
    v137[16] = v112;
    *((_BYTE *)v137 + 136) = v170[0].i8[0];
    *((_OWORD *)v137 + 9) = v172[9];
    v137[20] = v113;
    v137[21] = v108;
    *((_DWORD *)v137 + 44) = v128;
    v137[23] = v114;
    *((_OWORD *)v137 + 12) = v172[12];
    *((_OWORD *)v137 + 13) = v115;
    *((_OWORD *)v137 + 14) = v116;
    *((_OWORD *)v137 + 15) = v117;
    *((_OWORD *)v137 + 16) = v118;
    *((_OWORD *)v137 + 17) = v119;
    *((_OWORD *)v137 + 18) = v120;
    *((_OWORD *)v137 + 19) = v121;
    v139 = v172[21];
    *((_OWORD *)v137 + 20) = v122;
    *((_OWORD *)v137 + 21) = v139;
    v137[44] = *(_QWORD *)&v172[22];
    v137[45] = v123;
    *((_OWORD *)v137 + 23) = v172[23];
    v137[48] = v124;
    *((_BYTE *)v137 + 392) = v168.i8[0];
    v140 = v145;
    *v145 = v127;
    *((_DWORD *)v137 + 101) = v129;
    *((_DWORD *)v137 + 102) = v130;
    v141 = *(_OWORD *)(v125 + 36);
    *((_OWORD *)v140 + 1) = *(_OWORD *)(v125 + 20);
    *((_OWORD *)v140 + 2) = v141;
    *((_BYTE *)v137 + 444) = v167;
    *((_OWORD *)v137 + 28) = v172[28];
    *((_BYTE *)v137 + 464) = v132;
    *(_OWORD *)(v137 + 59) = v133;
    v137[61] = v134;
    v142 = v172[32];
    *((_OWORD *)v137 + 31) = v172[31];
    *((_OWORD *)v137 + 32) = v142;
    *((_OWORD *)v137 + 33) = v135;
    v137[68] = v136;
  }
  else
  {
    v171[3] = MEMORY[0x24BEE0D00];
    v171[0] = 0xD000000000000021;
    v171[1] = 0x800000023D9D0510;
    type metadata accessor for HandyLoggerNeo();
    v170[0] = v153;
    v170[1] = 0uLL;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v170, 0xD000000000000069, v143 | 0x8000000000000000, 118, (uint64_t)v171, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v171);
    return (uint64_t)memcpy(v148, v172, 0x228uLL);
  }
  return result;
}

uint64_t DetectionResultSync.buildHandDescripor(_:_:_:_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  int *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v32[888];
  _QWORD v33[4];
  char v34;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a2[1];
  v15 = a2[2];
  v14 = a2[3];
  v16 = *(float *)(v4 + 20);
  if (v16 > 0.0)
    goto LABEL_8;
  v16 = *(float *)(a1 + 84);
  if ((*(_BYTE *)(v4 + 24) & 1) != 0)
    goto LABEL_8;
  v17 = *(_QWORD *)(a1 + 72);
  if (!*(_BYTE *)(a1 + 80))
  {
    if (v17 == 5)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v17 < 5)
LABEL_7:
    v16 = 0.1136;
LABEL_8:
  v33[0] = *a2;
  v33[1] = v13;
  v33[2] = v15;
  v33[3] = v14;
  v34 = 0;
  if (*(_BYTE *)(v4 + 32) == 1)
  {
    *((_QWORD *)v12 + 18) = 0;
    *((_QWORD *)v12 + 19) = 0;
    _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_((uint64_t)v32);
    outlined init with take of RecoverRepetitivePinchInternalData?((uint64_t)v32, (uint64_t)(v12 + 160));
    v18 = (int *)type metadata accessor for HandDescriptorInternal();
    v19 = &v12[v18[10]];
    v20 = type metadata accessor for ActionInternalPB(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    v21 = &v12[v18[11]];
    v22 = type metadata accessor for UnsureInternalPB(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
    v23 = &v12[v18[12]];
    v24 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
    v25 = &v12[v18[13]];
    v26 = type metadata accessor for HomePinchInternalPB(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
    v27 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v12[v18[14]] = MEMORY[0x24BEE4AF8];
    *((_DWORD *)v12 + 32) = 0;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    v12[8] = 2;
    *(_QWORD *)v12 = specialized Dictionary.init(dictionaryLiteral:)(v27);
    *((_QWORD *)v12 + 17) = specialized Dictionary.init(dictionaryLiteral:)(v27);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(*((_QWORD *)v18 - 1) + 56))(v12, 0, 1, v18);
  }
  else
  {
    v28 = type metadata accessor for HandDescriptorInternal();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 1, 1, v28);
  }
  v29 = swift_bridgeObjectRetain();
  return HandDescriptor.init(detectionResultsArray:isLeft:handRadius:handCenter:internalData:)(v29, a3 & 1, (uint64_t)v33, (uint64_t)v12, a4, v16);
}

uint64_t DetectionResultSync.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DetectionResultSync()
{
  return objc_opt_self();
}

uint64_t specialized DetectionResultSync.init(config:)(HandsKitConfig *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0xBF8000003DE8A71ELL;
  *(_WORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 2139095040;
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 60) = 981668463;
  *(_BYTE *)(v1 + 64) = 0;
  DetectionResultSync.reconfig(_:)(a1);
  return v1;
}

uint64_t specialized static DetectionResultSync.estimate3D(_:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  char *v51;
  float32x2_t v52;
  float32x2_t v53;
  uint64_t v54;
  void *v55;
  __int128 v56;
  float32x4_t v57;
  float32x4_t v58;
  double v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66;
  float v67;
  float32x4_t v68;
  uint64_t result;
  float32x4_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  float32x4_t v76;
  __int128 v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  float32x4_t v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  _OWORD v105[2];
  _QWORD v106[5];
  _OWORD v107[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD v111[3];

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v84 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (char *)&v70 - v11;
  v13 = a1[2];
  if (!v13)
  {
    swift_bridgeObjectRetain();
    return 0;
  }
  v14 = *(_QWORD *)(a2 + 200);
  v83 = v10 + 7;
  swift_bridgeObjectRetain_n();
  v72 = 0;
  v73 = 0;
  v17 = 0;
  v89 = v13 - 1;
  v74 = -1;
  v18 = INFINITY;
  v19 = 32;
  v87 = 0x800000023D9D0660;
  v82 = 0x800000023D9D0460;
  v81 = xmmword_23D9A7060;
  v77 = xmmword_23D9A3E30;
  v71 = 1;
  v20 = v4;
  v79 = v14;
  v80 = a1;
  v78 = v12;
  while (1)
  {
    v21 = *(_OWORD *)((char *)a1 + v19 + 80);
    v110 = *(_OWORD *)((char *)a1 + v19 + 64);
    v111[0] = v21;
    *(_OWORD *)((char *)v111 + 9) = *(_OWORD *)((char *)a1 + v19 + 89);
    v22 = *(_OWORD *)((char *)a1 + v19 + 16);
    v107[0] = *(_OWORD *)((char *)a1 + v19);
    v107[1] = v22;
    v23 = *(_OWORD *)((char *)a1 + v19 + 48);
    v108 = *(_OWORD *)((char *)a1 + v19 + 32);
    v109 = v23;
    if (BYTE8(v23) == 1)
    {
      if (!(_QWORD)v23)
        goto LABEL_18;
    }
    else if ((_QWORD)v23 != 3)
    {
      goto LABEL_18;
    }
    v90 = v16;
    v91 = v15;
    v92 = v19;
    if (!*(_QWORD *)(v14 + 16))
      goto LABEL_11;
    v24 = v108;
    v25 = BYTE8(v108);
    outlined retain of DetectionResult((uint64_t)v107);
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
    if ((v27 & 1) == 0)
      break;
    v28 = (float32x4_t *)(*(_QWORD *)(v14 + 56) + 192 * v26);
    v30 = v28[2];
    v29 = v28[3];
    v31 = v28[1];
    v93 = *v28;
    v94 = v31;
    v95 = v30;
    v96 = v29;
    v32 = v28[4];
    v33 = v28[5];
    v34 = v28[7];
    v99 = v28[6];
    v100 = v34;
    v97 = v32;
    v98 = v33;
    v35 = v28[8];
    v36 = v28[9];
    v37 = v28[11];
    v103 = v28[10];
    v104 = v37;
    v101 = v35;
    v102 = v36;
    if ((v110 & 1) != 0)
      break;
    v35.i32[0] = HIDWORD(v109);
    v88 = v35;
    v52 = *(float32x2_t *)&v104.u32[2];
    outlined retain of ImageData((uint64_t)&v93);
    outlined release of DetectionResult((uint64_t)v107);
    v53 = vmul_f32(v52, *(float32x2_t *)&v107[0]);
    v54 = v97.i64[0];
    swift_beginAccess();
    if (*(_QWORD *)(v54 + 16))
    {
      v55 = (void *)objc_opt_self();
      swift_beginAccess();
      v56 = *(_OWORD *)(v54 + 96);
      v85 = *(_OWORD *)(v54 + 80);
      v86 = v56;
      v75 = *(_OWORD *)(v54 + 64);
      swift_beginAccess();
      objc_msgSend(v55, sel_computeCenter3dKannala_cameraIntrinsics_cameraDistortion_depth_, *(double *)&v53, *(double *)&v75, *(double *)&v85, *(double *)&v86, *(double *)(v54 + 112), *(double *)v88.i64);
      v58 = v57;
      v58.i32[3] = v76.i32[3];
      v76 = v58;
    }
    else
    {
      v59 = ImageCalibrationData.opticalCenter.getter();
      *(float32x2_t *)v58.f32 = vmul_n_f32(vdiv_f32(vsub_f32(v53, *(float32x2_t *)&v59), COERCE_FLOAT32X2_T(ImageCalibrationData.rawFocal.getter())), v88.f32[0]);
      v58.i64[1] = v88.u32[0];
    }
    v60 = (float32x4_t)v77;
    v60.i32[3] = v90.i32[3];
    v61 = (int32x4_t)vmulq_f32(v58, v58);
    v61.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1))).u32[0];
    v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
    v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
    v88 = v58;
    v64 = vmulq_n_f32(v58, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
    v64.i32[3] = v91.i32[3];
    v90 = v64;
    v91 = v60;
    v65 = vmulq_f32(v60, v64);
    v66 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0]);
    if (v66 >= v18)
    {
      outlined release of ImageData((uint64_t)&v93);
    }
    else
    {
      v67 = v66;
      swift_beginAccess();
      v68 = vaddq_f32(*(float32x4_t *)(v54 + 240), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v54 + 192), v88.f32[0]), *(float32x4_t *)(v54 + 208), *(float32x2_t *)v88.f32, 1), *(float32x4_t *)(v54 + 224), v88, 2));
      v68.i32[3] = v70.i32[3];
      v88 = v68;
      outlined release of ImageData((uint64_t)&v93);
      v71 = 0;
      v73 = v88.i64[0];
      v74 = v17;
      v72 = v88.i64[1];
      v70 = v88;
      v18 = v67;
    }
    v19 = v92;
    v15 = v90;
    v16 = v91;
LABEL_18:
    if (v89 == v17)
    {
      swift_bridgeObjectRelease();
      v47 = v74;
      if ((v74 & 0x8000000000000000) == 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
          goto LABEL_34;
        goto LABEL_29;
      }
      return v73;
    }
    v19 += 112;
    ++v17;
  }
  outlined release of DetectionResult((uint64_t)v107);
LABEL_11:
  v88.i64[0] = v17;
  v106[3] = MEMORY[0x24BEE0D00];
  v106[0] = 0xD000000000000043;
  v106[1] = v87;
  v38 = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel > 3)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v106);
    v16 = v90;
    v15 = v91;
LABEL_17:
    v17 = v88.i64[0];
    v19 = v92;
    goto LABEL_18;
  }
  v39 = v38;
  v40 = v5;
  v41 = (void *)MEMORY[0x2426372E8](0xD000000000000069, v82);
  v42 = objc_msgSend(v41, sel_lastPathComponent);

  *(_QWORD *)&v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v44 = v43;

  static Date.now.getter();
  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  *(_QWORD *)&v86 = static HandyLoggerNeo._dispatchQ;
  v45 = v84;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v84, v12, v20);
  outlined init with copy of Any((uint64_t)v106, (uint64_t)v105);
  v46 = (*(unsigned __int8 *)(v40 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  a1 = (_QWORD *)((v83 + v46) & 0xFFFFFFFFFFFFFFF8);
  v47 = swift_allocObject();
  *(_DWORD *)(v47 + 16) = 3;
  *(_QWORD *)(v47 + 24) = v39;
  *(_OWORD *)(v47 + 32) = v81;
  *(_QWORD *)(v47 + 48) = 0;
  *(_QWORD *)(v47 + 56) = 0;
  *(_DWORD *)(v47 + 64) = 1;
  *(_QWORD *)(v47 + 72) = v85;
  *(_QWORD *)(v47 + 80) = v44;
  *(_QWORD *)(v47 + 88) = 182;
  (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v47 + v46, v45, v20);
  outlined init with take of Any(v105, (_QWORD *)((char *)a1 + v47));
  *(_QWORD *)(v47 + (((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
  *(_QWORD *)(v48 + 24) = v47;
  v95.i64[0] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  v95.i64[1] = v48;
  v93.i64[0] = MEMORY[0x24BDAC760];
  v93.i64[1] = 1107296256;
  v94.i64[0] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  v94.i64[1] = (uint64_t)&block_descriptor_14;
  v49 = _Block_copy(&v93);
  v50 = (id)v86;
  swift_retain();
  swift_release();
  dispatch_sync(v50, v49);

  _Block_release(v49);
  LOBYTE(v49) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v49 & 1) == 0)
  {
    v51 = v78;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v78, v20);
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v106);
    v16 = v90;
    v15 = v91;
    v5 = v40;
    v12 = v51;
    v14 = v79;
    a1 = v80;
    goto LABEL_17;
  }
  __break(1u);
LABEL_34:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a1);
  a1 = (_QWORD *)result;
LABEL_29:
  if (v47 < a1[2])
  {
    LOBYTE(a1[14 * v47 + 13]) = 1;
    return v73;
  }
  __break(1u);
  return result;
}

uint64_t specialized static DetectionResultSync.checkIfValidCenter(_:_:_:_:_:)(int32x4_t *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  __int128 v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  NSObject *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  simd_float4 v87;
  simd_float4 v88;
  simd_float4 v89;
  simd_float4 v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int32x4_t v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  float32x4_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  float32x4_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _OWORD v132[2];
  uint64_t v133;
  simd_float4x4 v134;

  v133 = *MEMORY[0x24BDAC8D0];
  v98 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v98 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v98, v10);
  v99 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v108 = (char *)&v85 - v13;
  v14 = *(_QWORD *)(a2 + 16);
  if (!v14)
    return 0;
  v15 = *(_QWORD *)(a3 + 200);
  v96 = a1[1];
  swift_bridgeObjectRetain();
  v95 = v9 + 7;
  v16 = *(_OWORD *)(a2 + 112);
  v131 = *(_OWORD *)(a2 + 96);
  v132[0] = v16;
  v17 = v14 - 1;
  v18 = 144;
  v19 = *(_OWORD *)(a2 + 121);
  v106 = 0x800000023D9D05D0;
  v107 = 0xD00000000000001CLL;
  *(_OWORD *)((char *)v132 + 9) = v19;
  v86 = (unint64_t)"eMagnitude";
  v94 = 0x800000023D9D0460;
  v20 = *(_OWORD *)(a2 + 48);
  v127 = *(_OWORD *)(a2 + 32);
  v128 = v20;
  v21 = *(_OWORD *)(a2 + 80);
  v129 = *(_OWORD *)(a2 + 64);
  v130 = v21;
  v91 = (float32x4_t)vdupq_laneq_s32(v96, 2);
  v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.i8, 1);
  v97 = xmmword_23D9A7060;
  v22 = v8;
  v23 = v17;
  v93 = a2;
  v105 = v15;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_23;
LABEL_3:
  v24 = v129;
  v25 = BYTE8(v129);
  outlined retain of DetectionResult((uint64_t)&v127);
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  if ((v27 & 1) == 0)
  {
    outlined release of DetectionResult((uint64_t)&v127);
    while (1)
    {
LABEL_23:
      v126 = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v124 = v107;
      *((_QWORD *)&v124 + 1) = v106;
      v61 = type metadata accessor for HandyLoggerNeo();
      if (static HandyLoggerNeo._currentLogLevel <= 3)
      {
        v62 = v61;
        *(_QWORD *)&v101 = v18;
        *(_QWORD *)&v102 = v23;
        v63 = (void *)MEMORY[0x2426372E8](0xD000000000000069, v94);
        v64 = objc_msgSend(v63, sel_lastPathComponent);

        v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(_QWORD *)&v103 = v66;

        v67 = v108;
        static Date.now.getter();
        if (one-time initialization token for _dispatchQ != -1)
          swift_once();
        *(_QWORD *)&v104 = static HandyLoggerNeo._dispatchQ;
        v69 = v98;
        v68 = v99;
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v99, v67, v98);
        outlined init with copy of Any((uint64_t)&v124, (uint64_t)&v122);
        v70 = (*(unsigned __int8 *)(v22 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        v71 = (v95 + v70) & 0xFFFFFFFFFFFFFFF8;
        v72 = swift_allocObject();
        *(_DWORD *)(v72 + 16) = 3;
        *(_QWORD *)(v72 + 24) = v62;
        *(_OWORD *)(v72 + 32) = v97;
        *(_QWORD *)(v72 + 48) = 0;
        *(_QWORD *)(v72 + 56) = 0;
        *(_DWORD *)(v72 + 64) = 1;
        v73 = v103;
        *(_QWORD *)(v72 + 72) = v65;
        *(_QWORD *)(v72 + 80) = v73;
        *(_QWORD *)(v72 + 88) = 248;
        (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v72 + v70, v68, v69);
        outlined init with take of Any(&v122, (_OWORD *)(v72 + v71));
        *(_QWORD *)(v72 + ((v71 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
        v74 = swift_allocObject();
        *(_QWORD *)(v74 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
        *(_QWORD *)(v74 + 24) = v72;
        *(_QWORD *)&v112 = _sIg_Ieg_TRTA_0;
        *((_QWORD *)&v112 + 1) = v74;
        *(_QWORD *)&v110 = MEMORY[0x24BDAC760];
        *((_QWORD *)&v110 + 1) = 1107296256;
        *(_QWORD *)&v111 = thunk for @escaping @callee_guaranteed () -> ();
        *((_QWORD *)&v111 + 1) = &block_descriptor_12;
        v75 = _Block_copy(&v110);
        v76 = (id)v104;
        swift_retain();
        swift_release();
        dispatch_sync(v76, v75);

        _Block_release(v75);
        LOBYTE(v76) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v76 & 1) != 0)
          __break(1u);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v108, v69);
        swift_release();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v124);
        v60 = v109;
        a2 = v93;
        v15 = v105;
        v23 = v102;
        v18 = v101;
        if (!(_QWORD)v102)
          goto LABEL_32;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v124);
        v60 = v109;
        v15 = v105;
        if (!v23)
          goto LABEL_32;
      }
LABEL_30:
      v77 = *(_OWORD *)(a2 + v18 + 80);
      v131 = *(_OWORD *)(a2 + v18 + 64);
      v132[0] = v77;
      *(_OWORD *)((char *)v132 + 9) = *(_OWORD *)(a2 + v18 + 89);
      v78 = *(_OWORD *)(a2 + v18 + 16);
      v127 = *(_OWORD *)(a2 + v18);
      v128 = v78;
      v80 = *(_OWORD *)(a2 + v18 + 32);
      v79 = *(_OWORD *)(a2 + v18 + 48);
      v18 += 112;
      --v23;
      v109 = v60;
      v129 = v80;
      v130 = v79;
      if (*(_QWORD *)(v15 + 16))
        goto LABEL_3;
    }
  }
  v28 = v23;
  v29 = (__int128 *)(*(_QWORD *)(v15 + 56) + 192 * v26);
  v31 = v29[2];
  v30 = v29[3];
  v32 = v29[1];
  v110 = *v29;
  v111 = v32;
  v112 = v31;
  v113 = v30;
  v33 = v29[4];
  v34 = v29[5];
  v35 = v29[7];
  v116 = v29[6];
  v117 = v35;
  v114 = v33;
  v115 = v34;
  v36 = v29[8];
  v37 = v29[9];
  v38 = v29[11];
  v120 = v29[10];
  v121 = v38;
  v118 = v36;
  v119 = v37;
  outlined retain of ImageData((uint64_t)&v110);
  outlined release of DetectionResult((uint64_t)&v127);
  v39 = v114;
  v40 = (_BYTE *)(v114 + 320);
  if ((*(_BYTE *)(v114 + 400) & 1) != 0)
  {
    swift_beginAccess();
    v134 = __invert_f4(*(simd_float4x4 *)(v39 + 192));
    *(simd_float4x4 *)(v39 + 256) = v134;
    v134.columns[0].i32[3] = v89.i32[3];
    v134.columns[1].i32[3] = v88.i32[3];
    v134.columns[2].i32[3] = v87.i32[3];
    *v40 = 0;
    v134.columns[3].i32[3] = v90.i32[3];
    *(simd_float4x4 *)(v39 + 336) = v134;
    *(_BYTE *)(v39 + 400) = 0;
    v41 = v134.columns[0].i64[1];
    v88 = v134.columns[1];
    v89 = v134.columns[0];
    v42 = v134.columns[0].i64[0];
    v43 = v134.columns[1].i64[1];
    v44 = v134.columns[1].i64[0];
    v45 = v134.columns[2].i64[1];
    v87 = v134.columns[2];
    v46 = v134.columns[2].i64[0];
    v47 = v134.columns[3].i64[1];
    v90 = v134.columns[3];
    v48 = v134.columns[3].i64[0];
  }
  else
  {
    v48 = *(_QWORD *)(v114 + 384);
    v47 = *(_QWORD *)(v114 + 392);
    v46 = *(_QWORD *)(v114 + 368);
    v45 = *(_QWORD *)(v114 + 376);
    v44 = *(_QWORD *)(v114 + 352);
    v43 = *(_QWORD *)(v114 + 360);
    v42 = *(_QWORD *)(v114 + 336);
    v41 = *(_QWORD *)(v114 + 344);
  }
  v49.i64[0] = v42;
  v49.i64[1] = v41;
  v50.i64[0] = v44;
  v50.i64[1] = v43;
  v51 = vmlaq_f32(vmulq_n_f32(v49, *(float *)v96.i32), v92, v50);
  v50.i64[0] = v46;
  v50.i64[1] = v45;
  v52 = vmlaq_f32(v51, v91, v50);
  v50.i64[0] = v48;
  v50.i64[1] = v47;
  v53 = vaddq_f32(v52, v50);
  v100 = v53;
  v53.i32[3] = v109.i32[3];
  v109 = v53;
  LOBYTE(v124) = 0;
  swift_beginAccess();
  v54 = *(_OWORD *)(v39 + 96);
  v103 = *(_OWORD *)(v39 + 80);
  v104 = v54;
  v102 = *(_OWORD *)(v39 + 64);
  swift_beginAccess();
  v101 = *(_OWORD *)(v39 + 112);
  swift_beginAccess();
  if (*(_BYTE *)(v39 + 24))
    v55 = *(_QWORD *)(v39 + 16) != 0;
  else
    v55 = -1;
  v56 = *(float32x2_t *)((char *)&v121 + 8);
  objc_msgSend((id)objc_opt_self(), sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v55, &v124, *(double *)v109.i64, *(double *)&v102, *(double *)&v103, *(double *)&v104, *(double *)&v101, *((double *)&v121 + 1));
  if (v124 != 1
    || v57.f32[0] < 0.0
    || (v58 = vcgt_f32(v56, v57), (v58.i8[0] & 1) == 0)
    || v57.f32[1] < 0.0
    || (v58.i8[4] & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v124 = v97;
    v126 = 0;
    v125 = 0;
    v123 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v122 = 0xD00000000000002FLL;
    *((_QWORD *)&v122 + 1) = 0x800000023D9D05F0;
    v82 = v86 | 0x8000000000000000;
    v83 = MEMORY[0x24BEE4AF8];
    v84 = 256;
LABEL_36:
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000069, v82, v84, (uint64_t *)&v124, (uint64_t)&v122, v83);
    outlined release of ImageData((uint64_t)&v110);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v122);
    return 0;
  }
  if (*(_QWORD *)(v39 + 16))
  {
    if (v100.f32[2] <= 0.0
      || (v59 = vmulq_f32(v100, v100),
          sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).f32[0]) <= a4))
    {
      swift_bridgeObjectRelease();
      v124 = v97;
      v126 = 0;
      v125 = 0;
      v123 = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v122 = 0xD000000000000032;
      *((_QWORD *)&v122 + 1) = 0x800000023D9D0620;
      v82 = v86 | 0x8000000000000000;
      v83 = MEMORY[0x24BEE4AF8];
      v84 = 265;
      goto LABEL_36;
    }
  }
  else if (v100.f32[2] <= a4)
  {
    swift_bridgeObjectRelease();
    v124 = v97;
    v126 = 0;
    v125 = 0;
    v123 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v122 = 0xD00000000000002FLL;
    *((_QWORD *)&v122 + 1) = 0x800000023D9D05F0;
    v82 = v86 | 0x8000000000000000;
    v83 = MEMORY[0x24BEE4AF8];
    v84 = 261;
    goto LABEL_36;
  }
  v23 = v28;
  outlined release of ImageData((uint64_t)&v110);
  v60 = v109;
  if (v28)
    goto LABEL_30;
LABEL_32:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized static DetectionResultSync.checkIfEgocentricHandByDistance(_:_:_:isN301:)(float32x4_t *a1, uint64_t a2, float a3)
{
  float32x4_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float32x4_t v26;
  float32x4_t v27;
  Swift::String v28;
  Swift::String v29;
  __int128 *v30;
  float32x4_t v32;
  float32x4_t v33;
  _QWORD v34[4];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;

  v5 = a1[1];
  if (one-time initialization token for _filterHandByDistanceRefCameras != -1)
  {
    v33 = a1[1];
    swift_once();
    v5 = v33;
  }
  v6 = *(_QWORD *)(static DetectionResultSync._filterHandByDistanceRefCameras + 16);
  if (!v6)
  {
LABEL_14:
    *((_QWORD *)&v39 + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v38 = 0xD000000000000055;
    *((_QWORD *)&v38 + 1) = 0x800000023D9D0540;
    type metadata accessor for HandyLoggerNeo();
    v50 = (float32x4_t)xmmword_23D9A7060;
    v51 = 0uLL;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v50, 0xD000000000000069, 0x800000023D9D0460, 231, (uint64_t)&v38, MEMORY[0x24BEE4AF8]);
    v30 = &v38;
    goto LABEL_15;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  while (!v8)
  {
LABEL_5:
    if (++v7 == v6)
      goto LABEL_14;
  }
  v9 = static DetectionResultSync._filterHandByDistanceRefCameras + 32 + 16 * v7;
  v10 = *(_QWORD *)v9;
  LODWORD(v9) = *(unsigned __int8 *)(v9 + 8);
  v11 = *(_OWORD *)(a2 + 176);
  v46 = *(_OWORD *)(a2 + 160);
  v47 = v11;
  v12 = *(_OWORD *)(a2 + 208);
  v48 = *(_OWORD *)(a2 + 192);
  v49 = v12;
  v13 = *(_OWORD *)(a2 + 112);
  v42 = *(_OWORD *)(a2 + 96);
  v43 = v13;
  v14 = *(_OWORD *)(a2 + 144);
  v44 = *(_OWORD *)(a2 + 128);
  v45 = v14;
  v15 = *(_OWORD *)(a2 + 48);
  v38 = *(_OWORD *)(a2 + 32);
  v39 = v15;
  v16 = *(_OWORD *)(a2 + 80);
  v40 = *(_OWORD *)(a2 + 64);
  v41 = v16;
  v17 = v8 - 1;
  v18 = (__int128 *)(a2 + 224);
  v19 = *((_QWORD *)&v42 + 1);
  if ((_DWORD)v9)
    __asm { BR              X3 }
  while (v19 != v10)
  {
    if (!v17)
      goto LABEL_5;
    v20 = v18[9];
    v46 = v18[8];
    v47 = v20;
    v21 = v18[11];
    v48 = v18[10];
    v49 = v21;
    v22 = v18[5];
    v42 = v18[4];
    v43 = v22;
    v23 = v18[7];
    v44 = v18[6];
    v45 = v23;
    v24 = v18[1];
    v38 = *v18;
    v39 = v24;
    v25 = v18[3];
    v40 = v18[2];
    v41 = v25;
    v18 += 12;
    --v17;
    v19 = *((_QWORD *)&v42 + 1);
  }
  v32 = v5;
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)&v50);
  v26 = vaddq_f32(v53, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v32.f32[0]), v51, *(float32x2_t *)v32.f32, 1), v52, v32, 2));
  v27 = vmulq_f32(v26, v26);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]) > a3)
  {
    v35 = xmmword_23D9A7060;
    v36 = 0;
    v37 = 0;
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    outlined retain of ImageData((uint64_t)&v38);
    _StringGuts.grow(_:)(54);
    v28._countAndFlagsBits = 0xD00000000000002DLL;
    v28._object = (void *)0x800000023D9D05A0;
    String.append(_:)(v28);
    Float.write<A>(to:)();
    v29._countAndFlagsBits = 0x73726574656D20;
    v29._object = (void *)0xE700000000000000;
    String.append(_:)(v29);
    v34[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000069, 0x800000023D9D0460, 223, (uint64_t *)&v35, (uint64_t)v34, MEMORY[0x24BEE4AF8]);
    outlined release of ImageData((uint64_t)&v38);
    v30 = (__int128 *)v34;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
    return 0;
  }
  return 1;
}

uint64_t sub_23D80B198()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40) >= 0x1AuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 96) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D80B27C()
{
  return swift_deallocObject();
}

uint64_t destroy for RawPoseFeatures(_QWORD *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RawPoseFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v5;
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    v7 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v7;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RawPoseFeatures(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
      *(_DWORD *)(a1 + 116) = *((_DWORD *)a2 + 29);
    }
    else
    {
      outlined destroy of HandPose(a1);
      v10 = *((_OWORD *)a2 + 3);
      v12 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v10;
      *(_OWORD *)a1 = v12;
      *(_OWORD *)(a1 + 16) = v11;
      v14 = *((_OWORD *)a2 + 5);
      v13 = *((_OWORD *)a2 + 6);
      v15 = *((_OWORD *)a2 + 4);
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_OWORD *)(a1 + 80) = v14;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 64) = v15;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = a2[1];
    v6 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v6;
    v7 = *((_OWORD *)a2 + 3);
    v8 = *((_OWORD *)a2 + 4);
    v9 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v9;
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 64) = v8;
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
    *(_DWORD *)(a1 + 116) = *((_DWORD *)a2 + 29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *(_OWORD *)a2;
    v17 = *((_OWORD *)a2 + 1);
    v18 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v18;
    *(_OWORD *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v17;
    v19 = *((_OWORD *)a2 + 4);
    v20 = *((_OWORD *)a2 + 5);
    v21 = *((_OWORD *)a2 + 6);
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_OWORD *)(a1 + 80) = v20;
    *(_OWORD *)(a1 + 96) = v21;
    *(_OWORD *)(a1 + 64) = v19;
  }
  v22 = *((_DWORD *)a2 + 30);
  *(_BYTE *)(a1 + 124) = *((_BYTE *)a2 + 124);
  *(_DWORD *)(a1 + 120) = v22;
  *(_BYTE *)(a1 + 125) = *((_BYTE *)a2 + 125);
  *(_QWORD *)(a1 + 128) = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy136_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for RawPoseFeatures(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (!*(_QWORD *)a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    outlined destroy of HandPose(a1);
LABEL_5:
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
LABEL_6:
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RawPoseFeatures(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 136))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RawPoseFeatures(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RawPoseFeatures()
{
  return &type metadata for RawPoseFeatures;
}

Swift::Void __swiftcall TwoHandPinchProcessingPipeline.reset()()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v2 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_beginAccess();
  *(_QWORD *)(v0 + 32) = v2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 16) = 0;
  v3 = *(_QWORD *)(v0 + 40);
  if (v3)
  {
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4B08];
    swift_retain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v3 + 24) = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRelease();
    swift_beginAccess();
    specialized Set._Variant.insert(_:)(&v4, 0);
    specialized Set._Variant.insert(_:)(&v4, 1);
    swift_endAccess();
    swift_release();
  }
}

void TwoHandPinchProcessingPipeline.process(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  float *v36;
  int v37;
  int v38;
  Swift::Float v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  char v47;
  Swift::Bool v48;
  CMTimeEpoch v49;
  uint64_t v50;
  CMTimeValue v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  char v92;
  void (*v93)(_QWORD *, _QWORD);
  uint64_t v94;
  uint64_t v95;
  char v96;
  void (*v97)(_QWORD *, _QWORD);
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void (*v101)(_QWORD *, _QWORD);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  void (*v106)(_QWORD *, _QWORD);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  int *v120;
  _QWORD aBlock[6];
  uint64_t v122;
  __int16 v123;
  char v124;
  __int16 v125;
  char v126;
  CMTime v127;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v116 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v117 = (uint64_t)&v109 - v8;
  v9 = type metadata accessor for HandDescriptor();
  v119 = *(_QWORD *)(v9 - 8);
  v120 = (int *)v9;
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v110 = (char *)&v109 - v15;
  v118 = (_QWORD *)v1;
  if (*(_BYTE *)(v1 + 16) != 1 || (v16 = *(_QWORD *)(*a1 + 16)) == 0)
  {
LABEL_30:
    v66 = v118[5];
    if (!v66)
      goto LABEL_84;
    v67 = *a1;
    v68 = *(_QWORD *)(*a1 + 16);
    if (v68)
    {
      aBlock[0] = MEMORY[0x24BEE4AF8];
      v115 = v66;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68, 0);
      v69 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
      v114 = v67;
      v70 = v67 + v69;
      v71 = *(_QWORD *)(v119 + 72);
      v72 = aBlock[0];
      v73 = (uint64_t)v110;
      do
      {
        outlined init with copy of HandDescriptor(v70, v73);
        v74 = *(_QWORD *)(v73 + 144);
        outlined destroy of HandDescriptor(v73);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v72 + 16) + 1, 1);
          v72 = aBlock[0];
        }
        v76 = *(_QWORD *)(v72 + 16);
        v75 = *(_QWORD *)(v72 + 24);
        if (v76 >= v75 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1);
          v72 = aBlock[0];
        }
        *(_QWORD *)(v72 + 16) = v76 + 1;
        *(_QWORD *)(v72 + 8 * v76 + 32) = v74;
        v70 += v71;
        --v68;
      }
      while (v68);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      v72 = MEMORY[0x24BEE4AF8];
    }
    v77 = specialized Set.init<A>(_:)(v72);
    swift_bridgeObjectRelease();
    PipelineMapper.updateMaps(_:)(v77);
    swift_release();
    swift_bridgeObjectRelease();
    v78 = *a1;
    v79 = *(_QWORD *)(*a1 + 16);
    if (!v79)
    {
LABEL_76:
      v118[3] = v78;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return;
    }
    v80 = 0;
    v81 = (uint64_t)v116;
    v115 = *(_QWORD *)(*a1 + 16);
    while (1)
    {
      if (v80 >= *(_QWORD *)(*a1 + 16))
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      v82 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
      v83 = *(_QWORD *)(v119 + 72);
      v84 = v83 * v80;
      if (*(_BYTE *)(*a1 + v82 + v83 * v80 + 251) == 1)
        break;
LABEL_43:
      if (++v80 == v79)
      {
        v78 = *a1;
        goto LABEL_76;
      }
    }
    v85 = v118[3];
    v86 = *(_QWORD *)(v85 + 16);
    if (v86)
    {
      v87 = v85 + v82;
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of HandDescriptor(v87, (uint64_t)v12);
        if (v80 >= *(_QWORD *)(*a1 + 16))
          break;
        if (*((_QWORD *)v12 + 18) == *(_QWORD *)(*a1 + v82 + v84 + 144))
        {
          outlined init with take of HandDescriptor((uint64_t)v12, v117);
          v88 = 0;
          goto LABEL_54;
        }
        outlined destroy of HandDescriptor((uint64_t)v12);
        v87 += v83;
        if (!--v86)
        {
          v88 = 1;
LABEL_54:
          v81 = (uint64_t)v116;
          goto LABEL_55;
        }
      }
      __break(1u);
      goto LABEL_78;
    }
    swift_bridgeObjectRetain();
    v88 = 1;
LABEL_55:
    v89 = v119;
    v90 = v120;
    v91 = v117;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v119 + 56))(v117, v88, 1, v120);
    swift_bridgeObjectRelease();
    outlined init with copy of HandDescriptor?(v91, v81);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v89 + 48))(v81, 1, v90) == 1)
    {
      outlined destroy of HandDescriptor?(v81);
    }
    else
    {
      v92 = *(_BYTE *)(v81 + 4);
      outlined destroy of HandDescriptor(v81);
      if ((v92 & 1) != 0)
      {
        v97 = (void (*)(_QWORD *, _QWORD))specialized Array.subscript.modify((uint64_t)aBlock, v80);
        v99 = v98 + v120[28];
        v79 = v115;
        if ((*(_BYTE *)(v99 + 49) & 1) == 0 && (*(_BYTE *)(v99 + 32) & 1) == 0)
          *(_QWORD *)(v99 + 24) |= 4uLL;
        v97(aBlock, 0);
        v96 = 1;
        goto LABEL_66;
      }
    }
    v93 = (void (*)(_QWORD *, _QWORD))specialized Array.subscript.modify((uint64_t)aBlock, v80);
    v95 = v94 + v120[28];
    v79 = v115;
    if ((*(_BYTE *)(v95 + 49) & 1) == 0 && (*(_BYTE *)(v95 + 32) & 1) == 0)
      *(_QWORD *)(v95 + 16) |= 8uLL;
    v93(aBlock, 0);
    v96 = 0;
LABEL_66:
    v100 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v100 = specialized _ArrayBuffer._consumeAndCreateNew()(v100);
    if (v80 >= *(_QWORD *)(v100 + 16))
      goto LABEL_80;
    *(_BYTE *)(v100 + v82 + v84 + 4) = v96;
    *a1 = v100;
    v101 = (void (*)(_QWORD *, _QWORD))specialized Array.subscript.modify((uint64_t)aBlock, v80);
    v103 = v102 + v120[24];
    v104 = type metadata accessor for HandDescriptorInternal();
    v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48);
    if (!v105(v103, 1, v104) && *(_QWORD *)(v103 + 48))
      *(_BYTE *)(v103 + 24) = 1;
    v101(aBlock, 0);
    v106 = (void (*)(_QWORD *, _QWORD))specialized Array.subscript.modify((uint64_t)aBlock, v80);
    v108 = v107 + v120[24];
    if (!v105(v108, 1, v104))
    {
      if (*(_QWORD *)(v108 + 48))
      {
        *(_QWORD *)(v108 + 32) = 3;
        *(_BYTE *)(v108 + 40) = 1;
      }
    }
    v106(aBlock, 0);
    outlined destroy of HandDescriptor?(v117);
    v81 = (uint64_t)v116;
    goto LABEL_43;
  }
  v111 = v118 + 4;
  swift_beginAccess();
  v17 = 0;
  v112 = v16;
  while (1)
  {
    v18 = v118[5];
    if (!v18)
      break;
    if (v17 >= *(_QWORD *)(*a1 + 16))
    {
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      break;
    }
    v19 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
    v20 = *(_QWORD *)(v119 + 72) * v17;
    v21 = *(_QWORD *)(*a1 + v19 + v20 + 144);
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v18 + 24) + 16)
      && (specialized __RawDictionaryStorage.find<A>(_:)(v21), (v22 & 1) != 0))
    {
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      swift_beginAccess();
      v23 = *(_QWORD *)(v18 + 16);
      if (!*(_QWORD *)(v23 + 16))
      {
        swift_endAccess();
        goto LABEL_5;
      }
      v24 = specialized _NativeSet.startIndex.getter(v23);
      v115 = v20;
      v25 = a1;
      v26 = v19;
      v27 = v24;
      v29 = v28;
      v114 = v21;
      v31 = v30 & 1;
      swift_retain();
      v113 = specialized Set._Variant.remove(at:)(v27, v29);
      swift_endAccess();
      v32 = v27;
      v19 = v26;
      a1 = v25;
      v20 = v115;
      v33 = v29;
      v16 = v112;
      outlined consume of Set<CameraSource>.Index._Variant(v32, v33, v31);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v122 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, v114, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v18 + 24) = v122;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
    }
    if (v17 >= *(_QWORD *)(*a1 + 16))
      goto LABEL_81;
    v35 = *a1 + v19 + v20;
    v36 = (float *)(v35 + v120[37]);
    v37 = *(unsigned __int8 *)v36;
    if (v37 != 2 && ((_BYTE)v36[2] & 1) == 0)
    {
      v38 = *(unsigned __int8 *)(v35 + 4);
      if (v38 != 2)
      {
        v115 = v20;
        v39 = v36[1];
        v40 = *(_QWORD *)(v35 + 144);
        LODWORD(v114) = *(unsigned __int8 *)(v35 + 136);
        if (!*(_QWORD *)(*v111 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v40), (v41 & 1) == 0))
        {
          type metadata accessor for TwoHandOcclusionCoreAnalytics();
          swift_allocObject();
          TwoHandOcclusionCoreAnalytics.init()();
          v43 = v42;
          v44 = v111;
          swift_beginAccess();
          v45 = swift_isUniquelyReferenced_nonNull_native();
          v122 = *v44;
          *v44 = 0x8000000000000000;
          v46 = v43;
          v16 = v112;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v46, v40, v45);
          *v44 = v122;
          swift_bridgeObjectRelease();
          swift_endAccess();
        }
        if ((v38 & 1) == 0)
          goto LABEL_26;
        if (v17 >= *(_QWORD *)(*a1 + 16))
          goto LABEL_82;
        if (*(_BYTE *)(*a1 + v19 + v115 + 251) == 1)
        {
          if (*(_QWORD *)(*v111 + 16))
          {
            specialized __RawDictionaryStorage.find<A>(_:)(v40);
            if ((v47 & 1) != 0)
            {
              v48 = v37 & 1;
              v50 = a1[44];
              v49 = a1[45];
              v51 = a1[43];
              swift_retain();
              v127.value = v51;
              *(_QWORD *)&v127.timescale = v50;
              v127.epoch = v49;
              v16 = v112;
              TwoHandOcclusionCoreAnalytics.update(currentTime:isUpperHand:angleRelatedToOtherPalm:)(v127, v48, v39);
              swift_release();
            }
          }
        }
        else
        {
LABEL_26:
          v52 = *v111;
          if (*(_QWORD *)(*v111 + 16))
          {
            v53 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
            if ((v54 & 1) != 0)
            {
              v55 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53);
              v56 = *(_QWORD *)(v55 + 112);
              if (v56)
              {
                v57 = *(_DWORD *)(v55 + 148);
                v58 = (float)((float)*(unint64_t *)(v55 + 152) / (float)v56) > 0.5;
                v59 = *(float *)(v55 + 160) / (float)v56;
                v60 = *(_QWORD *)(v55 + 16);
                v61 = *(_QWORD *)(v55 + 24);
                swift_retain();
                v62 = (void *)MEMORY[0x2426372E8](v60, v61);
                v63 = swift_allocObject();
                *(_QWORD *)(v63 + 16) = v55;
                *(_BYTE *)(v63 + 24) = v114;
                *(_WORD *)(v63 + 25) = v125;
                *(_BYTE *)(v63 + 27) = v126;
                *(_DWORD *)(v63 + 28) = v57;
                *(_BYTE *)(v63 + 32) = v58;
                *(_WORD *)(v63 + 33) = v123;
                *(_BYTE *)(v63 + 35) = v124;
                *(float *)(v63 + 36) = v59;
                *(_QWORD *)(v63 + 40) = 5;
                aBlock[4] = partial apply for closure #1 in TwoHandOcclusionCoreAnalytics.sendCoreAnalyticsData(isLeft:);
                aBlock[5] = v63;
                aBlock[0] = MEMORY[0x24BDAC760];
                aBlock[1] = 1107296256;
                aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
                aBlock[3] = &block_descriptor_13;
                v64 = _Block_copy(aBlock);
                swift_retain();
                swift_release();
                AnalyticsSendEventLazy();
                v65 = v64;
                v16 = v112;
                _Block_release(v65);

                *(_OWORD *)(v55 + 112) = 0u;
                *(_OWORD *)(v55 + 128) = 0u;
                *(_BYTE *)(v55 + 144) = 1;
                *(_QWORD *)(v55 + 156) = 0;
                *(_QWORD *)(v55 + 148) = 0;
                *(_BYTE *)(v55 + 164) = 2;
                *(_DWORD *)(v55 + 168) = 0;
                *(_BYTE *)(v55 + 172) = 1;
                swift_release();
              }
            }
          }
        }
      }
    }
LABEL_5:
    if (v16 == ++v17)
      goto LABEL_30;
  }
  __break(1u);
LABEL_84:
  __break(1u);
}

uint64_t TwoHandPinchProcessingPipeline.minimalCopy(_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HandDescriptor();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v73 = (uint64_t)&v58 - v13;
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v58 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: HandDescriptor));
  v67 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18, v19);
  v60 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: HandDescriptor)?);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (unint64_t *)((char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (uint64_t *)((char *)&v58 - v27);
  v69 = a1;
  v29 = *a1;
  v68 = *(_QWORD *)(v29 + 16);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v61 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_31:
    v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v61);
  v31 = 0;
  *v69 = v29;
  v70 = v24;
  v72 = v28;
  v58 = v7;
  v59 = v5;
  v65 = v18;
  while (1)
  {
    while (1)
    {
      if (v31 == v68)
      {
        v32 = 1;
        v71 = v68;
      }
      else
      {
        if ((v31 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if (v31 >= *(_QWORD *)(v61 + 16))
          goto LABEL_28;
        v33 = (uint64_t)&v60[*(int *)(v18 + 48)];
        outlined init with copy of HandDescriptor(v61+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v31, v33);
        v34 = (uint64_t)v24 + *(int *)(v18 + 48);
        *v24 = v31;
        outlined init with take of HandDescriptor(v33, v34);
        v32 = 0;
        v71 = v31 + 1;
        v28 = v72;
      }
      v35 = v67;
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v24, v32, 1, v18);
      outlined init with take of (offset: Int, element: HandDescriptor)?((uint64_t)v24, (uint64_t)v28);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(v28, 1, v18) == 1)
        return swift_bridgeObjectRelease();
      v36 = *v28;
      v37 = (uint64_t)v28 + *(int *)(v18 + 48);
      v18 = *(_QWORD *)(v66 + 24);
      outlined init with take of HandDescriptor(v37, v73);
      v38 = *(_QWORD *)(v18 + 16);
      if (v38)
      {
        v39 = v17;
        v40 = v18 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
        swift_bridgeObjectRetain();
        v41 = *(_QWORD *)(v7 + 72);
        while (1)
        {
          outlined init with copy of HandDescriptor(v40, (uint64_t)v10);
          if (*((_QWORD *)v10 + 18) == *(_QWORD *)(v73 + 144))
            break;
          outlined destroy of HandDescriptor((uint64_t)v10);
          v40 += v41;
          if (!--v38)
          {
            v42 = 1;
            goto LABEL_17;
          }
        }
        outlined init with take of HandDescriptor((uint64_t)v10, (uint64_t)v5);
        v42 = 0;
LABEL_17:
        v17 = v39;
        v24 = v70;
      }
      else
      {
        swift_bridgeObjectRetain();
        v42 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v42, 1, v6);
      swift_bridgeObjectRelease();
      outlined destroy of HandDescriptor(v73);
      v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
      v28 = v72;
      if (v43 != 1)
        break;
      outlined destroy of HandDescriptor?((uint64_t)v5);
      v18 = v65;
      v31 = v71;
    }
    outlined init with take of HandDescriptor((uint64_t)v5, (uint64_t)v17);
    v44 = v17[4];
    v28 = (_QWORD *)*v69;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      break;
    if ((v36 & 0x8000000000000000) != 0)
      goto LABEL_25;
LABEL_21:
    if (v36 >= v28[2])
      goto LABEL_29;
    v45 = (char *)v28 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v46 = *(_QWORD *)(v7 + 72);
    v63 = v36;
    v64 = v28;
    v47 = &v45[v46 * v36];
    v47[4] = v44;
    v47[138] = v17[138];
    v47[137] = v17[137];
    v48 = (uint64_t *)&v17[*(int *)(v6 + 124)];
    v49 = *v48;
    v28 = (_QWORD *)v48[1];
    v5 = (char *)v48[3];
    v62 = v48[2];
    v18 = v48[4];
    v24 = (unint64_t *)v48[5];
    v7 = v48[6];
    outlined copy of ObjectInteractionData?(v49);
    v50 = (uint64_t *)&v47[*(int *)(v6 + 124)];
    v51 = *v50;
    *v50 = v49;
    v50[1] = (uint64_t)v28;
    v52 = v64;
    v50[2] = v62;
    v50[3] = (uint64_t)v5;
    v50[4] = v18;
    v50[5] = (uint64_t)v24;
    v50[6] = v7;
    outlined consume of ObjectInteractionData?(v51);
    if (v63 >= v52[2])
      goto LABEL_30;
    v53 = *(int *)(v6 + 120);
    v54 = v17[v53 + 8];
    v55 = *(_QWORD *)&v17[v53];
    v56 = &v47[v53];
    *(_QWORD *)v56 = v55;
    v56[8] = v54;
    *v69 = (uint64_t)v52;
    outlined destroy of HandDescriptor((uint64_t)v17);
    v7 = v58;
    v5 = v59;
    v18 = v65;
    v24 = v70;
    v31 = v71;
    v28 = v72;
  }
  v28 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)v28);
  if ((v36 & 0x8000000000000000) == 0)
    goto LABEL_21;
LABEL_25:
  __break(1u);
  return swift_bridgeObjectRelease();
}

uint64_t TwoHandPinchProcessingPipeline.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TwoHandPinchProcessingPipeline()
{
  return objc_opt_self();
}

void protocol witness for TwoHandProcessingPipeline.reconfig(_:) in conformance TwoHandPinchProcessingPipeline()
{
  TwoHandPinchProcessingPipeline.reset()();
}

void protocol witness for TwoHandProcessingPipeline.process(_:) in conformance TwoHandPinchProcessingPipeline(uint64_t *a1)
{
  TwoHandPinchProcessingPipeline.process(_:)(a1);
}

uint64_t protocol witness for TwoHandProcessingPipeline.minimalCopy(_:) in conformance TwoHandPinchProcessingPipeline(uint64_t *a1)
{
  return TwoHandPinchProcessingPipeline.minimalCopy(_:)(a1);
}

uint64_t outlined init with take of (offset: Int, element: HandDescriptor)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: HandDescriptor)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Set._Variant.remove(at:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a1 < 0 || (v7 = *v3, 1 << *(_BYTE *)(*v3 + 32) <= a1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (((*(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) == 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*(_DWORD *)(v7 + 36) != a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
LABEL_10:
    specialized _NativeSet.copy()();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * a1);
  specialized _NativeSet._delete(at:)(a1);
  *v3 = v10;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_23D80C9F4()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in TwoHandOcclusionCoreAnalytics.sendCoreAnalyticsData(isLeft:)()
{
  uint64_t v0;

  return closure #1 in TwoHandOcclusionCoreAnalytics.sendCoreAnalyticsData(isLeft:)(*(_QWORD **)(v0 + 16));
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

float specialized max<A>(_:_:)(float result, float a2)
{
  if (result <= a2)
    return a2;
  return result;
}

uint64_t FAMetrics.__allocating_init()()
{
  return swift_allocObject();
}

double simd_float4x4.eulerAngles.getter(__n128 a1, __n128 a2, __n128 a3)
{
  float v3;
  uint64_t v4;
  float v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v10;
  float v11;
  float v12;

  *(double *)v7.i64 = simd_float4x4.quaternion.getter(a1, a2, a3);
  v3 = v7.f32[1];
  v4 = v7.i64[1];
  v5 = vmuls_lane_f32(v7.f32[0], v7, 2);
  v12 = v7.f32[0];
  *(float *)v6.i32 = vmuls_lane_f32(v7.f32[3], *(float32x2_t *)v7.f32, 1);
  v7.f32[0] = (float)(v5 - *(float *)v6.i32) + (float)(v5 - *(float *)v6.i32);
  if (fabsf(v7.f32[0]) >= 1.0)
  {
    v6.i32[0] = 1070141402;
    v8.i64[0] = 0x8000000080000000;
    v8.i64[1] = 0x8000000080000000;
    LODWORD(v11) = vbslq_s8(v8, v6, (int8x16_t)v7).u32[0];
  }
  else
  {
    v11 = asinf(v7.f32[0]);
  }
  v10 = atan2f((float)((float)(v12 * v3) + (float)(*(float *)&v4 * *((float *)&v4 + 1)))+ (float)((float)(v12 * v3) + (float)(*(float *)&v4 * *((float *)&v4 + 1))), 1.0- (float)((float)((float)(v3 * v3) + (float)(*(float *)&v4 * *(float *)&v4))+ (float)((float)(v3 * v3) + (float)(*(float *)&v4 * *(float *)&v4))));
  atan2f((float)((float)(v12 * *((float *)&v4 + 1)) + (float)(v3 * *(float *)&v4))+ (float)((float)(v12 * *((float *)&v4 + 1)) + (float)(v3 * *(float *)&v4)), 1.0- (float)((float)((float)(*(float *)&v4 * *(float *)&v4) + (float)(*((float *)&v4 + 1) * *((float *)&v4 + 1)))+ (float)((float)(*(float *)&v4 * *(float *)&v4) + (float)(*((float *)&v4 + 1) * *((float *)&v4 + 1)))));
  return COERCE_DOUBLE(__PAIR64__(LODWORD(v11), LODWORD(v10)));
}

Hands::CoordAxis_optional __swiftcall CoordAxis.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  Hands::CoordAxis_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CoordAxis.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static CoordAxis.allCases.getter()
{
  return &outlined read-only object #0 of static CoordAxis.allCases.getter;
}

uint64_t CoordAxis.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 120;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CoordAxis(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CoordAxis()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CoordAxis()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CoordAxis()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Hands::CoordAxis_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CoordAxis(Swift::String *a1)
{
  return CoordAxis.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CoordAxis(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 120;
  a1[1] = 0xE100000000000000;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CoordAxis(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CoordAxis;
}

uint64_t closure #1 in JointAverageDB.getJointAverage(from:and:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  char isUniquelyReferenced_nonNull_native;
  __n128 v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a2 + 344);
  v6 = 0x8000000000000000;
  if (*(_BYTE *)(a3 + 136))
    v6 = 0;
  v7 = v5 + v6;
  if (__OFADD__(v5, v6))
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    v10 = (uint64_t *)(result + 24);
    result = swift_beginAccess();
    v11 = *(_QWORD *)(v9 + 24);
    if (*(_QWORD *)(v11 + 16))
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v12 & 1) != 0)
      {
        v13 = *(__n128 *)(*(_QWORD *)(v11 + 56) + 16 * result);
LABEL_9:
        *a4 = v13;
        return result;
      }
    }
    if (*(_QWORD *)(a3 + 16))
    {
      v14 = swift_bridgeObjectRetain();
      specialized static JointAverageDB.getAverageJoint(coordinates:)(v14);
      v17 = v15;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = *v10;
      *v10 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, isUniquelyReferenced_nonNull_native, v17);
      *v10 = v18;
      swift_bridgeObjectRelease();
      result = swift_endAccess();
      v13 = v17;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in JointAverageDB.getGTJointAverage(from:and:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  char isUniquelyReferenced_nonNull_native;
  __n128 v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a2 + 344);
  v6 = 0x8000000000000000;
  if (*(_BYTE *)(a3 + 136))
    v6 = 0;
  v7 = v5 + v6;
  if (__OFADD__(v5, v6))
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    v10 = (uint64_t *)(result + 32);
    result = swift_beginAccess();
    v11 = *(_QWORD *)(v9 + 32);
    if (*(_QWORD *)(v11 + 16))
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v12 & 1) != 0)
      {
        v13 = *(__n128 *)(*(_QWORD *)(v11 + 56) + 16 * result);
LABEL_9:
        *a4 = v13;
        return result;
      }
    }
    if (*(_QWORD *)(a3 + 16))
    {
      v14 = swift_bridgeObjectRetain();
      specialized static JointAverageDB.getAverageJoint(coordinates:)(v14);
      v17 = v15;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = *v10;
      *v10 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, isUniquelyReferenced_nonNull_native, v17);
      *v10 = v18;
      swift_bridgeObjectRelease();
      result = swift_endAccess();
      v13 = v17;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t JointAverageDB.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

_QWORD *JointAverageDB.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v1, v2);
  v3 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v3, v4);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x24BEE5758], v5);
  static DispatchQoS.unspecified.getter();
  v13[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v11 = MEMORY[0x24BEE4B00];
  v0[2] = v10;
  v0[3] = v11;
  v0[4] = v11;
  return v0;
}

double simd_float4x4.translation.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

double simd_float4x4.quaternion.getter(__n128 a1, __n128 a2, __n128 a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v3 = (float)(a1.n128_f32[0] + a2.n128_f32[1]) + a3.n128_f32[2];
  if (v3 <= 0.0)
  {
    if (a2.n128_f32[1] < a1.n128_f32[0] && a3.n128_f32[2] < a1.n128_f32[0])
    {
      v11 = sqrtf((float)((float)(a1.n128_f32[0] + 1.0) - a2.n128_f32[1]) - a3.n128_f32[2]);
      v12 = v11 + v11;
      a1.n128_f32[0] = (float)(a2.n128_f32[2] - a3.n128_f32[1]) / (float)(v11 + v11);
      v6 = v12 * 0.25;
    }
    else
    {
      v8 = sqrtf((float)((float)(a3.n128_f32[2] + 1.0) - a1.n128_f32[0]) - a2.n128_f32[1]);
      v9 = v8 + v8;
      v10 = (float)(a1.n128_f32[2] + a3.n128_f32[0]) / v9;
      a1.n128_f32[0] = sqrtf((float)((float)(a2.n128_f32[1] + 1.0) - a1.n128_f32[0]) - a3.n128_f32[2]);
      a1.n128_f32[0] = a1.n128_f32[0] + a1.n128_f32[0];
      a3.n128_f32[0] = a3.n128_f32[0] - a1.n128_f32[2];
      if (a3.n128_f32[2] < a2.n128_f32[1])
        v6 = (float)(a1.n128_f32[1] + a2.n128_f32[0]) / a1.n128_f32[0];
      else
        v6 = v10;
      a1.n128_f32[0] = a3.n128_f32[0] / a1.n128_f32[0];
      if (a3.n128_f32[2] >= a2.n128_f32[1])
        a1.n128_f32[0] = (float)(a1.n128_f32[1] - a2.n128_f32[0]) / v9;
    }
  }
  else
  {
    v4 = sqrtf(v3 + 1.0);
    v5 = v4 + v4;
    a1.n128_f32[0] = (float)(v4 + v4) * 0.25;
    v6 = (float)(a2.n128_f32[2] - a3.n128_f32[1]) / v5;
  }
  a1.n128_f32[1] = v6;
  return a1.n128_f64[0];
}

_QWORD *one-time initialization function for jointAverageDB()
{
  uint64_t v0;
  _QWORD *result;

  type metadata accessor for JointAverageDB();
  v0 = swift_allocObject();
  result = JointAverageDB.init()();
  static FAMetrics.jointAverageDB = v0;
  return result;
}

uint64_t FAMetrics.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t FAMetrics.getScheduledDetection(handsData:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v1 = *(_QWORD *)(result + 168);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = v1 + 80;
  do
  {
    v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    v6 = __OFADD__(v3, v5);
    v3 += v5;
    if (v6)
    {
      __break(1u);
      return result;
    }
    v4 += 128;
    --v2;
  }
  while (v2);
  if (v3 < 1)
    return 1;
  else
    return 2;
}

float FAMetrics.getHandCenterDistance(_:_:)(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  float32x4_t v6;

  if ((a1[24].i8[0] & 1) != 0 || (a2[24].i8[0] & 1) != 0)
    return 0.0;
  v3 = a2[22];
  v4 = a1[22];
  *(float32x2_t *)v5.f32 = vsub_f32(v4, v3);
  *(float32x2_t *)&v5.u32[2] = vsub_f32(a1[23], a2[23]);
  v6 = vmulq_f32(v5, v5);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
}

uint64_t FAMetrics.getJoint2GTDeltaCamera0(handsData:pipelineHand:jointIndex:)(const void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  _BYTE v16[552];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for HandDescriptor();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  memcpy(v16, a1, sizeof(v16));
  HandsKitData.getReferenceHandByChirality(isLeft:)(*(_BYTE *)(a2 + 136), (uint64_t)v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of HandDescriptor?((uint64_t)v9);
  result = outlined init with take of HandDescriptor((uint64_t)v9, (uint64_t)v14);
  if (!*((_QWORD *)v14 + 2))
    return outlined destroy of HandDescriptor((uint64_t)v14);
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(*((_QWORD *)v14 + 3) + 16) <= a3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!*(_QWORD *)(a2 + 16) || *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) > a3)
    return outlined destroy of HandDescriptor((uint64_t)v14);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t FAMetrics.getPoseCameraID(hand:isMainCamera:)(uint64_t result, char a2)
{
  uint64_t v2;
  char v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];
  _QWORD v8[4];

  v2 = *(_QWORD *)(result + 200);
  if (!v2)
    goto LABEL_9;
  v3 = *(_BYTE *)(result + 136) ^ a2;
  if (*(_QWORD *)(v2 + 16) <= (unint64_t)(v3 & 1))
  {
    __break(1u);
    return result;
  }
  v4 = (v3 & 1) == 0;
  v5 = 16;
  if (v4)
    v5 = 0;
  v6 = v2 + v5;
  result = *(_QWORD *)(v6 + 32);
  if ((*(_BYTE *)(v6 + 40) & 1) == 0 && result < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_9:
    v8[3] = MEMORY[0x24BEE0D00];
    v8[0] = 0xD00000000000001DLL;
    v8[1] = 0x800000023D9D0800;
    type metadata accessor for HandyLoggerNeo();
    memset(v7, 0, sizeof(v7));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v7, 0xD00000000000004CLL, 0x800000023D9D07B0, 208, (uint64_t)v8, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
    return 0;
  }
  return result;
}

float FAMetrics.calculateXYError(p:gt:cameraToWorldTransform:)(float32x4_t a1, float32x4_t a2, simd_float4 a3, simd_float4 a4, simd_float4 a5, simd_float4 a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  simd_float4x4 v12;
  simd_float4x4 v13;

  v12.columns[0] = a3;
  v12.columns[1] = a4;
  v12.columns[2] = a5;
  v12.columns[3] = a6;
  v13 = __invert_f4(v12);
  v6 = vaddq_f32((float32x4_t)v13.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v13.columns[0], a1.f32[0]), (float32x4_t)v13.columns[1], *(float32x2_t *)a1.f32, 1), (float32x4_t)v13.columns[2], a1, 2));
  v13.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v13.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v13.columns[0], a2.f32[0]), (float32x4_t)v13.columns[1], *(float32x2_t *)a2.f32, 1), (float32x4_t)v13.columns[2], a2, 2));
  v13.columns[1] = (simd_float4)vmulq_f32(v6, (float32x4_t)v13.columns[0]);
  v13.columns[1] = (simd_float4)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13.columns[1], 2), vaddq_f32((float32x4_t)v13.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.columns[1].f32, 1)));
  v13.columns[2] = (simd_float4)vmulq_f32(v6, v6);
  v13.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v13.columns[0], (float32x4_t)v13.columns[0]);
  v7 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13.columns[0], 2), vaddq_f32((float32x4_t)v13.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.columns[0].f32, 1)));
  v8 = 1.0
     - vdivq_f32(vdivq_f32(vmulq_f32((float32x4_t)v13.columns[1], (float32x4_t)v13.columns[1]), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13.columns[2], 2), vaddq_f32((float32x4_t)v13.columns[2], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.columns[2].f32, 1)))), v7).f32[0];
  if (v8 < 0.0)
    v8 = 0.0;
  return sqrtf(v8 * v7.f32[0]);
}

id closure #2 in FAMetrics.getNumJointsInStereoFOV(hand:from:cameras:)@<X0>(uint64_t a1@<X0>, float *a2@<X1>, BOOL *a3@<X8>, float32x4_t a4@<Q1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  id result;
  float32x2_t v16;
  BOOL v17;
  int32x2_t v18;
  float v19;
  float32x4_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float32x4_t v25;
  char v26;
  float32x4_t v27[4];
  uint64_t v28;

  v25 = a4;
  v28 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (float *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(double *)(a1 + 184);
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v27);
  v25 = vaddq_f32(v27[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27[0], v25.f32[0]), v27[1], *(float32x2_t *)v25.f32, 1), v27[2], v25, 2));
  v26 = 0;
  swift_beginAccess();
  v24 = *(_OWORD *)(v11 + 96);
  v23 = *(_OWORD *)(v11 + 80);
  v22 = *(_OWORD *)(v11 + 64);
  swift_beginAccess();
  v21 = *(_OWORD *)(v11 + 112);
  v13 = (_QWORD *)(v11 + 16);
  swift_beginAccess();
  if (*(_BYTE *)(v11 + 24))
    v14 = *(_QWORD *)(v11 + 16) != 0;
  else
    v14 = -1;
  result = objc_msgSend((id)objc_opt_self(), sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v14, &v26, *(double *)v25.i64, *(double *)&v22, *(double *)&v23, *(double *)&v24, *(double *)&v21, v12);
  v17 = 0;
  if (v26 == 1 && v16.f32[0] >= 0.0)
  {
    v18 = vcgt_f32(*(float32x2_t *)&v12, v16);
    if ((v18.i8[0] & 1) != 0)
    {
      v17 = 0;
      if (v16.f32[1] >= 0.0 && (v18.i8[4] & 1) != 0)
      {
        v19 = v25.f32[2];
        if (*v13)
        {
          outlined init with copy of HandDescriptor((uint64_t)a2, (uint64_t)v10);
          if (v19 <= 0.0)
          {
            v17 = 0;
          }
          else
          {
            v20 = vmulq_f32(v25, v25);
            v17 = *v10 < sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]);
          }
          result = (id)outlined destroy of HandDescriptor((uint64_t)v10);
        }
        else
        {
          v17 = *a2 < v25.f32[2];
        }
      }
    }
  }
  *a3 = v17;
  return result;
}

void FAMetrics.getJointRotation(hand:joint:axis:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(v2 + 16) > a2)
    {
      simd_float4x4.eulerAngles.getter(*(__n128 *)(v2 + 144 * a2 + 48), *(__n128 *)(v2 + 144 * a2 + 64), *(__n128 *)(v2 + 144 * a2 + 80));
      return;
    }
    __break(1u);
  }
}

float FAMetrics.getJointQuaternionAngle(hand:joint:)()
{
  return 1.2345;
}

id FAMetrics.get2DJointInCameraImageSpace(image:hand:joint:axis:)(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  uint64_t v8;
  id result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float32x4_t v14;
  double v15;
  char v16;
  _OWORD v17[2];
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 16))
  {
    v19.i64[1] = MEMORY[0x24BEE0D00];
    v18.i64[0] = 0xD000000000000011;
    v18.i64[1] = 0x800000023D9D0820;
    type metadata accessor for HandyLoggerNeo();
    memset(v17, 0, sizeof(v17));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v17, 0xD00000000000004CLL, 0x800000023D9D07B0, 376, (uint64_t)&v18, MEMORY[0x24BEE4AF8]);
    return (id)__swift_destroy_boxed_opaque_existential_0((uint64_t)&v18);
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v4 + 16) <= a3)
    goto LABEL_15;
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(double *)(a1 + 184);
  v7 = *a4;
  v14 = *(float32x4_t *)(v4 + 32 * a3 + 32);
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)&v18);
  *(_QWORD *)&v15 = vaddq_f32(v21, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v14.f32[0]), v19, *(float32x2_t *)v14.f32, 1), v20, v14, 2)).u64[0];
  v16 = 0;
  swift_beginAccess();
  v12 = *(_OWORD *)(v5 + 80);
  v13 = *(_OWORD *)(v5 + 96);
  v11 = *(_OWORD *)(v5 + 64);
  swift_beginAccess();
  v10 = *(_OWORD *)(v5 + 112);
  swift_beginAccess();
  if (*(_BYTE *)(v5 + 24))
    v8 = *(_QWORD *)(v5 + 16) != 0;
  else
    v8 = -1;
  result = objc_msgSend((id)objc_opt_self(), sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v8, &v16, v15, *(double *)&v11, *(double *)&v12, *(double *)&v13, *(double *)&v10, v6);
  if (v16 == 1)
  {
    if (v7)
      _stringCompareWithSmolCheck(_:_:expecting:)();
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t FAMetrics.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FAMetrics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void specialized FAMetrics.getJointRotationError(hand:gtHand:joint:axis:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(_QWORD *)(v3 + 16) > a3)
      {
        simd_float4x4.eulerAngles.getter(*(__n128 *)(v3 + 144 * a3 + 48), *(__n128 *)(v3 + 144 * a3 + 64), *(__n128 *)(v3 + 144 * a3 + 80));
        if (*(_QWORD *)(v4 + 16) > a3)
        {
          simd_float4x4.eulerAngles.getter(*(__n128 *)(v4 + 144 * a3 + 48), *(__n128 *)(v4 + 144 * a3 + 64), *(__n128 *)(v4 + 144 * a3 + 80));
          return;
        }
        goto LABEL_10;
      }
      __break(1u);
LABEL_10:
      __break(1u);
    }
  }
}

void specialized FAMetrics.getJointOcclusion(hand:joint:cameraIndex:poseSpec:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v8 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)&v19 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = *a4;
    outlined init with copy of HandDescriptor(a1, (uint64_t)&v19 - v11);
    if (v14)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined destroy of HandDescriptor((uint64_t)v12);
    }
    else
    {
      v14 = *((_QWORD *)v12 + 25);
      outlined copy of HandPose?(v14);
      outlined destroy of HandDescriptor((uint64_t)v12);
      if (!v14)
        return;
    }
    v15 = *(_QWORD *)(v14 + 16);
    if (!v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v15 <= a3)
    {
      __break(1u);
    }
    else
    {
      v16 = v14 + 16 * a3;
      v17 = *(_QWORD *)(v16 + 32);
      v18 = *(_BYTE *)(v16 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((a2 & 0x8000000000000000) == 0)
      {
        if (*(_QWORD *)(v13 + 16) > a2)
        {
          if ((v18 & 1) != 0)
            goto LABEL_12;
          if (v17 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v17 <= 0x7FFFFFFF)
            {
LABEL_12:
              if (*(_QWORD *)(*(_QWORD *)(v13 + 144 * a2 + 40) + 16))
                specialized __RawDictionaryStorage.find<A>(_:)(v17);
              return;
            }
LABEL_20:
            __break(1u);
            return;
          }
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
}

float specialized FAMetrics.getJoint2GTNoneRigidDeltaCamera0(handsData:pipelineHand:gtHand:jointIndex:)(void *__src, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _BYTE v19[552];

  v7 = (uint64_t)memcpy(v19, __src, sizeof(v19));
  if (*(_QWORD *)(a3 + 16) && *(_QWORD *)(a2 + 16))
  {
    if ((a4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v9 = *(_QWORD *)(a3 + 24);
      if (*(_QWORD *)(v9 + 16) > a4)
      {
        v10 = *(_QWORD *)(a2 + 24);
        if (*(_QWORD *)(v10 + 16) > a4)
        {
          v16 = *(float32x4_t *)(v10 + 32 * a4 + 48);
          v17 = *(float32x4_t *)(v9 + 32 * a4 + 48);
          if (one-time initialization token for jointAverageDB == -1)
          {
LABEL_7:
            MEMORY[0x24BDAC7A8](v7, v8);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
            v11 = OS_dispatch_queue.sync<A>(execute:)();
            MEMORY[0x24BDAC7A8](v11, v12);
            OS_dispatch_queue.sync<A>(execute:)();
            v13 = vsubq_f32(vsubq_f32(v17, v18), vsubq_f32(v16, v18));
            v14 = vmulq_f32(v13, v13);
            return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
          }
LABEL_12:
          v7 = swift_once();
          goto LABEL_7;
        }
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return 100.0;
}

void specialized FAMetrics.getXYError(hand:gtHand:joint:from:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  simd_float4x4 *v15;

  v4 = a1[25];
  if (!v4)
    goto LABEL_19;
  v8 = *(_QWORD *)(a4 + 200);
  v9 = *(_QWORD *)(v4 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v4 + 32);
    v11 = 2;
    while (1)
    {
      v12 = *v10;
      v10 += 2;
      if (v12 == 2)
        break;
      if (!--v9)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v11 = 3;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, 1);
    if ((v14 & 1) != 0)
    {
      v15 = *(simd_float4x4 **)(*(_QWORD *)(v8 + 56) + 192 * v13 + 64);
      swift_beginAccess();
      if (a1[2])
      {
        if ((a3 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (*(_QWORD *)(a1[3] + 16) > a3)
        {
          if (!*(_QWORD *)(a2 + 16))
            return;
          if (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) > a3)
          {
            __invert_f4(v15[3]);
            return;
          }
          goto LABEL_18;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
      }
    }
  }
}

void specialized FAMetrics.get3DDepthError(hand:gtHand:joint:from:)(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  char v10;
  simd_float4x4 *v11;

  v4 = a2[25];
  if (v4)
  {
    if (*(_QWORD *)(v4 + 16))
    {
      v5 = *(_QWORD *)(a4 + 200);
      if (*(_QWORD *)(v5 + 16))
      {
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v4 + 32), *(_BYTE *)(v4 + 40));
        if ((v10 & 1) != 0)
        {
          v11 = *(simd_float4x4 **)(*(_QWORD *)(v5 + 56) + 192 * v9 + 64);
          swift_beginAccess();
          if (*(_QWORD *)(a1 + 16))
          {
            if ((a3 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) > a3)
            {
              if (!a2[2])
                return;
              if (*(_QWORD *)(a2[3] + 16) > a3)
              {
                __invert_f4(v11[3]);
                return;
              }
LABEL_14:
              __break(1u);
              return;
            }
            __break(1u);
            goto LABEL_14;
          }
        }
      }
    }
  }
}

void specialized FAMetrics.getJointQuaternionAngleError(hand:gtHand:joint:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v9;
  float32x4_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return;
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(v3 + 16) <= a3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v4 + 16) <= a3)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v5 = 144 * a3;
  *(double *)v6.i64 = simd_float4x4.quaternion.getter(*(__n128 *)(v3 + 144 * a3 + 48), *(__n128 *)(v3 + 144 * a3 + 64), *(__n128 *)(v3 + 144 * a3 + 80));
  v10 = v6;
  *(double *)v7.i64 = simd_float4x4.quaternion.getter(*(__n128 *)(v4 + v5 + 48), *(__n128 *)(v4 + v5 + 64), *(__n128 *)(v4 + v5 + 80));
  v8 = (int8x16_t)vmulq_f32(v10, v7);
  v9 = fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))));
  if (v9 > 1.0)
    v9 = 1.0;
  acosf(v9);
}

void specialized FAMetrics.getGtCameraDistance(_:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  simd_float4x4 *v5;

  if ((*(_BYTE *)(a1 + 192) & 1) == 0)
  {
    v2 = *(_QWORD *)(a2 + 200);
    if (*(_QWORD *)(v2 + 16))
    {
      v3 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
      if ((v4 & 1) != 0)
      {
        v5 = *(simd_float4x4 **)(*(_QWORD *)(v2 + 56) + 192 * v3 + 64);
        swift_beginAccess();
        __invert_f4(v5[3]);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
LABEL_5:
    while (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v6 << 6);
      v15 = *(_QWORD *)(a4 + 16);
      if (v15)
        goto LABEL_22;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      JUMPOUT(0x23D80E774);
    }
    if (v16 >= v11)
      return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v5, a3);
    v17 = *(_QWORD *)(v7 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v16 + 1;
      if (v16 + 1 >= v11)
        return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v5, a3);
      v17 = *(_QWORD *)(v7 + 8 * v6);
      if (!v17)
      {
        v6 = v16 + 2;
        if (v16 + 2 >= v11)
          return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v5, a3);
        v17 = *(_QWORD *)(v7 + 8 * v6);
        if (!v17)
          break;
      }
    }
LABEL_21:
    v10 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v6 << 6);
    v15 = *(_QWORD *)(a4 + 16);
    if (v15)
    {
LABEL_22:
      v19 = *(_QWORD *)(a3 + 48) + 16 * v14;
      v20 = *(_QWORD *)v19;
      v21 = *(unsigned __int8 *)(v19 + 8);
      v22 = (uint64_t *)(a4 + 32);
      while (1)
      {
        v24 = *v22;
        v22 += 2;
        v23 = v24;
        if (v21)
          __asm { BR              X7 }
        if (v23 == v20)
          break;
        if (!--v15)
          goto LABEL_5;
      }
      *(unint64_t *)((char *)a1 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v5++, 1))
        goto LABEL_29;
    }
  }
  v18 = v16 + 3;
  if (v18 < v11)
  {
    v17 = *(_QWORD *)(v7 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        v6 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_30;
        if (v6 >= v11)
          return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v5, a3);
        v17 = *(_QWORD *)(v7 + 8 * v6);
        ++v18;
        if (v17)
          goto LABEL_21;
      }
    }
    v6 = v18;
    goto LABEL_21;
  }
  return specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v5, a3);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, v10);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v11 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    v11 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v12, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x242638D4C](v12, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

uint64_t specialized FAMetrics.getNumJointsInStereoFOV(hand:from:cameras:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  BOOL v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  v7 = specialized _NativeDictionary.filter(_:)(v6, a3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v5 + 16);
  if (!v29)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = 0;
  v11 = 0;
  v25 = v5 + 32;
  v26 = v7;
  v27 = v4;
  v28 = v5;
  while (v11 < *(_QWORD *)(v5 + 16))
  {
    v12 = MEMORY[0x24BDAC7A8](result, v9);
    v23[1] = v13;
    v23[2] = v12;
    v24 = v4;
    v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVy5Hands12CameraSourceOAH9ImageDataV_G_Sbs5NeverOTg5((void (*)(char *__return_ptr, _OWORD *))partial apply for closure #2 in FAMetrics.getNumJointsInStereoFOV(hand:from:cameras:), (uint64_t)v23, v7);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = (_BYTE *)(v14 + 32);
      v17 = MEMORY[0x24BEE4AF8];
      do
      {
        if (*v16 == 1)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v30 = v17;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
            v17 = v30;
          }
          v19 = *(_QWORD *)(v17 + 16);
          v18 = *(_QWORD *)(v17 + 24);
          if (v19 >= v18 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
            v17 = v30;
          }
          *(_QWORD *)(v17 + 16) = v19 + 1;
          *(_BYTE *)(v17 + v19 + 32) = 1;
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
    else
    {
      v17 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v17 + 16);
    result = swift_release();
    if (v21 == 2)
    {
      v22 = __CFADD__(v10++, 1);
      v4 = v27;
      v5 = v28;
      v7 = v26;
      if (v22)
      {
        __break(1u);
LABEL_21:
        swift_release();
        swift_bridgeObjectRelease();
        return v10;
      }
    }
    else
    {
      v4 = v27;
      v5 = v28;
      v7 = v26;
    }
    if (++v11 == v29)
      goto LABEL_21;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordAxis and conformance CoordAxis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoordAxis and conformance CoordAxis;
  if (!lazy protocol witness table cache variable for type CoordAxis and conformance CoordAxis)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CoordAxis, &type metadata for CoordAxis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordAxis and conformance CoordAxis);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CoordAxis()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [CoordAxis] and conformance [A], &demangling cache variable for type metadata for [CoordAxis], MEMORY[0x24BEE12E0]);
}

uint64_t storeEnumTagSinglePayload for CoordAxis(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23D80EC50 + 4 * byte_23D9B3765[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23D80EC84 + 4 * byte_23D9B3760[v4]))();
}

uint64_t sub_23D80EC84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D80EC8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D80EC94);
  return result;
}

uint64_t sub_23D80ECA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D80ECA8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23D80ECAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D80ECB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoordAxis()
{
  return &type metadata for CoordAxis;
}

uint64_t type metadata accessor for JointAverageDB()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FAMetrics()
{
  return objc_opt_self();
}

uint64_t method lookup function for FAMetrics()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FAMetrics.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of FAMetrics.getScheduledDetection(handsData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of FAMetrics.getHandCenterDistance(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of FAMetrics.getGtCameraDistance(_:from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of FAMetrics.getJoint2GTDeltaCamera0(handsData:pipelineHand:jointIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of FAMetrics.getJoint2GTNoneRigidDeltaCamera0(handsData:pipelineHand:gtHand:jointIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of FAMetrics.getPoseCameraID(hand:isMainCamera:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of FAMetrics.calculateXYError(p:gt:cameraToWorldTransform:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of FAMetrics.getXYError(hand:gtHand:joint:from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of FAMetrics.get3DDepthError(hand:gtHand:joint:from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of FAMetrics.getNumJointsInStereoFOV(hand:from:cameras:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of FAMetrics.getJointOcclusion(hand:joint:cameraIndex:poseSpec:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of FAMetrics.getJointRotation(hand:joint:axis:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of FAMetrics.getJointQuaternionAngle(hand:joint:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of FAMetrics.getJointQuaternionAngleError(hand:gtHand:joint:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of FAMetrics.getJointRotationError(hand:gtHand:joint:axis:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of FAMetrics.get2DJointInCameraImageSpace(image:hand:joint:axis:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

id partial apply for closure #2 in FAMetrics.getNumJointsInStereoFOV(hand:from:cameras:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return closure #2 in FAMetrics.getNumJointsInStereoFOV(hand:from:cameras:)(a1, *(float **)(v2 + 48), a2, *(float32x4_t *)(v2 + 32));
}

uint64_t partial apply for closure #1 in JointAverageDB.getGTJointAverage(from:and:)@<X0>(__n128 *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in JointAverageDB.getGTJointAverage(from:and:)(v1[2], v1[3], v1[4], a1);
}

uint64_t partial apply for closure #1 in JointAverageDB.getJointAverage(from:and:)@<X0>(__n128 *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in JointAverageDB.getJointAverage(from:and:)(v1[2], v1[3], v1[4], a1);
}

uint64_t specialized static JointAverageDB.getAverageJoint(coordinates:)(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  __int128 v4;
  float *v5;
  float32x2_t v6;
  float v7;

  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a1);
    a1 = result;
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 < 6)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  if (v3 < 0xB)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  if (v3 < 0x10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v4 = 0uLL;
  *(_OWORD *)(a1 + 528) = 0u;
  if (v3 < 0x15)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_OWORD *)(a1 + 688) = 0uLL;
  if (v3 < 0x1A)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_OWORD *)(a1 + 848) = 0uLL;
  if (v3 == 26)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  *(_OWORD *)(a1 + 880) = 0uLL;
  v5 = (float *)(a1 + 56);
  do
  {
    v6 = vadd_f32(*(float32x2_t *)&v4, *(float32x2_t *)(v5 - 2));
    v7 = *v5;
    v5 += 8;
    *(float32x2_t *)&v4 = v6;
    *((float *)&v4 + 2) = *((float *)&v4 + 2) + v7;
    --v3;
  }
  while (v3);
  result = swift_bridgeObjectRelease();
  __asm { FMOV            V0.2S, #21.0 }
  return result;
}

void specialized BasePoseModelParams.reset(modelConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  unsigned __int8 v6;
  unint64_t v7;
  char v8;
  int v9;
  float v10;
  unint64_t v11;
  char v12;
  int v13;
  float v14;
  float v15;
  _BYTE v16[40];
  __int128 v17;
  __int128 v18;

  v2 = v1;
  specialized BasePoseActionModelParams.reset(modelConfig:)(a1);
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16), (v5 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v16);
  if (!*((_QWORD *)&v18 + 1))
  {
    outlined destroy of Any?((uint64_t)&v17);
    goto LABEL_9;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  v6 = objc_msgSend((id)0xD000000000000014, sel_BOOLValue);

LABEL_10:
  *(_BYTE *)(v2 + 112) = v6;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v16);
  if (!*((_QWORD *)&v18 + 1))
  {
    outlined destroy of Any?((uint64_t)&v17);
    goto LABEL_18;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    v10 = 128.0;
    goto LABEL_19;
  }
  v9 = objc_msgSend((id)0x6469775F706F7263, sel_intValue);

  v10 = (float)v9;
LABEL_19:
  v15 = v10;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16), (v12 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v17);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v16);
  if (!*((_QWORD *)&v18 + 1))
  {
    outlined destroy of Any?((uint64_t)&v17);
    goto LABEL_27;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:
    v14 = 128.0;
    goto LABEL_28;
  }
  v13 = objc_msgSend((id)0x6965685F706F7263, sel_intValue);

  v14 = (float)v13;
LABEL_28:
  *(_QWORD *)(v2 + 104) = __PAIR64__(LODWORD(v14), LODWORD(v15));
}

uint64_t PoseDnnInputLayer.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23D80F264 + 4 * byte_23D9B38B0[a1]))(0xD000000000000019, 0x800000023D9C37A0);
}

uint64_t sub_23D80F264(uint64_t a1)
{
  return a1 + 1;
}

uint64_t PoseDnnOutputLayer.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23D80F45C + 4 * byte_23D9B38C5[a1]))(0xD000000000000011, 0x800000023D9C3970);
}

uint64_t sub_23D80F45C()
{
  return 0x615F6172656D6163;
}

uint64_t sub_23D80F480()
{
  uint64_t v0;

  return v0 - 10;
}

uint64_t MonoDnnOutputLayer.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D80F5CC + 4 * byte_23D9B38D7[a1]))(1702063984, 0xE400000000000000);
}

uint64_t sub_23D80F5CC()
{
  return 0x6474735F65736F70;
}

uint64_t sub_23D80F5EC()
{
  return 0x6F725F7473697277;
}

unint64_t sub_23D80F610()
{
  return 0xD000000000000015;
}

uint64_t sub_23D80F630()
{
  return 0x6163735F656E6F62;
}

unint64_t sub_23D80F64C()
{
  return 0xD000000000000011;
}

uint64_t sub_23D80F694()
{
  return 7630452;
}

uint64_t sub_23D80F6A4()
{
  return 0x75736E755F746E74;
}

uint64_t sub_23D80F6C4()
{
  return 0x73746E6574616CLL;
}

uint64_t sub_23D80F6DC()
{
  return 0x316775626564;
}

uint64_t sub_23D80F6F0()
{
  return 0x615F68636E617262;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PoseDnnInputLayer(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PoseDnnInputLayer(a1, a2, a3, a4, (uint64_t (*)(uint64_t))PoseDnnInputLayer.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PoseDnnInputLayer(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PoseDnnInputLayer(a1, a2, (void (*)(uint64_t))PoseDnnInputLayer.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseDnnInputLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance PoseDnnInputLayer(a1, a2, a3, (void (*)(_QWORD))PoseDnnInputLayer.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PoseDnnInputLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance PoseDnnInputLayer(a1, a2, a3, (void (*)(uint64_t))PoseDnnInputLayer.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PoseDnnInputLayer@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized PoseDnnInputLayer.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PoseDnnInputLayer@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PoseDnnInputLayer.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PoseDnnInputLayer(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PoseDnnInputLayer.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PoseDnnOutputLayer(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PoseDnnInputLayer(a1, a2, a3, a4, (uint64_t (*)(uint64_t))PoseDnnOutputLayer.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PoseDnnOutputLayer(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PoseDnnInputLayer(a1, a2, (void (*)(uint64_t))PoseDnnOutputLayer.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseDnnOutputLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance PoseDnnInputLayer(a1, a2, a3, (void (*)(_QWORD))PoseDnnOutputLayer.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PoseDnnOutputLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance PoseDnnInputLayer(a1, a2, a3, (void (*)(uint64_t))PoseDnnOutputLayer.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PoseDnnOutputLayer@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized PoseDnnOutputLayer.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PoseDnnOutputLayer@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PoseDnnOutputLayer.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PoseDnnOutputLayer(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PoseDnnOutputLayer.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MonoDnnOutputLayer(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PoseDnnInputLayer(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MonoDnnOutputLayer.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PoseDnnInputLayer(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  if (v7 == a5(v6) && v9 == v10)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MonoDnnOutputLayer(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PoseDnnInputLayer(a1, a2, (void (*)(uint64_t))MonoDnnOutputLayer.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PoseDnnInputLayer(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;

  v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MonoDnnOutputLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance PoseDnnInputLayer(a1, a2, a3, (void (*)(_QWORD))MonoDnnOutputLayer.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseDnnInputLayer(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unsigned __int8 *v4;

  a4(*v4);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MonoDnnOutputLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance PoseDnnInputLayer(a1, a2, a3, (void (*)(uint64_t))MonoDnnOutputLayer.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PoseDnnInputLayer(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;

  v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MonoDnnOutputLayer@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized MonoDnnOutputLayer.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MonoDnnOutputLayer@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MonoDnnOutputLayer.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance MonoDnnOutputLayer(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static MonoDnnOutputLayer.allCases.getter;
}

uint64_t PoseModelParams.init(_:_:configurationName:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  uint64_t v16;

  *(_DWORD *)(v4 + 220) = 0;
  *(_BYTE *)(v4 + 224) = 1;
  *(_DWORD *)(v4 + 228) = 0;
  *(_BYTE *)(v4 + 232) = 1;
  *(_DWORD *)(v4 + 236) = 0;
  *(_BYTE *)(v4 + 240) = 1;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_QWORD *)(v4 + 280) = 0;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_BYTE *)(v4 + 288) = 2;
  *(_DWORD *)(v4 + 292) = 0;
  *(_BYTE *)(v4 + 296) = 1;
  *(_QWORD *)(v4 + 304) = 0;
  *(_QWORD *)(v4 + 312) = 0;
  *(_BYTE *)(v4 + 320) = 2;
  v9 = *(_OWORD *)a3;
  v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 136) = v10;
  *(_OWORD *)(v4 + 120) = v9;
  v11 = *(_OWORD *)(a3 + 48);
  v12 = *(_OWORD *)(a3 + 64);
  v13 = *(_OWORD *)(a3 + 80);
  *(_BYTE *)(v4 + 216) = *(_BYTE *)(a3 + 96);
  *(_OWORD *)(v4 + 200) = v13;
  *(_OWORD *)(v4 + 184) = v12;
  *(_OWORD *)(v4 + 168) = v11;
  v14 = *(_BYTE *)a3;
  outlined retain of PoseModelGlobalConfig(a3);
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v16 = specialized BasePoseModelParams.init(_:modelConfig:allowInternalModel:configurationName:)(a1, a2, v15, v14, a4, v4, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
  swift_release();
  outlined release of PoseModelGlobalConfig(a3);
  swift_retain();
  ModelParams.configure()();
  swift_release();
  return v16;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PoseModelParams.resolveModelPath()()
{
  Swift::String result;

  __asm { BR              X10 }
  return result;
}

void (*sub_23D80FBD8())(char *, uint64_t)
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  void (*v4)(char *, uint64_t);

  swift_bridgeObjectRelease();
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for ModelUtils);
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 48);
  swift_bridgeObjectRetain();
  v4 = static ModelUtils.getPoseModelPath(_:_:)(v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Void __swiftcall PoseModelParams.reset(modelConfig:)(Swift::OpaquePointer modelConfig)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  int v6;
  int v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  unsigned __int8 v12;
  float v13;
  unint64_t v14;
  char v15;
  float v16;
  float v17;
  unint64_t v18;
  char v19;
  float v20;
  float v21;
  unint64_t v22;
  char v23;
  float v24;
  float v25;
  unint64_t v26;
  char v27;
  float v28;
  float v29;
  unint64_t v30;
  char v31;
  float v32;
  float v33;
  unint64_t v34;
  char v35;
  float v36;
  float v37;
  unint64_t v38;
  char v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  _BYTE v52[40];
  __int128 v53;
  __int128 v54;

  v2 = v1;
  specialized BasePoseModelParams.reset(modelConfig:)((uint64_t)modelConfig._rawValue);
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v5 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v4, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (!*((_QWORD *)&v54 + 1))
  {
    outlined destroy of Any?((uint64_t)&v53);
    goto LABEL_9;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v7 = 1048911544;
    goto LABEL_10;
  }
  objc_msgSend((id)0x69735F6C65786F76, sel_floatValue);
  v7 = v6;

LABEL_10:
  *(_DWORD *)(v1 + 220) = v7;
  *(_BYTE *)(v1 + 224) = 0;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v9 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v8, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (!*((_QWORD *)&v54 + 1))
  {
    outlined destroy of Any?((uint64_t)&v53);
    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    v51 = 0;
    goto LABEL_19;
  }
  v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
LABEL_19:
  *(_BYTE *)(v1 + 320) = v51 & 1;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v11 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v10, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (*((_QWORD *)&v54 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v12 = objc_msgSend((id)0xD000000000000023, sel_BOOLValue);

      goto LABEL_28;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v53);
  }
  v12 = 0;
LABEL_28:
  *(_BYTE *)(v2 + 288) = v12;
  v13 = *(float *)(v2 + 124);
  if (v13 >= 0.0)
    goto LABEL_38;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v15 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v14, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (*((_QWORD *)&v54 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend((id)0xD000000000000018, sel_floatValue);
      v13 = v16;

      goto LABEL_38;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v53);
  }
  v13 = -1.0;
LABEL_38:
  *(float *)(v2 + 228) = v13;
  *(_BYTE *)(v2 + 232) = 0;
  v17 = *(float *)(v2 + 128);
  if (v17 >= 0.0)
    goto LABEL_48;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v19 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v18, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (*((_QWORD *)&v54 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend((id)0xD00000000000001ELL, sel_floatValue);
      v17 = v20;

      goto LABEL_48;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v53);
  }
  v17 = -1.0;
LABEL_48:
  *(float *)(v2 + 236) = v17;
  *(_BYTE *)(v2 + 240) = 0;
  v21 = *(float *)(v2 + 132);
  if (v21 >= 0.0)
    goto LABEL_58;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v23 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v22, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (*((_QWORD *)&v54 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend((id)0xD000000000000029, sel_floatValue);
      v21 = v24;

      goto LABEL_58;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v53);
  }
  v21 = -1.0;
LABEL_58:
  v25 = *(float *)(v2 + 136);
  if (v25 >= 0.0)
    goto LABEL_68;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v27 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v26, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (*((_QWORD *)&v54 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend((id)0xD00000000000002ALL, sel_floatValue);
      v25 = v28;

      goto LABEL_68;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v53);
  }
  v25 = -1.0;
LABEL_68:
  v29 = *(float *)(v2 + 140);
  if (v29 >= 0.0)
    goto LABEL_78;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v31 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v30, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (*((_QWORD *)&v54 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend((id)0xD000000000000028, sel_floatValue);
      v29 = v32;

      goto LABEL_78;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v53);
  }
  v29 = -1.0;
LABEL_78:
  v33 = *(float *)(v2 + 144);
  if (v33 >= 0.0)
    goto LABEL_88;
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v35 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v34, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (*((_QWORD *)&v54 + 1))
  {
    type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend((id)0xD000000000000029, sel_floatValue);
      v33 = v36;

      goto LABEL_88;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v53);
  }
  v33 = -1.0;
LABEL_88:
  v37 = *(float *)(v2 + 148);
  if (v37 >= 0.0)
  {
LABEL_98:
    *(float *)(v2 + 292) = v37;
    goto LABEL_99;
  }
  AnyHashable.init<A>(_:)();
  if (*((_QWORD *)modelConfig._rawValue + 2)
    && (v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52), (v39 & 1) != 0))
  {
    outlined init with copy of Any(*((_QWORD *)modelConfig._rawValue + 7) + 32 * v38, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v52);
  if (!*((_QWORD *)&v54 + 1))
  {
    outlined destroy of Any?((uint64_t)&v53);
    goto LABEL_97;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_97:
    v37 = -1.0;
    goto LABEL_98;
  }
  objc_msgSend((id)0xD000000000000021, sel_floatValue);
  v41 = v40;

  *(_DWORD *)(v2 + 292) = v41;
LABEL_99:
  *(_BYTE *)(v2 + 296) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_23D9A7050;
  *(float *)(v42 + 32) = v21;
  *(float *)(v42 + 36) = v29;
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_23D9A7050;
  *(float *)(v43 + 32) = v25;
  *(float *)(v43 + 36) = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v44 = swift_allocObject();
  v45 = *(_OWORD *)(v2 + 152);
  *(_OWORD *)(v44 + 16) = xmmword_23D9A7050;
  *(_OWORD *)(v44 + 32) = v45;
  v46 = swift_allocObject();
  v47 = *(_OWORD *)(v2 + 168);
  *(_OWORD *)(v46 + 16) = xmmword_23D9A7050;
  *(_OWORD *)(v46 + 32) = v47;
  v48 = swift_allocObject();
  v49 = *(_OWORD *)(v2 + 184);
  *(_OWORD *)(v48 + 16) = xmmword_23D9A7050;
  *(_OWORD *)(v48 + 32) = v49;
  v50 = *(_QWORD *)(v2 + 248);
  *(_QWORD *)(v2 + 248) = v42;
  *(_QWORD *)(v2 + 256) = v43;
  *(_QWORD *)(v2 + 264) = v44;
  *(_QWORD *)(v2 + 272) = v46;
  *(_QWORD *)(v2 + 280) = v48;
  outlined consume of ObjectInteractionParams?(v50);
}

uint64_t PoseModelParams.__ivar_destroyer()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[6];
  char v6;

  v1 = *(_OWORD *)(v0 + 168);
  v2 = *(_OWORD *)(v0 + 200);
  v5[4] = *(_OWORD *)(v0 + 184);
  v5[5] = v2;
  v6 = *(_BYTE *)(v0 + 216);
  v3 = *(_OWORD *)(v0 + 136);
  v5[0] = *(_OWORD *)(v0 + 120);
  v5[1] = v3;
  v5[2] = *(_OWORD *)(v0 + 152);
  v5[3] = v1;
  outlined release of PoseModelGlobalConfig((uint64_t)v5);
  outlined consume of ObjectInteractionParams?(*(_QWORD *)(v0 + 248));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PoseModelParams.__deallocating_deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[6];
  char v6;

  v0 = specialized BasePoseActionModelParams.deinit();
  v1 = *(_OWORD *)(v0 + 168);
  v2 = *(_OWORD *)(v0 + 200);
  v5[4] = *(_OWORD *)(v0 + 184);
  v5[5] = v2;
  v6 = *(_BYTE *)(v0 + 216);
  v3 = *(_OWORD *)(v0 + 136);
  v5[0] = *(_OWORD *)(v0 + 120);
  v5[1] = v3;
  v5[2] = *(_OWORD *)(v0 + 152);
  v5[3] = v1;
  outlined release of PoseModelGlobalConfig((uint64_t)v5);
  outlined consume of ObjectInteractionParams?(*(_QWORD *)(v0 + 248));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PoseModelParams(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PoseModelParams);
}

uint64_t type metadata completion function for PoseModelParams()
{
  return swift_initClassMetadata2();
}

uint64_t UberModelParams.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  Swift::String v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  char v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  _QWORD v25[5];
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;

  v4 = v3;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  v7 = (_OWORD *)(v3 + 16);
  v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v3 + 96) = v8;
  *(_BYTE *)(v3 + 112) = *(_BYTE *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v3 + 32) = v9;
  v10 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v3 + 64) = v10;
  v11 = String.lowercased()();
  if (v11._countAndFlagsBits == 0x6F72687473736170 && v11._object == (void *)0xEB00000000686775)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)v26 = xmmword_23D9A6CC0;
    *(_OWORD *)&v26[16] = 0uLL;
    v25[3] = MEMORY[0x24BEE0D00];
    v25[0] = 0xD000000000000019;
    v25[1] = 0x800000023D9D0B60;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005FLL, 0x800000023D9D0B00, 201, (uint64_t *)v26, (uint64_t)v25, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
    v13 = *(_OWORD *)(v3 + 96);
    v29 = *(_OWORD *)(v3 + 80);
    v30 = v13;
    v31 = *(_BYTE *)(v3 + 112);
    v14 = *(_OWORD *)(v3 + 32);
    *(_OWORD *)v26 = *v7;
    *(_OWORD *)&v26[16] = v14;
    v15 = *(_OWORD *)(v3 + 64);
    v27 = *(_OWORD *)(v3 + 48);
    v28 = v15;
    type metadata accessor for PoseModelParams(0);
    swift_allocObject();
    outlined retain of PoseModelGlobalConfig((uint64_t)v26);
    *(_QWORD *)(v3 + 120) = PoseModelParams.init(_:_:configurationName:)(a1, a2, (uint64_t)v26, 0);
    swift_release();
    *(_QWORD *)(v3 + 128) = 0;
    goto LABEL_13;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
    goto LABEL_5;
  v17 = *(_QWORD *)(v3 + 96);
  v16 = *(_QWORD *)(v4 + 104);
  if (v16 == 640)
    v18 = 3;
  else
    v18 = 1;
  v19 = *(_DWORD *)(v4 + 44);
  v20 = *(_BYTE *)(v4 + 112);
  v26[0] = *(_BYTE *)(v4 + 16);
  *(_OWORD *)&v26[4] = *(_OWORD *)(v4 + 20);
  *(_QWORD *)&v26[20] = *(_QWORD *)(v4 + 36);
  *(_DWORD *)&v26[28] = v19;
  v21 = *(_OWORD *)(v4 + 64);
  v27 = *(_OWORD *)(v4 + 48);
  v28 = v21;
  v29 = *(_OWORD *)(v4 + 80);
  *(_QWORD *)&v30 = v17;
  *((_QWORD *)&v30 + 1) = v16;
  v31 = v20;
  type metadata accessor for PoseModelParams(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 120) = PoseModelParams.init(_:_:configurationName:)(a1, a2, (uint64_t)v26, v18);
  swift_release();
  if (*(_BYTE *)(v4 + 112) == 1)
  {
    swift_bridgeObjectRelease();
    v23 = 0;
  }
  else
  {
    v22 = *(_BYTE *)v7;
    type metadata accessor for PinchModelParams();
    swift_allocObject();
    v23 = PinchModelParams.init(modelNameOrPath:allowInternalModel:configurationName:)(a1, a2, v22, v18);
  }
  *(_QWORD *)(v4 + 128) = v23;
LABEL_13:
  swift_release();
  return v4;
}

uint64_t UberModelParams.__deallocating_deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[6];
  char v6;

  v1 = *(_OWORD *)(v0 + 96);
  v5[4] = *(_OWORD *)(v0 + 80);
  v5[5] = v1;
  v6 = *(_BYTE *)(v0 + 112);
  v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  v3 = *(_OWORD *)(v0 + 64);
  v5[2] = *(_OWORD *)(v0 + 48);
  v5[3] = v3;
  outlined release of PoseModelGlobalConfig((uint64_t)v5);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UberModelParams()
{
  return objc_opt_self();
}

Swift::String __swiftcall HybridModelParams.getModelPath()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 120);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 32);
    v3 = *(void **)(v1 + 40);
    swift_bridgeObjectRetain();
    v4 = v2;
    v5 = v3;
  }
  else
  {
    __break(1u);
  }
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t HybridModelParams.__ivar_destroyer()
{
  swift_release();
  return swift_release();
}

uint64_t HybridModelParams.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HybridModelParams()
{
  return objc_opt_self();
}

Swift::Void __swiftcall MonoModelParams.configure()()
{
  _QWORD *v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  ModelParams.configure()();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v3 = v0[4];
  v4 = (void *)v0[5];
  swift_bridgeObjectRetain();
  specialized E5RTRegressor.__allocating_init(bundle:modelPath:directBindInputNames:directBindOutputNames:configName:)(v2, v3, v4, MEMORY[0x24BEE4B08], MEMORY[0x24BEE4B08], 1852399981, 0xE400000000000000);
  v0[15] = v5;
  swift_release();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MonoModelParams.resolveModelPath()()
{
  Swift::String result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_23D810E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int v4;
  void (*v5)(char *, uint64_t);
  void (*v6)(char *, uint64_t);
  uint64_t result;

  swift_bridgeObjectRelease();
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for ModelUtils);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(void **)(v1 + 24);
  v4 = *(unsigned __int8 *)(v1 + 48);
  swift_bridgeObjectRetain();
  v5 = static ModelUtils.getMonoModelPath(_:_:)(v2, v3, v4);
  if (v0)
  {
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v6 = v5;
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  return result;
}

uint64_t MonoModelParams.__ivar_destroyer()
{
  return swift_release();
}

uint64_t MonoModelParams.__deallocating_deinit()
{
  specialized BasePoseActionModelParams.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MonoModelParams(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for MonoModelParams);
}

uint64_t type metadata completion function for MonoModelParams()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for MonoDnnOutputLayer(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MonoDnnOutputLayer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_23D811430 + 4 * byte_23D9B390A[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_23D811464 + 4 * byte_23D9B3905[v4]))();
}

uint64_t sub_23D811464(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D81146C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D811474);
  return result;
}

uint64_t sub_23D811480(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D811488);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_23D81148C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D811494(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MonoDnnOutputLayer()
{
  return &type metadata for MonoDnnOutputLayer;
}

uint64_t destroy for ObjectInteractionParams()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ObjectInteractionParams(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ObjectInteractionParams(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ObjectInteractionParams(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectInteractionParams(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ObjectInteractionParams(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectInteractionParams()
{
  return &type metadata for ObjectInteractionParams;
}

uint64_t getEnumTagSinglePayload for PoseDnnOutputLayer(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PoseDnnOutputLayer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_23D8117F4 + 4 * byte_23D9B3914[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_23D811828 + 4 * byte_23D9B390F[v4]))();
}

uint64_t sub_23D811828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D811830(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D811838);
  return result;
}

uint64_t sub_23D811844(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D81184CLL);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_23D811850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D811858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PoseDnnOutputLayer()
{
  return &type metadata for PoseDnnOutputLayer;
}

uint64_t getEnumTagSinglePayload for PoseDnnInputLayer(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PoseDnnInputLayer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_23D811950 + 4 * byte_23D9B391E[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_23D811984 + 4 * byte_23D9B3919[v4]))();
}

uint64_t sub_23D811984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D81198C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D811994);
  return result;
}

uint64_t sub_23D8119A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8119A8);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_23D8119AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8119B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PoseDnnInputLayer()
{
  return &type metadata for PoseDnnInputLayer;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PoseDnnInputLayer()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PoseDnnInputLayer] and conformance [A], &demangling cache variable for type metadata for [PoseDnnInputLayer]);
}

unint64_t lazy protocol witness table accessor for type PoseDnnInputLayer and conformance PoseDnnInputLayer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseDnnInputLayer and conformance PoseDnnInputLayer;
  if (!lazy protocol witness table cache variable for type PoseDnnInputLayer and conformance PoseDnnInputLayer)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseDnnInputLayer, &type metadata for PoseDnnInputLayer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseDnnInputLayer and conformance PoseDnnInputLayer);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PoseDnnOutputLayer()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PoseDnnOutputLayer] and conformance [A], &demangling cache variable for type metadata for [PoseDnnOutputLayer]);
}

unint64_t lazy protocol witness table accessor for type PoseDnnOutputLayer and conformance PoseDnnOutputLayer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseDnnOutputLayer and conformance PoseDnnOutputLayer;
  if (!lazy protocol witness table cache variable for type PoseDnnOutputLayer and conformance PoseDnnOutputLayer)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseDnnOutputLayer, &type metadata for PoseDnnOutputLayer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseDnnOutputLayer and conformance PoseDnnOutputLayer);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in MonoDnnOutputLayer()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [MonoDnnOutputLayer] and conformance [A], &demangling cache variable for type metadata for [MonoDnnOutputLayer]);
}

unint64_t lazy protocol witness table accessor for type MonoDnnOutputLayer and conformance MonoDnnOutputLayer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MonoDnnOutputLayer and conformance MonoDnnOutputLayer;
  if (!lazy protocol witness table cache variable for type MonoDnnOutputLayer and conformance MonoDnnOutputLayer)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MonoDnnOutputLayer, &type metadata for MonoDnnOutputLayer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MonoDnnOutputLayer and conformance MonoDnnOutputLayer);
  }
  return result;
}

uint64_t specialized PoseDnnInputLayer.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x15)
    return 21;
  else
    return v0;
}

uint64_t specialized PoseDnnOutputLayer.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12)
    return 18;
  else
    return v0;
}

unint64_t specialized static UberModelParams.adjustModelName(_:globalConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t result;

  if ((*(_BYTE *)(a3 + 96) & 1) == 0)
    goto LABEL_12;
  lazy protocol witness table accessor for type String and conformance String();
  v4 = Collection<>.ranges<A>(of:)();
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRetain();
    return a1;
  }
  v6 = *(_QWORD *)(v4 + 16 * v5 + 24);
  swift_bridgeObjectRelease();
  v7 = Collection<>.ranges<A>(of:)();
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  v9 = v6 >> 14;
  if (v6 >> 14 < *(_QWORD *)(v7 + 16 * v8 + 24) >> 14)
  {
    v10 = (16 * v8) | 8;
    while (--v8)
    {
      v11 = *(_QWORD *)(v7 + v10);
      v10 -= 16;
      if (v9 >= v11 >> 14)
        goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  result = String.index(_:offsetBy:)();
  if (v9 >= result >> 14)
  {
    String.removeSubrange(_:)();
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t specialized UberModelParams.__allocating_init(config:isPoseOnly:)(void *a1, char a2)
{
  unsigned __int8 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  signed int v17;
  signed int v18;
  signed int v19;
  signed int v20;
  signed int v21;
  signed int v22;
  double v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[4];
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  v4 = objc_msgSend(a1, sel_AllowInternalModel);
  objc_msgSend(a1, sel_ChiralityLeftHandPresenceThresholdOverride);
  v6 = v5;
  objc_msgSend(a1, sel_RequiresAssociationHandPresenceThresholdOverride);
  v8 = v7;
  objc_msgSend(a1, sel_ObjectInteractionGeneralMakeThresholdOverride);
  v10 = v9;
  objc_msgSend(a1, sel_ObjectInteractionGeneralBreakThresholdOverride);
  v12 = v11;
  objc_msgSend(a1, sel_ObjectInteractionPencilMakeThresholdOverride);
  v14 = v13;
  objc_msgSend(a1, sel_ObjectInteractionPencilBreakThresholdOverride);
  v16 = v15;
  v17 = objc_msgSend(a1, sel_ObjectInteractionGeneralNumFramesBreakDelay);
  v18 = objc_msgSend(a1, sel_ObjectInteractionPencilNumFramesBreakDelay);
  v19 = objc_msgSend(a1, sel_ObjectInteractionGeneralNumFramesToLockHighConfidence);
  v20 = objc_msgSend(a1, sel_ObjectInteractionPencilNumFramesToLockHighConfidence);
  v21 = objc_msgSend(a1, sel_ObjectInteractionGeneralNumFramesToEnableBreakDelay);
  v22 = objc_msgSend(a1, sel_ObjectInteractionPencilNumFramesToEnableBreakDelay);
  objc_msgSend(a1, sel_JointsObjectOcclusionThresholdOverride);
  v24 = v23;
  v25 = objc_msgSend(a1, sel_Enable640Mode);
  v42[0] = v4;
  v26 = 1280;
  v27 = v6;
  v28 = v8;
  v43 = v27;
  v44 = v28;
  if (v25)
    v26 = 640;
  v29 = v10;
  v30 = v12;
  v45 = v29;
  v46 = v30;
  v31 = v14;
  v32 = v16;
  v47 = v31;
  v48 = v32;
  v33 = v24;
  v49 = v33;
  v50 = v17;
  v51 = v18;
  v52 = v19;
  v53 = v20;
  v54 = v21;
  v55 = v22;
  v56 = MEMORY[0x24BEE4AF8];
  v57 = v26;
  v58 = a2;
  v34 = objc_msgSend(a1, sel_UberPoseModel);
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

  v38 = specialized static UberModelParams.adjustModelName(_:globalConfig:)(v35, v37, (uint64_t)v42);
  v40 = v39;
  swift_bridgeObjectRelease();
  type metadata accessor for UberModelParams();
  swift_allocObject();
  return UberModelParams.init(_:_:)(v38, v40, (uint64_t)v42);
}

uint64_t outlined retain of PoseModelGlobalConfig(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of PoseModelGlobalConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized static MonoModelParams.resolveModelName(_:)(void *a1)
{
  id v2;
  uint64_t v3;
  Swift::String v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  Swift::String v11;
  uint64_t v13;

  v2 = objc_msgSend(a1, sel_MonoPoseModel);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = v3;
  if (objc_msgSend(a1, sel_UseUberMono))
  {
    v4._countAndFlagsBits = 0x65736F705FLL;
    v4._object = (void *)0xE500000000000000;
    String.append(_:)(v4);
    v5 = objc_msgSend(a1, sel_PoseCropMode);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    if (v6 == 0x47435F454E41 && v8 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
        return v13;
    }
    v11._countAndFlagsBits = 0x7261775F656E615FLL;
    v11._object = (void *)0xEB00000000726570;
    String.append(_:)(v11);
    return v13;
  }
  return v3;
}

uint64_t specialized BasePoseModelParams.init(_:modelConfig:allowInternalModel:configurationName:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6)
{
  return specialized BasePoseModelParams.init(_:modelConfig:allowInternalModel:configurationName:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
}

uint64_t specialized BasePoseModelParams.init(_:modelConfig:allowInternalModel:configurationName:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  unint64_t v14;
  char v15;
  unsigned __int8 v16;
  uint64_t v17;
  _BYTE v19[40];
  __int128 v20;
  __int128 v21;

  *(_QWORD *)(a6 + 104) = 0;
  swift_retain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a3 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19), (v15 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v14, (uint64_t)&v20);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v19);
  if (!*((_QWORD *)&v21 + 1))
  {
    outlined destroy of Any?((uint64_t)&v20);
    goto LABEL_9;
  }
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v16 = 0;
    goto LABEL_10;
  }
  v16 = objc_msgSend((id)0xD000000000000014, sel_BOOLValue);

LABEL_10:
  *(_BYTE *)(a6 + 112) = v16;
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v17 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a6 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a6 + 64) = a7(v17);
  *(_QWORD *)(a6 + 72) = v17;
  *(_QWORD *)(a6 + 80) = v17;
  *(_QWORD *)(a6 + 88) = v17;
  *(_BYTE *)(a6 + 96) = a5;
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  *(_BYTE *)(a6 + 48) = a4 & 1;
  *(_QWORD *)(a6 + 32) = a1;
  *(_QWORD *)(a6 + 40) = a2;
  swift_bridgeObjectRetain();
  return a6;
}

unint64_t specialized MonoDnnOutputLayer.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MonoDnnOutputLayer.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

uint64_t outlined consume of ObjectInteractionParams?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of StereoPoseDetectorModelError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for StereoPoseDetectorModelError(uint64_t a1)
{
  return outlined consume of StereoPoseDetectorModelError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of StereoPoseDetectorModelError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for StereoPoseDetectorModelError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of StereoPoseDetectorModelError(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for StereoPoseDetectorModelError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of StereoPoseDetectorModelError(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of StereoPoseDetectorModelError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for StereoPoseDetectorModelError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of StereoPoseDetectorModelError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for StereoPoseDetectorModelError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StereoPoseDetectorModelError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for StereoPoseDetectorModelError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for StereoPoseDetectorModelError(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StereoPoseDetectorModelError()
{
  return &type metadata for StereoPoseDetectorModelError;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[14 * v8 + 4];
  if (a1 + 32 < v9 + 112 * v2 && v9 < a1 + 32 + 112 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[24 * v8 + 4];
  if (a1 + 32 < v9 + 192 * v2 && v9 < a1 + 32 + 192 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[40 * v8 + 4];
  if (a1 + 32 < v9 + 320 * v2 && v9 < a1 + 32 + 320 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Hands::DetectionResultsByChirality __swiftcall DetectionResultsByChirality.init()()
{
  _QWORD *v0;
  uint64_t v1;
  Hands::DetectionResultsByChirality result;

  v1 = MEMORY[0x24BEE4AF8];
  *v0 = MEMORY[0x24BEE4AF8];
  v0[1] = v1;
  return result;
}

Hands::DetectionResultsByChirality __swiftcall DetectionResultsByChirality.init(_:_:)(Hands::DetectionResultsByChirality a1, Hands::DetectionResultsByChirality a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Hands::DetectionResultsByChirality result;
  uint64_t v10;

  v3 = v2;
  v4 = *((_QWORD *)a1.leftDetections._rawValue + 1);
  v10 = *(_QWORD *)a1.leftDetections._rawValue;
  swift_bridgeObjectRetain();
  v5 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v5);
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (void *)swift_bridgeObjectRelease();
  *v3 = v10;
  v3[1] = v4;
  result.rightDetections._rawValue = v8;
  result.leftDetections._rawValue = v7;
  return result;
}

uint64_t DetectionResult.init(protoBuf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  int v27;
  char v28;
  int v29;
  char v30;
  int v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;

  v4 = type metadata accessor for Coordinate2DPB(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4, v6);
  v9 = (uint64_t *)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v10)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v10 == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v12 == 1)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v14 = *(_QWORD *)(v11 + 32);
  v15 = *(_QWORD *)(a1 + 16);
  v48 = *(_QWORD *)(a1 + 24);
  v47 = *(unsigned __int8 *)(a1 + 32);
  v46 = *(_QWORD *)(a1 + 48);
  v45 = *(unsigned __int8 *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(v16 + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v53 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v19 = *(unsigned __int8 *)(v5 + 80);
    v44 = v16;
    v20 = v16 + ((v19 + 32) & ~v19);
    v21 = *(_QWORD *)(v5 + 72);
    v18 = v53;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v20, (uint64_t)v9, type metadata accessor for Coordinate2DPB);
      v22 = *v9;
      outlined destroy of Matrix3x3PB((uint64_t)v9, type metadata accessor for Coordinate2DPB);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v53;
      }
      v24 = *(_QWORD *)(v18 + 16);
      v23 = *(_QWORD *)(v18 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v18 = v53;
      }
      *(_QWORD *)(v18 + 16) = v24 + 1;
      *(_QWORD *)(v18 + 8 * v24 + 32) = v22;
      v20 += v21;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  v25 = (int *)type metadata accessor for DetectionResultPB(0);
  v26 = a1 + v25[18];
  v27 = *(_DWORD *)v26;
  v28 = *(_BYTE *)(v26 + 4);
  v29 = *(_DWORD *)(a1 + 72);
  v30 = *(_BYTE *)(a1 + 76);
  v31 = *(_DWORD *)(a1 + 80);
  v32 = (int *)(a1 + v25[19]);
  v33 = *v32;
  v34 = *((unsigned __int8 *)v32 + 4);
  v35 = a1 + v25[20];
  v36 = *(_DWORD *)v35;
  v37 = *(_BYTE *)(v35 + 4);
  v38 = *(_QWORD *)(a1 + 88);
  v39 = 0;
  if (*(_QWORD *)(v38 + 16) == 2)
    v39 = *(_QWORD *)(v38 + 32);
  if (v34)
    v40 = 1;
  else
    v40 = v33;
  v41 = *(_BYTE *)(a1 + 96);
  result = outlined destroy of Matrix3x3PB(a1, type metadata accessor for DetectionResultPB);
  v42 = v47;
  v52 = v47;
  v43 = v45;
  v51 = v45;
  v50 = v28;
  v49 = v37;
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v48;
  *(_BYTE *)(a2 + 40) = v42;
  *(_QWORD *)(a2 + 48) = v46;
  *(_BYTE *)(a2 + 56) = v43;
  *(_DWORD *)(a2 + 60) = v27;
  *(_BYTE *)(a2 + 64) = v28;
  *(_DWORD *)(a2 + 68) = v29;
  *(_BYTE *)(a2 + 72) = v30;
  *(_DWORD *)(a2 + 76) = v31;
  *(_QWORD *)(a2 + 80) = v40;
  *(_DWORD *)(a2 + 88) = v36;
  *(_BYTE *)(a2 + 92) = v37;
  *(_QWORD *)(a2 + 96) = v39;
  *(_BYTE *)(a2 + 104) = v41;
  return result;
}

__n128 DetectionCanonicalizationData.init(protoBuf:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  __int128 v50;
  unsigned int v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __n128 v65;
  _OWORD *v66;
  __int128 v67;
  __n128 result;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __n128 v75;
  __int128 v76;
  uint64_t v77;
  _OWORD *v78;

  v78 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  v5 = MEMORY[0x24BDAC7A8](v3, v4);
  *(_QWORD *)&v76 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5, v7);
  *(_QWORD *)&v74 = (char *)&v69 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  *(_QWORD *)&v72 = (char *)&v69 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)&v69 - v15;
  v18 = MEMORY[0x24BDAC7A8](v14, v17);
  v20 = (char *)&v69 - v19;
  MEMORY[0x24BDAC7A8](v18, v21);
  v23 = (char *)&v69 - v22;
  v24 = type metadata accessor for Coordinate3DPB(0);
  v25 = *(_QWORD *)(v24 - 8);
  v27 = MEMORY[0x24BDAC7A8](v24, v26);
  v75.n128_u64[0] = (unint64_t)&v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v27, v29);
  *(_QWORD *)&v73 = (char *)&v69 - v31;
  v33 = MEMORY[0x24BDAC7A8](v30, v32);
  v35 = (char *)&v69 - v34;
  v37 = MEMORY[0x24BDAC7A8](v33, v36);
  v39 = (char *)&v69 - v38;
  v41 = MEMORY[0x24BDAC7A8](v37, v40);
  v43 = (char *)&v69 - v42;
  MEMORY[0x24BDAC7A8](v41, v44);
  v46 = (char *)&v69 - v45;
  v70 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  v47 = *(int *)(v70 + 20);
  v77 = a1;
  v48 = a1 + v47;
  outlined init with copy of Coordinate3DPB?(v48, (uint64_t)v23);
  v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v49(v23, 1, v24) == 1)
  {
    *(_QWORD *)v46 = 0;
    *((_DWORD *)v46 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v23);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v23, (uint64_t)v46, type metadata accessor for Coordinate3DPB);
  }
  LODWORD(v50) = *(_DWORD *)v46;
  v71 = v50;
  outlined destroy of Matrix3x3PB((uint64_t)v46, type metadata accessor for Coordinate3DPB);
  outlined init with copy of Coordinate3DPB?(v48, (uint64_t)v20);
  v51 = v49(v20, 1, v24);
  v52 = v72;
  if (v51 == 1)
  {
    *(_QWORD *)v43 = 0;
    *((_DWORD *)v43 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v20);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v20, (uint64_t)v43, type metadata accessor for Coordinate3DPB);
  }
  v54 = v74;
  LODWORD(v53) = *((_DWORD *)v43 + 1);
  v74 = v53;
  outlined destroy of Matrix3x3PB((uint64_t)v43, type metadata accessor for Coordinate3DPB);
  outlined init with copy of Coordinate3DPB?(v48, (uint64_t)v16);
  if (v49(v16, 1, v24) == 1)
  {
    *(_QWORD *)v39 = 0;
    *((_DWORD *)v39 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v16);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v16, (uint64_t)v39, type metadata accessor for Coordinate3DPB);
  }
  v56 = v75.n128_u64[0];
  v57 = v73;
  v55.n128_u32[0] = *((_DWORD *)v39 + 2);
  v75 = v55;
  outlined destroy of Matrix3x3PB((uint64_t)v39, type metadata accessor for Coordinate3DPB);
  v58 = v77;
  v59 = v77 + *(int *)(v70 + 24);
  outlined init with copy of Coordinate3DPB?(v59, v52);
  if (v49((char *)v52, 1, v24) == 1)
  {
    *(_QWORD *)v35 = 0;
    *((_DWORD *)v35 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v52);
  }
  else
  {
    outlined init with take of Matrix2dPB(v52, (uint64_t)v35, type metadata accessor for Coordinate3DPB);
  }
  LODWORD(v60) = *(_DWORD *)v35;
  v73 = v60;
  outlined destroy of Matrix3x3PB((uint64_t)v35, type metadata accessor for Coordinate3DPB);
  outlined init with copy of Coordinate3DPB?(v59, v54);
  if (v49((char *)v54, 1, v24) == 1)
  {
    *(_QWORD *)v57 = 0;
    *(_DWORD *)(v57 + 8) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v54);
  }
  else
  {
    outlined init with take of Matrix2dPB(v54, v57, type metadata accessor for Coordinate3DPB);
  }
  LODWORD(v61) = *(_DWORD *)(v57 + 4);
  v72 = v61;
  outlined destroy of Matrix3x3PB(v57, type metadata accessor for Coordinate3DPB);
  v62 = v59;
  v63 = v76;
  outlined init with copy of Coordinate3DPB?(v62, v76);
  if (v49((char *)v63, 1, v24) == 1)
  {
    *(_QWORD *)v56 = 0;
    *(_DWORD *)(v56 + 8) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v63);
  }
  else
  {
    outlined init with take of Matrix2dPB(v63, v56, type metadata accessor for Coordinate3DPB);
  }
  *(_QWORD *)&v64 = __PAIR64__(v74, v71);
  *((_QWORD *)&v64 + 1) = v75.n128_u32[0];
  v65.n128_u64[0] = __PAIR64__(v72, v73);
  v65.n128_u64[1] = *(unsigned int *)(v56 + 8);
  v75 = v65;
  v76 = v64;
  outlined destroy of Matrix3x3PB(v56, type metadata accessor for Coordinate3DPB);
  outlined destroy of Matrix3x3PB(v58, type metadata accessor for DetectionCanonicalizationDataPB);
  v66 = v78;
  v67 = v76;
  *v78 = v76;
  v66[1] = v67;
  result = v75;
  v66[2] = v75;
  v66[3] = result;
  return result;
}

uint64_t DetectionResult.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v36 = type metadata accessor for Coordinate2DPB(0);
  v3 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36, v4);
  v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v42 = v1[4];
  v10 = *((_BYTE *)v1 + 40);
  v11 = v1[6];
  v12 = *((unsigned __int8 *)v1 + 56);
  v35 = *((_DWORD *)v1 + 15);
  v13 = *((_DWORD *)v1 + 17);
  LODWORD(v5) = *((unsigned __int8 *)v1 + 72);
  v43 = *((unsigned __int8 *)v1 + 64);
  v44 = v5;
  v14 = *((_DWORD *)v1 + 19);
  v45 = v1[10];
  v33 = *((_DWORD *)v1 + 22);
  v39 = *((unsigned __int8 *)v1 + 92);
  v15 = v1[12];
  v40 = *((unsigned __int8 *)v1 + 104);
  LODWORD(v41) = v12;
  v16 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 40) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v16;
  *(_BYTE *)(a1 + 96) = 0;
  v17 = (int *)type metadata accessor for DetectionResultPB(0);
  UnknownStorage.init()();
  v18 = a1 + v17[18];
  *(_DWORD *)v18 = 0;
  v34 = (_DWORD *)v18;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = a1 + v17[19];
  *(_DWORD *)v19 = 0;
  v37 = (_DWORD *)v19;
  *(_BYTE *)(v19 + 4) = 1;
  v20 = a1 + v17[20];
  *(_DWORD *)v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v22 = swift_allocObject();
  v46 = xmmword_23D9A7050;
  *(_OWORD *)(v22 + 16) = xmmword_23D9A7050;
  *(_QWORD *)(v22 + 32) = v8;
  *(_QWORD *)a1 = v22;
  v38 = v21;
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = v46;
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v1[3];
  *(_QWORD *)(a1 + 24) = v42;
  *(_BYTE *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v41;
  v24 = *(_QWORD *)(v9 + 16);
  if (v24)
  {
    v41 = v20;
    v42 = a1;
    v47 = v16;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    v25 = 0;
    v16 = v47;
    do
    {
      v26 = *(_QWORD *)(v9 + 8 * v25 + 32);
      UnknownStorage.init()();
      *v6 = v26;
      v47 = v16;
      v28 = *(_QWORD *)(v16 + 16);
      v27 = *(_QWORD *)(v16 + 24);
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        v16 = v47;
      }
      ++v25;
      *(_QWORD *)(v16 + 16) = v28 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v6, v16+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v28, type metadata accessor for Coordinate2DPB);
    }
    while (v24 != v25);
    result = swift_bridgeObjectRelease();
    v20 = v41;
    a1 = v42;
  }
  *(_QWORD *)(a1 + 64) = v16;
  v29 = v45;
  if ((v43 & 1) == 0)
  {
    v30 = v34;
    *v34 = v35;
    *((_BYTE *)v30 + 4) = 0;
  }
  *(_DWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 76) = v44;
  *(_DWORD *)(a1 + 80) = v14;
  if (v29 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v29 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v31 = v37;
  *v37 = v29;
  *((_BYTE *)v31 + 4) = 0;
  if ((v39 & 1) == 0)
  {
    *(_DWORD *)v20 = v33;
    *(_BYTE *)(v20 + 4) = 0;
  }
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = v46;
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(a1 + 88) = result;
  *(_BYTE *)(a1 + 96) = v40;
  return result;
}

uint64_t DetectionCanonicalizationData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  int v13;
  int v14;
  __int128 v16;
  __int128 v17;

  v3 = type metadata accessor for Coordinate3DPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_OWORD *)(v1 + 48);
  v16 = *(_OWORD *)(v1 + 16);
  v17 = v8;
  UnknownStorage.init()();
  v9 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  v10 = a1 + *(int *)(v9 + 20);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v11(v10, 1, 1, v3);
  v12 = a1 + *(int *)(v9 + 24);
  v11(v12, 1, 1, v3);
  UnknownStorage.init()();
  v13 = DWORD2(v16);
  *(_QWORD *)v7 = v16;
  *((_DWORD *)v7 + 2) = v13;
  outlined destroy of Coordinate3DPB?(v10);
  outlined init with take of Matrix2dPB((uint64_t)v7, v10, type metadata accessor for Coordinate3DPB);
  v11(v10, 0, 1, v3);
  UnknownStorage.init()();
  v14 = DWORD2(v17);
  *(_QWORD *)v7 = v17;
  *((_DWORD *)v7 + 2) = v14;
  outlined destroy of Coordinate3DPB?(v12);
  outlined init with take of Matrix2dPB((uint64_t)v7, v12, type metadata accessor for Coordinate3DPB);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v11)(v12, 0, 1, v3);
}

uint64_t DetectionResult.almostEqual(to:withThreshold:)(float32x2_t *a1, double a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  float v15;
  __int8 v16;
  float v17;
  int v18;
  float v19;
  float32x2_t v20;
  uint64_t v21;
  float v22;
  __int8 v23;
  float v24;
  int v25;
  float v26;
  float32x2_t v27;
  float v28;
  int v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  float32x2_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  int v58;
  float v59;
  float32x2_t v60;
  float32x2_t v61;
  __int8 v62;
  __int8 v63;
  float32x2_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;

  v3 = vsub_f32(*v2, *a1);
  v4 = a2;
  if (fabsf(v3.f32[0]) > v4 || fabsf(v3.f32[1]) > v4)
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v68[0] = 0xD000000000000010;
    v68[1] = 0x800000023D9D0DB0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>();
    v5._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 8236;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 206;
LABEL_4:
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v65, 0xD000000000000061, 0x800000023D9D0D40, v9, (uint64_t)v68, v8);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
    return 0;
  }
  v11 = vsub_f32(v2[1], a1[1]);
  if (fabsf(v11.f32[0]) > v4 || fabsf(v11.f32[1]) > v4)
  {
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    strcpy((char *)v68, "Size mismatch ");
    HIBYTE(v68[1]) = -18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>();
    v12._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 8236;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 211;
    goto LABEL_4;
  }
  if (vabds_f32(v2[3].f32[0], a1[3].f32[0]) >= v4)
  {
    v68[0] = 0;
    v68[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v30._countAndFlagsBits = 0xD000000000000019;
    v30._object = (void *)0x800000023D9D0FA0;
    String.append(_:)(v30);
    Float.write<A>(to:)();
    v31._countAndFlagsBits = 8236;
    v31._object = (void *)0xE200000000000000;
    String.append(_:)(v31);
    Float.write<A>(to:)();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 215;
    goto LABEL_4;
  }
  if (vabds_f32(v2[3].f32[1], a1[3].f32[1]) >= v4)
  {
    v68[0] = 0;
    v68[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v32._countAndFlagsBits = 0xD000000000000019;
    v32._object = (void *)0x800000023D9D0F80;
    String.append(_:)(v32);
    Float.write<A>(to:)();
    v33._countAndFlagsBits = 8236;
    v33._object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    Float.write<A>(to:)();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 219;
    goto LABEL_4;
  }
  v15 = a1[7].f32[1];
  v16 = a1[8].i8[0];
  v17 = a1[8].f32[1];
  v18 = a1[9].u8[0];
  v19 = a1[9].f32[1];
  v64 = a1[10];
  v59 = a1[11].f32[0];
  v58 = a1[13].u8[0];
  v20 = v2[4];
  v21 = v2[5].u8[0];
  v22 = v2[7].f32[1];
  v23 = v2[8].i8[0];
  v24 = v2[8].f32[1];
  v25 = v2[9].u8[0];
  v26 = v2[9].f32[1];
  v27 = v2[10];
  v28 = v2[11].f32[0];
  v62 = a1[11].i8[4];
  v63 = v2[11].i8[4];
  v60 = v2[12];
  v61 = a1[12];
  v29 = v2[13].u8[0];
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)&v20, v21, *(_QWORD *)&a1[4], a1[5].u8[0]) & 1) == 0)
  {
    v68[0] = 0;
    v68[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v34._countAndFlagsBits = 0xD000000000000016;
    v34._object = (void *)0x800000023D9D0DD0;
    String.append(_:)(v34);
    _print_unlocked<A, B>(_:_:)();
    v35._countAndFlagsBits = 8236;
    v35._object = (void *)0xE200000000000000;
    String.append(_:)(v35);
    _print_unlocked<A, B>(_:_:)();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 223;
    goto LABEL_4;
  }
  if ((v23 & 1) != 0)
  {
    if ((v16 & 1) != 0)
      goto LABEL_20;
LABEL_18:
    v69 = MEMORY[0x24BEE0D00];
    v68[0] = 0xD000000000000023;
    v68[1] = 0x800000023D9D0DF0;
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 228;
    goto LABEL_4;
  }
  if ((v16 & 1) != 0)
    goto LABEL_18;
  if (vabds_f32(v22, v15) >= v4)
  {
    v68[0] = 0;
    v68[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v45._countAndFlagsBits = 0xD000000000000019;
    v45._object = (void *)0x800000023D9D0F60;
    String.append(_:)(v45);
    Float.write<A>(to:)();
    v46._countAndFlagsBits = 8236;
    v46._object = (void *)0xE200000000000000;
    String.append(_:)(v46);
    Float.write<A>(to:)();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 237;
    goto LABEL_4;
  }
LABEL_20:
  if (vabds_f32(v24, v17) >= v4)
  {
    v68[0] = 0;
    v68[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v43._countAndFlagsBits = 0xD00000000000001DLL;
    v43._object = (void *)0x800000023D9D0F40;
    String.append(_:)(v43);
    Float.write<A>(to:)();
    v44._countAndFlagsBits = 8236;
    v44._object = (void *)0xE200000000000000;
    String.append(_:)(v44);
    Float.write<A>(to:)();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 242;
    goto LABEL_4;
  }
  if (v18 != v25)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v68[0] = 0xD000000000000013;
    v68[1] = 0x800000023D9D0E20;
    if (v25)
      v36 = 1702195828;
    else
      v36 = 0x65736C6166;
    if (v25)
      v37 = 0xE400000000000000;
    else
      v37 = 0xE500000000000000;
    v38 = v37;
    String.append(_:)(*(Swift::String *)&v36);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 8236;
    v39._object = (void *)0xE200000000000000;
    String.append(_:)(v39);
    if (v18)
      v40 = 1702195828;
    else
      v40 = 0x65736C6166;
    if (v18)
      v41 = 0xE400000000000000;
    else
      v41 = 0xE500000000000000;
    v42 = v41;
    String.append(_:)(*(Swift::String *)&v40);
    swift_bridgeObjectRelease();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 246;
    goto LABEL_4;
  }
  if (vabds_f32(v26, v19) >= v4)
  {
    v68[0] = 0;
    v68[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    v47._countAndFlagsBits = 0xD000000000000020;
    v47._object = (void *)0x800000023D9D0F10;
    String.append(_:)(v47);
    Float.write<A>(to:)();
    v48._countAndFlagsBits = 8236;
    v48._object = (void *)0xE200000000000000;
    String.append(_:)(v48);
    Float.write<A>(to:)();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 250;
    goto LABEL_4;
  }
  if (*(_QWORD *)&v27 != *(_QWORD *)&v64)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v68[0] = 0xD000000000000028;
    v68[1] = 0x800000023D9D0E40;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 8236;
    v50._object = (void *)0xE200000000000000;
    String.append(_:)(v50);
    v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 254;
    goto LABEL_4;
  }
  if ((v63 & 1) != 0)
  {
    if ((v62 & 1) != 0)
      goto LABEL_47;
LABEL_45:
    v69 = MEMORY[0x24BEE0D00];
    v68[0] = 0xD000000000000032;
    v68[1] = 0x800000023D9D0E70;
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 259;
    goto LABEL_4;
  }
  if ((v62 & 1) != 0)
    goto LABEL_45;
  if (vabds_f32(v28, v59) >= v4)
  {
    v68[0] = 0;
    v68[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v56._countAndFlagsBits = 0xD000000000000028;
    v56._object = (void *)0x800000023D9D0EE0;
    String.append(_:)(v56);
    Float.write<A>(to:)();
    v57._countAndFlagsBits = 8236;
    v57._object = (void *)0xE200000000000000;
    String.append(_:)(v57);
    Float.write<A>(to:)();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 268;
    goto LABEL_4;
  }
LABEL_47:
  v52 = vsub_f32(v60, v61);
  if (fabsf(v52.f32[0]) > v4 || fabsf(v52.f32[1]) > v4)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v68[0] = 0xD00000000000002BLL;
    v68[1] = 0x800000023D9D0EB0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>();
    v53._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._countAndFlagsBits = 8236;
    v54._object = (void *)0xE200000000000000;
    String.append(_:)(v54);
    v55._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v69 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v65 = xmmword_23D9A8970;
    v66 = 0;
    v67 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 274;
    goto LABEL_4;
  }
  return v58 ^ v29 ^ 1u;
}

uint64_t Array<A>.toProtoBuf()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v16[5];
  _OWORD v17[2];
  uint64_t v18;

  v2 = type metadata accessor for DetectionResultPB(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v8 = v18;
    v9 = (_OWORD *)(a1 + 32);
    do
    {
      v10 = v9[5];
      v16[4] = v9[4];
      v17[0] = v10;
      *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)((char *)v9 + 89);
      v11 = v9[1];
      v16[0] = *v9;
      v16[1] = v11;
      v12 = v9[3];
      v16[2] = v9[2];
      v16[3] = v12;
      DetectionResult.toProtoBuf()((uint64_t)v6);
      v18 = v8;
      v14 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v8 = v18;
      }
      *(_QWORD *)(v8 + 16) = v14 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v6, v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v14, type metadata accessor for DetectionResultPB);
      v9 += 7;
      --v7;
    }
    while (v7);
  }
  return v8;
}

Hands::DetectionResultsByChirality __swiftcall DetectionResultsByChirality.init(leftDetections:rightDetections:)(Swift::OpaquePointer leftDetections, Swift::OpaquePointer rightDetections)
{
  Swift::OpaquePointer *v2;
  Hands::DetectionResultsByChirality result;

  v2->_rawValue = leftDetections._rawValue;
  v2[1]._rawValue = rightDetections._rawValue;
  result.rightDetections = rightDetections;
  result.leftDetections = leftDetections;
  return result;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance DetectionResultsByChirality@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  type metadata accessor for DetectionResultsByChiralityPB(0);
  UnknownStorage.init()();
  *a1 = Array<A>.toProtoBuf()(v4);
  result = Array<A>.toProtoBuf()(v3);
  a1[1] = result;
  return result;
}

double DetectionResult.center2D.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DetectionResult.center2D.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DetectionResult.center2D.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

double DetectionResult.size2D.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t DetectionResult.keyPoints.getter()
{
  return swift_bridgeObjectRetain();
}

float DetectionResult.detectionScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

float DetectionResult.chiralityScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 28);
}

void DetectionResult.cameraSource.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
}

unint64_t DetectionResult.depth.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 60) | ((unint64_t)*(unsigned __int8 *)(v0 + 64) << 32);
}

float DetectionResult.uvoScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 68);
}

void DetectionResult.uvoScore.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 68) = a1;
}

uint64_t (*DetectionResult.uvoScore.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t DetectionResult.preferred.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t DetectionResult.preferred.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

uint64_t (*DetectionResult.preferred.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float DetectionResult.uvoDistance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 76);
}

void DetectionResult.uvoDistance.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 76) = a1;
}

uint64_t (*DetectionResult.uvoDistance.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t DetectionResult.sameChiralityCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t DetectionResult.sameChiralityCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = result;
  return result;
}

uint64_t (*DetectionResult.sameChiralityCount.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

unint64_t DetectionResult.oDepth.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 88) | ((unint64_t)*(unsigned __int8 *)(v0 + 92) << 32);
}

uint64_t DetectionResult.oDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 88) = result;
  *(_BYTE *)(v1 + 92) = BYTE4(result) & 1;
  return result;
}

uint64_t (*DetectionResult.oDepth.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

double DetectionResult.oCenter2D.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

void DetectionResult.oCenter2D.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 96) = a1;
}

uint64_t (*DetectionResult.oCenter2D.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t DetectionResult.hasModelDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in DetectionResultsByChirality()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in DetectionResult()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
}

ValueMetadata *type metadata accessor for DetectionResultsByChirality()
{
  return &type metadata for DetectionResultsByChirality;
}

uint64_t destroy for DetectionResult()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DetectionResult(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  LODWORD(v5) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for DetectionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectionResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectionResult()
{
  return &type metadata for DetectionResult;
}

ValueMetadata *type metadata accessor for DetectionCanonicalizationData()
{
  return &type metadata for DetectionCanonicalizationData;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in DetectionCanonicalizationData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
}

uint64_t specialized Array<A>.init(protoBuf:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  _OWORD v25[5];
  _OWORD v26[2];
  uint64_t v27;

  v2 = type metadata accessor for DetectionResultPB(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x24BDAC7A8](v2, v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)&v24 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v27 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v12 = v27;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v13, (uint64_t)v10, type metadata accessor for DetectionResultPB);
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v10, (uint64_t)v7, type metadata accessor for DetectionResultPB);
      DetectionResult.init(protoBuf:)((uint64_t)v7, (uint64_t)v25);
      outlined destroy of Matrix3x3PB((uint64_t)v10, type metadata accessor for DetectionResultPB);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v27;
      }
      v16 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v12 = v27;
      }
      *(_QWORD *)(v12 + 16) = v16 + 1;
      v17 = (_OWORD *)(v12 + 112 * v16);
      v18 = v25[0];
      v19 = v25[2];
      v17[3] = v25[1];
      v17[4] = v19;
      v17[2] = v18;
      v20 = v25[3];
      v21 = v25[4];
      v22 = v26[0];
      *(_OWORD *)((char *)v17 + 121) = *(_OWORD *)((char *)v26 + 9);
      v17[6] = v21;
      v17[7] = v22;
      v17[5] = v20;
      v13 += v14;
      --v11;
    }
    while (v11);
  }
  return v12;
}

void one-time initialization function for defaultInstance()
{
  uint64_t v0;

  type metadata accessor for PoseModelIOData._StorageClass();
  swift_allocObject();
  PoseModelIOData._StorageClass.init()();
  static PoseModelIOData._StorageClass.defaultInstance = v0;
}

{
  uint64_t v0;

  type metadata accessor for SequenceMetadataPB._StorageClass();
  swift_allocObject();
  SequenceMetadataPB._StorageClass.init()();
  static SequenceMetadataPB._StorageClass.defaultInstance = v0;
}

double PoseModelIOData._StorageClass.init()()
{
  _OWORD *v0;
  double result;

  result = 0.0;
  v0[1] = xmmword_23D9AB950;
  v0[2] = xmmword_23D9AB950;
  v0[3] = xmmword_23D9AB950;
  v0[4] = xmmword_23D9AB950;
  v0[5] = xmmword_23D9AB950;
  v0[6] = xmmword_23D9AB950;
  v0[7] = xmmword_23D9AB950;
  v0[8] = xmmword_23D9AB950;
  v0[9] = xmmword_23D9AB950;
  v0[10] = xmmword_23D9AB950;
  v0[11] = xmmword_23D9AB950;
  v0[12] = xmmword_23D9AB950;
  v0[13] = xmmword_23D9AB950;
  v0[14] = xmmword_23D9AB950;
  v0[15] = xmmword_23D9AB950;
  v0[16] = xmmword_23D9AB950;
  v0[17] = xmmword_23D9AB950;
  v0[18] = xmmword_23D9AB950;
  return result;
}

uint64_t PoseModelIOData._StorageClass.init(copying:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;

  *(_OWORD *)(v1 + 16) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 32) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 48) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 64) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 80) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 96) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 112) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 128) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 144) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 160) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 176) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 192) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 208) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 224) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 240) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 256) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 272) = xmmword_23D9AB950;
  *(_OWORD *)(v1 + 288) = xmmword_23D9AB950;
  swift_beginAccess();
  v3 = a1[2];
  v4 = a1[3];
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  outlined copy of Data?(v3, v4);
  outlined consume of Data?(v5, v6);
  swift_beginAccess();
  v7 = a1[4];
  v8 = a1[5];
  swift_beginAccess();
  v9 = *(_QWORD *)(v1 + 32);
  v10 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 32) = v7;
  *(_QWORD *)(v1 + 40) = v8;
  outlined copy of Data?(v7, v8);
  outlined consume of Data?(v9, v10);
  swift_beginAccess();
  v11 = a1[6];
  v12 = a1[7];
  swift_beginAccess();
  v13 = *(_QWORD *)(v1 + 48);
  v14 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 48) = v11;
  *(_QWORD *)(v1 + 56) = v12;
  outlined copy of Data?(v11, v12);
  outlined consume of Data?(v13, v14);
  swift_beginAccess();
  v15 = a1[8];
  v16 = a1[9];
  swift_beginAccess();
  v17 = *(_QWORD *)(v1 + 64);
  v18 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 72) = v16;
  outlined copy of Data?(v15, v16);
  outlined consume of Data?(v17, v18);
  swift_beginAccess();
  v19 = a1[10];
  v20 = a1[11];
  swift_beginAccess();
  v21 = *(_QWORD *)(v1 + 80);
  v22 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 80) = v19;
  *(_QWORD *)(v1 + 88) = v20;
  outlined copy of Data?(v19, v20);
  outlined consume of Data?(v21, v22);
  swift_beginAccess();
  v23 = a1[12];
  v24 = a1[13];
  swift_beginAccess();
  v25 = *(_QWORD *)(v1 + 96);
  v26 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = v23;
  *(_QWORD *)(v1 + 104) = v24;
  outlined copy of Data?(v23, v24);
  outlined consume of Data?(v25, v26);
  swift_beginAccess();
  v27 = a1[14];
  v28 = a1[15];
  swift_beginAccess();
  v29 = *(_QWORD *)(v1 + 112);
  v30 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 112) = v27;
  *(_QWORD *)(v1 + 120) = v28;
  outlined copy of Data?(v27, v28);
  outlined consume of Data?(v29, v30);
  swift_beginAccess();
  v31 = a1[16];
  v32 = a1[17];
  swift_beginAccess();
  v33 = *(_QWORD *)(v1 + 128);
  v34 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 128) = v31;
  *(_QWORD *)(v1 + 136) = v32;
  outlined copy of Data?(v31, v32);
  outlined consume of Data?(v33, v34);
  swift_beginAccess();
  v35 = a1[18];
  v36 = a1[19];
  swift_beginAccess();
  v37 = *(_QWORD *)(v1 + 144);
  v38 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 144) = v35;
  *(_QWORD *)(v1 + 152) = v36;
  outlined copy of Data?(v35, v36);
  outlined consume of Data?(v37, v38);
  swift_beginAccess();
  v39 = a1[20];
  v40 = a1[21];
  swift_beginAccess();
  v41 = *(_QWORD *)(v1 + 160);
  v42 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 160) = v39;
  *(_QWORD *)(v1 + 168) = v40;
  outlined copy of Data?(v39, v40);
  outlined consume of Data?(v41, v42);
  swift_beginAccess();
  v43 = a1[22];
  v44 = a1[23];
  swift_beginAccess();
  v45 = *(_QWORD *)(v1 + 176);
  v46 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 176) = v43;
  *(_QWORD *)(v1 + 184) = v44;
  outlined copy of Data?(v43, v44);
  outlined consume of Data?(v45, v46);
  swift_beginAccess();
  v47 = a1[24];
  v48 = a1[25];
  swift_beginAccess();
  v49 = *(_QWORD *)(v1 + 192);
  v50 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 192) = v47;
  *(_QWORD *)(v1 + 200) = v48;
  outlined copy of Data?(v47, v48);
  outlined consume of Data?(v49, v50);
  swift_beginAccess();
  v51 = a1[26];
  v52 = a1[27];
  swift_beginAccess();
  v53 = *(_QWORD *)(v1 + 208);
  v54 = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(v1 + 208) = v51;
  *(_QWORD *)(v1 + 216) = v52;
  outlined copy of Data?(v51, v52);
  outlined consume of Data?(v53, v54);
  swift_beginAccess();
  v55 = a1[28];
  v56 = a1[29];
  swift_beginAccess();
  v57 = *(_QWORD *)(v1 + 224);
  v58 = *(_QWORD *)(v1 + 232);
  *(_QWORD *)(v1 + 224) = v55;
  *(_QWORD *)(v1 + 232) = v56;
  outlined copy of Data?(v55, v56);
  outlined consume of Data?(v57, v58);
  swift_beginAccess();
  v59 = a1[30];
  v60 = a1[31];
  swift_beginAccess();
  v61 = *(_QWORD *)(v1 + 240);
  v62 = *(_QWORD *)(v1 + 248);
  *(_QWORD *)(v1 + 240) = v59;
  *(_QWORD *)(v1 + 248) = v60;
  outlined copy of Data?(v59, v60);
  outlined consume of Data?(v61, v62);
  swift_beginAccess();
  v63 = a1[32];
  v64 = a1[33];
  swift_beginAccess();
  v65 = *(_QWORD *)(v1 + 256);
  v66 = *(_QWORD *)(v1 + 264);
  *(_QWORD *)(v1 + 256) = v63;
  *(_QWORD *)(v1 + 264) = v64;
  outlined copy of Data?(v63, v64);
  outlined consume of Data?(v65, v66);
  swift_beginAccess();
  v67 = a1[34];
  v68 = a1[35];
  swift_beginAccess();
  v69 = *(_QWORD *)(v1 + 272);
  v70 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v1 + 272) = v67;
  *(_QWORD *)(v1 + 280) = v68;
  outlined copy of Data?(v67, v68);
  outlined consume of Data?(v69, v70);
  swift_beginAccess();
  v71 = a1[36];
  v72 = a1[37];
  outlined copy of Data?(v71, v72);
  swift_release();
  swift_beginAccess();
  v73 = *(_QWORD *)(v1 + 288);
  v74 = *(_QWORD *)(v1 + 296);
  *(_QWORD *)(v1 + 288) = v71;
  *(_QWORD *)(v1 + 296) = v72;
  outlined consume of Data?(v73, v74);
  return v1;
}

uint64_t PoseModelIOData._StorageClass.deinit()
{
  uint64_t v0;

  outlined consume of Data?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  outlined consume of Data?(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  outlined consume of Data?(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  outlined consume of Data?(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  outlined consume of Data?(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  outlined consume of Data?(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  outlined consume of Data?(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  outlined consume of Data?(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  outlined consume of Data?(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  outlined consume of Data?(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  outlined consume of Data?(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  outlined consume of Data?(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  outlined consume of Data?(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  outlined consume of Data?(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  outlined consume of Data?(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  outlined consume of Data?(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  outlined consume of Data?(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
  return v0;
}

uint64_t PoseModelIOData._StorageClass.__deallocating_deinit()
{
  PoseModelIOData._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PoseModelIOData._StorageClass()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for PinchModelIOData(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = *(_QWORD *)v16;
      outlined copy of Data._Representation(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
    }
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_QWORD *)v21 + 1);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    else
    {
      v23 = *(_QWORD *)v21;
      outlined copy of Data._Representation(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 1) = v22;
    }
    v24 = a3[8];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = *((_QWORD *)v26 + 1);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v28 = *(_QWORD *)v26;
      outlined copy of Data._Representation(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
      *(_QWORD *)v25 = v28;
      *((_QWORD *)v25 + 1) = v27;
    }
    v29 = a3[9];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = *((_QWORD *)v31 + 1);
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
    }
    else
    {
      v33 = *(_QWORD *)v31;
      outlined copy of Data._Representation(*(_QWORD *)v31, *((_QWORD *)v31 + 1));
      *(_QWORD *)v30 = v33;
      *((_QWORD *)v30 + 1) = v32;
    }
    v34 = a3[10];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = *((_QWORD *)v36 + 1);
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)v35 = *(_OWORD *)v36;
    }
    else
    {
      v38 = *(_QWORD *)v36;
      outlined copy of Data._Representation(*(_QWORD *)v36, *((_QWORD *)v36 + 1));
      *(_QWORD *)v35 = v38;
      *((_QWORD *)v35 + 1) = v37;
    }
    v39 = a3[11];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = *((_QWORD *)v41 + 1);
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)v40 = *(_OWORD *)v41;
    }
    else
    {
      v43 = *(_QWORD *)v41;
      outlined copy of Data._Representation(*(_QWORD *)v41, *((_QWORD *)v41 + 1));
      *(_QWORD *)v40 = v43;
      *((_QWORD *)v40 + 1) = v42;
    }
    v44 = a3[12];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = *((_QWORD *)v46 + 1);
    if (v47 >> 60 == 15)
    {
      *(_OWORD *)v45 = *(_OWORD *)v46;
    }
    else
    {
      v48 = *(_QWORD *)v46;
      outlined copy of Data._Representation(*(_QWORD *)v46, *((_QWORD *)v46 + 1));
      *(_QWORD *)v45 = v48;
      *((_QWORD *)v45 + 1) = v47;
    }
    v49 = a3[13];
    v50 = (char *)a1 + v49;
    v51 = (char *)a2 + v49;
    v52 = *((_QWORD *)v51 + 1);
    if (v52 >> 60 == 15)
    {
      *(_OWORD *)v50 = *(_OWORD *)v51;
    }
    else
    {
      v53 = *(_QWORD *)v51;
      outlined copy of Data._Representation(*(_QWORD *)v51, *((_QWORD *)v51 + 1));
      *(_QWORD *)v50 = v53;
      *((_QWORD *)v50 + 1) = v52;
    }
    v54 = a3[14];
    v55 = (char *)a1 + v54;
    v56 = (char *)a2 + v54;
    v57 = *((_QWORD *)v56 + 1);
    if (v57 >> 60 == 15)
    {
      *(_OWORD *)v55 = *(_OWORD *)v56;
    }
    else
    {
      v58 = *(_QWORD *)v56;
      outlined copy of Data._Representation(*(_QWORD *)v56, *((_QWORD *)v56 + 1));
      *(_QWORD *)v55 = v58;
      *((_QWORD *)v55 + 1) = v57;
    }
    v59 = a3[15];
    v60 = (char *)a1 + v59;
    v61 = (char *)a2 + v59;
    v62 = *((_QWORD *)v61 + 1);
    if (v62 >> 60 == 15)
    {
      *(_OWORD *)v60 = *(_OWORD *)v61;
    }
    else
    {
      v63 = *(_QWORD *)v61;
      outlined copy of Data._Representation(*(_QWORD *)v61, *((_QWORD *)v61 + 1));
      *(_QWORD *)v60 = v63;
      *((_QWORD *)v60 + 1) = v62;
    }
  }
  return a1;
}

uint64_t destroy for PinchModelIOData(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;

  v4 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + a2[5]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = outlined consume of Data._Representation(*v6, v7);
  v8 = (uint64_t *)(a1 + a2[6]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    result = outlined consume of Data._Representation(*v8, v9);
  v10 = (uint64_t *)(a1 + a2[7]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    result = outlined consume of Data._Representation(*v10, v11);
  v12 = (uint64_t *)(a1 + a2[8]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    result = outlined consume of Data._Representation(*v12, v13);
  v14 = (uint64_t *)(a1 + a2[9]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    result = outlined consume of Data._Representation(*v14, v15);
  v16 = (uint64_t *)(a1 + a2[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    result = outlined consume of Data._Representation(*v16, v17);
  v18 = (uint64_t *)(a1 + a2[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    result = outlined consume of Data._Representation(*v18, v19);
  v20 = (uint64_t *)(a1 + a2[12]);
  v21 = v20[1];
  if (v21 >> 60 != 15)
    result = outlined consume of Data._Representation(*v20, v21);
  v22 = (uint64_t *)(a1 + a2[13]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    result = outlined consume of Data._Representation(*v22, v23);
  v24 = (uint64_t *)(a1 + a2[14]);
  v25 = v24[1];
  if (v25 >> 60 != 15)
    result = outlined consume of Data._Representation(*v24, v25);
  v26 = (uint64_t *)(a1 + a2[15]);
  v27 = v26[1];
  if (v27 >> 60 != 15)
    return outlined consume of Data._Representation(*v26, v27);
  return result;
}

uint64_t initializeWithCopy for PinchModelIOData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    outlined copy of Data._Representation(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    outlined copy of Data._Representation(*v19, v19[1]);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  else
  {
    v26 = *v24;
    outlined copy of Data._Representation(*v24, v24[1]);
    *(_QWORD *)v23 = v26;
    *(_QWORD *)(v23 + 8) = v25;
  }
  v27 = a3[9];
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = v29[1];
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
  }
  else
  {
    v31 = *v29;
    outlined copy of Data._Representation(*v29, v29[1]);
    *(_QWORD *)v28 = v31;
    *(_QWORD *)(v28 + 8) = v30;
  }
  v32 = a3[10];
  v33 = a1 + v32;
  v34 = (uint64_t *)(a2 + v32);
  v35 = v34[1];
  if (v35 >> 60 == 15)
  {
    *(_OWORD *)v33 = *(_OWORD *)v34;
  }
  else
  {
    v36 = *v34;
    outlined copy of Data._Representation(*v34, v34[1]);
    *(_QWORD *)v33 = v36;
    *(_QWORD *)(v33 + 8) = v35;
  }
  v37 = a3[11];
  v38 = a1 + v37;
  v39 = (uint64_t *)(a2 + v37);
  v40 = v39[1];
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)v38 = *(_OWORD *)v39;
  }
  else
  {
    v41 = *v39;
    outlined copy of Data._Representation(*v39, v39[1]);
    *(_QWORD *)v38 = v41;
    *(_QWORD *)(v38 + 8) = v40;
  }
  v42 = a3[12];
  v43 = a1 + v42;
  v44 = (uint64_t *)(a2 + v42);
  v45 = v44[1];
  if (v45 >> 60 == 15)
  {
    *(_OWORD *)v43 = *(_OWORD *)v44;
  }
  else
  {
    v46 = *v44;
    outlined copy of Data._Representation(*v44, v44[1]);
    *(_QWORD *)v43 = v46;
    *(_QWORD *)(v43 + 8) = v45;
  }
  v47 = a3[13];
  v48 = a1 + v47;
  v49 = (uint64_t *)(a2 + v47);
  v50 = v49[1];
  if (v50 >> 60 == 15)
  {
    *(_OWORD *)v48 = *(_OWORD *)v49;
  }
  else
  {
    v51 = *v49;
    outlined copy of Data._Representation(*v49, v49[1]);
    *(_QWORD *)v48 = v51;
    *(_QWORD *)(v48 + 8) = v50;
  }
  v52 = a3[14];
  v53 = a1 + v52;
  v54 = (uint64_t *)(a2 + v52);
  v55 = v54[1];
  if (v55 >> 60 == 15)
  {
    *(_OWORD *)v53 = *(_OWORD *)v54;
  }
  else
  {
    v56 = *v54;
    outlined copy of Data._Representation(*v54, v54[1]);
    *(_QWORD *)v53 = v56;
    *(_QWORD *)(v53 + 8) = v55;
  }
  v57 = a3[15];
  v58 = a1 + v57;
  v59 = (uint64_t *)(a2 + v57);
  v60 = v59[1];
  if (v60 >> 60 == 15)
  {
    *(_OWORD *)v58 = *(_OWORD *)v59;
  }
  else
  {
    v61 = *v59;
    outlined copy of Data._Representation(*v59, v59[1]);
    *(_QWORD *)v58 = v61;
    *(_QWORD *)(v58 + 8) = v60;
  }
  return a1;
}

uint64_t assignWithCopy for PinchModelIOData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (*(_QWORD *)(a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      v19 = *v17;
      outlined copy of Data._Representation(v19, v18);
      *v16 = v19;
      v16[1] = v18;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v16);
LABEL_13:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }
  v20 = *v17;
  outlined copy of Data._Representation(v20, v18);
  v21 = *v16;
  v22 = v16[1];
  *v16 = v20;
  v16[1] = v18;
  outlined consume of Data._Representation(v21, v22);
LABEL_15:
  v23 = a3[7];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (*(_QWORD *)(a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      v27 = *v25;
      outlined copy of Data._Representation(v27, v26);
      *v24 = v27;
      v24[1] = v26;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v26 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v24);
LABEL_20:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_22;
  }
  v28 = *v25;
  outlined copy of Data._Representation(v28, v26);
  v29 = *v24;
  v30 = v24[1];
  *v24 = v28;
  v24[1] = v26;
  outlined consume of Data._Representation(v29, v30);
LABEL_22:
  v31 = a3[8];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = *(_QWORD *)(a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      outlined copy of Data._Representation(v35, v34);
      *v32 = v35;
      v32[1] = v34;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v34 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v32);
LABEL_27:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_29;
  }
  v36 = *v33;
  outlined copy of Data._Representation(v36, v34);
  v37 = *v32;
  v38 = v32[1];
  *v32 = v36;
  v32[1] = v34;
  outlined consume of Data._Representation(v37, v38);
LABEL_29:
  v39 = a3[9];
  v40 = (uint64_t *)(a1 + v39);
  v41 = (uint64_t *)(a2 + v39);
  v42 = *(_QWORD *)(a2 + v39 + 8);
  if (*(_QWORD *)(a1 + v39 + 8) >> 60 == 15)
  {
    if (v42 >> 60 != 15)
    {
      v43 = *v41;
      outlined copy of Data._Representation(v43, v42);
      *v40 = v43;
      v40[1] = v42;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v42 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v40);
LABEL_34:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_36;
  }
  v44 = *v41;
  outlined copy of Data._Representation(v44, v42);
  v45 = *v40;
  v46 = v40[1];
  *v40 = v44;
  v40[1] = v42;
  outlined consume of Data._Representation(v45, v46);
LABEL_36:
  v47 = a3[10];
  v48 = (uint64_t *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v50 = *(_QWORD *)(a2 + v47 + 8);
  if (*(_QWORD *)(a1 + v47 + 8) >> 60 == 15)
  {
    if (v50 >> 60 != 15)
    {
      v51 = *v49;
      outlined copy of Data._Representation(v51, v50);
      *v48 = v51;
      v48[1] = v50;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v50 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v48);
LABEL_41:
    *(_OWORD *)v48 = *(_OWORD *)v49;
    goto LABEL_43;
  }
  v52 = *v49;
  outlined copy of Data._Representation(v52, v50);
  v53 = *v48;
  v54 = v48[1];
  *v48 = v52;
  v48[1] = v50;
  outlined consume of Data._Representation(v53, v54);
LABEL_43:
  v55 = a3[11];
  v56 = (uint64_t *)(a1 + v55);
  v57 = (uint64_t *)(a2 + v55);
  v58 = *(_QWORD *)(a2 + v55 + 8);
  if (*(_QWORD *)(a1 + v55 + 8) >> 60 == 15)
  {
    if (v58 >> 60 != 15)
    {
      v59 = *v57;
      outlined copy of Data._Representation(v59, v58);
      *v56 = v59;
      v56[1] = v58;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v58 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v56);
LABEL_48:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    goto LABEL_50;
  }
  v60 = *v57;
  outlined copy of Data._Representation(v60, v58);
  v61 = *v56;
  v62 = v56[1];
  *v56 = v60;
  v56[1] = v58;
  outlined consume of Data._Representation(v61, v62);
LABEL_50:
  v63 = a3[12];
  v64 = (uint64_t *)(a1 + v63);
  v65 = (uint64_t *)(a2 + v63);
  v66 = *(_QWORD *)(a2 + v63 + 8);
  if (*(_QWORD *)(a1 + v63 + 8) >> 60 == 15)
  {
    if (v66 >> 60 != 15)
    {
      v67 = *v65;
      outlined copy of Data._Representation(v67, v66);
      *v64 = v67;
      v64[1] = v66;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v66 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v64);
LABEL_55:
    *(_OWORD *)v64 = *(_OWORD *)v65;
    goto LABEL_57;
  }
  v68 = *v65;
  outlined copy of Data._Representation(v68, v66);
  v69 = *v64;
  v70 = v64[1];
  *v64 = v68;
  v64[1] = v66;
  outlined consume of Data._Representation(v69, v70);
LABEL_57:
  v71 = a3[13];
  v72 = (uint64_t *)(a1 + v71);
  v73 = (uint64_t *)(a2 + v71);
  v74 = *(_QWORD *)(a2 + v71 + 8);
  if (*(_QWORD *)(a1 + v71 + 8) >> 60 == 15)
  {
    if (v74 >> 60 != 15)
    {
      v75 = *v73;
      outlined copy of Data._Representation(v75, v74);
      *v72 = v75;
      v72[1] = v74;
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  if (v74 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v72);
LABEL_62:
    *(_OWORD *)v72 = *(_OWORD *)v73;
    goto LABEL_64;
  }
  v76 = *v73;
  outlined copy of Data._Representation(v76, v74);
  v77 = *v72;
  v78 = v72[1];
  *v72 = v76;
  v72[1] = v74;
  outlined consume of Data._Representation(v77, v78);
LABEL_64:
  v79 = a3[14];
  v80 = (uint64_t *)(a1 + v79);
  v81 = (uint64_t *)(a2 + v79);
  v82 = *(_QWORD *)(a2 + v79 + 8);
  if (*(_QWORD *)(a1 + v79 + 8) >> 60 == 15)
  {
    if (v82 >> 60 != 15)
    {
      v83 = *v81;
      outlined copy of Data._Representation(v83, v82);
      *v80 = v83;
      v80[1] = v82;
      goto LABEL_71;
    }
    goto LABEL_69;
  }
  if (v82 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v80);
LABEL_69:
    *(_OWORD *)v80 = *(_OWORD *)v81;
    goto LABEL_71;
  }
  v84 = *v81;
  outlined copy of Data._Representation(v84, v82);
  v85 = *v80;
  v86 = v80[1];
  *v80 = v84;
  v80[1] = v82;
  outlined consume of Data._Representation(v85, v86);
LABEL_71:
  v87 = a3[15];
  v88 = (uint64_t *)(a1 + v87);
  v89 = (uint64_t *)(a2 + v87);
  v90 = *(_QWORD *)(a2 + v87 + 8);
  if (*(_QWORD *)(a1 + v87 + 8) >> 60 != 15)
  {
    if (v90 >> 60 != 15)
    {
      v92 = *v89;
      outlined copy of Data._Representation(v92, v90);
      v93 = *v88;
      v94 = v88[1];
      *v88 = v92;
      v88[1] = v90;
      outlined consume of Data._Representation(v93, v94);
      return a1;
    }
    outlined destroy of Data((uint64_t)v88);
    goto LABEL_76;
  }
  if (v90 >> 60 == 15)
  {
LABEL_76:
    *(_OWORD *)v88 = *(_OWORD *)v89;
    return a1;
  }
  v91 = *v89;
  outlined copy of Data._Representation(v91, v90);
  *v88 = v91;
  v88[1] = v90;
  return a1;
}

uint64_t initializeWithTake for PinchModelIOData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithTake for PinchModelIOData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    outlined destroy of Data(v14);
    goto LABEL_9;
  }
  v18 = *(_QWORD *)v14;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = v17;
  outlined consume of Data._Representation(v18, v16);
LABEL_11:
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a1 + v19 + 8);
  if (v22 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    goto LABEL_16;
  }
  v23 = *(_QWORD *)(v21 + 8);
  if (v23 >> 60 == 15)
  {
    outlined destroy of Data(v20);
    goto LABEL_14;
  }
  v24 = *(_QWORD *)v20;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = v23;
  outlined consume of Data._Representation(v24, v22);
LABEL_16:
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)(a1 + v25 + 8);
  if (v28 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(v27 + 8);
  if (v29 >> 60 == 15)
  {
    outlined destroy of Data(v26);
    goto LABEL_19;
  }
  v30 = *(_QWORD *)v26;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_QWORD *)(v26 + 8) = v29;
  outlined consume of Data._Representation(v30, v28);
LABEL_21:
  v31 = a3[9];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a1 + v31 + 8);
  if (v34 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_26;
  }
  v35 = *(_QWORD *)(v33 + 8);
  if (v35 >> 60 == 15)
  {
    outlined destroy of Data(v32);
    goto LABEL_24;
  }
  v36 = *(_QWORD *)v32;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_QWORD *)(v32 + 8) = v35;
  outlined consume of Data._Representation(v36, v34);
LABEL_26:
  v37 = a3[10];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = *(_QWORD *)(a1 + v37 + 8);
  if (v40 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)v38 = *(_OWORD *)v39;
    goto LABEL_31;
  }
  v41 = *(_QWORD *)(v39 + 8);
  if (v41 >> 60 == 15)
  {
    outlined destroy of Data(v38);
    goto LABEL_29;
  }
  v42 = *(_QWORD *)v38;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_QWORD *)(v38 + 8) = v41;
  outlined consume of Data._Representation(v42, v40);
LABEL_31:
  v43 = a3[11];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = *(_QWORD *)(a1 + v43 + 8);
  if (v46 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_36;
  }
  v47 = *(_QWORD *)(v45 + 8);
  if (v47 >> 60 == 15)
  {
    outlined destroy of Data(v44);
    goto LABEL_34;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  outlined consume of Data._Representation(v48, v46);
LABEL_36:
  v49 = a3[12];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_QWORD *)(a1 + v49 + 8);
  if (v52 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)v50 = *(_OWORD *)v51;
    goto LABEL_41;
  }
  v53 = *(_QWORD *)(v51 + 8);
  if (v53 >> 60 == 15)
  {
    outlined destroy of Data(v50);
    goto LABEL_39;
  }
  v54 = *(_QWORD *)v50;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_QWORD *)(v50 + 8) = v53;
  outlined consume of Data._Representation(v54, v52);
LABEL_41:
  v55 = a3[13];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = *(_QWORD *)(a1 + v55 + 8);
  if (v58 >> 60 == 15)
  {
LABEL_44:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    goto LABEL_46;
  }
  v59 = *(_QWORD *)(v57 + 8);
  if (v59 >> 60 == 15)
  {
    outlined destroy of Data(v56);
    goto LABEL_44;
  }
  v60 = *(_QWORD *)v56;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_QWORD *)(v56 + 8) = v59;
  outlined consume of Data._Representation(v60, v58);
LABEL_46:
  v61 = a3[14];
  v62 = a1 + v61;
  v63 = a2 + v61;
  v64 = *(_QWORD *)(a1 + v61 + 8);
  if (v64 >> 60 == 15)
  {
LABEL_49:
    *(_OWORD *)v62 = *(_OWORD *)v63;
    goto LABEL_51;
  }
  v65 = *(_QWORD *)(v63 + 8);
  if (v65 >> 60 == 15)
  {
    outlined destroy of Data(v62);
    goto LABEL_49;
  }
  v66 = *(_QWORD *)v62;
  *(_QWORD *)v62 = *(_QWORD *)v63;
  *(_QWORD *)(v62 + 8) = v65;
  outlined consume of Data._Representation(v66, v64);
LABEL_51:
  v67 = a3[15];
  v68 = (uint64_t *)(a1 + v67);
  v69 = (uint64_t *)(a2 + v67);
  v70 = *(_QWORD *)(a1 + v67 + 8);
  if (v70 >> 60 != 15)
  {
    v71 = v69[1];
    if (v71 >> 60 != 15)
    {
      v72 = *v68;
      *v68 = *v69;
      v68[1] = v71;
      outlined consume of Data._Representation(v72, v70);
      return a1;
    }
    outlined destroy of Data((uint64_t)v68);
  }
  *(_OWORD *)v68 = *(_OWORD *)v69;
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchModelIOData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D817550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t storeEnumTagSinglePayload for PinchModelIOData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8175E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t type metadata accessor for PinchModelIOData(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchModelIOData);
}

uint64_t type metadata completion function for PinchModelIOData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PoseModelIOData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D817710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PoseModelIOData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D817798(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PoseModelIOData(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PoseModelIOData);
}

uint64_t PoseModelIOData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(int *)(type metadata accessor for PoseModelIOData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseModelIOData._StorageClass();
    swift_allocObject();
    v2 = (_QWORD *)swift_retain();
    *(_QWORD *)(v0 + v1) = PoseModelIOData._StorageClass.init(copying:)(v2);
    swift_release();
  }
  swift_retain();
  closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
  return swift_release();
}

uint64_t closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 17:
          closure #17 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        case 18:
          closure #18 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in PoseModelIOData.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t PoseModelIOData.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for PoseModelIOData(0);
  v1 = swift_retain();
  closure #1 in PoseModelIOData.traverse<A>(visitor:)(v1);
  result = swift_release();
  if (!v0)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = closure #1 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
  if (!v1)
  {
    closure #2 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #3 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #4 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #5 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #6 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #7 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #8 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #9 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #10 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #11 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #12 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #13 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #14 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #15 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #16 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    closure #17 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
    return closure #18 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(a1);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 16);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 24);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #2 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 32);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #3 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 48);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 56);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #4 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 64);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 72);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #5 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 80);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 88);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #6 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 96);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 104);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #7 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 112);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 120);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #8 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 128);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #9 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 144);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 152);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #10 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 160);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 168);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #11 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 176);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 184);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #12 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 192);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 200);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #13 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 208);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 216);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #14 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 224);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 232);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #15 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 240);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 248);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #16 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 256);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 264);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #17 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 272);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 280);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #18 in closure #1 in PoseModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 288);
  result = swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 296);
  if (v4 >> 60 != 15)
  {
    v5 = *v2;
    outlined copy of Data._Representation(v5, v4);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

BOOL closure #1 in static PoseModelIOData.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v45;
  char v46;
  char v47;
  char v48;

  swift_beginAccess();
  v4 = a1[2];
  v5 = a1[3];
  swift_beginAccess();
  v6 = a2[2];
  v7 = a2[3];
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 == 15)
    {
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
LABEL_5:
    outlined copy of Data?(v4, v5);
    outlined copy of Data?(v6, v7);
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
    goto LABEL_5;
  swift_retain();
  swift_retain();
  outlined copy of Data?(v4, v5);
  outlined copy of Data?(v6, v7);
  specialized static Data.== infix(_:_:)(v4, v5);
  v9 = v8;
  outlined consume of Data?(v6, v7);
  outlined consume of Data?(v4, v5);
  if ((v9 & 1) == 0)
    goto LABEL_88;
LABEL_8:
  swift_beginAccess();
  v10 = a1[4];
  v11 = a1[5];
  swift_beginAccess();
  v12 = a2[4];
  v13 = a2[5];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v15 = v14;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v15 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[6];
  v11 = a1[7];
  swift_beginAccess();
  v12 = a2[6];
  v13 = a2[7];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v17 = v16;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v17 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[8];
  v11 = a1[9];
  swift_beginAccess();
  v12 = a2[8];
  v13 = a2[9];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v19 = v18;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v19 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[10];
  v11 = a1[11];
  swift_beginAccess();
  v12 = a2[10];
  v13 = a2[11];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v21 = v20;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v21 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[12];
  v11 = a1[13];
  swift_beginAccess();
  v12 = a2[12];
  v13 = a2[13];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v23 = v22;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v23 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[14];
  v11 = a1[15];
  swift_beginAccess();
  v12 = a2[14];
  v13 = a2[15];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v25 = v24;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v25 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[16];
  v11 = a1[17];
  swift_beginAccess();
  v12 = a2[16];
  v13 = a2[17];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v27 = v26;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v27 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[18];
  v11 = a1[19];
  swift_beginAccess();
  v12 = a2[18];
  v13 = a2[19];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v29 = v28;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v29 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[20];
  v11 = a1[21];
  swift_beginAccess();
  v12 = a2[20];
  v13 = a2[21];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v31 = v30;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v31 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[22];
  v11 = a1[23];
  swift_beginAccess();
  v12 = a2[22];
  v13 = a2[23];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v33 = v32;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v33 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[24];
  v11 = a1[25];
  swift_beginAccess();
  v12 = a2[24];
  v13 = a2[25];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v35 = v34;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v35 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[26];
  v11 = a1[27];
  swift_beginAccess();
  v12 = a2[26];
  v13 = a2[27];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v37 = v36;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v37 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[28];
  v11 = a1[29];
  swift_beginAccess();
  v12 = a2[28];
  v13 = a2[29];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v39 = v38;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v39 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[30];
  v11 = a1[31];
  swift_beginAccess();
  v12 = a2[30];
  v13 = a2[31];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
  }
  else
  {
    if (v13 >> 60 == 15)
      goto LABEL_87;
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    specialized static Data.== infix(_:_:)(v10, v11);
    v41 = v40;
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    if ((v41 & 1) == 0)
      goto LABEL_88;
  }
  swift_beginAccess();
  v10 = a1[32];
  v11 = a1[33];
  swift_beginAccess();
  v12 = a2[32];
  v13 = a2[33];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 != 15)
      goto LABEL_87;
    goto LABEL_83;
  }
  if (v13 >> 60 == 15)
    goto LABEL_87;
  outlined copy of Data?(v10, v11);
  outlined copy of Data?(v12, v13);
  specialized static Data.== infix(_:_:)(v10, v11);
  v43 = v42;
  outlined consume of Data?(v12, v13);
  outlined consume of Data?(v10, v11);
  if ((v43 & 1) == 0)
  {
LABEL_88:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_83:
  swift_beginAccess();
  v10 = a1[34];
  v11 = a1[35];
  swift_beginAccess();
  v12 = a2[34];
  v13 = a2[35];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 == 15)
      goto LABEL_91;
LABEL_87:
    outlined copy of Data?(v10, v11);
    outlined copy of Data?(v12, v13);
    outlined consume of Data?(v10, v11);
    outlined consume of Data?(v12, v13);
    goto LABEL_88;
  }
  if (v13 >> 60 == 15)
    goto LABEL_87;
  outlined copy of Data?(v10, v11);
  outlined copy of Data?(v12, v13);
  specialized static Data.== infix(_:_:)(v10, v11);
  v46 = v45;
  outlined consume of Data?(v12, v13);
  outlined consume of Data?(v10, v11);
  if ((v46 & 1) == 0)
    goto LABEL_88;
LABEL_91:
  swift_beginAccess();
  v4 = a1[36];
  v5 = a1[37];
  swift_beginAccess();
  v6 = a2[36];
  v7 = a2[37];
  if (v5 >> 60 == 15)
  {
    outlined copy of Data?(a2[36], a2[37]);
    swift_release();
    swift_release();
    if (v7 >> 60 == 15)
      return 1;
LABEL_6:
    outlined consume of Data?(v4, v5);
    outlined consume of Data?(v6, v7);
    return 0;
  }
  if (v7 >> 60 == 15)
  {
    outlined copy of Data._Representation(v4, v5);
    outlined copy of Data._Representation(v4, v5);
    swift_release();
    swift_release();
    outlined consume of Data?(v4, v5);
    goto LABEL_6;
  }
  outlined copy of Data?(a2[36], a2[37]);
  outlined copy of Data?(v4, v5);
  specialized static Data.== infix(_:_:)(v4, v5);
  v48 = v47;
  swift_release();
  swift_release();
  outlined consume of Data?(v6, v7);
  outlined consume of Data?(v4, v5);
  return (v48 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PoseModelIOData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static PoseModelIOData._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PoseModelIOData()
{
  return 0x65646F4D65736F50;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PoseModelIOData()
{
  return PoseModelIOData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PoseModelIOData()
{
  return PoseModelIOData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PoseModelIOData()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData, type metadata accessor for PoseModelIOData, (uint64_t)&protocol conformance descriptor for PoseModelIOData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PoseModelIOData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PoseModelIOData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PoseModelIOData()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData, type metadata accessor for PoseModelIOData, (uint64_t)&protocol conformance descriptor for PoseModelIOData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseModelIOData()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData, type metadata accessor for PoseModelIOData, (uint64_t)&protocol conformance descriptor for PoseModelIOData);
  return Message.hash(into:)();
}

uint64_t PinchModelIOData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
          type metadata accessor for PinchModelIOData(0);
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PinchModelIOData.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in PinchModelIOData.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #3 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #4 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #5 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #6 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #7 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #8 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #9 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #10 in PinchModelIOData.traverse<A>(visitor:)(v0);
    closure #11 in PinchModelIOData.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 20);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #2 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #3 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 28);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #4 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #5 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 36);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #6 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 40);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #7 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 44);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #8 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 48);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #9 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 52);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #10 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 56);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #11 in PinchModelIOData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for PinchModelIOData(0);
  v3 = a1 + *(int *)(result + 60);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

double protocol witness for Message.init() in conformance PinchModelIOData@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  result = 0.0;
  v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_23D9AB950;
  *(_OWORD *)(a2 + v5) = xmmword_23D9AB950;
  v6 = a1[8];
  *(_OWORD *)(a2 + a1[7]) = xmmword_23D9AB950;
  *(_OWORD *)(a2 + v6) = xmmword_23D9AB950;
  v7 = a1[10];
  *(_OWORD *)(a2 + a1[9]) = xmmword_23D9AB950;
  *(_OWORD *)(a2 + v7) = xmmword_23D9AB950;
  v8 = a1[12];
  *(_OWORD *)(a2 + a1[11]) = xmmword_23D9AB950;
  *(_OWORD *)(a2 + v8) = xmmword_23D9AB950;
  v9 = a1[14];
  *(_OWORD *)(a2 + a1[13]) = xmmword_23D9AB950;
  *(_OWORD *)(a2 + v9) = xmmword_23D9AB950;
  *(_OWORD *)(a2 + a1[15]) = xmmword_23D9AB950;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchModelIOData()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchModelIOData()
{
  return PinchModelIOData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchModelIOData()
{
  return PinchModelIOData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchModelIOData()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData, type metadata accessor for PinchModelIOData, (uint64_t)&protocol conformance descriptor for PinchModelIOData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchModelIOData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchModelIOData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchModelIOData()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData, type metadata accessor for PinchModelIOData, (uint64_t)&protocol conformance descriptor for PinchModelIOData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchModelIOData()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData, type metadata accessor for PinchModelIOData, (uint64_t)&protocol conformance descriptor for PinchModelIOData);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in PinchModelIOData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData, type metadata accessor for PinchModelIOData, (uint64_t)&protocol conformance descriptor for PinchModelIOData);
}

uint64_t base witness table accessor for Message in PinchModelIOData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData, type metadata accessor for PinchModelIOData, (uint64_t)&protocol conformance descriptor for PinchModelIOData);
}

uint64_t base witness table accessor for Hashable in PinchModelIOData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData, type metadata accessor for PinchModelIOData, (uint64_t)&protocol conformance descriptor for PinchModelIOData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchModelIOData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchModelIOData and conformance PinchModelIOData, type metadata accessor for PinchModelIOData, (uint64_t)&protocol conformance descriptor for PinchModelIOData);
}

uint64_t base witness table accessor for Equatable in PoseModelIOData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData, type metadata accessor for PoseModelIOData, (uint64_t)&protocol conformance descriptor for PoseModelIOData);
}

uint64_t base witness table accessor for Message in PoseModelIOData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData, type metadata accessor for PoseModelIOData, (uint64_t)&protocol conformance descriptor for PoseModelIOData);
}

uint64_t base witness table accessor for Hashable in PoseModelIOData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData, type metadata accessor for PoseModelIOData, (uint64_t)&protocol conformance descriptor for PoseModelIOData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PoseModelIOData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseModelIOData and conformance PoseModelIOData, type metadata accessor for PoseModelIOData, (uint64_t)&protocol conformance descriptor for PoseModelIOData);
}

uint64_t specialized static PinchModelIOData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;

  v4 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v74 - v10;
  v12 = (int *)type metadata accessor for PinchModelIOData(0);
  v13 = v12[5];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  v16 = (uint64_t *)(a2 + v13);
  v17 = *v16;
  v18 = v16[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
  }
  else
  {
    if (v18 >> 60 == 15)
      goto LABEL_50;
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    specialized static Data.== infix(_:_:)(v14, v15);
    v20 = v19;
    outlined consume of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    if ((v20 & 1) == 0)
      goto LABEL_52;
  }
  v21 = v12[6];
  v14 = *(_QWORD *)(a1 + v21);
  v15 = *(_QWORD *)(a1 + v21 + 8);
  v22 = (uint64_t *)(a2 + v21);
  v17 = *v22;
  v18 = v22[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
  }
  else
  {
    if (v18 >> 60 == 15)
      goto LABEL_50;
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    specialized static Data.== infix(_:_:)(v14, v15);
    v24 = v23;
    outlined consume of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    if ((v24 & 1) == 0)
      goto LABEL_52;
  }
  v25 = v12[7];
  v14 = *(_QWORD *)(a1 + v25);
  v15 = *(_QWORD *)(a1 + v25 + 8);
  v26 = (uint64_t *)(a2 + v25);
  v17 = *v26;
  v18 = v26[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
  }
  else
  {
    if (v18 >> 60 == 15)
      goto LABEL_50;
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    specialized static Data.== infix(_:_:)(v14, v15);
    v28 = v27;
    outlined consume of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    if ((v28 & 1) == 0)
      goto LABEL_52;
  }
  v29 = v12[8];
  v14 = *(_QWORD *)(a1 + v29);
  v15 = *(_QWORD *)(a1 + v29 + 8);
  v30 = (uint64_t *)(a2 + v29);
  v17 = *v30;
  v18 = v30[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
  }
  else
  {
    if (v18 >> 60 == 15)
      goto LABEL_50;
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    specialized static Data.== infix(_:_:)(v14, v15);
    v32 = v31;
    outlined consume of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    if ((v32 & 1) == 0)
      goto LABEL_52;
  }
  v33 = v12[9];
  v14 = *(_QWORD *)(a1 + v33);
  v15 = *(_QWORD *)(a1 + v33 + 8);
  v34 = (uint64_t *)(a2 + v33);
  v17 = *v34;
  v18 = v34[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
  }
  else
  {
    if (v18 >> 60 == 15)
      goto LABEL_50;
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    specialized static Data.== infix(_:_:)(v14, v15);
    v36 = v35;
    outlined consume of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    if ((v36 & 1) == 0)
      goto LABEL_52;
  }
  v37 = v12[10];
  v14 = *(_QWORD *)(a1 + v37);
  v15 = *(_QWORD *)(a1 + v37 + 8);
  v38 = (uint64_t *)(a2 + v37);
  v17 = *v38;
  v18 = v38[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
  }
  else
  {
    if (v18 >> 60 == 15)
      goto LABEL_50;
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    specialized static Data.== infix(_:_:)(v14, v15);
    v40 = v39;
    outlined consume of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    if ((v40 & 1) == 0)
      goto LABEL_52;
  }
  v41 = v12[11];
  v14 = *(_QWORD *)(a1 + v41);
  v15 = *(_QWORD *)(a1 + v41 + 8);
  v42 = (uint64_t *)(a2 + v41);
  v17 = *v42;
  v18 = v42[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
  }
  else
  {
    if (v18 >> 60 == 15)
      goto LABEL_50;
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    specialized static Data.== infix(_:_:)(v14, v15);
    v44 = v43;
    outlined consume of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    if ((v44 & 1) == 0)
      goto LABEL_52;
  }
  v45 = v12[12];
  v14 = *(_QWORD *)(a1 + v45);
  v15 = *(_QWORD *)(a1 + v45 + 8);
  v46 = (uint64_t *)(a2 + v45);
  v17 = *v46;
  v18 = v46[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
  }
  else
  {
    if (v18 >> 60 == 15)
      goto LABEL_50;
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    specialized static Data.== infix(_:_:)(v14, v15);
    v48 = v47;
    outlined consume of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    if ((v48 & 1) == 0)
      goto LABEL_52;
  }
  v49 = v12[13];
  v14 = *(_QWORD *)(a1 + v49);
  v15 = *(_QWORD *)(a1 + v49 + 8);
  v50 = (uint64_t *)(a2 + v49);
  v17 = *v50;
  v18 = v50[1];
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15)
      goto LABEL_50;
LABEL_46:
    v53 = v12[14];
    v14 = *(_QWORD *)(a1 + v53);
    v15 = *(_QWORD *)(a1 + v53 + 8);
    v54 = (uint64_t *)(a2 + v53);
    v17 = *v54;
    v18 = v54[1];
    if (v15 >> 60 == 15)
    {
      if (v18 >> 60 == 15)
        goto LABEL_55;
    }
    else if (v18 >> 60 != 15)
    {
      outlined copy of Data?(v14, v15);
      outlined copy of Data?(v17, v18);
      specialized static Data.== infix(_:_:)(v14, v15);
      v60 = v59;
      outlined consume of Data?(v17, v18);
      outlined consume of Data?(v14, v15);
      if ((v60 & 1) == 0)
        goto LABEL_52;
LABEL_55:
      v61 = v12[15];
      v62 = *(_QWORD *)(a1 + v61);
      v63 = *(_QWORD *)(a1 + v61 + 8);
      v64 = (uint64_t *)(a2 + v61);
      v65 = *v64;
      v66 = v64[1];
      if (v63 >> 60 == 15)
      {
        if (v66 >> 60 == 15)
          goto LABEL_61;
      }
      else if (v66 >> 60 != 15)
      {
        outlined copy of Data?(v62, v63);
        outlined copy of Data?(v65, v66);
        specialized static Data.== infix(_:_:)(v62, v63);
        v68 = v67;
        outlined consume of Data?(v65, v66);
        outlined consume of Data?(v62, v63);
        if ((v68 & 1) == 0)
          goto LABEL_52;
LABEL_61:
        v69 = v74;
        v70 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
        v71 = a1;
        v72 = v75;
        v70(v11, v71, v75);
        v70(v7, a2, v72);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        v73 = *(void (**)(char *, uint64_t))(v69 + 8);
        v73(v7, v72);
        v73(v11, v72);
        return v57 & 1;
      }
      outlined copy of Data?(v62, v63);
      outlined copy of Data?(v65, v66);
      outlined consume of Data?(v62, v63);
      v55 = v65;
      v56 = v66;
      goto LABEL_51;
    }
LABEL_50:
    outlined copy of Data?(v14, v15);
    outlined copy of Data?(v17, v18);
    outlined consume of Data?(v14, v15);
    v55 = v17;
    v56 = v18;
LABEL_51:
    outlined consume of Data?(v55, v56);
    goto LABEL_52;
  }
  if (v18 >> 60 == 15)
    goto LABEL_50;
  outlined copy of Data?(v14, v15);
  outlined copy of Data?(v17, v18);
  specialized static Data.== infix(_:_:)(v14, v15);
  v52 = v51;
  outlined consume of Data?(v17, v18);
  outlined consume of Data?(v14, v15);
  if ((v52 & 1) != 0)
    goto LABEL_46;
LABEL_52:
  v57 = 0;
  return v57 & 1;
}

uint64_t specialized static PoseModelIOData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for PoseModelIOData(0) + 20);
  v14 = *(_QWORD **)(a1 + v13);
  v15 = *(_QWORD **)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static PoseModelIOData.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        v16))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance InteractionInformationSource@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for InteractionInformationSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23D81B9C4 + 4 * byte_23D9B4305[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23D81B9F8 + 4 * byte_23D9B4300[v4]))();
}

uint64_t sub_23D81B9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D81BA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D81BA08);
  return result;
}

uint64_t sub_23D81BA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D81BA1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23D81BA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D81BA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InteractionInformationSource()
{
  return &type metadata for InteractionInformationSource;
}

unint64_t lazy protocol witness table accessor for type InteractionInformationSource and conformance InteractionInformationSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InteractionInformationSource and conformance InteractionInformationSource;
  if (!lazy protocol witness table cache variable for type InteractionInformationSource and conformance InteractionInformationSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for InteractionInformationSource, &type metadata for InteractionInformationSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InteractionInformationSource and conformance InteractionInformationSource);
  }
  return result;
}

Swift::Void __swiftcall PinchCancellation.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21[8];
  __int128 v22;
  uint64_t v23;

  v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v1 + 16) = 2;
  *(_QWORD *)(v1 + 32) = 0;
  v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v2 + 16) = 3;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  swift_beginAccess();
  *(_QWORD *)(v0 + 72) = v1;
  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = 0;
  *(_DWORD *)(v0 + 95) = 0;
  *(_QWORD *)(v0 + 100) = 1065353216;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 16);
  v17 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_8;
LABEL_6:
  v11 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v12 = v11 | (v8 << 6);
  while (2)
  {
    v13 = *(_QWORD *)(v3 + 56);
    *(_QWORD *)&v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    outlined init with copy of Detection2DComputePipelineProtocol(v13 + 40 * v12, (uint64_t)&v18 + 8);
    while (1)
    {
      outlined init with take of (key: Int, value: PinchCancellationModule)?((uint64_t)&v18, (uint64_t)v21);
      if (!v23)
      {
        swift_release();
        return;
      }
      outlined init with take of PinchCancellationModule(&v22, (uint64_t)&v18);
      v9 = *((_QWORD *)&v19 + 1);
      v10 = v20;
      __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v18);
      if (v6)
        goto LABEL_6;
LABEL_8:
      v14 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v14 < v7)
      {
        v15 = *(_QWORD *)(v17 + 8 * v14);
        if (v15)
          goto LABEL_11;
        v16 = v8 + 2;
        ++v8;
        if (v14 + 1 < v7)
        {
          v15 = *(_QWORD *)(v17 + 8 * v16);
          if (v15)
            goto LABEL_14;
          v8 = v14 + 1;
          if (v14 + 2 < v7)
          {
            v15 = *(_QWORD *)(v17 + 8 * (v14 + 2));
            if (v15)
            {
              v14 += 2;
              goto LABEL_11;
            }
            v16 = v14 + 3;
            v8 = v14 + 2;
            if (v14 + 3 < v7)
              break;
          }
        }
      }
LABEL_25:
      v6 = 0;
      v19 = 0u;
      v20 = 0u;
      v18 = 0u;
    }
    v15 = *(_QWORD *)(v17 + 8 * v16);
    if (v15)
    {
LABEL_14:
      v14 = v16;
LABEL_11:
      v6 = (v15 - 1) & v15;
      v12 = __clz(__rbit64(v15)) + (v14 << 6);
      v8 = v14;
      continue;
    }
    break;
  }
  while (1)
  {
    v14 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v14 >= v7)
    {
      v8 = v7 - 1;
      goto LABEL_25;
    }
    v15 = *(_QWORD *)(v17 + 8 * v14);
    ++v16;
    if (v15)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
}

Swift::Void __swiftcall PinchCancellation.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  HandsKitConfig *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  HandsKitConfig *v7;
  __int128 v8;
  uint64_t v9;
  NSString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  NSString *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v3 = a1;
  v4 = specialized PinchCancellation.EnabledModules.init(_:)(v3);
  v6 = v5;

  *(_BYTE *)(v2 + 112) = v4 & 1;
  *(_BYTE *)(v2 + 113) = BYTE1(v4) & 1;
  *(_BYTE *)(v2 + 114) = BYTE2(v4) & 1;
  *(_QWORD *)(v2 + 120) = v6;
  swift_bridgeObjectRelease();
  v7 = v3;
  specialized PinchCancellation.ThresholdConfig.init(_:)(v7, (uint64_t)&v19);
  v22 = v21;
  v23 = *((_QWORD *)&v20 + 1);
  *(_QWORD *)(v2 + 64) = v21;
  v8 = v20;
  *(_OWORD *)(v2 + 32) = v19;
  *(_OWORD *)(v2 + 48) = v8;
  outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v23);
  outlined retain of PinchStatisticsStructs.PinchAttribute?((uint64_t)&v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of HandContainer((uint64_t)&v23);
  outlined release of HandContainer((uint64_t)&v22);
  *(_BYTE *)(v2 + 128) = -[HandsKitConfig SerializeInternalData](v7, sel_SerializeInternalData);
  v9 = *(_QWORD *)(v2 + 24);
  if (!v9)
    goto LABEL_6;
  swift_retain();
  v10 = -[HandsKitConfig PinchCancellationModelName](v7, sel_PinchCancellationModelName);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  if (v11 != *(_QWORD *)(v9 + 16) || v13 != *(_QWORD *)(v9 + 24))
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_7;
LABEL_6:
    v15 = -[HandsKitConfig PinchCancellationModelName](v7, sel_PinchCancellationModelName);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    LODWORD(v15) = -[HandsKitConfig AllowInternalModel](v7, sel_AllowInternalModel);
    type metadata accessor for PinchCancellationModel();
    swift_allocObject();
    *(_QWORD *)(v2 + 24) = PinchCancellationModel.init(_:_:)(v16, v18, (int)v15);
    swift_release();
    goto LABEL_7;
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_7:
  PinchCancellation.initializeModules(_:)(v7);
}

Swift::Void __swiftcall PinchCancellation.initializeModules(_:)(HandsKitConfig *a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  HandsKitConfig *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  int v9;
  signed int v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  HandsKitConfig *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  float32x4_t v29;
  uint64_t v30;
  _OWORD v31[3];
  char v32;
  _BYTE v33[32];
  __int128 v34;
  _BYTE v35[28];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, PinchCancellationModule)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A74A0;
  *(_QWORD *)(inited + 32) = 0;
  v3 = type metadata accessor for SlidingPinch();
  v4 = swift_allocObject();
  v5 = a1;
  v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v6[2] = 4;
  v6[4] = 0;
  v6[5] = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = v6;
  v7 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v7[2] = 4;
  v7[4] = 0;
  v7[5] = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = v7;
  swift_bridgeObjectRelease();
  -[HandsKitConfig SlidingFingerDistanceThreshold](v5, sel_SlidingFingerDistanceThreshold);
  v9 = v8;
  v10 = -[HandsKitConfig SlidingPinchCounterThreshold](v5, sel_SlidingPinchCounterThreshold);

  *(_DWORD *)(v4 + 40) = 1058642330;
  *(_QWORD *)(v4 + 48) = 1;
  *(_DWORD *)(v4 + 56) = v9;
  *(_QWORD *)(v4 + 64) = v10;
  *(_QWORD *)(inited + 64) = v3;
  *(_QWORD *)(inited + 72) = &protocol witness table for SlidingPinch;
  *(_QWORD *)(inited + 40) = v4;
  *(_QWORD *)(inited + 80) = 1;
  v11 = type metadata accessor for CrossedPinch();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_QWORD *)(v12 + 96) = 0;
  *(_BYTE *)(v12 + 104) = 1;
  v13 = vrsqrte_f32((float32x2_t)1065353216);
  v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v13, v13)));
  v29 = vmulq_n_f32((float32x4_t)xmmword_23D9A6CA0, vmul_f32(v14, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v14, v14))).f32[0]);
  v15 = -[HandsKitConfig EnableRepetitiveAccidentalSuppression](v5, sel_EnableRepetitiveAccidentalSuppression);
  *(_QWORD *)(v12 + 16) = 0x3E8000003BA3D70ALL;
  *(float32x4_t *)(v12 + 32) = v29;
  *(_BYTE *)(v12 + 48) = v15;
  *(_QWORD *)(v12 + 52) = 0x3E4CCCCD40A00000;
  *(_QWORD *)(inited + 112) = v11;
  *(_QWORD *)(inited + 120) = &protocol witness table for CrossedPinch;
  *(_QWORD *)(inited + 88) = v12;
  *(_QWORD *)(inited + 128) = 4;
  v16 = type metadata accessor for GenericAccidental();
  v17 = swift_allocObject();
  *(_WORD *)(v17 + 160) = 0;
  *(_BYTE *)(v17 + 162) = 0;
  *(_QWORD *)(v17 + 176) = 0;
  *(_QWORD *)(v17 + 184) = 0;
  *(_BYTE *)(v17 + 192) = 1;
  v18 = v5;
  -[HandsKitConfig CancellationHoverDistance](v18, sel_CancellationHoverDistance);
  v20 = v19;
  -[HandsKitConfig CancellationVelocityThreshold](v18, sel_CancellationVelocityThreshold);
  v22 = v21;
  LOBYTE(v10) = -[HandsKitConfig EnableDroppingHandCancellation](v18, sel_EnableDroppingHandCancellation);
  -[HandsKitConfig DroppingHandHDThreshold](v18, sel_DroppingHandHDThreshold);
  v24 = v23;

  *(_DWORD *)v33 = 1058642330;
  *(_OWORD *)&v33[8] = xmmword_23D9B43E0;
  *(_DWORD *)&v33[24] = v20;
  *(_QWORD *)&v34 = 6;
  DWORD2(v34) = 1008981770;
  HIDWORD(v34) = v22;
  *(_OWORD *)v35 = xmmword_23D9B43F0;
  v35[16] = v10;
  *(_DWORD *)&v35[20] = 1036831949;
  *(_DWORD *)&v35[24] = v24;
  v25 = *(_OWORD *)v33;
  *(_OWORD *)(v17 + 88) = *(_OWORD *)&v33[16];
  v26 = *(_OWORD *)v35;
  *(_OWORD *)(v17 + 104) = v34;
  *(_OWORD *)(v17 + 120) = v26;
  *(_OWORD *)(v17 + 132) = *(_OWORD *)&v35[12];
  *(_OWORD *)(v17 + 72) = v25;
  specialized GenericAccidental.InternalStates.init(_:)((uint64_t)v33, (uint64_t)v31);
  v27 = v31[1];
  *(_OWORD *)(v17 + 16) = v31[0];
  *(_OWORD *)(v17 + 32) = v27;
  *(_OWORD *)(v17 + 48) = v31[2];
  *(_BYTE *)(v17 + 64) = v32;
  *(_WORD *)(v17 + 160) = 0;
  *(_BYTE *)(v17 + 162) = 0;
  *(_QWORD *)(v17 + 176) = 0;
  *(_QWORD *)(v17 + 184) = 0;
  *(_BYTE *)(v17 + 192) = 1;
  *(_QWORD *)(inited + 160) = v16;
  *(_QWORD *)(inited + 168) = &protocol witness table for GenericAccidental;
  *(_QWORD *)(inited + 136) = v17;
  v28 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, PinchCancellationModule));
  swift_arrayDestroy();
  *(_QWORD *)(v30 + 16) = v28;
  swift_bridgeObjectRelease();
}

uint64_t PinchCancellation.process(_:_:)(char *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  __int128 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t (*v39)(_QWORD *, _OWORD *, uint64_t, uint64_t);
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  char *v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  _QWORD v60[44];
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD v65[5];
  _OWORD v66[2];
  int v67;

  v3 = v2;
  v6 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v3 + 72;
  swift_beginAccess();
  v10 = *(unsigned __int8 *)(v3 + 96);
  outlined init with copy of HandDescriptor((uint64_t)a1, (uint64_t)v9);
  if (v10 == 1)
  {
    outlined destroy of HandDescriptor((uint64_t)v9);
  }
  else
  {
    v11 = v9[4];
    outlined destroy of HandDescriptor((uint64_t)v9);
    if ((v11 & 1) != 0)
      PinchCancellation.updateStatesOnMake(_:)(a2);
  }
  result = PinchCancellation.updateHdAndOcclusionBuffers(_:)((uint64_t)a2);
  if ((*(_BYTE *)(v3 + 96) & 1) != 0)
  {
    result = PinchCancellation.processLSTM(_:)(a1);
    v13 = *(_QWORD *)(v3 + 88);
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (!v14)
    {
      v52 = v6;
      v53 = a1;
      *(_QWORD *)(v3 + 88) = v15;
      PinchCancellation.checkIfWithinAllowedVelocityLimit(_:)((uint64_t)a2);
      v16 = *(_QWORD *)(v3 + 16);
      v17 = *(_QWORD *)(v16 + 64);
      v58 = v16 + 64;
      v18 = 1 << *(_BYTE *)(v16 + 32);
      v19 = -1;
      if (v18 < 64)
        v19 = ~(-1 << v18);
      v20 = v19 & v17;
      v21 = (unint64_t)(v18 + 63) >> 6;
      v22 = &v60[1];
      v23 = (__int128 *)v65;
      v51 = v21 - 1;
      result = swift_bridgeObjectRetain();
      v59 = 0;
      v55 = v16;
      v56 = v3;
      v54 = (__int128 *)v65;
      while (!v20)
      {
        v27 = v59 + 1;
        if (__OFADD__(v59, 1))
        {
          __break(1u);
          goto LABEL_50;
        }
        if (v27 < v21)
        {
          v28 = *(_QWORD *)(v58 + 8 * v27);
          if (v28)
            goto LABEL_17;
          v29 = v59 + 2;
          ++v59;
          if (v27 + 1 < v21)
          {
            v28 = *(_QWORD *)(v58 + 8 * v29);
            if (v28)
              goto LABEL_20;
            v59 = v27 + 1;
            if (v27 + 2 < v21)
            {
              v28 = *(_QWORD *)(v58 + 8 * (v27 + 2));
              if (v28)
              {
                v27 += 2;
                goto LABEL_17;
              }
              v29 = v27 + 3;
              v59 = v27 + 2;
              if (v27 + 3 < v21)
              {
                v28 = *(_QWORD *)(v58 + 8 * v29);
                if (!v28)
                {
                  while (1)
                  {
                    v27 = v29 + 1;
                    if (__OFADD__(v29, 1))
                      goto LABEL_51;
                    if (v27 >= v21)
                    {
                      v59 = v51;
                      goto LABEL_31;
                    }
                    v28 = *(_QWORD *)(v58 + 8 * v27);
                    ++v29;
                    if (v28)
                      goto LABEL_17;
                  }
                }
LABEL_20:
                v27 = v29;
LABEL_17:
                v20 = (v28 - 1) & v28;
                v25 = __clz(__rbit64(v28)) + (v27 << 6);
                v59 = v27;
LABEL_13:
                v26 = *(_QWORD *)(v16 + 56);
                v60[0] = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v25);
                outlined init with copy of Detection2DComputePipelineProtocol(v26 + 40 * v25, (uint64_t)v22);
                goto LABEL_32;
              }
            }
          }
        }
LABEL_31:
        v20 = 0;
        memset(v60, 0, 48);
LABEL_32:
        outlined init with take of (key: Int, value: PinchCancellationModule)?((uint64_t)v60, (uint64_t)&v64);
        if (!v65[3])
          return swift_release();
        v30 = v64;
        outlined init with take of PinchCancellationModule(v23, (uint64_t)v61);
        v31 = *(_QWORD *)(v3 + 120);
        if (*(_QWORD *)(v31 + 16))
        {
          v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v33 & 1) != 0 && *(_BYTE *)(*(_QWORD *)(v31 + 56) + v32) == 1)
          {
            v34 = v22;
            v35 = v21;
            v36 = v62;
            v37 = v63;
            __swift_project_boxed_opaque_existential_1(v61, v62);
            memcpy(v60, a2, 0x151uLL);
            v38 = *(_OWORD *)(v57 + 16);
            v66[0] = *(_OWORD *)v57;
            v66[1] = v38;
            v67 = *(_DWORD *)(v57 + 32);
            v39 = *(uint64_t (**)(_QWORD *, _OWORD *, uint64_t, uint64_t))(v37 + 16);
            outlined retain of HandPose((uint64_t)v66);
            v40 = v39(v60, v66, v36, v37);
            outlined release of HandPose((uint64_t)v66);
            if ((v40 & 1) != 0)
            {
              swift_release();
              v46 = (uint64_t)v53;
              result = specialized PinchCancellation.setBreakReason(_:_:)((uint64_t)v53, v30);
              *(_BYTE *)(v46 + 137) = 1;
              v47 = *(unsigned __int8 *)(v56 + 128);
              if (v47 == 2)
                goto LABEL_52;
              if ((v47 & 1) == 0)
                goto LABEL_46;
              v48 = v46 + *(int *)(v52 + 96);
              v49 = type metadata accessor for HandDescriptorInternal();
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v48, 1, v49);
              if ((_DWORD)result == 1)
                goto LABEL_53;
              if (*(_QWORD *)(v48 + 48))
              {
                *(_QWORD *)(v48 + 32) = 10;
                *(_BYTE *)(v48 + 40) = 1;
LABEL_46:
                v45 = v46;
                goto LABEL_47;
              }
              goto LABEL_54;
            }
            v41 = v62;
            v42 = v63;
            __swift_project_boxed_opaque_existential_1(v61, v62);
            v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 32))(v41, v42);
            v16 = v55;
            v3 = v56;
            v21 = v35;
            v22 = v34;
            v23 = v54;
            if ((v43 & 1) != 0)
            {
              swift_release();
              v44 = (uint64_t)v53;
              specialized PinchCancellation.setBreakReason(_:_:)((uint64_t)v53, v30);
              v45 = v44;
LABEL_47:
              PinchCancellation.breakPinch(_:)(v45);
              return __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
            }
          }
        }
        result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
      }
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v59 << 6);
      goto LABEL_13;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
  }
  else
  {
    *(_BYTE *)(v3 + 96) = 0;
  }
  return result;
}

uint64_t PinchCancellation.updateHdAndOcclusionBuffers(_:)(uint64_t a1)
{
  uint64_t v1;
  char **v2;
  uint64_t v3;
  int v4;
  char *v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t inited;
  char *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;

  v2 = (char **)v1;
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_DWORD *)(a1 + 160);
  v5 = (char *)(v1 + 72);
  swift_beginAccess();
  v6 = (unint64_t)v2[9];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[9] = (char *)v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
    *(_QWORD *)v5 = v6;
  }
  v9 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v6 + 24);
  if (v9 >= v8 >> 1)
  {
    v6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v6);
    *(_QWORD *)v5 = v6;
  }
  *(_QWORD *)(v6 + 16) = v9 + 1;
  *(_DWORD *)(v6 + 4 * v9 + 32) = v4;
  if (!*(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    __break(1u);
LABEL_19:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
    *v2 = v5;
    goto LABEL_8;
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  *(_QWORD *)(inited + 32) = v3;
  v6 = specialized Sequence<>.min()(inited);
  swift_setDeallocating();
  if ((v6 & 0x100000000) != 0)
    goto LABEL_12;
  swift_beginAccess();
  v11 = v2[10];
  v2 += 10;
  v5 = v11;
  v12 = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v11;
  if ((v12 & 1) == 0)
    goto LABEL_19;
LABEL_8:
  v14 = *((_QWORD *)v5 + 2);
  v13 = *((_QWORD *)v5 + 3);
  if (v14 >= v13 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v5);
    *v2 = v5;
  }
  *((_QWORD *)v5 + 2) = v14 + 1;
  *(_DWORD *)&v5[4 * v14 + 32] = v6;
  if (*((_QWORD *)*v2 + 2))
    goto LABEL_17;
  __break(1u);
LABEL_12:
  swift_beginAccess();
  v17 = v2[10];
  v15 = (uint64_t *)(v2 + 10);
  v16 = (uint64_t)v17;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v15 = (uint64_t)v17;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
    v16 = result;
    *v15 = result;
  }
  v20 = *(_QWORD *)(v16 + 16);
  v19 = *(_QWORD *)(v16 + 24);
  if (v20 >= v19 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, (char *)v16);
    v16 = result;
    *v15 = result;
  }
  *(_QWORD *)(v16 + 16) = v20 + 1;
  *(_DWORD *)(v16 + 4 * v20 + 32) = 1065353216;
  if (*(_QWORD *)(*v15 + 16))
  {
LABEL_17:
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t PinchCancellation.updateStatesOnMake(_:)(const void *a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t *v4;
  unint64_t v5;
  int32x2_t v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  _BYTE __dst[337];
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  char v27[8];
  __int128 v28;
  uint64_t v29;

  PinchCancellation.reset()();
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 96) = 1;
  v4 = *(unint64_t **)(v1 + 24);
  if (!v4)
    goto LABEL_31;
  v5 = v4[12];
  swift_retain();
  v6.i32[0] = 0;
  v4[13] = specialized Array.init(repeating:count:)(v5, v6);
  swift_bridgeObjectRelease();
  v7.i32[0] = 0;
  v4[14] = specialized Array.init(repeating:count:)(v4[12], v7);
  swift_release();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v1 + 16);
  v22 = v8 + 64;
  v9 = 1 << *(_BYTE *)(v8 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v8 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  if (!v11)
    goto LABEL_9;
LABEL_7:
  v16 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v17 = v16 | (v13 << 6);
  while (2)
  {
    v18 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)__dst = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17);
    outlined init with copy of Detection2DComputePipelineProtocol(v18 + 40 * v17, (uint64_t)&__dst[8]);
    while (1)
    {
      outlined init with take of (key: Int, value: PinchCancellationModule)?((uint64_t)__dst, (uint64_t)v27);
      if (!v29)
        return swift_release();
      outlined init with take of PinchCancellationModule(&v28, (uint64_t)v24);
      v14 = v25;
      v15 = v26;
      __swift_project_boxed_opaque_existential_1(v24, v25);
      memcpy(__dst, a1, sizeof(__dst));
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 24))(__dst, v14, v15);
      result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
      if (v11)
        goto LABEL_7;
LABEL_9:
      v19 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_30;
      }
      if (v19 < v12)
      {
        v20 = *(_QWORD *)(v22 + 8 * v19);
        if (v20)
          goto LABEL_12;
        v21 = v13 + 2;
        ++v13;
        if (v19 + 1 < v12)
        {
          v20 = *(_QWORD *)(v22 + 8 * v21);
          if (v20)
            goto LABEL_15;
          v13 = v19 + 1;
          if (v19 + 2 < v12)
          {
            v20 = *(_QWORD *)(v22 + 8 * (v19 + 2));
            if (v20)
            {
              v19 += 2;
              goto LABEL_12;
            }
            v21 = v19 + 3;
            v13 = v19 + 2;
            if (v19 + 3 < v12)
              break;
          }
        }
      }
LABEL_26:
      v11 = 0;
      memset(__dst, 0, 48);
    }
    v20 = *(_QWORD *)(v22 + 8 * v21);
    if (v20)
    {
LABEL_15:
      v19 = v21;
LABEL_12:
      v11 = (v20 - 1) & v20;
      v17 = __clz(__rbit64(v20)) + (v19 << 6);
      v13 = v19;
      continue;
    }
    break;
  }
  while (1)
  {
    v19 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v19 >= v12)
    {
      v13 = v12 - 1;
      goto LABEL_26;
    }
    v20 = *(_QWORD *)(v22 + 8 * v19);
    ++v21;
    if (v20)
      goto LABEL_12;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t PinchCancellation.checkIfWithinAllowedVelocityLimit(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  BOOL v7;
  uint64_t result;
  uint64_t inited;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 168);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (float *)(v2 + 16 * v3);
    v5 = v4[4];
    v6 = v4[6];
    v7 = sqrtf((float)(v6 * v6) + (float)((float)(v5 * v5) + (float)(v4[5] * v4[5]))) >= *(float *)(v1 + 48);
    swift_beginAccess();
    *(_BYTE *)(v1 + 97) = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
    *(float *)(inited + 32) = fabsf(v5);
    *(float *)(inited + 36) = fabsf(v6);
    v10 = specialized Sequence<>.max()(inited);
    result = swift_setDeallocating();
    if ((v10 & 0x100000000) != 0)
    {
      __break(1u);
    }
    else
    {
      result = swift_beginAccess();
      *(float *)(v1 + 104) = *(float *)&v10 + *(float *)&v10;
    }
  }
  else
  {
    result = swift_beginAccess();
    *(_BYTE *)(v1 + 97) = 1;
  }
  return result;
}

uint64_t PinchCancellation.processLSTM(_:)(char *a1)
{
  uint64_t v1;
  char *v3;
  float *v4;
  uint64_t result;
  float v6;
  float v7;

  if (*(_QWORD *)(v1 + 24))
  {
    swift_retain();
    v3 = specialized PinchCancellation.getFeatureVector(_:)(a1);
    v4 = (float *)PinchCancellationModel.predict(_:_:)(v3, (uint64_t)v3);
    result = swift_bridgeObjectRelease();
    if (*((_QWORD *)v4 + 2))
    {
      v6 = v4[8];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *(float *)(v1 + 100) = v6;
      specialized ScrollBreak._getThresholdAtTime(_:_:_:)(*(_QWORD *)(v1 + 88), *(_QWORD **)(v1 + 64), *(_QWORD *)(v1 + 56));
      *(_BYTE *)(v1 + 98) = v6 <= v7;
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    result = swift_beginAccess();
    *(_DWORD *)(v1 + 100) = 0;
  }
  return result;
}

uint64_t PinchCancellation.breakPinch(_:)(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(result + 4) = 0;
  v2 = *(unsigned __int8 *)(v1 + 128);
  if (v2 == 2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 1) == 0)
  {
LABEL_7:
    result = swift_beginAccess();
    *(_BYTE *)(v1 + 96) = 0;
    return result;
  }
  v3 = result + *(int *)(type metadata accessor for HandDescriptor() + 96);
  v4 = type metadata accessor for HandDescriptorInternal();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  if ((_DWORD)result == 1)
    goto LABEL_9;
  if (*(_QWORD *)(v3 + 48))
  {
    if (*(_QWORD *)(v3 + 32) != 10)
    {
      *(_QWORD *)(v3 + 32) = 12;
      *(_BYTE *)(v3 + 40) = 1;
    }
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t PinchCancellation.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchCancellation()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for PinchCancellation.EnabledModules(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PinchCancellation.EnabledModules(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PinchCancellation.EnabledModules(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PinchCancellation.EnabledModules()
{
  return &type metadata for PinchCancellation.EnabledModules;
}

uint64_t initializeWithCopy for PinchCancellation.InternalStates(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PinchCancellation.InternalStates(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for PinchCancellation.InternalStates(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  return a1;
}

ValueMetadata *type metadata accessor for PinchCancellation.InternalStates()
{
  return &type metadata for PinchCancellation.InternalStates;
}

uint64_t destroy for PinchCancellation.ThresholdConfig()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PinchCancellation.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PinchCancellation.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PinchCancellation.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchCancellation.ThresholdConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchCancellation.ThresholdConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchCancellation.ThresholdConfig()
{
  return &type metadata for PinchCancellation.ThresholdConfig;
}

uint64_t specialized PinchCancellation.EnabledModules.init(_:)(void *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t inited;
  int v6;
  int v7;
  int v8;

  specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of PinchCancellation.EnabledModules.init(_:));
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(a1, sel_EnableSlidingPinchCancellation);
  v3 = objc_msgSend(a1, sel_EnableCrossedPinchCancellation);
  v4 = objc_msgSend(a1, sel_EnableLSTMCancellation);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Bool)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A74A0;
  *(_QWORD *)(inited + 32) = 0;
  *(_BYTE *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = 1;
  *(_BYTE *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = 4;
  *(_BYTE *)(inited + 72) = v4;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  if (v3)
    v6 = 256;
  else
    v6 = 0;
  v7 = v6 | v2;
  if (v4)
    v8 = 0x10000;
  else
    v8 = 0;
  return v7 | v8;
}

void specialized PinchCancellation.ThresholdConfig.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  objc_msgSend(a1, sel_CancellationVelocityThreshold);
  v5 = v4;
  v6 = objc_msgSend(a1, sel_CancellationThresholdLSTM);
  type metadata accessor for NSNumber();
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v9 = MEMORY[0x24BEE4AF8];
  v29 = a2;
  if (v8)
  {
    v30 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_30;
    }
    v10 = 0;
    v11 = v30;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x24263790C](v10, v7);
      else
        v12 = *(id *)(v7 + 8 * v10 + 32);
      v13 = v12;
      Float.init(truncating:)();
      v15 = v14;

      v17 = *(_QWORD *)(v30 + 16);
      v16 = *(_QWORD *)(v30 + 24);
      if (v17 >= v16 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      ++v10;
      *(_QWORD *)(v30 + 16) = v17 + 1;
      *(_DWORD *)(v30 + 4 * v17 + 32) = v15;
    }
    while (v8 != v10);
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v18 = objc_msgSend(a1, sel_CancellationRangeLSTM);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v19 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
      goto LABEL_16;
LABEL_27:
    swift_bridgeObjectRelease();

    v22 = MEMORY[0x24BEE4AF8];
LABEL_28:
    *(_OWORD *)v29 = xmmword_23D9B43E0;
    *(_DWORD *)(v29 + 16) = v5;
    *(_QWORD *)(v29 + 24) = v11;
    *(_QWORD *)(v29 + 32) = v22;
    return;
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20)
    goto LABEL_27;
LABEL_16:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
  if ((v20 & 0x8000000000000000) == 0)
  {
    v28 = a1;
    v21 = 0;
    v22 = v9;
    do
    {
      if ((v19 & 0xC000000000000001) != 0)
        v23 = (id)MEMORY[0x24263790C](v21, v19);
      else
        v23 = *(id *)(v19 + 8 * v21 + 32);
      v24 = v23;
      v25 = Int.init(truncating:)();

      v27 = *(_QWORD *)(v22 + 16);
      v26 = *(_QWORD *)(v22 + 24);
      if (v27 >= v26 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      ++v21;
      *(_QWORD *)(v22 + 16) = v27 + 1;
      *(_QWORD *)(v22 + 8 * v27 + 32) = v25;
    }
    while (v20 != v21);
    swift_bridgeObjectRelease();

    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
}

uint64_t specialized PinchCancellation.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  HandsKitConfig *v10;
  __int128 v11;
  NSString *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _OWORD v17[2];
  uint64_t v18;

  v2 = v1;
  *(_QWORD *)(v2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v2 + 24) = 0;
  v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v4 + 16) = 2;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v5 + 16) = 3;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v2 + 72) = v4;
  *(_QWORD *)(v2 + 80) = v5;
  *(_DWORD *)(v2 + 95) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 100) = 1065353216;
  *(_BYTE *)(v2 + 128) = 2;
  v6 = a1;
  v7 = specialized PinchCancellation.EnabledModules.init(_:)(v6);
  v9 = v8;

  *(_BYTE *)(v2 + 112) = v7 & 1;
  *(_BYTE *)(v2 + 113) = BYTE1(v7) & 1;
  *(_BYTE *)(v2 + 114) = BYTE2(v7) & 1;
  *(_QWORD *)(v2 + 120) = v9;
  v10 = (HandsKitConfig *)v6;
  specialized PinchCancellation.ThresholdConfig.init(_:)(v10, (uint64_t)v17);
  v11 = v17[1];
  *(_OWORD *)(v2 + 32) = v17[0];
  *(_OWORD *)(v2 + 48) = v11;
  *(_QWORD *)(v2 + 64) = v18;
  *(_BYTE *)(v2 + 128) = -[HandsKitConfig SerializeInternalData](v10, sel_SerializeInternalData);
  v12 = -[HandsKitConfig PinchCancellationModelName](v10, sel_PinchCancellationModelName);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  LODWORD(v12) = -[HandsKitConfig AllowInternalModel](v10, sel_AllowInternalModel);
  type metadata accessor for PinchCancellationModel();
  swift_allocObject();
  *(_QWORD *)(v2 + 24) = PinchCancellationModel.init(_:_:)(v13, v15, (int)v12);
  swift_release();
  PinchCancellation.initializeModules(_:)(v10);
  return v2;
}

char *specialized PinchCancellation.getFeatureVector(_:)(char *result)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;

  if ((result[280] & 1) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((result[236] & 1) != 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v1 = *((_DWORD *)result + 69);
  v2 = *((_DWORD *)result + 57);
  v3 = *((_DWORD *)result + 58);
  v5 = *((_DWORD *)result + 54);
  v4 = *((_DWORD *)result + 55);
  v6 = *((_DWORD *)result + 56);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 6, 1, MEMORY[0x24BEE4AF8]);
  v9 = *((_QWORD *)v7 + 2);
  v8 = *((_QWORD *)v7 + 3);
  v10 = v8 >> 1;
  v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v7);
    v8 = *((_QWORD *)v7 + 3);
    v10 = v8 >> 1;
  }
  *((_QWORD *)v7 + 2) = v11;
  *(_DWORD *)&v7[4 * v9 + 32] = v1;
  v12 = v9 + 2;
  if (v10 < (uint64_t)(v9 + 2))
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 2, 1, v7);
  *((_QWORD *)v7 + 2) = v12;
  *(_DWORD *)&v7[4 * v11 + 32] = v3;
  v13 = *((_QWORD *)v7 + 3);
  v14 = v9 + 3;
  if ((uint64_t)(v9 + 3) > (uint64_t)(v13 >> 1))
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v9 + 3, 1, v7);
  *((_QWORD *)v7 + 2) = v14;
  *(_DWORD *)&v7[4 * v12 + 32] = v5;
  v15 = *((_QWORD *)v7 + 3);
  v16 = v9 + 4;
  if ((uint64_t)(v9 + 4) > (uint64_t)(v15 >> 1))
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v9 + 4, 1, v7);
  *((_QWORD *)v7 + 2) = v16;
  *(_DWORD *)&v7[4 * v14 + 32] = v4;
  v17 = *((_QWORD *)v7 + 3);
  v18 = v9 + 5;
  if ((uint64_t)(v9 + 5) > (uint64_t)(v17 >> 1))
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v9 + 5, 1, v7);
  *((_QWORD *)v7 + 2) = v18;
  *(_DWORD *)&v7[4 * v16 + 32] = v6;
  v19 = *((_QWORD *)v7 + 3);
  if ((uint64_t)(v9 + 6) > (uint64_t)(v19 >> 1))
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v9 + 6, 1, v7);
  *((_QWORD *)v7 + 2) = v9 + 6;
  *(_DWORD *)&v7[4 * v18 + 32] = v2;
  v21 = v7;
  v20 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v20);
  return v21;
}

uint64_t outlined init with take of (key: Int, value: PinchCancellationModule)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: PinchCancellationModule)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized PinchCancellation.setBreakReason(_:_:)(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = type metadata accessor for HandDescriptor();
  v5 = (uint64_t *)(a1 + *(int *)(result + 108));
  v6 = *v5;
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  v7 = 1 << a2;
  if (a2 >= 0x40)
    v7 = 0;
  *v5 = v6 | v7;
  *((_BYTE *)v5 + 8) = 0;
  return result;
}

uint64_t PipelineMapper.updateMaps(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  _QWORD *v72;
  uint64_t v73;

  v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized Set.init<A>(_:)(v4);
  if (*(_QWORD *)(v5 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
  {
    v73 = a1;
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v5);
    v6 = a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    v6 = specialized _NativeSet.subtracting<A>(_:)(v5, a1);
  }
  if (*(_QWORD *)(a1 + 16) <= *(_QWORD *)(v5 + 16) >> 3)
  {
    v73 = v5;
    specialized Set._subtract<A>(_:)(a1);
  }
  else
  {
    v5 = specialized _NativeSet.subtracting<A>(_:)(a1, v5);
  }
  v7 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  v69 = v6;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) >= *(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  v8 = 0;
  v9 = v5 + 56;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v5 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v8 << 6);
LABEL_29:
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    swift_beginAccess();
    v20 = *v3;
    if (!*(_QWORD *)(*v3 + 16))
      goto LABEL_103;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
    if ((v22 & 1) == 0)
      goto LABEL_103;
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
    swift_endAccess();
    swift_beginAccess();
    specialized Set._Variant.insert(_:)((uint64_t *)&v72, v23);
    swift_endAccess();
    swift_beginAccess();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
    if ((v25 & 1) != 0)
    {
      v26 = v24;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v28 = *v3;
      v72 = (_QWORD *)*v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v28 = (uint64_t)v72;
      }
      specialized _NativeDictionary._delete(at:)(v26, v28);
      *v3 = v28;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
  }
  v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if (v16 >= v13)
    goto LABEL_35;
  v17 = *(_QWORD *)(v9 + 8 * v16);
  ++v8;
  if (v17)
    goto LABEL_28;
  v8 = v16 + 1;
  if (v16 + 1 >= v13)
    goto LABEL_35;
  v17 = *(_QWORD *)(v9 + 8 * v8);
  if (v17)
    goto LABEL_28;
  v8 = v16 + 2;
  if (v16 + 2 >= v13)
    goto LABEL_35;
  v17 = *(_QWORD *)(v9 + 8 * v8);
  if (v17)
  {
LABEL_28:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_29;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_35;
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_28;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_102;
    if (v8 >= v13)
      break;
    v17 = *(_QWORD *)(v9 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_28;
  }
LABEL_35:
  swift_release();
  v6 = v69;
LABEL_36:
  v29 = 0;
  v70 = v6 + 56;
  v30 = 1 << *(_BYTE *)(v6 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & *(_QWORD *)(v6 + 56);
  v71 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v34 = v33 | (v29 << 6);
      goto LABEL_56;
    }
    v35 = v29 + 1;
    if (__OFADD__(v29, 1))
      goto LABEL_98;
    if (v35 >= v71)
      return swift_release();
    v36 = *(_QWORD *)(v70 + 8 * v35);
    ++v29;
    if (!v36)
    {
      v29 = v35 + 1;
      if (v35 + 1 >= v71)
        return swift_release();
      v36 = *(_QWORD *)(v70 + 8 * v29);
      if (!v36)
      {
        v29 = v35 + 2;
        if (v35 + 2 >= v71)
          return swift_release();
        v36 = *(_QWORD *)(v70 + 8 * v29);
        if (!v36)
          break;
      }
    }
LABEL_55:
    v32 = (v36 - 1) & v36;
    v34 = __clz(__rbit64(v36)) + (v29 << 6);
LABEL_56:
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v34);
    swift_beginAccess();
    if (*(_QWORD *)(*v3 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v38);
      if ((v39 & 1) != 0)
      {
        swift_endAccess();
        continue;
      }
    }
    swift_endAccess();
    if (*(_QWORD *)(*v7 + 16))
    {
      swift_beginAccess();
      v40 = *v7;
      if (!*(_QWORD *)(*v7 + 16))
        goto LABEL_104;
      v41 = *(_QWORD *)(v40 + 56);
      if (v41)
      {
        v42 = 0;
        goto LABEL_62;
      }
      v59 = *(unsigned __int8 *)(v40 + 32);
      v60 = v59 & 0x3F;
      v43 = 1 << v59;
      if (v60 >= 7)
      {
        v41 = *(_QWORD *)(v40 + 64);
        if (v41)
        {
          v42 = 1;
          goto LABEL_62;
        }
        if (v60 >= 8)
        {
          v41 = *(_QWORD *)(v40 + 72);
          if (v41)
          {
            v42 = 2;
LABEL_62:
            v43 = __clz(__rbit64(v41)) + (v42 << 6);
          }
          else
          {
            v61 = 0;
            v62 = (unint64_t)(v43 + 63) >> 6;
            if (v62 <= 3)
              v62 = 3;
            v63 = v62 - 3;
            while (v63 != v61)
            {
              v41 = *(_QWORD *)(v40 + 80 + 8 * v61++);
              if (v41)
              {
                v42 = v61 + 2;
                goto LABEL_62;
              }
            }
          }
        }
      }
      v44 = *(_DWORD *)(v40 + 36);
      v45 = swift_isUniquelyReferenced_nonNull_native();
      if (v43 < 0 || (v46 = *v7, v43 >= 1 << *(_BYTE *)(*v7 + 32)))
      {
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      if (((*(_QWORD *)(v46 + (((unint64_t)v43 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v43) & 1) == 0)
        goto LABEL_95;
      if (v44 != *(_DWORD *)(v46 + 36))
        goto LABEL_96;
      v72 = (_QWORD *)*v7;
      *v7 = 0x8000000000000000;
      if ((v45 & 1) == 0)
      {
        specialized _NativeSet.copy()();
        v46 = (uint64_t)v72;
      }
      v47 = *(_QWORD *)(*(_QWORD *)(v46 + 48) + 8 * v43);
      specialized _NativeSet._delete(at:)(v43);
      *v7 = (uint64_t)v72;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_beginAccess();
      v48 = swift_isUniquelyReferenced_nonNull_native();
      v72 = (_QWORD *)*v3;
      v49 = (uint64_t)v72;
      *v3 = 0x8000000000000000;
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
      v52 = *(_QWORD *)(v49 + 16);
      v53 = (v50 & 1) == 0;
      v54 = v52 + v53;
      if (__OFADD__(v52, v53))
        goto LABEL_97;
      v55 = v50;
      if (*(_QWORD *)(v49 + 24) >= v54)
      {
        if ((v48 & 1) != 0)
        {
          v58 = v72;
          if ((v50 & 1) == 0)
            goto LABEL_90;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v58 = v72;
          if ((v55 & 1) == 0)
            goto LABEL_90;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, v48);
        v56 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
        if ((v55 & 1) != (v57 & 1))
          goto LABEL_105;
        v51 = v56;
        v58 = v72;
        if ((v55 & 1) == 0)
        {
LABEL_90:
          v58[(v51 >> 6) + 8] |= 1 << v51;
          v64 = 8 * v51;
          *(_QWORD *)(v58[6] + v64) = v38;
          *(_QWORD *)(v58[7] + v64) = v47;
          v65 = v58[2];
          v66 = __OFADD__(v65, 1);
          v67 = v65 + 1;
          if (v66)
            goto LABEL_99;
          v58[2] = v67;
          goto LABEL_92;
        }
      }
      *(_QWORD *)(v58[7] + 8 * v51) = v47;
LABEL_92:
      *v3 = (uint64_t)v58;
      swift_bridgeObjectRelease();
      swift_endAccess();
      v6 = v69;
      continue;
    }
  }
  v37 = v35 + 3;
  if (v37 >= v71)
    return swift_release();
  v36 = *(_QWORD *)(v70 + 8 * v37);
  if (v36)
  {
    v29 = v37;
    goto LABEL_55;
  }
  while (1)
  {
    v29 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v29 >= v71)
      return swift_release();
    v36 = *(_QWORD *)(v70 + 8 * v29);
    ++v37;
    if (v36)
      goto LABEL_55;
  }
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  swift_endAccess();
  __break(1u);
LABEL_104:
  swift_endAccess();
  __break(1u);
LABEL_105:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t PipelineMapper.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4B08];
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4B00];
  swift_beginAccess();
  *(_QWORD *)(v0 + 16) = v1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = v2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(&v4, 0);
  specialized Set._Variant.insert(_:)(&v4, 1);
  swift_endAccess();
  return v0;
}

uint64_t PipelineMapper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PipelineMapper()
{
  return objc_opt_self();
}

uint64_t specialized PipelineMapper.findMapping(_:_:)(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  _BYTE v55[12];
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;

  v4 = type metadata accessor for HandDescriptor();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = &v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = &v55[-v11];
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x24BEE4AF8];
  v57 = a1;
  if (v13)
  {
    v56 = a2;
    v61 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v59 = v5;
    v16 = *(_QWORD *)(v5 + 72);
    v14 = v61;
    v17 = v13;
    do
    {
      outlined init with copy of HandDescriptor(v15, (uint64_t)v12);
      v18 = *((_QWORD *)v12 + 18);
      outlined destroy of HandDescriptor((uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v61;
      }
      v20 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v14 = v61;
      }
      *(_QWORD *)(v14 + 16) = v20 + 1;
      *(_QWORD *)(v14 + 8 * v20 + 32) = v18;
      v15 += v16;
      --v17;
    }
    while (v17);
    v5 = v59;
    LOBYTE(a2) = v56;
  }
  v21 = specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  v22 = v58;
  PipelineMapper.updateMaps(_:)(v21);
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0
    || (v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]),
        v24 = (_QWORD *)(v22 + 24),
        swift_beginAccess(),
        *(_QWORD *)(v22 + 24) = v23,
        swift_bridgeObjectRelease(),
        !v13))
  {
LABEL_39:
    swift_beginAccess();
    return *(_QWORD *)(v22 + 24);
  }
  v25 = v57 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v59 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of HandDescriptor(v25, (uint64_t)v8);
    v26 = *((_QWORD *)v8 + 18);
    if (v8[136] == 1)
    {
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v60 = (_QWORD *)*v24;
      v28 = v60;
      *v24 = 0x8000000000000000;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      v31 = v28[2];
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
        goto LABEL_41;
      v34 = v29;
      if (v28[3] >= v33)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v37 = v60;
          if ((v29 & 1) == 0)
            goto LABEL_27;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v37 = v60;
          if ((v34 & 1) == 0)
            goto LABEL_27;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
        if ((v34 & 1) != (v36 & 1))
          goto LABEL_44;
        v30 = v35;
        v37 = v60;
        if ((v34 & 1) == 0)
        {
LABEL_27:
          v37[(v30 >> 6) + 8] |= 1 << v30;
          v48 = 8 * v30;
          *(_QWORD *)(v37[6] + v48) = v26;
          *(_QWORD *)(v37[7] + v48) = 1;
          v49 = v37[2];
          v50 = __OFADD__(v49, 1);
          v51 = v49 + 1;
          if (v50)
            goto LABEL_42;
          goto LABEL_37;
        }
      }
      *(_QWORD *)(v37[7] + 8 * v30) = 1;
      goto LABEL_13;
    }
    swift_beginAccess();
    v38 = swift_isUniquelyReferenced_nonNull_native();
    v60 = (_QWORD *)*v24;
    v39 = v60;
    *v24 = 0x8000000000000000;
    v41 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
    v42 = v39[2];
    v43 = (v40 & 1) == 0;
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      break;
    v45 = v40;
    if (v39[3] >= v44)
    {
      if ((v38 & 1) != 0)
      {
        v37 = v60;
        if ((v40 & 1) == 0)
          goto LABEL_36;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v37 = v60;
        if ((v45 & 1) == 0)
          goto LABEL_36;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, v38);
      v46 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      if ((v45 & 1) != (v47 & 1))
        goto LABEL_44;
      v41 = v46;
      v37 = v60;
      if ((v45 & 1) == 0)
      {
LABEL_36:
        v37[(v41 >> 6) + 8] |= 1 << v41;
        v52 = 8 * v41;
        *(_QWORD *)(v37[6] + v52) = v26;
        *(_QWORD *)(v37[7] + v52) = 0;
        v53 = v37[2];
        v50 = __OFADD__(v53, 1);
        v51 = v53 + 1;
        if (v50)
          goto LABEL_43;
LABEL_37:
        v37[2] = v51;
        goto LABEL_13;
      }
    }
    *(_QWORD *)(v37[7] + 8 * v41) = 0;
LABEL_13:
    *v24 = v37;
    swift_bridgeObjectRelease();
    swift_endAccess();
    outlined destroy of HandDescriptor((uint64_t)v8);
    v25 += v59;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      v22 = v58;
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Float __swiftcall PinchBreakRangeCalculator.updatePinchScoreWithBreakRange(_:_:_:_:)(Swift::Int a1, Swift::OpaquePointer a2, Swift::Float result, Swift::Float a4)
{
  uint64_t v4;
  float v5;
  Swift::Int v6;
  float v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  Swift::Int v11;
  float v12;
  float *v13;
  Swift::Int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  if (*(_BYTE *)(v4 + 16) != 1)
    return a4;
  v5 = 0.0;
  if (*(float *)(v4 + 20) <= a4)
    return (float)(1.0 - v5) * a4;
  v6 = *((_QWORD *)a2._rawValue + 2);
  if (!v6)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v7 = *((float *)a2._rawValue + 8);
  if (v7 <= a4)
    return (float)(1.0 - v5) * a4;
  v8 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v8 >= 2)
  {
    if (a1 != 3)
    {
      v9 = a1 - 4;
      v10 = a1 - 1;
      while (1)
      {
        if (a1 - 2 >= v6)
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if (a1 - 3 > v6)
          goto LABEL_29;
        v11 = v10 - 1;
        v12 = *((float *)a2._rawValue + v10 + 7);
        if (v10 == 3)
          break;
        if (v10 - 3 >= v10 - 2)
          goto LABEL_30;
        v13 = (float *)((char *)a2._rawValue + 36);
        v14 = v9;
        v15 = *((float *)a2._rawValue + 8);
        do
        {
          v16 = *v13++;
          v17 = v16;
          if (v16 < v15)
            v15 = v17;
          --v14;
        }
        while (v14);
        v12 = v12 - v15;
        if (v12 > v5)
          v5 = v12;
        --v9;
        v10 = v11;
        if (v8 < v11)
        {
          __break(1u);
          break;
        }
      }
      v18 = v12 - v7;
      if (v18 > v5)
        v5 = v18;
    }
    v19 = (float)(v7 - a4) + v5;
    if (v5 > v19)
      v19 = v5;
    v5 = fminf((float)(1.0 - (float)(result * result)) * v19, 1.0);
    return (float)(1.0 - v5) * a4;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t PinchBreakRangeCalculator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchBreakRangeCalculator()
{
  return objc_opt_self();
}

uint64_t PinchAcceptorRepeatedPinch.process(_:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  float v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 *v8;
  float v9;
  __int128 *v10;
  float v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t result;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  float32x4_t v79;
  float32x4_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  float v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  _BYTE v109[7];
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  float v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  float v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD v152[2];
  float32x4_t v153[4];
  int v154;

  v2 = v1;
  v4 = *((float *)a1 + 34);
  v5 = *((_DWORD *)a1 + 35);
  v6 = *((_QWORD *)a1 + 19);
  v87 = *((_BYTE *)a1 + 160);
  v7 = (_DWORD *)((char *)a1 + 161);
  v88 = *((_QWORD *)a1 + 21);
  v89 = *((_QWORD *)a1 + 18);
  v86 = *((_QWORD *)a1 + 22);
  v8 = (__int128 *)((char *)a1 + 184);
  v9 = *((float *)a1 + 92);
  v10 = (__int128 *)((char *)a1 + 372);
  v11 = *((float *)a1 + 135);
  v90 = a1 + 34;
  v91 = *((_QWORD *)a1 + 70);
  v92 = *((_DWORD *)a1 + 142);
  v94 = *((_DWORD *)a1 + 143);
  v93 = *((_QWORD *)a1 + 72);
  v12 = (__int128 *)((char *)a1 + 584);
  if (*(_BYTE *)(v1 + 49) == 1)
  {
    swift_beginAccess();
    if ((*(_BYTE *)(v1 + 80) & 1) == 0 && v9 < (float)(1.0 - v11))
      *(_BYTE *)(v1 + 49) = 0;
  }
  v13 = *(_QWORD *)(v1 + 56);
  swift_beginAccess();
  v14 = a1[6];
  v102 = a1[7];
  v15 = a1[3];
  v97 = a1[2];
  v98 = v15;
  v16 = a1[4];
  v100 = a1[5];
  v101 = v14;
  v99 = v16;
  v17 = a1[1];
  v95 = *a1;
  v96 = v17;
  v18 = v8[8];
  v19 = v8[10];
  v121 = v8[9];
  v122 = v19;
  v20 = v8[6];
  v21 = v8[7];
  v22 = v8[4];
  v117 = v8[5];
  v118 = v20;
  v23 = *(unsigned __int8 *)(v2 + 64);
  v103 = *((_QWORD *)a1 + 16);
  v104 = v4;
  v105 = v5;
  v106 = v89;
  v107 = v6;
  v108 = v87;
  *(_DWORD *)v109 = *v7;
  *(_DWORD *)&v109[3] = *(_DWORD *)((char *)v7 + 3);
  v110 = v88;
  v111 = v86;
  v119 = v21;
  v120 = v18;
  v123 = *((_QWORD *)v8 + 22);
  v116 = v22;
  v24 = v8[1];
  v112 = *v8;
  v113 = v24;
  v25 = v8[3];
  v114 = v8[2];
  v115 = v25;
  v124 = v9;
  v26 = v10[9];
  v133 = v10[8];
  v134 = v26;
  v135 = *((_QWORD *)v10 + 20);
  v27 = v10[5];
  v129 = v10[4];
  v130 = v27;
  v28 = v10[7];
  v131 = v10[6];
  v132 = v28;
  v29 = v10[1];
  v125 = *v10;
  v126 = v29;
  v30 = v10[3];
  v127 = v10[2];
  v128 = v30;
  v136 = v11;
  v137 = *v90;
  v138 = v91;
  v139 = v92;
  v140 = v94;
  v141 = v93;
  v31 = v12[9];
  v150 = v12[8];
  v151 = v31;
  v152[0] = v12[10];
  *(_OWORD *)((char *)v152 + 14) = *(__int128 *)((char *)v12 + 174);
  v32 = v12[5];
  v146 = v12[4];
  v147 = v32;
  v33 = v12[7];
  v148 = v12[6];
  v149 = v33;
  v34 = v12[1];
  v142 = *v12;
  v143 = v34;
  v35 = v12[3];
  v144 = v12[2];
  v145 = v35;
  result = PinchCandidateProcessor.detectCandidateMake(_:_:)(v23, (uint64_t)&v95);
  if ((result & 1) != 0)
  {
    *(_BYTE *)(v2 + 64) = 1;
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    PichAcceptorWithMakeCandidate.resetPinchBuffer()();
    v37 = a1[6];
    v102 = a1[7];
    v38 = a1[3];
    v97 = a1[2];
    v98 = v38;
    v39 = a1[4];
    v100 = a1[5];
    v101 = v37;
    v99 = v39;
    v40 = a1[1];
    v95 = *a1;
    v96 = v40;
    v41 = v8[8];
    v42 = v8[10];
    v121 = v8[9];
    v122 = v42;
    v43 = v8[6];
    v44 = v8[7];
    v45 = v8[4];
    v117 = v8[5];
    v118 = v43;
    *(_BYTE *)(v2 + 80) = 1;
    v103 = *((_QWORD *)a1 + 16);
    v104 = v4;
    v105 = v5;
    v106 = v89;
    v107 = v6;
    v108 = v87;
    *(_DWORD *)v109 = *v7;
    *(_DWORD *)&v109[3] = *(_DWORD *)((char *)v7 + 3);
    v110 = v88;
    v111 = v86;
    v119 = v44;
    v120 = v41;
    v123 = *((_QWORD *)v8 + 22);
    v116 = v45;
    v46 = v8[1];
    v112 = *v8;
    v113 = v46;
    v47 = v8[3];
    v114 = v8[2];
    v115 = v47;
    v124 = v9;
    v48 = v10[9];
    v133 = v10[8];
    v134 = v48;
    v135 = *((_QWORD *)v10 + 20);
    v49 = v10[5];
    v129 = v10[4];
    v130 = v49;
    v50 = v10[7];
    v131 = v10[6];
    v132 = v50;
    v51 = v10[1];
    v125 = *v10;
    v126 = v51;
    v52 = v10[3];
    v127 = v10[2];
    v128 = v52;
    v136 = v11;
    v137 = *v90;
    v138 = v91;
    v139 = v92;
    v140 = v94;
    v141 = v93;
    v53 = v12[9];
    v150 = v12[8];
    v151 = v53;
    v152[0] = v12[10];
    *(_OWORD *)((char *)v152 + 14) = *(__int128 *)((char *)v12 + 174);
    v54 = v12[5];
    v146 = v12[4];
    v147 = v54;
    v55 = v12[7];
    v148 = v12[6];
    v149 = v55;
    v56 = v12[1];
    v142 = *v12;
    v143 = v56;
    v57 = v12[3];
    v144 = v12[2];
    v145 = v57;
    PinchCandidateProcessor.assignMakeFrameCandidate(_:)((uint64_t)&v95);
    v58 = a1[6];
    v102 = a1[7];
    v59 = a1[3];
    v97 = a1[2];
    v98 = v59;
    v60 = a1[4];
    v100 = a1[5];
    v101 = v58;
    v99 = v60;
    v61 = a1[1];
    v95 = *a1;
    v96 = v61;
    v104 = v4;
    v105 = v5;
    v62 = v8[8];
    v63 = v8[10];
    v121 = v8[9];
    v122 = v63;
    v64 = v8[6];
    v65 = v8[7];
    v66 = v8[4];
    v117 = v8[5];
    v118 = v64;
    *(_BYTE *)(v2 + 49) = 1;
    v103 = *((_QWORD *)a1 + 16);
    v106 = v89;
    v107 = v6;
    v108 = v87;
    *(_DWORD *)v109 = *v7;
    *(_DWORD *)&v109[3] = *(_DWORD *)((char *)v7 + 3);
    v110 = v88;
    v111 = v86;
    v119 = v65;
    v120 = v62;
    v123 = *((_QWORD *)v8 + 22);
    v116 = v66;
    v67 = v8[1];
    v112 = *v8;
    v113 = v67;
    v68 = v8[3];
    v114 = v8[2];
    v115 = v68;
    v124 = v9;
    v69 = v10[9];
    v133 = v10[8];
    v134 = v69;
    v135 = *((_QWORD *)v10 + 20);
    v70 = v10[5];
    v129 = v10[4];
    v130 = v70;
    v71 = v10[7];
    v131 = v10[6];
    v132 = v71;
    v72 = v10[1];
    v125 = *v10;
    v126 = v72;
    v73 = v10[3];
    v127 = v10[2];
    v128 = v73;
    v136 = v11;
    v137 = *v90;
    v138 = v91;
    v139 = v92;
    v140 = v94;
    v141 = v93;
    v74 = v12[9];
    v150 = v12[8];
    v151 = v74;
    v152[0] = v12[10];
    *(_OWORD *)((char *)v152 + 14) = *(__int128 *)((char *)v12 + 174);
    v75 = v12[5];
    v146 = v12[4];
    v147 = v75;
    v76 = v12[7];
    v148 = v12[6];
    v149 = v76;
    v77 = v12[1];
    v142 = *v12;
    v143 = v77;
    v78 = v12[3];
    v144 = v12[2];
    v145 = v78;
    v79 = *(float32x4_t *)(v2 + 192);
    v153[2] = *(float32x4_t *)(v2 + 176);
    v153[3] = v79;
    v154 = *(_DWORD *)(v2 + 208);
    v80 = *(float32x4_t *)(v2 + 160);
    v153[0] = *(float32x4_t *)(v2 + 144);
    v153[1] = v80;
    result = PinchAcceptorRepeatedPinch.checkPicnhRecoveryConditionsWithPrevCandidate(_:_:_:)((uint64_t)&v95, v153, *(_QWORD *)(v2 + 212), *(_QWORD *)(v2 + 220), *(_QWORD *)(v2 + 228));
    if (result == 14)
      *(_WORD *)(v2 + 33) = 257;
  }
  else
  {
    if (v4 < (float)(1.0 - v11))
      v81 = v23;
    else
      v81 = 0;
    if (v81 == 1)
    {
      *(_BYTE *)(v2 + 64) = 0;
      *(_QWORD *)(v2 + 88) = 0;
      v82 = *(_OWORD *)(v13 + 112);
      v83 = *(_OWORD *)(v13 + 128);
      v84 = *(_OWORD *)(v13 + 144);
      v85 = *(_DWORD *)(v13 + 160);
      *(_OWORD *)(v2 + 144) = *(_OWORD *)(v13 + 96);
      *(_OWORD *)(v2 + 160) = v82;
      *(_OWORD *)(v2 + 176) = v83;
      *(_OWORD *)(v2 + 192) = v84;
      *(_DWORD *)(v2 + 208) = v85;
      *(_QWORD *)(v2 + 212) = v91;
      *(_DWORD *)(v2 + 220) = v92;
      *(_DWORD *)(v2 + 224) = v94;
      *(_QWORD *)(v2 + 228) = v93;
    }
  }
  return result;
}

uint64_t PinchAcceptorRepeatedPinch.checkPicnhRecoveryConditionsWithPrevCandidate(_:_:_:)(uint64_t a1, float32x4_t *a2, CMTimeValue a3, uint64_t a4, CMTimeEpoch a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  CMTimeValue v12;
  CMTimeScale v13;
  CMTimeFlags v14;
  CMTimeEpoch v15;
  double Seconds;
  float v17;
  CMTime time;

  v6 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(v5 + 56) + 96), *a2);
  v7 = vmulq_f32(v6, v6);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]) > 0.05)return 13;
  v12 = *(_QWORD *)(a1 + 560);
  v13 = *(_DWORD *)(a1 + 568);
  v14 = *(_DWORD *)(a1 + 572);
  v15 = *(_QWORD *)(a1 + 576);
  if ((CMTime.isValid.getter() & 1) == 0)
    return 13;
  if ((CMTime.isValid.getter() & 1) == 0)
    return 13;
  time.value = v12;
  time.timescale = v13;
  time.flags = v14;
  time.epoch = v15;
  Seconds = CMTimeGetSeconds(&time);
  time.value = a3;
  *(_QWORD *)&time.timescale = a4;
  time.epoch = a5;
  v17 = Seconds - CMTimeGetSeconds(&time);
  if (fabsf(v17) > 3.0)
    return 13;
  if (specialized static PinchGestureHelper.similarity(_:_:)(*(float32x4_t *)(*(_QWORD *)(v5 + 56) + 144), a2[3]) > *(float *)(v5 + 128))
    return 14;
  return 7;
}

uint64_t PinchAcceptorRepeatedPinch.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorRepeatedPinch()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PinchAcceptorRepeatedPinch.ThresholdConfig()
{
  return &type metadata for PinchAcceptorRepeatedPinch.ThresholdConfig;
}

uint64_t destroy for PostProcessingMetaData(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 152);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for PostProcessingMetaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = (_OWORD *)(a1 + 128);
  v8 = a2 + 128;
  v9 = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  if (v9)
  {
    *v7 = *(_OWORD *)v8;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v9;
    *(_QWORD *)(a1 + 160) = v10;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v11 = *(_OWORD *)(v8 + 16);
    *v7 = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 144) = v11;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(v8 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for PostProcessingMetaData(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v4 = (_OWORD *)(a1 + 128);
  v5 = (_OWORD *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of ObjectInteractionResultsByHand(a1 + 128);
      v8 = *(_QWORD *)(a2 + 160);
      v9 = *(_OWORD *)(a2 + 144);
      *v4 = *v5;
      *(_OWORD *)(a1 + 144) = v9;
      *(_QWORD *)(a1 + 160) = v8;
    }
  }
  else
  {
    v7 = *v5;
    if (v6)
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *v4 = v7;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *v4 = v7;
      *(_OWORD *)(a1 + 144) = v10;
    }
  }
  return a1;
}

__n128 __swift_memcpy168_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for PostProcessingMetaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  if (!*(_QWORD *)(a1 + 152))
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 152);
  if (!v7)
  {
    outlined destroy of ObjectInteractionResultsByHand(a1 + 128);
LABEL_5:
    v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v8;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    return a1;
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PostProcessingMetaData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostProcessingMetaData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PostProcessingMetaData()
{
  return &type metadata for PostProcessingMetaData;
}

uint64_t specialized static PostProcessingMetaData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)(a1 + 8), *(float32x4_t *)(a2 + 8))), 0xFuLL))) & 1) != 0&& *(float *)(a1 + 24) == *(float *)(a2 + 24)&& *(_QWORD *)a1 == *(_QWORD *)a2&& *(float *)(a1 + 28) == *(float *)(a2 + 28))
  {
    v11 = *(float32x4_t *)(a1 + 64);
    v10 = *(float32x4_t *)(a1 + 80);
    v12 = *(float32x4_t *)(a1 + 112);
    v13 = *(float32x4_t *)(a1 + 96);
    v6 = *(float32x4_t *)(a2 + 80);
    v7 = *(float32x4_t *)(a2 + 64);
    v8 = *(float32x4_t *)(a2 + 112);
    v9 = *(float32x4_t *)(a2 + 96);
    v4 = *(_QWORD **)(a2 + 56);
    v5 = *(_QWORD **)(a1 + 56);
    if ((static CMTime.!= infix(_:_:)() & 1) != 0 || !specialized static Array<A>.== infix(_:_:)(v5, v4))
      return 0;
    else
      return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v10, v6), (int8x16_t)vceqq_f32(v11, v7)), vandq_s8((int8x16_t)vceqq_f32(v13, v9), (int8x16_t)vceqq_f32(v12, v8)))) >> 31;
  }
  return result;
}

Swift::Void __swiftcall MiddleDoubleTapRecognition.reset()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  unint64_t v3;
  _QWORD *v4;

  v1 = v0;
  swift_retain();
  DoubleTapStateMachine.reset()();
  swift_release();
  v2 = objc_msgSend(*(id *)(v0 + 48), sel_MiddleDoubleTapSuppressors);
  type metadata accessor for NSNumber();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  v4 = specialized Sequence.compactMap<A>(_:)(v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v1 + 40) = v4;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MiddleDoubleTapRecognition.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  HandsKitConfig *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  HandsKitConfig *v15;
  id v16;
  unint64_t v17;
  _QWORD *v18;
  _OWORD v19[10];

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 24);
  swift_retain();
  v5 = a1;
  specialized DoubleTapStateMachine.Config.init(_:)(v5, (double *)v19);

  v6 = v19[7];
  *(_OWORD *)(v4 + 112) = v19[6];
  *(_OWORD *)(v4 + 128) = v6;
  v7 = v19[9];
  *(_OWORD *)(v4 + 144) = v19[8];
  *(_OWORD *)(v4 + 160) = v7;
  v8 = v19[3];
  *(_OWORD *)(v4 + 48) = v19[2];
  *(_OWORD *)(v4 + 64) = v8;
  v9 = v19[5];
  *(_OWORD *)(v4 + 80) = v19[4];
  *(_OWORD *)(v4 + 96) = v9;
  v10 = v19[1];
  *(_OWORD *)(v4 + 16) = v19[0];
  *(_OWORD *)(v4 + 32) = v10;
  v11 = -[HandsKitConfig MiddleDoubleTapNoiseWindowSize](v5, sel_MiddleDoubleTapNoiseWindowSize);
  type metadata accessor for NoiseEstimator();
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v4 + 336) = v12;
  swift_release();
  DoubleTapStateMachine.reset()();
  swift_release();
  v14 = *(void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = v5;
  v15 = v5;

  swift_retain();
  DoubleTapStateMachine.reset()();
  swift_release();
  v16 = objc_msgSend(*(id *)(v2 + 48), sel_MiddleDoubleTapSuppressors);
  type metadata accessor for NSNumber();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  v18 = specialized Sequence.compactMap<A>(_:)(v17, v2);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v2 + 40) = v18;
  swift_bridgeObjectRelease();
}

void MiddleDoubleTapRecognition.process(_:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[24];
  double v72;

  v3 = v2;
  v6 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v14 = (char *)v56 - v13;
  if (*(_BYTE *)(v3 + 56) == 1)
  {
    v62 = v12;
    v15 = a2[57];
    v16 = (*(_BYTE *)(a1 + 136) & 1) == 0;
    v17 = a2[43];
    v20 = a2 + 44;
    v18 = a2[44];
    v19 = v20[1];
    v61 = v15;
    v60 = v16;
    Hands_trace_CBridge_0();
    v63 = v18;
    v64 = v17;
    CMTime.seconds.getter();
    v22 = v21;
    specialized HoverDistanceCalculator.calculate(withJoint:onHand:atTime:)(*(_QWORD *)(v3 + 16), a1, (uint64_t)v71, v21);
    swift_retain();
    v66 = DoubleTapStateMachine.update(withDistance:)((uint64_t)v71);
    swift_release();
    outlined init with copy of HandDescriptor(a1, (uint64_t)v14);
    v23 = *(_QWORD *)(v3 + 40);
    v24 = *(_QWORD *)(v23 + 16);
    v65 = v19;
    if (v24)
    {
      v57 = v9;
      v58 = a1;
      v59 = v3;
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + 176);
      v26 = (_QWORD *)(v23 + 32);
      v56[1] = v23;
      swift_bridgeObjectRetain();
      v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v30 = v26[3];
        v29 = v26[4];
        __swift_project_boxed_opaque_existential_1(v26, v30);
        (*(void (**)(BOOL, char *, unint64_t *, uint64_t, uint64_t, double))(v29 + 24))(v25 > 1, v14, &v67, v30, v29, v22);
        v31 = v26[3];
        v32 = v26[4];
        __swift_project_boxed_opaque_existential_1(v26, v31);
        if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 32))(v14, v31, v32) & 1) != 0)
        {
          v33 = v26[3];
          v34 = v26[4];
          __swift_project_boxed_opaque_existential_1(v26, v33);
          (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v34 + 8))(&v67, v33, v34);
          v35 = v67;
          v36 = (char)v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          v38 = v27[2];
          v37 = v27[3];
          if (v38 >= v37 >> 1)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v27);
          v27[2] = v38 + 1;
          v28 = &v27[2 * v38];
          v28[4] = v35;
          *((_BYTE *)v28 + 40) = v36;
        }
        v26 += 5;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      a1 = v58;
      v3 = v59;
      v9 = v57;
    }
    else
    {
      v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    outlined destroy of HandDescriptor((uint64_t)v14);
    v39 = v64;
    v40 = v66 && v27[2] == 0;
    v41 = v62;
    v42 = v63;
    *(_BYTE *)(a1 + 138) = v40;
    v43 = v72;
    v44 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + 176);
    v45 = a1 + *(int *)(v41 + 96);
    v46 = type metadata accessor for HandDescriptorInternal();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_QWORD *)(v45 + 144) = LODWORD(v43) | (unint64_t)(v44 << 32);
      *(_QWORD *)(v45 + 152) = v27;
      swift_bridgeObjectRetain_n();
      v39 = v64;
      swift_bridgeObjectRelease();
    }
    outlined init with copy of HandDescriptor(a1, (uint64_t)v9);
    v67 = __PAIR64__(v44, LODWORD(v43));
    v68 = v27;
    swift_bridgeObjectRetain();
    swift_retain();
    v47 = v44;
    v48 = v66;
    MiddleDoubleTapEventLogger.recordHandCursorEvent(withHand:withInternalData:withStateDetectionResult:atTime:)((uint64_t)v9, (uint64_t)&v67, v66, v39, v42);
    if (v48)
    {
      v67 = __PAIR64__(v47, LODWORD(v43));
      v68 = v27;
      MiddleDoubleTapEventLogger.recordCoreAnalytics(withHand:withInternalData:atTime:)((uint64_t)v9, (uint64_t)&v67);
    }
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of HandDescriptor((uint64_t)v9);
    v49 = v27[2];
    if (v49)
      goto LABEL_25;
    v50 = *(unsigned __int8 *)(a1 + 138);
    if (v50 == 2)
    {
      swift_bridgeObjectRelease();
      __break(1u);
      return;
    }
    if ((v50 & 1) != 0)
    {
LABEL_25:
      v51 = *(_QWORD *)(v3 + 40);
      v52 = *(_QWORD *)(v51 + 16);
      if (v52)
      {
        v53 = v51 + 32;
        swift_bridgeObjectRetain();
        do
        {
          outlined init with copy of Detection2DComputePipelineProtocol(v53, (uint64_t)&v67);
          v54 = v69;
          v55 = v70;
          __swift_project_boxed_opaque_existential_1(&v67, v69);
          (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v67);
          v53 += 40;
          --v52;
        }
        while (v52);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v49)
          goto LABEL_30;
      }
      else
      {
        swift_bridgeObjectRelease();
        if (!v49)
          goto LABEL_30;
      }
      swift_retain();
      DoubleTapStateMachine.reset()();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_30:
    Hands_trace_CBridge_0();
    swift_bridgeObjectRelease();
  }
}

uint64_t MiddleDoubleTapRecognition.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MiddleDoubleTapRecognition()
{
  return objc_opt_self();
}

void protocol witness for SingleHandProcessingPipeline.reset() in conformance MiddleDoubleTapRecognition()
{
  MiddleDoubleTapRecognition.reset()();
}

void protocol witness for SingleHandProcessingPipeline.reconfig(_:) in conformance MiddleDoubleTapRecognition(HandsKitConfig *a1)
{
  MiddleDoubleTapRecognition.reconfig(_:)(a1);
}

void protocol witness for SingleHandProcessingPipeline.process(_:_:) in conformance MiddleDoubleTapRecognition(uint64_t a1, _QWORD *a2)
{
  MiddleDoubleTapRecognition.process(_:_:)(a1, a2);
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17[2];
  uint64_t v18;

  v3 = v2;
  if (a1 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v18 = v3;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    for (i = 4; ; ++i)
    {
      v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24263790C](i - 4, a1) : *(id *)(a1 + 8 * i);
      v10 = v9;
      v3 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      *(_QWORD *)&v17[0] = objc_msgSend(v9, sel_integerValue);
      BYTE8(v17[0]) = *(_QWORD *)&v17[0] < 0xCuLL;
      v11 = *(id *)(a2 + 48);
      createMiddleDoubleTapSuppressor(suppressorId:config:)((uint64_t)v17, (uint64_t)&v15);

      if (v16)
      {
        outlined init with take of PinchCancellationModule(&v15, (uint64_t)v17);
        outlined init with take of PinchCancellationModule(v17, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        v13 = v7[2];
        v12 = v7[3];
        if (v13 >= v12 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v7);
        v7[2] = v13 + 1;
        outlined init with take of PinchCancellationModule(&v15, (uint64_t)&v7[5 * v13 + 4]);
      }
      else
      {
        outlined destroy of MiddleDoubleTapSuppressor?((uint64_t)&v15);
      }
      if (v3 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t specialized MiddleDoubleTapRecognition.init(_:_:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  _QWORD *v15;

  v3 = v2;
  *(_QWORD *)(v3 + 16) = 14;
  type metadata accessor for HoverDistanceCalculator();
  v6 = swift_allocObject();
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v7;
  *(_QWORD *)(v3 + 48) = objc_msgSend(objc_allocWithZone((Class)HandsKitConfig), sel_init);
  *(_BYTE *)(v3 + 56) = 0;
  type metadata accessor for MiddleDoubleTapEventLogger();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = v7;
  v8[4] = 30;
  *(_QWORD *)(v3 + 64) = v8;
  *(_QWORD *)(v3 + 32) = a2;
  swift_retain();
  swift_release();
  type metadata accessor for DoubleTapStateMachine();
  swift_allocObject();
  v9 = a1;
  v10 = specialized DoubleTapStateMachine.init(_:)(v9);

  *(_QWORD *)(v3 + 24) = v10;
  v11 = *(void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v9;
  v12 = v9;

  swift_retain();
  DoubleTapStateMachine.reset()();
  swift_release();
  v13 = objc_msgSend(*(id *)(v3 + 48), sel_MiddleDoubleTapSuppressors);
  type metadata accessor for NSNumber();
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  v15 = specialized Sequence.compactMap<A>(_:)(v14, v3);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v3 + 40) = v15;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t outlined destroy of MiddleDoubleTapSuppressor?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapSuppressor?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for GesturePipelineFactory()
{
  return objc_opt_self();
}

_QWORD *specialized static GesturePipelineFactory.makeStereoPlatformGesturePipeline(_:)(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  HandsKitConfig *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  HandsKitConfig *v11;
  uint64_t v12;
  uint64_t v13;
  HandsKitConfig *v14;
  uint64_t v15;
  uint64_t v16;
  HandsKitConfig *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  HandsKitConfig *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  HandsKitConfig *v27;
  id v28;
  _QWORD *v29;
  HandsKitConfig *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  type metadata accessor for GesturePipelineMapper();
  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = 0;
  v3 = a1;
  v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v4 + 16) = 2;
  *(_QWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 0;
  *(_QWORD *)(v2 + 24) = v4;
  type metadata accessor for PipelineMapper();
  swift_allocObject();
  *(_QWORD *)(v2 + 32) = PipelineMapper.init()();
  LOBYTE(a1) = objc_msgSend(v3, sel_EnableObjectInteractionState);

  *(_BYTE *)(v2 + 16) = (_BYTE)a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SingleHandProcessingPipeline>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = type metadata accessor for PinchPostprocessing();
  swift_allocObject();
  v7 = (HandsKitConfig *)v3;
  v8 = PinchPostprocessing.init(_:)(v7);
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = &protocol witness table for PinchPostprocessing;
  *(_QWORD *)(v5 + 32) = v8;
  type metadata accessor for HoverDistanceCalculator();
  v9 = swift_allocObject();
  v10 = type metadata accessor for MiddleDoubleTapRecognition();
  swift_allocObject();
  v11 = v7;
  v12 = specialized MiddleDoubleTapRecognition.init(_:_:)(v11, v9);

  swift_release();
  *(_QWORD *)(v5 + 96) = v10;
  *(_QWORD *)(v5 + 104) = &protocol witness table for MiddleDoubleTapRecognition;
  *(_QWORD *)(v5 + 72) = v12;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23D9A7050;
  swift_allocObject();
  v14 = v11;
  v15 = PinchPostprocessing.init(_:)(v14);
  *(_QWORD *)(v13 + 56) = v6;
  *(_QWORD *)(v13 + 64) = &protocol witness table for PinchPostprocessing;
  *(_QWORD *)(v13 + 32) = v15;
  v16 = swift_allocObject();
  swift_allocObject();
  v17 = v14;
  v18 = specialized MiddleDoubleTapRecognition.init(_:_:)(v17, v16);

  swift_release();
  *(_QWORD *)(v13 + 96) = v10;
  *(_QWORD *)(v13 + 104) = &protocol witness table for MiddleDoubleTapRecognition;
  *(_QWORD *)(v13 + 72) = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TwoHandProcessingPipeline>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_23D9A7050;
  v20 = type metadata accessor for TwoHandPinchProcessingPipeline();
  v21 = swift_allocObject();
  *(_BYTE *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 40) = 0;
  v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v21 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v21 + 32) = specialized Dictionary.init(dictionaryLiteral:)(v22);
  swift_allocObject();
  v23 = v17;
  *(_QWORD *)(v21 + 40) = PipelineMapper.init()();
  LOBYTE(v18) = -[HandsKitConfig EnableCoreAnalytics](v23, sel_EnableCoreAnalytics);

  *(_BYTE *)(v21 + 16) = v18;
  *(_QWORD *)(v19 + 56) = v20;
  *(_QWORD *)(v19 + 64) = &protocol witness table for TwoHandPinchProcessingPipeline;
  *(_QWORD *)(v19 + 32) = v21;
  v24 = type metadata accessor for MiddleDoubleTapPostProcessing();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v22;
  v26 = objc_allocWithZone((Class)HandsKitConfig);
  v27 = v23;
  v28 = objc_msgSend(v26, sel_init);
  *(_BYTE *)(v25 + 32) = 0;
  type metadata accessor for MiddleDoubleTapEventLogger();
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = 0;
  v29[3] = v22;
  v29[4] = 30;
  *(_QWORD *)(v25 + 40) = v29;
  *(_QWORD *)(v25 + 24) = v27;
  v30 = v27;

  MiddleDoubleTapPostProcessing.reset()();
  *(_QWORD *)(v19 + 96) = v24;
  *(_QWORD *)(v19 + 104) = &protocol witness table for MiddleDoubleTapPostProcessing;
  *(_QWORD *)(v19 + 72) = v25;
  type metadata accessor for GesturePipeline();
  v31 = (_QWORD *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[SingleHandProcessingPipeline]>);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_23D9A7050;
  *(_QWORD *)(v32 + 32) = v22;
  *(_QWORD *)(v32 + 40) = v22;
  v31[2] = v2;
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23D9A7050;
  *(_QWORD *)(v33 + 32) = v5;
  *(_QWORD *)(v33 + 40) = v13;
  v31[3] = v33;
  swift_bridgeObjectRelease();
  v31[4] = v19;
  swift_bridgeObjectRelease();
  return v31;
}

_QWORD *specialized static GesturePipelineFactory.makeGesturePipeline(_:)(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  HandsKitConfig *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (objc_msgSend(a1, sel_PosePipelineType) != 2)
    return specialized static GesturePipelineFactory.makeStereoPlatformGesturePipeline(_:)(a1);
  v2 = objc_msgSend(a1, sel_InputImageStreams);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  if (v3 == 0x43636972656E6547 && v5 == 0xED00006172656D61)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
LABEL_10:
    type metadata accessor for GesturePipelineMapper();
    v17 = swift_allocObject();
    *(_BYTE *)(v17 + 16) = 0;
    v18 = a1;
    v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v19 + 16) = 2;
    *(_QWORD *)(v19 + 32) = 0;
    *(_BYTE *)(v19 + 40) = 0;
    *(_QWORD *)(v19 + 48) = 0;
    *(_BYTE *)(v19 + 56) = 0;
    *(_QWORD *)(v17 + 24) = v19;
    type metadata accessor for PipelineMapper();
    swift_allocObject();
    *(_QWORD *)(v17 + 32) = PipelineMapper.init()();
    v20 = objc_msgSend(v18, sel_EnableObjectInteractionState);

    *(_BYTE *)(v17 + 16) = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SingleHandProcessingPipeline>);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_23D9A70A0;
    v22 = type metadata accessor for PinchPostprocessing();
    swift_allocObject();
    v23 = (HandsKitConfig *)v18;
    v24 = PinchPostprocessing.init(_:)(v23);
    *(_QWORD *)(v21 + 56) = v22;
    *(_QWORD *)(v21 + 64) = &protocol witness table for PinchPostprocessing;
    *(_QWORD *)(v21 + 32) = v24;
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_23D9A70A0;
    swift_allocObject();
    v26 = PinchPostprocessing.init(_:)(v23);
    *(_QWORD *)(v25 + 56) = v22;
    *(_QWORD *)(v25 + 64) = &protocol witness table for PinchPostprocessing;
    *(_QWORD *)(v25 + 32) = v26;
    type metadata accessor for GesturePipeline();
    v12 = (_QWORD *)swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[SingleHandProcessingPipeline]>);
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_23D9A7050;
    v28 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v27 + 32) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v27 + 40) = v28;
    v12[2] = v17;
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_23D9A7050;
    *(_QWORD *)(v29 + 32) = v21;
    *(_QWORD *)(v29 + 40) = v25;
    v12[3] = v29;
    swift_bridgeObjectRelease();
    v12[4] = v28;
    goto LABEL_11;
  }
  type metadata accessor for GesturePipelineMapper();
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 0;
  v9 = a1;
  v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v10 + 16) = 2;
  *(_QWORD *)(v10 + 32) = 0;
  *(_BYTE *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_BYTE *)(v10 + 56) = 0;
  *(_QWORD *)(v8 + 24) = v10;
  type metadata accessor for PipelineMapper();
  swift_allocObject();
  *(_QWORD *)(v8 + 32) = PipelineMapper.init()();
  v11 = objc_msgSend(v9, sel_EnableObjectInteractionState);

  *(_BYTE *)(v8 + 16) = v11;
  type metadata accessor for GesturePipeline();
  v12 = (_QWORD *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[SingleHandProcessingPipeline]>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23D9A7050;
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v13 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v13 + 40) = v14;
  v12[2] = v8;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23D9A7050;
  *(_QWORD *)(v15 + 32) = v14;
  *(_QWORD *)(v15 + 40) = v14;
  v12[3] = v15;
  swift_bridgeObjectRelease();
  v12[4] = v14;
LABEL_11:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Sequence.suffix(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (result < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v3 = result;
  if (!result)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  if (*(_QWORD *)(a2 + 16) >= result)
    v4 = result;
  else
    v4 = *(_QWORD *)(a2 + 16);
  v22 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v5 = v22;
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    goto LABEL_30;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  v9 = v6 - 2;
  do
  {
    v10 = (_DWORD *)(v22 + 32);
    v11 = v8;
LABEL_9:
    if (v11 >= *(_QWORD *)(a2 + 16))
      goto LABEL_38;
    v12 = *(_DWORD *)(a2 + 32 + 4 * v11);
    v8 = v11 + 1;
    v13 = *(_QWORD *)(v22 + 16);
    if ((uint64_t)v13 < v3)
    {
LABEL_23:
      v15 = *(_QWORD *)(v22 + 24);
      v16 = v13 + 1;
      if (v13 >= v15 >> 1)
      {
        v20 = v9;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v13 + 1, 1);
        v16 = v13 + 1;
        v9 = v20;
      }
      *(_QWORD *)(v22 + 16) = v16;
      *(_DWORD *)(v22 + 4 * v13 + 32) = v12;
    }
    else
    {
      if (v7 >= v13)
        goto LABEL_39;
      v10[v7++] = v12;
      if (v7 >= v3)
      {
        if (v8 == v6)
        {
LABEL_29:
          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        while (v11 + 1 < *(_QWORD *)(a2 + 16))
        {
          v12 = *(_DWORD *)(a2 + 36 + 4 * v11);
          v13 = *(_QWORD *)(v22 + 16);
          if ((uint64_t)v13 < v3)
          {
            v7 = 0;
            v8 = v11 + 2;
            goto LABEL_23;
          }
          *v10 = v12;
          if (v3 > 1)
          {
            v7 = 1;
            v14 = v9 == v11;
            v11 += 2;
            if (!v14)
              goto LABEL_9;
            swift_bridgeObjectRelease();
            v7 = 1;
            goto LABEL_33;
          }
          if (v6 - 1 == ++v11)
            goto LABEL_29;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
  }
  while (v8 != v6);
  swift_bridgeObjectRelease();
  if (!v7)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    return v5;
  }
LABEL_33:
  v17 = *(_QWORD *)(v22 + 16);
  v21 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
  if (v17 < v7)
    goto LABEL_41;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v18 = *(_QWORD *)(v22 + 16);
    if (v18 >= v7 && v18 >= v17)
    {
      v19 = swift_retain();
      specialized ContiguousArray.append<A>(contentsOf:)(v19, v22 + 32, v7, (2 * v17) | 1);
      swift_bridgeObjectRelease();
      swift_release();
      specialized ContiguousArray.append<A>(contentsOf:)(v22, v22 + 32, 0, (2 * v7) | 1);
      swift_release();
      return v21;
    }
    goto LABEL_43;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

void specialized Sequence.suffix(_:)(int64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v46 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v9);
  v50 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes??);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0)
    goto LABEL_44;
  if (!a1)
    goto LABEL_40;
  v48 = v14;
  v52 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v15 = v52;
  v16 = *(_QWORD *)(a3 + 16);
  if (v16)
  {
    v47 = a1;
    v17 = *(_QWORD *)(a3 + 24);
    v43 = specialized CircularBuffer.lastAddedElementPtr.getter(a2, a3, a4);
    if (v17 < 2)
    {
      swift_bridgeObjectRetain();
LABEL_39:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v48, 1, 1, v8);
      swift_bridgeObjectRelease();
LABEL_40:
      swift_bridgeObjectRelease();
      return;
    }
    v25 = v18;
    swift_bridgeObjectRetain();
    if ((v25 & 1) != 0)
      goto LABEL_39;
    v45 = v8;
    if (v16 == a2)
      v26 = a4;
    else
      v26 = 0;
    if ((v26 & 0x8000000000000000) == 0)
    {
      v20 = 0;
      v19 = v46;
      v42 = a3;
      while (1)
      {
        if (v26 >= *(_QWORD *)(a3 + 16))
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        v28 = v20;
        v29 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
        v30 = *(_QWORD *)(v19 + 72);
        v31 = a3 + v29 + v30 * v26;
        v32 = a3;
        v33 = (uint64_t)v48;
        outlined init with copy of (Int32, Matrix2dPB)(v31, (uint64_t)v48, &demangling cache variable for type metadata for DerivedHandAttributes?);
        v34 = v45;
        v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
        v44(v33, 0, 1, v45);
        v35 = v32;
        v36 = *(_QWORD *)(v32 + 16);
        if (!v36)
          goto LABEL_43;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v33, 1, v34) == 1)
        {
          v20 = v28;
          goto LABEL_9;
        }
        v49 = (v26 + 1) % v36;
        outlined init with take of DerivedHandAttributes?(v33, v50);
        v37 = v15[2];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v52 = v15;
        v20 = v28;
        if (v37 < v47)
          break;
        a3 = v35;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v15 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
          v52 = v15;
        }
        if ((v28 & 0x8000000000000000) != 0)
          goto LABEL_45;
        if (v28 >= v15[2])
          goto LABEL_46;
        outlined assign with take of DerivedHandAttributes?(v50, (uint64_t)v15 + v29 + v30 * v28);
        v15 = v52;
        v20 = v28 + 1;
        if ((uint64_t)(v28 + 1) >= v47)
        {
          v20 = 0;
          v27 = v26 == v43;
          v26 = v49;
          if (v27)
            goto LABEL_8;
        }
        else
        {
LABEL_36:
          v27 = v26 == v43;
          v26 = v49;
          if (v27)
            goto LABEL_8;
        }
      }
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37 + 1, 1);
        v15 = v52;
      }
      v40 = v15[2];
      v39 = v15[3];
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        v15 = v52;
      }
      v15[2] = v40 + 1;
      outlined init with take of DerivedHandAttributes?(v50, (uint64_t)v15 + v29 + v40 * v30);
      a3 = v42;
      v19 = v46;
      goto LABEL_36;
    }
  }
  else
  {
    v45 = v8;
    specialized CircularBuffer.lastAddedElementPtr.getter(a2, a3, a4);
    v19 = v46;
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
    swift_bridgeObjectRetain();
    v20 = 0;
LABEL_8:
    v44((uint64_t)v48, 1, 1, v45);
LABEL_9:
    swift_bridgeObjectRelease();
    if (!v20)
      goto LABEL_40;
    v21 = v15[2];
    v51 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    if (v21 < v20)
      goto LABEL_47;
    if (v20 < 0)
    {
LABEL_48:
      __break(1u);
    }
    else
    {
      v22 = v15[2];
      if (v22 >= v20 && v22 >= v21)
      {
        v23 = (uint64_t)v15
            + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
        v24 = swift_retain();
        specialized ContiguousArray.append<A>(contentsOf:)(v24, v23, v20, (2 * v21) | 1);
        swift_bridgeObjectRelease();
        specialized ContiguousArray.append<A>(contentsOf:)((uint64_t)v15, v23, 0, (2 * v20) | 1);
        return;
      }
    }
    __break(1u);
  }
  __break(1u);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PinchGestures.GestureClass(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance PinchGestures.GestureClass()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_23D8211C0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PinchGestures.GestureClass()
{
  __asm { BR              X10 }
}

uint64_t sub_23D821260()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PinchGestures.GestureClass()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_23D8212F8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchGestures.GestureClass@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of PinchGestures.GestureClass.init(rawValue:);
  result = specialized PinchGestures.GestureClass.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PinchGestures.GestureClass()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23D8213C0 + 4 * byte_23D9B461C[*v0]))();
}

void sub_23D8213C0(_QWORD *a1@<X8>)
{
  *a1 = 0x73726568744FLL;
  a1[1] = 0xE600000000000000;
}

void sub_23D8213D8(_QWORD *a1@<X8>)
{
  *a1 = 0x6570697753;
  a1[1] = 0xE500000000000000;
}

void sub_23D8213F0(_QWORD *a1@<X8>)
{
  *a1 = 7364948;
  a1[1] = 0xE300000000000000;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PinchGestures.HandMovementDirection(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance PinchGestures.HandMovementDirection()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_23D821458()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PinchGestures.HandMovementDirection()
{
  __asm { BR              X10 }
}

uint64_t sub_23D8214FC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PinchGestures.HandMovementDirection()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_23D821598()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchGestures.HandMovementDirection@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of PinchGestures.HandMovementDirection.init(rawValue:);
  result = specialized PinchGestures.GestureClass.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PinchGestures.HandMovementDirection()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23D821664 + 4 * byte_23D9B462C[*v0]))();
}

void sub_23D821664(_QWORD *a1@<X8>)
{
  *a1 = 0x6564696365646E55;
  a1[1] = 0xE900000000000064;
}

void sub_23D821684(_QWORD *a1@<X8>)
{
  *a1 = 0x6576697469736F50;
  a1[1] = 0xE800000000000000;
}

Swift::Void __swiftcall PinchGestures.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14[3];
  uint64_t v15[3];

  v1 = v0;
  *(_BYTE *)(v0 + 16) = 0;
  *(_DWORD *)(v0 + 20) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_DWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_DWORD *)(v0 + 276) = 0;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_DWORD *)(v0 + 64) = 0;
  swift_beginAccess();
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 304) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v0 + 296) = v2;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v3 + 16) = 3;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  swift_beginAccess();
  *(_QWORD *)(v1 + 312) = v3;
  swift_bridgeObjectRelease();
  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_AG_Says5SIMD3VySfGGts5NeverOTg5037_s5Hands13PinchGesturesC5resetyyFSo18def7V_Says5G14VySfGGtAFXEfU_5Hands0kL0CTf1cn_nTf4ng_nTm(v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, [SIMD3<Float>]>);
    v6 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v6 = MEMORY[0x24BEE4B00];
  }
  v15[0] = v6;
  v7 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, 1, v15);
  swift_bridgeObjectRelease();
  v8 = v15[0];
  swift_beginAccess();
  *(_QWORD *)(v1 + 160) = v8;
  swift_bridgeObjectRelease();
  swift_retain();
  v9 = swift_bridgeObjectRetain();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_AG_Says5SIMD3VySfGGts5NeverOTg5037_s5Hands13PinchGesturesC5resetyyFSo18def7V_Says5G14VySfGGtAFXEfU_5Hands0kL0CTf1cn_nTf4ng_nTm(v9, v1);
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v10 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, [SIMD3<Float>]>);
    v11 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v11 = MEMORY[0x24BEE4B00];
  }
  v14[0] = v11;
  v12 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v12, 1, v14);
  swift_bridgeObjectRelease();
  v13 = v14[0];
  swift_beginAccess();
  *(_QWORD *)(v1 + 168) = v13;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = v2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + 336) = 0;
}

Swift::Void __swiftcall PinchGestures.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  _QWORD v21[4];

  v2 = v1;
  *(_BYTE *)(v2 + 128) = -[HandsKitConfig EnableGestureRecognition](a1, sel_EnableGestureRecognition);
  *(_BYTE *)(v2 + 130) = -[HandsKitConfig EnableTurningPointFilterForSwipe](a1, sel_EnableTurningPointFilterForSwipe);
  *(_QWORD *)(v2 + 136) = -[HandsKitConfig MaxSwipeTurns](a1, sel_MaxSwipeTurns);
  -[HandsKitConfig ThresholdRelativeSpeedRatio](a1, sel_ThresholdRelativeSpeedRatio);
  *(_DWORD *)(v2 + 148) = v4;
  -[HandsKitConfig ThresholdHandSpeed](a1, sel_ThresholdHandSpeed);
  *(_DWORD *)(v2 + 144) = v5;
  *(_QWORD *)(v2 + 152) = -[HandsKitConfig MinSwipeFrames](a1, sel_MinSwipeFrames);
  -[HandsKitConfig StaticHandMovementThreshold](a1, sel_StaticHandMovementThreshold);
  *(_DWORD *)(v2 + 288) = v6;
  *(_BYTE *)(v2 + 129) = -[HandsKitConfig EnablePinkySwipeRecognition](a1, sel_EnablePinkySwipeRecognition);
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(165);
  v7._countAndFlagsBits = 0xD00000000000001DLL;
  v7._object = (void *)0x800000023D9D1AC0;
  String.append(_:)(v7);
  if (*(_BYTE *)(v2 + 128))
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if (*(_BYTE *)(v2 + 128))
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD000000000000012;
  v11._object = (void *)0x800000023D9D1AE0;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000024;
  v13._object = (void *)0x800000023D9D1B00;
  String.append(_:)(v13);
  if (*(_BYTE *)(v2 + 130))
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if (*(_BYTE *)(v2 + 130))
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0xD000000000000016;
  v17._object = (void *)0x800000023D9D1B30;
  String.append(_:)(v17);
  Float.write<A>(to:)();
  v18._countAndFlagsBits = 0xD00000000000001FLL;
  v18._object = (void *)0x800000023D9D1B50;
  String.append(_:)(v18);
  Float.write<A>(to:)();
  v19._object = (void *)0x800000023D9D1B70;
  v19._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v19);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000082, 0x800000023D9D19E0, 144, (uint64_t)v21, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  PinchGestures.reset()();
}

uint64_t PinchGestures.process(_:_:)(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  char *v7;
  char **v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  char **v34;
  char *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  char **v39;
  char *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  float v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  float32x4_t v64;
  unint64_t v65;
  float *v66;
  float32x4_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  unint64_t v73;
  float *v74;
  __int128 v75;
  float v76;
  float32x4_t v77;
  float32x4_t v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t v89;
  __int128 v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  _QWORD v94[4];

  v6 = v2;
  PinchGestures.updateBufferData(_:_:)(a1, a2);
  v7 = (char *)(v2 + 168);
  swift_beginAccess();
  v8 = *(char ***)(v2 + 168);
  if (!v8[2])
  {
    __break(1u);
    goto LABEL_75;
  }
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(6uLL);
  if ((v10 & 1) == 0)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v11 = *(_QWORD *)&v8[7][8 * v9];
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
    v13 = *(float32x4_t *)(v11 + 16 * v12 + 16);
  else
    specialized SIMD.init<A>(_:)(MEMORY[0x24BEE4AF8]);
  v8 = *(char ***)v7;
  if (!*(_QWORD *)(*(_QWORD *)v7 + 16))
    goto LABEL_76;
  v91 = v13;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x15uLL);
  if ((v15 & 1) == 0)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v16 = *(_QWORD *)&v8[7][8 * v14];
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
    v18 = *(float32x4_t *)(v16 + 16 * v17 + 16);
  else
    specialized SIMD.init<A>(_:)(MEMORY[0x24BEE4AF8]);
  v8 = *(char ***)v7;
  if (!*(_QWORD *)(*(_QWORD *)v7 + 16))
    goto LABEL_78;
  v89 = v18;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  if ((v20 & 1) == 0)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    *v8 = v7;
    goto LABEL_31;
  }
  v21 = *(_QWORD *)&v8[7][8 * v19];
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
    v23 = *(float32x4_t *)(v21 + 16 * v22 + 16);
  else
    specialized SIMD.init<A>(_:)(MEMORY[0x24BEE4AF8]);
  v24 = vmulq_f32(v91, v91);
  v4 = sqrtf(v24.f32[2] + vaddv_f32(*(float32x2_t *)v24.f32));
  v25 = vmulq_f32(v89, v89);
  v26 = vmulq_f32(v23, v23);
  v27 = v4 / sqrtf(v26.f32[2] + vaddv_f32(*(float32x2_t *)v26.f32));
  v28 = v4 / sqrtf(v25.f32[2] + vaddv_f32(*(float32x2_t *)v25.f32));
  if ((LODWORD(v27) & 0x7FFFFF) != 0)
    v29 = 0.0;
  else
    v29 = v27;
  if ((~LODWORD(v27) & 0x7F800000) != 0)
    v5 = v27;
  else
    v5 = v29;
  if ((LODWORD(v28) & 0x7FFFFF) != 0)
    v30 = 0.0;
  else
    v30 = v28;
  if ((~LODWORD(v28) & 0x7F800000) != 0)
    v3 = v28;
  else
    v3 = v30;
  if (v5 <= 0.0 || v3 <= 0.0)
    goto LABEL_42;
  v8 = (char **)(v6 + 24);
  swift_beginAccess();
  v7 = *(char **)(v6 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 24) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_80;
LABEL_31:
  v33 = *((_QWORD *)v7 + 2);
  v32 = *((_QWORD *)v7 + 3);
  if (v33 >= v32 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v7);
    *v8 = v7;
  }
  *((_QWORD *)v7 + 2) = v33 + 1;
  *(float *)&v7[4 * v33 + 32] = v4;
  swift_endAccess();
  v34 = (char **)(v6 + 32);
  swift_beginAccess();
  v35 = *(char **)(v6 + 32);
  v36 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 32) = v35;
  if ((v36 & 1) == 0)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
    *v34 = v35;
  }
  v38 = *((_QWORD *)v35 + 2);
  v37 = *((_QWORD *)v35 + 3);
  if (v38 >= v37 >> 1)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v35);
    *v34 = v35;
  }
  *((_QWORD *)v35 + 2) = v38 + 1;
  *(float *)&v35[4 * v38 + 32] = v5;
  swift_endAccess();
  v39 = (char **)(v6 + 40);
  swift_beginAccess();
  v40 = *(char **)(v6 + 40);
  v41 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 40) = v40;
  if ((v41 & 1) == 0)
  {
    v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v40 + 2) + 1, 1, v40);
    *v39 = v40;
  }
  v43 = *((_QWORD *)v40 + 2);
  v42 = *((_QWORD *)v40 + 3);
  if (v43 >= v42 >> 1)
  {
    v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v40);
    *v39 = v40;
  }
  *((_QWORD *)v40 + 2) = v43 + 1;
  *(float *)&v40[4 * v43 + 32] = v3;
  swift_endAccess();
LABEL_42:
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16) < 9uLL)
    goto LABEL_47;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16))
  {
    __break(1u);
    goto LABEL_82;
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  swift_endAccess();
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16))
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  swift_endAccess();
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v6 + 40) + 16))
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  result = swift_endAccess();
LABEL_47:
  if (*(_BYTE *)(v6 + 16) != 1)
    goto LABEL_73;
  v45 = *(float *)(v6 + 20);
  if (v45 < v4)
    v45 = v4;
  *(float *)(v6 + 48) = v4 + *(float *)(v6 + 48);
  *(float *)(v6 + 52) = v45;
  v46 = *(_QWORD *)(v6 + 56);
  _VF = __OFADD__(v46, 1);
  v48 = v46 + 1;
  if (_VF)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  *(_QWORD *)(v6 + 56) = v48;
  v49 = *(_QWORD *)(v6 + 168);
  if (!*(_QWORD *)(v49 + 16) || (v50 = specialized __RawDictionaryStorage.find<A>(_:)(6uLL), (v51 & 1) == 0))
  {
    v94[3] = MEMORY[0x24BEE0D00];
    v94[0] = 0xD00000000000001ELL;
    v94[1] = 0x800000023D9D1AA0;
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000082, 0x800000023D9D19E0, 187, (uint64_t)v94, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v94);
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v50);
  if (*(uint64_t *)(v6 + 56) >= 8)
    v53 = 8;
  else
    v53 = *(_QWORD *)(v6 + 56);
  v57 = specialized BidirectionalCollection.suffix(_:)(v53, v52);
  if (*(float *)(v6 + 272) >= *(float *)(v6 + 276))
  {
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRelease();
    if (*(float *)(v6 + 80) < 0.0)
      goto LABEL_69;
LABEL_73:
    *(float *)(v6 + 20) = v4;
    return result;
  }
  v58 = v54;
  v59 = v55;
  v60 = v56;
  result = specialized BidirectionalCollection.suffix(_:)(2, v57, v54, v55, v56);
  v64 = 0uLL;
  v65 = (v63 >> 1) - v62;
  if (v63 >> 1 != v62)
  {
    if ((uint64_t)(v63 >> 1) <= v62)
    {
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    v66 = (float *)(v61 + 16 * v62 + 8);
    v67.i64[0] = 0;
    v67.i32[2] = 0;
    do
    {
      *(float32x2_t *)v64.f32 = vadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)(v66 - 2));
      v68 = *v66;
      v66 += 4;
      v64.f32[2] = v67.f32[2] + v68;
      v64.i32[3] = 0;
      v67 = v64;
      --v65;
    }
    while (v65);
  }
  v92 = v64;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = specialized BidirectionalCollection.suffix(_:)(6, v57, v58, v59, v60);
  v72 = 0uLL;
  v73 = (v71 >> 1) - v70;
  if (v71 >> 1 != v70)
  {
    if ((uint64_t)(v71 >> 1) <= v70)
    {
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    v74 = (float *)(v69 + 16 * v70 + 8);
    *(_QWORD *)&v75 = 0;
    DWORD2(v75) = 0;
    do
    {
      *(float32x2_t *)&v72 = vadd_f32(*(float32x2_t *)&v75, *(float32x2_t *)(v74 - 2));
      v76 = *v74;
      v74 += 4;
      *((float *)&v72 + 2) = *((float *)&v75 + 2) + v76;
      HIDWORD(v72) = 0;
      v75 = v72;
      --v73;
    }
    while (v73);
  }
  *(float32x2_t *)v77.f32 = vmul_f32(*(float32x2_t *)v92.f32, (float32x2_t)0x3F0000003F000000);
  v77.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, v92, 2));
  v90 = v72;
  v93 = v77;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __asm { FMOV            V0.2S, #6.0 }
  *(float32x2_t *)v82.f32 = vdiv_f32(*(float32x2_t *)&v90, _D0);
  v82.f32[2] = *((float *)&v90 + 2) / 6.0;
  v82.i32[3] = 0;
  v83 = specialized static PinchGestureHelper.similarity(_:_:)(v93, v82);
  result = swift_unknownObjectRelease();
  *(float *)(v6 + 80) = v83;
  if (v83 >= 0.0)
    goto LABEL_73;
LABEL_69:
  v84 = *(_QWORD *)(v6 + 56);
  v85 = *(_QWORD *)(v6 + 88);
  _VF = __OFSUB__(v84, v85);
  v86 = v84 - v85;
  if (_VF)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v86 < 3)
    goto LABEL_73;
  v87 = *(_QWORD *)(v6 + 72);
  _VF = __OFADD__(v87, 1);
  v88 = v87 + 1;
  if (!_VF)
  {
    *(_QWORD *)(v6 + 72) = v88;
    *(_QWORD *)(v6 + 88) = v84;
    goto LABEL_73;
  }
LABEL_88:
  __break(1u);
  return result;
}

uint64_t PinchGestures.makeFrameUpdate(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  _QWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  float32x4_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  _BYTE v66[280];

  v5 = *(float32x4_t *)(a2 + 208);
  v6 = *(float32x4_t *)(a2 + 224);
  v7 = *(float32x4_t *)(a2 + 240);
  v8 = *(float32x4_t *)(a2 + 256);
  v9 = *(_QWORD *)(a1 + 16);
  v37 = v6;
  v38 = v5;
  v35 = v8;
  v36 = v7;
  if (!v9)
  {
    v34 = 0u;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  v13 = *(_OWORD *)(a1 + 80);
  v12 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 48);
  v14 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 112);
  v39[0] = v9;
  v39[1] = v17;
  v40 = v16;
  v41 = v15;
  v42 = v14;
  v43 = v13;
  v44 = v12;
  v45 = v18;
  v46 = v11;
  v47 = v10 & 0x101;
  v48 = HIDWORD(v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HandPose.init(_:from:)((uint64_t)v39, (uint64_t)&v49, v38, v37, v36, v35);
  result = v49.i64[1];
  if (*(_QWORD *)(v49.i64[1] + 16) >= 7uLL)
  {
    v34 = *(_OWORD *)(v49.i64[1] + 240);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v37;
    v5 = v38;
    v8 = v35;
    v7 = v36;
LABEL_5:
    v20 = *(_OWORD *)(a2 + 176);
    v59 = *(_OWORD *)(a2 + 160);
    v60 = v20;
    v21 = *(_OWORD *)(a2 + 112);
    v55 = *(_OWORD *)(a2 + 96);
    v56 = v21;
    v22 = *(_OWORD *)(a2 + 144);
    v57 = *(_OWORD *)(a2 + 128);
    v58 = v22;
    v23 = *(_OWORD *)(a2 + 48);
    v51 = *(_OWORD *)(a2 + 32);
    v52 = v23;
    v24 = *(_OWORD *)(a2 + 80);
    v53 = *(_OWORD *)(a2 + 64);
    v54 = v24;
    v25 = *(_OWORD *)(a2 + 16);
    v49 = *(float32x4_t *)a2;
    v50 = v25;
    v61 = *(_OWORD *)(a2 + 192);
    v62 = v5;
    v63 = v6;
    v64 = v7;
    v65 = v8;
    memcpy(v66, (const void *)(a2 + 272), sizeof(v66));
    specialized static PinchGestureHelper.getPinchVector(_:_:)(a1, &v49);
    *(_OWORD *)(v2 + 224) = v26;
    v27 = *(_OWORD *)(a2 + 176);
    v59 = *(_OWORD *)(a2 + 160);
    v60 = v27;
    v28 = *(_OWORD *)(a2 + 112);
    v55 = *(_OWORD *)(a2 + 96);
    v56 = v28;
    v29 = *(_OWORD *)(a2 + 144);
    v57 = *(_OWORD *)(a2 + 128);
    v58 = v29;
    v30 = *(_OWORD *)(a2 + 48);
    v51 = *(_OWORD *)(a2 + 32);
    v52 = v30;
    v31 = *(_OWORD *)(a2 + 80);
    v53 = *(_OWORD *)(a2 + 64);
    v54 = v31;
    v32 = *(_OWORD *)(a2 + 16);
    v49 = *(float32x4_t *)a2;
    v50 = v32;
    v61 = *(_OWORD *)(a2 + 192);
    v62 = v38;
    v63 = v37;
    v64 = v36;
    v65 = v35;
    memcpy(v66, (const void *)(a2 + 272), sizeof(v66));
    result = specialized static PinchGestureHelper.getPalmNormal(_:_:)(a1, &v49);
    *(_OWORD *)(v2 + 208) = v33;
    *(float32x2_t *)&v33 = vadd_f32(*(float32x2_t *)&v34, *(float32x2_t *)(v2 + 224));
    *((float *)&v33 + 2) = *((float *)&v34 + 2) + *(float *)(v2 + 232);
    HIDWORD(v33) = 0;
    *(_OWORD *)(v2 + 240) = v33;
    return result;
  }
  __break(1u);
  return result;
}

void PinchGestures.processAfterPostprocessing(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  const void *v21;
  uint64_t v22;
  float32x4_t v23;
  unint64_t v24;
  BOOL v25;
  float v26;
  float v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __int128 v58;
  _QWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  float32x4_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  _BYTE v86[280];

  v5 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(float32x4_t *)(a2 + 208);
  v9 = *(float32x4_t *)(a2 + 224);
  v11 = *(float32x4_t *)(a2 + 240);
  v12 = *(float32x4_t *)(a2 + 256);
  v13 = *(_QWORD *)(a1 + 16);
  v55 = v9;
  v56 = v12;
  v52 = v11;
  v54 = v10;
  if (!v13)
  {
    v23 = 0uLL;
    goto LABEL_5;
  }
  v15 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v19 = *(_OWORD *)(a1 + 48);
  v18 = *(_OWORD *)(a1 + 64);
  v20 = *(_OWORD *)(a1 + 32);
  v21 = *(const void **)(a1 + 24);
  v22 = *(_QWORD *)(a1 + 112);
  v59[0] = v13;
  v59[1] = v21;
  v60 = v20;
  v61 = v19;
  v62 = v18;
  v63 = v17;
  v64 = v16;
  v65 = v22;
  v66 = v15;
  v67 = v14 & 0x101;
  v68 = HIDWORD(v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HandPose.init(_:from:)((uint64_t)v59, (uint64_t)&v69, v54, v55, v52, v56);
  v24 = *(_QWORD *)(v69.i64[1] + 16);
  if (v24 >= 7)
  {
    v53 = *(float32x4_t *)(v69.i64[1] + 240);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v52;
    v23 = v53;
    v9 = v55;
    v12 = v56;
    v10 = v54;
LABEL_5:
    v24 = 0;
    v21 = (const void *)(a2 + 272);
    v53 = v23;
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  while (1)
  {
    v57 = v23;
    v26 = *(float *)((unint64_t)&v57 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    v58 = 0u;
    v27 = *(float *)((unint64_t)&v58 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    v25 = v26 == v27;
    if (v24 == 2)
      break;
    while (1)
    {
      ++v24;
      if (v25)
        break;
      if (v24 == 2)
        goto LABEL_14;
      v25 = 0;
    }
  }
  if (v26 == v27)
  {
    swift_beginAccess();
    *(_QWORD *)(v2 + 280) = &outlined read-only object #0 of PinchGestures.processAfterPostprocessing(_:_:);
    swift_bridgeObjectRelease();
    v10 = v54;
    v9 = v55;
    v11 = v52;
    v12 = v56;
  }
LABEL_14:
  v28 = *(_OWORD *)(a2 + 176);
  v79 = *(_OWORD *)(a2 + 160);
  v80 = v28;
  v29 = *(_OWORD *)(a2 + 112);
  v75 = *(_OWORD *)(a2 + 96);
  v76 = v29;
  v30 = *(_OWORD *)(a2 + 144);
  v77 = *(_OWORD *)(a2 + 128);
  v78 = v30;
  v31 = *(_OWORD *)(a2 + 48);
  v71 = *(_OWORD *)(a2 + 32);
  v72 = v31;
  v32 = *(_OWORD *)(a2 + 80);
  v73 = *(_OWORD *)(a2 + 64);
  v74 = v32;
  v33 = *(_OWORD *)(a2 + 16);
  v69 = *(float32x4_t *)a2;
  v70 = v33;
  v81 = *(_OWORD *)(a2 + 192);
  v82 = v10;
  v83 = v9;
  v84 = v11;
  v85 = v12;
  memcpy(v86, v21, sizeof(v86));
  PinchGestures.updateHandMovementDirection(_:_:_:)((_QWORD *)a1, &v69, v53);
  PinchGestures.classify()();
  v34 = *(_BYTE *)(v2 + 16);
  outlined init with copy of HandDescriptor(a1, (uint64_t)v8);
  if ((v34 & 1) != 0)
  {
    outlined destroy of HandDescriptor((uint64_t)v8);
  }
  else
  {
    v35 = v8[4];
    outlined destroy of HandDescriptor((uint64_t)v8);
    if ((v35 & 1) != 0)
    {
      v46 = *(_OWORD *)(a2 + 176);
      v79 = *(_OWORD *)(a2 + 160);
      v80 = v46;
      v47 = *(_OWORD *)(a2 + 112);
      v75 = *(_OWORD *)(a2 + 96);
      v76 = v47;
      v48 = *(_OWORD *)(a2 + 144);
      v77 = *(_OWORD *)(a2 + 128);
      v78 = v48;
      v49 = *(_OWORD *)(a2 + 48);
      v71 = *(_OWORD *)(a2 + 32);
      v72 = v49;
      v50 = *(_OWORD *)(a2 + 80);
      v73 = *(_OWORD *)(a2 + 64);
      v74 = v50;
      v51 = *(_OWORD *)(a2 + 16);
      v69 = *(float32x4_t *)a2;
      v70 = v51;
      v81 = *(_OWORD *)(a2 + 192);
      v82 = v54;
      v83 = v55;
      v84 = v52;
      v85 = v56;
      memcpy(v86, v21, sizeof(v86));
      PinchGestures.makeFrameUpdate(_:_:)(a1, (uint64_t)&v69);
      return;
    }
  }
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    v36 = *(_OWORD *)(a2 + 176);
    v79 = *(_OWORD *)(a2 + 160);
    v80 = v36;
    v37 = *(_OWORD *)(a2 + 112);
    v75 = *(_OWORD *)(a2 + 96);
    v76 = v37;
    v38 = *(_OWORD *)(a2 + 144);
    v77 = *(_OWORD *)(a2 + 128);
    v78 = v38;
    v39 = *(_OWORD *)(a2 + 48);
    v71 = *(_OWORD *)(a2 + 32);
    v72 = v39;
    v40 = *(_OWORD *)(a2 + 80);
    v73 = *(_OWORD *)(a2 + 64);
    v74 = v40;
    v41 = *(_OWORD *)(a2 + 16);
    v69 = *(float32x4_t *)a2;
    v70 = v41;
    v81 = *(_OWORD *)(a2 + 192);
    v82 = v54;
    v83 = v55;
    v84 = v52;
    v85 = v56;
    memcpy(v86, v21, sizeof(v86));
    *(double *)&v42 = specialized static PinchGestureHelper.updatePinchCentroid(_:_:_:_:)(a1, &v69, *(float32x4_t *)(v2 + 208), *(float32x4_t *)(v2 + 224));
    *(_OWORD *)(v2 + 256) = v42;
    *(float32x2_t *)v43.f32 = vsub_f32(*(float32x2_t *)&v42, *(float32x2_t *)(v2 + 240));
    v43.f32[2] = *((float *)&v42 + 2) - *(float *)(v2 + 248);
    v44 = vmulq_f32(v43, v43);
    v45 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]);
    if (*(float *)(v2 + 276) < v45)
      *(float *)(v2 + 276) = v45;
  }
}

uint64_t PinchGestures.updateHandMovementDirection(_:_:_:)(_QWORD *a1, const void *a2, float32x4_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v6;
  char *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  int64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  BOOL v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v63;
  float32x4_t v64;
  __int128 v65;
  float32x4_t v66[35];
  _BYTE __dst[552];

  v4 = v3;
  memcpy(__dst, a2, sizeof(__dst));
  v6 = (unint64_t)(v4 + 37);
  swift_beginAccess();
  v7 = (char *)v4[37];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[37] = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_90;
  while (1)
  {
    v10 = *((_QWORD *)v7 + 2);
    v9 = *((_QWORD *)v7 + 3);
    if (v10 >= v9 >> 1)
    {
      v7 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      *(_QWORD *)v6 = v7;
    }
    *((_QWORD *)v7 + 2) = v10 + 1;
    *(float32x4_t *)&v7[16 * v10 + 32] = a3;
    swift_endAccess();
    memcpy(v66, __dst, 0x228uLL);
    specialized static PinchGestureHelper.getPalmNormal(_:_:)((uint64_t)a1, v66);
    v63 = v11;
    v7 = (char *)(v4 + 39);
    swift_beginAccess();
    a1 = (_QWORD *)v4[39];
    v12 = swift_isUniquelyReferenced_nonNull_native();
    v4[39] = a1;
    if ((v12 & 1) == 0)
    {
      a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
      *(_QWORD *)v7 = a1;
    }
    v14 = a1[2];
    v13 = a1[3];
    if (v14 >= v13 >> 1)
    {
      a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, a1);
      *(_QWORD *)v7 = a1;
    }
    a1[2] = v14 + 1;
    *(_OWORD *)&a1[2 * v14 + 4] = v63;
    if (!*(_QWORD *)(*(_QWORD *)v7 + 16))
    {
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      *a1 = v4;
LABEL_19:
      v30 = v4[2];
      v29 = v4[3];
      if (v30 >= v29 >> 1)
      {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v4);
        *a1 = v4;
      }
      v4[2] = v30 + 1;
      *(_OWORD *)&v4[2 * v30 + 4] = v61;
      return swift_endAccess();
    }
    a1 = v4 + 39;
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    result = swift_endAccess();
    v16 = *(_QWORD *)(*(_QWORD *)v6 + 16);
    if (v16 < 4)
      return result;
    v17 = v4[41];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_92;
    v20 = *(_QWORD *)v6 + 16 * v16;
    v21 = *(float *)(v20 - 8);
    v22 = *(float *)(v20 + 24);
    v23 = *(float32x2_t *)(v20 - 16);
    v24 = *(float32x2_t *)(v20 + 16);
    if (v19 < (uint64_t)v16)
    {
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v6 + 16))
        goto LABEL_95;
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
    }
    a1 = v4 + 38;
    swift_beginAccess();
    v25 = *(_QWORD *)(v4[38] + 16);
    v26 = v4[41];
    if (v26 < v25)
    {
      swift_beginAccess();
      if (!*(_QWORD *)(*a1 + 16))
        goto LABEL_96;
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
      v25 = *(_QWORD *)(v4[38] + 16);
      v26 = v4[41];
    }
    *(float32x2_t *)&v27 = vmul_f32(vsub_f32(v23, v24), (float32x2_t)0x3F0000003F000000);
    *((float *)&v27 + 2) = (float)(v21 - v22) * 0.5;
    HIDWORD(v27) = 0;
    v61 = v27;
    if (v25 < v26)
    {
      swift_beginAccess();
      v4 = (_QWORD *)*a1;
      v28 = swift_isUniquelyReferenced_nonNull_native();
      *a1 = v4;
      if ((v28 & 1) != 0)
        goto LABEL_19;
      goto LABEL_97;
    }
    v31 = *(_QWORD *)v6;
    v32 = *(_QWORD *)(*(_QWORD *)v6 + 16);
    if (v32 < 2)
    {
      __break(1u);
      goto LABEL_99;
    }
    v33 = (char *)MEMORY[0x24BEE4AF8];
    v34 = 2;
    while (1)
    {
      v64 = *(float32x4_t *)(v31 + 16 * v34);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, v33);
      v36 = *((_QWORD *)v33 + 2);
      v35 = *((_QWORD *)v33 + 3);
      if (v36 >= v35 >> 1)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v33);
      v37 = vsubq_f32(v64, a3);
      v38 = vmulq_f32(v37, v37);
      *((_QWORD *)v33 + 2) = v36 + 1;
      *(float *)&v33[4 * v36 + 32] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]);
      if (v32 == v34)
        break;
      v31 = *(_QWORD *)v6;
      v39 = v34++ - 1;
      if (v39 >= *(_QWORD *)(*(_QWORD *)v6 + 16))
        goto LABEL_86;
    }
    result = specialized Sequence<>.max()((uint64_t)v33);
    if ((result & 0x100000000) != 0)
      goto LABEL_101;
    v6 = result;
    result = swift_bridgeObjectRelease();
    if (*((float *)v4 + 72) <= *(float *)&v6)
      goto LABEL_51;
    v40 = *(_QWORD *)(*(_QWORD *)v7 + 16);
    if (!v40)
      break;
    v41 = *(_QWORD *)(*(_QWORD *)v7 + 16);
    if (v41)
    {
      v42 = 0;
      v43 = v40 - 1;
      v6 = MEMORY[0x24BEE4AF8];
      v44 = 0;
      while (1)
      {
        while (v41 != ++v44)
        {
          if (v42 != v44)
            goto LABEL_39;
        }
        if (v42 == v43)
          break;
        ++v42;
        v41 = *(_QWORD *)(*(_QWORD *)v7 + 16);
        if (!v41)
          goto LABEL_88;
        v44 = 0;
        if (v42)
        {
LABEL_39:
          v45 = *(_QWORD *)(*(_QWORD *)v7 + 16);
          if (v42 >= v45)
          {
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
            goto LABEL_87;
          }
          if (v44 >= v45)
            goto LABEL_85;
          v46 = specialized static PinchGestureHelper.similarity(_:_:)(*(float32x4_t *)(*(_QWORD *)v7 + 16 * v42 + 32), *(float32x4_t *)(*(_QWORD *)v7 + 16 * v44 + 32));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
          v48 = *(_QWORD *)(v6 + 16);
          v47 = *(_QWORD *)(v6 + 24);
          if (v48 >= v47 >> 1)
            v6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1, (char *)v6);
          *(_QWORD *)(v6 + 16) = v48 + 1;
          *(float *)(v6 + 4 * v48 + 32) = v46;
        }
      }
      result = specialized Sequence<>.min()(v6);
      if ((result & 0x100000000) != 0)
        goto LABEL_102;
      v7 = (char *)result;
      swift_bridgeObjectRelease();
      if (*((float *)v4 + 80) > *(float *)&v7)
      {
LABEL_51:
        v49 = v4[38];
        v50 = *(_QWORD *)(v49 + 16);
        if (!v50)
          goto LABEL_87;
        v6 = 0;
        v4 += 35;
        while (1)
        {
          v65 = v61;
          v51 = *(float *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
          v52 = v49 + 32;
          v53 = v50 == 1;
          v54 = 1;
          while ((float)(v51 * *(float *)(v52 + 4 * (v6 & 3))) <= 0.0)
          {
            if (v53)
              goto LABEL_65;
            v54 = 0;
LABEL_55:
            v53 = v50 == 2;
            v52 += 16;
            if (!--v50)
            {
              __break(1u);
              goto LABEL_77;
            }
          }
          if (!v53)
            goto LABEL_55;
          if ((v54 & 1) == 0)
          {
LABEL_65:
            swift_beginAccess();
            v7 = (char *)*v4;
            v56 = swift_isUniquelyReferenced_nonNull_native();
            *v4 = v7;
            if ((v56 & 1) == 0)
            {
              v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
              *v4 = v7;
            }
            if (v6 >= *((_QWORD *)v7 + 2))
              goto LABEL_89;
            v7[v6 + 32] = 1;
            goto LABEL_69;
          }
          if (v51 <= 0.0)
          {
            swift_beginAccess();
            v7 = (char *)*v4;
            v57 = swift_isUniquelyReferenced_nonNull_native();
            *v4 = v7;
            if ((v57 & 1) == 0)
            {
              v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
              *v4 = v7;
            }
            if (v6 >= *((_QWORD *)v7 + 2))
              goto LABEL_94;
            v7[v6 + 32] = 3;
          }
          else
          {
            swift_beginAccess();
            v7 = (char *)*v4;
            v55 = swift_isUniquelyReferenced_nonNull_native();
            *v4 = v7;
            if ((v55 & 1) == 0)
            {
              v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
              *v4 = v7;
            }
            if (v6 >= *((_QWORD *)v7 + 2))
              goto LABEL_93;
            v7[v6 + 32] = 2;
          }
LABEL_69:
          swift_endAccess();
          if (v6 == 2)
            goto LABEL_78;
          ++v6;
          v49 = *a1;
          v50 = *(_QWORD *)(*a1 + 16);
          if (!v50)
          {
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
        }
      }
LABEL_77:
      swift_beginAccess();
      v4[35] = &outlined read-only object #0 of PinchGestures.updateHandMovementDirection(_:_:_:);
      swift_bridgeObjectRelease();
LABEL_78:
      swift_beginAccess();
      v4 = (_QWORD *)*a1;
      v58 = swift_isUniquelyReferenced_nonNull_native();
      *a1 = v4;
      if ((v58 & 1) == 0)
      {
LABEL_99:
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        *a1 = v4;
      }
      v60 = v4[2];
      v59 = v4[3];
      if (v60 >= v59 >> 1)
      {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1, v4);
        *a1 = v4;
      }
      v4[2] = v60 + 1;
      *(_OWORD *)&v4[2 * v60 + 4] = v61;
      return swift_endAccess();
    }
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    v7 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    *(_QWORD *)v6 = v7;
  }
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
  return result;
}

uint64_t PinchGestures.updateState(_:_:_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  int v7;
  uint64_t v8;

  v6 = result;
  v7 = *(unsigned __int8 *)(v3 + 16);
  if (v7 == 1 && (result & 1) == 0)
  {
    *(_DWORD *)(v3 + 276) = 0;
    *(_OWORD *)(v3 + 224) = 0u;
    *(_OWORD *)(v3 + 256) = 0u;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    swift_beginAccess();
    v8 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v3 + 32) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v3 + 40) = v8;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v3 + 24) = v8;
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    LOBYTE(v7) = *(_BYTE *)(v3 + 16);
  }
  if ((v7 & 1) == 0 && (v6 & 1) != 0)
    result = PinchGestures.makeFrameUpdate(_:_:)(a2, a3);
  *(_BYTE *)(v3 + 16) = v6 & 1;
  return result;
}

Hands::PinchGestures::GestureClass __swiftcall PinchGestures.classify()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float v43;
  _BOOL4 v44;

  if (*(_BYTE *)(v0 + 16) != 1)
    goto LABEL_72;
  if (*(float *)(v0 + 276) <= *(float *)(v0 + 272))
  {
    LOBYTE(v10) = 3;
LABEL_73:
    *(_BYTE *)(v0 + 336) = v10;
    return (char)v10;
  }
  v1 = v0 + 24;
  swift_beginAccess();
  if (*(uint64_t *)(v0 + 56) >= 8)
    v2 = 8;
  else
    v2 = *(_QWORD *)(v0 + 56);
  v3 = specialized BidirectionalCollection.suffix(_:)(v2, *(_QWORD *)(v0 + 24));
  v5 = v4;
  v7 = v6;
  v9 = v8;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    v11 = swift_dynamicCastClass();
    if (!v11)
    {
      swift_unknownObjectRelease();
      v11 = MEMORY[0x24BEE4AF8];
    }
    v12 = *(_QWORD *)(v11 + 16);
    swift_release();
    if (!__OFSUB__(v9 >> 1, v7))
    {
      if (v12 == (v9 >> 1) - v7)
      {
        v5 = swift_dynamicCastClass();
        if (!v5)
        {
          swift_unknownObjectRelease();
          v5 = MEMORY[0x24BEE4AF8];
        }
        goto LABEL_16;
      }
      goto LABEL_76;
    }
    __break(1u);
    goto LABEL_75;
  }
  swift_bridgeObjectRetain();
  while (1)
  {
    v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v3, v5, v7, v9);
LABEL_16:
    swift_unknownObjectRelease();
    swift_beginAccess();
    if (*(uint64_t *)(v0 + 56) >= 8)
      v13 = 8;
    else
      v13 = *(_QWORD *)(v0 + 56);
    v7 = specialized BidirectionalCollection.suffix(_:)(v13, *(_QWORD *)(v0 + 40));
    v3 = v14;
    v9 = v15;
    v17 = v16;
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRetain();
LABEL_21:
      v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v3, v9, v17);
      goto LABEL_28;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    v19 = swift_dynamicCastClass();
    if (!v19)
    {
      swift_unknownObjectRelease();
      v19 = MEMORY[0x24BEE4AF8];
    }
    v20 = *(_QWORD *)(v19 + 16);
    swift_release();
    if (!__OFSUB__(v17 >> 1, v9))
      break;
LABEL_75:
    __break(1u);
LABEL_76:
    swift_unknownObjectRelease();
  }
  if (v20 != (v17 >> 1) - v9)
  {
    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_unknownObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
LABEL_28:
  swift_unknownObjectRelease();
  v21 = *(unsigned __int8 *)(v0 + 130);
  if ((v21 & 1) != 0 && *(_QWORD *)(v0 + 136) >= *(_QWORD *)(v0 + 72))
    v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v23 = 0.0;
  v24 = 0.0;
  if (!v22)
  {
LABEL_37:
    swift_beginAccess();
    v26 = *(_QWORD *)(v0 + 32);
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      if (v27 >= 4)
        v28 = v27 - 4;
      else
        v28 = 0;
      v10 = specialized Sequence<>.max()(v26 + 32, v28, (2 * v27) | 1);
      if ((v10 & 0x100000000) != 0)
        goto LABEL_79;
      v23 = *(float *)&v10;
    }
    if (*(float *)(v0 + 144) >= v24)
    {
      v29 = 1;
      v30 = *(_QWORD *)(v5 + 16);
      if (v30)
      {
LABEL_45:
        if (v30 >= 8)
          v31 = v30 - 8;
        else
          v31 = 0;
        v32 = specialized Sequence<>.max()(v5 + 32, v31, (2 * v30) | 1);
        LOBYTE(v10) = swift_release();
        if ((v32 & 0x100000000) != 0)
          goto LABEL_80;
        v33 = *(float *)&v32;
        if (*(_QWORD *)(v18 + 16))
        {
LABEL_50:
          swift_bridgeObjectRetain();
          v34 = specialized Sequence.suffix(_:)(8, v18);
          v35 = *(_QWORD *)(v34 + 16);
          if (!v35)
          {
            swift_release();
            v37 = 0.0;
            goto LABEL_64;
          }
          if (v35 == 1)
          {
            v36 = 0;
            v37 = 0.0;
          }
          else
          {
            v36 = v35 & 0x7FFFFFFFFFFFFFFELL;
            v39 = (float *)(v34 + 36);
            v37 = 0.0;
            v40 = v35 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              v37 = (float)(v37 + *(v39 - 1)) + *v39;
              v39 += 2;
              v40 -= 2;
            }
            while (v40);
            if (v35 == v36)
              goto LABEL_63;
          }
          v41 = v35 - v36;
          v42 = (float *)(v34 + 4 * v36 + 32);
          do
          {
            v43 = *v42++;
            v37 = v37 + v43;
            --v41;
          }
          while (v41);
LABEL_63:
          swift_release();
LABEL_64:
          swift_bridgeObjectRelease();
          v38 = v37 / (float)v35;
          if ((*(_BYTE *)(v0 + 129) & 1) == 0)
            goto LABEL_71;
LABEL_65:
          if (v33 > 0.006)
          {
            v44 = v38 <= 2.2 && v29;
            if (((v21 | v44) & 1) == 0)
              goto LABEL_70;
            goto LABEL_72;
          }
LABEL_71:
          if (((v21 | v29) & 1) == 0)
          {
LABEL_70:
            LOBYTE(v10) = 2 * (*(_QWORD *)(v0 + 56) >= *(_QWORD *)(v0 + 152));
            goto LABEL_73;
          }
LABEL_72:
          LOBYTE(v10) = 0;
          goto LABEL_73;
        }
LABEL_55:
        swift_release();
        v38 = 0.0;
        if ((*(_BYTE *)(v0 + 129) & 1) == 0)
          goto LABEL_71;
        goto LABEL_65;
      }
    }
    else
    {
      v29 = *(float *)(v0 + 148) >= v23;
      v30 = *(_QWORD *)(v5 + 16);
      if (v30)
        goto LABEL_45;
    }
    swift_release();
    v33 = 0.0;
    if (*(_QWORD *)(v18 + 16))
      goto LABEL_50;
    goto LABEL_55;
  }
  if (v22 >= 4)
    v25 = v22 - 4;
  else
    v25 = 0;
  v10 = specialized Sequence<>.max()(*(_QWORD *)v1 + 32, v25, (2 * v22) | 1);
  if ((v10 & 0x100000000) == 0)
  {
    v24 = *(float *)&v10;
    goto LABEL_37;
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
  return (char)v10;
}

uint64_t PinchGestures.updateBufferData(_:_:)(uint64_t a1, float32x4_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  Swift::UInt v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  float32x4_t *v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  _QWORD *v43;
  float v44;
  float v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __int32 v57;
  float32x4_t v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  float32x4_t *v62;
  _QWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v6 = *(_OWORD *)(a1 + 80);
    v5 = *(_OWORD *)(a1 + 96);
    v8 = *(_OWORD *)(a1 + 48);
    v7 = *(_OWORD *)(a1 + 64);
    v9 = *(_OWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 24);
    v53 = a2[15];
    v55 = a2[16];
    v49 = a2[13];
    v51 = a2[14];
    v11 = *(_QWORD *)(a1 + 112);
    v14 = a1 + 120;
    v12 = *(_QWORD *)(a1 + 120);
    v13 = *(_QWORD *)(v14 + 8);
    v63[0] = result;
    v63[1] = v10;
    v64 = v9;
    v65 = v8;
    v66 = v7;
    v67 = v6;
    v68 = v5;
    v69 = v11;
    v70 = v12;
    v71 = v13 & 0x101;
    v72 = HIDWORD(v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HandPose.init(_:from:)((uint64_t)v63, (uint64_t)&v73, v49, v51, v53, v55);
    v15 = v74;
    v16 = v2[24];
    v48 = *(_QWORD *)(v16 + 16);
    if (v48)
    {
      v17 = v2 + 20;
      v18 = v2 + 21;
      v50 = v16 + 32;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      result = swift_beginAccess();
      v19 = 0;
      while (v19 < *(_QWORD *)(v16 + 16))
      {
        v22 = *(_QWORD *)(v50 + 8 * v19);
        v23 = *v17;
        if (!*(_QWORD *)(*v17 + 16)
          || (v24 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v50 + 8 * v19)), (v25 & 1) == 0)
          || (v26 = *v18, !*(_QWORD *)(*v18 + 16))
          || (v27 = *(float32x4_t **)(*(_QWORD *)(v23 + 56) + 8 * v24),
              result = specialized __RawDictionaryStorage.find<A>(_:)(v22),
              (v28 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v73 = 0;
          v74 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          v46._object = (void *)0x800000023D9D1A70;
          v46._countAndFlagsBits = 0xD000000000000023;
          String.append(_:)(v46);
          v62 = (float32x4_t *)v22;
          type metadata accessor for ARVinoJointIndexes(0);
          _print_unlocked<A, B>(_:_:)();
          v47._countAndFlagsBits = 46;
          v47._object = (void *)0xE100000000000000;
          String.append(_:)(v47);
          v75 = MEMORY[0x24BEE0D00];
          specialized static HLog.E(file:function:line:_:_:)(0xD000000000000082, 0x800000023D9D19E0, 395, (uint64_t)&v73, MEMORY[0x24BEE4AF8]);
          return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v73);
        }
        v29 = *(_QWORD **)(*(_QWORD *)(v26 + 56) + 8 * result);
        v61 = v29;
        if ((v22 & 0x8000000000000000) != 0)
          goto LABEL_34;
        if (v22 >= *(_QWORD *)(v15 + 16))
          goto LABEL_35;
        v56 = *(float32x4_t *)(v15 + 32 + 32 * v22 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[1].i64[0] + 1, 1, v27);
        v31 = v27[1].u64[0];
        v30 = v27[1].u64[1];
        if (v31 >= v30 >> 1)
          v27 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v27);
        v27[1].i64[0] = v31 + 1;
        v27[v31 + 2] = v56;
        v62 = v27;
        result = (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        v32 = (uint64_t)v62;
        if (v62[1].i64[0] < 8uLL)
          goto LABEL_36;
        v33 = 0;
        v35 = v62[8];
        v34 = v62[9];
        *(_QWORD *)&v36 = 0;
        DWORD2(v36) = 0;
        HIDWORD(v36) = v53.i32[3];
        v57 = v53.i32[3];
        while (1)
        {
          v58 = v35;
          v44 = *(float *)((unint64_t)&v58 & 0xFFFFFFFFFFFFFFF3 | (4 * (v33 & 3)));
          v59 = v36;
          v45 = *(float *)((unint64_t)&v59 & 0xFFFFFFFFFFFFFFF3 | (4 * (v33 & 3)));
          v37 = v44 == v45;
          if (v33 == 2)
            break;
          while (1)
          {
            ++v33;
            if (v37)
              break;
            if (v33 == 2)
              goto LABEL_21;
            v37 = 0;
          }
        }
        if (v44 != v45)
        {
LABEL_21:
          v52 = v35;
          v54 = v34;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
          v39 = v29[2];
          v38 = v29[3];
          v41 = v52;
          v40 = v54;
          if (v39 >= v38 >> 1)
          {
            v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v29);
            v41 = v52;
            v40 = v54;
            v29 = v43;
          }
          v42 = vsubq_f32(v40, v41);
          v42.i32[3] = 0;
          v29[2] = v39 + 1;
          *(float32x4_t *)&v29[2 * v39 + 4] = v42;
          v61 = v29;
          specialized Array.replaceSubrange<A>(_:with:)(0, 1);
          v29 = v61;
        }
        ++v19;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v60 = *v17;
        *v17 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v22, isUniquelyReferenced_nonNull_native);
        *v17 = v60;
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_beginAccess();
        v21 = swift_isUniquelyReferenced_nonNull_native();
        v60 = *v18;
        *v18 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v29, v22, v21);
        *v18 = v60;
        swift_bridgeObjectRelease();
        swift_endAccess();
        result = swift_bridgeObjectRelease();
        v53.i32[3] = v57;
        if (v19 == v48)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t PinchGestures.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PinchGestures.__deallocating_deinit()
{
  PinchGestures.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchGestures()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PinchGestures.GestureClass()
{
  return &type metadata for PinchGestures.GestureClass;
}

uint64_t storeEnumTagSinglePayload for PinchGestures.GestureClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23D823D80 + 4 * byte_23D9B4635[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23D823DB4 + 4 * byte_23D9B4630[v4]))();
}

uint64_t sub_23D823DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D823DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D823DC4);
  return result;
}

uint64_t sub_23D823DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D823DD8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23D823DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D823DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PinchGestures.HandMovementDirection()
{
  return &type metadata for PinchGestures.HandMovementDirection;
}

unint64_t lazy protocol witness table accessor for type PinchGestures.HandMovementDirection and conformance PinchGestures.HandMovementDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchGestures.HandMovementDirection and conformance PinchGestures.HandMovementDirection;
  if (!lazy protocol witness table cache variable for type PinchGestures.HandMovementDirection and conformance PinchGestures.HandMovementDirection)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchGestures.HandMovementDirection, &type metadata for PinchGestures.HandMovementDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchGestures.HandMovementDirection and conformance PinchGestures.HandMovementDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PinchGestures.GestureClass and conformance PinchGestures.GestureClass()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchGestures.GestureClass and conformance PinchGestures.GestureClass;
  if (!lazy protocol witness table cache variable for type PinchGestures.GestureClass and conformance PinchGestures.GestureClass)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchGestures.GestureClass, &type metadata for PinchGestures.GestureClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchGestures.GestureClass and conformance PinchGestures.GestureClass);
  }
  return result;
}

uint64_t specialized ContiguousArray.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  int isUniquelyReferenced_nonNull_native;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t result;
  uint64_t *v46;
  int64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);

  v58 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v62 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v9);
  v61 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes??);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v57 = (uint64_t)v56 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)v56 - v20;
  v22 = a4 >> 1;
  v59 = a3;
  v23 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v24 = *v4;
  v25 = *(_QWORD *)(*v4 + 16);
  v26 = v25 + v23;
  if (__OFADD__(v25, v23))
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v63 = v22;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v24;
  if (!isUniquelyReferenced_nonNull_native || (v28 = *(_QWORD *)(v24 + 24) >> 1, v28 < v26))
  {
    if (v25 <= v26)
      v29 = v25 + v23;
    else
      v29 = v25;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v29, 1);
    v24 = *v4;
    v28 = *(_QWORD *)(*v4 + 24) >> 1;
  }
  v30 = *(_QWORD *)(v24 + 16);
  v31 = v28 - v30;
  if (v63 == v59)
  {
    if (v23 <= 0)
    {
      v32 = v59;
      if (v31)
        return swift_unknownObjectRelease();
      goto LABEL_23;
    }
    goto LABEL_47;
  }
  if (v31 < v23)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v23 < 0)
    goto LABEL_50;
  v33 = *(_QWORD *)(v62 + 72);
  v34 = v24 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80)) + v33 * v30;
  v35 = v58 + v33 * v59;
  if (v35 < v34 + v33 * v23 && v34 < v35 + v33 * v23)
    goto LABEL_50;
  swift_arrayInitWithCopy();
  if (!v23)
  {
    v32 = v63;
    if (!v31)
      goto LABEL_23;
    return swift_unknownObjectRelease();
  }
  v37 = *(_QWORD *)(v24 + 16);
  v38 = __OFADD__(v37, v23);
  v39 = v37 + v23;
  v32 = v63;
  if (v38)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(_QWORD *)(v24 + 16) = v39;
  if (v23 != v31)
    return swift_unknownObjectRelease();
LABEL_23:
  v56[1] = a1;
  v40 = *(_QWORD *)(v24 + 16);
  v41 = v62;
  v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
  v60(v21, 1, 1, v8);
  v42 = v57;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v21, v57, &demangling cache variable for type metadata for DerivedHandAttributes??);
  v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  v43 = v64(v42, 1, v8);
  v44 = (uint64_t)v61;
  if (v43 != 1)
  {
    v46 = &demangling cache variable for type metadata for DerivedHandAttributes??;
    do
    {
      v49 = v46;
      outlined destroy of Coordinate3DPB?(v42, v46);
      v50 = *v4;
      v51 = *(_QWORD *)(*v4 + 24);
      v47 = v51 >> 1;
      if ((uint64_t)(v51 >> 1) < v40 + 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v40 + 1, 1);
        v50 = *v4;
        v47 = *(_QWORD *)(*v4 + 24) >> 1;
      }
      swift_retain();
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v21, (uint64_t)v14, v49);
      if (v64((uint64_t)v14, 1, v8) != 1)
      {
        if (v40 > v47)
          v47 = v40;
        do
        {
          outlined init with take of DerivedHandAttributes?((uint64_t)v14, v44);
          if (v47 == v40)
          {
            outlined destroy of Coordinate3DPB?(v44, &demangling cache variable for type metadata for DerivedHandAttributes?);
            swift_release();
            v40 = v47;
            goto LABEL_27;
          }
          outlined destroy of Coordinate3DPB?((uint64_t)v21, v49);
          v54 = v44;
          v55 = *(_QWORD *)(v62 + 72);
          outlined init with take of DerivedHandAttributes?(v54, v50+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ v55 * v40);
          if (v32 == v63)
          {
            v52 = 1;
            v32 = v63;
          }
          else
          {
            if (v32 < v59 || v32 >= v63)
            {
              __break(1u);
              goto LABEL_45;
            }
            outlined init with copy of (Int32, Matrix2dPB)(v58 + v55 * v32, (uint64_t)v21, &demangling cache variable for type metadata for DerivedHandAttributes?);
            v52 = 0;
            ++v32;
          }
          v60(v21, v52, 1, v8);
          outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v21, (uint64_t)v14, v49);
          v53 = v64((uint64_t)v14, 1, v8);
          ++v40;
          v44 = (uint64_t)v61;
        }
        while (v53 != 1);
      }
      swift_release();
      outlined destroy of Coordinate3DPB?((uint64_t)v14, v49);
      v47 = v40;
LABEL_27:
      *(_QWORD *)(*v4 + 16) = v47;
      v42 = v57;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v21, v57, v49);
      v48 = v64(v42, 1, v8);
      v46 = v49;
    }
    while (v48 != 1);
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v21, &demangling cache variable for type metadata for DerivedHandAttributes??);
  swift_unknownObjectRelease();
  return outlined destroy of Coordinate3DPB?(v42, &demangling cache variable for type metadata for DerivedHandAttributes??);
}

{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v7;
  if (!(_DWORD)result || v9 > *(_QWORD *)(v7 + 24) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1);
      v7 = *v4;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = *(_QWORD *)(v7 + 16);
  if ((*(_QWORD *)(v7 + 24) >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (char *)(v7 + 4 * v14 + 32);
  v16 = (char *)(a2 + 4 * a3);
  if (v16 < &v15[4 * v6] && v15 < &v16[4 * v6])
    goto LABEL_27;
  result = (uint64_t)memcpy(v15, v16, 4 * v6);
  if (!v6)
  {
LABEL_22:
    *v4 = v7;
    return result;
  }
  v18 = *(_QWORD *)(v7 + 16);
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    *(_QWORD *)(v7 + 16) = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_AG_Says5SIMD3VySfGGts5NeverOTg5037_s5Hands13PinchGesturesC5resetyyFSo18def7V_Says5G14VySfGGtAFXEfU_5Hands0kL0CTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v15;
    v6 = (uint64_t *)(a1 + 32);
    v14 = *(_OWORD *)(a2 + 176);
    do
    {
      v8 = *v6++;
      v7 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v9 + 16) = 8;
      *(_OWORD *)(v9 + 32) = v14;
      *(_OWORD *)(v9 + 48) = v14;
      *(_OWORD *)(v9 + 64) = v14;
      *(_OWORD *)(v9 + 80) = v14;
      *(_OWORD *)(v9 + 96) = v14;
      *(_OWORD *)(v9 + 112) = v14;
      *(_OWORD *)(v9 + 128) = v14;
      *(_OWORD *)(v9 + 144) = v14;
      v11 = *(_QWORD *)(v15 + 16);
      v10 = *(_QWORD *)(v15 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v15 + 16) = v11 + 1;
      v12 = v15 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized PinchGestures.init(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  _QWORD *v3;

  *(_BYTE *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 20) = 0;
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 40) = v3;
  *(_DWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 88) = xmmword_23D9B1300;
  *(_OWORD *)(v1 + 104) = xmmword_23D9B4920;
  *(_QWORD *)(v1 + 120) = 0x400CCCCD3BC49BA6;
  *(_WORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 130) = 0;
  *(_QWORD *)(v1 + 136) = 1;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 2;
  *(_QWORD *)(v1 + 160) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *(_QWORD *)(v1 + 168) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *(_OWORD *)(v1 + 176) = 0u;
  *(_QWORD *)(v1 + 192) = &outlined read-only object #0 of PinchGestures.init(_:);
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_QWORD *)(v1 + 272) = 1028443341;
  *(_QWORD *)(v1 + 280) = &outlined read-only object #1 of PinchGestures.init(_:);
  *(_DWORD *)(v1 + 288) = 1008981770;
  *(_QWORD *)(v1 + 296) = v3;
  *(_QWORD *)(v1 + 304) = v3;
  *(_QWORD *)(v1 + 312) = v3;
  *(_DWORD *)(v1 + 320) = 1065185444;
  *(_QWORD *)(v1 + 328) = 4;
  *(_BYTE *)(v1 + 336) = 0;
  PinchGestures.reconfig(_:)(a1);
  return v1;
}

unint64_t specialized PinchGestures.GestureClass.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 4)
    return 4;
  else
    return v5;
}

uint64_t outlined assign with take of DerivedHandAttributes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for DetectionCanonicalizationDataPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_DWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (_DWORD *)((char *)a1 + v9);
    v11 = (_DWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for Coordinate3DPB(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v13 + 48);
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v10[2] = v11[2];
      v8((uint64_t *)((char *)v10 + *(int *)(v12 + 28)), (uint64_t *)((char *)v11 + *(int *)(v12 + 28)), v7);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = *(int *)(a3 + 24);
    v18 = (_DWORD *)((char *)a1 + v17);
    v19 = (_DWORD *)((char *)a2 + v17);
    if (v14(v19, 1, v12))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v8((uint64_t *)((char *)v18 + *(int *)(v12 + 28)), (uint64_t *)((char *)v19 + *(int *)(v12 + 28)), v7);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for DetectionCanonicalizationDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Coordinate3DPB(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v10(v5 + *(int *)(v6 + 28), v4);
  v8 = a1 + *(int *)(a2 + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8 + *(int *)(v6 + 28), v4);
  return result;
}

char *initializeWithCopy for DetectionCanonicalizationDataPB(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Coordinate3DPB(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *((_DWORD *)v9 + 2) = *((_DWORD *)v10 + 2);
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  if (v13(v17, 1, v11))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_DWORD *)v16 + 2) = *((_DWORD *)v17 + 2);
    v7(&v16[*(int *)(v11 + 28)], &v17[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for DetectionCanonicalizationDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage();
  v24 = *(_QWORD *)(v6 - 8);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24);
  v23(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for Coordinate3DPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *((_DWORD *)v8 + 1) = *((_DWORD *)v9 + 1);
      *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(&v8[*(int *)(v10 + 28)], &v9[*(int *)(v10 + 28)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of Coordinate3DPB((uint64_t)v8);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *((_DWORD *)v8 + 1) = *((_DWORD *)v9 + 1);
  *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
  v23((uint64_t)&v8[*(int *)(v10 + 28)], (uint64_t)&v9[*(int *)(v10 + 28)], v6);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (_DWORD *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = v12((char *)(a1 + v16), 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      *v17 = *(_DWORD *)v18;
      v17[1] = *((_DWORD *)v18 + 1);
      v17[2] = *((_DWORD *)v18 + 2);
      v23((uint64_t)v17 + *(int *)(v10 + 28), (uint64_t)&v18[*(int *)(v10 + 28)], v6);
      return a1;
    }
    outlined destroy of Coordinate3DPB((uint64_t)v17);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *v17 = *(_DWORD *)v18;
  v17[1] = *((_DWORD *)v18 + 1);
  v17[2] = *((_DWORD *)v18 + 2);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))((char *)v17 + *(int *)(v10 + 28), &v18[*(int *)(v10 + 28)], v6);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
  return a1;
}

uint64_t outlined destroy of Coordinate3DPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Coordinate3DPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for DetectionCanonicalizationDataPB(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Coordinate3DPB(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *((_DWORD *)v9 + 2) = *((_DWORD *)v10 + 2);
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  if (v13(v17, 1, v11))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_DWORD *)v16 + 2) = *((_DWORD *)v17 + 2);
    v7(&v16[*(int *)(v11 + 28)], &v17[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for DetectionCanonicalizationDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage();
  v24 = *(_QWORD *)(v6 - 8);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v23(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for Coordinate3DPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v8[*(int *)(v10 + 28)], &v9[*(int *)(v10 + 28)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of Coordinate3DPB((uint64_t)v8);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
  v23((uint64_t)&v8[*(int *)(v10 + 28)], (uint64_t)&v9[*(int *)(v10 + 28)], v6);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (_DWORD *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = v12((char *)(a1 + v16), 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[2] = *((_DWORD *)v18 + 2);
      v23((uint64_t)v17 + *(int *)(v10 + 28), (uint64_t)&v18[*(int *)(v10 + 28)], v6);
      return a1;
    }
    outlined destroy of Coordinate3DPB((uint64_t)v17);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[2] = *((_DWORD *)v18 + 2);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v17 + *(int *)(v10 + 28), &v18[*(int *)(v10 + 28)], v6);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionCanonicalizationDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D82529C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for DetectionCanonicalizationDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D825320(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DetectionCanonicalizationDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DetectionCanonicalizationDataPB);
}

void type metadata completion function for DetectionCanonicalizationDataPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Coordinate3DPB?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for Coordinate3DPB?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Coordinate3DPB?)
  {
    type metadata accessor for Coordinate3DPB(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for DetectionResultPB(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    v9 = a2[11];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v10 = a3[17];
    v23 = (uint64_t)a2 + v10;
    v24 = a1 + v10;
    *(_QWORD *)(a1 + 88) = v9;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v24, v23, v11);
    v13 = a3[18];
    v14 = a3[19];
    v15 = v7 + v13;
    v16 = (uint64_t)a2 + v13;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
    v17 = v7 + v14;
    v18 = (uint64_t)a2 + v14;
    *(_DWORD *)v17 = *(_DWORD *)v18;
    *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
    v19 = a3[20];
    v20 = v7 + v19;
    v21 = (uint64_t)a2 + v19;
    *(_DWORD *)v20 = *(_DWORD *)v21;
    *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  }
  return v7;
}

uint64_t destroy for DetectionResultPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 68);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for DetectionResultPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v9 = a3[17];
  v22 = a2 + v9;
  v23 = a1 + v9;
  *(_QWORD *)(a1 + 88) = v8;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v23, v22, v10);
  v12 = a3[18];
  v13 = a3[19];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  v18 = a3[20];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t assignWithCopy for DetectionResultPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = a3[17];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[18];
  v13 = a1 + v12;
  v14 = (int *)(a2 + v12);
  v15 = *v14;
  *(_BYTE *)(v13 + 4) = *((_BYTE *)v14 + 4);
  *(_DWORD *)v13 = v15;
  v16 = a3[19];
  v17 = a1 + v16;
  v18 = a2 + v16;
  LOBYTE(v15) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = v15;
  v19 = a3[20];
  v20 = a1 + v19;
  v21 = a2 + v19;
  LOBYTE(v15) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v15;
  return a1;
}

uint64_t initializeWithTake for DetectionResultPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = a3[17];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[18];
  v13 = a3[19];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  v18 = a3[20];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t assignWithTake for DetectionResultPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v6 = a3[17];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[18];
  v11 = a3[19];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[20];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionResultPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D825BC0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 68)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DetectionResultPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D825C48(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 68)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DetectionResultPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DetectionResultPB);
}

uint64_t type metadata completion function for DetectionResultPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DetectionResultsByChiralityPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for DetectionResultsByChiralityPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for DetectionResultsByChiralityPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for DetectionResultsByChiralityPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for DetectionResultsByChiralityPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionResultsByChiralityPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D82601C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DetectionResultsByChiralityPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D8260A4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DetectionResultsByChiralityPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for DetectionResultsByChiralityPB);
}

uint64_t type metadata completion function for DetectionResultsByChiralityPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectionType()
{
  return &type metadata for DetectionType;
}

uint64_t DetectionResultPB.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = v2;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v2;
  *(_BYTE *)(a1 + 96) = 0;
  v3 = (int *)type metadata accessor for DetectionResultPB(0);
  result = UnknownStorage.init()();
  v5 = a1 + v3[18];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v3[19];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v3[20];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance DetectionType@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  uint64_t v3;

  v2 = result == 0;
  if (result == 3)
    v3 = 1;
  else
    v3 = result;
  *(_QWORD *)a2 = v3;
  if (result == 3)
    v2 = 1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance DetectionType()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 3;
  if (!*(_QWORD *)v0)
    v1 = 0;
  if (v0[8])
    return v1;
  else
    return *(_QWORD *)v0;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance DetectionType@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  char v5;

  v2 = *result;
  v3 = *result == 0;
  v4 = *result == 3;
  if (*result == 3)
    v2 = 1;
  *(_QWORD *)a2 = v2;
  v5 = v4 || v3;
  *(_BYTE *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DetectionType(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)v1;
  v3 = 3;
  if (!*(_QWORD *)v1)
    v3 = 0;
  if (*(_BYTE *)(v1 + 8))
    v2 = v3;
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionType()
{
  lazy protocol witness table accessor for type DetectionType and conformance DetectionType();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DetectionType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v3 = 3;
  else
    v3 = 0;
  if (*(_BYTE *)(a1 + 8))
    v2 = v3;
  if (*(_QWORD *)a2)
    v4 = 3;
  else
    v4 = 0;
  if (!*(_BYTE *)(a2 + 8))
    v4 = *(_QWORD *)a2;
  return v2 == v4;
}

unint64_t lazy protocol witness table accessor for type DetectionType and conformance DetectionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DetectionType and conformance DetectionType;
  if (!lazy protocol witness table cache variable for type DetectionType and conformance DetectionType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for DetectionType, &type metadata for DetectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetectionType and conformance DetectionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DetectionType and conformance DetectionType;
  if (!lazy protocol witness table cache variable for type DetectionType and conformance DetectionType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for DetectionType, &type metadata for DetectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetectionType and conformance DetectionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DetectionType and conformance DetectionType;
  if (!lazy protocol witness table cache variable for type DetectionType and conformance DetectionType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for DetectionType, &type metadata for DetectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetectionType and conformance DetectionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DetectionType and conformance DetectionType;
  if (!lazy protocol witness table cache variable for type DetectionType and conformance DetectionType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for DetectionType, &type metadata for DetectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetectionType and conformance DetectionType);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance DetectionType@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  *a1 = static DetectionType.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionType._protobuf_nameMap, a1);
}

uint64_t DetectionCanonicalizationDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in DetectionCanonicalizationDataPB.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      closure #1 in DetectionCanonicalizationDataPB.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in DetectionCanonicalizationDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DetectionCanonicalizationDataPB(0);
  type metadata accessor for Coordinate3DPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in DetectionCanonicalizationDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DetectionCanonicalizationDataPB(0);
  type metadata accessor for Coordinate3DPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DetectionCanonicalizationDataPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DetectionCanonicalizationDataPB.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in DetectionCanonicalizationDataPB.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DetectionCanonicalizationDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Coordinate3DPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  outlined init with copy of Coordinate3DPB?(a1 + *(int *)(v11 + 20), (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v5, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Coordinate3DPB((uint64_t)v5, (uint64_t)v10);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Coordinate3DPB((uint64_t)v10);
}

uint64_t closure #2 in DetectionCanonicalizationDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Coordinate3DPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  outlined init with copy of Coordinate3DPB?(a1 + *(int *)(v11 + 24), (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v5, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Coordinate3DPB((uint64_t)v5, (uint64_t)v10);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Coordinate3DPB((uint64_t)v10);
}

uint64_t protocol witness for Message.init() in conformance DetectionCanonicalizationDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for Coordinate3DPB(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v7(v4, 1, 1, v5);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(a2 + *(int *)(a1 + 24), 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DetectionCanonicalizationDataPB()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DetectionCanonicalizationDataPB()
{
  return DetectionCanonicalizationDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DetectionCanonicalizationDataPB()
{
  return DetectionCanonicalizationDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DetectionCanonicalizationDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionCanonicalizationDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionCanonicalizationDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DetectionCanonicalizationDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionCanonicalizationDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
  return Message.hash(into:)();
}

uint64_t DetectionResultPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 6:
        case 15:
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          break;
        case 3:
        case 4:
        case 10:
        case 12:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 5:
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
          goto LABEL_7;
        case 7:
          lazy protocol witness table accessor for type DetectionType and conformance DetectionType();
LABEL_7:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 8:
          type metadata accessor for Coordinate2DPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 9:
        case 14:
          type metadata accessor for DetectionResultPB(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 11:
        case 16:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 13:
          type metadata accessor for DetectionResultPB(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DetectionResultPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
    {
      if (*(float *)(v0 + 16) == 0.0
        || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        if (*(float *)(v0 + 20) == 0.0
          || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0 + 24)
            || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
                result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16)
              || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
            {
              if (!*(_QWORD *)(v0 + 48)
                || (lazy protocol witness table accessor for type DetectionType and conformance DetectionType(),
                    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                    !v1))
              {
                if (!*(_QWORD *)(*(_QWORD *)(v0 + 64) + 16)
                  || (type metadata accessor for Coordinate2DPB(0),
                      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
                {
                  result = closure #1 in DetectionResultPB.traverse<A>(visitor:)(v0);
                  if (!v1)
                  {
                    if (*(float *)(v0 + 72) != 0.0)
                      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
                    if (*(_BYTE *)(v0 + 76) == 1)
                      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
                    if (*(float *)(v0 + 80) != 0.0)
                      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
                    closure #2 in DetectionResultPB.traverse<A>(visitor:)(v0);
                    closure #3 in DetectionResultPB.traverse<A>(visitor:)(v0);
                    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
                      dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)();
                    if (*(_BYTE *)(v0 + 96) == 1)
                      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
                    type metadata accessor for DetectionResultPB(0);
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in DetectionResultPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DetectionResultPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 72) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in DetectionResultPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DetectionResultPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 76) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DetectionResultPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DetectionResultPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 80) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DetectionResultPB()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance DetectionResultPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 68);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance DetectionResultPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 68);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance DetectionResultPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DetectionResultPB()
{
  return DetectionResultPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DetectionResultPB()
{
  return DetectionResultPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DetectionResultPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionResultPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionResultPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DetectionResultPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionResultPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
  return Message.hash(into:)();
}

uint64_t DetectionResultsByChiralityPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
      {
        type metadata accessor for DetectionResultPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DetectionResultsByChiralityPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for DetectionResultPB(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for DetectionResultPB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for DetectionResultsByChiralityPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance DetectionResultsByChiralityPB@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DetectionResultsByChiralityPB()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DetectionResultsByChiralityPB()
{
  return DetectionResultsByChiralityPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DetectionResultsByChiralityPB()
{
  return DetectionResultsByChiralityPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DetectionResultsByChiralityPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DetectionResultsByChiralityPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DetectionResultsByChiralityPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DetectionResultsByChiralityPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DetectionResultsByChiralityPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in DetectionResultsByChiralityPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
}

uint64_t base witness table accessor for Message in DetectionResultsByChiralityPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
}

uint64_t base witness table accessor for Hashable in DetectionResultsByChiralityPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
}

uint64_t base witness table accessor for Equatable in DetectionResultPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
}

uint64_t base witness table accessor for Message in DetectionResultPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
}

uint64_t base witness table accessor for Hashable in DetectionResultPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
}

uint64_t base witness table accessor for Equatable in DetectionCanonicalizationDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
}

uint64_t base witness table accessor for Message in DetectionCanonicalizationDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
}

uint64_t base witness table accessor for Hashable in DetectionCanonicalizationDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DetectionCanonicalizationDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
}

unint64_t lazy protocol witness table accessor for type [DetectionType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DetectionType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DetectionType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DetectionType]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DetectionType] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DetectionResultPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DetectionResultsByChiralityPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
}

uint64_t specialized static DetectionCanonicalizationDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  char v57;
  _BYTE *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v64;
  _BYTE *v65;
  void (*v66)(_BYTE *, uint64_t);
  _BYTE v67[4];
  int v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;

  v4 = type metadata accessor for UnknownStorage();
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v70 = &v67[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7, v8);
  v69 = &v67[-v9];
  v10 = type metadata accessor for Coordinate3DPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v74 = &v67[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v77 = &v67[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = &v67[-v19];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v21, v22);
  v73 = &v67[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v24, v25);
  v75 = &v67[-v26];
  MEMORY[0x24BDAC7A8](v27, v28);
  v76 = &v67[-v29];
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = &v67[-v32];
  MEMORY[0x24BDAC7A8](v34, v35);
  v37 = &v67[-v36];
  MEMORY[0x24BDAC7A8](v38, v39);
  v41 = &v67[-v40];
  v42 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  v43 = *(int *)(v42 + 20);
  v78 = a1;
  outlined init with copy of Coordinate3DPB?(a1 + v43, (uint64_t)v41);
  v44 = *(int *)(v42 + 20);
  v79 = a2;
  outlined init with copy of Coordinate3DPB?(a2 + v44, (uint64_t)v37);
  v45 = (uint64_t)&v20[*(int *)(v14 + 48)];
  outlined init with copy of Coordinate3DPB?((uint64_t)v41, (uint64_t)v20);
  outlined init with copy of Coordinate3DPB?((uint64_t)v37, v45);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v46((uint64_t)v20, 1, v10) != 1)
  {
    outlined init with copy of Coordinate3DPB?((uint64_t)v20, (uint64_t)v33);
    if (v46(v45, 1, v10) != 1)
    {
      v48 = v74;
      outlined init with take of Coordinate3DPB(v45, (uint64_t)v74);
      v68 = static Coordinate3DPB.== infix(_:_:)(v33, v48);
      outlined destroy of Coordinate3DPB((uint64_t)v48);
      outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Coordinate3DPB((uint64_t)v33);
      outlined destroy of Coordinate3DPB?((uint64_t)v20, &demangling cache variable for type metadata for Coordinate3DPB?);
      if ((v68 & 1) == 0)
        goto LABEL_15;
      goto LABEL_8;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB((uint64_t)v33);
LABEL_6:
    v47 = (uint64_t)v20;
LABEL_14:
    outlined destroy of Coordinate3DPB?(v47, &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
    goto LABEL_15;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v46(v45, 1, v10) != 1)
    goto LABEL_6;
  outlined destroy of Coordinate3DPB?((uint64_t)v20, &demangling cache variable for type metadata for Coordinate3DPB?);
LABEL_8:
  v49 = v78;
  v50 = v76;
  outlined init with copy of Coordinate3DPB?(v78 + *(int *)(v42 + 24), (uint64_t)v76);
  v51 = v79;
  v52 = v79 + *(int *)(v42 + 24);
  v53 = v75;
  outlined init with copy of Coordinate3DPB?(v52, (uint64_t)v75);
  v54 = v77;
  v55 = (uint64_t)&v77[*(int *)(v14 + 48)];
  outlined init with copy of Coordinate3DPB?((uint64_t)v50, (uint64_t)v77);
  outlined init with copy of Coordinate3DPB?((uint64_t)v53, v55);
  if (v46((uint64_t)v54, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v50, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v46(v55, 1, v10) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v54, &demangling cache variable for type metadata for Coordinate3DPB?);
LABEL_18:
      v62 = v71;
      v61 = v72;
      v63 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v71 + 16);
      v64 = v69;
      v63(v69, v49, v72);
      v65 = v70;
      v63(v70, v51, v61);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v57 = dispatch thunk of static Equatable.== infix(_:_:)();
      v66 = *(void (**)(_BYTE *, uint64_t))(v62 + 8);
      v66(v65, v61);
      v66(v64, v61);
      return v57 & 1;
    }
    goto LABEL_13;
  }
  v56 = v73;
  outlined init with copy of Coordinate3DPB?((uint64_t)v54, (uint64_t)v73);
  if (v46(v55, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v50, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB((uint64_t)v56);
LABEL_13:
    v47 = (uint64_t)v54;
    goto LABEL_14;
  }
  v59 = v74;
  outlined init with take of Coordinate3DPB(v55, (uint64_t)v74);
  v60 = static Coordinate3DPB.== infix(_:_:)(v56, v59);
  outlined destroy of Coordinate3DPB((uint64_t)v59);
  outlined destroy of Coordinate3DPB?((uint64_t)v53, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v50, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB((uint64_t)v56);
  outlined destroy of Coordinate3DPB?((uint64_t)v54, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v60 & 1) != 0)
    goto LABEL_18;
LABEL_15:
  v57 = 0;
  return v57 & 1;
}

uint64_t specialized static DetectionResultsByChiralityPB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    v13 = type metadata accessor for DetectionResultsByChiralityPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static DetectionResultPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  char v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  float *v28;
  char v29;
  float *v30;
  int v31;
  char v32;
  int *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  int *v39;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v38 - v11;
  if (!specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2)
    || !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    || *(float *)(a1 + 16) != *(float *)(a2 + 16)
    || *(float *)(a1 + 20) != *(float *)(a2 + 20)
    || (specialized == infix<A>(_:_:)(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_QWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 32)) & 1) == 0|| !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)))
  {
    goto LABEL_42;
  }
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = 3;
  if (!v13)
    v15 = 0;
  if (*(_BYTE *)(a1 + 56))
    v13 = v15;
  if (*(_BYTE *)(a2 + 56) == 1)
  {
    if (v14)
    {
      if (v13 != 3)
        goto LABEL_42;
    }
    else if (v13)
    {
      goto LABEL_42;
    }
  }
  else if (v13 != v14)
  {
    goto LABEL_42;
  }
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64)) & 1) != 0)
  {
    v16 = (int *)type metadata accessor for DetectionResultPB(0);
    v17 = v16[18];
    v18 = (float *)(a1 + v17);
    v19 = *(_BYTE *)(a1 + v17 + 4);
    v20 = (float *)(a2 + v17);
    v21 = *(unsigned __int8 *)(a2 + v17 + 4);
    if ((v19 & 1) != 0)
    {
      if (!v21)
        goto LABEL_42;
    }
    else
    {
      if (*v18 != *v20)
        LOBYTE(v21) = 1;
      if ((v21 & 1) != 0)
        goto LABEL_42;
    }
    if (*(float *)(a1 + 72) != *(float *)(a2 + 72)
      || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)
      || *(float *)(a1 + 80) != *(float *)(a2 + 80))
    {
      goto LABEL_42;
    }
    v22 = v16[19];
    v23 = (_DWORD *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 4);
    v25 = (_DWORD *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_42;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_42;
    }
    v27 = v16[20];
    v28 = (float *)(a1 + v27);
    v29 = *(_BYTE *)(a1 + v27 + 4);
    v30 = (float *)(a2 + v27);
    v31 = *(unsigned __int8 *)(a2 + v27 + 4);
    if ((v29 & 1) != 0)
    {
      if (!v31)
        goto LABEL_42;
    }
    else
    {
      if (*v28 != *v30)
        LOBYTE(v31) = 1;
      if ((v31 & 1) != 0)
        goto LABEL_42;
    }
    v39 = v16;
    if (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88))
      && *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
    {
      v34 = v39;
      v35 = a1 + v39[17];
      v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v36(v12, v35, v4);
      v36(v8, a2 + v34[17], v4);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v37 = *(void (**)(char *, uint64_t))(v5 + 8);
      v37(v8, v4);
      v37(v12, v4);
      return v32 & 1;
    }
  }
LABEL_42:
  v32 = 0;
  return v32 & 1;
}

uint64_t VideoDataStructs.CalibrationData.toImageCalibrationData(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __n128 v10;
  double v11;
  id v12;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  char v20;
  _OWORD v21[3];

  v2 = *a1;
  v3 = (void *)a1[4];
  v4 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(v1 + 8);
  v7 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v8 = *(_BYTE *)(v1 + 32);
  v9 = *(_OWORD *)(v1 + 64);
  v21[0] = *(_OWORD *)(v1 + 48);
  v21[1] = v9;
  v10 = *(__n128 *)(v1 + 96);
  v21[2] = *(_OWORD *)(v1 + 80);
  v17 = *(__n128 *)(v1 + 112);
  v18 = v10;
  v15 = *(__n128 *)(v1 + 144);
  v16 = *(__n128 *)(v1 + 128);
  v14 = *(__n128 *)(v1 + 160);
  v11 = *(double *)(v1 + 176);
  v19 = v6;
  v20 = v8;
  if (v2)
  {
    v12 = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = 0;
    v2 = MEMORY[0x24BEE4AF8];
  }
  type metadata accessor for ImageCalibrationData();
  swift_allocObject();
  return ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(v21, &v19, v2, (uint64_t)v3, v4, v5, v7, v18, v17, v16, v15, v14, v11);
}

__int128 *VideoDataStructs.CalibrationData.init(intrinsicCalibration:distortionParameters:cameraToHeadsetTransform:arrivalTimeStamp:imageSize:cameraModel:)@<X0>(__int128 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>, __n128 a7@<Q0>, __n128 a8@<Q1>, __n128 a9@<Q2>, __n128 a10@<Q3>, __n128 a11@<Q4>, double a12@<D5>)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v12 = *result;
  v13 = result[1];
  v14 = result[2];
  v15 = *a5;
  v16 = *((_BYTE *)a5 + 8);
  *(_QWORD *)a6 = a2;
  *(_QWORD *)(a6 + 8) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  *(_QWORD *)(a6 + 24) = v15;
  *(_BYTE *)(a6 + 32) = v16;
  *(_OWORD *)(a6 + 48) = v12;
  *(_OWORD *)(a6 + 64) = v13;
  *(_OWORD *)(a6 + 80) = v14;
  *(__n128 *)(a6 + 96) = a7;
  *(__n128 *)(a6 + 112) = a8;
  *(__n128 *)(a6 + 128) = a9;
  *(__n128 *)(a6 + 144) = a10;
  *(__n128 *)(a6 + 160) = a11;
  *(double *)(a6 + 176) = a12;
  return result;
}

uint64_t VideoDataStructs.CalibrationData.arrivalTimeStamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void VideoDataStructs.CalibrationData.cameraModel.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

__n128 VideoDataStructs.CalibrationData.intrinsicCalibration.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 48);
  v3 = *(_OWORD *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 VideoDataStructs.CalibrationData.distortionParameters.getter()
{
  __n128 *v0;

  return v0[6];
}

__n128 VideoDataStructs.CalibrationData.cameraToHeadsetTransform.getter()
{
  __n128 *v0;

  return v0[7];
}

double VideoDataStructs.CalibrationData.imageSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 176);
}

__n128 VideoDataStructs.CalibrationData.init(imageCalibrationData:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  swift_beginAccess();
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 96);
  swift_beginAccess();
  v13 = *(_OWORD *)(a1 + 112);
  swift_beginAccess();
  v11 = *(_OWORD *)(a1 + 208);
  v12 = *(_OWORD *)(a1 + 192);
  v9 = *(_OWORD *)(a1 + 224);
  v10 = *(__n128 *)(a1 + 240);
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 28);
  v5 = *(_QWORD *)(a1 + 44);
  v6 = *(_QWORD *)(a1 + 36);
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 144);
  swift_release();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = 1;
  *(_BYTE *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v15;
  *(_OWORD *)(a2 + 80) = v14;
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 112) = v12;
  *(_OWORD *)(a2 + 128) = v11;
  result = v10;
  *(_OWORD *)(a2 + 144) = v9;
  *(__n128 *)(a2 + 160) = v10;
  *(_QWORD *)(a2 + 176) = v7;
  return result;
}

uint64_t VideoDataStructs.CalibrationData.almostEquals(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x2_t v8;
  uint64_t v9;
  int v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  float32x4_t v16;
  uint32x4_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  __int128 *v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  __int128 v34;
  __int128 v35;
  float32x4_t v36;
  float32x4_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(float32x4_t *)(a1 + 64);
  v4 = *(float32x4_t *)(a1 + 80);
  v5 = *(float32x4_t *)(a1 + 128);
  v6 = *(float32x4_t *)(a1 + 144);
  v7 = *(float32x4_t *)(a1 + 160);
  v8 = *(int32x2_t *)(a1 + 176);
  v9 = *(_QWORD *)(v1 + 24) != 0;
  if (!*(_BYTE *)(v1 + 32))
    v9 = *(_QWORD *)(v1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 32);
  if (v10 == 1)
  {
    if (v2)
    {
      if (v9 != 1)
      {
LABEL_6:
        v34 = xmmword_23D9A8970;
        v35 = 0uLL;
        *(_QWORD *)&v39 = 0;
        *((_QWORD *)&v39 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(27);
        v11._countAndFlagsBits = 0xD000000000000016;
        v11._object = (void *)0x800000023D9D1D20;
        String.append(_:)(v11);
        _print_unlocked<A, B>(_:_:)();
        v12._countAndFlagsBits = 32;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        *(_QWORD *)&v38 = v2;
        BYTE8(v38) = v10;
        _print_unlocked<A, B>(_:_:)();
        v41 = MEMORY[0x24BEE0D00];
        v13 = MEMORY[0x24BEE4AF8];
        v14 = 51;
LABEL_12:
        specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000068, 0x800000023D9D1CB0, v14, (uint64_t *)&v34, (uint64_t)&v39, v13);
        v25 = &v39;
LABEL_18:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
        return 0;
      }
    }
    else if (v9)
    {
      goto LABEL_6;
    }
  }
  else if (v9 != v2)
  {
    goto LABEL_6;
  }
  v15 = vceq_s32(*(int32x2_t *)(v1 + 176), v8);
  if ((v15.i32[0] & v15.i32[1] & 1) == 0)
  {
    v34 = xmmword_23D9A8970;
    v35 = 0uLL;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v39 = 0xD000000000000014;
    *((_QWORD *)&v39 + 1) = 0x800000023D9D1D40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<UInt32>);
    lazy protocol witness table accessor for type SIMD2<UInt32> and conformance SIMD2<A>();
    v22._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 32;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    *(int32x2_t *)&v38 = v8;
    v24._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v41 = MEMORY[0x24BEE0D00];
    v13 = MEMORY[0x24BEE4AF8];
    v14 = 56;
    goto LABEL_12;
  }
  v16 = (float32x4_t)vdupq_n_s32(0x33D6BF95u);
  v17 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(*(float32x4_t *)(v1 + 64), v3)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(*(float32x4_t *)(v1 + 48), *(float32x4_t *)(a1 + 48)))), (int8x16_t)vcgeq_f32(v16, vabdq_f32(*(float32x4_t *)(v1 + 80), v4)));
  v17.i32[3] = v17.i32[2];
  if ((vminvq_u32(v17) & 0x80000000) == 0)
  {
    v39 = xmmword_23D9A8970;
    v40 = 0;
    v41 = 0;
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    v30 = v3.i64[0];
    v32 = v4;
    _StringGuts.grow(_:)(24);
    v38 = v34;
    v18._countAndFlagsBits = 0xD000000000000013;
    v18._object = (void *)0x800000023D9CF060;
    String.append(_:)(v18);
    type metadata accessor for simd_float3x3(0);
    _print_unlocked<A, B>(_:_:)();
    v19._countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    *(_QWORD *)&v35 = v30;
    v36 = v32;
    _print_unlocked<A, B>(_:_:)();
    *((_QWORD *)&v35 + 1) = MEMORY[0x24BEE0D00];
    v20 = MEMORY[0x24BEE4AF8];
    v21 = 61;
LABEL_17:
    specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000068, 0x800000023D9D1CB0, v21, (uint64_t *)&v39, (uint64_t)&v34, v20);
    v25 = &v34;
    goto LABEL_18;
  }
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(*(float32x4_t *)(v1 + 128), v5)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(*(float32x4_t *)(v1 + 112), *(float32x4_t *)(a1 + 112)))), vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(*(float32x4_t *)(v1 + 144), v6)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(*(float32x4_t *)(v1 + 160), v7))))) & 0x80000000) == 0)
  {
    v39 = xmmword_23D9A8970;
    v40 = 0;
    v41 = 0;
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    v29 = v5.i64[0];
    v31 = v6;
    v33 = v7;
    _StringGuts.grow(_:)(25);
    v38 = v34;
    v26._countAndFlagsBits = 0xD000000000000014;
    v26._object = (void *)0x800000023D9CF080;
    String.append(_:)(v26);
    type metadata accessor for simd_float4x4(0);
    _print_unlocked<A, B>(_:_:)();
    v27._countAndFlagsBits = 32;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    *(_QWORD *)&v35 = v29;
    v36 = v31;
    v37 = v33;
    _print_unlocked<A, B>(_:_:)();
    *((_QWORD *)&v35 + 1) = MEMORY[0x24BEE0D00];
    v20 = MEMORY[0x24BEE4AF8];
    v21 = 66;
    goto LABEL_17;
  }
  if (!SIMD4<>.almostEqual(to:withThreshold:)(*(float32x4_t *)(a1 + 96), 0.0000001, *(float32x4_t *)(v1 + 96)))
  {
    v34 = xmmword_23D9A8970;
    v35 = 0uLL;
    v41 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v39 = 0xD000000000000014;
    *((_QWORD *)&v39 + 1) = 0x800000023D9D1D60;
    v13 = MEMORY[0x24BEE4AF8];
    v14 = 71;
    goto LABEL_12;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type SIMD2<UInt32> and conformance SIMD2<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SIMD2<UInt32> and conformance SIMD2<A>;
  if (!lazy protocol witness table cache variable for type SIMD2<UInt32> and conformance SIMD2<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD2<UInt32>);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE40F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<UInt32> and conformance SIMD2<A>);
  }
  return result;
}

__n128 __swift_memcpy184_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VideoDataStructs.CalibrationData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 184))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VideoDataStructs.CalibrationData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 184) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VideoDataStructs.CalibrationData()
{
  return &type metadata for VideoDataStructs.CalibrationData;
}

uint64_t DecimalHistogram.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DecimalHistogram()
{
  return objc_opt_self();
}

uint64_t SchedulingData.init(protoBuf:)@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  Swift::Int32 v69;
  uint64_t v70;
  int64_t v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  _QWORD *v80;
  __int128 v81;
  unsigned int v82;
  _QWORD *v83;
  __int128 v84;
  unsigned int v85;
  _QWORD *v86;
  __int128 v87;
  _QWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  CMTimeValue v93;
  CMTimeScale timescale;
  CMTimeFlags flags;
  CMTimeEpoch v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t result;
  uint64_t v109;
  _QWORD v110[2];
  int *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  CMTimeValue value;
  CMTimeEpoch epoch;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  int v148;
  uint64_t v149;
  int v150;
  __int128 v151;
  unsigned int (*v152)(char *, uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  CMTime v157;
  uint64_t v158;
  uint64_t v159;
  CMTime v160;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v8 = (char *)v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v6, v9);
  v12 = (char *)v110 - v11;
  v14 = MEMORY[0x24BDAC7A8](v10, v13);
  v16 = (char *)v110 - v15;
  MEMORY[0x24BDAC7A8](v14, v17);
  v19 = (char *)v110 - v18;
  v20 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v142 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20, v21);
  v141 = (_QWORD *)((char *)v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x24BDAC7A8](v22, v24);
  v140 = (_QWORD *)((char *)v110 - v26);
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v139 = (_QWORD *)((char *)v110 - v29);
  MEMORY[0x24BDAC7A8](v28, v30);
  v138 = (_QWORD *)((char *)v110 - v31);
  v155 = type metadata accessor for DetectionSpecItemPB(0);
  v116 = *(_QWORD *)(v155 - 8);
  v33 = MEMORY[0x24BDAC7A8](v155, v32);
  v154 = (uint64_t)v110 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33, v35);
  v153 = (uint64_t)v110 - v36;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  v39 = MEMORY[0x24BDAC7A8](v37, v38);
  v126 = (uint64_t)v110 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39, v41);
  v43 = (char *)v110 - v42;
  v125 = type metadata accessor for CMTimeProtobuf(0);
  v124 = *(_QWORD *)(v125 - 8);
  v45 = MEMORY[0x24BDAC7A8](v125, v44);
  v123 = (_QWORD *)((char *)v110 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v45, v47);
  v122 = (_QWORD *)((char *)v110 - v48);
  v121 = type metadata accessor for DetectionSpecPB(0);
  v49 = *(_QWORD *)(v121 - 8);
  v51 = MEMORY[0x24BDAC7A8](v121, v50);
  v133 = (_QWORD *)((char *)v110 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v51, v53);
  v132 = (uint64_t)v110 - v54;
  v114 = *a1;
  v113 = a1[1];
  v55 = *((_QWORD *)a1 + 2);
  v56 = *(_QWORD *)(v55 + 16);
  if (v56)
  {
    v111 = a1;
    v112 = a2;
    v159 = MEMORY[0x24BEE4AF8];
    v57 = v55;
    swift_bridgeObjectRetain();
    v119 = v56;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56, 0);
    v58 = 0;
    v59 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
    v110[1] = v57;
    v118 = v57 + v59;
    v117 = *(_QWORD *)(v49 + 72);
    v115 = xmmword_23D9A3E30;
    v137 = v8;
    v136 = v12;
    v135 = v16;
    v134 = v19;
    v144 = v20;
    v120 = v43;
    do
    {
      v131 = v58;
      v60 = v132;
      outlined init with copy of TrackingUpdateDataPB(v118 + v117 * v58, v132, type metadata accessor for DetectionSpecPB);
      v61 = v60;
      v62 = (uint64_t)v133;
      outlined init with copy of TrackingUpdateDataPB(v61, (uint64_t)v133, type metadata accessor for DetectionSpecPB);
      v63 = v62 + *(int *)(v121 + 24);
      outlined init with copy of (Int32, Matrix2dPB)(v63, (uint64_t)v43, &demangling cache variable for type metadata for CMTimeProtobuf?);
      v64 = v125;
      v152 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48);
      if (v152(v43, 1, v125) == 1)
      {
        v65 = v122;
        *v122 = 0;
        *((_DWORD *)v65 + 2) = 0;
        UnknownStorage.init()();
        outlined destroy of Coordinate3DPB?((uint64_t)v43, &demangling cache variable for type metadata for CMTimeProtobuf?);
      }
      else
      {
        v65 = v122;
        outlined init with take of Matrix2dPB((uint64_t)v43, (uint64_t)v122, type metadata accessor for CMTimeProtobuf);
      }
      *(_QWORD *)&v156 = *v65;
      outlined destroy of Matrix3x3PB((uint64_t)v65, type metadata accessor for CMTimeProtobuf);
      v66 = v126;
      outlined init with copy of (Int32, Matrix2dPB)(v63, v126, &demangling cache variable for type metadata for CMTimeProtobuf?);
      if (v152((char *)v66, 1, v64) == 1)
      {
        v67 = v123;
        *v123 = 0;
        *((_DWORD *)v67 + 2) = 0;
        UnknownStorage.init()();
        outlined destroy of Coordinate3DPB?(v66, &demangling cache variable for type metadata for CMTimeProtobuf?);
      }
      else
      {
        v67 = v123;
        outlined init with take of Matrix2dPB(v66, (uint64_t)v123, type metadata accessor for CMTimeProtobuf);
      }
      v68 = (uint64_t)v67;
      v69 = *((_DWORD *)v67 + 2);
      outlined destroy of Matrix3x3PB(v68, type metadata accessor for CMTimeProtobuf);
      v160 = CMTime.init(value:timescale:)(v156, v69);
      value = v160.value;
      v128 = *(_QWORD *)&v160.timescale;
      epoch = v160.epoch;
      v70 = *v133;
      v71 = *(_QWORD *)(*v133 + 16);
      if (v71)
      {
        v158 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
        v72 = v115;
        HIDWORD(v72) = HIDWORD(v151);
        v145 = v72;
        v73 = (*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
        v127 = v70;
        v74 = v70 + v73;
        v143 = *(_QWORD *)(v116 + 72);
        do
        {
          v152 = (unsigned int (*)(char *, uint64_t, uint64_t))v71;
          v75 = v153;
          outlined init with copy of TrackingUpdateDataPB(v74, v153, type metadata accessor for DetectionSpecItemPB);
          v76 = v75;
          v77 = v154;
          outlined init with copy of TrackingUpdateDataPB(v76, v154, type metadata accessor for DetectionSpecItemPB);
          *(_QWORD *)&v151 = *(_QWORD *)v77;
          v150 = *(unsigned __int8 *)(v77 + 8);
          v149 = *(_QWORD *)(v77 + 16);
          v148 = *(unsigned __int8 *)(v77 + 24);
          v78 = v77 + *(int *)(v155 + 32);
          outlined init with copy of (Int32, Matrix2dPB)(v78, (uint64_t)v19, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
          v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48);
          if (v79(v19, 1, v20) == 1)
          {
            v80 = v138;
            *v138 = 0;
            v80[1] = 0;
            UnknownStorage.init()();
            outlined destroy of Coordinate3DPB?((uint64_t)v19, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
          }
          else
          {
            v80 = v138;
            outlined init with take of Matrix2dPB((uint64_t)v19, (uint64_t)v138, type metadata accessor for DetectionSpecItemPB.CropRegion);
          }
          LODWORD(v81) = *(_DWORD *)v80;
          v156 = v81;
          outlined destroy of Matrix3x3PB((uint64_t)v80, type metadata accessor for DetectionSpecItemPB.CropRegion);
          outlined init with copy of (Int32, Matrix2dPB)(v78, (uint64_t)v16, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
          v82 = v79(v16, 1, v20);
          v83 = v139;
          if (v82 == 1)
          {
            *v139 = 0;
            v83[1] = 0;
            UnknownStorage.init()();
            outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
          }
          else
          {
            outlined init with take of Matrix2dPB((uint64_t)v16, (uint64_t)v139, type metadata accessor for DetectionSpecItemPB.CropRegion);
          }
          LODWORD(v84) = *((_DWORD *)v83 + 1);
          v147 = v84;
          outlined destroy of Matrix3x3PB((uint64_t)v83, type metadata accessor for DetectionSpecItemPB.CropRegion);
          outlined init with copy of (Int32, Matrix2dPB)(v78, (uint64_t)v12, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
          v85 = v79(v12, 1, v20);
          v86 = v140;
          if (v85 == 1)
          {
            *v140 = 0;
            v86[1] = 0;
            UnknownStorage.init()();
            outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
          }
          else
          {
            outlined init with take of Matrix2dPB((uint64_t)v12, (uint64_t)v140, type metadata accessor for DetectionSpecItemPB.CropRegion);
          }
          LODWORD(v87) = *((_DWORD *)v86 + 2);
          v146 = v87;
          outlined destroy of Matrix3x3PB((uint64_t)v86, type metadata accessor for DetectionSpecItemPB.CropRegion);
          outlined init with copy of (Int32, Matrix2dPB)(v78, (uint64_t)v8, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
          if (v79(v8, 1, v20) == 1)
          {
            v88 = v141;
            *v141 = 0;
            v88[1] = 0;
            UnknownStorage.init()();
            outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
          }
          else
          {
            v88 = v141;
            outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v141, type metadata accessor for DetectionSpecItemPB.CropRegion);
          }
          *(_QWORD *)&v89 = __PAIR64__(v147, v156);
          DWORD2(v89) = v146;
          HIDWORD(v89) = *((_DWORD *)v88 + 3);
          v156 = v89;
          outlined destroy of Matrix3x3PB((uint64_t)v88, type metadata accessor for DetectionSpecItemPB.CropRegion);
          v90 = v154;
          v91 = *(_QWORD *)(v154 + 32);
          v92 = v154 + *(int *)(v155 + 36);
          LODWORD(v147) = *(_DWORD *)v92;
          LODWORD(v146) = *(unsigned __int8 *)(v92 + 4);
          swift_bridgeObjectRetain();
          CMTimeMake(&v157, 0, 1);
          v93 = v157.value;
          timescale = v157.timescale;
          flags = v157.flags;
          v96 = v157.epoch;
          CMTime.seconds.getter();
          v98 = v97;
          outlined destroy of Matrix3x3PB(v90, type metadata accessor for DetectionSpecItemPB);
          outlined destroy of Matrix3x3PB(v153, type metadata accessor for DetectionSpecItemPB);
          v99 = v158;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v99 + 16) + 1, 1);
            v99 = v158;
          }
          v101 = *(_QWORD *)(v99 + 16);
          v100 = *(_QWORD *)(v99 + 24);
          if (v101 >= v100 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v100 > 1, v101 + 1, 1);
            v99 = v158;
          }
          *(_QWORD *)(v99 + 16) = v101 + 1;
          v102 = v99 + (v101 << 7);
          *(_QWORD *)(v102 + 32) = v151;
          *(_BYTE *)(v102 + 40) = v150;
          *(_QWORD *)(v102 + 48) = v149;
          *(_BYTE *)(v102 + 56) = v148;
          *(_OWORD *)(v102 + 64) = v156;
          *(_QWORD *)(v102 + 80) = v91;
          *(_OWORD *)(v102 + 96) = v145;
          *(_QWORD *)(v102 + 112) = v93;
          *(_DWORD *)(v102 + 120) = timescale;
          *(_DWORD *)(v102 + 124) = flags;
          *(_QWORD *)(v102 + 128) = v96;
          *(_DWORD *)(v102 + 136) = v147;
          *(_BYTE *)(v102 + 140) = v146;
          v74 += v143;
          *(_QWORD *)(v102 + 144) = v98;
          v71 = (int64_t)v152 - 1;
          v8 = v137;
          v12 = v136;
          v16 = v135;
          v19 = v134;
          v20 = v144;
        }
        while (v152 != (unsigned int (*)(char *, uint64_t, uint64_t))1);
        v151 = v145;
      }
      else
      {
        swift_bridgeObjectRetain();
        v99 = MEMORY[0x24BEE4AF8];
      }
      outlined destroy of Matrix3x3PB((uint64_t)v133, type metadata accessor for DetectionSpecPB);
      swift_bridgeObjectRelease();
      outlined destroy of Matrix3x3PB(v132, type metadata accessor for DetectionSpecPB);
      v103 = v159;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v103 + 16) + 1, 1);
        v103 = v159;
      }
      v104 = v131;
      v106 = *(_QWORD *)(v103 + 16);
      v105 = *(_QWORD *)(v103 + 24);
      if (v106 >= v105 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1);
        v104 = v131;
        v103 = v159;
      }
      *(_QWORD *)(v103 + 16) = v106 + 1;
      v107 = (_QWORD *)(v103 + 32 * v106);
      v107[4] = value;
      v58 = v104 + 1;
      v107[5] = v128;
      v107[6] = epoch;
      v107[7] = v99;
      v20 = v144;
      v43 = v120;
    }
    while (v58 != v119);
    a2 = v112;
    a1 = v111;
  }
  else
  {
    swift_bridgeObjectRetain();
    v103 = MEMORY[0x24BEE4AF8];
  }
  outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for SchedulingDataPB);
  result = swift_bridgeObjectRelease();
  v109 = v113;
  *a2 = v114;
  a2[1] = v109;
  a2[2] = v103;
  return result;
}

uint64_t SchedulingData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[5];
  uint64_t v21;

  v3 = type metadata accessor for DetectionSpecPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (_QWORD *)((char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *v1;
  v8 = v1[1];
  v10 = v1[2];
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  type metadata accessor for SchedulingDataPB(0);
  result = UnknownStorage.init()();
  if (v9 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v9 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_DWORD *)a1 = v9;
  if (v8 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  *(_DWORD *)(a1 + 4) = v8;
  v12 = *(_QWORD *)(v10 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (v12)
  {
    v21 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    v14 = v21;
    v20[0] = v10;
    v15 = (uint64_t *)(v10 + 56);
    do
    {
      v16 = *(v15 - 1);
      v17 = *v15;
      v20[1] = *(v15 - 3);
      v20[2] = *(v15 - 2);
      v20[3] = v16;
      v20[4] = v17;
      DetectionSpec.toProtoBuf()(v7);
      v21 = v14;
      v19 = *(_QWORD *)(v14 + 16);
      v18 = *(_QWORD *)(v14 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v14 = v21;
      }
      *(_QWORD *)(v14 + 16) = v19 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v7, v14+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v19, type metadata accessor for DetectionSpecPB);
      v15 += 4;
      --v12;
    }
    while (v12);
    result = swift_bridgeObjectRelease();
    v13 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v14 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v13;
  return result;
}

BOOL static SchedulingData.== infix(_:_:)@<W0>(Hands::SchedulingData a1@<0:X0, 8:X1, 16:X2>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1.discoveryCounter + 16);
  v2 = *(_QWORD *)(a1.roundRobinIndex + 16);
  v6 = *(_OWORD *)a1.discoveryCounter;
  v7 = v1;
  v4 = *(_OWORD *)a1.roundRobinIndex;
  v5 = v2;
  a1.discoveryCounter = (Swift::Int)&v4;
  return SchedulingData.almostEqual(to:withThreshold:)(a1, 0.0000001);
}

Swift::Bool __swiftcall SchedulingData.almostEqual(to:withThreshold:)(Hands::SchedulingData to, Swift::Double withThreshold)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int8 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int8 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  Swift::Bool result;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  uint64_t v93;

  if (*v2 != *(_QWORD *)to.discoveryCounter)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v82.i64[0] = 0xD000000000000029;
    v82.i64[1] = 0x800000023D9D1E40;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 8236;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v84 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v70 = xmmword_23D9A8970;
    v71 = 0;
    v72 = 0;
    v11 = MEMORY[0x24BEE4AF8];
    v12 = 64;
LABEL_21:
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v70, 0xD00000000000006CLL, 0x800000023D9D1DD0, v12, (uint64_t)&v82, v11);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v82);
    return 0;
  }
  if (v2[1] != *(_QWORD *)(to.discoveryCounter + 8))
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v82.i64[0] = 0xD000000000000028;
    v82.i64[1] = 0x800000023D9D1E70;
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 8236;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v84 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v70 = xmmword_23D9A8970;
    v71 = 0;
    v72 = 0;
    v11 = MEMORY[0x24BEE4AF8];
    v12 = 69;
    goto LABEL_21;
  }
  v4 = *(_QWORD *)(to.discoveryCounter + 16);
  v5 = v2[2];
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = 0;
    v68 = v4 + 32;
    v69 = v5 + 32;
    v61 = v4;
    v62 = v5;
    while (v7 < v6)
    {
      v16 = *(_QWORD *)(v4 + 16);
      if (v7 == v16)
        goto LABEL_19;
      if (v7 >= v16)
        goto LABEL_24;
      v17 = (uint64_t *)(v69 + 32 * v7);
      v18 = *v17;
      v19 = v17[1];
      v21 = v17[2];
      v20 = v17[3];
      v22 = (uint64_t *)(v68 + 32 * v7);
      v23 = *v22;
      v24 = v22[1];
      v26 = v22[2];
      v25 = v22[3];
      v82.i64[0] = v20;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v82);
      v63 = v21;
      v64 = v18;
      v65 = v26;
      swift_bridgeObjectRelease();
      v27 = v82.i64[0];
      v82.i64[0] = v25;
      swift_bridgeObjectRetain_n();
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v82);
      swift_bridgeObjectRelease();
      v28 = v82.i64[0];
      v29 = *(_QWORD *)(v27 + 16);
      if (v29)
      {
        v60 = v23;
        v66 = v20;
        v67 = v25;
        v30 = 0;
        v31 = 0;
        v32 = *(_QWORD *)(v82.i64[0] + 16);
        while (1)
        {
          if (v32 == v31)
          {
LABEL_18:
            swift_release();
            v4 = v61;
            v5 = v62;
            goto LABEL_8;
          }
          if (v31 >= *(_QWORD *)(v28 + 16))
            break;
          v33 = *(_BYTE *)(v27 + v30 + 40);
          v34 = *(_QWORD *)(v27 + v30 + 48);
          v35 = *(_BYTE *)(v27 + v30 + 56);
          v36 = *(_OWORD *)(v27 + v30 + 64);
          v37 = *(_QWORD *)(v27 + v30 + 80);
          v38 = *(_OWORD *)(v27 + v30 + 96);
          v39 = *(_QWORD *)(v27 + v30 + 112);
          v40 = *(_QWORD *)(v27 + v30 + 120);
          v41 = *(_QWORD *)(v27 + v30 + 128);
          v42 = *(_DWORD *)(v27 + v30 + 136);
          v43 = *(_BYTE *)(v27 + v30 + 140);
          v44 = *(_QWORD *)(v27 + v30 + 144);
          v45 = *(_QWORD *)(v28 + v30 + 32);
          v46 = *(_BYTE *)(v28 + v30 + 40);
          v47 = *(_QWORD *)(v28 + v30 + 48);
          v48 = *(_BYTE *)(v28 + v30 + 56);
          v49 = *(_OWORD *)(v28 + v30 + 64);
          v50 = *(_QWORD *)(v28 + v30 + 80);
          v51 = *(_OWORD *)(v28 + v30 + 96);
          v52 = *(_QWORD *)(v28 + v30 + 112);
          v53 = *(_QWORD *)(v28 + v30 + 128);
          v54 = *(_DWORD *)(v28 + v30 + 136);
          v55 = *(_BYTE *)(v28 + v30 + 140);
          v56 = *(_QWORD *)(v28 + v30 + 144);
          v82.i64[0] = *(_QWORD *)(v27 + v30 + 32);
          v82.i8[8] = v33;
          v83 = v34;
          LOBYTE(v84) = v35;
          v85 = v36;
          v86 = v37;
          v87 = v38;
          v88 = v39;
          v89 = v40;
          v90 = v41;
          v91 = v42;
          v92 = v43;
          v93 = v44;
          *(_QWORD *)&v70 = v45;
          BYTE8(v70) = v46;
          v71 = v47;
          LOBYTE(v72) = v48;
          v73 = v49;
          v74 = v50;
          v75 = v51;
          v76 = v52;
          v77 = *(_QWORD *)(v28 + v30 + 120);
          v78 = v53;
          v79 = v54;
          v80 = v55;
          v81 = v56;
          if ((DetectionSpecItem.almostEqual(to:withThreshold:)((float32x4_t *)&v70, withThreshold) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v82.i64[0] = 0;
            v82.i64[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(36);
            v70 = (__int128)v82;
            v58._countAndFlagsBits = 0xD00000000000001ELL;
            v58._object = (void *)0x800000023D9D1EA0;
            String.append(_:)(v58);
            v82.i64[0] = v64;
            v82.i64[1] = v19;
            v83 = v63;
            v84 = v66;
            _print_unlocked<A, B>(_:_:)();
            swift_bridgeObjectRelease();
            v59._countAndFlagsBits = 8236;
            v59._object = (void *)0xE200000000000000;
            String.append(_:)(v59);
            v82.i64[0] = v60;
            v82.i64[1] = v24;
            v83 = v65;
            v84 = v67;
            _print_unlocked<A, B>(_:_:)();
            swift_bridgeObjectRelease();
            v84 = MEMORY[0x24BEE0D00];
            v82 = (float32x4_t)v70;
            type metadata accessor for HandyLoggerNeo();
            v70 = xmmword_23D9A8970;
            v71 = 0;
            v72 = 0;
            v11 = MEMORY[0x24BEE4AF8];
            v12 = 74;
            goto LABEL_21;
          }
          ++v31;
          v30 += 128;
          if (v29 == v31)
            goto LABEL_18;
        }
        __break(1u);
        break;
      }
      swift_release();
LABEL_8:
      ++v7;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(v5 + 16);
      if (v7 == v6)
        goto LABEL_19;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SchedulingData@<W0>(Hands::SchedulingData a1@<0:X0, 8:X1, 16:X2>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1.discoveryCounter + 16);
  v2 = *(_QWORD *)(a1.roundRobinIndex + 16);
  v6 = *(_OWORD *)a1.discoveryCounter;
  v7 = v1;
  v4 = *(_OWORD *)a1.roundRobinIndex;
  v5 = v2;
  a1.discoveryCounter = (Swift::Int)&v4;
  return SchedulingData.almostEqual(to:withThreshold:)(a1, 0.0000001);
}

unint64_t lazy protocol witness table accessor for type SchedulingDataPB and conformance SchedulingDataPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB;
  if (!lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB)
  {
    v1 = type metadata accessor for SchedulingDataPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SchedulingDataPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchedulingDataPB and conformance SchedulingDataPB);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SchedulingData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SchedulingData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SchedulingData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SchedulingData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchedulingData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchedulingData()
{
  return &type metadata for SchedulingData;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  char *v27;
  const void *v28;
  char *v29;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 127;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 7;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 127;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 7;
  v29 = __dst;
  v28 = a4;
  if (v10 >= v13)
  {
    if (v11 >= -127)
    {
      v20 = v13 << 7;
      if (a4 != __src || &__src[v20] <= a4)
        memmove(a4, __src, v13 << 7);
      v21 = &v4[v20];
      v27 = &v4[v20];
      v29 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 128) <= 0xFFFFFFFFFFFFFF00)
      {
        v22 = (char *)(a3 - 128);
        do
        {
          v23 = v22 + 128;
          v24 = *((_QWORD *)v6 - 14);
          if (*(v6 - 104) == 1)
            __asm { BR              X11 }
          if (*((_QWORD *)v21 - 14) >= v24)
          {
            v27 = v21 - 128;
            if (v23 < v21 || v22 >= v21 || v23 != v21)
              memmove(v22, v21 - 128, 0x80uLL);
            v25 = v6;
            v21 -= 128;
            if (v6 <= v7)
              break;
          }
          else
          {
            v25 = v6 - 128;
            if (v23 != v6 || v22 >= v6)
              memmove(v22, v6 - 128, 0x80uLL);
            v29 = v6 - 128;
            if (v25 <= v7)
              break;
          }
          v22 -= 128;
          v6 = v25;
        }
        while (v21 > v4);
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, &v28, &v27);
      return 1;
    }
  }
  else if (v8 >= -127)
  {
    v14 = v10 << 7;
    if (a4 != __dst || &__dst[v14] <= a4)
      memmove(a4, __dst, v14);
    v15 = &v4[v14];
    v27 = v15;
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 128) <= 0xFFFFFFFFFFFFFF00)
    {
      v16 = v4;
      while (1)
      {
        v17 = *((_QWORD *)v16 + 2);
        if (v16[24] == 1)
          __asm { BR              X10 }
        if (*((_QWORD *)v6 + 2) >= v17)
        {
          v4 = v16 + 128;
          v19 = v16;
          v18 = v6;
          if (v7 == v16)
          {
            v16 += 128;
            if (v7 < v4)
              goto LABEL_24;
          }
          else
          {
            v16 += 128;
          }
        }
        else
        {
          v18 = v6 + 128;
          v19 = v6;
          if (v7 == v6 && v7 < v18)
            goto LABEL_24;
        }
        memmove(v7, v19, 0x80uLL);
LABEL_24:
        v7 += 128;
        if (v16 < v15)
        {
          v6 = v18;
          if ((unint64_t)v18 < a3)
            continue;
        }
        v28 = v4;
        v29 = v7;
        goto LABEL_50;
      }
    }
    goto LABEL_50;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t DetectionSpecItem.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t result;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  __int128 v67;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v66 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v62 = (char *)&v52 - v8;
  MEMORY[0x24BDAC7A8](v9, v10);
  v60 = (uint64_t)&v52 - v11;
  MEMORY[0x24BDAC7A8](v12, v13);
  v58 = (uint64_t)&v52 - v14;
  v15 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v57 = *(_QWORD *)(v15 - 8);
  v16 = v57;
  MEMORY[0x24BDAC7A8](v15, v17);
  v65 = (uint64_t *)((char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v19, v20);
  v61 = (char *)&v52 - v21;
  MEMORY[0x24BDAC7A8](v22, v23);
  v59 = (uint64_t *)((char *)&v52 - v24);
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (uint64_t *)((char *)&v52 - v27);
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (uint64_t *)((char *)&v52 - v31);
  v33 = *v1;
  v34 = *((unsigned __int8 *)v1 + 8);
  v35 = v1[2];
  v55 = *((unsigned __int8 *)v1 + 24);
  v56 = v34;
  v67 = *((_OWORD *)v1 + 2);
  v64 = v1[6];
  v54 = *((_DWORD *)v1 + 26);
  v63 = *((unsigned __int8 *)v1 + 108);
  *(_QWORD *)(a1 + 32) = MEMORY[0x24BEE4AF8];
  v36 = type metadata accessor for DetectionSpecItemPB(0);
  UnknownStorage.init()();
  v37 = a1 + *(int *)(v36 + 32);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v38(v37, 1, 1, v15);
  v39 = a1 + *(int *)(v36 + 36);
  *(_DWORD *)v39 = 0;
  v53 = (_DWORD *)v39;
  *(_BYTE *)(v39 + 4) = 1;
  *(_QWORD *)a1 = v33;
  *(_BYTE *)(a1 + 8) = v56;
  *(_QWORD *)(a1 + 16) = v35;
  *(_BYTE *)(a1 + 24) = v55;
  *v32 = 0;
  v32[1] = 0;
  UnknownStorage.init()();
  outlined destroy of Coordinate3DPB?(v37, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined init with take of Matrix2dPB((uint64_t)v32, v37, type metadata accessor for DetectionSpecItemPB.CropRegion);
  v38(v37, 0, 1, v15);
  v40 = v58;
  outlined init with copy of (Int32, Matrix2dPB)(v37, v58, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  if (v41(v40, 1, v15) == 1)
  {
    *v28 = 0;
    v28[1] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v40, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v40, (uint64_t)v28, type metadata accessor for DetectionSpecItemPB.CropRegion);
  }
  *(_DWORD *)v28 = v67;
  outlined destroy of Coordinate3DPB?(v37, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined init with take of Matrix2dPB((uint64_t)v28, v37, type metadata accessor for DetectionSpecItemPB.CropRegion);
  v38(v37, 0, 1, v15);
  v42 = v60;
  outlined init with copy of (Int32, Matrix2dPB)(v37, v60, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v43 = v41(v42, 1, v15);
  v44 = (uint64_t)v66;
  v45 = v61;
  v46 = v59;
  if (v43 == 1)
  {
    *v59 = 0;
    v46[1] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v42, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v42, (uint64_t)v59, type metadata accessor for DetectionSpecItemPB.CropRegion);
  }
  v47 = (uint64_t)v62;
  *((_DWORD *)v46 + 1) = DWORD1(v67);
  outlined destroy of Coordinate3DPB?(v37, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined init with take of Matrix2dPB((uint64_t)v46, v37, type metadata accessor for DetectionSpecItemPB.CropRegion);
  v38(v37, 0, 1, v15);
  outlined init with copy of (Int32, Matrix2dPB)(v37, v47, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  if (v41(v47, 1, v15) == 1)
  {
    *v45 = 0;
    v45[1] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v47, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v47, (uint64_t)v45, type metadata accessor for DetectionSpecItemPB.CropRegion);
  }
  *((_DWORD *)v45 + 2) = DWORD2(v67);
  outlined destroy of Coordinate3DPB?(v37, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined init with take of Matrix2dPB((uint64_t)v45, v37, type metadata accessor for DetectionSpecItemPB.CropRegion);
  v38(v37, 0, 1, v15);
  outlined init with copy of (Int32, Matrix2dPB)(v37, v44, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  if (v41(v44, 1, v15) == 1)
  {
    v48 = v65;
    *v65 = 0;
    v48[1] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v44, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  }
  else
  {
    v48 = v65;
    outlined init with take of Matrix2dPB(v44, (uint64_t)v65, type metadata accessor for DetectionSpecItemPB.CropRegion);
  }
  *((_DWORD *)v48 + 3) = HIDWORD(v67);
  outlined destroy of Coordinate3DPB?(v37, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  outlined init with take of Matrix2dPB((uint64_t)v48, v37, type metadata accessor for DetectionSpecItemPB.CropRegion);
  v38(v37, 0, 1, v15);
  v49 = v64;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v49;
  if ((v63 & 1) == 0)
  {
    v51 = v53;
    *v53 = v54;
    *((_BYTE *)v51 + 4) = 0;
  }
  return result;
}

uint64_t DetectionSpec.toProtoBuf()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(void);
  uint64_t v50;
  char *v51;
  void (*v52)(void);
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  void (*v87)(void);
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void (*v111)(void);
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void (*v117)(void);
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  uint64_t v131;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v115 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v113 = (char *)&v94 - v8;
  MEMORY[0x24BDAC7A8](v9, v10);
  v109 = (char *)&v94 - v11;
  v12 = type metadata accessor for DetectionSpecIntermediatePB(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v114 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v112 = (char *)&v94 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v108 = (uint64_t)&v94 - v21;
  MEMORY[0x24BDAC7A8](v22, v23);
  v106 = (char *)&v94 - v24;
  v25 = type metadata accessor for DetectionSpecItemPB(0);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25, v27);
  v29 = (char *)&v94 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v104 = (uint64_t)&v94 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v99 = (uint64_t)&v94 - v35;
  v36 = type metadata accessor for CMTimeProtobuf(0);
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36, v38);
  v103 = (uint64_t *)((char *)&v94 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v40, v41);
  v100 = (uint64_t *)((char *)&v94 - v42);
  MEMORY[0x24BDAC7A8](v43, v44);
  v96 = (uint64_t *)((char *)&v94 - v45);
  v98 = *v1;
  v102 = *((_DWORD *)v1 + 2);
  v46 = v1[3];
  v47 = type metadata accessor for DetectionSpecPB(0);
  UnknownStorage.init()();
  v48 = (uint64_t)a1 + *(int *)(v47 + 24);
  v97 = v37;
  v49 = *(void (**)(void))(v37 + 56);
  v116 = v48;
  v105 = v36;
  v117 = v49;
  v49();
  v50 = *(int *)(v47 + 28);
  v101 = a1;
  v51 = (char *)a1 + v50;
  v107 = v13;
  v52 = *(void (**)(void))(v13 + 56);
  v110 = (uint64_t)v51;
  v111 = v52;
  v52();
  v53 = *(_QWORD *)(v46 + 16);
  v54 = MEMORY[0x24BEE4AF8];
  if (v53)
  {
    v95 = v12;
    v131 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53, 0);
    v55 = 0;
    v54 = v131;
    do
    {
      v56 = *(_BYTE *)(v46 + v55 + 40);
      v57 = *(_QWORD *)(v46 + v55 + 48);
      v58 = *(_BYTE *)(v46 + v55 + 56);
      v59 = *(_OWORD *)(v46 + v55 + 64);
      v60 = *(_QWORD *)(v46 + v55 + 80);
      v61 = *(_OWORD *)(v46 + v55 + 96);
      v62 = *(_QWORD *)(v46 + v55 + 112);
      v63 = *(_QWORD *)(v46 + v55 + 128);
      v64 = *(_DWORD *)(v46 + v55 + 136);
      v65 = *(_BYTE *)(v46 + v55 + 140);
      v66 = *(_QWORD *)(v46 + v55 + 144);
      v118 = *(_QWORD *)(v46 + v55 + 32);
      v119 = v56;
      v120 = v57;
      v121 = v58;
      v122 = v59;
      v123 = v60;
      v124 = v61;
      v125 = v62;
      v126 = *(_QWORD *)(v46 + v55 + 120);
      v127 = v63;
      v128 = v64;
      v129 = v65;
      v130 = v66;
      DetectionSpecItem.toProtoBuf()((uint64_t)v29);
      v131 = v54;
      v68 = *(_QWORD *)(v54 + 16);
      v67 = *(_QWORD *)(v54 + 24);
      if (v68 >= v67 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
        v54 = v131;
      }
      *(_QWORD *)(v54 + 16) = v68 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v29, v54+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v68, type metadata accessor for DetectionSpecItemPB);
      v55 += 128;
      --v53;
    }
    while (v53);
    swift_bridgeObjectRelease();
    v12 = v95;
  }
  *v101 = v54;
  v69 = (uint64_t)v96;
  *v96 = 0;
  *(_DWORD *)(v69 + 8) = 0;
  v70 = v105;
  UnknownStorage.init()();
  v71 = v116;
  outlined destroy of Coordinate3DPB?(v116, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB(v69, v71, type metadata accessor for CMTimeProtobuf);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v117)(v71, 0, 1, v70);
  v72 = v99;
  v73 = v70;
  outlined init with copy of (Int32, Matrix2dPB)(v71, v99, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
  v75 = v74(v72, 1, v73);
  v76 = (uint64_t)v113;
  v77 = (uint64_t)v112;
  v78 = v110;
  v79 = v100;
  if (v75 == 1)
  {
    *v100 = 0;
    *((_DWORD *)v79 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v72, &demangling cache variable for type metadata for CMTimeProtobuf?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v72, (uint64_t)v100, type metadata accessor for CMTimeProtobuf);
  }
  v80 = (uint64_t)v109;
  *v79 = v98;
  v81 = (uint64_t)v79;
  v82 = v116;
  outlined destroy of Coordinate3DPB?(v116, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB(v81, v82, type metadata accessor for CMTimeProtobuf);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v117)(v82, 0, 1, v73);
  v83 = v104;
  outlined init with copy of (Int32, Matrix2dPB)(v82, v104, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v74(v83, 1, v73) == 1)
  {
    v84 = v103;
    *v103 = 0;
    *((_DWORD *)v84 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v83, &demangling cache variable for type metadata for CMTimeProtobuf?);
  }
  else
  {
    v84 = v103;
    outlined init with take of Matrix2dPB(v83, (uint64_t)v103, type metadata accessor for CMTimeProtobuf);
  }
  *((_DWORD *)v84 + 2) = v102;
  v85 = v116;
  outlined destroy of Coordinate3DPB?(v116, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v84, v85, type metadata accessor for CMTimeProtobuf);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v117)(v85, 0, 1, v73);
  v86 = v106;
  *((_DWORD *)v106 + 2) = 0;
  *v86 = 0;
  UnknownStorage.init()();
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  outlined init with take of Matrix2dPB((uint64_t)v86, v78, type metadata accessor for DetectionSpecIntermediatePB);
  v87 = v111;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v111)(v78, 0, 1, v12);
  outlined init with copy of (Int32, Matrix2dPB)(v78, v80, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
  v89 = v88(v80, 1, v12);
  v90 = (uint64_t)v115;
  v91 = v108;
  if (v89 == 1)
  {
    *(_DWORD *)(v108 + 8) = 0;
    *(_QWORD *)v91 = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v80, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v80, v108, type metadata accessor for DetectionSpecIntermediatePB);
  }
  *(_DWORD *)(v91 + 4) = -1;
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  outlined init with take of Matrix2dPB(v91, v78, type metadata accessor for DetectionSpecIntermediatePB);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v87)(v78, 0, 1, v12);
  outlined init with copy of (Int32, Matrix2dPB)(v78, v76, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  if (v88(v76, 1, v12) == 1)
  {
    *(_DWORD *)(v77 + 8) = 0;
    *(_QWORD *)v77 = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v76, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v76, v77, type metadata accessor for DetectionSpecIntermediatePB);
  }
  *(_DWORD *)v77 = 0;
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  outlined init with take of Matrix2dPB(v77, v78, type metadata accessor for DetectionSpecIntermediatePB);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v87)(v78, 0, 1, v12);
  outlined init with copy of (Int32, Matrix2dPB)(v78, v90, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  if (v88(v90, 1, v12) == 1)
  {
    v92 = v114;
    *(_DWORD *)(v114 + 8) = 0;
    *(_QWORD *)v92 = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v90, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  }
  else
  {
    v92 = v114;
    outlined init with take of Matrix2dPB(v90, v114, type metadata accessor for DetectionSpecIntermediatePB);
  }
  *(_DWORD *)(v92 + 8) = 0;
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for DetectionSpecIntermediatePB?);
  outlined init with take of Matrix2dPB(v92, v78, type metadata accessor for DetectionSpecIntermediatePB);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v87)(v78, 0, 1, v12);
}

Swift::Bool __swiftcall DetectionSpec.almostEqual(to:withThreshold:)(Hands::DetectionSpec to, Swift::Double withThreshold)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int8 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  Swift::Bool v35;
  Swift::Bool result;
  float32x4_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;

  v4 = *(_QWORD *)(to.inputTimestamp.value + 24);
  v49 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(&v49);
  swift_bridgeObjectRelease();
  v5 = v49;
  v49 = v4;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(&v49);
  swift_bridgeObjectRelease();
  v6 = v49;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(v49 + 16);
    while (v10 != v9)
    {
      if (v9 >= *(_QWORD *)(v6 + 16))
      {
        __break(1u);
        result = swift_release();
        __break(1u);
        return result;
      }
      v11 = *(_BYTE *)(v5 + v8 + 40);
      v12 = *(_QWORD *)(v5 + v8 + 48);
      v13 = *(_BYTE *)(v5 + v8 + 56);
      v14 = *(_OWORD *)(v5 + v8 + 64);
      v15 = *(_QWORD *)(v5 + v8 + 80);
      v16 = *(_OWORD *)(v5 + v8 + 96);
      v17 = *(_QWORD *)(v5 + v8 + 112);
      v18 = *(_QWORD *)(v5 + v8 + 120);
      v19 = *(_QWORD *)(v5 + v8 + 128);
      v20 = *(_DWORD *)(v5 + v8 + 136);
      v21 = *(_BYTE *)(v5 + v8 + 140);
      v22 = *(_QWORD *)(v5 + v8 + 144);
      v23 = *(_QWORD *)(v6 + v8 + 32);
      v24 = *(_BYTE *)(v6 + v8 + 40);
      v25 = *(_QWORD *)(v6 + v8 + 48);
      v26 = *(_BYTE *)(v6 + v8 + 56);
      v27 = *(_OWORD *)(v6 + v8 + 64);
      v28 = *(_QWORD *)(v6 + v8 + 80);
      v29 = *(_OWORD *)(v6 + v8 + 96);
      v30 = *(_QWORD *)(v6 + v8 + 112);
      v31 = *(_QWORD *)(v6 + v8 + 128);
      v32 = *(_DWORD *)(v6 + v8 + 136);
      v33 = *(_BYTE *)(v6 + v8 + 140);
      v34 = *(_QWORD *)(v6 + v8 + 144);
      v49 = *(_QWORD *)(v5 + v8 + 32);
      v50 = v11;
      v51 = v12;
      v52 = v13;
      v53 = v14;
      v54 = v15;
      v55 = v16;
      v56 = v17;
      v57 = v18;
      v58 = v19;
      v59 = v20;
      v60 = v21;
      v61 = v22;
      v37.i64[0] = v23;
      v37.i8[8] = v24;
      v38 = v25;
      v39 = v26;
      v40 = v27;
      v41 = v28;
      v42 = v29;
      v43 = v30;
      v44 = *(_QWORD *)(v6 + v8 + 120);
      v45 = v31;
      v46 = v32;
      v47 = v33;
      v48 = v34;
      if ((DetectionSpecItem.almostEqual(to:withThreshold:)(&v37, withThreshold) & 1) == 0)
      {
        swift_release();
        v35 = 0;
        goto LABEL_9;
      }
      ++v9;
      v8 += 128;
      if (v7 == v9)
        break;
    }
  }
  swift_release();
  v35 = 1;
LABEL_9:
  swift_release();
  return v35;
}

void DetectionSpecItem.cameraSourceKey.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t DetectionSpecItem.associatedHandID.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DetectionSpecItem.associatedHandID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*DetectionSpecItem.associatedHandID.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

double DetectionSpecItem.init(protoBuf:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  _QWORD *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  CMTimeValue value;
  CMTimeEpoch epoch;
  CMTimeScale timescale;
  CMTimeFlags flags;
  uint64_t v52;
  uint64_t v53;
  double result;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  CMTime v65;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v63 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  *(_QWORD *)&v56 = (char *)&v55 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v14 = (char *)&v55 - v13;
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)&v55 - v16;
  v18 = type metadata accessor for DetectionSpecItemPB.CropRegion(0);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v58 = (_QWORD *)((char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x24BDAC7A8](v21, v23);
  v26 = (_QWORD *)((char *)&v55 - v25);
  v28 = MEMORY[0x24BDAC7A8](v24, v27);
  v30 = (char *)&v55 - v29;
  MEMORY[0x24BDAC7A8](v28, v31);
  v33 = (_QWORD *)((char *)&v55 - v32);
  v62 = *(_QWORD *)a1;
  v61 = *(unsigned __int8 *)(a1 + 8);
  v60 = *(_QWORD *)(a1 + 16);
  v59 = *(unsigned __int8 *)(a1 + 24);
  v57 = type metadata accessor for DetectionSpecItemPB(0);
  v34 = a1 + *(int *)(v57 + 32);
  outlined init with copy of (Int32, Matrix2dPB)(v34, (uint64_t)v17, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v35(v17, 1, v18) == 1)
  {
    *v33 = 0;
    v33[1] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v17, (uint64_t)v33, type metadata accessor for DetectionSpecItemPB.CropRegion);
  }
  LODWORD(v36) = *(_DWORD *)v33;
  v64 = v36;
  outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for DetectionSpecItemPB.CropRegion);
  outlined init with copy of (Int32, Matrix2dPB)(v34, (uint64_t)v14, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  v37 = v35(v14, 1, v18);
  v38 = (uint64_t)v63;
  if (v37 == 1)
  {
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v14, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v14, (uint64_t)v30, type metadata accessor for DetectionSpecItemPB.CropRegion);
  }
  LODWORD(v39) = *((_DWORD *)v30 + 1);
  v55 = v39;
  outlined destroy of Matrix3x3PB((uint64_t)v30, type metadata accessor for DetectionSpecItemPB.CropRegion);
  v40 = v56;
  outlined init with copy of (Int32, Matrix2dPB)(v34, v56, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  if (v35((char *)v40, 1, v18) == 1)
  {
    *v26 = 0;
    v26[1] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v40, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v40, (uint64_t)v26, type metadata accessor for DetectionSpecItemPB.CropRegion);
  }
  LODWORD(v41) = *((_DWORD *)v26 + 2);
  v56 = v41;
  outlined destroy of Matrix3x3PB((uint64_t)v26, type metadata accessor for DetectionSpecItemPB.CropRegion);
  outlined init with copy of (Int32, Matrix2dPB)(v34, v38, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  if (v35((char *)v38, 1, v18) == 1)
  {
    v42 = v58;
    *v58 = 0;
    v42[1] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v38, &demangling cache variable for type metadata for DetectionSpecItemPB.CropRegion?);
  }
  else
  {
    v42 = v58;
    outlined init with take of Matrix2dPB(v38, (uint64_t)v58, type metadata accessor for DetectionSpecItemPB.CropRegion);
  }
  *(_QWORD *)&v43 = __PAIR64__(v55, v64);
  DWORD2(v43) = v56;
  HIDWORD(v43) = *((_DWORD *)v42 + 3);
  v64 = v43;
  outlined destroy of Matrix3x3PB((uint64_t)v42, type metadata accessor for DetectionSpecItemPB.CropRegion);
  v44 = *(_QWORD *)(a1 + 32);
  v45 = a1 + *(int *)(v57 + 36);
  v46 = *(_DWORD *)v45;
  v47 = *(_BYTE *)(v45 + 4);
  swift_bridgeObjectRetain();
  CMTimeMake(&v65, 0, 1);
  value = v65.value;
  epoch = v65.epoch;
  timescale = v65.timescale;
  flags = v65.flags;
  CMTime.seconds.getter();
  v53 = v52;
  outlined destroy of Matrix3x3PB(a1, type metadata accessor for DetectionSpecItemPB);
  *(_QWORD *)a2 = v62;
  *(_BYTE *)(a2 + 8) = v61;
  *(_QWORD *)(a2 + 16) = v60;
  *(_BYTE *)(a2 + 24) = v59;
  *(_OWORD *)(a2 + 32) = v64;
  *(_QWORD *)(a2 + 48) = v44;
  result = 0.0;
  *(_OWORD *)(a2 + 64) = xmmword_23D9A3E30;
  *(_QWORD *)(a2 + 80) = value;
  *(_DWORD *)(a2 + 88) = timescale;
  *(_DWORD *)(a2 + 92) = flags;
  *(_QWORD *)(a2 + 96) = epoch;
  *(_DWORD *)(a2 + 104) = v46;
  *(_BYTE *)(a2 + 108) = v47;
  *(_QWORD *)(a2 + 112) = v53;
  return result;
}

uint64_t static DetectionSpecItem.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int8 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  float32x4_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;

  v2 = *((_BYTE *)a1 + 8);
  v3 = a1[2];
  v4 = *((_BYTE *)a1 + 24);
  v5 = *((_OWORD *)a1 + 2);
  v6 = a1[6];
  v7 = *((_OWORD *)a1 + 4);
  v8 = a1[10];
  v9 = a1[12];
  v10 = *((_DWORD *)a1 + 26);
  v11 = *((_BYTE *)a1 + 108);
  v12 = a1[14];
  v13 = *(_QWORD *)a2;
  v14 = *(_BYTE *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_BYTE *)(a2 + 24);
  v17 = *(_OWORD *)(a2 + 32);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 64);
  v20 = *(_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a2 + 96);
  v22 = *(_DWORD *)(a2 + 104);
  v23 = *(_BYTE *)(a2 + 108);
  v24 = *(_QWORD *)(a2 + 112);
  v38 = *a1;
  v39 = v2;
  v40 = v3;
  v41 = v4;
  v42 = v5;
  v43 = v6;
  v44 = v7;
  v45 = v8;
  v46 = a1[11];
  v47 = v9;
  v48 = v10;
  v49 = v11;
  v50 = v12;
  v26.i64[0] = v13;
  v26.i8[8] = v14;
  v27 = v15;
  v28 = v16;
  v29 = v17;
  v30 = v18;
  v31 = v19;
  v32 = v20;
  v33 = *(_QWORD *)(a2 + 88);
  v34 = v21;
  v35 = v22;
  v36 = v23;
  v37 = v24;
  return DetectionSpecItem.almostEqual(to:withThreshold:)(&v26, 0.0000001) & 1;
}

uint64_t DetectionSpecItem.almostEqual(to:withThreshold:)(float32x4_t *a1, double a2)
{
  float32x4_t *v2;
  uint64_t v4;
  float v5;
  __int8 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float v12;
  __int8 v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  float v24;
  Swift::String v26;
  Swift::String v27;
  float32x4_t v28;
  float32x4_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v4 = a1->i64[0];
  v5 = a1[6].f32[2];
  v6 = a1[6].i8[12];
  v7 = v2->i64[0];
  v8 = v2->u8[8];
  v9 = v2[1].i64[0];
  v10 = v2[1].u8[8];
  v11 = v2[2];
  v12 = v2[6].f32[2];
  v13 = v2[6].i8[12];
  v14 = 3;
  if (!v7)
    v14 = 0;
  if (!v8)
    v14 = v7;
  if (a1->i8[8] != 1)
  {
    if (v14 != v4)
      goto LABEL_8;
LABEL_10:
    v28 = v11;
    v29 = a1[2];
    if ((specialized == infix<A>(_:_:)(v9, v10, a1[1].i64[0], a1[1].u8[8]) & 1) == 0)
    {
      v33 = 0;
      v34 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      v19._countAndFlagsBits = 0xD000000000000017;
      v19._object = (void *)0x800000023D9D1F40;
      String.append(_:)(v19);
      _print_unlocked<A, B>(_:_:)();
      v20._countAndFlagsBits = 8236;
      v20._object = (void *)0xE200000000000000;
      String.append(_:)(v20);
      _print_unlocked<A, B>(_:_:)();
      v35 = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v30 = xmmword_23D9A8970;
      v31 = 0;
      v32 = 0;
      v17 = MEMORY[0x24BEE4AF8];
      v18 = 95;
      goto LABEL_24;
    }
    if (!SIMD4<>.almostEqual(to:withThreshold:)(v29, a2, v28))
    {
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      v33 = 0xD000000000000014;
      v34 = 0x800000023D9D1F60;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
      lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>();
      v21._countAndFlagsBits = SIMD.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 32;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      v23._countAndFlagsBits = SIMD.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v35 = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v30 = xmmword_23D9A8970;
      v31 = 0;
      v32 = 0;
      v17 = MEMORY[0x24BEE4AF8];
      v18 = 99;
      goto LABEL_24;
    }
    if ((v13 & 1) != 0)
    {
      if ((v6 & 1) != 0)
        return 1;
    }
    else if ((v6 & 1) == 0)
    {
      v24 = a2;
      if (vabds_f32(v12, v5) >= v24)
      {
        v33 = 0;
        v34 = 0xE000000000000000;
        _StringGuts.grow(_:)(36);
        v26._countAndFlagsBits = 0xD00000000000001ELL;
        v26._object = (void *)0x800000023D9D1FB0;
        String.append(_:)(v26);
        Float.write<A>(to:)();
        v27._countAndFlagsBits = 8236;
        v27._object = (void *)0xE200000000000000;
        String.append(_:)(v27);
        Float.write<A>(to:)();
        v35 = MEMORY[0x24BEE0D00];
        type metadata accessor for HandyLoggerNeo();
        v30 = xmmword_23D9A8970;
        v31 = 0;
        v32 = 0;
        v17 = MEMORY[0x24BEE4AF8];
        v18 = 113;
        goto LABEL_24;
      }
      return 1;
    }
    v35 = MEMORY[0x24BEE0D00];
    v33 = 0xD000000000000028;
    v34 = 0x800000023D9D1F80;
    type metadata accessor for HandyLoggerNeo();
    v30 = xmmword_23D9A8970;
    v31 = 0;
    v32 = 0;
    v17 = MEMORY[0x24BEE4AF8];
    v18 = 104;
    goto LABEL_24;
  }
  if (!v4)
  {
    if (v14)
      goto LABEL_8;
    goto LABEL_10;
  }
  if (v14 == 3)
    goto LABEL_10;
LABEL_8:
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  v15._countAndFlagsBits = 0xD00000000000001DLL;
  v15._object = (void *)0x800000023D9D1F20;
  String.append(_:)(v15);
  _print_unlocked<A, B>(_:_:)();
  v16._countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  _print_unlocked<A, B>(_:_:)();
  v35 = MEMORY[0x24BEE0D00];
  type metadata accessor for HandyLoggerNeo();
  v30 = xmmword_23D9A8970;
  v31 = 0;
  v32 = 0;
  v17 = MEMORY[0x24BEE4AF8];
  v18 = 91;
LABEL_24:
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v30, 0xD00000000000005FLL, 0x800000023D9D1EC0, v18, (uint64_t)&v33, v17);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v33);
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DetectionSpecItem(uint64_t *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int8 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  float32x4_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;

  v2 = *((_BYTE *)a1 + 8);
  v3 = a1[2];
  v4 = *((_BYTE *)a1 + 24);
  v5 = *((_OWORD *)a1 + 2);
  v6 = a1[6];
  v7 = *((_OWORD *)a1 + 4);
  v8 = a1[10];
  v9 = a1[12];
  v10 = *((_DWORD *)a1 + 26);
  v11 = *((_BYTE *)a1 + 108);
  v12 = a1[14];
  v13 = *(_QWORD *)a2;
  v14 = *(_BYTE *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_BYTE *)(a2 + 24);
  v17 = *(_OWORD *)(a2 + 32);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 64);
  v20 = *(_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a2 + 96);
  v22 = *(_DWORD *)(a2 + 104);
  v23 = *(_BYTE *)(a2 + 108);
  v24 = *(_QWORD *)(a2 + 112);
  v38 = *a1;
  v39 = v2;
  v40 = v3;
  v41 = v4;
  v42 = v5;
  v43 = v6;
  v44 = v7;
  v45 = v8;
  v46 = a1[11];
  v47 = v9;
  v48 = v10;
  v49 = v11;
  v50 = v12;
  v26.i64[0] = v13;
  v26.i8[8] = v14;
  v27 = v15;
  v28 = v16;
  v29 = v17;
  v30 = v18;
  v31 = v19;
  v32 = v20;
  v33 = *(_QWORD *)(a2 + 88);
  v34 = v21;
  v35 = v22;
  v36 = v23;
  v37 = v24;
  return DetectionSpecItem.almostEqual(to:withThreshold:)(&v26, 0.0000001) & 1;
}

BOOL static DetectionSpec.== infix(_:_:)@<W0>(Hands::DetectionSpec a1@<0:X0, 8:X1, 16:X2, 24:X3>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];

  v1 = *(_QWORD *)a1.inputTimestamp.value;
  v2 = *(_QWORD *)(a1.inputTimestamp.value + 16);
  v3 = *(_QWORD *)(a1.inputTimestamp.value + 24);
  v4 = **(_QWORD **)&a1.inputTimestamp.timescale;
  v5 = *(_QWORD *)(*(_QWORD *)&a1.inputTimestamp.timescale + 16);
  v7[3] = *(_QWORD *)(*(_QWORD *)&a1.inputTimestamp.timescale + 24);
  v7[4] = v1;
  v7[5] = *(_QWORD *)(a1.inputTimestamp.value + 8);
  v7[6] = v2;
  v7[7] = v3;
  v7[0] = v4;
  v7[1] = *(_QWORD *)(*(_QWORD *)&a1.inputTimestamp.timescale + 8);
  v7[2] = v5;
  a1.inputTimestamp.value = (CMTimeValue)v7;
  return DetectionSpec.almostEqual(to:withThreshold:)(a1, 0.0000001);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DetectionSpec@<W0>(Hands::DetectionSpec a1@<0:X0, 8:X1, 16:X2, 24:X3>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];

  v1 = *(_QWORD *)a1.inputTimestamp.value;
  v2 = *(_QWORD *)(a1.inputTimestamp.value + 16);
  v3 = *(_QWORD *)(a1.inputTimestamp.value + 24);
  v4 = **(_QWORD **)&a1.inputTimestamp.timescale;
  v5 = *(_QWORD *)(*(_QWORD *)&a1.inputTimestamp.timescale + 16);
  v7[3] = *(_QWORD *)(*(_QWORD *)&a1.inputTimestamp.timescale + 24);
  v7[4] = v1;
  v7[5] = *(_QWORD *)(a1.inputTimestamp.value + 8);
  v7[6] = v2;
  v7[7] = v3;
  v7[0] = v4;
  v7[1] = *(_QWORD *)(*(_QWORD *)&a1.inputTimestamp.timescale + 8);
  v7[2] = v5;
  a1.inputTimestamp.value = (CMTimeValue)v7;
  return DetectionSpec.almostEqual(to:withThreshold:)(a1, 0.0000001);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in DetectionSpecItem()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in DetectionSpec()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecPB and conformance DetectionSpecPB, type metadata accessor for DetectionSpecPB, (uint64_t)&protocol conformance descriptor for DetectionSpecPB);
}

uint64_t destroy for DetectionSpecItem()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DetectionSpecItem(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectionSpecItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(_DWORD *)(a1 + 92) = *((_DWORD *)a2 + 23);
  *(_QWORD *)(a1 + 96) = a2[12];
  v6 = *((_DWORD *)a2 + 26);
  *(_BYTE *)(a1 + 108) = *((_BYTE *)a2 + 108);
  *(_DWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 112) = a2[14];
  return a1;
}

uint64_t assignWithTake for DetectionSpecItem(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionSpecItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectionSpecItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectionSpecItem()
{
  return &type metadata for DetectionSpecItem;
}

uint64_t destroy for DetectionSpec()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DetectionSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectionSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DetectionSpec(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionSpec(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectionSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectionSpec()
{
  return &type metadata for DetectionSpec;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands9ImageDataVG_So13simd_float4x4as5NeverOTg5(void (*a1)(__int128 *__return_ptr, _OWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _OWORD *i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[12];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v51 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v51;
    for (i = (_OWORD *)(a3 + 32); ; i += 12)
    {
      --v5;
      v10 = i[9];
      v11 = i[7];
      v47 = i[8];
      v48 = v10;
      v12 = i[9];
      v13 = i[11];
      v49 = i[10];
      v50 = v13;
      v14 = i[5];
      v15 = i[3];
      v43 = i[4];
      v44 = v14;
      v16 = i[5];
      v17 = i[7];
      v45 = i[6];
      v46 = v17;
      v18 = i[1];
      v40[0] = *i;
      v40[1] = v18;
      v19 = i[3];
      v21 = *i;
      v20 = i[1];
      v41 = i[2];
      v42 = v19;
      v35[8] = v47;
      v35[9] = v12;
      v22 = i[11];
      v35[10] = v49;
      v35[11] = v22;
      v35[4] = v43;
      v35[5] = v16;
      v35[6] = v45;
      v35[7] = v11;
      v35[0] = v21;
      v35[1] = v20;
      v35[2] = v41;
      v35[3] = v15;
      outlined retain of ImageData((uint64_t)v40);
      a1(&v36, v35);
      if (v4)
        break;
      v4 = 0;
      outlined release of ImageData((uint64_t)v40);
      v24 = v36;
      v23 = v37;
      v26 = v38;
      v25 = v39;
      v51 = v6;
      v28 = *(_QWORD *)(v6 + 16);
      v27 = *(_QWORD *)(v6 + 24);
      if (v28 >= v27 >> 1)
      {
        v33 = v38;
        v34 = v39;
        v31 = v36;
        v32 = v37;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        v24 = v31;
        v23 = v32;
        v26 = v33;
        v25 = v34;
        v6 = v51;
      }
      *(_QWORD *)(v6 + 16) = v28 + 1;
      v29 = (_OWORD *)(v6 + (v28 << 6));
      v29[2] = v24;
      v29[3] = v23;
      v29[4] = v26;
      v29[5] = v25;
      if (!v5)
        return v6;
    }
    outlined release of ImageData((uint64_t)v40);
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVy5Hands12CameraSourceOAH9ImageDataV_G_Sbs5NeverOTg5(void (*a1)(char *__return_ptr, _OWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  int v44;
  uint64_t v46;
  _OWORD v47[12];
  char v48;
  _OWORD v49[13];
  uint64_t v50;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v7 = a3;
  v50 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  v6 = v50;
  result = specialized Dictionary.startIndex.getter(v7);
  if (result < 0)
    goto LABEL_33;
  v10 = result;
  if (result >= 1 << *(_BYTE *)(v7 + 32))
    goto LABEL_33;
  v11 = v7 + 64;
  v42 = v7 + 80;
  v43 = v5;
  v12 = 1;
  v44 = v9;
  while (1)
  {
    v13 = v10 >> 6;
    if ((*(_QWORD *)(v11 + 8 * (v10 >> 6)) & (1 << v10)) == 0)
      break;
    if (*(_DWORD *)(v7 + 36) != v9)
      goto LABEL_29;
    v46 = v12;
    v14 = (__int128 *)(*(_QWORD *)(v7 + 56) + 192 * v10);
    v15 = v14[3];
    v17 = *v14;
    v16 = v14[1];
    v49[2] = v14[2];
    v49[3] = v15;
    v49[0] = v17;
    v49[1] = v16;
    v18 = v14[7];
    v20 = v14[4];
    v19 = v14[5];
    v49[6] = v14[6];
    v49[7] = v18;
    v49[4] = v20;
    v49[5] = v19;
    v21 = v14[11];
    v23 = v14[8];
    v22 = v14[9];
    v49[10] = v14[10];
    v49[11] = v21;
    v49[8] = v23;
    v49[9] = v22;
    v24 = v14[9];
    v47[8] = v14[8];
    v47[9] = v24;
    v25 = v14[11];
    v47[10] = v14[10];
    v47[11] = v25;
    v26 = v14[5];
    v47[4] = v14[4];
    v47[5] = v26;
    v27 = v14[7];
    v47[6] = v14[6];
    v47[7] = v27;
    v28 = v14[1];
    v47[0] = *v14;
    v47[1] = v28;
    v29 = v14[3];
    v47[2] = v14[2];
    v47[3] = v29;
    outlined retain of ImageData((uint64_t)v49);
    a1(&v48, v47);
    if (v4)
    {
      outlined release of ImageData((uint64_t)v49);
      swift_release();
      return v6;
    }
    v30 = v7;
    result = outlined release of ImageData((uint64_t)v49);
    v31 = v48;
    v50 = v6;
    v33 = *(_QWORD *)(v6 + 16);
    v32 = *(_QWORD *)(v6 + 24);
    v34 = v6;
    if (v33 >= v32 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
      v34 = v50;
    }
    *(_QWORD *)(v34 + 16) = v33 + 1;
    *(_BYTE *)(v34 + v33 + 32) = v31;
    v35 = *(_BYTE *)(v30 + 32);
    if ((uint64_t)v10 >= 1 << v35)
      goto LABEL_30;
    v6 = v34;
    v36 = *(_QWORD *)(v11 + 8 * v13);
    if ((v36 & (1 << v10)) == 0)
      goto LABEL_31;
    v7 = v30;
    v9 = v44;
    if (*(_DWORD *)(v30 + 36) != v44)
      goto LABEL_32;
    v37 = v36 & (-2 << (v10 & 0x3F));
    if (v37)
    {
      v10 = __clz(__rbit64(v37)) | v10 & 0xFFFFFFFFFFFFFFC0;
      v4 = 0;
      v38 = v43;
    }
    else
    {
      v39 = v13 + 1;
      v40 = (unint64_t)((1 << v35) + 63) >> 6;
      v4 = 0;
      v38 = v43;
      if (v13 + 1 >= v40)
        goto LABEL_21;
      v41 = *(_QWORD *)(v11 + 8 * v39);
      if (!v41)
      {
        while (v40 - 2 != v13)
        {
          v41 = *(_QWORD *)(v42 + 8 * v13++);
          if (v41)
          {
            v39 = v13 + 1;
            goto LABEL_20;
          }
        }
LABEL_21:
        v10 = 1 << v35;
        goto LABEL_22;
      }
LABEL_20:
      v10 = __clz(__rbit64(v41)) + (v39 << 6);
    }
LABEL_22:
    if (v46 == v38)
      return v6;
    if ((v10 & 0x8000000000000000) == 0)
    {
      v12 = v46 + 1;
      if ((uint64_t)v10 < 1 << v35)
        continue;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

void static PoseModelInference.setPoseInputs(forHand:withHandsKitData:withPoseModel:gtInjections:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int32 v45;
  uint64_t v46;
  char v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  NSData v106;
  uint64_t v107;
  float32x4_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int (*v138)(uint64_t, uint64_t, uint64_t);
  __n128 v139;
  char isUniquelyReferenced_nonNull_native;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  __n128 v144;
  char v145;
  __int128 v146;
  NSData v147;
  __n128 v148;
  _OWORD *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  __n128 v175;
  int32x4_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int8x16_t v180;
  float32x4_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  Class isa;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  float32x4_t v192;
  __n128 v193;
  __int128 v194;
  __n128 v195;
  uint64_t v196;
  __n128 v197;
  __n128 v198;
  float32x4_t v199;
  uint64_t v200;
  float32x4_t v201;
  float32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __n128 v208;
  _OWORD v209[4];
  _OWORD v210[4];
  __n128 v211;
  _OWORD v212[11];
  __int128 v213[12];
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;

  v204 = a5;
  v205 = a6;
  v206 = a4;
  v207 = a3;
  v263 = *MEMORY[0x24BDAC8D0];
  v208.n128_u64[0] = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v208.n128_u64[0], v12);
  v14 = (char *)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_OWORD *)(a2 + 176);
  v236 = *(_OWORD *)(a2 + 160);
  v237 = v15;
  v16 = *(_OWORD *)(a2 + 112);
  v232 = *(_OWORD *)(a2 + 96);
  v233 = v16;
  v17 = *(_OWORD *)(a2 + 144);
  v234 = *(_OWORD *)(a2 + 128);
  v235 = v17;
  v18 = *(_OWORD *)(a2 + 48);
  v228 = *(_OWORD *)(a2 + 32);
  v229 = v18;
  v19 = *(_OWORD *)(a2 + 80);
  v230 = *(_OWORD *)(a2 + 64);
  v231 = v19;
  v20 = *(_OWORD *)(a2 + 16);
  v226 = *(_OWORD *)a2;
  v227 = v20;
  v21 = *(_OWORD *)(a2 + 416);
  v252 = *(_OWORD *)(a2 + 400);
  v253 = v21;
  v254 = *(_OWORD *)(a2 + 432);
  v22 = *(_OWORD *)(a2 + 352);
  v248 = *(_OWORD *)(a2 + 336);
  v249 = v22;
  v23 = *(_OWORD *)(a2 + 384);
  v250 = *(_OWORD *)(a2 + 368);
  v251 = v23;
  v24 = *(_OWORD *)(a2 + 288);
  v244 = *(_OWORD *)(a2 + 272);
  v245 = v24;
  v25 = *(_OWORD *)(a2 + 320);
  v246 = *(_OWORD *)(a2 + 304);
  v247 = v25;
  v26 = *(_OWORD *)(a2 + 224);
  v240 = *(_OWORD *)(a2 + 208);
  v241 = v26;
  v27 = *(_OWORD *)(a2 + 256);
  v242 = *(_OWORD *)(a2 + 240);
  v243 = v27;
  v28 = *(_OWORD *)(a2 + 512);
  v259 = *(_OWORD *)(a2 + 496);
  v260 = v28;
  v261 = *(_OWORD *)(a2 + 528);
  v29 = *(_OWORD *)(a2 + 480);
  v257 = *(_OWORD *)(a2 + 464);
  v30 = *(_QWORD *)(a2 + 200);
  v31 = *(_QWORD *)(a2 + 448);
  v32 = *(_QWORD *)(a2 + 456);
  v238 = *(_QWORD *)(a2 + 192);
  v255 = v31;
  v262 = *(_QWORD *)(a2 + 544);
  v258 = v29;
  type metadata accessor for PoseModelUtils();
  v239 = v30;
  v203 = v32;
  v256 = v32;
  v33 = *(unsigned __int8 *)(a1 + 136);
  static PoseModelUtils.getHandCenterGT(gtInjections:handsKitData:isLeft:)(a7, (uint64_t)&v214);
  v34 = a8;
  v201.i64[0] = *((_QWORD *)&v215 + 1);
  v35 = v215;
  v36 = v216;
  outlined init with copy of HandDescriptor(a1, v34);
  v37 = *(_QWORD *)(a1 + 200);
  if (!v37 || *(_QWORD *)(v37 + 16) != 2)
    goto LABEL_21;
  v38 = 16;
  if (v33)
    v39 = 0;
  else
    v39 = 16;
  if (!v33)
    v38 = 0;
  if (!*(_QWORD *)(v30 + 16))
    goto LABEL_21;
  v40 = v37 + 32;
  v41 = v40 + v39;
  v42 = *(_QWORD *)v41;
  v43 = v40 + v38;
  v44 = *(_QWORD *)v43;
  v199.i32[0] = *(unsigned __int8 *)(v43 + 8);
  v45 = *(unsigned __int8 *)(v41 + 8);
  v198.n128_u64[0] = v42;
  v197.n128_u32[0] = v45;
  v200 = v34;
  v46 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v45);
  v34 = v200;
  if ((v47 & 1) == 0)
    goto LABEL_21;
  v48 = (__int128 *)(*(_QWORD *)(v30 + 56) + 192 * v46);
  v49 = *v48;
  v50 = v48[1];
  v51 = v48[3];
  v228 = v48[2];
  v229 = v51;
  v227 = v50;
  v52 = v48[4];
  v53 = v48[5];
  v54 = v48[7];
  v232 = v48[6];
  v233 = v54;
  v230 = v52;
  v231 = v53;
  v55 = v48[8];
  v56 = v48[9];
  v57 = v48[11];
  v236 = v48[10];
  v237 = v57;
  v234 = v55;
  v235 = v56;
  v226 = v49;
  if (!*(_QWORD *)(v30 + 16))
    goto LABEL_21;
  outlined retain of ImageData((uint64_t)&v226);
  v58 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v199.i8[0]);
  if ((v59 & 1) == 0)
  {
    outlined release of ImageData((uint64_t)&v226);
    v34 = v200;
LABEL_21:
    lazy protocol witness table accessor for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError();
    swift_allocError();
    *(_OWORD *)v84 = 0u;
    *(_OWORD *)(v84 + 16) = 0u;
    *(_BYTE *)(v84 + 32) = 3;
    swift_willThrow();
    goto LABEL_22;
  }
  v60 = (__int128 *)(*(_QWORD *)(v30 + 56) + 192 * v58);
  v61 = v60[4];
  v62 = v60[5];
  v63 = v60[7];
  v220 = v60[6];
  v221 = v63;
  v219 = v62;
  v64 = v60[8];
  v65 = v60[9];
  v66 = v60[11];
  v224 = v60[10];
  v225 = v66;
  v222 = v64;
  v223 = v65;
  v67 = v60[1];
  v69 = v60[2];
  v68 = v60[3];
  v214 = *v60;
  v215 = v67;
  v216 = v69;
  v217 = v68;
  v218 = v61;
  v196 = *(int *)(v208.n128_u64[0] + 92);
  v70 = *(_QWORD *)(a1 + v196);
  v71 = *(_QWORD *)(v70 + 16);
  outlined retain of ImageData((uint64_t)&v214);
  if (!v71)
    goto LABEL_18;
  v72 = specialized __RawDictionaryStorage.find<A>(_:)(v198.n128_i64[0], v197.n128_i8[0]);
  if ((v73 & 1) == 0)
    goto LABEL_18;
  if (!*(_QWORD *)(v70 + 16))
    goto LABEL_18;
  v74 = *(_QWORD *)(v70 + 56) + 176 * v72;
  v75 = *(_OWORD *)(v74 + 48);
  v193 = *(__n128 *)(v74 + 32);
  v194 = v75;
  v195 = *(__n128 *)(v74 + 64);
  v76 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v199.i8[0]);
  if ((v77 & 1) == 0)
    goto LABEL_18;
  v78 = *(_QWORD *)(v70 + 56) + 176 * v76;
  v79 = *(_OWORD *)(v78 + 48);
  v190 = *(_OWORD *)(v78 + 32);
  v191 = v79;
  v192 = *(float32x4_t *)(v78 + 64);
  outlined init with copy of HandDescriptor(a1, (uint64_t)v14);
  if ((v36 & 1) != 0)
  {
    v80 = *((_QWORD *)v14 + 22);
    v201.i64[0] = *((_QWORD *)v14 + 23);
    v81 = v14[192];
    outlined destroy of HandDescriptor((uint64_t)v14);
    if ((v81 & 1) != 0)
    {
LABEL_18:
      lazy protocol witness table accessor for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError();
      swift_allocError();
      *(_QWORD *)v82 = 3;
      *(_QWORD *)(v82 + 8) = 0;
      *(_QWORD *)(v82 + 16) = 0;
      *(_QWORD *)(v82 + 24) = 0;
      *(_BYTE *)(v82 + 32) = 3;
      swift_willThrow();
      outlined release of ImageData((uint64_t)&v214);
      v83 = &v226;
LABEL_19:
      outlined release of ImageData((uint64_t)v83);
      v34 = v200;
LABEL_22:
      outlined destroy of HandDescriptor(v34);
      return;
    }
    v187 = v44;
    v188 = v80;
  }
  else
  {
    v187 = v44;
    v188 = v35;
    outlined destroy of HandDescriptor((uint64_t)v14);
  }
  v85 = *(unsigned __int8 *)(a1 + 136);
  Hands_trace_CBridge_0();
  v189 = type metadata accessor for __DataStorage();
  swift_allocObject();
  v86 = __DataStorage.init(capacity:)();
  *(_QWORD *)&v213[0] = 0;
  *((_QWORD *)&v213[0] + 1) = v86 | 0x4000000000000000;
  v211 = v193;
  v87 = specialized Data.init<A>(_:)((uint64_t)&v211, (unint64_t)&v211 | 0xC);
  v89 = v88;
  Data.append(_:)();
  outlined consume of Data._Representation(v87, v89);
  v211 = (__n128)v190;
  v90 = specialized Data.init<A>(_:)((uint64_t)&v211, (unint64_t)&v211 | 0xC);
  v92 = v91;
  Data.append(_:)();
  outlined consume of Data._Representation(v90, v92);
  v211 = (__n128)v194;
  v93 = specialized Data.init<A>(_:)((uint64_t)&v211, (unint64_t)&v211 | 0xC);
  v95 = v94;
  Data.append(_:)();
  outlined consume of Data._Representation(v93, v95);
  v211 = (__n128)v191;
  v96 = specialized Data.init<A>(_:)((uint64_t)&v211, (unint64_t)&v211 | 0xC);
  v98 = v97;
  Data.append(_:)();
  outlined consume of Data._Representation(v96, v98);
  v211 = v195;
  v99 = specialized Data.init<A>(_:)((uint64_t)&v211, (unint64_t)&v211 | 0xC);
  v101 = v100;
  Data.append(_:)();
  outlined consume of Data._Representation(v99, v101);
  v211 = (__n128)v192;
  v102 = specialized Data.init<A>(_:)((uint64_t)&v211, (unint64_t)&v211 | 0xC);
  v104 = v103;
  Data.append(_:)();
  outlined consume of Data._Representation(v102, v104);
  v105 = v213[0];
  outlined copy of Data._Representation(*(uint64_t *)&v213[0], *((unint64_t *)&v213[0] + 1));
  v106.super.isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v105, *((unint64_t *)&v105 + 1));
  v107 = v202.i64[0];
  specialized static PoseModelInference.setEspressoInput(_:_:_:)(0, v207, v206, v204, v205, v106.super.isa);
  if (v107)
  {
    outlined consume of Data._Representation(v105, *((unint64_t *)&v105 + 1));
    outlined release of ImageData((uint64_t)&v226);

    v83 = &v214;
    goto LABEL_19;
  }
  outlined consume of Data._Representation(v105, *((unint64_t *)&v105 + 1));

  v213[8] = v234;
  v213[9] = v235;
  v213[10] = v236;
  v213[11] = v237;
  v213[4] = v230;
  v213[5] = v231;
  v213[6] = v232;
  v213[7] = v233;
  v213[0] = v226;
  v213[1] = v227;
  v213[2] = v228;
  v213[3] = v229;
  v212[7] = v222;
  v212[8] = v223;
  v212[9] = v224;
  v212[10] = v225;
  v212[3] = v218;
  v212[4] = v219;
  v212[5] = v220;
  v212[6] = v221;
  v211 = (__n128)v214;
  v212[0] = v215;
  v212[1] = v216;
  v212[2] = v217;
  v108 = specialized static PoseModelInference.calculateLocalizerMatrixes(mainCameraImage:secondaryCameraImage:imageCrops:)(v213, (__int128 *)&v211, *(_QWORD *)(a1 + v196));
  swift_allocObject();
  v109 = __DataStorage.init(capacity:)();
  *(_QWORD *)&v213[0] = 0;
  *((_QWORD *)&v213[0] + 1) = v109 | 0x4000000000000000;
  if (!v108[1].i64[0])
  {
    __break(1u);
    goto LABEL_40;
  }
  LODWORD(v196) = v85;
  v211 = (__n128)v108[2];
  v110 = specialized Data.init<A>(_:)((uint64_t)&v211, (uint64_t)v212);
  v112 = v111;
  Data.append(_:)();
  outlined consume of Data._Representation(v110, v112);
  if (v108[1].i64[0] < 2uLL)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  v211 = (__n128)v108[6];
  v113 = specialized Data.init<A>(_:)((uint64_t)&v211, (uint64_t)v212);
  v202.i64[0] = (uint64_t)v108;
  v115 = v114;
  Data.append(_:)();
  outlined consume of Data._Representation(v113, v115);
  v211 = *(__n128 *)(v202.i64[0] + 48);
  v116 = specialized Data.init<A>(_:)((uint64_t)&v211, (uint64_t)v212);
  v118 = v117;
  Data.append(_:)();
  outlined consume of Data._Representation(v116, v118);
  v211 = *(__n128 *)(v202.i64[0] + 112);
  v119 = specialized Data.init<A>(_:)((uint64_t)&v211, (uint64_t)v212);
  v121 = v120;
  Data.append(_:)();
  outlined consume of Data._Representation(v119, v121);
  v211 = *(__n128 *)(v202.i64[0] + 64);
  v122 = specialized Data.init<A>(_:)((uint64_t)&v211, (uint64_t)v212);
  v124 = v123;
  Data.append(_:)();
  outlined consume of Data._Representation(v122, v124);
  v211 = *(__n128 *)(v202.i64[0] + 128);
  v125 = specialized Data.init<A>(_:)((uint64_t)&v211, (uint64_t)v212);
  v127 = v126;
  Data.append(_:)();
  outlined consume of Data._Representation(v125, v127);
  v211 = *(__n128 *)(v202.i64[0] + 80);
  v128 = specialized Data.init<A>(_:)((uint64_t)&v211, (uint64_t)v212);
  v130 = v129;
  Data.append(_:)();
  v131 = v130;
  v132 = v202.i64[0];
  outlined consume of Data._Representation(v128, v131);
  v211 = *(__n128 *)(v132 + 144);
  v133 = specialized Data.init<A>(_:)((uint64_t)&v211, (uint64_t)v212);
  v135 = v134;
  Data.append(_:)();
  outlined consume of Data._Representation(v133, v135);
  v136 = v200 + *(int *)(v208.n128_u64[0] + 96);
  v137 = type metadata accessor for HandDescriptorInternal();
  v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 48);
  if (!v138(v136, 1, v137))
  {
    v208 = *(__n128 *)(v132 + 32);
    v139 = *(__n128 *)(v132 + 48);
    v194 = *(_OWORD *)(v132 + 64);
    v195 = v139;
    v193 = *(__n128 *)(v132 + 80);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v211.n128_u64[0] = *(_QWORD *)(v136 + 136);
    *(_QWORD *)(v136 + 136) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v198.n128_i64[0], v197.n128_i8[0], isUniquelyReferenced_nonNull_native, v208, v195, (__n128)v194, v193);
    *(_QWORD *)(v136 + 136) = v211.n128_u64[0];
    swift_bridgeObjectRelease();
  }
  v141 = v138(v136, 1, v137);
  v143 = v204;
  v142 = v205;
  if (!v141)
  {
    v208 = *(__n128 *)(v202.i64[0] + 96);
    v144 = *(__n128 *)(v202.i64[0] + 112);
    v197 = *(__n128 *)(v202.i64[0] + 128);
    v198 = v144;
    v195 = *(__n128 *)(v202.i64[0] + 144);
    swift_bridgeObjectRelease();
    v145 = swift_isUniquelyReferenced_nonNull_native();
    v211.n128_u64[0] = *(_QWORD *)(v136 + 136);
    *(_QWORD *)(v136 + 136) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v187, v199.i8[0], v145, v208, v198, v197, v195);
    *(_QWORD *)(v136 + 136) = v211.n128_u64[0];
  }
  swift_bridgeObjectRelease();
  v146 = v213[0];
  outlined copy of Data._Representation(*(uint64_t *)&v213[0], *((unint64_t *)&v213[0] + 1));
  v147.super.isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v146, *((unint64_t *)&v146 + 1));
  specialized static PoseModelInference.setEspressoInput(_:_:_:)(1, v207, v206, v143, v142, v147.super.isa);
  outlined consume of Data._Representation(v146, *((unint64_t *)&v146 + 1));

  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v209);
  v197 = (__n128)v209[0];
  v198 = (__n128)v209[1];
  v202 = (float32x4_t)v209[2];
  v199 = (float32x4_t)v209[3];
  v148.n128_u64[0] = v188;
  v148.n128_u64[1] = v201.i64[0];
  v208 = v148;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImageData>);
  v149 = (_OWORD *)swift_allocObject();
  v150 = v234;
  v151 = v236;
  v152 = v237;
  v149[11] = v235;
  v149[12] = v151;
  v153 = v230;
  v154 = v232;
  v155 = v233;
  v149[7] = v231;
  v149[8] = v154;
  v149[9] = v155;
  v149[10] = v150;
  v156 = v226;
  v157 = v227;
  v149[1] = xmmword_23D9A7050;
  v149[2] = v156;
  v158 = v228;
  v159 = v229;
  v149[3] = v157;
  v149[4] = v158;
  v149[5] = v159;
  v149[6] = v153;
  v160 = v222;
  v161 = v224;
  v162 = v225;
  v149[23] = v223;
  v149[24] = v161;
  v149[25] = v162;
  v163 = v218;
  v164 = v220;
  v165 = v221;
  v149[19] = v219;
  v149[20] = v164;
  v149[21] = v165;
  v149[22] = v160;
  v166 = v214;
  v167 = v215;
  v149[13] = v152;
  v149[14] = v166;
  v168 = v216;
  v169 = v217;
  v149[15] = v167;
  v149[16] = v168;
  v149[17] = v169;
  v149[18] = v163;
  MEMORY[0x24BDAC7A8](v149, v170);
  *(&v186 - 2) = a1;
  outlined retain of ImageData((uint64_t)&v226);
  outlined retain of ImageData((uint64_t)&v214);
  v171 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands9ImageDataVG_So13simd_float4x4as5NeverOTg5((void (*)(__int128 *__return_ptr, _OWORD *))partial apply for closure #1 in static PoseModelInference.setPoseInputs(forHand:withHandsKitData:withPoseModel:gtInjections:), (uint64_t)(&v186 - 4), (uint64_t)v149);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v210);
  if (!*(_QWORD *)(v171 + 16))
    goto LABEL_41;
  v172 = vaddq_f32(v199, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v197, v208.n128_f32[0]), (float32x4_t)v198, (float32x2_t)v208.n128_u64[0], 1), v202, (float32x4_t)v208, 2));
  v173 = vmulq_f32(v172, v172);
  v174.i64[0] = 0;
  v174.i64[1] = COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v173, 2), vaddq_f32(v173, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v173.f32, 1))).f32[0]));
  v192 = (float32x4_t)v210[0];
  v193 = (__n128)v210[1];
  v194 = *(_OWORD *)(v171 + 32);
  v195 = (__n128)v210[3];
  v175 = *(__n128 *)(v171 + 48);
  v197 = (__n128)v210[2];
  v198 = v175;
  v199 = *(float32x4_t *)(v171 + 64);
  v201 = *(float32x4_t *)(v171 + 80);
  v202 = v174;
  swift_bridgeObjectRelease();
  v177 = *(unsigned __int8 *)(v207 + 320);
  if (v177 == 2)
  {
    v179 = v204;
    v178 = v205;
    v180 = (int8x16_t)v202;
  }
  else
  {
    v176.i32[0] = 0;
    v181 = vaddq_f32((float32x4_t)v195, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v192, v208.n128_f32[0]), (float32x4_t)vdupq_lane_s32((int32x2_t)v208.n128_u64[0], 1), (float32x4_t)v193), (float32x4_t)vdupq_laneq_s32((int32x4_t)v208, 2), (float32x4_t)v197));
    v180 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)(v177 & 1), v176), 0), (int8x16_t)v202, (int8x16_t)vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v194, v181.f32[0]), (float32x4_t)v198, *(float32x2_t *)v181.f32, 1), v199, v181, 2), (float32x4_t)0, v201));
    v179 = v204;
    v178 = v205;
  }
  v213[0] = (__int128)v180;
  v182 = specialized Data.init<A>(_:)((uint64_t)v213, (unint64_t)v213 | 0xC);
  v184 = v183;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v182, v184);
  specialized static PoseModelInference.setEspressoInput(_:_:_:)(2, v207, v206, v179, v178, isa);

  Hands_trace_CBridge_0();
  outlined release of ImageData((uint64_t)&v226);
  outlined release of ImageData((uint64_t)&v214);
}

uint64_t static PoseModelInference.processHandPose(forHand:withPrevHand:withCameraTransition:withAlternateCamerasHand:withHandsKitData:withPoseModel:handPoseBuilder:geometricFilter:gtInjections:generateAlternatePose:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int32 a3@<W2>, uint64_t a4@<X3>, const void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  int v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int32 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int v50;
  float32x4_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t result;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  void *v73;
  _BYTE *v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  char *v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  _OWORD v86[18];
  float32x4_t v87[36];

  v82.i64[0] = a8;
  v85.i64[0] = a7;
  v84.i64[0] = a6;
  v81.i64[0] = a4;
  v83.i32[0] = a3;
  v80.i64[0] = a2;
  v18 = type metadata accessor for HandDescriptor();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18, v20);
  v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v23, v24);
  v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of HandDescriptor(a1, a9);
  memcpy(v87, a5, 0x228uLL);
  HandPoseBuilder.set(Hand:withHandsKitData:)(a9, (uint64_t)v87);
  *(_QWORD *)&v76 = v19;
  v77 = v26;
  v78 = v22;
  v27 = v83.i8[0];
  v79.i64[0] = (uint64_t)a5;
  memcpy(v87, a5, 0x228uLL);
  HandPoseBuilder.set(gtInjections:withHandsKitData:)(a14, v87);
  v28 = v84.i64[0];
  v29 = v85.i64[0];
  specialized HandPoseBuilder.buildJointUncertainity(withPoseModel:)(v84.i64[0], v85.i64[0]);
  specialized HandPoseBuilder.buildJointOcclusions(withPoseModel:)(v28, v29);
  HandPoseBuilder.buildBlizzardOutputTransforms(withPoseModel:)(v28, v29, (float32x4_t *)v82.i64[0], a10);
  if (v27)
  {
    HandPoseBuilder.computeCorrectionTransform(forCameraTransition:withAlternateCamerasHand:)(v27, v81.i64[0], (uint64_t)v87);
    v31 = v27;
    v32 = a9;
    v33 = (float32x4_t *)(a9 + *(int *)(v18 + 140));
    specialized static CameraPairTransition.scaleTransform(_:)(v87, v87[0], v87[1], v87[2], v87[3], v87[4].f32[0]);
    v34 = v87[1];
    v35 = v87[2];
    v36 = v87[3];
    v37 = v87[4].i32[0];
    v38 = v87[5];
    v39 = v87[6];
    v40 = v87[7];
    v41 = v87[8];
    *v33 = v87[0];
    v33[1] = v34;
    v33[2] = v35;
    v33[3] = v36;
    v33[4].i32[0] = v37;
    v33[5] = v38;
    v33[6] = v39;
    v33[7] = v40;
    v33[8] = v41;
    v42 = v31 == 2;
    v43 = v18;
    if (v42)
      v44 = 10;
    else
      v44 = 0;
    v33[16].i64[1] = v44;
    v33[17].i64[0] = 10;
    v45 = (const void *)v79.i64[0];
  }
  else
  {
    v46 = (uint64_t)v77;
    outlined init with copy of HandDescriptor?(v80.i64[0], (uint64_t)v77);
    v43 = v18;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v46, 1, v18) == 1)
    {
      outlined destroy of HandDescriptor?(v46);
      v32 = a9;
    }
    else
    {
      v47 = v46 + *(int *)(v18 + 140);
      v48 = *(float32x4_t *)v47;
      v84 = *(float32x4_t *)(v47 + 16);
      v85 = v48;
      v49 = *(float32x4_t *)(v47 + 32);
      v82 = *(float32x4_t *)(v47 + 48);
      v83 = v49;
      v50 = *(_DWORD *)(v47 + 64);
      v51 = *(float32x4_t *)(v47 + 80);
      v80 = *(float32x4_t *)(v47 + 96);
      v81 = v51;
      v52 = *(_OWORD *)(v47 + 112);
      v75 = *(_OWORD *)(v47 + 128);
      v76 = v52;
      v53 = *(_QWORD *)(v47 + 264);
      v54 = *(_QWORD *)(v47 + 272);
      outlined destroy of HandDescriptor(v46);
      v32 = a9;
      v55 = a9 + *(int *)(v18 + 140);
      v56 = v80;
      *(float32x4_t *)(v55 + 80) = v81;
      *(float32x4_t *)(v55 + 96) = v56;
      v57 = v75;
      *(_OWORD *)(v55 + 112) = v76;
      *(_OWORD *)(v55 + 128) = v57;
      v58 = v84;
      *(float32x4_t *)v55 = v85;
      *(float32x4_t *)(v55 + 16) = v58;
      v59 = v82;
      *(float32x4_t *)(v55 + 32) = v83;
      *(float32x4_t *)(v55 + 48) = v59;
      *(_DWORD *)(v55 + 64) = v50;
      *(_QWORD *)(v55 + 264) = v53;
      *(_QWORD *)(v55 + 272) = v54;
      v43 = v18;
    }
    v60 = v32 + *(int *)(v43 + 140);
    v45 = (const void *)v79.i64[0];
    if (*(uint64_t *)(v60 + 264) >= 1)
    {
      v61 = *(_QWORD *)(v60 + 272);
      v62 = v61 < 1;
      v63 = v61 - 1;
      if (!v62)
        *(_QWORD *)(v60 + 272) = v63;
    }
  }
  v64 = (const void *)(v32 + *(int *)(v43 + 140));
  memcpy(v86, v64, 0x118uLL);
  memcpy(v87, v64, 0x118uLL);
  outlined retain of CameraPairTransition(v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of HandPose?);
  HandPoseBuilder.adjustForCameraPairTransition(_:applyJointTranslations:)(v87, (a15 & 1) == 0);
  outlined retain of CameraPairTransition(v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of HandPose?);
  if ((a15 & 1) != 0)
    goto LABEL_15;
  v65 = (uint64_t)v78;
  outlined init with copy of HandDescriptor(v32, (uint64_t)v78);
  swift_beginAccess();
  v66 = *(float32x4_t **)(a12 + 40);
  if (v66[1].i64[0] == 27)
  {
    memcpy(v87, v45, 0x228uLL);
    swift_bridgeObjectRetain();
    v67 = GeometricPoseFilter.run(forHand:withHandsKitData:_:)(v65, v87, v66);
    swift_bridgeObjectRelease();
    *(_QWORD *)(a12 + 48) = v67;
    swift_bridgeObjectRelease();
    outlined destroy of HandDescriptor(v65);
LABEL_15:
    HandPoseBuilder.getPose(useAdjustedTransforms:)(a15 & 1, (uint64_t)v87);
    v84 = v87[1];
    v85 = v87[0];
    v82 = v87[3];
    v83 = v87[2];
    v80 = v87[5];
    v81 = v87[4];
    v79 = v87[6];
    v68 = v87[7].i64[0];
    result = outlined consume of HandPose?(*(_QWORD *)(v32 + 16));
    v70 = v84;
    *(float32x4_t *)(v32 + 16) = v85;
    *(float32x4_t *)(v32 + 32) = v70;
    v71 = v82;
    *(float32x4_t *)(v32 + 48) = v83;
    *(float32x4_t *)(v32 + 64) = v71;
    v72 = v80;
    *(float32x4_t *)(v32 + 80) = v81;
    *(float32x4_t *)(v32 + 96) = v72;
    *(float32x4_t *)(v32 + 112) = v79;
    *(_QWORD *)(v32 + 128) = v68;
    return result;
  }
  lazy protocol witness table accessor for type HandPoseBuilderError and conformance HandPoseBuilderError();
  v73 = (void *)swift_allocError();
  *v74 = 2;
  swift_willThrow();
  outlined destroy of HandDescriptor(v65);
  v87[0].i64[0] = 0;
  v87[0].i64[1] = 0xE000000000000000;
  v30._countAndFlagsBits = 0x772064656C696146;
  v30._object = (void *)0xEC00000020687469;
  String.append(_:)(v30);
  *(_QWORD *)&v86[0] = v73;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v87[1].i64[1] = MEMORY[0x24BEE0D00];
  type metadata accessor for HandyLoggerNeo();
  v86[0] = xmmword_23D9A6CC0;
  v86[1] = 0uLL;
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v86, 0xD000000000000062, 0x800000023D9D1FF0, 316, (uint64_t)v87, MEMORY[0x24BEE4AF8]);

  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v87);
}

uint64_t static PoseModelInference.postProcessOutputs(forHand:withPrevHand:withHandsKitData:withPoseModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  int *v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(char *, uint64_t, int *);
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  int *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  _QWORD v75[2];
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _QWORD v79[7];
  _QWORD v80[5];
  void *v81;

  v68 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v62 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v57 - v15;
  outlined init with copy of HandDescriptor(a1, a5);
  v17 = specialized static PoseModelInference.getHandPresenceOutputs(forHand:withPoseModel:)(a1, a3, a4);
  v18 = (int *)type metadata accessor for HandDescriptor();
  *(_QWORD *)(a5 + v18[26]) = v17;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(a3 + 232) & 1) != 0)
    goto LABEL_12;
  if ((*(_BYTE *)(a3 + 240) & 1) == 0)
  {
    v20 = specialized static PoseModelInference.getHandPresenceCategory(scores:leftThreshold:requiresAssociationThreshold:)(v17, *(float *)(a3 + 228), *(float *)(a3 + 236));
    v22 = v21;
    swift_bridgeObjectRelease();
    v23 = a5 + v18[25];
    *(_QWORD *)v23 = v20;
    *(_BYTE *)(v23 + 8) = v22 & 1;
    v66 = specialized static PoseModelInference.buildObjectInteraction(_:)(a3, a4);
    v24 = specialized static PoseModelInference.buildHoverDistanceUncertainty(_:)(a3, a4);
    *(_DWORD *)(a5 + 264) = v24;
    *(_BYTE *)(a5 + 268) = BYTE4(v24) & 1;
    outlined init with copy of HandDescriptor?(v68, (uint64_t)v16);
    v25 = *(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v18 - 1) + 48);
    v26 = v25(v16, 1, v18);
    v67 = v5;
    v65 = v18;
    v64 = a5;
    if (v26 != 1)
    {
      v27 = (uint64_t *)&v16[v18[31]];
      v28 = *v27;
      v29 = v27[3];
      v30 = v27[4];
      v31 = v27[5];
      v32 = v27[6];
      v33 = *v27;
      v34 = (char *)v27[1];
      v69 = (void *)v27[2];
      v70 = (void *)v29;
      v81 = (void *)v30;
      v35 = (void *)v31;
      v36 = (void *)v32;
      outlined copy of ObjectInteractionData?(v33);
      result = outlined destroy of HandDescriptor((uint64_t)v16);
      if (!v28)
        goto LABEL_8;
      v16 = v62;
      outlined init with copy of HandDescriptor?(v68, (uint64_t)v62);
      if (v25(v16, 1, v18) != 1)
      {
        v43 = (void *)v28;
        v56 = &v16[v18[30]];
        v68 = *(_QWORD *)v56;
        v63 = v56[8];
        result = outlined destroy of HandDescriptor((uint64_t)v16);
        v42 = v34;
        v37 = v36;
        v38 = v35;
        v39 = v81;
        v40 = v70;
        v41 = v69;
        v44 = *(_QWORD *)(a3 + 248);
        if (v44)
          goto LABEL_9;
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
      outlined consume of ObjectInteractionData?(v28);
    }
    result = outlined destroy of HandDescriptor?((uint64_t)v16);
LABEL_8:
    v68 = 0;
    v37 = &outlined read-only object #6 of ObjectInteractionData.init();
    v38 = &outlined read-only object #5 of ObjectInteractionData.init();
    v39 = &outlined read-only object #4 of ObjectInteractionData.init();
    v40 = &outlined read-only object #3 of ObjectInteractionData.init();
    v41 = &outlined read-only object #2 of ObjectInteractionData.init();
    v42 = (char *)&outlined read-only object #1 of ObjectInteractionData.init();
    v63 = 1;
    v43 = &outlined read-only object #0 of ObjectInteractionData.init();
    v44 = *(_QWORD *)(a3 + 248);
    if (v44)
    {
LABEL_9:
      v46 = *(_QWORD *)(a3 + 272);
      v45 = *(_QWORD *)(a3 + 280);
      v48 = *(_QWORD *)(a3 + 256);
      v47 = *(_QWORD *)(a3 + 264);
      v80[0] = v44;
      v80[1] = v48;
      v80[2] = v47;
      v80[3] = v46;
      v80[4] = v45;
      v79[0] = v43;
      v79[1] = v42;
      v79[2] = v41;
      v79[3] = v40;
      v79[4] = v39;
      v79[5] = v38;
      v79[6] = v37;
      v62 = v42;
      v81 = v39;
      v70 = v40;
      v69 = v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized static PoseModelInference.getObjectInteractionBinned(prevData:score:params:)(v79, (uint64_t)v66, v80, v75);
      v49 = (_QWORD *)v75[1];
      v61 = v75[0];
      v60 = v76;
      v59 = v77;
      v58 = v78;
      swift_bridgeObjectRelease();
      outlined consume of ObjectInteractionParams?(v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71 = v68;
      v72 = v63;
      static PoseModelInference.getObjectInteractionCategory(currentBins:previousBins:previousClass:)(v49, (uint64_t)&v71, (uint64_t)&v73);
      swift_bridgeObjectRelease();
      v50 = v74;
      v51 = v65;
      v52 = v64;
      v53 = v64 + v65[30];
      *(_QWORD *)v53 = v73;
      *(_BYTE *)(v53 + 8) = v50;
      v54 = v52 + v51[31];
      result = outlined consume of ObjectInteractionData?(*(_QWORD *)v54);
      *(_QWORD *)v54 = v61;
      *(_QWORD *)(v54 + 8) = v49;
      v55 = v59;
      *(_OWORD *)(v54 + 16) = v60;
      *(_OWORD *)(v54 + 32) = v55;
      *(_QWORD *)(v54 + 48) = v58;
      return result;
    }
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x24BEE0F88];
  v8[4] = MEMORY[0x24BDCFB90];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x24BEE0F88]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = specialized Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = specialized Data.LargeSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = specialized Data.InlineSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  return v6;
}

void specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_23D82FB90
     + dword_23D82FDC4[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_23D82FBA0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  outlined copy of Data._Representation(v1, v0);
  closure #1 in Data.init<A>(_:)(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  outlined consume of Data._Representation(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v13);
  return v4;
}

uint64_t closure #1 in static PoseModelInference.setPoseInputs(forHand:withHandsKitData:withPoseModel:gtInjections:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int32x4_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  int32x4_t *v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;

  result = type metadata accessor for HandDescriptor();
  v7 = *(_QWORD *)(a2 + *(int *)(result + 92));
  if (*(_QWORD *)(v7 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
    if ((v8 & 1) != 0)
    {
      v9 = (int32x4_t *)(*(_QWORD *)(v7 + 56) + 176 * result);
      v10 = v9[5];
      v11 = v9[6];
      v12 = v9[7];
      v13 = vzip1q_s32(v10, v12);
      v14 = vzip2q_s32(v10, v12);
      v15 = vdupq_lane_s32(*(int32x2_t *)v11.i8, 1);
      v16 = vdupq_laneq_s32(v11, 2);
      v17 = vzip1q_s32(v13, v11);
      v18 = vzip1q_s32(v14, v16);
      v17.i32[3] = 0;
      v19 = vzip2q_s32(v13, v15);
      v19.i32[3] = 0;
      v18.i32[3] = 0;
      *a3 = v17;
      a3[1] = v19;
      a3[2] = v18;
      a3[3] = (int32x4_t)xmmword_23D9A3E90;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *static PoseModelInference.getObjectInteractionCategory(currentBins:previousBins:previousClass:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result[2];
  if (!v3)
    goto LABEL_14;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  v6 = result[4];
  if (!v6)
  {
    if (v3 != 1)
    {
      v8 = 5;
      while (1)
      {
        v9 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
          break;
        if (result[v8])
          goto LABEL_3;
        ++v8;
        if (v9 == v3)
          goto LABEL_14;
      }
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_14:
    *(_QWORD *)a3 = 0;
LABEL_30:
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }
LABEL_3:
  if (*(_BYTE *)(a2 + 8))
  {
    if (v4)
    {
      if (v4 == 1)
        goto LABEL_6;
      goto LABEL_17;
    }
LABEL_23:
    if (v6 == 1)
    {
      *(_QWORD *)a3 = 1;
      *(_BYTE *)(a3 + 8) = 1;
      return result;
    }
    goto LABEL_28;
  }
  if (!v4)
    goto LABEL_23;
  if (v4 != 2)
  {
LABEL_6:
    if (v3 >= 2)
    {
      v7 = result[5];
      if (v6)
        goto LABEL_25;
LABEL_19:
      if (v7 == 1)
      {
        if (*(_BYTE *)(a2 + 8))
        {
          if (v4 >= 2)
            goto LABEL_27;
        }
        else if (v4 == 2)
        {
LABEL_27:
          v10 = 1;
LABEL_29:
          *(_QWORD *)a3 = v10;
          goto LABEL_30;
        }
LABEL_28:
        v10 = 2;
        goto LABEL_29;
      }
LABEL_25:
      *(_QWORD *)a3 = v4;
      *(_BYTE *)(a3 + 8) = v5;
      return result;
    }
    goto LABEL_32;
  }
LABEL_17:
  if (v3 >= 2)
  {
    v7 = result[4];
    if (result[5])
      goto LABEL_25;
    goto LABEL_19;
  }
LABEL_33:
  __break(1u);
  return result;
}

void one-time initialization function for branchArray()
{
  static PoseModelInference.branchArray = (uint64_t)&outlined read-only object #0 of one-time initialization function for branchArray;
}

uint64_t type metadata accessor for PoseModelInference()
{
  return objc_opt_self();
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, int *a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v6;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _BOOL8 v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  char v22;
  _QWORD *v23;
  void *v24;
  id v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6 || !a2)
    goto LABEL_8;
  v11 = *(_BYTE *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  if (!a3)
    goto LABEL_25;
  v13 = *a2;
  v14 = *a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v16 & 1) == 0;
  v19 = __OFADD__(v17, v18);
  v20 = v17 + v18;
  if (v19)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v21 = v16;
  if (*(_QWORD *)(v14 + 24) < v20)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
    if ((v21 & 1) != (v22 & 1))
    {
LABEL_7:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_10:
    v23 = a5;
    if ((v21 & 1) != 0)
      goto LABEL_11;
    goto LABEL_14;
  }
  if ((a4 & 1) != 0)
    goto LABEL_10;
  v23 = a5;
  v26 = v15;
  specialized _NativeDictionary.copy()();
  v15 = v26;
  if ((v21 & 1) != 0)
  {
LABEL_11:
    v24 = (void *)swift_allocError();
    swift_willThrow();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_14:
  v27 = (_QWORD *)*v23;
  *(_QWORD *)(*v23 + 8 * (v15 >> 6) + 64) |= 1 << v15;
  v28 = v27[6] + 16 * v15;
  *(_QWORD *)v28 = v12;
  *(_BYTE *)(v28 + 8) = v11;
  *(_DWORD *)(v27[7] + 4 * v15) = v13;
  v29 = v27[2];
  v19 = __OFADD__(v29, 1);
  v30 = v29 + 1;
  if (!v19)
  {
    v27[2] = v30;
    v31 = v6 - 1;
    if (v6 != 1 && a3 != 1)
    {
      v32 = a2 + 1;
      v33 = (char *)(a1 + 56);
      v34 = 4 * a3 - 4;
      while (1)
      {
        v35 = *v33;
        v36 = *((_QWORD *)v33 - 1);
        v37 = *v32;
        v38 = (_QWORD *)*v23;
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *v33);
        v41 = v38[2];
        v42 = (v40 & 1) == 0;
        v19 = __OFADD__(v41, v42);
        v43 = v41 + v42;
        if (v19)
          goto LABEL_26;
        v44 = v40;
        if (v38[3] < v43)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, 1);
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v35);
          if ((v44 & 1) != (v45 & 1))
            goto LABEL_7;
        }
        v23 = a5;
        if ((v44 & 1) != 0)
          goto LABEL_11;
        v46 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (v39 >> 6) + 64) |= 1 << v39;
        v47 = v46[6] + 16 * v39;
        *(_QWORD *)v47 = v36;
        *(_BYTE *)(v47 + 8) = v35;
        *(_DWORD *)(v46[7] + 4 * v39) = v37;
        v48 = v46[2];
        v19 = __OFADD__(v48, 1);
        v49 = v48 + 1;
        if (v19)
          goto LABEL_27;
        v46[2] = v49;
        if (--v31)
        {
          v33 += 16;
          ++v32;
          v34 -= 4;
          if (v34)
            continue;
        }
        break;
      }
    }
LABEL_25:
    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  _StringGuts.grow(_:)(30);
  v50._object = (void *)0x800000023D9C5160;
  v50._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v50);
  _print_unlocked<A, B>(_:_:)();
  v51._countAndFlagsBits = 39;
  v51._object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized static PoseModelInference.getEspressoOutputAsBuffer(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;

  v4 = v3;
  v5 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = *(_QWORD **)(*(_QWORD *)(v5 + 56) + 8 * v8);
  swift_retain();
  result = swift_bridgeObjectRelease();
  if (!a3)
  {
    swift_release();
    return 0;
  }
  v12 = v10[2];
  v13 = (void *)v10[3];
  v15 = v10[4];
  v14 = v10[5];
  v16 = v10[6];
  if (v16 > 0)
  {
    v17 = 32;
    if ((unint64_t)v16 >= 0x20)
      v16 = 32;
    if (v14)
      goto LABEL_8;
LABEL_21:
    swift_retain();
    v23._countAndFlagsBits = v12;
    v23._object = v13;
    result = E5RTRegressor.getOutputLength(_:)(v23);
    v4 = v24;
    if (v24)
      goto LABEL_22;
    v20 = result;
    goto LABEL_11;
  }
  v17 = 1;
  v16 = 1;
  if (!v14)
    goto LABEL_21;
LABEL_8:
  v18 = __OFSUB__(v14, v15);
  v19 = v14 - v15;
  if (v18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = v19 * v16;
  if ((unsigned __int128)(v19 * (__int128)v16) >> 64 != (v19 * v16) >> 63)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_retain();
LABEL_11:
  if ((unint64_t)(v20 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_25;
  }
  result = E5RTRegressor.getRawOutput(_:)(v12, v13);
  if (v4)
  {
LABEL_22:
    swift_release();
    return swift_release();
  }
  v21 = result;
  if (result)
  {
    swift_release();
    result = swift_release();
    if ((unint64_t)(v15 - 0x2000000000000000) >> 62 == 3)
    {
      v22 = 4 * v15 * v17;
      if ((unsigned __int128)(4 * v15 * (__int128)v17) >> 64 == v22 >> 63)
        return v21 + v22;
      goto LABEL_28;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized static PoseModelInference.setEspressoInput(_:_:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  if (a3)
  {
    v7 = *(_QWORD *)(a2 + 56);
    if (*(_QWORD *)(v7 + 16))
    {
      v11 = result;
      swift_retain();
      swift_bridgeObjectRetain();
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v13 & 1) != 0)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v12);
        swift_retain();
        swift_bridgeObjectRelease();
        if (!a6
          || (v15 = (char *)objc_msgSend(objc_retainAutorelease(a6), sel_bytes),
              E5RTRegressor.setNamedInput(_:fromRawPointer:)(v14, v15),
              v6)
          || !a5
          || !a4
          || (v16 = *(_QWORD *)(a4 + 56), !*(_QWORD *)(v16 + 16)))
        {
          swift_release();
          return swift_release();
        }
        swift_retain();
        swift_bridgeObjectRetain();
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
        if ((v18 & 1) != 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
          swift_retain();
          swift_bridgeObjectRelease();
          E5RTRegressor.setNamedInput(_:fromRawPointer:)(v19, v15);
          swift_release();
          swift_release();
          swift_release();
          return swift_release();
        }
        swift_release();
        swift_release();
      }
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void specialized static PoseModelInference.setPoseCrops(forHand:withHandsKitData:withPoseModel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Class v33;
  objc_class *v34;
  uint64_t v35;
  char v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  Class isa;
  objc_class *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[3];
  uint64_t v61;

  v7 = *(_QWORD *)(a1 + 200);
  if (v7 && *(_QWORD *)(v7 + 16) == 2)
  {
    v13 = *(_QWORD *)(a2 + 456);
    v14 = v7 + 32;
    v15 = 16;
    if (*(_BYTE *)(a1 + 136))
      v16 = 0;
    else
      v16 = 16;
    v17 = v14 + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    if (!*(_BYTE *)(a1 + 136))
      v15 = 0;
    v20 = v14 + v15;
    v50 = *(_QWORD *)v20;
    v49 = *(_BYTE *)(v20 + 8);
    v61 = v13;
    Hands_trace_CBridge_0();
    v21 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for HandDescriptor() + 92));
    if (!*(_QWORD *)(v21 + 16))
      goto LABEL_16;
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if ((v23 & 1) == 0)
      goto LABEL_20;
    v24 = (__int128 *)(*(_QWORD *)(v21 + 56) + 176 * v22);
    v26 = v24[1];
    v25 = v24[2];
    v51 = *v24;
    v52 = v26;
    v53 = v25;
    v27 = v24[3];
    v28 = v24[4];
    v29 = v24[6];
    v56 = v24[5];
    v57 = v29;
    v54 = v27;
    v55 = v28;
    v30 = v24[7];
    v31 = v24[8];
    v32 = v24[9];
    *(_OWORD *)((char *)v60 + 9) = *(__int128 *)((char *)v24 + 153);
    v59 = v31;
    v60[0] = v32;
    v58 = v30;
    if (*((_QWORD *)&v32 + 1) >> 60 == 15
      || (outlined retain of PoseImageCrop((uint64_t)&v51),
          v33 = Data._bridgeToObjectiveC()().super.isa,
          outlined release of PoseImageCrop((uint64_t)&v51),
          v34 = v33,
          specialized static PoseModelInference.setEspressoInput(_:_:_:)(17, a3, a4, a5, a6, v33),
          v34,
          v34,
          !v6))
    {
LABEL_20:
      if (!*(_QWORD *)(v21 + 16))
        goto LABEL_16;
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v49);
      if ((v36 & 1) == 0)
        goto LABEL_16;
      v37 = (__int128 *)(*(_QWORD *)(v21 + 56) + 176 * v35);
      v39 = v37[1];
      v38 = v37[2];
      v51 = *v37;
      v52 = v39;
      v53 = v38;
      v40 = v37[3];
      v41 = v37[4];
      v42 = v37[6];
      v56 = v37[5];
      v57 = v42;
      v54 = v40;
      v55 = v41;
      v43 = v37[7];
      v44 = v37[8];
      v45 = v37[9];
      *(_OWORD *)((char *)v60 + 9) = *(__int128 *)((char *)v37 + 153);
      v59 = v44;
      v60[0] = v45;
      v58 = v43;
      if (*((_QWORD *)&v45 + 1) >> 60 == 15
        || (outlined retain of PoseImageCrop((uint64_t)&v51),
            isa = Data._bridgeToObjectiveC()().super.isa,
            outlined release of PoseImageCrop((uint64_t)&v51),
            v47 = isa,
            specialized static PoseModelInference.setEspressoInput(_:_:_:)(18, a3, a4, a5, a6, isa),
            v47,
            v47,
            !v6))
      {
LABEL_16:
        Hands_trace_CBridge_0();
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError();
    swift_allocError();
    *(_OWORD *)v48 = 0u;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_BYTE *)(v48 + 32) = 3;
    swift_willThrow();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands9ImageDataVG_So13simd_float4x4as5NeverOTg50164_s5Hands18PoseModelInferenceC26calculateLocalizerMatrixes33_AE98A2391D9858029F8EEA4E6290C604LL15mainCameraImage09secondarypQ010imageCropsSaySo13simd_float4x4aGAA0Q4F42V_AMSDyAA0P6SourceOAA0bQ4CropVGtFZAjMXEfU_SDyAF0Z6SourceOAF0lE4CropVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  char v14;
  uint64_t v15;
  char v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v46 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v46;
  v7 = *(_OWORD *)(a1 + 176);
  v42 = *(_OWORD *)(a1 + 160);
  v43 = v7;
  v8 = *(_OWORD *)(a1 + 208);
  v44 = *(_OWORD *)(a1 + 192);
  v45 = v8;
  v9 = *(_OWORD *)(a1 + 112);
  v38 = *(_OWORD *)(a1 + 96);
  v39 = v9;
  v10 = *(_OWORD *)(a1 + 144);
  v40 = *(_OWORD *)(a1 + 128);
  v41 = v10;
  v11 = *(_OWORD *)(a1 + 48);
  v34 = *(_OWORD *)(a1 + 32);
  v35 = v11;
  v12 = *(_OWORD *)(a1 + 80);
  v36 = *(_OWORD *)(a1 + 64);
  v37 = v12;
  if (*(_QWORD *)(a2 + 16))
  {
    v13 = (__int128 *)(a1 + 224);
    while (1)
    {
      v14 = v39;
      v15 = *((_QWORD *)&v38 + 1);
      outlined retain of ImageData((uint64_t)&v34);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
      if ((v16 & 1) == 0)
        break;
      v17 = (_OWORD *)(*(_QWORD *)(a2 + 56) + 176 * result);
      v31 = v17[5];
      v32 = v17[6];
      v33 = v17[7];
      result = outlined release of ImageData((uint64_t)&v34);
      v46 = v3;
      v19 = *(_QWORD *)(v3 + 16);
      v18 = *(_QWORD *)(v3 + 24);
      if (v19 >= v18 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v3 = v46;
      }
      *(_QWORD *)&v20 = __PAIR64__(v32, v31);
      *((_QWORD *)&v20 + 1) = v33;
      *(_QWORD *)&v21 = __PAIR64__(DWORD1(v32), DWORD1(v31));
      *((_QWORD *)&v21 + 1) = DWORD1(v33);
      *(_QWORD *)&v22 = __PAIR64__(DWORD2(v32), DWORD2(v31));
      *((_QWORD *)&v22 + 1) = DWORD2(v33);
      *(_QWORD *)(v3 + 16) = v19 + 1;
      v23 = (_OWORD *)(v3 + (v19 << 6));
      v23[2] = v20;
      v23[3] = v21;
      v23[4] = v22;
      v23[5] = xmmword_23D9A3E90;
      if (!--v2)
        return v3;
      v24 = v13[9];
      v42 = v13[8];
      v43 = v24;
      v25 = v13[11];
      v44 = v13[10];
      v45 = v25;
      v26 = v13[5];
      v38 = v13[4];
      v39 = v26;
      v27 = v13[7];
      v40 = v13[6];
      v41 = v27;
      v28 = v13[1];
      v34 = *v13;
      v35 = v28;
      v29 = v13[2];
      v30 = v13[3];
      v13 += 12;
      v36 = v29;
      v37 = v30;
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_12;
    }
    __break(1u);
  }
LABEL_12:
  __break(1u);
  return result;
}

float32x4_t *specialized static PoseModelInference.calculateLocalizerMatrixes(mainCameraImage:secondaryCameraImage:imageCrops:)(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *result;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  simd_float4x4 v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  _OWORD v63[12];
  _OWORD v64[12];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  simd_float4x4 v89;

  v6 = a1[9];
  v73 = a1[8];
  v74 = v6;
  v7 = a1[11];
  v75 = a1[10];
  v76 = v7;
  v8 = a1[5];
  v69 = a1[4];
  v70 = v8;
  v9 = a1[7];
  v71 = a1[6];
  v72 = v9;
  v10 = a1[1];
  v65 = *a1;
  v66 = v10;
  v11 = a1[3];
  v67 = a1[2];
  v68 = v11;
  v12 = a2[9];
  v85 = a2[8];
  v86 = v12;
  v13 = a2[11];
  v87 = a2[10];
  v88 = v13;
  v14 = a2[5];
  v81 = a2[4];
  v82 = v14;
  v15 = a2[7];
  v83 = a2[6];
  v84 = v15;
  v16 = a2[1];
  v77 = *a2;
  v78 = v16;
  v17 = a2[3];
  v79 = a2[2];
  v80 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImageData>);
  v18 = (_OWORD *)swift_allocObject();
  v19 = a1[8];
  v20 = a1[10];
  v21 = a1[11];
  v18[11] = a1[9];
  v18[12] = v20;
  v22 = a1[4];
  v23 = a1[6];
  v24 = a1[7];
  v18[7] = a1[5];
  v18[8] = v23;
  v18[9] = v24;
  v18[10] = v19;
  v25 = *a1;
  v26 = a1[1];
  v18[1] = xmmword_23D9A7050;
  v18[2] = v25;
  v27 = a1[2];
  v28 = a1[3];
  v18[3] = v26;
  v18[4] = v27;
  v18[5] = v28;
  v18[6] = v22;
  v29 = a2[8];
  v30 = a2[10];
  v31 = a2[11];
  v18[23] = a2[9];
  v18[24] = v30;
  v18[25] = v31;
  v32 = a2[4];
  v33 = a2[6];
  v34 = a2[7];
  v18[19] = a2[5];
  v18[20] = v33;
  v18[21] = v34;
  v18[22] = v29;
  v35 = *a2;
  v36 = a2[1];
  v18[13] = v21;
  v18[14] = v35;
  v37 = a2[2];
  v38 = a2[3];
  v18[15] = v36;
  v18[16] = v37;
  v18[17] = v38;
  v18[18] = v32;
  swift_bridgeObjectRetain();
  outlined retain of ImageData((uint64_t)&v65);
  outlined retain of ImageData((uint64_t)&v77);
  v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands9ImageDataVG_So13simd_float4x4as5NeverOTg50164_s5Hands18PoseModelInferenceC26calculateLocalizerMatrixes33_AE98A2391D9858029F8EEA4E6290C60415mainCameraImage09secondarypQ010imageCropsSaySo13simd_float4x4aGAA0Q4F42V_AMSDyAA0P6SourceOAA0bQ4CropVGtFZAjMXEfU_SDyAF0Z6SourceOAF0lE4CropVGTf1cn_nTf4ng_n((uint64_t)v18, a3);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v64[8] = v73;
  v64[9] = v74;
  v64[10] = v75;
  v64[11] = v76;
  v64[4] = v69;
  v64[5] = v70;
  v64[6] = v71;
  v64[7] = v72;
  v64[0] = v65;
  v64[1] = v66;
  v64[2] = v67;
  v64[3] = v68;
  v63[8] = v85;
  v63[9] = v86;
  v63[10] = v87;
  v63[11] = v88;
  v63[4] = v81;
  v63[5] = v82;
  v63[6] = v83;
  v63[7] = v84;
  v63[0] = v77;
  v63[1] = v78;
  v63[2] = v79;
  v63[3] = v80;
  *(double *)v40.i64 = specialized static HandsKitUtils.getExtrinsicsFrom(_:toCamera:)((uint64_t)v64, (uint64_t)v63);
  v55 = v40;
  v56 = v41;
  v58 = v42;
  v60 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
  result = (float32x4_t *)swift_allocObject();
  v45 = *(float32x4_t *)MEMORY[0x24BDAEE00];
  v46 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16);
  v47 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32);
  v48 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 48);
  result[1] = (float32x4_t)xmmword_23D9A7050;
  result[2] = v45;
  result[3] = v46;
  result[4] = v47;
  result[5] = v48;
  if (*(_QWORD *)(v39 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v49 = result;
    v50 = *(float32x4_t *)(v39 + 96);
    v51 = *(float32x4_t *)(v39 + 112);
    v52 = *(float32x4_t *)(v39 + 128);
    v53 = *(float32x4_t *)(v39 + 144);
    v62 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v55.f32[0]), v51, *(float32x2_t *)v55.f32, 1), v52, v55, 2), v53, v55, 3);
    v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v56.f32[0]), v51, *(float32x2_t *)v56.f32, 1), v52, v56, 2), v53, v56, 3);
    v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v58.f32[0]), v51, *(float32x2_t *)v58.f32, 1), v52, v58, 2), v53, v58, 3);
    v61 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v60.f32[0]), v51, *(float32x2_t *)v60.f32, 1), v52, v60, 2), v53, v60, 3);
    v54 = *(simd_float4x4 *)(v39 + 32);
    swift_bridgeObjectRelease();
    v89 = __invert_f4(v54);
    v49[6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v89.columns[0].f32[0]), v57, *(float32x2_t *)v89.columns[0].f32, 1), v59, (float32x4_t)v89.columns[0], 2), v61, (float32x4_t)v89.columns[0], 3);
    v49[7] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v89.columns[1].f32[0]), v57, *(float32x2_t *)v89.columns[1].f32, 1), v59, (float32x4_t)v89.columns[1], 2), v61, (float32x4_t)v89.columns[1], 3);
    v49[8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v89.columns[2].f32[0]), v57, *(float32x2_t *)v89.columns[2].f32, 1), v59, (float32x4_t)v89.columns[2], 2), v61, (float32x4_t)v89.columns[2], 3);
    v49[9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v89.columns[3].f32[0]), v57, *(float32x2_t *)v89.columns[3].f32, 1), v59, (float32x4_t)v89.columns[3], 2), v61, (float32x4_t)v89.columns[3], 3);
    return v49;
  }
  return result;
}

unint64_t specialized static PoseModelInference.getHandPresenceOutputs(forHand:withPoseModel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int *v6;
  uint64_t v8;

  v3 = specialized static PoseModelInference.getEspressoOutputAsBuffer(_:_:)(5, a2, a3);
  if ((v5 & 1) != 0)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = (int *)v3;
  if (!v3 || ((v4 - v3) & 0xFFFFFFFFFFFFFFFCLL) != 0xC)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<HandPresence.Category, Float>);
  v8 = static _DictionaryStorage.allocate(capacity:)();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)((uint64_t)&outlined read-only object #0 of static PoseModelInference.getHandPresenceOutputs(forHand:withPoseModel:), v6, 3, 1, &v8);
  return v8;
}

uint64_t specialized static PoseModelInference.getHandPresenceCategory(scores:leftThreshold:requiresAssociationThreshold:)(uint64_t a1, float a2, float a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (result == 3)
    {
      if (a2 >= 0.0)
      {
        if (a3 >= 0.0)
        {
          v9 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
          if ((v10 & 1) != 0 && *(float *)(*(_QWORD *)(a1 + 56) + 4 * v9) >= a3)
            return 3;
          if (*(_QWORD *)(a1 + 16))
          {
            v11 = specialized __RawDictionaryStorage.find<A>(_:)(1, 1);
            if ((v12 & 1) != 0 && *(float *)(*(_QWORD *)(a1 + 56) + 4 * v11) >= a2)
              return 1;
          }
          return 0;
        }
        v17 = MEMORY[0x24BEE0D00];
        v15 = 0xD000000000000037;
        v16 = 0x800000023D9D2190;
        type metadata accessor for HandyLoggerNeo();
        v13 = 0u;
        v14 = 0u;
        v6 = MEMORY[0x24BEE4AF8];
        v7 = 130;
      }
      else
      {
        v17 = MEMORY[0x24BEE0D00];
        v15 = 0xD000000000000036;
        v16 = 0x800000023D9D2150;
        type metadata accessor for HandyLoggerNeo();
        v13 = 0u;
        v14 = 0u;
        v6 = MEMORY[0x24BEE4AF8];
        v7 = 126;
      }
    }
    else
    {
      v17 = MEMORY[0x24BEE0D00];
      v15 = 0xD000000000000022;
      v16 = 0x800000023D9D2120;
      type metadata accessor for HandyLoggerNeo();
      v13 = 0u;
      v14 = 0u;
      v6 = MEMORY[0x24BEE4AF8];
      v7 = 122;
    }
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v13, 0xD000000000000062, 0x800000023D9D1FF0, v7, (uint64_t)&v15, v6);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v15);
    return 0;
  }
  return result;
}

_QWORD *specialized static PoseModelInference.buildObjectInteraction(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;

  result = (_QWORD *)specialized static PoseModelInference.getEspressoOutputAsBuffer(_:_:)(6, a1, a2);
  if ((v5 & 1) != 0)
    return &outlined read-only object #1 of static PoseModelInference.buildObjectInteraction(_:);
  v6 = result;
  if (!result)
    return &outlined read-only object #0 of static PoseModelInference.buildObjectInteraction(_:);
  v7 = (v4 - (uint64_t)result) / 4;
  if (v7 == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    result = (_QWORD *)swift_allocObject();
    *((_OWORD *)result + 1) = xmmword_23D9A7050;
    result[4] = *v6;
    return result;
  }
  if (v7 != 1)
    return &outlined read-only object #0 of static PoseModelInference.buildObjectInteraction(_:);
  v8 = *(unsigned __int8 *)(a1 + 288);
  if (v8 == 2)
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    result = (_QWORD *)swift_allocObject();
    *((_OWORD *)result + 1) = xmmword_23D9A7050;
    if ((v8 & 1) != 0)
    {
      *((_DWORD *)result + 8) = -1082130432;
      *((_DWORD *)result + 9) = *(_DWORD *)v6;
    }
    else
    {
      *((_DWORD *)result + 8) = *(_DWORD *)v6;
      *((_DWORD *)result + 9) = -1082130432;
    }
  }
  return result;
}

unint64_t specialized static PoseModelInference.buildHoverDistanceUncertainty(_:)(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned __int8 v6;

  v2 = (unsigned int *)specialized static PoseModelInference.getEspressoOutputAsBuffer(_:_:)(17, a1, a2);
  if ((v4 & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (v2 && (unint64_t)(v3 - (_QWORD)v2 + 3) >= 7)
    {
      v6 = 0;
      v5 = *v2;
    }
  }
  return v5 | ((unint64_t)v6 << 32);
}

uint64_t specialized static PoseModelInference.getObjectInteractionBinned(prevData:score:params:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  NSObject *v96;
  void *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  NSObject *v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  void *v126;
  _QWORD *v127;
  unint64_t aBlock;
  uint64_t v129;
  uint64_t (*v130)(uint64_t);
  void *v131;
  uint64_t (*v132)();
  uint64_t v133;
  _OWORD v134[2];
  __int128 v135;
  __int128 v136;

  v8 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v8, v9);
  MEMORY[0x24BDAC7A8](v11, (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12, v13);
  if (*(_QWORD *)(a2 + 16) < 2uLL)
  {
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    v82 = result;
    v83 = (void *)MEMORY[0x2426372E8](0xD000000000000062, v112 | 0x8000000000000000);
    v84 = objc_msgSend(v83, sel_lastPathComponent);

    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    isEscapingClosureAtFileLocation = v86;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      goto LABEL_207;
    goto LABEL_201;
  }
  v121 = a4;
  v111 = (char *)&v110 - v16;
  v117 = v15;
  v113 = v19;
  v114 = v18;
  v115 = v17;
  v116 = result;
  v20 = a2 + 32;
  v120 = a2;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v22 = 0;
  v23 = &outlined read-only object #5 of static PoseModelInference.getObjectInteractionBinned(prevData:score:params:);
  v24 = &outlined read-only object #4 of static PoseModelInference.getObjectInteractionBinned(prevData:score:params:);
  v25 = &outlined read-only object #3 of static PoseModelInference.getObjectInteractionBinned(prevData:score:params:);
  v126 = &outlined read-only object #1 of static PoseModelInference.getObjectInteractionBinned(prevData:score:params:);
  v127 = &outlined read-only object #2 of static PoseModelInference.getObjectInteractionBinned(prevData:score:params:);
  v125 = 0x800000023D9D2060;
  v122 = 0x800000023D9D2090;
  v119 = 0x800000023D9D20C0;
  v112 = (unint64_t)"_TtC5Hands18PoseModelInference";
  v118 = 0x800000023D9D1FF0;
  v26 = &outlined read-only object #0 of static PoseModelInference.getObjectInteractionBinned(prevData:score:params:);
  v124 = a3;
  while (1)
  {
    v27 = v21;
    v28 = *(float *)(v20 + 4 * v22);
    if (v28 < 0.0)
      goto LABEL_5;
    if (v22 >= *(_QWORD *)(*a1 + 16))
    {
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    v29 = *(float *)(*a1 + 4 * v22 + 32);
    if (v29 < 0.0)
      goto LABEL_5;
    if (v22 >= *(_QWORD *)(*a3 + 16))
      goto LABEL_155;
    v30 = *(float *)(*a3 + 4 * v22 + 32);
    if (v30 < 0.0)
    {
      *((_QWORD *)&v136 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v135 = 0xD00000000000002ELL;
      *((_QWORD *)&v135 + 1) = v125;
      result = type metadata accessor for HandyLoggerNeo();
      if (static HandyLoggerNeo._currentLogLevel <= 5)
        goto LABEL_200;
      goto LABEL_4;
    }
    v31 = a3[1];
    if (v22 >= *(_QWORD *)(v31 + 16))
      goto LABEL_156;
    v32 = *(float *)(v31 + 4 * v22 + 32);
    if (v32 < 0.0)
      break;
    if (v30 <= v28 && v30 <= v29)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      result = (uint64_t)v126;
      if (v22 >= v26[2])
        goto LABEL_163;
      v26[v22 + 4] = 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        result = (uint64_t)v126;
      else
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v126);
      if (v22 >= *(_QWORD *)(result + 16))
        goto LABEL_165;
      v126 = (void *)result;
      *(_BYTE *)(result + v22 + 32) = 1;
      v46 = a1[3];
      if (v22 >= *(_QWORD *)(v46 + 16))
        goto LABEL_166;
      v47 = v26;
      v48 = *(_QWORD *)(v46 + 8 * v22 + 32);
      if (v48 == 0x7FFFFFFFFFFFFFFFLL)
        v49 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v49 = v48 + 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        result = (uint64_t)v127;
      else
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v127);
      if (v22 >= *(_QWORD *)(result + 16))
        goto LABEL_167;
      v127 = (_QWORD *)result;
      *(_QWORD *)(result + 8 * v22 + 32) = v49;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
        v25 = (_QWORD *)result;
      }
      v26 = v47;
      if (v22 >= v25[2])
        goto LABEL_168;
      *((_BYTE *)v25 + v22 + 32) = 0;
      v50 = a1[5];
      if (v22 >= *(_QWORD *)(v50 + 16))
        goto LABEL_169;
      if (*(_BYTE *)(v50 + v22 + 32) == 1)
      {
        v51 = a1[6];
        if (v22 >= *(_QWORD *)(v51 + 16))
          goto LABEL_178;
        v52 = a3[2];
        if (v22 >= *(_QWORD *)(v52 + 16))
          goto LABEL_179;
        v53 = *(_QWORD *)(v51 + 8 * v22 + 32);
        v54 = *(_QWORD *)(v52 + 8 * v22 + 32);
        if (v53 + 1 < v54)
          v55 = v53 + 1;
        else
          v55 = v54;
        if (v53 >= v54)
          v56 = v54;
        else
          v56 = v55;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
          v23 = (_QWORD *)result;
        }
        if (v22 >= v23[2])
          goto LABEL_180;
        v23[v22 + 4] = v56;
        v26 = v47;
      }
      goto LABEL_107;
    }
    v35 = a1[4];
    if (v22 >= *(_QWORD *)(v35 + 16))
      goto LABEL_164;
    v36 = *(unsigned __int8 *)(v35 + v22 + 32);
    if ((v36 & 1) == 0 && (v28 >= v32 || v29 >= v32))
    {
      v38 = a1[1];
      if (v22 >= *(_QWORD *)(v38 + 16))
        goto LABEL_185;
      v39 = v26;
      v40 = *(_QWORD *)(v38 + 8 * v22 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v39);
        v39 = (_QWORD *)result;
      }
      if (v22 >= v39[2])
        goto LABEL_186;
      v39[v22 + 4] = v40;
      v41 = a1[6];
      if (v22 >= *(_QWORD *)(v41 + 16))
        goto LABEL_187;
      v42 = *(_QWORD *)(v41 + 8 * v22 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
        v23 = (_QWORD *)result;
      }
      if (v22 >= v23[2])
        goto LABEL_188;
      v23[v22 + 4] = v42;
      v43 = a1[3];
      if (v22 >= *(_QWORD *)(v43 + 16))
        goto LABEL_189;
      v44 = *(_QWORD *)(v43 + 8 * v22 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        result = (uint64_t)v127;
      else
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v127);
      if (v22 >= *(_QWORD *)(result + 16))
        goto LABEL_190;
      v127 = (_QWORD *)result;
      *(_QWORD *)(result + 8 * v22 + 32) = v44;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
        v25 = (_QWORD *)result;
      }
      v26 = v39;
      if (v22 >= v25[2])
        goto LABEL_191;
      goto LABEL_106;
    }
    v57 = a1[6];
    if (v22 >= *(_QWORD *)(v57 + 16))
      goto LABEL_170;
    v58 = v26;
    v59 = v57 + 32;
    if (*(uint64_t *)(v57 + 32 + 8 * v22) < 1)
      goto LABEL_94;
    v60 = a1[5];
    if (v22 >= *(_QWORD *)(v60 + 16))
      goto LABEL_181;
    if (((v36 | *(unsigned __int8 *)(v60 + v22 + 32)) & 1) == 0)
    {
LABEL_94:
      v26 = v58;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
        v26 = (_QWORD *)result;
      }
      if (v22 >= v26[2])
        goto LABEL_174;
      v26[v22 + 4] = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      result = (uint64_t)v127;
      if (v22 >= v23[2])
        goto LABEL_175;
      v23[v22 + 4] = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        result = (uint64_t)v127;
      else
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v127);
      if (v22 >= *(_QWORD *)(result + 16))
        goto LABEL_176;
      v127 = (_QWORD *)result;
      *(_QWORD *)(result + 8 * v22 + 32) = 0;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
        v25 = (_QWORD *)result;
      }
      if (v22 >= v25[2])
        goto LABEL_177;
LABEL_106:
      *((_BYTE *)v25 + v22 + 32) = 0;
      goto LABEL_107;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
      v58 = (_QWORD *)result;
    }
    if (v22 >= v58[2])
      goto LABEL_192;
    v58[v22 + 4] = 1;
    v61 = *(_QWORD *)(v59 + 8 * v22);
    if (v61 <= 0)
      v62 = 0;
    else
      v62 = (v61 - 1) & ~((v61 - 1) >> 63);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      v23 = (_QWORD *)result;
    }
    if (v22 >= v23[2])
      goto LABEL_193;
    v23[v22 + 4] = v62;
    v63 = a1[3];
    if (v22 >= *(_QWORD *)(v63 + 16))
      goto LABEL_194;
    v64 = *(_QWORD *)(v63 + 8 * v22 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      result = (uint64_t)v127;
    else
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v127);
    if (v22 >= *(_QWORD *)(result + 16))
      goto LABEL_195;
    v127 = (_QWORD *)result;
    *(_QWORD *)(result + 8 * v22 + 32) = v64;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
      v25 = (_QWORD *)result;
    }
    v26 = v58;
    if (v22 >= v25[2])
      goto LABEL_196;
    *((_BYTE *)v25 + v22 + 32) = 1;
LABEL_107:
    v65 = a3[3];
    if (v22 >= *(_QWORD *)(v65 + 16))
      goto LABEL_157;
    v66 = *(_QWORD *)(v65 + 8 * v22 + 32);
    if (v66 >= 1)
    {
      if (v22 >= v26[2])
        goto LABEL_159;
      if (v26[v22 + 4] == 1)
      {
        if (v22 >= v127[2])
          goto LABEL_173;
        if (v127[v22 + 4] >= v66)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            result = (uint64_t)v126;
          else
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v126);
          if (v22 >= *(_QWORD *)(result + 16))
            goto LABEL_184;
          v126 = (void *)result;
          *(_BYTE *)(result + v22 + 32) = 1;
        }
      }
    }
    v67 = a3[2];
    if (v22 >= *(_QWORD *)(v67 + 16))
      goto LABEL_158;
    v123 = v25;
    v68 = v23;
    v69 = (uint64_t)v24;
    v70 = v67 + 32;
    if (*(uint64_t *)(v67 + 32 + 8 * v22) < 1)
    {
      v24 = (_QWORD *)v69;
      v23 = v68;
      v25 = v123;
      a3 = v124;
    }
    else
    {
      v71 = v124[4];
      if (v22 >= *(_QWORD *)(v71 + 16))
        goto LABEL_160;
      v72 = v71 + 32;
      if (*(uint64_t *)(v71 + 32 + 8 * v22) <= 0)
      {
        v131 = (void *)MEMORY[0x24BEE0D00];
        aBlock = 0xD00000000000005DLL;
        v129 = v119;
        type metadata accessor for HandyLoggerNeo();
        v135 = 0u;
        v136 = 0u;
        static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v135, 0xD000000000000062, v118, 231, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);
        result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
      }
      if (v22 >= v26[2])
        goto LABEL_161;
      v73 = v26[v22 + 4];
      if (v73)
      {
        if (v73 != 1)
        {
          v74 = a1[5];
          v75 = *(_QWORD *)(v74 + 16);
LABEL_142:
          if (v22 >= v75)
            goto LABEL_171;
          v78 = v26;
          v79 = *(_BYTE *)(v74 + v22 + 32);
          v24 = (_QWORD *)v69;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v69);
            v24 = (_QWORD *)result;
          }
          v23 = v68;
          v25 = v123;
          if (v22 >= v24[2])
            goto LABEL_172;
          *((_BYTE *)v24 + v22 + 32) = v79;
          a3 = v124;
          v26 = v78;
          goto LABEL_5;
        }
        v74 = a1[5];
        v75 = *(_QWORD *)(v74 + 16);
        if (v22 >= v75)
          goto LABEL_182;
        if ((*(_BYTE *)(v74 + v22 + 32) & 1) != 0)
          goto LABEL_142;
        if (v22 >= v127[2])
          goto LABEL_197;
        if (v127[v22 + 4] < *(_QWORD *)(v72 + 8 * v22))
          goto LABEL_142;
        v76 = v26;
        v77 = *(_QWORD *)(v70 + 8 * v22);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v68);
          v68 = (_QWORD *)result;
        }
        v24 = (_QWORD *)v69;
        if (v22 >= v68[2])
          goto LABEL_198;
        v23 = v68;
        v68[v22 + 4] = v77;
        result = swift_isUniquelyReferenced_nonNull_native();
        v25 = v123;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v24);
          v24 = (_QWORD *)result;
        }
        a3 = v124;
        v26 = v76;
        if (v22 >= v24[2])
          goto LABEL_199;
        *((_BYTE *)v24 + v22 + 32) = 1;
      }
      else
      {
        v24 = (_QWORD *)v69;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v69);
          v24 = (_QWORD *)result;
        }
        v23 = v68;
        v25 = v123;
        if (v22 >= v24[2])
          goto LABEL_183;
        *((_BYTE *)v24 + v22 + 32) = 0;
        a3 = v124;
      }
    }
LABEL_5:
    v21 = 1;
    v22 = 1;
    if ((v27 & 1) != 0)
    {
      v80 = v121;
      *v121 = v120;
      v80[1] = v26;
      v81 = v127;
      v80[2] = v126;
      v80[3] = v81;
      v80[4] = v25;
      v80[5] = v24;
      v80[6] = v23;
      return result;
    }
  }
  *((_QWORD *)&v136 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v135 = 0xD00000000000002FLL;
  *((_QWORD *)&v135 + 1) = v122;
  v33 = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel > 5)
  {
LABEL_4:
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&v135);
    goto LABEL_5;
  }
  while (1)
  {
    v82 = v33;
    v97 = (void *)MEMORY[0x2426372E8](0xD000000000000062, v112 | 0x8000000000000000);
    v98 = objc_msgSend(v97, sel_lastPathComponent);

    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v101 = v100;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v127 = (_QWORD *)static HandyLoggerNeo._dispatchQ;
    v102 = v115;
    v103 = v114;
    v104 = v116;
    (*(void (**)(uint64_t, char *, uint64_t))(v115 + 16))(v114, v111, v116);
    outlined init with copy of Any((uint64_t)&v135, (uint64_t)v134);
    v105 = (*(unsigned __int8 *)(v102 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
    v106 = (v113 + v105 + 7) & 0xFFFFFFFFFFFFFFF8;
    v107 = swift_allocObject();
    *(_DWORD *)(v107 + 16) = 5;
    *(_QWORD *)(v107 + 24) = v82;
    *(_OWORD *)(v107 + 32) = 0u;
    *(_OWORD *)(v107 + 48) = 0u;
    *(_DWORD *)(v107 + 64) = 1;
    *(_QWORD *)(v107 + 72) = v99;
    *(_QWORD *)(v107 + 80) = v101;
    *(_QWORD *)(v107 + 88) = 165;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v102 + 32))(v107 + v105, v103, v104);
    outlined init with take of Any(v134, (_OWORD *)(v107 + v106));
    *(_QWORD *)(v107 + ((v106 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
    v85 = swift_allocObject();
    *(_QWORD *)(v85 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v85 + 24) = v107;
    v132 = thunk for @callee_guaranteed () -> ()partial apply;
    v133 = v85;
    aBlock = MEMORY[0x24BDAC760];
    v129 = 1107296256;
    v130 = thunk for @escaping @callee_guaranteed () -> ();
    v131 = &block_descriptor_14_0;
    v108 = _Block_copy(&aBlock);
    v109 = v127;
    swift_retain();
    swift_release();
    dispatch_sync(v109, v108);

    _Block_release(v108);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      break;
    __break(1u);
LABEL_207:
    swift_once();
LABEL_201:
    v127 = (_QWORD *)static HandyLoggerNeo._dispatchQ;
    v88 = v115;
    v89 = v114;
    v90 = v116;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v114, v117, v116);
    outlined init with copy of Any((uint64_t)&v135, (uint64_t)v134);
    v91 = (*(unsigned __int8 *)(v88 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
    v92 = (v113 + v91 + 7) & 0xFFFFFFFFFFFFFFF8;
    v93 = swift_allocObject();
    *(_DWORD *)(v93 + 16) = 5;
    *(_QWORD *)(v93 + 24) = v82;
    *(_OWORD *)(v93 + 32) = 0u;
    *(_OWORD *)(v93 + 48) = 0u;
    *(_DWORD *)(v93 + 64) = 1;
    *(_QWORD *)(v93 + 72) = v85;
    *(_QWORD *)(v93 + 80) = isEscapingClosureAtFileLocation;
    *(_QWORD *)(v93 + 88) = 161;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v88 + 32))(v93 + v91, v89, v90);
    outlined init with take of Any(v134, (_OWORD *)(v93 + v92));
    *(_QWORD *)(v93 + ((v92 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
    v94 = swift_allocObject();
    *(_QWORD *)(v94 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v94 + 24) = v93;
    v132 = _sIg_Ieg_TRTA_0;
    v133 = v94;
    aBlock = MEMORY[0x24BDAC760];
    v129 = 1107296256;
    v130 = thunk for @escaping @callee_guaranteed () -> ();
    v131 = &block_descriptor_14;
    v95 = _Block_copy(&aBlock);
    v96 = v127;
    swift_retain();
    swift_release();
    dispatch_sync(v96, v95);

    _Block_release(v95);
    LOBYTE(v95) = swift_isEscapingClosureAtFileLocation();
    v33 = swift_release();
    if ((v95 & 1) == 0)
      break;
    __break(1u);
  }
  outlined init with copy of Any((uint64_t)&v135, (uint64_t)&aBlock);
  if ((swift_dynamicCast() & 1) != 0)
  {
    String.init(format:_:)();
    swift_bridgeObjectRelease();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_23D832668()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_23D832694()
{
  return swift_deallocObject();
}

_QWORD *outlined retain of CameraPairTransition(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(a1[18], a1[19], a1[20], a1[21], a1[22], a1[23], a1[24], a1[25], a1[26], a1[27], a1[28], a1[29], a1[30], a1[31], a1[32]);
  return a1;
}

uint64_t partial apply for closure #1 in static PoseModelInference.setPoseInputs(forHand:withHandsKitData:withPoseModel:gtInjections:)@<X0>(uint64_t a1@<X0>, int32x4_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static PoseModelInference.setPoseInputs(forHand:withHandsKitData:withPoseModel:gtInjections:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t specialized static PoseModelInference.buildBranchFeatures(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  _BYTE __dst[14];
  unsigned __int8 v28;
  uint64_t v29;
  _QWORD v30[6];

  v30[5] = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for branchArray != -1)
    swift_once();
  v3 = static PoseModelInference.branchArray;
  v4 = *(_QWORD *)(static PoseModelInference.branchArray + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v29 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v6 = 0;
    do
    {
      v7 = specialized static PoseModelInference.getEspressoOutputAsBuffer(_:_:)(*(unsigned __int8 *)(v3 + v6 + 32), a1, a2);
      if ((v9 & 1) != 0)
      {
        v18 = 0;
        v19 = 0xF000000000000000;
      }
      else
      {
        v10 = v7;
        if (v7)
          v11 = v8 - v7;
        else
          v11 = 0;
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
        v30[3] = v12;
        v30[4] = lazy protocol witness table accessor for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>();
        v30[0] = v10;
        v30[1] = v11;
        v13 = (const void **)__swift_project_boxed_opaque_existential_1(v30, v12);
        v14 = *v13;
        if (*v13 && (v15 = (int64_t)v13[1]) != 0)
        {
          if (v15 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            v28 = v15;
            memcpy(__dst, v14, v15);
            v18 = *(_QWORD *)__dst;
            v19 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v28 << 48);
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            v16 = __DataStorage.init(bytes:length:)();
            v17 = v16;
            if ((unint64_t)v15 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              v18 = swift_allocObject();
              *(_QWORD *)(v18 + 16) = 0;
              *(_QWORD *)(v18 + 24) = v15;
              v19 = v17 | 0x8000000000000000;
            }
            else
            {
              v18 = v15 << 32;
              v19 = v16 | 0x4000000000000000;
            }
          }
        }
        else
        {
          v18 = 0;
          v19 = 0xC000000000000000;
        }
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
      }
      v5 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
        v5 = v29;
      }
      v21 = *(_QWORD *)(v5 + 16);
      v20 = *(_QWORD *)(v5 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v5 = v29;
      }
      ++v6;
      *(_QWORD *)(v5 + 16) = v21 + 1;
      v22 = v5 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v18;
      *(_QWORD *)(v22 + 40) = v19;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
  }
  v23 = *(_QWORD *)(v5 + 16);
  if (v23)
  {
    for (i = 40; *(_QWORD *)(v5 + i) >> 60 != 15; i += 16)
    {
      if (!--v23)
        return v5;
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
    result = MEMORY[0x242638C74](MEMORY[0x24BDCF860], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>);
  }
  return result;
}

void static PoseModelUtils.calculateUpVector(hand:olderHand:imageData:handsKitData:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float32x4_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  float32x2_t *v57;
  float32x2_t v58;
  uint64_t v59;
  float32x2_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x4_t *v68;
  double v69;
  float32x4_t v70;
  double v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  float32x2_t v81;
  float32x2_t v82;
  char v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  _QWORD v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  _BYTE v105[17];
  float32x4_t v106[4];
  float32x4_t v107[4];
  uint64_t v108;
  int v109;
  char v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  __int128 v127;
  _OWORD v128[2];
  uint64_t v129;

  v103.i64[0] = a1;
  v104 = a5;
  v129 = *MEMORY[0x24BDAC8D0];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (_QWORD *)((char *)v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = *(_QWORD *)(a3 + 64);
  v102.i32[0] = *(_DWORD *)(a3 + 84);
  v12 = *(double *)(a3 + 184);
  v100.i64[0] = *(_QWORD *)(a4 + 200);
  outlined init with copy of (Int32, Matrix2dPB)(a2, (uint64_t)v11, &demangling cache variable for type metadata for HandDescriptor?);
  v13 = type metadata accessor for HandDescriptor();
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for HandDescriptor?);
  }
  else
  {
    v14 = v11[2];
    v15 = (float32x4_t *)v11[3];
    v16 = v11[4];
    v17 = v11[5];
    v18 = v11[6];
    v19 = v11[7];
    v20 = v11[8];
    v21 = v11[9];
    v22 = v11[10];
    v23 = v11[11];
    v92[0] = v11[12];
    v92[1] = v23;
    *(_QWORD *)&v93 = v22;
    v99.i64[0] = v16;
    v98.i64[0] = v17;
    v97.i64[0] = v18;
    *(_QWORD *)&v96 = v19;
    *(_QWORD *)&v95 = v20;
    *(_QWORD *)&v94 = v21;
    outlined copy of HandPose?(v14);
    outlined destroy of HandDescriptor((uint64_t)v11);
    if (v14)
    {
      if (v15[1].i64[0] >= 0x1BuLL)
      {
        v24 = v15[3];
        v102 = v15[55];
        v103 = v24;
        outlined consume of HandPose?(v14);
        ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)&v123);
        v102 = vaddq_f32(v126, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v123, v102.f32[0]), v124, *(float32x2_t *)v102.f32, 1), v125, v102, 2));
        ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)&v111);
        v25 = vsubq_f32(v102, vaddq_f32(v114, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v111, v103.f32[0]), v112, *(float32x2_t *)v103.f32, 1), v113, v103, 2)));
        v26 = (int32x4_t)vmulq_f32(v25, v25);
        v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
        v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
        v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
        v29 = v104;
        *v104 = vmulq_n_f32(v25, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]);
        v29[1] = (float32x4_t)xmmword_23D9A3E10;
        v29[2] = (float32x4_t)xmmword_23D9A3E20;
        v29[3] = (float32x4_t)xmmword_23D9A3E30;
        v29[4].i64[0] = 1;
        v29[4].i8[8] = 1;
        return;
      }
      __break(1u);
LABEL_36:
      __break(1u);
    }
  }
  v30 = v103.i64[0];
  v31 = swift_bridgeObjectRetain();
  v32 = specialized _copyCollectionToContiguousArray<A>(_:)(v31);
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(v32 + 16);
  if (!v33)
  {
LABEL_10:
    swift_release();
LABEL_20:
    v112.i64[1] = MEMORY[0x24BEE0D00];
    v111.i64[0] = 0xD000000000000047;
    v111.i64[1] = 0x800000023D9D2250;
    specialized static HLog.W(file:function:line:_:_:)(0xD00000000000005ELL, 0x800000023D9D21F0, 188, (uint64_t)&v111, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v111);
    goto LABEL_21;
  }
  v34 = 32;
  while (1)
  {
    v35 = *(_OWORD *)(v32 + v34 + 80);
    v36 = *(_OWORD *)(v32 + v34 + 89);
    v37 = *(float32x4_t *)(v32 + v34 + 48);
    v127 = *(_OWORD *)(v32 + v34 + 64);
    v38 = *(float32x4_t *)(v32 + v34);
    v39 = *(float32x4_t *)(v32 + v34 + 32);
    v124 = *(float32x4_t *)(v32 + v34 + 16);
    v125 = v39;
    v123 = v38;
    *(_OWORD *)((char *)v128 + 9) = v36;
    v128[0] = v35;
    v126 = v37;
    if ((BYTE8(v127) & 1) != 0)
      break;
    v34 += 112;
    if (!--v33)
      goto LABEL_10;
  }
  outlined retain of DetectionResult((uint64_t)&v123);
  swift_release();
  v40 = v100.i64[0];
  if (!*(_QWORD *)(v100.i64[0] + 16))
    goto LABEL_19;
  v41 = specialized __RawDictionaryStorage.find<A>(_:)(v125.i64[0], v125.i8[8]);
  if ((v42 & 1) == 0)
    goto LABEL_19;
  v43 = *(_QWORD *)(v40 + 56) + 192 * v41;
  v45 = *(float32x4_t *)(v43 + 32);
  v44 = *(float32x4_t *)(v43 + 48);
  v46 = *(float32x4_t *)(v43 + 16);
  v111 = *(float32x4_t *)v43;
  v112 = v46;
  v113 = v45;
  v114 = v44;
  v47 = *(_OWORD *)(v43 + 64);
  v48 = *(_OWORD *)(v43 + 80);
  v49 = *(_OWORD *)(v43 + 112);
  v117 = *(_OWORD *)(v43 + 96);
  v118 = v49;
  v115 = v47;
  v116 = v48;
  v50 = *(_OWORD *)(v43 + 128);
  v51 = *(_OWORD *)(v43 + 144);
  v52 = *(_OWORD *)(v43 + 176);
  v121 = *(_OWORD *)(v43 + 160);
  v122 = v52;
  v119 = v50;
  v120 = v51;
  outlined init with take of Float?((uint64_t)&v126.i64[1] + 4, (uint64_t)&v108);
  outlined init with take of Float?((uint64_t)&v108, (uint64_t)&v109);
  if ((v110 & 1) != 0 || (v53 = v124.i64[0], *(_QWORD *)(v124.i64[0] + 16) < 4uLL))
  {
LABEL_19:
    outlined release of DetectionResult((uint64_t)&v123);
    goto LABEL_20;
  }
  v54 = v109;
  outlined retain of DetectionResult((uint64_t)&v123);
  outlined retain of ImageData((uint64_t)&v111);
  v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD2VySfGs5NeverOTg50102_s5Hands14PoseModelUtilsC17calculateUpVector4hand9olderHand9imageData08handsKitL0AC016Canonicalizationq33VAA0J10DescriptorVz_ALSgAA05Imageq6VAA0anq6VtFZs5D13VySfGSiXEfU0_5Hands15DetectionResultVTf1cn_nTf4ng_n((uint64_t)&outlined read-only object #0 of static PoseModelUtils.calculateUpVector(hand:olderHand:imageData:handsKitData:), (uint64_t)&v123);
  outlined release of DetectionResult((uint64_t)&v123);
  v56 = *(_QWORD *)(v55 + 16);
  if (v56)
  {
    v57 = (float32x2_t *)(v55 + 32);
    v58 = 0;
    v59 = *(_QWORD *)(v55 + 16);
    do
    {
      v60 = *v57++;
      v58 = vadd_f32(v58, v60);
      --v59;
    }
    while (v59);
  }
  else
  {
    v58 = 0;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v53 + 16) < 4uLL)
    goto LABEL_36;
  v65.f32[0] = (float)v56;
  v100 = v65;
  v66 = *(float32x2_t *)(v53 + 56);
  outlined release of DetectionResult((uint64_t)&v123);
  v67 = *(float32x2_t *)((char *)&v122 + 8);
  v68 = (float32x4_t *)v115;
  LODWORD(v69) = v54;
  specialized static HandsKitUtils.computeCenter3D(_:_:_:)(v115, COERCE_DOUBLE(vmul_f32(vdiv_f32(v58, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.f32, 0)), *(float32x2_t *)((char *)&v122 + 8))), v69);
  v100 = v70;
  LODWORD(v71) = v54;
  specialized static HandsKitUtils.computeCenter3D(_:_:_:)((uint64_t)v68, COERCE_DOUBLE(vmul_f32(v66, v67)), v71);
  v99 = v72;
  swift_beginAccess();
  v73 = v68[12];
  v74 = v68[13];
  v75 = v68[14];
  v76 = v68[15];
  v99 = vaddq_f32(v76, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v73, v99.f32[0]), v74, *(float32x2_t *)v99.f32, 1), v75, v99, 2));
  v100 = vaddq_f32(v76, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v73, v100.f32[0]), v74, *(float32x2_t *)v100.f32, 1), v75, v100, 2));
  v77 = v101;
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v106);
  v97 = vaddq_f32(v106[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v106[0], v100.f32[0]), v106[1], *(float32x2_t *)v100.f32, 1), v106[2], v100, 2));
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v107);
  v98 = vaddq_f32(v107[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107[0], v99.f32[0]), v107[1], *(float32x2_t *)v99.f32, 1), v107[2], v99, 2));
  v105[0] = 0;
  swift_beginAccess();
  v78 = *(_OWORD *)(v77 + 96);
  v95 = *(_OWORD *)(v77 + 80);
  v96 = v78;
  v94 = *(_OWORD *)(v77 + 64);
  swift_beginAccess();
  v93 = *(_OWORD *)(v77 + 112);
  swift_beginAccess();
  if (*(_BYTE *)(v77 + 24))
    v79 = *(_QWORD *)(v77 + 16) != 0;
  else
    v79 = -1;
  v80 = (void *)objc_opt_self();
  objc_msgSend(v80, sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v79, v105, *(double *)v97.i64, *(double *)&v94, *(double *)&v95, *(double *)&v96, *(double *)&v93, v12);
  v82 = v81;
  v83 = v105[0];
  v105[0] = 0;
  if (*(_BYTE *)(v77 + 24))
    v84 = *(_QWORD *)(v77 + 16) != 0;
  else
    v84 = -1;
  objc_msgSend(v80, sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v84, v105, *(double *)v98.i64, *(double *)(v77 + 64), *(double *)(v77 + 80), *(double *)(v77 + 96), *(double *)(v77 + 112), v12);
  if ((v83 & 1) != 0 && (v105[0] & 1) != 0)
  {
    v86 = (float32x4_t *)(v30 + *(int *)(v13 + 88));
    v87 = v100;
    *v86 = v100;
    v86[1] = v87;
    v88 = v99;
    v86[2] = v99;
    v86[3] = v88;
    *(float32x2_t *)v85.f32 = vsub_f32(*(float32x2_t *)v85.f32, v82);
    v85.i32[2] = 0;
    v86[4].i8[0] = 0;
    v89 = (int32x4_t)vmulq_f32(v85, v85);
    v89.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v89, 2), vadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1))).u32[0];
    v90 = vrsqrte_f32((float32x2_t)v89.u32[0]);
    v91 = vmul_f32(v90, vrsqrts_f32((float32x2_t)v89.u32[0], vmul_f32(v90, v90)));
    v103 = vmulq_n_f32(v85, vmul_f32(v91, vrsqrts_f32((float32x2_t)v89.u32[0], vmul_f32(v91, v91))).f32[0]);
    outlined release of ImageData((uint64_t)&v111);
    v61 = v104;
    *v104 = v103;
    v61[1] = (float32x4_t)xmmword_23D9A3E10;
    v61[2] = (float32x4_t)xmmword_23D9A3E20;
    v61[3] = (float32x4_t)xmmword_23D9A3E30;
    v61[4].i64[0] = 0;
    goto LABEL_22;
  }
  outlined release of ImageData((uint64_t)&v111);
LABEL_21:
  objc_msgSend((id)objc_opt_self(), sel_getCropRotation_, v102.u32[0]);
  v61 = v104;
  *v104 = (float32x4_t)xmmword_23D9A3E20;
  v61[1] = v62;
  v61[2] = v63;
  v61[3] = v64;
  v61[4].i64[0] = 2;
LABEL_22:
  v61[4].i8[8] = 1;
}

uint64_t static PoseModelUtils.preprocessInput(hand:olderHand:cropShape:handsKitData:gtInjections:xCanonicalization:rotateCrops:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, __int32 a6@<W5>, uint64_t a7@<X8>, float32x2_t a8@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  __int128 v25;
  char v26;
  char *v27;
  unint64_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  float v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  __int32 v52;
  __int32 v53;
  simd_float3 v54;
  simd_float3 v55;
  simd_float3 v56;
  uint64_t v57;
  unint64_t v58;
  __int32 v59;
  uint64_t v60;
  __int32 v61;
  __int32 v62;
  __int32 v63;
  float32x2_t *v64;
  float32x2_t *v65;
  uint64_t v66;
  char v67;
  float32x4_t v68;
  float32x4_t v69;
  __int128 v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  char v78;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v81[2];
  int v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  __int128 v91;
  uint64_t v92;
  simd_float3x3 v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  __int128 v100;
  __int128 v101;
  simd_float3 v102;
  simd_float3 v103;
  float32x4_t v104;
  __int128 v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  __int128 v109;
  float32x4_t v110;
  float32x4_t v111;
  simd_float3 v112;
  simd_float3 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  char v119;
  char v120;
  float32x2_t *v121;
  _QWORD v122[70];
  float32x4_t v123[4];
  simd_float3x3 v124;
  simd_float3x3 v125;

  v102.i32[0] = a6;
  LODWORD(v101) = a5;
  v103.i64[0] = a2;
  v83 = a7;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v12, v13);
  *(_QWORD *)&v100 = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104.i64[0] = type metadata accessor for HandDescriptor();
  v99.i64[0] = *(_QWORD *)(v104.i64[0] - 8);
  v16 = MEMORY[0x24BDAC7A8](v104.i64[0], v15);
  v98.i64[0] = (uint64_t)v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = (char *)v81 - v19;
  memcpy(v122, a3, 0x228uLL);
  v92 = a1;
  v21 = *(unsigned __int8 *)(a1 + 136);
  v81[1] = v122[57];
  v82 = v21;
  Hands_trace_CBridge_0();
  if (*(_QWORD *)(a4 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v22 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a4 + 32));
    if (((*(_QWORD *)(a4 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      __asm { BR              X9 }
  }
  v23 = v92;
  outlined init with copy of HandDescriptor(v92, (uint64_t)v20);
  v24 = 1.0;
  if (!*(_BYTE *)(v23 + 136))
    v24 = -1.0;
  v25 = 0uLL;
  v91 = LODWORD(v24);
  v123[0] = (float32x4_t)LODWORD(v24);
  v123[1] = (float32x4_t)xmmword_23D9A3E20;
  v123[2] = (float32x4_t)xmmword_23D9A3E30;
  v26 = *(_BYTE *)(v23 + 192);
  if ((v26 & 1) == 0)
    v25 = *(_OWORD *)(v23 + 176);
  v27 = &v20[*(int *)(v104.i64[0] + 84)];
  *(_OWORD *)v27 = v25;
  v27[16] = v26;
  if (*(_QWORD *)(a4 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v28 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a4 + 32));
    if (((*(_QWORD *)(a4 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
      __asm { BR              X9 }
  }
  v29 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2, 0, MEMORY[0x24BEE4AF8]);
  v121 = v29;
  v32 = *(_QWORD *)(v92 + 200);
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      *(_QWORD *)&v100 = swift_bridgeObjectRetain();
      v34 = (_BYTE *)(v100 + 40);
      v35 = v101 & 1;
      v36 = v102.i8[0] & 1;
      v37 = v92;
      v38 = v103.i64[0];
      do
      {
        v39 = *v34;
        *(_QWORD *)&v105 = *((_QWORD *)v34 - 1);
        BYTE8(v105) = v39;
        closure #1 in static PoseModelUtils.preprocessInput(hand:olderHand:cropShape:handsKitData:gtInjections:xCanonicalization:rotateCrops:)((uint64_t)&v105, (uint64_t)v122, (uint64_t)v20, 0, v37, v38, v36, v123, a8, v35, (_QWORD **)&v121);
        v34 += 16;
        --v33;
      }
      while (v33);
      swift_bridgeObjectRelease();
      v29 = v121;
    }
  }
  v40 = v83;
  v41 = (unint64_t)v29[2];
  if (v41 >= 2)
  {
    v42 = v29[19].f32[0];
    *(float32x2_t *)v30.f32 = v29[18];
    *(float32x2_t *)v31.f32 = vsub_f32(*(float32x2_t *)v30.f32, v29[42]);
    v31.f32[2] = v42 - v29[43].f32[0];
    v43 = (int32x4_t)vmulq_f32(v31, v31);
    v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
    v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
    v46 = vmulq_n_f32(v31, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).f32[0]);
    *(float32x2_t *)v30.f32 = vsub_f32(v29[26], *(float32x2_t *)v30.f32);
    v30.f32[2] = v29[27].f32[0] - v42;
    v47 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL), vnegq_f32(v30)), v46, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
    v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL);
    v49 = (int32x4_t)vmulq_f32(v47, v47);
    v49.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v49, 2), *(float32x2_t *)v49.i8)).u32[0];
    *(float32x2_t *)v47.f32 = vrsqrte_f32((float32x2_t)v49.u32[0]);
    *(float32x2_t *)v47.f32 = vmul_f32(*(float32x2_t *)v47.f32, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32)));
    v50 = vmulq_n_f32(v48, vmul_f32(*(float32x2_t *)v47.f32, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32))).f32[0]);
    v51 = *(int *)(v104.i64[0] + 92);
    v88 = vnegq_f32(v50);
    v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL);
    v90 = v50;
    v86 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2);
    v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1);
    swift_bridgeObjectRetain();
    v57 = 0;
    v58 = v41 - 1;
    v85 = xmmword_23D9A3E10;
    v59 = -268435456;
    v84 = xmmword_23D9AB950;
    v60 = v92;
    while (1)
    {
      v102 = v54;
      v103 = v55;
      v104 = (float32x4_t)v56;
      v61 = v59;
      v62 = v52;
      v63 = v53;
      v64 = v29;
      v65 = &v29[v57];
      v66 = (uint64_t)v29[v57 + 4];
      v67 = v65[5].i8[0];
      v68 = *(float32x4_t *)v65[8].f32;
      v96 = *(float32x4_t *)v65[6].f32;
      v97 = v68;
      v69 = *(float32x4_t *)v65[10].f32;
      v124 = *(simd_float3x3 *)v65[12].i8;
      v70 = *(_OWORD *)v65[20].f32;
      v100 = *(_OWORD *)v65[22].f32;
      v101 = v70;
      v71 = *(float32x4_t *)v65[24].f32;
      v98 = v69;
      v99 = v71;
      *(float32x2_t *)v71.f32 = vsub_f32(v65[26], v65[18]);
      v71.f32[2] = v65[27].f32[0] - v65[19].f32[0];
      v72 = (int32x4_t)vmulq_f32(v71, v71);
      v72.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v72, 2), vadd_f32(*(float32x2_t *)v72.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1))).u32[0];
      *(float32x2_t *)v69.f32 = vrsqrte_f32((float32x2_t)v72.u32[0]);
      *(float32x2_t *)v69.f32 = vmul_f32(*(float32x2_t *)v69.f32, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32)));
      v73 = vmulq_n_f32(v71, vmul_f32(*(float32x2_t *)v69.f32, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32))).f32[0]);
      v94 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL), v88), v73, v89);
      v95 = v73;
      v124.columns[0].i32[3] = v61;
      v124.columns[1].i32[3] = v62;
      v124.columns[2].i32[3] = v63;
      v93 = v124;
      v125 = __invert_f3(v124);
      v74 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, v125.columns[0].f32[0]), v97, *(float32x2_t *)v125.columns[0].f32, 1), v98, (float32x4_t)v125.columns[0], 2);
      v125.columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, v125.columns[1].f32[0]), v97, *(float32x2_t *)v125.columns[1].f32, 1), v98, (float32x4_t)v125.columns[1], 2);
      v125.columns[1] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, v125.columns[2].f32[0]), v97, *(float32x2_t *)v125.columns[2].f32, 1), v98, (float32x4_t)v125.columns[2], 2);
      v125.columns[2] = (simd_float3)vmlaq_lane_f32(vmlaq_n_f32(vmulq_laneq_f32(v74, v94, 2), (float32x4_t)v125.columns[0], v94.f32[0]), (float32x4_t)v125.columns[1], *(float32x2_t *)v94.f32, 1);
      v75 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v74, v90.f32[0]), v87, (float32x4_t)v125.columns[0]), v86, (float32x4_t)v125.columns[1]);
      v76 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v95.f32[0]), (float32x4_t)v125.columns[0], *(float32x2_t *)v95.f32, 1), (float32x4_t)v125.columns[1], v95, 2);
      v77 = vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v125.columns[2], *(float *)&v91), (float32x4_t)0, v75), (float32x4_t)0, v76);
      v125.columns[0] = (simd_float3)vmulq_f32((float32x4_t)v125.columns[2], (float32x4_t)0);
      v125.columns[2] = (simd_float3)vmlaq_f32(vaddq_f32(v75, (float32x4_t)v125.columns[0]), (float32x4_t)0, v76);
      v77.i32[3] = v102.i32[3];
      v125.columns[2].i32[3] = v103.i32[3];
      v125.columns[1] = (simd_float3)vaddq_f32(v76, vmlaq_f32((float32x4_t)v125.columns[0], (float32x4_t)0, v75));
      v125.columns[1].i32[3] = v104.i32[3];
      v78 = *(_BYTE *)(v60 + 136);
      v120 = v67;
      v119 = 1;
      *(_QWORD *)&v105 = v66;
      BYTE8(v105) = v67;
      v106 = 3;
      v107 = 1;
      v108 = v101;
      v109 = v100;
      v110 = v99;
      v111 = v77;
      v103 = v125.columns[2];
      v104 = v77;
      v112 = v125.columns[2];
      v113 = v125.columns[1];
      v102 = v125.columns[1];
      v114 = v85;
      v115 = v84;
      v116 = 0;
      v117 = (v78 & 1) == 0;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v118 = *(_QWORD *)&v20[v51];
      *(_QWORD *)&v20[v51] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v105, v66, v67, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)&v20[v51] = v118;
      swift_bridgeObjectRelease();
      if (!v58)
        break;
      --v58;
      v57 += 24;
      v60 = v92;
      v29 = v64;
      v52 = v93.columns[1].i32[3];
      v53 = v93.columns[2].i32[3];
      v59 = v93.columns[0].i32[3];
      v55 = v103;
      v54 = (simd_float3)v104;
      v56 = v102;
    }
    swift_bridgeObjectRelease();
    Hands_trace_CBridge_0();
    outlined init with copy of HandDescriptor((uint64_t)v20, v83);
  }
  else
  {
    Hands_trace_CBridge_0();
    outlined init with copy of HandDescriptor((uint64_t)v20, v40);
  }
  swift_bridgeObjectRelease();
  return outlined destroy of HandDescriptor((uint64_t)v20);
}

void sub_23D833B0C()
{
  swift_bridgeObjectRelease();
  JUMPOUT(0x23D833638);
}

uint64_t closure #1 in static PoseModelUtils.preprocessInput(hand:olderHand:cropShape:handsKitData:gtInjections:xCanonicalization:rotateCrops:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, float32x4_t *a8, float32x2_t a9, char a10, _QWORD **a11)
{
  uint64_t v11;
  uint64_t v19;
  char v20;
  char v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  __int128 v30;
  float32x4_t v31;
  uint64_t v32;
  float32x2_t v33;
  uint64_t v34;
  char v35;
  float32x4_t *v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x2_t v66;
  float32x2_t v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  _QWORD *v72;
  char isUniquelyReferenced_nonNull_native;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  unint64_t v80;
  unint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  _QWORD *v84;
  __int32 v85;
  BOOL v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  char v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  __int128 v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  uint64_t v130;
  char v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  __int128 v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144[3];
  float32x4_t v145;
  _OWORD v146[4];
  simd_float4x4 v147;
  simd_float4x4 v148;

  v11 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(v11 + 16))
  {
    v108 = *a8;
    v110 = a8[1];
    v112 = a8[2];
    v19 = *(_QWORD *)result;
    v20 = *(_BYTE *)(result + 8);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)result, v20);
    if ((v21 & 1) != 0)
    {
      v22 = (float32x4_t *)(*(_QWORD *)(v11 + 56) + 192 * result);
      v24 = v22[2];
      v23 = v22[3];
      v25 = v22[1];
      v132 = *v22;
      v133 = v25;
      v134 = v24;
      v135 = v23;
      v26 = v22[4];
      v27 = v22[5];
      v28 = v22[7];
      v138 = v22[6];
      v139 = v28;
      v136 = v26;
      v137 = v27;
      v29 = v22[8];
      v30 = (__int128)v22[9];
      v31 = v22[11];
      v142 = v22[10];
      v143 = v31;
      v140 = v29;
      v141 = v30;
      if ((*(_BYTE *)(a3 + 192) & 1) == 0)
      {
        v104 = v20;
        v105 = v19;
        v33 = *(float32x2_t *)(a3 + 176);
        v32 = *(_QWORD *)(a3 + 184);
        if ((a4 & 1) != 0)
        {
          v34 = *(_QWORD *)(*(_QWORD *)(a3 + *(int *)(type metadata accessor for HandDescriptor() + 92)) + 16);
          outlined retain of ImageData((uint64_t)&v132);
          if (v34)
          {
            specialized __RawDictionaryStorage.find<A>(_:)(v105, v104);
            if ((v35 & 1) != 0)
              return outlined release of ImageData((uint64_t)&v132);
          }
        }
        else
        {
          outlined retain of ImageData((uint64_t)&v132);
        }
        v36 = (float32x4_t *)v136.i64[0];
        ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v144);
        *(float32x2_t *)v37.f32 = v33;
        v37.i64[1] = v32;
        v101 = vaddq_f32(v145, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v144[0], v33.f32[0]), v144[1], v33, 1), v144[2], v37, 2));
        v37.i32[0] = *(_DWORD *)a5;
        specialized static HandsKitUtils.computeOutputCameraIntrinsics(forCrop:cropShape:withRadius:)((uint64_t)v146, v101, a9, *(int32x2_t *)v37.f32, (__n128)v145);
        v98 = (float32x4_t)v146[0];
        v99 = (float32x4_t)v146[1];
        v100 = (float32x4_t)v146[2];
        type metadata accessor for PoseModelUtils();
        v122 = v140;
        v123 = v141;
        v124 = v142;
        v125 = v143;
        v118 = v136;
        v119 = v137;
        v120 = v138;
        v121 = v139;
        v114 = v132;
        v115 = v133;
        v116 = v134;
        v117 = v135;
        static PoseModelUtils.calculateUpVector(hand:olderHand:imageData:handsKitData:)(a3, a6, (uint64_t)&v114, a2, &v126);
        v38 = (int32x4_t)vmulq_f32(v101, v101);
        v38.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
        v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
        v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
        v41 = vmulq_n_f32(v101, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
        if ((a7 & 1) != 0)
        {
          v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL);
          v43 = vmlaq_f32(vmulq_f32(v42, vnegq_f32(v126)), v41, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), (int8x16_t)v126, 0xCuLL));
          v44 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL);
          v45 = (int32x4_t)vmulq_f32(v43, v43);
          v45.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), *(float32x2_t *)v45.i8)).u32[0];
          v46 = vrsqrte_f32((float32x2_t)v45.u32[0]);
          v47 = vmul_f32(v46, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v46, v46)));
          v48 = vmulq_n_f32(v44, vmul_f32(v47, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v47, v47))).f32[0]);
          v49 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), vnegq_f32(v41)), v48, v42);
          v50 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL);
          v51 = (int32x4_t)vmulq_f32(v49, v49);
          v51.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), *(float32x2_t *)v51.i8)).u32[0];
          v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
          v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
          v54 = vmulq_n_f32(v50, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
          v55 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, v127.f32[0]), v54, *(float32x2_t *)v127.f32, 1), v41, v127, 2);
          v56 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, v128.f32[0]), v54, *(float32x2_t *)v128.f32, 1), v41, v128, 2);
          v41 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, v129.f32[0]), v54, *(float32x2_t *)v129.f32, 1), v41, v129, 2);
        }
        else
        {
          v57 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL);
          v58 = vmlaq_f32(vmulq_f32(v57, (float32x4_t)xmmword_23D9B0390), (float32x4_t)xmmword_23D9A3E30, v41);
          v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL);
          v60 = (int32x4_t)vmulq_f32(v58, v58);
          v60.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v60.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v60, 2), *(float32x2_t *)v60.i8)).u32[0];
          v61 = vrsqrte_f32((float32x2_t)v60.u32[0]);
          v62 = vmul_f32(v61, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v61, v61)));
          v55 = vmulq_n_f32(v59, vmul_f32(v62, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v62, v62))).f32[0]);
          v63 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL), vnegq_f32(v41)), v55, v57);
          v64 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), (int8x16_t)v63, 0xCuLL);
          v65 = (int32x4_t)vmulq_f32(v63, v63);
          v65.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v65, 2), *(float32x2_t *)v65.i8)).u32[0];
          v66 = vrsqrte_f32((float32x2_t)v65.u32[0]);
          v67 = vmul_f32(v66, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(v66, v66)));
          v56 = vmulq_n_f32(v64, vmul_f32(v67, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(v67, v67))).f32[0]);
        }
        v68 = v105;
        v69 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v108.f32[0]), v56, *(float32x2_t *)v108.f32, 1), v41, v108, 2);
        v70 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v110.f32[0]), v56, *(float32x2_t *)v110.f32, 1), v41, v110, 2);
        v71 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v112.f32[0]), v56, *(float32x2_t *)v112.f32, 1), v41, v112, 2);
        if ((a10 & 1) != 0)
        {
          v111 = v70;
          v113 = v69;
          v109 = v71;
          *(double *)v147.columns[0].i64 = ImageCalibrationData.headsetToCameraTransform.getter();
          v148 = __invert_f4(v147);
          v92 = (float32x4_t)v148.columns[3];
          v106 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v148.columns[0], v113.f32[0]), (float32x4_t)v148.columns[1], *(float32x2_t *)v113.f32, 1), (float32x4_t)v148.columns[2], v113, 2);
          v96 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v148.columns[0], v111.f32[0]), (float32x4_t)v148.columns[1], *(float32x2_t *)v111.f32, 1), (float32x4_t)v148.columns[2], v111, 2);
          v94 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v148.columns[0], v109.f32[0]), (float32x4_t)v148.columns[1], *(float32x2_t *)v109.f32, 1), (float32x4_t)v148.columns[2], v109, 2);
          v91 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)v148.columns[0], (float32x4_t)0), (float32x4_t)0, (float32x4_t)v148.columns[1]), (float32x4_t)0, (float32x4_t)v148.columns[2]);
          swift_beginAccess();
          v90 = v36[15];
          v102 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36[12], v101.f32[0]), v36[13], *(float32x2_t *)v101.f32, 1), v36[14], v101, 2);
          v72 = *a11;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *a11 = v72;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1, v72);
            *a11 = v72;
          }
          v74 = v109;
          v75 = vmlaq_f32(v106, (float32x4_t)0, v92);
          v76 = vmlaq_f32(v96, (float32x4_t)0, v92);
          v77 = vmlaq_f32(v94, (float32x4_t)0, v92);
          v78 = vaddq_f32(v92, v91);
          v79 = vaddq_f32(v90, v102);
          v81 = v72[2];
          v80 = v72[3];
          v83 = v111;
          v82 = v113;
          if (v81 >= v80 >> 1)
          {
            v107 = v75;
            v95 = v77;
            v97 = v76;
            v103 = v79;
            v93 = v78;
            v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v80 > 1), v81 + 1, 1, v72);
            v78 = v93;
            v77 = v95;
            v79 = v103;
            v76 = v97;
            v75 = v107;
            v74 = v109;
            v83 = v111;
            v82 = v113;
            v72 = v89;
          }
          v72[2] = v81 + 1;
          v84 = &v72[24 * v81];
          v84[4] = v68;
          *((_BYTE *)v84 + 40) = v104;
          v85 = v126.i32[0];
          *((_DWORD *)v84 + 11) = *(__int32 *)((char *)v126.i32 + 3);
          *(_DWORD *)((char *)v84 + 41) = v85;
          *((float32x4_t *)v84 + 3) = v82;
          *((float32x4_t *)v84 + 4) = v83;
          *((float32x4_t *)v84 + 5) = v74;
          *((float32x4_t *)v84 + 6) = v75;
          *((float32x4_t *)v84 + 7) = v76;
          *((float32x4_t *)v84 + 8) = v77;
          *((float32x4_t *)v84 + 9) = v78;
          *((float32x4_t *)v84 + 10) = v98;
          *((float32x4_t *)v84 + 11) = v99;
          *((float32x4_t *)v84 + 12) = v100;
          *((float32x4_t *)v84 + 13) = v79;
          *a11 = v72;
        }
        else
        {
          v86 = (*(_BYTE *)(a5 + 136) & 1) == 0;
          v114.i64[0] = v105;
          v114.i8[8] = v104;
          v115.i64[0] = v130;
          v115.i8[8] = v131;
          v116 = v98;
          v117 = v99;
          v118 = v100;
          v119 = v69;
          v120 = v70;
          v121 = v71;
          v122 = v126;
          v123 = xmmword_23D9AB950;
          v124.i64[0] = 0;
          v124.i8[8] = v86;
          v87 = *(int *)(type metadata accessor for HandDescriptor() + 92);
          v88 = swift_isUniquelyReferenced_nonNull_native();
          v126.i64[0] = *(_QWORD *)(a3 + v87);
          *(_QWORD *)(a3 + v87) = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v114, v105, v104, v88);
          *(_QWORD *)(a3 + v87) = v126.i64[0];
          swift_bridgeObjectRelease();
        }
        return outlined release of ImageData((uint64_t)&v132);
      }
    }
  }
  return result;
}

void static PoseModelUtils.getHandCenterGT(gtInjections:handsKitData:isLeft:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v6 = 0uLL;
  if (*(_QWORD *)(a1 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a1 + 32));
    if (((*(_QWORD *)(a1 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      __asm { BR              X9 }
    v8 = 0uLL;
    v6 = 0uLL;
  }
  else
  {
    v8 = 0uLL;
  }
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = 1;
}

uint64_t type metadata accessor for PoseModelUtils()
{
  return objc_opt_self();
}

uint64_t destroy for PoseModelGlobalConfig()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PoseModelGlobalConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PoseModelGlobalConfig(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for PoseModelGlobalConfig(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for PoseModelGlobalConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PoseModelGlobalConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PoseModelGlobalConfig()
{
  return &type metadata for PoseModelGlobalConfig;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD2VySfGs5NeverOTg50102_s5Hands14PoseModelUtilsC17calculateUpVector4hand9olderHand9imageData08handsKitL0AC016Canonicalizationq33VAA0J10DescriptorVz_ALSgAA05Imageq6VAA0anq6VtFZs5D13VySfGSiXEfU0_5Hands15DetectionResultVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    result = v15;
    v6 = (unint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = v7 + 32;
    v9 = *(_QWORD *)(v7 + 16);
    while (1)
    {
      v11 = *v6++;
      v10 = v11;
      if (v11 >= v9)
        break;
      v12 = *(_QWORD *)(v8 + 8 * v10);
      v16 = result;
      v14 = *(_QWORD *)(result + 16);
      v13 = *(_QWORD *)(result + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        result = v16;
      }
      *(_QWORD *)(result + 16) = v14 + 1;
      *(_QWORD *)(result + 8 * v14 + 32) = v12;
      if (!--v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized static PoseModelUtils.getInvReferenceTransform(forHand:mainCameraImage:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v5;

  if (*(_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for HandDescriptor() + 92)) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a2 + 72), *(_BYTE *)(a2 + 80));
    if ((v3 & 1) != 0)
      return swift_beginAccess();
  }
  lazy protocol witness table accessor for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError();
  swift_allocError();
  *(_QWORD *)v5 = 6;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 3;
  return swift_willThrow();
}

__n128 _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_AHs5NeverOTg5089_s5Hands14PoseModelUtilsC21populateCropBBoxFieldyyAA14HandDescriptorVz_AA9ImageDataVtFZs5D13VySfGAKXEfU0_5Hands0htL0VTf1cn_nTf4ng_n(float32x4_t *a1, float32x4_t *a2)
{
  int64_t v3;
  unsigned __int32 v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 result;
  float32x4_t v15;
  unsigned __int32 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a1[1].i64[0];
  if (v3)
  {
    v20 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v6 = v20;
    v7 = a1 + 2;
    v8 = a2[5];
    v9 = a2[6];
    v10 = a2[7];
    do
    {
      v11 = *v7;
      v21 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        v18 = v9;
        v19 = v8;
        v16 = v5;
        v17 = v10;
        v15 = *v7;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v11 = v15;
        v5 = v16;
        v10 = v17;
        v9 = v18;
        v8 = v19;
        v6 = v21;
      }
      result = (__n128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v11.f32[0]), v9, *(float32x2_t *)v11.f32, 1), v10, v11, 2);
      result.n128_u32[3] = v5;
      *(_QWORD *)(v6 + 16) = v13 + 1;
      *(__n128 *)(v6 + 16 * v13 + 32) = result;
      ++v7;
      --v3;
    }
    while (v3);
  }
  return result;
}

void specialized static PoseModelUtils.populateCropBBoxField(_:_:)(float32x4_t *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int32 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  simd_float3 v24;
  simd_float3 v25;
  __int128 v26;
  __int128 v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t *v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  float32x2_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x4_t v46;
  unint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  unint64_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  double v56;
  uint64_t i;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t *, uint64_t, uint64_t);
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  char v77;
  uint64_t v78;
  _OWORD v79[7];
  float32x4_t *v80;
  float32x4_t v81[5];
  simd_float3x3 v82;
  __int128 v83;
  _OWORD v84[2];
  _OWORD v85[4];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  simd_float3x3 v95;

  v94 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2[9];
  v90 = a2[8];
  v91 = v8;
  v9 = a2[11];
  v92 = a2[10];
  v93 = v9;
  v10 = a2[5];
  v86 = a2[4];
  v87 = v10;
  v11 = a2[7];
  v88 = a2[6];
  v89 = v11;
  v12 = a2[1];
  v85[0] = *a2;
  v85[1] = v12;
  v13 = a2[3];
  v85[2] = a2[2];
  v85[3] = v13;
  if ((a1[12].i8[0] & 1) == 0)
  {
    v14 = v87;
    v15 = v86;
    v76 = a1[11];
    ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v79);
    v72 = (float32x4_t)v79[0];
    v73 = (float32x4_t)v79[1];
    v74 = (float32x4_t)v79[3];
    v75 = (float32x4_t)v79[2];
    v16 = type metadata accessor for HandDescriptor();
    v17 = *(uint64_t *)((char *)a1->i64 + *(int *)(v16 + 92));
    if (*(_QWORD *)(v17 + 16))
    {
      v18 = v16;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(*((uint64_t *)&v15 + 1), v14);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(v17 + 56) + 176 * v19;
        v22 = *(float32x4_t *)(v21 + 48);
        v23 = *(float32x4_t *)(v21 + 64);
        v24 = *(simd_float3 *)(v21 + 80);
        v82.columns[1] = *(simd_float3 *)(v21 + 96);
        v25 = *(simd_float3 *)(v21 + 112);
        v26 = *(_OWORD *)(v21 + 128);
        v27 = *(_OWORD *)(v21 + 144);
        *(_OWORD *)((char *)v84 + 9) = *(_OWORD *)(v21 + 153);
        v84[0] = v27;
        v83 = v26;
        v82.columns[2] = v25;
        v29 = *(float32x4_t *)(v21 + 16);
        v28 = *(float32x4_t *)(v21 + 32);
        v81[0] = *(float32x4_t *)v21;
        v81[1] = v29;
        v81[2] = v28;
        v82.columns[0] = v24;
        v81[4] = v23;
        v81[3] = v22;
        v30 = (uint64_t)a1 + *(int *)(v18 + 96);
        outlined init with copy of (Int32, Matrix2dPB)(v30, (uint64_t)v7, &demangling cache variable for type metadata for HandDescriptorInternal?);
        v31 = type metadata accessor for HandDescriptorInternal();
        v71 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48);
        if (v71((uint64_t *)v7, 1, v31) == 1)
        {
          outlined destroy of Coordinate3DPB?((uint64_t)v7, &demangling cache variable for type metadata for HandDescriptorInternal?);
        }
        else
        {
          v68 = v31;
          v69 = (uint64_t *)v30;
          v70 = *((_QWORD *)&v15 + 1);
          v76 = vaddq_f32(v74, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, v76.f32[0]), v73, *(float32x2_t *)v76.f32, 1), v75, v76, 2));
          outlined retain of PoseImageCrop((uint64_t)v81);
          outlined destroy of Coordinate3DPB?((uint64_t)v7, &demangling cache variable for type metadata for HandDescriptorInternal?);
          v32 = a1->f32[0];
          v95 = __invert_f3(v82);
          v76 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v95.columns[0], v76.f32[0]), (float32x4_t)v95.columns[1], *(float32x2_t *)v76.f32, 1), (float32x4_t)v95.columns[2], v76, 2);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
          v33 = (float32x4_t *)swift_allocObject();
          v33[2] = (float32x4_t)xmmword_23D9B5170;
          v33[3] = (float32x4_t)xmmword_23D9B5180;
          v33[4] = (float32x4_t)xmmword_23D9B5190;
          v33[5] = (float32x4_t)xmmword_23D9B51A0;
          v80 = (float32x4_t *)MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
          v36 = v80;
          v38 = v80[1].u64[0];
          v37 = v80[1].u64[1];
          v39 = v37 >> 1;
          v40 = v38 + 1;
          if (v37 >> 1 <= v38)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
            v36 = v80;
            v37 = v80[1].u64[1];
            v39 = v37 >> 1;
          }
          v35.f32[0] = v32 + v32;
          v41 = *(float32x2_t *)v76.f32;
          v42 = *(uint64_t *)((char *)v76.i64 + 4);
          v43.i32[1] = 0;
          v43.i64[1] = 0;
          v43.f32[0] = v76.f32[0] + (float)((float)(v32 + v32) * -0.5);
          v44 = (float32x4_t)v43.u32[0];
          v44.f32[1] = v76.f32[1] + (float)((float)(v32 + v32) * -0.5);
          v34.f32[0] = v76.f32[2] + (float)((float)(v32 + v32) * 0.0);
          v44.f32[2] = v34.f32[0];
          v36[1].i64[0] = v40;
          v36[v38 + 2] = v44;
          v45 = v38 + 2;
          if (v39 < (uint64_t)(v38 + 2))
          {
            v74 = v43;
            v75 = v35;
            v73 = v34;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 2, 1);
            v34.i32[0] = v73.i32[0];
            v43 = v74;
            v35 = v75;
            v41 = *(float32x2_t *)v76.f32;
            v36 = v80;
          }
          v43.f32[1] = *(float *)&v42 + (float)(v35.f32[0] * 0.5);
          v43.i32[2] = v34.i32[0];
          v36[1].i64[0] = v45;
          v36[v40 + 2] = v43;
          v46 = v33[4];
          v47 = v36[1].u64[1];
          v48 = v38 + 3;
          if ((uint64_t)(v38 + 3) > (uint64_t)(v47 >> 1))
          {
            v74 = v33[4];
            v75 = v35;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v38 + 3, 1);
            v46 = v74;
            v35 = v75;
            v41 = *(float32x2_t *)v76.f32;
            v36 = v80;
          }
          *(float32x2_t *)v46.f32 = vadd_f32(v41, vmul_n_f32(vadd_f32(*(float32x2_t *)v46.f32, (float32x2_t)0xBF000000BF000000), v35.f32[0]));
          v46.f32[2] = *((float *)&v42 + 1) + (float)(v35.f32[0] * (float)(v46.f32[2] + -0.5));
          v46.i32[3] = 0;
          v36[1].i64[0] = v48;
          v36[v45 + 2] = v46;
          v49 = v33[5];
          v50 = v36[1].u64[1];
          if ((uint64_t)(v38 + 4) > (uint64_t)(v50 >> 1))
          {
            v74 = v33[5];
            v75 = v35;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v38 + 4, 1);
            v49 = v74;
            v35.i32[0] = v75.i32[0];
            v41 = *(float32x2_t *)v76.f32;
            v36 = v80;
          }
          *(float32x2_t *)v51.f32 = vadd_f32(v41, vmul_n_f32(vadd_f32(*(float32x2_t *)v49.f32, (float32x2_t)0xBF000000BF000000), v35.f32[0]));
          v51.f32[2] = *((float *)&v42 + 1) + (float)(v35.f32[0] * (float)(v49.f32[2] + -0.5));
          v51.i32[3] = 0;
          v36[1].i64[0] = v38 + 4;
          v36[v48 + 2] = v51;
          swift_setDeallocating();
          swift_deallocClassInstance();
          outlined retain of PoseImageCrop((uint64_t)v81);
          _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_AHs5NeverOTg5089_s5Hands14PoseModelUtilsC21populateCropBBoxFieldyyAA14HandDescriptorVz_AA9ImageDataVtFZs5D13VySfGAKXEfU0_5Hands0htL0VTf1cn_nTf4ng_n(v36, v81);
          v53 = v52;
          outlined release of PoseImageCrop((uint64_t)v81);
          swift_release();
          v54 = *(_QWORD *)(v53 + 16);
          if (v54)
          {
            v76.i32[0] = v14;
            outlined retain of ImageData((uint64_t)v85);
            v78 = MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54, 0);
            v55 = v78;
            v56 = *((double *)&v93 + 1);
            objc_opt_self();
            swift_beginAccess();
            swift_beginAccess();
            swift_beginAccess();
            for (i = 0; i != v54; ++i)
            {
              v58 = *(_OWORD *)(v53 + 16 * i + 32);
              v77 = 0;
              if (*(_BYTE *)(v15 + 24))
                v59 = *(_QWORD *)(v15 + 16) != 0;
              else
                v59 = -1;
              objc_msgSend(*((id *)&v15 + 1), sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v59, &v77, *(double *)&v58, *(double *)(v15 + 64), *(double *)(v15 + 80), *(double *)(v15 + 96), *(double *)(v15 + 112), v56);
              v61 = v60;
              v78 = v55;
              v63 = *(_QWORD *)(v55 + 16);
              v62 = *(_QWORD *)(v55 + 24);
              if (v63 >= v62 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
                v55 = v78;
              }
              *(_QWORD *)(v55 + 16) = v63 + 1;
              *(_QWORD *)(v55 + 8 * v63 + 32) = v61;
            }
            outlined release of ImageData((uint64_t)v85);
            swift_bridgeObjectRelease();
            LOBYTE(v14) = v76.i8[0];
          }
          else
          {
            swift_bridgeObjectRelease();
            v55 = MEMORY[0x24BEE4AF8];
          }
          v64 = v69;
          v65 = v71(v69, 1, v68);
          v66 = v70;
          if (v65 == 1)
          {
            __break(1u);
          }
          else
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v78 = *v64;
            *v64 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v55, v66, v14, isUniquelyReferenced_nonNull_native);
            *v64 = v78;
            swift_bridgeObjectRelease();
            outlined release of PoseImageCrop((uint64_t)v81);
          }
        }
      }
    }
  }
}

uint64_t outlined init with take of Float?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id specialized static PoseModelUtils.getPoseModelGlobalConfig(config:isPoseOnly:)@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  id v20;
  double v21;
  double v22;
  id v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  id result;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  id v40;
  id v41;
  unint64_t v42;
  signed int v43;
  signed int v44;
  signed int v45;
  signed int v46;
  uint64_t v47;

  v6 = objc_msgSend(a1, sel_AllowInternalModel);
  objc_msgSend(a1, sel_ChiralityLeftHandPresenceThresholdOverride);
  v8 = v7;
  objc_msgSend(a1, sel_RequiresAssociationHandPresenceThresholdOverride);
  v10 = v9;
  objc_msgSend(a1, sel_ObjectInteractionGeneralMakeThresholdOverride);
  v12 = v11;
  objc_msgSend(a1, sel_ObjectInteractionGeneralBreakThresholdOverride);
  v14 = v13;
  objc_msgSend(a1, sel_ObjectInteractionPencilMakeThresholdOverride);
  v16 = v15;
  objc_msgSend(a1, sel_ObjectInteractionPencilBreakThresholdOverride);
  v18 = v17;
  v19 = objc_msgSend(a1, sel_ObjectInteractionGeneralNumFramesBreakDelay);
  v20 = objc_msgSend(a1, sel_ObjectInteractionPencilNumFramesBreakDelay);
  v46 = objc_msgSend(a1, sel_ObjectInteractionGeneralNumFramesToLockHighConfidence);
  v45 = objc_msgSend(a1, sel_ObjectInteractionPencilNumFramesToLockHighConfidence);
  v44 = objc_msgSend(a1, sel_ObjectInteractionGeneralNumFramesToEnableBreakDelay);
  v43 = objc_msgSend(a1, sel_ObjectInteractionPencilNumFramesToEnableBreakDelay);
  objc_msgSend(a1, sel_JointsObjectOcclusionThresholdOverride);
  v22 = v21;
  v23 = objc_msgSend(a1, sel_HandPresenceOutputSelection);
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v40 = v20;
    v41 = v19;
    v42 = __PAIR64__(a2, v6);
    v47 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
    v26 = v47;
    v27 = v24 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      result = (id)specialized PoseDnnOutputLayer.init(rawValue:)();
      if (result == 18)
        break;
      v29 = (char)result;
      v31 = *(_QWORD *)(v47 + 16);
      v30 = *(_QWORD *)(v47 + 24);
      if (v31 >= v30 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      v27 += 16;
      *(_QWORD *)(v47 + 16) = v31 + 1;
      *(_BYTE *)(v47 + v31 + 32) = v29;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        LOBYTE(v6) = v42;
        LOBYTE(a2) = BYTE4(v42);
        LODWORD(v20) = (_DWORD)v40;
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
LABEL_9:
    result = objc_msgSend(a1, sel_Enable640Mode, v40, v41, v42);
    *(_BYTE *)a3 = v6;
    v32 = 1280;
    v33 = v8;
    v34 = v10;
    *(float *)(a3 + 4) = v33;
    *(float *)(a3 + 8) = v34;
    if ((_DWORD)result)
      v32 = 640;
    v35 = v12;
    v36 = v14;
    *(float *)(a3 + 12) = v35;
    *(float *)(a3 + 16) = v36;
    v37 = v16;
    v38 = v18;
    *(float *)(a3 + 20) = v37;
    *(float *)(a3 + 24) = v38;
    v39 = v22;
    *(float *)(a3 + 28) = v39;
    *(_QWORD *)(a3 + 32) = (int)v19;
    *(_QWORD *)(a3 + 40) = (int)v20;
    *(_QWORD *)(a3 + 48) = v46;
    *(_QWORD *)(a3 + 56) = v45;
    *(_QWORD *)(a3 + 64) = v44;
    *(_QWORD *)(a3 + 72) = v43;
    *(_QWORD *)(a3 + 80) = v26;
    *(_QWORD *)(a3 + 88) = v32;
    *(_BYTE *)(a3 + 96) = a2 & 1;
  }
  return result;
}

void specialized static PoseModelUtils.loadModelAndParams(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  Swift::String v7;
  char v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  uint64_t v12;
  void *v13;

  type metadata accessor for PoseModelParams(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  outlined retain of PoseModelGlobalConfig(a3);
  v6 = PoseModelParams.init(_:_:configurationName:)(a1, a2, a3, 0);
  v7 = String.lowercased()();
  if (v7._countAndFlagsBits == 0x6F72687473736170 && v7._object == (void *)0xEB00000000686775)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      type metadata accessor for StereoPoseDetectorModel();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v11 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v12 = *(_QWORD *)(v6 + 32);
      v13 = *(void **)(v6 + 40);
      swift_bridgeObjectRetain();
      specialized E5RTRegressor.__allocating_init(bundle:modelPath:directBindInputNames:directBindOutputNames:configName:)(v11, v12, v13, MEMORY[0x24BEE4B08], MEMORY[0x24BEE4B08], 1852399981, 0xE400000000000000);
    }
  }
}

uint64_t specialized static PoseModelUtils.loadPoseModel(_:isPoseOnly:)@<X0>(void *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  int v23;
  Swift::String v24;
  int v26;
  Swift::String v27;
  int v29;
  uint64_t v30;
  _OWORD v31[2];
  _QWORD v32[4];
  _BYTE v33[80];
  uint64_t v34;

  specialized static PoseModelUtils.getPoseModelGlobalConfig(config:isPoseOnly:)(a1, a2, (uint64_t)v33);
  v5 = objc_msgSend(a1, sel_PoseModel);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  specialized static PoseModelUtils.loadModelAndParams(_:_:)(v6, v8, (uint64_t)v33);
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(a1, sel_HandPresenceModel);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  specialized static PoseModelUtils.loadModelAndParams(_:_:)(v14, v16, (uint64_t)v33);
  v18 = v17;
  v20 = v19;
  result = swift_bridgeObjectRelease();
  v22 = *(unsigned __int8 *)(v12 + 320);
  v23 = *(unsigned __int8 *)(v20 + 320);
  if (v22 == 2)
  {
    if (v23 == 2)
      goto LABEL_18;
  }
  else if (v23 != 2 && ((((v23 & 1) == 0) ^ v22) & 1) != 0)
  {
    goto LABEL_18;
  }
  v24 = String.lowercased()();
  if (v24._countAndFlagsBits == 0x6F72687473736170 && v24._object == (void *)0xEB00000000686775)
  {
    swift_bridgeObjectRelease();
    v26 = 1;
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  v27 = String.lowercased()();
  if (v27._countAndFlagsBits == 0x6F72687473736170 && v27._object == (void *)0xEB00000000686775)
  {
    result = swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = swift_bridgeObjectRelease();
  if (((v26 ^ v29) & 1) == 0)
  {
LABEL_17:
    v32[3] = MEMORY[0x24BEE0D00];
    v32[0] = 0xD00000000000004FLL;
    v32[1] = 0x800000023D9D22A0;
    type metadata accessor for HandyLoggerNeo();
    memset(v31, 0, sizeof(v31));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v31, 0xD00000000000005ELL, 0x800000023D9D21F0, 106, (uint64_t)v32, MEMORY[0x24BEE4AF8]);
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
  }
LABEL_18:
  v30 = v34;
  *a3 = v12;
  a3[1] = v10;
  a3[2] = v20;
  a3[3] = v18;
  a3[4] = v30;
  return result;
}

__n128 __swift_memcpy192_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t getEnumTagSinglePayload for PoseModelUtils.XCanonicalCropState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 192))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PoseModelUtils.XCanonicalCropState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 192) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PoseModelUtils.XCanonicalCropState()
{
  return &type metadata for PoseModelUtils.XCanonicalCropState;
}

Swift::Void __swiftcall TwoHandOcclusionCoreAnalytics.update(currentTime:isUpperHand:angleRelatedToOtherPalm:)(CMTime currentTime, Swift::Bool isUpperHand, Swift::Float angleRelatedToOtherPalm)
{
  uint64_t v3;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_QWORD *)(v3 + 112))
  {
    *(CMTime *)(v3 + 120) = currentTime;
    *(_BYTE *)(v3 + 144) = 0;
LABEL_6:
    CMTime.seconds.getter();
    v7 = v6;
    CMTime.seconds.getter();
    *(float *)&v8 = v7 - v8;
    *(_DWORD *)(v3 + 148) = LODWORD(v8);
    if (!isUpperHand)
      goto LABEL_9;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v3 + 144) & 1) == 0)
    goto LABEL_6;
  if (!isUpperHand)
    goto LABEL_9;
LABEL_7:
  v9 = *(_QWORD *)(v3 + 152);
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    goto LABEL_12;
  *(_QWORD *)(v3 + 152) = v11;
LABEL_9:
  *(float *)(v3 + 160) = *(float *)(v3 + 160) + angleRelatedToOtherPalm;
  v12 = *(_QWORD *)(v3 + 112);
  v10 = __CFADD__(v12, 1);
  v13 = v12 + 1;
  if (!v10)
  {
    *(_QWORD *)(v3 + 112) = v13;
    return;
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

unint64_t closure #1 in TwoHandOcclusionCoreAnalytics.sendCoreAnalyticsData(isLeft:)(_QWORD *a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A8140;
  v3 = a1[5];
  *(_QWORD *)(inited + 32) = a1[4];
  *(_QWORD *)(inited + 40) = v3;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  v4 = a1[7];
  *(_QWORD *)(inited + 56) = a1[6];
  *(_QWORD *)(inited + 64) = v4;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 72) = Float._bridgeToObjectiveC()();
  v5 = a1[9];
  *(_QWORD *)(inited + 80) = a1[8];
  *(_QWORD *)(inited + 88) = v5;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 96) = Bool._bridgeToObjectiveC()();
  v6 = a1[11];
  *(_QWORD *)(inited + 104) = a1[10];
  *(_QWORD *)(inited + 112) = v6;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 120) = Float._bridgeToObjectiveC()();
  v7 = a1[13];
  *(_QWORD *)(inited + 128) = a1[12];
  *(_QWORD *)(inited + 136) = v7;
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  v8 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v15 = xmmword_23D9A8B80;
  v16 = 0;
  v17 = 0;
  v9 = a1[3];
  v14[0] = a1[2];
  v14[1] = v9;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  type metadata accessor for NSObject();
  v11 = MEMORY[0x24BEE0D00];
  v12._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v14[3] = v11;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD00000000000006DLL, 0x800000023D9D23F0, 105, (uint64_t *)&v15, (uint64_t)v14, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  return v8;
}

uint64_t TwoHandOcclusionCoreAnalytics.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TwoHandOcclusionCoreAnalytics()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for TwoHandOcclusionCoreAnalytics.TwoHandOcclusionCoreAnalyticsField()
{
  return &type metadata for TwoHandOcclusionCoreAnalytics.TwoHandOcclusionCoreAnalyticsField;
}

uint64_t getEnumTagSinglePayload for TwoHandOcclusionStashData(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[9])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TwoHandOcclusionStashData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TwoHandOcclusionStashData()
{
  return &type metadata for TwoHandOcclusionStashData;
}

double TwoHandOcclusionCoreAnalytics.init()()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 16) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 24) = 0x800000023D9CC910;
  *(_QWORD *)(v0 + 32) = 0x7466656C5F7369;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  strcpy((char *)(v0 + 48), "duration_secs");
  *(_WORD *)(v0 + 62) = -4864;
  strcpy((char *)(v0 + 64), "is_upper_hand");
  *(_WORD *)(v0 + 78) = -4864;
  *(_QWORD *)(v0 + 80) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 88) = 0x800000023D9D2460;
  *(_QWORD *)(v0 + 96) = 0xD000000000000010;
  *(_QWORD *)(v0 + 104) = 0x800000023D9CCB80;
  result = 0.0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_BYTE *)(v0 + 144) = 1;
  *(_QWORD *)(v0 + 156) = 0;
  *(_QWORD *)(v0 + 148) = 0;
  *(_BYTE *)(v0 + 164) = 2;
  *(_DWORD *)(v0 + 168) = 0;
  *(_BYTE *)(v0 + 172) = 1;
  return result;
}

unint64_t SceneSegmentationProcessing.run(_:_:_:)@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>, float32x4_t a7@<Q3>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  unint64_t result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __CVBuffer *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  __CVBuffer *v31;
  __CVBuffer *v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  __CVBuffer *v64;
  __CVBuffer *pixelBuffer;
  Hands::BufferDataMetaData v67;

  v8 = v7;
  v12 = v7 + 396;
  *(_BYTE *)(v7 + 405) = 0;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_QWORD *)(v7 + 344) = 0;
  *(_QWORD *)(v7 + 352) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 384) = -1;
  *(_BYTE *)(v7 + 392) = 0;
  *(_QWORD *)(v7 + 396) = 0x3F800000BF800000;
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  swift_retain();
  HandObjectProximity.get3DHandTipLocation(_:_:_:)(a1, a2, a4, a5, a6, a7);
  if (HandObjectProximity.areBasicFeaturesNonZero()())
    HandObjectProximity.updateDerivedFeatures()();
  swift_release();
  result = SceneSegmentationProcessing.handVisibleInMetricDepth()();
  *(_BYTE *)(v7 + 404) = result & 1;
  if (!a2)
  {
    v33 = *(_QWORD **)(v7 + 272);
    if (!v33 || *(_BYTE *)(v7 + 38) != 1)
      goto LABEL_20;
    swift_beginAccess();
    v34 = *MEMORY[0x24BDAEE00];
    v35 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v36 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v37 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    *(_OWORD *)(v7 + 144) = *MEMORY[0x24BDAEE00];
    *(_OWORD *)(v7 + 160) = v35;
    *(_OWORD *)(v7 + 176) = v36;
    *(_OWORD *)(v7 + 192) = v37;
    *(_OWORD *)(v7 + 208) = v34;
    *(_OWORD *)(v7 + 224) = v35;
    *(_OWORD *)(v7 + 240) = v36;
    *(_OWORD *)(v7 + 256) = v37;
    v31 = (__CVBuffer *)v33[4];
    swift_retain();
    CVPixelBufferLockBaseAddress(v31, 0);
    v32 = (__CVBuffer *)v33[3];
    CVPixelBufferLockBaseAddress(v32, 0);
    v18 = (__CVBuffer *)v33[2];
    CVPixelBufferLockBaseAddress(v18, 0);
    SceneSegmentationProcessing.updateBufferData(_:)((uint64_t)v33);
    SceneSegmentationProcessing.countGeneralPixel()();
    v29 = *(_QWORD *)(v7 + 312);
    v38 = *(_QWORD *)(v7 + 24);
    v39 = v29 < v38;
    v30 = v29 >= v38;
    if (v39)
    {
LABEL_19:
      *(_BYTE *)(v12 + 9) = v30;
      CVPixelBufferUnlockBaseAddress(v31, 0);
      CVPixelBufferUnlockBaseAddress(v32, 0);
      CVPixelBufferUnlockBaseAddress(v18, 0);
      result = swift_release();
LABEL_20:
      v41 = *(_QWORD *)(v8 + 352);
      v42 = *(_OWORD *)(v8 + 368);
      v43 = *(_QWORD *)(v8 + 384);
      v44 = *(_BYTE *)(v8 + 392);
      v45 = *(_BYTE *)(v12 + 8);
      v46 = *(_BYTE *)(v12 + 9);
      *(_QWORD *)a3 = *(_QWORD *)(v8 + 336);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v8 + 344);
      *(_QWORD *)(a3 + 16) = v41;
      *(_OWORD *)(a3 + 32) = v42;
      *(_QWORD *)(a3 + 48) = v43;
      *(_BYTE *)(a3 + 56) = v44;
      *(_QWORD *)(a3 + 60) = *(_QWORD *)v12;
      *(_BYTE *)(a3 + 68) = v45;
      *(_BYTE *)(a3 + 69) = v46;
      return result;
    }
    v40 = 2;
LABEL_18:
    *(_QWORD *)(v8 + 384) = v29;
    *(_BYTE *)(v8 + 392) = v40;
    goto LABEL_19;
  }
  *(_QWORD *)(v7 + 272) = a2;
  swift_retain_n();
  swift_release();
  swift_beginAccess();
  v14 = *MEMORY[0x24BDAEE00];
  v15 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v16 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v17 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  *(_OWORD *)(v7 + 144) = *MEMORY[0x24BDAEE00];
  *(_OWORD *)(v7 + 160) = v15;
  *(_OWORD *)(v7 + 176) = v16;
  *(_OWORD *)(v7 + 192) = v17;
  *(_OWORD *)(v7 + 208) = v14;
  *(_OWORD *)(v7 + 224) = v15;
  *(_OWORD *)(v7 + 240) = v16;
  *(_OWORD *)(v7 + 256) = v17;
  pixelBuffer = (__CVBuffer *)a2[2].i64[0];
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  v64 = (__CVBuffer *)a2[1].i64[1];
  CVPixelBufferLockBaseAddress(v64, 0);
  v18 = (__CVBuffer *)a2[1].i64[0];
  CVPixelBufferLockBaseAddress(v18, 0);
  SceneSegmentationProcessing.updateBufferData(_:)((uint64_t)a2);
  v19 = *(_OWORD **)(v7 + 288);
  v20 = *(_QWORD *)(v7 + 296);
  v21 = *(_OWORD *)(v20 + 48);
  v22 = *(_OWORD *)(v20 + 64);
  v19[2] = *(_OWORD *)(v20 + 32);
  v19[3] = v21;
  v19[4] = v22;
  v23 = *(_OWORD *)(v7 + 56);
  v24 = *(_OWORD *)(v7 + 88);
  *(_OWORD *)&v67.objectInHandSegmentationBufferPixelsPerRow = *(_OWORD *)(v7 + 72);
  *(_OWORD *)&v67.oneOverEfl = v24;
  v67.metricDepthHeight = *(Swift::Float *)(v7 + 104);
  *(_OWORD *)&v67.segmentationBufferHeight = *(_OWORD *)(v7 + 40);
  *(_OWORD *)&v67.metricDepthBufferPixelsPerRow = v23;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  AcceleratedSceneDistanceToJointProcessor.update3DCoordinatesBuffer(_:_:_:)((unint64_t)&v67, v7 + 112, (float32x2_t *)v20);
  swift_endAccess();
  swift_release();
  result = swift_release();
  if (*(_BYTE *)(v7 + 36) != 1 || (v25 = *(_QWORD *)(v7 + 120)) == 0)
  {
LABEL_8:
    SceneSegmentationProcessing.countGeneralPixel()();
    v29 = *(_QWORD *)(v8 + 304);
    if (v29 >= *(_QWORD *)(v8 + 16))
    {
      v40 = 1;
      v30 = 1;
    }
    else
    {
      v29 = *(_QWORD *)(v8 + 312);
      if (v29 < *(_QWORD *)(v8 + 24))
      {
        v30 = 0;
        v31 = pixelBuffer;
        v32 = v64;
        goto LABEL_19;
      }
      v30 = 1;
      v40 = 2;
    }
    v31 = pixelBuffer;
    v32 = v64;
    goto LABEL_18;
  }
  v26 = *(_QWORD **)(v7 + 280);
  v27 = v26[22];
  v28 = v26[23];
  if (v28 < v27)
    goto LABEL_52;
  if (v27 == v28)
    goto LABEL_8;
  v47 = v26 + 7;
  result = swift_beginAccess();
  v49 = v26[24];
  v48 = v26[25];
  if (v48 >= v49)
  {
    v50 = (_QWORD *)(v8 + 304);
    v51 = v27;
    while (v51 < v28)
    {
      if (v49 != v48)
      {
        if (v49 >= v48)
          goto LABEL_48;
        v52 = *(_QWORD *)(v8 + 72);
        v53 = v51 * v52;
        if ((unsigned __int128)(v51 * (__int128)v52) >> 64 != (v51 * v52) >> 63)
          goto LABEL_49;
        v54 = v51 - v27;
        if (__OFSUB__(v51, v27))
          goto LABEL_50;
        v55 = v26[4];
        v56 = v54 * v55;
        if ((unsigned __int128)(v54 * (__int128)v55) >> 64 != (v54 * v55) >> 63)
          goto LABEL_51;
        v57 = *v47;
        v58 = *v47 + 32;
        v59 = v49;
        while (!__OFADD__(v59, v53))
        {
          result = v56 + v59;
          if (__OFADD__(v56, v59))
            goto LABEL_42;
          v60 = __OFSUB__(result, v49);
          result -= v49;
          if (v60)
            goto LABEL_43;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_44;
          if (result >= *(_QWORD *)(v57 + 16))
            goto LABEL_45;
          if (*(_BYTE *)(v25 + v59 + v53) == 1 && *(float *)(v58 + 4 * result) <= *(float *)(v8 + 32))
          {
            if (__OFADD__(*v50, 1))
              goto LABEL_46;
            ++*v50;
          }
          if (v48 == ++v59)
            goto LABEL_23;
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        break;
      }
LABEL_23:
      if (++v51 == v28)
        goto LABEL_8;
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BufferDataMetaData(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  int v8;
  _OWORD v9[4];
  int v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_DWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_DWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return specialized static BufferDataMetaData.== infix(_:_:)((uint64_t)v7, (uint64_t)v9);
}

Swift::Bool __swiftcall SceneSegmentationProcessing.handVisibleInMetricDepth()()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  BOOL v6;
  float v7;
  float v8;
  uint64_t v9;
  BOOL v10;
  float v11;
  float v12;
  Swift::Bool result;
  uint64_t v14;
  float v15;
  float v16;
  __int128 v17;
  float32x4_t v18;
  int8x8_t v19;
  int8x8_t v20;
  simd_float4 v21;
  simd_float4 v22;
  simd_float4 v23;
  float32x4_t v24;
  float32x4_t v25;
  simd_float4 v26;
  float32x4_t v27;
  __int128 v28;
  float32x4_t v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;

  v1 = *(float *)(v0 + 88);
  if (v1 <= 0.0)
    return 0;
  v2 = 0;
  v3 = *(float32x4_t **)(v0 + 296);
  v5 = v3[5];
  v4 = v3[6];
  while (1)
  {
    v29 = v5;
    v7 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v30 = 0u;
    v8 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v6 = v7 == v8;
    if (v2 == 2)
      break;
    while (1)
    {
      ++v2;
      if (v6)
        break;
      if (v2 == 2)
        goto LABEL_8;
      v6 = 0;
    }
  }
  if (v7 == v8)
    return 0;
LABEL_8:
  v9 = 0;
  while (1)
  {
    v27 = v4;
    v11 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v28 = 0u;
    v12 = *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v10 = v11 == v12;
    if (v9 == 2)
      break;
    while (1)
    {
      ++v9;
      if (v10)
        break;
      if (v9 == 2)
        goto LABEL_16;
      v10 = 0;
    }
  }
  if (v11 == v12)
    return 0;
LABEL_16:
  v24 = v4;
  v25 = v5;
  v14 = *(_QWORD *)(v0 + 72);
  v16 = *(float *)(v0 + 100);
  v15 = *(float *)(v0 + 104);
  v17 = *(_OWORD *)(v0 + 56);
  v31[0] = *(_OWORD *)(v0 + 40);
  v31[1] = v17;
  v32 = v14;
  v33 = *(_QWORD *)(v0 + 80);
  v34 = v1;
  v35 = *(_QWORD *)(v0 + 92);
  v36 = v16;
  v37 = v15;
  swift_beginAccess();
  v18 = v25;
  v26 = *(simd_float4 *)(v0 + 208);
  v22 = *(simd_float4 *)(v0 + 240);
  v23 = *(simd_float4 *)(v0 + 224);
  v21 = *(simd_float4 *)(v0 + 256);
  v19 = specialized static SceneSegmentationProcessingUtils.deviceCoordsToMetricDepthCoordinate(_:_:_:)((uint64_t)v31, v18, v26, v23, v22, v21);
  result = 0;
  if (v16 > *(float *)v19.i32 && *(float *)v19.i32 >= 0.0)
  {
    result = 0;
    if (v15 > *(float *)&v19.i32[1] && *(float *)&v19.i32[1] >= 0.0)
    {
      v20 = specialized static SceneSegmentationProcessingUtils.deviceCoordsToMetricDepthCoordinate(_:_:_:)((uint64_t)v31, v24, v26, v23, v22, v21);
      result = 0;
      if (v16 > *(float *)v20.i32 && *(float *)v20.i32 >= 0.0)
        return *(float *)&v20.i32[1] >= 0.0 && v15 > *(float *)&v20.i32[1];
    }
  }
  return result;
}

size_t SceneSegmentationProcessing.updateBufferData(_:)(uint64_t a1)
{
  uint64_t v1;
  __CVBuffer *v3;
  size_t result;
  size_t v5;
  int64_t BytesPerRow;
  uint64_t v7;
  int64_t Width;
  int64_t Height;
  __CVBuffer *v10;
  __CVBuffer *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = *(__CVBuffer **)(a1 + 32);
  result = (size_t)CVPixelBufferGetBaseAddress(v3);
  if (!result)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = result;
  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = v5;
  BytesPerRow = CVPixelBufferGetBytesPerRow(v3);
  if (BytesPerRow >= 0)
    v7 = BytesPerRow;
  else
    v7 = BytesPerRow + 1;
  *(_QWORD *)(v1 + 56) = v7 >> 1;
  Width = CVPixelBufferGetWidth(v3);
  Height = CVPixelBufferGetHeight(v3);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(a1 + 96);
  *(float *)(v1 + 88) = 1.0 / *(float *)(a1 + 64);
  v10 = *(__CVBuffer **)(a1 + 24);
  result = (size_t)CVPixelBufferGetBaseAddress(v10);
  if (!result)
    goto LABEL_9;
  *(_QWORD *)(v1 + 120) = result;
  *(_QWORD *)(v1 + 72) = CVPixelBufferGetBytesPerRow(v10);
  *(_QWORD *)(v1 + 48) = CVPixelBufferGetWidth(v10);
  *(_QWORD *)(v1 + 40) = CVPixelBufferGetHeight(v10);
  v11 = *(__CVBuffer **)(a1 + 16);
  result = (size_t)CVPixelBufferGetBaseAddress(v11);
  if (result)
  {
    *(_QWORD *)(v1 + 128) = result;
    result = CVPixelBufferGetBytesPerRow(v11);
    *(_QWORD *)(v1 + 64) = result;
    v12 = *(_QWORD *)(v1 + 48);
    v13 = (float)*(uint64_t *)(v1 + 40);
    v14 = (float)Width / (float)v12;
    v15 = (float)Height / v13;
    *(float *)(v1 + 92) = v14;
    *(float *)(v1 + 96) = v15;
    v16 = *(_OWORD *)(a1 + 128);
    v17 = *(_OWORD *)(a1 + 144);
    v18 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(v1 + 208) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v1 + 224) = v16;
    *(_OWORD *)(v1 + 240) = v17;
    *(_OWORD *)(v1 + 256) = v18;
    v19 = *(_OWORD *)(a1 + 208);
    v20 = *(_OWORD *)(a1 + 224);
    v21 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)(v1 + 144) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(v1 + 160) = v19;
    *(_OWORD *)(v1 + 176) = v20;
    *(_OWORD *)(v1 + 192) = v21;
    *(float *)(v1 + 100) = v14 * (float)v12;
    *(float *)(v1 + 104) = v15 * v13;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

Swift::Void __swiftcall SceneSegmentationProcessing.countGeneralPixel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  __int128 v25;
  BOOL v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  float v39;
  BOOL v40;
  BOOL v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  int v47;
  __n128 v48;
  __int128 v49;

  if (*(_BYTE *)(v0 + 37) == 1)
  {
    v1 = v0;
    v2 = *(_QWORD *)(v0 + 296);
    if (HandObjectProximity.areBasicFeaturesNonZero()())
    {
      *(_OWORD *)(v1 + 368) = *(_OWORD *)(v2 + 64);
      v3 = *(float *)(v2 + 128);
      *(float *)(v1 + 396) = v3;
      if (*(float *)(v2 + 20) > v3)
      {
        SceneSegmentationProcessing.updateUpperDistanceThreshold()();
        v4 = *(_QWORD *)(v1 + 280);
        if (*(float *)(v4 + 96) < *(float *)(v1 + 324))
        {
          v5 = *(_QWORD *)(v4 + 176);
          v6 = *(_QWORD *)(v4 + 184);
          if (v6 >= v5)
          {
            if (v5 == v6)
              return;
            while (1)
            {
              if (v5 >= v6)
                goto LABEL_73;
              v7 = *(_QWORD *)(v1 + 280);
              v8 = *(_QWORD *)(v7 + 192);
              v9 = *(_QWORD *)(v7 + 200);
              if (v9 < v8)
                break;
              if (v8 != v9)
              {
                swift_beginAccess();
LABEL_14:
                if (v8 >= v9)
                {
                  __break(1u);
LABEL_62:
                  __break(1u);
LABEL_63:
                  __break(1u);
LABEL_64:
                  __break(1u);
LABEL_65:
                  __break(1u);
LABEL_66:
                  __break(1u);
LABEL_67:
                  __break(1u);
LABEL_68:
                  __break(1u);
LABEL_69:
                  __break(1u);
LABEL_70:
                  __break(1u);
LABEL_71:
                  __break(1u);
LABEL_72:
                  __break(1u);
LABEL_73:
                  __break(1u);
                  break;
                }
                v10 = *(_QWORD *)(v1 + 120);
                if (!v10)
                  goto LABEL_57;
                v11 = *(_QWORD *)(v1 + 128);
                if (!v11)
                  goto LABEL_57;
                v12 = *(_QWORD **)(v1 + 280);
                v13 = v12[22];
                v14 = __OFSUB__(v5, v13);
                v15 = v5 - v13;
                if (v14)
                  goto LABEL_63;
                v16 = v12[4];
                v17 = v15 * v16;
                if ((unsigned __int128)(v15 * (__int128)v16) >> 64 != (v15 * v16) >> 63)
                  goto LABEL_64;
                v18 = v17 + v8;
                if (__OFADD__(v17, v8))
                  goto LABEL_65;
                v19 = v12[24];
                v20 = v18 - v19;
                if (__OFSUB__(v18, v19))
                  goto LABEL_66;
                swift_beginAccess();
                if ((v20 & 0x8000000000000000) != 0)
                  goto LABEL_67;
                v21 = v12[7];
                if (v20 >= *(_QWORD *)(v21 + 16))
                  goto LABEL_68;
                if (*(float *)(v21 + 4 * v20 + 32) >= *(float *)(v1 + 324))
                  goto LABEL_57;
                AcceleratedSceneDistanceToJointProcessor.get3DCoordinate(_:_:)(v5, v8);
                v23 = v22;
                v24 = 0;
                *(_QWORD *)&v25 = 0;
                DWORD2(v25) = 0;
                HIDWORD(v25) = v47;
                v26 = 1;
                while (1)
                {
                  while (!v26)
                  {
                    if (v24 == 2)
                      goto LABEL_31;
                    v26 = 0;
                    ++v24;
                  }
                  v48 = v23;
                  v27 = *(float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
                  v49 = v25;
                  v28 = *(float *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
                  v26 = v27 == v28;
                  if (v24 == 2)
                    break;
                  ++v24;
                }
                if (v27 == v28)
                  goto LABEL_57;
LABEL_31:
                v29 = *(_QWORD *)(v1 + 72);
                v30 = v5 * v29;
                if ((unsigned __int128)(v5 * (__int128)v29) >> 64 != (v5 * v29) >> 63)
                  goto LABEL_69;
                v14 = __OFADD__(v8, v30);
                v31 = v8 + v30;
                if (v14)
                  goto LABEL_70;
                v32 = *(_QWORD *)(v1 + 64);
                v33 = v5 * v32;
                if ((unsigned __int128)(v5 * (__int128)v32) >> 64 != (v5 * v32) >> 63)
                  goto LABEL_71;
                v14 = __OFADD__(v8, v33);
                v34 = v8 + v33;
                if (v14)
                  goto LABEL_72;
                v35 = *(unsigned __int8 *)(v10 + v31);
                v36 = *(unsigned __int8 *)(v11 + v34);
                if (v36 == 10 || v36 == 19 || v36 == 16)
                {
                  if (v35 != 1)
                  {
LABEL_47:
                    v40 = HandObjectProximity.isPointInsideObjectProximityCone(_:)(v23);
                    if (v36 != 10 && v40)
                    {
                      v41 = v36 == 16 || v36 == 19;
                      if (!v41 && v35 != 2)
                      {
                        v45 = 1;
                        goto LABEL_58;
                      }
                    }
LABEL_57:
                    v45 = 0;
LABEL_58:
                    v43 = *(_QWORD *)(v1 + 312);
                    v14 = __OFADD__(v43, v45);
                    v44 = v43 + v45;
                    if (v14)
                      goto LABEL_62;
                    ++v8;
                    *(_QWORD *)(v1 + 312) = v44;
                    if (v8 == v9)
                      goto LABEL_9;
                    goto LABEL_14;
                  }
                }
                else if (v35 == 2)
                {
                  goto LABEL_47;
                }
                v46 = v23;
                v39 = HandObjectProximity.minDistanceFromFingertipsToPoint(_:)(v23);
                v23 = v46;
                if (v39 < *(float *)(v1 + 400))
                  *(float *)(v1 + 400) = v39;
                goto LABEL_47;
              }
LABEL_9:
              if (++v5 == v6)
                return;
            }
            __break(1u);
          }
          __break(1u);
        }
      }
    }
  }
}

float SceneSegmentationProcessing.updateUpperDistanceThreshold()()
{
  uint64_t v0;
  uint64_t inited;
  float32x4_t v2;
  float32x2_t *v3;
  float32x2_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x2_t *v7;
  float32x2_t *v8;
  float32x4_t v9;
  unint64_t v10;
  float v11;
  float result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  v2.i32[3] = 0;
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  v4 = *(float32x2_t **)(v0 + 288);
  v3 = *(float32x2_t **)(v0 + 296);
  *(float32x2_t *)v2.f32 = vsub_f32(v3[6], v4[6]);
  v2.f32[2] = v3[7].f32[0] - v4[7].f32[0];
  v5 = vmulq_f32(v2, v2);
  v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)));
  *(float *)(inited + 32) = sqrtf(v6.f32[0]);
  v8 = *(float32x2_t **)(v0 + 288);
  v7 = *(float32x2_t **)(v0 + 296);
  *(float32x2_t *)v6.f32 = vsub_f32(v7[4], v8[4]);
  v6.f32[2] = v7[5].f32[0] - v8[5].f32[0];
  v9 = vmulq_f32(v6, v6);
  *(float *)(inited + 36) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v10 = specialized Sequence<>.max()(inited);
  swift_setDeallocating();
  v11 = *(float *)&v10 + *(float *)&v10;
  if ((v10 & 0x100000000) != 0)
    v11 = 200.0;
  result = v11 + *(float *)(*(_QWORD *)(v0 + 296) + 160);
  if (result <= 0.2)
    result = 0.2;
  *(float *)(v0 + 324) = result;
  if (*(_BYTE *)(*(_QWORD *)(v0 + 280) + 16) == 1)
  {
    result = result * result;
    *(float *)(v0 + 324) = result;
  }
  return result;
}

uint64_t SceneSegmentationProcessing.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SceneSegmentationProcessing()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SceneSegmentationProcessing.PixelCount()
{
  return &type metadata for SceneSegmentationProcessing.PixelCount;
}

__n128 __swift_memcpy160_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

ValueMetadata *type metadata accessor for BufferData()
{
  return &type metadata for BufferData;
}

__n128 __swift_memcpy68_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BufferDataMetaData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 68))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BufferDataMetaData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 68) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BufferDataMetaData()
{
  return &type metadata for BufferDataMetaData;
}

__n128 __swift_memcpy23_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SceneSegmentationProcessing.ThresholdConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 23))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 20);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneSegmentationProcessing.ThresholdConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 23) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 23) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneSegmentationProcessing.ThresholdConfig()
{
  return &type metadata for SceneSegmentationProcessing.ThresholdConfig;
}

BOOL specialized static BufferDataMetaData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      && *(float *)(a1 + 40) == *(float *)(a2 + 40)
      && *(float *)(a1 + 44) == *(float *)(a2 + 44)
      && *(float *)(a1 + 48) == *(float *)(a2 + 48)
      && *(float *)(a1 + 52) == *(float *)(a2 + 52)
      && *(float *)(a1 + 56) == *(float *)(a2 + 56)
      && *(float *)(a1 + 60) == *(float *)(a2 + 60)
      && *(float *)(a1 + 64) == *(float *)(a2 + 64);
}

uint64_t specialized SceneSegmentationProcessing.init(thresholdConfig:handObjectProximity:previousHandObjectProximity:bufferDataMetaData:bufferData:sceneDistanceToJointProcessor:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, uint64_t a8, float a9)
{
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)(v9 + 304) = 0;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 320) = 0x3F80000040000000;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_QWORD *)(v9 + 344) = 0;
  *(_QWORD *)(v9 + 352) = 0;
  *(_QWORD *)(v9 + 336) = 0;
  *(_QWORD *)(v9 + 384) = -1;
  *(_BYTE *)(v9 + 392) = 0;
  *(_QWORD *)(v9 + 396) = 0x3F800000BF800000;
  *(_WORD *)(v9 + 404) = 0;
  *(_QWORD *)(v9 + 288) = a5;
  *(_QWORD *)(v9 + 296) = a4;
  v11 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)a6;
  v12 = *(_OWORD *)(a6 + 32);
  v13 = *(_OWORD *)(a6 + 48);
  *(_DWORD *)(v9 + 104) = *(_DWORD *)(a6 + 64);
  *(_OWORD *)(v9 + 88) = v13;
  *(_OWORD *)(v9 + 72) = v12;
  *(_OWORD *)(v9 + 56) = v11;
  v14 = a7[7];
  *(_OWORD *)(v9 + 208) = a7[6];
  *(_OWORD *)(v9 + 224) = v14;
  v15 = a7[9];
  *(_OWORD *)(v9 + 240) = a7[8];
  *(_OWORD *)(v9 + 256) = v15;
  v16 = a7[3];
  *(_OWORD *)(v9 + 144) = a7[2];
  *(_OWORD *)(v9 + 160) = v16;
  v17 = a7[5];
  *(_OWORD *)(v9 + 176) = a7[4];
  *(_OWORD *)(v9 + 192) = v17;
  v18 = a7[1];
  *(_OWORD *)(v9 + 112) = *a7;
  *(_OWORD *)(v9 + 128) = v18;
  *(_QWORD *)(v9 + 272) = 0;
  *(_QWORD *)(v9 + 280) = a8;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(float *)(v9 + 32) = a9;
  *(_BYTE *)(v9 + 36) = a3 & 1;
  *(_BYTE *)(v9 + 37) = BYTE1(a3) & 1;
  *(_BYTE *)(v9 + 38) = BYTE2(a3) & 1;
  v19 = *(unsigned __int8 *)(a8 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v19 == 1)
    *(float *)(v9 + 32) = a9 * a9;
  v20 = *(_QWORD *)(v9 + 296);
  *(_DWORD *)(v20 + 128) = 0;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_QWORD *)(v20 + 152) = 0;
  *(_QWORD *)(v20 + 160) = 0;
  *(_QWORD *)(v20 + 144) = 0;
  *(_BYTE *)(v9 + 404) = 0;
  return v9;
}

uint64_t specialized SceneSegmentationProcessing.__allocating_init(_:)(void *a1)
{
  id v1;
  uint64_t v2;
  float v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  id v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  _OWORD v36[3];
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v1 = a1;
  v35 = (int)objc_msgSend(v1, sel_MinimumObjectSizeForOIHInPixels);
  v2 = (int)objc_msgSend(v1, sel_MinimumObjectSizeForObjectProximityConeInPixels);
  objc_msgSend(v1, sel_MaximumObjectDistanceToJoints);
  v4 = v3;
  v5 = objc_msgSend(v1, sel_UseOIHSegmentationMask);
  v6 = objc_msgSend(v1, sel_UseGeneralObjectProximityCone);
  v7 = objc_msgSend(v1, sel_Use30HzMemoryForSegmentation);

  type metadata accessor for HandObjectProximity();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_DWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  v9 = v1;
  objc_msgSend(v9, sel_HeightExtensionOfObjectProximityCone);
  v11 = v10;
  objc_msgSend(v9, sel_MaximumAllowedHDForObjectProximityCone);
  v13 = v12;
  v14 = objc_msgSend(v9, sel_Use30HzMemoryForSegmentation);
  *(_DWORD *)(v8 + 16) = v11;
  *(_DWORD *)(v8 + 20) = v13;
  *(_BYTE *)(v8 + 24) = v14;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_DWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_DWORD *)(v15 + 128) = 0;
  *(_QWORD *)(v15 + 152) = 0;
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 144) = 0;
  objc_msgSend(v9, sel_HeightExtensionOfObjectProximityCone);
  v17 = v16;
  objc_msgSend(v9, sel_MaximumAllowedHDForObjectProximityCone);
  v19 = v18;
  v20 = objc_msgSend(v9, sel_Use30HzMemoryForSegmentation);
  *(_DWORD *)(v15 + 16) = v17;
  *(_DWORD *)(v15 + 20) = v19;
  *(_BYTE *)(v15 + 24) = v20;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_DWORD *)(v15 + 128) = 0;
  *(_QWORD *)(v15 + 152) = 0;
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 144) = 0;

  v37 = 0;
  memset(v36, 0, sizeof(v36));
  v38 = xmmword_23D9B5310;
  v21 = *MEMORY[0x24BDAEE00];
  v22 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v23 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v24 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v40 = 0;
  v39 = 0uLL;
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v24;
  v45 = v21;
  v46 = v22;
  v47 = v23;
  v48 = v24;
  objc_msgSend(v9, sel_OisSegmentationProcessingWidthRatio);
  v26 = v25;
  objc_msgSend(v9, sel_OisSegmentationProcessingHeightRatio);
  v28 = v27;
  type metadata accessor for AcceleratedSceneDistanceToJointProcessor();
  swift_allocObject();
  v29 = specialized AcceleratedSceneDistanceToJointProcessor.init(usingSquaredDistance:processWidthRatio:processHeightRatio:)(v26, v28);
  type metadata accessor for SceneSegmentationProcessing();
  swift_allocObject();
  if (v6)
    v30 = 256;
  else
    v30 = 0;
  v31 = v30 | v5;
  if (v7)
    v32 = 0x10000;
  else
    v32 = 0;
  v33 = specialized SceneSegmentationProcessing.init(thresholdConfig:handObjectProximity:previousHandObjectProximity:bufferDataMetaData:bufferData:sceneDistanceToJointProcessor:)(v35, v2, v31 | v32, v8, v15, (uint64_t)v36, &v39, v29, v4);
  swift_release();
  swift_release();
  swift_release();
  return v33;
}

Swift::Void __swiftcall PinchModelInference.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  void *v2;

  objc_msgSend(*(id *)(v1 + 16), sel_resetAllBuffers);
  v2 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;

}

uint64_t static PinchModelInference.getPinchModelOutput(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  Swift::OpaquePointer v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  Swift::OpaquePointer v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t result;
  unint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];

  v8 = specialized static PinchModelInference.getEspressoOutputAsBuffer(_:_:_:)(0, a2, a3);
  v27._rawValue = (void *)MEMORY[0x24BEE4AF8];
  if ((v10 & 1) == 0)
  {
    v28 = (int *)v8;
    if (v8)
    {
      v29 = v9 - v8;
      v30 = v9 - v8 >= 0 ? v9 - v8 : v9 - v8 + 3;
      if ((unint64_t)(v9 - v8 + 3) >= 7)
      {
        v31 = v30 >> 2;
        *(_QWORD *)v52 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v30 >> 2) & ~(v30 >> 63), 0);
        if (v29 < -3)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27._rawValue = *(void **)v52;
        v32 = *(_QWORD *)(*(_QWORD *)v52 + 16);
        do
        {
          v33 = *v28;
          *(Swift::OpaquePointer *)v52 = v27;
          v34 = *((_QWORD *)v27._rawValue + 3);
          if (v32 >= v34 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v32 + 1, 1);
            v27._rawValue = *(void **)v52;
          }
          *((_QWORD *)v27._rawValue + 2) = v32 + 1;
          *((_DWORD *)v27._rawValue + v32 + 8) = v33;
          ++v28;
          ++v32;
          --v31;
        }
        while (v31);
      }
    }
  }
  v11 = specialized static PinchModelInference.getEspressoOutputAsBuffer(_:_:_:)(1, a2, a3);
  v35 = v12;
  v36._rawValue = (void *)MEMORY[0x24BEE4AF8];
  if ((v13 & 1) != 0)
    goto LABEL_3;
  v37 = (int *)v11;
  if (!v11)
    goto LABEL_3;
  v38 = v35 - v11;
  v39 = v35 - v11 + 3;
  v40 = v35 - v11 >= 0 ? v35 - v11 : v35 - v11 + 3;
  if (v39 < 7)
    goto LABEL_3;
  v41 = v40 >> 2;
  *(_QWORD *)v52 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v40 >> 2) & ~(v40 >> 63), 0);
  if (v38 < -3)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v36._rawValue = *(void **)v52;
  v42 = *(_QWORD *)(*(_QWORD *)v52 + 16);
  do
  {
    v43 = *v37;
    *(Swift::OpaquePointer *)v52 = v36;
    v44 = *((_QWORD *)v36._rawValue + 3);
    if (v42 >= v44 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v42 + 1, 1);
      v36._rawValue = *(void **)v52;
    }
    *((_QWORD *)v36._rawValue + 2) = v42 + 1;
    *((_DWORD *)v36._rawValue + v42 + 8) = v43;
    ++v37;
    ++v42;
    --v41;
  }
  while (v41);
LABEL_3:
  RawPinchFeatures.init(_:_:_:_:)((Hands::RawPinchFeatures *)v52, v27, v36, (Swift::Float_optional *)(a4 | ((HIDWORD(a4) & 1) << 32)), *(_QWORD *)(a3 + 200));
  v14 = *(_QWORD *)v52;
  v15 = *(_DWORD *)&v52[8];
  v16 = v52[12];
  v17 = *(_DWORD *)&v52[16];
  v18 = *(_DWORD *)&v52[20];
  v19 = v52[24];
  v20 = *(_QWORD *)(a3 + 64);
  if (!*(_QWORD *)(v20 + 16))
  {
LABEL_31:
    *(_QWORD *)&v52[24] = MEMORY[0x24BEE0D00];
    *(_QWORD *)v52 = 0xD000000000000021;
    *(_QWORD *)&v52[8] = 0x800000023D9D26B0;
    type metadata accessor for HandyLoggerNeo();
    v49 = xmmword_23D9A9550;
    v50 = 0;
    v51 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v49, 0xD00000000000007ALL, 0x800000023D9D2600, 194, (uint64_t)v52, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
    result = 0;
LABEL_32:
    *(_QWORD *)a1 = v14;
    *(_DWORD *)(a1 + 8) = v15;
    *(_BYTE *)(a1 + 12) = v16;
    *(_DWORD *)(a1 + 16) = v17;
    *(_DWORD *)(a1 + 20) = v18;
    *(_BYTE *)(a1 + 24) = v19;
    return result;
  }
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(2);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  v48 = v19;
  v23 = *(_QWORD **)(*(_QWORD *)(v20 + 56) + 8 * v21);
  swift_retain();
  swift_bridgeObjectRelease();
  v24 = v23[2];
  v25 = (void *)v23[3];
  swift_retain();
  v26 = E5RTRegressor.getRawOutput(_:)(v24, v25);
  v46 = v26;
  if (v26)
  {
    v47 = v23[4];
    swift_release();
    swift_release();
    result = v46 + 4 * v47;
    v19 = v48;
    goto LABEL_32;
  }
LABEL_37:
  result = swift_release();
  __break(1u);
  return result;
}

void __swiftcall RawPinchFeatures.init(_:_:_:_:)(Hands::RawPinchFeatures *__return_ptr retstr, Swift::OpaquePointer a2, Swift::OpaquePointer a3, Swift::Float_optional *a4, Swift::Int a5)
{
  int32x2_t v5;
  float v11;
  unint64_t v12;
  Swift::Float v13;
  Swift::Bool v14;
  Swift::Float v15;
  Swift::Float v16;
  Swift::Bool v17;
  void *v18;
  float v19;
  Swift::Bool v20;
  float v21;
  float v22;
  Swift::Bool v23;

  if (__OFSUB__(a5, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  v5.i32[0] = 0;
  v18 = (void *)specialized Array.init(repeating:count:)(a5 - 1, v5);
  v22 = 0.0;
  v23 = 0;
  if (!*((_QWORD *)a3._rawValue + 2))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = *((float *)a3._rawValue + 8);
  swift_bridgeObjectRelease();
  v21 = v11;
  v19 = *(float *)&a4;
  v20 = BYTE4(a4) & 1;
  v12 = *((_QWORD *)a2._rawValue + 2);
  if (!(v12 >> 61))
  {
    closure #1 in RawPinchFeatures.init(_:_:_:_:)((uint64_t)a2._rawValue + 32, (uint64_t)a2._rawValue + 4 * v12 + 32, (uint64_t)&v18, a5);
    swift_bridgeObjectRelease();
    v13 = v19;
    v14 = v20;
    v15 = v21;
    v16 = v22;
    v17 = v23;
    retstr->scoreAheads._rawValue = v18;
    retstr->hoverDistanceUncertainty.value = v13;
    retstr->hoverDistanceUncertainty.is_nil = v14;
    retstr->unsureNetScore = v15;
    retstr->rawPinchScore.value = v16;
    retstr->rawPinchScore.is_nil = v17;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t closure #1 in RawPinchFeatures.init(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  if (a1)
  {
    if (__OFSUB__(a4, 1))
      goto LABEL_18;
    v4 = (uint64_t *)a3;
    v5 = a1;
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 4 * (a4 - 1));
    *(_BYTE *)(a3 + 24) = 0;
    if (a4 < 2)
      goto LABEL_19;
    v7 = *(_DWORD *)(a1 + 4 * a4 - 8);
    v6 = *(_QWORD *)a3;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v4 = v6;
    if ((result & 1) == 0)
      goto LABEL_20;
    if (*(_QWORD *)(v6 + 16))
    {
      while (1)
      {
        *(_DWORD *)(v6 + 32) = v7;
        *v4 = v6;
        if (a4 == 2)
          break;
        v10 = 0;
        v11 = 2;
        while (v10 != 0x7FFFFFFFFFFFFFFDLL)
        {
          v12 = v11 + 1;
          if (__OFSUB__(a4, v11 + 1))
            goto LABEL_16;
          if ((unint64_t)(v11 - 1) >= *(_QWORD *)(v6 + 16))
            goto LABEL_17;
          *(_DWORD *)(v6 + 4 * v10++ + 36) = *(_DWORD *)(v5 + 4 * (a4 - ++v11));
          if (v12 == a4)
          {
            *v4 = v6;
            return result;
          }
        }
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
        v6 = result;
        if (!*(_QWORD *)(result + 16))
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      __break(1u);
    }
  }
  else
  {
    v13[3] = MEMORY[0x24BEE0D00];
    v13[0] = 0xD000000000000022;
    v13[1] = 0x800000023D9D2680;
    specialized static HLog.E(file:function:line:_:_:)(0xD00000000000007ALL, 0x800000023D9D2600, 24, (uint64_t)v13, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  return result;
}

uint64_t PinchModelInference.process(_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v11;
  Class isa;
  char *v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t i;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t result;
  uint64_t j;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int v45;
  char v46;
  int v47;
  int v48;
  char v49;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  char v58;
  uint64_t v59;

  v7 = v5;
  v59 = *MEMORY[0x24BDAC8D0];
  Hands_trace_CBridge_0();
  v11 = *(_QWORD *)(a1 + 24);
  v52 = a1;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v13 = (char *)-[objc_class bytes](isa, sel_bytes);
  v14 = isa;
  v15 = *(_QWORD *)(a4 + 56);
  if (!*(_QWORD *)(v15 + 16))
  {
    __break(1u);
    goto LABEL_36;
  }
  v53 = a3;
  swift_bridgeObjectRetain();
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  if ((v17 & 1) == 0)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    __break(1u);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
  swift_retain();
  swift_bridgeObjectRelease();
  E5RTRegressor.setNamedInput(_:fromRawPointer:)(v18, v13);
  if (v6)
    return swift_release();
  swift_release();
  v19 = *(_QWORD *)(a4 + 208);
  if ((unint64_t)(v19 - 0x2000000000000000) >> 62 != 3)
    goto LABEL_37;
  v20 = 4 * v19;
  v21 = (void *)v7[2];
  if (!v21)
  {
    if (v20 < 0 || HIDWORD(v20))
    {
LABEL_49:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x23D838430);
    }
    v22 = objc_msgSend(objc_allocWithZone((Class)FeatureFifo), sel_initWithFifoDepth_withBufSize_, 7, v20);
    v23 = (void *)v7[2];
    v7[2] = v22;

    v21 = (void *)v7[2];
    if (!v21)
    {
      __break(1u);
LABEL_48:
      __break(1u);
      __break(1u);
      goto LABEL_49;
    }
  }
  if (!objc_msgSend(v21, sel_currentDepth))
    __asm { BR              X10 }
  if (!v7[3])
  {
    if ((unsigned __int128)(v20 * (__int128)7) >> 64 != (7 * v20) >> 63)
    {
      __break(1u);
      JUMPOUT(0x23D838320);
    }
    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEC8]), sel_initWithLength_, 7 * v20);
    v25 = (void *)v7[3];
    v7[3] = v24;

  }
  for (i = 0; i != 7; ++i)
  {
    v27 = (void *)v7[3];
    if (!v27)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v28 = i * v20;
    if ((unsigned __int128)(i * (__int128)v20) >> 64 != (i * v20) >> 63)
    {
      __break(1u);
      JUMPOUT(0x23D83827CLL);
    }
    v29 = (void *)v7[2];
    if (!v29)
      goto LABEL_41;
    v30 = v27;
    v31 = objc_msgSend(v29, sel_getNextBuffer);
    if (!v31)
      goto LABEL_42;
    objc_msgSend(v30, sel_replaceBytesInRange_withBytes_, v28, v20, v31);

  }
  v32 = *(_QWORD *)(a4 + 56);
  if (!*(_QWORD *)(v32 + 16))
    goto LABEL_38;
  swift_bridgeObjectRetain();
  v33 = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v34 & 1) == 0)
    goto LABEL_45;
  v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
  swift_retain();
  swift_bridgeObjectRelease();
  v36 = (void *)v7[3];
  if (!v36)
  {
LABEL_46:
    __break(1u);
    JUMPOUT(0x23D83838CLL);
  }
  E5RTRegressor.setNamedInput(_:fromRawPointer:)(v35, (char *)objc_msgSend(objc_retainAutorelease(v36), sel_bytes));
  swift_release();
  specialized TypedKeysDictionary.makeIterator()(*(_QWORD *)(a4 + 56));
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v55)
  {
    for (j = v54; ; j = v54)
    {
      v39 = (*(uint64_t (**)(uint64_t))(*v7 + 176))(j);
      if ((v39 & 0x8000000000000000) == 0)
        break;
      swift_release();
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    v40 = *(_QWORD *)(v52 + 32);
    if (v39 < *(_QWORD *)(v40 + 16))
    {
      v41 = *(_QWORD *)(v40 + 16 * v39 + 40);
      if (v41 >> 60 != 15)
        __asm { BR              X9 }
      swift_release();
      __break(1u);
LABEL_45:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_46;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    JUMPOUT(0x23D8382ECLL);
  }
  swift_release_n();
  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  specialized E5RTRegressor.runNetwork(_:)();
  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  type metadata accessor for PinchModelInference();
  v42 = *(unsigned int *)(a2 + 264);
  LOBYTE(v54) = *(_BYTE *)(a2 + 268);
  v43 = static PinchModelInference.getPinchModelOutput(_:_:_:)((uint64_t)&v54, v53, a4, v42 | ((unint64_t)v54 << 32));
  v44 = (void *)v7[2];
  if (!v44)
    goto LABEL_48;
  objc_msgSend(v44, sel_pushBuffer_, v43);
  Hands_trace_CBridge_0();
  result = v54;
  v45 = v55;
  v46 = BYTE4(v55);
  v47 = v56;
  v48 = v57;
  v49 = v58;
  *(_QWORD *)a5 = v54;
  *(_DWORD *)(a5 + 8) = v45;
  *(_BYTE *)(a5 + 12) = v46;
  *(_DWORD *)(a5 + 16) = v47;
  *(_DWORD *)(a5 + 20) = v48;
  *(_BYTE *)(a5 + 24) = v49;
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PinchModelInference.getBranchLatentsIndex(_:)(Hands::PinchDnnInputLayer a1)
{
  _BYTE *v1;

  if (a1 <= Hands_PinchDnnInputLayer_branchArr31 && ((0x6DBu >> a1) & 1) != 0)
    return qword_23D9B5448[a1];
  lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError();
  swift_allocError();
  *v1 = 1;
  return swift_willThrow();
}

uint64_t PinchModelInference.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchModelInference()
{
  return objc_opt_self();
}

uint64_t specialized static PinchModelInference.getEspressoOutputAsBuffer(_:_:_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  Swift::String v23;
  Swift::Int v24;
  uint64_t v25;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 64);
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD **)(*(_QWORD *)(v5 + 56) + 8 * v7);
  swift_retain();
  swift_bridgeObjectRelease();
  v10 = v9[2];
  v11 = (void *)v9[3];
  v13 = v9[4];
  v12 = v9[5];
  v14 = v9[6];
  if (v14 >= 1)
  {
    v15 = 32;
    if ((unint64_t)v14 >= 0x20)
      v14 = 32;
    if (v12)
      goto LABEL_7;
LABEL_19:
    swift_retain();
    v23._countAndFlagsBits = v10;
    v23._object = v11;
    v24 = E5RTRegressor.getOutputLength(_:)(v23);
    v4 = v25;
    if (v25)
      goto LABEL_20;
    v18 = v24;
    goto LABEL_10;
  }
  v15 = 1;
  v14 = 1;
  if (!v12)
    goto LABEL_19;
LABEL_7:
  v16 = __OFSUB__(v12, v13);
  v17 = v12 - v13;
  if (v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v18 = v17 * v14;
  if ((unsigned __int128)(v17 * (__int128)v14) >> 64 != (v17 * v14) >> 63)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_retain();
LABEL_10:
  if ((unint64_t)(v18 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_23;
  }
  v19 = E5RTRegressor.getRawOutput(_:)(v10, v11);
  if (v4)
  {
LABEL_20:
    swift_release();
    return swift_release();
  }
  v20 = v19;
  if (v19)
  {
    swift_release();
    swift_release();
    if ((unint64_t)(v13 - 0x2000000000000000) >> 62 == 3)
    {
      v21 = 4 * v13 * v15;
      if ((unsigned __int128)(4 * v13 * (__int128)v15) >> 64 == v21 >> 63)
        return v20 + v21;
      goto LABEL_26;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t PinchSuppression.process(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if (((*(_BYTE *)(v2 + 24) & 1) != 0 || *(_BYTE *)(v2 + 25) == 1) && (*(_BYTE *)(result + 236) & 1) == 0)
  {
    v4 = *(unsigned __int8 *)(result + 4);
    if (v4 != 2)
    {
      v5 = *(unsigned __int8 *)(v2 + 16);
      if (v5 == 1)
      {
        if (*(float *)(result + 232) > *(float *)(v2 + 20))
        {
          if ((v4 & 1) == 0)
            return result;
LABEL_23:
          v8 = result + *(int *)(type metadata accessor for HandDescriptor() + 108);
          v9 = *(_QWORD *)v8 | 0x100;
          if (*(_BYTE *)(v8 + 8))
            v9 = 256;
          *(_QWORD *)v8 = v9;
          *(_BYTE *)(v8 + 8) = 0;
          return PinchSuppression.breakPinch(_:)(v3);
        }
        v7 = 0;
      }
      else
      {
        if ((*(_BYTE *)(a2 + 336) & 1) != 0)
        {
          v7 = 1;
          if ((v4 & 1) == 0)
            return result;
LABEL_22:
          if ((v7 & 1) != 0)
            return result;
          goto LABEL_23;
        }
        if ((*(_QWORD *)(a2 + 328) & 0x13) != 0)
          v6 = *(_BYTE *)(v2 + 24);
        else
          v6 = 0;
        v7 = 1;
        if ((v6 & 1) == 0 && (*(_BYTE *)(v2 + 25) & ((*(_QWORD *)(a2 + 328) & 0x80) != 0)) == 0)
        {
LABEL_19:
          if ((v4 & 1) == 0)
            return result;
          goto LABEL_22;
        }
      }
      *(_BYTE *)(v2 + 16) = v7;
      v7 = v5;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t PinchSuppression.breakPinch(_:)(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(result + 4) = 0;
  v2 = *(unsigned __int8 *)(v1 + 26);
  if (v2 == 2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 1) == 0)
    return result;
  v3 = result + *(int *)(type metadata accessor for HandDescriptor() + 96);
  v4 = type metadata accessor for HandDescriptorInternal();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  if ((_DWORD)result == 1)
    goto LABEL_9;
  if (!*(_QWORD *)(v3 + 48))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(v3 + 32) != 10)
  {
    *(_QWORD *)(v3 + 32) = 12;
    *(_BYTE *)(v3 + 40) = 1;
  }
  return result;
}

uint64_t PinchSuppression.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchSuppression()
{
  return objc_opt_self();
}

uint64_t __swift_memcpy6_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PinchSuppression.ThresholdConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 6))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchSuppression.ThresholdConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 6) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 6) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchSuppression.ThresholdConfig()
{
  return &type metadata for PinchSuppression.ThresholdConfig;
}

uint64_t getEnumTagSinglePayload for PinchSuppression.InternalStates(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchSuppression.InternalStates(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D838A5C + 4 * byte_23D9B54A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D838A90 + 4 * byte_23D9B54A0[v4]))();
}

uint64_t sub_23D838A90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D838A98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D838AA0);
  return result;
}

uint64_t sub_23D838AAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D838AB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D838AB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D838AC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PinchSuppression.InternalStates()
{
  return &type metadata for PinchSuppression.InternalStates;
}

uint64_t NoiseEstimator.update(withDist:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;

  v2 = v1;
  v4 = v1 + 24;
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(double *)(a1 + 32);
  if (!*(_QWORD *)(v5 + 16))
  {
    *(_QWORD *)(v2 + 24) = specialized Array.init(repeating:count:)(*(_QWORD *)(v2 + 16), *(double *)(a1 + 32));
    swift_bridgeObjectRelease();
    v24 = 0.0;
    v26 = specialized Array.init(repeating:count:)(*(_QWORD *)(v2 + 16), 0.0);
    swift_beginAccess();
    *(_QWORD *)(v2 + 32) = v26;
    result = swift_bridgeObjectRelease();
    v25 = (double)*(uint64_t *)(v2 + 16);
    v23 = v6 * v25;
    *(double *)(v2 + 48) = v6 * v25;
    *(_QWORD *)(v2 + 40) = 0;
    goto LABEL_19;
  }
  *(double *)(v2 + 48) = *(double *)(v2 + 48) + v6 - *(double *)(v5 + 32);
  swift_beginAccess();
  v7 = *(_QWORD **)(v2 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 24) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *(_QWORD *)v4 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *(_QWORD *)v4 = v7;
  }
  v7[2] = v10 + 1;
  *(double *)&v7[v10 + 4] = v6;
  if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
  {
    __break(1u);
    goto LABEL_21;
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  swift_endAccess();
  v11 = *(_QWORD *)(v2 + 16);
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v13 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  if (v12 >= v13)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v14 = v11 - 2;
  if (v11 - 2 >= v13)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v15 = v11 - 3;
  if (v15 >= v13)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = *(_QWORD *)v4 + 32;
  v6 = *(double *)(v16 + 8 * v12);
  v17 = *(double *)(v16 + 8 * v14);
  v4 = v2 + 32;
  v18 = *(double *)(v16 + 8 * v15);
  swift_beginAccess();
  v19 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v19 + 16))
  {
    v6 = vabdd_f64(v6 - v17, v17 - v18);
    *(double *)(v2 + 40) = *(double *)(v2 + 40) + v6 - *(double *)(v19 + 32);
    swift_beginAccess();
    v7 = *(_QWORD **)(v2 + 32);
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 32) = v7;
    if ((result & 1) != 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v7 = (_QWORD *)result;
  *(_QWORD *)v4 = result;
LABEL_14:
  v22 = v7[2];
  v21 = v7[3];
  if (v22 >= v21 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v7);
    v7 = (_QWORD *)result;
    *(_QWORD *)v4 = result;
  }
  v7[2] = v22 + 1;
  *(double *)&v7[v22 + 4] = v6;
  if (*(_QWORD *)(*(_QWORD *)v4 + 16))
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    result = swift_endAccess();
    v24 = *(double *)(v2 + 40);
    v23 = *(double *)(v2 + 48);
    v25 = (double)*(uint64_t *)(v2 + 16);
LABEL_19:
    *(double *)(v2 + 56) = v24 / v25;
    *(double *)(v2 + 64) = v23 / v25;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t NoiseEstimator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NoiseEstimator()
{
  return objc_opt_self();
}

uint64_t NoiseSuppressor.init(withWinSize:withMinSignalToNoiseRatio:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = 10;
  *(_BYTE *)(v2 + 24) = 1;
  *(_QWORD *)(v2 + 32) = 14;
  type metadata accessor for HoverDistanceCalculator();
  *(_QWORD *)(v2 + 40) = swift_allocObject();
  type metadata accessor for NoiseEstimator();
  v5 = swift_allocObject();
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v2 + 48) = v5;
  *(double *)(v2 + 56) = a2;
  return v2;
}

uint64_t NoiseSuppressor.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NoiseSuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance NoiseSuppressor(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v5[48];

  specialized HoverDistanceCalculator.calculate(withJoint:onHand:atTime:)(*(_QWORD *)(*(_QWORD *)v3 + 32), a3, (uint64_t)v5, a1);
  swift_retain();
  NoiseEstimator.update(withDist:)((uint64_t)v5);
  return swift_release();
}

BOOL protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance NoiseSuppressor()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)(*(_QWORD *)v0 + 48) + 64) < *(double *)(*(_QWORD *)(*(_QWORD *)v0 + 48) + 56)
                                                               * *(double *)(*(_QWORD *)v0 + 56);
}

Swift::Void __swiftcall SelectionRecoveryInBreakProcessing.reset()()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 32) = 0;
  swift_beginAccess();
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 128) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 136) = v1;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 144) = v1;
  swift_bridgeObjectRelease();
}

uint64_t SelectionRecoveryInBreakProcessing.bufferMakeFrame(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  const void *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int128 v37;
  float32x4_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  _BYTE v55[280];
  float32x4_t v56[17];
  _BYTE v57[280];

  v5 = *(_OWORD *)(a2 + 176);
  v48 = *(_OWORD *)(a2 + 160);
  v49 = v5;
  v36 = *(float32x4_t *)(a2 + 208);
  v50 = *(_OWORD *)(a2 + 192);
  v6 = *(_OWORD *)(a2 + 112);
  v44 = *(_OWORD *)(a2 + 96);
  v45 = v6;
  v7 = *(_OWORD *)(a2 + 144);
  v46 = *(_OWORD *)(a2 + 128);
  v47 = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v40 = *(_OWORD *)(a2 + 32);
  v41 = v8;
  v9 = *(_OWORD *)(a2 + 80);
  v42 = *(_OWORD *)(a2 + 64);
  v43 = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v38 = *(float32x4_t *)a2;
  v39 = v10;
  v34 = *(float32x4_t *)(a2 + 224);
  v35 = *(float32x4_t *)(a2 + 240);
  v11 = (const void *)(a2 + 272);
  v33 = *(float32x4_t *)(a2 + 256);
  memcpy(v55, (const void *)(a2 + 272), sizeof(v55));
  v12 = *(float32x4_t *)(a2 + 176);
  v56[10] = *(float32x4_t *)(a2 + 160);
  v56[11] = v12;
  v13 = *(float32x4_t *)(a2 + 112);
  v56[6] = *(float32x4_t *)(a2 + 96);
  v56[7] = v13;
  v14 = *(float32x4_t *)(a2 + 144);
  v56[8] = *(float32x4_t *)(a2 + 128);
  v56[9] = v14;
  v15 = *(float32x4_t *)(a2 + 48);
  v56[2] = *(float32x4_t *)(a2 + 32);
  v56[3] = v15;
  v16 = *(float32x4_t *)(a2 + 80);
  v56[4] = *(float32x4_t *)(a2 + 64);
  v56[5] = v16;
  v17 = *(float32x4_t *)(a2 + 16);
  v56[0] = *(float32x4_t *)a2;
  v56[1] = v17;
  v56[12] = *(float32x4_t *)(a2 + 192);
  v56[13] = v36;
  v56[14] = v34;
  v56[15] = v35;
  v56[16] = v33;
  memcpy(v57, v11, sizeof(v57));
  specialized static PinchGestureHelper.getPinchVector(_:_:)(a1, v56);
  v32 = v18;
  swift_beginAccess();
  *(_OWORD *)(v2 + 96) = v32;
  v51 = v36;
  v52 = v34;
  v53 = v35;
  v54 = v33;
  specialized static PinchGestureHelper.getPalmNormal(_:_:)(a1, &v38);
  *(_OWORD *)(v2 + 80) = v19;
  result = *(_QWORD *)(a1 + 16);
  if (!result)
  {
    *(_QWORD *)&v30 = 0;
    DWORD2(v30) = 0;
    goto LABEL_5;
  }
  v22 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  v24 = *(_OWORD *)(a1 + 80);
  v23 = *(_OWORD *)(a1 + 96);
  v26 = *(_OWORD *)(a1 + 48);
  v25 = *(_OWORD *)(a1 + 64);
  v27 = *(_OWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 24);
  v29 = *(_QWORD *)(a1 + 112);
  v38.i64[0] = *(_QWORD *)(a1 + 16);
  v38.i64[1] = v28;
  v39 = v27;
  v40 = v26;
  v41 = v25;
  v42 = v24;
  v43 = v23;
  *(_QWORD *)&v44 = v29;
  *((_QWORD *)&v44 + 1) = v22;
  LOWORD(v45) = v21 & 0x101;
  DWORD1(v45) = HIDWORD(v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  HandPose.init(_:from:)((uint64_t)&v38, (uint64_t)v56, v36, v34, v35, v33);
  result = v56[0].i64[1];
  if (*(_QWORD *)(v56[0].i64[1] + 16) >= 7uLL)
  {
    v37 = *(_OWORD *)(v56[0].i64[1] + 240);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v30 = v37;
LABEL_5:
    *(float32x2_t *)&v31 = vadd_f32(*(float32x2_t *)&v30, *(float32x2_t *)(v2 + 96));
    *((float *)&v31 + 2) = *((float *)&v30 + 2) + *(float *)(v2 + 104);
    HIDWORD(v31) = 0;
    *(_OWORD *)(v2 + 64) = v31;
    *(_OWORD *)(v2 + 112) = *(_OWORD *)(v2 + 48);
    return result;
  }
  __break(1u);
  return result;
}

uint64_t SelectionRecoveryInBreakProcessing.getCandidateStatus(_:_:_:)(uint64_t a1, const void *a2, uint64_t a3)
{
  float32x4_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  float v22;
  unint64_t v23;
  float v24;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  _BYTE v38[552];

  v7 = type metadata accessor for HandDescriptor();
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v15 = (char *)&v35 - v14;
  MEMORY[0x24BDAC7A8](v13, v16);
  v18 = (char *)&v35 - v17;
  v19 = v3[1].i64[1];
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)&v35 - v17, v20);
  if (v19 == 1
    && (v21 = *((_QWORD *)v18 + 32), *(_QWORD *)(v21 + 16))
    && (v22 = *(float *)(a3 + 104), v23 = specialized Sequence<>.min()(v21), (v23 & 0x100000000) == 0))
  {
    v24 = *(float *)&v23;
    outlined destroy of Matrix3x3PB((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((float)(1.0 - v22) < v24)
      return 1;
  }
  else
  {
    outlined destroy of Matrix3x3PB((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  if (v3[1].i64[1] >= (unint64_t)v3[10].i64[0])
    return 2;
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
    return 3;
  if ((*(_BYTE *)(a1 + 249) & 1) != 0)
  {
    outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 240);
    outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v26 == 2)
    {
      outlined destroy of Matrix3x3PB((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      goto LABEL_18;
    }
  }
  v27 = *((_QWORD *)v15 + 30);
  v28 = v15[249];
  outlined destroy of Matrix3x3PB((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v28 & 1) == 0)
  {
    outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v27 != 1)
      goto LABEL_19;
LABEL_18:
    outlined destroy of Matrix3x3PB((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    return 4;
  }
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
LABEL_19:
  v29 = *((_QWORD *)v11 + 30);
  v30 = v11[249];
  outlined destroy of Matrix3x3PB((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v30 & 1) == 0 && v29 == 3)
    return 4;
  swift_beginAccess();
  v31 = v3[6];
  v35 = v3[5];
  v36 = v31;
  v37 = v3[4];
  memcpy(v38, a2, sizeof(v38));
  *(double *)v32.i64 = specialized static PinchGestureHelper.updatePinchCentroid(_:_:_:_:)(a1, (float32x4_t *)v38, v35, v36);
  v33 = vsubq_f32(v32, v37);
  v34 = vmulq_f32(v33, v33);
  if (v3[10].f32[2] >= sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]))return 6;
  else
    return 5;
}

uint64_t SelectionRecoveryInBreakProcessing.updatePinchBuffer(_:)(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  float32x4_t v21;
  float32x4_t v22;
  char *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  float v27;
  int v28;
  int v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  char *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  int v68;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = v1;
    v4 = *(_DWORD *)(result + 128);
    v5 = *(_DWORD *)(result + 132);
    v7 = *(_QWORD *)(result + 24);
    v6 = *(_QWORD *)(result + 32);
    v9 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 48);
    v10 = *(_QWORD *)(result + 56);
    v11 = *(_QWORD *)(result + 64);
    v12 = *(_QWORD *)(result + 72);
    v13 = *(_QWORD *)(result + 80);
    v14 = *(_QWORD *)(result + 88);
    v15 = *(_QWORD *)(result + 96);
    v17 = *(_QWORD *)(result + 104);
    v16 = *(_QWORD *)(result + 112);
    v18 = *(_QWORD *)(result + 120);
    v53 = *(_QWORD *)(result + 16);
    v54 = v7;
    v55 = v6;
    v56 = v9;
    v44 = v6;
    v45 = v8;
    v41 = v10;
    v42 = v12;
    v57 = v8;
    v58 = v10;
    v59 = v11;
    v60 = v12;
    v46 = v17;
    v47 = v11;
    v43 = v14;
    v61 = v13;
    v62 = v14;
    v49 = v13;
    v50 = v15;
    v63 = v15;
    v64 = v17;
    v48 = v18;
    v65 = v16;
    v66 = v18;
    v51 = v16;
    v19 = v4 & 1;
    v67 = v4 & 0x101;
    v20 = (v4 >> 8) & 1;
    v52 = v5;
    v68 = v5;
    HandPose.getHoverDistanceVector()();
    v22 = vmulq_f32(v21, v21);
    LODWORD(v40) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).u32[0];
    swift_beginAccess();
    v23 = (char *)v1[16];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1[16] = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
      v1[16] = v23;
    }
    v26 = *((_QWORD *)v23 + 2);
    v25 = *((_QWORD *)v23 + 3);
    v27 = sqrtf(v40);
    if (v26 >= v25 >> 1)
    {
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v23);
      v1[16] = v23;
    }
    *((_QWORD *)v23 + 2) = v26 + 1;
    *(float *)&v23[4 * v26 + 32] = v27;
    swift_endAccess();
    v53 = v2;
    v54 = v7;
    v55 = v44;
    v56 = v9;
    v57 = v45;
    v58 = v41;
    v59 = v47;
    v60 = v42;
    v61 = v49;
    v62 = v43;
    v63 = v50;
    v64 = v46;
    v65 = v51;
    v66 = v48;
    LOBYTE(v67) = v19;
    HIBYTE(v67) = v20;
    v68 = v52;
    specialized static SelectionRecoveryInBreakProcessing.getIndexOccluionScore(_:)((uint64_t)&v53);
    v29 = v28;
    swift_beginAccess();
    v30 = (char *)v1[17];
    v31 = swift_isUniquelyReferenced_nonNull_native();
    v1[17] = v30;
    if ((v31 & 1) == 0)
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
      v1[17] = v30;
    }
    v33 = *((_QWORD *)v30 + 2);
    v32 = *((_QWORD *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v30);
      v1[17] = v30;
    }
    *((_QWORD *)v30 + 2) = v33 + 1;
    *(_DWORD *)&v30[4 * v33 + 32] = v29;
    swift_endAccess();
    v53 = v2;
    v54 = v7;
    v55 = v44;
    v56 = v9;
    v57 = v45;
    v58 = v41;
    v59 = v47;
    v60 = v42;
    v61 = v49;
    v62 = v43;
    v63 = v50;
    v64 = v46;
    v65 = v51;
    v66 = v48;
    LOBYTE(v67) = v19;
    HIBYTE(v67) = v20;
    v68 = v52;
    specialized static SelectionRecoveryInBreakProcessing.getThumbOccluionScore(_:)((uint64_t)&v53);
    v35 = v34;
    swift_beginAccess();
    v36 = (char *)v1[18];
    v37 = swift_isUniquelyReferenced_nonNull_native();
    v3[18] = v36;
    if ((v37 & 1) == 0)
    {
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
      v3[18] = v36;
    }
    v39 = *((_QWORD *)v36 + 2);
    v38 = *((_QWORD *)v36 + 3);
    if (v39 >= v38 >> 1)
    {
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v36);
      v3[18] = v36;
    }
    *((_QWORD *)v36 + 2) = v39 + 1;
    *(_DWORD *)&v36[4 * v39 + 32] = v35;
    return swift_endAccess();
  }
  return result;
}

uint64_t SelectionRecoveryInBreakProcessing.checkSelectionRecoveryConditions(_:_:_:)(uint64_t result, uint64_t a2, float32x4_t a3)
{
  float32x4_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;

  if ((*(_BYTE *)(result + 236) & 1) != 0)
    return 0;
  if ((float)(1.0 - *(float *)(a2 + 104)) <= *(float *)(result + 232))
    return 1;
  if (v3[12].f32[3] <= *(float *)(result + 272))
    return 2;
  v4 = v3[11].i64[1];
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  v5 = v3[12].i64[0];
  if (v5 < 0)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  if ((specialized static PinchGestureHelper.checkPrevRawActionScores(_:_:_:_:)(*(_QWORD *)(result + 256), v4, v5, v3[12].f32[2]) & 1) == 0)return 3;
  swift_beginAccess();
  v6 = v3[8].i64[0];
  if (!*(_QWORD *)(v6 + 16))
    return 4;
  v7 = specialized Sequence<>.min()(v6);
  if ((v7 & 0x100000000) != 0 || v3[13].f32[0] <= *(float *)&v7)
    return 4;
  v8 = v3[8].i64[1];
  if (!*(_QWORD *)(v8 + 16))
    return 5;
  v9 = specialized Sequence<>.max()(v8);
  if ((v9 & 0x100000000) != 0 || v3[13].f32[1] <= *(float *)&v9)
    return 5;
  v10 = v3[9].i64[0];
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    v15 = 0.0;
    v12 = a3;
    goto LABEL_29;
  }
  v12 = a3;
  if (v11 == 1)
  {
    v13 = 0;
    v14 = 0.0;
  }
  else
  {
    v13 = v11 & 0x7FFFFFFFFFFFFFFELL;
    v16 = (float *)(v10 + 36);
    v14 = 0.0;
    v17 = v11 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v14 = (float)(v14 + *(v16 - 1)) + *v16;
      v16 += 2;
      v17 -= 2;
    }
    while (v17);
    if (v11 == v13)
      goto LABEL_28;
  }
  v18 = v11 - v13;
  v19 = (float *)(v10 + 4 * v13 + 32);
  do
  {
    v20 = *v19++;
    v14 = v14 + v20;
    --v18;
  }
  while (v18);
LABEL_28:
  v15 = v14 / (float)v11;
LABEL_29:
  if (v3[13].f32[2] <= v15)
    return 6;
  if (specialized static PinchGestureHelper.similarity(_:_:)(v3[7], v12) > v3[13].f32[3])
    return 8;
  return 7;
}

uint64_t SelectionRecoveryInBreakProcessing.process(_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const void *a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  int v27;
  _BYTE *v29;
  uint64_t result;
  float32x4_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  char v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int (*v48)(_BYTE *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v65;
  _BYTE v66[12];
  __int32 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  float32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[4];
  unsigned __int8 v88;
  float32x4_t v89[35];

  v86 = a6;
  v83 = a3;
  v84 = a4;
  v81 = a2;
  v82 = type metadata accessor for HandPinchEvent(0);
  MEMORY[0x24BDAC7A8](v82, v11);
  v13 = &v66[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for HandDescriptor();
  v16 = MEMORY[0x24BDAC7A8](v14, v15);
  v18 = &v66[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = MEMORY[0x24BDAC7A8](v16, v19);
  v22 = &v66[-v21];
  MEMORY[0x24BDAC7A8](v20, v23);
  v25 = &v66[-v24];
  if ((*(_BYTE *)(v7 + 152) & 1) == 0)
    return outlined init with copy of TrackingUpdateDataPB(a1, a7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v79 = v13;
  v85 = a7;
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)&v66[-v24], (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v26 = *(unsigned __int8 *)(v7 + 17);
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v26 == 1)
  {
    v27 = v22[4];
    outlined destroy of Matrix3x3PB((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v27 != 2 && (v27 & 1) == 0)
    {
      v29 = &v25[*(int *)(v14 + 112)];
      if ((v29[49] & 1) == 0 && (v29[32] & 1) == 0)
        *((_QWORD *)v29 + 1) |= 0x20uLL;
    }
  }
  else
  {
    outlined destroy of Matrix3x3PB((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  *(_BYTE *)(v7 + 17) = 0;
  memcpy(v89, a5, 0x228uLL);
  result = specialized static PinchGestureHelper.getIndexTipToThumbTipVector(_:_:)(a1, v89);
  v32 = v85;
  if ((*(_BYTE *)(a1 + 280) & 1) == 0)
  {
    v33 = *(float *)(a1 + 276);
    if (*(float *)(v86 + 100) >= v33 || (*(_BYTE *)(v7 + 16) & 1) != 0)
    {
      if (v33 < (float)(1.0 - *(float *)(v86 + 104)) && *(_BYTE *)(v7 + 16) == 1)
      {
        *(_QWORD *)(v7 + 40) = 0;
        *(_BYTE *)(v7 + 16) = 0;
      }
    }
    else
    {
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_BYTE *)(v7 + 32) = 0;
      v80 = v31;
      swift_beginAccess();
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      v34 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v7 + 128) = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v7 + 136) = v34;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v7 + 144) = v34;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v7 + 32) = 1;
      result = SelectionRecoveryInBreakProcessing.bufferMakeFrame(_:_:)(a1, (uint64_t)a5);
      v31 = v80;
      *(_BYTE *)(v7 + 16) = 1;
    }
  }
  if (*(_BYTE *)(v7 + 16) == 1)
  {
    v35 = *(_QWORD *)(v7 + 24);
    v36 = __CFADD__(v35, 1);
    v37 = v35 + 1;
    if (!v36)
    {
      if (*(_QWORD *)(v7 + 160) < v37)
        v37 = *(_QWORD *)(v7 + 160);
      *(_QWORD *)(v7 + 24) = v37;
      if (*(_BYTE *)(v7 + 32) != 1)
        goto LABEL_52;
      v80 = v31;
      if (SelectionRecoveryInBreakProcessing.getCandidateStatus(_:_:_:)(a1, a5, v86) == 6)
      {
        SelectionRecoveryInBreakProcessing.updatePinchBuffer(_:)(a1);
      }
      else
      {
        *(_BYTE *)(v7 + 32) = 0;
        swift_beginAccess();
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        v65 = MEMORY[0x24BEE4AF8];
        *(_QWORD *)(v7 + 128) = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v7 + 136) = v65;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v7 + 144) = v65;
        swift_bridgeObjectRelease();
      }
      goto LABEL_51;
    }
    __break(1u);
    goto LABEL_55;
  }
  v38 = *(_QWORD *)(v7 + 40);
  v36 = __CFADD__(v38, 1);
  v39 = v38 + 1;
  if (v36)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v40 = *(_QWORD *)(v7 + 176);
  if (v40 == -1)
  {
LABEL_56:
    __break(1u);
    return result;
  }
  v80 = v31;
  if (v40 + 1 >= v39)
    v41 = v39;
  else
    v41 = v40 + 1;
  *(_QWORD *)(v7 + 40) = v41;
  v42 = *(unsigned __int8 *)(v7 + 32);
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v42 == 1 && v40 >= v41)
  {
    v43 = v18[4];
    outlined destroy of Matrix3x3PB((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v44 = v43 != 2 && (v43 & 1) == 0;
    v32 = v85;
    v31 = v80;
    if (!v44)
      goto LABEL_52;
    v45 = SelectionRecoveryInBreakProcessing.checkSelectionRecoveryConditions(_:_:_:)(a1, v86, v80);
    v31 = v80;
    if (v45 != 8)
      goto LABEL_52;
    v46 = &v25[*(int *)(v14 + 96)];
    v47 = type metadata accessor for HandDescriptorInternal();
    v48 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48);
    if (!v48(v46, 1, v47))
    {
      v49 = *((_QWORD *)v46 + 6);
      if (v49)
      {
        v50 = *((_QWORD *)v46 + 3);
        v75 = *((_QWORD *)v46 + 2);
        v76 = v50;
        v51 = *((_QWORD *)v46 + 4);
        v73 = *((_QWORD *)v46 + 5);
        v74 = v51;
        v86 = *((_QWORD *)v46 + 7);
        v52 = *((_QWORD *)v46 + 8);
        v77 = *((_QWORD *)v46 + 9);
        v78 = v52;
        v53 = *((_QWORD *)v46 + 10);
        v71 = *((_QWORD *)v46 + 11);
        v72 = v53;
        v54 = *((_QWORD *)v46 + 12);
        v69 = *((_QWORD *)v46 + 13);
        v70 = v54;
        v55 = *((_QWORD *)v46 + 15);
        v68 = *((_QWORD *)v46 + 14);
        v67 = *((_DWORD *)v46 + 32);
        LOBYTE(v87[0]) = v73 & 1;
        v88 = v55 & 1;
        if (!v48(v46, 1, v47))
        {
          v56 = LOBYTE(v87[0]);
          v57 = v76;
          v58 = v71;
          v59 = v71;
          v60 = v55 & 0xFFFFFFFF00000000 | v88;
          *((_QWORD *)v46 + 3) = v76 & 0x101;
          *((_QWORD *)v46 + 5) = v56;
          *((_QWORD *)v46 + 11) = v59;
          *((_QWORD *)v46 + 15) = v60;
          v89[0].i64[0] = v75;
          v89[0].i64[1] = v57;
          v89[1].i64[0] = v74;
          v89[1].i64[1] = v73;
          v89[2].i64[0] = v49;
          v89[2].i64[1] = v86;
          v89[3].i64[0] = v78;
          v89[3].i64[1] = v77;
          v89[4].i64[0] = v72;
          v89[4].i64[1] = v58;
          v89[5].i64[0] = v70;
          v89[5].i64[1] = v69;
          v89[6].i64[0] = v68;
          v89[6].i64[1] = v55;
          v89[7].i32[0] = v67;
          outlined retain of PinchInternalData((uint64_t)v89);
          outlined consume of PinchInternalData?(v75, v76, v74, v73, v49);
        }
        v32 = v85;
      }
    }
    v25[4] = 1;
    v61 = &v25[*(int *)(v14 + 112)];
    if ((v61[49] & 1) == 0 && (v61[32] & 1) == 0)
      *(_QWORD *)v61 |= 8uLL;
    *(_BYTE *)(v7 + 17) = 1;
    *(_BYTE *)(v7 + 32) = 0;
    swift_beginAccess();
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    v62 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v7 + 128) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 136) = v62;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 144) = v62;
    swift_bridgeObjectRelease();
    v63 = (uint64_t)v79;
    static HandPinchEvent.generateSelectionRecoveryInBreakEvent(hand:timestamp:)(a1, v81, v83, (uint64_t)v79);
    v89[0] = (float32x4_t)xmmword_23D9AB690;
    v89[1] = 0uLL;
    v87[3] = v82;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v87);
    outlined init with copy of TrackingUpdateDataPB(v63, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandPinchEvent);
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000097, 0x800000023D9D2960, 353, (uint64_t *)v89, (uint64_t)v87, v62);
    outlined destroy of Matrix3x3PB(v63, type metadata accessor for HandPinchEvent);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v87);
  }
  else
  {
    outlined destroy of Matrix3x3PB((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v32 = v85;
  }
LABEL_51:
  v31 = v80;
LABEL_52:
  *(float32x4_t *)(v7 + 48) = v31;
  return outlined init with take of HandDescriptor((uint64_t)v25, v32);
}

uint64_t SelectionRecoveryInBreakProcessing.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SelectionRecoveryInBreakProcessing()
{
  return objc_opt_self();
}

uint64_t destroy for SelectionRecoveryInBreakProcessing.SelectionRecoveryInBreakCache()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SelectionRecoveryInBreakProcessing.SelectionRecoveryInBreakCache(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SelectionRecoveryInBreakProcessing.SelectionRecoveryInBreakCache(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SelectionRecoveryInBreakProcessing.SelectionRecoveryInBreakCache(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectionRecoveryInBreakProcessing.SelectionRecoveryInBreakCache(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SelectionRecoveryInBreakProcessing.SelectionRecoveryInBreakCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectionRecoveryInBreakProcessing.SelectionRecoveryInBreakCache()
{
  return &type metadata for SelectionRecoveryInBreakProcessing.SelectionRecoveryInBreakCache;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SelectionRecoveryInBreakProcessing.ThresholdConfig()
{
  return &type metadata for SelectionRecoveryInBreakProcessing.ThresholdConfig;
}

id specialized SelectionRecoveryInBreakProcessing.ThresholdConfig.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  id result;
  int v21;

  v4 = objc_msgSend(a1, sel_RecoveryShortTapMaxDuration);
  if ((v4 & 0x80000000) != 0
    || (v5 = v4,
        objc_msgSend(a1, sel_RecoveryStationaryTapMovementRange),
        v7 = v6,
        v8 = objc_msgSend(a1, sel_RecoveryHighActionScoreFrames),
        (v8 & 0x80000000) != 0))
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v9 = v8;
    objc_msgSend(a1, sel_RecoveryHighActionScoreThreshold);
    v11 = v10;
    objc_msgSend(a1, sel_RecoveryBreakUnsureScoreThreshold);
    v13 = v12;
    objc_msgSend(a1, sel_RecoveryPinchHoverDistanceThreshold);
    v15 = v14;
    objc_msgSend(a1, sel_RecoveryPinchIndexOcclusionThreshold);
    v17 = v16;
    objc_msgSend(a1, sel_RecoveryPinchThumbOcclusionThreshold);
    v19 = v18;
    result = objc_msgSend(a1, sel_RecoveryMakeBreakSimilarityThreshold);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v7;
    *(_OWORD *)(a2 + 16) = xmmword_23D9AC240;
    *(_QWORD *)(a2 + 32) = v9;
    *(_DWORD *)(a2 + 40) = v11;
    *(_DWORD *)(a2 + 44) = v13;
    *(_DWORD *)(a2 + 48) = v15;
    *(_DWORD *)(a2 + 52) = v17;
    *(_DWORD *)(a2 + 56) = v19;
    *(_DWORD *)(a2 + 60) = v21;
  }
  return result;
}

uint64_t specialized static SelectionRecoveryInBreakProcessing.getIndexOccluionScore(_:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD v25[7];
  uint64_t v26;

  v1 = *(_OWORD *)(a1 + 80);
  v25[4] = *(_OWORD *)(a1 + 64);
  v25[5] = v1;
  v25[6] = *(_OWORD *)(a1 + 96);
  v26 = *(_QWORD *)(a1 + 112);
  v2 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v2;
  v3 = *(_OWORD *)(a1 + 48);
  v25[2] = *(_OWORD *)(a1 + 32);
  v25[3] = v3;
  outlined retain of HandPose((uint64_t)v25);
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg5043_s5Hands14StatisticUtilsC30calculateAveragee36OcclusionySfAA14HandDescriptorVFZSD6g4Vys5h9VSf_GSo06d2F7F6VXEfU_5Hands0S4PoseVTf1cn_nTf4ng_n((uint64_t)&outlined read-only object #0 of static SelectionRecoveryInBreakProcessing.getIndexOccluionScore(_:), (uint64_t)v25);
  outlined release of HandPose((uint64_t)v25);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v24 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v7 = 0;
    v8 = v24;
    while (1)
    {
      v9 = 0;
      v10 = *(_QWORD *)(v4 + 32 + 8 * v7);
      v11 = v10 + 64;
      v12 = 1 << *(_BYTE *)(v10 + 32);
      if (v12 < 64)
        v13 = ~(-1 << v12);
      else
        v13 = -1;
      v14 = v13 & *(_QWORD *)(v10 + 64);
      ++v7;
      v15 = (unint64_t)(v12 + 63) >> 6;
      v16 = 1.0;
      while (v14)
      {
        v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v18 = v17 | (v9 << 6);
LABEL_8:
        if (v16 >= *(float *)(*(_QWORD *)(v10 + 56) + 4 * v18))
          v16 = *(float *)(*(_QWORD *)(v10 + 56) + 4 * v18);
      }
      v19 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_37:
        __break(1u);
        return result;
      }
      if (v19 >= v15)
        goto LABEL_29;
      v20 = *(_QWORD *)(v11 + 8 * v19);
      ++v9;
      if (v20)
        goto LABEL_28;
      v9 = v19 + 1;
      if (v19 + 1 >= v15)
        goto LABEL_29;
      v20 = *(_QWORD *)(v11 + 8 * v9);
      if (v20)
        goto LABEL_28;
      v9 = v19 + 2;
      if (v19 + 2 >= v15)
        goto LABEL_29;
      v20 = *(_QWORD *)(v11 + 8 * v9);
      if (v20)
        goto LABEL_28;
      v9 = v19 + 3;
      if (v19 + 3 >= v15)
        goto LABEL_29;
      v20 = *(_QWORD *)(v11 + 8 * v9);
      if (v20)
        goto LABEL_28;
      v9 = v19 + 4;
      if (v19 + 4 >= v15)
        goto LABEL_29;
      v20 = *(_QWORD *)(v11 + 8 * v9);
      if (v20)
        goto LABEL_28;
      v21 = v19 + 5;
      if (v21 < v15)
        break;
LABEL_29:
      v23 = *(_QWORD *)(v24 + 16);
      v22 = *(_QWORD *)(v24 + 24);
      if (v23 >= v22 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      *(_QWORD *)(v24 + 16) = v23 + 1;
      *(float *)(v24 + 4 * v23 + 32) = v16;
      if (v7 == v5)
      {
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(v24 + 16))
          return swift_bridgeObjectRelease();
LABEL_33:
        specialized Sequence<>.min()(v8);
        return swift_bridgeObjectRelease();
      }
    }
    v20 = *(_QWORD *)(v11 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        v9 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_37;
        if (v9 >= v15)
          goto LABEL_29;
        v20 = *(_QWORD *)(v11 + 8 * v9);
        ++v21;
        if (v20)
          goto LABEL_28;
      }
    }
    v9 = v21;
LABEL_28:
    v14 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v9 << 6);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_33;
  return swift_bridgeObjectRelease();
}

uint64_t specialized static SelectionRecoveryInBreakProcessing.getThumbOccluionScore(_:)(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD v24[7];
  uint64_t v25;

  v1 = *(_OWORD *)(a1 + 80);
  v24[4] = *(_OWORD *)(a1 + 64);
  v24[5] = v1;
  v24[6] = *(_OWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 112);
  v2 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v2;
  v3 = *(_OWORD *)(a1 + 48);
  v24[2] = *(_OWORD *)(a1 + 32);
  v24[3] = v3;
  outlined retain of HandPose((uint64_t)v24);
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg5043_s5Hands14StatisticUtilsC30calculateAveragee36OcclusionySfAA14HandDescriptorVFZSD6g4Vys5h9VSf_GSo06d2F7F6VXEfU_5Hands0S4PoseVTf1cn_nTf4ng_n((uint64_t)&outlined read-only object #0 of static SelectionRecoveryInBreakProcessing.getThumbOccluionScore(_:), (uint64_t)v24);
  outlined release of HandPose((uint64_t)v24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v23 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v7 = 0;
LABEL_3:
    v8 = 0;
    v9 = *(_QWORD *)(v4 + 32 + 8 * v7);
    v10 = v9 + 64;
    v11 = 1 << *(_BYTE *)(v9 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v9 + 64);
    ++v7;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = 1.0;
    while (1)
    {
      if (v13)
      {
        v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_36;
        if (v18 >= v14)
        {
LABEL_29:
          v22 = *(_QWORD *)(v23 + 16);
          v21 = *(_QWORD *)(v23 + 24);
          if (v22 >= v21 >> 1)
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          *(_QWORD *)(v23 + 16) = v22 + 1;
          *(float *)(v23 + 4 * v22 + 32) = v15;
          if (v7 != v5)
            goto LABEL_3;
          result = swift_bridgeObjectRelease();
          if (!*(_QWORD *)(v23 + 16))
            goto LABEL_35;
          return swift_bridgeObjectRelease();
        }
        v19 = *(_QWORD *)(v10 + 8 * v18);
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v14)
            goto LABEL_29;
          v19 = *(_QWORD *)(v10 + 8 * v8);
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v14)
              goto LABEL_29;
            v19 = *(_QWORD *)(v10 + 8 * v8);
            if (!v19)
            {
              v8 = v18 + 3;
              if (v18 + 3 >= v14)
                goto LABEL_29;
              v19 = *(_QWORD *)(v10 + 8 * v8);
              if (!v19)
              {
                v8 = v18 + 4;
                if (v18 + 4 >= v14)
                  goto LABEL_29;
                v19 = *(_QWORD *)(v10 + 8 * v8);
                if (!v19)
                {
                  v20 = v18 + 5;
                  if (v20 >= v14)
                    goto LABEL_29;
                  v19 = *(_QWORD *)(v10 + 8 * v20);
                  if (!v19)
                  {
                    while (1)
                    {
                      v8 = v20 + 1;
                      if (__OFADD__(v20, 1))
                        goto LABEL_37;
                      if (v8 >= v14)
                        goto LABEL_29;
                      v19 = *(_QWORD *)(v10 + 8 * v8);
                      ++v20;
                      if (v19)
                        goto LABEL_28;
                    }
                  }
                  v8 = v20;
                }
              }
            }
          }
        }
LABEL_28:
        v13 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      if (v15 >= *(float *)(*(_QWORD *)(v9 + 56) + 4 * v17))
        v15 = *(float *)(*(_QWORD *)(v9 + 56) + 4 * v17);
    }
  }
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    return swift_bridgeObjectRelease();
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t outlined retain of PinchInternalData(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

Swift::Void __swiftcall SceneSegmentationProcessingAdapter.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v1 + 296);
  *(_DWORD *)(v2 + 128) = 0;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_BYTE *)(v1 + 404) = 0;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 64) = -1;
  *(_BYTE *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 76) = 0x3F800000BF800000;
  *(_WORD *)(v0 + 84) = 0;
}

uint64_t SceneSegmentationProcessingAdapter.run(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  __int128 v26;

  v2 = *(_QWORD *)(result + 560);
  v3 = *(_QWORD *)(result + 568);
  v4 = *(_QWORD *)(result + 576);
  v5 = *(_QWORD *)(result + 720);
  v6 = *(_OWORD *)(result + 736);
  v7 = *(_QWORD *)(result + 752);
  v8 = *(_BYTE *)(result + 760);
  v9 = *(_BYTE *)(result + 772);
  v10 = *(unsigned __int8 *)(result + 773);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(result + 704);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(result + 712);
  *(_QWORD *)(v1 + 32) = v5;
  *(_OWORD *)(v1 + 48) = v6;
  *(_QWORD *)(v1 + 64) = v7;
  *(_BYTE *)(v1 + 72) = v8;
  *(_QWORD *)(v1 + 76) = *(_QWORD *)(result + 764);
  *(_BYTE *)(v1 + 84) = v9;
  *(_BYTE *)(v1 + 85) = v10;
  if (v10 == 1)
  {
    v11 = v1;
    *(_QWORD *)(v1 + 16) = v2;
    *(_QWORD *)(v1 + 24) = v3;
    v12 = v1 + 96;
    *(_QWORD *)(v11 + 32) = v4;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 16) >= *(_QWORD *)(v11 + 104))
    {
      result = swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v12 + 16))
      {
        __break(1u);
        return result;
      }
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_endAccess();
    }
    v13 = *(_QWORD *)(v11 + 16);
    v14 = *(_QWORD *)(v11 + 24);
    v15 = *(_QWORD *)(v11 + 32);
    v26 = *(_OWORD *)(v11 + 48);
    v16 = *(_QWORD *)(v11 + 64);
    v17 = *(_BYTE *)(v11 + 72);
    v18 = *(_QWORD *)(v11 + 76);
    v19 = *(_BYTE *)(v11 + 84);
    v20 = *(_BYTE *)(v11 + 85);
    swift_beginAccess();
    v21 = *(_QWORD **)(v11 + 96);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v11 + 96) = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      *(_QWORD *)v12 = v21;
    }
    v24 = v21[2];
    v23 = v21[3];
    if (v24 >= v23 >> 1)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
      *(_QWORD *)v12 = v21;
    }
    v21[2] = v24 + 1;
    v25 = &v21[10 * v24];
    v25[4] = v13;
    v25[5] = v14;
    v25[6] = v15;
    *((_OWORD *)v25 + 4) = v26;
    v25[10] = v16;
    *((_BYTE *)v25 + 88) = v17;
    *(_QWORD *)((char *)v25 + 92) = v18;
    *((_BYTE *)v25 + 100) = v19;
    *((_BYTE *)v25 + 101) = v20;
    return swift_endAccess();
  }
  return result;
}

uint64_t SceneSegmentationProcessingAdapter.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SceneSegmentationProcessingAdapter()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type CMTimeProtobuf and conformance CMTimeProtobuf()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf;
  if (!lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf)
  {
    v1 = type metadata accessor for CMTimeProtobuf(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CMTimeProtobuf, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf);
  }
  return result;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance CMTime@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t result;

  v3 = *v1;
  v4 = *((_DWORD *)v1 + 2);
  type metadata accessor for CMTimeProtobuf(0);
  result = UnknownStorage.init()();
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for DetectionUtils()
{
  return objc_opt_self();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(float *__dst, float *__src, unint64_t a3, float *a4)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t result;
  char *v23;
  float *v24;
  float *v25;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 112;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 112;
  v25 = __dst;
  v24 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -111)
    {
      v17 = 28 * v11;
      if (a4 != __src || &__src[v17] <= a4)
        memmove(a4, __src, 112 * v11);
      v18 = &v4[v17];
      v23 = (char *)&v4[v17];
      v25 = v6;
      if (v7 < v6 && v10 >= 112)
      {
        v19 = (float *)(a3 - 112);
        do
        {
          v20 = v19 + 28;
          if (*(v6 - 22) >= *(v18 - 22))
          {
            v23 = (char *)(v18 - 28);
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              memmove(v19, v18 - 28, 0x70uLL);
            v21 = v6;
            v18 -= 28;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 28;
            if (v20 != v6 || v19 >= v6)
              memmove(v19, v6 - 28, 0x70uLL);
            v25 = v6 - 28;
            if (v21 <= v7)
              break;
          }
          v19 -= 28;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -111)
  {
    v12 = 28 * v9;
    if (a4 != __dst || &__dst[v12] <= a4)
      memmove(a4, __dst, v12 * 4);
    v13 = &v4[v12];
    v23 = (char *)v13;
    if ((unint64_t)v6 < a3 && v8 >= 112)
    {
      v14 = v4;
      while (1)
      {
        if (v14[6] >= v6[6])
        {
          v4 = v14 + 28;
          v16 = v14;
          v15 = v6;
          if (v7 == v14)
          {
            v14 += 28;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v14 += 28;
          }
        }
        else
        {
          v15 = v6 + 28;
          v16 = v6;
          if (v7 == v6 && v7 < v15)
            goto LABEL_18;
        }
        memmove(v7, v16, 0x70uLL);
LABEL_18:
        v7 += 28;
        if (v14 < v13)
        {
          v6 = v15;
          if ((unint64_t)v15 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float v13;
  float v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = 0;
    v5 = a1 + 32;
    v6 = MEMORY[0x24BEE4AF8];
    do
    {
      if (v4 <= v2)
        v7 = v2;
      else
        v7 = v4;
      v8 = (__int128 *)(v5 + 112 * v4);
      for (i = v4; ; ++i)
      {
        if (v7 == i)
        {
          __break(1u);
          return;
        }
        v10 = v8[5];
        v28 = v8[4];
        v29[0] = v10;
        *(_OWORD *)((char *)v29 + 9) = *(__int128 *)((char *)v8 + 89);
        v11 = v8[1];
        v24 = *v8;
        v25 = v11;
        v12 = v8[3];
        v26 = v8[2];
        v27 = v12;
        v4 = i + 1;
        v13 = *((float *)&v28 + 1);
        v14 = (*(double (**)(void))(*(_QWORD *)a2 + 376))();
        if (v13 <= v14)
          break;
        v8 += 7;
        if (v2 == v4)
          return;
      }
      outlined retain of DetectionResult((uint64_t)&v24);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v30 = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v30;
      }
      v17 = *(_QWORD *)(v6 + 16);
      v16 = *(_QWORD *)(v6 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v6 = v30;
      }
      *(_QWORD *)(v6 + 16) = v17 + 1;
      v18 = (_OWORD *)(v6 + 112 * v17);
      v19 = v24;
      v20 = v26;
      v18[3] = v25;
      v18[4] = v20;
      v18[2] = v19;
      v21 = v27;
      v22 = v28;
      v23 = v29[0];
      *(_OWORD *)((char *)v18 + 121) = *(_OWORD *)((char *)v29 + 9);
      v18[6] = v22;
      v18[7] = v23;
      v18[5] = v21;
    }
    while (v2 - 1 != i);
  }
}

{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float v13;
  float v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = 0;
    v5 = a1 + 32;
    v6 = MEMORY[0x24BEE4AF8];
    do
    {
      if (v4 <= v2)
        v7 = v2;
      else
        v7 = v4;
      v8 = (__int128 *)(v5 + 112 * v4);
      for (i = v4; ; ++i)
      {
        if (v7 == i)
        {
          __break(1u);
          return;
        }
        v10 = v8[5];
        v28 = v8[4];
        v29[0] = v10;
        *(_OWORD *)((char *)v29 + 9) = *(__int128 *)((char *)v8 + 89);
        v11 = v8[1];
        v24 = *v8;
        v25 = v11;
        v12 = v8[3];
        v26 = v8[2];
        v27 = v12;
        v4 = i + 1;
        v13 = *((float *)&v28 + 1);
        v14 = (*(double (**)(void))(*(_QWORD *)a2 + 376))();
        if (v13 > v14)
          break;
        v8 += 7;
        if (v2 == v4)
          return;
      }
      outlined retain of DetectionResult((uint64_t)&v24);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v30 = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v30;
      }
      v17 = *(_QWORD *)(v6 + 16);
      v16 = *(_QWORD *)(v6 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v6 = v30;
      }
      *(_QWORD *)(v6 + 16) = v17 + 1;
      v18 = (_OWORD *)(v6 + 112 * v17);
      v19 = v24;
      v20 = v26;
      v18[3] = v25;
      v18[4] = v20;
      v18[2] = v19;
      v21 = v27;
      v22 = v28;
      v23 = v29[0];
      *(_OWORD *)((char *)v18 + 121) = *(_OWORD *)((char *)v29 + 9);
      v18[6] = v22;
      v18[7] = v23;
      v18[5] = v21;
    }
    while (v2 - 1 != i);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v33[40];
  uint64_t v34;

  v30 = type metadata accessor for HandDescriptor();
  v32 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v29 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 0;
    v26 = MEMORY[0x24BEE4AF8];
    v28 = a1 + 32;
    v27 = a2;
    v25 = v10;
    do
    {
      if (v11 <= v10)
        v12 = v10;
      else
        v12 = v11;
      v31 = v12;
      while (1)
      {
        if (v11 == v31)
        {
          __break(1u);
          return;
        }
        memcpy(v33, (const void *)(v28 + 320 * v11++), 0x138uLL);
        v13 = *(_QWORD *)(a2 + 16);
        if (v13)
          break;
        outlined retain of (TrackingInfo, Int)((uint64_t)v33);
LABEL_14:
        v18 = v29;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v29, 1, 1, v30);
        outlined destroy of Coordinate3DPB?(v18, &demangling cache variable for type metadata for HandDescriptor?);
        outlined release of TrackingInfo((uint64_t)v33);
        if (v11 == v10)
          return;
      }
      v14 = v33[2];
      v15 = v32;
      v16 = a2 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
      outlined retain of (TrackingInfo, Int)((uint64_t)v33);
      swift_bridgeObjectRetain();
      v17 = *(_QWORD *)(v15 + 72);
      while (1)
      {
        outlined init with copy of TrackingUpdateDataPB(v16, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (*((_QWORD *)v6 + 18) == v14)
          break;
        outlined destroy of HandDescriptor((uint64_t)v6);
        v16 += v17;
        if (!--v13)
        {
          a2 = v27;
          swift_bridgeObjectRelease();
          v10 = v25;
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
      v19 = v29;
      outlined init with take of Matrix2dPB((uint64_t)v6, v29, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v19, 0, 1, v30);
      outlined destroy of Coordinate3DPB?(v19, &demangling cache variable for type metadata for HandDescriptor?);
      v20 = v26;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v34;
      }
      v23 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v20 = v34;
      }
      *(_QWORD *)(v20 + 16) = v23 + 1;
      v26 = v20;
      memcpy((void *)(v20 + 320 * v23 + 32), v33, 0x138uLL);
      v10 = v25;
      a2 = v27;
    }
    while (v11 != v25);
  }
  else
  {
    v26 = MEMORY[0x24BEE4AF8];
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[40];
  uint64_t v34;

  v31 = a2;
  v30 = type metadata accessor for HandDescriptor();
  v3 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 0;
    v25 = MEMORY[0x24BEE4AF8];
    v28 = a1 + 32;
    v26 = v10;
    v27 = v3;
    for (i = v11; i != v12; v11 = i)
    {
      if (v12 <= v11)
        v13 = v11;
      else
        v13 = v12;
      v32 = v13;
      while (1)
      {
        if (v12 == v32)
        {
          __break(1u);
          return;
        }
        memcpy(v33, (const void *)(v28 + 320 * v12), 0x138uLL);
        v14 = *(_QWORD *)(*(_QWORD *)v31 + 16);
        if (v14)
        {
          v15 = v33[2];
          v16 = *(_QWORD *)v31
              + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
          outlined retain of (TrackingInfo, Int)((uint64_t)v33);
          swift_bridgeObjectRetain();
          v17 = *(_QWORD *)(v3 + 72);
          while (1)
          {
            outlined init with copy of TrackingUpdateDataPB(v16, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
            if (*((_QWORD *)v6 + 18) == v15)
              break;
            outlined destroy of HandDescriptor((uint64_t)v6);
            v16 += v17;
            if (!--v14)
            {
              v18 = 1;
              v10 = v26;
              v3 = v27;
              goto LABEL_15;
            }
          }
          v10 = v26;
          outlined init with take of Matrix2dPB((uint64_t)v6, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v18 = 0;
          v3 = v27;
        }
        else
        {
          outlined retain of (TrackingInfo, Int)((uint64_t)v33);
          swift_bridgeObjectRetain();
          v18 = 1;
        }
LABEL_15:
        ++v12;
        v19 = v30;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v10, v18, 1, v30);
        swift_bridgeObjectRelease();
        LODWORD(v19) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v19);
        outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for HandDescriptor?);
        if ((_DWORD)v19 != 1)
          break;
        outlined release of TrackingInfo((uint64_t)v33);
        if (v12 == i)
          return;
      }
      v20 = v25;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v34;
      }
      v23 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v20 = v34;
      }
      *(_QWORD *)(v20 + 16) = v23 + 1;
      v25 = v20;
      memcpy((void *)(v20 + 320 * v23 + 32), v33, 0x138uLL);
    }
  }
  else
  {
    v25 = MEMORY[0x24BEE4AF8];
  }
}

uint64_t specialized static DetectionUtils.GetDetectionCameraSet(inputImageStreams:)(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (a1 == 0x656D61436E69614DLL && a2 == 0xEB00000000736172
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v4 = &outlined read-only object #0 of static DetectionUtils.GetDetectionCameraSet(inputImageStreams:);
  }
  else if (a1 == 0x656D61436E776F44 && a2 == 0xEB00000000736172
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v4 = &outlined read-only object #1 of static DetectionUtils.GetDetectionCameraSet(inputImageStreams:);
  }
  else if (a1 == 0x6E776F4465646953 && a2 == 0xEC00000072696150
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v4 = &outlined read-only object #2 of static DetectionUtils.GetDetectionCameraSet(inputImageStreams:);
  }
  else
  {
    v4 = &outlined read-only object #3 of static DetectionUtils.GetDetectionCameraSet(inputImageStreams:);
    if ((a1 != 0x43636972656E6547 || a2 != 0xED00006172656D61)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v4 = &outlined read-only object #4 of static DetectionUtils.GetDetectionCameraSet(inputImageStreams:);
    }
  }
  return specialized Set.init<A>(_:)((uint64_t)v4);
}

uint64_t specialized static DetectionUtils.GetRoundRobinCameraSet(inputImageStreams:)(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (a1 == 0x656D61436E69614DLL && a2 == 0xEB00000000736172
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v4 = &outlined read-only object #0 of static DetectionUtils.GetRoundRobinCameraSet(inputImageStreams:);
  }
  else if (a1 == 0x656D61436E776F44 && a2 == 0xEB00000000736172
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v4 = &outlined read-only object #1 of static DetectionUtils.GetRoundRobinCameraSet(inputImageStreams:);
  }
  else if (a1 == 0x6E776F4465646953 && a2 == 0xEC00000072696150
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v4 = &outlined read-only object #2 of static DetectionUtils.GetRoundRobinCameraSet(inputImageStreams:);
  }
  else if (a1 == 0x6E776F4465646953 && a2 == 0xEB0000000077614ALL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v4 = &outlined read-only object #3 of static DetectionUtils.GetRoundRobinCameraSet(inputImageStreams:);
  }
  else
  {
    v4 = &outlined read-only object #4 of static DetectionUtils.GetRoundRobinCameraSet(inputImageStreams:);
    if ((a1 != 0x43636972656E6547 || a2 != 0xED00006172656D61)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v4 = &outlined read-only object #5 of static DetectionUtils.GetRoundRobinCameraSet(inputImageStreams:);
    }
  }
  return specialized Set.init<A>(_:)((uint64_t)v4);
}

uint64_t specialized static DetectionUtils.adjustOutputForScaledImage(scalingInfo:center2D:size2D:keypoints:)(uint64_t result, _QWORD *a2, _QWORD **a3, _QWORD **a4, float32x2_t a5, float32x2_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  if ((result & 1) != 0)
  {
    v6 = a2;
    v7 = (_QWORD *)*a2;
    v8 = *(_QWORD *)(*a2 + 16);
    if (v8)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_27:
        v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      v23 = *a3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      v13 = *a4;
      v21 = a3;
      v22 = v6;
      v20 = a4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
      v14 = 0;
      a6 = vdiv_f32(a6, a5);
      a3 = (_QWORD **)(v7 + 4);
      a4 = (_QWORD **)(v23 + 4);
      v6 = v13 + 4;
      do
      {
        if (v14 == v8)
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        if (v14 >= v7[2])
          goto LABEL_23;
        v15 = v14;
        a3[v14] = (_QWORD *)vmul_f32(a6, (float32x2_t)a3[v14]);
        if (v14 >= v23[2])
          goto LABEL_24;
        a4[v14] = (_QWORD *)vmul_f32(a6, (float32x2_t)a4[v14]);
        if (v14 >= v13[2])
          goto LABEL_25;
        v16 = (_QWORD *)v6[v14];
        v17 = v16[2];
        swift_bridgeObjectRetain();
        if (v17)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
          for (i = 0; i != v17; ++i)
            v16[i + 4] = vmul_f32(a6, (float32x2_t)v16[i + 4]);
        }
        v19 = v13[2];
        swift_bridgeObjectRetain();
        if (v14 >= v19)
          goto LABEL_26;
        ++v14;
        v6[v15] = v16;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      while (v14 != v8);
      *v20 = v13;
      *v21 = v23;
      *v22 = v7;
    }
  }
  return result;
}

_QWORD *specialized static DetectionUtils.splitLeftAndRightHand(_:_:)(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v5 = v2 - 1;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = 32;
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v9 = *(_OWORD *)(a1 + v7 + 80);
    v29 = *(_OWORD *)(a1 + v7 + 64);
    v30[0] = v9;
    *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a1 + v7 + 89);
    v10 = *(_OWORD *)(a1 + v7 + 16);
    v25 = *(_OWORD *)(a1 + v7);
    v26 = v10;
    v11 = *(_OWORD *)(a1 + v7 + 48);
    v27 = *(_OWORD *)(a1 + v7 + 32);
    v28 = v11;
    v12 = *((float *)&v26 + 3);
    outlined retain of DetectionResult((uint64_t)&v25);
    if (v12 <= a2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      v15 = v6[2];
      v17 = v6[3];
      v16 = v15 + 1;
      if (v15 >= v17 >> 1)
      {
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v15 + 1, 1, v6);
        v6 = v13;
      }
      else
      {
        v13 = v6;
      }
    }
    else
    {
      v13 = (swift_isUniquelyReferenced_nonNull_native() & 1) != 0
          ? v8
          : specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v15 = v13[2];
      v14 = v13[3];
      v16 = v15 + 1;
      if (v15 >= v14 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
      v8 = v13;
    }
    v13[2] = v16;
    v18 = &v13[14 * v15];
    v19 = v25;
    v20 = v27;
    v18[3] = v26;
    v18[4] = v20;
    v18[2] = v19;
    v21 = v28;
    v22 = v29;
    v23 = v30[0];
    *(_OWORD *)((char *)v18 + 121) = *(_OWORD *)((char *)v30 + 9);
    v18[6] = v22;
    v18[7] = v23;
    v18[5] = v21;
    if (!v5)
      break;
    --v5;
    v7 += 112;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized static DetectionUtils.removeCandidate(handCandidates:belowThreshold:)(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v5 = v2 - 1;
  v6 = MEMORY[0x24BEE4AF8];
  for (i = 32; ; i += 112)
  {
    v8 = *(_OWORD *)(a1 + i + 80);
    v25 = *(_OWORD *)(a1 + i + 64);
    v26[0] = v8;
    *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)(a1 + i + 89);
    v9 = *(_OWORD *)(a1 + i + 16);
    v21 = *(_OWORD *)(a1 + i);
    v22 = v9;
    v10 = *(_OWORD *)(a1 + i + 48);
    v23 = *(_OWORD *)(a1 + i + 32);
    v24 = v10;
    if (*((float *)&v22 + 2) > a2)
    {
      outlined retain of DetectionResult((uint64_t)&v21);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v27 = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v27;
      }
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v6 = v27;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = (_OWORD *)(v6 + 112 * v13);
      v15 = v21;
      v16 = v23;
      v14[3] = v22;
      v14[4] = v16;
      v14[2] = v15;
      v17 = v24;
      v18 = v25;
      v19 = v26[0];
      *(_OWORD *)((char *)v14 + 121) = *(_OWORD *)((char *)v26 + 9);
      v14[6] = v18;
      v14[7] = v19;
      v14[5] = v17;
    }
    if (!v5)
      break;
    --v5;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized static DetectionUtils.recalculateBoundingBoxFromKeyPoints(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v30;
  int v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  __int16 v39;
  char v40;
  __int16 v41;
  char v42;
  __int16 v43;
  char v44;
  _BYTE v45[7];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[25];
  uint64_t v52;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v52 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v52;
    v4 = (__int128 *)(a1 + 32);
    do
    {
      *(_OWORD *)&v51[9] = *(__int128 *)((char *)v4 + 89);
      v5 = v4[5];
      v50 = v4[4];
      *(_OWORD *)v51 = v5;
      v6 = v4[3];
      v48 = v4[2];
      v49 = v6;
      v7 = v4[1];
      v46 = *v4;
      v47 = v7;
      v8 = (_QWORD *)v7;
      if (*(_QWORD *)(v7 + 16) == 4)
      {
        outlined retain of DetectionResult((uint64_t)&v46);
        v9 = specialized static HandsKitUtils.calculate2DHandCenter(_:)(v8);
        v10 = *((_QWORD *)&v46 + 1);
        v11 = *((_QWORD *)&v47 + 1);
        v12 = v48;
        v13 = v49;
        v14 = BYTE8(v49);
        v15 = HIDWORD(v49);
        v16 = v50;
        v17 = DWORD1(v50);
        v18 = BYTE8(v50);
        v19 = HIDWORD(v50);
        v20 = *(_QWORD *)v51;
        v21 = *(_DWORD *)&v51[8];
        v22 = v51[12];
        v23 = *(_QWORD *)&v51[16];
        v24 = v51[24];
        v45[0] = BYTE8(v48);
        LOBYTE(v43) = BYTE8(v49);
        LOBYTE(v41) = v50;
        LOBYTE(v39) = v51[12];
        v25 = BYTE8(v48);
      }
      else
      {
        outlined retain of DetectionResult((uint64_t)&v46);
        v10 = *((_QWORD *)&v46 + 1);
        v9 = (float32x2_t)v46;
        v11 = *((_QWORD *)&v47 + 1);
        v8 = (_QWORD *)v47;
        v12 = v48;
        v25 = BYTE8(v48);
        *(_DWORD *)v45 = *(_DWORD *)((char *)&v48 + 9);
        *(_DWORD *)&v45[3] = HIDWORD(v48);
        v13 = v49;
        v14 = BYTE8(v49);
        v43 = *(_WORD *)((char *)&v49 + 9);
        v44 = BYTE11(v49);
        v15 = HIDWORD(v49);
        v16 = v50;
        v42 = BYTE3(v50);
        v41 = *(_WORD *)((char *)&v50 + 1);
        v17 = DWORD1(v50);
        v18 = BYTE8(v50);
        v40 = BYTE11(v50);
        v39 = *(_WORD *)((char *)&v50 + 9);
        v19 = HIDWORD(v50);
        v20 = *(_QWORD *)v51;
        v21 = *(_DWORD *)&v51[8];
        v22 = v51[12];
        v38 = v51[15];
        v37 = *(_WORD *)&v51[13];
        v23 = *(_QWORD *)&v51[16];
        v24 = v51[24];
      }
      v52 = v2;
      v27 = *(_QWORD *)(v2 + 16);
      v26 = *(_QWORD *)(v2 + 24);
      if (v27 >= v26 >> 1)
      {
        v35 = v13;
        v36 = v12;
        v33 = v18;
        v34 = v15;
        v32 = v20;
        v30 = v25;
        v31 = v21;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v25 = v30;
        v21 = v31;
        v20 = v32;
        v18 = v33;
        v15 = v34;
        v13 = v35;
        v12 = v36;
        v2 = v52;
      }
      *(_QWORD *)(v2 + 16) = v27 + 1;
      v28 = v2 + 112 * v27;
      *(float32x2_t *)(v28 + 32) = v9;
      *(_QWORD *)(v28 + 40) = v10;
      *(_QWORD *)(v28 + 48) = v8;
      *(_QWORD *)(v28 + 56) = v11;
      *(_QWORD *)(v28 + 64) = v12;
      *(_BYTE *)(v28 + 72) = v25;
      *(_DWORD *)(v28 + 73) = *(_DWORD *)v45;
      *(_DWORD *)(v28 + 76) = *(_DWORD *)&v45[3];
      *(_QWORD *)(v28 + 80) = v13;
      *(_BYTE *)(v28 + 88) = v14;
      *(_WORD *)(v28 + 89) = v43;
      *(_BYTE *)(v28 + 91) = v44;
      *(_DWORD *)(v28 + 92) = v15;
      *(_BYTE *)(v28 + 96) = v16;
      *(_BYTE *)(v28 + 99) = v42;
      *(_WORD *)(v28 + 97) = v41;
      *(_DWORD *)(v28 + 100) = v17;
      *(_BYTE *)(v28 + 104) = v18;
      *(_WORD *)(v28 + 105) = v39;
      *(_BYTE *)(v28 + 107) = v40;
      *(_DWORD *)(v28 + 108) = v19;
      *(_QWORD *)(v28 + 112) = v20;
      *(_DWORD *)(v28 + 120) = v21;
      *(_BYTE *)(v28 + 124) = v22;
      *(_WORD *)(v28 + 125) = v37;
      *(_BYTE *)(v28 + 127) = v38;
      *(_QWORD *)(v28 + 128) = v23;
      *(_BYTE *)(v28 + 136) = v24;
      v4 += 7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized static DetectionUtils.findBestHandCandidates(_:_:_:)(unint64_t a1)
{
  unint64_t v1;
  __int128 *v2;
  float v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t i;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  int v60;
  char v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v71;
  __int16 v72;
  char v73;
  char v74;
  __int16 v75;
  char v76;
  __int16 v77;
  char v78;
  char v79;
  char v80;
  __int16 v81;
  char v82;
  char v83;
  char v84;
  _BYTE v85[7];
  char v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[25];
  uint64_t v94;
  _QWORD *v95;

  v1 = a1;
  v2 = &v88;
  v3 = (*(double (**)(unint64_t))(*(_QWORD *)a1 + 328))(a1);
  v4 = swift_bridgeObjectRetain();
  v5 = (_QWORD *)specialized static DetectionUtils.removeCandidate(handCandidates:belowThreshold:)(v4, v3);
  swift_bridgeObjectRelease();
  v95 = v5;
  specialized MutableCollection<>.sort(by:)(&v95);
  v6 = v95;
  if (v95[2] >= 2uLL)
    v7 = 2;
  else
    v7 = v95[2];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  swift_release();
  if (v9 != v7)
    goto LABEL_31;
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  while (1)
  {
    v11 = swift_bridgeObjectRelease();
    *((_QWORD *)v2 + 17) = v10;
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(v10 + 16) != 2)
      break;
    v71 = v1;
    v12 = *(float *)(v10 + 100);
    v13 = *(float *)(v10 + 212);
    *((_QWORD *)v2 + 15) = MEMORY[0x24BEE4AF8];
    swift_retain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2, 0);
    v14 = *(_OWORD *)(v10 + 32);
    v15 = *(_OWORD *)(v10 + 48);
    v16 = *(_OWORD *)(v10 + 64);
    v17 = *(_OWORD *)(v10 + 80);
    v18 = *(_OWORD *)(v10 + 96);
    v19 = *(_OWORD *)(v10 + 112);
    *(_OWORD *)&v93[9] = *(_OWORD *)(v10 + 121);
    v92 = v18;
    *(_OWORD *)v93 = v19;
    v1 = v13 >= v12;
    v20 = *((_QWORD *)v2 + 15);
    v21 = 112;
    if (v13 < v12)
      v21 = 0;
    v90 = v16;
    v91 = v17;
    v88 = v14;
    v89 = v15;
    if (*(_QWORD *)(v10 + 16) > v1)
    {
      LOBYTE(v7) = 0;
      v22 = vabds_f32(v12, v13);
      v2 = (__int128 *)(v10 + 32 + v21);
      while (1)
      {
        v23 = *((_DWORD *)v2 + 15);
        v24 = *((_BYTE *)v2 + 64);
        v25 = *(_QWORD *)v2;
        outlined retain of DetectionResult((uint64_t)&v88);
        v94 = v20;
        v27 = *(_QWORD *)(v20 + 16);
        v26 = *(_QWORD *)(v20 + 24);
        v6 = (_QWORD *)(v27 + 1);
        if (v27 >= v26 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          v20 = v94;
        }
        v28 = v93[24];
        v29 = *(_QWORD *)v93;
        v30 = BYTE8(v92);
        v31 = DWORD1(v92);
        v32 = HIDWORD(v91);
        v33 = v91;
        v34 = v90;
        v35 = v88;
        v36 = v89;
        v86 = BYTE8(v90);
        v83 = BYTE8(v91);
        v79 = v92;
        v37 = v20 + 112 * v27;
        v38 = *((_QWORD *)&v89 + 1);
        *(_QWORD *)(v20 + 16) = v6;
        *(_OWORD *)(v37 + 32) = v35;
        *(_QWORD *)(v37 + 48) = v36;
        *(_QWORD *)(v37 + 56) = v38;
        *(_QWORD *)(v37 + 64) = v34;
        *(_BYTE *)(v37 + 72) = v86;
        *(_DWORD *)(v37 + 76) = *(_DWORD *)&v85[3];
        *(_DWORD *)(v37 + 73) = *(_DWORD *)v85;
        *(_QWORD *)(v37 + 80) = v33;
        *(_BYTE *)(v37 + 88) = v83;
        *(_BYTE *)(v37 + 91) = v82;
        *(_WORD *)(v37 + 89) = v81;
        *(_DWORD *)(v37 + 92) = v32;
        *(_BYTE *)(v37 + 96) = v79;
        *(_BYTE *)(v37 + 99) = v78;
        *(_WORD *)(v37 + 97) = v77;
        *(_DWORD *)(v37 + 100) = v31;
        *(_BYTE *)(v37 + 104) = v30;
        *(_WORD *)(v37 + 105) = v75;
        *(_BYTE *)(v37 + 107) = v76;
        *(float *)(v37 + 108) = v22;
        *(_QWORD *)(v37 + 112) = v29;
        *(_DWORD *)(v37 + 120) = v23;
        *(_BYTE *)(v37 + 124) = v24;
        *(_BYTE *)(v37 + 127) = v73;
        *(_WORD *)(v37 + 125) = v72;
        *(_QWORD *)(v37 + 128) = v25;
        *(_BYTE *)(v37 + 136) = v28;
        if ((v7 & 1) != 0)
          break;
        *(_OWORD *)&v93[9] = *(_OWORD *)(v10 + 233);
        v39 = *(_OWORD *)(v10 + 224);
        v92 = *(_OWORD *)(v10 + 208);
        *(_OWORD *)v93 = v39;
        v40 = *(_OWORD *)(v10 + 192);
        v90 = *(_OWORD *)(v10 + 176);
        v91 = v40;
        v41 = *(_OWORD *)(v10 + 160);
        v88 = *(_OWORD *)(v10 + 144);
        v89 = v41;
        v7 = 1;
        if (*(_QWORD *)(v10 + 16) <= v1)
          goto LABEL_30;
      }
      v11 = swift_release_n();
      v2 = &v88;
      v1 = v71;
      v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRelease();
    v10 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v6, (uint64_t)(v6 + 4), 0, (2 * v7) | 1);
  }
  v42 = (*(double (**)(uint64_t))(*(_QWORD *)v1 + 352))(v11);
  v43 = swift_bridgeObjectRetain();
  v44 = specialized static DetectionUtils.removeCandidate(handCandidates:belowThreshold:)(v43, v42);
  swift_bridgeObjectRelease_n();
  v45 = *(_QWORD *)(v44 + 16);
  if (v45)
  {
    *((_QWORD *)v2 + 15) = v6;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0);
    v46 = *((_QWORD *)v2 + 15);
    v47 = v45 - 1;
    for (i = 32; ; i += 112)
    {
      v49 = *(_OWORD *)(v44 + i);
      v50 = *(_OWORD *)(v44 + i + 32);
      v89 = *(_OWORD *)(v44 + i + 16);
      v90 = v50;
      v51 = *(_OWORD *)(v44 + i + 48);
      v52 = *(_OWORD *)(v44 + i + 64);
      v53 = *(_OWORD *)(v44 + i + 80);
      *(_OWORD *)&v93[9] = *(_OWORD *)(v44 + i + 89);
      v92 = v52;
      *(_OWORD *)v93 = v53;
      v91 = v51;
      v88 = v49;
      v54 = *(_QWORD *)(v44 + 16);
      outlined retain of DetectionResult((uint64_t)&v88);
      *((_QWORD *)v2 + 15) = v46;
      v56 = *(_QWORD *)(v46 + 16);
      v55 = *(_QWORD *)(v46 + 24);
      if (v56 >= v55 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        v46 = *((_QWORD *)v2 + 15);
      }
      v57 = v93[24];
      v58 = *((_QWORD *)v2 + 12);
      v59 = *(_DWORD *)&v93[8];
      v60 = HIDWORD(v92);
      v61 = BYTE8(v92);
      v62 = DWORD1(v92);
      v63 = HIDWORD(v91);
      v64 = v91;
      v65 = v90;
      v66 = v88;
      v67 = v89;
      v87 = BYTE8(v90);
      v84 = BYTE8(v91);
      v80 = v92;
      v74 = v93[12];
      v68 = v46 + 112 * v56;
      v69 = *((_QWORD *)&v89 + 1);
      *(_QWORD *)(v46 + 16) = v56 + 1;
      *(_OWORD *)(v68 + 32) = v66;
      *(_QWORD *)(v68 + 48) = v67;
      *(_QWORD *)(v68 + 56) = v69;
      *(_QWORD *)(v68 + 64) = v65;
      *(_BYTE *)(v68 + 72) = v87;
      *(_DWORD *)(v68 + 73) = *(_DWORD *)v85;
      *(_DWORD *)(v68 + 76) = *(_DWORD *)&v85[3];
      *(_QWORD *)(v68 + 80) = v64;
      *(_BYTE *)(v68 + 88) = v84;
      *(_WORD *)(v68 + 89) = v81;
      *(_BYTE *)(v68 + 91) = v82;
      *(_DWORD *)(v68 + 92) = v63;
      *(_BYTE *)(v68 + 96) = v80;
      *(_WORD *)(v68 + 97) = v77;
      *(_BYTE *)(v68 + 99) = v78;
      *(_DWORD *)(v68 + 100) = v62;
      *(_BYTE *)(v68 + 104) = v61;
      *(_BYTE *)(v68 + 107) = v76;
      *(_WORD *)(v68 + 105) = v75;
      *(_DWORD *)(v68 + 108) = v60;
      *(_QWORD *)(v68 + 112) = v54;
      *(_DWORD *)(v68 + 120) = v59;
      *(_BYTE *)(v68 + 124) = v74;
      *(_WORD *)(v68 + 125) = v72;
      *(_BYTE *)(v68 + 127) = v73;
      *(_QWORD *)(v68 + 128) = v58;
      *(_BYTE *)(v68 + 136) = v57;
      if (!v47)
        break;
      --v47;
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v46;
}

_OWORD *specialized static DetectionUtils.pickOverUvO(_:_:_:)(_QWORD *a1, _QWORD **a2, unint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD *result;
  _OWORD *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  float v50;
  float v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  _OWORD v68[5];
  _BYTE v69[25];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[3];

  swift_retain();
  v10 = swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)(v10, a3);
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = swift_release();
  v14 = *(__int128 **)(v12 + 16);
  if (v14 != (__int128 *)a1[2])
  {
    swift_retain();
    v15 = swift_bridgeObjectRetain();
    specialized _ArrayProtocol.filter(_:)(v15, a3);
    v17 = v16;
    swift_bridgeObjectRelease();
    swift_release();
    a1 = a2;
    v13 = specialized Array.append<A>(contentsOf:)(v17);
  }
  if (v14 != (__int128 *)2)
    return (_OWORD *)v12;
  v18 = *(_QWORD *)(v12 + 16);
  if (!v18)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v18 == 1)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
    goto LABEL_10;
  }
  v14 = &v70;
  a4 = v12 + 32;
  v4 = *(float *)(v12 + 100);
  v5 = *(float *)(v12 + 212);
  v19 = (*(double (**)(uint64_t))(*(_QWORD *)a3 + 400))(v13);
  if (vabds_f32(v4, v5) <= v19)
  {
    v50 = *(float *)(v12 + 56);
    v51 = *(float *)(v12 + 168);
    if (vabds_f32(v50, v51) <= 0.0001)
      return (_OWORD *)v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionResult>);
    v52 = (_OWORD *)swift_allocObject();
    v37 = v52;
    v53 = 112;
    if (v50 >= v51)
      v53 = 0;
    v54 = (__int128 *)(a4 + v53);
    v55 = *v54;
    v56 = v54[2];
    v71 = v54[1];
    v72 = v56;
    v70 = v55;
    v57 = v54[3];
    v58 = v54[4];
    v59 = v54[5];
    *(_OWORD *)((char *)v75 + 9) = *(__int128 *)((char *)v54 + 89);
    v74 = v58;
    v75[0] = v59;
    v73 = v57;
    v60 = *v54;
    v61 = v54[2];
    v62 = v54[3];
    v52[3] = v54[1];
    v52[4] = v61;
    v52[1] = xmmword_23D9A70A0;
    v52[2] = v60;
    v63 = v54[4];
    v64 = v54[5];
    *(_OWORD *)((char *)v52 + 121) = *(__int128 *)((char *)v54 + 89);
    v52[6] = v63;
    v52[7] = v64;
    v52[5] = v62;
    v49 = &v70;
LABEL_20:
    outlined retain of DetectionResult((uint64_t)v49);
    swift_bridgeObjectRelease();
    return v37;
  }
  a3 = v4 >= v5;
  v20 = 112;
  if (v4 >= v5)
    v20 = 0;
  v21 = (__int128 *)(a4 + v20);
  v22 = *v21;
  v23 = v21[2];
  v71 = v21[1];
  v72 = v23;
  v70 = v22;
  v24 = v21[3];
  v25 = v21[4];
  v26 = v21[5];
  *(_OWORD *)((char *)v75 + 9) = *(__int128 *)((char *)v21 + 89);
  v74 = v25;
  v75[0] = v26;
  v73 = v24;
  a1 = *a2;
  outlined retain of DetectionResult((uint64_t)&v70);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_24;
LABEL_10:
  v27 = a1[2];
  v28 = a1[3];
  v29 = v27 + 1;
  if (v27 >= v28 >> 1)
  {
    v65 = a1;
    v66 = a1[2];
    v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v27 + 1, 1, v65);
    v27 = v66;
    a1 = v67;
  }
  a1[2] = v29;
  v30 = &a1[14 * v27];
  v31 = v70;
  v32 = v72;
  v30[3] = v71;
  v30[4] = v32;
  v30[2] = v31;
  v33 = v73;
  v34 = v74;
  v35 = v75[0];
  *(_OWORD *)((char *)v30 + 121) = *(__int128 *)((char *)v14 + 89);
  v30[6] = v34;
  v30[7] = v35;
  v30[5] = v33;
  *a2 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionResult>);
  result = (_OWORD *)swift_allocObject();
  result[1] = xmmword_23D9A70A0;
  if (*(_QWORD *)(v12 + 16) > a3)
  {
    v37 = result;
    v38 = 112;
    if (v4 < v5)
      v38 = 0;
    v39 = (__int128 *)(a4 + v38);
    v40 = *v39;
    v41 = v39[2];
    v68[1] = v39[1];
    v68[2] = v41;
    v68[0] = v40;
    v42 = v39[3];
    v43 = v39[4];
    v44 = v39[5];
    *(_OWORD *)&v69[9] = *(__int128 *)((char *)v39 + 89);
    v68[4] = v43;
    *(_OWORD *)v69 = v44;
    v68[3] = v42;
    v45 = v39[1];
    result[2] = *v39;
    result[3] = v45;
    v46 = v39[2];
    v47 = v39[3];
    *(_OWORD *)((char *)result + 121) = *(__int128 *)((char *)v39 + 89);
    v48 = v39[5];
    result[6] = v39[4];
    result[7] = v48;
    result[4] = v46;
    result[5] = v47;
    v49 = v68;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t specialized static DetectionUtils.topSelectionByUvO(handCandidates:modelParams:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  _QWORD *v55;
  _OWORD *v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  _OWORD *v60;
  uint64_t result;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[2];
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;

  v70 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v71 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = MEMORY[0x24BEE4B00];
  v69 = MEMORY[0x24BEE4B00];
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_20;
  v7 = (_OWORD *)swift_bridgeObjectRetain();
  v8 = v7[5];
  v65 = v7[4];
  v66 = v8;
  v9 = v7[7];
  v67 = v7[6];
  v68[0] = v9;
  *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)((char *)v7 + 121);
  v10 = v7[3];
  v62 = v7;
  v63 = v7[2];
  v64 = v10;
  v11 = v65;
  v12 = BYTE8(v65);
  outlined retain of DetectionResult((uint64_t)&v63);
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  v15 = *(_QWORD *)(v5 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v18 = v13;
  v19 = 9;
  while (1)
  {
    if (*(_QWORD *)(v5 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, 1);
      v5 = v69;
      v20 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
      if ((v18 & 1) != (v21 & 1))
        goto LABEL_45;
      v14 = v20;
    }
    if ((v18 & 1) == 0)
      break;
    v22 = *(_QWORD *)(v5 + 56);
    v23 = *(_QWORD **)(v22 + 8 * v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v22 + 8 * v14) = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
      *(_QWORD *)(v22 + 8 * v14) = v23;
    }
    v26 = v23[2];
    v25 = v23[3];
    if (v26 >= v25 >> 1)
    {
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
      *(_QWORD *)(v22 + 8 * v14) = v23;
    }
    v23[2] = v26 + 1;
    v27 = &v23[14 * v26];
    v28 = v63;
    v29 = v65;
    v27[3] = v64;
    v27[4] = v29;
    v27[2] = v28;
    v30 = v66;
    v31 = v67;
    v32 = v68[0];
    *(_OWORD *)((char *)v27 + 121) = *(_OWORD *)((char *)v68 + 9);
    v27[6] = v31;
    v27[7] = v32;
    v27[5] = v30;
    if (!--v6)
      goto LABEL_19;
LABEL_16:
    v43 = v62[v19 + 3];
    v65 = v62[v19 + 2];
    v66 = v43;
    v44 = v62[v19 + 5];
    v67 = v62[v19 + 4];
    v68[0] = v44;
    *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)((char *)&v62[v19 + 5] + 9);
    v45 = v62[v19 + 1];
    v63 = v62[v19];
    v64 = v45;
    v11 = v65;
    v12 = BYTE8(v65);
    outlined retain of DetectionResult((uint64_t)&v63);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
    v18 = v46;
    v47 = *(_QWORD *)(v5 + 16);
    v48 = (v46 & 1) == 0;
    v19 += 7;
    v17 = v47 + v48;
    if (__OFADD__(v47, v48))
      goto LABEL_41;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionResult>);
  v33 = (_OWORD *)swift_allocObject();
  v34 = v67;
  v35 = v68[0];
  v36 = v65;
  v33[5] = v66;
  v33[6] = v34;
  v33[7] = v35;
  *(_OWORD *)((char *)v33 + 121) = *(_OWORD *)((char *)v68 + 9);
  v37 = v63;
  v38 = v64;
  v33[1] = xmmword_23D9A70A0;
  v33[2] = v37;
  v33[3] = v38;
  v33[4] = v36;
  *(_QWORD *)(v5 + 8 * (v14 >> 6) + 64) |= 1 << v14;
  v39 = *(_QWORD *)(v5 + 48) + 16 * v14;
  *(_QWORD *)v39 = v11;
  *(_BYTE *)(v39 + 8) = v12 & 1;
  *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14) = v33;
  v40 = *(_QWORD *)(v5 + 16);
  v41 = __OFADD__(v40, 1);
  v42 = v40 + 1;
  if (v41)
    goto LABEL_43;
  *(_QWORD *)(v5 + 16) = v42;
  if (--v6)
    goto LABEL_16;
LABEL_19:
  swift_bridgeObjectRelease();
LABEL_20:
  v49 = 0;
  v50 = v5 + 64;
  v51 = 1 << *(_BYTE *)(v5 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & *(_QWORD *)(v5 + 64);
  v54 = (unint64_t)(v51 + 63) >> 6;
  while (2)
  {
    if (v53)
    {
      v53 &= v53 - 1;
LABEL_24:
      v55 = (_QWORD *)swift_bridgeObjectRetain();
      v56 = specialized static DetectionUtils.pickOverUvO(_:_:_:)(v55, &v70, a2, a3);
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)((uint64_t)v56);
      continue;
    }
    break;
  }
  v57 = v49 + 1;
  if (__OFADD__(v49, 1))
    goto LABEL_42;
  if (v57 >= v54)
  {
LABEL_40:
    swift_release();
    v60 = specialized static DetectionUtils.pickOverUvO(_:_:_:)(v71, &v70, a2, a3);
    swift_bridgeObjectRelease();
    return (uint64_t)v60;
  }
  v58 = *(_QWORD *)(v50 + 8 * v57);
  ++v49;
  if (v58)
    goto LABEL_39;
  v49 = v57 + 1;
  if (v57 + 1 >= v54)
    goto LABEL_40;
  v58 = *(_QWORD *)(v50 + 8 * v49);
  if (v58)
    goto LABEL_39;
  v49 = v57 + 2;
  if (v57 + 2 >= v54)
    goto LABEL_40;
  v58 = *(_QWORD *)(v50 + 8 * v49);
  if (v58)
  {
LABEL_39:
    v53 = (v58 - 1) & v58;
    goto LABEL_24;
  }
  v59 = v57 + 3;
  if (v59 >= v54)
    goto LABEL_40;
  v58 = *(_QWORD *)(v50 + 8 * v59);
  if (v58)
  {
    v49 = v59;
    goto LABEL_39;
  }
  while (1)
  {
    v49 = v59 + 1;
    if (__OFADD__(v59, 1))
      break;
    if (v49 >= v54)
      goto LABEL_40;
    v58 = *(_QWORD *)(v50 + 8 * v49);
    ++v59;
    if (v58)
      goto LABEL_39;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t SSDDetection2DComputePipeline.getDepthOutput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  int v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v9);
  v2 = v10;
  v3 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v4 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 160))(0x747065645F736D6ELL, 0xED00006F76755F68, v2, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  if (v1)
    return v2;
  v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4, 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_23D9A7080;
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = result;
  *(_DWORD *)(result + 32) = *(_DWORD *)(v5 + 32);
  if (v7 == 1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(_DWORD *)(result + 36) = *(_DWORD *)(v5 + 36);
  if (v7 < 3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(result + 40) = *(_DWORD *)(v5 + 40);
  if (v7 != 3)
  {
    v8 = *(_DWORD *)(v5 + 44);
    swift_release();
    *(_DWORD *)(v2 + 44) = v8;
    return v2;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SSDDetection2DComputePipeline.getUvOOutput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  int v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v9);
  v2 = v10;
  v3 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v4 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 160))(0x747065645F736D6ELL, 0xED00006F76755F68, v2, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  if (v1)
    return v2;
  v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4, 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_23D9A7080;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 < 5)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = result;
  *(_DWORD *)(result + 32) = *(_DWORD *)(v5 + 48);
  if (v7 == 5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(_DWORD *)(result + 36) = *(_DWORD *)(v5 + 52);
  if (v7 < 7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(result + 40) = *(_DWORD *)(v5 + 56);
  if (v7 != 7)
  {
    v8 = *(_DWORD *)(v5 + 60);
    swift_release();
    *(_DWORD *)(v2 + 44) = v8;
    return v2;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SSDDetection2DComputePipeline.getNMSConfidenceOutput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  int v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v9);
  v2 = v10;
  v3 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v4 = (char *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 160))(0xD00000000000001CLL, 0x800000023D9C3D50, v2, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  if (v1)
    return v2;
  v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4, 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_23D9A7080;
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = result;
  *(_DWORD *)(result + 32) = *(_DWORD *)(v5 + 32);
  if (v7 == 1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(_DWORD *)(result + 36) = *(_DWORD *)(v5 + 36);
  if (v7 < 3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(result + 40) = *(_DWORD *)(v5 + 40);
  if (v7 != 3)
  {
    v8 = *(_DWORD *)(v5 + 44);
    swift_release();
    *(_DWORD *)(v2 + 44) = v8;
    return v2;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SSDDetection2DComputePipeline.getChiralityScoreOutput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  int v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v9);
  v2 = v10;
  v3 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v4 = (char *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 160))(0xD00000000000001CLL, 0x800000023D9C3D50, v2, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  if (v1)
    return v2;
  v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4, 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_23D9A7080;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 < 5)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = result;
  *(_DWORD *)(result + 32) = *(_DWORD *)(v5 + 48);
  if (v7 == 5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(_DWORD *)(result + 36) = *(_DWORD *)(v5 + 52);
  if (v7 < 7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(result + 40) = *(_DWORD *)(v5 + 56);
  if (v7 != 7)
  {
    v8 = *(_DWORD *)(v5 + 60);
    swift_release();
    *(_DWORD *)(v2 + 44) = v8;
    return v2;
  }
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *SSDDetection2DComputePipeline.getKeyPointsOutput()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v36);
  v5 = v37;
  v6 = v38;
  __swift_project_boxed_opaque_existential_1(v36, (uint64_t)v37);
  v7 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD *, uint64_t))(v6 + 160))(0x7079656B5F736D6ELL, 0xED000073746E696FLL, v5, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  if (!v1)
  {
    v8 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, 64);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_23D9A7080;
    v11 = *(_QWORD *)(v8 + 16);
    if (v11)
    {
      if (v11 >= 5)
      {
        v2 = v10;
        LODWORD(v12) = *(_DWORD *)(v8 + 32);
        HIDWORD(v12) = *(_DWORD *)(v8 + 48);
        *(_QWORD *)(v10 + 32) = v12;
        if (v11 >= 9)
        {
          if (v11 >= 0xD)
          {
            LODWORD(v13) = *(_DWORD *)(v8 + 64);
            HIDWORD(v13) = *(_DWORD *)(v8 + 80);
            *(_QWORD *)(v10 + 40) = v13;
            if (v11 >= 0x11)
            {
              if (v11 >= 0x15)
              {
                LODWORD(v14) = *(_DWORD *)(v8 + 96);
                HIDWORD(v14) = *(_DWORD *)(v8 + 112);
                *(_QWORD *)(v10 + 48) = v14;
                if (v11 >= 0x19)
                {
                  if (v11 >= 0x1D)
                  {
                    LODWORD(v15) = *(_DWORD *)(v8 + 128);
                    HIDWORD(v15) = *(_DWORD *)(v8 + 144);
                    *(_QWORD *)(v10 + 56) = v15;
                    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
                    v4 = v5[2];
                    v11 = v5[3];
                    v3 = v4 + 1;
                    if (v4 < v11 >> 1)
                      goto LABEL_11;
                    goto LABEL_48;
                  }
LABEL_47:
                  __break(1u);
LABEL_48:
                  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v3, 1, v5);
LABEL_11:
                  v5[2] = v3;
                  v5[v4 + 4] = v2;
                  v16 = swift_allocObject();
                  *(_OWORD *)(v16 + 16) = xmmword_23D9A7080;
                  v17 = *(_QWORD *)(v8 + 16);
                  if (v17 < 2)
                  {
                    __break(1u);
                  }
                  else if (v17 >= 6)
                  {
                    v2 = v16;
                    LODWORD(v18) = *(_DWORD *)(v8 + 36);
                    HIDWORD(v18) = *(_DWORD *)(v8 + 52);
                    *(_QWORD *)(v16 + 32) = v18;
                    if (v17 >= 0xA)
                    {
                      if (v17 >= 0xE)
                      {
                        LODWORD(v19) = *(_DWORD *)(v8 + 68);
                        HIDWORD(v19) = *(_DWORD *)(v8 + 84);
                        *(_QWORD *)(v16 + 40) = v19;
                        if (v17 >= 0x12)
                        {
                          if (v17 >= 0x16)
                          {
                            LODWORD(v20) = *(_DWORD *)(v8 + 100);
                            HIDWORD(v20) = *(_DWORD *)(v8 + 116);
                            *(_QWORD *)(v16 + 48) = v20;
                            if (v17 >= 0x1A)
                            {
                              if (v17 >= 0x1E)
                              {
                                LODWORD(v21) = *(_DWORD *)(v8 + 132);
                                HIDWORD(v21) = *(_DWORD *)(v8 + 148);
                                *(_QWORD *)(v16 + 56) = v21;
                                v4 = v5[2];
                                v17 = v5[3];
                                v3 = v4 + 1;
                                if (v4 < v17 >> 1)
                                  goto LABEL_20;
                                goto LABEL_57;
                              }
LABEL_56:
                              __break(1u);
LABEL_57:
                              v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v3, 1, v5);
LABEL_20:
                              v5[2] = v3;
                              v5[v4 + 4] = v2;
                              v22 = swift_allocObject();
                              *(_OWORD *)(v22 + 16) = xmmword_23D9A7080;
                              v23 = *(_QWORD *)(v8 + 16);
                              if (v23 < 3)
                              {
                                __break(1u);
                              }
                              else if (v23 >= 7)
                              {
                                v2 = v22;
                                LODWORD(v24) = *(_DWORD *)(v8 + 40);
                                HIDWORD(v24) = *(_DWORD *)(v8 + 56);
                                *(_QWORD *)(v22 + 32) = v24;
                                if (v23 >= 0xB)
                                {
                                  if (v23 >= 0xF)
                                  {
                                    LODWORD(v25) = *(_DWORD *)(v8 + 72);
                                    HIDWORD(v25) = *(_DWORD *)(v8 + 88);
                                    *(_QWORD *)(v22 + 40) = v25;
                                    if (v23 >= 0x13)
                                    {
                                      if (v23 >= 0x17)
                                      {
                                        LODWORD(v26) = *(_DWORD *)(v8 + 104);
                                        HIDWORD(v26) = *(_DWORD *)(v8 + 120);
                                        *(_QWORD *)(v22 + 48) = v26;
                                        if (v23 >= 0x1B)
                                        {
                                          if (v23 >= 0x1F)
                                          {
                                            LODWORD(v27) = *(_DWORD *)(v8 + 136);
                                            HIDWORD(v27) = *(_DWORD *)(v8 + 152);
                                            *(_QWORD *)(v22 + 56) = v27;
                                            v4 = v5[2];
                                            v23 = v5[3];
                                            v3 = v4 + 1;
                                            if (v4 < v23 >> 1)
                                              goto LABEL_29;
                                            goto LABEL_66;
                                          }
LABEL_65:
                                          __break(1u);
LABEL_66:
                                          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v3, 1, v5);
LABEL_29:
                                          v5[2] = v3;
                                          v5[v4 + 4] = v2;
                                          v28 = swift_allocObject();
                                          *(_OWORD *)(v28 + 16) = xmmword_23D9A7080;
                                          v29 = *(_QWORD *)(v8 + 16);
                                          if (v29 < 4)
                                          {
                                            __break(1u);
                                          }
                                          else if (v29 >= 8)
                                          {
                                            v9 = v28;
                                            LODWORD(v30) = *(_DWORD *)(v8 + 44);
                                            HIDWORD(v30) = *(_DWORD *)(v8 + 60);
                                            *(_QWORD *)(v28 + 32) = v30;
                                            if (v29 >= 0xC)
                                            {
                                              if (v29 >= 0x10)
                                              {
                                                LODWORD(v31) = *(_DWORD *)(v8 + 76);
                                                HIDWORD(v31) = *(_DWORD *)(v8 + 92);
                                                *(_QWORD *)(v28 + 40) = v31;
                                                if (v29 >= 0x14)
                                                {
                                                  if (v29 >= 0x18)
                                                  {
                                                    LODWORD(v32) = *(_DWORD *)(v8 + 108);
                                                    HIDWORD(v32) = *(_DWORD *)(v8 + 124);
                                                    *(_QWORD *)(v28 + 48) = v32;
                                                    if (v29 >= 0x1C)
                                                    {
                                                      if (v29 >= 0x20)
                                                      {
                                                        LODWORD(v33) = *(_DWORD *)(v8 + 140);
                                                        HIDWORD(v33) = *(_DWORD *)(v8 + 156);
                                                        v35 = v33;
                                                        swift_release();
                                                        *(_QWORD *)(v9 + 56) = v35;
                                                        v2 = v5[2];
                                                        v29 = v5[3];
                                                        v8 = v2 + 1;
                                                        if (v2 < v29 >> 1)
                                                        {
LABEL_38:
                                                          v5[2] = v8;
                                                          v5[v2 + 4] = v9;
                                                          return v5;
                                                        }
LABEL_75:
                                                        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v8, 1, v5);
                                                        goto LABEL_38;
                                                      }
LABEL_74:
                                                      __break(1u);
                                                      goto LABEL_75;
                                                    }
LABEL_73:
                                                    __break(1u);
                                                    goto LABEL_74;
                                                  }
LABEL_72:
                                                  __break(1u);
                                                  goto LABEL_73;
                                                }
LABEL_71:
                                                __break(1u);
                                                goto LABEL_72;
                                              }
LABEL_70:
                                              __break(1u);
                                              goto LABEL_71;
                                            }
LABEL_69:
                                            __break(1u);
                                            goto LABEL_70;
                                          }
                                          __break(1u);
                                          goto LABEL_69;
                                        }
LABEL_64:
                                        __break(1u);
                                        goto LABEL_65;
                                      }
LABEL_63:
                                      __break(1u);
                                      goto LABEL_64;
                                    }
LABEL_62:
                                    __break(1u);
                                    goto LABEL_63;
                                  }
LABEL_61:
                                  __break(1u);
                                  goto LABEL_62;
                                }
LABEL_60:
                                __break(1u);
                                goto LABEL_61;
                              }
                              __break(1u);
                              goto LABEL_60;
                            }
LABEL_55:
                            __break(1u);
                            goto LABEL_56;
                          }
LABEL_54:
                          __break(1u);
                          goto LABEL_55;
                        }
LABEL_53:
                        __break(1u);
                        goto LABEL_54;
                      }
LABEL_52:
                      __break(1u);
                      goto LABEL_53;
                    }
LABEL_51:
                    __break(1u);
                    goto LABEL_52;
                  }
                  __break(1u);
                  goto LABEL_51;
                }
LABEL_46:
                __break(1u);
                goto LABEL_47;
              }
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_42;
  }
  return v5;
}

Swift::tuple_center_OpaquePointer_size_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SSDDetection2DComputePipeline.getNMSBoxesOutput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::tuple_center_OpaquePointer_size_OpaquePointer result;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;

  outlined init with copy of Detection2DComputePipelineProtocol(v0 + 24, (uint64_t)v34);
  v2 = v35;
  v3 = v36;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  v4 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 160))(0x65786F625F736D6ELL, 0xE900000000000073, v2, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
  if (v1)
    goto LABEL_10;
  v6 = specialized _copyCollectionToContiguousArray<A>(_:)((char *)v4, 16);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v7 < 5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v7 < 9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v7 < 0xD)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v7 == 13)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v7 < 0xF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 == 15)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = *(float *)(v6 + 32);
  v9 = *(float *)(v6 + 36);
  v10 = *(float *)(v6 + 48);
  v11 = *(float *)(v6 + 52);
  v12 = *(float *)(v6 + 64);
  v13 = *(float *)(v6 + 68);
  v14 = *(float *)(v6 + 80);
  v15 = *(float *)(v6 + 84);
  v25 = *(float *)(v6 + 56);
  v29 = *(float *)(v6 + 60);
  v22 = *(float *)(v6 + 40);
  v27 = *(float *)(v6 + 44);
  v20 = *(float *)(v6 + 72);
  v37 = *(float *)(v6 + 76);
  v21 = *(float *)(v6 + 88);
  v38 = *(float *)(v6 + 92);
  swift_release();
  *(float *)&v16 = (float)(v8 + v12) * 0.5;
  *((float *)&v16 + 1) = (float)(v10 + v14) * 0.5;
  v32 = v16;
  *(float *)&v16 = v12 - v8;
  *((float *)&v16 + 1) = v14 - v10;
  v33 = v16;
  *(float *)&v16 = (float)(v9 + v13) * 0.5;
  *((float *)&v16 + 1) = (float)(v11 + v15) * 0.5;
  v28 = v16;
  *(float *)&v16 = v13 - v9;
  *((float *)&v16 + 1) = v15 - v11;
  v31 = v16;
  *(float *)&v16 = (float)(v22 + v20) * 0.5;
  *((float *)&v16 + 1) = (float)(v25 + v21) * 0.5;
  v24 = v16;
  *(float *)&v16 = v20 - v22;
  *((float *)&v16 + 1) = v21 - v25;
  v26 = v16;
  *(float *)&v17 = (float)(v27 + v37) * 0.5;
  *((float *)&v17 + 1) = (float)(v29 + v38) * 0.5;
  v23 = v17;
  *(float *)&v18 = v37 - v27;
  *((float *)&v18 + 1) = v38 - v29;
  v30 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A7080;
  *(_QWORD *)(v4 + 32) = v32;
  *(_QWORD *)(v4 + 40) = v28;
  *(_QWORD *)(v4 + 48) = v24;
  *(_QWORD *)(v4 + 56) = v23;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  *(_QWORD *)(v5 + 32) = v33;
  *(_QWORD *)(v5 + 40) = v31;
  *(_QWORD *)(v5 + 48) = v26;
  *(_QWORD *)(v5 + 56) = v30;
LABEL_10:
  v6 = v4;
LABEL_18:
  result.size._rawValue = (void *)v5;
  result.center._rawValue = (void *)v6;
  return result;
}

uint64_t type metadata accessor for SSDDetection2DComputePipeline()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type SSDDetectionModelParams and conformance SSDDetectionModelParams()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SSDDetectionModelParams and conformance SSDDetectionModelParams;
  if (!lazy protocol witness table cache variable for type SSDDetectionModelParams and conformance SSDDetectionModelParams)
  {
    v1 = type metadata accessor for SSDDetectionModelParams();
    result = MEMORY[0x242638C74](&protocol conformance descriptor for SSDDetectionModelParams, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SSDDetectionModelParams and conformance SSDDetectionModelParams);
  }
  return result;
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.getDepthOutput() in conformance SSDDetection2DComputePipeline()
{
  return SSDDetection2DComputePipeline.getDepthOutput()();
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.getUvOOutput() in conformance SSDDetection2DComputePipeline()
{
  return SSDDetection2DComputePipeline.getUvOOutput()();
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.getNMSConfidenceOutput() in conformance SSDDetection2DComputePipeline()
{
  return SSDDetection2DComputePipeline.getNMSConfidenceOutput()();
}

uint64_t protocol witness for Detection2DComputePipelineProtocol.getChiralityScoreOutput() in conformance SSDDetection2DComputePipeline()
{
  return SSDDetection2DComputePipeline.getChiralityScoreOutput()();
}

_QWORD *protocol witness for Detection2DComputePipelineProtocol.getKeyPointsOutput() in conformance SSDDetection2DComputePipeline()
{
  return SSDDetection2DComputePipeline.getKeyPointsOutput()();
}

void *protocol witness for Detection2DComputePipelineProtocol.getNMSBoxesOutput() in conformance SSDDetection2DComputePipeline()
{
  return SSDDetection2DComputePipeline.getNMSBoxesOutput()().center._rawValue;
}

uint64_t specialized SSDDetection2DComputePipeline.estimateDepthAndUvO(from:size2D:keypoints:boneLength:imageSize:)(uint64_t a1, float32x2_t *a2, float a3, float32x2_t a4)
{
  uint64_t v8;
  float *v14;
  uint64_t v15;
  float32x2_t v17;
  float32x2_t *v18;
  uint64_t result;
  uint64_t i;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;

  v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v8 + 16) = 4;
  __asm { FMOV            V0.4S, #10.0 }
  *(_OWORD *)(v8 + 32) = _Q0;
  v14 = (float *)(v8 + 32);
  v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v15 + 16) = 4;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v15 + 32) = _Q0;
  v17 = a2[2];
  if (!*(_QWORD *)&v17)
    return v8;
  v18 = a2 + 4;
  result = swift_beginAccess();
  for (i = *(_QWORD *)(v8 + 16); ; --i)
  {
    v21 = vmul_f32(*v18, a4);
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v21, 1), v21).u32[0] & 1) != 0)
    {
      v22 = *(float *)(a1 + 64);
      v23 = *(float *)(a1 + 84);
      v21 = (float32x2_t)vrev64_s32((int32x2_t)v21);
    }
    else
    {
      v22 = *(float *)(a1 + 84);
      v23 = *(float *)(a1 + 64);
    }
    if ((float)(v21.f32[1] / v21.f32[0]) >= 0.6)
    {
      v23 = v22;
      v24 = v21.f32[1] / 0.9;
    }
    else
    {
      v24 = v21.f32[0] / 0.7;
    }
    if (!i)
      break;
    *v14++ = (float)((float)(v23 * 0.1136) / v24) / a3;
    ++v18;
    if (!--*(_QWORD *)&v17)
      return v8;
  }
  __break(1u);
  return result;
}

uint64_t OutOfEnvelopeFilter.process(_:)(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;

  v2 = v1;
  v74 = a1;
  v4 = type metadata accessor for RejectedHand();
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v72 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HandDescriptor();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v75 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v68 - v13;
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 16);
  v17 = MEMORY[0x24BEE4AF8];
  v73 = v8;
  if (v16)
  {
    v79 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    v18 = v15 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v19 = *(_QWORD *)(v8 + 72);
    v17 = v79;
    do
    {
      outlined init with copy of HandDescriptor(v18, (uint64_t)v14);
      v20 = *((_QWORD *)v14 + 18);
      outlined destroy of HandDescriptor((uint64_t)v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v79;
      }
      v22 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v17 = v79;
      }
      *(_QWORD *)(v17 + 16) = v22 + 1;
      *(_QWORD *)(v17 + 8 * v22 + 32) = v20;
      v18 += v19;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  v23 = specialized Set.init<A>(_:)(v17);
  swift_bridgeObjectRelease();
  v24 = v2 + 16;
  swift_beginAccess();
  v25 = swift_bridgeObjectRetain();
  v26 = specialized Set.init<A>(_:)(v25);
  v27 = v26;
  if (*(_QWORD *)(v23 + 16) <= *(_QWORD *)(v26 + 16) >> 3)
  {
    v77 = v26;
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v23);
    v28 = v77;
  }
  else
  {
    swift_bridgeObjectRetain();
    v28 = specialized _NativeSet.subtracting<A>(_:)(v23, v27);
  }
  swift_bridgeObjectRetain();
  v29 = swift_bridgeObjectRetain();
  v30 = specialized _NativeDictionary.filter(_:)(v29, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)v24 = v30;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v27 + 16) <= *(_QWORD *)(v23 + 16) >> 3)
  {
    v77 = v23;
    specialized Set._subtract<A>(_:)(v27);
    result = swift_bridgeObjectRelease();
    v31 = v77;
  }
  else
  {
    v31 = specialized _NativeSet.subtracting<A>(_:)(v27, v23);
    result = swift_bridgeObjectRelease();
  }
  v33 = 0;
  v34 = v31 + 56;
  v35 = 1 << *(_BYTE *)(v31 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & *(_QWORD *)(v31 + 56);
  v38 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v40 = v39 | (v33 << 6);
      goto LABEL_19;
    }
    v45 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
LABEL_57:
      __break(1u);
      return result;
    }
    if (v45 >= v38)
      goto LABEL_35;
    v46 = *(_QWORD *)(v34 + 8 * v45);
    ++v33;
    if (!v46)
    {
      v33 = v45 + 1;
      if (v45 + 1 >= v38)
        goto LABEL_35;
      v46 = *(_QWORD *)(v34 + 8 * v33);
      if (!v46)
      {
        v33 = v45 + 2;
        if (v45 + 2 >= v38)
          goto LABEL_35;
        v46 = *(_QWORD *)(v34 + 8 * v33);
        if (!v46)
          break;
      }
    }
LABEL_34:
    v37 = (v46 - 1) & v46;
    v40 = __clz(__rbit64(v46)) + (v33 << 6);
LABEL_19:
    v41 = *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * v40);
    v42 = *(void **)(v2 + 24);
    type metadata accessor for FilterHandPipeline();
    swift_allocObject();
    v43 = FilterHandPipeline.init(_:)(v42);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v76 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v43, v41, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 16) = v76;
    swift_bridgeObjectRelease();
    result = swift_endAccess();
  }
  v47 = v45 + 3;
  if (v47 < v38)
  {
    v46 = *(_QWORD *)(v34 + 8 * v47);
    if (!v46)
    {
      while (1)
      {
        v33 = v47 + 1;
        if (__OFADD__(v47, 1))
          goto LABEL_57;
        if (v33 >= v38)
          goto LABEL_35;
        v46 = *(_QWORD *)(v34 + 8 * v33);
        ++v47;
        if (v46)
          goto LABEL_34;
      }
    }
    v33 = v47;
    goto LABEL_34;
  }
LABEL_35:
  swift_release();
  v48 = v74;
  v49 = *v74;
  v50 = *(_QWORD *)(*v74 + 16);
  if (v50)
  {
    v71 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    v51 = v49 + v71;
    v52 = *(_QWORD *)(v73 + 72);
    swift_retain();
    v68 = v49;
    swift_bridgeObjectRetain();
    v53 = MEMORY[0x24BEE4AF8];
    v73 = v52;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)v24 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v51 + 144));
        if ((v54 & 1) != 0)
        {
          v55 = v53;
          v57 = v48[44];
          v56 = v48[45];
          v58 = v48[43];
          swift_retain();
          if ((FilterHandPipeline.process(_:_:)((uint64_t)&v77, v51, v58, v57, v56) & 1) != 0)
          {
            if (v48[1])
            {
              v59 = v77;
              v60 = v78;
              v61 = v72;
              outlined init with copy of HandDescriptor(v51, v72);
              v62 = v61 + *(int *)(v70 + 20);
              *(_QWORD *)v62 = v59;
              *(_BYTE *)(v62 + 8) = v60;
              v63 = v48[8];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v63 + 16) + 1, 1, v63);
              v53 = v55;
              v52 = v73;
              v65 = *(_QWORD *)(v63 + 16);
              v64 = *(_QWORD *)(v63 + 24);
              if (v65 >= v64 >> 1)
                v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v63);
              *(_QWORD *)(v63 + 16) = v65 + 1;
              outlined init with take of Matrix2dPB(v72, v63+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72) * v65, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
              swift_release();
              v48 = v74;
              v74[8] = v63;
            }
            else
            {
              swift_release();
              v53 = v55;
              v52 = v73;
            }
          }
          else
          {
            swift_release();
            outlined init with copy of HandDescriptor(v51, v75);
            v53 = v55;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v55 + 16) + 1, 1, v55);
            v52 = v73;
            v48 = v74;
            v67 = *(_QWORD *)(v53 + 16);
            v66 = *(_QWORD *)(v53 + 24);
            if (v67 >= v66 >> 1)
              v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1, v53);
            *(_QWORD *)(v53 + 16) = v67 + 1;
            outlined init with take of Matrix2dPB(v75, v53 + v71 + v67 * v52, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          }
        }
      }
      v51 += v52;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v53 = MEMORY[0x24BEE4AF8];
  }
  result = swift_bridgeObjectRelease();
  *v48 = v53;
  return result;
}

uint64_t OutOfEnvelopeFilter.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OutOfEnvelopeFilter()
{
  return objc_opt_self();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, a2);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    if (v2)
      swift_willThrow();
    else
      v4 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    v4 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9, v6, v4, a2);
    MEMORY[0x242638D4C](v9, -1, -1);
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    result = specialized Set._Variant.remove(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v33[2];
  _QWORD v34[6];

  v2 = a2;
  v34[5] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v33[0] = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10)
            goto LABEL_33;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_33;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_33;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_33;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    outlined consume of [CameraSource : Float].Iterator._Variant();
                    return v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_33;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_36:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        v19 = static Hasher._hash(seed:_:)();
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v34[0] = a1;
    v34[1] = v6;
    v34[2] = v33[0];
    v34[3] = v4;
    v34[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe, v26);
      v28 = (char *)v33 - v27;
      memcpy((char *)v33 - v27, (const void *)(v2 + 56), v24);
      v29 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v28, v23, v2, v21, v34);
      swift_release();
      outlined consume of [CameraSource : Float].Iterator._Variant();
      return v29;
    }
    else
    {
      v30 = (void *)swift_slowAlloc();
      memcpy(v30, (const void *)(v2 + 56), v24);
      v31 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v30, v23, v2, v21, v34);
      swift_release();
      outlined consume of [CameraSource : Float].Iterator._Variant();
      MEMORY[0x242638D4C](v30, -1, -1);
      return v31;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t i;
  unint64_t v31;

  v8 = (unint64_t *)result;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v10 = v9 - 1;
  v11 = a3 + 56;
  while (1)
  {
    v16 = a5[3];
    v17 = a5[4];
    if (!v17)
      break;
    v18 = (v17 - 1) & v17;
    v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_22:
    v26 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v19);
    a5[3] = v16;
    a5[4] = v18;
    result = static Hasher._hash(seed:_:)();
    v27 = -1 << *(_BYTE *)(a3 + 32);
    v28 = result & ~v27;
    v12 = v28 >> 6;
    v13 = 1 << v28;
    if (((1 << v28) & *(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v29 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v29 + 8 * v28) == v26)
      {
LABEL_3:
        v14 = v12;
        v15 = v8[v12];
        v8[v14] = v15 & ~v13;
        if ((v13 & v15) != 0)
        {
          if (__OFSUB__(v10--, 1))
            goto LABEL_33;
          if (!v10)
            return MEMORY[0x24BEE4B08];
        }
      }
      else
      {
        for (i = v28 + 1; ; i = v31 + 1)
        {
          v31 = i & ~v27;
          if (((*(_QWORD *)(v11 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
            break;
          if (*(_QWORD *)(v29 + 8 * v31) == v26)
          {
            v12 = v31 >> 6;
            v13 = 1 << v31;
            goto LABEL_3;
          }
        }
      }
    }
  }
  v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    v21 = (unint64_t)(a5[2] + 64) >> 6;
    v22 = a5[3];
    if (v20 >= v21)
      goto LABEL_31;
    v23 = a5[1];
    v24 = *(_QWORD *)(v23 + 8 * v20);
    if (!v24)
    {
      v22 = v16 + 1;
      if (v16 + 2 >= v21)
        goto LABEL_31;
      v24 = *(_QWORD *)(v23 + 8 * (v16 + 2));
      if (v24)
      {
        v20 = v16 + 2;
      }
      else
      {
        v22 = v16 + 2;
        if (v16 + 3 >= v21)
          goto LABEL_31;
        v24 = *(_QWORD *)(v23 + 8 * (v16 + 3));
        if (v24)
        {
          v20 = v16 + 3;
        }
        else
        {
          v20 = v16 + 4;
          v22 = v16 + 3;
          if (v16 + 4 >= v21)
            goto LABEL_31;
          v24 = *(_QWORD *)(v23 + 8 * v20);
          if (!v24)
          {
            v22 = v21 - 1;
            v25 = v16 + 5;
            while (v21 != v25)
            {
              v24 = *(_QWORD *)(v23 + 8 * v25++);
              if (v24)
              {
                v20 = v25 - 1;
                goto LABEL_21;
              }
            }
LABEL_31:
            a5[3] = v22;
            a5[4] = 0;
            swift_retain();
            return specialized _NativeSet.extractSubset(using:count:)(v8, a2, v10, a3);
          }
        }
      }
    }
LABEL_21:
    v18 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v20 << 6);
    v16 = v20;
    goto LABEL_22;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v25;
  int64_t v26;

  v25 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 64;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(a3 + 64);
  v26 = (unint64_t)(v9 + 63) >> 6;
  v12 = a4 + 56;
  while (1)
  {
LABEL_6:
    while (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v7 << 6);
      if (!*(_QWORD *)(a4 + 16))
        goto LABEL_5;
LABEL_23:
      v19 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v15);
      result = static Hasher._hash(seed:_:)();
      v20 = -1 << *(_BYTE *)(a4 + 32);
      v21 = result & ~v20;
      if (((*(_QWORD *)(v12 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
        goto LABEL_5;
      v22 = *(_QWORD *)(a4 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) != v19)
      {
        v23 = ~v20;
        while (1)
        {
          v21 = (v21 + 1) & v23;
          if (((*(_QWORD *)(v12 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
            goto LABEL_5;
          if (*(_QWORD *)(v22 + 8 * v21) == v19)
            goto LABEL_6;
        }
      }
    }
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v16 >= v26)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v6, a3);
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v26)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v6, a3);
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v26)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v6, a3);
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
        {
          v18 = v16 + 3;
          if (v18 >= v26)
            return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v6, a3);
          v17 = *(_QWORD *)(v8 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v7 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_32;
              if (v7 >= v26)
                return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v6, a3);
              v17 = *(_QWORD *)(v8 + 8 * v7);
              ++v18;
              if (v17)
                goto LABEL_22;
            }
          }
          v7 = v18;
        }
      }
    }
LABEL_22:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v7 << 6);
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_23;
LABEL_5:
    *(unint64_t *)((char *)v25 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    if (__OFADD__(v6++, 1))
      goto LABEL_31;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PinchMakeFusion()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for OisEntryReason()
{
  return &type metadata for OisEntryReason;
}

ValueMetadata *type metadata accessor for OisSubstate()
{
  return &type metadata for OisSubstate;
}

ValueMetadata *type metadata accessor for PinchAcceptorID()
{
  return &type metadata for PinchAcceptorID;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OisEntryReason()
{
  lazy protocol witness table accessor for type OisEntryReason and conformance OisEntryReason();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance OisEntryReason@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static OisEntryReason.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PinchAcceptorID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB((uint64_t (*)(void))specialized PinchAcceptorID.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.rawValue.getter in conformance PinchAcceptorID()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*((_BYTE *)v0 + 8) == 1)
    return qword_23D9B5B90[result];
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchAcceptorID@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB(a1, (uint64_t (*)(_QWORD))specialized PinchAcceptorID.init(rawValue:), a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PinchAcceptorID(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1)
    v2 = qword_23D9B5B90[v2];
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchAcceptorID()
{
  lazy protocol witness table accessor for type PinchAcceptorID and conformance PinchAcceptorID();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PinchAcceptorID(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchAcceptorID@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static PinchAcceptorID.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance OisSubstate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB((uint64_t (*)(void))specialized OisSubstate.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance OisSubstate@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB(a1, (uint64_t (*)(_QWORD))specialized OisSubstate.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OisSubstate()
{
  lazy protocol witness table accessor for type OisSubstate and conformance OisSubstate();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance OisSubstate(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

unint64_t lazy protocol witness table accessor for type OisSubstate and conformance OisSubstate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate;
  if (!lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OisSubstate, &type metadata for OisSubstate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate;
  if (!lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OisSubstate, &type metadata for OisSubstate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate;
  if (!lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OisSubstate, &type metadata for OisSubstate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate;
  if (!lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OisSubstate, &type metadata for OisSubstate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OisSubstate and conformance OisSubstate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OisEntryReason and conformance OisEntryReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason;
  if (!lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OisEntryReason, &type metadata for OisEntryReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason;
  if (!lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OisEntryReason, &type metadata for OisEntryReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason;
  if (!lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OisEntryReason, &type metadata for OisEntryReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason;
  if (!lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for OisEntryReason, &type metadata for OisEntryReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OisEntryReason and conformance OisEntryReason);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance OisSubstate@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static OisSubstate.allCases, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance OisEntryReason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static OisEntryReason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchAcceptorID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchAcceptorID._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance OisSubstate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static OisSubstate._protobuf_nameMap, a1);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in OisSubstate()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [OisSubstate] and conformance [A], &demangling cache variable for type metadata for [OisSubstate]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchAcceptorID()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchAcceptorID] and conformance [A], &demangling cache variable for type metadata for [PinchAcceptorID]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in OisEntryReason()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [OisEntryReason] and conformance [A], &demangling cache variable for type metadata for [OisEntryReason]);
}

unint64_t specialized PinchAcceptorID.init(rawValue:)(unint64_t result)
{
  uint64_t v1;

  v1 = 11;
  if (result != 20)
    v1 = result;
  if (result >= 0xB)
    return v1;
  return result;
}

uint64_t HandsKitDataInternal.init(protoBuf:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v105[2];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v125 = (char *)v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for HandDescriptorPB(0);
  v122 = *(_QWORD *)(v123 - 8);
  MEMORY[0x24BDAC7A8](v123, v7);
  v124 = (char *)v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for RejectedHandPB(0);
  v107 = *(_QWORD *)(v121 - 8);
  v10 = MEMORY[0x24BDAC7A8](v121, v9);
  v134 = (_QWORD *)((char *)v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10, v12);
  v133 = (uint64_t)v105 - v13;
  v120 = type metadata accessor for RejectedHand();
  v119 = *(_QWORD *)(v120 - 8);
  v15 = MEMORY[0x24BDAC7A8](v120, v14);
  v118 = (char *)v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v17);
  v132 = (uint64_t)v105 - v18;
  v19 = type metadata accessor for DetectionSpecItemPB(0);
  v128 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19, v20);
  v117 = (uint64_t)v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21, v23);
  v116 = (uint64_t)v105 - v24;
  *(_QWORD *)&v131 = type metadata accessor for SchedulingDataPB(0);
  *(_QWORD *)&v130 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131, v25);
  v127 = (int *)((char *)v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
  v29 = MEMORY[0x24BDAC7A8](v27, v28);
  v126 = (uint64_t)v105 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29, v31);
  v129 = (uint64_t)v105 - v32;
  v33 = type metadata accessor for TrackingInfosPB(0);
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33, v35);
  v115 = (uint64_t)v105 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
  v39 = MEMORY[0x24BDAC7A8](v37, v38);
  v41 = (char *)v105 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39, v42);
  v44 = (char *)v105 - v43;
  v45 = (int *)type metadata accessor for HandsKitDataInternalPB(0);
  v46 = (uint64_t)a1 + v45[8];
  outlined init with copy of (Int32, Matrix2dPB)(v46, (uint64_t)v44, &demangling cache variable for type metadata for TrackingInfosPB?);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v48 = v47(v44, 1, v33);
  outlined destroy of Coordinate3DPB?((uint64_t)v44, &demangling cache variable for type metadata for TrackingInfosPB?);
  v49 = 0;
  v114 = 0;
  if (v48 != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v46, (uint64_t)v41, &demangling cache variable for type metadata for TrackingInfosPB?);
    if (v47(v41, 1, v33) == 1)
    {
      v50 = MEMORY[0x24BEE4AF8];
      v51 = (_QWORD *)v115;
      *(_QWORD *)v115 = 0;
      v51[1] = v50;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for TrackingInfosPB?);
    }
    else
    {
      v51 = (_QWORD *)v115;
      outlined init with take of Matrix2dPB((uint64_t)v41, v115, type metadata accessor for TrackingInfosPB);
    }
    TrackingInfos.init(protoBuf:)(v51, &v135);
    v49 = v136;
    v114 = v135;
    swift_bridgeObjectRelease();
  }
  v52 = v45[10];
  v111 = *((unsigned __int8 *)a1 + v45[9]);
  v53 = (char *)a1 + v52;
  v54 = v129;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a1 + v52, v129, &demangling cache variable for type metadata for SchedulingDataPB?);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
  v56 = v131;
  v57 = v55(v54, 1, v131);
  outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for SchedulingDataPB?);
  if (v57 == 1)
  {
    v109 = 0;
    v108 = 0;
    v110 = 0;
    v58 = (uint64_t)v125;
    v59 = (uint64_t)v124;
  }
  else
  {
    v60 = (uint64_t)v53;
    v61 = v126;
    outlined init with copy of (Int32, Matrix2dPB)(v60, v126, &demangling cache variable for type metadata for SchedulingDataPB?);
    v62 = v55(v61, 1, v56);
    v58 = (uint64_t)v125;
    v59 = (uint64_t)v124;
    v63 = v127;
    if (v62 == 1)
    {
      *(_QWORD *)v127 = 0;
      v64 = MEMORY[0x24BEE4AF8];
      *((_QWORD *)v63 + 1) = MEMORY[0x24BEE4AF8];
      *((_QWORD *)v63 + 2) = v64;
      *((_QWORD *)v63 + 3) = v64;
      *((_QWORD *)v63 + 4) = v64;
      *((_QWORD *)v63 + 5) = v64;
      *((_QWORD *)v63 + 6) = v64;
      *((_QWORD *)v63 + 7) = v64;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v61, &demangling cache variable for type metadata for SchedulingDataPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v61, (uint64_t)v127, type metadata accessor for SchedulingDataPB);
    }
    SchedulingData.init(protoBuf:)(v63, &v135);
    v109 = v135;
    v108 = v136;
    v110 = v137;
    swift_bridgeObjectRelease();
  }
  v112 = v49;
  v65 = *a1;
  v66 = *(_QWORD *)(*a1 + 16);
  v67 = MEMORY[0x24BEE4AF8];
  v113 = a1;
  if (v66)
  {
    v106 = a2;
    v148 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66, 0);
    v68 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
    v105[1] = v65;
    v69 = v65 + v68;
    v115 = *(_QWORD *)(v128 + 72);
    v70 = v148;
    do
    {
      v71 = v116;
      outlined init with copy of TrackingUpdateDataPB(v69, v116, type metadata accessor for DetectionSpecItemPB);
      v72 = v117;
      outlined init with copy of TrackingUpdateDataPB(v71, v117, type metadata accessor for DetectionSpecItemPB);
      DetectionSpecItem.init(protoBuf:)(v72, (uint64_t)&v135);
      outlined destroy of Matrix3x3PB(v71, type metadata accessor for DetectionSpecItemPB);
      v73 = v135;
      v74 = v136;
      v129 = v137;
      v75 = v138;
      v131 = v139;
      v76 = v140;
      v130 = v141;
      v77 = v142;
      v78 = v143;
      v128 = v144;
      LODWORD(v127) = v145;
      LODWORD(v126) = v146;
      v79 = v147;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v70 + 16) + 1, 1);
        v70 = v148;
      }
      v81 = *(_QWORD *)(v70 + 16);
      v80 = *(_QWORD *)(v70 + 24);
      v82 = v70;
      if (v81 >= v80 >> 1)
      {
        v105[0] = v79;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
        v79 = v105[0];
        v82 = v148;
      }
      *(_QWORD *)(v82 + 16) = v81 + 1;
      v83 = v82 + (v81 << 7);
      *(_QWORD *)(v83 + 32) = v73;
      *(_BYTE *)(v83 + 40) = v74;
      *(_QWORD *)(v83 + 48) = v129;
      *(_BYTE *)(v83 + 56) = v75;
      *(_OWORD *)(v83 + 64) = v131;
      *(_QWORD *)(v83 + 80) = v76;
      *(_OWORD *)(v83 + 96) = v130;
      *(_QWORD *)(v83 + 112) = v77;
      *(_QWORD *)(v83 + 120) = v78;
      *(_QWORD *)(v83 + 128) = v128;
      *(_DWORD *)(v83 + 136) = (_DWORD)v127;
      *(_BYTE *)(v83 + 140) = v126;
      v69 += v115;
      *(_QWORD *)(v83 + 144) = v79;
      --v66;
      v70 = v82;
    }
    while (v66);
    swift_bridgeObjectRelease();
    a2 = v106;
    a1 = v113;
    v58 = (uint64_t)v125;
    v59 = (uint64_t)v124;
    v67 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v70 = MEMORY[0x24BEE4AF8];
  }
  v84 = a1[2];
  v85 = *(_QWORD *)(v84 + 16);
  if (v85)
  {
    v135 = v67;
    *(_QWORD *)&v131 = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85, 0);
    v86 = (*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
    *(_QWORD *)&v130 = v84;
    v87 = v84 + v86;
    v88 = *(_QWORD *)(v107 + 72);
    v89 = (uint64_t)v118;
    do
    {
      v90 = v133;
      outlined init with copy of TrackingUpdateDataPB(v87, v133, type metadata accessor for RejectedHandPB);
      v91 = v90;
      v92 = (uint64_t)v134;
      outlined init with copy of TrackingUpdateDataPB(v91, (uint64_t)v134, type metadata accessor for RejectedHandPB);
      outlined init with copy of (Int32, Matrix2dPB)(v92 + *(int *)(v121 + 28), v58, &demangling cache variable for type metadata for HandDescriptorPB?);
      v93 = v123;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v58, 1, v123) == 1)
      {
        UnknownStorage.init()();
        v94 = *(int *)(v93 + 20);
        if (one-time initialization token for defaultInstance != -1)
          swift_once();
        *(_QWORD *)(v59 + v94) = static HandDescriptorPB._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of Coordinate3DPB?(v58, &demangling cache variable for type metadata for HandDescriptorPB?);
      }
      else
      {
        outlined init with take of Matrix2dPB(v58, v59, type metadata accessor for HandDescriptorPB);
      }
      HandDescriptor.init(protoBuf:)(v59, v89);
      v95 = *v134;
      v96 = *((_BYTE *)v134 + 8);
      outlined destroy of Matrix3x3PB((uint64_t)v134, type metadata accessor for RejectedHandPB);
      v97 = v89 + *(int *)(v120 + 20);
      *(_QWORD *)v97 = v95;
      *(_BYTE *)(v97 + 8) = v96;
      outlined init with take of Matrix2dPB(v89, v132, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
      outlined destroy of Matrix3x3PB(v133, type metadata accessor for RejectedHandPB);
      v98 = v135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v98 + 16) + 1, 1);
        v98 = v135;
      }
      v100 = *(_QWORD *)(v98 + 16);
      v99 = *(_QWORD *)(v98 + 24);
      if (v100 >= v99 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v99 > 1, v100 + 1, 1);
        v98 = v135;
      }
      *(_QWORD *)(v98 + 16) = v100 + 1;
      outlined init with take of Matrix2dPB(v132, v98+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(_QWORD *)(v119 + 72) * v100, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
      v87 += v88;
      --v85;
      v58 = (uint64_t)v125;
      v59 = (uint64_t)v124;
    }
    while (v85);
    a1 = v113;
    v70 = v131;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v98 = MEMORY[0x24BEE4AF8];
  }
  outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for HandsKitDataInternalPB);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v101 = v110;
  swift_bridgeObjectRetain();
  v102 = v114;
  *(_QWORD *)a2 = v70;
  *(_QWORD *)(a2 + 8) = v102;
  *(_QWORD *)(a2 + 16) = v112;
  *(_BYTE *)(a2 + 24) = v111;
  v103 = v108;
  *(_QWORD *)(a2 + 32) = v109;
  *(_QWORD *)(a2 + 40) = v103;
  *(_QWORD *)(a2 + 48) = v101;
  *(_QWORD *)(a2 + 56) = v98;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t HandsKitDataInternal.toProtoBuf()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(void);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(void);
  int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;

  v3 = type metadata accessor for HandDescriptorPB(0);
  v106 = *(_QWORD *)(v3 - 8);
  v107 = v3;
  MEMORY[0x24BDAC7A8](v3, v4);
  v105 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for RejectedHand();
  v95 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104, v6);
  v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for RejectedHandPB(0);
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x24BDAC7A8](v103, v9);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DetectionSpecItemPB(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for SchedulingDataPB(0);
  v96 = *(void (**)(void))(v100 - 8);
  MEMORY[0x24BDAC7A8](v100, v17);
  v93 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v20);
  v92 = (uint64_t)&v83 - v21;
  MEMORY[0x24BDAC7A8](v22, v23);
  v94 = (uint64_t)&v83 - v24;
  v25 = type metadata accessor for TrackingInfosPB(0);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25, v27);
  v87 = (uint64_t)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29, v30);
  v85 = (uint64_t *)((char *)&v83 - v31);
  MEMORY[0x24BDAC7A8](v32, v33);
  v88 = (uint64_t)&v83 - v34;
  v108 = *v1;
  v35 = v1[2];
  v84 = v1[1];
  v97 = *((unsigned __int8 *)v1 + 24);
  v90 = v1[4];
  v89 = v1[5];
  v98 = v1[6];
  v101 = v1[7];
  v36 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v36;
  a1[2] = v36;
  v37 = (int *)type metadata accessor for HandsKitDataInternalPB(0);
  UnknownStorage.init()();
  v38 = (uint64_t)a1 + v37[8];
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v91 = v25;
  v39(v38, 1, 1, v25);
  v40 = v37[9];
  *((_BYTE *)a1 + v40) = 2;
  v41 = (void (*)(void))*((_QWORD *)v96 + 7);
  v86 = (char *)a1 + v37[10];
  v96 = v41;
  v41();
  if (v35)
  {
    v109 = v84;
    v110 = v35;
    v84 = v40;
    v42 = v85;
    TrackingInfos.toProtoBuf()(v85);
    v43 = v88;
    outlined init with take of Matrix2dPB((uint64_t)v42, v88, type metadata accessor for TrackingInfosPB);
    v44 = v87;
    outlined init with copy of TrackingUpdateDataPB(v43, v87, type metadata accessor for TrackingInfosPB);
    outlined destroy of Coordinate3DPB?(v38, &demangling cache variable for type metadata for TrackingInfosPB?);
    v45 = v44;
    v40 = v84;
    outlined init with take of Matrix2dPB(v45, v38, type metadata accessor for TrackingInfosPB);
    v39(v38, 0, 1, v91);
    outlined destroy of Matrix3x3PB(v43, type metadata accessor for TrackingInfosPB);
  }
  if (v97 != 2)
    *((_BYTE *)a1 + v40) = v97;
  v46 = v108;
  if (v98)
  {
    v109 = v90;
    v110 = v89;
    v111 = v98;
    v47 = (uint64_t)v86;
    v48 = v92;
    SchedulingData.toProtoBuf()(v92);
    v49 = v94;
    outlined init with take of Matrix2dPB(v48, v94, type metadata accessor for SchedulingDataPB);
    v50 = v93;
    outlined init with copy of TrackingUpdateDataPB(v49, v93, type metadata accessor for SchedulingDataPB);
    outlined destroy of Coordinate3DPB?(v47, &demangling cache variable for type metadata for SchedulingDataPB?);
    outlined init with take of Matrix2dPB(v50, v47, type metadata accessor for SchedulingDataPB);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v96)(v47, 0, 1, v100);
    outlined destroy of Matrix3x3PB(v49, type metadata accessor for SchedulingDataPB);
  }
  v51 = *(_QWORD *)(v46 + 16);
  v52 = MEMORY[0x24BEE4AF8];
  v99 = a1;
  if (v51)
  {
    v122 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51, 0);
    v53 = 0;
    v52 = v122;
    do
    {
      v54 = *(_BYTE *)(v46 + v53 + 40);
      v55 = *(_QWORD *)(v46 + v53 + 48);
      v56 = *(_BYTE *)(v46 + v53 + 56);
      v57 = *(_OWORD *)(v46 + v53 + 64);
      v58 = *(_QWORD *)(v46 + v53 + 80);
      v59 = *(_OWORD *)(v46 + v53 + 96);
      v60 = *(_QWORD *)(v46 + v53 + 112);
      v61 = *(_QWORD *)(v46 + v53 + 128);
      v62 = *(_DWORD *)(v46 + v53 + 136);
      v63 = *(_BYTE *)(v46 + v53 + 140);
      v64 = *(_QWORD *)(v46 + v53 + 144);
      v109 = *(_QWORD *)(v46 + v53 + 32);
      LOBYTE(v110) = v54;
      v111 = v55;
      v112 = v56;
      v113 = v57;
      v114 = v58;
      v115 = v59;
      v116 = v60;
      v117 = *(_QWORD *)(v46 + v53 + 120);
      v118 = v61;
      v119 = v62;
      v120 = v63;
      v121 = v64;
      DetectionSpecItem.toProtoBuf()((uint64_t)v16);
      v122 = v52;
      v66 = *(_QWORD *)(v52 + 16);
      v65 = *(_QWORD *)(v52 + 24);
      if (v66 >= v65 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
        v52 = v122;
      }
      *(_QWORD *)(v52 + 16) = v66 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v16, v52+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v66, type metadata accessor for DetectionSpecItemPB);
      v53 += 128;
      --v51;
      v46 = v108;
    }
    while (v51);
    swift_bridgeObjectRelease();
    a1 = v99;
  }
  swift_bridgeObjectRelease();
  *a1 = v52;
  v67 = v101;
  v68 = *(_QWORD *)(v101 + 16);
  v69 = MEMORY[0x24BEE4AF8];
  if (v68)
  {
    v109 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68, 0);
    v70 = v67 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
    v108 = *(_QWORD *)(v95 + 72);
    v71 = v107;
    v72 = (uint64_t)v105;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v70, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
      *(_QWORD *)v11 = 0;
      v11[8] = 1;
      v73 = v103;
      UnknownStorage.init()();
      v74 = &v11[*(int *)(v73 + 24)];
      v75 = type metadata accessor for BasicHandDescriptorPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 1, 1, v75);
      v76 = (uint64_t)&v11[*(int *)(v73 + 28)];
      v77 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56);
      v77(v76, 1, 1, v71);
      HandDescriptor.toProtoBuf()(v72);
      outlined destroy of Coordinate3DPB?(v76, &demangling cache variable for type metadata for HandDescriptorPB?);
      outlined init with take of Matrix2dPB(v72, v76, type metadata accessor for HandDescriptorPB);
      v77(v76, 0, 1, v71);
      v78 = &v8[*(int *)(v104 + 20)];
      v79 = *(_QWORD *)v78;
      LOBYTE(v78) = v78[8];
      *(_QWORD *)v11 = v79;
      v11[8] = (char)v78;
      outlined destroy of Matrix3x3PB((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
      v69 = v109;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v69 + 16) + 1, 1);
        v69 = v109;
      }
      v81 = *(_QWORD *)(v69 + 16);
      v80 = *(_QWORD *)(v69 + 24);
      if (v81 >= v80 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
        v69 = v109;
      }
      *(_QWORD *)(v69 + 16) = v81 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v11, v69+ ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))+ *(_QWORD *)(v102 + 72) * v81, type metadata accessor for RejectedHandPB);
      v70 += v108;
      --v68;
    }
    while (v68);
    swift_bridgeObjectRelease();
    a1 = v99;
  }
  result = swift_bridgeObjectRelease();
  a1[2] = v69;
  return result;
}

uint64_t RejectedHand.handDescriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TrackingUpdateDataPB(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
}

uint64_t RejectedHand.handDescriptor.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of HandDescriptor(a1, v1);
}

uint64_t outlined assign with take of HandDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*RejectedHand.handDescriptor.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t RejectedHand.reason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for RejectedHand();
  v4 = (uint64_t *)(v1 + *(int *)(result + 20));
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t type metadata accessor for RejectedHand()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RejectedHand;
  if (!type metadata singleton initialization cache for RejectedHand)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t RejectedHand.reason.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for RejectedHand();
  v5 = v1 + *(int *)(result + 20);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  return result;
}

uint64_t (*RejectedHand.reason.modify())(_QWORD)
{
  type metadata accessor for RejectedHand();
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance RejectedHand@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = type metadata accessor for HandDescriptorPB(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  v10 = type metadata accessor for RejectedHandPB(0);
  UnknownStorage.init()();
  v11 = a2 + *(int *)(v10 + 24);
  v12 = type metadata accessor for BasicHandDescriptorPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a2 + *(int *)(v10 + 28);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v14(v13, 1, 1, v5);
  HandDescriptor.toProtoBuf()((uint64_t)v9);
  outlined destroy of Coordinate3DPB?(v13, &demangling cache variable for type metadata for HandDescriptorPB?);
  outlined init with take of Matrix2dPB((uint64_t)v9, v13, type metadata accessor for HandDescriptorPB);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14)(v13, 0, 1, v5);
  v16 = (uint64_t *)(v2 + *(int *)(a1 + 20));
  v17 = *v16;
  LOBYTE(v16) = *((_BYTE *)v16 + 8);
  *(_QWORD *)a2 = v17;
  *(_BYTE *)(a2 + 8) = (_BYTE)v16;
  return result;
}

uint64_t HandsKitDataInternal.detectionSpecItems.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandsKitDataInternal.detectionSpecItems.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*HandsKitDataInternal.detectionSpecItems.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitDataInternal.trackingInfos.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t HandsKitDataInternal.trackingInfos.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*HandsKitDataInternal.trackingInfos.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitDataInternal.trackingInInitialState.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t HandsKitDataInternal.trackingInInitialState.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*HandsKitDataInternal.trackingInInitialState.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitDataInternal.scheduling.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 16) = v2;
  return swift_bridgeObjectRetain();
}

__n128 HandsKitDataInternal.scheduling.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  v1[2] = v4;
  v1[3].n128_u64[0] = v2;
  return result;
}

uint64_t (*HandsKitDataInternal.scheduling.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitDataInternal.rejectedHands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandsKitDataInternal.rejectedHands.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*HandsKitDataInternal.rejectedHands.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in RejectedHand()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in HandsKitDataInternal()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
}

uint64_t initializeBufferWithCopyOfBuffer for RejectedHand(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(_QWORD *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(_BYTE *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  void (*v169)(char *, char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 *v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *__dsta;
  _BYTE *__dst;
  char *v184;
  uint64_t v185;
  void (*v186)(char *, char *, uint64_t);
  int *v187;
  char *v188;
  int *v190;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v6 = a2[2];
    if (v6)
    {
      v7 = a2[3];
      *(_QWORD *)(v4 + 16) = v6;
      *(_QWORD *)(v4 + 24) = v7;
      v8 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v4 + 48) = v8;
      v9 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 80) = v9;
      v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(v4 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 112) = v10;
      *(_BYTE *)(v4 + 128) = *((_BYTE *)a2 + 128);
      *(_BYTE *)(v4 + 129) = *((_BYTE *)a2 + 129);
      *(_DWORD *)(v4 + 132) = *((_DWORD *)a2 + 33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 96) = v12;
      *(_OWORD *)(v4 + 112) = *((_OWORD *)a2 + 7);
      *(_QWORD *)(v4 + 128) = a2[16];
      v13 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v4 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v4 + 32) = v13;
      v14 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 64) = v14;
    }
    v15 = a2[25];
    *(_BYTE *)(v4 + 136) = *((_BYTE *)a2 + 136);
    *(_WORD *)(v4 + 137) = *(_WORD *)((char *)a2 + 137);
    *(_QWORD *)(v4 + 144) = a2[18];
    v16 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(v4 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v4 + 176) = v16;
    *(_BYTE *)(v4 + 192) = *((_BYTE *)a2 + 192);
    if (v15)
    {
      v17 = a2[26];
      *(_QWORD *)(v4 + 200) = v15;
      *(_QWORD *)(v4 + 208) = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v4 + 200) = *(_OWORD *)(a2 + 25);
    }
    *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 27);
    *(_DWORD *)(v4 + 232) = *((_DWORD *)a2 + 58);
    *(_BYTE *)(v4 + 236) = *((_BYTE *)a2 + 236);
    *(_QWORD *)(v4 + 240) = a2[30];
    *(_DWORD *)(v4 + 248) = *((_DWORD *)a2 + 62);
    *(_QWORD *)(v4 + 256) = a2[32];
    *(_DWORD *)(v4 + 264) = *((_DWORD *)a2 + 66);
    *(_BYTE *)(v4 + 268) = *((_BYTE *)a2 + 268);
    *(_DWORD *)(v4 + 272) = *((_DWORD *)a2 + 68);
    *(_DWORD *)(v4 + 276) = *((_DWORD *)a2 + 69);
    *(_WORD *)(v4 + 280) = *((_WORD *)a2 + 140);
    v18 = (int *)type metadata accessor for HandDescriptor();
    v19 = v18[17];
    v20 = (char *)(v4 + v19);
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    v190 = v18;
    if (v24(v21, 1, v22))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = type metadata accessor for UnknownStorage();
      v186 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      v186(v20, v21, v26);
      v27 = *(int *)(v22 + 20);
      v28 = &v20[v27];
      v29 = &v21[v27];
      v30 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v28 = *(_QWORD *)v29;
        v33 = *(int *)(v30 + 20);
        __dsta = &v29[v33];
        v184 = &v28[v33];
        swift_bridgeObjectRetain();
        v186(v184, __dsta, v26);
        v34 = *(int *)(v30 + 24);
        v35 = &v28[v34];
        v36 = &v29[v34];
        *(_DWORD *)v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      v18 = v190;
    }
    *(_QWORD *)(v4 + v18[18]) = *(uint64_t *)((char *)a2 + v18[18]);
    v37 = v18[19];
    v38 = v4 + v37;
    v39 = (uint64_t)a2 + v37;
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *(_BYTE *)(v38 + 16) = *(_BYTE *)(v39 + 16);
    v40 = v18[20];
    v41 = v4 + v40;
    v42 = (uint64_t)a2 + v40;
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *(_BYTE *)(v41 + 16) = *(_BYTE *)(v42 + 16);
    v43 = v18[21];
    v44 = v4 + v43;
    v45 = (uint64_t)a2 + v43;
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
    v46 = v18[22];
    v47 = v4 + v46;
    v48 = (uint64_t)a2 + v46;
    *(_BYTE *)(v47 + 64) = *(_BYTE *)(v48 + 64);
    v49 = *(_OWORD *)(v48 + 48);
    *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
    *(_OWORD *)(v47 + 48) = v49;
    v50 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *(_OWORD *)(v47 + 16) = v50;
    *(_QWORD *)(v4 + v18[23]) = *(uint64_t *)((char *)a2 + v18[23]);
    v51 = v18[24];
    v52 = (_QWORD *)(v4 + v51);
    v53 = (uint64_t *)((char *)a2 + v51);
    v54 = type metadata accessor for HandDescriptorInternal();
    v55 = *(_QWORD *)(v54 - 8);
    v56 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v56(v53, 1, v54))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v185 = v55;
      v187 = (int *)v54;
      *v52 = *v53;
      *((_BYTE *)v52 + 8) = *((_BYTE *)v53 + 8);
      v58 = v53[6];
      swift_bridgeObjectRetain();
      if (v58)
      {
        v52[2] = v53[2];
        *((_WORD *)v52 + 12) = *((_WORD *)v53 + 12);
        v52[4] = v53[4];
        *((_BYTE *)v52 + 40) = *((_BYTE *)v53 + 40);
        v59 = v53[7];
        v60 = v53[8];
        v52[6] = v58;
        v52[7] = v59;
        v62 = v53[9];
        v61 = v53[10];
        v52[8] = v60;
        v52[9] = v62;
        v52[10] = v61;
        *((_DWORD *)v52 + 22) = *((_DWORD *)v53 + 22);
        v63 = v53[13];
        v52[12] = v53[12];
        v52[13] = v63;
        *((_BYTE *)v52 + 120) = *((_BYTE *)v53 + 120);
        v52[14] = v53[14];
        *(_QWORD *)((char *)v52 + 124) = *(_QWORD *)((char *)v53 + 124);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v64 = *((_OWORD *)v53 + 6);
        *((_OWORD *)v52 + 5) = *((_OWORD *)v53 + 5);
        *((_OWORD *)v52 + 6) = v64;
        *((_OWORD *)v52 + 7) = *((_OWORD *)v53 + 7);
        *((_DWORD *)v52 + 32) = *((_DWORD *)v53 + 32);
        v65 = *((_OWORD *)v53 + 2);
        *((_OWORD *)v52 + 1) = *((_OWORD *)v53 + 1);
        *((_OWORD *)v52 + 2) = v65;
        v66 = *((_OWORD *)v53 + 4);
        *((_OWORD *)v52 + 3) = *((_OWORD *)v53 + 3);
        *((_OWORD *)v52 + 4) = v66;
      }
      v52[17] = v53[17];
      v52[18] = v53[18];
      v52[19] = v53[19];
      memcpy(v52 + 20, v53 + 20, 0x373uLL);
      v67 = v187[10];
      __dst = (char *)v52 + v67;
      v68 = (char *)v53 + v67;
      v69 = type metadata accessor for ActionInternalPB(0);
      v70 = *(_QWORD *)(v69 - 8);
      v71 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v71(v68, 1, v69))
      {
        v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
        memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        *__dst = *v68;
        v73 = *(int *)(v69 + 20);
        v74 = &__dst[v73];
        v75 = &v68[v73];
        v76 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__dst, 0, 1, v69);
      }
      v77 = v187;
      v78 = v187[11];
      v79 = (char *)v52 + v78;
      v80 = (char *)v53 + v78;
      v81 = type metadata accessor for UnsureInternalPB(0);
      v82 = *(_QWORD *)(v81 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
      {
        v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        v84 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v79, v80, v84);
        *(_QWORD *)&v79[*(int *)(v81 + 20)] = *(_QWORD *)&v80[*(int *)(v81 + 20)];
        v85 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56);
        swift_retain();
        v85(v79, 0, 1, v81);
      }
      v86 = v187[12];
      v87 = (char *)v52 + v86;
      v88 = (char *)v53 + v86;
      v89 = type metadata accessor for ObjectInteractionStateInternalPB(0);
      v90 = *(_QWORD *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        v92 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v87, v88, v92);
        *(_QWORD *)&v87[*(int *)(v89 + 20)] = *(_QWORD *)&v88[*(int *)(v89 + 20)];
        v93 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56);
        swift_retain();
        v93(v87, 0, 1, v89);
      }
      v94 = v187[13];
      v95 = (_QWORD *)((char *)v52 + v94);
      v96 = (_QWORD *)((char *)v53 + v94);
      v97 = type metadata accessor for HomePinchInternalPB(0);
      v98 = *(_QWORD *)(v97 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
      {
        v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        *v95 = *v96;
        v100 = *(int *)(v97 + 20);
        v101 = (char *)v95 + v100;
        v102 = (char *)v96 + v100;
        v103 = type metadata accessor for UnknownStorage();
        v104 = v102;
        v77 = v187;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v101, v104, v103);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      }
      *(_QWORD *)((char *)v52 + v77[14]) = *(_QWORD *)((char *)v53 + v77[14]);
      v105 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v185 + 56);
      swift_bridgeObjectRetain();
      v105(v52, 0, 1, v77);
      v18 = v190;
    }
    v106 = v18[25];
    v107 = v4 + v106;
    v108 = (uint64_t)a2 + v106;
    *(_QWORD *)v107 = *(_QWORD *)v108;
    *(_BYTE *)(v107 + 8) = *(_BYTE *)(v108 + 8);
    *(_QWORD *)(v4 + v18[26]) = *(uint64_t *)((char *)a2 + v18[26]);
    v109 = v18[27];
    v110 = v4 + v109;
    v111 = (uint64_t)a2 + v109;
    *(_BYTE *)(v110 + 8) = *(_BYTE *)(v111 + 8);
    *(_QWORD *)v110 = *(_QWORD *)v111;
    v112 = v18[28];
    v113 = v4 + v112;
    v114 = (uint64_t)a2 + v112;
    v115 = *(_OWORD *)(v114 + 16);
    *(_OWORD *)v113 = *(_OWORD *)v114;
    *(_OWORD *)(v113 + 16) = v115;
    *(_OWORD *)(v113 + 32) = *(_OWORD *)(v114 + 32);
    *(_WORD *)(v113 + 48) = *(_WORD *)(v114 + 48);
    *(_QWORD *)(v4 + v18[29]) = *(uint64_t *)((char *)a2 + v18[29]);
    v116 = v18[30];
    v117 = v4 + v116;
    v118 = (uint64_t)a2 + v116;
    *(_QWORD *)v117 = *(_QWORD *)v118;
    *(_BYTE *)(v117 + 8) = *(_BYTE *)(v118 + 8);
    v119 = v18[31];
    v120 = (_QWORD *)(v4 + v119);
    v121 = (uint64_t)a2 + v119;
    v122 = *(uint64_t *)((char *)a2 + v119);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v122)
    {
      v123 = *(_QWORD *)(v121 + 8);
      v124 = *(_QWORD *)(v121 + 16);
      *v120 = v122;
      v120[1] = v123;
      v125 = *(_QWORD *)(v121 + 24);
      v126 = *(_QWORD *)(v121 + 32);
      v120[2] = v124;
      v120[3] = v125;
      v127 = *(_QWORD *)(v121 + 40);
      v128 = *(_QWORD *)(v121 + 48);
      v120[4] = v126;
      v120[5] = v127;
      v120[6] = v128;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v129 = *(_OWORD *)(v121 + 16);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *((_OWORD *)v120 + 1) = v129;
      *((_OWORD *)v120 + 2) = *(_OWORD *)(v121 + 32);
      v120[6] = *(_QWORD *)(v121 + 48);
    }
    v130 = v190;
    v131 = v190[32];
    v132 = v4 + v131;
    v133 = (uint64_t)a2 + v131;
    v134 = *(_OWORD *)(v133 + 48);
    *(_OWORD *)(v132 + 32) = *(_OWORD *)(v133 + 32);
    *(_OWORD *)(v132 + 48) = v134;
    *(_QWORD *)(v132 + 62) = *(_QWORD *)(v133 + 62);
    v135 = *(_OWORD *)(v133 + 16);
    *(_OWORD *)v132 = *(_OWORD *)v133;
    *(_OWORD *)(v132 + 16) = v135;
    v136 = v190[33];
    v137 = v4 + v136;
    v138 = (uint64_t)a2 + v136;
    *(_QWORD *)v137 = *(_QWORD *)v138;
    *(_BYTE *)(v137 + 8) = *(_BYTE *)(v138 + 8);
    v139 = v190[34];
    v140 = v4 + v139;
    v141 = (uint64_t)a2 + v139;
    *(_DWORD *)v140 = *(_DWORD *)v141;
    *(_QWORD *)(v140 + 8) = *(_QWORD *)(v141 + 8);
    v142 = v190[35];
    v143 = v4 + v142;
    v144 = (uint64_t)a2 + v142;
    *(_DWORD *)(v143 + 64) = *(_DWORD *)((char *)a2 + v142 + 64);
    v145 = *(_OWORD *)((char *)a2 + v142 + 48);
    *(_OWORD *)(v143 + 32) = *(_OWORD *)((char *)a2 + v142 + 32);
    *(_OWORD *)(v143 + 48) = v145;
    v146 = *(_OWORD *)((char *)a2 + v142 + 16);
    *(_OWORD *)v143 = *(_OWORD *)((char *)a2 + v142);
    *(_OWORD *)(v143 + 16) = v146;
    v147 = *(_OWORD *)((char *)a2 + v142 + 128);
    *(_OWORD *)(v143 + 112) = *(_OWORD *)((char *)a2 + v142 + 112);
    *(_OWORD *)(v143 + 128) = v147;
    v148 = *(_OWORD *)((char *)a2 + v142 + 96);
    *(_OWORD *)(v143 + 80) = *(_OWORD *)((char *)a2 + v142 + 80);
    *(_OWORD *)(v143 + 96) = v148;
    v149 = (uint64_t *)((char *)a2 + v142 + 144);
    v150 = *v149;
    swift_bridgeObjectRetain();
    if (v150)
    {
      v151 = *(_QWORD *)(v144 + 152);
      *(_QWORD *)(v143 + 144) = v150;
      *(_QWORD *)(v143 + 152) = v151;
      v152 = *(_OWORD *)(v144 + 176);
      *(_OWORD *)(v143 + 160) = *(_OWORD *)(v144 + 160);
      *(_OWORD *)(v143 + 176) = v152;
      v153 = *(_OWORD *)(v144 + 208);
      *(_OWORD *)(v143 + 192) = *(_OWORD *)(v144 + 192);
      *(_OWORD *)(v143 + 208) = v153;
      v154 = *(_OWORD *)(v144 + 240);
      *(_OWORD *)(v143 + 224) = *(_OWORD *)(v144 + 224);
      *(_OWORD *)(v143 + 240) = v154;
      *(_BYTE *)(v143 + 256) = *(_BYTE *)(v144 + 256);
      *(_BYTE *)(v143 + 257) = *(_BYTE *)(v144 + 257);
      *(_DWORD *)(v143 + 260) = *(_DWORD *)(v144 + 260);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v155 = *(_OWORD *)(v144 + 224);
      *(_OWORD *)(v143 + 208) = *(_OWORD *)(v144 + 208);
      *(_OWORD *)(v143 + 224) = v155;
      *(_OWORD *)(v143 + 240) = *(_OWORD *)(v144 + 240);
      *(_QWORD *)(v143 + 256) = *(_QWORD *)(v144 + 256);
      v156 = *(_OWORD *)(v144 + 160);
      *(_OWORD *)(v143 + 144) = *(_OWORD *)v149;
      *(_OWORD *)(v143 + 160) = v156;
      v157 = *(_OWORD *)(v144 + 192);
      *(_OWORD *)(v143 + 176) = *(_OWORD *)(v144 + 176);
      *(_OWORD *)(v143 + 192) = v157;
    }
    v158 = *(_QWORD *)(v144 + 272);
    *(_QWORD *)(v143 + 264) = *(_QWORD *)(v144 + 264);
    *(_QWORD *)(v143 + 272) = v158;
    v159 = v190[36];
    v160 = (_QWORD *)(v4 + v159);
    v161 = (uint64_t *)((char *)a2 + v159);
    v162 = type metadata accessor for PartialHandMultiCam(0);
    v163 = *(_QWORD *)(v162 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
    {
      v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
      memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    }
    else
    {
      v165 = v161[1];
      *v160 = *v161;
      v160[1] = v165;
      v166 = *(int *)(v162 + 24);
      v188 = (char *)v160 + v166;
      v167 = (char *)v161 + v166;
      v168 = type metadata accessor for UnknownStorage();
      v169 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v130 = v190;
      v169(v188, v167, v168);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
    }
    v170 = v130[37];
    v171 = v4 + v170;
    v172 = (uint64_t)a2 + v170;
    *(_QWORD *)v171 = *(_QWORD *)v172;
    *(_BYTE *)(v171 + 8) = *(_BYTE *)(v172 + 8);
    v173 = v130[38];
    v174 = v4 + v173;
    v175 = (__int128 *)((char *)a2 + v173);
    *(_QWORD *)(v174 + 45) = *(_QWORD *)((char *)v175 + 45);
    v176 = v175[2];
    v177 = *v175;
    *(_OWORD *)(v174 + 16) = v175[1];
    *(_OWORD *)(v174 + 32) = v176;
    *(_OWORD *)v174 = v177;
    v178 = *(int *)(a3 + 20);
    v179 = v4 + v178;
    v180 = (uint64_t)a2 + v178;
    *(_QWORD *)v179 = *(_QWORD *)v180;
    *(_BYTE *)(v179 + 8) = *(_BYTE *)(v180 + 8);
  }
  return v4;
}

uint64_t destroy for RejectedHand(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 200))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for HandDescriptor();
  v3 = a1 + v2[17];
  v4 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
  {
    v5 = type metadata accessor for UnknownStorage();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v6(v3, v5);
    v7 = v3 + *(int *)(v4 + 20);
    v8 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      swift_bridgeObjectRelease();
      v6(v7 + *(int *)(v8 + 20), v5);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + v2[24];
  v10 = (int *)type metadata accessor for HandDescriptorInternal();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v9 + 48))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v9 + v10[10];
    v12 = type metadata accessor for ActionInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
    {
      v13 = v11 + *(int *)(v12 + 20);
      v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    }
    v15 = v9 + v10[11];
    v16 = type metadata accessor for UnsureInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
    {
      v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
      swift_release();
    }
    v18 = v9 + v10[12];
    v19 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
    {
      v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
      swift_release();
    }
    v21 = v9 + v10[13];
    v22 = type metadata accessor for HomePinchInternalPB(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
    {
      v23 = v21 + *(int *)(v22 + 20);
      v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + v2[31]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + v2[35] + 144))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v25 = a1 + v2[36];
  v26 = type metadata accessor for PartialHandMultiCam(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = v25 + *(int *)(v26 + 24);
    v29 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
  }
  return result;
}

uint64_t initializeWithCopy for RejectedHand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(_QWORD *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(_BYTE *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  void (*v103)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *__dsta;
  _BYTE *__dst;
  char *v182;
  uint64_t v183;
  void (*v184)(char *, char *, uint64_t);
  int *v185;
  char *v186;
  int *v188;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    v9 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v9;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v11 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v11;
    v12 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v12;
  }
  v13 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v14 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v14;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  if (v13)
  {
    v15 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v13;
    *(_QWORD *)(a1 + 208) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  v16 = (int *)type metadata accessor for HandDescriptor();
  v17 = v16[17];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  v188 = v16;
  if (v22(v19, 1, v20))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = type metadata accessor for UnknownStorage();
    v184 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v184(v18, v19, v24);
    v25 = *(int *)(v20 + 20);
    v26 = &v18[v25];
    v27 = &v19[v25];
    v28 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v31 = *(int *)(v28 + 20);
      __dsta = &v27[v31];
      v182 = &v26[v31];
      swift_bridgeObjectRetain();
      v184(v182, __dsta, v24);
      v32 = *(int *)(v28 + 24);
      v33 = &v26[v32];
      v34 = &v27[v32];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    v16 = v188;
  }
  *(_QWORD *)(a1 + v16[18]) = *(_QWORD *)(a2 + v16[18]);
  v35 = v16[19];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  v38 = v16[20];
  v39 = a1 + v38;
  v40 = a2 + v38;
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_BYTE *)(v39 + 16) = *(_BYTE *)(v40 + 16);
  v41 = v16[21];
  v42 = a1 + v41;
  v43 = a2 + v41;
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
  v44 = v16[22];
  v45 = a1 + v44;
  v46 = a2 + v44;
  *(_BYTE *)(v45 + 64) = *(_BYTE *)(v46 + 64);
  v47 = *(_OWORD *)(v46 + 48);
  *(_OWORD *)(v45 + 32) = *(_OWORD *)(v46 + 32);
  *(_OWORD *)(v45 + 48) = v47;
  v48 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v48;
  *(_QWORD *)(a1 + v16[23]) = *(_QWORD *)(a2 + v16[23]);
  v49 = v16[24];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (_QWORD *)(a2 + v49);
  v52 = type metadata accessor for HandDescriptorInternal();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v53 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v54(v51, 1, v52))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v183 = v53;
    v185 = (int *)v52;
    *v50 = *v51;
    *((_BYTE *)v50 + 8) = *((_BYTE *)v51 + 8);
    v56 = v51[6];
    swift_bridgeObjectRetain();
    if (v56)
    {
      v50[2] = v51[2];
      *((_WORD *)v50 + 12) = *((_WORD *)v51 + 12);
      v50[4] = v51[4];
      *((_BYTE *)v50 + 40) = *((_BYTE *)v51 + 40);
      v57 = v51[7];
      v58 = v51[8];
      v50[6] = v56;
      v50[7] = v57;
      v60 = v51[9];
      v59 = v51[10];
      v50[8] = v58;
      v50[9] = v60;
      v50[10] = v59;
      *((_DWORD *)v50 + 22) = *((_DWORD *)v51 + 22);
      v61 = v51[13];
      v50[12] = v51[12];
      v50[13] = v61;
      *((_BYTE *)v50 + 120) = *((_BYTE *)v51 + 120);
      v50[14] = v51[14];
      *(_QWORD *)((char *)v50 + 124) = *(_QWORD *)((char *)v51 + 124);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v62 = *((_OWORD *)v51 + 6);
      *((_OWORD *)v50 + 5) = *((_OWORD *)v51 + 5);
      *((_OWORD *)v50 + 6) = v62;
      *((_OWORD *)v50 + 7) = *((_OWORD *)v51 + 7);
      *((_DWORD *)v50 + 32) = *((_DWORD *)v51 + 32);
      v63 = *((_OWORD *)v51 + 2);
      *((_OWORD *)v50 + 1) = *((_OWORD *)v51 + 1);
      *((_OWORD *)v50 + 2) = v63;
      v64 = *((_OWORD *)v51 + 4);
      *((_OWORD *)v50 + 3) = *((_OWORD *)v51 + 3);
      *((_OWORD *)v50 + 4) = v64;
    }
    v50[17] = v51[17];
    v50[18] = v51[18];
    v50[19] = v51[19];
    memcpy(v50 + 20, v51 + 20, 0x373uLL);
    v65 = v185[10];
    __dst = (char *)v50 + v65;
    v66 = (char *)v51 + v65;
    v67 = type metadata accessor for ActionInternalPB(0);
    v68 = *(_QWORD *)(v67 - 8);
    v69 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v68 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v69(v66, 1, v67))
    {
      v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(__dst, v66, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      *__dst = *v66;
      v71 = *(int *)(v67 + 20);
      v72 = &__dst[v71];
      v73 = &v66[v71];
      v74 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(__dst, 0, 1, v67);
    }
    v75 = v185;
    v76 = v185[11];
    v77 = (char *)v50 + v76;
    v78 = (char *)v51 + v76;
    v79 = type metadata accessor for UnsureInternalPB(0);
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      v82 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v77, v78, v82);
      *(_QWORD *)&v77[*(int *)(v79 + 20)] = *(_QWORD *)&v78[*(int *)(v79 + 20)];
      v83 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56);
      swift_retain();
      v83(v77, 0, 1, v79);
    }
    v84 = v185[12];
    v85 = (char *)v50 + v84;
    v86 = (char *)v51 + v84;
    v87 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v88 = *(_QWORD *)(v87 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
    {
      v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
    else
    {
      v90 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v85, v86, v90);
      *(_QWORD *)&v85[*(int *)(v87 + 20)] = *(_QWORD *)&v86[*(int *)(v87 + 20)];
      v91 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56);
      swift_retain();
      v91(v85, 0, 1, v87);
    }
    v92 = v185[13];
    v93 = (_QWORD *)((char *)v50 + v92);
    v94 = (_QWORD *)((char *)v51 + v92);
    v95 = type metadata accessor for HomePinchInternalPB(0);
    v96 = *(_QWORD *)(v95 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
    {
      v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      *v93 = *v94;
      v98 = *(int *)(v95 + 20);
      v99 = (char *)v93 + v98;
      v100 = (char *)v94 + v98;
      v101 = type metadata accessor for UnknownStorage();
      v102 = v100;
      v75 = v185;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v102, v101);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
    }
    *(_QWORD *)((char *)v50 + v75[14]) = *(_QWORD *)((char *)v51 + v75[14]);
    v103 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v183 + 56);
    swift_bridgeObjectRetain();
    v103(v50, 0, 1, v75);
    v16 = v188;
  }
  v104 = v16[25];
  v105 = a1 + v104;
  v106 = a2 + v104;
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *(_BYTE *)(v105 + 8) = *(_BYTE *)(v106 + 8);
  *(_QWORD *)(a1 + v16[26]) = *(_QWORD *)(a2 + v16[26]);
  v107 = v16[27];
  v108 = a1 + v107;
  v109 = a2 + v107;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  *(_QWORD *)v108 = *(_QWORD *)v109;
  v110 = v16[28];
  v111 = a1 + v110;
  v112 = a2 + v110;
  v113 = *(_OWORD *)(v112 + 16);
  *(_OWORD *)v111 = *(_OWORD *)v112;
  *(_OWORD *)(v111 + 16) = v113;
  *(_OWORD *)(v111 + 32) = *(_OWORD *)(v112 + 32);
  *(_WORD *)(v111 + 48) = *(_WORD *)(v112 + 48);
  *(_QWORD *)(a1 + v16[29]) = *(_QWORD *)(a2 + v16[29]);
  v114 = v16[30];
  v115 = a1 + v114;
  v116 = a2 + v114;
  *(_QWORD *)v115 = *(_QWORD *)v116;
  *(_BYTE *)(v115 + 8) = *(_BYTE *)(v116 + 8);
  v117 = v16[31];
  v118 = (_QWORD *)(a1 + v117);
  v119 = a2 + v117;
  v120 = *(_QWORD *)(a2 + v117);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v120)
  {
    v121 = *(_QWORD *)(v119 + 8);
    v122 = *(_QWORD *)(v119 + 16);
    *v118 = v120;
    v118[1] = v121;
    v123 = *(_QWORD *)(v119 + 24);
    v124 = *(_QWORD *)(v119 + 32);
    v118[2] = v122;
    v118[3] = v123;
    v125 = *(_QWORD *)(v119 + 40);
    v126 = *(_QWORD *)(v119 + 48);
    v118[4] = v124;
    v118[5] = v125;
    v118[6] = v126;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v127 = *(_OWORD *)(v119 + 16);
    *(_OWORD *)v118 = *(_OWORD *)v119;
    *((_OWORD *)v118 + 1) = v127;
    *((_OWORD *)v118 + 2) = *(_OWORD *)(v119 + 32);
    v118[6] = *(_QWORD *)(v119 + 48);
  }
  v128 = v188;
  v129 = v188[32];
  v130 = a1 + v129;
  v131 = a2 + v129;
  v132 = *(_OWORD *)(v131 + 48);
  *(_OWORD *)(v130 + 32) = *(_OWORD *)(v131 + 32);
  *(_OWORD *)(v130 + 48) = v132;
  *(_QWORD *)(v130 + 62) = *(_QWORD *)(v131 + 62);
  v133 = *(_OWORD *)(v131 + 16);
  *(_OWORD *)v130 = *(_OWORD *)v131;
  *(_OWORD *)(v130 + 16) = v133;
  v134 = v188[33];
  v135 = a1 + v134;
  v136 = a2 + v134;
  *(_QWORD *)v135 = *(_QWORD *)v136;
  *(_BYTE *)(v135 + 8) = *(_BYTE *)(v136 + 8);
  v137 = v188[34];
  v138 = a1 + v137;
  v139 = a2 + v137;
  *(_DWORD *)v138 = *(_DWORD *)v139;
  *(_QWORD *)(v138 + 8) = *(_QWORD *)(v139 + 8);
  v140 = v188[35];
  v141 = a1 + v140;
  v142 = a2 + v140;
  *(_DWORD *)(v141 + 64) = *(_DWORD *)(a2 + v140 + 64);
  v143 = *(_OWORD *)(a2 + v140 + 48);
  *(_OWORD *)(v141 + 32) = *(_OWORD *)(a2 + v140 + 32);
  *(_OWORD *)(v141 + 48) = v143;
  v144 = *(_OWORD *)(a2 + v140 + 16);
  *(_OWORD *)v141 = *(_OWORD *)(a2 + v140);
  *(_OWORD *)(v141 + 16) = v144;
  v145 = *(_OWORD *)(a2 + v140 + 128);
  *(_OWORD *)(v141 + 112) = *(_OWORD *)(a2 + v140 + 112);
  *(_OWORD *)(v141 + 128) = v145;
  v146 = *(_OWORD *)(a2 + v140 + 96);
  *(_OWORD *)(v141 + 80) = *(_OWORD *)(a2 + v140 + 80);
  *(_OWORD *)(v141 + 96) = v146;
  v147 = (uint64_t *)(a2 + v140 + 144);
  v148 = *v147;
  swift_bridgeObjectRetain();
  if (v148)
  {
    v149 = *(_QWORD *)(v142 + 152);
    *(_QWORD *)(v141 + 144) = v148;
    *(_QWORD *)(v141 + 152) = v149;
    v150 = *(_OWORD *)(v142 + 176);
    *(_OWORD *)(v141 + 160) = *(_OWORD *)(v142 + 160);
    *(_OWORD *)(v141 + 176) = v150;
    v151 = *(_OWORD *)(v142 + 208);
    *(_OWORD *)(v141 + 192) = *(_OWORD *)(v142 + 192);
    *(_OWORD *)(v141 + 208) = v151;
    v152 = *(_OWORD *)(v142 + 240);
    *(_OWORD *)(v141 + 224) = *(_OWORD *)(v142 + 224);
    *(_OWORD *)(v141 + 240) = v152;
    *(_BYTE *)(v141 + 256) = *(_BYTE *)(v142 + 256);
    *(_BYTE *)(v141 + 257) = *(_BYTE *)(v142 + 257);
    *(_DWORD *)(v141 + 260) = *(_DWORD *)(v142 + 260);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v153 = *(_OWORD *)(v142 + 224);
    *(_OWORD *)(v141 + 208) = *(_OWORD *)(v142 + 208);
    *(_OWORD *)(v141 + 224) = v153;
    *(_OWORD *)(v141 + 240) = *(_OWORD *)(v142 + 240);
    *(_QWORD *)(v141 + 256) = *(_QWORD *)(v142 + 256);
    v154 = *(_OWORD *)(v142 + 160);
    *(_OWORD *)(v141 + 144) = *(_OWORD *)v147;
    *(_OWORD *)(v141 + 160) = v154;
    v155 = *(_OWORD *)(v142 + 192);
    *(_OWORD *)(v141 + 176) = *(_OWORD *)(v142 + 176);
    *(_OWORD *)(v141 + 192) = v155;
  }
  v156 = *(_QWORD *)(v142 + 272);
  *(_QWORD *)(v141 + 264) = *(_QWORD *)(v142 + 264);
  *(_QWORD *)(v141 + 272) = v156;
  v157 = v188[36];
  v158 = (_QWORD *)(a1 + v157);
  v159 = (_QWORD *)(a2 + v157);
  v160 = type metadata accessor for PartialHandMultiCam(0);
  v161 = *(_QWORD *)(v160 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160))
  {
    v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
  }
  else
  {
    v163 = v159[1];
    *v158 = *v159;
    v158[1] = v163;
    v164 = *(int *)(v160 + 24);
    v186 = (char *)v158 + v164;
    v165 = (char *)v159 + v164;
    v166 = type metadata accessor for UnknownStorage();
    v167 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v128 = v188;
    v167(v186, v165, v166);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
  }
  v168 = v128[37];
  v169 = a1 + v168;
  v170 = a2 + v168;
  *(_QWORD *)v169 = *(_QWORD *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  v171 = v128[38];
  v172 = a1 + v171;
  v173 = (__int128 *)(a2 + v171);
  *(_QWORD *)(v172 + 45) = *(_QWORD *)((char *)v173 + 45);
  v174 = v173[2];
  v175 = *v173;
  *(_OWORD *)(v172 + 16) = v173[1];
  *(_OWORD *)(v172 + 32) = v174;
  *(_OWORD *)v172 = v175;
  v176 = *(int *)(a3 + 20);
  v177 = a1 + v176;
  v178 = a2 + v176;
  *(_QWORD *)v177 = *(_QWORD *)v178;
  *(_BYTE *)(v177 + 8) = *(_BYTE *)(v178 + 8);
  return a1;
}

uint64_t assignWithCopy for RejectedHand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(_BYTE *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  void (*v155)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  _BYTE *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(_BYTE *, uint64_t, uint64_t);
  int v180;
  int v181;
  uint64_t v182;
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(char *, uint64_t, uint64_t);
  int v193;
  int v194;
  uint64_t v195;
  void (*v196)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t (*v203)(char *, uint64_t, uint64_t);
  int v204;
  int v205;
  uint64_t v206;
  void (*v207)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t (*v214)(_QWORD *, uint64_t, uint64_t);
  int v215;
  int v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  __int128 *v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  __int128 *v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t (*v287)(_QWORD *, uint64_t, uint64_t);
  int v288;
  int v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  void (*v293)(char *, char *, uint64_t);
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  _BYTE *v316;
  _BYTE *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  char *__dsta;
  _BYTE *__dst;
  char *v327;
  uint64_t v328;
  void (*v329)(uint64_t, char *, uint64_t);
  uint64_t v330;
  int *v331;
  int *v332;
  char *v333;
  int *v335;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (__int128 *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    }
    else
    {
      outlined destroy of HandPose(v5);
      v13 = v8[3];
      v15 = *v8;
      v14 = v8[1];
      *(_OWORD *)(v5 + 32) = v8[2];
      *(_OWORD *)(v5 + 48) = v13;
      *(_OWORD *)v5 = v15;
      *(_OWORD *)(v5 + 16) = v14;
      v17 = v8[5];
      v16 = v8[6];
      v18 = v8[4];
      *(_QWORD *)(v5 + 112) = *((_QWORD *)v8 + 14);
      *(_OWORD *)(v5 + 80) = v17;
      *(_OWORD *)(v5 + 96) = v16;
      *(_OWORD *)(v5 + 64) = v18;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    v10 = *(_OWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *v8;
    v20 = *(_OWORD *)(a2 + 32);
    v21 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v5 + 48) = v21;
    *(_OWORD *)v5 = v19;
    *(_OWORD *)(v5 + 16) = v20;
    v22 = *(_OWORD *)(a2 + 80);
    v23 = *(_OWORD *)(a2 + 96);
    v24 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(v5 + 80) = v23;
    *(_OWORD *)(v5 + 96) = v24;
    *(_OWORD *)(v5 + 64) = v22;
  }
  v25 = *(_QWORD *)(a1 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v26 = *(_OWORD *)(a2 + 160);
  v27 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v27;
  *(_OWORD *)(a1 + 160) = v26;
  v28 = *(_QWORD *)(a2 + 200);
  if (v25)
  {
    if (v28)
    {
      *(_QWORD *)(a1 + 200) = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined destroy of PoseSpec(a1 + 200);
  }
  else if (v28)
  {
    *(_QWORD *)(a1 + 200) = v28;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
LABEL_15:
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  v29 = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v29;
  v30 = *(_QWORD *)(a2 + 240);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v30;
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v31;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  v32 = *(_DWORD *)(a2 + 276);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_DWORD *)(a1 + 276) = v32;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v33 = (int *)type metadata accessor for HandDescriptor();
  v34 = v33[17];
  v35 = a1 + v34;
  v36 = (char *)(a2 + v34);
  v37 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39((uint64_t)v36, 1, v37);
  v335 = v33;
  if (!v40)
  {
    if (!v41)
    {
      v52 = type metadata accessor for UnknownStorage();
      v330 = *(_QWORD *)(v52 - 8);
      v53 = *(void (**)(uint64_t, char *, uint64_t))(v330 + 24);
      v53(v35, v36, v52);
      v54 = *(int *)(v37 + 20);
      v55 = (char *)(v35 + v54);
      v56 = &v36[v54];
      v57 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      v58 = *(_QWORD *)(v57 - 8);
      v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
      v60 = v59(v55, 1, v57);
      v61 = v59(v56, 1, v57);
      if (v60)
      {
        v33 = v335;
        if (!v61)
        {
          *(_QWORD *)v55 = *(_QWORD *)v56;
          v62 = *(int *)(v57 + 20);
          v63 = &v55[v62];
          v64 = &v56[v62];
          v65 = *(void (**)(char *, char *, uint64_t))(v330 + 16);
          swift_bridgeObjectRetain();
          v66 = v63;
          v33 = v335;
          v65(v66, v64, v52);
          v67 = *(int *)(v57 + 24);
          v68 = &v55[v67];
          v69 = &v56[v67];
          v70 = v69[4];
          *(_DWORD *)v68 = *(_DWORD *)v69;
          v68[4] = v70;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
          goto LABEL_28;
        }
      }
      else
      {
        v33 = v335;
        if (!v61)
        {
          *(_QWORD *)v55 = *(_QWORD *)v56;
          swift_bridgeObjectRetain();
          v33 = v335;
          swift_bridgeObjectRelease();
          v53((uint64_t)&v55[*(int *)(v57 + 20)], &v56[*(int *)(v57 + 20)], v52);
          v164 = *(int *)(v57 + 24);
          v165 = &v55[v164];
          v166 = &v56[v164];
          v167 = v166[4];
          *(_DWORD *)v165 = *(_DWORD *)v166;
          v165[4] = v167;
          goto LABEL_28;
        }
        outlined destroy of Matrix3x3PB((uint64_t)v55, type metadata accessor for RawThumbIndexTapFeaturesPB);
      }
      v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?)
                                  - 8)
                      + 64);
      v50 = v55;
      v51 = v56;
LABEL_22:
      memcpy(v50, v51, v49);
      goto LABEL_28;
    }
    outlined destroy of Matrix3x3PB(v35, type metadata accessor for ThumbIndexTapFeaturesPB);
LABEL_21:
    v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?)
                                - 8)
                    + 64);
    v50 = (void *)v35;
    v51 = v36;
    goto LABEL_22;
  }
  if (v41)
    goto LABEL_21;
  v42 = type metadata accessor for UnknownStorage();
  v329 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
  v329(v35, v36, v42);
  v43 = *(int *)(v37 + 20);
  v44 = (_QWORD *)(v35 + v43);
  v45 = &v36[v43];
  v46 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    *v44 = *(_QWORD *)v45;
    v71 = *(int *)(v46 + 20);
    __dsta = &v45[v71];
    v327 = (char *)v44 + v71;
    swift_bridgeObjectRetain();
    v329((uint64_t)v327, __dsta, v42);
    v72 = *(int *)(v46 + 24);
    v73 = (char *)v44 + v72;
    v74 = &v45[v72];
    v75 = v74[4];
    *(_DWORD *)v73 = *(_DWORD *)v74;
    v73[4] = v75;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v33 = v335;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_28:
  *(_QWORD *)(a1 + v33[18]) = *(_QWORD *)(a2 + v33[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v76 = v33[19];
  v77 = a1 + v76;
  v78 = (__int128 *)(a2 + v76);
  v79 = *v78;
  *(_BYTE *)(v77 + 16) = *((_BYTE *)v78 + 16);
  *(_OWORD *)v77 = v79;
  v80 = v33[20];
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_BYTE *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_BYTE *)(v81 + 16) = v83;
  v84 = v33[21];
  v85 = a1 + v84;
  v86 = a2 + v84;
  v87 = *(_BYTE *)(v86 + 16);
  *(_OWORD *)v85 = *(_OWORD *)v86;
  *(_BYTE *)(v85 + 16) = v87;
  v88 = v33[22];
  v89 = a1 + v88;
  v90 = a2 + v88;
  *(_OWORD *)v89 = *(_OWORD *)v90;
  v91 = *(_OWORD *)(v90 + 16);
  v92 = *(_OWORD *)(v90 + 32);
  v93 = *(_OWORD *)(v90 + 48);
  *(_BYTE *)(v89 + 64) = *(_BYTE *)(v90 + 64);
  *(_OWORD *)(v89 + 32) = v92;
  *(_OWORD *)(v89 + 48) = v93;
  *(_OWORD *)(v89 + 16) = v91;
  *(_QWORD *)(a1 + v33[23]) = *(_QWORD *)(a2 + v33[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v94 = v33[24];
  v95 = a1 + v94;
  v96 = a2 + v94;
  v97 = type metadata accessor for HandDescriptorInternal();
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  v100 = v99(v95, 1, v97);
  v101 = v99(v96, 1, v97);
  if (!v100)
  {
    if (v101)
    {
      outlined destroy of Matrix3x3PB(v95, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      goto LABEL_34;
    }
    *(_QWORD *)v95 = *(_QWORD *)v96;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
    v106 = (_OWORD *)(v95 + 16);
    v107 = (__int128 *)(v96 + 16);
    v108 = *(_QWORD *)(v96 + 48);
    if (*(_QWORD *)(v95 + 48))
    {
      if (v108)
      {
        *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
        *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
        *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
        *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
        v109 = *(_QWORD *)(v96 + 32);
        *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
        *(_QWORD *)(v95 + 32) = v109;
        *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
        *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
        *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v110 = *(_QWORD *)(v96 + 112);
        *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
        *(_QWORD *)(v95 + 112) = v110;
        *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
        *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      }
      else
      {
        outlined destroy of PinchInternalData(v95 + 16);
        v158 = *(_OWORD *)(v96 + 64);
        v160 = *v107;
        v159 = *(_OWORD *)(v96 + 32);
        *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
        *(_OWORD *)(v95 + 64) = v158;
        *v106 = v160;
        *(_OWORD *)(v95 + 32) = v159;
        v162 = *(_OWORD *)(v96 + 96);
        v161 = *(_OWORD *)(v96 + 112);
        v163 = *(_OWORD *)(v96 + 80);
        *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
        *(_OWORD *)(v95 + 96) = v162;
        *(_OWORD *)(v95 + 112) = v161;
        *(_OWORD *)(v95 + 80) = v163;
      }
    }
    else if (v108)
    {
      *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
      *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
      *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
      *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
      v156 = *(_QWORD *)(v96 + 32);
      *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
      *(_QWORD *)(v95 + 32) = v156;
      *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
      *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
      *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
      *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
      *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
      *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
      *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
      *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
      v157 = *(_QWORD *)(v96 + 112);
      *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
      *(_QWORD *)(v95 + 112) = v157;
      *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
      *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v168 = *v107;
      v169 = *(_OWORD *)(v96 + 32);
      v170 = *(_OWORD *)(v96 + 64);
      *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
      *(_OWORD *)(v95 + 64) = v170;
      *v106 = v168;
      *(_OWORD *)(v95 + 32) = v169;
      v171 = *(_OWORD *)(v96 + 80);
      v172 = *(_OWORD *)(v96 + 96);
      v173 = *(_OWORD *)(v96 + 112);
      *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
      *(_OWORD *)(v95 + 96) = v172;
      *(_OWORD *)(v95 + 112) = v173;
      *(_OWORD *)(v95 + 80) = v171;
    }
    *(_QWORD *)(v95 + 136) = *(_QWORD *)(v96 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v95 + 144) = *(_DWORD *)(v96 + 144);
    *(_DWORD *)(v95 + 148) = *(_DWORD *)(v96 + 148);
    *(_QWORD *)(v95 + 152) = *(_QWORD *)(v96 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    memcpy((void *)(v95 + 160), (const void *)(v96 + 160), 0x373uLL);
    v332 = (int *)v97;
    v174 = *(int *)(v97 + 40);
    v175 = (_BYTE *)(v95 + v174);
    v176 = (_BYTE *)(v96 + v174);
    v177 = type metadata accessor for ActionInternalPB(0);
    v178 = *(_QWORD *)(v177 - 8);
    v179 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v178 + 48);
    v180 = v179(v175, 1, v177);
    v181 = v179(v176, 1, v177);
    if (v180)
    {
      if (!v181)
      {
        *v175 = *v176;
        v182 = *(int *)(v177 + 20);
        v183 = &v175[v182];
        v184 = &v176[v182];
        v185 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v183, v184, v185);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v175, 0, 1, v177);
        goto LABEL_66;
      }
    }
    else
    {
      if (!v181)
      {
        *v175 = *v176;
        v315 = *(int *)(v177 + 20);
        v316 = &v175[v315];
        v317 = &v176[v315];
        v318 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v318 - 8) + 24))(v316, v317, v318);
LABEL_66:
        v187 = v332[11];
        v188 = (char *)(v95 + v187);
        v189 = (char *)(v96 + v187);
        v190 = type metadata accessor for UnsureInternalPB(0);
        v191 = *(_QWORD *)(v190 - 8);
        v192 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v191 + 48);
        v193 = v192(v188, 1, v190);
        v194 = v192(v189, 1, v190);
        if (v193)
        {
          if (!v194)
          {
            v195 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 16))(v188, v189, v195);
            *(_QWORD *)&v188[*(int *)(v190 + 20)] = *(_QWORD *)&v189[*(int *)(v190 + 20)];
            v196 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v191 + 56);
            swift_retain();
            v196(v188, 0, 1, v190);
            goto LABEL_72;
          }
        }
        else
        {
          if (!v194)
          {
            v319 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v319 - 8) + 24))(v188, v189, v319);
            *(_QWORD *)&v188[*(int *)(v190 + 20)] = *(_QWORD *)&v189[*(int *)(v190 + 20)];
            swift_retain();
            swift_release();
LABEL_72:
            v198 = v332[12];
            v199 = (char *)(v95 + v198);
            v200 = (char *)(v96 + v198);
            v201 = type metadata accessor for ObjectInteractionStateInternalPB(0);
            v202 = *(_QWORD *)(v201 - 8);
            v203 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v202 + 48);
            v204 = v203(v199, 1, v201);
            v205 = v203(v200, 1, v201);
            if (v204)
            {
              if (!v205)
              {
                v206 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v206 - 8) + 16))(v199, v200, v206);
                *(_QWORD *)&v199[*(int *)(v201 + 20)] = *(_QWORD *)&v200[*(int *)(v201 + 20)];
                v207 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56);
                swift_retain();
                v207(v199, 0, 1, v201);
                goto LABEL_78;
              }
            }
            else
            {
              if (!v205)
              {
                v320 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v320 - 8) + 24))(v199, v200, v320);
                *(_QWORD *)&v199[*(int *)(v201 + 20)] = *(_QWORD *)&v200[*(int *)(v201 + 20)];
                swift_retain();
                swift_release();
LABEL_78:
                v209 = v332[13];
                v210 = (_QWORD *)(v95 + v209);
                v211 = (_QWORD *)(v96 + v209);
                v212 = type metadata accessor for HomePinchInternalPB(0);
                v213 = *(_QWORD *)(v212 - 8);
                v214 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v213 + 48);
                v215 = v214(v210, 1, v212);
                v216 = v214(v211, 1, v212);
                if (v215)
                {
                  if (!v216)
                  {
                    *v210 = *v211;
                    v217 = *(int *)(v212 + 20);
                    v218 = (char *)v210 + v217;
                    v219 = (char *)v211 + v217;
                    v220 = type metadata accessor for UnknownStorage();
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v220 - 8) + 16))(v218, v219, v220);
                    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v210, 0, 1, v212);
LABEL_84:
                    *(_QWORD *)(v95 + v332[14]) = *(_QWORD *)(v96 + v332[14]);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v33 = v335;
                    goto LABEL_85;
                  }
                }
                else
                {
                  if (!v216)
                  {
                    *v210 = *v211;
                    v321 = *(int *)(v212 + 20);
                    v322 = (char *)v210 + v321;
                    v323 = (char *)v211 + v321;
                    v324 = type metadata accessor for UnknownStorage();
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v324 - 8) + 24))(v322, v323, v324);
                    goto LABEL_84;
                  }
                  outlined destroy of Matrix3x3PB((uint64_t)v210, type metadata accessor for HomePinchInternalPB);
                }
                v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
                memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
                goto LABEL_84;
              }
              outlined destroy of Matrix3x3PB((uint64_t)v199, type metadata accessor for ObjectInteractionStateInternalPB);
            }
            v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
            memcpy(v199, v200, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
            goto LABEL_78;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v188, type metadata accessor for UnsureInternalPB);
        }
        v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
        memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
        goto LABEL_72;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v175, type metadata accessor for ActionInternalPB);
    }
    v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
    goto LABEL_66;
  }
  if (v101)
  {
LABEL_34:
    v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy((void *)v95, (const void *)v96, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    goto LABEL_85;
  }
  v328 = v98;
  v331 = (int *)v97;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  v102 = *(_QWORD *)(v96 + 48);
  swift_bridgeObjectRetain();
  if (v102)
  {
    *(_DWORD *)(v95 + 16) = *(_DWORD *)(v96 + 16);
    *(_DWORD *)(v95 + 20) = *(_DWORD *)(v96 + 20);
    *(_BYTE *)(v95 + 24) = *(_BYTE *)(v96 + 24);
    *(_BYTE *)(v95 + 25) = *(_BYTE *)(v96 + 25);
    v103 = *(_QWORD *)(v96 + 32);
    *(_BYTE *)(v95 + 40) = *(_BYTE *)(v96 + 40);
    *(_QWORD *)(v95 + 32) = v103;
    *(_QWORD *)(v95 + 48) = *(_QWORD *)(v96 + 48);
    *(_QWORD *)(v95 + 56) = *(_QWORD *)(v96 + 56);
    *(_QWORD *)(v95 + 64) = *(_QWORD *)(v96 + 64);
    *(_QWORD *)(v95 + 72) = *(_QWORD *)(v96 + 72);
    *(_QWORD *)(v95 + 80) = *(_QWORD *)(v96 + 80);
    *(_DWORD *)(v95 + 88) = *(_DWORD *)(v96 + 88);
    *(_QWORD *)(v95 + 96) = *(_QWORD *)(v96 + 96);
    *(_QWORD *)(v95 + 104) = *(_QWORD *)(v96 + 104);
    v104 = *(_QWORD *)(v96 + 112);
    *(_BYTE *)(v95 + 120) = *(_BYTE *)(v96 + 120);
    *(_QWORD *)(v95 + 112) = v104;
    *(_DWORD *)(v95 + 124) = *(_DWORD *)(v96 + 124);
    *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v111 = *(_OWORD *)(v96 + 16);
    v112 = *(_OWORD *)(v96 + 32);
    v113 = *(_OWORD *)(v96 + 64);
    *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
    *(_OWORD *)(v95 + 64) = v113;
    *(_OWORD *)(v95 + 16) = v111;
    *(_OWORD *)(v95 + 32) = v112;
    v114 = *(_OWORD *)(v96 + 80);
    v115 = *(_OWORD *)(v96 + 96);
    v116 = *(_OWORD *)(v96 + 112);
    *(_DWORD *)(v95 + 128) = *(_DWORD *)(v96 + 128);
    *(_OWORD *)(v95 + 96) = v115;
    *(_OWORD *)(v95 + 112) = v116;
    *(_OWORD *)(v95 + 80) = v114;
  }
  *(_QWORD *)(v95 + 136) = *(_QWORD *)(v96 + 136);
  *(_DWORD *)(v95 + 144) = *(_DWORD *)(v96 + 144);
  *(_DWORD *)(v95 + 148) = *(_DWORD *)(v96 + 148);
  *(_QWORD *)(v95 + 152) = *(_QWORD *)(v96 + 152);
  memcpy((void *)(v95 + 160), (const void *)(v96 + 160), 0x373uLL);
  v117 = *(int *)(v97 + 40);
  __dst = (_BYTE *)(v95 + v117);
  v118 = (_BYTE *)(v96 + v117);
  v119 = type metadata accessor for ActionInternalPB(0);
  v120 = *(_QWORD *)(v119 - 8);
  v121 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v120 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v121(v118, 1, v119))
  {
    v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(__dst, v118, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
  }
  else
  {
    *__dst = *v118;
    v123 = *(int *)(v119 + 20);
    v124 = &__dst[v123];
    v125 = &v118[v123];
    v126 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v124, v125, v126);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v120 + 56))(__dst, 0, 1, v119);
  }
  v127 = v331;
  v128 = v331[11];
  v129 = (char *)(v95 + v128);
  v130 = (char *)(v96 + v128);
  v131 = type metadata accessor for UnsureInternalPB(0);
  v132 = *(_QWORD *)(v131 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
  {
    v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
  }
  else
  {
    v134 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(v129, v130, v134);
    *(_QWORD *)&v129[*(int *)(v131 + 20)] = *(_QWORD *)&v130[*(int *)(v131 + 20)];
    v135 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56);
    swift_retain();
    v135(v129, 0, 1, v131);
  }
  v136 = v331[12];
  v137 = (char *)(v95 + v136);
  v138 = (char *)(v96 + v136);
  v139 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v140 = *(_QWORD *)(v139 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
  {
    v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
  }
  else
  {
    v142 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16))(v137, v138, v142);
    *(_QWORD *)&v137[*(int *)(v139 + 20)] = *(_QWORD *)&v138[*(int *)(v139 + 20)];
    v143 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56);
    swift_retain();
    v143(v137, 0, 1, v139);
  }
  v144 = v331[13];
  v145 = (_QWORD *)(v95 + v144);
  v146 = (_QWORD *)(v96 + v144);
  v147 = type metadata accessor for HomePinchInternalPB(0);
  v148 = *(_QWORD *)(v147 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
  {
    v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
  }
  else
  {
    *v145 = *v146;
    v150 = *(int *)(v147 + 20);
    v151 = (char *)v145 + v150;
    v152 = (char *)v146 + v150;
    v153 = type metadata accessor for UnknownStorage();
    v154 = v152;
    v127 = v331;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v151, v154, v153);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
  }
  v33 = v335;
  *(_QWORD *)(v95 + v127[14]) = *(_QWORD *)(v96 + v127[14]);
  v155 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v328 + 56);
  swift_bridgeObjectRetain();
  v155(v95, 0, 1, v127);
LABEL_85:
  v222 = v33[25];
  v223 = a1 + v222;
  v224 = (uint64_t *)(a2 + v222);
  v225 = *v224;
  *(_BYTE *)(v223 + 8) = *((_BYTE *)v224 + 8);
  *(_QWORD *)v223 = v225;
  *(_QWORD *)(a1 + v33[26]) = *(_QWORD *)(a2 + v33[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v226 = v33[27];
  v227 = a1 + v226;
  v228 = (uint64_t *)(a2 + v226);
  v229 = *v228;
  *(_BYTE *)(v227 + 8) = *((_BYTE *)v228 + 8);
  *(_QWORD *)v227 = v229;
  v230 = v33[28];
  v231 = a1 + v230;
  v232 = (__int128 *)(a2 + v230);
  v234 = v232[1];
  v233 = v232[2];
  v235 = *v232;
  *(_WORD *)(v231 + 48) = *((_WORD *)v232 + 24);
  *(_OWORD *)(v231 + 16) = v234;
  *(_OWORD *)(v231 + 32) = v233;
  *(_OWORD *)v231 = v235;
  *(_QWORD *)(a1 + v33[29]) = *(_QWORD *)(a2 + v33[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v236 = v33[30];
  v237 = a1 + v236;
  v238 = (uint64_t *)(a2 + v236);
  v239 = *v238;
  *(_BYTE *)(v237 + 8) = *((_BYTE *)v238 + 8);
  *(_QWORD *)v237 = v239;
  v240 = v33[31];
  v241 = (_QWORD *)(a1 + v240);
  v242 = (__int128 *)(a2 + v240);
  v243 = *(_QWORD *)(a2 + v240);
  if (*(_QWORD *)(a1 + v240))
  {
    if (v243)
    {
      *v241 = v243;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[1] = *((_QWORD *)v242 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[2] = *((_QWORD *)v242 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[3] = *((_QWORD *)v242 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[4] = *((_QWORD *)v242 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[5] = *((_QWORD *)v242 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v241[6] = *((_QWORD *)v242 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ObjectInteractionData(a1 + v240);
      v245 = v242[1];
      v244 = v242[2];
      v246 = *v242;
      v241[6] = *((_QWORD *)v242 + 6);
      *((_OWORD *)v241 + 1) = v245;
      *((_OWORD *)v241 + 2) = v244;
      *(_OWORD *)v241 = v246;
    }
  }
  else if (v243)
  {
    *v241 = v243;
    v241[1] = *((_QWORD *)v242 + 1);
    v241[2] = *((_QWORD *)v242 + 2);
    v241[3] = *((_QWORD *)v242 + 3);
    v241[4] = *((_QWORD *)v242 + 4);
    v241[5] = *((_QWORD *)v242 + 5);
    v241[6] = *((_QWORD *)v242 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = v335;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v247 = *v242;
    v248 = v242[1];
    v249 = v242[2];
    v241[6] = *((_QWORD *)v242 + 6);
    *((_OWORD *)v241 + 1) = v248;
    *((_OWORD *)v241 + 2) = v249;
    *(_OWORD *)v241 = v247;
  }
  v250 = v33[32];
  v251 = a1 + v250;
  v252 = a2 + v250;
  *(_QWORD *)v251 = *(_QWORD *)v252;
  *(_DWORD *)(v251 + 8) = *(_DWORD *)(v252 + 8);
  *(_DWORD *)(v251 + 12) = *(_DWORD *)(v252 + 12);
  *(_QWORD *)(v251 + 16) = *(_QWORD *)(v252 + 16);
  *(_OWORD *)(v251 + 32) = *(_OWORD *)(v252 + 32);
  *(_QWORD *)(v251 + 48) = *(_QWORD *)(v252 + 48);
  *(_BYTE *)(v251 + 56) = *(_BYTE *)(v252 + 56);
  *(_DWORD *)(v251 + 60) = *(_DWORD *)(v252 + 60);
  *(_DWORD *)(v251 + 64) = *(_DWORD *)(v252 + 64);
  *(_BYTE *)(v251 + 68) = *(_BYTE *)(v252 + 68);
  *(_BYTE *)(v251 + 69) = *(_BYTE *)(v252 + 69);
  v253 = v33[33];
  v254 = a1 + v253;
  v255 = (uint64_t *)(a2 + v253);
  v256 = *v255;
  *(_BYTE *)(v254 + 8) = *((_BYTE *)v255 + 8);
  *(_QWORD *)v254 = v256;
  v257 = v33[34];
  v258 = a1 + v257;
  v259 = a2 + v257;
  *(_DWORD *)v258 = *(_DWORD *)v259;
  *(_QWORD *)(v258 + 8) = *(_QWORD *)(v259 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v260 = v33[35];
  v261 = a1 + v260;
  v262 = a2 + v260;
  *(_OWORD *)v261 = *(_OWORD *)(a2 + v260);
  *(_OWORD *)(v261 + 16) = *(_OWORD *)(a2 + v260 + 16);
  *(_OWORD *)(v261 + 32) = *(_OWORD *)(a2 + v260 + 32);
  *(_OWORD *)(v261 + 48) = *(_OWORD *)(a2 + v260 + 48);
  *(_DWORD *)(v261 + 64) = *(_DWORD *)(a2 + v260 + 64);
  *(_OWORD *)(v261 + 80) = *(_OWORD *)(a2 + v260 + 80);
  *(_OWORD *)(v261 + 96) = *(_OWORD *)(a2 + v260 + 96);
  *(_OWORD *)(v261 + 112) = *(_OWORD *)(a2 + v260 + 112);
  *(_OWORD *)(v261 + 128) = *(_OWORD *)(a2 + v260 + 128);
  v263 = a1 + v260 + 144;
  v265 = a2 + v260 + 144;
  v264 = *(_QWORD *)v265;
  if (*(_QWORD *)v263)
  {
    if (v264)
    {
      *(_QWORD *)(v261 + 144) = v264;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v261 + 152) = *(_QWORD *)(v262 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(v261 + 160) = *(_OWORD *)(v262 + 160);
      *(_OWORD *)(v261 + 176) = *(_OWORD *)(v262 + 176);
      *(_OWORD *)(v261 + 192) = *(_OWORD *)(v262 + 192);
      *(_OWORD *)(v261 + 208) = *(_OWORD *)(v262 + 208);
      *(_OWORD *)(v261 + 224) = *(_OWORD *)(v262 + 224);
      *(_OWORD *)(v261 + 240) = *(_OWORD *)(v262 + 240);
      *(_BYTE *)(v261 + 256) = *(_BYTE *)(v262 + 256);
      *(_BYTE *)(v261 + 257) = *(_BYTE *)(v262 + 257);
      *(_DWORD *)(v261 + 260) = *(_DWORD *)(v262 + 260);
    }
    else
    {
      outlined destroy of HandPose(a1 + v260 + 144);
      v270 = *(_OWORD *)(v265 + 48);
      v272 = *(_OWORD *)v265;
      v271 = *(_OWORD *)(v265 + 16);
      *(_OWORD *)(v263 + 32) = *(_OWORD *)(v265 + 32);
      *(_OWORD *)(v263 + 48) = v270;
      *(_OWORD *)v263 = v272;
      *(_OWORD *)(v263 + 16) = v271;
      v274 = *(_OWORD *)(v265 + 80);
      v273 = *(_OWORD *)(v265 + 96);
      v275 = *(_OWORD *)(v265 + 64);
      *(_QWORD *)(v263 + 112) = *(_QWORD *)(v265 + 112);
      *(_OWORD *)(v263 + 80) = v274;
      *(_OWORD *)(v263 + 96) = v273;
      *(_OWORD *)(v263 + 64) = v275;
    }
  }
  else if (v264)
  {
    *(_QWORD *)(v261 + 144) = v264;
    *(_QWORD *)(v261 + 152) = *(_QWORD *)(v262 + 152);
    v266 = *(_OWORD *)(v262 + 176);
    *(_OWORD *)(v261 + 160) = *(_OWORD *)(v262 + 160);
    *(_OWORD *)(v261 + 176) = v266;
    v267 = *(_OWORD *)(v262 + 192);
    v268 = *(_OWORD *)(v262 + 208);
    v269 = *(_OWORD *)(v262 + 240);
    *(_OWORD *)(v261 + 224) = *(_OWORD *)(v262 + 224);
    *(_OWORD *)(v261 + 240) = v269;
    *(_OWORD *)(v261 + 192) = v267;
    *(_OWORD *)(v261 + 208) = v268;
    *(_BYTE *)(v261 + 256) = *(_BYTE *)(v262 + 256);
    *(_BYTE *)(v261 + 257) = *(_BYTE *)(v262 + 257);
    *(_DWORD *)(v261 + 260) = *(_DWORD *)(v262 + 260);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v276 = *(_OWORD *)v265;
    v277 = *(_OWORD *)(a2 + v260 + 160);
    v278 = *(_OWORD *)(a2 + v260 + 192);
    *(_OWORD *)(a1 + v260 + 176) = *(_OWORD *)(a2 + v260 + 176);
    *(_OWORD *)(a1 + v260 + 192) = v278;
    *(_OWORD *)v263 = v276;
    *(_OWORD *)(a1 + v260 + 160) = v277;
    v279 = *(_OWORD *)(a2 + v260 + 208);
    v280 = *(_OWORD *)(a2 + v260 + 224);
    v281 = *(_OWORD *)(a2 + v260 + 240);
    *(_QWORD *)(a1 + v260 + 256) = *(_QWORD *)(a2 + v260 + 256);
    *(_OWORD *)(a1 + v260 + 224) = v280;
    *(_OWORD *)(a1 + v260 + 240) = v281;
    *(_OWORD *)(a1 + v260 + 208) = v279;
  }
  *(_QWORD *)(v261 + 264) = *(_QWORD *)(v262 + 264);
  *(_QWORD *)(v261 + 272) = *(_QWORD *)(v262 + 272);
  v282 = v33[36];
  v283 = (_QWORD *)(a1 + v282);
  v284 = (_QWORD *)(a2 + v282);
  v285 = type metadata accessor for PartialHandMultiCam(0);
  v286 = *(_QWORD *)(v285 - 8);
  v287 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v286 + 48);
  v288 = v287(v283, 1, v285);
  v289 = v287(v284, 1, v285);
  if (!v288)
  {
    if (!v289)
    {
      *v283 = *v284;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v283[1] = v284[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v311 = *(int *)(v285 + 24);
      v312 = (char *)v283 + v311;
      v313 = (char *)v284 + v311;
      v314 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v314 - 8) + 24))(v312, v313, v314);
      goto LABEL_105;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v283, type metadata accessor for PartialHandMultiCam);
    goto LABEL_104;
  }
  if (v289)
  {
LABEL_104:
    v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v283, v284, *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64));
    goto LABEL_105;
  }
  *v283 = *v284;
  v283[1] = v284[1];
  v290 = *(int *)(v285 + 24);
  v291 = (char *)v283 + v290;
  v333 = (char *)v284 + v290;
  v292 = type metadata accessor for UnknownStorage();
  v293 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v292 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v294 = v291;
  v33 = v335;
  v293(v294, v333, v292);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v286 + 56))(v283, 0, 1, v285);
LABEL_105:
  v296 = v33[37];
  v297 = a1 + v296;
  v298 = a2 + v296;
  *(_BYTE *)v297 = *(_BYTE *)v298;
  v299 = *(_DWORD *)(v298 + 4);
  *(_BYTE *)(v297 + 8) = *(_BYTE *)(v298 + 8);
  *(_DWORD *)(v297 + 4) = v299;
  v300 = v33[38];
  v301 = a1 + v300;
  v302 = a2 + v300;
  *(_BYTE *)v301 = *(_BYTE *)v302;
  *(_BYTE *)(v301 + 1) = *(_BYTE *)(v302 + 1);
  *(_BYTE *)(v301 + 2) = *(_BYTE *)(v302 + 2);
  *(_BYTE *)(v301 + 3) = *(_BYTE *)(v302 + 3);
  v303 = *(_QWORD *)(v302 + 8);
  *(_BYTE *)(v301 + 16) = *(_BYTE *)(v302 + 16);
  *(_QWORD *)(v301 + 8) = v303;
  v304 = *(_QWORD *)(v302 + 24);
  *(_BYTE *)(v301 + 32) = *(_BYTE *)(v302 + 32);
  *(_QWORD *)(v301 + 24) = v304;
  v305 = *(_QWORD *)(v302 + 40);
  *(_BYTE *)(v301 + 48) = *(_BYTE *)(v302 + 48);
  *(_QWORD *)(v301 + 40) = v305;
  *(_BYTE *)(v301 + 49) = *(_BYTE *)(v302 + 49);
  *(_BYTE *)(v301 + 50) = *(_BYTE *)(v302 + 50);
  *(_BYTE *)(v301 + 51) = *(_BYTE *)(v302 + 51);
  *(_BYTE *)(v301 + 52) = *(_BYTE *)(v302 + 52);
  v306 = *(int *)(a3 + 20);
  v307 = a1 + v306;
  v308 = (uint64_t *)(a2 + v306);
  v309 = *v308;
  *(_BYTE *)(v307 + 8) = *((_BYTE *)v308 + 8);
  *(_QWORD *)v307 = v309;
  return a1;
}

uint64_t initializeWithTake for RejectedHand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int *v46;
  unsigned int (**v47)(_QWORD *, uint64_t, int *);
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  _BYTE *v133;
  char *v134;
  char *__dst;
  void *__dsta;
  uint64_t v137;
  uint64_t v138;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v10 = *(_OWORD *)(a2 + 232);
  v11 = *(_OWORD *)(a2 + 248);
  v12 = *(_OWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v12;
  *(_OWORD *)(a1 + 248) = v11;
  *(_OWORD *)(a1 + 232) = v10;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v13 = (int *)type metadata accessor for HandDescriptor();
  v14 = v13[17];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v137 = a3;
    v20 = type metadata accessor for UnknownStorage();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v21(v15, v16, v20);
    v22 = *(int *)(v17 + 20);
    __dst = &v15[v22];
    v23 = &v16[v22];
    v24 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v132 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v23, 1, v24))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v23;
      v21(&__dst[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v20);
      v26 = *(int *)(v24 + 24);
      v27 = &__dst[v26];
      v28 = &v23[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(__dst, 0, 1, v24);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    a3 = v137;
  }
  *(_QWORD *)(a1 + v13[18]) = *(_QWORD *)(a2 + v13[18]);
  v29 = v13[19];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_BYTE *)(v30 + 16) = *(_BYTE *)(v31 + 16);
  v32 = v13[20];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  v35 = v13[21];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  v38 = v13[22];
  v39 = a1 + v38;
  v40 = a2 + v38;
  *(_BYTE *)(v39 + 64) = *(_BYTE *)(v40 + 64);
  v41 = *(_OWORD *)(v40 + 48);
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
  *(_OWORD *)(v39 + 48) = v41;
  v42 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v42;
  *(_QWORD *)(a1 + v13[23]) = *(_QWORD *)(a2 + v13[23]);
  v43 = v13[24];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  v46 = (int *)type metadata accessor for HandDescriptorInternal();
  v47 = (unsigned int (**)(_QWORD *, uint64_t, int *))*((_QWORD *)v46 - 1);
  if (v47[6](v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    __dsta = v47;
    v138 = a3;
    *v44 = *v45;
    *((_BYTE *)v44 + 8) = *((_BYTE *)v45 + 8);
    v49 = *((_OWORD *)v45 + 6);
    *((_OWORD *)v44 + 5) = *((_OWORD *)v45 + 5);
    *((_OWORD *)v44 + 6) = v49;
    *((_OWORD *)v44 + 7) = *((_OWORD *)v45 + 7);
    *((_DWORD *)v44 + 32) = *((_DWORD *)v45 + 32);
    v50 = *((_OWORD *)v45 + 2);
    *((_OWORD *)v44 + 1) = *((_OWORD *)v45 + 1);
    *((_OWORD *)v44 + 2) = v50;
    v51 = *((_OWORD *)v45 + 4);
    *((_OWORD *)v44 + 3) = *((_OWORD *)v45 + 3);
    *((_OWORD *)v44 + 4) = v51;
    v44[17] = v45[17];
    *((_OWORD *)v44 + 9) = *((_OWORD *)v45 + 9);
    memcpy(v44 + 20, v45 + 20, 0x373uLL);
    v52 = v46[10];
    v53 = (char *)v44 + v52;
    v54 = (char *)v45 + v52;
    v55 = type metadata accessor for ActionInternalPB(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      *v53 = *v54;
      v58 = *(int *)(v55 + 20);
      v133 = &v53[v58];
      v59 = &v54[v58];
      v60 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v133, v59, v60);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    v61 = v46[11];
    v62 = (char *)v44 + v61;
    v63 = (char *)v45 + v61;
    v64 = type metadata accessor for UnsureInternalPB(0);
    v65 = *(_QWORD *)(v64 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
    {
      v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      v67 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v62, v63, v67);
      *(_QWORD *)&v62[*(int *)(v64 + 20)] = *(_QWORD *)&v63[*(int *)(v64 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
    }
    v68 = v46[12];
    v69 = (char *)v44 + v68;
    v70 = (char *)v45 + v68;
    v71 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v72 = *(_QWORD *)(v71 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
    {
      v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      v74 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v69, v70, v74);
      *(_QWORD *)&v69[*(int *)(v71 + 20)] = *(_QWORD *)&v70[*(int *)(v71 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
    }
    v75 = v46[13];
    v76 = (_QWORD *)((char *)v44 + v75);
    v77 = (_QWORD *)((char *)v45 + v75);
    v78 = type metadata accessor for HomePinchInternalPB(0);
    v79 = *(_QWORD *)(v78 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
    {
      v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      *v76 = *v77;
      v81 = *(int *)(v78 + 20);
      v134 = (char *)v76 + v81;
      v82 = (char *)v77 + v81;
      v83 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v134, v82, v83);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
    }
    *(_QWORD *)((char *)v44 + v46[14]) = *(_QWORD *)((char *)v45 + v46[14]);
    a3 = v138;
    (*((void (**)(_QWORD *, _QWORD, uint64_t, int *))__dsta + 7))(v44, 0, 1, v46);
  }
  v84 = v13[25];
  v85 = a1 + v84;
  v86 = a2 + v84;
  *(_QWORD *)v85 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  *(_QWORD *)(a1 + v13[26]) = *(_QWORD *)(a2 + v13[26]);
  v87 = v13[27];
  v88 = a1 + v87;
  v89 = a2 + v87;
  *(_BYTE *)(v88 + 8) = *(_BYTE *)(v89 + 8);
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v90 = v13[28];
  v91 = a1 + v90;
  v92 = a2 + v90;
  v93 = *(_OWORD *)(v92 + 16);
  *(_OWORD *)v91 = *(_OWORD *)v92;
  *(_OWORD *)(v91 + 16) = v93;
  *(_OWORD *)(v91 + 32) = *(_OWORD *)(v92 + 32);
  *(_WORD *)(v91 + 48) = *(_WORD *)(v92 + 48);
  *(_QWORD *)(a1 + v13[29]) = *(_QWORD *)(a2 + v13[29]);
  v94 = v13[30];
  v95 = a1 + v94;
  v96 = a2 + v94;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_QWORD *)v95 = *(_QWORD *)v96;
  v97 = v13[31];
  v98 = a1 + v97;
  v99 = (__int128 *)(a2 + v97);
  *(_QWORD *)(v98 + 48) = *((_QWORD *)v99 + 6);
  v100 = v99[2];
  v101 = *v99;
  *(_OWORD *)(v98 + 16) = v99[1];
  *(_OWORD *)(v98 + 32) = v100;
  *(_OWORD *)v98 = v101;
  v102 = v13[32];
  v103 = a1 + v102;
  v104 = a2 + v102;
  v105 = *(_OWORD *)(v104 + 48);
  *(_OWORD *)(v103 + 32) = *(_OWORD *)(v104 + 32);
  *(_OWORD *)(v103 + 48) = v105;
  *(_QWORD *)(v103 + 62) = *(_QWORD *)(v104 + 62);
  v106 = *(_OWORD *)(v104 + 16);
  *(_OWORD *)v103 = *(_OWORD *)v104;
  *(_OWORD *)(v103 + 16) = v106;
  v107 = v13[33];
  v108 = a1 + v107;
  v109 = a2 + v107;
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  *(_OWORD *)(a1 + v13[34]) = *(_OWORD *)(a2 + v13[34]);
  memcpy((void *)(a1 + v13[35]), (const void *)(a2 + v13[35]), 0x118uLL);
  v110 = v13[36];
  v111 = (_OWORD *)(a1 + v110);
  v112 = (_OWORD *)(a2 + v110);
  v113 = type metadata accessor for PartialHandMultiCam(0);
  v114 = *(_QWORD *)(v113 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
  {
    v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
  }
  else
  {
    *v111 = *v112;
    v116 = *(int *)(v113 + 24);
    v117 = (char *)v111 + v116;
    v118 = (char *)v112 + v116;
    v119 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v119 - 8) + 32))(v117, v118, v119);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
  }
  v120 = v13[37];
  v121 = a1 + v120;
  v122 = a2 + v120;
  *(_QWORD *)v121 = *(_QWORD *)v122;
  *(_BYTE *)(v121 + 8) = *(_BYTE *)(v122 + 8);
  v123 = v13[38];
  v124 = a1 + v123;
  v125 = (__int128 *)(a2 + v123);
  *(_QWORD *)(v124 + 45) = *(_QWORD *)((char *)v125 + 45);
  v126 = v125[2];
  v127 = *v125;
  *(_OWORD *)(v124 + 16) = v125[1];
  *(_OWORD *)(v124 + 32) = v126;
  *(_OWORD *)v124 = v127;
  v128 = *(int *)(a3 + 20);
  v129 = a1 + v128;
  v130 = a2 + v128;
  *(_QWORD *)v129 = *(_QWORD *)v130;
  *(_BYTE *)(v129 + 8) = *(_BYTE *)(v130 + 8);
  return a1;
}

uint64_t assignWithTake for RejectedHand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  int v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t (*v116)(_BYTE *, uint64_t, uint64_t);
  int v117;
  int v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t, uint64_t);
  int v130;
  size_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t);
  int v148;
  size_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t (*v157)(_QWORD *, uint64_t, uint64_t);
  int v158;
  int v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t (*v214)(_QWORD *, uint64_t, uint64_t);
  int v215;
  int v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (**__src)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *__srca;
  _BYTE *__srcd;
  char *__srce;
  _QWORD *__srcb;
  _QWORD *__srcc;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *__dst;
  int *__dsta;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = a1 + 16;
  v8 = a2 + 16;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease();
      v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v9;
      v10 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v10;
      v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
      goto LABEL_6;
    }
    outlined destroy of HandPose(v6);
  }
  v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v6 + 80) = v12;
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(v8 + 96);
  *(_QWORD *)(v6 + 112) = *(_QWORD *)(v8 + 112);
  v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v8;
  *(_OWORD *)(v6 + 16) = v13;
  v14 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(v6 + 48) = v14;
LABEL_6:
  v15 = *(_QWORD *)(a2 + 200);
  v16 = *(_QWORD *)(a1 + 200);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  if (v16)
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 200) = v15;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of PoseSpec(a1 + 200);
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
LABEL_11:
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  v17 = (int *)type metadata accessor for HandDescriptor();
  v18 = v17[17];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v251 = a3;
      v26 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(v19, v20, v26);
      v28 = *(int *)(v21 + 20);
      __dst = &v19[v28];
      v29 = &v20[v28];
      v30 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      __src = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v30 - 8);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v29, 1, v30))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
        memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v29;
        v27(&__dst[*(int *)(v30 + 20)], &v29[*(int *)(v30 + 20)], v26);
        v45 = *(int *)(v30 + 24);
        v46 = &__dst[v45];
        v47 = &v29[v45];
        *(_DWORD *)v46 = *(_DWORD *)v47;
        v46[4] = v47[4];
        __src[7](__dst, 0, 1, v30);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_27;
    }
LABEL_17:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_28;
  }
  if (v25)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v19, type metadata accessor for ThumbIndexTapFeaturesPB);
    goto LABEL_17;
  }
  v251 = a3;
  v33 = type metadata accessor for UnknownStorage();
  __srca = *(_QWORD **)(v33 - 8);
  v34 = (void (*)(char *, char *, uint64_t))__srca[5];
  v34(v19, v20, v33);
  v35 = *(int *)(v21 + 20);
  v36 = &v19[v35];
  v37 = &v20[v35];
  v38 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v242 = *(_QWORD *)(v38 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v242 + 48);
  v40 = v39(v36, 1, v38);
  v41 = v39(v37, 1, v38);
  if (!v40)
  {
    if (!v41)
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      swift_bridgeObjectRelease();
      v34(&v36[*(int *)(v38 + 20)], &v37[*(int *)(v38 + 20)], v33);
      v134 = *(int *)(v38 + 24);
      v135 = &v36[v134];
      v136 = &v37[v134];
      *(_DWORD *)v135 = *(_DWORD *)v136;
      v135[4] = v136[4];
      goto LABEL_27;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for RawThumbIndexTapFeaturesPB);
    goto LABEL_26;
  }
  if (v41)
  {
LABEL_26:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_27;
  }
  *(_QWORD *)v36 = *(_QWORD *)v37;
  ((void (*)(char *, char *, uint64_t))__srca[4])(&v36[*(int *)(v38 + 20)], &v37[*(int *)(v38 + 20)], v33);
  v42 = *(int *)(v38 + 24);
  v43 = &v36[v42];
  v44 = &v37[v42];
  *(_DWORD *)v43 = *(_DWORD *)v44;
  v43[4] = v44[4];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v242 + 56))(v36, 0, 1, v38);
LABEL_27:
  a3 = v251;
LABEL_28:
  *(_QWORD *)(a1 + v17[18]) = *(_QWORD *)(a2 + v17[18]);
  swift_bridgeObjectRelease();
  v49 = v17[19];
  v50 = a1 + v49;
  v51 = a2 + v49;
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_BYTE *)(v50 + 16) = *(_BYTE *)(v51 + 16);
  v52 = v17[20];
  v53 = a1 + v52;
  v54 = a2 + v52;
  *(_BYTE *)(v53 + 16) = *(_BYTE *)(v54 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  v55 = v17[21];
  v56 = a1 + v55;
  v57 = a2 + v55;
  *(_BYTE *)(v56 + 16) = *(_BYTE *)(v57 + 16);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  v58 = v17[22];
  v59 = a1 + v58;
  v60 = a2 + v58;
  *(_BYTE *)(v59 + 64) = *(_BYTE *)(v60 + 64);
  v61 = *(_OWORD *)(v60 + 48);
  *(_OWORD *)(v59 + 32) = *(_OWORD *)(v60 + 32);
  *(_OWORD *)(v59 + 48) = v61;
  v62 = *(_OWORD *)(v60 + 16);
  *(_OWORD *)v59 = *(_OWORD *)v60;
  *(_OWORD *)(v59 + 16) = v62;
  *(_QWORD *)(a1 + v17[23]) = *(_QWORD *)(a2 + v17[23]);
  swift_bridgeObjectRelease();
  v63 = v17[24];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for HandDescriptorInternal();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v64, 1, v66);
  __dsta = (int *)v66;
  v70 = v68(v65, 1, v66);
  if (!v69)
  {
    if (v70)
    {
      outlined destroy of Matrix3x3PB(v64, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptorInternal);
      goto LABEL_34;
    }
    *(_QWORD *)v64 = *(_QWORD *)v65;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
    v253 = a3;
    if (*(_QWORD *)(v64 + 48))
    {
      v81 = *(_QWORD *)(v65 + 48);
      if (v81)
      {
        *(_QWORD *)(v64 + 16) = *(_QWORD *)(v65 + 16);
        *(_BYTE *)(v64 + 24) = *(_BYTE *)(v65 + 24);
        *(_BYTE *)(v64 + 25) = *(_BYTE *)(v65 + 25);
        *(_QWORD *)(v64 + 32) = *(_QWORD *)(v65 + 32);
        *(_BYTE *)(v64 + 40) = *(_BYTE *)(v65 + 40);
        *(_QWORD *)(v64 + 48) = v81;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 56) = *(_QWORD *)(v65 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 64) = *(_QWORD *)(v65 + 64);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 72) = *(_QWORD *)(v65 + 72);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 80) = *(_QWORD *)(v65 + 80);
        swift_bridgeObjectRelease();
        *(_DWORD *)(v64 + 88) = *(_DWORD *)(v65 + 88);
        v82 = *(_QWORD *)(v65 + 104);
        *(_QWORD *)(v64 + 96) = *(_QWORD *)(v65 + 96);
        *(_QWORD *)(v64 + 104) = v82;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 112) = *(_QWORD *)(v65 + 112);
        *(_BYTE *)(v64 + 120) = *(_BYTE *)(v65 + 120);
        *(_QWORD *)(v64 + 124) = *(_QWORD *)(v65 + 124);
        goto LABEL_51;
      }
      outlined destroy of PinchInternalData(v64 + 16);
    }
    v109 = *(_OWORD *)(v65 + 96);
    *(_OWORD *)(v64 + 80) = *(_OWORD *)(v65 + 80);
    *(_OWORD *)(v64 + 96) = v109;
    *(_OWORD *)(v64 + 112) = *(_OWORD *)(v65 + 112);
    *(_DWORD *)(v64 + 128) = *(_DWORD *)(v65 + 128);
    v110 = *(_OWORD *)(v65 + 32);
    *(_OWORD *)(v64 + 16) = *(_OWORD *)(v65 + 16);
    *(_OWORD *)(v64 + 32) = v110;
    v111 = *(_OWORD *)(v65 + 64);
    *(_OWORD *)(v64 + 48) = *(_OWORD *)(v65 + 48);
    *(_OWORD *)(v64 + 64) = v111;
LABEL_51:
    *(_QWORD *)(v64 + 136) = *(_QWORD *)(v65 + 136);
    swift_bridgeObjectRelease();
    *(_DWORD *)(v64 + 144) = *(_DWORD *)(v65 + 144);
    *(_DWORD *)(v64 + 148) = *(_DWORD *)(v65 + 148);
    *(_QWORD *)(v64 + 152) = *(_QWORD *)(v65 + 152);
    swift_bridgeObjectRelease();
    memcpy((void *)(v64 + 160), (const void *)(v65 + 160), 0x373uLL);
    v112 = *(int *)(v66 + 40);
    v113 = (_BYTE *)(v64 + v112);
    v114 = (_BYTE *)(v65 + v112);
    v115 = type metadata accessor for ActionInternalPB(0);
    __srcb = *(_QWORD **)(v115 - 8);
    v116 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))__srcb[6];
    v117 = v116(v113, 1, v115);
    v118 = v116(v114, 1, v115);
    if (v117)
    {
      if (!v118)
      {
        *v113 = *v114;
        v119 = *(int *)(v115 + 20);
        v120 = &v113[v119];
        v121 = &v114[v119];
        v122 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v122 - 8) + 32))(v120, v121, v122);
        ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__srcb[7])(v113, 0, 1, v115);
        goto LABEL_57;
      }
    }
    else
    {
      if (!v118)
      {
        *v113 = *v114;
        v137 = *(int *)(v115 + 20);
        v138 = &v113[v137];
        v139 = &v114[v137];
        v140 = type metadata accessor for UnknownStorage();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v140 - 8) + 40))(v138, v139, v140);
LABEL_57:
        v124 = __dsta[11];
        v125 = v64 + v124;
        v126 = (char *)(v65 + v124);
        v127 = type metadata accessor for UnsureInternalPB(0);
        v128 = *(_QWORD *)(v127 - 8);
        v129 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
        v243 = v125;
        LODWORD(v125) = v129(v125, 1, v127);
        v130 = v129((uint64_t)v126, 1, v127);
        if ((_DWORD)v125)
        {
          if (v130)
          {
            v131 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?)
                                         - 8)
                             + 64);
            v132 = (void *)v243;
LABEL_62:
            memcpy(v132, v126, v131);
            goto LABEL_67;
          }
          v133 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 32))(v243, v126, v133);
          *(_QWORD *)(v243 + *(int *)(v127 + 20)) = *(_QWORD *)&v126[*(int *)(v127 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v243, 0, 1, v127);
        }
        else
        {
          if (v130)
          {
            outlined destroy of Matrix3x3PB(v243, type metadata accessor for UnsureInternalPB);
            v131 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?)
                                         - 8)
                             + 64);
            v132 = (void *)v243;
            goto LABEL_62;
          }
          v141 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 40))(v243, v126, v141);
          *(_QWORD *)(v243 + *(int *)(v127 + 20)) = *(_QWORD *)&v126[*(int *)(v127 + 20)];
          swift_release();
        }
LABEL_67:
        v142 = __dsta[12];
        v143 = v64 + v142;
        v144 = (char *)(v65 + v142);
        v145 = type metadata accessor for ObjectInteractionStateInternalPB(0);
        v146 = *(_QWORD *)(v145 - 8);
        v147 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
        v244 = v143;
        LODWORD(v143) = v147(v143, 1, v145);
        v148 = v147((uint64_t)v144, 1, v145);
        if ((_DWORD)v143)
        {
          if (v148)
          {
            v149 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?)
                                         - 8)
                             + 64);
            v150 = (void *)v244;
LABEL_72:
            memcpy(v150, v144, v149);
            goto LABEL_75;
          }
          v151 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32))(v244, v144, v151);
          *(_QWORD *)(v244 + *(int *)(v145 + 20)) = *(_QWORD *)&v144[*(int *)(v145 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v146 + 56))(v244, 0, 1, v145);
        }
        else
        {
          if (v148)
          {
            outlined destroy of Matrix3x3PB(v244, type metadata accessor for ObjectInteractionStateInternalPB);
            v149 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?)
                                         - 8)
                             + 64);
            v150 = (void *)v244;
            goto LABEL_72;
          }
          v152 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 40))(v244, v144, v152);
          *(_QWORD *)(v244 + *(int *)(v145 + 20)) = *(_QWORD *)&v144[*(int *)(v145 + 20)];
          swift_release();
        }
LABEL_75:
        v153 = __dsta[13];
        v154 = (_QWORD *)(v64 + v153);
        v155 = (_QWORD *)(v65 + v153);
        v156 = type metadata accessor for HomePinchInternalPB(0);
        __srcc = *(_QWORD **)(v156 - 8);
        v157 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))__srcc[6];
        v158 = v157(v154, 1, v156);
        v159 = v157(v155, 1, v156);
        if (v158)
        {
          if (!v159)
          {
            *v154 = *v155;
            v160 = *(int *)(v156 + 20);
            v161 = (char *)v154 + v160;
            v162 = (char *)v155 + v160;
            v163 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 32))(v161, v162, v163);
            ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__srcc[7])(v154, 0, 1, v156);
LABEL_81:
            a3 = v253;
            *(_QWORD *)(v64 + __dsta[14]) = *(_QWORD *)(v65 + __dsta[14]);
            swift_bridgeObjectRelease();
            goto LABEL_82;
          }
        }
        else
        {
          if (!v159)
          {
            *v154 = *v155;
            v238 = *(int *)(v156 + 20);
            v239 = (char *)v154 + v238;
            v240 = (char *)v155 + v238;
            v241 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v241 - 8) + 40))(v239, v240, v241);
            goto LABEL_81;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v154, type metadata accessor for HomePinchInternalPB);
        }
        v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
        memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
        goto LABEL_81;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v113, type metadata accessor for ActionInternalPB);
    }
    v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_57;
  }
  if (v70)
  {
LABEL_34:
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
    memcpy((void *)v64, (const void *)v65, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_82;
  }
  v252 = a3;
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
  v71 = *(_OWORD *)(v65 + 96);
  *(_OWORD *)(v64 + 80) = *(_OWORD *)(v65 + 80);
  *(_OWORD *)(v64 + 96) = v71;
  *(_OWORD *)(v64 + 112) = *(_OWORD *)(v65 + 112);
  *(_DWORD *)(v64 + 128) = *(_DWORD *)(v65 + 128);
  v72 = *(_OWORD *)(v65 + 32);
  *(_OWORD *)(v64 + 16) = *(_OWORD *)(v65 + 16);
  *(_OWORD *)(v64 + 32) = v72;
  v73 = *(_OWORD *)(v65 + 64);
  *(_OWORD *)(v64 + 48) = *(_OWORD *)(v65 + 48);
  *(_OWORD *)(v64 + 64) = v73;
  *(_QWORD *)(v64 + 136) = *(_QWORD *)(v65 + 136);
  *(_OWORD *)(v64 + 144) = *(_OWORD *)(v65 + 144);
  memcpy((void *)(v64 + 160), (const void *)(v65 + 160), 0x373uLL);
  v74 = *(int *)(v66 + 40);
  v75 = (_BYTE *)(v64 + v74);
  v76 = (_BYTE *)(v65 + v74);
  v77 = type metadata accessor for ActionInternalPB(0);
  v78 = *(_QWORD *)(v77 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
  {
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    *v75 = *v76;
    v83 = *(int *)(v77 + 20);
    __srcd = &v75[v83];
    v84 = &v76[v83];
    v85 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(__srcd, v84, v85);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
  }
  v86 = __dsta[11];
  v87 = (char *)(v64 + v86);
  v88 = (char *)(v65 + v86);
  v89 = type metadata accessor for UnsureInternalPB(0);
  v90 = *(_QWORD *)(v89 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
  {
    v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    v92 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 32))(v87, v88, v92);
    *(_QWORD *)&v87[*(int *)(v89 + 20)] = *(_QWORD *)&v88[*(int *)(v89 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
  }
  v93 = __dsta[12];
  v94 = (char *)(v64 + v93);
  v95 = (char *)(v65 + v93);
  v96 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v97 = *(_QWORD *)(v96 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
  {
    v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    v99 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(v94, v95, v99);
    *(_QWORD *)&v94[*(int *)(v96 + 20)] = *(_QWORD *)&v95[*(int *)(v96 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
  }
  v100 = __dsta[13];
  v101 = (_QWORD *)(v64 + v100);
  v102 = (_QWORD *)(v65 + v100);
  v103 = type metadata accessor for HomePinchInternalPB(0);
  v104 = *(_QWORD *)(v103 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
  {
    v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
  }
  else
  {
    *v101 = *v102;
    v106 = *(int *)(v103 + 20);
    __srce = (char *)v101 + v106;
    v107 = (char *)v102 + v106;
    v108 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(__srce, v107, v108);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
  }
  *(_QWORD *)(v64 + __dsta[14]) = *(_QWORD *)(v65 + __dsta[14]);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v67 + 56))(v64, 0, 1);
  a3 = v252;
LABEL_82:
  v165 = v17[25];
  v166 = a1 + v165;
  v167 = a2 + v165;
  *(_QWORD *)v166 = *(_QWORD *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  *(_QWORD *)(a1 + v17[26]) = *(_QWORD *)(a2 + v17[26]);
  swift_bridgeObjectRelease();
  v168 = v17[27];
  v169 = a1 + v168;
  v170 = a2 + v168;
  *(_QWORD *)v169 = *(_QWORD *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  v171 = v17[28];
  v172 = a1 + v171;
  v173 = (__int128 *)(a2 + v171);
  *(_WORD *)(v172 + 48) = *((_WORD *)v173 + 24);
  v174 = v173[2];
  v175 = *v173;
  *(_OWORD *)(v172 + 16) = v173[1];
  *(_OWORD *)(v172 + 32) = v174;
  *(_OWORD *)v172 = v175;
  *(_QWORD *)(a1 + v17[29]) = *(_QWORD *)(a2 + v17[29]);
  swift_bridgeObjectRelease();
  v176 = v17[30];
  v177 = a1 + v176;
  v178 = a2 + v176;
  *(_BYTE *)(v177 + 8) = *(_BYTE *)(v178 + 8);
  *(_QWORD *)v177 = *(_QWORD *)v178;
  v179 = v17[31];
  v180 = (_QWORD *)(a1 + v179);
  v181 = (_QWORD *)(a2 + v179);
  if (*(_QWORD *)(a1 + v179))
  {
    if (*v181)
    {
      *v180 = *v181;
      swift_bridgeObjectRelease();
      v180[1] = v181[1];
      swift_bridgeObjectRelease();
      v180[2] = v181[2];
      swift_bridgeObjectRelease();
      v180[3] = v181[3];
      swift_bridgeObjectRelease();
      v180[4] = v181[4];
      swift_bridgeObjectRelease();
      v180[5] = v181[5];
      swift_bridgeObjectRelease();
      v180[6] = v181[6];
      swift_bridgeObjectRelease();
      goto LABEL_87;
    }
    outlined destroy of ObjectInteractionData((uint64_t)v180);
  }
  v182 = *((_OWORD *)v181 + 1);
  *(_OWORD *)v180 = *(_OWORD *)v181;
  *((_OWORD *)v180 + 1) = v182;
  *((_OWORD *)v180 + 2) = *((_OWORD *)v181 + 2);
  v180[6] = v181[6];
LABEL_87:
  v183 = v17[32];
  v184 = a1 + v183;
  v185 = a2 + v183;
  *(_QWORD *)v184 = *(_QWORD *)v185;
  *(_QWORD *)(v184 + 8) = *(_QWORD *)(v185 + 8);
  *(_QWORD *)(v184 + 16) = *(_QWORD *)(v185 + 16);
  *(_OWORD *)(v184 + 32) = *(_OWORD *)(v185 + 32);
  *(_QWORD *)(v184 + 48) = *(_QWORD *)(v185 + 48);
  *(_BYTE *)(v184 + 56) = *(_BYTE *)(v185 + 56);
  *(_QWORD *)(v184 + 60) = *(_QWORD *)(v185 + 60);
  *(_BYTE *)(v184 + 68) = *(_BYTE *)(v185 + 68);
  *(_BYTE *)(v184 + 69) = *(_BYTE *)(v185 + 69);
  v186 = v17[33];
  v187 = a1 + v186;
  v188 = a2 + v186;
  *(_QWORD *)v187 = *(_QWORD *)v188;
  *(_BYTE *)(v187 + 8) = *(_BYTE *)(v188 + 8);
  v189 = v17[34];
  v190 = a1 + v189;
  v191 = a2 + v189;
  *(_DWORD *)v190 = *(_DWORD *)v191;
  *(_QWORD *)(v190 + 8) = *(_QWORD *)(v191 + 8);
  swift_bridgeObjectRelease();
  v192 = v17[35];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = *(_OWORD *)(a2 + v192 + 16);
  *(_OWORD *)v193 = *(_OWORD *)(a2 + v192);
  *(_OWORD *)(v193 + 16) = v195;
  v196 = *(_OWORD *)(a2 + v192 + 48);
  *(_OWORD *)(v193 + 32) = *(_OWORD *)(a2 + v192 + 32);
  *(_OWORD *)(v193 + 48) = v196;
  *(_DWORD *)(v193 + 64) = *(_DWORD *)(a2 + v192 + 64);
  v197 = *(_OWORD *)(a2 + v192 + 96);
  *(_OWORD *)(v193 + 80) = *(_OWORD *)(a2 + v192 + 80);
  *(_OWORD *)(v193 + 96) = v197;
  v198 = *(_OWORD *)(a2 + v192 + 128);
  *(_OWORD *)(v193 + 112) = *(_OWORD *)(a2 + v192 + 112);
  *(_OWORD *)(v193 + 128) = v198;
  v199 = a1 + v192 + 144;
  v201 = a2 + v192 + 144;
  v200 = *(_QWORD *)v201;
  if (*(_QWORD *)v199)
  {
    if (v200)
    {
      *(_QWORD *)(v193 + 144) = v200;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v193 + 152) = *(_QWORD *)(v194 + 152);
      swift_bridgeObjectRelease();
      v202 = *(_OWORD *)(v194 + 176);
      *(_OWORD *)(v193 + 160) = *(_OWORD *)(v194 + 160);
      *(_OWORD *)(v193 + 176) = v202;
      v203 = *(_OWORD *)(v194 + 208);
      *(_OWORD *)(v193 + 192) = *(_OWORD *)(v194 + 192);
      *(_OWORD *)(v193 + 208) = v203;
      v204 = *(_OWORD *)(v194 + 240);
      *(_OWORD *)(v193 + 224) = *(_OWORD *)(v194 + 224);
      *(_OWORD *)(v193 + 240) = v204;
      *(_BYTE *)(v193 + 256) = *(_BYTE *)(v194 + 256);
      *(_BYTE *)(v193 + 257) = *(_BYTE *)(v194 + 257);
      *(_DWORD *)(v193 + 260) = *(_DWORD *)(v194 + 260);
      goto LABEL_92;
    }
    outlined destroy of HandPose(v199);
  }
  v205 = *(_OWORD *)(v201 + 80);
  *(_OWORD *)(v199 + 64) = *(_OWORD *)(v201 + 64);
  *(_OWORD *)(v199 + 80) = v205;
  *(_OWORD *)(v199 + 96) = *(_OWORD *)(v201 + 96);
  *(_QWORD *)(v199 + 112) = *(_QWORD *)(v201 + 112);
  v206 = *(_OWORD *)(v201 + 16);
  *(_OWORD *)v199 = *(_OWORD *)v201;
  *(_OWORD *)(v199 + 16) = v206;
  v207 = *(_OWORD *)(v201 + 48);
  *(_OWORD *)(v199 + 32) = *(_OWORD *)(v201 + 32);
  *(_OWORD *)(v199 + 48) = v207;
LABEL_92:
  v208 = *(_QWORD *)(v194 + 272);
  *(_QWORD *)(v193 + 264) = *(_QWORD *)(v194 + 264);
  *(_QWORD *)(v193 + 272) = v208;
  v209 = v17[36];
  v210 = (_QWORD *)(a1 + v209);
  v211 = (_QWORD *)(a2 + v209);
  v212 = type metadata accessor for PartialHandMultiCam(0);
  v213 = *(_QWORD *)(v212 - 8);
  v214 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v213 + 48);
  v215 = v214(v210, 1, v212);
  v216 = v214(v211, 1, v212);
  if (!v215)
  {
    if (!v216)
    {
      *v210 = *v211;
      swift_bridgeObjectRelease();
      v210[1] = v211[1];
      swift_bridgeObjectRelease();
      v234 = *(int *)(v212 + 24);
      v235 = (char *)v210 + v234;
      v236 = (char *)v211 + v234;
      v237 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v237 - 8) + 40))(v235, v236, v237);
      goto LABEL_98;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v210, type metadata accessor for PartialHandMultiCam);
    goto LABEL_97;
  }
  if (v216)
  {
LABEL_97:
    v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
    memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
    goto LABEL_98;
  }
  *(_OWORD *)v210 = *(_OWORD *)v211;
  v217 = *(int *)(v212 + 24);
  v218 = (char *)v210 + v217;
  v219 = (char *)v211 + v217;
  v220 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v220 - 8) + 32))(v218, v219, v220);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v210, 0, 1, v212);
LABEL_98:
  v222 = v17[37];
  v223 = a1 + v222;
  v224 = a2 + v222;
  *(_BYTE *)v223 = *(_BYTE *)v224;
  *(_DWORD *)(v223 + 4) = *(_DWORD *)(v224 + 4);
  *(_BYTE *)(v223 + 8) = *(_BYTE *)(v224 + 8);
  v225 = v17[38];
  v226 = a1 + v225;
  v227 = a2 + v225;
  *(_BYTE *)v226 = *(_BYTE *)v227;
  *(_BYTE *)(v226 + 1) = *(_BYTE *)(v227 + 1);
  *(_BYTE *)(v226 + 2) = *(_BYTE *)(v227 + 2);
  *(_BYTE *)(v226 + 3) = *(_BYTE *)(v227 + 3);
  *(_QWORD *)(v226 + 8) = *(_QWORD *)(v227 + 8);
  *(_BYTE *)(v226 + 16) = *(_BYTE *)(v227 + 16);
  v228 = *(_QWORD *)(v227 + 24);
  *(_BYTE *)(v226 + 32) = *(_BYTE *)(v227 + 32);
  *(_QWORD *)(v226 + 24) = v228;
  v229 = *(_QWORD *)(v227 + 40);
  *(_BYTE *)(v226 + 48) = *(_BYTE *)(v227 + 48);
  *(_QWORD *)(v226 + 40) = v229;
  *(_BYTE *)(v226 + 49) = *(_BYTE *)(v227 + 49);
  *(_BYTE *)(v226 + 50) = *(_BYTE *)(v227 + 50);
  *(_BYTE *)(v226 + 51) = *(_BYTE *)(v227 + 51);
  *(_BYTE *)(v226 + 52) = *(_BYTE *)(v227 + 52);
  v230 = *(int *)(a3 + 20);
  v231 = a1 + v230;
  v232 = a2 + v230;
  *(_QWORD *)v231 = *(_QWORD *)v232;
  *(_BYTE *)(v231 + 8) = *(_BYTE *)(v232 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RejectedHand()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D846F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RejectedHand()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D846F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for RejectedHand()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HandDescriptor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for HandsKitDataInternal()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HandsKitDataInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandsKitDataInternal(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HandsKitDataInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandsKitDataInternal(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandsKitDataInternal(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandsKitDataInternal()
{
  return &type metadata for HandsKitDataInternal;
}

uint64_t type metadata accessor for PoseActionPipelineGenerator()
{
  return objc_opt_self();
}

uint64_t AcceleratedSceneDistanceToJointProcessor.get3DCoordinate(_:_:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = v2[22];
  v4 = __OFSUB__(result, v3);
  v5 = result - v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = v2[4];
  v7 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v8 = v7 + a2;
  if (__OFADD__(v7, a2))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = v2[24];
  v4 = __OFSUB__(v8, v9);
  v10 = v8 - v9;
  if (v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((unint64_t)(v10 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v11 = 4 * v10;
  result = swift_beginAccess();
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v2[6] + 16);
  if (v11 >= v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((v11 | 1) >= v12)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((v11 | 2) >= v12)
LABEL_19:
    __break(1u);
  return result;
}

Swift::Bool __swiftcall AcceleratedSceneDistanceToJointProcessor.isAnyBufferSizeChange(_:)(Hands::BufferDataMetaData *a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 104) != a1->segmentationBufferHeight
      || *(_QWORD *)(v1 + 112) != a1->segmentationBufferWidth
      || *(_QWORD *)(v1 + 120) != a1->metricDepthBufferPixelsPerRow
      || *(_QWORD *)(v1 + 128) != a1->generalSegmentationBufferPixelsPerRow
      || *(_QWORD *)(v1 + 136) != a1->objectInHandSegmentationBufferPixelsPerRow
      || *(float *)(v1 + 144) != a1->opticalCenterX
      || *(float *)(v1 + 148) != a1->opticalCenterY
      || *(float *)(v1 + 152) != a1->oneOverEfl
      || *(float *)(v1 + 156) != a1->widthRatio
      || *(float *)(v1 + 160) != a1->heightRatio
      || *(float *)(v1 + 164) != a1->metricDepthWidth
      || *(float *)(v1 + 168) != a1->metricDepthHeight;
}

Swift::Void __swiftcall AcceleratedSceneDistanceToJointProcessor.initializeBuffer(_:)(Hands::BufferDataMetaData *a1)
{
  uint64_t v1;
  int32x2_t v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(float *)(v1 + 20) * (float)a1->segmentationBufferWidth;
  if ((~LODWORD(v3) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v3 <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v3 >= 9.2234e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v4 = *(float *)(v1 + 24) * (float)a1->segmentationBufferHeight;
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v4 <= -9.2234e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v4 >= 9.2234e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v5 = (uint64_t)v3;
  v6 = (uint64_t)v4;
  v7 = (uint64_t)v3 * (uint64_t)v4;
  if ((unsigned __int128)((uint64_t)v3 * (__int128)(uint64_t)v4) >> 64 != v7 >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((unint64_t)(v7 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v2.i32[0] = 1.0;
  v8 = specialized Array.init(repeating:count:)(4 * v7, v2);
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = v8;
  swift_bridgeObjectRelease();
  v9.i32[0] = 0;
  v10 = specialized Array.init(repeating:count:)(v7, v9);
  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = v10;
  swift_bridgeObjectRelease();
  v11.i32[0] = 0;
  v12 = specialized Array.init(repeating:count:)(v7, v11);
  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = v12;
  swift_bridgeObjectRelease();
  v13.i32[0] = 0;
  v14 = specialized Array.init(repeating:count:)(v7, v13);
  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v1 + 176);
  v16 = __OFADD__(v15, v6);
  v17 = v15 + v6;
  if (v16)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)(v1 + 184) = v17;
  v18 = *(_QWORD *)(v1 + 192);
  v16 = __OFADD__(v18, v5);
  v19 = v18 + v5;
  if (!v16)
  {
    *(_QWORD *)(v1 + 200) = v19;
    *(_QWORD *)(v1 + 32) = v5;
    *(_QWORD *)(v1 + 40) = v6;
    return;
  }
LABEL_21:
  __break(1u);
}

Swift::Void __swiftcall AcceleratedSceneDistanceToJointProcessor.initializeRowColValues(_:)(Hands::BufferDataMetaData *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4;
  uint64_t segmentationBufferWidth;
  vDSP_Length segmentationBufferHeight;
  int64_t v7;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  char v18;
  uint64_t v19;
  char *v20;
  vDSP_Length v21;
  char v22;
  float v23;
  uint64_t v24;
  char *v25;
  vDSP_Length v26;
  char v27;
  uint64_t v28;
  char *v29;
  vDSP_Length v30;
  char v31;
  uint64_t v32;
  char *v33;
  vDSP_Length v34;
  char v35;
  float v36;
  uint64_t v37;
  char *v38;
  vDSP_Length v39;
  char v40;
  Hands::BufferDataMetaData *v41;
  Swift::Float __B;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  segmentationBufferHeight = a1->segmentationBufferHeight;
  segmentationBufferWidth = a1->segmentationBufferWidth;
  v7 = segmentationBufferWidth * a1->segmentationBufferHeight;
  if ((unsigned __int128)(segmentationBufferWidth * (__int128)a1->segmentationBufferHeight) >> 64 != v7 >> 63)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v4.i32[0] = 0;
  v9 = specialized Array.init(repeating:count:)(segmentationBufferWidth * a1->segmentationBufferHeight, v4);
  v1 = (uint64_t *)(v2 + 80);
  swift_beginAccess();
  *(_QWORD *)(v2 + 80) = v9;
  swift_bridgeObjectRelease();
  v10.i32[0] = 0;
  v3 = specialized Array.init(repeating:count:)(v7, v10);
  v7 = v2 + 88;
  swift_beginAccess();
  *(_QWORD *)(v2 + 88) = v3;
  swift_bridgeObjectRelease();
  if ((segmentationBufferHeight & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v41 = a1;
  if (segmentationBufferHeight)
  {
    if (segmentationBufferWidth < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v11 = 0;
    while (v11 != segmentationBufferHeight)
    {
      if (segmentationBufferWidth)
      {
        v12 = 0;
        while (1)
        {
          v13 = *(_QWORD *)(v2 + 112);
          v14 = v11 * v13;
          if ((unsigned __int128)(v11 * (__int128)v13) >> 64 != (v11 * v13) >> 63)
            break;
          v15 = v14 + v12;
          if (__OFADD__(v14, v12))
            goto LABEL_36;
          swift_beginAccess();
          v3 = *v1;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v1 = v3;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v15 & 0x8000000000000000) != 0)
              goto LABEL_37;
          }
          else
          {
            v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
            *v1 = v3;
            if ((v15 & 0x8000000000000000) != 0)
              goto LABEL_37;
          }
          if (v15 >= *(_QWORD *)(v3 + 16))
            goto LABEL_38;
          *(float *)(v3 + 4 * v15 + 32) = (float)v11;
          swift_endAccess();
          swift_beginAccess();
          v3 = *(_QWORD *)v7;
          v17 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v7 = v3;
          if ((v17 & 1) == 0)
          {
            v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
            *(_QWORD *)v7 = v3;
          }
          if (v15 >= *(_QWORD *)(v3 + 16))
            goto LABEL_39;
          *(float *)(v3 + 4 * v15 + 32) = (float)v12;
          swift_endAccess();
          if (segmentationBufferWidth == ++v12)
            goto LABEL_6;
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        break;
      }
LABEL_6:
      if (++v11 == segmentationBufferHeight)
        goto LABEL_22;
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_22:
  v3 = *(_QWORD *)v7;
  swift_beginAccess();
  segmentationBufferWidth = *(_QWORD *)v7;
  segmentationBufferHeight = *(_QWORD *)(*(_QWORD *)v7 + 16);
  if (*(_QWORD *)(v3 + 16) == segmentationBufferHeight)
  {
    swift_bridgeObjectRetain();
    v18 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v7 = segmentationBufferWidth;
    if ((v18 & 1) != 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  segmentationBufferWidth = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(segmentationBufferWidth);
  *(_QWORD *)v7 = segmentationBufferWidth;
LABEL_24:
  __B = v41->heightRatio;
  vDSP_vsmul((const float *)(v3 + 32), 1, &__B, (float *)(segmentationBufferWidth + 32), 1, segmentationBufferHeight);
  *(_QWORD *)v7 = segmentationBufferWidth;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)v7;
  swift_beginAccess();
  v20 = *(char **)v7;
  v21 = *(_QWORD *)(*(_QWORD *)v7 + 16);
  if (*(_QWORD *)(v19 + 16) == v21)
  {
    swift_bridgeObjectRetain();
    v22 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v7 = v20;
    if ((v22 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    __break(1u);
  }
  v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
  *(_QWORD *)v7 = v20;
LABEL_26:
  __B = -v41->opticalCenterX;
  vDSP_vsadd((const float *)(v19 + 32), 1, &__B, (float *)v20 + 8, 1, v21);
  *(_QWORD *)(v2 + 88) = v20;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v23 = *(float *)(v2 + 152);
  v24 = *(_QWORD *)(v2 + 88);
  swift_beginAccess();
  v25 = *(char **)(v2 + 88);
  v26 = *((_QWORD *)v25 + 2);
  if (*(_QWORD *)(v24 + 16) == v26)
  {
    swift_bridgeObjectRetain();
    v27 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v7 = v25;
    if ((v27 & 1) != 0)
      goto LABEL_28;
  }
  else
  {
    __break(1u);
  }
  v25 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v25);
  *(_QWORD *)v7 = v25;
LABEL_28:
  __B = v23;
  vDSP_vsmul((const float *)(v24 + 32), 1, &__B, (float *)v25 + 8, 1, v26);
  *(_QWORD *)v7 = v25;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v28 = *v1;
  swift_beginAccess();
  v29 = (char *)*v1;
  v30 = *(_QWORD *)(*v1 + 16);
  if (*(_QWORD *)(v28 + 16) == v30)
  {
    swift_bridgeObjectRetain();
    v31 = swift_isUniquelyReferenced_nonNull_native();
    *v1 = (uint64_t)v29;
    if ((v31 & 1) != 0)
      goto LABEL_30;
  }
  else
  {
    __break(1u);
  }
  v29 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v29);
  *v1 = (uint64_t)v29;
LABEL_30:
  __B = v41->widthRatio;
  vDSP_vsmul((const float *)(v28 + 32), 1, &__B, (float *)v29 + 8, 1, v30);
  *v1 = (uint64_t)v29;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v32 = *v1;
  swift_beginAccess();
  v33 = (char *)*v1;
  v34 = *(_QWORD *)(*v1 + 16);
  if (*(_QWORD *)(v32 + 16) == v34)
  {
    swift_bridgeObjectRetain();
    v35 = swift_isUniquelyReferenced_nonNull_native();
    *v1 = (uint64_t)v33;
    if ((v35 & 1) != 0)
      goto LABEL_32;
  }
  else
  {
    __break(1u);
  }
  v33 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v33);
  *v1 = (uint64_t)v33;
LABEL_32:
  __B = -v41->opticalCenterY;
  vDSP_vsadd((const float *)(v32 + 32), 1, &__B, (float *)v33 + 8, 1, v34);
  *(_QWORD *)(v2 + 80) = v33;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v36 = *(float *)(v2 + 152);
  v37 = *(_QWORD *)(v2 + 80);
  swift_beginAccess();
  v38 = *(char **)(v2 + 80);
  v39 = *((_QWORD *)v38 + 2);
  if (*(_QWORD *)(v37 + 16) != v39)
  {
    __break(1u);
    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  v40 = swift_isUniquelyReferenced_nonNull_native();
  *v1 = (uint64_t)v38;
  if ((v40 & 1) == 0)
  {
LABEL_55:
    v38 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v38);
    *v1 = (uint64_t)v38;
  }
  __B = v36;
  vDSP_vsmul((const float *)(v37 + 32), 1, &__B, (float *)v38 + 8, 1, v39);
  *v1 = (uint64_t)v38;
  swift_endAccess();
  swift_bridgeObjectRelease();
}

unint64_t AcceleratedSceneDistanceToJointProcessor.update3DCoordinatesBuffer(_:_:_:)(unint64_t result, uint64_t a2, float32x2_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  vDSP_Length v18;
  const float *v19;
  char *v20;
  char isUniquelyReferenced_nonNull_native;
  float v22;
  simd_float4 v23;
  __n128 v24;
  simd_float4 v25;
  __n128 v26;
  simd_float4 v27;
  __n128 v28;
  simd_float4 v29;
  __n128 v30;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = result;
    v8 = (_OWORD *)(v3 + 104);
    if (*(_QWORD *)(v3 + 112) != *(_QWORD *)(result + 8) || *(_QWORD *)v8 != *(_QWORD *)result)
    {
      v9 = *(_OWORD *)(result + 48);
      *(_OWORD *)(v3 + 136) = *(_OWORD *)(result + 32);
      *(_OWORD *)(v3 + 152) = v9;
      *(_DWORD *)(v3 + 168) = *(_DWORD *)(result + 64);
      v10 = *(_OWORD *)(result + 16);
      *v8 = *(_OWORD *)result;
      *(_OWORD *)(v3 + 120) = v10;
      AcceleratedSceneDistanceToJointProcessor.initializeBuffer(_:)((Hands::BufferDataMetaData *)result);
      AcceleratedSceneDistanceToJointProcessor.initializeRowColValues(_:)((Hands::BufferDataMetaData *)v7);
    }
    if (AcceleratedSceneDistanceToJointProcessor.isAnyBufferSizeChange(_:)((Hands::BufferDataMetaData *)v7))
    {
      v11 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(v3 + 136) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(v3 + 152) = v11;
      *(_DWORD *)(v3 + 168) = *(_DWORD *)(v7 + 64);
      v12 = *(_OWORD *)(v7 + 16);
      *v8 = *(_OWORD *)v7;
      *(_OWORD *)(v3 + 120) = v12;
      AcceleratedSceneDistanceToJointProcessor.initializeRowColValues(_:)((Hands::BufferDataMetaData *)v7);
    }
    v23 = *(simd_float4 *)(a2 + 96);
    v25 = *(simd_float4 *)(a2 + 112);
    v27 = *(simd_float4 *)(a2 + 128);
    v29 = *(simd_float4 *)(a2 + 144);
    AcceleratedSceneDistanceToJointProcessor.updateProcessingBBox(_:_:_:)(v7, a3, v23, v25, v27, v29);
    AcceleratedSceneDistanceToJointProcessor.filling3DCoordinatesBufferWithPointsInDeviceCoordBbox(_:top:bottom:left:right:)(v4, *(_QWORD *)(v3 + 176), *(_QWORD *)(v3 + 184), *(_QWORD *)(v3 + 192), *(char **)(v3 + 200));
    swift_beginAccess();
    v13 = *(_QWORD *)(v3 + 48);
    v14 = *(float32x4_t *)(a2 + 32);
    v15 = *(float32x4_t *)(a2 + 48);
    v16 = *(float32x4_t *)(a2 + 64);
    v17 = *(float32x4_t *)(a2 + 80);
    v24 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v23.f32[0]), v15, *(float32x2_t *)v23.f32, 1), v16, (float32x4_t)v23, 2), v17, (float32x4_t)v23, 3);
    v26 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v25.f32[0]), v15, *(float32x2_t *)v25.f32, 1), v16, (float32x4_t)v25, 2), v17, (float32x4_t)v25, 3);
    v28 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v27.f32[0]), v15, *(float32x2_t *)v27.f32, 1), v16, (float32x4_t)v27, 2), v17, (float32x4_t)v27, 3);
    v30 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v29.f32[0]), v15, *(float32x2_t *)v29.f32, 1), v16, (float32x4_t)v29, 2), v17, (float32x4_t)v29, 3);
    swift_beginAccess();
    v18 = *(_QWORD *)(v13 + 16) >> 2;
    swift_bridgeObjectRetain();
    v19 = (const float *)(specialized static SceneSegmentationProcessingUtils.simd_float4x4_as_float_array(_:)(v24, v26, v28, v30)+ 32);
    v20 = *(char **)(v3 + 48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 48) = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2), 0, v20);
    *(_QWORD *)(v3 + 48) = v20;
    vDSP_mmul((const float *)(v13 + 32), 1, v19, 1, (float *)v20 + 8, 1, v18, 4uLL, 4uLL);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    AcceleratedSceneDistanceToJointProcessor.updateMinDistancesBuffer(_:)((uint64_t)a3);
    swift_beginAccess();
    result = specialized Sequence<>.min()(*(_QWORD *)(v3 + 56));
    v22 = *(float *)&result;
    if ((result & 0x100000000) != 0)
      v22 = INFINITY;
    *(float *)(v3 + 96) = v22;
  }
  return result;
}

uint64_t AcceleratedSceneDistanceToJointProcessor.updateProcessingBBox(_:_:_:)(uint64_t a1, float32x2_t *a2, simd_float4 a3, simd_float4 a4, simd_float4 a5, simd_float4 a6)
{
  uint64_t *v6;
  float32x4_t v12;
  int8x8_t v13;
  float v14;

  *(float32x2_t *)v12.f32 = vmul_f32(vadd_f32(a2[10], a2[12]), (float32x2_t)0x3F0000003F000000);
  v12.f32[2] = (float)(a2[11].f32[0] + a2[13].f32[0]) * 0.5;
  v12.i32[3] = 0;
  v13 = specialized static SceneSegmentationProcessingUtils.deviceCoordsToMetricDepthCoordinate(_:_:_:)(a1, v12, a3, a4, a5, a6);
  v14 = *(float *)&v13.i32[1] / *(float *)(a1 + 56);
  specialized static AcceleratedSceneDistanceToJointProcessor.pickFixedLengthInterval(_:_:_:_:_:)(v6[4], *(_QWORD *)(a1 + 8), v6 + 24, v6 + 25, *(float *)v13.i32 / *(float *)(a1 + 52));
  return specialized static AcceleratedSceneDistanceToJointProcessor.pickFixedLengthInterval(_:_:_:_:_:)(v6[5], *(_QWORD *)a1, v6 + 22, v6 + 23, v14);
}

void specialized static vDSP.multiply<A, B, C>(_:_:result:)(uint64_t a1, uint64_t a2, char **a3)
{
  char **v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  vDSP_Length v7;

  v6 = *a3;
  v7 = *((_QWORD *)*a3 + 2);
  if (*(_QWORD *)(a1 + 16) != v7)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = a2;
  if (*(_QWORD *)(a2 + 16) != v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = a3;
  v5 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_7:
    v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
  vDSP_vmul((const float *)(v5 + 32), 1, (const float *)(v4 + 32), 1, (float *)v6 + 8, 1, v7);
  *v3 = v6;
}

void closure #1 in AcceleratedSceneDistanceToJointProcessor.subSampleRowOrColValues(_:_:top:bottom:left:right:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6, uint64_t a7, uint64_t a8)
{
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  vDSP_Length v11;
  vDSP_Length v12;
  char *v15;
  char isUniquelyReferenced_nonNull_native;

  if (!a1)
    goto LABEL_16;
  v8 = *(_QWORD *)(a4 + 112);
  v9 = a3 * v8;
  if ((unsigned __int128)(a3 * (__int128)v8) >> 64 != (a3 * v8) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  v10 = v9 + a5;
  if (__OFADD__(v9, a5))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v11 = a7 - a5;
  if (__OFSUB__(a7, a5))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v12 = a8 - a3;
  if (__OFSUB__(a8, a3))
    goto LABEL_15;
  if ((v12 & 0x8000000000000000) != 0 || v8 < 0)
    goto LABEL_17;
  v15 = *a6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v15 + 2), 0, v15);
  *a6 = v15;
  vDSP_mmov((const float *)(a1 + 4 * v10), (float *)v15 + 8, v11, v12, v8, v11);
}

uint64_t AcceleratedSceneDistanceToJointProcessor.filling3DCoordinatesBufferWithPointsInDeviceCoordBbox(_:top:bottom:left:right:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  vDSP_Length v5;
  char *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  vDSP_Length __N;
  float __A[3];
  _OWORD v43[4];
  int v44;
  uint64_t v45;

  v9 = a5;
  v11 = a3;
  v45 = *MEMORY[0x24BDAC8D0];
  if (a3 < 0)
  {
    v11 = *((_QWORD *)v6 + 13);
    if (((unint64_t)a5 & 0x8000000000000000) == 0)
    {
LABEL_3:
      v14 = v11 - a2;
      if (!__OFSUB__(v11, a2))
        goto LABEL_4;
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
  }
  else if (((unint64_t)a5 & 0x8000000000000000) == 0)
  {
    goto LABEL_3;
  }
  v9 = (char *)*((_QWORD *)v6 + 14);
  v14 = v11 - a2;
  if (__OFSUB__(v11, a2))
    goto LABEL_19;
LABEL_4:
  v15 = (uint64_t)&v9[-a4];
  if (__OFSUB__(v9, a4))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v5 = v14 * v15;
  if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
    *v7 = v8;
    goto LABEL_8;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16 = *(_OWORD *)(v6 + 120);
  v17 = *(_OWORD *)(v6 + 152);
  v43[2] = *(_OWORD *)(v6 + 136);
  v43[3] = v17;
  v44 = *((_DWORD *)v6 + 42);
  v43[0] = *(_OWORD *)(v6 + 104);
  v43[1] = v16;
  swift_beginAccess();
  specialized static SceneSegmentationProcessingUtils.get3DPointsDepth(_:_:_:top:bottom:left:right:)((uint64_t)v43, a1, (char **)v6 + 9, a2, v11, a4, (uint64_t)v9);
  swift_endAccess();
  a1 = *((_QWORD *)v6 + 9);
  v7 = (char **)(v6 + 48);
  swift_beginAccess();
  v8 = (char *)*((_QWORD *)v6 + 6);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *((_QWORD *)v6 + 6) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_22;
LABEL_8:
  if (*((_QWORD *)v8 + 2) < 3uLL)
  {
    __break(1u);
LABEL_24:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
    *v7 = v9;
    goto LABEL_12;
  }
  vDSP_mmov((const float *)(a1 + 32), (float *)v8 + 10, 1uLL, v5, 1uLL, 4uLL);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = *((_QWORD *)v6 + 11);
  swift_beginAccess();
  __N = v5;
  v20 = v11;
  v21 = v9;
  v22 = v7;
  v23 = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRetain();
  v24 = v23;
  v7 = v22;
  v25 = (uint64_t)v21;
  v26 = v20;
  v39 = a2;
  v40 = a4;
  closure #1 in AcceleratedSceneDistanceToJointProcessor.subSampleRowOrColValues(_:_:top:bottom:left:right:)(v19 + 32, v24, a2, (uint64_t)v6, a4, (char **)v6 + 8, v25, v20);
  swift_endAccess();
  swift_bridgeObjectRelease();
  v28 = *((_QWORD *)v6 + 8);
  v27 = *((_QWORD *)v6 + 9);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static vDSP.multiply<A, B, C>(_:_:result:)(v27, v28, (char **)v6 + 8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = *((_QWORD *)v6 + 8);
  swift_beginAccess();
  v30 = (char *)*((_QWORD *)v6 + 6);
  swift_bridgeObjectRetain();
  v31 = swift_isUniquelyReferenced_nonNull_native();
  *((_QWORD *)v6 + 6) = v30;
  if ((v31 & 1) == 0)
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2), 0, v30);
  *((_QWORD *)v6 + 6) = v30;
  swift_bridgeObjectRetain();
  vDSP_mmov((const float *)(v29 + 32), (float *)v30 + 8, 1uLL, __N, 1uLL, 4uLL);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v32 = *((_QWORD *)v6 + 10);
  swift_beginAccess();
  v33 = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRetain();
  closure #1 in AcceleratedSceneDistanceToJointProcessor.subSampleRowOrColValues(_:_:top:bottom:left:right:)(v32 + 32, v33, v39, (uint64_t)v6, v40, (char **)v6 + 8, v25, v26);
  swift_endAccess();
  swift_bridgeObjectRelease();
  v35 = *((_QWORD *)v6 + 8);
  v34 = *((_QWORD *)v6 + 9);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static vDSP.multiply<A, B, C>(_:_:result:)(v34, v35, (char **)v6 + 8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = *((_QWORD *)v6 + 8);
  swift_beginAccess();
  v9 = (char *)*((_QWORD *)v6 + 6);
  swift_bridgeObjectRetain();
  v36 = swift_isUniquelyReferenced_nonNull_native();
  *((_QWORD *)v6 + 6) = v9;
  if ((v36 & 1) == 0)
    goto LABEL_24;
LABEL_12:
  if (*((_QWORD *)v9 + 2) < 2uLL)
  {
    __break(1u);
    goto LABEL_26;
  }
  vDSP_mmov((const float *)(a1 + 32), (float *)v9 + 9, 1uLL, __N, 1uLL, 4uLL);
  swift_endAccess();
  swift_bridgeObjectRelease();
  __A[0] = 1.0;
  swift_beginAccess();
  v6 = *v7;
  v37 = swift_isUniquelyReferenced_nonNull_native();
  *v7 = v6;
  if ((v37 & 1) == 0)
  {
LABEL_26:
    v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
    *v7 = v6;
  }
  if (*((_QWORD *)v6 + 2) < 4uLL)
    __break(1u);
  vDSP_vfill(__A, (float *)v6 + 11, 4, __N);
  return swift_endAccess();
}

uint64_t AcceleratedSceneDistanceToJointProcessor.updateMinDistancesBuffer(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  char v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  v3 = swift_allocObject();
  v5 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 16) = xmmword_23D9A7050;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = v5;
  swift_beginAccess();
  v6 = *(_BYTE *)(v1 + 16);
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v7 = swift_bridgeObjectRetain();
  specialized static SceneSegmentationProcessingUtils.calculateMinDistances_nonAMX(points:targetPoints:minDistances:tempBuffer:squaredDistances:usingSquaredDistance:)(v7, (__n128 *)v3, (char **)(v1 + 56), (char **)(v1 + 64), (char **)(v1 + 72), v6);
  swift_endAccess();
  swift_endAccess();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  return swift_deallocClassInstance();
}

uint64_t AcceleratedSceneDistanceToJointProcessor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AcceleratedSceneDistanceToJointProcessor()
{
  return objc_opt_self();
}

uint64_t specialized AcceleratedSceneDistanceToJointProcessor.init(usingSquaredDistance:processWidthRatio:processHeightRatio:)(float a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 32) = -1;
  *(_QWORD *)(v2 + 40) = -1;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 48) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 56) = v3;
  *(_QWORD *)(v2 + 64) = v3;
  *(_QWORD *)(v2 + 72) = v3;
  *(_QWORD *)(v2 + 80) = v3;
  *(_QWORD *)(v2 + 88) = v3;
  *(_DWORD *)(v2 + 96) = 1120403456;
  *(_OWORD *)(v2 + 176) = xmmword_23D9B5CF0;
  *(_OWORD *)(v2 + 192) = xmmword_23D9B5CF0;
  *(_BYTE *)(v2 + 16) = 0;
  *(float *)(v2 + 20) = a1;
  *(float *)(v2 + 24) = a2;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 156) = xmmword_23D9B5310;
  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = v3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v2 + 56) = v3;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized static AcceleratedSceneDistanceToJointProcessor.pickFixedLengthInterval(_:_:_:_:_:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4, float a5)
{
  float v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v5 = a5 + (float)((float)result * -0.5);
  if ((~LODWORD(v5) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v6 = (uint64_t)v5 & ~((uint64_t)v5 >> 63);
  *a3 = v6;
  v7 = __OFADD__(v6, result);
  v8 = v6 + result;
  if (v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *a4 = v8;
  if (v8 < a2)
    return result;
  *a4 = a2;
  if (__OFSUB__(a2, result))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  *a3 = a2 - result;
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PoseModelType@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  uint64_t v3;

  v2 = result == 0;
  if (result == 2)
    v3 = 1;
  else
    v3 = result;
  *(_QWORD *)a2 = v3;
  if (result == 2)
    v2 = 1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance PoseModelType()
{
  _BYTE *v0;

  if (v0[8])
    return 2 * (*(_QWORD *)v0 != 0);
  else
    return *(_QWORD *)v0;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance PoseModelType@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  char v5;

  v2 = *result;
  v3 = *result == 0;
  v4 = *result == 2;
  if (*result == 2)
    v2 = 1;
  *(_QWORD *)a2 = v2;
  v5 = v4 || v3;
  *(_BYTE *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PoseModelType(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 8))
    v2 = 2 * (*(_QWORD *)v1 != 0);
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseModelType()
{
  lazy protocol witness table accessor for type PoseModelType and conformance PoseModelType();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PoseModelType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 8))
    v2 = 2 * (*(_QWORD *)a1 != 0);
  v3 = 2 * (*(_QWORD *)a2 != 0);
  if (!*(_BYTE *)(a2 + 8))
    v3 = *(_QWORD *)a2;
  return v2 == v3;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PoseModelType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static PoseModelType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EngageStatus()
{
  lazy protocol witness table accessor for type EngageStatus and conformance EngageStatus();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance EngageStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static EngageStatus.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandPresence.Category()
{
  lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance HandPresence.Category@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static HandPresence.Category.allCases, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PoseModelType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PoseModelType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance EngageStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static EngageStatus._protobuf_nameMap, a1);
}

uint64_t JointTransformPB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix, &demangling cache variable for type metadata for TransformMatrixPB?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for JointTransformPB._StorageClass()
{
  return type metadata accessor for JointTransformPB._StorageClass(0);
}

uint64_t type metadata accessor for JointTransformPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for JointTransformPB._StorageClass);
}

void type metadata completion function for JointTransformPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TransformMatrixPB?, (void (*)(uint64_t))type metadata accessor for TransformMatrixPB);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t closure #1 in JointTransformPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
          goto LABEL_5;
        case 2:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
LABEL_5:
          v16 = type metadata accessor for Matrix2dPB;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB;
          v18 = &protocol conformance descriptor for Matrix2dPB;
          goto LABEL_6;
        case 4:
        case 11:
          closure #3 in closure #1 in JointTransformPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #4 in closure #1 in JointTransformPB.decodeMessage<A>(decoder:)();
          break;
        case 9:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
          goto LABEL_15;
        case 10:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
LABEL_15:
          v16 = type metadata accessor for TransformMatrixPB;
          v17 = &lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB;
          v18 = &protocol conformance descriptor for TransformMatrixPB;
LABEL_6:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in closure #1 in JointTransformPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for ProtobufInt32();
  type metadata accessor for ProtobufFloat();
  dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
  return swift_endAccess();
}

uint64_t closure #1 in JointTransformPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  float *v10;
  uint64_t v11;
  float *v12;

  result = closure #1 in closure #1 in JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    closure #2 in closure #1 in JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    v10 = (float *)(a1
                  + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty);
    swift_beginAccess();
    if (*v10 != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    v11 = a1
        + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__occlusionValues;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v11 + 16))
    {
      type metadata accessor for ProtobufInt32();
      type metadata accessor for ProtobufFloat();
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #3 in closure #1 in JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #4 in closure #1 in JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    v12 = (float *)(a1
                  + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence);
    result = swift_beginAccess();
    if (*v12 != 0.0)
      return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #1 in closure #1 in JointTransformPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #2 in closure #1 in JointTransformPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #3 in closure #1 in JointTransformPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TransformMatrixPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TransformMatrixPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TransformMatrixPB);
}

uint64_t closure #4 in closure #1 in JointTransformPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TransformMatrixPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TransformMatrixPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TransformMatrixPB);
}

BOOL closure #1 in static JointTransformPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  char v67;
  float *v68;
  float v69;
  float *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  float *v96;
  float v97;
  float *v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v107 = type metadata accessor for TransformMatrixPB(0);
  v105 = *(_QWORD *)(v107 - 8);
  MEMORY[0x24BDAC7A8](v107, v4);
  v102 = (uint64_t)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TransformMatrixPB?, TransformMatrixPB?));
  MEMORY[0x24BDAC7A8](v109, v6);
  v103 = (uint64_t)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v108 = (uint64_t)&v100 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v101 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v106 = (char *)&v100 - v16;
  MEMORY[0x24BDAC7A8](v17, v18);
  v104 = (uint64_t)&v100 - v19;
  MEMORY[0x24BDAC7A8](v20, v21);
  v110 = (uint64_t)&v100 - v22;
  v23 = type metadata accessor for Matrix2dPB(0);
  v117 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23, v24);
  v112 = (uint64_t)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v26, v27);
  v115 = (uint64_t)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (char *)&v100 - v31;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v33, v34);
  v111 = (uint64_t)&v100 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36, v37);
  v114 = (uint64_t)&v100 - v38;
  MEMORY[0x24BDAC7A8](v39, v40);
  v116 = (uint64_t)&v100 - v41;
  MEMORY[0x24BDAC7A8](v42, v43);
  v45 = (char *)&v100 - v44;
  v46 = a1;
  v47 = a1 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v47, (uint64_t)v45, &demangling cache variable for type metadata for Matrix2dPB?);
  v48 = a2 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
  swift_beginAccess();
  v113 = v26;
  v49 = (uint64_t)&v32[*(int *)(v26 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v45, (uint64_t)v32, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v48, v49, &demangling cache variable for type metadata for Matrix2dPB?);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v117 + 48);
  v51 = v50(v32, 1, v23);
  v118 = a2;
  if (v51 == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v45, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v50((char *)v49, 1, v23) == 1)
    {
      v52 = v23;
      outlined destroy of Coordinate3DPB?((uint64_t)v32, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_8;
    }
LABEL_6:
    v53 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    v54 = (uint64_t)v32;
LABEL_14:
    outlined destroy of Coordinate3DPB?(v54, v53);
    goto LABEL_15;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v32, v116, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v50((char *)v49, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v45, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB(v116, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  v52 = v23;
  v55 = v112;
  outlined init with take of Matrix2dPB(v49, v112, type metadata accessor for Matrix2dPB);
  swift_retain();
  swift_retain();
  v56 = v116;
  v57 = specialized static Matrix2dPB.== infix(_:_:)(v116, v55);
  outlined destroy of Matrix3x3PB(v55, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v45, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB(v56, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v32, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v57 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v58 = v46 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
  swift_beginAccess();
  v59 = v114;
  outlined init with copy of (Int32, Matrix2dPB)(v58, v114, &demangling cache variable for type metadata for Matrix2dPB?);
  v60 = v118
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
  swift_beginAccess();
  v61 = v115;
  v62 = v115 + *(int *)(v113 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v59, v115, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v60, v62, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v50((char *)v61, 1, v52) == 1)
  {
    outlined destroy of Coordinate3DPB?(v59, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v50((char *)v62, 1, v52) == 1)
    {
      outlined destroy of Coordinate3DPB?(v61, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  v63 = v111;
  outlined init with copy of (Int32, Matrix2dPB)(v61, v111, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v50((char *)v62, 1, v52) == 1)
  {
    outlined destroy of Coordinate3DPB?(v59, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB(v63, type metadata accessor for Matrix2dPB);
LABEL_13:
    v53 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    v54 = v61;
    goto LABEL_14;
  }
  v65 = v59;
  v66 = v112;
  outlined init with take of Matrix2dPB(v62, v112, type metadata accessor for Matrix2dPB);
  v67 = specialized static Matrix2dPB.== infix(_:_:)(v63, v66);
  outlined destroy of Matrix3x3PB(v66, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v65, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB(v63, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v61, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v67 & 1) == 0)
    goto LABEL_15;
LABEL_17:
  v68 = (float *)(v46
                + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty);
  swift_beginAccess();
  v69 = *v68;
  v70 = (float *)(v118
                + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty);
  swift_beginAccess();
  if (v69 != *v70)
    goto LABEL_15;
  v71 = (unint64_t *)(v46
                           + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__occlusionValues);
  swift_beginAccess();
  v72 = *v71;
  v73 = (uint64_t *)(v118
                  + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__occlusionValues);
  swift_beginAccess();
  if ((specialized static Dictionary<>.== infix(_:_:)(v72, *v73) & 1) == 0)
    goto LABEL_15;
  v74 = v46
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  swift_beginAccess();
  v75 = v110;
  outlined init with copy of (Int32, Matrix2dPB)(v74, v110, &demangling cache variable for type metadata for TransformMatrixPB?);
  v76 = v118
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  swift_beginAccess();
  v77 = v108;
  v78 = v108 + *(int *)(v109 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v75, v108, &demangling cache variable for type metadata for TransformMatrixPB?);
  v79 = v77;
  outlined init with copy of (Int32, Matrix2dPB)(v76, v78, &demangling cache variable for type metadata for TransformMatrixPB?);
  v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
  v81 = v107;
  if (v80(v79, 1, v107) == 1)
  {
    outlined destroy of Coordinate3DPB?(v75, &demangling cache variable for type metadata for TransformMatrixPB?);
    v82 = v80(v78, 1, v81);
    v83 = (uint64_t)v106;
    if (v82 != 1)
    {
LABEL_31:
      v53 = &demangling cache variable for type metadata for (TransformMatrixPB?, TransformMatrixPB?);
      v54 = v79;
      goto LABEL_14;
    }
    outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for TransformMatrixPB?);
  }
  else
  {
    v84 = v104;
    outlined init with copy of (Int32, Matrix2dPB)(v79, v104, &demangling cache variable for type metadata for TransformMatrixPB?);
    v85 = v80(v78, 1, v81);
    v83 = (uint64_t)v106;
    if (v85 == 1)
    {
      v86 = v110;
LABEL_30:
      outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for TransformMatrixPB?);
      outlined destroy of Matrix3x3PB(v84, type metadata accessor for TransformMatrixPB);
      goto LABEL_31;
    }
    v87 = v102;
    outlined init with take of Matrix2dPB(v78, v102, type metadata accessor for TransformMatrixPB);
    v88 = specialized static TransformMatrixPB.== infix(_:_:)(v84, v87);
    outlined destroy of Matrix3x3PB(v87, type metadata accessor for TransformMatrixPB);
    outlined destroy of Coordinate3DPB?(v110, &demangling cache variable for type metadata for TransformMatrixPB?);
    outlined destroy of Matrix3x3PB(v84, type metadata accessor for TransformMatrixPB);
    outlined destroy of Coordinate3DPB?(v108, &demangling cache variable for type metadata for TransformMatrixPB?);
    if ((v88 & 1) == 0)
      goto LABEL_15;
  }
  v89 = v46
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v89, v83, &demangling cache variable for type metadata for TransformMatrixPB?);
  v90 = v118
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
  swift_beginAccess();
  v91 = v103;
  v92 = v103 + *(int *)(v109 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v83, v103, &demangling cache variable for type metadata for TransformMatrixPB?);
  v79 = v91;
  outlined init with copy of (Int32, Matrix2dPB)(v90, v92, &demangling cache variable for type metadata for TransformMatrixPB?);
  if (v80(v91, 1, v81) != 1)
  {
    v93 = v91;
    v84 = v101;
    outlined init with copy of (Int32, Matrix2dPB)(v93, v101, &demangling cache variable for type metadata for TransformMatrixPB?);
    if (v80(v92, 1, v81) == 1)
    {
      v86 = v83;
      goto LABEL_30;
    }
    v94 = v102;
    outlined init with take of Matrix2dPB(v92, v102, type metadata accessor for TransformMatrixPB);
    v95 = specialized static TransformMatrixPB.== infix(_:_:)(v84, v94);
    outlined destroy of Matrix3x3PB(v94, type metadata accessor for TransformMatrixPB);
    outlined destroy of Coordinate3DPB?(v83, &demangling cache variable for type metadata for TransformMatrixPB?);
    outlined destroy of Matrix3x3PB(v84, type metadata accessor for TransformMatrixPB);
    outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for TransformMatrixPB?);
    if ((v95 & 1) != 0)
      goto LABEL_33;
LABEL_15:
    swift_release();
    swift_release();
    return 0;
  }
  outlined destroy of Coordinate3DPB?(v83, &demangling cache variable for type metadata for TransformMatrixPB?);
  if (v80(v92, 1, v81) != 1)
    goto LABEL_31;
  outlined destroy of Coordinate3DPB?(v91, &demangling cache variable for type metadata for TransformMatrixPB?);
LABEL_33:
  v96 = (float *)(v46
                + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence);
  swift_beginAccess();
  v97 = *v96;
  swift_release();
  v98 = (float *)(v118
                + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence);
  swift_beginAccess();
  v99 = *v98;
  swift_release();
  return v97 == v99;
}

uint64_t protocol witness for Message.init() in conformance JointTransformPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static JointTransformPB._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance JointTransformPB()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance JointTransformPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for JointTransformPB, (void (*)(_QWORD))type metadata accessor for JointTransformPB._StorageClass, specialized JointTransformPB._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in JointTransformPB.decodeMessage<A>(decoder:));
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance JointTransformPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for JointTransformPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in JointTransformPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance JointTransformPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance JointTransformPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static JointTransformPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JointTransformPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance JointTransformPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JointTransformPB(uint64_t a1, uint64_t a2)
{
  return specialized static JointTransformPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for JointTransformPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static JointTransformPB.== infix(_:_:)) & 1;
}

uint64_t HandPosePB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v12 = v11;
        closure #2 in HandPosePB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for HandPosePB, type metadata accessor for Matrix2dPB, (unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for JointTransformPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB);
        v12 = v11;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v12 = v11;
    dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_5:
    v11 = v12;
    goto LABEL_6;
  }
  return result;
}

uint64_t HandPosePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (type metadata accessor for JointTransformPB(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in HandPosePB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, (uint64_t (*)(_QWORD, __n128))type metadata accessor for HandPosePB);
    if (!v4)
    {
      if (v3[2] != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      type metadata accessor for HandPosePB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t static HandPosePB.== infix(_:_:)(float *a1, uint64_t a2)
{
  return specialized static CompactHandPosePB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD, __n128))specialized static Array<A>.== infix(_:_:), type metadata accessor for HandPosePB, (uint64_t (*)(char *, uint64_t (*)(_QWORD, _QWORD, __n128)))specialized static Matrix2dPB.== infix(_:_:)) & 1;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance HandPosePB()
{
  return 0x65736F50646E6148;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandPosePB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandPosePB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandPosePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandPosePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandPosePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandPosePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandPosePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
  return Message.hash(into:)();
}

uint64_t CompactHandPosePB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 2:
          closure #2 in HandPosePB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for CompactHandPosePB, type metadata accessor for Matrix2dPB, (unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
          break;
        case 1:
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CompactHandPosePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in HandPosePB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, (uint64_t (*)(_QWORD, __n128))type metadata accessor for CompactHandPosePB);
    if (!v4)
    {
      if (v3[2] != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      type metadata accessor for CompactHandPosePB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in HandPosePB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, __n128))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[4];

  v19[3] = a4;
  v19[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Matrix2dPB(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a5(0, v14);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v17 + 28), (uint64_t)v10, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v10, (uint64_t)v16, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for Matrix2dPB);
}

uint64_t protocol witness for Message.init() in conformance HandPosePB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a2 + 8) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for Matrix2dPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CompactHandPosePB()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CompactHandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CompactHandPosePB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CompactHandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CompactHandPosePB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CompactHandPosePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB, type metadata accessor for CompactHandPosePB, (uint64_t)&protocol conformance descriptor for CompactHandPosePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CompactHandPosePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CompactHandPosePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompactHandPosePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB, type metadata accessor for CompactHandPosePB, (uint64_t)&protocol conformance descriptor for CompactHandPosePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompactHandPosePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB, type metadata accessor for CompactHandPosePB, (uint64_t)&protocol conformance descriptor for CompactHandPosePB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompactHandPosePB(float *a1, uint64_t a2)
{
  return specialized static CompactHandPosePB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD, __n128))specialized static Array<A>.== infix(_:_:), type metadata accessor for CompactHandPosePB, (uint64_t (*)(char *, uint64_t (*)(_QWORD, _QWORD, __n128)))static Matrix2dPB.== infix(_:_:)) & 1;
}

uint64_t HandPresence.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t HandPresence.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)v0
    || (lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (*(float *)(v0 + 12) == 0.0
      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for HandPresence(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance HandPresence@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance HandPresence()
{
  return 0x73657250646E6148;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandPresence()
{
  return HandPresence.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandPresence()
{
  return HandPresence.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandPresence()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandPresence@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandPresence._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandPresence()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandPresence()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
  return Message.hash(into:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandPresence.Category@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandPresence.Category._protobuf_nameMap, a1);
}

uint64_t EstimatedBoundingBoxPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t EstimatedBoundingBoxPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
    {
      if (*(float *)(v0 + 16) == 0.0
        || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        if (*(float *)(v0 + 20) == 0.0
          || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0 + 24)
            || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
                result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v1))
          {
            type metadata accessor for EstimatedBoundingBoxPB(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance EstimatedBoundingBoxPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance EstimatedBoundingBoxPB()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance EstimatedBoundingBoxPB()
{
  return EstimatedBoundingBoxPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance EstimatedBoundingBoxPB()
{
  return EstimatedBoundingBoxPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance EstimatedBoundingBoxPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance EstimatedBoundingBoxPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static EstimatedBoundingBoxPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EstimatedBoundingBoxPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EstimatedBoundingBoxPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB);
  return Message.hash(into:)();
}

uint64_t PoseSpecPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        lazy protocol witness table accessor for type PoseModelType and conformance PoseModelType();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for EstimatedBoundingBoxPB(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB);
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PoseSpecPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
        result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!v0[1]
      || (lazy protocol witness table accessor for type PoseModelType and conformance PoseModelType(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(_QWORD *)(v0[3] + 16)
        || (type metadata accessor for EstimatedBoundingBoxPB(0),
            lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PoseSpecPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PoseSpecPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PoseSpecPB()
{
  return 0x6365705365736F50;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PoseSpecPB()
{
  return PoseSpecPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PoseSpecPB()
{
  return PoseSpecPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PoseSpecPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PoseSpecPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PoseSpecPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PoseSpecPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseSpecPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
  return Message.hash(into:)();
}

uint64_t PoseLatentsPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void PoseLatentsPB.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_23D84CA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    __asm { BR              X10 }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PoseLatentsPB@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_23D9B5DC0;
  a1[1] = xmmword_23D9B5DC0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PoseLatentsPB()
{
  return 0x6574614C65736F50;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PoseLatentsPB()
{
  return PoseLatentsPB.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance PoseLatentsPB()
{
  PoseLatentsPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PoseLatentsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB, type metadata accessor for PoseLatentsPB, (uint64_t)&protocol conformance descriptor for PoseLatentsPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PoseLatentsPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PoseLatentsPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PoseLatentsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB, type metadata accessor for PoseLatentsPB, (uint64_t)&protocol conformance descriptor for PoseLatentsPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseLatentsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB, type metadata accessor for PoseLatentsPB, (uint64_t)&protocol conformance descriptor for PoseLatentsPB);
  return Message.hash(into:)();
}

uint64_t PoseImageCropPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
          goto LABEL_13;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_14;
        case 3:
          v4 = v3;
          closure #3 in PoseImageCropPB.decodeMessage<A>(decoder:)();
          goto LABEL_14;
        case 4:
          v4 = v3;
          closure #4 in PoseImageCropPB.decodeMessage<A>(decoder:)();
          goto LABEL_14;
        case 5:
          v4 = v3;
          closure #5 in PoseImageCropPB.decodeMessage<A>(decoder:)();
          goto LABEL_14;
        case 6:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_14;
        case 8:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_14;
        case 9:
          lazy protocol witness table accessor for type CanonicalizationType and conformance CanonicalizationType();
LABEL_13:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_14:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in PoseImageCropPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for PoseImageCropPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #4 in PoseImageCropPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for PoseImageCropPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #5 in PoseImageCropPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for PoseImageCropPB(0);
  type metadata accessor for Coordinate3DPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t PoseImageCropPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0
    || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    __asm { BR              X10 }
  }
  return result;
}

uint64_t closure #1 in PoseImageCropPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PoseImageCropPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 44), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #2 in PoseImageCropPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PoseImageCropPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 48), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #3 in PoseImageCropPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PoseImageCropPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 52), (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t protocol witness for Message.init() in conformance PoseImageCropPB@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_OWORD *)(a2 + 16) = xmmword_23D9B5DC0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  UnknownStorage.init()();
  v4 = a2 + a1[11];
  v5 = type metadata accessor for Matrix2dPB(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(a2 + a1[12], 1, 1, v5);
  v7 = a2 + a1[13];
  v8 = type metadata accessor for Coordinate3DPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PoseImageCropPB()
{
  return 0x67616D4965736F50;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PoseImageCropPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PoseImageCropPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PoseImageCropPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PoseImageCropPB()
{
  return PoseImageCropPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PoseImageCropPB()
{
  return PoseImageCropPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PoseImageCropPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB, type metadata accessor for PoseImageCropPB, (uint64_t)&protocol conformance descriptor for PoseImageCropPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PoseImageCropPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PoseImageCropPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PoseImageCropPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB, type metadata accessor for PoseImageCropPB, (uint64_t)&protocol conformance descriptor for PoseImageCropPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseImageCropPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB, type metadata accessor for PoseImageCropPB, (uint64_t)&protocol conformance descriptor for PoseImageCropPB);
  return Message.hash(into:)();
}

uint64_t ObjectInteractionDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          break;
        case 2:
        case 4:
        case 7:
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
          break;
        case 3:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeRepeatedBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t ObjectInteractionDataPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16) || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (result = dispatch thunk of Visitor.visitPackedInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (result = dispatch thunk of Visitor.visitPackedBoolField(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(v0[3] + 16)
          || (result = dispatch thunk of Visitor.visitPackedInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0[4] + 16)
            || (result = dispatch thunk of Visitor.visitPackedBoolField(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(v0[5] + 16)
              || (result = dispatch thunk of Visitor.visitPackedBoolField(value:fieldNumber:)(), !v1))
            {
              if (!*(_QWORD *)(v0[6] + 16)
                || (result = dispatch thunk of Visitor.visitPackedInt32Field(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for ObjectInteractionDataPB(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance ObjectInteractionDataPB@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  a1[2] = v1;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = v1;
  a1[6] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ObjectInteractionDataPB()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance ObjectInteractionDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance ObjectInteractionDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance ObjectInteractionDataPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ObjectInteractionDataPB()
{
  return ObjectInteractionDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ObjectInteractionDataPB()
{
  return ObjectInteractionDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ObjectInteractionDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB, type metadata accessor for ObjectInteractionDataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ObjectInteractionDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ObjectInteractionDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ObjectInteractionDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB, type metadata accessor for ObjectInteractionDataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ObjectInteractionDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB, type metadata accessor for ObjectInteractionDataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionDataPB);
  return Message.hash(into:)();
}

uint64_t CameraPairTransitionPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        closure #2 in HandPosePB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, &lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in HandPosePB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CameraPairTransitionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CameraPairTransitionPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v3[1])
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    type metadata accessor for CameraPairTransitionPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CameraPairTransitionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CameraPairTransitionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
}

uint64_t protocol witness for Message.init() in conformance CameraPairTransitionPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CameraPairTransitionPB()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CameraPairTransitionPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CameraPairTransitionPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CameraPairTransitionPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CameraPairTransitionPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CameraPairTransitionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CameraPairTransitionPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CameraPairTransitionPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CameraPairTransitionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CameraPairTransitionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB);
  return Message.hash(into:)();
}

uint64_t CameraPairTransitionPB.UnscaledTransformPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    else if (result == 1)
    {
      closure #1 in CameraPairTransitionPB.UnscaledTransformPB.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in CameraPairTransitionPB.UnscaledTransformPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t CameraPairTransitionPB.UnscaledTransformPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CameraPairTransitionPB.UnscaledTransformPB.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*v3 != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CameraPairTransitionPB.UnscaledTransformPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t protocol witness for Message.init() in conformance CameraPairTransitionPB.UnscaledTransformPB@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for Matrix2dPB(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance CameraPairTransitionPB.UnscaledTransformPB()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CameraPairTransitionPB.UnscaledTransformPB()
{
  return CameraPairTransitionPB.UnscaledTransformPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CameraPairTransitionPB.UnscaledTransformPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CameraPairTransitionPB.UnscaledTransformPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CameraPairTransitionPB.UnscaledTransformPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CameraPairTransitionPB.UnscaledTransformPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CameraPairTransitionPB.UnscaledTransformPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CameraPairTransitionPB.UnscaledTransformPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CameraPairTransitionPB.UnscaledTransformPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
  return Message.hash(into:)();
}

uint64_t HandDescriptorPB._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v1;
  v2 = v0
     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
  v3 = type metadata accessor for Coordinate3DPB(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter, 1, 1, v3);
  v4(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center, 1, 1, v3);
  v5 = v0
     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
  v6 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
  v8 = type metadata accessor for HandPosePB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore) = v1;
  v9 = v0
     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown) = 0;
  v10 = v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
  v11 = type metadata accessor for PoseSpecPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v4(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter, 1, 1, v3);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops) = v1;
  v12 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures;
  v13 = type metadata accessor for PoseLatentsPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchEngaged;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
  v16 = type metadata accessor for HandDescriptorInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData;
  v18 = type metadata accessor for ObjectInteractionDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionClass;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled) = 0;
  v20 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty;
  *(_DWORD *)v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchScore) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__rawPinchScore) = 0;
  v21 = v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
  v22 = type metadata accessor for PinchFeaturesPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionFilterCond) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore) = 0;
  v23 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  v24 = type metadata accessor for CameraPairTransitionPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchOcclusionStatus;
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason) = 0;
  v26 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
  v27 = type metadata accessor for CompactHandPosePB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
  v29 = type metadata accessor for PinchInfoPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  v31 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus;
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v32 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap) = 0;
  v33 = v0
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
  v34 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface) = 0;
  return v0;
}

uint64_t HandDescriptorPB._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose, &demangling cache variable for type metadata for HandPosePB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec, &demangling cache variable for type metadata for PoseSpecPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures, &demangling cache variable for type metadata for PoseLatentsPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures, &demangling cache variable for type metadata for PinchFeaturesPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose, &demangling cache variable for type metadata for CompactHandPosePB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo, &demangling cache variable for type metadata for PinchInfoPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  return v0;
}

uint64_t HandDescriptorPB._StorageClass.__deallocating_deinit()
{
  HandDescriptorPB._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandDescriptorPB._StorageClass()
{
  return type metadata accessor for HandDescriptorPB._StorageClass(0);
}

uint64_t type metadata accessor for HandDescriptorPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandDescriptorPB._StorageClass);
}

void type metadata completion function for HandDescriptorPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for DetectionCanonicalizationDataPB?, (void (*)(uint64_t))type metadata accessor for DetectionCanonicalizationDataPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandPosePB?, (void (*)(uint64_t))type metadata accessor for HandPosePB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PoseSpecPB?, (void (*)(uint64_t))type metadata accessor for PoseSpecPB);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PoseLatentsPB?, (void (*)(uint64_t))type metadata accessor for PoseLatentsPB);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandDescriptorInternalPB?, (void (*)(uint64_t))type metadata accessor for HandDescriptorInternalPB);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ObjectInteractionDataPB?, (void (*)(uint64_t))type metadata accessor for ObjectInteractionDataPB);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchFeaturesPB?, (void (*)(uint64_t))type metadata accessor for PinchFeaturesPB);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CameraPairTransitionPB?, (void (*)(uint64_t))type metadata accessor for CameraPairTransitionPB);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CompactHandPosePB?, (void (*)(uint64_t))type metadata accessor for CompactHandPosePB);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchInfoPB?, (void (*)(uint64_t))type metadata accessor for PinchInfoPB);
                      if (v10 <= 0x3F)
                      {
                        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for OperationalEnvelopeSignalsPB?, (void (*)(uint64_t))type metadata accessor for OperationalEnvelopeSignalsPB);
                        if (v11 <= 0x3F)
                        {
                          type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ThumbIndexTapFeaturesPB?, (void (*)(uint64_t))type metadata accessor for ThumbIndexTapFeaturesPB);
                          if (v12 <= 0x3F)
                            swift_updateClassMetadata2();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for HandPosePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandPosePB);
}

uint64_t type metadata accessor for PoseSpecPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PoseSpecPB);
}

uint64_t type metadata accessor for PoseLatentsPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PoseLatentsPB);
}

uint64_t type metadata accessor for ObjectInteractionDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ObjectInteractionDataPB);
}

uint64_t type metadata accessor for PinchFeaturesPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchFeaturesPB);
}

uint64_t type metadata accessor for CameraPairTransitionPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for CameraPairTransitionPB);
}

uint64_t type metadata accessor for CompactHandPosePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for CompactHandPosePB);
}

uint64_t type metadata accessor for OperationalEnvelopeSignalsPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for OperationalEnvelopeSignalsPB);
}

ValueMetadata *type metadata accessor for EngageStatus()
{
  return &type metadata for EngageStatus;
}

uint64_t assignWithCopy for OperationalEnvelopeSignalsPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for OperationalEnvelopeSignalsPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for OperationalEnvelopeSignalsPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D85047C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for OperationalEnvelopeSignalsPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D850504(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for OperationalEnvelopeSignalsPB()
{
  return type metadata completion function for CMTimeProtobuf();
}

uint64_t getEnumTagSinglePayload for CompactHandPosePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CompactHandPosePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for CompactHandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CompactHandPosePB(a1, a2, a3, MEMORY[0x24BEE0158] + 64, MEMORY[0x24BEE0170] + 64, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
}

uint64_t *initializeBufferWithCopyOfBuffer for CameraPairTransitionPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 28);
    v13 = (_DWORD *)((char *)v4 + v12);
    v14 = (_DWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
      v19 = *(int *)(v15 + 24);
      v20 = (_QWORD *)((char *)v13 + v19);
      v21 = (_QWORD *)((char *)v14 + v19);
      v22 = type metadata accessor for Matrix2dPB(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *v20 = *v21;
        *((_BYTE *)v20 + 8) = *((_BYTE *)v21 + 8);
        v20[2] = v21[2];
        v25 = *(int *)(v22 + 28);
        v28 = (char *)v20 + v25;
        v26 = (char *)v21 + v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v11(v28, v26, v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for CameraPairTransitionPB.UnscaledTransformPB);
}

uint64_t destroy for CameraPairTransitionPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v11(v6 + *(int *)(v7 + 20), v5);
    v9 = v6 + *(int *)(v7 + 24);
    v10 = type metadata accessor for Matrix2dPB(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 28), v5);
    }
  }
  return result;
}

_QWORD *initializeWithCopy for CameraPairTransitionPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v26;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    v17 = *(int *)(v14 + 24);
    v18 = (_QWORD *)((char *)v12 + v17);
    v19 = (_QWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for Matrix2dPB(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      *((_BYTE *)v18 + 8) = *((_BYTE *)v19 + 8);
      v18[2] = v19[2];
      v23 = *(int *)(v20 + 28);
      v26 = (char *)v18 + v23;
      v24 = (char *)v19 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10(v26, v24, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_DWORD *assignWithCopy for CameraPairTransitionPB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v44;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_DWORD *)v13 = *(_DWORD *)v14;
      v11(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
      v29 = *(int *)(v15 + 24);
      v30 = (uint64_t)&v13[v29];
      v31 = &v14[v29];
      v32 = type metadata accessor for Matrix2dPB(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *(_BYTE *)(v30 + 8) = v31[8];
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          v37 = *(int *)(v32 + 28);
          v38 = v30 + v37;
          v39 = &v31[v37];
          v40 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v40(v38, v39, v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v30 + 8) = v31[8];
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v11((char *)(v30 + *(int *)(v32 + 28)), &v31[*(int *)(v32 + 28)], v9);
          return a1;
        }
        outlined destroy of Matrix3x3PB(v30, type metadata accessor for Matrix2dPB);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?)
                                  - 8)
                      + 64);
      v27 = (void *)v30;
      v28 = v31;
      goto LABEL_8;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?)
                                - 8)
                    + 64);
    v27 = v13;
    v28 = v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v19(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
  v20 = *(int *)(v15 + 24);
  v21 = &v13[v20];
  v22 = &v14[v20];
  v23 = type metadata accessor for Matrix2dPB(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    v41 = *(int *)(v23 + 28);
    v44 = &v21[v41];
    v42 = &v22[v41];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v44, v42, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_QWORD *initializeWithTake for CameraPairTransitionPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    v17 = *(int *)(v14 + 24);
    v18 = (_QWORD *)((char *)v12 + v17);
    v19 = (_QWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for Matrix2dPB(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      *((_BYTE *)v18 + 8) = *((_BYTE *)v19 + 8);
      v18[2] = v19[2];
      v10((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for CameraPairTransitionPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_DWORD *)v13 = *(_DWORD *)v14;
      v11(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
      v29 = *(int *)(v15 + 24);
      v30 = (uint64_t)&v13[v29];
      v31 = &v14[v29];
      v32 = type metadata accessor for Matrix2dPB(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *(_BYTE *)(v30 + 8) = v31[8];
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v30 + *(int *)(v32 + 28), &v31[*(int *)(v32 + 28)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          swift_bridgeObjectRelease();
          *(_BYTE *)(v30 + 8) = v31[8];
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          swift_bridgeObjectRelease();
          v11((char *)(v30 + *(int *)(v32 + 28)), &v31[*(int *)(v32 + 28)], v9);
          return a1;
        }
        outlined destroy of Matrix3x3PB(v30, type metadata accessor for Matrix2dPB);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?)
                                  - 8)
                      + 64);
      v27 = (void *)v30;
      v28 = v31;
      goto LABEL_8;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?)
                                - 8)
                    + 64);
    v27 = v13;
    v28 = v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v9);
  v20 = *(int *)(v15 + 24);
  v21 = &v13[v20];
  v22 = &v14[v20];
  v23 = type metadata accessor for Matrix2dPB(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    v19(&v21[*(int *)(v23 + 28)], &v22[*(int *)(v23 + 28)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraPairTransitionPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8512D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 24);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CameraPairTransitionPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D851350(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 24);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for CameraPairTransitionPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CompactHandPosePB(a1, a2, a3, MEMORY[0x24BEE0170] + 64, MEMORY[0x24BEE0170] + 64, &lazy cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?, (void (*)(uint64_t))type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
}

uint64_t *initializeBufferWithCopyOfBuffer for CameraPairTransitionPB.UnscaledTransformPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for Matrix2dPB(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
      v13[2] = v14[2];
      v19 = *(int *)(v15 + 28);
      v20 = (char *)v13 + v19;
      v21 = (char *)v14 + v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11(v20, v21, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for CameraPairTransitionPB.UnscaledTransformPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for Matrix2dPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  }
  return result;
}

_DWORD *initializeWithCopy for CameraPairTransitionPB.UnscaledTransformPB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Matrix2dPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v17 = *(int *)(v14 + 28);
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v18, v19, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_DWORD *assignWithCopy for CameraPairTransitionPB.UnscaledTransformPB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Matrix2dPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = v14[8];
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11((char *)(v13 + *(int *)(v15 + 28)), &v14[*(int *)(v15 + 28)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  v19 = *(int *)(v15 + 28);
  v20 = v13 + v19;
  v21 = &v14[v19];
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_DWORD *initializeWithTake for CameraPairTransitionPB.UnscaledTransformPB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Matrix2dPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_DWORD *assignWithTake for CameraPairTransitionPB.UnscaledTransformPB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Matrix2dPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = v14[8];
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      swift_bridgeObjectRelease();
      v11((char *)(v13 + *(int *)(v15 + 28)), &v14[*(int *)(v15 + 28)], v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13 + *(int *)(v15 + 28), &v14[*(int *)(v15 + 28)], v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraPairTransitionPB.UnscaledTransformPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D851B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CameraPairTransitionPB.UnscaledTransformPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D851C18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for CameraPairTransitionPB.UnscaledTransformPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ObjectInteractionDataPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  char *v13;
  char *v14;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = a2[6];
    v9 = *(int *)(a3 + 44);
    v13 = (char *)a2 + v9;
    v14 = (char *)a1 + v9;
    a1[5] = a2[5];
    a1[6] = v8;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v14, v13, v10);
  }
  return v5;
}

uint64_t destroy for ObjectInteractionDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for ObjectInteractionDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  char *v11;
  char *v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = *(int *)(a3 + 44);
  v11 = (char *)a2 + v7;
  v12 = (char *)a1 + v7;
  a1[6] = a2[6];
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v12, v11, v8);
  return a1;
}

_QWORD *assignWithCopy for ObjectInteractionDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for ObjectInteractionDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 44);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for ObjectInteractionDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectInteractionDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8521C0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 44)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ObjectInteractionDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D852248(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 44)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ObjectInteractionDataPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PoseLatentsPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    outlined copy of Data._Representation(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for PoseLatentsPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for PoseLatentsPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *assignWithCopy for PoseLatentsPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  outlined copy of Data._Representation(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *initializeWithTake for PoseLatentsPB(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for PoseLatentsPB(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for PoseLatentsPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D85265C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PoseLatentsPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D8526F0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PoseLatentsPB()
{
  return type metadata completion function for CMTimeProtobuf();
}

ValueMetadata *type metadata accessor for HandPresence.Category()
{
  return &type metadata for HandPresence.Category;
}

_QWORD *initializeBufferWithCopyOfBuffer for HandPresence(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for HandPresence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for HandPresence(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for HandPresence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for HandPresence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandPresence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8529E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for HandPresence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D852A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for HandPresence(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandPresence);
}

uint64_t type metadata completion function for HandPresence()
{
  return type metadata completion function for CMTimeProtobuf();
}

uint64_t initializeBufferWithCopyOfBuffer for PoseImageCropPB(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  void (*v42)(uint64_t, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(v4 + 16) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    *(_QWORD *)(v4 + 32) = a2[4];
    *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(v4 + 48) = a2[6];
    v9 = a3[10];
    v10 = v4 + v9;
    v11 = (uint64_t)a2 + v9;
    *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[11];
    v15 = (_QWORD *)(v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for Matrix2dPB(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
    if (v19(v16, 1, v17))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      *((_BYTE *)v15 + 8) = *((_BYTE *)v16 + 8);
      v41 = v13;
      v15[2] = v16[2];
      v22 = *(int *)(v17 + 28);
      v23 = (char *)v15 + v22;
      v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = v23;
      v13 = v41;
      v41((uint64_t)v25, (uint64_t)v24, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v26 = a3[12];
    v27 = (_QWORD *)(v4 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    if (v19((uint64_t *)((char *)a2 + v26), 1, v17))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *v27 = *v28;
      *((_BYTE *)v27 + 8) = *((_BYTE *)v28 + 8);
      v27[2] = v28[2];
      v30 = *(int *)(v17 + 28);
      v42 = v13;
      v31 = (char *)v27 + v30;
      v32 = (char *)v28 + v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33 = v31;
      v13 = v42;
      v42((uint64_t)v33, (uint64_t)v32, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
    }
    v34 = a3[13];
    v35 = (_DWORD *)(v4 + v34);
    v36 = (_DWORD *)((char *)a2 + v34);
    v37 = type metadata accessor for Coordinate3DPB(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[2] = v36[2];
      v13((uint64_t)v35 + *(int *)(v37 + 28), (uint64_t)v36 + *(int *)(v37 + 28), v12);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
  }
  return v4;
}

uint64_t destroy for PoseImageCropPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + a2[10];
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[11];
  v7 = type metadata accessor for Matrix2dPB(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 28), v5);
  }
  v9 = a1 + a2[12];
  if (!v8(v9, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v9 + *(int *)(v7 + 28), v5);
  }
  v10 = a1 + a2[13];
  v11 = type metadata accessor for Coordinate3DPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v10 + *(int *)(v11 + 28), v5);
  return result;
}

uint64_t initializeWithCopy for PoseImageCropPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  void (*v40)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = a3[10];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[11];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = type metadata accessor for Matrix2dPB(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48);
  if (v18(v15, 1, v16))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
    v39 = v12;
    v14[2] = v15[2];
    v20 = *(int *)(v16 + 28);
    v21 = (char *)v14 + v20;
    v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v21;
    v12 = v39;
    v39((uint64_t)v23, (uint64_t)v22, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v24 = a3[12];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  if (v18((_QWORD *)(a2 + v24), 1, v16))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v25 = *v26;
    *((_BYTE *)v25 + 8) = *((_BYTE *)v26 + 8);
    v25[2] = v26[2];
    v28 = *(int *)(v16 + 28);
    v40 = v12;
    v29 = (char *)v25 + v28;
    v30 = (char *)v26 + v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v29;
    v12 = v40;
    v40((uint64_t)v31, (uint64_t)v30, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v25, 0, 1, v16);
  }
  v32 = a3[13];
  v33 = (_DWORD *)(a1 + v32);
  v34 = (_DWORD *)(a2 + v32);
  v35 = type metadata accessor for Coordinate3DPB(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[2] = v34[2];
    v12((uint64_t)v33 + *(int *)(v35 + 28), (uint64_t)v34 + *(int *)(v35 + 28), v11);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

uint64_t assignWithCopy for PoseImageCropPB(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_DWORD *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  void (*v53)(uint64_t, uint64_t, uint64_t);
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  outlined consume of Data._Representation(v9, v10);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v11 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = a3[10];
  v13 = a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for UnknownStorage();
  v56 = *(_QWORD *)(v15 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 24);
  v16(v13, v14, v15);
  v17 = a3[11];
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for Matrix2dPB(0);
  v55 = *(_QWORD *)(v20 - 8);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  v22 = v21(v18, 1, v20);
  v23 = v21(v19, 1, v20);
  if (v22)
  {
    if (!v23)
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
      v24 = *(int *)(v20 + 28);
      v53 = v16;
      v25 = v15;
      v26 = v18 + v24;
      v27 = v19 + v24;
      v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = v26;
      v15 = v25;
      v16 = v53;
      v52(v28, v27, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    outlined destroy of Matrix3x3PB(v18, type metadata accessor for Matrix2dPB);
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v18, (const void *)v19, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v18 = *(_QWORD *)v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16(v18 + *(int *)(v20 + 28), v19 + *(int *)(v20 + 28), v15);
LABEL_7:
  v30 = a3[12];
  v31 = a1 + v30;
  v32 = (uint64_t)a2 + v30;
  v33 = v21(a1 + v30, 1, v20);
  v34 = v21(v32, 1, v20);
  if (v33)
  {
    if (!v34)
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
      *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
      v35 = *(int *)(v20 + 28);
      v54 = v16;
      v36 = v15;
      v37 = v31 + v35;
      v38 = v32 + v35;
      v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = v37;
      v15 = v36;
      v16 = v54;
      v39(v40, v38, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v31, 0, 1, v20);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    outlined destroy of Matrix3x3PB(v31, type metadata accessor for Matrix2dPB);
LABEL_12:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v31, (const void *)v32, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v31 = *(_QWORD *)v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16(v31 + *(int *)(v20 + 28), v32 + *(int *)(v20 + 28), v15);
LABEL_13:
  v42 = a3[13];
  v43 = (_DWORD *)(a1 + v42);
  v44 = (_DWORD *)((char *)a2 + v42);
  v45 = type metadata accessor for Coordinate3DPB(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      *v43 = *v44;
      v43[1] = v44[1];
      v43[2] = v44[2];
      v16((uint64_t)v43 + *(int *)(v45 + 28), (uint64_t)v44 + *(int *)(v45 + 28), v15);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v43, type metadata accessor for Coordinate3DPB);
    goto LABEL_18;
  }
  if (v49)
  {
LABEL_18:
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    return a1;
  }
  *v43 = *v44;
  v43[1] = v44[1];
  v43[2] = v44[2];
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))((char *)v43 + *(int *)(v45 + 28), (char *)v44 + *(int *)(v45 + 28), v15);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  return a1;
}

uint64_t initializeWithTake for PoseImageCropPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = a3[10];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  *(_QWORD *)(a1 + 32) = v6;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[11];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for Matrix2dPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[12];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  if (v17((_QWORD *)(a2 + v19), 1, v15))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v20 = *v21;
    *((_BYTE *)v20 + 8) = *((_BYTE *)v21 + 8);
    v20[2] = v21[2];
    v11((char *)v20 + *(int *)(v15 + 28), (char *)v21 + *(int *)(v15 + 28), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v15);
  }
  v23 = a3[13];
  v24 = (_DWORD *)(a1 + v23);
  v25 = (_DWORD *)(a2 + v23);
  v26 = type metadata accessor for Coordinate3DPB(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[2] = v25[2];
    v11((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v10);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithTake for PoseImageCropPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_DWORD *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = a3[10];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v38 = *(_QWORD *)(v11 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 40);
  v37(v9, v10, v11);
  v12 = a3[11];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Matrix2dPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for Matrix2dPB);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRelease();
  v37(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v11);
LABEL_7:
  v21 = a3[12];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = v17(a1 + v21, 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v22 + *(int *)(v15 + 28), v23 + *(int *)(v15 + 28), v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    outlined destroy of Matrix3x3PB(v22, type metadata accessor for Matrix2dPB);
LABEL_12:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v22, (const void *)v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v22 = *(_QWORD *)v23;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  swift_bridgeObjectRelease();
  v37(v22 + *(int *)(v15 + 28), v23 + *(int *)(v15 + 28), v11);
LABEL_13:
  v27 = a3[13];
  v28 = (_DWORD *)(a1 + v27);
  v29 = (_DWORD *)(a2 + v27);
  v30 = type metadata accessor for Coordinate3DPB(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[2] = v29[2];
      v37((uint64_t)v28 + *(int *)(v30 + 28), (uint64_t)v29 + *(int *)(v30 + 28), v11);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v28, type metadata accessor for Coordinate3DPB);
    goto LABEL_18;
  }
  if (v34)
  {
LABEL_18:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[2] = v29[2];
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))((char *)v28 + *(int *)(v30 + 28), (char *)v29 + *(int *)(v30 + 28), v11);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for PoseImageCropPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D853C48(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[10];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      v11 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        v12 = v14;
        v13 = a3[11];
      }
      else
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
        v11 = *(_QWORD *)(v12 - 8);
        v13 = a3[13];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PoseImageCropPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D853D20(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 40) = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[10];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[11];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[13];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for PoseImageCropPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PoseImageCropPB);
}

void type metadata completion function for PoseImageCropPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for PinchFeaturesPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    v7 = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    v8 = *(int *)(a3 + 56);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 24) = v7;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 60);
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for RawPinchFeaturesPB(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      v14[1] = v15[1];
      v20 = *(int *)(v16 + 28);
      v21 = (char *)v14 + v20;
      v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12((uint64_t)v21, (uint64_t)v22, v11);
      v23 = *(int *)(v16 + 32);
      v24 = (char *)v14 + v23;
      v25 = (char *)v15 + v23;
      *(_DWORD *)v24 = *(_DWORD *)v25;
      v24[4] = v25[4];
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t type metadata accessor for RawPinchFeaturesPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for RawPinchFeaturesPB);
}

uint64_t destroy for PinchFeaturesPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 56);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 60);
  v7 = type metadata accessor for RawPinchFeaturesPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for PinchFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v7 = *(int *)(a3 + 56);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + 24) = v6;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 60);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for RawPinchFeaturesPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v13[1] = v14[1];
    v18 = *(int *)(v15 + 28);
    v19 = (char *)v13 + v18;
    v20 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    v11((uint64_t)v19, (uint64_t)v20, v10);
    v21 = *(int *)(v15 + 32);
    v22 = (char *)v13 + v21;
    v23 = (char *)v14 + v21;
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for PinchFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v7 = *(int *)(a3 + 56);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 60);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for RawPinchFeaturesPB(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_DWORD *)(v14 + 4) = *(_DWORD *)(v15 + 4);
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v12(v14 + *(int *)(v16 + 28), v15 + *(int *)(v16 + 28), v10);
      v30 = *(int *)(v16 + 32);
      v31 = v14 + v30;
      v32 = v15 + v30;
      v33 = *(_BYTE *)(v32 + 4);
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_BYTE *)(v31 + 4) = v33;
      return a1;
    }
    outlined destroy of Matrix3x3PB(v14, type metadata accessor for RawPinchFeaturesPB);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_DWORD *)(v14 + 4) = *(_DWORD *)(v15 + 4);
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  v20 = *(int *)(v16 + 28);
  v21 = v14 + v20;
  v22 = v15 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v10);
  v24 = *(int *)(v16 + 32);
  v25 = v14 + v24;
  v26 = v15 + v24;
  v27 = *(_BYTE *)(v26 + 4);
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = v27;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for PinchFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v7 = *(int *)(a3 + 56);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(a1 + 24) = v6;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 60);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for RawPinchFeaturesPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v13[1] = v14[1];
    v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v10);
    v18 = *(int *)(v15 + 32);
    v19 = (char *)v13 + v18;
    v20 = (char *)v14 + v18;
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for PinchFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  char *v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 56);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 60);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for RawPinchFeaturesPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      swift_bridgeObjectRelease();
      v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v9);
      v24 = *(int *)(v15 + 32);
      v25 = (char *)v13 + v24;
      v26 = (char *)v14 + v24;
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for RawPinchFeaturesPB);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  *v13 = *v14;
  v13[1] = v14[1];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v9);
  v19 = *(int *)(v15 + 32);
  v20 = (char *)v13 + v19;
  v21 = (char *)v14 + v19;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchFeaturesPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D854830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 56);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PinchFeaturesPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8548E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 56);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for PinchFeaturesPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for RawPinchFeaturesPB?, (void (*)(uint64_t))type metadata accessor for RawPinchFeaturesPB);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for HandDescriptorPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for HandDescriptorPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for HandDescriptorPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandDescriptorPB);
}

uint64_t *initializeBufferWithCopyOfBuffer for RawPinchFeaturesPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    a1[1] = a2[1];
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 32);
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
  }
  return v4;
}

uint64_t destroy for RawPinchFeaturesPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for RawPinchFeaturesPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  return a1;
}

uint64_t assignWithCopy for RawPinchFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_BYTE *)(v12 + 4);
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = v13;
  return a1;
}

_QWORD *initializeWithTake for RawPinchFeaturesPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v12[4];
  return a1;
}

_QWORD *assignWithTake for RawPinchFeaturesPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v12[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for RawPinchFeaturesPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D854E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RawPinchFeaturesPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D854EC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for RawPinchFeaturesPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CompactHandPosePB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (_QWORD *)(v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for Matrix2dPB(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v14[2] = v15[2];
      v19 = *(int *)(v16 + 28);
      v20 = (char *)v14 + v19;
      v21 = (char *)v15 + v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12((uint64_t)v20, (uint64_t)v21, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for CompactHandPosePB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for Matrix2dPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for CompactHandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for Matrix2dPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v17 = *(int *)(v14 + 28);
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10((uint64_t)v18, (uint64_t)v19, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for CompactHandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Matrix2dPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  v19 = *(int *)(v15 + 28);
  v20 = v13 + v19;
  v21 = v14 + v19;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for CompactHandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for Matrix2dPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CompactHandPosePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Matrix2dPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease();
      v11(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandPosePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_1Tm_0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandPosePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_2Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CompactHandPosePB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  unint64_t v9;
  unint64_t v10;

  type metadata accessor for UnknownStorage();
  if (v9 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, a6, a7);
    if (v10 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for JointTransformPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_17Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for JointTransformPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_18Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for JointTransformPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for JointTransformPB);
}

uint64_t initializeBufferWithCopyOfBuffer for PoseSpecPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PoseSpecPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PoseSpecPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PoseSpecPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PoseSpecPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PoseSpecPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PoseSpecPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D855E20(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PoseSpecPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D855EA8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PoseSpecPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EngageStatus and conformance EngageStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus;
  if (!lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EngageStatus, &type metadata for EngageStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus;
  if (!lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EngageStatus, &type metadata for EngageStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus;
  if (!lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EngageStatus, &type metadata for EngageStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus;
  if (!lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EngageStatus, &type metadata for EngageStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EngageStatus and conformance EngageStatus);
  }
  return result;
}

uint64_t JointTransformPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = v7;
  v14 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    v15 = swift_retain();
    v16 = a6(v15);
    swift_release();
    *(_QWORD *)(v10 + v14) = v16;
    swift_release();
  }
  v17 = swift_retain();
  a7(v17, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t);
  unint64_t *v13;
  void *v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;
  uint64_t *v19;
  unint64_t (*v20)();

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 3:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
          goto LABEL_5;
        case 4:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
          goto LABEL_5;
        case 5:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
          v12 = type metadata accessor for HandPosePB;
          v13 = &lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB;
          v14 = &protocol conformance descriptor for HandPosePB;
          goto LABEL_6;
        case 6:
        case 9:
        case 21:
        case 30:
        case 34:
        case 42:
        case 44:
          closure #6 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 7:
        case 25:
        case 26:
        case 31:
          closure #3 in closure #1 in JointTransformPB.decodeMessage<A>(decoder:)();
          break;
        case 8:
          v15 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore;
          v16 = type metadata accessor for HandPresence;
          v17 = &lazy protocol witness table cache variable for type HandPresence and conformance HandPresence;
          v18 = &protocol conformance descriptor for HandPresence;
          goto LABEL_17;
        case 10:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
          v12 = type metadata accessor for PoseSpecPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB;
          v14 = &protocol conformance descriptor for PoseSpecPB;
          goto LABEL_6;
        case 11:
          v15 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops;
          v16 = type metadata accessor for PoseImageCropPB;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB;
          v18 = &protocol conformance descriptor for PoseImageCropPB;
LABEL_17:
          closure #39 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        case 12:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures;
          v12 = type metadata accessor for PoseLatentsPB;
          v13 = &lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB;
          v14 = &protocol conformance descriptor for PoseLatentsPB;
          goto LABEL_6;
        case 13:
          v19 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchEngaged;
          v20 = lazy protocol witness table accessor for type EngageStatus and conformance EngageStatus;
          goto LABEL_36;
        case 14:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
          v12 = type metadata accessor for HandDescriptorInternalPB;
          v13 = &lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB;
          v14 = &protocol conformance descriptor for HandDescriptorInternalPB;
          goto LABEL_6;
        case 15:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
          goto LABEL_5;
        case 16:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
          v12 = type metadata accessor for DetectionCanonicalizationDataPB;
          v13 = &lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB;
          v14 = &protocol conformance descriptor for DetectionCanonicalizationDataPB;
          goto LABEL_6;
        case 17:
          v19 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass;
          v20 = lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category;
          goto LABEL_36;
        case 20:
          v19 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionClass;
          v20 = lazy protocol witness table accessor for type ObjectInteractionCategory and conformance ObjectInteractionCategory;
          goto LABEL_36;
        case 22:
          closure #20 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 28:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData;
          v12 = type metadata accessor for ObjectInteractionDataPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB;
          v14 = &protocol conformance descriptor for ObjectInteractionDataPB;
          goto LABEL_6;
        case 29:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
          v12 = type metadata accessor for PinchFeaturesPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB;
          v14 = &protocol conformance descriptor for PinchFeaturesPB;
          goto LABEL_6;
        case 32:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
          v12 = type metadata accessor for CameraPairTransitionPB;
          v13 = &lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB;
          v14 = &protocol conformance descriptor for CameraPairTransitionPB;
          goto LABEL_6;
        case 33:
          v19 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchOcclusionStatus;
          v20 = lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus;
          goto LABEL_36;
        case 35:
          closure #30 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 36:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
LABEL_5:
          v12 = type metadata accessor for Coordinate3DPB;
          v13 = &lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB;
          v14 = &protocol conformance descriptor for Coordinate3DPB;
          goto LABEL_6;
        case 38:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
          v12 = type metadata accessor for CompactHandPosePB;
          v13 = &lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB;
          v14 = &protocol conformance descriptor for CompactHandPosePB;
          goto LABEL_6;
        case 39:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
          v12 = type metadata accessor for PinchInfoPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB;
          v14 = &protocol conformance descriptor for PinchInfoPB;
          goto LABEL_6;
        case 40:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
          v12 = type metadata accessor for OperationalEnvelopeSignalsPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB;
          v14 = &protocol conformance descriptor for OperationalEnvelopeSignalsPB;
          goto LABEL_6;
        case 41:
          v19 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus;
          v20 = lazy protocol witness table accessor for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus;
LABEL_36:
          closure #13 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)v19, (void (*)(uint64_t))v20);
          break;
        case 43:
          v11 = &OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
          v12 = type metadata accessor for ThumbIndexTapFeaturesPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB;
          v14 = &protocol conformance descriptor for ThumbIndexTapFeaturesPB;
LABEL_6:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)v11, v12, v13, (uint64_t)v14);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for DetectionResultPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #20 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in JointTransformPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #30 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;

  v7 = swift_beginAccess();
  a6(v7);
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t JointTransformPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  a4(0);
  v10 = swift_retain();
  a5(v10, a1, a2, a3);
  result = swift_release();
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v10;
  float *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE *v18;
  float *v19;
  float *v20;
  _BYTE *v21;
  float *v22;
  _QWORD *v23;
  _BYTE *v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE *v27;
  _BYTE *v28;

  swift_beginAccess();
  if (!*(_QWORD *)(a1 + 16) || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16))
    {
      type metadata accessor for DetectionResultPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultPB and conformance DetectionResultPB, type metadata accessor for DetectionResultPB, (uint64_t)&protocol conformance descriptor for DetectionResultPB);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (v4)
        return swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    result = closure #1 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    if (!v4)
    {
      closure #2 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      closure #3 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v10 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
      swift_beginAccess();
      if (*v10 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v11 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius);
      swift_beginAccess();
      if (*v11 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      v12 = a1
          + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore;
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v12 + 16))
      {
        type metadata accessor for HandPresence(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        swift_bridgeObjectRelease();
      }
      v13 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown);
      swift_beginAccess();
      if (*v13 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      closure #4 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v14 = a1
          + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops;
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v14 + 16))
      {
        type metadata accessor for PoseImageCropPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB, type metadata accessor for PoseImageCropPB, (uint64_t)&protocol conformance descriptor for PoseImageCropPB);
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        swift_bridgeObjectRelease();
      }
      closure #5 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v15 = (_QWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchEngaged);
      swift_beginAccess();
      if (*v15)
      {
        lazy protocol witness table accessor for type EngageStatus and conformance EngageStatus();
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
      }
      closure #6 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      closure #7 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      closure #8 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v16 = (_QWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass);
      swift_beginAccess();
      if (*v16)
      {
        lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category();
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
      }
      v17 = (_QWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionClass);
      swift_beginAccess();
      if (*v17)
      {
        lazy protocol witness table accessor for type ObjectInteractionCategory and conformance ObjectInteractionCategory();
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
      }
      v18 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled);
      swift_beginAccess();
      if (*v18 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      closure #9 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1);
      v19 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchScore);
      swift_beginAccess();
      if (*v19 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      v20 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__rawPinchScore);
      swift_beginAccess();
      if (*v20 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      closure #10 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      closure #11 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v21 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionFilterCond);
      swift_beginAccess();
      if (*v21 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v22 = (float *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore);
      swift_beginAccess();
      if (*v22 != 0.0)
        dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
      closure #12 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v23 = (_QWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchOcclusionStatus);
      swift_beginAccess();
      if (*v23)
      {
        lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus();
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
      }
      v24 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap);
      swift_beginAccess();
      if (*v24 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      v25 = (_QWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason);
      swift_beginAccess();
      if (*v25)
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
      closure #13 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      closure #14 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      closure #15 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      closure #16 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v26 = (_QWORD *)(a1
                     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus);
      swift_beginAccess();
      if (*v26)
      {
        lazy protocol witness table accessor for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus();
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
      }
      v27 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap);
      swift_beginAccess();
      if (*v27 == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      closure #17 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
      v28 = (_BYTE *)(a1
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface);
      result = swift_beginAccess();
      if (*v28 == 1)
        return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #2 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #3 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandPosePB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HandPosePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandPosePB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandPosePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandPosePB);
}

uint64_t closure #4 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PoseSpecPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PoseSpecPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PoseSpecPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PoseSpecPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PoseSpecPB);
}

uint64_t closure #5 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseLatentsPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PoseLatentsPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PoseLatentsPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PoseLatentsPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PoseLatentsPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB, type metadata accessor for PoseLatentsPB, (uint64_t)&protocol conformance descriptor for PoseLatentsPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PoseLatentsPB);
}

uint64_t closure #6 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandDescriptorInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandDescriptorInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandDescriptorInternalPB);
}

uint64_t closure #7 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #8 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for DetectionCanonicalizationDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionCanonicalizationDataPB and conformance DetectionCanonicalizationDataPB, type metadata accessor for DetectionCanonicalizationDataPB, (uint64_t)&protocol conformance descriptor for DetectionCanonicalizationDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for DetectionCanonicalizationDataPB);
}

uint64_t closure #9 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1
     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #10 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ObjectInteractionDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ObjectInteractionDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB, type metadata accessor for ObjectInteractionDataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ObjectInteractionDataPB);
}

uint64_t closure #11 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchFeaturesPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchFeaturesPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PinchFeaturesPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchFeaturesPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PinchFeaturesPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB, type metadata accessor for PinchFeaturesPB, (uint64_t)&protocol conformance descriptor for PinchFeaturesPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchFeaturesPB);
}

uint64_t closure #12 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CameraPairTransitionPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CameraPairTransitionPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CameraPairTransitionPB);
}

uint64_t closure #13 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #14 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompactHandPosePB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CompactHandPosePB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for CompactHandPosePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CompactHandPosePB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CompactHandPosePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB, type metadata accessor for CompactHandPosePB, (uint64_t)&protocol conformance descriptor for CompactHandPosePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CompactHandPosePB);
}

uint64_t closure #15 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchInfoPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PinchInfoPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchInfoPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PinchInfoPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchInfoPB);
}

uint64_t closure #16 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for OperationalEnvelopeSignalsPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for OperationalEnvelopeSignalsPB);
}

uint64_t closure #17 in closure #1 in HandDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ThumbIndexTapFeaturesPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB, type metadata accessor for ThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for ThumbIndexTapFeaturesPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ThumbIndexTapFeaturesPB);
}

uint64_t closure #1 in static HandDescriptorPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int (*v233)(uint64_t, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  float *v236;
  uint64_t v237;
  char v238;
  unsigned __int8 *v239;
  int v240;
  unsigned __int8 *v241;
  float *v242;
  float v243;
  float *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  char v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  unsigned __int8 *v254;
  int v255;
  unsigned __int8 *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int (*v262)(uint64_t, uint64_t, uint64_t);
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int (*v287)(uint64_t, uint64_t, uint64_t);
  uint64_t *v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  char v292;
  char v293;
  uint64_t *v294;
  uint64_t v295;
  char v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int (*v303)(uint64_t, uint64_t, uint64_t);
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int (*v312)(uint64_t, uint64_t, uint64_t);
  uint64_t *v313;
  uint64_t *v314;
  char v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  unsigned __int8 *v320;
  int v321;
  unsigned __int8 *v322;
  uint64_t v323;
  float v324;
  char v325;
  uint64_t v326;
  float *v327;
  float v328;
  float *v329;
  float *v330;
  float v331;
  float *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int (*v338)(uint64_t, uint64_t, uint64_t);
  uint64_t v339;
  uint64_t v340;
  char v341;
  unsigned __int8 *v342;
  int v343;
  unsigned __int8 *v344;
  float *v345;
  float v346;
  float *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int (*v353)(uint64_t, uint64_t, uint64_t);
  char *v354;
  char *v355;
  char v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned __int8 *v361;
  int v362;
  unsigned __int8 *v363;
  uint64_t *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int (*v372)(uint64_t, uint64_t, uint64_t);
  uint64_t v373;
  float *v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int (*v381)(uint64_t, uint64_t, uint64_t);
  char *v382;
  char *v383;
  char v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int (*v390)(uint64_t, uint64_t, uint64_t);
  uint64_t *v391;
  uint64_t v392;
  int v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  float *v398;
  uint64_t v399;
  uint64_t v400;
  char v401;
  unsigned __int8 *v402;
  int v403;
  unsigned __int8 *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int (*v410)(uint64_t, uint64_t, uint64_t);
  uint64_t v411;
  uint64_t v412;
  char v413;
  char *v414;
  char v415;
  _BYTE *v416;
  uint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  float *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  uint64_t v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  float *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;

  v461 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v458 = *(_QWORD *)(v461 - 8);
  MEMORY[0x24BDAC7A8](v461, v4);
  v6 = (char *)&v417 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v457 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ThumbIndexTapFeaturesPB?, ThumbIndexTapFeaturesPB?));
  MEMORY[0x24BDAC7A8](v457, v7);
  v9 = (char *)&v417 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v460 = (uint64_t)&v417 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v459 = (uint64_t)&v417 - v15;
  v453 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v451 = *(_QWORD *)(v453 - 8);
  MEMORY[0x24BDAC7A8](v453, v16);
  v455 = (uint64_t)&v417 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v450 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OperationalEnvelopeSignalsPB?, OperationalEnvelopeSignalsPB?));
  MEMORY[0x24BDAC7A8](v450, v18);
  v456 = (uint64_t)&v417 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  MEMORY[0x24BDAC7A8](v20, v21);
  v454 = (uint64_t)&v417 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v24);
  v452 = (uint64_t)&v417 - v25;
  v447 = type metadata accessor for PinchInfoPB(0);
  v444 = *(_QWORD *)(v447 - 8);
  MEMORY[0x24BDAC7A8](v447, v26);
  v448 = (char *)&v417 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v443 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchInfoPB?, PinchInfoPB?));
  MEMORY[0x24BDAC7A8](v443, v28);
  v449 = (uint64_t)&v417 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v446 = (char *)&v417 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v445 = (uint64_t)&v417 - v35;
  v440 = type metadata accessor for CompactHandPosePB(0);
  v437 = *(_QWORD *)(v440 - 8);
  MEMORY[0x24BDAC7A8](v440, v36);
  v441 = (uint64_t)&v417 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v436 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CompactHandPosePB?, CompactHandPosePB?));
  MEMORY[0x24BDAC7A8](v436, v38);
  v442 = (uint64_t)&v417 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompactHandPosePB?);
  MEMORY[0x24BDAC7A8](v40, v41);
  v439 = (float *)((char *)&v417 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v43, v44);
  v438 = (uint64_t)&v417 - v45;
  v433 = type metadata accessor for CameraPairTransitionPB(0);
  v430 = *(_QWORD *)(v433 - 8);
  MEMORY[0x24BDAC7A8](v433, v46);
  v434 = (char *)&v417 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v429 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CameraPairTransitionPB?, CameraPairTransitionPB?));
  MEMORY[0x24BDAC7A8](v429, v48);
  v435 = (uint64_t)&v417 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB?);
  MEMORY[0x24BDAC7A8](v50, v51);
  v432 = (char *)&v417 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v53, v54);
  v431 = (uint64_t)&v417 - v55;
  v426 = type metadata accessor for PinchFeaturesPB(0);
  v423 = *(_QWORD *)(v426 - 8);
  MEMORY[0x24BDAC7A8](v426, v56);
  v427 = (uint64_t)&v417 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v422 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchFeaturesPB?, PinchFeaturesPB?));
  MEMORY[0x24BDAC7A8](v422, v58);
  v428 = (uint64_t)&v417 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchFeaturesPB?);
  MEMORY[0x24BDAC7A8](v60, v61);
  v425 = (uint64_t)&v417 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v63, v64);
  v424 = (uint64_t)&v417 - v65;
  v467 = type metadata accessor for ObjectInteractionDataPB(0);
  v465 = *(_QWORD *)(v467 - 8);
  MEMORY[0x24BDAC7A8](v467, v66);
  v463 = (uint64_t *)((char *)&v417 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  v464 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ObjectInteractionDataPB?, ObjectInteractionDataPB?));
  MEMORY[0x24BDAC7A8](v464, v68);
  v472 = (uint64_t)&v417 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionDataPB?);
  MEMORY[0x24BDAC7A8](v70, v71);
  v466 = (uint64_t *)((char *)&v417 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v73, v74);
  v469 = (uint64_t)&v417 - v75;
  v474 = type metadata accessor for HandDescriptorInternalPB(0);
  v471 = *(_QWORD *)(v474 - 8);
  MEMORY[0x24BDAC7A8](v474, v76);
  v462 = (uint64_t)&v417 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v470 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandDescriptorInternalPB?, HandDescriptorInternalPB?));
  MEMORY[0x24BDAC7A8](v470, v78);
  v475 = (uint64_t)&v417 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternalPB?);
  MEMORY[0x24BDAC7A8](v80, v81);
  v468 = (uint64_t)&v417 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v83, v84);
  v473 = (uint64_t)&v417 - v85;
  v481 = type metadata accessor for PoseLatentsPB(0);
  v478 = *(_QWORD *)(v481 - 8);
  MEMORY[0x24BDAC7A8](v481, v86);
  v476 = (uint64_t)&v417 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  v477 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PoseLatentsPB?, PoseLatentsPB?));
  MEMORY[0x24BDAC7A8](v477, v88);
  v482 = (uint64_t)&v417 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseLatentsPB?);
  MEMORY[0x24BDAC7A8](v90, v91);
  v479 = (uint64_t *)((char *)&v417 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v93, v94);
  v480 = (uint64_t)&v417 - v95;
  v490 = type metadata accessor for PoseSpecPB(0);
  v489 = *(_QWORD *)(v490 - 8);
  MEMORY[0x24BDAC7A8](v490, v96);
  v483 = (uint64_t)&v417 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  v488 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PoseSpecPB?, PoseSpecPB?));
  MEMORY[0x24BDAC7A8](v488, v98);
  v492 = (uint64_t)&v417 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v100, v101);
  v487 = (uint64_t)&v417 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v103, v104);
  v491 = (uint64_t)&v417 - v105;
  v498 = type metadata accessor for HandPosePB(0);
  v497 = *(_QWORD *)(v498 - 8);
  MEMORY[0x24BDAC7A8](v498, v106);
  v493 = (uint64_t)&v417 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  v496 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandPosePB?, HandPosePB?));
  MEMORY[0x24BDAC7A8](v496, v108);
  v499 = (uint64_t)&v417 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v110, v111);
  v494 = (float *)((char *)&v417 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v113, v114);
  v505 = (uint64_t)&v417 - v115;
  v503 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  v502 = *(_QWORD *)(v503 - 8);
  MEMORY[0x24BDAC7A8](v503, v116);
  v495 = (uint64_t)&v417 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0);
  v501 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DetectionCanonicalizationDataPB?, DetectionCanonicalizationDataPB?));
  MEMORY[0x24BDAC7A8](v501, v118);
  v504 = (uint64_t)&v417 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  MEMORY[0x24BDAC7A8](v120, v121);
  v500 = (uint64_t)&v417 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v123, v124);
  v507 = (uint64_t)&v417 - v125;
  v514 = type metadata accessor for Coordinate3DPB(0);
  v126 = *(_QWORD *)(v514 - 8);
  MEMORY[0x24BDAC7A8](v514, v127);
  v511 = (uint64_t)&v417 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  v515 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v515, v129);
  v486 = (uint64_t)&v417 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v131, v132);
  v508 = (uint64_t)&v417 - v133;
  MEMORY[0x24BDAC7A8](v134, v135);
  v510 = (uint64_t)&v417 - v136;
  MEMORY[0x24BDAC7A8](v137, v138);
  v140 = (char *)&v417 - v139;
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v141, v142);
  v484 = (uint64_t)&v417 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v144, v145);
  v485 = (uint64_t)&v417 - v146;
  MEMORY[0x24BDAC7A8](v147, v148);
  v506 = (uint64_t)&v417 - v149;
  MEMORY[0x24BDAC7A8](v150, v151);
  v512 = (uint64_t)&v417 - v152;
  MEMORY[0x24BDAC7A8](v153, v154);
  v509 = (uint64_t)&v417 - v155;
  MEMORY[0x24BDAC7A8](v156, v157);
  v513 = (uint64_t)&v417 - v158;
  MEMORY[0x24BDAC7A8](v159, v160);
  v162 = (char *)&v417 - v161;
  MEMORY[0x24BDAC7A8](v163, v164);
  v166 = (char *)&v417 - v165;
  swift_beginAccess();
  v167 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  if (v167 != *(_QWORD *)(a2 + 16))
    goto LABEL_25;
  v418 = v6;
  v419 = v9;
  swift_beginAccess();
  v168 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v169 = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v170 = a2;
  v171 = specialized static Array<A>.== infix(_:_:)(v168, v169);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v171 & 1) == 0)
    goto LABEL_24;
  v420 = a1;
  v172 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v172, (uint64_t)v166, &demangling cache variable for type metadata for Coordinate3DPB?);
  v421 = v170;
  v173 = v170
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
  swift_beginAccess();
  v174 = (uint64_t)&v140[*(int *)(v515 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v166, (uint64_t)v140, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v173, v174, &demangling cache variable for type metadata for Coordinate3DPB?);
  v175 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
  v176 = v514;
  if (v175((uint64_t)v140, 1, v514) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v166, &demangling cache variable for type metadata for Coordinate3DPB?);
    v177 = v175(v174, 1, v176);
    v179 = v420;
    v178 = v421;
    if (v177 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v140, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_11;
    }
LABEL_9:
    v180 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v181 = (uint64_t)v140;
LABEL_23:
    outlined destroy of Coordinate3DPB?(v181, v180);
    goto LABEL_24;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v140, (uint64_t)v162, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v175(v174, 1, v176) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v166, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v162, type metadata accessor for Coordinate3DPB);
    goto LABEL_9;
  }
  v182 = v511;
  outlined init with take of Matrix2dPB(v174, v511, type metadata accessor for Coordinate3DPB);
  v183 = static Coordinate3DPB.== infix(_:_:)(v162, v182);
  outlined destroy of Matrix3x3PB(v182, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v166, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v162, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v140, &demangling cache variable for type metadata for Coordinate3DPB?);
  v179 = v420;
  v178 = v421;
  if ((v183 & 1) == 0)
    goto LABEL_24;
LABEL_11:
  v184 = v179
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
  swift_beginAccess();
  v185 = v513;
  outlined init with copy of (Int32, Matrix2dPB)(v184, v513, &demangling cache variable for type metadata for Coordinate3DPB?);
  v186 = v178
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
  swift_beginAccess();
  v187 = v510;
  v188 = v510 + *(int *)(v515 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v185, v510, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v186, v188, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v175(v187, 1, v176) == 1)
  {
    outlined destroy of Coordinate3DPB?(v185, &demangling cache variable for type metadata for Coordinate3DPB?);
    v189 = v175(v188, 1, v176);
    v190 = v421;
    v191 = v512;
    if (v189 == 1)
    {
      outlined destroy of Coordinate3DPB?(v187, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_17;
    }
LABEL_22:
    v180 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v181 = v187;
    goto LABEL_23;
  }
  v192 = v509;
  outlined init with copy of (Int32, Matrix2dPB)(v187, v509, &demangling cache variable for type metadata for Coordinate3DPB?);
  v193 = v175(v188, 1, v176);
  v191 = v512;
  if (v193 == 1)
  {
    outlined destroy of Coordinate3DPB?(v513, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB(v192, type metadata accessor for Coordinate3DPB);
    goto LABEL_22;
  }
  v194 = v187;
  v195 = v511;
  outlined init with take of Matrix2dPB(v188, v511, type metadata accessor for Coordinate3DPB);
  v196 = static Coordinate3DPB.== infix(_:_:)(v192, v195);
  outlined destroy of Matrix3x3PB(v195, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v513, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB(v192, type metadata accessor for Coordinate3DPB);
  v197 = v194;
  v179 = v420;
  outlined destroy of Coordinate3DPB?(v197, &demangling cache variable for type metadata for Coordinate3DPB?);
  v190 = v421;
  if ((v196 & 1) == 0)
    goto LABEL_24;
LABEL_17:
  v198 = v179 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v198, v191, &demangling cache variable for type metadata for Coordinate3DPB?);
  v199 = v190;
  v200 = v190 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
  swift_beginAccess();
  v201 = v191;
  v202 = v508;
  v203 = v508 + *(int *)(v515 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v201, v508, &demangling cache variable for type metadata for Coordinate3DPB?);
  v187 = v202;
  outlined init with copy of (Int32, Matrix2dPB)(v200, v203, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v175(v202, 1, v176) == 1)
  {
    outlined destroy of Coordinate3DPB?(v201, &demangling cache variable for type metadata for Coordinate3DPB?);
    v204 = v199;
    if (v175(v203, 1, v176) == 1)
    {
      outlined destroy of Coordinate3DPB?(v202, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  v205 = v202;
  v206 = v506;
  outlined init with copy of (Int32, Matrix2dPB)(v205, v506, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v175(v203, 1, v176) == 1)
  {
    outlined destroy of Coordinate3DPB?(v512, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB(v206, type metadata accessor for Coordinate3DPB);
    goto LABEL_22;
  }
  v209 = v511;
  outlined init with take of Matrix2dPB(v203, v511, type metadata accessor for Coordinate3DPB);
  v210 = static Coordinate3DPB.== infix(_:_:)(v206, v209);
  outlined destroy of Matrix3x3PB(v209, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v512, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB(v206, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v187, &demangling cache variable for type metadata for Coordinate3DPB?);
  v204 = v199;
  if ((v210 & 1) == 0)
    goto LABEL_24;
LABEL_28:
  v211 = v179
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
  swift_beginAccess();
  v212 = v507;
  outlined init with copy of (Int32, Matrix2dPB)(v211, v507, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  v213 = v204
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
  swift_beginAccess();
  v214 = v504;
  v215 = v504 + *(int *)(v501 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v212, v504, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  v216 = v213;
  v217 = v214;
  outlined init with copy of (Int32, Matrix2dPB)(v216, v215, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  v218 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v502 + 48);
  v219 = v214;
  v220 = v503;
  if (v218(v219, 1, v503) == 1)
  {
    outlined destroy of Coordinate3DPB?(v212, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
    v221 = v218(v215, 1, v220);
    v222 = v505;
    if (v221 == 1)
    {
      outlined destroy of Coordinate3DPB?(v217, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
      goto LABEL_35;
    }
LABEL_33:
    v180 = &demangling cache variable for type metadata for (DetectionCanonicalizationDataPB?, DetectionCanonicalizationDataPB?);
LABEL_41:
    v181 = v217;
    goto LABEL_23;
  }
  v223 = v500;
  outlined init with copy of (Int32, Matrix2dPB)(v217, v500, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  v224 = v218(v215, 1, v220);
  v222 = v505;
  if (v224 == 1)
  {
    outlined destroy of Coordinate3DPB?(v507, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
    outlined destroy of Matrix3x3PB(v223, type metadata accessor for DetectionCanonicalizationDataPB);
    goto LABEL_33;
  }
  v225 = v495;
  outlined init with take of Matrix2dPB(v215, v495, type metadata accessor for DetectionCanonicalizationDataPB);
  v226 = specialized static DetectionCanonicalizationDataPB.== infix(_:_:)(v223, v225);
  outlined destroy of Matrix3x3PB(v225, type metadata accessor for DetectionCanonicalizationDataPB);
  outlined destroy of Coordinate3DPB?(v507, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  outlined destroy of Matrix3x3PB(v223, type metadata accessor for DetectionCanonicalizationDataPB);
  outlined destroy of Coordinate3DPB?(v217, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  if ((v226 & 1) == 0)
    goto LABEL_24;
LABEL_35:
  v227 = v179 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v227, v222, &demangling cache variable for type metadata for HandPosePB?);
  v228 = v204 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
  swift_beginAccess();
  v229 = v222;
  v230 = v499;
  v231 = v499 + *(int *)(v496 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v229, v499, &demangling cache variable for type metadata for HandPosePB?);
  v232 = v228;
  v217 = v230;
  outlined init with copy of (Int32, Matrix2dPB)(v232, v231, &demangling cache variable for type metadata for HandPosePB?);
  v233 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v497 + 48);
  v234 = v230;
  v235 = v498;
  if (v233(v234, 1, v498) == 1)
  {
    outlined destroy of Coordinate3DPB?(v229, &demangling cache variable for type metadata for HandPosePB?);
    if (v233(v231, 1, v235) == 1)
    {
      outlined destroy of Coordinate3DPB?(v217, &demangling cache variable for type metadata for HandPosePB?);
      goto LABEL_43;
    }
    goto LABEL_40;
  }
  v236 = v494;
  outlined init with copy of (Int32, Matrix2dPB)(v217, (uint64_t)v494, &demangling cache variable for type metadata for HandPosePB?);
  if (v233(v231, 1, v235) == 1)
  {
    outlined destroy of Coordinate3DPB?(v505, &demangling cache variable for type metadata for HandPosePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v236, type metadata accessor for HandPosePB);
LABEL_40:
    v180 = &demangling cache variable for type metadata for (HandPosePB?, HandPosePB?);
    goto LABEL_41;
  }
  v237 = v493;
  outlined init with take of Matrix2dPB(v231, v493, type metadata accessor for HandPosePB);
  v238 = specialized static CompactHandPosePB.== infix(_:_:)(v236, v237, (uint64_t (*)(_QWORD, _QWORD, __n128))specialized static Array<A>.== infix(_:_:), type metadata accessor for HandPosePB, (uint64_t (*)(char *, uint64_t (*)(_QWORD, _QWORD, __n128)))specialized static Matrix2dPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v237, type metadata accessor for HandPosePB);
  outlined destroy of Coordinate3DPB?(v505, &demangling cache variable for type metadata for HandPosePB?);
  outlined destroy of Matrix3x3PB((uint64_t)v236, type metadata accessor for HandPosePB);
  outlined destroy of Coordinate3DPB?(v217, &demangling cache variable for type metadata for HandPosePB?);
  if ((v238 & 1) == 0)
    goto LABEL_24;
LABEL_43:
  v239 = (unsigned __int8 *)(v179
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
  swift_beginAccess();
  v240 = *v239;
  v241 = (unsigned __int8 *)(v204
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
  swift_beginAccess();
  if (v240 != *v241)
    goto LABEL_24;
  v242 = (float *)(v179
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius);
  swift_beginAccess();
  v243 = *v242;
  v244 = (float *)(v204
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius);
  swift_beginAccess();
  if (v243 != *v244)
    goto LABEL_24;
  v245 = (uint64_t *)(v179
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore);
  swift_beginAccess();
  v246 = *v245;
  v247 = (uint64_t *)(v204
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore);
  swift_beginAccess();
  v248 = *v247;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v249 = specialized static Array<A>.== infix(_:_:)(v246, v248);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v249 & 1) == 0)
    goto LABEL_24;
  v250 = (uint64_t *)(v179
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass);
  swift_beginAccess();
  v251 = *v250;
  v252 = (uint64_t *)(v204
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass);
  swift_beginAccess();
  v253 = *v252;
  if (*((_BYTE *)v252 + 8) == 1)
    __asm { BR              X10 }
  if (v251 != v253)
    goto LABEL_24;
  v254 = (unsigned __int8 *)(v179
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown);
  swift_beginAccess();
  v255 = *v254;
  v256 = (unsigned __int8 *)(v204
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown);
  swift_beginAccess();
  if (v255 != *v256)
    goto LABEL_24;
  v257 = v179 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
  swift_beginAccess();
  v258 = v491;
  outlined init with copy of (Int32, Matrix2dPB)(v257, v491, &demangling cache variable for type metadata for PoseSpecPB?);
  v259 = v204 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
  swift_beginAccess();
  v260 = v492;
  v261 = v492 + *(int *)(v488 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v258, v492, &demangling cache variable for type metadata for PoseSpecPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v259, v261, &demangling cache variable for type metadata for PoseSpecPB?);
  v262 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v489 + 48);
  v263 = v490;
  if (v262(v260, 1, v490) == 1)
  {
    outlined destroy of Coordinate3DPB?(v491, &demangling cache variable for type metadata for PoseSpecPB?);
    if (v262(v261, 1, v263) == 1)
    {
      outlined destroy of Coordinate3DPB?(v492, &demangling cache variable for type metadata for PoseSpecPB?);
      goto LABEL_57;
    }
LABEL_55:
    v264 = &demangling cache variable for type metadata for (PoseSpecPB?, PoseSpecPB?);
    v265 = v492;
LABEL_63:
    outlined destroy of Coordinate3DPB?(v265, v264);
    goto LABEL_24;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v492, v487, &demangling cache variable for type metadata for PoseSpecPB?);
  if (v262(v261, 1, v263) == 1)
  {
    outlined destroy of Coordinate3DPB?(v491, &demangling cache variable for type metadata for PoseSpecPB?);
    outlined destroy of Matrix3x3PB(v487, type metadata accessor for PoseSpecPB);
    goto LABEL_55;
  }
  v266 = v483;
  outlined init with take of Matrix2dPB(v261, v483, type metadata accessor for PoseSpecPB);
  v267 = v487;
  v268 = specialized static PoseSpecPB.== infix(_:_:)(v487, v266);
  outlined destroy of Matrix3x3PB(v266, type metadata accessor for PoseSpecPB);
  outlined destroy of Coordinate3DPB?(v491, &demangling cache variable for type metadata for PoseSpecPB?);
  outlined destroy of Matrix3x3PB(v267, type metadata accessor for PoseSpecPB);
  outlined destroy of Coordinate3DPB?(v492, &demangling cache variable for type metadata for PoseSpecPB?);
  if ((v268 & 1) == 0)
    goto LABEL_24;
LABEL_57:
  v269 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
  swift_beginAccess();
  v270 = v485;
  outlined init with copy of (Int32, Matrix2dPB)(v269, v485, &demangling cache variable for type metadata for Coordinate3DPB?);
  v271 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
  swift_beginAccess();
  v272 = v486;
  v273 = v486 + *(int *)(v515 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v270, v486, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v271, v273, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v175(v272, 1, v514) == 1)
  {
    outlined destroy of Coordinate3DPB?(v485, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v175(v273, 1, v514) == 1)
    {
      outlined destroy of Coordinate3DPB?(v486, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v486, v484, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v175(v273, 1, v514) == 1)
  {
    outlined destroy of Coordinate3DPB?(v485, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB(v484, type metadata accessor for Coordinate3DPB);
LABEL_62:
    v264 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v265 = v486;
    goto LABEL_63;
  }
  v274 = v511;
  outlined init with take of Matrix2dPB(v273, v511, type metadata accessor for Coordinate3DPB);
  v275 = v484;
  v276 = static Coordinate3DPB.== infix(_:_:)(v484, v274);
  outlined destroy of Matrix3x3PB(v274, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v485, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB(v275, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v486, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v276 & 1) == 0)
    goto LABEL_24;
LABEL_66:
  v277 = (uint64_t *)(v420
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops);
  swift_beginAccess();
  v278 = *v277;
  v279 = (uint64_t *)(v421
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops);
  swift_beginAccess();
  v280 = *v279;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v281 = specialized static Array<A>.== infix(_:_:)(v278, v280);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v281 & 1) == 0)
    goto LABEL_24;
  v282 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures;
  swift_beginAccess();
  v283 = v480;
  outlined init with copy of (Int32, Matrix2dPB)(v282, v480, &demangling cache variable for type metadata for PoseLatentsPB?);
  v284 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures;
  swift_beginAccess();
  v285 = v482;
  v286 = v482 + *(int *)(v477 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v283, v482, &demangling cache variable for type metadata for PoseLatentsPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v284, v286, &demangling cache variable for type metadata for PoseLatentsPB?);
  v287 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v478 + 48);
  if (v287(v285, 1, v481) == 1)
  {
    outlined destroy of Coordinate3DPB?(v480, &demangling cache variable for type metadata for PoseLatentsPB?);
    if (v287(v286, 1, v481) == 1)
    {
      outlined destroy of Coordinate3DPB?(v482, &demangling cache variable for type metadata for PoseLatentsPB?);
      goto LABEL_70;
    }
    goto LABEL_77;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v482, (uint64_t)v479, &demangling cache variable for type metadata for PoseLatentsPB?);
  if (v287(v286, 1, v481) == 1)
  {
    outlined destroy of Coordinate3DPB?(v480, &demangling cache variable for type metadata for PoseLatentsPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v479, type metadata accessor for PoseLatentsPB);
LABEL_77:
    v264 = &demangling cache variable for type metadata for (PoseLatentsPB?, PoseLatentsPB?);
    v265 = v482;
    goto LABEL_63;
  }
  outlined init with take of Matrix2dPB(v286, v476, type metadata accessor for PoseLatentsPB);
  specialized static Data.== infix(_:_:)(*v479, v479[1]);
  if ((v292 & 1) == 0 || (specialized static Data.== infix(_:_:)(v479[2], v479[3]), (v293 & 1) == 0))
  {
    outlined destroy of Matrix3x3PB(v476, type metadata accessor for PoseLatentsPB);
    v297 = &demangling cache variable for type metadata for PoseLatentsPB?;
    outlined destroy of Coordinate3DPB?(v480, &demangling cache variable for type metadata for PoseLatentsPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v479, type metadata accessor for PoseLatentsPB);
    v265 = v482;
LABEL_83:
    v264 = v297;
    goto LABEL_63;
  }
  v294 = v479;
  v295 = v476;
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v296 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB(v295, type metadata accessor for PoseLatentsPB);
  outlined destroy of Coordinate3DPB?(v480, &demangling cache variable for type metadata for PoseLatentsPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v294, type metadata accessor for PoseLatentsPB);
  outlined destroy of Coordinate3DPB?(v482, &demangling cache variable for type metadata for PoseLatentsPB?);
  if ((v296 & 1) == 0)
    goto LABEL_24;
LABEL_70:
  v288 = (uint64_t *)(v420
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchEngaged);
  swift_beginAccess();
  v289 = *v288;
  v290 = (uint64_t *)(v421
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchEngaged);
  swift_beginAccess();
  v291 = *v290;
  if (*((_BYTE *)v290 + 8) == 1)
  {
    if (v291)
    {
      if (v291 == 1)
      {
        if (v289 != 1)
          goto LABEL_24;
      }
      else if (v289 != 2)
      {
        goto LABEL_24;
      }
    }
    else if (v289)
    {
      goto LABEL_24;
    }
  }
  else if (v289 != v291)
  {
    goto LABEL_24;
  }
  v298 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
  swift_beginAccess();
  v299 = v473;
  outlined init with copy of (Int32, Matrix2dPB)(v298, v473, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  v300 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
  swift_beginAccess();
  v301 = v475;
  v302 = v475 + *(int *)(v470 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v299, v475, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v300, v302, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  v303 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v471 + 48);
  if (v303(v301, 1, v474) == 1)
  {
    outlined destroy of Coordinate3DPB?(v473, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
    if (v303(v302, 1, v474) == 1)
    {
      outlined destroy of Coordinate3DPB?(v475, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
      goto LABEL_96;
    }
LABEL_94:
    v264 = &demangling cache variable for type metadata for (HandDescriptorInternalPB?, HandDescriptorInternalPB?);
    v265 = v475;
    goto LABEL_63;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v475, v468, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  if (v303(v302, 1, v474) == 1)
  {
    outlined destroy of Coordinate3DPB?(v473, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
    outlined destroy of Matrix3x3PB(v468, type metadata accessor for HandDescriptorInternalPB);
    goto LABEL_94;
  }
  v304 = v462;
  outlined init with take of Matrix2dPB(v302, v462, type metadata accessor for HandDescriptorInternalPB);
  v305 = v468;
  v306 = specialized static HandDescriptorInternalPB.== infix(_:_:)(v468, v304);
  outlined destroy of Matrix3x3PB(v304, type metadata accessor for HandDescriptorInternalPB);
  outlined destroy of Coordinate3DPB?(v473, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  outlined destroy of Matrix3x3PB(v305, type metadata accessor for HandDescriptorInternalPB);
  outlined destroy of Coordinate3DPB?(v475, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  if ((v306 & 1) == 0)
    goto LABEL_24;
LABEL_96:
  v307 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData;
  swift_beginAccess();
  v308 = v469;
  outlined init with copy of (Int32, Matrix2dPB)(v307, v469, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  v309 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData;
  swift_beginAccess();
  v310 = v472;
  v311 = v472 + *(int *)(v464 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v308, v472, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v309, v311, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  v312 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v465 + 48);
  if (v312(v310, 1, v467) == 1)
  {
    outlined destroy of Coordinate3DPB?(v469, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
    if (v312(v311, 1, v467) == 1)
    {
      outlined destroy of Coordinate3DPB?(v472, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
      goto LABEL_103;
    }
LABEL_101:
    v264 = &demangling cache variable for type metadata for (ObjectInteractionDataPB?, ObjectInteractionDataPB?);
    v265 = v472;
    goto LABEL_63;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v472, (uint64_t)v466, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  if (v312(v311, 1, v467) == 1)
  {
    outlined destroy of Coordinate3DPB?(v469, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v466, type metadata accessor for ObjectInteractionDataPB);
    goto LABEL_101;
  }
  v313 = v463;
  outlined init with take of Matrix2dPB(v311, (uint64_t)v463, type metadata accessor for ObjectInteractionDataPB);
  v314 = v466;
  v315 = specialized static ObjectInteractionDataPB.== infix(_:_:)(v466, v313);
  outlined destroy of Matrix3x3PB((uint64_t)v313, type metadata accessor for ObjectInteractionDataPB);
  outlined destroy of Coordinate3DPB?(v469, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v314, type metadata accessor for ObjectInteractionDataPB);
  outlined destroy of Coordinate3DPB?(v472, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  if ((v315 & 1) == 0)
    goto LABEL_24;
LABEL_103:
  v316 = (uint64_t *)(v420
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionClass);
  swift_beginAccess();
  v317 = *v316;
  v318 = (uint64_t *)(v421
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionClass);
  swift_beginAccess();
  v319 = *v318;
  if (*((_BYTE *)v318 + 8) == 1)
  {
    if (v319)
    {
      if (v319 == 1)
      {
        if (v317 != 1)
          goto LABEL_24;
      }
      else if (v317 != 2)
      {
        goto LABEL_24;
      }
    }
    else if (v317)
    {
      goto LABEL_24;
    }
  }
  else if (v317 != v319)
  {
    goto LABEL_24;
  }
  v320 = (unsigned __int8 *)(v420
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled);
  swift_beginAccess();
  v321 = *v320;
  v322 = (unsigned __int8 *)(v421
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled);
  swift_beginAccess();
  if (v321 != *v322)
    goto LABEL_24;
  v323 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty;
  swift_beginAccess();
  v324 = *(float *)v323;
  v325 = *(_BYTE *)(v323 + 4);
  v326 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty;
  swift_beginAccess();
  if ((v325 & 1) != 0)
  {
    if ((*(_BYTE *)(v326 + 4) & 1) == 0)
      goto LABEL_24;
  }
  else if ((*(_BYTE *)(v326 + 4) & 1) != 0 || v324 != *(float *)v326)
  {
    goto LABEL_24;
  }
  v327 = (float *)(v420
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchScore);
  swift_beginAccess();
  v328 = *v327;
  v329 = (float *)(v421
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchScore);
  swift_beginAccess();
  if (v328 != *v329)
    goto LABEL_24;
  v330 = (float *)(v420
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__rawPinchScore);
  swift_beginAccess();
  v331 = *v330;
  v332 = (float *)(v421
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__rawPinchScore);
  swift_beginAccess();
  if (v331 != *v332)
    goto LABEL_24;
  v333 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
  swift_beginAccess();
  v334 = v424;
  outlined init with copy of (Int32, Matrix2dPB)(v333, v424, &demangling cache variable for type metadata for PinchFeaturesPB?);
  v335 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
  swift_beginAccess();
  v336 = v428;
  v337 = v428 + *(int *)(v422 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v334, v428, &demangling cache variable for type metadata for PinchFeaturesPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v335, v337, &demangling cache variable for type metadata for PinchFeaturesPB?);
  v338 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v423 + 48);
  if (v338(v336, 1, v426) == 1)
  {
    outlined destroy of Coordinate3DPB?(v424, &demangling cache variable for type metadata for PinchFeaturesPB?);
    if (v338(v337, 1, v426) == 1)
    {
      outlined destroy of Coordinate3DPB?(v428, &demangling cache variable for type metadata for PinchFeaturesPB?);
      goto LABEL_128;
    }
LABEL_126:
    v264 = &demangling cache variable for type metadata for (PinchFeaturesPB?, PinchFeaturesPB?);
    v265 = v428;
    goto LABEL_63;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v428, v425, &demangling cache variable for type metadata for PinchFeaturesPB?);
  if (v338(v337, 1, v426) == 1)
  {
    outlined destroy of Coordinate3DPB?(v424, &demangling cache variable for type metadata for PinchFeaturesPB?);
    outlined destroy of Matrix3x3PB(v425, type metadata accessor for PinchFeaturesPB);
    goto LABEL_126;
  }
  v339 = v427;
  outlined init with take of Matrix2dPB(v337, v427, type metadata accessor for PinchFeaturesPB);
  v340 = v425;
  v341 = specialized static PinchFeaturesPB.== infix(_:_:)(v425, v339);
  outlined destroy of Matrix3x3PB(v339, type metadata accessor for PinchFeaturesPB);
  outlined destroy of Coordinate3DPB?(v424, &demangling cache variable for type metadata for PinchFeaturesPB?);
  outlined destroy of Matrix3x3PB(v340, type metadata accessor for PinchFeaturesPB);
  outlined destroy of Coordinate3DPB?(v428, &demangling cache variable for type metadata for PinchFeaturesPB?);
  if ((v341 & 1) == 0)
    goto LABEL_24;
LABEL_128:
  v342 = (unsigned __int8 *)(v420
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionFilterCond);
  swift_beginAccess();
  v343 = *v342;
  v344 = (unsigned __int8 *)(v421
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionFilterCond);
  swift_beginAccess();
  if (v343 != *v344)
    goto LABEL_24;
  v345 = (float *)(v420
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore);
  swift_beginAccess();
  v346 = *v345;
  v347 = (float *)(v421
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore);
  swift_beginAccess();
  if (v346 != *v347)
    goto LABEL_24;
  v348 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  swift_beginAccess();
  v349 = v431;
  outlined init with copy of (Int32, Matrix2dPB)(v348, v431, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  v350 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  swift_beginAccess();
  v351 = v435;
  v352 = v435 + *(int *)(v429 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v349, v435, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v350, v352, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  v353 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v430 + 48);
  if (v353(v351, 1, v433) == 1)
  {
    outlined destroy of Coordinate3DPB?(v431, &demangling cache variable for type metadata for CameraPairTransitionPB?);
    if (v353(v352, 1, v433) == 1)
    {
      outlined destroy of Coordinate3DPB?(v435, &demangling cache variable for type metadata for CameraPairTransitionPB?);
      goto LABEL_137;
    }
LABEL_135:
    v264 = &demangling cache variable for type metadata for (CameraPairTransitionPB?, CameraPairTransitionPB?);
    v265 = v435;
    goto LABEL_63;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v435, (uint64_t)v432, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  if (v353(v352, 1, v433) == 1)
  {
    outlined destroy of Coordinate3DPB?(v431, &demangling cache variable for type metadata for CameraPairTransitionPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v432, type metadata accessor for CameraPairTransitionPB);
    goto LABEL_135;
  }
  v354 = v434;
  outlined init with take of Matrix2dPB(v352, (uint64_t)v434, type metadata accessor for CameraPairTransitionPB);
  v355 = v432;
  v356 = specialized static CameraPairTransitionPB.== infix(_:_:)(v432, v354);
  outlined destroy of Matrix3x3PB((uint64_t)v354, type metadata accessor for CameraPairTransitionPB);
  outlined destroy of Coordinate3DPB?(v431, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v355, type metadata accessor for CameraPairTransitionPB);
  outlined destroy of Coordinate3DPB?(v435, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  if ((v356 & 1) == 0)
    goto LABEL_24;
LABEL_137:
  v357 = (uint64_t *)(v420
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchOcclusionStatus);
  swift_beginAccess();
  v358 = *v357;
  v359 = *((unsigned __int8 *)v357 + 8);
  v360 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchOcclusionStatus;
  swift_beginAccess();
  if ((specialized == infix<A>(_:_:)(v358, v359, *(_QWORD *)v360, *(unsigned __int8 *)(v360 + 8)) & 1) == 0)
    goto LABEL_24;
  v361 = (unsigned __int8 *)(v420
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap);
  swift_beginAccess();
  v362 = *v361;
  v363 = (unsigned __int8 *)(v421
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap);
  swift_beginAccess();
  if (v362 != *v363)
    goto LABEL_24;
  v364 = (uint64_t *)(v420
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason);
  swift_beginAccess();
  v365 = *v364;
  v366 = (_QWORD *)(v421
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason);
  swift_beginAccess();
  if (v365 != *v366)
    goto LABEL_24;
  v367 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
  swift_beginAccess();
  v368 = v438;
  outlined init with copy of (Int32, Matrix2dPB)(v367, v438, &demangling cache variable for type metadata for CompactHandPosePB?);
  v369 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
  swift_beginAccess();
  v370 = v442;
  v371 = v442 + *(int *)(v436 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v368, v442, &demangling cache variable for type metadata for CompactHandPosePB?);
  outlined init with copy of (Int32, Matrix2dPB)(v369, v371, &demangling cache variable for type metadata for CompactHandPosePB?);
  v372 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v437 + 48);
  if (v372(v370, 1, v440) == 1)
  {
    outlined destroy of Coordinate3DPB?(v438, &demangling cache variable for type metadata for CompactHandPosePB?);
    if (v372(v371, 1, v440) == 1)
    {
      outlined destroy of Coordinate3DPB?(v442, &demangling cache variable for type metadata for CompactHandPosePB?);
      goto LABEL_147;
    }
LABEL_145:
    v264 = &demangling cache variable for type metadata for (CompactHandPosePB?, CompactHandPosePB?);
    v265 = v442;
    goto LABEL_63;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v442, (uint64_t)v439, &demangling cache variable for type metadata for CompactHandPosePB?);
  if (v372(v371, 1, v440) == 1)
  {
    outlined destroy of Coordinate3DPB?(v438, &demangling cache variable for type metadata for CompactHandPosePB?);
    outlined destroy of Matrix3x3PB((uint64_t)v439, type metadata accessor for CompactHandPosePB);
    goto LABEL_145;
  }
  v373 = v441;
  outlined init with take of Matrix2dPB(v371, v441, type metadata accessor for CompactHandPosePB);
  v374 = v439;
  v375 = specialized static CompactHandPosePB.== infix(_:_:)(v439, v373, (uint64_t (*)(_QWORD, _QWORD, __n128))specialized static Array<A>.== infix(_:_:), type metadata accessor for CompactHandPosePB, (uint64_t (*)(char *, uint64_t (*)(_QWORD, _QWORD, __n128)))static Matrix2dPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v373, type metadata accessor for CompactHandPosePB);
  outlined destroy of Coordinate3DPB?(v438, &demangling cache variable for type metadata for CompactHandPosePB?);
  outlined destroy of Matrix3x3PB((uint64_t)v374, type metadata accessor for CompactHandPosePB);
  outlined destroy of Coordinate3DPB?(v442, &demangling cache variable for type metadata for CompactHandPosePB?);
  if ((v375 & 1) == 0)
    goto LABEL_24;
LABEL_147:
  v376 = v420 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
  swift_beginAccess();
  v377 = v445;
  outlined init with copy of (Int32, Matrix2dPB)(v376, v445, &demangling cache variable for type metadata for PinchInfoPB?);
  v378 = v421 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
  swift_beginAccess();
  v379 = v449;
  v380 = v449 + *(int *)(v443 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v377, v449, &demangling cache variable for type metadata for PinchInfoPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v378, v380, &demangling cache variable for type metadata for PinchInfoPB?);
  v381 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v444 + 48);
  if (v381(v379, 1, v447) == 1)
  {
    outlined destroy of Coordinate3DPB?(v445, &demangling cache variable for type metadata for PinchInfoPB?);
    if (v381(v380, 1, v447) == 1)
    {
      outlined destroy of Coordinate3DPB?(v449, &demangling cache variable for type metadata for PinchInfoPB?);
      goto LABEL_154;
    }
LABEL_152:
    v264 = &demangling cache variable for type metadata for (PinchInfoPB?, PinchInfoPB?);
    v265 = v449;
    goto LABEL_63;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v449, (uint64_t)v446, &demangling cache variable for type metadata for PinchInfoPB?);
  if (v381(v380, 1, v447) == 1)
  {
    outlined destroy of Coordinate3DPB?(v445, &demangling cache variable for type metadata for PinchInfoPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v446, type metadata accessor for PinchInfoPB);
    goto LABEL_152;
  }
  v382 = v448;
  outlined init with take of Matrix2dPB(v380, (uint64_t)v448, type metadata accessor for PinchInfoPB);
  v383 = v446;
  v384 = specialized static PinchInfoPB.== infix(_:_:)(v446, v382);
  outlined destroy of Matrix3x3PB((uint64_t)v382, type metadata accessor for PinchInfoPB);
  outlined destroy of Coordinate3DPB?(v445, &demangling cache variable for type metadata for PinchInfoPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v383, type metadata accessor for PinchInfoPB);
  outlined destroy of Coordinate3DPB?(v449, &demangling cache variable for type metadata for PinchInfoPB?);
  if ((v384 & 1) == 0)
    goto LABEL_24;
LABEL_154:
  v385 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  swift_beginAccess();
  v386 = v452;
  outlined init with copy of (Int32, Matrix2dPB)(v385, v452, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  v387 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  swift_beginAccess();
  v388 = v456;
  v389 = v456 + *(int *)(v450 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v386, v456, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v387, v389, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  v390 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v451 + 48);
  if (v390(v388, 1, v453) != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v456, v454, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    if (v390(v389, 1, v453) == 1)
    {
      outlined destroy of Coordinate3DPB?(v452, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      outlined destroy of Matrix3x3PB(v454, type metadata accessor for OperationalEnvelopeSignalsPB);
      goto LABEL_165;
    }
    v397 = v389;
    v398 = (float *)v455;
    outlined init with take of Matrix2dPB(v397, v455, type metadata accessor for OperationalEnvelopeSignalsPB);
    if (*(float *)v454 == *v398
      && (specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(v454 + 8), *(_QWORD *)(v455 + 8)) & 1) != 0)
    {
      v399 = v454;
      v400 = v455;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v401 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB(v400, type metadata accessor for OperationalEnvelopeSignalsPB);
      outlined destroy of Coordinate3DPB?(v452, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      outlined destroy of Matrix3x3PB(v399, type metadata accessor for OperationalEnvelopeSignalsPB);
      outlined destroy of Coordinate3DPB?(v456, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      if ((v401 & 1) == 0)
        goto LABEL_24;
      goto LABEL_157;
    }
    outlined destroy of Matrix3x3PB(v455, type metadata accessor for OperationalEnvelopeSignalsPB);
    v297 = &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?;
    outlined destroy of Coordinate3DPB?(v452, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    outlined destroy of Matrix3x3PB(v454, type metadata accessor for OperationalEnvelopeSignalsPB);
    v265 = v456;
    goto LABEL_83;
  }
  outlined destroy of Coordinate3DPB?(v452, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  if (v390(v389, 1, v453) != 1)
  {
LABEL_165:
    v264 = &demangling cache variable for type metadata for (OperationalEnvelopeSignalsPB?, OperationalEnvelopeSignalsPB?);
    v265 = v456;
    goto LABEL_63;
  }
  outlined destroy of Coordinate3DPB?(v456, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
LABEL_157:
  v391 = (uint64_t *)(v420
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus);
  swift_beginAccess();
  v392 = *v391;
  v393 = *((unsigned __int8 *)v391 + 8);
  v394 = (uint64_t *)(v421
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus);
  swift_beginAccess();
  v395 = *v394;
  v396 = v392 != 0;
  if (!v393)
    v396 = v392;
  if (*((_BYTE *)v394 + 8) == 1)
  {
    if (v395)
    {
      if (v396 != 1)
        goto LABEL_24;
    }
    else if (v396)
    {
      goto LABEL_24;
    }
  }
  else if (v396 != v395)
  {
    goto LABEL_24;
  }
  v402 = (unsigned __int8 *)(v420
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap);
  swift_beginAccess();
  v403 = *v402;
  v404 = (unsigned __int8 *)(v421
                           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap);
  swift_beginAccess();
  if (v403 != *v404)
    goto LABEL_24;
  v405 = v420
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
  swift_beginAccess();
  v406 = v459;
  outlined init with copy of (Int32, Matrix2dPB)(v405, v459, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  v407 = v421
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
  swift_beginAccess();
  v408 = (uint64_t)v419;
  v409 = (uint64_t)&v419[*(int *)(v457 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v406, (uint64_t)v419, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v407, v409, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  v410 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v458 + 48);
  if (v410(v408, 1, v461) == 1)
  {
    outlined destroy of Coordinate3DPB?(v459, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    if (v410(v409, 1, v461) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v419, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
LABEL_182:
      v414 = (char *)(v420
                    + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface);
      swift_beginAccess();
      v415 = *v414;
      swift_release();
      v416 = (_BYTE *)(v421
                     + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface);
      swift_beginAccess();
      LOBYTE(v416) = *v416;
      swift_release();
      v207 = v415 ^ v416 ^ 1;
      return v207 & 1;
    }
    goto LABEL_180;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v419, v460, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  if (v410(v409, 1, v461) == 1)
  {
    outlined destroy of Coordinate3DPB?(v459, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    outlined destroy of Matrix3x3PB(v460, type metadata accessor for ThumbIndexTapFeaturesPB);
LABEL_180:
    v264 = &demangling cache variable for type metadata for (ThumbIndexTapFeaturesPB?, ThumbIndexTapFeaturesPB?);
    v265 = (uint64_t)v419;
    goto LABEL_63;
  }
  v411 = (uint64_t)v418;
  outlined init with take of Matrix2dPB(v409, (uint64_t)v418, type metadata accessor for ThumbIndexTapFeaturesPB);
  v412 = v460;
  v413 = specialized static ThumbIndexTapFeaturesPB.== infix(_:_:)(v460, v411);
  outlined destroy of Matrix3x3PB(v411, type metadata accessor for ThumbIndexTapFeaturesPB);
  outlined destroy of Coordinate3DPB?(v459, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  outlined destroy of Matrix3x3PB(v412, type metadata accessor for ThumbIndexTapFeaturesPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v419, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  if ((v413 & 1) != 0)
    goto LABEL_182;
LABEL_24:
  swift_release();
  swift_release();
LABEL_25:
  v207 = 0;
  return v207 & 1;
}

uint64_t protocol witness for Message.init() in conformance HandDescriptorPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static HandDescriptorPB._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.init() in conformance JointTransformPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;

  UnknownStorage.init()();
  v8 = *(int *)(a1 + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandDescriptorPB()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandDescriptorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for HandDescriptorPB, (void (*)(_QWORD))type metadata accessor for HandDescriptorPB._StorageClass, specialized HandDescriptorPB._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in HandDescriptorPB.decodeMessage<A>(decoder:));
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandDescriptorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for HandDescriptorPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in HandDescriptorPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandDescriptorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandDescriptorPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandDescriptorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HandDescriptorPB(uint64_t a1, uint64_t a2)
{
  return specialized static JointTransformPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for HandDescriptorPB, closure #1 in static HandDescriptorPB.== infix(_:_:)) & 1;
}

uint64_t RawPinchFeaturesPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for RawPinchFeaturesPB(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t RawPinchFeaturesPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(float *)v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (*(float *)(v0 + 4) == 0.0
      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      result = closure #1 in RawPinchFeaturesPB.traverse<A>(visitor:)(v0);
      if (!v1)
      {
        if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16))
          dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)();
        type metadata accessor for RawPinchFeaturesPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in RawPinchFeaturesPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for RawPinchFeaturesPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance RawPinchFeaturesPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char *v5;

  *a2 = 0;
  a2[1] = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 32);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance RawPinchFeaturesPB()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance RawPinchFeaturesPB()
{
  return RawPinchFeaturesPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance RawPinchFeaturesPB()
{
  return RawPinchFeaturesPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance RawPinchFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance RawPinchFeaturesPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RawPinchFeaturesPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RawPinchFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RawPinchFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
  return Message.hash(into:)();
}

uint64_t PinchFeaturesPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_10;
        case 5:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          goto LABEL_10;
        case 8:
        case 11:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_10;
        case 9:
          lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_10;
        case 10:
          v4 = v3;
          closure #10 in PinchFeaturesPB.decodeMessage<A>(decoder:)();
LABEL_10:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #10 in PinchFeaturesPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for PinchFeaturesPB(0);
  type metadata accessor for RawPinchFeaturesPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t PinchFeaturesPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  if (*(float *)v5 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v4))
  {
    if (*(float *)(v5 + 4) == 0.0
      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v4))
    {
      if (*(float *)(v5 + 8) == 0.0
        || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v4))
      {
        if (*(float *)(v5 + 12) == 0.0
          || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v4))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16)
            || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v4))
          {
            if (*(float *)(v5 + 24) == 0.0
              || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v4))
            {
              if (*(float *)(v5 + 28) == 0.0
                || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v4))
              {
                if (*(_BYTE *)(v5 + 32) != 1
                  || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
                {
                  if (!*(_QWORD *)(v5 + 40)
                    || (lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus(),
                        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                        !v4))
                  {
                    result = closure #1 in PinchFeaturesPB.traverse<A>(visitor:)(v5, a1, a2, a3);
                    if (!v4)
                    {
                      if (*(_BYTE *)(v5 + 49) == 1)
                        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
                      type metadata accessor for PinchFeaturesPB(0);
                      return UnknownStorage.traverse<A>(visitor:)();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in PinchFeaturesPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RawPinchFeaturesPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PinchFeaturesPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 60), (uint64_t)v8, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for RawPinchFeaturesPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for RawPinchFeaturesPB);
}

uint64_t protocol witness for Message.init() in conformance PinchFeaturesPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_WORD *)(a2 + 48) = 1;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 60);
  v6 = type metadata accessor for RawPinchFeaturesPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchFeaturesPB()
{
  return 0x61654668636E6950;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchFeaturesPB()
{
  return PinchFeaturesPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PinchFeaturesPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB, type metadata accessor for PinchFeaturesPB, (uint64_t)&protocol conformance descriptor for PinchFeaturesPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchFeaturesPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchFeaturesPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB, type metadata accessor for PinchFeaturesPB, (uint64_t)&protocol conformance descriptor for PinchFeaturesPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB, type metadata accessor for PinchFeaturesPB, (uint64_t)&protocol conformance descriptor for PinchFeaturesPB);
  return Message.hash(into:)();
}

uint64_t OperationalEnvelopeSignalsPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in OperationalEnvelopeSignalsPB.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in OperationalEnvelopeSignalsPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufInt32();
  type metadata accessor for ProtobufFloat();
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t OperationalEnvelopeSignalsPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(float *)v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for ProtobufInt32(),
          type metadata accessor for ProtobufFloat(),
          result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for OperationalEnvelopeSignalsPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance OperationalEnvelopeSignalsPB@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance OperationalEnvelopeSignalsPB()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance OperationalEnvelopeSignalsPB()
{
  return OperationalEnvelopeSignalsPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance OperationalEnvelopeSignalsPB()
{
  return OperationalEnvelopeSignalsPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance OperationalEnvelopeSignalsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance OperationalEnvelopeSignalsPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static OperationalEnvelopeSignalsPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OperationalEnvelopeSignalsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OperationalEnvelopeSignalsPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in OperationalEnvelopeSignalsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
}

uint64_t base witness table accessor for Message in OperationalEnvelopeSignalsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
}

uint64_t base witness table accessor for Hashable in OperationalEnvelopeSignalsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in OperationalEnvelopeSignalsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
}

uint64_t base witness table accessor for Equatable in PinchFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB, type metadata accessor for PinchFeaturesPB, (uint64_t)&protocol conformance descriptor for PinchFeaturesPB);
}

uint64_t base witness table accessor for Message in PinchFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB, type metadata accessor for PinchFeaturesPB, (uint64_t)&protocol conformance descriptor for PinchFeaturesPB);
}

uint64_t base witness table accessor for Hashable in PinchFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB, type metadata accessor for PinchFeaturesPB, (uint64_t)&protocol conformance descriptor for PinchFeaturesPB);
}

uint64_t base witness table accessor for Equatable in RawPinchFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
}

uint64_t base witness table accessor for Message in RawPinchFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
}

uint64_t base witness table accessor for Hashable in RawPinchFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
}

uint64_t base witness table accessor for Equatable in HandDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
}

uint64_t base witness table accessor for Message in HandDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
}

uint64_t base witness table accessor for Hashable in HandDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
}

uint64_t base witness table accessor for Equatable in CameraPairTransitionPB.UnscaledTransformPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
}

uint64_t base witness table accessor for Message in CameraPairTransitionPB.UnscaledTransformPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
}

uint64_t base witness table accessor for Hashable in CameraPairTransitionPB.UnscaledTransformPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CameraPairTransitionPB.UnscaledTransformPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB.UnscaledTransformPB and conformance CameraPairTransitionPB.UnscaledTransformPB, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB.UnscaledTransformPB);
}

uint64_t base witness table accessor for Equatable in CameraPairTransitionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB);
}

uint64_t base witness table accessor for Message in CameraPairTransitionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB);
}

uint64_t base witness table accessor for Hashable in CameraPairTransitionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CameraPairTransitionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CameraPairTransitionPB and conformance CameraPairTransitionPB, type metadata accessor for CameraPairTransitionPB, (uint64_t)&protocol conformance descriptor for CameraPairTransitionPB);
}

uint64_t base witness table accessor for Equatable in ObjectInteractionDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB, type metadata accessor for ObjectInteractionDataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionDataPB);
}

uint64_t base witness table accessor for Message in ObjectInteractionDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB, type metadata accessor for ObjectInteractionDataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionDataPB);
}

uint64_t base witness table accessor for Hashable in ObjectInteractionDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB, type metadata accessor for ObjectInteractionDataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ObjectInteractionDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionDataPB and conformance ObjectInteractionDataPB, type metadata accessor for ObjectInteractionDataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionDataPB);
}

uint64_t base witness table accessor for Equatable in PoseImageCropPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB, type metadata accessor for PoseImageCropPB, (uint64_t)&protocol conformance descriptor for PoseImageCropPB);
}

uint64_t base witness table accessor for Message in PoseImageCropPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB, type metadata accessor for PoseImageCropPB, (uint64_t)&protocol conformance descriptor for PoseImageCropPB);
}

uint64_t base witness table accessor for Hashable in PoseImageCropPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB, type metadata accessor for PoseImageCropPB, (uint64_t)&protocol conformance descriptor for PoseImageCropPB);
}

uint64_t base witness table accessor for Equatable in PoseLatentsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB, type metadata accessor for PoseLatentsPB, (uint64_t)&protocol conformance descriptor for PoseLatentsPB);
}

uint64_t base witness table accessor for Message in PoseLatentsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB, type metadata accessor for PoseLatentsPB, (uint64_t)&protocol conformance descriptor for PoseLatentsPB);
}

uint64_t base witness table accessor for Hashable in PoseLatentsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB, type metadata accessor for PoseLatentsPB, (uint64_t)&protocol conformance descriptor for PoseLatentsPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PoseLatentsPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseLatentsPB and conformance PoseLatentsPB, type metadata accessor for PoseLatentsPB, (uint64_t)&protocol conformance descriptor for PoseLatentsPB);
}

uint64_t base witness table accessor for Equatable in PoseSpecPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
}

uint64_t base witness table accessor for Message in PoseSpecPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
}

uint64_t base witness table accessor for Hashable in PoseSpecPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
}

uint64_t base witness table accessor for Equatable in EstimatedBoundingBoxPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB);
}

uint64_t type metadata accessor for EstimatedBoundingBoxPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for EstimatedBoundingBoxPB);
}

uint64_t base witness table accessor for Message in EstimatedBoundingBoxPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB);
}

uint64_t base witness table accessor for Hashable in EstimatedBoundingBoxPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in EstimatedBoundingBoxPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB, type metadata accessor for EstimatedBoundingBoxPB, (uint64_t)&protocol conformance descriptor for EstimatedBoundingBoxPB);
}

uint64_t base witness table accessor for Equatable in HandPresence()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
}

uint64_t base witness table accessor for Message in HandPresence()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
}

uint64_t base witness table accessor for Hashable in HandPresence()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandPresence()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
}

uint64_t base witness table accessor for Equatable in CompactHandPosePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB, type metadata accessor for CompactHandPosePB, (uint64_t)&protocol conformance descriptor for CompactHandPosePB);
}

uint64_t base witness table accessor for Message in CompactHandPosePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB, type metadata accessor for CompactHandPosePB, (uint64_t)&protocol conformance descriptor for CompactHandPosePB);
}

uint64_t base witness table accessor for Hashable in CompactHandPosePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB, type metadata accessor for CompactHandPosePB, (uint64_t)&protocol conformance descriptor for CompactHandPosePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CompactHandPosePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CompactHandPosePB and conformance CompactHandPosePB, type metadata accessor for CompactHandPosePB, (uint64_t)&protocol conformance descriptor for CompactHandPosePB);
}

uint64_t base witness table accessor for Equatable in HandPosePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
}

uint64_t base witness table accessor for Message in HandPosePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
}

uint64_t base witness table accessor for Hashable in HandPosePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandPosePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
}

uint64_t base witness table accessor for Equatable in JointTransformPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB);
}

uint64_t base witness table accessor for Message in JointTransformPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB);
}

uint64_t base witness table accessor for Hashable in JointTransformPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HandPresence.Category()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [HandPresence.Category] and conformance [A], &demangling cache variable for type metadata for [HandPresence.Category]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in EngageStatus()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [EngageStatus] and conformance [A], &demangling cache variable for type metadata for [EngageStatus]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PoseModelType()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PoseModelType] and conformance [A], &demangling cache variable for type metadata for [PoseModelType]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PoseImageCropPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseImageCropPB and conformance PoseImageCropPB, type metadata accessor for PoseImageCropPB, (uint64_t)&protocol conformance descriptor for PoseImageCropPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchFeaturesPB and conformance PinchFeaturesPB, type metadata accessor for PinchFeaturesPB, (uint64_t)&protocol conformance descriptor for PinchFeaturesPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandDescriptorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in JointTransformPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB, type metadata accessor for JointTransformPB, (uint64_t)&protocol conformance descriptor for JointTransformPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in RawPinchFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB, type metadata accessor for RawPinchFeaturesPB, (uint64_t)&protocol conformance descriptor for RawPinchFeaturesPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PoseSpecPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
}

unint64_t lazy protocol witness table accessor for type PoseModelType and conformance PoseModelType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType;
  if (!lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseModelType, &type metadata for PoseModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType;
  if (!lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseModelType, &type metadata for PoseModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType;
  if (!lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseModelType, &type metadata for PoseModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType;
  if (!lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseModelType, &type metadata for PoseModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseModelType and conformance PoseModelType);
  }
  return result;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_23D85E3D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x23D85E5B4);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_23D85E7AC()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_23D85E7E0 + *((int *)qword_23D85E9B8 + (v0 >> 62))))();
}

uint64_t sub_23D85E7F0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized static OperationalEnvelopeSignalsPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*(float *)a1 == *(float *)a2
    && (specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0)
  {
    v13 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
    v14 = a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static ObjectInteractionDataPB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2)
    && specialized static Array<A>.== infix(_:_:)(a1[1], a2[1])
    && specialized static Array<A>.== infix(_:_:)(a1[2], a2[2])
    && specialized static Array<A>.== infix(_:_:)(a1[3], a2[3])
    && specialized static Array<A>.== infix(_:_:)(a1[4], a2[4])
    && specialized static Array<A>.== infix(_:_:)(a1[5], a2[5])
    && specialized static Array<A>.== infix(_:_:)(a1[6], a2[6]))
  {
    v13 = type metadata accessor for ObjectInteractionDataPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 44);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 44), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static EstimatedBoundingBoxPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2)
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8))
    && *(float *)(a1 + 16) == *(float *)(a2 + 16)
    && *(float *)(a1 + 20) == *(float *)(a2 + 20)
    && (specialized == infix<A>(_:_:)(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_QWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 32)) & 1) != 0)
  {
    v13 = type metadata accessor for EstimatedBoundingBoxPB(0);
    v14 = a1 + *(int *)(v13 + 36);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 36), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static CameraPairTransitionPB.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  float *v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  float *v55;

  v4 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v49 = (char *)&v48 - v9;
  v10 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v55 = (float *)((char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CameraPairTransitionPB.UnscaledTransformPB?, CameraPairTransitionPB.UnscaledTransformPB?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (float *)((char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v48 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v48 - v28;
  v30 = type metadata accessor for CameraPairTransitionPB(0);
  v31 = *(int *)(v30 + 28);
  v53 = a1;
  v32 = (uint64_t)&a1[v31];
  v33 = v30;
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v29, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  v34 = *(int *)(v33 + 28);
  v54 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&a2[v34], (uint64_t)v25, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  v35 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v17, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v25, v35, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v17, 1, v10) != 1)
  {
    v37 = v55;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    if (v36(v35, 1, v10) != 1)
    {
      outlined init with take of Matrix2dPB(v35, (uint64_t)v37, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
      v38 = specialized static CameraPairTransitionPB.UnscaledTransformPB.== infix(_:_:)(v21, v37);
      outlined destroy of Matrix3x3PB((uint64_t)v37, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
      outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
      if ((v38 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v45 = 0;
      return v45 & 1;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for (CameraPairTransitionPB.UnscaledTransformPB?, CameraPairTransitionPB.UnscaledTransformPB?));
    goto LABEL_11;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
  if (v36(v35, 1, v10) != 1)
    goto LABEL_6;
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for CameraPairTransitionPB.UnscaledTransformPB?);
LABEL_8:
  v39 = v54;
  if (*(_DWORD *)v53 != *(_DWORD *)v54 || *((_DWORD *)v53 + 1) != *((_DWORD *)v54 + 1))
    goto LABEL_11;
  v41 = v51;
  v40 = v52;
  v42 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v43 = v49;
  v42(v49, &v53[*(int *)(v33 + 24)], v52);
  v44 = v50;
  v42(v50, &v39[*(int *)(v33 + 24)], v40);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  v46 = *(void (**)(char *, uint64_t))(v41 + 8);
  v46(v44, v40);
  v46(v43, v40);
  return v45 & 1;
}

uint64_t specialized static CameraPairTransitionPB.UnscaledTransformPB.== infix(_:_:)(float *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t, float);
  char *v43;
  char *v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  float *v55;

  v4 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v49 = (char *)&v48 - v9;
  v10 = type metadata accessor for Matrix2dPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v53 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v48 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v48 - v28;
  v30 = type metadata accessor for CameraPairTransitionPB.UnscaledTransformPB(0);
  v31 = *(int *)(v30 + 24);
  v54 = a1;
  v32 = (uint64_t)a1 + v31;
  v33 = v30;
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v29, &demangling cache variable for type metadata for Matrix2dPB?);
  v34 = *(int *)(v33 + 24);
  v55 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a2 + v34, (uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
  v35 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v17, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v25, v35, &demangling cache variable for type metadata for Matrix2dPB?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v17, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v36(v35, 1, v10) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v36(v35, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for Matrix2dPB);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
LABEL_10:
    v45 = 0;
    return v45 & 1;
  }
  v37 = v53;
  outlined init with take of Matrix2dPB(v35, v53, type metadata accessor for Matrix2dPB);
  v38 = static Matrix2dPB.== infix(_:_:)(v21, v37);
  outlined destroy of Matrix3x3PB(v37, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v38 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v39 = v55;
  if (*v54 != *v55)
    goto LABEL_10;
  v41 = v51;
  v40 = v52;
  v42 = *(void (**)(char *, char *, uint64_t, float))(v51 + 16);
  v43 = v49;
  v42(v49, (char *)v54 + *(int *)(v33 + 20), v52, *v54);
  v44 = v50;
  ((void (*)(char *, char *, uint64_t))v42)(v50, (char *)v39 + *(int *)(v33 + 20), v40);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  v46 = *(void (**)(char *, uint64_t))(v41 + 8);
  v46(v44, v40);
  v46(v43, v40);
  return v45 & 1;
}

uint64_t specialized static HandDescriptorPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static JointTransformPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for HandDescriptorPB, closure #1 in static HandDescriptorPB.== infix(_:_:));
}

uint64_t specialized static JointTransformPB.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, __n128), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13, v14);
  v17 = (char *)&v26 - v16;
  v18 = *(int *)(a3(0, v15) + 20);
  v19 = *(_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a2 + v18);
  if (v19 == v20
    || (swift_retain(), swift_retain(), v21 = a4(v19, v20), swift_release(), swift_release(), (v21 & 1) != 0))
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v22(v17, a1, v8);
    v22(v12, a2, v8);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v12, v8);
    v24(v17, v8);
  }
  else
  {
    v23 = 0;
  }
  return v23 & 1;
}

uint64_t specialized static PoseImageCropPB.== infix(_:_:)(float *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  char v92;
  uint64_t v94;
  char v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  float *v107;
  uint64_t v108;
  int *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;

  v2 = type metadata accessor for UnknownStorage();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v116 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v115 = (char *)&v106 - v8;
  v9 = type metadata accessor for Coordinate3DPB(0);
  v120 = *(_QWORD *)(v9 - 8);
  v121 = v9;
  MEMORY[0x24BDAC7A8](v9, v10);
  v117 = (uint64_t)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v119, v12);
  v14 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v118 = (uint64_t)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v19);
  v125 = (char *)&v106 - v20;
  MEMORY[0x24BDAC7A8](v21, v22);
  v123 = (char *)&v106 - v23;
  v126 = type metadata accessor for Matrix2dPB(0);
  v24 = *(_QWORD *)(v126 - 8);
  MEMORY[0x24BDAC7A8](v126, v25);
  v122 = (uint64_t)&v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v27, v28);
  v124 = (uint64_t)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = (char *)&v106 - v32;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v34, v35);
  MEMORY[0x24BDAC7A8](v36, v37);
  MEMORY[0x24BDAC7A8]((char *)&v106 - v38, v39);
  MEMORY[0x24BDAC7A8](v40, v41);
  v43 = (char *)&v106 - v42;
  MEMORY[0x24BDAC7A8](v44, v45);
  v47 = (char *)&v106 - v46;
  MEMORY[0x24BDAC7A8](v48, v49);
  v55 = (char *)&v106 - v54;
  v56 = *v51;
  if (*((_BYTE *)v51 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v56)
    goto LABEL_26;
  v112 = v50;
  v113 = v53;
  v111 = v52;
  v114 = v14;
  v57 = v51;
  specialized static Data.== infix(_:_:)(*((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3));
  if ((v58 & 1) == 0)
    goto LABEL_26;
  v106 = v3;
  v108 = v2;
  v59 = type metadata accessor for PoseImageCropPB(0);
  v60 = *(int *)(v59 + 44);
  v107 = a1;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a1 + v60, (uint64_t)v55, &demangling cache variable for type metadata for Matrix2dPB?);
  v109 = (int *)v59;
  v110 = v57;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v57 + *(int *)(v59 + 44), (uint64_t)v47, &demangling cache variable for type metadata for Matrix2dPB?);
  v61 = (uint64_t)&v33[*(int *)(v27 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v55, (uint64_t)v33, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v47, v61, &demangling cache variable for type metadata for Matrix2dPB?);
  v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  v63 = v126;
  if (v62((uint64_t)v33, 1, v126) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v47, &demangling cache variable for type metadata for Matrix2dPB?);
    v64 = v126;
    outlined destroy of Coordinate3DPB?((uint64_t)v55, &demangling cache variable for type metadata for Matrix2dPB?);
    v65 = v62(v61, 1, v64);
    v66 = (uint64_t)v114;
    v67 = (uint64_t)v125;
    if (v65 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v33, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_12;
    }
LABEL_10:
    v69 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    v70 = (uint64_t)v33;
LABEL_25:
    outlined destroy of Coordinate3DPB?(v70, v69);
    goto LABEL_26;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v33, (uint64_t)v43, &demangling cache variable for type metadata for Matrix2dPB?);
  v68 = v62(v61, 1, v63);
  v67 = (uint64_t)v125;
  if (v68 == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v47, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v55, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v43, type metadata accessor for Matrix2dPB);
    goto LABEL_10;
  }
  v71 = v122;
  outlined init with take of Matrix2dPB(v61, v122, type metadata accessor for Matrix2dPB);
  v72 = static Matrix2dPB.== infix(_:_:)(v43, v71);
  outlined destroy of Matrix3x3PB(v71, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v47, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v55, &demangling cache variable for type metadata for Matrix2dPB?);
  v66 = (uint64_t)v114;
  outlined destroy of Matrix3x3PB((uint64_t)v43, type metadata accessor for Matrix2dPB);
  v64 = v126;
  outlined destroy of Coordinate3DPB?((uint64_t)v33, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v72 & 1) == 0)
    goto LABEL_26;
LABEL_12:
  v73 = v109;
  v74 = v107;
  v75 = v113;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v107 + v109[12], v113, &demangling cache variable for type metadata for Matrix2dPB?);
  v76 = v112;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v110 + v73[12], v112, &demangling cache variable for type metadata for Matrix2dPB?);
  v77 = *(int *)(v27 + 48);
  v78 = v124;
  v79 = v124 + v77;
  outlined init with copy of (Int32, Matrix2dPB)(v75, v124, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v76, v79, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v62(v78, 1, v64) == 1)
  {
    outlined destroy of Coordinate3DPB?(v76, &demangling cache variable for type metadata for Matrix2dPB?);
    v78 = v124;
    outlined destroy of Coordinate3DPB?(v75, &demangling cache variable for type metadata for Matrix2dPB?);
    v80 = v62(v79, 1, v64);
    v81 = v108;
    v82 = (uint64_t)v123;
    if (v80 == 1)
    {
      outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  v83 = v111;
  outlined init with copy of (Int32, Matrix2dPB)(v78, v111, &demangling cache variable for type metadata for Matrix2dPB?);
  v84 = v62(v79, 1, v64);
  v81 = v108;
  v82 = (uint64_t)v123;
  if (v84 == 1)
  {
    outlined destroy of Coordinate3DPB?(v112, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB(v83, type metadata accessor for Matrix2dPB);
LABEL_17:
    v69 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    v70 = v78;
    goto LABEL_25;
  }
  v85 = v122;
  outlined init with take of Matrix2dPB(v79, v122, type metadata accessor for Matrix2dPB);
  v86 = static Matrix2dPB.== infix(_:_:)(v83, v85);
  outlined destroy of Matrix3x3PB(v85, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v112, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB(v83, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v86 & 1) == 0)
    goto LABEL_26;
LABEL_19:
  v87 = v109;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v74 + v109[13], v82, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v110 + v87[13], v67, &demangling cache variable for type metadata for Coordinate3DPB?);
  v88 = v66 + *(int *)(v119 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v82, v66, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v67, v88, &demangling cache variable for type metadata for Coordinate3DPB?);
  v89 = v121;
  v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
  if (v90(v66, 1, v121) != 1)
  {
    v91 = v118;
    outlined init with copy of (Int32, Matrix2dPB)(v66, v118, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v90(v88, 1, v89) != 1)
    {
      v94 = v117;
      outlined init with take of Matrix2dPB(v88, v117, type metadata accessor for Coordinate3DPB);
      v95 = static Coordinate3DPB.== infix(_:_:)(v91, v94);
      outlined destroy of Matrix3x3PB(v94, type metadata accessor for Coordinate3DPB);
      outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Coordinate3DPB?(v82, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Matrix3x3PB(v91, type metadata accessor for Coordinate3DPB);
      outlined destroy of Coordinate3DPB?(v66, &demangling cache variable for type metadata for Coordinate3DPB?);
      if ((v95 & 1) == 0)
        goto LABEL_26;
      goto LABEL_29;
    }
    outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?(v82, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB(v91, type metadata accessor for Coordinate3DPB);
    goto LABEL_24;
  }
  outlined destroy of Coordinate3DPB?(v67, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v82, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v90(v88, 1, v89) != 1)
  {
LABEL_24:
    v69 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v70 = v66;
    goto LABEL_25;
  }
  outlined destroy of Coordinate3DPB?(v66, &demangling cache variable for type metadata for Coordinate3DPB?);
LABEL_29:
  if (v74[8] == *((float *)v110 + 8)
    && v74[9] == *((float *)v110 + 9)
    && *((unsigned __int8 *)v74 + 40) == *((unsigned __int8 *)v110 + 40))
  {
    v96 = v110[6];
    if (*((_BYTE *)v110 + 56) == 1)
      __asm { BR              X11 }
    if (*((_QWORD *)v74 + 6) == v96)
    {
      v97 = v109;
      v98 = (uint64_t)v74 + v109[10];
      v99 = v106;
      v100 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 16);
      v101 = v115;
      v102 = v110;
      v100(v115, v98, v81);
      v103 = (uint64_t)v102 + v97[10];
      v104 = v116;
      v100(v116, v103, v81);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v92 = dispatch thunk of static Equatable.== infix(_:_:)();
      v105 = *(void (**)(char *, uint64_t))(v99 + 8);
      v105(v104, v81);
      v105(v101, v81);
      return v92 & 1;
    }
  }
LABEL_26:
  v92 = 0;
  return v92 & 1;
}

uint64_t specialized static RawPinchFeaturesPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  char v16;
  float *v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v24 - v11;
  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4))
    goto LABEL_11;
  v13 = type metadata accessor for RawPinchFeaturesPB(0);
  v14 = *(int *)(v13 + 32);
  v15 = (float *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 4);
  v17 = (float *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 4);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_11;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_11;
  }
  if (!specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)))
  {
LABEL_11:
    v21 = 0;
    return v21 & 1;
  }
  v19 = a1 + *(int *)(v13 + 28);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v20(v12, v19, v4);
  v20(v8, a2 + *(int *)(v13 + 28), v4);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v12, v4);
  return v21 & 1;
}

uint64_t specialized static PinchFeaturesPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v48 = (char *)&v46 - v9;
  v10 = type metadata accessor for RawPinchFeaturesPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RawPinchFeaturesPB?, RawPinchFeaturesPB?));
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawPinchFeaturesPB?);
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v24);
  v26 = (char *)&v46 - v25;
  MEMORY[0x24BDAC7A8](v27, v28);
  v30 = (char *)&v46 - v29;
  if (*(float *)a1 != *(float *)a2
    || *(float *)(a1 + 4) != *(float *)(a2 + 4)
    || *(float *)(a1 + 8) != *(float *)(a2 + 8)
    || *(float *)(a1 + 12) != *(float *)(a2 + 12)
    || !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    || *(float *)(a1 + 24) != *(float *)(a2 + 24)
    || *(float *)(a1 + 28) != *(float *)(a2 + 28)
    || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || (specialized == infix<A>(_:_:)(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a2 + 40), *(unsigned __int8 *)(a2 + 48)) & 1) == 0)
  {
    goto LABEL_18;
  }
  v47 = type metadata accessor for PinchFeaturesPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v47 + 60), (uint64_t)v30, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
  outlined init with copy of (Int32, Matrix2dPB)(a2 + *(int *)(v47 + 60), (uint64_t)v26, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
  v31 = (uint64_t)&v18[*(int *)(v15 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v30, (uint64_t)v18, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
  v46 = v31;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v26, v31, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v32((uint64_t)v18, 1, v10) != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v18, (uint64_t)v22, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
    v33 = v46;
    if (v32(v46, 1, v10) != 1)
    {
      outlined init with take of Matrix2dPB(v33, (uint64_t)v14, type metadata accessor for RawPinchFeaturesPB);
      v34 = specialized static RawPinchFeaturesPB.== infix(_:_:)((uint64_t)v22, (uint64_t)v14);
      outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for RawPinchFeaturesPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v26, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v30, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
      outlined destroy of Matrix3x3PB((uint64_t)v22, type metadata accessor for RawPinchFeaturesPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
      if ((v34 & 1) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v26, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v30, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v22, type metadata accessor for RawPinchFeaturesPB);
LABEL_15:
    outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for (RawPinchFeaturesPB?, RawPinchFeaturesPB?));
    goto LABEL_18;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v26, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v30, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
  if (v32(v46, 1, v10) != 1)
    goto LABEL_15;
  outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for RawPinchFeaturesPB?);
LABEL_17:
  if (*(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 49))
  {
    v37 = v47;
    v38 = v48;
    v39 = a1 + *(int *)(v47 + 56);
    v41 = v50;
    v40 = v51;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
    v42(v48, v39, v51);
    v43 = a2 + *(int *)(v37 + 56);
    v44 = v49;
    v42(v49, v43, v40);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v45 = *(void (**)(char *, uint64_t))(v41 + 8);
    v45(v44, v40);
    v45(v38, v40);
    return v35 & 1;
  }
LABEL_18:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static PoseLatentsPB.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v13 & 1) != 0 && (specialized static Data.== infix(_:_:)(a1[2], a1[3]), (v14 & 1) != 0))
  {
    v15 = type metadata accessor for PoseLatentsPB(0);
    v16 = (char *)a1 + *(int *)(v15 + 24);
    v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v17(v12, v16, v4);
    v17(v8, (char *)(a2 + *(int *)(v15 + 24)), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static HandPresence.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 == v13 && *(float *)(a1 + 12) == *((float *)a2 + 3))
  {
    v14 = type metadata accessor for HandPresence(0);
    v15 = a1 + *(int *)(v14 + 24);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, (uint64_t)a2 + *(int *)(v14 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static PoseSpecPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_13;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a1 + 16))
    v13 = 2 * (v13 != 0);
  if (*(_BYTE *)(a2 + 16) != 1)
  {
    if (v13 == v14)
      goto LABEL_11;
LABEL_13:
    v18 = 0;
    return v18 & 1;
  }
  if (!v14)
  {
    if (!v13)
      goto LABEL_11;
    goto LABEL_13;
  }
  if (v13 != 2)
    goto LABEL_13;
LABEL_11:
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) == 0)
    goto LABEL_13;
  v15 = type metadata accessor for PoseSpecPB(0);
  v16 = a1 + *(int *)(v15 + 28);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v17(v12, v16, v4);
  v17(v8, a2 + *(int *)(v15 + 28), v4);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v19(v12, v4);
  return v18 & 1;
}

uint64_t specialized static CompactHandPosePB.== infix(_:_:)(float *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, __n128), uint64_t (*a4)(_QWORD), uint64_t (*a5)(char *, uint64_t (*)(_QWORD, _QWORD, __n128)))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  float *v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v40)(_QWORD, _QWORD, __n128);
  char v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t (*)(_QWORD, _QWORD, __n128));
  uint64_t v55;
  uint64_t (*v56)(_QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(_QWORD, _QWORD, __n128);

  v54 = a5;
  v56 = a4;
  v59 = a3;
  v7 = type metadata accessor for UnknownStorage();
  v52 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  MEMORY[0x24BDAC7A8](v7, v8);
  v51 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v50 - v12;
  v14 = type metadata accessor for Matrix2dPB(0);
  v57 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v55, v18);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v50 - v27;
  v31 = MEMORY[0x24BDAC7A8](v29, v30);
  v33 = (char *)&v50 - v32;
  v34 = a1;
  if ((v59(*(_QWORD *)a1, *(_QWORD *)a2, v31) & 1) == 0)
    goto LABEL_11;
  v59 = (uint64_t (*)(_QWORD, _QWORD, __n128))v17;
  v50 = v13;
  v35 = v56(0);
  v36 = v34;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v34 + *(int *)(v35 + 28), (uint64_t)v33, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(a2 + *(int *)(v35 + 28), (uint64_t)v28, &demangling cache variable for type metadata for Matrix2dPB?);
  v37 = (uint64_t)&v20[*(int *)(v55 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v33, (uint64_t)v20, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v28, v37, &demangling cache variable for type metadata for Matrix2dPB?);
  v38 = v58;
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  if (v39((uint64_t)v20, 1, v58) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v33, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v39(v37, 1, v38) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v20, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v39(v37, 1, v38) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v33, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v24, type metadata accessor for Matrix2dPB);
LABEL_7:
    outlined destroy of Coordinate3DPB?((uint64_t)v20, &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
LABEL_11:
    v47 = 0;
    return v47 & 1;
  }
  v40 = v59;
  outlined init with take of Matrix2dPB(v37, (uint64_t)v59, type metadata accessor for Matrix2dPB);
  v41 = v54(v24, v40);
  outlined destroy of Matrix3x3PB((uint64_t)v40, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v33, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v24, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v20, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v41 & 1) == 0)
    goto LABEL_11;
LABEL_9:
  if (v36[2] != *(float *)(a2 + 8))
    goto LABEL_11;
  v43 = v52;
  v42 = v53;
  v44 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v45 = v50;
  v44(v50, (char *)v36 + *(int *)(v35 + 24), v53);
  v46 = v51;
  v44(v51, (char *)(a2 + *(int *)(v35 + 24)), v42);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v46, v42);
  v48(v45, v42);
  return v47 & 1;
}

uint64_t specialized JointTransformPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v35 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
  v11 = type metadata accessor for Matrix2dPB(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v13 = v1 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
  v12(v1 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw, 1, 1, v11);
  v14 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty) = 0;
  v15 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__occlusionValues);
  *v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v16 = v1
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  v34 = v1
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  v17 = type metadata accessor for TransformMatrixPB(0);
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v16, 1, 1, v17);
  v36 = v1
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
  v18();
  v19 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence) = 0;
  v20 = a1 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v20, (uint64_t)v9, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v9, v10, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_endAccess();
  v21 = a1 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v21, (uint64_t)v9, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v9, v13, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_endAccess();
  v22 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty);
  swift_beginAccess();
  v23 = *v22;
  swift_beginAccess();
  *v14 = v23;
  v24 = (unint64_t *)(a1
                           + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__occlusionValues);
  swift_beginAccess();
  v25 = *v24;
  swift_beginAccess();
  *v15 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = a1
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  swift_beginAccess();
  v27 = v35;
  outlined init with copy of (Int32, Matrix2dPB)(v26, v35, &demangling cache variable for type metadata for TransformMatrixPB?);
  v28 = v34;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v27, v28, &demangling cache variable for type metadata for TransformMatrixPB?);
  swift_endAccess();
  v29 = a1
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v29, v27, &demangling cache variable for type metadata for TransformMatrixPB?);
  v30 = v36;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v27, v30, &demangling cache variable for type metadata for TransformMatrixPB?);
  swift_endAccess();
  v31 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence);
  swift_beginAccess();
  v32 = *v31;
  swift_beginAccess();
  *v19 = v32;
  return v1;
}

uint64_t specialized HandDescriptorPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  int *v93;
  int v94;
  _DWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  int v132;
  _DWORD *v133;
  int *v134;
  int v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  _BYTE *v141;
  int *v142;
  int v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  _BYTE *v150;
  _BYTE *v151;
  uint64_t *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  _BYTE *v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  _BYTE *v172;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE *v180;
  _DWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  _DWORD *v199;
  uint64_t v200;
  _BYTE *v201;
  _DWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  _BYTE *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v220 = (uint64_t)&v174 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v219 = (uint64_t)&v174 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v218 = (uint64_t)&v174 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompactHandPosePB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v217 = (uint64_t)&v174 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CameraPairTransitionPB?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v216 = (uint64_t)&v174 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchFeaturesPB?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v215 = (uint64_t)&v174 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionDataPB?);
  MEMORY[0x24BDAC7A8](v21, v22);
  v213 = (uint64_t)&v174 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternalPB?);
  MEMORY[0x24BDAC7A8](v24, v25);
  v209 = (uint64_t)&v174 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseLatentsPB?);
  MEMORY[0x24BDAC7A8](v27, v28);
  v204 = (uint64_t)&v174 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v196 = (uint64_t)&v174 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v33, v34);
  v186 = (uint64_t)&v174 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  MEMORY[0x24BDAC7A8](v36, v37);
  v182 = (uint64_t)&v174 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v39, v40);
  v42 = (char *)&v174 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  v43 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  v44 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
  v175 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
  v45 = type metadata accessor for Coordinate3DPB(0);
  v46 = *(void (**)(void))(*(_QWORD *)(v45 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v46)(v44, 1, 1, v45);
  v176 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
  v46();
  v177 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
  v46();
  v47 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
  v178 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
  v48 = type metadata accessor for DetectionCanonicalizationDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 1, 1, v48);
  v49 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
  v179 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
  v50 = type metadata accessor for HandPosePB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
  v180 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft) = 0;
  v181 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius) = 0;
  v183 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore) = v43;
  v51 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass;
  v184 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass;
  *(_QWORD *)v51 = 0;
  *(_BYTE *)(v51 + 8) = 1;
  v185 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown) = 0;
  v52 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
  v187 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
  v53 = type metadata accessor for PoseSpecPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 1, 1, v53);
  v188 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
  v46();
  v189 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops) = v43;
  v54 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures;
  v190 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures;
  v55 = type metadata accessor for PoseLatentsPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
  v56 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchEngaged;
  v191 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchEngaged;
  *(_QWORD *)v56 = 0;
  *(_BYTE *)(v56 + 8) = 1;
  v57 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
  v192 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
  v58 = type metadata accessor for HandDescriptorInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 1, 1, v58);
  v59 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData;
  v193 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData;
  v60 = type metadata accessor for ObjectInteractionDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 1, 1, v60);
  v61 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionClass;
  v194 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionClass;
  *(_QWORD *)v61 = 0;
  *(_BYTE *)(v61 + 8) = 1;
  v195 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled) = 0;
  v62 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty;
  v197 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty;
  *(_DWORD *)v62 = 0;
  *(_BYTE *)(v62 + 4) = 1;
  v198 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchScore);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchScore) = 0;
  v199 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__rawPinchScore);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__rawPinchScore) = 0;
  v63 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
  v200 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
  v64 = type metadata accessor for PinchFeaturesPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 1, 1, v64);
  v201 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionFilterCond);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionFilterCond) = 0;
  v202 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore) = 0;
  v65 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  v203 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  v66 = type metadata accessor for CameraPairTransitionPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 1, 1, v66);
  v67 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchOcclusionStatus;
  *(_QWORD *)v67 = 0;
  *(_BYTE *)(v67 + 8) = 1;
  v206 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap) = 0;
  v207 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason) = 0;
  v68 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
  v208 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
  v69 = type metadata accessor for CompactHandPosePB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 1, 1, v69);
  v70 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
  v210 = v1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
  v71 = type metadata accessor for PinchInfoPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v70, 1, 1, v71);
  v72 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  v211 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  v73 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 1, 1, v73);
  v74 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus;
  *(_QWORD *)v74 = 0;
  *(_BYTE *)(v74 + 8) = 1;
  v214 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap) = 0;
  v75 = v1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
  v205 = v1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
  v76 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 1, 1, v76);
  v212 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface) = 0;
  swift_beginAccess();
  v77 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v77;
  swift_beginAccess();
  v78 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v78;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v79 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detection3DHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v79, (uint64_t)v42, &demangling cache variable for type metadata for Coordinate3DPB?);
  v80 = v175;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v42, v80, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v81 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__predictedHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v81, (uint64_t)v42, &demangling cache variable for type metadata for Coordinate3DPB?);
  v82 = v176;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v42, v82, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v83 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__center;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v83, (uint64_t)v42, &demangling cache variable for type metadata for Coordinate3DPB?);
  v84 = v177;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v42, v84, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v85 = a1
      + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__detectionCanonicalizationData;
  swift_beginAccess();
  v86 = v182;
  outlined init with copy of (Int32, Matrix2dPB)(v85, v182, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  v87 = v178;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v86, v87, &demangling cache variable for type metadata for DetectionCanonicalizationDataPB?);
  swift_endAccess();
  v88 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPose;
  swift_beginAccess();
  v89 = v186;
  outlined init with copy of (Int32, Matrix2dPB)(v88, v186, &demangling cache variable for type metadata for HandPosePB?);
  v90 = v179;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v89, v90, &demangling cache variable for type metadata for HandPosePB?);
  swift_endAccess();
  v91 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__isLeft);
  swift_beginAccess();
  LOBYTE(v91) = *v91;
  v92 = v180;
  swift_beginAccess();
  *v92 = (_BYTE)v91;
  v93 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handRadius);
  swift_beginAccess();
  v94 = *v93;
  v95 = v181;
  swift_beginAccess();
  *v95 = v94;
  v96 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceScore);
  swift_beginAccess();
  v97 = *v96;
  v98 = v183;
  swift_beginAccess();
  *v98 = v97;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v99 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__handPresenceClass);
  swift_beginAccess();
  v100 = *v99;
  LOBYTE(v99) = *((_BYTE *)v99 + 8);
  v101 = v184;
  swift_beginAccess();
  *(_QWORD *)v101 = v100;
  *(_BYTE *)(v101 + 8) = (_BYTE)v99;
  v102 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDown);
  swift_beginAccess();
  LOBYTE(v102) = *v102;
  v103 = v185;
  swift_beginAccess();
  *v103 = (_BYTE)v102;
  v104 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__poseSpec;
  swift_beginAccess();
  v105 = v196;
  outlined init with copy of (Int32, Matrix2dPB)(v104, v196, &demangling cache variable for type metadata for PoseSpecPB?);
  v106 = v187;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v105, v106, &demangling cache variable for type metadata for PoseSpecPB?);
  swift_endAccess();
  v107 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cropUsedHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v107, (uint64_t)v42, &demangling cache variable for type metadata for Coordinate3DPB?);
  v108 = v188;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v42, v108, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v109 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__imageCrops);
  swift_beginAccess();
  v110 = *v109;
  v111 = v189;
  swift_beginAccess();
  *v111 = v110;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v112 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__latentFeatures;
  swift_beginAccess();
  v113 = v204;
  outlined init with copy of (Int32, Matrix2dPB)(v112, v204, &demangling cache variable for type metadata for PoseLatentsPB?);
  v114 = v190;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v113, v114, &demangling cache variable for type metadata for PoseLatentsPB?);
  swift_endAccess();
  v115 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchEngaged);
  swift_beginAccess();
  v116 = *v115;
  LOBYTE(v115) = *((_BYTE *)v115 + 8);
  v117 = v191;
  swift_beginAccess();
  *(_QWORD *)v117 = v116;
  *(_BYTE *)(v117 + 8) = (_BYTE)v115;
  v118 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__internalData;
  swift_beginAccess();
  v119 = v209;
  outlined init with copy of (Int32, Matrix2dPB)(v118, v209, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  v120 = v192;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v119, v120, &demangling cache variable for type metadata for HandDescriptorInternalPB?);
  swift_endAccess();
  v121 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionData;
  swift_beginAccess();
  v122 = v213;
  outlined init with copy of (Int32, Matrix2dPB)(v121, v213, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  v123 = v193;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v122, v123, &demangling cache variable for type metadata for ObjectInteractionDataPB?);
  swift_endAccess();
  v124 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionClass);
  swift_beginAccess();
  v125 = *v124;
  LOBYTE(v124) = *((_BYTE *)v124 + 8);
  v126 = v194;
  swift_beginAccess();
  *(_QWORD *)v126 = v125;
  *(_BYTE *)(v126 + 8) = (_BYTE)v124;
  v127 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchCancelled);
  swift_beginAccess();
  LOBYTE(v127) = *v127;
  v128 = v195;
  swift_beginAccess();
  *v128 = (_BYTE)v127;
  v129 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__hoverDistanceUncertainty;
  swift_beginAccess();
  LODWORD(v128) = *(_DWORD *)v129;
  LOBYTE(v129) = *(_BYTE *)(v129 + 4);
  v130 = v197;
  swift_beginAccess();
  *(_DWORD *)v130 = (_DWORD)v128;
  *(_BYTE *)(v130 + 4) = v129;
  v131 = (int *)(a1
               + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchScore);
  swift_beginAccess();
  v132 = *v131;
  v133 = v198;
  swift_beginAccess();
  *v133 = v132;
  v134 = (int *)(a1
               + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__rawPinchScore);
  swift_beginAccess();
  v135 = *v134;
  v136 = v199;
  swift_beginAccess();
  *v136 = v135;
  v137 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchFeatures;
  swift_beginAccess();
  v138 = v215;
  outlined init with copy of (Int32, Matrix2dPB)(v137, v215, &demangling cache variable for type metadata for PinchFeaturesPB?);
  v139 = v200;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v138, v139, &demangling cache variable for type metadata for PinchFeaturesPB?);
  swift_endAccess();
  v140 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionFilterCond);
  swift_beginAccess();
  LOBYTE(v140) = *v140;
  v141 = v201;
  swift_beginAccess();
  *v141 = (_BYTE)v140;
  v142 = (int *)(a1
               + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__trackingHealthScore);
  swift_beginAccess();
  v143 = *v142;
  v144 = v202;
  swift_beginAccess();
  *v144 = v143;
  v145 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cameraPairTransition;
  swift_beginAccess();
  v146 = v216;
  outlined init with copy of (Int32, Matrix2dPB)(v145, v216, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  v147 = v203;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v146, v147, &demangling cache variable for type metadata for CameraPairTransitionPB?);
  swift_endAccess();
  v148 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchOcclusionStatus);
  swift_beginAccess();
  v149 = *v148;
  LOBYTE(v148) = *((_BYTE *)v148 + 8);
  swift_beginAccess();
  *(_QWORD *)v67 = v149;
  *(_BYTE *)(v67 + 8) = (_BYTE)v148;
  v150 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__middleDoubleTap);
  swift_beginAccess();
  LOBYTE(v150) = *v150;
  v151 = v206;
  swift_beginAccess();
  *v151 = (_BYTE)v150;
  v152 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__cancellationReason);
  swift_beginAccess();
  v153 = *v152;
  v154 = v207;
  swift_beginAccess();
  *v154 = v153;
  v155 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__compactHandPose;
  swift_beginAccess();
  v156 = v217;
  outlined init with copy of (Int32, Matrix2dPB)(v155, v217, &demangling cache variable for type metadata for CompactHandPosePB?);
  v157 = v208;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v156, v157, &demangling cache variable for type metadata for CompactHandPosePB?);
  swift_endAccess();
  v158 = a1 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchInfo;
  swift_beginAccess();
  v159 = v218;
  outlined init with copy of (Int32, Matrix2dPB)(v158, v218, &demangling cache variable for type metadata for PinchInfoPB?);
  v160 = v210;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v159, v160, &demangling cache variable for type metadata for PinchInfoPB?);
  swift_endAccess();
  v161 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__operationalEnvelopeSignals;
  swift_beginAccess();
  v162 = v219;
  outlined init with copy of (Int32, Matrix2dPB)(v161, v219, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  v163 = v211;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v162, v163, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  swift_endAccess();
  v164 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__objectInteractionStateStatus);
  swift_beginAccess();
  v165 = *v164;
  LOBYTE(v164) = *((_BYTE *)v164 + 8);
  swift_beginAccess();
  *(_QWORD *)v74 = v165;
  *(_BYTE *)(v74 + 8) = (_BYTE)v164;
  v166 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTap);
  swift_beginAccess();
  LOBYTE(v166) = *v166;
  v167 = v214;
  swift_beginAccess();
  *v167 = (_BYTE)v166;
  v168 = a1
       + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__thumbIndexTapFeatures;
  swift_beginAccess();
  v169 = v220;
  outlined init with copy of (Int32, Matrix2dPB)(v168, v220, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  v170 = v205;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v169, v170, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  swift_endAccess();
  v171 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands16HandDescriptorPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__pinchDownHomeUserInterface);
  swift_beginAccess();
  LOBYTE(v171) = *v171;
  v172 = v212;
  swift_beginAccess();
  *v172 = (_BYTE)v171;
  return v1;
}

uint64_t initializeBufferWithCopyOfBuffer for EstimatedBoundingBoxPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v6 = *(int *)(a3 + 36);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for EstimatedBoundingBoxPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for EstimatedBoundingBoxPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for EstimatedBoundingBoxPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for EstimatedBoundingBoxPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for EstimatedBoundingBoxPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EstimatedBoundingBoxPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D862D08(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for EstimatedBoundingBoxPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D862D90(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for EstimatedBoundingBoxPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PoseModelType()
{
  return &type metadata for PoseModelType;
}

uint64_t PosePerJointDataPB.dtPose3D.setter(uint64_t a1)
{
  return PosePerJointDataPB.dtPose3D.setter(a1, &demangling cache variable for type metadata for Coordinate3DPB?, type metadata accessor for Coordinate3DPB, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D);
}

uint64_t PosePerJointDataPB.dtPose3DFiltered.setter(uint64_t a1)
{
  return PosePerJointDataPB.dtPose3D.setter(a1, &demangling cache variable for type metadata for Coordinate3DPB?, type metadata accessor for Coordinate3DPB, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered);
}

uint64_t PosePerJointDataPB.dtEuler.setter(uint64_t a1)
{
  return PosePerJointDataPB.dtPose3D.setter(a1, &demangling cache variable for type metadata for Orientation3DPB?, type metadata accessor for Orientation3DPB, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler);
}

uint64_t PosePerJointDataPB.dtRawTransform.setter(uint64_t a1)
{
  return PosePerJointDataPB.dtPose3D.setter(a1, &demangling cache variable for type metadata for TransformMatrixPB?, type metadata accessor for TransformMatrixPB, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform);
}

uint64_t PosePerJointDataPB.gtPose3D.setter(uint64_t a1)
{
  return PosePerJointDataPB.dtPose3D.setter(a1, &demangling cache variable for type metadata for Coordinate3DPB?, type metadata accessor for Coordinate3DPB, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D);
}

uint64_t PosePerJointDataPB.gtEuler.setter(uint64_t a1)
{
  return PosePerJointDataPB.dtPose3D.setter(a1, &demangling cache variable for type metadata for Orientation3DPB?, type metadata accessor for Orientation3DPB, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler);
}

uint64_t PosePerJointDataPB.gtTransform.setter(uint64_t a1)
{
  return PosePerJointDataPB.dtPose3D.setter(a1, &demangling cache variable for type metadata for TransformMatrixPB?, type metadata accessor for TransformMatrixPB, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform);
}

uint64_t PosePerJointDataPB.jointRotationError.setter(uint64_t a1)
{
  return PosePerJointDataPB.dtPose3D.setter(a1, &demangling cache variable for type metadata for Orientation3DPB?, type metadata accessor for Orientation3DPB, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError);
}

uint64_t PosePerJointDataPB.dtPose3D.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v8 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v25 - v16;
  v18 = *(int *)(type metadata accessor for PosePerJointDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PosePerJointDataPB._StorageClass(0);
    swift_allocObject();
    v19 = swift_retain();
    v20 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v19);
    swift_release();
    *(_QWORD *)(v8 + v18) = v20;
    swift_release();
  }
  v21 = *(_QWORD *)(v8 + v18);
  outlined init with take of Matrix2dPB(a1, (uint64_t)v17, a3);
  v22 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v17, 0, 1, v22);
  outlined init with take of ImageData?((uint64_t)v17, (uint64_t)v13, a2);
  v23 = v21 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v13, v23, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t Orientation3DPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Orientation3DPB.traverse<A>(visitor:)()
{
  double *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
  {
    if (v0[1] == 0.0 || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
    {
      if (v0[2] == 0.0 || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for Orientation3DPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Orientation3DPB()
{
  return 0x7461746E6569724FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Orientation3DPB()
{
  return Orientation3DPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Orientation3DPB()
{
  return Orientation3DPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Orientation3DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Orientation3DPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Orientation3DPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Orientation3DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Orientation3DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1)
{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PosePerJointDataPB._StorageClass, PosePerJointDataPB._StorageClass.init(), &static PosePerJointDataPB._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(_QWORD))type metadata accessor for PoseJointsDataPB._StorageClass, PoseJointsDataPB._StorageClass.init(), &static PoseJointsDataPB._StorageClass.defaultInstance);
}

uint64_t PosePerJointDataPB._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_QWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 88) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 1;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_QWORD *)(v0 + 128) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  *(_QWORD *)(v0 + 144) = 0;
  v1 = v0
     + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError;
  *(_BYTE *)(v0 + 152) = 1;
  v2 = type metadata accessor for Orientation3DPB(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointQuaternionError;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D;
  v6 = type metadata accessor for Coordinate3DPB(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D, 1, 1, v6);
  v7(v0+ OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered, 1, 1, v6);
  v3(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler, 1, 1, v2);
  v8 = v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform;
  v9 = type metadata accessor for TransformMatrixPB(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform, 1, 1, v9);
  v11 = v0
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__unifiedConfidence;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  return v0;
}

uint64_t PosePerJointDataPB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform, &demangling cache variable for type metadata for TransformMatrixPB?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PosePerJointDataPB._StorageClass()
{
  return type metadata accessor for PosePerJointDataPB._StorageClass(0);
}

uint64_t type metadata accessor for PosePerJointDataPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PosePerJointDataPB._StorageClass);
}

void type metadata completion function for PosePerJointDataPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Orientation3DPB?, (void (*)(uint64_t))type metadata accessor for Orientation3DPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TransformMatrixPB?, (void (*)(uint64_t))type metadata accessor for TransformMatrixPB);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for Orientation3DPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for Orientation3DPB);
}

uint64_t PosePerJointDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for PosePerJointDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PosePerJointDataPB._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = specialized PosePerJointDataPB._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)(v11, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #6 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 10:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError;
          goto LABEL_5;
        case 11:
        case 19:
          closure #11 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)();
          break;
        case 12:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D;
          goto LABEL_23;
        case 13:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D;
          goto LABEL_23;
        case 14:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered;
LABEL_23:
          v16 = type metadata accessor for Coordinate3DPB;
          v17 = &lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB;
          v18 = &protocol conformance descriptor for Coordinate3DPB;
          goto LABEL_6;
        case 15:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler;
          goto LABEL_5;
        case 16:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler;
LABEL_5:
          v16 = type metadata accessor for Orientation3DPB;
          v17 = &lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB;
          v18 = &protocol conformance descriptor for Orientation3DPB;
          goto LABEL_6;
        case 17:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform;
          goto LABEL_28;
        case 18:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform;
LABEL_28:
          v16 = type metadata accessor for TransformMatrixPB;
          v17 = &lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB;
          v18 = &protocol conformance descriptor for TransformMatrixPB;
LABEL_6:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in PosePerJointDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  result = closure #1 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
  if (!v4)
  {
    closure #2 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
    closure #3 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
    closure #4 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
    closure #5 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
    closure #6 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
    closure #7 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
    closure #8 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
    closure #9 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1);
    closure #10 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #21 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointQuaternionError);
    closure #12 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #13 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #14 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #15 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #16 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #17 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #18 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    return closure #21 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__unifiedConfidence);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 72) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 88) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 104) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #9 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 152) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #10 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Orientation3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Orientation3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Orientation3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Orientation3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Orientation3DPB);
}

uint64_t closure #12 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #13 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #14 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #15 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Orientation3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Orientation3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Orientation3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Orientation3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Orientation3DPB);
}

uint64_t closure #16 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Orientation3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Orientation3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Orientation3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Orientation3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Orientation3DPB);
}

uint64_t closure #17 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TransformMatrixPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TransformMatrixPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TransformMatrixPB);
}

uint64_t closure #18 in closure #1 in PosePerJointDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TransformMatrixPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TransformMatrixPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TransformMatrixPB);
}

uint64_t static PosePerJointDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static JointTransformPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:)) & 1;
}

BOOL closure #1 in static PosePerJointDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  double v84;
  char v85;
  char v86;
  double v87;
  char v88;
  double *v89;
  double *v90;
  char v91;
  double v92;
  char v93;
  double *v94;
  double *v95;
  char v96;
  double v97;
  char v98;
  double *v99;
  double *v100;
  char v101;
  double v102;
  char v103;
  double *v104;
  double *v105;
  char v106;
  double v107;
  char v108;
  double *v109;
  double *v110;
  char v111;
  double v112;
  char v113;
  double *v114;
  double *v115;
  char v116;
  double v117;
  char v118;
  double *v119;
  double *v120;
  char v121;
  double v122;
  char v123;
  double *v124;
  double *v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  double *v135;
  char v136;
  uint64_t v137;
  double v138;
  char v139;
  double *v140;
  double *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  float *v148;
  uint64_t *v149;
  uint64_t v150;
  float *v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float *v159;
  float *v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float *v167;
  float *v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  double *v175;
  double *v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  double *v183;
  double *v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  double v204;
  double *v205;
  double v206;
  int v207;
  char v208;
  unsigned int (*v209)(uint64_t, uint64_t, uint64_t);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  double *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double *v223;
  uint64_t v224;
  uint64_t v225;
  float *v226;
  uint64_t v227;
  uint64_t v228;
  float *v229;
  float *v230;
  float *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  double *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  double *v241;

  v220 = type metadata accessor for TransformMatrixPB(0);
  v214 = *(_QWORD *)(v220 - 8);
  MEMORY[0x24BDAC7A8](v220, v4);
  v211 = (uint64_t)&v209 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TransformMatrixPB?, TransformMatrixPB?));
  MEMORY[0x24BDAC7A8](v216, v6);
  v213 = (uint64_t)&v209 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v218 = (uint64_t)&v209 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v210 = (uint64_t)&v209 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v212 = (uint64_t)&v209 - v16;
  MEMORY[0x24BDAC7A8](v17, v18);
  v215 = (uint64_t)&v209 - v19;
  MEMORY[0x24BDAC7A8](v20, v21);
  v217 = (uint64_t)&v209 - v22;
  v236 = type metadata accessor for Coordinate3DPB(0);
  v234 = *(_QWORD *)(v236 - 8);
  MEMORY[0x24BDAC7A8](v236, v23);
  v230 = (float *)((char *)&v209 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v235, v25);
  v228 = (uint64_t)&v209 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27, v28);
  v232 = (uint64_t)&v209 - v29;
  MEMORY[0x24BDAC7A8](v30, v31);
  v238 = (char *)&v209 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v33, v34);
  v226 = (float *)((char *)&v209 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v36, v37);
  v227 = (uint64_t)&v209 - v38;
  MEMORY[0x24BDAC7A8](v39, v40);
  v229 = (float *)((char *)&v209 - v41);
  MEMORY[0x24BDAC7A8](v42, v43);
  v233 = (uint64_t)&v209 - v44;
  MEMORY[0x24BDAC7A8](v45, v46);
  v231 = (float *)((char *)&v209 - v47);
  MEMORY[0x24BDAC7A8](v48, v49);
  v51 = (char *)&v209 - v50;
  v240 = type metadata accessor for Orientation3DPB(0);
  v52 = *(_QWORD *)(v240 - 8);
  MEMORY[0x24BDAC7A8](v240, v53);
  v237 = (double *)((char *)&v209 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Orientation3DPB?, Orientation3DPB?));
  MEMORY[0x24BDAC7A8](v239, v55);
  v222 = (uint64_t)&v209 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v57, v58);
  v225 = (uint64_t)&v209 - v59;
  MEMORY[0x24BDAC7A8](v60, v61);
  v63 = (char *)&v209 - v62;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Orientation3DPB?);
  MEMORY[0x24BDAC7A8](v64, v65);
  v219 = (double *)((char *)&v209 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v67, v68);
  v221 = (uint64_t)&v209 - v69;
  MEMORY[0x24BDAC7A8](v70, v71);
  v223 = (double *)((char *)&v209 - v72);
  MEMORY[0x24BDAC7A8](v73, v74);
  v224 = (uint64_t)&v209 - v75;
  MEMORY[0x24BDAC7A8](v76, v77);
  v79 = (double *)((char *)&v209 - v78);
  MEMORY[0x24BDAC7A8](v80, v81);
  v83 = (char *)&v209 - v82;
  swift_beginAccess();
  v84 = *(double *)(a1 + 16);
  v85 = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  v241 = (double *)a2;
  v86 = *(_BYTE *)(a2 + 24);
  if ((v85 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (v84 != *(double *)(a2 + 16))
      v86 = 1;
    if ((v86 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v87 = *(double *)(a1 + 32);
  v88 = *(_BYTE *)(a1 + 40);
  v89 = v241;
  v90 = v241 + 4;
  swift_beginAccess();
  v91 = *((_BYTE *)v89 + 40);
  if ((v88 & 1) != 0)
  {
    if (!*((_BYTE *)v89 + 40))
      return 0;
  }
  else
  {
    if (v87 != *v90)
      v91 = 1;
    if ((v91 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v92 = *(double *)(a1 + 48);
  v93 = *(_BYTE *)(a1 + 56);
  v94 = v241;
  v95 = v241 + 6;
  swift_beginAccess();
  v96 = *((_BYTE *)v94 + 56);
  if ((v93 & 1) != 0)
  {
    if (!*((_BYTE *)v94 + 56))
      return 0;
  }
  else
  {
    if (v92 != *v95)
      v96 = 1;
    if ((v96 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v97 = *(double *)(a1 + 64);
  v98 = *(_BYTE *)(a1 + 72);
  v99 = v241;
  v100 = v241 + 8;
  swift_beginAccess();
  v101 = *((_BYTE *)v99 + 72);
  if ((v98 & 1) != 0)
  {
    if (!*((_BYTE *)v99 + 72))
      return 0;
  }
  else
  {
    if (v97 != *v100)
      v101 = 1;
    if ((v101 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v102 = *(double *)(a1 + 80);
  v103 = *(_BYTE *)(a1 + 88);
  v104 = v241;
  v105 = v241 + 10;
  swift_beginAccess();
  v106 = *((_BYTE *)v104 + 88);
  if ((v103 & 1) != 0)
  {
    if (!*((_BYTE *)v104 + 88))
      return 0;
  }
  else
  {
    if (v102 != *v105)
      v106 = 1;
    if ((v106 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v107 = *(double *)(a1 + 96);
  v108 = *(_BYTE *)(a1 + 104);
  v109 = v241;
  v110 = v241 + 12;
  swift_beginAccess();
  v111 = *((_BYTE *)v109 + 104);
  if ((v108 & 1) != 0)
  {
    if (!*((_BYTE *)v109 + 104))
      return 0;
  }
  else
  {
    if (v107 != *v110)
      v111 = 1;
    if ((v111 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v112 = *(double *)(a1 + 112);
  v113 = *(_BYTE *)(a1 + 120);
  v114 = v241;
  v115 = v241 + 14;
  swift_beginAccess();
  v116 = *((_BYTE *)v114 + 120);
  if ((v113 & 1) != 0)
  {
    if (!*((_BYTE *)v114 + 120))
      return 0;
  }
  else
  {
    if (v112 != *v115)
      v116 = 1;
    if ((v116 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v117 = *(double *)(a1 + 128);
  v118 = *(_BYTE *)(a1 + 136);
  v119 = v241;
  v120 = v241 + 16;
  swift_beginAccess();
  v121 = *((_BYTE *)v119 + 136);
  if ((v118 & 1) != 0)
  {
    if (!*((_BYTE *)v119 + 136))
      return 0;
  }
  else
  {
    if (v117 != *v120)
      v121 = 1;
    if ((v121 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v122 = *(double *)(a1 + 144);
  v123 = *(_BYTE *)(a1 + 152);
  v124 = v241;
  v125 = v241 + 18;
  swift_beginAccess();
  v126 = *((_BYTE *)v124 + 152);
  if ((v123 & 1) != 0)
  {
    if (!*((_BYTE *)v124 + 152))
      return 0;
  }
  else
  {
    if (v122 != *v125)
      v126 = 1;
    if ((v126 & 1) != 0)
      return 0;
  }
  v127 = a1
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v127, (uint64_t)v83, &demangling cache variable for type metadata for Orientation3DPB?);
  v128 = (uint64_t)v241
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError;
  swift_beginAccess();
  v129 = (uint64_t)&v63[*(int *)(v239 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v83, (uint64_t)v63, &demangling cache variable for type metadata for Orientation3DPB?);
  v130 = v128;
  v131 = v129;
  outlined init with copy of (Int32, Matrix2dPB)(v130, v129, &demangling cache variable for type metadata for Orientation3DPB?);
  v132 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  v133 = v240;
  if (v132((uint64_t)v63, 1, v240) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v83, &demangling cache variable for type metadata for Orientation3DPB?);
    if (v132(v131, 1, v133) == 1)
    {
      v209 = v132;
      outlined destroy of Coordinate3DPB?((uint64_t)v63, &demangling cache variable for type metadata for Orientation3DPB?);
      goto LABEL_64;
    }
LABEL_60:
    outlined destroy of Coordinate3DPB?((uint64_t)v63, &demangling cache variable for type metadata for (Orientation3DPB?, Orientation3DPB?));
    goto LABEL_61;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v63, (uint64_t)v79, &demangling cache variable for type metadata for Orientation3DPB?);
  if (v132(v131, 1, v133) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v83, &demangling cache variable for type metadata for Orientation3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v79, type metadata accessor for Orientation3DPB);
    goto LABEL_60;
  }
  v209 = v132;
  v135 = v237;
  outlined init with take of Matrix2dPB(v131, (uint64_t)v237, type metadata accessor for Orientation3DPB);
  swift_retain();
  swift_retain();
  v136 = specialized static Orientation3DPB.== infix(_:_:)(v79, v135);
  outlined destroy of Matrix3x3PB((uint64_t)v135, type metadata accessor for Orientation3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v83, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v79, type metadata accessor for Orientation3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v63, &demangling cache variable for type metadata for Orientation3DPB?);
  if ((v136 & 1) == 0)
    goto LABEL_61;
LABEL_64:
  v137 = a1
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointQuaternionError;
  swift_beginAccess();
  v138 = *(double *)v137;
  v139 = *(_BYTE *)(v137 + 8);
  v140 = v241;
  v141 = (double *)((char *)v241
                  + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointQuaternionError);
  swift_beginAccess();
  if ((v139 & 1) != 0)
  {
    v142 = (uint64_t)v238;
    if (((_BYTE)v141[1] & 1) == 0)
      goto LABEL_61;
  }
  else
  {
    v142 = (uint64_t)v238;
    if (((_BYTE)v141[1] & 1) != 0 || v138 != *v141)
      goto LABEL_61;
  }
  v143 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v143, (uint64_t)v51, &demangling cache variable for type metadata for Coordinate3DPB?);
  v144 = (uint64_t)v140
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D;
  swift_beginAccess();
  v145 = v142 + *(int *)(v235 + 48);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v51, v142, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v144, v145, &demangling cache variable for type metadata for Coordinate3DPB?);
  v146 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v234 + 48);
  v147 = v236;
  if (v146(v142, 1, v236) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v51, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v146(v145, 1, v147) == 1)
    {
      outlined destroy of Coordinate3DPB?(v142, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_76;
    }
LABEL_74:
    v149 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v150 = v142;
LABEL_117:
    outlined destroy of Coordinate3DPB?(v150, v149);
    goto LABEL_61;
  }
  v148 = v231;
  outlined init with copy of (Int32, Matrix2dPB)(v142, (uint64_t)v231, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v146(v145, 1, v147) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v51, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v148, type metadata accessor for Coordinate3DPB);
    goto LABEL_74;
  }
  v151 = v230;
  outlined init with take of Matrix2dPB(v145, (uint64_t)v230, type metadata accessor for Coordinate3DPB);
  v152 = specialized static Coordinate3DPB.== infix(_:_:)(v148, v151);
  outlined destroy of Matrix3x3PB((uint64_t)v151, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v51, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v148, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v142, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v152 & 1) == 0)
    goto LABEL_61;
LABEL_76:
  v153 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D;
  swift_beginAccess();
  v154 = v233;
  outlined init with copy of (Int32, Matrix2dPB)(v153, v233, &demangling cache variable for type metadata for Coordinate3DPB?);
  v155 = (uint64_t)v241
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D;
  swift_beginAccess();
  v156 = v232;
  v157 = v232 + *(int *)(v235 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v154, v232, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v155, v157, &demangling cache variable for type metadata for Coordinate3DPB?);
  v158 = v236;
  if (v146(v156, 1, v236) == 1)
  {
    outlined destroy of Coordinate3DPB?(v233, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v146(v157, 1, v158) == 1)
    {
      outlined destroy of Coordinate3DPB?(v156, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_83;
    }
    goto LABEL_81;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v156, (uint64_t)v229, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v146(v157, 1, v158) == 1)
  {
    outlined destroy of Coordinate3DPB?(v233, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v229, type metadata accessor for Coordinate3DPB);
    v156 = v232;
LABEL_81:
    v149 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v150 = v156;
    goto LABEL_117;
  }
  v159 = v230;
  outlined init with take of Matrix2dPB(v157, (uint64_t)v230, type metadata accessor for Coordinate3DPB);
  v160 = v229;
  v161 = specialized static Coordinate3DPB.== infix(_:_:)(v229, v159);
  outlined destroy of Matrix3x3PB((uint64_t)v159, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v233, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v160, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v232, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v161 & 1) == 0)
    goto LABEL_61;
LABEL_83:
  v162 = a1
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered;
  swift_beginAccess();
  v163 = v227;
  outlined init with copy of (Int32, Matrix2dPB)(v162, v227, &demangling cache variable for type metadata for Coordinate3DPB?);
  v164 = (uint64_t)v241
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered;
  swift_beginAccess();
  v165 = v228;
  v166 = v228 + *(int *)(v235 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v163, v228, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v164, v166, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v146(v165, 1, v236) == 1)
  {
    outlined destroy of Coordinate3DPB?(v227, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v146(v166, 1, v236) == 1)
    {
      outlined destroy of Coordinate3DPB?(v228, &demangling cache variable for type metadata for Coordinate3DPB?);
      goto LABEL_90;
    }
    goto LABEL_88;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v228, (uint64_t)v226, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v146(v166, 1, v236) == 1)
  {
    outlined destroy of Coordinate3DPB?(v227, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v226, type metadata accessor for Coordinate3DPB);
LABEL_88:
    v149 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v150 = v228;
    goto LABEL_117;
  }
  v167 = v230;
  outlined init with take of Matrix2dPB(v166, (uint64_t)v230, type metadata accessor for Coordinate3DPB);
  v168 = v226;
  v169 = specialized static Coordinate3DPB.== infix(_:_:)(v226, v167);
  outlined destroy of Matrix3x3PB((uint64_t)v167, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v227, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v168, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v228, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v169 & 1) == 0)
    goto LABEL_61;
LABEL_90:
  v170 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler;
  swift_beginAccess();
  v171 = v224;
  outlined init with copy of (Int32, Matrix2dPB)(v170, v224, &demangling cache variable for type metadata for Orientation3DPB?);
  v172 = (uint64_t)v241
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler;
  swift_beginAccess();
  v173 = v225;
  v174 = v225 + *(int *)(v239 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v171, v225, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v172, v174, &demangling cache variable for type metadata for Orientation3DPB?);
  if (v209(v173, 1, v240) == 1)
  {
    outlined destroy of Coordinate3DPB?(v224, &demangling cache variable for type metadata for Orientation3DPB?);
    if (v209(v174, 1, v240) == 1)
    {
      outlined destroy of Coordinate3DPB?(v225, &demangling cache variable for type metadata for Orientation3DPB?);
      goto LABEL_97;
    }
    goto LABEL_95;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v225, (uint64_t)v223, &demangling cache variable for type metadata for Orientation3DPB?);
  if (v209(v174, 1, v240) == 1)
  {
    outlined destroy of Coordinate3DPB?(v224, &demangling cache variable for type metadata for Orientation3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v223, type metadata accessor for Orientation3DPB);
LABEL_95:
    v149 = &demangling cache variable for type metadata for (Orientation3DPB?, Orientation3DPB?);
    v150 = v225;
    goto LABEL_117;
  }
  v175 = v237;
  outlined init with take of Matrix2dPB(v174, (uint64_t)v237, type metadata accessor for Orientation3DPB);
  v176 = v223;
  v177 = specialized static Orientation3DPB.== infix(_:_:)(v223, v175);
  outlined destroy of Matrix3x3PB((uint64_t)v175, type metadata accessor for Orientation3DPB);
  outlined destroy of Coordinate3DPB?(v224, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v176, type metadata accessor for Orientation3DPB);
  outlined destroy of Coordinate3DPB?(v225, &demangling cache variable for type metadata for Orientation3DPB?);
  if ((v177 & 1) == 0)
    goto LABEL_61;
LABEL_97:
  v178 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler;
  swift_beginAccess();
  v179 = v221;
  outlined init with copy of (Int32, Matrix2dPB)(v178, v221, &demangling cache variable for type metadata for Orientation3DPB?);
  v180 = (uint64_t)v241
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler;
  swift_beginAccess();
  v181 = v222;
  v182 = v222 + *(int *)(v239 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v179, v222, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v180, v182, &demangling cache variable for type metadata for Orientation3DPB?);
  if (v209(v181, 1, v240) == 1)
  {
    outlined destroy of Coordinate3DPB?(v221, &demangling cache variable for type metadata for Orientation3DPB?);
    if (v209(v182, 1, v240) == 1)
    {
      outlined destroy of Coordinate3DPB?(v222, &demangling cache variable for type metadata for Orientation3DPB?);
      goto LABEL_104;
    }
    goto LABEL_102;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v222, (uint64_t)v219, &demangling cache variable for type metadata for Orientation3DPB?);
  if (v209(v182, 1, v240) == 1)
  {
    outlined destroy of Coordinate3DPB?(v221, &demangling cache variable for type metadata for Orientation3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v219, type metadata accessor for Orientation3DPB);
LABEL_102:
    v149 = &demangling cache variable for type metadata for (Orientation3DPB?, Orientation3DPB?);
    v150 = v222;
    goto LABEL_117;
  }
  v183 = v237;
  outlined init with take of Matrix2dPB(v182, (uint64_t)v237, type metadata accessor for Orientation3DPB);
  v184 = v219;
  v185 = specialized static Orientation3DPB.== infix(_:_:)(v219, v183);
  outlined destroy of Matrix3x3PB((uint64_t)v183, type metadata accessor for Orientation3DPB);
  outlined destroy of Coordinate3DPB?(v221, &demangling cache variable for type metadata for Orientation3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v184, type metadata accessor for Orientation3DPB);
  outlined destroy of Coordinate3DPB?(v222, &demangling cache variable for type metadata for Orientation3DPB?);
  if ((v185 & 1) == 0)
    goto LABEL_61;
LABEL_104:
  v186 = a1
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform;
  swift_beginAccess();
  v187 = v217;
  outlined init with copy of (Int32, Matrix2dPB)(v186, v217, &demangling cache variable for type metadata for TransformMatrixPB?);
  v188 = (uint64_t)v241
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform;
  swift_beginAccess();
  v189 = v218;
  v190 = v218 + *(int *)(v216 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v187, v218, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v188, v190, &demangling cache variable for type metadata for TransformMatrixPB?);
  v191 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
  if (v191(v189, 1, v220) == 1)
  {
    outlined destroy of Coordinate3DPB?(v217, &demangling cache variable for type metadata for TransformMatrixPB?);
    if (v191(v190, 1, v220) == 1)
    {
      outlined destroy of Coordinate3DPB?(v218, &demangling cache variable for type metadata for TransformMatrixPB?);
      goto LABEL_111;
    }
    goto LABEL_109;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v218, v215, &demangling cache variable for type metadata for TransformMatrixPB?);
  if (v191(v190, 1, v220) == 1)
  {
    outlined destroy of Coordinate3DPB?(v217, &demangling cache variable for type metadata for TransformMatrixPB?);
    outlined destroy of Matrix3x3PB(v215, type metadata accessor for TransformMatrixPB);
LABEL_109:
    v149 = &demangling cache variable for type metadata for (TransformMatrixPB?, TransformMatrixPB?);
    v150 = v218;
    goto LABEL_117;
  }
  v192 = v211;
  outlined init with take of Matrix2dPB(v190, v211, type metadata accessor for TransformMatrixPB);
  v193 = v215;
  v194 = specialized static TransformMatrixPB.== infix(_:_:)(v215, v192);
  outlined destroy of Matrix3x3PB(v192, type metadata accessor for TransformMatrixPB);
  outlined destroy of Coordinate3DPB?(v217, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined destroy of Matrix3x3PB(v193, type metadata accessor for TransformMatrixPB);
  outlined destroy of Coordinate3DPB?(v218, &demangling cache variable for type metadata for TransformMatrixPB?);
  if ((v194 & 1) == 0)
  {
LABEL_61:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_111:
  v195 = a1
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform;
  swift_beginAccess();
  v196 = v212;
  outlined init with copy of (Int32, Matrix2dPB)(v195, v212, &demangling cache variable for type metadata for TransformMatrixPB?);
  v197 = (uint64_t)v241
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform;
  swift_beginAccess();
  v198 = v213;
  v199 = v213 + *(int *)(v216 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v196, v213, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v197, v199, &demangling cache variable for type metadata for TransformMatrixPB?);
  if (v191(v198, 1, v220) == 1)
  {
    outlined destroy of Coordinate3DPB?(v212, &demangling cache variable for type metadata for TransformMatrixPB?);
    if (v191(v199, 1, v220) == 1)
    {
      outlined destroy of Coordinate3DPB?(v213, &demangling cache variable for type metadata for TransformMatrixPB?);
      goto LABEL_120;
    }
    goto LABEL_116;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v213, v210, &demangling cache variable for type metadata for TransformMatrixPB?);
  if (v191(v199, 1, v220) == 1)
  {
    outlined destroy of Coordinate3DPB?(v212, &demangling cache variable for type metadata for TransformMatrixPB?);
    outlined destroy of Matrix3x3PB(v210, type metadata accessor for TransformMatrixPB);
LABEL_116:
    v149 = &demangling cache variable for type metadata for (TransformMatrixPB?, TransformMatrixPB?);
    v150 = v213;
    goto LABEL_117;
  }
  v200 = v211;
  outlined init with take of Matrix2dPB(v199, v211, type metadata accessor for TransformMatrixPB);
  v201 = v210;
  v202 = specialized static TransformMatrixPB.== infix(_:_:)(v210, v200);
  outlined destroy of Matrix3x3PB(v200, type metadata accessor for TransformMatrixPB);
  outlined destroy of Coordinate3DPB?(v212, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined destroy of Matrix3x3PB(v201, type metadata accessor for TransformMatrixPB);
  outlined destroy of Coordinate3DPB?(v213, &demangling cache variable for type metadata for TransformMatrixPB?);
  if ((v202 & 1) == 0)
    goto LABEL_61;
LABEL_120:
  v203 = a1
       + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__unifiedConfidence;
  swift_beginAccess();
  v204 = *(double *)v203;
  LOBYTE(v203) = *(_BYTE *)(v203 + 8);
  swift_release();
  v205 = (double *)((char *)v241
                  + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__unifiedConfidence);
  swift_beginAccess();
  v206 = *v205;
  v207 = *((unsigned __int8 *)v205 + 8);
  swift_release();
  if ((v203 & 1) != 0)
    return v207 != 0;
  if (v204 == v206)
    v208 = v207;
  else
    v208 = 1;
  return (v208 & 1) == 0;
}

uint64_t protocol witness for Message.init() in conformance PosePerJointDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static PosePerJointDataPB._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PosePerJointDataPB()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PosePerJointDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PosePerJointDataPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PosePerJointDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PosePerJointDataPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PosePerJointDataPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PosePerJointDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PosePerJointDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PosePerJointDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PosePerJointDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PosePerJointDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t result;

  a2(0);
  swift_allocObject();
  result = a3();
  *a4 = result;
  return result;
}

uint64_t PoseJointsDataPB._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
  v2 = type metadata accessor for PosePerJointDataPB(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1T1, 1, 1, v2);
  return v0;
}

uint64_t PoseJointsDataPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
  v8 = type metadata accessor for PosePerJointDataPB(0);
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(v7, 1, 1, v8);
  v10 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4, 1, 1, v8);
  v11 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3, 1, 1, v8);
  v67 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2;
  v9();
  v68 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1;
  v9();
  v69 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5;
  v9();
  v70 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4;
  v9();
  v71 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3;
  v9();
  v72 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2;
  v9();
  v73 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1;
  v9();
  v74 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5;
  v9();
  v75 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4;
  v9();
  v76 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3;
  v9();
  v77 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2;
  v9();
  v78 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1;
  v9();
  v79 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5;
  v9();
  v80 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4;
  v9();
  v81 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3;
  v9();
  v82 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2;
  v9();
  v83 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1;
  v9();
  v84 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5;
  v9();
  v85 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4;
  v9();
  v86 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3;
  v9();
  v87 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2;
  v9();
  v88 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1;
  v9();
  v89 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2;
  v9();
  v90 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1;
  v9();
  v91 = v1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1T1;
  v9();
  v12 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v12, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v7, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v13 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v13, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v10, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v11, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v15 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v15, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v16 = v67;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v16, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v17 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v17, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v18 = v68;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v18, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v19 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v19, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v20 = v69;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v20, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v21 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v21, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v22 = v70;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v22, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v23 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v23, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v24 = v71;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v24, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v25 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v25, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v26 = v72;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v26, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v27 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v27, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v28 = v73;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v28, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v29 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v29, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v30 = v74;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v30, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v31 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v31, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v32 = v75;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v32, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v33 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v33, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v34 = v76;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v34, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v35 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v35, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v36 = v77;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v36, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v37 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v37, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v38 = v78;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v38, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v39 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v39, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v40 = v79;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v40, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v41 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v41, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v42 = v80;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v42, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v43 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v43, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v44 = v81;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v44, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v45 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v45, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v46 = v82;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v46, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v47 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v47, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v48 = v83;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v48, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v49 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v49, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v50 = v84;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v50, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v51 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v51, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v52 = v85;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v52, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v53 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v53, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v54 = v86;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v54, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v55 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v55, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v56 = v87;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v56, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v57 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v57, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v58 = v88;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v58, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v59 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v59, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v60 = v89;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v60, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v61 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v61, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v62 = v90;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v62, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  v63 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1T1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v63, (uint64_t)v6, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_release();
  v64 = v91;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v6, v64, &demangling cache variable for type metadata for PosePerJointDataPB?);
  swift_endAccess();
  return v1;
}

uint64_t PoseJointsDataPB._StorageClass.deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1T1, &demangling cache variable for type metadata for PosePerJointDataPB?);
  return v0;
}

uint64_t PoseJointsDataPB._StorageClass.__deallocating_deinit()
{
  PoseJointsDataPB._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PoseJointsDataPB._StorageClass()
{
  return type metadata accessor for PoseJointsDataPB._StorageClass(0);
}

uint64_t type metadata accessor for PoseJointsDataPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PoseJointsDataPB._StorageClass);
}

void type metadata completion function for PoseJointsDataPB._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PosePerJointDataPB?, (void (*)(uint64_t))type metadata accessor for PosePerJointDataPB);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for PosePerJointDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PosePerJointDataPB);
}

uint64_t getEnumTagSinglePayload for PosePerJointDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PosePerJointDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *assignWithCopy for Orientation3DPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Orientation3DPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Orientation3DPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D868F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Orientation3DPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D868FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t getEnumTagSinglePayload for PoseJointsDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PoseJointsDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for PoseJointsDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PoseJointsDataPB);
}

uint64_t PoseJointsDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for PoseJointsDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PoseJointsDataPB._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = PoseJointsDataPB._StorageClass.init(copying:)(v8);
    swift_release();
  }
  v9 = swift_retain();
  closure #1 in PoseJointsDataPB.decodeMessage<A>(decoder:)(v9, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PoseJointsDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t *v11;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
          goto LABEL_33;
        case 2:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4;
          goto LABEL_33;
        case 3:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3;
          goto LABEL_33;
        case 4:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2;
          goto LABEL_33;
        case 5:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1;
          goto LABEL_33;
        case 6:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5;
          goto LABEL_33;
        case 7:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4;
          goto LABEL_33;
        case 8:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3;
          goto LABEL_33;
        case 9:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2;
          goto LABEL_33;
        case 10:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1;
          goto LABEL_33;
        case 11:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5;
          goto LABEL_33;
        case 12:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4;
          goto LABEL_33;
        case 13:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3;
          goto LABEL_33;
        case 14:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2;
          goto LABEL_33;
        case 15:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1;
          goto LABEL_33;
        case 16:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5;
          goto LABEL_33;
        case 17:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4;
          goto LABEL_33;
        case 18:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3;
          goto LABEL_33;
        case 19:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2;
          goto LABEL_33;
        case 20:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1;
          goto LABEL_33;
        case 21:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5;
          goto LABEL_33;
        case 22:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4;
          goto LABEL_33;
        case 23:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3;
          goto LABEL_33;
        case 24:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2;
          goto LABEL_33;
        case 25:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1;
          goto LABEL_33;
        case 26:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2;
          goto LABEL_33;
        case 27:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1;
          goto LABEL_33;
        case 28:
          v11 = &OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1T1;
LABEL_33:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)v11, type metadata accessor for PosePerJointDataPB, &lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  result = closure #1 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    closure #2 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #3 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #4 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #5 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #6 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #7 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #8 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #9 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #10 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #11 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #12 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #13 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #14 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #15 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #16 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #17 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #18 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #19 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #20 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #21 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #22 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #23 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #24 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #25 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #26 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #27 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    return closure #28 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #2 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #3 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #4 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #5 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #6 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #7 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #8 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #9 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #10 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #11 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #12 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #13 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #14 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #15 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #16 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #17 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #18 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #19 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #20 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #21 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #22 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #23 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #24 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #25 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #26 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #27 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t closure #28 in closure #1 in PoseJointsDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PosePerJointDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1T1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PosePerJointDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PosePerJointDataPB);
}

uint64_t static PoseJointsDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static JointTransformPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PoseJointsDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PoseJointsDataPB.== infix(_:_:)) & 1;
}

BOOL closure #1 in static PoseJointsDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int (*v265)(uint64_t, uint64_t, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  unsigned int (*v274)(uint64_t, uint64_t, uint64_t);
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t (*v293)(uint64_t, uint64_t, uint64_t);
  unsigned int v294;
  uint64_t v295;
  uint64_t (*v296)(uint64_t, uint64_t, uint64_t);
  uint64_t v297;
  uint64_t v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t (*v317)(uint64_t, uint64_t, uint64_t);
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int (*v327)(uint64_t, uint64_t, uint64_t);
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int (*v336)(uint64_t, uint64_t, uint64_t);
  uint64_t v337;
  char v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int (*v343)(uint64_t, uint64_t, uint64_t);
  uint64_t v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int (*v353)(uint64_t, uint64_t, uint64_t);
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int (*v365)(uint64_t, uint64_t, uint64_t);
  uint64_t v366;
  uint64_t v367;
  unsigned int (*v368)(uint64_t, uint64_t, uint64_t);
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  char v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  char v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  char v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  char v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  char v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  char v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  char v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  char v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  char v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int (*v605)(uint64_t, uint64_t, uint64_t);
  uint64_t v606;
  uint64_t v607;

  v607 = type metadata accessor for PosePerJointDataPB(0);
  v605 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v607 - 8);
  MEMORY[0x24BDAC7A8](v607, v4);
  v602 = (uint64_t)&v521 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PosePerJointDataPB?, PosePerJointDataPB?));
  MEMORY[0x24BDAC7A8](v6, v7);
  v553 = (uint64_t)&v521 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v552 = (uint64_t)&v521 - v11;
  MEMORY[0x24BDAC7A8](v12, v13);
  v549 = (uint64_t)&v521 - v14;
  MEMORY[0x24BDAC7A8](v15, v16);
  v546 = (uint64_t)&v521 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v543 = (uint64_t)&v521 - v20;
  MEMORY[0x24BDAC7A8](v21, v22);
  v540 = (uint64_t)&v521 - v23;
  MEMORY[0x24BDAC7A8](v24, v25);
  v537 = (uint64_t)&v521 - v26;
  MEMORY[0x24BDAC7A8](v27, v28);
  v534 = (uint64_t)&v521 - v29;
  MEMORY[0x24BDAC7A8](v30, v31);
  v531 = (uint64_t)&v521 - v32;
  MEMORY[0x24BDAC7A8](v33, v34);
  v529 = (uint64_t)&v521 - v35;
  MEMORY[0x24BDAC7A8](v36, v37);
  v526 = (uint64_t)&v521 - v38;
  MEMORY[0x24BDAC7A8](v39, v40);
  v556 = (uint64_t)&v521 - v41;
  MEMORY[0x24BDAC7A8](v42, v43);
  v560 = (uint64_t)&v521 - v44;
  MEMORY[0x24BDAC7A8](v45, v46);
  v562 = (uint64_t)&v521 - v47;
  MEMORY[0x24BDAC7A8](v48, v49);
  v565 = (uint64_t)&v521 - v50;
  MEMORY[0x24BDAC7A8](v51, v52);
  v568 = (uint64_t)&v521 - v53;
  MEMORY[0x24BDAC7A8](v54, v55);
  v570 = (uint64_t)&v521 - v56;
  MEMORY[0x24BDAC7A8](v57, v58);
  v575 = (uint64_t)&v521 - v59;
  MEMORY[0x24BDAC7A8](v60, v61);
  v576 = (uint64_t)&v521 - v62;
  MEMORY[0x24BDAC7A8](v63, v64);
  v579 = (uint64_t)&v521 - v65;
  MEMORY[0x24BDAC7A8](v66, v67);
  v582 = (uint64_t)&v521 - v68;
  MEMORY[0x24BDAC7A8](v69, v70);
  v585 = (uint64_t)&v521 - v71;
  MEMORY[0x24BDAC7A8](v72, v73);
  v588 = (uint64_t)&v521 - v74;
  MEMORY[0x24BDAC7A8](v75, v76);
  v591 = (uint64_t)&v521 - v77;
  MEMORY[0x24BDAC7A8](v78, v79);
  v594 = (uint64_t)&v521 - v80;
  MEMORY[0x24BDAC7A8](v81, v82);
  v597 = (uint64_t)&v521 - v83;
  MEMORY[0x24BDAC7A8](v84, v85);
  v601 = (uint64_t)&v521 - v86;
  MEMORY[0x24BDAC7A8](v87, v88);
  v90 = (char *)&v521 - v89;
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosePerJointDataPB?);
  MEMORY[0x24BDAC7A8](v91, v92);
  v551 = (uint64_t)&v521 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v94, v95);
  v550 = (uint64_t)&v521 - v96;
  MEMORY[0x24BDAC7A8](v97, v98);
  v548 = (uint64_t)&v521 - v99;
  MEMORY[0x24BDAC7A8](v100, v101);
  v547 = (uint64_t)&v521 - v102;
  MEMORY[0x24BDAC7A8](v103, v104);
  v545 = (uint64_t)&v521 - v105;
  MEMORY[0x24BDAC7A8](v106, v107);
  v544 = (uint64_t)&v521 - v108;
  MEMORY[0x24BDAC7A8](v109, v110);
  v542 = (uint64_t)&v521 - v111;
  MEMORY[0x24BDAC7A8](v112, v113);
  v541 = (uint64_t)&v521 - v114;
  MEMORY[0x24BDAC7A8](v115, v116);
  v539 = (uint64_t)&v521 - v117;
  MEMORY[0x24BDAC7A8](v118, v119);
  v538 = (uint64_t)&v521 - v120;
  MEMORY[0x24BDAC7A8](v121, v122);
  v536 = (uint64_t)&v521 - v123;
  MEMORY[0x24BDAC7A8](v124, v125);
  v535 = (uint64_t)&v521 - v126;
  MEMORY[0x24BDAC7A8](v127, v128);
  v533 = (uint64_t)&v521 - v129;
  MEMORY[0x24BDAC7A8](v130, v131);
  v532 = (uint64_t)&v521 - v132;
  MEMORY[0x24BDAC7A8](v133, v134);
  v530 = (uint64_t)&v521 - v135;
  MEMORY[0x24BDAC7A8](v136, v137);
  v528 = (uint64_t)&v521 - v138;
  MEMORY[0x24BDAC7A8](v139, v140);
  v527 = (uint64_t)&v521 - v141;
  MEMORY[0x24BDAC7A8](v142, v143);
  v525 = (uint64_t)&v521 - v144;
  MEMORY[0x24BDAC7A8](v145, v146);
  v524 = (uint64_t)&v521 - v147;
  MEMORY[0x24BDAC7A8](v148, v149);
  v523 = (uint64_t)&v521 - v150;
  MEMORY[0x24BDAC7A8](v151, v152);
  v522 = (uint64_t)&v521 - v153;
  MEMORY[0x24BDAC7A8](v154, v155);
  v521 = (uint64_t)&v521 - v156;
  MEMORY[0x24BDAC7A8](v157, v158);
  v554 = (uint64_t)&v521 - v159;
  MEMORY[0x24BDAC7A8](v160, v161);
  v555 = (uint64_t)&v521 - v162;
  MEMORY[0x24BDAC7A8](v163, v164);
  v557 = (uint64_t)&v521 - v165;
  MEMORY[0x24BDAC7A8](v166, v167);
  v558 = (uint64_t)&v521 - v168;
  MEMORY[0x24BDAC7A8](v169, v170);
  v559 = (uint64_t)&v521 - v171;
  MEMORY[0x24BDAC7A8](v172, v173);
  v561 = (uint64_t)&v521 - v174;
  MEMORY[0x24BDAC7A8](v175, v176);
  v563 = (uint64_t)&v521 - v177;
  MEMORY[0x24BDAC7A8](v178, v179);
  v564 = (uint64_t)&v521 - v180;
  MEMORY[0x24BDAC7A8](v181, v182);
  v566 = (uint64_t)&v521 - v183;
  MEMORY[0x24BDAC7A8](v184, v185);
  v567 = (uint64_t)&v521 - v186;
  MEMORY[0x24BDAC7A8](v187, v188);
  v569 = (uint64_t)&v521 - v189;
  MEMORY[0x24BDAC7A8](v190, v191);
  v571 = (uint64_t)&v521 - v192;
  MEMORY[0x24BDAC7A8](v193, v194);
  v572 = (uint64_t)&v521 - v195;
  MEMORY[0x24BDAC7A8](v196, v197);
  v574 = (uint64_t)&v521 - v198;
  MEMORY[0x24BDAC7A8](v199, v200);
  v573 = (uint64_t)&v521 - v201;
  MEMORY[0x24BDAC7A8](v202, v203);
  v578 = (uint64_t)&v521 - v204;
  MEMORY[0x24BDAC7A8](v205, v206);
  v577 = (uint64_t)&v521 - v207;
  MEMORY[0x24BDAC7A8](v208, v209);
  v581 = (uint64_t)&v521 - v210;
  MEMORY[0x24BDAC7A8](v211, v212);
  v580 = (uint64_t)&v521 - v213;
  MEMORY[0x24BDAC7A8](v214, v215);
  v584 = (uint64_t)&v521 - v216;
  MEMORY[0x24BDAC7A8](v217, v218);
  v583 = (uint64_t)&v521 - v219;
  MEMORY[0x24BDAC7A8](v220, v221);
  v587 = (uint64_t)&v521 - v222;
  MEMORY[0x24BDAC7A8](v223, v224);
  v586 = (uint64_t)&v521 - v225;
  MEMORY[0x24BDAC7A8](v226, v227);
  v590 = (uint64_t)&v521 - v228;
  MEMORY[0x24BDAC7A8](v229, v230);
  v589 = (uint64_t)&v521 - v231;
  MEMORY[0x24BDAC7A8](v232, v233);
  v593 = (uint64_t)&v521 - v234;
  MEMORY[0x24BDAC7A8](v235, v236);
  v592 = (uint64_t)&v521 - v237;
  MEMORY[0x24BDAC7A8](v238, v239);
  v596 = (uint64_t)&v521 - v240;
  MEMORY[0x24BDAC7A8](v241, v242);
  v595 = (uint64_t)&v521 - v243;
  MEMORY[0x24BDAC7A8](v244, v245);
  v599 = (uint64_t)&v521 - v246;
  MEMORY[0x24BDAC7A8](v247, v248);
  v598 = (uint64_t)&v521 - v249;
  MEMORY[0x24BDAC7A8](v250, v251);
  v600 = (uint64_t)&v521 - v252;
  MEMORY[0x24BDAC7A8](v253, v254);
  v604 = (uint64_t)&v521 - v255;
  MEMORY[0x24BDAC7A8](v256, v257);
  v259 = (char *)&v521 - v258;
  v606 = a1;
  v260 = a1 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v260, (uint64_t)v259, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v261 = a2;
  v262 = a2 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w1;
  swift_beginAccess();
  v603 = v6;
  v263 = (uint64_t)&v90[*(int *)(v6 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v259, (uint64_t)v90, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v264 = v607;
  outlined init with copy of (Int32, Matrix2dPB)(v262, v263, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v265 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v605 + 6);
  if (v265((uint64_t)v90, 1, v264) == 1)
  {
    v266 = v606;
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v259, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v267 = v261;
    if (v265(v263, 1, v264) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v90, &demangling cache variable for type metadata for PosePerJointDataPB?);
      v268 = v266;
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v90, &demangling cache variable for type metadata for (PosePerJointDataPB?, PosePerJointDataPB?));
    goto LABEL_16;
  }
  v269 = v606;
  v267 = v261;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v90, v604, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v265(v263, 1, v264) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v259, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v604, type metadata accessor for PosePerJointDataPB);
    goto LABEL_6;
  }
  v605 = v265;
  v270 = v602;
  outlined init with take of Matrix2dPB(v263, v602, type metadata accessor for PosePerJointDataPB);
  v268 = v269;
  swift_retain();
  swift_retain();
  v271 = v604;
  v272 = specialized static JointTransformPB.== infix(_:_:)(v604, v270, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v270, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v259, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v271, type metadata accessor for PosePerJointDataPB);
  v265 = v605;
  outlined destroy of Coordinate3DPB?((uint64_t)v90, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v272 & 1) == 0)
    goto LABEL_16;
LABEL_8:
  v273 = v268 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4;
  swift_beginAccess();
  v274 = v265;
  v275 = v600;
  outlined init with copy of (Int32, Matrix2dPB)(v273, v600, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v276 = v267 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t4;
  swift_beginAccess();
  v277 = v601;
  v278 = v601 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v275, v601, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v276, v278, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v279 = v607;
  if (v274(v277, 1, v607) == 1)
  {
    outlined destroy of Coordinate3DPB?(v275, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v274(v278, 1, v279) != 1)
      goto LABEL_14;
    v604 = v267;
    v605 = v274;
    outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v280 = v598;
    outlined init with copy of (Int32, Matrix2dPB)(v277, v598, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v274(v278, 1, v279) == 1)
    {
      outlined destroy of Coordinate3DPB?(v275, &demangling cache variable for type metadata for PosePerJointDataPB?);
      v281 = v280;
LABEL_13:
      outlined destroy of Matrix3x3PB(v281, type metadata accessor for PosePerJointDataPB);
      goto LABEL_14;
    }
    v604 = v267;
    v605 = v274;
    v284 = v275;
    v285 = v280;
    v286 = v602;
    outlined init with take of Matrix2dPB(v278, v602, type metadata accessor for PosePerJointDataPB);
    v287 = specialized static JointTransformPB.== infix(_:_:)(v285, v286, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
    outlined destroy of Matrix3x3PB(v286, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v284, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v285, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if ((v287 & 1) == 0)
      goto LABEL_16;
  }
  v288 = v268 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3;
  swift_beginAccess();
  v289 = v599;
  outlined init with copy of (Int32, Matrix2dPB)(v288, v599, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v290 = v604 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t3;
  swift_beginAccess();
  v291 = v597;
  v292 = v597 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v289, v597, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v290, v292, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v293 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v605;
  if (v605(v291, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v289, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v294 = v293(v292, 1, v279);
    v295 = v604;
    if (v294 == 1)
    {
      v296 = v293;
      outlined destroy of Coordinate3DPB?(v291, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_27;
    }
LABEL_24:
    outlined destroy of Coordinate3DPB?(v291, &demangling cache variable for type metadata for (PosePerJointDataPB?, PosePerJointDataPB?));
    goto LABEL_16;
  }
  v297 = v595;
  outlined init with copy of (Int32, Matrix2dPB)(v291, v595, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v296 = v293;
  if (v293(v292, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v599, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v297, type metadata accessor for PosePerJointDataPB);
    goto LABEL_24;
  }
  v298 = v602;
  outlined init with take of Matrix2dPB(v292, v602, type metadata accessor for PosePerJointDataPB);
  v299 = specialized static JointTransformPB.== infix(_:_:)(v297, v298, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v298, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v599, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v297, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v291, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v295 = v604;
  if ((v299 & 1) == 0)
    goto LABEL_16;
LABEL_27:
  v300 = v606 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2;
  swift_beginAccess();
  v301 = v596;
  outlined init with copy of (Int32, Matrix2dPB)(v300, v596, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v302 = v295 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t2;
  swift_beginAccess();
  v303 = v603;
  v277 = v594;
  v304 = v594 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v301, v594, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v302, v304, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v296(v277, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v301, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v305 = v296(v304, 1, v279);
    v306 = v606;
    if (v305 != 1)
      goto LABEL_14;
    outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v307 = v592;
    outlined init with copy of (Int32, Matrix2dPB)(v277, v592, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v296(v304, 1, v279) == 1)
    {
      outlined destroy of Coordinate3DPB?(v596, &demangling cache variable for type metadata for PosePerJointDataPB?);
      outlined destroy of Matrix3x3PB(v307, type metadata accessor for PosePerJointDataPB);
      goto LABEL_14;
    }
    v308 = v602;
    outlined init with take of Matrix2dPB(v304, v602, type metadata accessor for PosePerJointDataPB);
    v309 = specialized static JointTransformPB.== infix(_:_:)(v307, v308, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
    outlined destroy of Matrix3x3PB(v308, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v596, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v307, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v306 = v606;
    if ((v309 & 1) == 0)
      goto LABEL_16;
  }
  v310 = v303;
  v311 = v306;
  v312 = v306 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1;
  swift_beginAccess();
  v313 = v593;
  outlined init with copy of (Int32, Matrix2dPB)(v312, v593, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v314 = v295 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__t1;
  swift_beginAccess();
  v315 = *(int *)(v310 + 48);
  v277 = v591;
  v316 = v591 + v315;
  outlined init with copy of (Int32, Matrix2dPB)(v313, v591, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v314, v316, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v317 = v296;
  if (v296(v277, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v313, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v318 = v311;
    if (v296(v316, 1, v279) != 1)
      goto LABEL_14;
    v605 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v296;
    outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v319 = v589;
    outlined init with copy of (Int32, Matrix2dPB)(v277, v589, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v605 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v317;
    if (v317(v316, 1, v279) == 1)
    {
      outlined destroy of Coordinate3DPB?(v593, &demangling cache variable for type metadata for PosePerJointDataPB?);
      outlined destroy of Matrix3x3PB(v319, type metadata accessor for PosePerJointDataPB);
      goto LABEL_14;
    }
    v320 = v602;
    outlined init with take of Matrix2dPB(v316, v602, type metadata accessor for PosePerJointDataPB);
    v321 = specialized static JointTransformPB.== infix(_:_:)(v319, v320, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
    outlined destroy of Matrix3x3PB(v320, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v593, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v319, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v318 = v311;
    if ((v321 & 1) == 0)
      goto LABEL_16;
  }
  v322 = v318 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5;
  swift_beginAccess();
  v323 = v590;
  outlined init with copy of (Int32, Matrix2dPB)(v322, v590, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v324 = v295 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i5;
  swift_beginAccess();
  v325 = v603;
  v277 = v588;
  v326 = v588 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v323, v588, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v324, v326, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v327 = v605;
  if (v605(v277, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v323, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v327(v326, 1, v279) != 1)
      goto LABEL_14;
    outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
  }
  else
  {
    v328 = v586;
    outlined init with copy of (Int32, Matrix2dPB)(v277, v586, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v327(v326, 1, v279) == 1)
    {
      v329 = v590;
      goto LABEL_57;
    }
    v330 = v602;
    outlined init with take of Matrix2dPB(v326, v602, type metadata accessor for PosePerJointDataPB);
    v331 = specialized static JointTransformPB.== infix(_:_:)(v328, v330, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
    outlined destroy of Matrix3x3PB(v330, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v590, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v328, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if ((v331 & 1) == 0)
      goto LABEL_16;
  }
  v332 = v318 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4;
  swift_beginAccess();
  v333 = v587;
  outlined init with copy of (Int32, Matrix2dPB)(v332, v587, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v334 = v295 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i4;
  swift_beginAccess();
  v277 = v585;
  v335 = v585 + *(int *)(v325 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v333, v585, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v334, v335, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v336 = v605;
  if (v605(v277, 1, v279) != 1)
  {
    v328 = v583;
    outlined init with copy of (Int32, Matrix2dPB)(v277, v583, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v336(v335, 1, v279) != 1)
    {
      v337 = v602;
      outlined init with take of Matrix2dPB(v335, v602, type metadata accessor for PosePerJointDataPB);
      v338 = specialized static JointTransformPB.== infix(_:_:)(v328, v337, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
      outlined destroy of Matrix3x3PB(v337, type metadata accessor for PosePerJointDataPB);
      outlined destroy of Coordinate3DPB?(v587, &demangling cache variable for type metadata for PosePerJointDataPB?);
      outlined destroy of Matrix3x3PB(v328, type metadata accessor for PosePerJointDataPB);
      outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
      if ((v338 & 1) == 0)
        goto LABEL_16;
      goto LABEL_52;
    }
    v329 = v587;
LABEL_57:
    outlined destroy of Coordinate3DPB?(v329, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v281 = v328;
    goto LABEL_13;
  }
  outlined destroy of Coordinate3DPB?(v333, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v336(v335, 1, v279) != 1)
    goto LABEL_14;
  outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
LABEL_52:
  v339 = v318 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3;
  swift_beginAccess();
  v340 = v584;
  outlined init with copy of (Int32, Matrix2dPB)(v339, v584, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v341 = v295 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i3;
  swift_beginAccess();
  v277 = v582;
  v342 = v582 + *(int *)(v325 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v340, v582, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v341, v342, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v343 = v605;
  if (v605(v277, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v340, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v343(v342, 1, v279) == 1)
    {
      outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_59;
    }
LABEL_14:
    v282 = v277;
LABEL_15:
    outlined destroy of Coordinate3DPB?(v282, &demangling cache variable for type metadata for (PosePerJointDataPB?, PosePerJointDataPB?));
    goto LABEL_16;
  }
  v328 = v580;
  outlined init with copy of (Int32, Matrix2dPB)(v277, v580, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v343(v342, 1, v279) == 1)
  {
    v329 = v584;
    goto LABEL_57;
  }
  v344 = v602;
  outlined init with take of Matrix2dPB(v342, v602, type metadata accessor for PosePerJointDataPB);
  v345 = specialized static JointTransformPB.== infix(_:_:)(v328, v344, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v344, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v584, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v328, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v277, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v345 & 1) == 0)
    goto LABEL_16;
LABEL_59:
  v346 = v318 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2;
  swift_beginAccess();
  v347 = v581;
  outlined init with copy of (Int32, Matrix2dPB)(v346, v581, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v348 = v295 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i2;
  swift_beginAccess();
  v349 = v579;
  v350 = v579 + *(int *)(v325 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v347, v579, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v351 = v348;
  v352 = v349;
  outlined init with copy of (Int32, Matrix2dPB)(v351, v350, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v353 = v605;
  if (v605(v349, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v347, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v353(v350, 1, v279) == 1)
    {
      outlined destroy of Coordinate3DPB?(v349, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  v354 = v349;
  v355 = v577;
  outlined init with copy of (Int32, Matrix2dPB)(v354, v577, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v353(v350, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v581, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v355, type metadata accessor for PosePerJointDataPB);
LABEL_64:
    v282 = v352;
    goto LABEL_15;
  }
  v356 = v352;
  v357 = v602;
  outlined init with take of Matrix2dPB(v350, v602, type metadata accessor for PosePerJointDataPB);
  v358 = specialized static JointTransformPB.== infix(_:_:)(v355, v357, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v357, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v581, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v355, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v356, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v358 & 1) == 0)
    goto LABEL_16;
LABEL_66:
  v359 = v318 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1;
  swift_beginAccess();
  v360 = v578;
  outlined init with copy of (Int32, Matrix2dPB)(v359, v578, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v361 = v295 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1;
  swift_beginAccess();
  v362 = *(int *)(v325 + 48);
  v363 = v576;
  v364 = v576 + v362;
  outlined init with copy of (Int32, Matrix2dPB)(v360, v576, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v361, v364, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v365 = v605;
  v366 = v318;
  if (v605(v363, 1, v279) == 1)
  {
    outlined destroy of Coordinate3DPB?(v578, &demangling cache variable for type metadata for PosePerJointDataPB?);
    v367 = v279;
    v368 = v365;
    if (v365(v364, 1, v279) == 1)
    {
      v369 = v295;
      outlined destroy of Coordinate3DPB?(v363, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_73;
    }
LABEL_71:
    outlined destroy of Coordinate3DPB?(v363, &demangling cache variable for type metadata for (PosePerJointDataPB?, PosePerJointDataPB?));
    goto LABEL_16;
  }
  v370 = v279;
  v369 = v295;
  v371 = v573;
  outlined init with copy of (Int32, Matrix2dPB)(v363, v573, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v367 = v370;
  v368 = v365;
  if (v365(v364, 1, v370) == 1)
  {
    outlined destroy of Coordinate3DPB?(v578, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v371, type metadata accessor for PosePerJointDataPB);
    goto LABEL_71;
  }
  v372 = v602;
  outlined init with take of Matrix2dPB(v364, v602, type metadata accessor for PosePerJointDataPB);
  v373 = specialized static JointTransformPB.== infix(_:_:)(v371, v372, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v372, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v578, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v371, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v363, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v373 & 1) == 0)
    goto LABEL_16;
LABEL_73:
  v374 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5;
  swift_beginAccess();
  v375 = v574;
  outlined init with copy of (Int32, Matrix2dPB)(v374, v574, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v376 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m5;
  swift_beginAccess();
  v377 = v575;
  v378 = v575 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v375, v575, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v376, v378, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v377, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v574, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v378, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v575, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_80;
    }
LABEL_78:
    v379 = v575;
LABEL_191:
    outlined destroy of Coordinate3DPB?(v379, &demangling cache variable for type metadata for (PosePerJointDataPB?, PosePerJointDataPB?));
    goto LABEL_16;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v575, v572, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v378, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v574, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v572, type metadata accessor for PosePerJointDataPB);
    goto LABEL_78;
  }
  v380 = v602;
  outlined init with take of Matrix2dPB(v378, v602, type metadata accessor for PosePerJointDataPB);
  v381 = v572;
  v382 = specialized static JointTransformPB.== infix(_:_:)(v572, v380, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v380, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v574, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v381, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v575, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v382 & 1) == 0)
    goto LABEL_16;
LABEL_80:
  v383 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4;
  swift_beginAccess();
  v384 = v571;
  outlined init with copy of (Int32, Matrix2dPB)(v383, v571, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v385 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m4;
  swift_beginAccess();
  v386 = v570;
  v387 = v570 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v384, v570, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v385, v387, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v388 = v386;
  if (v368(v386, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v571, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v387, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v386, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_87;
    }
    goto LABEL_85;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v386, v569, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v387, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v571, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v569, type metadata accessor for PosePerJointDataPB);
LABEL_85:
    v379 = v386;
    goto LABEL_191;
  }
  v389 = v602;
  outlined init with take of Matrix2dPB(v387, v602, type metadata accessor for PosePerJointDataPB);
  v390 = v569;
  v391 = specialized static JointTransformPB.== infix(_:_:)(v569, v389, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v389, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v571, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v390, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v388, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v391 & 1) == 0)
    goto LABEL_16;
LABEL_87:
  v392 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3;
  swift_beginAccess();
  v393 = v567;
  outlined init with copy of (Int32, Matrix2dPB)(v392, v567, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v394 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m3;
  swift_beginAccess();
  v395 = v568;
  v396 = v568 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v393, v568, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v394, v396, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v395, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v567, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v396, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v568, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_94;
    }
    goto LABEL_92;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v568, v566, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v396, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v567, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v566, type metadata accessor for PosePerJointDataPB);
LABEL_92:
    v379 = v568;
    goto LABEL_191;
  }
  v397 = v602;
  outlined init with take of Matrix2dPB(v396, v602, type metadata accessor for PosePerJointDataPB);
  v398 = v566;
  v399 = specialized static JointTransformPB.== infix(_:_:)(v566, v397, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v397, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v567, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v398, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v568, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v399 & 1) == 0)
    goto LABEL_16;
LABEL_94:
  v400 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2;
  swift_beginAccess();
  v401 = v564;
  outlined init with copy of (Int32, Matrix2dPB)(v400, v564, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v402 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m2;
  swift_beginAccess();
  v403 = v565;
  v404 = v565 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v401, v565, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v402, v404, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v403, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v564, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v404, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v565, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_101;
    }
    goto LABEL_99;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v565, v563, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v404, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v564, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v563, type metadata accessor for PosePerJointDataPB);
LABEL_99:
    v379 = v565;
    goto LABEL_191;
  }
  v405 = v602;
  outlined init with take of Matrix2dPB(v404, v602, type metadata accessor for PosePerJointDataPB);
  v406 = v563;
  v407 = specialized static JointTransformPB.== infix(_:_:)(v563, v405, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v405, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v564, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v406, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v565, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v407 & 1) == 0)
    goto LABEL_16;
LABEL_101:
  v408 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1;
  swift_beginAccess();
  v409 = v561;
  outlined init with copy of (Int32, Matrix2dPB)(v408, v561, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v410 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__m1;
  swift_beginAccess();
  v411 = v562;
  v412 = v562 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v409, v562, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v410, v412, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v411, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v561, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v412, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v562, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_108;
    }
    goto LABEL_106;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v562, v559, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v412, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v561, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v559, type metadata accessor for PosePerJointDataPB);
LABEL_106:
    v379 = v562;
    goto LABEL_191;
  }
  v413 = v602;
  outlined init with take of Matrix2dPB(v412, v602, type metadata accessor for PosePerJointDataPB);
  v414 = v559;
  v415 = specialized static JointTransformPB.== infix(_:_:)(v559, v413, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v413, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v561, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v414, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v562, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v415 & 1) == 0)
    goto LABEL_16;
LABEL_108:
  v416 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5;
  swift_beginAccess();
  v417 = v558;
  outlined init with copy of (Int32, Matrix2dPB)(v416, v558, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v418 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r5;
  swift_beginAccess();
  v419 = v560;
  v420 = v560 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v417, v560, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v418, v420, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v419, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v558, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v420, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v560, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_115;
    }
    goto LABEL_113;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v560, v557, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v420, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v558, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v557, type metadata accessor for PosePerJointDataPB);
LABEL_113:
    v379 = v560;
    goto LABEL_191;
  }
  v421 = v602;
  outlined init with take of Matrix2dPB(v420, v602, type metadata accessor for PosePerJointDataPB);
  v422 = v557;
  v423 = specialized static JointTransformPB.== infix(_:_:)(v557, v421, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v421, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v558, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v422, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v560, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v423 & 1) == 0)
    goto LABEL_16;
LABEL_115:
  v424 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4;
  swift_beginAccess();
  v425 = v555;
  outlined init with copy of (Int32, Matrix2dPB)(v424, v555, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v426 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r4;
  swift_beginAccess();
  v427 = v556;
  v428 = v556 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v425, v556, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v426, v428, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v427, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v555, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v428, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v556, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_122;
    }
    goto LABEL_120;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v556, v554, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v428, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v555, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v554, type metadata accessor for PosePerJointDataPB);
LABEL_120:
    v379 = v556;
    goto LABEL_191;
  }
  v429 = v602;
  outlined init with take of Matrix2dPB(v428, v602, type metadata accessor for PosePerJointDataPB);
  v430 = v554;
  v431 = specialized static JointTransformPB.== infix(_:_:)(v554, v429, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v429, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v555, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v430, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v556, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v431 & 1) == 0)
    goto LABEL_16;
LABEL_122:
  v432 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3;
  swift_beginAccess();
  v433 = v521;
  outlined init with copy of (Int32, Matrix2dPB)(v432, v521, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v434 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r3;
  swift_beginAccess();
  v435 = v526;
  v436 = v526 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v433, v526, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v434, v436, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v435, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v521, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v436, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v526, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_129;
    }
    goto LABEL_127;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v526, v522, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v436, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v521, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v522, type metadata accessor for PosePerJointDataPB);
LABEL_127:
    v379 = v526;
    goto LABEL_191;
  }
  v437 = v602;
  outlined init with take of Matrix2dPB(v436, v602, type metadata accessor for PosePerJointDataPB);
  v438 = v522;
  v439 = specialized static JointTransformPB.== infix(_:_:)(v522, v437, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v437, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v521, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v438, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v526, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v439 & 1) == 0)
    goto LABEL_16;
LABEL_129:
  v440 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2;
  swift_beginAccess();
  v441 = v523;
  outlined init with copy of (Int32, Matrix2dPB)(v440, v523, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v442 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r2;
  swift_beginAccess();
  v443 = v529;
  v444 = v529 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v441, v529, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v442, v444, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v443, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v523, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v444, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v529, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_136;
    }
    goto LABEL_134;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v529, v524, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v444, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v523, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v524, type metadata accessor for PosePerJointDataPB);
LABEL_134:
    v379 = v529;
    goto LABEL_191;
  }
  v445 = v602;
  outlined init with take of Matrix2dPB(v444, v602, type metadata accessor for PosePerJointDataPB);
  v446 = v524;
  v447 = specialized static JointTransformPB.== infix(_:_:)(v524, v445, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v445, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v523, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v446, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v529, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v447 & 1) == 0)
    goto LABEL_16;
LABEL_136:
  v448 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1;
  swift_beginAccess();
  v449 = v525;
  outlined init with copy of (Int32, Matrix2dPB)(v448, v525, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v450 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__r1;
  swift_beginAccess();
  v451 = v531;
  v452 = v531 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v449, v531, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v450, v452, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v451, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v525, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v452, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v531, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_143;
    }
    goto LABEL_141;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v531, v527, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v452, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v525, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v527, type metadata accessor for PosePerJointDataPB);
LABEL_141:
    v379 = v531;
    goto LABEL_191;
  }
  v453 = v602;
  outlined init with take of Matrix2dPB(v452, v602, type metadata accessor for PosePerJointDataPB);
  v454 = v527;
  v455 = specialized static JointTransformPB.== infix(_:_:)(v527, v453, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v453, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v525, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v454, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v531, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v455 & 1) == 0)
    goto LABEL_16;
LABEL_143:
  v456 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5;
  swift_beginAccess();
  v457 = v528;
  outlined init with copy of (Int32, Matrix2dPB)(v456, v528, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v458 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p5;
  swift_beginAccess();
  v459 = v534;
  v460 = v534 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v457, v534, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v458, v460, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v459, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v528, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v460, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v534, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_150;
    }
    goto LABEL_148;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v534, v530, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v460, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v528, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v530, type metadata accessor for PosePerJointDataPB);
LABEL_148:
    v379 = v534;
    goto LABEL_191;
  }
  v461 = v602;
  outlined init with take of Matrix2dPB(v460, v602, type metadata accessor for PosePerJointDataPB);
  v462 = v530;
  v463 = specialized static JointTransformPB.== infix(_:_:)(v530, v461, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v461, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v528, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v462, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v534, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v463 & 1) == 0)
    goto LABEL_16;
LABEL_150:
  v464 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4;
  swift_beginAccess();
  v465 = v532;
  outlined init with copy of (Int32, Matrix2dPB)(v464, v532, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v466 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p4;
  swift_beginAccess();
  v467 = v537;
  v468 = v537 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v465, v537, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v466, v468, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v467, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v532, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v468, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v537, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_157;
    }
    goto LABEL_155;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v537, v533, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v468, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v532, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v533, type metadata accessor for PosePerJointDataPB);
LABEL_155:
    v379 = v537;
    goto LABEL_191;
  }
  v469 = v602;
  outlined init with take of Matrix2dPB(v468, v602, type metadata accessor for PosePerJointDataPB);
  v470 = v533;
  v471 = specialized static JointTransformPB.== infix(_:_:)(v533, v469, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v469, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v532, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v470, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v537, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v471 & 1) == 0)
    goto LABEL_16;
LABEL_157:
  v472 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3;
  swift_beginAccess();
  v473 = v535;
  outlined init with copy of (Int32, Matrix2dPB)(v472, v535, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v474 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p3;
  swift_beginAccess();
  v475 = v540;
  v476 = v540 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v473, v540, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v474, v476, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v475, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v535, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v476, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v540, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_164;
    }
    goto LABEL_162;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v540, v536, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v476, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v535, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v536, type metadata accessor for PosePerJointDataPB);
LABEL_162:
    v379 = v540;
    goto LABEL_191;
  }
  v477 = v602;
  outlined init with take of Matrix2dPB(v476, v602, type metadata accessor for PosePerJointDataPB);
  v478 = v536;
  v479 = specialized static JointTransformPB.== infix(_:_:)(v536, v477, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v477, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v535, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v478, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v540, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v479 & 1) == 0)
    goto LABEL_16;
LABEL_164:
  v480 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2;
  swift_beginAccess();
  v481 = v538;
  outlined init with copy of (Int32, Matrix2dPB)(v480, v538, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v482 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p2;
  swift_beginAccess();
  v483 = v543;
  v484 = v543 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v481, v543, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v482, v484, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v483, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v538, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v484, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v543, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_171;
    }
    goto LABEL_169;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v543, v539, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v484, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v538, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v539, type metadata accessor for PosePerJointDataPB);
LABEL_169:
    v379 = v543;
    goto LABEL_191;
  }
  v485 = v602;
  outlined init with take of Matrix2dPB(v484, v602, type metadata accessor for PosePerJointDataPB);
  v486 = v539;
  v487 = specialized static JointTransformPB.== infix(_:_:)(v539, v485, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v485, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v538, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v486, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v543, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v487 & 1) == 0)
    goto LABEL_16;
LABEL_171:
  v488 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1;
  swift_beginAccess();
  v489 = v541;
  outlined init with copy of (Int32, Matrix2dPB)(v488, v541, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v490 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__p1;
  swift_beginAccess();
  v491 = v546;
  v492 = v546 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v489, v546, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v490, v492, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v491, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v541, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v492, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v546, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_178;
    }
    goto LABEL_176;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v546, v542, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v492, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v541, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v542, type metadata accessor for PosePerJointDataPB);
LABEL_176:
    v379 = v546;
    goto LABEL_191;
  }
  v493 = v602;
  outlined init with take of Matrix2dPB(v492, v602, type metadata accessor for PosePerJointDataPB);
  v494 = v542;
  v495 = specialized static JointTransformPB.== infix(_:_:)(v542, v493, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v493, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v541, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v494, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v546, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v495 & 1) == 0)
    goto LABEL_16;
LABEL_178:
  v496 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2;
  swift_beginAccess();
  v497 = v544;
  outlined init with copy of (Int32, Matrix2dPB)(v496, v544, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v498 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__w2;
  swift_beginAccess();
  v499 = v549;
  v500 = v549 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v497, v549, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v498, v500, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v499, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v544, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v500, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v549, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_185;
    }
    goto LABEL_183;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v549, v545, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v500, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v544, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v545, type metadata accessor for PosePerJointDataPB);
LABEL_183:
    v379 = v549;
    goto LABEL_191;
  }
  v501 = v602;
  outlined init with take of Matrix2dPB(v500, v602, type metadata accessor for PosePerJointDataPB);
  v502 = v545;
  v503 = specialized static JointTransformPB.== infix(_:_:)(v545, v501, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v501, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v544, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v502, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v549, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v503 & 1) == 0)
  {
LABEL_16:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_185:
  v504 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1;
  swift_beginAccess();
  v505 = v547;
  outlined init with copy of (Int32, Matrix2dPB)(v504, v547, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v506 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__a1;
  swift_beginAccess();
  v507 = v552;
  v508 = v552 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v505, v552, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v506, v508, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v507, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v547, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v508, 1, v367) == 1)
    {
      outlined destroy of Coordinate3DPB?(v552, &demangling cache variable for type metadata for PosePerJointDataPB?);
      goto LABEL_194;
    }
    goto LABEL_190;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v552, v548, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v508, 1, v367) == 1)
  {
    outlined destroy of Coordinate3DPB?(v547, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v548, type metadata accessor for PosePerJointDataPB);
LABEL_190:
    v379 = v552;
    goto LABEL_191;
  }
  v509 = v602;
  outlined init with take of Matrix2dPB(v508, v602, type metadata accessor for PosePerJointDataPB);
  v510 = v548;
  v511 = specialized static JointTransformPB.== infix(_:_:)(v548, v509, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
  outlined destroy of Matrix3x3PB(v509, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v547, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined destroy of Matrix3x3PB(v510, type metadata accessor for PosePerJointDataPB);
  outlined destroy of Coordinate3DPB?(v552, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if ((v511 & 1) == 0)
    goto LABEL_16;
LABEL_194:
  v512 = v366 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1T1;
  swift_beginAccess();
  v513 = v550;
  outlined init with copy of (Int32, Matrix2dPB)(v512, v550, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v514 = v369 + OBJC_IVAR____TtCV5Hands16PoseJointsDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__i1T1;
  swift_beginAccess();
  v515 = v553;
  v516 = v553 + *(int *)(v603 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v513, v553, &demangling cache variable for type metadata for PosePerJointDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v514, v516, &demangling cache variable for type metadata for PosePerJointDataPB?);
  v517 = v515;
  if (v368(v515, 1, v367) != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v515, v551, &demangling cache variable for type metadata for PosePerJointDataPB?);
    if (v368(v516, 1, v367) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of Coordinate3DPB?(v550, &demangling cache variable for type metadata for PosePerJointDataPB?);
      outlined destroy of Matrix3x3PB(v551, type metadata accessor for PosePerJointDataPB);
      goto LABEL_199;
    }
    v518 = v602;
    outlined init with take of Matrix2dPB(v516, v602, type metadata accessor for PosePerJointDataPB);
    v519 = v551;
    v520 = specialized static JointTransformPB.== infix(_:_:)(v551, v518, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PosePerJointDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PosePerJointDataPB.== infix(_:_:));
    swift_release();
    swift_release();
    outlined destroy of Matrix3x3PB(v518, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v550, &demangling cache variable for type metadata for PosePerJointDataPB?);
    outlined destroy of Matrix3x3PB(v519, type metadata accessor for PosePerJointDataPB);
    outlined destroy of Coordinate3DPB?(v517, &demangling cache variable for type metadata for PosePerJointDataPB?);
    return (v520 & 1) != 0;
  }
  swift_release();
  swift_release();
  outlined destroy of Coordinate3DPB?(v550, &demangling cache variable for type metadata for PosePerJointDataPB?);
  if (v368(v516, 1, v367) != 1)
  {
LABEL_199:
    outlined destroy of Coordinate3DPB?(v515, &demangling cache variable for type metadata for (PosePerJointDataPB?, PosePerJointDataPB?));
    return 0;
  }
  outlined destroy of Coordinate3DPB?(v515, &demangling cache variable for type metadata for PosePerJointDataPB?);
  return 1;
}

uint64_t protocol witness for Message.init() in conformance PoseJointsDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance JointTransformPB(a1, &one-time initialization token for defaultInstance, &static PoseJointsDataPB._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PoseJointsDataPB()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PoseJointsDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PoseJointsDataPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PoseJointsDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JointTransformPB.traverse<A>(visitor:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PoseJointsDataPB, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PoseJointsDataPB.traverse<A>(visitor:));
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PoseJointsDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB, type metadata accessor for PoseJointsDataPB, (uint64_t)&protocol conformance descriptor for PoseJointsDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PoseJointsDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PoseJointsDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PoseJointsDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB, type metadata accessor for PoseJointsDataPB, (uint64_t)&protocol conformance descriptor for PoseJointsDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseJointsDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB, type metadata accessor for PoseJointsDataPB, (uint64_t)&protocol conformance descriptor for PoseJointsDataPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in PoseJointsDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB, type metadata accessor for PoseJointsDataPB, (uint64_t)&protocol conformance descriptor for PoseJointsDataPB);
}

uint64_t base witness table accessor for Message in PoseJointsDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB, type metadata accessor for PoseJointsDataPB, (uint64_t)&protocol conformance descriptor for PoseJointsDataPB);
}

uint64_t base witness table accessor for Hashable in PoseJointsDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB, type metadata accessor for PoseJointsDataPB, (uint64_t)&protocol conformance descriptor for PoseJointsDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PoseJointsDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB, type metadata accessor for PoseJointsDataPB, (uint64_t)&protocol conformance descriptor for PoseJointsDataPB);
}

uint64_t base witness table accessor for Equatable in PosePerJointDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
}

uint64_t base witness table accessor for Message in PosePerJointDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
}

uint64_t base witness table accessor for Hashable in PosePerJointDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PosePerJointDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PosePerJointDataPB and conformance PosePerJointDataPB, type metadata accessor for PosePerJointDataPB, (uint64_t)&protocol conformance descriptor for PosePerJointDataPB);
}

uint64_t base witness table accessor for Equatable in Orientation3DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
}

uint64_t base witness table accessor for Message in Orientation3DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
}

uint64_t base witness table accessor for Hashable in Orientation3DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Orientation3DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Orientation3DPB and conformance Orientation3DPB, type metadata accessor for Orientation3DPB, (uint64_t)&protocol conformance descriptor for Orientation3DPB);
}

uint64_t specialized static Orientation3DPB.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    v13 = type metadata accessor for Orientation3DPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 28), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PoseJointsDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static JointTransformPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, __n128))type metadata accessor for PoseJointsDataPB, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PoseJointsDataPB.== infix(_:_:));
}

uint64_t specialized PosePerJointDataPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v82 = (uint64_t)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v79 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Orientation3DPB?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v74 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  v64 = (_QWORD *)(v1 + 32);
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = 0;
  v65 = (_QWORD *)(v1 + 48);
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  v66 = (_QWORD *)(v1 + 64);
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = 0;
  v67 = (_QWORD *)(v1 + 80);
  *(_BYTE *)(v1 + 88) = 1;
  *(_QWORD *)(v1 + 96) = 0;
  v68 = (_QWORD *)(v1 + 96);
  *(_BYTE *)(v1 + 104) = 1;
  *(_QWORD *)(v1 + 112) = 0;
  v69 = (_QWORD *)(v1 + 112);
  *(_BYTE *)(v1 + 120) = 1;
  *(_QWORD *)(v1 + 128) = 0;
  v70 = (_QWORD *)(v1 + 128);
  *(_BYTE *)(v1 + 136) = 1;
  *(_QWORD *)(v1 + 144) = 0;
  v71 = (_QWORD *)(v1 + 144);
  v12 = v1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError;
  v72 = v1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError;
  *(_BYTE *)(v1 + 152) = 1;
  v13 = type metadata accessor for Orientation3DPB(0);
  v14 = *(void (**)(void))(*(_QWORD *)(v13 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  v15 = v1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointQuaternionError;
  v73 = v1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointQuaternionError;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D;
  v75 = v1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D;
  v17 = type metadata accessor for Coordinate3DPB(0);
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v16, 1, 1, v17);
  v76 = v1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D;
  v18();
  v77 = v1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered;
  v18();
  v78 = v1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler;
  v14();
  v80 = v1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler;
  v14();
  v19 = v1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform;
  v20 = type metadata accessor for TransformMatrixPB(0);
  v21 = *(void (**)(void))(*(_QWORD *)(v20 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21)(v19, 1, 1, v20);
  v81 = v1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform;
  v21();
  v22 = v1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__unifiedConfidence;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  swift_beginAccess();
  v23 = *(_QWORD *)(a1 + 16);
  LOBYTE(v21) = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v23;
  *(_BYTE *)(v1 + 24) = (_BYTE)v21;
  swift_beginAccess();
  v24 = *(_QWORD *)(a1 + 32);
  LOBYTE(v23) = *(_BYTE *)(a1 + 40);
  v25 = v64;
  swift_beginAccess();
  *v25 = v24;
  *(_BYTE *)(v1 + 40) = v23;
  swift_beginAccess();
  v26 = *(_QWORD *)(a1 + 48);
  LOBYTE(v25) = *(_BYTE *)(a1 + 56);
  v27 = v65;
  swift_beginAccess();
  *v27 = v26;
  *(_BYTE *)(v1 + 56) = (_BYTE)v25;
  swift_beginAccess();
  v28 = *(_QWORD *)(a1 + 64);
  LOBYTE(v25) = *(_BYTE *)(a1 + 72);
  v29 = v66;
  swift_beginAccess();
  *v29 = v28;
  *(_BYTE *)(v1 + 72) = (_BYTE)v25;
  swift_beginAccess();
  v30 = *(_QWORD *)(a1 + 80);
  LOBYTE(v25) = *(_BYTE *)(a1 + 88);
  v31 = v67;
  swift_beginAccess();
  *v31 = v30;
  *(_BYTE *)(v1 + 88) = (_BYTE)v25;
  swift_beginAccess();
  v32 = *(_QWORD *)(a1 + 96);
  LOBYTE(v25) = *(_BYTE *)(a1 + 104);
  v33 = v68;
  swift_beginAccess();
  *v33 = v32;
  *(_BYTE *)(v1 + 104) = (_BYTE)v25;
  swift_beginAccess();
  v34 = *(_QWORD *)(a1 + 112);
  LOBYTE(v25) = *(_BYTE *)(a1 + 120);
  v35 = v69;
  swift_beginAccess();
  *v35 = v34;
  *(_BYTE *)(v1 + 120) = (_BYTE)v25;
  swift_beginAccess();
  v36 = *(_QWORD *)(a1 + 128);
  LOBYTE(v25) = *(_BYTE *)(a1 + 136);
  v37 = v70;
  swift_beginAccess();
  *v37 = v36;
  *(_BYTE *)(v1 + 136) = (_BYTE)v25;
  swift_beginAccess();
  v38 = *(_QWORD *)(a1 + 144);
  LOBYTE(v25) = *(_BYTE *)(a1 + 152);
  v39 = v71;
  swift_beginAccess();
  *v39 = v38;
  *(_BYTE *)(v1 + 152) = (_BYTE)v25;
  v40 = a1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointRotationError;
  swift_beginAccess();
  v41 = v74;
  outlined init with copy of (Int32, Matrix2dPB)(v40, v74, &demangling cache variable for type metadata for Orientation3DPB?);
  v42 = v72;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v41, v42, &demangling cache variable for type metadata for Orientation3DPB?);
  swift_endAccess();
  v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__jointQuaternionError);
  swift_beginAccess();
  v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  v45 = v73;
  swift_beginAccess();
  *(_QWORD *)v45 = v44;
  *(_BYTE *)(v45 + 8) = (_BYTE)v43;
  v46 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtPose3D;
  swift_beginAccess();
  v47 = v79;
  outlined init with copy of (Int32, Matrix2dPB)(v46, v79, &demangling cache variable for type metadata for Coordinate3DPB?);
  v48 = v75;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v47, v48, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v49 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3D;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v49, v47, &demangling cache variable for type metadata for Coordinate3DPB?);
  v50 = v76;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v47, v50, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v51 = a1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtPose3DFiltered;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v51, v47, &demangling cache variable for type metadata for Coordinate3DPB?);
  v52 = v77;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v47, v52, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v53 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtEuler;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v53, v41, &demangling cache variable for type metadata for Orientation3DPB?);
  v54 = v78;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v41, v54, &demangling cache variable for type metadata for Orientation3DPB?);
  swift_endAccess();
  v55 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtEuler;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v55, v41, &demangling cache variable for type metadata for Orientation3DPB?);
  v56 = v80;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v41, v56, &demangling cache variable for type metadata for Orientation3DPB?);
  swift_endAccess();
  v57 = a1 + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__gtTransform;
  swift_beginAccess();
  v58 = v82;
  outlined init with copy of (Int32, Matrix2dPB)(v57, v82, &demangling cache variable for type metadata for TransformMatrixPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v58, v19, &demangling cache variable for type metadata for TransformMatrixPB?);
  swift_endAccess();
  v59 = a1
      + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__dtRawTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v59, v58, &demangling cache variable for type metadata for TransformMatrixPB?);
  v60 = v81;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v58, v60, &demangling cache variable for type metadata for TransformMatrixPB?);
  swift_endAccess();
  v61 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands18PosePerJointDataPBP33_2E35C29B5B16CD38AFA4AC28B18047AD13_StorageClass__unifiedConfidence);
  swift_beginAccess();
  v62 = *v61;
  LOBYTE(v61) = *((_BYTE *)v61 + 8);
  swift_beginAccess();
  *(_QWORD *)v22 = v62;
  *(_BYTE *)(v22 + 8) = (_BYTE)v61;
  return v1;
}

uint64_t closure #2 in static PoseScheduler.generatePoseSpec(handsData:images:config:trackingInfos:pipeline:)@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t **a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44[4];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v43 = a6;
  v40 = type metadata accessor for HandCameraTransitionEvent(0);
  MEMORY[0x24BDAC7A8](v40, v13);
  v41 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for HandDescriptor();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15, v17);
  v19 = (uint64_t *)((char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = a5;
  static PoseScheduler.generatePoseSpec(hand:images:config:trackingInfos:handsData:pipeline:)(a1, a2, a3, a4, (uint64_t *)&v45);
  v20 = v45;
  if (!(_QWORD)v45)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a7, 1, 1, v15);
  v42 = v15;
  v21 = *((_QWORD *)&v45 + 1);
  outlined init with copy of TrackingUpdateDataPB((uint64_t)a1, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v22 = v19[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of HandPose?(v22);
  v19[25] = v20;
  v19[26] = v21;
  v23 = *v43;
  v24 = (*v43)[2];
  v25 = v16;
  if (!v24)
    goto LABEL_16;
  v26 = (uint64_t *)v43;
  v27 = 0;
  v28 = 0;
  while (v23[v27 + 6] != v19[18])
  {
    ++v28;
    v27 += 40;
    if (v24 == v28)
      goto LABEL_16;
  }
  if (v28 >= v24)
  {
    __break(1u);
LABEL_19:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v16);
    v16 = result;
    *v23 = result;
    goto LABEL_14;
  }
  v30 = v23[v27 + 22];
  if (*(_QWORD *)(v30 + 16))
  {
    result = specialized static Array<A>.== infix(_:_:)(v30, v20);
    v26 = (uint64_t *)v43;
    if ((result & 1) == 0)
    {
      if (v28 >= v23[2])
      {
LABEL_21:
        __break(1u);
        return result;
      }
      v31 = v39[45];
      v32 = v39[43];
      v37 = v39[44];
      v38 = v31;
      v33 = v23[v27 + 22];
      swift_bridgeObjectRetain();
      v34 = v41;
      static HandCameraTransitionEvent.generateTransitionEvent(hand:timestamp:prevCams:curCams:)((uint64_t)v19, v32, v37, v33, v20, v41);
      swift_bridgeObjectRelease();
      v45 = xmmword_23D9AB690;
      v46 = 0;
      v47 = 0;
      v44[3] = v40;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v44);
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v34, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandCameraTransitionEvent);
      specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000006BLL, 0x800000023D9D3FB0, 41, (uint64_t *)&v45, (uint64_t)v44, MEMORY[0x24BEE4AF8]);
      outlined destroy of Matrix3x3PB((uint64_t)v34, type metadata accessor for HandCameraTransitionEvent);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v44);
      v26 = (uint64_t *)v43;
    }
  }
  v16 = *v26;
  v23 = v26;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *v23 = v16;
  if ((result & 1) == 0)
    goto LABEL_19;
LABEL_14:
  if (v28 >= *(_QWORD *)(v16 + 16))
  {
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)(v16 + v27 * 8 + 176) = v20;
  swift_bridgeObjectRelease();
LABEL_16:
  outlined consume of HandPose?(v20);
  outlined init with copy of TrackingUpdateDataPB((uint64_t)v19, a7, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(a7, 0, 1, v42);
  return outlined destroy of Matrix3x3PB((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
}

void static PoseScheduler.generatePoseSpec(hand:images:config:trackingInfos:handsData:pipeline:)(float32x4_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int8 v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1[12].i8[0] & 1) != 0)
    goto LABEL_12;
  v14 = a1[11].i64[0];
  v15 = a1[11].i64[1];
  v28 = a1[10];
  v29 = v14;
  v30 = v15;
  v16 = static SchedulerUtils.createEstimatedBoundingBox(handCenter:handRadius:images:)(&v28, a2, a1->f32[0]);
  if (*(_QWORD *)(v16 + 16) != 1)
  {
    v19 = *(_QWORD *)(a4 + 16);
    if (v19)
    {
      v20 = (uint64_t *)(a4 + 176);
      while (*(v20 - 16) != a1[9].i64[0])
      {
        v20 += 40;
        if (!--v19)
          goto LABEL_8;
      }
      v21 = *v20;
      swift_bridgeObjectRetain();
    }
    else
    {
LABEL_8:
      v21 = 0;
    }
    v22 = specialized static SchedulerUtils.groupBoundingBoxByStereoPair(bbox:pipeline:)(v16);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v23 = type metadata accessor for HandDescriptor();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 0, 1, v23);
    static SchedulerUtils.pickBestCameraPair(bboxPairs:config:timestamp:hand:poseCameras:)((uint64_t)v22, a3, v21, (uint64_t)&v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of HandDescriptor?((uint64_t)v13);
    if ((v30 & 0x100) == 0)
    {
      v24 = v30;
      v25 = v29;
      v26 = v28.i8[8];
      v27 = v28.i64[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
      v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_23D9A7050;
      *(_QWORD *)(v17 + 32) = v27;
      *(_BYTE *)(v17 + 40) = v26 & 1;
      *(_QWORD *)(v17 + 48) = v25;
      *(_BYTE *)(v17 + 56) = v24 & 1;
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
LABEL_12:
    *a5 = 0;
    a5[1] = 0;
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_23D9A70A0;
  v18 = *(_BYTE *)(v16 + 56);
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v16 + 48);
  *(_BYTE *)(v17 + 40) = v18;
LABEL_14:
  *a5 = v17;
  a5[1] = v16;
}

uint64_t type metadata completion function for Hungarian.Algorithm()
{
  return swift_initClassMetadata2();
}

uint64_t Hungarian.Algorithm.State.init(rawValue:)(char a1)
{
  if ((a1 + 1) >= 3u)
    return 3;
  else
    return (a1 + 1);
}

uint64_t Hungarian.Algorithm.State.rawValue.getter(int a1)
{
  return (a1 - 1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Hungarian<A>.Algorithm.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x242638C74](&protocol conformance descriptor for Hungarian<A>.Algorithm.State, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Hungarian<A>.Algorithm.State(uint64_t a1)
{
  MEMORY[0x242638C74](&protocol conformance descriptor for Hungarian<A>.Algorithm.State, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Hungarian<A>.Algorithm.State()
{
  MEMORY[0x242638C74](&protocol conformance descriptor for Hungarian<A>.Algorithm.State);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Hungarian<A>.Algorithm.State()
{
  MEMORY[0x242638C74](&protocol conformance descriptor for Hungarian<A>.Algorithm.State);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Hungarian<A>.Algorithm.State@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Hungarian.Algorithm.State.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Hungarian<A>.Algorithm.State@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = Hungarian.Algorithm.State.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t Hungarian.Algorithm.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Hungarian.Algorithm.__deallocating_deinit()
{
  Hungarian.Algorithm.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Hungarian.Algorithm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Hungarian.Algorithm);
}

uint64_t type metadata instantiation function for Hungarian.Algorithm.Element()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Hungarian.Algorithm.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Hungarian.Algorithm.Element);
}

uint64_t type metadata instantiation function for Hungarian()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Hungarian(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Hungarian);
}

uint64_t storeEnumTagSinglePayload for Hungarian.Algorithm.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23D871348 + 4 * byte_23D9B7EC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23D87137C + 4 * byte_23D9B7EC0[v4]))();
}

uint64_t sub_23D87137C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D871384(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D87138CLL);
  return result;
}

uint64_t sub_23D871398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D8713A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23D8713A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D8713AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for Hungarian.Algorithm.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Hungarian.Algorithm.State);
}

void base witness table accessor for Equatable in Hungarian<A>.Algorithm.State()
{
  JUMPOUT(0x242638C74);
}

uint64_t destroy for ObjectInteractionResultsByHand()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ObjectInteractionResultsByHand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ObjectInteractionResultsByHand(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ObjectInteractionResultsByHand(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ObjectInteractionResultsByHand()
{
  return &type metadata for ObjectInteractionResultsByHand;
}

ValueMetadata *type metadata accessor for ObjectInteractionResultsByHand.HandIdentifier()
{
  return &type metadata for ObjectInteractionResultsByHand.HandIdentifier;
}

unint64_t ObjectInteractionResultsByHand.getObjectInteractionInfo(forHand:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_QWORD *)(result + 144);
  v6 = *(unsigned __int8 *)(result + 136);
  if (*(_QWORD *)(v4 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(result + 144), v6);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v4 + 56) + 80 * result;
      v9 = *(_OWORD *)v8;
      v10 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 32);
      v12 = *(_QWORD *)(v8 + 40);
      v13 = *(_QWORD *)(v8 + 48);
      v14 = *(unsigned __int8 *)(v8 + 68);
      v15 = *(unsigned __int8 *)(v8 + 69);
      v16 = *(unsigned int *)(v8 + 64);
      v17 = *(unsigned __int8 *)(v8 + 56) | ((unint64_t)*(unsigned int *)(v8 + 60) << 32);
      v18 = 0x100000000;
      if (!v14)
        v18 = 0;
      v19 = v18 | v16;
      v20 = 0x10000000000;
      if (!v15)
        v20 = 0;
      v21 = v19 | v20;
LABEL_55:
      *(_OWORD *)a2 = v9;
      *(_QWORD *)(a2 + 16) = v10;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = v11;
      *(_QWORD *)(a2 + 40) = v12;
      *(_QWORD *)(a2 + 48) = v13;
      *(_QWORD *)(a2 + 56) = v17;
      *(_DWORD *)(a2 + 64) = v21;
      *(_WORD *)(a2 + 68) = WORD2(v21);
      return result;
    }
  }
  v22 = 0;
  v23 = v4 + 64;
  v24 = 1 << *(_BYTE *)(v4 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(v4 + 64);
  v27 = (unint64_t)(v24 + 63) >> 6;
  while (v26)
  {
    v28 = __clz(__rbit64(v26));
    v26 &= v26 - 1;
    v29 = v28 | (v22 << 6);
LABEL_12:
    if (*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v29) == v5)
    {
LABEL_48:
      v42 = *(_QWORD *)(v4 + 56) + 80 * v29;
      v43 = *(unsigned __int8 *)(v42 + 69);
      v44 = *(unsigned __int8 *)(v42 + 68);
      v12 = *(_QWORD *)(v42 + 40);
      v13 = *(_QWORD *)(v42 + 48);
      v11 = *(_QWORD *)(v42 + 32);
      v10 = *(_QWORD *)(v42 + 16);
      v9 = *(_OWORD *)v42;
      v45 = *(unsigned int *)(v42 + 64);
      v17 = *(unsigned __int8 *)(v42 + 56) | ((unint64_t)*(unsigned int *)(v42 + 60) << 32);
      v46 = v44 == 0;
      v47 = 0x100000000;
      if (v46)
        v47 = 0;
      v46 = v43 == 0;
      v48 = 0x10000000000;
      if (v46)
        v48 = 0;
      v21 = v47 | v48 | v45;
      goto LABEL_55;
    }
  }
  v30 = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v30 >= v27)
    goto LABEL_28;
  v31 = *(_QWORD *)(v23 + 8 * v30);
  ++v22;
  if (v31)
    goto LABEL_27;
  v22 = v30 + 1;
  if (v30 + 1 >= v27)
    goto LABEL_28;
  v31 = *(_QWORD *)(v23 + 8 * v22);
  if (v31)
    goto LABEL_27;
  v22 = v30 + 2;
  if (v30 + 2 >= v27)
    goto LABEL_28;
  v31 = *(_QWORD *)(v23 + 8 * v22);
  if (v31)
  {
LABEL_27:
    v26 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v22 << 6);
    goto LABEL_12;
  }
  v32 = v30 + 3;
  if (v32 < v27)
  {
    v31 = *(_QWORD *)(v23 + 8 * v32);
    if (!v31)
    {
      while (1)
      {
        v22 = v32 + 1;
        if (__OFADD__(v32, 1))
          break;
        if (v22 >= v27)
          goto LABEL_28;
        v31 = *(_QWORD *)(v23 + 8 * v22);
        ++v32;
        if (v31)
          goto LABEL_27;
      }
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v22 = v32;
    goto LABEL_27;
  }
LABEL_28:
  v33 = 0;
  v34 = 1 << *(_BYTE *)(v4 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & *(_QWORD *)(v4 + 64);
  v37 = (unint64_t)(v34 + 63) >> 6;
  v9 = 0uLL;
  while (v36)
  {
    v38 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    v29 = v38 | (v33 << 6);
LABEL_32:
    if (v6 == *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + 16 * v29 + 8))
      goto LABEL_48;
  }
  v39 = v33 + 1;
  if (__OFADD__(v33, 1))
    goto LABEL_58;
  if (v39 >= v37)
  {
LABEL_56:
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v17 = 0;
    v21 = 0x200000000;
    goto LABEL_55;
  }
  v40 = *(_QWORD *)(v23 + 8 * v39);
  ++v33;
  if (v40)
    goto LABEL_47;
  v33 = v39 + 1;
  if (v39 + 1 >= v37)
    goto LABEL_56;
  v40 = *(_QWORD *)(v23 + 8 * v33);
  if (v40)
    goto LABEL_47;
  v33 = v39 + 2;
  if (v39 + 2 >= v37)
    goto LABEL_56;
  v40 = *(_QWORD *)(v23 + 8 * v33);
  if (v40)
  {
LABEL_47:
    v36 = (v40 - 1) & v40;
    v29 = __clz(__rbit64(v40)) + (v33 << 6);
    goto LABEL_32;
  }
  v41 = v39 + 3;
  if (v41 >= v37)
    goto LABEL_56;
  v40 = *(_QWORD *)(v23 + 8 * v41);
  if (v40)
  {
    v33 = v41;
    goto LABEL_47;
  }
  while (1)
  {
    v33 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v33 >= v37)
      goto LABEL_56;
    v40 = *(_QWORD *)(v23 + 8 * v33);
    ++v41;
    if (v40)
      goto LABEL_47;
  }
LABEL_60:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type ObjectInteractionResultsByHand.HandIdentifier and conformance ObjectInteractionResultsByHand.HandIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionResultsByHand.HandIdentifier and conformance ObjectInteractionResultsByHand.HandIdentifier;
  if (!lazy protocol witness table cache variable for type ObjectInteractionResultsByHand.HandIdentifier and conformance ObjectInteractionResultsByHand.HandIdentifier)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionResultsByHand.HandIdentifier, &type metadata for ObjectInteractionResultsByHand.HandIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionResultsByHand.HandIdentifier and conformance ObjectInteractionResultsByHand.HandIdentifier);
  }
  return result;
}

Swift::Void __swiftcall OISSignalStatistics.sendCoreAnalytics()()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  _QWORD v4[6];

  v1 = (void *)MEMORY[0x2426372E8](0xD00000000000002ELL, 0x800000023D9D40E0);
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = v0;
  v2[3] = 0xD00000000000002ELL;
  v2[4] = 0x800000023D9D40E0;
  v4[4] = partial apply for closure #1 in OISSignalStatistics.sendCoreAnalytics();
  v4[5] = v2;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v4[3] = &block_descriptor_15;
  v3 = _Block_copy(v4);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v3);

}

unint64_t closure #1 in OISSignalStatistics.sendCoreAnalytics()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A8140;
  *(_QWORD *)(inited + 32) = 0x7466656C5F7369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000015;
  *(_QWORD *)(inited + 64) = 0x800000023D9D4110;
  v7 = (double *)(a1 + OBJC_IVAR____TtC5Hands16SignalStatistics_duration);
  v8 = swift_beginAccess();
  *(_QWORD *)(inited + 72) = MEMORY[0x2426375B8](v8, *v7);
  *(_QWORD *)(inited + 80) = 0xD000000000000013;
  *(_QWORD *)(inited + 88) = 0x800000023D9D4130;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000012;
  *(_QWORD *)(inited + 112) = 0x800000023D9D4150;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0xD000000000000017;
  *(_QWORD *)(inited + 136) = 0x800000023D9D4170;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  v9 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v15 = xmmword_23D9A8B80;
  v16 = 0;
  v17 = 0;
  v14[0] = a2;
  v14[1] = a3;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  type metadata accessor for NSObject();
  v11 = MEMORY[0x24BEE0D00];
  v12._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v14[3] = v11;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9D4190, 27, (uint64_t *)&v15, (uint64_t)v14, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  return v9;
}

uint64_t OISSignalStatistics.isSignalActiveFor(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v9);
  v10 = type metadata accessor for DerivedHandAttributes(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v9, &demangling cache variable for type metadata for DerivedHandAttributes?);
    return 0;
  }
  else
  {
    outlined init with copy of HandDescriptor((uint64_t)v9, (uint64_t)v5);
    outlined destroy of Matrix3x3PB((uint64_t)v9, type metadata accessor for DerivedHandAttributes);
    v11 = v5[*(int *)(v2 + 152) + 51];
    outlined destroy of Matrix3x3PB((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  return v11;
}

uint64_t OISSignalStatistics.signalUpdate(_:handHistory:data:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, unint64_t a4, const void *a5)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  uint64_t result;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  unint64_t v42;
  _BYTE v43[560];

  v41 = a3;
  v42 = a4;
  v9 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v41 - v19;
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v41 - v23;
  memcpy(v43, a5, 0x228uLL);
  v25 = v42;
  v42 = v5;
  SignalStatistics.signalUpdate(_:handHistory:data:)(a1, a2, v41, v25, v43);
  v26 = a1;
  outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v24);
  v27 = type metadata accessor for DerivedHandAttributes(0);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
  if (v28(v24, 1, v27) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for DerivedHandAttributes?);
    v29 = v26;
  }
  else
  {
    outlined init with copy of HandDescriptor((uint64_t)v24, (uint64_t)v12);
    outlined destroy of Matrix3x3PB((uint64_t)v24, type metadata accessor for DerivedHandAttributes);
    v30 = v12[*(int *)(v9 + 152) + 50];
    result = outlined destroy of Matrix3x3PB((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v29 = v26;
    if (v30 == 1)
    {
      v32 = *(_QWORD *)(v42 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_pinchRejectionCounter);
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
      {
        __break(1u);
        goto LABEL_18;
      }
      *(_QWORD *)(v42 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_pinchRejectionCounter) = v34;
    }
  }
  outlined init with copy of DerivedHandAttributes?(v29, (uint64_t)v20);
  if (v28(v20, 1, v27) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v20, &demangling cache variable for type metadata for DerivedHandAttributes?);
    goto LABEL_11;
  }
  outlined init with copy of HandDescriptor((uint64_t)v20, (uint64_t)v12);
  outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for DerivedHandAttributes);
  v35 = v12[*(int *)(v9 + 152) + 3];
  result = outlined destroy of Matrix3x3PB((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v35 == 1)
  {
    v36 = *(_QWORD *)(v42 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_suppressedFramesCounter);
    v33 = __OFADD__(v36, 1);
    v37 = v36 + 1;
    if (!v33)
    {
      *(_QWORD *)(v42 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_suppressedFramesCounter) = v37;
      goto LABEL_11;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_11:
  outlined init with copy of DerivedHandAttributes?(v29, (uint64_t)v16);
  if (v28(v16, 1, v27) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for DerivedHandAttributes?);
  outlined init with copy of HandDescriptor((uint64_t)v16, (uint64_t)v12);
  outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for DerivedHandAttributes);
  v38 = v12[*(int *)(v9 + 152) + 52];
  result = outlined destroy of Matrix3x3PB((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v38 == 1)
  {
    v39 = *(_QWORD *)(v42 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_handToMouthCounter);
    v33 = __OFADD__(v39, 1);
    v40 = v39 + 1;
    if (!v33)
    {
      *(_QWORD *)(v42 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_handToMouthCounter) = v40;
      return result;
    }
LABEL_19:
    __break(1u);
  }
  return result;
}

uint64_t OISSignalStatistics.aggregate(with:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  SignalStatistics.aggregate(with:)(a1);
  type metadata accessor for OISSignalStatistics();
  result = swift_dynamicCastClass();
  if (result)
  {
    v3 = *(_QWORD *)(result + OBJC_IVAR____TtC5Hands19OISSignalStatistics_pinchRejectionCounter);
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_pinchRejectionCounter);
    v5 = __OFADD__(v4, v3);
    v6 = v4 + v3;
    if (v5)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_pinchRejectionCounter) = v6;
      v7 = *(_QWORD *)(result + OBJC_IVAR____TtC5Hands19OISSignalStatistics_suppressedFramesCounter);
      v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_suppressedFramesCounter);
      v5 = __OFADD__(v8, v7);
      v9 = v8 + v7;
      if (!v5)
      {
        *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_suppressedFramesCounter) = v9;
        v10 = *(_QWORD *)(result + OBJC_IVAR____TtC5Hands19OISSignalStatistics_handToMouthCounter);
        v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_handToMouthCounter);
        v5 = __OFADD__(v11, v10);
        v12 = v11 + v10;
        if (!v5)
        {
          *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_handToMouthCounter) = v12;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t OISSignalStatistics.__allocating_init(is_left:signal:)(char a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_handToMouthCounter) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_pinchRejectionCounter) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_suppressedFramesCounter) = 0;
  return SignalStatistics.init(is_left:signal:)(a1, a2);
}

uint64_t OISSignalStatistics.__allocating_init(fromPrev:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_handToMouthCounter) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_pinchRejectionCounter) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC5Hands19OISSignalStatistics_suppressedFramesCounter) = 0;
  v3 = specialized SignalStatistics.init(fromPrev:)(a1);
  swift_release();
  return v3;
}

uint64_t ObjC metadata update function for OISSignalStatistics()
{
  return type metadata accessor for OISSignalStatistics();
}

uint64_t type metadata accessor for OISSignalStatistics()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OISSignalStatistics;
  if (!type metadata singleton initialization cache for OISSignalStatistics)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for OISSignalStatistics()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_23D8721C8()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in OISSignalStatistics.sendCoreAnalytics()()
{
  uint64_t *v0;

  return closure #1 in OISSignalStatistics.sendCoreAnalytics()(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

BOOL SlidingPinch.process(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  if (SlidingPinch.checkIfAccidental(_:_:)(a1, a2) == 7)
  {
    v3 = *(_QWORD *)(v2 + 16);
    v4 = __OFADD__(v3, 1);
    v5 = v3 + 1;
    if (!v4)
      goto LABEL_6;
    __break(1u);
  }
  v5 = 0;
LABEL_6:
  *(_QWORD *)(v2 + 16) = v5;
  return v5 >= *(_QWORD *)(v2 + 64);
}

uint64_t SlidingPinch.checkIfAccidental(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;

  v5 = *(unsigned __int8 *)(a1 + 112);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  *(_QWORD *)(inited + 32) = *(_QWORD *)(a1 + 96);
  v7 = specialized Sequence<>.max()(inited);
  swift_setDeallocating();
  if ((v7 & 0x100000000) != 0)
    return 0;
  if ((*(_BYTE *)(a2 + 25) & 1) != 0)
    return 2;
  if (*(float *)(v2 + 40) <= *(float *)&v7)
    return 1;
  if (*(_QWORD *)(a2 + 16) >= *(_QWORD *)(v2 + 48))
    __asm { BR              X9 }
  return 3;
}

void sub_23D872358()
{
  float32x2_t *v0;
  uint64_t v1;
  char v2;
  float32x4_t v3;
  float32x4_t v4;
  unint64_t v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  _QWORD *v14;
  float32x4_t v15;
  double v16;
  float32x4_t v17;
  double v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
LABEL_21:
    JUMPOUT(0x23D87230CLL);
  v5 = (unint64_t)v0[2];
  if (v5 < 4)
  {
    __break(1u);
  }
  else
  {
    v6 = v0[11].f32[0];
    *(float32x2_t *)v3.f32 = v0[10];
    *(float32x2_t *)v4.f32 = vsub_f32(*(float32x2_t *)v3.f32, v0[8]);
    v4.f32[2] = v6 - v0[9].f32[0];
    v7 = vmulq_f32(v4, v4);
    v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1);
    *(float32x2_t *)v3.f32 = vsub_f32(*(float32x2_t *)v3.f32, v0[6]);
    v3.f32[2] = v6 - v0[7].f32[0];
    v9 = vmulq_f32(v3, v3);
    v10 = vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1));
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, v8)).f32[0]) < sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v10).f32[0]))
      goto LABEL_21;
    if (v5 >= 6)
    {
      v11 = v0[5].f32[0];
      *(float32x2_t *)v10.f32 = v0[4];
      *(float32x2_t *)v8.f32 = vsub_f32(*(float32x2_t *)v10.f32, v0[14]);
      v8.f32[2] = v11 - v0[15].f32[0];
      v12 = vmulq_f32(v8, v8);
      *(float32x2_t *)v10.f32 = vsub_f32(*(float32x2_t *)v10.f32, v0[12]);
      v10.f32[2] = v11 - v0[13].f32[0];
      v13 = vmulq_f32(v10, v10);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]) < sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]))goto LABEL_21;
      v14 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v14[2] = 4;
      v14[4] = 0;
      v14[5] = 0;
      swift_bridgeObjectRelease();
      v20 = specialized static PinchGestureHelper.getPinchJointDistances(_:)((uint64_t)v0, v15, v16, v17, v18, v19);
      v22 = *(_QWORD *)(v1 + 24);
      if (v20 == v22)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      if ((v22 & 0x8000000000000000) == 0)
      {
        if (v22 < *(_QWORD *)(v21 + 16))
        {
          swift_bridgeObjectRelease();
          v23 = *(_QWORD *)(v1 + 24);
          if ((v23 & 0x8000000000000000) == 0)
          {
            if (v23 < *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16))
              goto LABEL_21;
LABEL_19:
            __break(1u);
            JUMPOUT(0x23D872558);
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  __break(1u);
  goto LABEL_16;
}

uint64_t SlidingPinch.updateAtMake(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  float32x4_t v4;
  double v5;
  float32x4_t v6;
  double v7;
  float32x4_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v3[2] = 4;
  v3[4] = 0;
  v3[5] = 0;
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = v3;
  swift_bridgeObjectRelease();
  v1[3] = specialized static PinchGestureHelper.getPinchJointDistances(_:)(v2, v4, v5, v6, v7, v8);
  v1[4] = v9;
  return swift_bridgeObjectRelease();
}

uint64_t SlidingPinch.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SlidingPinch()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SlidingPinch.ThresholdConfig()
{
  return &type metadata for SlidingPinch.ThresholdConfig;
}

ValueMetadata *type metadata accessor for SlidingPinch.InternalStates()
{
  return &type metadata for SlidingPinch.InternalStates;
}

uint64_t protocol witness for PinchCancellationModule.reset() in conformance SlidingPinch()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)*v0;
  v2 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v2[2] = 4;
  v2[4] = 0;
  v2[5] = 0;
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = v2;
  return swift_bridgeObjectRelease();
}

BOOL protocol witness for PinchCancellationModule.process(_:_:) in conformance SlidingPinch(uint64_t a1, uint64_t a2)
{
  return SlidingPinch.process(_:_:)(a1, a2);
}

uint64_t protocol witness for PinchCancellationModule.updateAtMake(_:) in conformance SlidingPinch(uint64_t a1)
{
  return SlidingPinch.updateAtMake(_:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for RawThumbIndexTapFeaturesPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    *(_DWORD *)v14 = *(_DWORD *)v15;
    v14[4] = v15[4];
  }
  return v7;
}

_QWORD *initializeWithCopy for RawThumbIndexTapFeaturesPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  return a1;
}

_QWORD *assignWithCopy for RawThumbIndexTapFeaturesPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[4];
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v13;
  return a1;
}

_QWORD *initializeWithTake for RawThumbIndexTapFeaturesPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v12[4];
  return a1;
}

_QWORD *assignWithTake for RawThumbIndexTapFeaturesPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v12[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for RawThumbIndexTapFeaturesPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8729DC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RawThumbIndexTapFeaturesPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D872A64(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for RawThumbIndexTapFeaturesPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for RawThumbIndexTapFeaturesPB);
}

uint64_t type metadata completion function for RawThumbIndexTapFeaturesPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ThumbIndexTapFeaturesPB(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = &a1[v9];
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v10 = *v11;
      v16 = *(int *)(v12 + 20);
      v17 = &v10[v16];
      v18 = (char *)v11 + v16;
      swift_bridgeObjectRetain();
      v8(v17, v18, v7);
      v19 = *(int *)(v12 + 24);
      v20 = &v10[v19];
      v21 = (char *)v11 + v19;
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for ThumbIndexTapFeaturesPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5 + *(int *)(v6 + 20), v4);
  }
  return result;
}

uint64_t initializeWithCopy for ThumbIndexTapFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v14 = *(int *)(v11 + 20);
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    swift_bridgeObjectRetain();
    v7((uint64_t)v15, (uint64_t)v16, v6);
    v17 = *(int *)(v11 + 24);
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for ThumbIndexTapFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      *v10 = *v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8((uint64_t)v10 + *(int *)(v12 + 20), (uint64_t)v11 + *(int *)(v12 + 20), v6);
      v27 = *(int *)(v12 + 24);
      v28 = (char *)v10 + v27;
      v29 = (char *)v11 + v27;
      v30 = v29[4];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v30;
      return a1;
    }
    outlined destroy of RawThumbIndexTapFeaturesPB((uint64_t)v10);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  *v10 = *v11;
  v17 = *(int *)(v12 + 20);
  v18 = (char *)v10 + v17;
  v19 = (char *)v11 + v17;
  v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  v20(v18, v19, v6);
  v21 = *(int *)(v12 + 24);
  v22 = (char *)v10 + v21;
  v23 = (char *)v11 + v21;
  v24 = v23[4];
  *(_DWORD *)v22 = *(_DWORD *)v23;
  v22[4] = v24;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t outlined destroy of RawThumbIndexTapFeaturesPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for ThumbIndexTapFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
    v14 = *(int *)(v11 + 24);
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for ThumbIndexTapFeaturesPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      *v10 = *v11;
      swift_bridgeObjectRelease();
      v8((uint64_t)v10 + *(int *)(v12 + 20), (uint64_t)v11 + *(int *)(v12 + 20), v6);
      v22 = *(int *)(v12 + 24);
      v23 = (char *)v10 + v22;
      v24 = (char *)v11 + v22;
      *(_DWORD *)v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      return a1;
    }
    outlined destroy of RawThumbIndexTapFeaturesPB((uint64_t)v10);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *v10 = *v11;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v10 + *(int *)(v12 + 20), (char *)v11 + *(int *)(v12 + 20), v6);
  v17 = *(int *)(v12 + 24);
  v18 = (char *)v10 + v17;
  v19 = (char *)v11 + v17;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThumbIndexTapFeaturesPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8732F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ThumbIndexTapFeaturesPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D873374(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ThumbIndexTapFeaturesPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ThumbIndexTapFeaturesPB);
}

void type metadata completion function for ThumbIndexTapFeaturesPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for RawThumbIndexTapFeaturesPB?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for RawThumbIndexTapFeaturesPB?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for RawThumbIndexTapFeaturesPB?)
  {
    type metadata accessor for RawThumbIndexTapFeaturesPB(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  }
}

uint64_t RawThumbIndexTapFeaturesPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t RawThumbIndexTapFeaturesPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in RawThumbIndexTapFeaturesPB.traverse<A>(visitor:)(v0);
    if (!v1)
    {
      type metadata accessor for RawThumbIndexTapFeaturesPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in RawThumbIndexTapFeaturesPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance RawThumbIndexTapFeaturesPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char *v5;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 24);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance RawThumbIndexTapFeaturesPB()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance RawThumbIndexTapFeaturesPB()
{
  return RawThumbIndexTapFeaturesPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance RawThumbIndexTapFeaturesPB()
{
  return RawThumbIndexTapFeaturesPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance RawThumbIndexTapFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance RawThumbIndexTapFeaturesPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RawThumbIndexTapFeaturesPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RawThumbIndexTapFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RawThumbIndexTapFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
  return Message.hash(into:)();
}

uint64_t ThumbIndexTapFeaturesPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in ThumbIndexTapFeaturesPB.decodeMessage<A>(decoder:)();
  }
  return result;
}

uint64_t closure #1 in ThumbIndexTapFeaturesPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ThumbIndexTapFeaturesPB(0);
  type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t ThumbIndexTapFeaturesPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in ThumbIndexTapFeaturesPB.traverse<A>(visitor:)(v0);
  if (!v1)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in ThumbIndexTapFeaturesPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  outlined init with copy of RawThumbIndexTapFeaturesPB?(a1 + *(int *)(v11 + 20), (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v5, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  outlined init with take of RawThumbIndexTapFeaturesPB((uint64_t)v5, (uint64_t)v10);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of RawThumbIndexTapFeaturesPB((uint64_t)v10);
}

uint64_t protocol witness for Message.init() in conformance ThumbIndexTapFeaturesPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ThumbIndexTapFeaturesPB()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ThumbIndexTapFeaturesPB()
{
  return ThumbIndexTapFeaturesPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ThumbIndexTapFeaturesPB()
{
  return ThumbIndexTapFeaturesPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ThumbIndexTapFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB, type metadata accessor for ThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for ThumbIndexTapFeaturesPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ThumbIndexTapFeaturesPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ThumbIndexTapFeaturesPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ThumbIndexTapFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB, type metadata accessor for ThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for ThumbIndexTapFeaturesPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ThumbIndexTapFeaturesPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB, type metadata accessor for ThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for ThumbIndexTapFeaturesPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in ThumbIndexTapFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB, type metadata accessor for ThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for ThumbIndexTapFeaturesPB);
}

uint64_t base witness table accessor for Message in ThumbIndexTapFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB, type metadata accessor for ThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for ThumbIndexTapFeaturesPB);
}

uint64_t base witness table accessor for Hashable in ThumbIndexTapFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB, type metadata accessor for ThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for ThumbIndexTapFeaturesPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ThumbIndexTapFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ThumbIndexTapFeaturesPB and conformance ThumbIndexTapFeaturesPB, type metadata accessor for ThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for ThumbIndexTapFeaturesPB);
}

uint64_t base witness table accessor for Equatable in RawThumbIndexTapFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
}

uint64_t base witness table accessor for Message in RawThumbIndexTapFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
}

uint64_t base witness table accessor for Hashable in RawThumbIndexTapFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in RawThumbIndexTapFeaturesPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RawThumbIndexTapFeaturesPB and conformance RawThumbIndexTapFeaturesPB, type metadata accessor for RawThumbIndexTapFeaturesPB, (uint64_t)&protocol conformance descriptor for RawThumbIndexTapFeaturesPB);
}

uint64_t specialized static RawThumbIndexTapFeaturesPB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  char v17;
  float *v18;
  int v19;
  char v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v25 - v11;
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2))
    goto LABEL_4;
  v13 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v14 = v13;
  v15 = *(int *)(v13 + 24);
  v16 = (float *)((char *)a1 + v15);
  v17 = *((_BYTE *)a1 + v15 + 4);
  v18 = (float *)((char *)a2 + v15);
  v19 = *((unsigned __int8 *)a2 + v15 + 4);
  if ((v17 & 1) == 0)
  {
    if (*v16 != *v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) != 0)
      goto LABEL_4;
LABEL_8:
    v21 = (char *)a1 + *(int *)(v13 + 20);
    v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v22(v12, v21, v4);
    v22(v8, (char *)a2 + *(int *)(v14 + 20), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v8, v4);
    v23(v12, v4);
    return v20 & 1;
  }
  if (v19)
    goto LABEL_8;
LABEL_4:
  v20 = 0;
  return v20 & 1;
}

uint64_t specialized static ThumbIndexTapFeaturesPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t *v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;

  v47 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47, v4);
  v50 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v49 = (char *)&v44 - v8;
  v9 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v45 = (uint64_t *)((char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RawThumbIndexTapFeaturesPB?, RawThumbIndexTapFeaturesPB?));
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (uint64_t *)((char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v44 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v44 - v27;
  v29 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v30 = *(int *)(v29 + 20);
  v46 = a1;
  outlined init with copy of RawThumbIndexTapFeaturesPB?(a1 + v30, (uint64_t)v28);
  v31 = *(int *)(v29 + 20);
  v48 = a2;
  outlined init with copy of RawThumbIndexTapFeaturesPB?(a2 + v31, (uint64_t)v24);
  v32 = (uint64_t)&v16[*(int *)(v13 + 48)];
  outlined init with copy of RawThumbIndexTapFeaturesPB?((uint64_t)v28, (uint64_t)v16);
  outlined init with copy of RawThumbIndexTapFeaturesPB?((uint64_t)v24, v32);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v33((uint64_t)v16, 1, v9) != 1)
  {
    outlined init with copy of RawThumbIndexTapFeaturesPB?((uint64_t)v16, (uint64_t)v20);
    if (v33(v32, 1, v9) != 1)
    {
      v34 = v45;
      outlined init with take of RawThumbIndexTapFeaturesPB(v32, (uint64_t)v45);
      v35 = specialized static RawThumbIndexTapFeaturesPB.== infix(_:_:)(v20, v34);
      outlined destroy of RawThumbIndexTapFeaturesPB((uint64_t)v34);
      outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      outlined destroy of RawThumbIndexTapFeaturesPB((uint64_t)v20);
      outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
      if ((v35 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v41 = 0;
      return v41 & 1;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    outlined destroy of RawThumbIndexTapFeaturesPB((uint64_t)v20);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for (RawThumbIndexTapFeaturesPB?, RawThumbIndexTapFeaturesPB?));
    goto LABEL_9;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  if (v33(v32, 1, v9) != 1)
    goto LABEL_6;
  outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
LABEL_8:
  v36 = v51;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  v38 = v49;
  v39 = v47;
  v37(v49, v46, v47);
  v40 = v50;
  v37(v50, v48, v39);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v39);
  v42(v38, v39);
  return v41 & 1;
}

uint64_t outlined init with take of RawThumbIndexTapFeaturesPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UnsureLabel()
{
  lazy protocol witness table accessor for type UnsureLabel and conformance UnsureLabel();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance UnsureLabel@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static UnsureLabel.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PartialHandCategories@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB(specialized PartialHandCategories.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PartialHandCategories@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB(a1, (uint64_t (*)(_QWORD))specialized PartialHandCategories.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PartialHandCategories()
{
  lazy protocol witness table accessor for type PartialHandCategories and conformance PartialHandCategories();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PartialHandCategories@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static PartialHandCategories.allCases, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance UnsureLabel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static UnsureLabel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PartialHandCategories@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PartialHandCategories._protobuf_nameMap, a1);
}

uint64_t HandOIHPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in HandOIHPB.decodeMessage<A>(decoder:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type UnsureLabel and conformance UnsureLabel();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in HandOIHPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  lazy protocol witness table accessor for type UnsureLabel and conformance UnsureLabel();
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t HandOIHPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0
    || (lazy protocol witness table accessor for type UnsureLabel and conformance UnsureLabel(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (type metadata accessor for ProtobufString(),
          lazy protocol witness table accessor for type UnsureLabel and conformance UnsureLabel(),
          result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for HandOIHPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance HandOIHPB@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance HandOIHPB()
{
  return 0x5048494F646E6148;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandOIHPB()
{
  return HandOIHPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandOIHPB()
{
  return HandOIHPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandOIHPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB, type metadata accessor for HandOIHPB, (uint64_t)&protocol conformance descriptor for HandOIHPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandOIHPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandOIHPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandOIHPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB, type metadata accessor for HandOIHPB, (uint64_t)&protocol conformance descriptor for HandOIHPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandOIHPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB, type metadata accessor for HandOIHPB, (uint64_t)&protocol conformance descriptor for HandOIHPB);
  return Message.hash(into:)();
}

uint64_t PartialHand.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PartialHandCategories and conformance PartialHandCategories();
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t PartialHand.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0
    || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!v0[2]
      || (lazy protocol witness table accessor for type PartialHandCategories and conformance PartialHandCategories(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for PartialHand(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PartialHand@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PartialHand()
{
  return 0x486C616974726150;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PartialHand()
{
  return PartialHand.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PartialHand()
{
  return PartialHand.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PartialHand()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PartialHand@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PartialHand._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PartialHand()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PartialHand()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand);
  return Message.hash(into:)();
}

uint64_t PartialHandMultiCam.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PartialHand(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PartialHandMultiCam.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (lazy protocol witness table accessor for type CameraSource and conformance CameraSource(),
        result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for PartialHand(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHand and conformance PartialHand, type metadata accessor for PartialHand, (uint64_t)&protocol conformance descriptor for PartialHand), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PartialHandMultiCam(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PartialHandMultiCam()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PartialHandMultiCam()
{
  return PartialHandMultiCam.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PartialHandMultiCam()
{
  return PartialHandMultiCam.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PartialHandMultiCam()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PartialHandMultiCam@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PartialHandMultiCam._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PartialHandMultiCam()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PartialHandMultiCam()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
  return Message.hash(into:)();
}

uint64_t HandGTDescriptorPB._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 20) = 1;
  v1 = v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
  v2 = type metadata accessor for Coordinate3DPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
  v4 = type metadata accessor for HandPosePB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown) = 2;
  v5 = v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
  v6 = type metadata accessor for PoseSpecPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih;
  v8 = type metadata accessor for HandOIHPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
  v10 = type metadata accessor for PartialHandMultiCam(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v0
      + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handsOihCategory;
  *(_QWORD *)v11 = 0;
  *(_WORD *)(v11 + 8) = 256;
  v12 = v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__intentScore;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return v0;
}

uint64_t HandGTDescriptorPB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose, &demangling cache variable for type metadata for HandPosePB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec, &demangling cache variable for type metadata for PoseSpecPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih, &demangling cache variable for type metadata for HandOIHPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand, &demangling cache variable for type metadata for PartialHandMultiCam?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandGTDescriptorPB._StorageClass()
{
  return type metadata accessor for HandGTDescriptorPB._StorageClass(0);
}

uint64_t type metadata accessor for HandGTDescriptorPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandGTDescriptorPB._StorageClass);
}

void type metadata completion function for HandGTDescriptorPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandPosePB?, (void (*)(uint64_t))type metadata accessor for HandPosePB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PoseSpecPB?, (void (*)(uint64_t))type metadata accessor for PoseSpecPB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandOIHPB?, (void (*)(uint64_t))type metadata accessor for HandOIHPB);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PartialHandMultiCam?, (void (*)(uint64_t))type metadata accessor for PartialHandMultiCam);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t type metadata accessor for HandOIHPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandOIHPB);
}

uint64_t type metadata accessor for PartialHandMultiCam(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PartialHandMultiCam);
}

uint64_t HandGTDescriptorPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for HandGTDescriptorPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandGTDescriptorPB._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = specialized HandGTDescriptorPB._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  closure #1 in HandGTDescriptorPB.decodeMessage<A>(decoder:)(v11, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in HandGTDescriptorPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in HandGTDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
          v16 = type metadata accessor for Coordinate3DPB;
          v17 = &lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB;
          v18 = &protocol conformance descriptor for Coordinate3DPB;
          goto LABEL_5;
        case 3:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
          v16 = type metadata accessor for HandPosePB;
          v17 = &lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB;
          v18 = &protocol conformance descriptor for HandPosePB;
          goto LABEL_5;
        case 4:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft;
          v24 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C068];
          goto LABEL_13;
        case 5:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown;
          v24 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C060];
LABEL_13:
          closure #24 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v19, v20, v21, v22, v23, v24);
          break;
        case 6:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
          v16 = type metadata accessor for PoseSpecPB;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB;
          v18 = &protocol conformance descriptor for PoseSpecPB;
          goto LABEL_5;
        case 7:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih;
          v16 = type metadata accessor for HandOIHPB;
          v17 = &lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB;
          v18 = &protocol conformance descriptor for HandOIHPB;
          goto LABEL_5;
        case 8:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
          v16 = type metadata accessor for PartialHandMultiCam;
          v17 = &lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam;
          v18 = &protocol conformance descriptor for PartialHandMultiCam;
LABEL_5:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        case 9:
          closure #9 in closure #1 in HandGTDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in HandGTDescriptorPB.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandGTDescriptorPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in HandGTDescriptorPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type ObjectInteractionCategory and conformance ObjectInteractionCategory();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in HandGTDescriptorPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v10;

  result = closure #1 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1);
  if (!v4)
  {
    closure #2 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #3 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    v10 = (_BYTE *)(a1
                  + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
    swift_beginAccess();
    if (*v10 == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    closure #4 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1);
    closure #5 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #6 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #7 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #8 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1);
    return closure #9 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(a1);
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #3 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandPosePB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HandPosePB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandPosePB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandPosePB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPosePB and conformance HandPosePB, type metadata accessor for HandPosePB, (uint64_t)&protocol conformance descriptor for HandPosePB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandPosePB);
}

uint64_t closure #4 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(a1
               + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown);
  result = swift_beginAccess();
  if (*v1 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PoseSpecPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PoseSpecPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PoseSpecPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PoseSpecPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB, type metadata accessor for PoseSpecPB, (uint64_t)&protocol conformance descriptor for PoseSpecPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PoseSpecPB);
}

uint64_t closure #6 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandOIHPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandOIHPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HandOIHPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandOIHPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandOIHPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandOIHPB and conformance HandOIHPB, type metadata accessor for HandOIHPB, (uint64_t)&protocol conformance descriptor for HandOIHPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandOIHPB);
}

uint64_t closure #7 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PartialHandMultiCam(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PartialHandMultiCam?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PartialHandMultiCam?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PartialHandMultiCam);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PartialHandMultiCam);
}

uint64_t closure #8 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1
     + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handsOihCategory;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type ObjectInteractionCategory and conformance ObjectInteractionCategory();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #9 in closure #1 in HandGTDescriptorPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__intentScore;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #1 in static HandGTDescriptorPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  _QWORD *v95;
  float *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  unsigned __int8 *v100;
  int v101;
  unsigned __int8 *v102;
  unsigned __int8 *v104;
  int v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int (*v125)(uint64_t, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t *v136;
  uint64_t v137;
  char v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  char v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  float v146;
  char v147;
  uint64_t v148;
  float v149;
  int v150;
  char v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;

  v4 = type metadata accessor for PartialHandMultiCam(0);
  v157 = *(_QWORD *)(v4 - 8);
  v158 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v153 = (uint64_t *)((char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PartialHandMultiCam?, PartialHandMultiCam?));
  MEMORY[0x24BDAC7A8](v156, v7);
  v167 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v154 = (uint64_t *)((char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12, v13);
  v159 = (uint64_t)&v152 - v14;
  v15 = type metadata accessor for HandOIHPB(0);
  v162 = *(_QWORD *)(v15 - 8);
  v163 = v15;
  MEMORY[0x24BDAC7A8](v15, v16);
  v155 = (uint64_t *)((char *)&v152 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandOIHPB?, HandOIHPB?));
  MEMORY[0x24BDAC7A8](v161, v18);
  v164 = (uint64_t)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandOIHPB?);
  MEMORY[0x24BDAC7A8](v20, v21);
  v182 = (char *)&v152 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v24);
  v166 = (uint64_t)&v152 - v25;
  v26 = type metadata accessor for PoseSpecPB(0);
  v169 = *(_QWORD *)(v26 - 8);
  v170 = v26;
  MEMORY[0x24BDAC7A8](v26, v27);
  v160 = (uint64_t)&v152 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PoseSpecPB?, PoseSpecPB?));
  MEMORY[0x24BDAC7A8](v168, v29);
  v171 = (uint64_t)&v152 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v31, v32);
  v165 = (uint64_t)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34, v35);
  v179 = (uint64_t)&v152 - v36;
  v37 = type metadata accessor for HandPosePB(0);
  v176 = *(_QWORD *)(v37 - 8);
  v177 = v37;
  MEMORY[0x24BDAC7A8](v37, v38);
  v172 = (uint64_t)&v152 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandPosePB?, HandPosePB?));
  MEMORY[0x24BDAC7A8](v175, v40);
  v178 = (uint64_t)&v152 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v42, v43);
  v173 = (uint64_t)&v152 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45, v46);
  v181 = (uint64_t)&v152 - v47;
  v48 = type metadata accessor for Coordinate3DPB(0);
  v49 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48, v50);
  v174 = (uint64_t)&v152 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v52, v53);
  v55 = (char *)&v152 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v56, v57);
  v180 = (uint64_t)&v152 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v59, v60);
  v62 = (char *)&v152 - v61;
  swift_beginAccess();
  v63 = *(_DWORD *)(a1 + 16);
  v183 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 20);
  swift_beginAccess();
  v184 = a2;
  v64 = *(_BYTE *)(a2 + 20);
  if ((a1 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 20))
      return 0;
  }
  else
  {
    if (v63 != *(_DWORD *)(a2 + 16))
      v64 = 1;
    if ((v64 & 1) != 0)
      return 0;
  }
  v65 = v183;
  v66 = v183 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v66, (uint64_t)v62, &demangling cache variable for type metadata for Coordinate3DPB?);
  v67 = v184;
  v68 = v184 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
  swift_beginAccess();
  v69 = (uint64_t)&v55[*(int *)(v52 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v62, (uint64_t)v55, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v68, v69, &demangling cache variable for type metadata for Coordinate3DPB?);
  v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v70((uint64_t)v55, 1, v48) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v62, &demangling cache variable for type metadata for Coordinate3DPB?);
    v71 = v70(v69, 1, v48);
    v72 = v67;
    v73 = v65;
    if (v71 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v55, &demangling cache variable for type metadata for Coordinate3DPB?);
      v74 = v182;
      goto LABEL_14;
    }
LABEL_12:
    outlined destroy of Coordinate3DPB?((uint64_t)v55, &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
    goto LABEL_23;
  }
  v75 = v180;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v55, v180, &demangling cache variable for type metadata for Coordinate3DPB?);
  v76 = v70(v69, 1, v48);
  v74 = v182;
  if (v76 == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v62, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB(v75, type metadata accessor for Coordinate3DPB);
    goto LABEL_12;
  }
  v77 = v174;
  outlined init with take of Matrix2dPB(v69, v174, type metadata accessor for Coordinate3DPB);
  v73 = v183;
  swift_retain();
  v72 = v184;
  swift_retain();
  v78 = v75;
  v79 = static Coordinate3DPB.== infix(_:_:)(v75, v77);
  outlined destroy of Matrix3x3PB(v77, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v62, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB(v78, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v55, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v79 & 1) == 0)
    goto LABEL_23;
LABEL_14:
  v80 = v73 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
  swift_beginAccess();
  v81 = v181;
  outlined init with copy of (Int32, Matrix2dPB)(v80, v181, &demangling cache variable for type metadata for HandPosePB?);
  v82 = v72 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
  swift_beginAccess();
  v83 = v178;
  v84 = v178 + *(int *)(v175 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v81, v178, &demangling cache variable for type metadata for HandPosePB?);
  v85 = v82;
  v86 = v83;
  outlined init with copy of (Int32, Matrix2dPB)(v85, v84, &demangling cache variable for type metadata for HandPosePB?);
  v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v176 + 48);
  v88 = v83;
  v89 = v177;
  if (v87(v88, 1, v177) == 1)
  {
    outlined destroy of Coordinate3DPB?(v81, &demangling cache variable for type metadata for HandPosePB?);
    v90 = v87(v84, 1, v89);
    v91 = v179;
    if (v90 == 1)
    {
      outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for HandPosePB?);
      goto LABEL_22;
    }
LABEL_19:
    v94 = &demangling cache variable for type metadata for (HandPosePB?, HandPosePB?);
LABEL_20:
    outlined destroy of Coordinate3DPB?(v86, v94);
    goto LABEL_23;
  }
  v92 = v173;
  outlined init with copy of (Int32, Matrix2dPB)(v86, v173, &demangling cache variable for type metadata for HandPosePB?);
  v93 = v87(v84, 1, v89);
  v91 = v179;
  if (v93 == 1)
  {
    outlined destroy of Coordinate3DPB?(v181, &demangling cache variable for type metadata for HandPosePB?);
    outlined destroy of Matrix3x3PB(v92, type metadata accessor for HandPosePB);
    goto LABEL_19;
  }
  v95 = v74;
  v96 = (float *)v92;
  v97 = v172;
  outlined init with take of Matrix2dPB(v84, v172, type metadata accessor for HandPosePB);
  v98 = static HandPosePB.== infix(_:_:)(v96, v97);
  outlined destroy of Matrix3x3PB(v97, type metadata accessor for HandPosePB);
  outlined destroy of Coordinate3DPB?(v181, &demangling cache variable for type metadata for HandPosePB?);
  v99 = (uint64_t)v96;
  v74 = v95;
  outlined destroy of Matrix3x3PB(v99, type metadata accessor for HandPosePB);
  outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for HandPosePB?);
  if ((v98 & 1) == 0)
    goto LABEL_23;
LABEL_22:
  v100 = (unsigned __int8 *)(v73
                           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
  swift_beginAccess();
  v101 = *v100;
  v102 = (unsigned __int8 *)(v72
                           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
  swift_beginAccess();
  if (v101 != *v102)
    goto LABEL_23;
  v104 = (unsigned __int8 *)(v73
                           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown);
  swift_beginAccess();
  v105 = *v104;
  v106 = (unsigned __int8 *)(v72
                           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown);
  swift_beginAccess();
  v107 = *v106;
  if (v105 == 2)
  {
    if (v107 != 2)
      goto LABEL_23;
  }
  else if (v107 == 2 || ((((v107 & 1) == 0) ^ v105) & 1) == 0)
  {
    goto LABEL_23;
  }
  v108 = v73 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v108, v91, &demangling cache variable for type metadata for PoseSpecPB?);
  v109 = v72 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
  swift_beginAccess();
  v86 = v171;
  v110 = v171 + *(int *)(v168 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v91, v171, &demangling cache variable for type metadata for PoseSpecPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v109, v110, &demangling cache variable for type metadata for PoseSpecPB?);
  v111 = v170;
  v112 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v169 + 48);
  if (v112(v86, 1, v170) == 1)
  {
    outlined destroy of Coordinate3DPB?(v91, &demangling cache variable for type metadata for PoseSpecPB?);
    if (v112(v110, 1, v111) == 1)
    {
      outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for PoseSpecPB?);
      v113 = (uint64_t)v167;
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  v114 = v165;
  outlined init with copy of (Int32, Matrix2dPB)(v86, v165, &demangling cache variable for type metadata for PoseSpecPB?);
  v115 = v112(v110, 1, v111);
  v113 = (uint64_t)v167;
  if (v115 == 1)
  {
    outlined destroy of Coordinate3DPB?(v179, &demangling cache variable for type metadata for PoseSpecPB?);
    outlined destroy of Matrix3x3PB(v114, type metadata accessor for PoseSpecPB);
LABEL_35:
    v94 = &demangling cache variable for type metadata for (PoseSpecPB?, PoseSpecPB?);
    goto LABEL_20;
  }
  v116 = v160;
  outlined init with take of Matrix2dPB(v110, v160, type metadata accessor for PoseSpecPB);
  v117 = static PoseSpecPB.== infix(_:_:)(v114, v116);
  outlined destroy of Matrix3x3PB(v116, type metadata accessor for PoseSpecPB);
  outlined destroy of Coordinate3DPB?(v179, &demangling cache variable for type metadata for PoseSpecPB?);
  outlined destroy of Matrix3x3PB(v114, type metadata accessor for PoseSpecPB);
  outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for PoseSpecPB?);
  if ((v117 & 1) == 0)
    goto LABEL_23;
LABEL_37:
  v118 = v73 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih;
  swift_beginAccess();
  v119 = v118;
  v120 = v166;
  outlined init with copy of (Int32, Matrix2dPB)(v119, v166, &demangling cache variable for type metadata for HandOIHPB?);
  v121 = v72 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handOih;
  swift_beginAccess();
  v122 = v164;
  v123 = v164 + *(int *)(v161 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v120, v164, &demangling cache variable for type metadata for HandOIHPB?);
  v124 = v121;
  v86 = v122;
  outlined init with copy of (Int32, Matrix2dPB)(v124, v123, &demangling cache variable for type metadata for HandOIHPB?);
  v125 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v162 + 48);
  v126 = v122;
  v127 = v163;
  if (v125(v126, 1, v163) == 1)
  {
    outlined destroy of Coordinate3DPB?(v120, &demangling cache variable for type metadata for HandOIHPB?);
    if (v125(v123, 1, v127) == 1)
    {
      outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for HandOIHPB?);
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v86, (uint64_t)v74, &demangling cache variable for type metadata for HandOIHPB?);
  if (v125(v123, 1, v127) == 1)
  {
    outlined destroy of Coordinate3DPB?(v166, &demangling cache variable for type metadata for HandOIHPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v74, type metadata accessor for HandOIHPB);
LABEL_42:
    v94 = &demangling cache variable for type metadata for (HandOIHPB?, HandOIHPB?);
    goto LABEL_20;
  }
  v128 = v155;
  outlined init with take of Matrix2dPB(v123, (uint64_t)v155, type metadata accessor for HandOIHPB);
  v129 = specialized static HandOIHPB.== infix(_:_:)(v74, v128);
  outlined destroy of Matrix3x3PB((uint64_t)v128, type metadata accessor for HandOIHPB);
  outlined destroy of Coordinate3DPB?(v166, &demangling cache variable for type metadata for HandOIHPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v74, type metadata accessor for HandOIHPB);
  outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for HandOIHPB?);
  if ((v129 & 1) == 0)
    goto LABEL_23;
LABEL_44:
  v130 = v73
       + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
  swift_beginAccess();
  v131 = v159;
  outlined init with copy of (Int32, Matrix2dPB)(v130, v159, &demangling cache variable for type metadata for PartialHandMultiCam?);
  v132 = v72
       + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
  swift_beginAccess();
  v133 = v113 + *(int *)(v156 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v131, v113, &demangling cache variable for type metadata for PartialHandMultiCam?);
  outlined init with copy of (Int32, Matrix2dPB)(v132, v133, &demangling cache variable for type metadata for PartialHandMultiCam?);
  v134 = v158;
  v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48);
  if (v135(v113, 1, v158) == 1)
  {
    outlined destroy of Coordinate3DPB?(v131, &demangling cache variable for type metadata for PartialHandMultiCam?);
    if (v135(v133, 1, v134) == 1)
    {
      outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for PartialHandMultiCam?);
      goto LABEL_47;
    }
LABEL_52:
    outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for (PartialHandMultiCam?, PartialHandMultiCam?));
    goto LABEL_23;
  }
  v140 = v154;
  outlined init with copy of (Int32, Matrix2dPB)(v113, (uint64_t)v154, &demangling cache variable for type metadata for PartialHandMultiCam?);
  if (v135(v133, 1, v134) == 1)
  {
    outlined destroy of Coordinate3DPB?(v159, &demangling cache variable for type metadata for PartialHandMultiCam?);
    outlined destroy of Matrix3x3PB((uint64_t)v140, type metadata accessor for PartialHandMultiCam);
    goto LABEL_52;
  }
  v141 = v153;
  outlined init with take of Matrix2dPB(v133, (uint64_t)v153, type metadata accessor for PartialHandMultiCam);
  if ((specialized static Array<A>.== infix(_:_:)(*v140, *v141) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v140[1], v141[1]) & 1) == 0)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v141, type metadata accessor for PartialHandMultiCam);
    outlined destroy of Coordinate3DPB?(v159, &demangling cache variable for type metadata for PartialHandMultiCam?);
    outlined destroy of Matrix3x3PB((uint64_t)v140, type metadata accessor for PartialHandMultiCam);
    outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for PartialHandMultiCam?);
    goto LABEL_23;
  }
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v142 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v141, type metadata accessor for PartialHandMultiCam);
  outlined destroy of Coordinate3DPB?(v159, &demangling cache variable for type metadata for PartialHandMultiCam?);
  outlined destroy of Matrix3x3PB((uint64_t)v140, type metadata accessor for PartialHandMultiCam);
  outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for PartialHandMultiCam?);
  if ((v142 & 1) == 0)
  {
LABEL_23:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_47:
  v136 = (uint64_t *)(v73
                   + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handsOihCategory);
  swift_beginAccess();
  v137 = *v136;
  v138 = *((_BYTE *)v136 + 9);
  v139 = (uint64_t *)(v72
                   + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handsOihCategory);
  swift_beginAccess();
  if ((v138 & 1) != 0)
  {
    if ((*((_BYTE *)v139 + 9) & 1) == 0)
      goto LABEL_23;
  }
  else
  {
    if ((*((_BYTE *)v139 + 9) & 1) != 0)
      goto LABEL_23;
    v143 = *v139;
    if ((v139[1] & 1) != 0)
    {
      if (v143)
      {
        if (v143 == 1)
          v144 = v137 == 1;
        else
          v144 = v137 == 2;
        v73 = v183;
        v72 = v184;
        if (!v144)
          goto LABEL_23;
      }
      else
      {
        v73 = v183;
        v72 = v184;
        if (v137)
          goto LABEL_23;
      }
    }
    else if (v137 != v143)
    {
      goto LABEL_23;
    }
  }
  v145 = v73
       + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__intentScore;
  swift_beginAccess();
  v146 = *(float *)v145;
  v147 = *(_BYTE *)(v145 + 4);
  swift_release();
  v148 = v72
       + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__intentScore;
  swift_beginAccess();
  v149 = *(float *)v148;
  v150 = *(unsigned __int8 *)(v148 + 4);
  swift_release();
  if ((v147 & 1) != 0)
  {
    if (!v150)
      return 0;
  }
  else
  {
    if (v146 == v149)
      v151 = v150;
    else
      v151 = 1;
    if ((v151 & 1) != 0)
      return 0;
  }
  return 1;
}

