uint64_t initializeWithCopy for RejectedHandPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  unsigned int (*v49)(_DWORD *, uint64_t, uint64_t);

  v3 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(v3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = (int *)type metadata accessor for BasicHandDescriptorPB(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v46 = v15;
    v47 = v3;
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    *((_BYTE *)v12 + 16) = *((_BYTE *)v13 + 16);
    *((_DWORD *)v12 + 5) = *((_DWORD *)v13 + 5);
    v18 = v14[8];
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    v21 = v14[9];
    v22 = (_DWORD *)((char *)v12 + v21);
    v48 = (void (*)(char *, char *, uint64_t))v10;
    v23 = (_DWORD *)((char *)v13 + v21);
    v24 = type metadata accessor for Coordinate3DPB(0);
    v25 = *(_QWORD *)(v24 - 8);
    v49 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v25 + 48);
    v45 = v25;
    if (v49(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[2] = v23[2];
      v48((char *)v22 + *(int *)(v24 + 28), (char *)v23 + *(int *)(v24 + 28), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = v14[10];
    v28 = (_DWORD *)((char *)v12 + v27);
    v29 = (_DWORD *)((char *)v13 + v27);
    v3 = v47;
    if (v49((_QWORD *)((char *)v13 + v27), 1, v24))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      v10 = (void (*)(uint64_t, uint64_t, uint64_t))v48;
    }
    else
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[2] = v29[2];
      v31 = *(int *)(v24 + 28);
      v32 = (char *)v29 + v31;
      v10 = (void (*)(uint64_t, uint64_t, uint64_t))v48;
      v48((char *)v28 + v31, v32, v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v28, 0, 1, v24);
    }
    v33 = v14[11];
    v34 = (_DWORD *)((char *)v12 + v33);
    v35 = (_DWORD *)((char *)v13 + v33);
    if (v49(v35, 1, v24))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[2] = v35[2];
      v10((uint64_t)v34 + *(int *)(v24 + 28), (uint64_t)v35 + *(int *)(v24 + 28), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v34, 0, 1, v24);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v46 + 56))(v12, 0, 1, v14);
  }
  v37 = *(int *)(v3 + 28);
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = type metadata accessor for HandDescriptorPB(0);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v38, (uint64_t)v39, v9);
    *(_QWORD *)&v38[*(int *)(v40 + 20)] = *(_QWORD *)&v39[*(int *)(v40 + 20)];
    v43 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56);
    swift_retain();
    v43(v38, 0, 1, v40);
  }
  return a1;
}

uint64_t assignWithCopy for RejectedHandPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  void (*v62)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t *v87;
  uint64_t v88;
  unsigned int (*v89)(_DWORD *, uint64_t, uint64_t);
  void (*v90)(uint64_t, uint64_t, uint64_t);
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = a2;
  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v94 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 24);
  v11(v8, v9, v10);
  v95 = a3;
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = (uint64_t)v4 + v12;
  v15 = (int *)type metadata accessor for BasicHandDescriptorPB(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      outlined destroy of Matrix3x3PB(v13, type metadata accessor for BasicHandDescriptorPB);
      goto LABEL_7;
    }
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
    v91 = (void (*)(char *, char *, uint64_t))v11;
    v93 = v10;
    v11(v13 + v15[8], v14 + v15[8], v10);
    v35 = v15[9];
    v36 = (char *)(v13 + v35);
    v37 = (char *)(v14 + v35);
    v38 = type metadata accessor for Coordinate3DPB(0);
    v88 = *(_QWORD *)(v38 - 8);
    v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48);
    v40 = v39(v36, 1, v38);
    v41 = v39(v37, 1, v38);
    if (v40)
    {
      if (!v41)
      {
        *(_DWORD *)v36 = *(_DWORD *)v37;
        *((_DWORD *)v36 + 1) = *((_DWORD *)v37 + 1);
        *((_DWORD *)v36 + 2) = *((_DWORD *)v37 + 2);
        v42 = v38;
        (*(void (**)(char *, char *, uint64_t))(v94 + 16))(&v36[*(int *)(v38 + 28)], &v37[*(int *)(v38 + 28)], v93);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v36, 0, 1, v38);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v41)
      {
        *(_DWORD *)v36 = *(_DWORD *)v37;
        *((_DWORD *)v36 + 1) = *((_DWORD *)v37 + 1);
        *((_DWORD *)v36 + 2) = *((_DWORD *)v37 + 2);
        v42 = v38;
        v91(&v36[*(int *)(v38 + 28)], &v37[*(int *)(v38 + 28)], v93);
LABEL_31:
        v66 = v15[10];
        v67 = (char *)(v13 + v66);
        v68 = (char *)(v14 + v66);
        v69 = v39((char *)(v13 + v66), 1, v42);
        v70 = v42;
        v71 = v69;
        v72 = v39(v68, 1, v70);
        if (v71)
        {
          if (!v72)
          {
            *(_DWORD *)v67 = *(_DWORD *)v68;
            *((_DWORD *)v67 + 1) = *((_DWORD *)v68 + 1);
            *((_DWORD *)v67 + 2) = *((_DWORD *)v68 + 2);
            v73 = v38;
            v74 = *(int *)(v38 + 28);
            v75 = &v68[v74];
            v10 = v93;
            (*(void (**)(char *, char *, uint64_t))(v94 + 16))(&v67[v74], v75, v93);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v67, 0, 1, v38);
            v11 = (void (*)(uint64_t, uint64_t, uint64_t))v91;
LABEL_37:
            v77 = v15[11];
            v78 = (char *)(v13 + v77);
            v79 = (char *)(v14 + v77);
            v80 = v39(v78, 1, v73);
            v81 = v39(v79, 1, v73);
            if (v80)
            {
              if (!v81)
              {
                *(_DWORD *)v78 = *(_DWORD *)v79;
                *((_DWORD *)v78 + 1) = *((_DWORD *)v79 + 1);
                *((_DWORD *)v78 + 2) = *((_DWORD *)v79 + 2);
                (*(void (**)(char *, char *, uint64_t))(v94 + 16))(&v78[*(int *)(v73 + 28)], &v79[*(int *)(v73 + 28)], v10);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v78, 0, 1, v73);
                goto LABEL_20;
              }
            }
            else
            {
              if (!v81)
              {
                *(_DWORD *)v78 = *(_DWORD *)v79;
                *((_DWORD *)v78 + 1) = *((_DWORD *)v79 + 1);
                *((_DWORD *)v78 + 2) = *((_DWORD *)v79 + 2);
                v11((uint64_t)&v78[*(int *)(v73 + 28)], (uint64_t)&v79[*(int *)(v73 + 28)], v10);
                goto LABEL_20;
              }
              outlined destroy of Matrix3x3PB((uint64_t)v78, type metadata accessor for Coordinate3DPB);
            }
            v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?)
                                        - 8)
                            + 64);
            v33 = v78;
            v34 = v79;
LABEL_8:
            memcpy(v33, v34, v32);
            goto LABEL_20;
          }
        }
        else
        {
          if (!v72)
          {
            *(_DWORD *)v67 = *(_DWORD *)v68;
            *((_DWORD *)v67 + 1) = *((_DWORD *)v68 + 1);
            *((_DWORD *)v67 + 2) = *((_DWORD *)v68 + 2);
            v73 = v38;
            v82 = *(int *)(v38 + 28);
            v83 = &v67[v82];
            v84 = &v68[v82];
            v11 = (void (*)(uint64_t, uint64_t, uint64_t))v91;
            v10 = v93;
            v91(v83, v84, v93);
            goto LABEL_37;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v67, type metadata accessor for Coordinate3DPB);
        }
        v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        v11 = (void (*)(uint64_t, uint64_t, uint64_t))v91;
        v10 = v93;
        v73 = v38;
        goto LABEL_37;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for Coordinate3DPB);
    }
    v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    v42 = v38;
    goto LABEL_31;
  }
  if (v19)
  {
LABEL_7:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?)
                                - 8)
                    + 64);
    v33 = (void *)v13;
    v34 = (char *)v14;
    goto LABEL_8;
  }
  v87 = v4;
  v90 = v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  *(_DWORD *)(v13 + 20) = *(_DWORD *)(v14 + 20);
  v20 = v15[8];
  v21 = (char *)(v13 + v20);
  v22 = (char *)(v14 + v20);
  v23 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  swift_bridgeObjectRetain();
  v86 = v23;
  v23(v21, v22, v10);
  v24 = v15[9];
  v25 = (_DWORD *)(v13 + v24);
  v26 = v10;
  v27 = (_DWORD *)(v14 + v24);
  v28 = type metadata accessor for Coordinate3DPB(0);
  v29 = *(_QWORD *)(v28 - 8);
  v89 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48);
  v92 = v26;
  v85 = v29;
  if (v89(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v25, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    v31 = v86;
  }
  else
  {
    *v25 = *v27;
    v25[1] = v27[1];
    v25[2] = v27[2];
    v43 = v26;
    v31 = v86;
    v86((char *)v25 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v43);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
  }
  v44 = v15[10];
  v45 = (_DWORD *)(v13 + v44);
  v46 = (_DWORD *)(v14 + v44);
  v4 = v87;
  if (v89((_DWORD *)(v14 + v44), 1, v28))
  {
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    v10 = v92;
  }
  else
  {
    *v45 = *v46;
    v45[1] = v46[1];
    v45[2] = v46[2];
    v48 = *(int *)(v28 + 28);
    v49 = (char *)v46 + v48;
    v10 = v92;
    v31((char *)v45 + v48, v49, v92);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v45, 0, 1, v28);
  }
  v50 = v15[11];
  v51 = (_DWORD *)(v13 + v50);
  v52 = (_DWORD *)(v14 + v50);
  if (v89(v52, 1, v28))
  {
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    *v51 = *v52;
    v51[1] = v52[1];
    v51[2] = v52[2];
    v31((char *)v51 + *(int *)(v28 + 28), (char *)v52 + *(int *)(v28 + 28), v10);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v51, 0, 1, v28);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  v11 = v90;
LABEL_20:
  v54 = *(int *)(v95 + 28);
  v55 = (char *)(a1 + v54);
  v56 = (char *)v4 + v54;
  v57 = type metadata accessor for HandDescriptorPB(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (!v61)
    {
      v11((uint64_t)v55, (uint64_t)v56, v10);
      *(_QWORD *)&v55[*(int *)(v57 + 20)] = *(_QWORD *)&v56[*(int *)(v57 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v55, type metadata accessor for HandDescriptorPB);
    goto LABEL_25;
  }
  if (v61)
  {
LABEL_25:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v55, v56, v10);
  *(_QWORD *)&v55[*(int *)(v57 + 20)] = *(_QWORD *)&v56[*(int *)(v57 + 20)];
  v62 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56);
  swift_retain();
  v62(v55, 0, 1, v57);
  return a1;
}

uint64_t initializeWithTake for RejectedHandPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  unsigned int (*v44)(_OWORD *, uint64_t, uint64_t);

  v3 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(v3 + 24);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = (int *)type metadata accessor for BasicHandDescriptorPB(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v41 = v15;
    v42 = v3;
    *v12 = *v13;
    *((_BYTE *)v12 + 16) = *((_BYTE *)v13 + 16);
    *((_DWORD *)v12 + 5) = *((_DWORD *)v13 + 5);
    v10((uint64_t)v12 + v14[8], (uint64_t)v13 + v14[8], v9);
    v17 = v14[9];
    v18 = (_DWORD *)((char *)v12 + v17);
    v43 = (void (*)(char *, char *, uint64_t))v10;
    v19 = (_DWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for Coordinate3DPB(0);
    v21 = *(_QWORD *)(v20 - 8);
    v44 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48);
    v40 = v21;
    if (v44(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v43((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = v14[10];
    v24 = (_DWORD *)((char *)v12 + v23);
    v25 = (_DWORD *)((char *)v13 + v23);
    v3 = v42;
    if (v44((_OWORD *)((char *)v13 + v23), 1, v20))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      v10 = (void (*)(uint64_t, uint64_t, uint64_t))v43;
    }
    else
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[2] = v25[2];
      v27 = *(int *)(v20 + 28);
      v28 = (char *)v25 + v27;
      v10 = (void (*)(uint64_t, uint64_t, uint64_t))v43;
      v43((char *)v24 + v27, v28, v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v24, 0, 1, v20);
    }
    v29 = v14[11];
    v30 = (_DWORD *)((char *)v12 + v29);
    v31 = (_DWORD *)((char *)v13 + v29);
    if (v44(v31, 1, v20))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v30 = *(_QWORD *)v31;
      v30[2] = v31[2];
      v10((uint64_t)v30 + *(int *)(v20 + 28), (uint64_t)v31 + *(int *)(v20 + 28), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v30, 0, 1, v20);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v41 + 56))(v12, 0, 1, v14);
  }
  v33 = *(int *)(v3 + 28);
  v34 = (char *)(a1 + v33);
  v35 = (char *)(a2 + v33);
  v36 = type metadata accessor for HandDescriptorPB(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v34, (uint64_t)v35, v9);
    *(_QWORD *)&v34[*(int *)(v36 + 20)] = *(_QWORD *)&v35[*(int *)(v36 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  return a1;
}

uint64_t assignWithTake for RejectedHandPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  int v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(_DWORD *, uint64_t, uint64_t);
  void (*v85)(uint64_t, uint64_t, uint64_t);
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v4 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v89 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 40);
  v10(v7, v8, v9);
  v90 = a3;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = v4 + v11;
  v14 = (int *)type metadata accessor for BasicHandDescriptorPB(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      outlined destroy of Matrix3x3PB(v12, type metadata accessor for BasicHandDescriptorPB);
      goto LABEL_7;
    }
    v30 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_QWORD *)(v12 + 8) = v30;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v13 + 20);
    v86 = (void (*)(char *, char *, uint64_t))v10;
    v88 = v9;
    v10(v12 + v14[8], v13 + v14[8], v9);
    v31 = v14[9];
    v32 = (char *)(v12 + v31);
    v33 = (char *)(v13 + v31);
    v34 = type metadata accessor for Coordinate3DPB(0);
    v83 = *(_QWORD *)(v34 - 8);
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
    v36 = v35(v32, 1, v34);
    v37 = v35(v33, 1, v34);
    if (v36)
    {
      if (!v37)
      {
        *(_QWORD *)v32 = *(_QWORD *)v33;
        *((_DWORD *)v32 + 2) = *((_DWORD *)v33 + 2);
        v38 = v34;
        (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v32[*(int *)(v34 + 28)], &v33[*(int *)(v34 + 28)], v88);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v32, 0, 1, v34);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v37)
      {
        *(_QWORD *)v32 = *(_QWORD *)v33;
        *((_DWORD *)v32 + 2) = *((_DWORD *)v33 + 2);
        v38 = v34;
        v86(&v32[*(int *)(v34 + 28)], &v33[*(int *)(v34 + 28)], v88);
LABEL_31:
        v61 = v14[10];
        v62 = (char *)(v12 + v61);
        v63 = (char *)(v13 + v61);
        v64 = v35((char *)(v12 + v61), 1, v38);
        v65 = v38;
        v66 = v64;
        v67 = v35(v63, 1, v65);
        if (v66)
        {
          if (!v67)
          {
            *(_QWORD *)v62 = *(_QWORD *)v63;
            *((_DWORD *)v62 + 2) = *((_DWORD *)v63 + 2);
            v68 = v34;
            v69 = *(int *)(v34 + 28);
            v70 = &v63[v69];
            v9 = v88;
            (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v62[v69], v70, v88);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v62, 0, 1, v34);
            v10 = (void (*)(uint64_t, uint64_t, uint64_t))v86;
LABEL_37:
            v72 = v14[11];
            v73 = v12 + v72;
            v74 = (char *)(v13 + v72);
            v75 = v35((char *)v73, 1, v68);
            v76 = v35(v74, 1, v68);
            if (v75)
            {
              if (!v76)
              {
                *(_QWORD *)v73 = *(_QWORD *)v74;
                *(_DWORD *)(v73 + 8) = *((_DWORD *)v74 + 2);
                (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v73 + *(int *)(v68 + 28), &v74[*(int *)(v68 + 28)], v9);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v73, 0, 1, v68);
                goto LABEL_20;
              }
            }
            else
            {
              if (!v76)
              {
                *(_QWORD *)v73 = *(_QWORD *)v74;
                *(_DWORD *)(v73 + 8) = *((_DWORD *)v74 + 2);
                v10(v73 + *(int *)(v68 + 28), (uint64_t)&v74[*(int *)(v68 + 28)], v9);
                goto LABEL_20;
              }
              outlined destroy of Matrix3x3PB(v73, type metadata accessor for Coordinate3DPB);
            }
            v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?)
                                        - 8)
                            + 64);
            v28 = (void *)v73;
            v29 = v74;
LABEL_8:
            memcpy(v28, v29, v27);
            goto LABEL_20;
          }
        }
        else
        {
          if (!v67)
          {
            *(_QWORD *)v62 = *(_QWORD *)v63;
            *((_DWORD *)v62 + 2) = *((_DWORD *)v63 + 2);
            v68 = v34;
            v77 = *(int *)(v34 + 28);
            v78 = &v62[v77];
            v79 = &v63[v77];
            v10 = (void (*)(uint64_t, uint64_t, uint64_t))v86;
            v9 = v88;
            v86(v78, v79, v88);
            goto LABEL_37;
          }
          outlined destroy of Matrix3x3PB((uint64_t)v62, type metadata accessor for Coordinate3DPB);
        }
        v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        v10 = (void (*)(uint64_t, uint64_t, uint64_t))v86;
        v9 = v88;
        v68 = v34;
        goto LABEL_37;
      }
      outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for Coordinate3DPB);
    }
    v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    v38 = v34;
    goto LABEL_31;
  }
  if (v18)
  {
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?)
                                - 8)
                    + 64);
    v28 = (void *)v12;
    v29 = (char *)v13;
    goto LABEL_8;
  }
  v85 = v10;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_DWORD *)(v12 + 20) = *(_DWORD *)(v13 + 20);
  v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32);
  v82 = v4;
  v81(v12 + v14[8], v13 + v14[8], v9);
  v19 = v14[9];
  v20 = (_DWORD *)(v12 + v19);
  v21 = v9;
  v22 = (_DWORD *)(v13 + v19);
  v23 = type metadata accessor for Coordinate3DPB(0);
  v24 = *(_QWORD *)(v23 - 8);
  v84 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48);
  v87 = v21;
  v80 = v24;
  if (v84(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v20, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    v26 = (void (*)(char *, char *, uint64_t))v81;
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v22;
    v20[2] = v22[2];
    v39 = v21;
    v26 = (void (*)(char *, char *, uint64_t))v81;
    v81((uint64_t)v20 + *(int *)(v23 + 28), (uint64_t)v22 + *(int *)(v23 + 28), v39);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
  }
  v40 = v14[10];
  v41 = (_DWORD *)(v12 + v40);
  v42 = (_DWORD *)(v13 + v40);
  v4 = v82;
  if (v84((_DWORD *)(v13 + v40), 1, v23))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    v9 = v87;
  }
  else
  {
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[2] = v42[2];
    v44 = *(int *)(v23 + 28);
    v45 = (char *)v42 + v44;
    v9 = v87;
    v26((char *)v41 + v44, v45, v87);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v41, 0, 1, v23);
  }
  v46 = v14[11];
  v47 = (_DWORD *)(v12 + v46);
  v48 = (_DWORD *)(v13 + v46);
  if (v84(v48, 1, v23))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[2] = v48[2];
    v26((char *)v47 + *(int *)(v23 + 28), (char *)v48 + *(int *)(v23 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v47, 0, 1, v23);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  v10 = v85;
LABEL_20:
  v50 = *(int *)(v90 + 28);
  v51 = (char *)(a1 + v50);
  v52 = (char *)(v4 + v50);
  v53 = type metadata accessor for HandDescriptorPB(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      v10((uint64_t)v51, (uint64_t)v52, v9);
      *(_QWORD *)&v51[*(int *)(v53 + 20)] = *(_QWORD *)&v52[*(int *)(v53 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v51, type metadata accessor for HandDescriptorPB);
    goto LABEL_25;
  }
  if (v57)
  {
LABEL_25:
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v51, v52, v9);
  *(_QWORD *)&v51[*(int *)(v53 + 20)] = *(_QWORD *)&v52[*(int *)(v53 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for RejectedHandPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8FFE70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?);
    v7 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v10;
      v9 = a3[6];
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[7];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RejectedHandPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D8FFF18(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[7];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for RejectedHandPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for RejectedHandPB);
}

void type metadata completion function for RejectedHandPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for BasicHandDescriptorPB?, (void (*)(uint64_t))type metadata accessor for BasicHandDescriptorPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandDescriptorPB?, (void (*)(uint64_t))type metadata accessor for HandDescriptorPB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for HandsKitDataSequencePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D9000A8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HandsKitDataSequencePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D900130(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for HandsKitDataSequencePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandsKitDataSequencePB);
}

uint64_t getEnumTagSinglePayload for HandsKitDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D9001C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for HandsKitDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D90024C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for HandsKitDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandsKitDataPB);
}

uint64_t HandsKitDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for HandsKitDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = HandsKitDataPB._StorageClass.init(copying:)(v8);
    swift_release();
  }
  v9 = swift_retain();
  closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)(v9, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t (*v24)(uint64_t);
  unint64_t *v25;
  void *v26;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
          v16 = type metadata accessor for CMTimeProtobuf;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf;
          v18 = &protocol conformance descriptor for CMTimeProtobuf;
          goto LABEL_6;
        case 3:
          closure #3 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)();
          break;
        case 4:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages;
          v24 = type metadata accessor for ImageDataPB;
          v25 = &lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB;
          v26 = &protocol conformance descriptor for ImageDataPB;
          goto LABEL_19;
        case 5:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
          v16 = type metadata accessor for HandsKitDataInternalPB;
          v17 = &lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB;
          v18 = &protocol conformance descriptor for HandsKitDataInternalPB;
          goto LABEL_6;
        case 6:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
          v16 = type metadata accessor for EnrollmentResultsPB;
          v17 = &lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB;
          v18 = &protocol conformance descriptor for EnrollmentResultsPB;
          goto LABEL_6;
        case 7:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
          v16 = type metadata accessor for Matrix2dPB;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB;
          v18 = &protocol conformance descriptor for Matrix2dPB;
          goto LABEL_6;
        case 8:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
          goto LABEL_5;
        case 9:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
LABEL_5:
          v16 = type metadata accessor for ImageCalibrationDataPB;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB;
          v18 = &protocol conformance descriptor for ImageCalibrationDataPB;
          goto LABEL_6;
        case 10:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors;
          v24 = type metadata accessor for HandDescriptorPB;
          v25 = (unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB;
          v26 = &protocol conformance descriptor for HandDescriptorPB;
LABEL_19:
          closure #39 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v19, v20, v21, v22, (uint64_t)v23, v24, v25, (uint64_t)v26);
          break;
        case 11:
          closure #11 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)();
          break;
        case 14:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
          v16 = type metadata accessor for DetectionResultsByChiralityPB;
          v17 = &lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB;
          v18 = &protocol conformance descriptor for DetectionResultsByChiralityPB;
LABEL_6:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for HandDescriptorPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in HandsKitDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  return swift_endAccess();
}

uint64_t HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for HandsKitDataPB(0);
  v7 = swift_retain();
  closure #1 in HandsKitDataPB.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;

  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    type metadata accessor for HandDescriptorPB(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = closure #1 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    v10 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sessionID);
    swift_beginAccess();
    v11 = *v10;
    v12 = v10[1];
    v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v13 = v11 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    v14 = a1 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v14 + 16))
    {
      type metadata accessor for ImageDataPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #2 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #3 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #4 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #5 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #6 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    v15 = a1
        + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v15 + 16))
    {
      type metadata accessor for HandDescriptorPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandDescriptorPB and conformance HandDescriptorPB, type metadata accessor for HandDescriptorPB, (uint64_t)&protocol conformance descriptor for HandDescriptorPB);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    v16 = (_DWORD *)(a1
                   + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__version);
    swift_beginAccess();
    if (*v16)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v17 = (_QWORD *)(a1
                   + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__frameID);
    swift_beginAccess();
    if (*v17)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    closure #7 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(a1);
    return closure #8 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t closure #2 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandsKitDataInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandsKitDataInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandsKitDataInternalPB);
}

uint64_t closure #3 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentResultsPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EnrollmentResultsPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for EnrollmentResultsPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type EnrollmentResultsPB and conformance EnrollmentResultsPB, type metadata accessor for EnrollmentResultsPB, (uint64_t)&protocol conformance descriptor for EnrollmentResultsPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for EnrollmentResultsPB);
}

uint64_t closure #4 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #5 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageCalibrationDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
}

uint64_t closure #6 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageCalibrationDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
}

uint64_t closure #7 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sourceID;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in closure #1 in HandsKitDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DetectionResultsByChiralityPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for DetectionResultsByChiralityPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionResultsByChiralityPB and conformance DetectionResultsByChiralityPB, type metadata accessor for DetectionResultsByChiralityPB, (uint64_t)&protocol conformance descriptor for DetectionResultsByChiralityPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for DetectionResultsByChiralityPB);
}

BOOL closure #1 in static HandsKitDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  float *v131;
  float *v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t);
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  char v177;
  int *v178;
  int v179;
  _DWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t *v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  float *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  float *v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;

  v208 = type metadata accessor for DetectionResultsByChiralityPB(0);
  v205 = *(_QWORD *)(v208 - 8);
  MEMORY[0x24BDAC7A8](v208, v4);
  v203 = (uint64_t *)((char *)&v202 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DetectionResultsByChiralityPB?, DetectionResultsByChiralityPB?));
  MEMORY[0x24BDAC7A8](v204, v6);
  v209 = (uint64_t)&v202 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v206 = (uint64_t *)((char *)&v202 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11, v12);
  v207 = (uint64_t)&v202 - v13;
  v221 = type metadata accessor for ImageCalibrationDataPB(0);
  v216 = *(_QWORD *)(v221 - 8);
  MEMORY[0x24BDAC7A8](v221, v14);
  v212 = (uint64_t)&v202 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?));
  MEMORY[0x24BDAC7A8](v220, v16);
  v213 = (uint64_t)&v202 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v19);
  v217 = (uint64_t)&v202 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v21, v22);
  v211 = (uint64_t)&v202 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24, v25);
  v218 = (char *)&v202 - v26;
  MEMORY[0x24BDAC7A8](v27, v28);
  v214 = (uint64_t)&v202 - v29;
  MEMORY[0x24BDAC7A8](v30, v31);
  v222 = (uint64_t)&v202 - v32;
  v33 = type metadata accessor for Matrix2dPB(0);
  v225 = *(_QWORD *)(v33 - 8);
  v226 = v33;
  MEMORY[0x24BDAC7A8](v33, v34);
  v215 = (uint64_t)&v202 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v224, v36);
  v227 = (uint64_t)&v202 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v38, v39);
  v219 = (uint64_t)&v202 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41, v42);
  v239 = (uint64_t)&v202 - v43;
  v44 = type metadata accessor for EnrollmentResultsPB(0);
  v231 = *(_QWORD *)(v44 - 8);
  v232 = v44;
  MEMORY[0x24BDAC7A8](v44, v45);
  v223 = (float *)((char *)&v202 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EnrollmentResultsPB?, EnrollmentResultsPB?));
  MEMORY[0x24BDAC7A8](v230, v47);
  v233 = (uint64_t)&v202 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentResultsPB?);
  MEMORY[0x24BDAC7A8](v49, v50);
  v228 = (float *)((char *)&v202 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v52, v53);
  v240 = (uint64_t)&v202 - v54;
  v55 = type metadata accessor for HandsKitDataInternalPB(0);
  v236 = *(_QWORD *)(v55 - 8);
  v237 = v55;
  MEMORY[0x24BDAC7A8](v55, v56);
  v229 = (uint64_t *)((char *)&v202 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandsKitDataInternalPB?, HandsKitDataInternalPB?));
  MEMORY[0x24BDAC7A8](v235, v58);
  v238 = (uint64_t)&v202 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataInternalPB?);
  MEMORY[0x24BDAC7A8](v60, v61);
  v234 = (uint64_t)&v202 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v63, v64);
  v241 = (uint64_t)&v202 - v65;
  v66 = type metadata accessor for CMTimeProtobuf(0);
  v244 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66, v67);
  v242 = (uint64_t)&v202 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v69, v70);
  v72 = (char *)&v202 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v73, v74);
  v243 = (uint64_t)&v202 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v76, v77);
  v79 = (char *)&v202 - v78;
  swift_beginAccess();
  v80 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v81 = *(_QWORD *)(a2 + 16);
  v82 = a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LOBYTE(a1) = specialized static Array<A>.== infix(_:_:)(v80, v81);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    goto LABEL_47;
  v210 = v82;
  v83 = v82
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v83, (uint64_t)v79, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v84 = a2
      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
  swift_beginAccess();
  v85 = (uint64_t)&v72[*(int *)(v69 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v79, (uint64_t)v72, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)(v84, v85, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v244 + 48);
  v87 = a2;
  if (v86((uint64_t)v72, 1, v66) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v79, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v86(v85, 1, v66) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v72, &demangling cache variable for type metadata for CMTimeProtobuf?);
      v88 = v210;
      goto LABEL_5;
    }
LABEL_15:
    outlined destroy of Coordinate3DPB?((uint64_t)v72, &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
    goto LABEL_47;
  }
  v111 = v243;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v72, v243, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v86(v85, 1, v66) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v79, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v111, type metadata accessor for CMTimeProtobuf);
    goto LABEL_15;
  }
  v244 = a2;
  v112 = (uint64_t)v72;
  v113 = v242;
  outlined init with take of Matrix2dPB(v85, v242, type metadata accessor for CMTimeProtobuf);
  if (*(_QWORD *)v111 != *(_QWORD *)v113 || *(_DWORD *)(v111 + 8) != *(_DWORD *)(v113 + 8))
  {
    outlined destroy of Matrix3x3PB(v113, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?((uint64_t)v79, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v111, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?(v112, &demangling cache variable for type metadata for CMTimeProtobuf?);
    goto LABEL_47;
  }
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v114 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB(v113, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v79, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Matrix3x3PB(v111, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?(v112, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v88 = v210;
  v87 = v244;
  if ((v114 & 1) == 0)
    goto LABEL_47;
LABEL_5:
  v89 = (uint64_t *)(v88
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sessionID);
  swift_beginAccess();
  v90 = *v89;
  v91 = v89[1];
  v92 = (_QWORD *)(v87
                 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sessionID);
  swift_beginAccess();
  if ((v90 != *v92 || v91 != v92[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_47;
  v93 = (uint64_t *)(v88
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
  swift_beginAccess();
  v94 = *v93;
  v95 = (uint64_t *)(v87
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
  swift_beginAccess();
  v96 = *v95;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v97 = specialized static Array<A>.== infix(_:_:)(v94, v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v97 & 1) == 0)
    goto LABEL_47;
  v98 = v88 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
  swift_beginAccess();
  v99 = v241;
  outlined init with copy of (Int32, Matrix2dPB)(v98, v241, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  v100 = v87 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
  swift_beginAccess();
  v101 = v238;
  v102 = v238 + *(int *)(v235 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v99, v238, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  v103 = v100;
  v104 = v101;
  outlined init with copy of (Int32, Matrix2dPB)(v103, v102, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v236 + 48);
  v106 = v101;
  v107 = v237;
  if (v105(v106, 1, v237) == 1)
  {
    outlined destroy of Coordinate3DPB?(v99, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
    v108 = v105(v102, 1, v107);
    v109 = v239;
    v110 = v240;
    if (v108 == 1)
    {
      outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
      goto LABEL_25;
    }
LABEL_23:
    v118 = &demangling cache variable for type metadata for (HandsKitDataInternalPB?, HandsKitDataInternalPB?);
LABEL_45:
    v158 = v104;
LABEL_46:
    outlined destroy of Coordinate3DPB?(v158, v118);
    goto LABEL_47;
  }
  v115 = v234;
  outlined init with copy of (Int32, Matrix2dPB)(v104, v234, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  v116 = v105(v102, 1, v107);
  v117 = v239;
  v110 = v240;
  if (v116 == 1)
  {
    outlined destroy of Coordinate3DPB?(v241, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
    outlined destroy of Matrix3x3PB(v115, type metadata accessor for HandsKitDataInternalPB);
    goto LABEL_23;
  }
  v119 = (uint64_t *)v115;
  v120 = v229;
  outlined init with take of Matrix2dPB(v102, (uint64_t)v229, type metadata accessor for HandsKitDataInternalPB);
  v121 = specialized static HandsKitDataInternalPB.== infix(_:_:)(v119, v120);
  outlined destroy of Matrix3x3PB((uint64_t)v120, type metadata accessor for HandsKitDataInternalPB);
  outlined destroy of Coordinate3DPB?(v241, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  v122 = (uint64_t)v119;
  v109 = v117;
  outlined destroy of Matrix3x3PB(v122, type metadata accessor for HandsKitDataInternalPB);
  outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  if ((v121 & 1) == 0)
    goto LABEL_47;
LABEL_25:
  v123 = v88
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v123, v110, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  v124 = v87
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  swift_beginAccess();
  v125 = v233;
  v126 = v233 + *(int *)(v230 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v110, v233, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  v127 = v124;
  v104 = v125;
  outlined init with copy of (Int32, Matrix2dPB)(v127, v126, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  v128 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v231 + 48);
  v129 = v125;
  v130 = v232;
  if (v128(v129, 1, v232) == 1)
  {
    outlined destroy of Coordinate3DPB?(v110, &demangling cache variable for type metadata for EnrollmentResultsPB?);
    if (v128(v126, 1, v130) == 1)
    {
      outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for EnrollmentResultsPB?);
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  v131 = v228;
  outlined init with copy of (Int32, Matrix2dPB)(v104, (uint64_t)v228, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  if (v128(v126, 1, v130) == 1)
  {
    outlined destroy of Coordinate3DPB?(v240, &demangling cache variable for type metadata for EnrollmentResultsPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v131, type metadata accessor for EnrollmentResultsPB);
LABEL_30:
    v118 = &demangling cache variable for type metadata for (EnrollmentResultsPB?, EnrollmentResultsPB?);
    goto LABEL_45;
  }
  v132 = v223;
  outlined init with take of Matrix2dPB(v126, (uint64_t)v223, type metadata accessor for EnrollmentResultsPB);
  v133 = specialized static EnrollmentResultsPB.== infix(_:_:)(v131, v132);
  outlined destroy of Matrix3x3PB((uint64_t)v132, type metadata accessor for EnrollmentResultsPB);
  outlined destroy of Coordinate3DPB?(v240, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v131, type metadata accessor for EnrollmentResultsPB);
  outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  if ((v133 & 1) == 0)
    goto LABEL_47;
LABEL_32:
  v134 = v88
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v134, v109, &demangling cache variable for type metadata for Matrix2dPB?);
  v135 = v87
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  swift_beginAccess();
  v136 = v109;
  v137 = v227;
  v138 = v227 + *(int *)(v224 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v136, v227, &demangling cache variable for type metadata for Matrix2dPB?);
  v139 = v135;
  v104 = v137;
  outlined init with copy of (Int32, Matrix2dPB)(v139, v138, &demangling cache variable for type metadata for Matrix2dPB?);
  v140 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48);
  v141 = v137;
  v142 = v226;
  if (v140(v141, 1, v226) == 1)
  {
    outlined destroy of Coordinate3DPB?(v136, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v140(v138, 1, v142) == 1)
    {
      outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  v143 = v219;
  outlined init with copy of (Int32, Matrix2dPB)(v104, v219, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v140(v138, 1, v142) == 1)
  {
    outlined destroy of Coordinate3DPB?(v239, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB(v143, type metadata accessor for Matrix2dPB);
LABEL_37:
    v118 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    goto LABEL_45;
  }
  v144 = v215;
  outlined init with take of Matrix2dPB(v138, v215, type metadata accessor for Matrix2dPB);
  v145 = specialized static Matrix2dPB.== infix(_:_:)(v143, v144);
  outlined destroy of Matrix3x3PB(v144, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v239, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB(v143, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v145 & 1) == 0)
    goto LABEL_47;
LABEL_39:
  v146 = v88
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
  swift_beginAccess();
  v147 = v222;
  outlined init with copy of (Int32, Matrix2dPB)(v146, v222, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v148 = v87
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
  swift_beginAccess();
  v149 = v217;
  v150 = v217 + *(int *)(v220 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v147, v217, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v151 = v148;
  v104 = v149;
  outlined init with copy of (Int32, Matrix2dPB)(v151, v150, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v152 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
  v153 = v221;
  if (v152(v104, 1, v221) == 1)
  {
    outlined destroy of Coordinate3DPB?(v147, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    v154 = v152(v150, 1, v153);
    v155 = (uint64_t)v218;
    if (v154 == 1)
    {
      outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
      goto LABEL_50;
    }
    goto LABEL_44;
  }
  v156 = v214;
  outlined init with copy of (Int32, Matrix2dPB)(v104, v214, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v157 = v152(v150, 1, v153);
  v155 = (uint64_t)v218;
  if (v157 == 1)
  {
    outlined destroy of Coordinate3DPB?(v222, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    outlined destroy of Matrix3x3PB(v156, type metadata accessor for ImageCalibrationDataPB);
LABEL_44:
    v118 = &demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?);
    goto LABEL_45;
  }
  v160 = v104;
  v161 = v212;
  outlined init with take of Matrix2dPB(v150, v212, type metadata accessor for ImageCalibrationDataPB);
  v162 = specialized static ImageCalibrationDataPB.== infix(_:_:)(v156, v161);
  outlined destroy of Matrix3x3PB(v161, type metadata accessor for ImageCalibrationDataPB);
  outlined destroy of Coordinate3DPB?(v222, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined destroy of Matrix3x3PB(v156, type metadata accessor for ImageCalibrationDataPB);
  outlined destroy of Coordinate3DPB?(v160, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((v162 & 1) == 0)
    goto LABEL_47;
LABEL_50:
  v163 = v88
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v163, v155, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v164 = v87
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
  swift_beginAccess();
  v165 = v213;
  v166 = v213 + *(int *)(v220 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v155, v213, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v167 = v165;
  outlined init with copy of (Int32, Matrix2dPB)(v164, v166, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v168 = v221;
  if (v152(v165, 1, v221) != 1)
  {
    v169 = v165;
    v170 = v211;
    outlined init with copy of (Int32, Matrix2dPB)(v169, v211, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    if (v152(v166, 1, v168) == 1)
    {
      outlined destroy of Coordinate3DPB?(v155, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
      outlined destroy of Matrix3x3PB(v170, type metadata accessor for ImageCalibrationDataPB);
      goto LABEL_55;
    }
    v171 = v212;
    outlined init with take of Matrix2dPB(v166, v212, type metadata accessor for ImageCalibrationDataPB);
    v172 = specialized static ImageCalibrationDataPB.== infix(_:_:)(v170, v171);
    outlined destroy of Matrix3x3PB(v171, type metadata accessor for ImageCalibrationDataPB);
    outlined destroy of Coordinate3DPB?(v155, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    outlined destroy of Matrix3x3PB(v170, type metadata accessor for ImageCalibrationDataPB);
    outlined destroy of Coordinate3DPB?(v167, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    if ((v172 & 1) != 0)
      goto LABEL_57;
LABEL_47:
    swift_release();
    swift_release();
    return 0;
  }
  outlined destroy of Coordinate3DPB?(v155, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if (v152(v166, 1, v168) != 1)
  {
LABEL_55:
    v118 = &demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?);
    v158 = v167;
    goto LABEL_46;
  }
  outlined destroy of Coordinate3DPB?(v165, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
LABEL_57:
  v173 = (uint64_t *)(v88
                   + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors);
  swift_beginAccess();
  v174 = *v173;
  v175 = (uint64_t *)(v87
                   + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors);
  swift_beginAccess();
  v176 = *v175;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v177 = specialized static Array<A>.== infix(_:_:)(v174, v176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v177 & 1) == 0)
    goto LABEL_47;
  v178 = (int *)(v88
               + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__version);
  swift_beginAccess();
  v179 = *v178;
  v180 = (_DWORD *)(v87
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__version);
  swift_beginAccess();
  if (v179 != *v180)
    goto LABEL_47;
  v181 = (uint64_t *)(v88
                   + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__frameID);
  swift_beginAccess();
  v182 = *v181;
  v183 = (_QWORD *)(v87
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__frameID);
  swift_beginAccess();
  if (v182 != *v183)
    goto LABEL_47;
  v184 = (uint64_t *)(v88
                   + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sourceID);
  swift_beginAccess();
  v185 = *v184;
  v186 = *((_BYTE *)v184 + 8);
  v187 = v87;
  v188 = v87 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__sourceID;
  swift_beginAccess();
  if ((v186 & 1) != 0)
  {
    if ((*(_BYTE *)(v188 + 8) & 1) == 0)
      goto LABEL_47;
  }
  else if ((*(_BYTE *)(v188 + 8) & 1) != 0 || v185 != *(_QWORD *)v188)
  {
    goto LABEL_47;
  }
  v189 = v210
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  swift_beginAccess();
  v190 = v207;
  outlined init with copy of (Int32, Matrix2dPB)(v189, v207, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  v191 = v187
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  swift_beginAccess();
  v192 = v209;
  v193 = v209 + *(int *)(v204 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v190, v209, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v191, v193, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  v194 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v205 + 48);
  if (v194(v192, 1, v208) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of Coordinate3DPB?(v207, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
    if (v194(v193, 1, v208) == 1)
    {
      outlined destroy of Coordinate3DPB?(v209, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
      return 1;
    }
    goto LABEL_72;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v209, (uint64_t)v206, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  if (v194(v193, 1, v208) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of Coordinate3DPB?(v207, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v206, type metadata accessor for DetectionResultsByChiralityPB);
LABEL_72:
    v195 = &demangling cache variable for type metadata for (DetectionResultsByChiralityPB?, DetectionResultsByChiralityPB?);
    v196 = v209;
LABEL_78:
    outlined destroy of Coordinate3DPB?(v196, v195);
    return 0;
  }
  v197 = v193;
  v198 = v203;
  outlined init with take of Matrix2dPB(v197, (uint64_t)v203, type metadata accessor for DetectionResultsByChiralityPB);
  if ((specialized static Array<A>.== infix(_:_:)(*v206, *v198) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v206[1], v203[1]) & 1) == 0)
  {
    swift_release();
    swift_release();
    outlined destroy of Matrix3x3PB((uint64_t)v203, type metadata accessor for DetectionResultsByChiralityPB);
    outlined destroy of Coordinate3DPB?(v207, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v206, type metadata accessor for DetectionResultsByChiralityPB);
    v196 = v209;
    v195 = &demangling cache variable for type metadata for DetectionResultsByChiralityPB?;
    goto LABEL_78;
  }
  v199 = v206;
  v200 = (uint64_t)v203;
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v201 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  outlined destroy of Matrix3x3PB(v200, type metadata accessor for DetectionResultsByChiralityPB);
  outlined destroy of Coordinate3DPB?(v207, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v199, type metadata accessor for DetectionResultsByChiralityPB);
  outlined destroy of Coordinate3DPB?(v209, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  return (v201 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance HandsKitDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static HandsKitDataPB._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance HandsKitDataPB()
{
  return 0x74694B73646E6148;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandsKitDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandsKitDataPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandsKitDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandsKitDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandsKitDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandsKitDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandsKitDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandsKitDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandsKitDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  return Message.hash(into:)();
}

uint64_t HandsKitDataSequencePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in HandsKitDataSequencePB.decodeMessage<A>(decoder:)();
  }
  return result;
}

uint64_t closure #1 in HandsKitDataSequencePB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufUInt64();
  type metadata accessor for HandsKitDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t HandsKitDataSequencePB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for ProtobufUInt64(),
        type metadata accessor for HandsKitDataPB(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB), lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
  {
    type metadata accessor for HandsKitDataSequencePB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance HandsKitDataSequencePB@<X0>(unint64_t *a1@<X8>)
{
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandsKitDataSequencePB()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandsKitDataSequencePB()
{
  return HandsKitDataSequencePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandsKitDataSequencePB()
{
  return HandsKitDataSequencePB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandsKitDataSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandsKitDataSequencePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandsKitDataSequencePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandsKitDataSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandsKitDataSequencePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in HandsKitDataSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
}

uint64_t base witness table accessor for Message in HandsKitDataSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
}

uint64_t base witness table accessor for Hashable in HandsKitDataSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
}

uint64_t base witness table accessor for Equatable in HandsKitDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
}

uint64_t base witness table accessor for Message in HandsKitDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
}

uint64_t base witness table accessor for Hashable in HandsKitDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
}

uint64_t base witness table accessor for Equatable in HandsKitDataInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
}

uint64_t base witness table accessor for Message in HandsKitDataInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
}

uint64_t base witness table accessor for Hashable in HandsKitDataInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
}

uint64_t base witness table accessor for Equatable in RejectedHandPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
}

uint64_t base witness table accessor for Message in RejectedHandPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
}

uint64_t base witness table accessor for Hashable in RejectedHandPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandsKitDataInternalPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataInternalPB and conformance HandsKitDataInternalPB, type metadata accessor for HandsKitDataInternalPB, (uint64_t)&protocol conformance descriptor for HandsKitDataInternalPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in RejectedHandPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandsKitDataSequencePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandsKitDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
}

uint64_t specialized static RejectedHandPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v85 = a1;
  v86 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v75 = *(_QWORD *)(v2 - 8);
  v76 = v2;
  MEMORY[0x24BDAC7A8](v2, v3);
  v74 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v73 = (char *)&v71 - v7;
  v82 = type metadata accessor for HandDescriptorPB(0);
  v79 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82, v8);
  v72 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandDescriptorPB?, HandDescriptorPB?));
  MEMORY[0x24BDAC7A8](v78, v10);
  v83 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorPB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v77 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v80 = (uint64_t)&v71 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v81 = (uint64_t)&v71 - v20;
  v21 = type metadata accessor for BasicHandDescriptorPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21, v23);
  v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (BasicHandDescriptorPB?, BasicHandDescriptorPB?));
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicHandDescriptorPB?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = (float *)((char *)&v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v34, v35);
  v37 = (char *)&v71 - v36;
  MEMORY[0x24BDAC7A8](v38, v39);
  v41 = (char *)&v71 - v40;
  v42 = type metadata accessor for RejectedHandPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(v85 + *(int *)(v42 + 24), (uint64_t)v41, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  v84 = v42;
  outlined init with copy of (Int32, Matrix2dPB)(v86 + *(int *)(v42 + 24), (uint64_t)v37, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  v43 = (uint64_t)&v29[*(int *)(v26 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v41, (uint64_t)v29, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v37, v43, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v44((uint64_t)v29, 1, v21) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
    if (v44(v43, 1, v21) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
      goto LABEL_9;
    }
LABEL_6:
    v45 = &demangling cache variable for type metadata for (BasicHandDescriptorPB?, BasicHandDescriptorPB?);
    v46 = (uint64_t)v29;
LABEL_7:
    outlined destroy of Coordinate3DPB?(v46, v45);
    goto LABEL_18;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v33, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  if (v44(v43, 1, v21) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for BasicHandDescriptorPB);
    goto LABEL_6;
  }
  outlined init with take of Matrix2dPB(v43, (uint64_t)v25, type metadata accessor for BasicHandDescriptorPB);
  v47 = specialized static BasicHandDescriptorPB.== infix(_:_:)(v33);
  outlined destroy of Matrix3x3PB((uint64_t)v25, type metadata accessor for BasicHandDescriptorPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for BasicHandDescriptorPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for BasicHandDescriptorPB?);
  if ((v47 & 1) == 0)
    goto LABEL_18;
LABEL_9:
  v49 = v85;
  v48 = v86;
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)v85, *(unsigned __int8 *)(v85 + 8), *(_QWORD *)v86, *(unsigned __int8 *)(v86 + 8)) & 1) == 0)goto LABEL_18;
  v50 = v84;
  v51 = v81;
  outlined init with copy of (Int32, Matrix2dPB)(v49 + *(int *)(v84 + 28), v81, &demangling cache variable for type metadata for HandDescriptorPB?);
  v52 = v80;
  outlined init with copy of (Int32, Matrix2dPB)(v48 + *(int *)(v50 + 28), v80, &demangling cache variable for type metadata for HandDescriptorPB?);
  v53 = v83;
  v54 = v83 + *(int *)(v78 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v51, v83, &demangling cache variable for type metadata for HandDescriptorPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v52, v54, &demangling cache variable for type metadata for HandDescriptorPB?);
  v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  v56 = v82;
  if (v55(v53, 1, v82) != 1)
  {
    v57 = v77;
    outlined init with copy of (Int32, Matrix2dPB)(v53, v77, &demangling cache variable for type metadata for HandDescriptorPB?);
    if (v55(v54, 1, v56) != 1)
    {
      v58 = v72;
      outlined init with take of Matrix2dPB(v54, v72, type metadata accessor for HandDescriptorPB);
      v59 = specialized static HandDescriptorPB.== infix(_:_:)(v57, v58);
      outlined destroy of Matrix3x3PB(v58, type metadata accessor for HandDescriptorPB);
      outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for HandDescriptorPB?);
      outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for HandDescriptorPB?);
      outlined destroy of Matrix3x3PB(v57, type metadata accessor for HandDescriptorPB);
      outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for HandDescriptorPB?);
      if ((v59 & 1) != 0)
        goto LABEL_17;
LABEL_18:
      v68 = 0;
      return v68 & 1;
    }
    outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for HandDescriptorPB?);
    outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for HandDescriptorPB?);
    outlined destroy of Matrix3x3PB(v57, type metadata accessor for HandDescriptorPB);
    goto LABEL_15;
  }
  outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for HandDescriptorPB?);
  outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for HandDescriptorPB?);
  if (v55(v54, 1, v56) != 1)
  {
LABEL_15:
    v45 = &demangling cache variable for type metadata for (HandDescriptorPB?, HandDescriptorPB?);
    v46 = v53;
    goto LABEL_7;
  }
  outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for HandDescriptorPB?);
LABEL_17:
  v60 = v84;
  v61 = v49 + *(int *)(v84 + 20);
  v63 = v75;
  v62 = v76;
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  v65 = v73;
  v64(v73, v61, v76);
  v66 = v48 + *(int *)(v60 + 20);
  v67 = v74;
  v64(v74, v66, v62);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v68 = dispatch thunk of static Equatable.== infix(_:_:)();
  v69 = *(void (**)(char *, uint64_t))(v63 + 8);
  v69(v67, v62);
  v69(v65, v62);
  return v68 & 1;
}

uint64_t specialized static HandsKitDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for HandsKitDataPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static HandsKitDataPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        v16))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static HandsKitDataSequencePB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
  if ((v13 & 1) != 0)
  {
    v14 = type metadata accessor for HandsKitDataSequencePB(0);
    v15 = (char *)a1 + *(int *)(v14 + 20);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v12, v15, v4);
    v16(v8, (char *)a2 + *(int *)(v14 + 20), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v12, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static HandsKitDataInternalPB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v66;
  char v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t *v89;

  v89 = a2;
  v80 = type metadata accessor for UnknownStorage();
  v77 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80, v3);
  v76 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v75 = (char *)&v74 - v7;
  v84 = type metadata accessor for SchedulingDataPB(0);
  v82 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84, v8);
  v78 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SchedulingDataPB?, SchedulingDataPB?));
  MEMORY[0x24BDAC7A8](v81, v10);
  v85 = (uint64_t)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SchedulingDataPB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v79 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v86 = (uint64_t)&v74 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v83 = (uint64_t)&v74 - v20;
  v21 = type metadata accessor for TrackingInfosPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21, v23);
  v87 = (uint64_t *)((char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TrackingInfosPB?, TrackingInfosPB?));
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrackingInfosPB?);
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (uint64_t *)((char *)&v74 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v33, v34);
  v36 = (char *)&v74 - v35;
  MEMORY[0x24BDAC7A8](v37, v38);
  v40 = (char *)&v74 - v39;
  v41 = type metadata accessor for HandsKitDataInternalPB(0);
  v42 = *(int *)(v41 + 32);
  v88 = a1;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a1 + v42, (uint64_t)v40, &demangling cache variable for type metadata for TrackingInfosPB?);
  v43 = v41;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v89 + *(int *)(v41 + 32), (uint64_t)v36, &demangling cache variable for type metadata for TrackingInfosPB?);
  v44 = (uint64_t)&v28[*(int *)(v25 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v40, (uint64_t)v28, &demangling cache variable for type metadata for TrackingInfosPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v36, v44, &demangling cache variable for type metadata for TrackingInfosPB?);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v45((uint64_t)v28, 1, v21) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for TrackingInfosPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for TrackingInfosPB?);
    if (v45(v44, 1, v21) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for TrackingInfosPB?);
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for TrackingInfosPB?);
  if (v45(v44, 1, v21) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for TrackingInfosPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for TrackingInfosPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for TrackingInfosPB);
LABEL_9:
    v52 = &demangling cache variable for type metadata for (TrackingInfosPB?, TrackingInfosPB?);
    v53 = (uint64_t)v28;
LABEL_23:
    outlined destroy of Coordinate3DPB?(v53, v52);
    goto LABEL_24;
  }
  v54 = v87;
  outlined init with take of Matrix2dPB(v44, (uint64_t)v87, type metadata accessor for TrackingInfosPB);
  if (*v32 != *v54 || (specialized static Array<A>.== infix(_:_:)(v32[1], v54[1]) & 1) == 0)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v54, type metadata accessor for TrackingInfosPB);
    outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for TrackingInfosPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for TrackingInfosPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for TrackingInfosPB);
    v53 = (uint64_t)v28;
    v52 = &demangling cache variable for type metadata for TrackingInfosPB?;
    goto LABEL_23;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB((uint64_t)v54, type metadata accessor for TrackingInfosPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for TrackingInfosPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for TrackingInfosPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for TrackingInfosPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for TrackingInfosPB?);
  if ((v55 & 1) == 0)
    goto LABEL_24;
LABEL_4:
  v46 = v41;
  v47 = *(int *)(v41 + 36);
  v49 = v88;
  v48 = v89;
  v50 = *((unsigned __int8 *)v88 + v47);
  v51 = *((unsigned __int8 *)v89 + v47);
  if (v50 == 2)
  {
    if (v51 != 2)
      goto LABEL_24;
  }
  else if (v51 == 2 || ((((v51 & 1) == 0) ^ v50) & 1) == 0)
  {
    goto LABEL_24;
  }
  v56 = (uint64_t)v88 + *(int *)(v43 + 40);
  v57 = v83;
  outlined init with copy of (Int32, Matrix2dPB)(v56, v83, &demangling cache variable for type metadata for SchedulingDataPB?);
  v58 = v86;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v48 + *(int *)(v46 + 40), v86, &demangling cache variable for type metadata for SchedulingDataPB?);
  v59 = v85;
  v60 = v85 + *(int *)(v81 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v57, v85, &demangling cache variable for type metadata for SchedulingDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v58, v60, &demangling cache variable for type metadata for SchedulingDataPB?);
  v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  v62 = v84;
  if (v61(v59, 1, v84) != 1)
  {
    v63 = v79;
    outlined init with copy of (Int32, Matrix2dPB)(v59, v79, &demangling cache variable for type metadata for SchedulingDataPB?);
    if (v61(v60, 1, v62) != 1)
    {
      v66 = v78;
      outlined init with take of Matrix2dPB(v60, v78, type metadata accessor for SchedulingDataPB);
      v67 = specialized static SchedulingDataPB.== infix(_:_:)(v63, v66);
      outlined destroy of Matrix3x3PB(v66, type metadata accessor for SchedulingDataPB);
      outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for SchedulingDataPB?);
      outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for SchedulingDataPB?);
      outlined destroy of Matrix3x3PB(v63, type metadata accessor for SchedulingDataPB);
      outlined destroy of Coordinate3DPB?(v59, &demangling cache variable for type metadata for SchedulingDataPB?);
      if ((v67 & 1) == 0)
        goto LABEL_24;
      goto LABEL_27;
    }
    outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for SchedulingDataPB?);
    outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for SchedulingDataPB?);
    outlined destroy of Matrix3x3PB(v63, type metadata accessor for SchedulingDataPB);
    goto LABEL_22;
  }
  outlined destroy of Coordinate3DPB?(v58, &demangling cache variable for type metadata for SchedulingDataPB?);
  outlined destroy of Coordinate3DPB?(v57, &demangling cache variable for type metadata for SchedulingDataPB?);
  if (v61(v60, 1, v62) != 1)
  {
LABEL_22:
    v52 = &demangling cache variable for type metadata for (SchedulingDataPB?, SchedulingDataPB?);
    v53 = v59;
    goto LABEL_23;
  }
  outlined destroy of Coordinate3DPB?(v59, &demangling cache variable for type metadata for SchedulingDataPB?);
LABEL_27:
  if ((specialized static Array<A>.== infix(_:_:)(*v49, *v48) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(v49[1], v48[1]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(v49[2], v48[2]) & 1) != 0)
  {
    v68 = v77;
    v69 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v70 = v75;
    v71 = v80;
    v69(v75, (char *)v49 + *(int *)(v46 + 28), v80);
    v72 = v76;
    v69(v76, (char *)v48 + *(int *)(v46 + 28), v71);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v64 = dispatch thunk of static Equatable.== infix(_:_:)();
    v73 = *(void (**)(char *, uint64_t))(v68 + 8);
    v73(v72, v71);
    v73(v70, v71);
    return v64 & 1;
  }
LABEL_24:
  v64 = 0;
  return v64 & 1;
}

uint64_t DoublePinchRecovery.process(_:_:)@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t (*v12)(_QWORD);
  uint64_t result;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  char v19;
  _OWORD v20[4];
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;

  v7 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(unsigned __int8 *)(v3 + 16);
  result = outlined init with copy of TrackingUpdateDataPB(a1, a3, v12);
  if (v11 == 1)
  {
    DoublePinchRecovery.updateInternalStatesOnMakeBreak(_:_:)(a3, (uint64_t)a2);
    outlined init with copy of TrackingUpdateDataPB(a3, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v14 = *(_OWORD *)(v3 + 144);
    v22[2] = *(_OWORD *)(v3 + 128);
    v22[3] = v14;
    v23 = *(_QWORD *)(v3 + 160);
    v15 = *(_OWORD *)(v3 + 112);
    v22[0] = *(_OWORD *)(v3 + 96);
    v22[1] = v15;
    v16 = DoublePinchRecovery.checkForValidPinchBreak(_:_:_:)((uint64_t)v10, a2, (uint64_t)v22);
    v17 = *(_OWORD *)(v3 + 144);
    v20[2] = *(_OWORD *)(v3 + 128);
    v20[3] = v17;
    v21 = *(_QWORD *)(v3 + 160);
    v18 = *(_OWORD *)(v3 + 112);
    v20[0] = *(_OWORD *)(v3 + 96);
    v20[1] = v18;
    v19 = DoublePinchRecovery.checkForValidPinchMake(_:_:_:)((uint64_t)v10, a2, (uint64_t)v20);
    outlined destroy of Matrix3x3PB((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    return DoublePinchRecovery.updateState(_:_:_:_:)(a3, (uint64_t)a2, v16, v19);
  }
  return result;
}

uint64_t DoublePinchRecovery.updateInternalStatesOnMakeBreak(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t (*v17)(_QWORD);
  char v18;
  int v19;
  uint64_t result;
  int v21;
  _DWORD *v23;
  __int128 *v24;
  float32x4_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[4];
  int v43;
  uint64_t v44;
  __int128 v45;
  float32x4_t v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v51[7];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;
  _OWORD v69[4];
  uint64_t v70;

  v5 = type metadata accessor for HandDescriptor();
  v7 = MEMORY[0x24BDAC7A8](v5, v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7, v10);
  v12 = &v42[-v11];
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v44 = *(_QWORD *)(a2 + 64);
  v43 = *(unsigned __int8 *)(a2 + 72);
  v45 = *(_OWORD *)(a2 + 80);
  v15 = (_QWORD *)(v2 + 96);
  v16 = *(unsigned __int8 *)(v2 + 145);
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)&v42[-v11], v17);
  if (v16 == 1)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  else
  {
    v18 = v12[4];
    outlined destroy of Matrix3x3PB((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((v18 & 1) != 0)
    {
      *v15 = 0;
      *(_QWORD *)(v2 + 104) = 0;
      *(_QWORD *)(v2 + 112) = 0;
      *(_BYTE *)(v2 + 120) = 1;
      *(_QWORD *)(v2 + 128) = 0;
      *(_QWORD *)(v2 + 136) = 0;
      *(_WORD *)(v2 + 144) = 257;
      *(_QWORD *)(v2 + 152) = 0;
      *(_QWORD *)(v2 + 160) = 0;
      outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      goto LABEL_7;
    }
  }
  v19 = *(unsigned __int8 *)(v2 + 145);
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v19 != 1)
    return outlined destroy of Matrix3x3PB((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
LABEL_7:
  v21 = v9[4];
  result = outlined destroy of Matrix3x3PB((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v21 != 2 && (v21 & 1) == 0)
  {
    v23 = (_DWORD *)(a2 + 73);
    v24 = (__int128 *)(a2 + 96);
    v25 = *(float32x4_t *)(a2 + 16);
    v46[0] = *(float32x4_t *)a2;
    v46[1] = v25;
    v46[2] = *(float32x4_t *)(a2 + 32);
    v47 = v13;
    v48 = v14;
    v26 = v44;
    v49 = v44;
    v27 = v43;
    v50 = v43;
    *(_DWORD *)v51 = *v23;
    *(_DWORD *)&v51[3] = *(_DWORD *)((char *)v23 + 3);
    v28 = *v24;
    v29 = v24[2];
    v30 = v24[3];
    v54 = v24[1];
    v55 = v29;
    v52 = v45;
    v53 = v28;
    v31 = v24[4];
    v32 = v24[6];
    v33 = v24[7];
    v58 = v24[5];
    v59 = v32;
    v56 = v30;
    v57 = v31;
    v34 = v24[8];
    v35 = v24[10];
    v36 = v24[11];
    v62 = v24[9];
    v63 = v35;
    v60 = v33;
    v61 = v34;
    v37 = v24[12];
    v38 = v24[13];
    v39 = v24[14];
    v68 = *((_BYTE *)v24 + 240);
    v66 = v38;
    v67 = v39;
    v64 = v36;
    v65 = v37;
    v40 = *(_OWORD *)(v2 + 144);
    v69[2] = *(_OWORD *)(v2 + 128);
    v69[3] = v40;
    v70 = *(_QWORD *)(v2 + 160);
    v41 = *(_OWORD *)(v2 + 112);
    v69[0] = *(_OWORD *)v15;
    v69[1] = v41;
    result = DoublePinchRecovery.checkForValidPinchBreak(_:_:_:)(a1, v46, (uint64_t)v69);
    if (result == 7)
    {
      *(_QWORD *)(v2 + 96) = v13;
      *(_QWORD *)(v2 + 104) = v14;
      *(_QWORD *)(v2 + 112) = v26;
      *(_BYTE *)(v2 + 120) = v27 & 1;
      *(_OWORD *)(v2 + 128) = v45;
      *(_BYTE *)(v2 + 144) = 0;
    }
    *(_BYTE *)(v2 + 145) = 0;
  }
  return result;
}

uint64_t DoublePinchRecovery.updateState(_:_:_:_:)(uint64_t result, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = result;
  if (a3 == 7)
    result = DoublePinchRecovery.doublePinchBreakDetected(_:_:)(result, a2);
  if (a4 == 7)
  {
    v8 = *(_QWORD *)(v4 + 160);
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
    {
      __break(1u);
      goto LABEL_14;
    }
    *(_QWORD *)(v4 + 160) = v10;
    if (v10 >= *(_QWORD *)(v4 + 40))
      result = DoublePinchRecovery.doublePinchMakeDetected(_:_:)(v7, a2);
  }
  else
  {
    *(_QWORD *)(v4 + 160) = 0;
    if (a4 == 2)
    {
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 104) = 0;
      *(_QWORD *)(v4 + 112) = 0;
      *(_BYTE *)(v4 + 120) = 1;
    }
  }
  if (*(_BYTE *)(v4 + 145) != 1)
    return result;
  v11 = *(_QWORD *)(v4 + 152);
  v9 = __OFADD__(v11, 1);
  v12 = v11 + 1;
  if (v9)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v4 + 152) = v12;
  return result;
}

uint64_t DoublePinchRecovery.checkForValidPinchBreak(_:_:_:)(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  float v6;
  float v7;
  uint64_t inited;
  unint64_t v9;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
    return 0;
  v13 = a2[1];
  v14 = *a2;
  v6 = a2[2].f32[0];
  v7 = *(float *)(a1 + 276);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  *(_QWORD *)(inited + 32) = a2[6].i64[0];
  v9 = specialized Sequence<>.max()(inited);
  swift_setDeallocating();
  if ((v9 & 0x100000000) != 0)
    return 0;
  if ((*(_BYTE *)(a3 + 49) & 1) == 0)
    return 1;
  if (*(float *)(v3 + 48) < v6)
    return 2;
  if (*(_QWORD *)(a3 + 56) < *(_QWORD *)(v3 + 72))
    return 3;
  if (*(float *)(v3 + 56) < *(float *)&v9)
    return 4;
  if (*(float *)(v3 + 24) < v7)
    return 5;
  v11 = vmulq_f32(v14, v14);
  v12 = vmulq_f32(v13, v13);
  if (vabds_f32(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])) >= *(float *)(v3 + 64))return 6;
  else
    return 7;
}

uint64_t DoublePinchRecovery.checkForValidPinchMake(_:_:_:)(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  CMTimeValue v6;
  uint64_t v7;
  CMTimeEpoch v8;
  uint64_t v9;
  float v10;
  uint64_t inited;
  unint64_t v12;
  CMTimeScale v14;
  CMTimeFlags v15;
  uint64_t v16;
  CMTimeEpoch v17;
  double Seconds;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  CMTimeValue v24;
  float32x4_t v25;
  CMTime time;
  _BYTE v27[20];
  _BYTE v28[28];
  CMTimeValue v29;
  CMTimeScale v30;
  CMTimeFlags v31;
  CMTimeEpoch v32;
  char v33;
  float32x4_t v34;
  char v35;

  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
    return 0;
  if ((a2[4].i8[8] & 1) != 0)
    return 0;
  v6 = a2[3].i64[0];
  v7 = a2[3].i64[1];
  v8 = a2[4].i64[0];
  v25 = a2[5];
  v9 = a2[6].i64[0];
  v10 = *(float *)(a1 + 276);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  *(_QWORD *)(inited + 32) = v9;
  v12 = specialized Sequence<>.max()(inited);
  swift_setDeallocating();
  if ((v12 & 0x100000000) != 0)
    return 0;
  if ((*(_BYTE *)(v3 + 145) & 1) != 0)
    return 1;
  outlined init with take of ImageData?(a3, (uint64_t)v28, &demangling cache variable for type metadata for CMTime?);
  outlined init with take of ImageData?((uint64_t)v28, (uint64_t)&v29, &demangling cache variable for type metadata for CMTime?);
  if ((v33 & 1) != 0)
    return 2;
  v24 = v29;
  v14 = v30;
  v15 = v31;
  v16 = a3 + 32;
  v17 = v32;
  outlined init with take of ImageData?(v16, (uint64_t)v27, &demangling cache variable for type metadata for SIMD3<Float>?);
  outlined init with take of ImageData?((uint64_t)v27, (uint64_t)&v34, &demangling cache variable for type metadata for SIMD3<Float>?);
  if ((v35 & 1) != 0)
    return 2;
  v23 = v34;
  if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
  {
    time.value = v6;
    *(_QWORD *)&time.timescale = v7;
    time.epoch = v8;
    Seconds = CMTimeGetSeconds(&time);
    time.value = v24;
    time.timescale = v14;
    time.flags = v15;
    time.epoch = v17;
    v19 = Seconds - CMTimeGetSeconds(&time);
    v20 = fabsf(v19);
  }
  else
  {
    v20 = INFINITY;
  }
  if (*(float *)(v3 + 32) <= v20)
    return 2;
  v21 = vsubq_f32(v23, v25);
  v22 = vmulq_f32(v21, v21);
  if (*(float *)(v3 + 52) < sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]))return 3;
  if (*(float *)(v3 + 60) < *(float *)&v12)
    return 4;
  if (v10 < *(float *)(v3 + 28))
    return 5;
  if (specialized DoublePinchRecovery.checkForOcclusion(_:)(a1))
    return 6;
  return 7;
}

uint64_t DoublePinchRecovery.doublePinchBreakDetected(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v5 = (int *)type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for HandPinchEvent(0);
  result = MEMORY[0x24BDAC7A8](v30, v9);
  v31 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1 + v5[27];
  if ((*(_BYTE *)(v12 + 8) & 1) != 0)
    v13 = 64;
  else
    v13 = *(_QWORD *)v12 | 0x40;
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_BYTE *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v12 = v13;
  *(_BYTE *)(v12 + 8) = 0;
  *(_BYTE *)(a1 + 4) = 0;
  v20 = *(unsigned __int8 *)(v2 + 80);
  if (v20 == 2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((v20 & 1) != 0)
  {
    v29 = v14;
    v21 = a1 + v5[24];
    v22 = type metadata accessor for HandDescriptorInternal();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22);
    if ((_DWORD)result != 1)
    {
      if (*(_QWORD *)(v21 + 48))
      {
        *(_QWORD *)(v21 + 32) = 13;
        *(_BYTE *)(v21 + 40) = 1;
        v14 = v29;
        goto LABEL_9;
      }
LABEL_18:
      __break(1u);
      return result;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_9:
  *(_QWORD *)(v2 + 96) = v14;
  *(_QWORD *)(v2 + 104) = v15;
  *(_QWORD *)(v2 + 112) = v16;
  *(_BYTE *)(v2 + 120) = v17;
  *(_QWORD *)(v2 + 128) = v19;
  *(_QWORD *)(v2 + 136) = v18;
  *(_WORD *)(v2 + 144) = 0;
  if ((v17 & 1) != 0)
  {
    v37 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v35 = 0xD000000000000010;
    *((_QWORD *)&v35 + 1) = 0x800000023D9D91C0;
    type metadata accessor for HandyLoggerNeo();
    v32 = xmmword_23D9A9560;
    v33 = 0;
    v34 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v32, 0xD000000000000088, 0x800000023D9D9130, 218, (uint64_t)&v35, MEMORY[0x24BEE4AF8]);
    v23 = &v35;
  }
  else
  {
    v24 = v14;
    v25 = a1 + v5[28];
    if ((*(_BYTE *)(v25 + 49) & 1) == 0 && (*(_BYTE *)(v25 + 32) & 1) == 0)
      *(_QWORD *)(v25 + 8) |= 8uLL;
    outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v26 = v31;
    static HandPinchEvent.generateDoublePinchRecoveryEvent(hand:timestamp:)((uint64_t)v8, v24, v15, v31);
    outlined destroy of Matrix3x3PB((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v35 = xmmword_23D9AB690;
    v36 = 0;
    v37 = 0;
    v34 = v30;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v32);
    outlined init with copy of TrackingUpdateDataPB(v26, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandPinchEvent);
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000088, 0x800000023D9D9130, 223, (uint64_t *)&v35, (uint64_t)&v32, MEMORY[0x24BEE4AF8]);
    outlined destroy of Matrix3x3PB(v26, type metadata accessor for HandPinchEvent);
    v23 = &v32;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
}

uint64_t DoublePinchRecovery.doublePinchMakeDetected(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t *boxed_opaque_existential_0;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v5 = (int *)type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandPinchEvent(0);
  result = MEMORY[0x24BDAC7A8](v9, v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 120) = 1;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 144) = 257;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  v18 = *(unsigned __int8 *)(v2 + 80);
  if (v18 == 2)
  {
    __break(1u);
    goto LABEL_17;
  }
  v26[1] = v16;
  if ((v18 & 1) != 0)
  {
    v19 = a1 + v5[24];
    v20 = type metadata accessor for HandDescriptorInternal();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20);
    if ((_DWORD)result != 1)
    {
      if (*(_QWORD *)(v19 + 48))
      {
        *(_QWORD *)(v19 + 32) = 13;
        *(_BYTE *)(v19 + 40) = 1;
        goto LABEL_6;
      }
LABEL_18:
      __break(1u);
      return result;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_6:
  v21 = a1 + v5[27];
  if ((*(_BYTE *)(v21 + 8) & 1) != 0)
    v22 = 512;
  else
    v22 = *(_QWORD *)v21 | 0x200;
  *(_QWORD *)v21 = v22;
  *(_BYTE *)(v21 + 8) = 0;
  if ((v17 & 1) != 0)
  {
    v32 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v30 = 0xD000000000000010;
    *((_QWORD *)&v30 + 1) = 0x800000023D9D91C0;
    type metadata accessor for HandyLoggerNeo();
    v27 = xmmword_23D9A9560;
    v28 = 0;
    v29 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v27, 0xD000000000000088, 0x800000023D9D9130, 235, (uint64_t)&v30, MEMORY[0x24BEE4AF8]);
    v23 = &v30;
  }
  else
  {
    v24 = a1 + v5[28];
    if ((*(_BYTE *)(v24 + 49) & 1) == 0 && (*(_BYTE *)(v24 + 32) & 1) == 0)
      *(_QWORD *)v24 |= 0x10uLL;
    outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    static HandPinchEvent.generateDoublePinchRecoveryEvent(hand:timestamp:)((uint64_t)v8, v14, v15, (uint64_t)v13);
    outlined destroy of Matrix3x3PB((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v30 = xmmword_23D9AB690;
    v31 = 0;
    v32 = 0;
    v29 = v9;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v27);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v13, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandPinchEvent);
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000088, 0x800000023D9D9130, 240, (uint64_t *)&v30, (uint64_t)&v27, MEMORY[0x24BEE4AF8]);
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandPinchEvent);
    v23 = &v27;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
}

uint64_t type metadata accessor for DoublePinchRecovery()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for DoublePinchRecoveryConfig(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[64])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DoublePinchRecoveryConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DoublePinchRecoveryConfig()
{
  return &type metadata for DoublePinchRecoveryConfig;
}

__n128 __swift_memcpy72_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for InternalStates(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 49);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalStates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_BYTE *)(result + 49) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalStates()
{
  return &type metadata for InternalStates;
}

BOOL specialized DoublePinchRecovery.checkForOcclusion(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = type metadata accessor for HandDescriptor();
  v4 = MEMORY[0x24BDAC7A8](v2, v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v7);
  v9 = (char *)&v16 - v8;
  if ((*(_BYTE *)(a1 + 249) & 1) != 0)
  {
    outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)&v16 - v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 240);
    outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)&v16 - v8, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v10 == 2)
    {
      outlined destroy of Matrix3x3PB((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      goto LABEL_8;
    }
  }
  v11 = *((_QWORD *)v9 + 30);
  v12 = v9[249];
  outlined destroy of Matrix3x3PB((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v12 & 1) != 0)
  {
    outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    goto LABEL_9;
  }
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v11 == 1)
  {
LABEL_8:
    outlined destroy of Matrix3x3PB((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    return 1;
  }
LABEL_9:
  v14 = *((_QWORD *)v6 + 30);
  v15 = v6[249];
  outlined destroy of Matrix3x3PB((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  return (v15 & 1) == 0 && v14 == 3;
}

ValueMetadata *type metadata accessor for ThresholdConfig()
{
  return &type metadata for ThresholdConfig;
}

uint64_t storeEnumTagSinglePayload for SettingConfig(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D905B14 + 4 * byte_23D9BF9B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D905B48 + 4 * byte_23D9BF9B0[v4]))();
}

uint64_t sub_23D905B48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D905B50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D905B58);
  return result;
}

uint64_t sub_23D905B64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D905B6CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D905B70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D905B78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SettingConfig()
{
  return &type metadata for SettingConfig;
}

uint64_t PrewiringHelper.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PrewiringHelper()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for PrewiringHelper.PrewiringStage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23D905C34 + 4 * byte_23D9BFA4D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23D905C68 + 4 * asc_23D9BFA48[v4]))();
}

uint64_t sub_23D905C68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D905C70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D905C78);
  return result;
}

uint64_t sub_23D905C84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D905C8CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23D905C90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D905C98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrewiringHelper.PrewiringStage()
{
  return &type metadata for PrewiringHelper.PrewiringStage;
}

unint64_t lazy protocol witness table accessor for type PrewiringHelper.PrewiringStage and conformance PrewiringHelper.PrewiringStage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrewiringHelper.PrewiringStage and conformance PrewiringHelper.PrewiringStage;
  if (!lazy protocol witness table cache variable for type PrewiringHelper.PrewiringStage and conformance PrewiringHelper.PrewiringStage)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PrewiringHelper.PrewiringStage, &type metadata for PrewiringHelper.PrewiringStage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrewiringHelper.PrewiringStage and conformance PrewiringHelper.PrewiringStage);
  }
  return result;
}

uint64_t MetalCropProcessor.init(config:cropWidth:cropHeight:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t inited;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  NSDictionary v40;
  CVReturn v41;
  uint64_t v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  CVPixelBufferPoolRef v71;
  id v72;
  void *v73;
  id v74;
  void *v75;
  id v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  CVPixelBufferPoolRef poolOut[3];

  v4 = v3;
  poolOut[1] = *(CVPixelBufferPoolRef *)MEMORY[0x24BDAC8D0];
  *(_QWORD *)(v3 + 16) = 16;
  MTLSizeMake(16, 16, &v87);
  v8 = v88;
  *(_OWORD *)(v3 + 24) = v87;
  *(_QWORD *)(v3 + 40) = v8;
  MTLSizeMake(8, 8, &v87);
  v9 = v88;
  *(_OWORD *)(v3 + 48) = v87;
  *(_QWORD *)(v3 + 64) = v9;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = a2;
  v80 = a2;
  v81 = a3;
  *(_QWORD *)(v3 + 136) = a3;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v83 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v11 = objc_msgSend(a1, sel_PoseCropMode);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  if (v12 == 909201478 && v14 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v15 = 0x800000023D9D9470;
    v16 = 0xD000000000000012;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      v16 = 0xD000000000000012;
    else
      v16 = 0x706172676F6D6F48;
    if ((v17 & 1) != 0)
      v15 = 0x800000023D9D9470;
    else
      v15 = 0xEE00706F72437968;
  }
  v18 = objc_msgSend(a1, sel_PoseCropMode);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v82 = a1;
  if (v19 == 909201478 && v21 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v79 = 0xD00000000000001DLL;
    v22 = 0x800000023D9D9450;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v24 = 0xD000000000000019;
    if ((v23 & 1) != 0)
      v24 = 0xD00000000000001DLL;
    v79 = v24;
    if ((v23 & 1) != 0)
      v22 = 0x800000023D9D9450;
    else
      v22 = 0x800000023D9D93D0;
  }
  poolOut[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A8140;
  v26 = (void *)*MEMORY[0x24BDC5708];
  v27 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC5708];
  *(_QWORD *)(inited + 40) = v80;
  v28 = (void *)*MEMORY[0x24BDC5650];
  *(_QWORD *)(inited + 64) = v27;
  *(_QWORD *)(inited + 72) = v28;
  *(_QWORD *)(inited + 80) = a3;
  v29 = (void *)*MEMORY[0x24BDC56B8];
  *(_QWORD *)(inited + 104) = v27;
  *(_QWORD *)(inited + 112) = v29;
  v30 = MEMORY[0x24BEE44F0];
  *(_DWORD *)(inited + 120) = 1278226534;
  v31 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(inited + 144) = v30;
  *(_QWORD *)(inited + 152) = v31;
  v32 = v26;
  v33 = v28;
  v34 = v29;
  v35 = v31;
  v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  *(_QWORD *)(inited + 160) = v36;
  v38 = (void *)*MEMORY[0x24BDC55D0];
  *(_QWORD *)(inited + 184) = v37;
  *(_QWORD *)(inited + 192) = v38;
  *(_QWORD *)(inited + 224) = v27;
  *(_QWORD *)(inited + 200) = 64;
  v39 = v38;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  v40.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v41 = CVPixelBufferPoolCreate(0, 0, v40.super.isa, poolOut);
  v42 = MEMORY[0x24BEE0D00];
  if (v41)
  {
    v89 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v87 = 0xD000000000000042;
    *((_QWORD *)&v87 + 1) = 0x800000023D9CE6F0;
    type metadata accessor for HandyLoggerNeo();
    v84 = xmmword_23D9B16F0;
    v85 = 0;
    v86 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v84, 0xD00000000000006FLL, 0x800000023D9D9310, 46, (uint64_t)&v87, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v87);
  }
  v43 = MTLCreateSystemDefaultDevice();
  v44 = v82;
  if (!v43)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_41:
    v89 = v42;
    *(_QWORD *)&v87 = 0xD000000000000035;
    *((_QWORD *)&v87 + 1) = 0x800000023D9D93F0;
    type metadata accessor for HandyLoggerNeo();
    v84 = xmmword_23D9B16F0;
    v85 = 0;
    v86 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v84, 0xD00000000000006FLL, 0x800000023D9D9310, 56, (uint64_t)&v87, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v87);
    v71 = poolOut[0];
    goto LABEL_42;
  }
  v45 = v43;
  *(_QWORD *)&v87 = 0;
  v46 = objc_msgSend(v43, sel_newDefaultLibraryWithBundle_error_, v83, &v87);
  if (!v46)
  {
    v72 = (id)v87;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();
LABEL_40:
    v42 = MEMORY[0x24BEE0D00];
    goto LABEL_41;
  }
  v47 = v46;
  v48 = (id)v87;
  v49 = (void *)MEMORY[0x2426372E8](v16, v15);
  swift_bridgeObjectRelease();
  v50 = objc_msgSend(v47, sel_newFunctionWithName_, v49);

  if (!v50)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
LABEL_39:
    v44 = v82;
    goto LABEL_40;
  }
  *(_QWORD *)&v87 = 0;
  v51 = objc_msgSend(v45, sel_newComputePipelineStateWithFunction_error_, v50, &v87);
  if (!v51)
  {
    v74 = (id)v87;
    swift_bridgeObjectRelease();
    v75 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

LABEL_38:
    swift_unknownObjectRelease();
    goto LABEL_39;
  }
  v52 = v51;
  v53 = (id)v87;
  v54 = (void *)MEMORY[0x2426372E8](v79, v22);
  swift_bridgeObjectRelease();
  v55 = objc_msgSend(v47, sel_newFunctionWithName_, v54);

  if (!v55)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_38;
  }
  *(_QWORD *)&v87 = 0;
  v56 = objc_msgSend(v45, sel_newComputePipelineStateWithFunction_error_, v55, &v87);
  v44 = v82;
  if (!v56)
  {
    v77 = (id)v87;
    v78 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_40;
  }
  v57 = v56;
  v58 = (id)v87;
  v59 = objc_msgSend(v45, sel_newCommandQueue);
  if (!v59)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_40;
  }
  v60 = v57;
  v61 = v59;
  MTLSizeMake(16, 16, &v87);
  v62 = v88;
  *(_OWORD *)(v4 + 24) = v87;
  *(_QWORD *)(v4 + 40) = v62;
  MTLSizeMake(v80 / 16, v81 / 16, &v87);
  v63 = v88;
  *(_OWORD *)(v4 + 48) = v87;
  *(_QWORD *)(v4 + 64) = v63;
  *(_QWORD *)(v4 + 72) = v45;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 80) = v47;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 88) = v61;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v64 = *(void **)(v4 + 88);
  if (v64)
  {
    swift_unknownObjectRetain();
    v65 = (void *)MEMORY[0x2426372E8](0xD000000000000015, 0x800000023D9D9430);
    objc_msgSend(v64, sel_setLabel_, v65);
    swift_unknownObjectRelease();

  }
  *(_QWORD *)(v4 + 96) = v52;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(v4 + 104) = v60;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v66 = objc_msgSend((id)objc_opt_self(), sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 55, v80, v81, 0);
  v67 = *(void **)(v4 + 112);
  *(_QWORD *)(v4 + 112) = v66;

  v68 = *(void **)(v4 + 112);
  if (v68)
  {
    objc_msgSend(v68, sel_setStorageMode_, 0);
    v69 = *(void **)(v4 + 112);
    if (v69)
    {
      v70 = v69;
      objc_msgSend(v70, sel_setUsage_, 2);

    }
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v71 = *(CVPixelBufferPoolRef *)(v4 + 120);
  *(CVPixelBufferPoolRef *)(v4 + 120) = poolOut[0];
LABEL_42:

  return v4;
}

__IOSurface *MetalCropProcessor.doCrop(_:_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v5;
  __CVBuffer *v6;
  IOSurfaceRef IOSurface;
  __IOSurface *v8;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  id v11;
  void *v12;
  id v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CVBufferRef_optional v20;
  CVBufferRef value;
  IOSurfaceRef v22;
  void *v23;
  __IOSurface *result;
  __IOSurface *v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __IOSurface *v36;
  id v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[7];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *(void **)(a1 + 56);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(a1 + 64);
  v6 = v3;
  IOSurface = CVPixelBufferGetIOSurface(v6);
  if (!IOSurface)
  {
LABEL_18:

    return 0;
  }
  v8 = IOSurface;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(v6, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(v6, 0);
  v11 = objc_msgSend((id)objc_opt_self(), sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 13, WidthOfPlane, HeightOfPlane, 0);
  v12 = *(void **)(v2 + 72);
  if (!v12 || (v13 = objc_msgSend(v12, sel_newTextureWithDescriptor_iosurface_plane_, v11, v8, 0)) == 0)
  {

    goto LABEL_18;
  }
  v14 = v13;
  swift_beginAccess();
  v15 = *(_OWORD *)(v5 + 80);
  v16 = *(_OWORD *)(v5 + 96);
  v42[0] = *(_OWORD *)(v5 + 64);
  v42[1] = v15;
  v17 = *a2;
  v18 = a2[1];
  v42[2] = v16;
  v42[3] = v17;
  v19 = a2[2];
  v42[4] = v18;
  v42[5] = v19;
  swift_beginAccess();
  v42[6] = *(_OWORD *)(v5 + 112);
  v20.value = MetalCropProcessor.createPixelBuffer()().value;
  if (!v20.value)
  {
LABEL_17:

    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  value = v20.value;
  v22 = CVPixelBufferGetIOSurface(v20.value);
  if (!v22)
  {

    goto LABEL_17;
  }
  v23 = *(void **)(v2 + 72);
  result = v22;
  v25 = result;
  if (!v23)
    goto LABEL_15;
  v26 = *(_QWORD *)(v2 + 112);
  if (!v26)
  {
    __break(1u);
    goto LABEL_34;
  }
  v37 = objc_msgSend(v23, sel_newTextureWithDescriptor_iosurface_plane_, v26, result, 0);
  if (!v37)
  {
LABEL_15:

    swift_unknownObjectRelease();
    v6 = (__CVBuffer *)v11;
    goto LABEL_18;
  }
  v36 = v25;
  v27 = *(void **)(v2 + 88);
  if (v27)
  {
    v28 = objc_msgSend(v27, sel_commandBuffer, v25);
    if (v28)
    {
      swift_unknownObjectRetain();
      v29 = (void *)MEMORY[0x2426372E8](0xD00000000000001CLL, 0x800000023D9D9380);
      objc_msgSend(v28, sel_setLabel_, v29);
      swift_unknownObjectRelease();

      v30 = objc_msgSend(v28, sel_computeCommandEncoder);
      if (v30)
      {
        swift_unknownObjectRetain();
        v31 = (void *)MEMORY[0x2426372E8](0xD000000000000023, 0x800000023D9D93A0);
        objc_msgSend(v30, sel_setLabel_, v31);
        swift_unknownObjectRelease();

      }
    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    v30 = 0;
    v28 = 0;
  }
  result = (__IOSurface *)swift_beginAccess();
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v37;
    if (!v30)
    {
LABEL_30:
      if (v28)
      {
        objc_msgSend(v28, sel_commit);
        objc_msgSend(v28, sel_waitUntilCompleted);
      }
      v32 = specialized MetalCropProcessor.zNormalize(pixelBuffer:width:height:)(value, *(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 136));

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      return (__IOSurface *)v32;
    }
    if (*(_QWORD *)(v2 + 96))
    {
LABEL_29:
      objc_msgSend(v30, sel_setComputePipelineState_, v36);
      objc_msgSend(v30, sel_setTexture_atIndex_, v33, 0);
      objc_msgSend(v30, sel_setTexture_atIndex_, v14, 1);
      objc_msgSend(v30, sel_setBytes_length_atIndex_, v42, 112, 2);
      v34 = *(_QWORD *)(v2 + 40);
      v35 = *(_QWORD *)(v2 + 64);
      v40 = *(_OWORD *)(v2 + 24);
      v41 = v34;
      v38 = *(_OWORD *)(v2 + 48);
      v39 = v35;
      objc_msgSend(v30, sel_dispatchThreadgroups_threadsPerThreadgroup_, &v40, &v38);
      objc_msgSend(v30, sel_endEncoding);
      goto LABEL_30;
    }
    __break(1u);
  }
  v33 = v37;
  if (!v30)
    goto LABEL_30;
  if (*(_QWORD *)(v2 + 104))
    goto LABEL_29;
LABEL_34:
  __break(1u);
  return result;
}

CVBufferRef_optional __swiftcall MetalCropProcessor.createPixelBuffer()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  CFAllocatorRef *v3;
  const __CFAllocator *v4;
  id v5;
  CVPixelBufferRef v6;
  IOSurfaceRef IOSurface;
  BOOL v8;
  uint64_t inited;
  void **v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  id v22;
  NSDictionary v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  CVPixelBufferRef pixelBufferOut[2];

  v1 = v0;
  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  pixelBufferOut[0] = 0;
  v2 = *(void **)(v0 + 120);
  v3 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v5 = v2;
    if (CVPixelBufferPoolCreatePixelBuffer(v4, (CVPixelBufferPoolRef)v5, pixelBufferOut))
    {

      pixelBufferOut[0] = 0;
      v30 = MEMORY[0x24BEE0D00];
      v28 = 0xD00000000000004DLL;
      v29 = 0x800000023D9CE900;
      type metadata accessor for HandyLoggerNeo();
      v25 = xmmword_23D9A7060;
      v26 = 0;
      v27 = 0;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v25, 0xD00000000000006FLL, 0x800000023D9D9310, 164, (uint64_t)&v28, MEMORY[0x24BEE4AF8]);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28);
    }
    else
    {

    }
  }
  v6 = pixelBufferOut[0];
  IOSurface = CVPixelBufferGetIOSurface(pixelBufferOut[0]);
  if (v6)
    v8 = IOSurface == 0;
  else
    v8 = 1;
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
    inited = swift_initStackObject();
    v10 = (void **)MEMORY[0x24BDC5690];
    *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
    v11 = *v10;
    *(_QWORD *)(inited + 32) = v11;
    v12 = MEMORY[0x24BEE1328];
    *(_BYTE *)(inited + 40) = 1;
    v13 = (void *)*MEMORY[0x24BDC55E8];
    *(_QWORD *)(inited + 64) = v12;
    *(_QWORD *)(inited + 72) = v13;
    *(_BYTE *)(inited + 80) = 1;
    v14 = (void *)*MEMORY[0x24BDC5668];
    *(_QWORD *)(inited + 104) = v12;
    *(_QWORD *)(inited + 112) = v14;
    v15 = v11;
    v16 = v13;
    v17 = v14;
    v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    v20 = (void **)MEMORY[0x24BDC55E0];
    *(_QWORD *)(inited + 120) = v18;
    v21 = *v20;
    *(_QWORD *)(inited + 144) = v19;
    *(_QWORD *)(inited + 152) = v21;
    *(_QWORD *)(inited + 184) = v12;
    *(_BYTE *)(inited + 160) = 1;
    v22 = v21;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    v23.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (CVPixelBufferCreate(*v3, *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), 0x4C303066u, v23.super.isa, pixelBufferOut)|| (v6 = pixelBufferOut[0]) == 0)
    {
      v30 = MEMORY[0x24BEE0D00];
      v28 = 0xD00000000000001DLL;
      v29 = 0x800000023D9C47D0;
      specialized static HLog.E(file:function:line:_:_:)(0xD00000000000006FLL, 0x800000023D9D9310, 185, (uint64_t)&v28, MEMORY[0x24BEE4AF8]);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28);
      v6 = 0;
      v23.super.isa = pixelBufferOut[0];
    }

  }
  return (CVBufferRef_optional)v6;
}

uint64_t MetalCropProcessor.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v0;
}

uint64_t MetalCropProcessor.__deallocating_deinit()
{
  MetalCropProcessor.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MetalCropProcessor()
{
  return objc_opt_self();
}

__IOSurface *protocol witness for ImageCropProcessor.doCrop(_:_:) in conformance MetalCropProcessor(uint64_t a1, __int128 *a2)
{
  return MetalCropProcessor.doCrop(_:_:)(a1, a2);
}

uint64_t specialized MetalCropProcessor.zNormalize(pixelBuffer:width:height:)(__CVBuffer *a1, uint64_t a2, uint64_t a3)
{
  float *BaseAddress;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t result;
  float __StandardDeviation;
  float __Mean;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(a1, 0);
  __StandardDeviation = 1.0;
  __Mean = 0.0;
  BaseAddress = (float *)CVPixelBufferGetBaseAddress(a1);
  if (!BaseAddress)
    goto LABEL_9;
  v7 = a2 * a3;
  if ((unsigned __int128)(a2 * (__int128)a3) >> 64 != (a2 * a3) >> 63)
  {
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    vDSP_normalize(BaseAddress, 1, BaseAddress, 1, &__Mean, &__StandardDeviation, a2 * a3);
    v8 = CVPixelBufferGetBaseAddress(a1);
    if (!v8)
      goto LABEL_10;
    if ((unint64_t)(v7 - 0x2000000000000000) >> 62 == 3)
    {
      v9 = specialized Data.init(bytes:count:)(v8, 4 * v7);
      CVPixelBufferUnlockBaseAddress(a1, 0);
      return v9;
    }
    goto LABEL_8;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t TrackingBuffers.toProtoBuf()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t *v50;
  int64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v3 = type metadata accessor for FeatureVectorPB(0);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v3;
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for FeatureVectorPerFramePB(0);
  v55 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57, v7);
  v9 = (_QWORD *)((char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)v49 - v12;
  v14 = MEMORY[0x24BEE4AF8];
  a1[2] = MEMORY[0x24BEE4AF8];
  type metadata accessor for TrackingBuffersPB(0);
  UnknownStorage.init()();
  *a1 = specialized CircularBuffer.toList()(*v1, v1[1], v1[2], (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
  v15 = specialized CircularBuffer.toList()(v1[3], v1[4], v1[5], (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
  {
    result = swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
    goto LABEL_32;
  }
  v50 = a1;
  v68 = v14;
  v17 = v15;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
  v18 = 0;
  v19 = v68;
  v49[1] = v17;
  v56 = v17 + 32;
  v52 = v13;
  v53 = v9;
  v51 = v16;
  while (1)
  {
    v59 = v18;
    v20 = *(_QWORD *)(v56 + 8 * v18);
    swift_bridgeObjectRetain();
    UnknownStorage.init()();
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
      break;
    v22 = v14;
LABEL_27:
    *v9 = v22;
    outlined init with take of Matrix2dPB((uint64_t)v9, (uint64_t)v13, type metadata accessor for FeatureVectorPerFramePB);
    swift_bridgeObjectRelease();
    v68 = v19;
    v47 = *(_QWORD *)(v19 + 16);
    v46 = *(_QWORD *)(v19 + 24);
    if (v47 >= v46 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
      v19 = v68;
    }
    v48 = v59 + 1;
    *(_QWORD *)(v19 + 16) = v47 + 1;
    outlined init with take of Matrix2dPB((uint64_t)v13, v19+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(_QWORD *)(v55 + 72) * v47, type metadata accessor for FeatureVectorPerFramePB);
    v18 = v48;
    if (v48 == v16)
    {
      result = swift_bridgeObjectRelease();
      a1 = v50;
LABEL_32:
      a1[1] = v19;
      return result;
    }
  }
  v58 = v19;
  v67 = v14;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
  v22 = v67;
  result = specialized Dictionary.startIndex.getter(v20);
  v25 = result;
  v26 = 0;
  v27 = v20 + 64;
  v28 = *(_BYTE *)(v20 + 32);
  v62 = v24;
  v63 = v21;
  v54 = v20 + 88;
  v64 = v20 + 64;
  while ((v25 & 0x8000000000000000) == 0 && v25 < 1 << v28)
  {
    v31 = (unint64_t)v25 >> 6;
    if ((*(_QWORD *)(v27 + 8 * ((unint64_t)v25 >> 6)) & (1 << v25)) == 0)
      goto LABEL_34;
    if (*(_DWORD *)(v20 + 36) != (_DWORD)v24)
      goto LABEL_35;
    v65 = v26;
    v66 = v24;
    v32 = *(_QWORD *)(v20 + 56);
    v33 = *(_QWORD *)(v20 + 48) + 16 * v25;
    v34 = *(_QWORD *)v33;
    v35 = v20;
    v36 = *(_BYTE *)(v33 + 8);
    v37 = v22;
    v38 = *(_QWORD *)(v32 + 8 * v25);
    swift_bridgeObjectRetain();
    UnknownStorage.init()();
    *(_QWORD *)v6 = v34;
    v6[8] = v36;
    *((_QWORD *)v6 + 2) = v38;
    v22 = v37;
    v67 = v37;
    v40 = *(_QWORD *)(v37 + 16);
    v39 = *(_QWORD *)(v37 + 24);
    if (v40 >= v39 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
      v22 = v67;
    }
    *(_QWORD *)(v22 + 16) = v40 + 1;
    result = outlined init with take of Matrix2dPB((uint64_t)v6, v22+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v40, type metadata accessor for FeatureVectorPB);
    v28 = *(_BYTE *)(v35 + 32);
    v29 = 1 << v28;
    if (v25 >= 1 << v28)
      goto LABEL_36;
    v27 = v64;
    v41 = *(_QWORD *)(v64 + 8 * v31);
    if ((v41 & (1 << v25)) == 0)
      goto LABEL_37;
    v20 = v35;
    if (*(_DWORD *)(v35 + 36) != (_DWORD)v66)
      goto LABEL_38;
    v42 = v41 & (-2 << (v25 & 0x3F));
    if (v42)
    {
      v29 = __clz(__rbit64(v42)) | v25 & 0xFFFFFFFFFFFFFFC0;
      v30 = v63;
    }
    else
    {
      v43 = v31 + 1;
      v44 = (v29 + 63) >> 6;
      v30 = v63;
      if (v31 + 1 < v44)
      {
        v45 = *(_QWORD *)(v64 + 8 * v43);
        if (!v45)
        {
          v43 = v31 + 2;
          if (v31 + 2 >= v44)
            goto LABEL_6;
          v45 = *(_QWORD *)(v64 + 8 * v43);
          if (!v45)
          {
            while (v44 - 3 != v31)
            {
              v45 = *(_QWORD *)(v54 + 8 * v31++);
              if (v45)
              {
                v43 = v31 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_6;
          }
        }
LABEL_19:
        v29 = __clz(__rbit64(v45)) + (v43 << 6);
      }
    }
LABEL_6:
    v26 = v65 + 1;
    v24 = v62;
    v25 = v29;
    if (v65 + 1 == v30)
    {
      v13 = v52;
      v9 = v53;
      v14 = MEMORY[0x24BEE4AF8];
      v16 = v51;
      v19 = v58;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t TrackingBuffers.almostEqual(to:withThreshold:)(uint64_t *a1, double a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = specialized CircularBuffer.toList()(*v2, v2[1], v2[2], (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
  v6 = a1[2];
  v7 = specialized CircularBuffer.toList()(*a1, a1[1], v6, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v10 = a2;
      if (vabds_f32(*(float *)(v5 + 32), *(float *)(v7 + 32)) > v10)
      {
LABEL_8:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v41 = 0;
        v42 = 0xE000000000000000;
        _StringGuts.grow(_:)(43);
        v15._object = (void *)0x800000023D9D9500;
        v15._countAndFlagsBits = 0xD000000000000026;
        String.append(_:)(v15);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CircularBuffer<Float>);
        _print_unlocked<A, B>(_:_:)();
        v16._countAndFlagsBits = 32;
        v16._object = (void *)0xE100000000000000;
        String.append(_:)(v16);
        v43 = v6;
        _print_unlocked<A, B>(_:_:)();
        v44 = MEMORY[0x24BEE0D00];
        type metadata accessor for HandyLoggerNeo();
        v38 = xmmword_23D9A8970;
        v39 = 0;
        v40 = 0;
        v17 = MEMORY[0x24BEE4AF8];
        v18 = 107;
        goto LABEL_19;
      }
      v11 = 0;
      v12 = v9 - 1;
      v13 = v8 - 1;
      while (v13 != v11 && v12 != v11)
      {
        v14 = vabds_f32(*(float *)(v5 + 36 + 4 * v11), *(float *)(v7 + 4 * v11 + 36));
        ++v11;
        if (v14 > v10)
          goto LABEL_8;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = specialized CircularBuffer.toList()(v2[3], v2[4], v2[5], (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
  v20 = a1[5];
  v21 = specialized CircularBuffer.toList()(a1[3], a1[4], v20, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
  v22 = v21;
  v23 = *(_QWORD *)(v19 + 16);
  if (v23)
  {
    v37 = v20;
    v24 = *(_QWORD *)(v21 + 16);
    if (v24)
    {
      v25 = *(_QWORD *)(v19 + 32);
      swift_bridgeObjectRetain();
      v26 = swift_bridgeObjectRetain();
      v27 = Dictionary<>.almostEqual(to:withThreshold:)(v26, v25, a2);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
        v29 = 0;
        v30 = v24 - 1;
        v31 = v23 - 1;
        while (v31 != v29)
        {
          if ((unint64_t)(v29 + 1) >= *(_QWORD *)(v19 + 16))
          {
            __break(1u);
LABEL_22:
            __break(1u);
            return result;
          }
          if (v30 == v29)
            goto LABEL_20;
          if ((unint64_t)(v29 + 1) >= *(_QWORD *)(v22 + 16))
            goto LABEL_22;
          v32 = *(_QWORD *)(v19 + 8 * v29 + 40);
          swift_bridgeObjectRetain();
          v33 = swift_bridgeObjectRetain();
          v34 = Dictionary<>.almostEqual(to:withThreshold:)(v33, v32, a2);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          ++v29;
          if ((v34 & 1) == 0)
            goto LABEL_18;
        }
        goto LABEL_20;
      }
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v41 = 0;
      v42 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      v35._object = (void *)0x800000023D9D9500;
      v35._countAndFlagsBits = 0xD000000000000026;
      String.append(_:)(v35);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CircularBuffer<[CameraSource : [Float]]>);
      _print_unlocked<A, B>(_:_:)();
      v36._countAndFlagsBits = 32;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      v43 = v37;
      _print_unlocked<A, B>(_:_:)();
      v44 = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v38 = xmmword_23D9A8970;
      v39 = 0;
      v40 = 0;
      v17 = MEMORY[0x24BEE4AF8];
      v18 = 115;
LABEL_19:
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v38, 0xD00000000000006FLL, 0x800000023D9D9490, v18, (uint64_t)&v41, v17);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v41);
      return 0;
    }
  }
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized CircularBuffer.toList()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CircularBuffer.toList()(a1, a2, a3, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a2;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= a1 && a3 != 0)
  {
    v8 = a3;
    if (v6 < a3)
    {
      __break(1u);
    }
    else if ((a3 & 0x8000000000000000) == 0)
    {
      if (v6 > a3)
      {
        v9 = (2 * v6) | 1;
        v10 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                                             - 8)
                                 + 80);
        v11 = v5 + ((v10 + 32) & ~v10);
        v17 = v8;
        v12 = swift_bridgeObjectRetain();
        specialized ArraySlice.append<A>(contentsOf:)(v12, v11, 0, (2 * v8) | 1);
        v8 = v5;
        v3 = v11;
        v5 = v17;
        v4 = v9;
        if ((v9 & 1) == 0)
        {
LABEL_11:
          v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v8, v3, v5, v4);
          swift_unknownObjectRelease();
          return v13;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v15 = swift_dynamicCastClass();
        if (!v15)
        {
          swift_unknownObjectRelease();
          v15 = MEMORY[0x24BEE4AF8];
        }
        v16 = *(_QWORD *)(v15 + 16);
        swift_release();
        if (!__OFSUB__(v4 >> 1, v17))
        {
          if (v16 == (v4 >> 1) - v17)
          {
            v5 = swift_dynamicCastClass();
            swift_unknownObjectRelease();
            if (!v5)
            {
              swift_unknownObjectRelease();
              return MEMORY[0x24BEE4AF8];
            }
            return v5;
          }
LABEL_24:
          swift_unknownObjectRelease();
          goto LABEL_11;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= a1 && a3 != 0)
  {
    v7 = a3;
    if (v5 < a3)
    {
      __break(1u);
    }
    else if ((a3 & 0x8000000000000000) == 0)
    {
      v8 = type metadata accessor for LogMessage(0);
      if (v5 > v7)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
        v10 = v4 + ((v9 + 32) & ~v9);
        v16 = v7;
        v17 = (2 * v5) | 1;
        v11 = swift_bridgeObjectRetain();
        specialized ArraySlice.append<A>(contentsOf:)(v11, v10, 0, (2 * v7) | 1);
        v7 = v4;
        v5 = v10;
        v4 = v16;
        v3 = v17;
        if ((v17 & 1) == 0)
        {
LABEL_11:
          v12 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v5, v4, v3);
          swift_unknownObjectRelease();
          return v12;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v14 = swift_dynamicCastClass();
        if (!v14)
        {
          swift_unknownObjectRelease();
          v14 = MEMORY[0x24BEE4AF8];
        }
        v15 = *(_QWORD *)(v14 + 16);
        swift_release();
        if (!__OFSUB__(v17 >> 1, v16))
        {
          if (v15 == (v17 >> 1) - v16)
          {
            v4 = swift_dynamicCastClass();
            swift_unknownObjectRelease();
            if (!v4)
            {
              swift_unknownObjectRelease();
              return MEMORY[0x24BEE4AF8];
            }
            return v4;
          }
LABEL_24:
          swift_unknownObjectRelease();
          goto LABEL_11;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t specialized CircularBuffer.toList()(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v22;

  v9 = a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 >= a1 && a3 != 0)
  {
    if (v10 < a3)
    {
      __break(1u);
    }
    else if ((a3 & 0x8000000000000000) == 0)
    {
      if (v10 > a3)
      {
        v5 = a5;
        v20 = a2 + 32;
        v13 = (2 * a3) | 1;
        v22 = (2 * v10) | 1;
        v14 = swift_bridgeObjectRetain();
        a4(v14, v9 + 32, 0, v13);
        v6 = a2;
        v9 = v20;
        v7 = a3;
        v8 = v22;
        if ((v22 & 1) == 0)
        {
LABEL_11:
          v15 = v5(v6, v9, v7, v8);
          swift_unknownObjectRelease();
          return v15;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v17 = swift_dynamicCastClass();
        if (!v17)
        {
          swift_unknownObjectRelease();
          v17 = MEMORY[0x24BEE4AF8];
        }
        v18 = *(_QWORD *)(v17 + 16);
        swift_release();
        if (!__OFSUB__(v22 >> 1, a3))
        {
          if (v18 == (v22 >> 1) - a3)
          {
            v9 = swift_dynamicCastClass();
            swift_unknownObjectRelease();
            if (!v9)
            {
              swift_unknownObjectRelease();
              return MEMORY[0x24BEE4AF8];
            }
            return v9;
          }
LABEL_24:
          swift_unknownObjectRelease();
          goto LABEL_11;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t Dictionary<>.almostEqual(to:withThreshold:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  float v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;

  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 16))
    return 0;
  v5 = a2 + 64;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a3;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v12 << 6);
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_33;
      goto LABEL_23;
    }
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v9)
      goto LABEL_35;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v9)
        goto LABEL_35;
      v16 = *(_QWORD *)(v5 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v9)
          goto LABEL_35;
        v16 = *(_QWORD *)(v5 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_22:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_33;
LABEL_23:
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v14);
    v19 = *(_QWORD *)(a2 + 48) + 16 * v14;
    v20 = *(_BYTE *)(v19 + 8);
    v21 = *(_QWORD *)v19;
    swift_bridgeObjectRetain();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return 0;
    }
    v24 = *(_QWORD *)(v18 + 16);
    if (v24)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v22);
      v26 = *(_QWORD *)(v25 + 16);
      if (v26)
      {
        if (vabds_f32(*(float *)(v18 + 32), *(float *)(v25 + 32)) <= v10)
        {
LABEL_31:
          swift_release();
          swift_bridgeObjectRelease();
          return 0;
        }
        v27 = 0;
        v28 = v26 - 1;
        v29 = v25 + 36;
        v30 = v24 - 1;
        while (v30 != v27 && v28 != v27)
        {
          v31 = vabds_f32(*(float *)(v18 + 4 * v27 + 36), *(float *)(v29 + 4 * v27));
          ++v27;
          if (v31 <= v10)
            goto LABEL_31;
        }
      }
    }
    result = swift_bridgeObjectRelease();
  }
  v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_35:
    swift_release();
    return 1;
  }
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v9)
      goto LABEL_35;
    v16 = *(_QWORD *)(v5 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t specialized CircularBuffer.init(buffer:capacity:writePtr:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _QWORD v5[4];

  v3 = a2;
  if ((a2 & 0x8000000000000000) != 0
    || (a3 & 0x8000000000000000) != 0
    || a3 >= a2 && a3
    || *(_QWORD *)(a1 + 16) > a2)
  {
    swift_bridgeObjectRelease();
    v5[3] = MEMORY[0x24BEE0D00];
    v5[0] = 0xD000000000000025;
    v5[1] = 0x800000023D9D9530;
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000050, 0x800000023D9D78F0, 106, (uint64_t)v5, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
    return 0;
  }
  return v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TrackingBuffers(uint64_t a1, uint64_t *a2)
{
  return TrackingBuffers.almostEqual(to:withThreshold:)(a2, 0.00001) & 1;
}

uint64_t specialized ArraySlice.reserveCapacity(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (_QWORD)v9 + 32)
    goto LABEL_31;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v10 = *(_QWORD *)(v1 + 16);
    v7 = v5 - v10;
    if (__OFSUB__(v5, v10))
    {
      __break(1u);
      goto LABEL_35;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (v7 <= v2 ? v2 : v5 - v10)
      break;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v5 >= v10)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v19 = *(_QWORD *)(result + 24);
    result = swift_release();
    v20 = (v19 >> 1) - (_QWORD)v9;
    v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21)
      goto LABEL_40;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CameraSource : [Float]]>);
  v4 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v4);
  v13 = result - 32;
  if (result < 32)
    v13 = result - 25;
  v4[2] = v7;
  v4[3] = 2 * (v13 >> 3);
  if (v5 < v10)
    goto LABEL_30;
LABEL_17:
  if ((v7 & 0x8000000000000000) == 0)
  {
    v14 = (unint64_t)(v4 + 4);
    v15 = v11 + 8 * v10;
    if (v15 >= (unint64_t)&v4[v7 + 4] || v14 >= v15 + 8 * v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CameraSource : [Float]]);
      swift_arrayInitWithCopy();
      if (!__OFSUB__(0, v10))
      {
        v17 = v4[2];
        v18 = v10 + v17;
        if (!__OFADD__(v10, v17))
        {
          if (v18 >= v10)
          {
            result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(_QWORD *)(v1 + 8) = v14 - 8 * v10;
              *(_QWORD *)(v1 + 16) = v10;
              *(_QWORD *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(_QWORD *)v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 4 * v6 + 4 * v7 == result + 4 * (_QWORD)v9 + 32)
    goto LABEL_31;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v7 = *(_QWORD *)(v1 + 16);
    v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_35;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7)
      break;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v5 >= v7)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v19 = *(_QWORD *)(result + 24);
    result = swift_release();
    v20 = (v19 >> 1) - (_QWORD)v9;
    v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21)
      goto LABEL_40;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v4 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v4);
  v13 = result - 32;
  if (result < 32)
    v13 = result - 29;
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 2);
  if (v5 < v7)
    goto LABEL_30;
LABEL_17:
  if ((v10 & 0x8000000000000000) == 0)
  {
    v14 = (unint64_t)(v4 + 4);
    v15 = (char *)(v11 + 4 * v7);
    if (v15 >= (char *)v4 + 4 * v10 + 32 || v14 >= (unint64_t)&v15[4 * v10])
    {
      memcpy(v4 + 4, v15, 4 * v10);
      if (!__OFSUB__(0, v7))
      {
        v17 = v4[2];
        v18 = v7 + v17;
        if (!__OFADD__(v7, v17))
        {
          if (v18 >= v7)
          {
            result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(_QWORD *)(v1 + 8) = v14 - 4 * v7;
              *(_QWORD *)(v1 + 16) = v7;
              *(_QWORD *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(_QWORD *)v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 16 * v6 + 16 * v7 == result + 16 * (_QWORD)v9 + 32)
    goto LABEL_31;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v7 = *(_QWORD *)(v1 + 16);
    v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_35;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7)
      break;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v5 >= v7)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v19 = *(_QWORD *)(result + 24);
    result = swift_release();
    v20 = (v19 >> 1) - (_QWORD)v9;
    v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21)
      goto LABEL_40;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  v4 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v4);
  v13 = result - 32;
  if (result < 32)
    v13 = result - 17;
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 4);
  if (v5 < v7)
    goto LABEL_30;
LABEL_17:
  if ((v10 & 0x8000000000000000) == 0)
  {
    v14 = (unint64_t)(v4 + 4);
    v15 = (_QWORD *)(v11 + 16 * v7);
    if (v15 >= &v4[2 * v10 + 4] || v14 >= (unint64_t)&v15[2 * v10])
    {
      memcpy(v4 + 4, v15, 16 * v10);
      if (!__OFSUB__(0, v7))
      {
        v17 = v4[2];
        v18 = v7 + v17;
        if (!__OFADD__(v7, v17))
        {
          if (v18 >= v7)
          {
            result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(_QWORD *)(v1 + 8) = v14 - 16 * v7;
              *(_QWORD *)(v1 + 16) = v7;
              *(_QWORD *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(_QWORD *)v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.reserveCapacity(_:)(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  char isUniquelyReferenced_nonNull;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;

  v3 = v1[3];
  v4 = (_QWORD *)*v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0
    || (isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(),
        *v1 = (uint64_t)v4,
        (isUniquelyReferenced_nonNull & 1) == 0))
  {
    v10 = (uint64_t)v4;
    goto LABEL_9;
  }
  v7 = v1[2];
  v8 = v5 - v7;
  if (__OFSUB__(v5, v7))
    goto LABEL_44;
  v9 = v1[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  v11 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v12 = *(_QWORD *)(v10 + 16);
  if (v9 + *(_QWORD *)(v11 + 72) * v7 + *(_QWORD *)(v11 + 72) * v8 == v10
                                                                     + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
                                                                     + *(_QWORD *)(v11 + 72) * v12)
    goto LABEL_34;
  result = swift_release();
  while (1)
  {
    if (v8 >= a1)
      goto LABEL_31;
    v10 = *v1;
LABEL_9:
    v14 = v1[2];
    v8 = v5 - v14;
    if (__OFSUB__(v5, v14))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v15 = v1[1];
    v12 = v8 <= a1 ? a1 : v5 - v14;
    if (!v12)
      break;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DerivedHandAttributes?>);
    v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                    - 8);
    a1 = *(_QWORD *)(v16 + 72);
    v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v4 = (_QWORD *)swift_allocObject();
    v18 = _swift_stdlib_malloc_size(v4);
    if (!a1)
      goto LABEL_42;
    if (v18 - v17 == 0x8000000000000000 && a1 == -1)
      goto LABEL_43;
    v4[2] = v8;
    v4[3] = 2 * ((uint64_t)(v18 - v17) / a1);
    if (v5 >= v14)
      goto LABEL_20;
LABEL_33:
    __break(1u);
LABEL_34:
    v27 = *(_QWORD *)(v10 + 24);
    result = swift_release();
    v28 = (v27 >> 1) - v12;
    v29 = __OFADD__(v8, v28);
    v8 += v28;
    if (v29)
      goto LABEL_45;
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v5 < v14)
    goto LABEL_33;
LABEL_20:
  if (v8 < 0)
    goto LABEL_46;
  v20 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v21 = (char *)v4 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  v22 = *(_QWORD *)(v20 + 72);
  v23 = v15 + v22 * v14;
  if (v23 < (unint64_t)&v21[v22 * v8] && (unint64_t)v21 < v23 + v22 * v8)
    goto LABEL_46;
  swift_arrayInitWithCopy();
  if (__OFSUB__(0, v14))
    goto LABEL_38;
  v25 = v4[2];
  v26 = v14 + v25;
  if (__OFADD__(v14, v25))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v26 < v14)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_unknownObjectRelease();
  if ((v26 & 0x8000000000000000) == 0)
  {
    v1[1] = (uint64_t)&v21[v22 * -v14];
    v1[2] = v14;
    v1[3] = (2 * v26) | 1;
LABEL_31:
    *v1 = (uint64_t)v4;
    return result;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  char isUniquelyReferenced_nonNull;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;

  v3 = v1[3];
  v4 = (_QWORD *)*v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0
    || (isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(),
        *v1 = (uint64_t)v4,
        (isUniquelyReferenced_nonNull & 1) == 0))
  {
    v10 = (uint64_t)v4;
    goto LABEL_9;
  }
  v7 = v1[2];
  v8 = v5 - v7;
  if (__OFSUB__(v5, v7))
    goto LABEL_44;
  v9 = v1[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  v11 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
  v12 = *(_QWORD *)(v10 + 16);
  if (v9 + *(_QWORD *)(v11 + 72) * v7 + *(_QWORD *)(v11 + 72) * v8 == v10
                                                                     + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
                                                                     + *(_QWORD *)(v11 + 72) * v12)
    goto LABEL_34;
  result = swift_release();
  while (1)
  {
    if (v8 >= a1)
      goto LABEL_31;
    v10 = *v1;
LABEL_9:
    v14 = v1[2];
    v8 = v5 - v14;
    if (__OFSUB__(v5, v14))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v15 = v1[1];
    v12 = v8 <= a1 ? a1 : v5 - v14;
    if (!v12)
      break;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LogMessage>);
    v16 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
    a1 = *(_QWORD *)(v16 + 72);
    v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v4 = (_QWORD *)swift_allocObject();
    v18 = _swift_stdlib_malloc_size(v4);
    if (!a1)
      goto LABEL_42;
    if (v18 - v17 == 0x8000000000000000 && a1 == -1)
      goto LABEL_43;
    v4[2] = v8;
    v4[3] = 2 * ((uint64_t)(v18 - v17) / a1);
    if (v5 >= v14)
      goto LABEL_20;
LABEL_33:
    __break(1u);
LABEL_34:
    v27 = *(_QWORD *)(v10 + 24);
    result = swift_release();
    v28 = (v27 >> 1) - v12;
    v29 = __OFADD__(v8, v28);
    v8 += v28;
    if (v29)
      goto LABEL_45;
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v5 < v14)
    goto LABEL_33;
LABEL_20:
  if (v8 < 0)
    goto LABEL_46;
  v20 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
  v21 = (char *)v4 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  v22 = *(_QWORD *)(v20 + 72);
  v23 = v15 + v22 * v14;
  if (v23 < (unint64_t)&v21[v22 * v8] && (unint64_t)v21 < v23 + v22 * v8)
    goto LABEL_46;
  swift_arrayInitWithCopy();
  if (__OFSUB__(0, v14))
    goto LABEL_38;
  v25 = v4[2];
  v26 = v14 + v25;
  if (__OFADD__(v14, v25))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v26 < v14)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = swift_unknownObjectRelease();
  if ((v26 & 0x8000000000000000) == 0)
  {
    v1[1] = (uint64_t)&v21[v22 * -v14];
    v1[2] = v14;
    v1[3] = (2 * v26) | 1;
LABEL_31:
    *v1 = (uint64_t)v4;
    return result;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  char *__dst;

  v5 = v4[2];
  v6 = v4[3] >> 1;
  v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_29;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v15 = v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v33 = v15 - v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  __dst = (char *)(v9 + 32);
  v17 = v9 + 32 + 8 * a2;
  v31 = (char *)(v17 + 8 * a3);
  v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v7);
  v32 = a4;
  if (v18)
  {
    v19 = v18;
    v30 = v9;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 8 * v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CameraSource : [Float]]);
    swift_arrayDestroy();
    if (a2 < 0)
      goto LABEL_43;
    v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 8 * a2);
    swift_arrayDestroy();
    v32(v17, a3);
    if (v14 < 0)
      goto LABEL_43;
    v23 = &v22[8 * v33];
    if (v31 != v23 || v31 >= &v23[8 * v14])
      memmove(v31, v23, 8 * v14);
    swift_arrayDestroy();
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
    v9 = v30;
LABEL_23:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v28 = *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v20, v28);
      v29 = v20 + v28;
      if (!v11)
      {
        if (v29 >= v20)
        {
          if ((v29 & 0x8000000000000000) == 0)
          {
            *v4 = v9;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v29) | 1;
            return result;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v20 = v4[2];
  v11 = __OFADD__(v20, a2);
  v24 = v20 + a2;
  if (v11)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v24 < v20)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (__OFSUB__(v24, v20))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CameraSource : [Float]]);
  swift_arrayInitWithCopy();
  a4((uint64_t)&__dst[8 * (v24 - v20)], a3);
  v25 = v24 + v33;
  if (__OFADD__(v24, v33))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v26 = v4[3] >> 1;
  if (v26 < v25)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!__OFSUB__(v26, v25))
  {
    swift_arrayInitWithCopy();
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *__dst;

  v6 = v4[2];
  v7 = v4[3] >> 1;
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v30 = __OFSUB__(v11, a2);
  v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v30 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v38 = v16;
  __dst = (char *)(v10 + 32);
  v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v8);
  v37 = (char *)(v10 + 32 + 4 * a2 + 4 * a3);
  if (v18)
  {
    v36 = a4;
    if (a2 < 0)
      goto LABEL_46;
    v19 = v18;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 4 * v20);
    v22 = &v21[4 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 4 * a2);
    v36(v10 + 32 + 4 * a2, a3);
    if (v14 < 0)
      goto LABEL_46;
    v23 = &v22[4 * v38];
    if (v37 != v23 || v37 >= &v23[4 * v14])
      memmove(v37, v23, 4 * v14);
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v34 = *(_QWORD *)(v10 + 16);
      v30 = __OFADD__(v20, v34);
      v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *v4 = v10;
            v4[1] = &__dst[-4 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v25 = (void (*)(char *, uint64_t))a4;
  v20 = v4[2];
  v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 4 * v20), 4 * a2);
  v25(&__dst[4 * a2], a3);
  v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v29 = v4[3] >> 1;
  v30 = __OFSUB__(v29, v28);
  v31 = v29 < v28;
  v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 4 * v28), 4 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *__dst;

  v6 = v4[2];
  v7 = v4[3] >> 1;
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v30 = __OFSUB__(v11, a2);
  v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v30 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v38 = v16;
  __dst = (char *)(v10 + 32);
  v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v8);
  v37 = (char *)(v10 + 32 + 16 * a2 + 16 * a3);
  if (v18)
  {
    v36 = a4;
    if (a2 < 0)
      goto LABEL_46;
    v19 = v18;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 16 * v20);
    v22 = &v21[16 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 16 * a2);
    v36(v10 + 32 + 16 * a2, a3);
    if (v14 < 0)
      goto LABEL_46;
    v23 = &v22[16 * v38];
    if (v37 != v23 || v37 >= &v23[16 * v14])
      memmove(v37, v23, 16 * v14);
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v34 = *(_QWORD *)(v10 + 16);
      v30 = __OFADD__(v20, v34);
      v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *v4 = v10;
            v4[1] = &__dst[-16 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v25 = (void (*)(char *, uint64_t))a4;
  v20 = v4[2];
  v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 16 * v20), 16 * a2);
  v25(&__dst[16 * a2], a3);
  v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v29 = v4[3] >> 1;
  v30 = __OFSUB__(v29, v28);
  v31 = v29 < v28;
  v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 16 * v28), 16 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;

  v5 = v4;
  v6 = v4[2];
  v7 = v4[3] >> 1;
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_46;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v15 = v13 - a3;
  if (__OFSUB__(v13, a3))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v16 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v45 = v16 - v15;
  if (__OFSUB__(v16, v15))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v41 = v15;
  v17 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v19 = *(_QWORD *)(v17 + 72);
  v44 = v10 + v18;
  v20 = v10 + v18 + v19 * a2;
  v42 = v20 + v19 * a3;
  v21 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v8);
  if (!v21)
  {
    v23 = v5[2];
    v30 = v23 + a2;
    if (__OFADD__(v23, a2))
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v30 < v23)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (__OFSUB__(v30, v23))
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v28 = v10 + v18;
    swift_arrayInitWithCopy();
    a4(v44 + a2 * v19, a3);
    v31 = v30 + v45;
    if (__OFADD__(v30, v45))
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v32 = v5[3] >> 1;
    if (v32 < v31)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (__OFSUB__(v32, v31))
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    swift_arrayInitWithCopy();
LABEL_40:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v23))
    {
      v36 = *(_QWORD *)(v10 + 16);
      v12 = __OFADD__(v23, v36);
      v37 = v23 + v36;
      if (!v12)
      {
        if (v37 >= v23)
        {
          if ((v37 & 0x8000000000000000) == 0)
          {
            *v5 = v10;
            v5[1] = v28 + -v23 * v19;
            v5[2] = v23;
            v5[3] = (2 * v37) | 1;
            return result;
          }
          goto LABEL_53;
        }
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (!v19)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v22 = v21;
  v39 = v10;
  v40 = v8;
  v23 = v5[2];
  v24 = v5[1] + v23 * v19;
  v25 = v21 + v18;
  if (v24 - v25 == 0x8000000000000000 && v19 == -1)
    goto LABEL_61;
  v38 = v25;
  swift_arrayDestroy();
  if (a2 < 0)
    goto LABEL_63;
  v27 = v24 + v19 * a2;
  v28 = v44;
  if (v44 < v24 || v44 >= v27)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v44 != v24)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  swift_arrayDestroy();
  a4(v20, a3);
  if (v41 < 0)
    goto LABEL_63;
  v33 = v27 + v19 * v45;
  if (v42 < v33 || v42 >= v33 + v19 * v41)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v42 != v33)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  if (v38 + *(_QWORD *)(v22 + 16) * v19 - (v24 + v19 * v40) != 0x8000000000000000 || v19 != -1)
  {
    swift_arrayDestroy();
    *(_QWORD *)(v22 + 16) = 0;
    swift_release();
    v10 = v39;
    goto LABEL_40;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v43;
  uint64_t v44;

  v5 = v4;
  v6 = v4[2];
  v7 = v4[3] >> 1;
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_43;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v15 = v13 - a3;
  if (__OFSUB__(v13, a3))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v16 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v44 = v16 - v15;
  if (__OFSUB__(v16, v15))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v39 = v15;
  v17 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v19 = *(_QWORD *)(v17 + 72);
  v43 = v10 + v18;
  v20 = v10 + v18 + v19 * a2;
  v41 = v20 + v19 * a3;
  v21 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v8);
  v40 = v10;
  if (!v21)
  {
    v23 = v5[2];
    v30 = v23 + a2;
    if (__OFADD__(v23, a2))
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v30 < v23)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (__OFSUB__(v30, v23))
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v28 = v43;
    swift_arrayInitWithCopy();
    a4(v43 + a2 * v19, a3);
    v31 = v30 + v44;
    if (__OFADD__(v30, v44))
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v32 = v5[3] >> 1;
    if (v32 < v31)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (__OFSUB__(v32, v31))
    {
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    swift_arrayInitWithCopy();
LABEL_37:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v23))
    {
      v35 = *(_QWORD *)(v40 + 16);
      v12 = __OFADD__(v23, v35);
      v36 = v23 + v35;
      if (!v12)
      {
        if (v36 >= v23)
        {
          if ((v36 & 0x8000000000000000) == 0)
          {
            *v5 = v40;
            v5[1] = v28 + -v23 * v19;
            v5[2] = v23;
            v5[3] = (2 * v36) | 1;
            return result;
          }
          goto LABEL_50;
        }
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (!v19)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v22 = v21;
  v38 = v8;
  v23 = v5[2];
  v24 = v5[1] + v23 * v19;
  v25 = v21 + v18;
  if (v24 - v25 == 0x8000000000000000 && v19 == -1)
    goto LABEL_58;
  v37 = v25;
  swift_arrayDestroy();
  if (a2 < 0)
    goto LABEL_60;
  v27 = v24 + v19 * a2;
  v28 = v43;
  if (v43 < v24 || v43 >= v27)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v43 != v24)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  swift_arrayDestroy();
  a4(v20, a3);
  if (v39 < 0)
    goto LABEL_60;
  v33 = v27 + v19 * v44;
  if (v41 < v33 || v41 >= v33 + v19 * v39)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v41 != v33)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  if (v37 + *(_QWORD *)(v22 + 16) * v19 - (v24 + v19 * v38) != 0x8000000000000000 || v19 != -1)
  {
    swift_arrayDestroy();
    *(_QWORD *)(v22 + 16) = 0;
    swift_release();
    goto LABEL_37;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _SliceBuffer.count.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x24BEE4AF8];
  }
  v8 = *(_QWORD *)(result + 16);
  v5 = __OFADD__(v8, v7);
  v9 = v8 + v7;
  if (v5)
    goto LABEL_13;
  *(_QWORD *)(result + 16) = v9;
  result = swift_release();
  v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x24BEE4AF8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CameraSource : [Float]]>);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size(v27);
  v29 = v28 - 32;
  if (v28 < 32)
    v29 = v28 - 25;
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 3);
  return (uint64_t)v27;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 4 * a5 + 4 * v8;
  if (v13 == v11 + 4 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 4 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x24BEE4AF8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 4 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size(v27);
  v29 = v28 - 32;
  if (v28 < 32)
    v29 = v28 - 29;
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 2);
  return (uint64_t)v27;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 16 * a5 + 16 * v8;
  if (v13 == v11 + 16 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 16 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x24BEE4AF8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 16 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size(v27);
  v29 = v28 - 32;
  if (v28 < 32)
    v29 = v28 - 17;
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 4);
  return (uint64_t)v27;
}

size_t specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(size_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_37:
    if (v8 >= v7)
      goto LABEL_21;
    goto LABEL_18;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_37;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v13 = *(_QWORD *)(v11 + 16);
  if (a4 + *(_QWORD *)(v12 + 72) * a5 + *(_QWORD *)(v12 + 72) * v8 == v11
                                                                     + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
                                                                     + *(_QWORD *)(v12 + 72) * v13)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v13;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  v18 = v17;
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v18 = MEMORY[0x24BEE4AF8];
    }
    v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                    - 8);
    v20 = *(_QWORD *)(v18 + 16);
    if (a4 + *(_QWORD *)(v19 + 72) * a5 + *(_QWORD *)(v19 + 72) * v8 == v18
                                                                       + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
                                                                       + *(_QWORD *)(v19 + 72) * v20)
    {
      v23 = *(_QWORD *)(v18 + 24);
      result = swift_release();
      v24 = (v23 >> 1) - v20;
      v25 = __OFADD__(v8, v24);
      v8 += v24;
      if (v25)
      {
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
    }
    else
    {
      result = swift_release();
    }
LABEL_18:
    if (v8 + 0x4000000000000000 < 0)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v8 *= 2;
LABEL_21:
    if (v8 <= v7)
      v28 = v7;
    else
      v28 = v8;
    if (v28 <= v6)
      v29 = v6;
    else
      v29 = v28;
    if (!v29)
      return MEMORY[0x24BEE4AF8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DerivedHandAttributes?>);
    v30 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                    - 8);
    v31 = *(_QWORD *)(v30 + 72);
    v32 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    v33 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v33);
    if (v31)
    {
      if (result - v32 != 0x8000000000000000 || v31 != -1)
      {
        v33[2] = v6;
        v33[3] = 2 * ((uint64_t)(result - v32) / v31);
        return (size_t)v33;
      }
      goto LABEL_42;
    }
    __break(1u);
    goto LABEL_40;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
  v21 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v22 = *(_QWORD *)(v18 + 16);
  if (a4 + *(_QWORD *)(v21 + 72) * a5 + *(_QWORD *)(v21 + 72) * v8 != v18
                                                                     + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))
                                                                     + *(_QWORD *)(v21 + 72) * v22)
  {
    swift_release();
    goto LABEL_21;
  }
  v26 = *(_QWORD *)(v18 + 24);
  result = swift_release();
  v27 = (v26 >> 1) - v22;
  v25 = __OFADD__(v8, v27);
  v8 += v27;
  if (!v25)
    goto LABEL_21;
LABEL_44:
  __break(1u);
  return result;
}

{
  int64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  size_t v35;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_39:
    if (v8 >= v7)
      goto LABEL_23;
    goto LABEL_19;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_39;
  v35 = result;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = *(_QWORD *)(v12 + 72);
  v16 = a4 + v15 * a5 + v15 * v8;
  if (v16 == v11 + v13 + v15 * v14)
  {
    v18 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v19 = (v18 >> 1) - v14;
    v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
  else
  {
    swift_release();
    v17 = v8;
  }
  swift_unknownObjectRetain();
  v20 = swift_dynamicCastClass();
  if (v17 < v7)
  {
    if (!v20)
    {
      swift_unknownObjectRelease();
      v20 = MEMORY[0x24BEE4AF8];
    }
    v21 = *(_QWORD *)(v20 + 16);
    if (v16 == v20 + v13 + v15 * v21)
    {
      v23 = *(_QWORD *)(v20 + 24);
      result = swift_release();
      v24 = (v23 >> 1) - v21;
      v25 = __OFADD__(v8, v24);
      v8 += v24;
      if (v25)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      result = swift_release();
    }
    v6 = v35;
LABEL_19:
    if (v8 + 0x4000000000000000 < 0)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v8 *= 2;
LABEL_23:
    if (v8 <= v7)
      v28 = v7;
    else
      v28 = v8;
    if (v28 <= v6)
      v29 = v6;
    else
      v29 = v28;
    if (!v29)
      return MEMORY[0x24BEE4AF8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LogMessage>);
    v30 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
    v31 = *(_QWORD *)(v30 + 72);
    v32 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    v33 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v33);
    if (v31)
    {
      if (result - v32 != 0x8000000000000000 || v31 != -1)
      {
        v33[2] = v6;
        v33[3] = 2 * ((uint64_t)(result - v32) / v31);
        return (size_t)v33;
      }
      goto LABEL_44;
    }
    __break(1u);
    goto LABEL_42;
  }
  if (!v20)
  {
    swift_unknownObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
  }
  v22 = *(_QWORD *)(v20 + 16);
  if (v16 != v20 + v13 + v15 * v22)
  {
    swift_release();
LABEL_22:
    v6 = v35;
    goto LABEL_23;
  }
  v26 = *(_QWORD *)(v20 + 24);
  result = swift_release();
  v27 = (v26 >> 1) - v22;
  v25 = __OFADD__(v8, v27);
  v8 += v27;
  if (!v25)
    goto LABEL_22;
LABEL_46:
  __break(1u);
  return result;
}

uint64_t (*specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x24BEE4AF8];
    }
    v16 = v8 + 8 * v6 - a1;
    v17 = v16 - 32;
    v18 = v16 - 25;
    if (v17 >= 0)
      v18 = v17;
    isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_21:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

{
  _QWORD *v1;
  int64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 4 * v6 + 4 * v7 != v9 + 4 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x24BEE4AF8];
    }
    v16 = v8 + 4 * v6 - a1;
    v17 = v16 - 32;
    v18 = v16 - 29;
    if (v17 >= 0)
      v18 = v17;
    isUniquelyReferenced_nonNull = v7 + (v18 >> 2);
    if (!__OFADD__(v7, v18 >> 2))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_21:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v20;

  result = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)result)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v11 = *(_QWORD *)(v9 + 16);
  if (v8 + *(_QWORD *)(v10 + 72) * v6 + *(_QWORD *)(v10 + 72) * v7 != v9
                                                                     + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                                                                     + *(_QWORD *)(v10 + 72) * v11)
  {
    swift_release();
LABEL_8:
    v12 = v7;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v13 >> 1) - v11;
  v15 = __OFADD__(v7, v14);
  v12 = v7 + v14;
  if (v15)
  {
    __break(1u);
    goto LABEL_27;
  }
LABEL_10:
  if (v12 < a1)
    return 0;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  a1 = swift_dynamicCastClass();
  if (!a1)
  {
    swift_unknownObjectRelease();
    a1 = MEMORY[0x24BEE4AF8];
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v16 = *(_QWORD *)(result - 8);
  v17 = *(_QWORD *)(v16 + 72);
  if (!v17)
    goto LABEL_23;
  v18 = v8
      + v17 * v6
      - (a1
       + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)));
  if (v17 != -1 || v18 != 0x8000000000000000)
  {
    v20 = v18 / v17;
    result = v7 + v20;
    if (!__OFADD__(v7, v20))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (result >= v4)
        return a1;
LABEL_25:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(result, v4, 0);
      return a1;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  _QWORD *v1;
  int64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 16 * v6 + 16 * v7 != v9 + 16 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x24BEE4AF8];
    }
    v16 = v8 + 16 * v6 - a1;
    v17 = v16 - 32;
    v18 = v16 - 17;
    if (v17 >= 0)
      v18 = v17;
    isUniquelyReferenced_nonNull = v7 + (v18 >> 4);
    if (!__OFADD__(v7, v18 >> 4))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_21:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;

  result = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)result)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
  v11 = *(_QWORD *)(v9 + 16);
  if (v8 + *(_QWORD *)(v10 + 72) * v6 + *(_QWORD *)(v10 + 72) * v7 != v9
                                                                     + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                                                                     + *(_QWORD *)(v10 + 72) * v11)
  {
    swift_release();
LABEL_8:
    v12 = v7;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v13 >> 1) - v11;
  v15 = __OFADD__(v7, v14);
  v12 = v7 + v14;
  if (v15)
  {
    __break(1u);
    goto LABEL_25;
  }
LABEL_10:
  if (v12 < a1)
    return 0;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  a1 = swift_dynamicCastClass();
  if (!a1)
  {
    swift_unknownObjectRelease();
    a1 = MEMORY[0x24BEE4AF8];
  }
  result = type metadata accessor for LogMessage(0);
  v16 = *(_QWORD *)(result - 8);
  v17 = *(_QWORD *)(v16 + 72);
  if (!v17)
    goto LABEL_21;
  v18 = v8
      + v17 * v6
      - (a1
       + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)));
  if (v17 != -1 || v18 != 0x8000000000000000)
  {
    v19 = v18 / v17;
    result = v7 + v19;
    if (!__OFADD__(v7, v19))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (result >= v4)
        return a1;
LABEL_23:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(result, v4, 0);
      return a1;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6)
    goto LABEL_14;
  v7 = *v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = __OFSUB__(v8, a2);
  v10 = v8 - a2;
  if (v9)
    goto LABEL_18;
  if (v10 < 0)
  {
LABEL_21:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = v7 + 32 + 4 * result + 4 * a3;
  v11 = (const void *)(v7 + 32 + 4 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 4 * v10)
    result = (unint64_t)memmove((void *)result, v11, 4 * v10);
  v13 = *(_QWORD *)(v7 + 16);
  v9 = __OFADD__(v13, v6);
  v14 = v13 + v6;
  if (v9)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6)
    goto LABEL_14;
  v7 = *v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = __OFSUB__(v8, a2);
  v10 = v8 - a2;
  if (v9)
    goto LABEL_18;
  if (v10 < 0)
  {
LABEL_21:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = v7 + 32 + 16 * result + 16 * a3;
  v11 = (const void *)(v7 + 32 + 16 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 16 * v10)
    result = (unint64_t)memmove((void *)result, v11, 16 * v10);
  v13 = *(_QWORD *)(v7 + 16);
  v9 = __OFADD__(v13, v6);
  v14 = v13 + v6;
  if (v9)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

_QWORD *specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t (*v9)();
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v2 = v1[2];
  v3 = v1[3];
  v4 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
    goto LABEL_47;
  v5 = result[4];
  v26 = result[3] >> 1;
  if (v5 == v26)
    return result;
  if (v5 < result[2] || v5 >= v26)
    goto LABEL_48;
  v25 = result[2];
  v7 = v5 + 1;
  v8 = *(_DWORD *)(result[1] + 4 * v5);
  v24 = result[1];
  while (!__OFADD__(v4, 1))
  {
    v29 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v4, v4 + 1, *v1, v1[1], v2, v3);
    v9 = specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
    specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v29, v4, 0, (void (*)(uint64_t, uint64_t))v9);
    swift_release();
    result = (_QWORD *)swift_release();
    v2 = v1[2];
    v3 = v1[3];
    v10 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2))
      goto LABEL_42;
    v28 = v3 >> 1;
    v11 = v1[1];
    if ((v3 & 1) == 0)
      goto LABEL_19;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    v12 = swift_dynamicCastClass();
    if (!v12)
    {
      swift_unknownObjectRelease();
      v12 = MEMORY[0x24BEE4AF8];
    }
    v13 = *(_QWORD *)(v12 + 16);
    if (v11 + 4 * v2 + 4 * v10 != v12 + 4 * v13 + 32)
    {
      result = (_QWORD *)swift_release();
LABEL_19:
      v14 = (v3 >> 1) - v2;
      goto LABEL_21;
    }
    v27 = *(_QWORD *)(v12 + 24);
    result = (_QWORD *)swift_release();
    v15 = (v27 >> 1) - v13;
    v16 = __OFADD__(v10, v15);
    v14 = v10 + v15;
    if (v16)
      goto LABEL_46;
LABEL_21:
    if (v4 >= v14)
    {
      v17 = 0;
    }
    else
    {
      *(_DWORD *)(v11 + 4 * v2 + 4 * v4) = v8;
      if (v7 != v26)
      {
        v18 = 0;
        while (v7 >= v25 && v7 + v18 < v26)
        {
          v19 = v24 + 4 * v7;
          if (~v4 + v14 == v18)
          {
            v17 = 0;
            v8 = *(_DWORD *)(v19 + 4 * v18);
            v7 += v18 + 1;
            v4 = v14;
            goto LABEL_32;
          }
          *(_DWORD *)(v11 + 4 * v4 + 4 * v2 + 4 + 4 * v18) = *(_DWORD *)(v19 + 4 * v18);
          ++v18;
          if (!(v7 - v26 + v18))
          {
            v8 = 0;
            v4 += 1 + v18;
            v7 = v26;
            v17 = 1;
            goto LABEL_32;
          }
        }
        goto LABEL_40;
      }
      v8 = 0;
      v7 = v26;
      v17 = 1;
      ++v4;
    }
LABEL_32:
    v20 = v4 - v10;
    if (__OFSUB__(v4, v10))
      goto LABEL_43;
    if (v20)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v21 = result[2];
      v16 = __OFADD__(v21, v20);
      v22 = v21 + v20;
      if (v16)
        goto LABEL_44;
      result[2] = v22;
      result = (_QWORD *)swift_release();
      v23 = v28 + v20;
      if (__OFADD__(v28, v20))
        goto LABEL_45;
      if ((v23 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        break;
      }
      v3 = v3 & 1 | (2 * v23);
      v1[3] = v3;
    }
    if ((v17 & 1) != 0)
      return result;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24) >> 1;
  v4 = v3 - v2;
  if (__OFSUB__(v3, v2))
    goto LABEL_56;
  v5 = result[4];
  v6 = result[3] >> 1;
  if (v5 == v6)
    return result;
  v39 = result[2];
  if (v5 < v39 || v5 >= v6)
    goto LABEL_57;
  v8 = v5 + 1;
  v33 = result[1];
  v9 = *(_QWORD *)(v33 + 8 * v5);
  result = (_QWORD *)swift_bridgeObjectRetain();
  v32 = v6 - 1;
  v34 = v6;
  while (1)
  {
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    v40 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v4, v4 + 1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    v11 = specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
    specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v40, v4, 0, (void (*)(uint64_t, uint64_t))v11);
    swift_release();
    result = (_QWORD *)swift_release();
    v13 = *(_QWORD *)(v1 + 16);
    v12 = *(_QWORD *)(v1 + 24);
    v36 = v12 >> 1;
    v14 = (v12 >> 1) - v13;
    if (__OFSUB__(v12 >> 1, v13))
      goto LABEL_50;
    v37 = v9;
    v15 = *(_QWORD *)(v1 + 8);
    if ((v12 & 1) != 0)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      v16 = swift_dynamicCastClass();
      if (!v16)
      {
        swift_unknownObjectRelease();
        v16 = MEMORY[0x24BEE4AF8];
      }
      v17 = *(_QWORD *)(v16 + 16);
      if (v15 + 8 * v13 + 8 * v14 == v16 + 8 * v17 + 32)
      {
        v21 = v12;
        v22 = *(_QWORD *)(v16 + 24);
        result = (_QWORD *)swift_release();
        v23 = (v22 >> 1) - v17;
        v18 = v14 + v23;
        if (__OFADD__(v14, v23))
          goto LABEL_55;
        LOBYTE(v12) = v21;
        if (v4 >= v18)
        {
LABEL_25:
          v9 = v37;
          v19 = __OFSUB__(v4, v14);
          v20 = v4 - v14;
          if (v19)
            goto LABEL_51;
          goto LABEL_39;
        }
      }
      else
      {
        result = (_QWORD *)swift_release();
        v18 = (v12 >> 1) - v13;
        if (v4 >= v14)
          goto LABEL_25;
      }
    }
    else
    {
      v18 = (v12 >> 1) - v13;
      if (v4 >= v14)
        goto LABEL_25;
    }
    *(_QWORD *)(v15 + 8 * v13 + 8 * v4) = v37;
    if (v8 == v34)
    {
      v9 = 0;
      ++v4;
      v8 = v34;
      v19 = __OFSUB__(v10, v14);
      v20 = v10 - v14;
      if (v19)
        goto LABEL_51;
    }
    else
    {
      v38 = v18;
      v35 = v4;
      if (v8 < v39 || v8 >= v34)
      {
LABEL_48:
        __break(1u);
        break;
      }
      v24 = 0;
      v25 = v15 + 8 * v4 + 8 * v13 + 8;
      v26 = v33 + 8 * v8;
      v27 = v8 + 1;
      while (1)
      {
        if (~v35 + v38 == v24)
        {
          v4 = v38;
          v8 += v24 + 1;
          v9 = *(_QWORD *)(v26 + 8 * v24);
          goto LABEL_38;
        }
        *(_QWORD *)(v25 + 8 * v24) = *(_QWORD *)(v26 + 8 * v24);
        if (v32 - v8 == v24)
          break;
        v28 = v27 + v24;
        result = (_QWORD *)swift_bridgeObjectRetain();
        if (v27 + v24 >= v39)
        {
          ++v24;
          if (v28 < v34)
            continue;
        }
        goto LABEL_48;
      }
      v9 = 0;
      v4 = v35 + v24 + 2;
      v8 = v34;
LABEL_38:
      result = (_QWORD *)swift_bridgeObjectRetain();
      v19 = __OFSUB__(v4, v14);
      v20 = v4 - v14;
      if (v19)
        goto LABEL_51;
    }
LABEL_39:
    if (v20)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v29 = result[2];
      v19 = __OFADD__(v29, v20);
      v30 = v29 + v20;
      if (v19)
        goto LABEL_52;
      result[2] = v30;
      result = (_QWORD *)swift_release();
      v31 = v36 + v20;
      if (__OFADD__(v36, v20))
        goto LABEL_53;
      if (v31 < 0)
        goto LABEL_54;
      *(_QWORD *)(v1 + 24) = v12 & 1 | (2 * v31);
    }
    if (!v9)
      return result;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)();
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1[3];
  v30 = v1[2];
  v3 = (v2 >> 1) - v30;
  if (__OFSUB__(v2 >> 1, v30))
    goto LABEL_47;
  v4 = result[4];
  v26 = result[3] >> 1;
  if (v4 == v26)
    return result;
  if (v4 < result[2] || v4 >= v26)
    goto LABEL_48;
  v25 = result[2];
  v6 = v4 + 1;
  v7 = (uint64_t *)(result[1] + 16 * v4);
  v8 = *v7;
  v28 = v7[1];
  v24 = result[1];
  while (!__OFADD__(v3, 1))
  {
    v31 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v3, v3 + 1, *v1, v1[1], v30, v2);
    v9 = specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
    specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v31, v3, 0, (void (*)(uint64_t, uint64_t))v9);
    swift_release();
    result = (_QWORD *)swift_release();
    v2 = v1[3];
    v30 = v1[2];
    v10 = (v2 >> 1) - v30;
    if (__OFSUB__(v2 >> 1, v30))
      goto LABEL_42;
    v29 = v2 >> 1;
    v11 = v1[1];
    if ((v2 & 1) == 0)
      goto LABEL_19;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    v12 = swift_dynamicCastClass();
    if (!v12)
    {
      swift_unknownObjectRelease();
      v12 = MEMORY[0x24BEE4AF8];
    }
    v13 = *(_QWORD *)(v12 + 16);
    if (v11 + 16 * v30 + 16 * v10 != v12 + 16 * v13 + 32)
    {
      result = (_QWORD *)swift_release();
LABEL_19:
      v14 = (v2 >> 1) - v30;
      goto LABEL_21;
    }
    v27 = *(_QWORD *)(v12 + 24);
    result = (_QWORD *)swift_release();
    v15 = (v27 >> 1) - v13;
    v16 = __OFADD__(v10, v15);
    v14 = v10 + v15;
    if (v16)
      goto LABEL_46;
LABEL_21:
    if (v3 >= v14)
    {
      v18 = 0;
    }
    else
    {
      v17 = (_QWORD *)(v11 + 16 * v30 + 16 * v3);
      *v17 = v8;
      v17[1] = v28;
      if (v6 != v26)
      {
        v19 = 0;
        while (v6 >= v25 && v6 + v19 < v26)
        {
          if (~v3 + v14 == v19)
          {
            v18 = 0;
            v28 = *(_QWORD *)(v24 + 16 * v6 + 16 * v19 + 8);
            v8 = *(_QWORD *)(v24 + 16 * v6 + 16 * v19);
            v6 += v19 + 1;
            v3 = v14;
            goto LABEL_32;
          }
          *(_OWORD *)(v11 + 16 * v3 + 16 * v30 + 16 + 16 * v19) = *(_OWORD *)(v24 + 16 * v6 + 16 * v19);
          ++v19;
          if (!(v6 - v26 + v19))
          {
            v8 = 0;
            v28 = 0;
            v3 += 1 + v19;
            v6 = v26;
            v18 = 1;
            goto LABEL_32;
          }
        }
        goto LABEL_40;
      }
      v8 = 0;
      v28 = 0;
      v6 = v26;
      v18 = 1;
      ++v3;
    }
LABEL_32:
    v20 = v3 - v10;
    if (__OFSUB__(v3, v10))
      goto LABEL_43;
    if (v20)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v21 = result[2];
      v16 = __OFADD__(v21, v20);
      v22 = v21 + v20;
      if (v16)
        goto LABEL_44;
      result[2] = v22;
      result = (_QWORD *)swift_release();
      v23 = v29 + v20;
      if (__OFADD__(v29, v20))
        goto LABEL_45;
      if ((v23 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        break;
      }
      v2 = v2 & 1 | (2 * v23);
      v1[3] = v2;
    }
    if ((v18 & 1) != 0)
      return result;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

_QWORD *specialized ArraySlice.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  _QWORD v36[5];

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v15 = v9;
    goto LABEL_10;
  }
  v12 = v4[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    v13 = MEMORY[0x24BEE4AF8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (v12 + 4 * v8 + 4 * v9 != v13 + 4 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(v13 + 24);
  swift_release();
  v17 = (v16 >> 1) - v14;
  v18 = __OFADD__(v9, v17);
  v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v20 = 2 * v15;
    if (v20 > v19)
      v19 = v20;
  }
  result = (_QWORD *)specialized ArraySlice.reserveCapacity(_:)(v19);
  v23 = v4[2];
  v22 = v4[3];
  v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23))
    goto LABEL_40;
  v25 = (char *)(v4[1] + 4 * v23 + 4 * v24);
  if ((v22 & 1) == 0)
  {
LABEL_21:
    v28 = v24;
    goto LABEL_23;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
  }
  v27 = *(_QWORD *)(v26 + 16);
  if (v25 != (char *)(v26 + 4 * v27 + 32))
  {
    result = (_QWORD *)swift_release();
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(v26 + 24);
  result = (_QWORD *)swift_release();
  v30 = (v29 >> 1) - v27;
  v18 = __OFADD__(v24, v30);
  v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
    goto LABEL_48;
  v32 = (char *)(a2 + 4 * a3);
  v33 = 4 * v6;
  if (v32 < &v25[4 * v6] && v25 < &v32[v33])
    goto LABEL_48;
  result = memcpy(v25, v32, v33);
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    result = (_QWORD *)specialized _SliceBuffer.count.setter(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v36[0] = a1;
    v36[1] = a2;
    v36[2] = a3;
    v36[3] = a4;
    v36[4] = v5;
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v36);
  }
  return result;
}

{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v35[5];

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v15 = v9;
    goto LABEL_10;
  }
  v12 = v4[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    v13 = MEMORY[0x24BEE4AF8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(v13 + 24);
  swift_release();
  v17 = (v16 >> 1) - v14;
  v18 = __OFADD__(v9, v17);
  v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v20 = 2 * v15;
    if (v20 > v19)
      v19 = v20;
  }
  result = (_QWORD *)specialized ArraySlice.reserveCapacity(_:)(v19);
  v23 = v4[2];
  v22 = v4[3];
  v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23))
    goto LABEL_40;
  v25 = v4[1] + 8 * v23 + 8 * v24;
  if ((v22 & 1) == 0)
  {
LABEL_21:
    v28 = v24;
    goto LABEL_23;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
  }
  v27 = *(_QWORD *)(v26 + 16);
  if (v25 != v26 + 8 * v27 + 32)
  {
    result = (_QWORD *)swift_release();
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(v26 + 24);
  result = (_QWORD *)swift_release();
  v30 = (v29 >> 1) - v27;
  v18 = __OFADD__(v24, v30);
  v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
    goto LABEL_48;
  v32 = a2 + 8 * a3;
  if (v32 < v25 + 8 * v6 && v25 < v32 + 8 * v6)
    goto LABEL_48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CameraSource : [Float]]);
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    result = (_QWORD *)specialized _SliceBuffer.count.setter(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v35[0] = a1;
    v35[1] = a2;
    v35[2] = a3;
    v35[3] = a4;
    v35[4] = v5;
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v35);
  }
  return result;
}

{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  _QWORD v36[5];

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v15 = v9;
    goto LABEL_10;
  }
  v12 = v4[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    v13 = MEMORY[0x24BEE4AF8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (v12 + 16 * v8 + 16 * v9 != v13 + 16 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(v13 + 24);
  swift_release();
  v17 = (v16 >> 1) - v14;
  v18 = __OFADD__(v9, v17);
  v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v20 = 2 * v15;
    if (v20 > v19)
      v19 = v20;
  }
  result = (_QWORD *)specialized ArraySlice.reserveCapacity(_:)(v19);
  v23 = v4[2];
  v22 = v4[3];
  v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23))
    goto LABEL_40;
  v25 = (char *)(v4[1] + 16 * v23 + 16 * v24);
  if ((v22 & 1) == 0)
  {
LABEL_21:
    v28 = v24;
    goto LABEL_23;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
  }
  v27 = *(_QWORD *)(v26 + 16);
  if (v25 != (char *)(v26 + 16 * v27 + 32))
  {
    result = (_QWORD *)swift_release();
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(v26 + 24);
  result = (_QWORD *)swift_release();
  v30 = (v29 >> 1) - v27;
  v18 = __OFADD__(v24, v30);
  v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
    goto LABEL_48;
  v32 = (char *)(a2 + 16 * a3);
  v33 = 16 * v6;
  if (v32 < &v25[16 * v6] && v25 < &v32[v33])
    goto LABEL_48;
  result = memcpy(v25, v32, v33);
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    result = (_QWORD *)specialized _SliceBuffer.count.setter(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v36[0] = a1;
    v36[1] = a2;
    v36[2] = a3;
    v36[3] = a4;
    v36[4] = v5;
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v36);
  }
  return result;
}

char *specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v7 = *v3;
  v8 = v7 + 32 + 8 * a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CameraSource : [Float]]);
  result = (char *)swift_arrayDestroy();
  v10 = __OFSUB__(a3, v4);
  v11 = a3 - v4;
  if (v10)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v11)
    goto LABEL_14;
  v12 = *(_QWORD *)(v7 + 16);
  v10 = __OFSUB__(v12, a2);
  v13 = v12 - a2;
  if (v10)
    goto LABEL_18;
  if (v13 < 0)
  {
LABEL_21:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = (char *)(v8 + 8 * a3);
  v14 = (char *)(v7 + 32 + 8 * a2);
  if (result != v14 || result >= &v14[8 * v13])
    result = (char *)memmove(result, v14, 8 * v13);
  v16 = *(_QWORD *)(v7 + 16);
  v10 = __OFADD__(v16, v11);
  v17 = v16 + v11;
  if (v10)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v17;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t specialized TrackingBuffers.init(protoBuf:)@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t result;
  void *v66;
  id v67;
  Swift::String v68;
  Swift::String v69;
  _QWORD v70[2];
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t *v76;
  uint64_t v77;
  char *v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t v92;

  v4 = type metadata accessor for FeatureVectorPB(0);
  v77 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FeatureVectorPerFramePB(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v84 = (_QWORD *)((char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[1];
  if (*(_QWORD *)(v12 + 16) <= *(_QWORD *)(*a1 + 16))
    v13 = *(_QWORD *)(*a1 + 16);
  else
    v13 = *(_QWORD *)(v12 + 16);
  v14 = swift_bridgeObjectRetain();
  v15 = specialized CircularBuffer.init(buffer:capacity:writePtr:)(v14, v13, 0);
  if (!v16)
    goto LABEL_43;
  v18 = v15;
  v19 = v16;
  v20 = v17;
  v21 = *(_QWORD *)(v12 + 16);
  if (v21)
  {
    v71 = v13;
    v72 = v17;
    v73 = v16;
    v74 = v15;
    v75 = a1;
    v76 = a2;
    v92 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v22 = 0;
    v23 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v70[1] = v12;
    v81 = v12 + v23;
    v80 = *(_QWORD *)(v9 + 72);
    v78 = v7;
    v79 = v21;
    while (1)
    {
      v83 = v22;
      v24 = v84;
      outlined init with copy of TrackingUpdateDataPB(v81 + v80 * v22, (uint64_t)v84, type metadata accessor for FeatureVectorPerFramePB);
      v25 = *v24;
      v26 = *(_QWORD *)(v25 + 16);
      if (v26)
      {
        v86 = (_QWORD *)MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
        v27 = *(unsigned __int8 *)(v77 + 80);
        v82 = v25;
        v28 = v25 + ((v27 + 32) & ~v27);
        v85 = *(_QWORD *)(v77 + 72);
        v29 = v86;
        do
        {
          outlined init with copy of TrackingUpdateDataPB(v28, (uint64_t)v7, type metadata accessor for FeatureVectorPB);
          v30 = *(_QWORD *)v7;
          v31 = v7[8];
          v32 = *((_QWORD *)v7 + 2);
          swift_bridgeObjectRetain();
          outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for FeatureVectorPB);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1);
            v29 = v86;
          }
          v34 = v29[2];
          v33 = v29[3];
          if (v34 >= v33 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
            v29 = v86;
          }
          v29[2] = v34 + 1;
          v35 = &v29[3 * v34];
          v35[4] = v30;
          *((_BYTE *)v35 + 40) = v31;
          v35[6] = v32;
          v28 += v85;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        if (v29[2])
        {
LABEL_15:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [Float]>);
          v36 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
          v37 = v29[2];
          goto LABEL_18;
        }
      }
      else
      {
        v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
          goto LABEL_15;
      }
      v37 = 0;
      v36 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_18:
      v91 = v36;
      swift_bridgeObjectRetain_n();
      if (v37)
      {
        v38 = 0;
        v39 = v29 + 6;
        while (v38 < v29[2])
        {
          v40 = *(v39 - 2);
          v41 = *((_BYTE *)v39 - 8);
          v42 = *v39;
          swift_bridgeObjectRetain();
          if (!v42)
            goto LABEL_28;
          v89 = v40;
          v90 = v41;
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
          v45 = v36[2];
          v46 = (v44 & 1) == 0;
          v47 = __OFADD__(v45, v46);
          v48 = v45 + v46;
          if (v47)
            goto LABEL_41;
          v49 = v44;
          if (v36[3] < v48)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, 1);
            v36 = v91;
            v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
            if ((v49 & 1) != (v50 & 1))
              goto LABEL_47;
          }
          if ((v49 & 1) != 0)
            goto LABEL_45;
          v36[(v43 >> 6) + 8] |= 1 << v43;
          v51 = v36[6] + 16 * v43;
          *(_QWORD *)v51 = v40;
          *(_BYTE *)(v51 + 8) = v41;
          *(_QWORD *)(v36[7] + 8 * v43) = v42;
          v52 = v36[2];
          v47 = __OFADD__(v52, 1);
          v53 = v52 + 1;
          if (v47)
            goto LABEL_42;
          ++v38;
          v36[2] = v53;
          v39 += 3;
          if (v37 == v38)
            goto LABEL_28;
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        v66 = (void *)swift_allocError();
        swift_willThrow();
        v88 = v66;
        v67 = v66;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v86 = 0;
          v87 = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          v68._object = (void *)0x800000023D9C5160;
          v68._countAndFlagsBits = 0xD00000000000001BLL;
          String.append(_:)(v68);
          _print_unlocked<A, B>(_:_:)();
          v69._countAndFlagsBits = 39;
          v69._object = (void *)0xE100000000000000;
          String.append(_:)(v69);
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_47:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();

        result = swift_unexpectedError();
        __break(1u);
        return result;
      }
LABEL_28:
      swift_bridgeObjectRelease_n();
      outlined destroy of Matrix3x3PB((uint64_t)v84, type metadata accessor for FeatureVectorPerFramePB);
      v54 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v54 + 16) + 1, 1);
        v54 = v92;
      }
      v55 = v83;
      v7 = v78;
      v57 = *(_QWORD *)(v54 + 16);
      v56 = *(_QWORD *)(v54 + 24);
      if (v57 >= v56 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        v54 = v92;
      }
      v22 = v55 + 1;
      *(_QWORD *)(v54 + 16) = v57 + 1;
      *(_QWORD *)(v54 + 8 * v57 + 32) = v36;
      if (v22 == v79)
      {
        swift_bridgeObjectRelease();
        a1 = v75;
        a2 = v76;
        v19 = v73;
        v18 = v74;
        v20 = v72;
        v13 = v71;
        goto LABEL_35;
      }
    }
  }
  v54 = MEMORY[0x24BEE4AF8];
LABEL_35:
  if (*(_QWORD *)(v54 + 16) == v13)
    v58 = 0;
  else
    v58 = *(_QWORD *)(v54 + 16);
  v59 = specialized CircularBuffer.init(buffer:capacity:writePtr:)(v54, v13, v58);
  if (!v60)
    goto LABEL_44;
  v62 = v59;
  v63 = v60;
  v64 = v61;
  result = outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for TrackingBuffersPB);
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v62;
  a2[4] = v63;
  a2[5] = v64;
  return result;
}

unint64_t specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v7 = *v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(v8 - 8);
  v11 = v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v12 = *(_QWORD *)(v10 + 72);
  v13 = v11 + v12 * a1;
  result = swift_arrayDestroy();
  v15 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v16 = v12 * a3;
  if (v15)
  {
    v17 = *(_QWORD *)(v7 + 16);
    v18 = v17 - a2;
    if (!__OFSUB__(v17, a2))
    {
      if (v18 < 0)
      {
LABEL_24:
        result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      result = v13 + v16;
      v19 = v11 + v12 * a2;
      if (v13 + v16 < v19 || result >= v19 + v18 * v12)
      {
        result = swift_arrayInitWithTakeFrontToBack();
      }
      else if (result != v19)
      {
        result = swift_arrayInitWithTakeBackToFront();
      }
      v21 = *(_QWORD *)(v7 + 16);
      v22 = __OFADD__(v21, v15);
      v23 = v21 + v15;
      if (!v22)
      {
        *(_QWORD *)(v7 + 16) = v23;
        goto LABEL_16;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_16:
  if (a3 >= 1 && v16 > 0)
    goto LABEL_23;
  return result;
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v7 = *v3;
  v8 = type metadata accessor for LogMessage(0);
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(v8 - 8);
  v11 = v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v12 = *(_QWORD *)(v10 + 72);
  v13 = v11 + v12 * a1;
  result = swift_arrayDestroy();
  v15 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v16 = v12 * a3;
  if (v15)
  {
    v17 = *(_QWORD *)(v7 + 16);
    v18 = v17 - a2;
    if (!__OFSUB__(v17, a2))
    {
      if (v18 < 0)
      {
LABEL_24:
        result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      result = v13 + v16;
      v19 = v11 + v12 * a2;
      if (v13 + v16 < v19 || result >= v19 + v18 * v12)
      {
        result = swift_arrayInitWithTakeFrontToBack();
      }
      else if (result != v19)
      {
        result = swift_arrayInitWithTakeBackToFront();
      }
      v21 = *(_QWORD *)(v7 + 16);
      v22 = __OFADD__(v21, v15);
      v23 = v21 + v15;
      if (!v22)
      {
        *(_QWORD *)(v7 + 16) = v23;
        goto LABEL_16;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_16:
  if (a3 >= 1 && v16 > 0)
    goto LABEL_23;
  return result;
}

void specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  size_t v66;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v55 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes??);
  MEMORY[0x24BDAC7A8](v7, v8);
  MEMORY[0x24BDAC7A8](v9, v10);
  v56 = (uint64_t)&v55 - v11;
  v16 = MEMORY[0x24BDAC7A8](v12, v13);
  v17 = (char *)&v55 - v14;
  v18 = *(_QWORD *)(v1 + 16);
  v19 = *(_QWORD *)(v1 + 24) >> 1;
  v20 = v19 - v18;
  if (!__OFSUB__(v19, v18))
  {
    v57 = v4;
    v21 = a1[1];
    v22 = a1[2];
    v60 = v22;
    v61 = v21;
    v23 = a1[4];
    v63 = a1[3] >> 1;
    v65 = v15;
    if (v23 == v63)
    {
      v24 = v57;
      v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v57 + 56);
      v62((char *)&v55 - v14, 1, 1, v3, v16);
      v25 = v56;
    }
    else
    {
      v25 = v56;
      if (v23 < v22 || v23 >= v63)
        goto LABEL_54;
      v24 = v57;
      outlined init with copy of (Int32, Matrix2dPB)(v61 + *(_QWORD *)(v57 + 72) * v23++, (uint64_t)&v55 - v14, &demangling cache variable for type metadata for DerivedHandAttributes?);
      v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v24 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v62)(v17, 0, 1, v3);
    }
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, v25, &demangling cache variable for type metadata for DerivedHandAttributes??);
    v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    if (v64(v25, 1, v3) == 1)
    {
LABEL_8:
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for DerivedHandAttributes??);
      outlined destroy of Coordinate3DPB?(v25, &demangling cache variable for type metadata for DerivedHandAttributes??);
      return;
    }
    v59 = v3;
    while (1)
    {
      outlined destroy of Coordinate3DPB?(v25, &demangling cache variable for type metadata for DerivedHandAttributes??);
      if (__OFADD__(v20, 1))
        goto LABEL_45;
      v66 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v20, v20 + 1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
      v26 = specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
      specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((uint64_t *)&v66, v20, 0, (void (*)(unint64_t, uint64_t))v26);
      swift_release();
      swift_release();
      v28 = *(_QWORD *)(v1 + 16);
      v27 = *(_QWORD *)(v1 + 24);
      v29 = (v27 >> 1) - v28;
      if (__OFSUB__(v27 >> 1, v28))
        break;
      v30 = *(_QWORD *)(v1 + 8);
      v58 = v30;
      if ((v27 & 1) != 0)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        v31 = swift_dynamicCastClass();
        if (!v31)
        {
          swift_unknownObjectRelease();
          v31 = MEMORY[0x24BEE4AF8];
        }
        v32 = *(_QWORD *)(v31 + 16);
        v33 = *(_QWORD *)(v57 + 72);
        v34 = v33 * v28;
        if (v30 + v33 * v28 + v33 * v29 == v31
                                          + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))
                                          + v33 * v32)
        {
          v35 = *(_QWORD *)(v31 + 24);
          swift_release();
          v36 = (v35 >> 1) - v32;
          v37 = __OFADD__(v29, v36);
          v29 += v36;
          if (v37)
            goto LABEL_52;
        }
        else
        {
          swift_release();
        }
        v3 = v59;
      }
      else
      {
        v33 = *(_QWORD *)(v57 + 72);
        v34 = v33 * v28;
      }
      v38 = v65;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, v65, &demangling cache variable for type metadata for DerivedHandAttributes??);
      v39 = v64(v38, 1, v3);
      v40 = (uint64_t)v55;
      if (v39 != 1)
      {
        if (v29 <= v20)
          v29 = v20;
        v42 = v58 + v34 + v33 * v20;
        v41 = v65;
        while (1)
        {
          outlined init with take of DerivedHandAttributes?(v41, v40);
          if (v29 == v20)
          {
            outlined destroy of Coordinate3DPB?(v40, &demangling cache variable for type metadata for DerivedHandAttributes?);
            v20 = v29;
            goto LABEL_34;
          }
          outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for DerivedHandAttributes??);
          outlined init with take of DerivedHandAttributes?(v40, v42);
          if (v23 == v63)
          {
            v43 = v17;
            v44 = 1;
            v45 = v3;
            v23 = v63;
          }
          else
          {
            if (v23 < v60 || v23 >= v63)
            {
              __break(1u);
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }
            outlined init with copy of (Int32, Matrix2dPB)(v61 + v23 * v33, (uint64_t)v17, &demangling cache variable for type metadata for DerivedHandAttributes?);
            ++v23;
            v43 = v17;
            v44 = 0;
            v45 = v3;
          }
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v62)(v43, v44, 1, v45);
          v41 = v65;
          outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, v65, &demangling cache variable for type metadata for DerivedHandAttributes??);
          v42 += v33;
          ++v20;
          if (v64(v41, 1, v3) == 1)
            goto LABEL_22;
        }
      }
      v41 = v65;
LABEL_22:
      outlined destroy of Coordinate3DPB?(v41, &demangling cache variable for type metadata for DerivedHandAttributes??);
LABEL_34:
      v46 = *(_QWORD *)(v1 + 16);
      v47 = *(_QWORD *)(v1 + 24);
      v48 = v47 >> 1;
      v37 = __OFSUB__(v47 >> 1, v46);
      v49 = (v47 >> 1) - v46;
      if (v37)
        goto LABEL_47;
      v50 = v20 - v49;
      if (__OFSUB__(v20, v49))
        goto LABEL_48;
      if (v50)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        v51 = swift_dynamicCastClass();
        if (!v51)
        {
          swift_unknownObjectRelease();
          v51 = MEMORY[0x24BEE4AF8];
        }
        v52 = *(_QWORD *)(v51 + 16);
        v37 = __OFADD__(v52, v50);
        v53 = v52 + v50;
        if (v37)
          goto LABEL_49;
        *(_QWORD *)(v51 + 16) = v53;
        swift_release();
        v54 = v48 + v50;
        if (__OFADD__(v48, v50))
          goto LABEL_50;
        if (v54 < 0)
          goto LABEL_51;
        *(_QWORD *)(v1 + 24) = v47 & 1 | (2 * v54);
      }
      v25 = v56;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, v56, &demangling cache variable for type metadata for DerivedHandAttributes??);
      v3 = v59;
      if (v64(v25, 1, v59) == 1)
        goto LABEL_8;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
  }
  __break(1u);
LABEL_54:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t (*v31)();
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  size_t v71;

  v3 = type metadata accessor for LogMessage(0);
  v62 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage?);
  MEMORY[0x24BDAC7A8](v7, v8);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v60 - v11;
  v17 = MEMORY[0x24BDAC7A8](v13, v14);
  v18 = (char *)&v60 - v15;
  v19 = *(_QWORD *)(v1 + 16);
  v20 = *(_QWORD *)(v1 + 24) >> 1;
  v21 = v20 - v19;
  if (!__OFSUB__(v20, v19))
  {
    v22 = a1[1];
    v23 = a1[2];
    v65 = v23;
    v66 = v22;
    v24 = a1[3];
    v25 = a1[4];
    v26 = v24 >> 1;
    v68 = v26;
    v70 = v16;
    if (v25 == v26)
    {
      v27 = v62;
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
      v29 = (char *)&v60 - v15;
      v30 = 1;
    }
    else
    {
      v27 = v62;
      if (v25 < v23 || v25 >= v26)
        goto LABEL_54;
      outlined init with copy of TrackingUpdateDataPB(v66 + *(_QWORD *)(v62 + 72) * v25++, (uint64_t)&v60 - v15, type metadata accessor for LogMessage);
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v29 = v18;
      v30 = 0;
    }
    v67 = v28;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v28)(v29, v30, 1, v3, v17);
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v18, (uint64_t)v12, &demangling cache variable for type metadata for LogMessage?);
    v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    if (v69(v12, 1, v3) == 1)
    {
LABEL_8:
      outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for LogMessage?);
      outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for LogMessage?);
      return;
    }
    v64 = v3;
    v60 = v12;
    v61 = v6;
    while (1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for LogMessage?);
      if (__OFADD__(v21, 1))
        goto LABEL_45;
      v71 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v21, v21 + 1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
      v31 = specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
      specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((uint64_t *)&v71, v21, 0, (void (*)(unint64_t, uint64_t))v31);
      swift_release();
      swift_release();
      v33 = *(_QWORD *)(v1 + 16);
      v32 = *(_QWORD *)(v1 + 24);
      v34 = (v32 >> 1) - v33;
      if (__OFSUB__(v32 >> 1, v33))
        break;
      v35 = *(_QWORD *)(v1 + 8);
      v63 = v35;
      if ((v32 & 1) != 0)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        v36 = swift_dynamicCastClass();
        if (!v36)
        {
          swift_unknownObjectRelease();
          v36 = MEMORY[0x24BEE4AF8];
        }
        v37 = *(_QWORD *)(v36 + 16);
        v38 = *(_QWORD *)(v62 + 72);
        v39 = v38 * v33;
        if (v35 + v38 * v33 + v38 * v34 == v36
                                          + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))
                                          + v38 * v37)
        {
          v40 = *(_QWORD *)(v36 + 24);
          swift_release();
          v41 = (v40 >> 1) - v37;
          v42 = __OFADD__(v34, v41);
          v34 += v41;
          if (v42)
            goto LABEL_52;
        }
        else
        {
          swift_release();
        }
        v3 = v64;
      }
      else
      {
        v38 = *(_QWORD *)(v62 + 72);
        v39 = v38 * v33;
      }
      v43 = v70;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v18, v70, &demangling cache variable for type metadata for LogMessage?);
      v44 = v69((char *)v43, 1, v3);
      v45 = (uint64_t)v61;
      if (v44 != 1)
      {
        if (v34 <= v21)
          v34 = v21;
        v47 = v63 + v39 + v38 * v21;
        v46 = v70;
        while (1)
        {
          outlined init with take of Matrix2dPB(v46, v45, type metadata accessor for LogMessage);
          if (v34 == v21)
          {
            outlined destroy of Matrix3x3PB(v45, type metadata accessor for LogMessage);
            v21 = v34;
            goto LABEL_34;
          }
          outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for LogMessage?);
          outlined init with take of Matrix2dPB(v45, v47, type metadata accessor for LogMessage);
          if (v25 == v68)
          {
            v48 = v18;
            v49 = 1;
            v50 = v3;
            v25 = v68;
          }
          else
          {
            if (v25 < v65 || v25 >= v68)
            {
              __break(1u);
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }
            outlined init with copy of TrackingUpdateDataPB(v66 + v25 * v38, (uint64_t)v18, type metadata accessor for LogMessage);
            ++v25;
            v48 = v18;
            v49 = 0;
            v50 = v3;
          }
          v67(v48, v49, 1, v50);
          v46 = v70;
          outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v18, v70, &demangling cache variable for type metadata for LogMessage?);
          v47 += v38;
          ++v21;
          if (v69((char *)v46, 1, v3) == 1)
            goto LABEL_22;
        }
      }
      v46 = v70;
LABEL_22:
      outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for LogMessage?);
LABEL_34:
      v51 = *(_QWORD *)(v1 + 16);
      v52 = *(_QWORD *)(v1 + 24);
      v53 = v52 >> 1;
      v42 = __OFSUB__(v52 >> 1, v51);
      v54 = (v52 >> 1) - v51;
      if (v42)
        goto LABEL_47;
      v55 = v21 - v54;
      if (__OFSUB__(v21, v54))
        goto LABEL_48;
      if (v55)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        v56 = swift_dynamicCastClass();
        if (!v56)
        {
          swift_unknownObjectRelease();
          v56 = MEMORY[0x24BEE4AF8];
        }
        v57 = *(_QWORD *)(v56 + 16);
        v42 = __OFADD__(v57, v55);
        v58 = v57 + v55;
        if (v42)
          goto LABEL_49;
        *(_QWORD *)(v56 + 16) = v58;
        swift_release();
        v59 = v53 + v55;
        if (__OFADD__(v53, v55))
          goto LABEL_50;
        if (v59 < 0)
          goto LABEL_51;
        *(_QWORD *)(v1 + 24) = v52 & 1 | (2 * v59);
      }
      v12 = v60;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v18, (uint64_t)v60, &demangling cache variable for type metadata for LogMessage?);
      v3 = v64;
      if (v69(v12, 1, v64) == 1)
        goto LABEL_8;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
  }
  __break(1u);
LABEL_54:
  __break(1u);
}

void specialized ArraySlice.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v37;
  _QWORD v38[5];

  v37 = a4 >> 1;
  v9 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_41;
  v6 = v5[2];
  v10 = v5[3];
  v4 = (v10 >> 1) - v6;
  if (__OFSUB__(v10 >> 1, v6))
    goto LABEL_42;
  if ((v10 & 1) == 0)
    goto LABEL_8;
  v8 = *v5;
  v13 = v5[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
  }
  v14 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v15 = *(_QWORD *)(v7 + 16);
  if (v13 + *(_QWORD *)(v14 + 72) * v6 + *(_QWORD *)(v14 + 72) * v4 != v7
                                                                      + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
                                                                      + *(_QWORD *)(v14 + 72) * v15)
  {
    swift_release();
LABEL_8:
    v16 = v4;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v7 + 24);
  swift_release();
  v17 = (v6 >> 1) - v15;
  v18 = __OFADD__(v4, v17);
  v16 = v4 + v17;
  if (v18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_10:
  v19 = v4 + v9;
  if (__OFADD__(v4, v9))
    goto LABEL_43;
  if (v16 < v19)
  {
    if (v16 + 0x4000000000000000 < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v20 = 2 * v16;
    if (v20 > v19)
      v19 = v20;
  }
  v34 = a1;
  v7 = a3;
  specialized ArraySlice.reserveCapacity(_:)(v19);
  v8 = v5[2];
  v21 = v5[3];
  v6 = (v21 >> 1) - v8;
  if (__OFSUB__(v21 >> 1, v8))
    goto LABEL_44;
  v22 = v5[1];
  v23 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                  - 8);
  v4 = *(_QWORD *)(v23 + 72);
  v8 = v22 + v4 * v8 + v4 * v6;
  if ((v21 & 1) == 0)
    goto LABEL_45;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v24 = swift_dynamicCastClass();
  v25 = v37;
  if (!v24)
  {
    swift_unknownObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
  }
  v26 = *(unsigned __int8 *)(v23 + 80);
  v27 = *(_QWORD *)(v24 + 16);
  if (v8 == v24 + ((v26 + 32) & ~v26) + v27 * v4)
  {
    v31 = *(_QWORD *)(v24 + 24);
    swift_release();
    v32 = (v31 >> 1) - v27;
    v18 = __OFADD__(v6, v32);
    v33 = v6 + v32;
    if (v18)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    while (1)
    {
      v25 = v37;
      v28 = v33 - v6;
      if (!__OFSUB__(v33, v6))
        break;
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      v33 = v6;
    }
  }
  else
  {
    swift_release();
    v28 = 0;
  }
  if (v25 == v7)
  {
    if (v9 <= 0)
    {
      v9 = 0;
      v25 = v7;
      goto LABEL_34;
    }
    __break(1u);
    goto LABEL_47;
  }
  if (v28 < v9)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v9 < 0)
    goto LABEL_52;
  v29 = a2 + v4 * v7;
  if (v29 < v8 + v4 * v9 && v8 < v29 + v4 * v9)
    goto LABEL_52;
  swift_arrayInitWithCopy();
  if (v9)
  {
    if (__OFADD__(v6, v9))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    specialized _SliceBuffer.count.setter(v6 + v9);
  }
LABEL_34:
  if (v9 == v28)
  {
    v38[0] = v34;
    v38[1] = a2;
    v38[2] = v7;
    v38[3] = a4;
    v38[4] = v25;
    specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v38);
  }
}

{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v37;
  _QWORD v38[5];

  v37 = a4 >> 1;
  v9 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_41;
  v6 = v5[2];
  v10 = v5[3];
  v4 = (v10 >> 1) - v6;
  if (__OFSUB__(v10 >> 1, v6))
    goto LABEL_42;
  if ((v10 & 1) == 0)
    goto LABEL_8;
  v8 = *v5;
  v13 = v5[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
  }
  v14 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
  v15 = *(_QWORD *)(v7 + 16);
  if (v13 + *(_QWORD *)(v14 + 72) * v6 + *(_QWORD *)(v14 + 72) * v4 != v7
                                                                      + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
                                                                      + *(_QWORD *)(v14 + 72) * v15)
  {
    swift_release();
LABEL_8:
    v16 = v4;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v7 + 24);
  swift_release();
  v17 = (v6 >> 1) - v15;
  v18 = __OFADD__(v4, v17);
  v16 = v4 + v17;
  if (v18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_10:
  v19 = v4 + v9;
  if (__OFADD__(v4, v9))
    goto LABEL_43;
  if (v16 < v19)
  {
    if (v16 + 0x4000000000000000 < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v20 = 2 * v16;
    if (v20 > v19)
      v19 = v20;
  }
  v34 = a1;
  v7 = a3;
  specialized ArraySlice.reserveCapacity(_:)(v19);
  v8 = v5[2];
  v21 = v5[3];
  v6 = (v21 >> 1) - v8;
  if (__OFSUB__(v21 >> 1, v8))
    goto LABEL_44;
  v22 = v5[1];
  v23 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
  v4 = *(_QWORD *)(v23 + 72);
  v8 = v22 + v4 * v8 + v4 * v6;
  if ((v21 & 1) == 0)
    goto LABEL_45;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v24 = swift_dynamicCastClass();
  v25 = v37;
  if (!v24)
  {
    swift_unknownObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
  }
  v26 = *(unsigned __int8 *)(v23 + 80);
  v27 = *(_QWORD *)(v24 + 16);
  if (v8 == v24 + ((v26 + 32) & ~v26) + v27 * v4)
  {
    v31 = *(_QWORD *)(v24 + 24);
    swift_release();
    v32 = (v31 >> 1) - v27;
    v18 = __OFADD__(v6, v32);
    v33 = v6 + v32;
    if (v18)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    while (1)
    {
      v25 = v37;
      v28 = v33 - v6;
      if (!__OFSUB__(v33, v6))
        break;
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      v33 = v6;
    }
  }
  else
  {
    swift_release();
    v28 = 0;
  }
  if (v25 == v7)
  {
    if (v9 <= 0)
    {
      v9 = 0;
      v25 = v7;
      goto LABEL_34;
    }
    __break(1u);
    goto LABEL_47;
  }
  if (v28 < v9)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v9 < 0)
    goto LABEL_52;
  v29 = a2 + v4 * v7;
  if (v29 < v8 + v4 * v9 && v8 < v29 + v4 * v9)
    goto LABEL_52;
  swift_arrayInitWithCopy();
  if (v9)
  {
    if (__OFADD__(v6, v9))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    specialized _SliceBuffer.count.setter(v6 + v9);
  }
LABEL_34:
  if (v9 == v28)
  {
    v38[0] = v34;
    v38[1] = a2;
    v38[2] = v7;
    v38[3] = a4;
    v38[4] = v25;
    specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v38);
  }
}

unint64_t specialized TrackingBuffers.init(fromBuffer:newCapacity:)@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t result;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = specialized CircularBuffer.toList()(*a1, a1[1], a1[2], (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
  if (*(_QWORD *)(v6 + 16) == a2)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v6 + 16);
  v8 = specialized CircularBuffer.init(buffer:capacity:writePtr:)(v6, a2, v7);
  v11 = v10;
  if (!v10)
  {
    swift_bridgeObjectRelease();
    v19 = *(_OWORD *)(a1 + 3);
    v20 = a1[5];
    outlined release of CircularBuffer<DerivedHandAttributes?>((uint64_t)&v19);
    v12 = 0;
    goto LABEL_11;
  }
  v12 = v8;
  v13 = v9;
  v14 = specialized CircularBuffer.toList()(a1[3], a1[4], a1[5], (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:), specialized _copyCollectionToContiguousArray<A>(_:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16) == a2)
    v15 = 0;
  else
    v15 = *(_QWORD *)(v14 + 16);
  result = specialized CircularBuffer.init(buffer:capacity:writePtr:)(v14, a2, v15);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    v12 = 0;
    v11 = 0;
LABEL_11:
    v13 = 0;
    result = 0;
    v17 = 0;
    v18 = 0;
  }
  *a3 = v12;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = result;
  a3[4] = v17;
  a3[5] = v18;
  return result;
}

uint64_t destroy for TrackingBuffers()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrackingBuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TrackingBuffers(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for TrackingBuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for TrackingBuffers()
{
  return &type metadata for TrackingBuffers;
}

unint64_t lazy protocol witness table accessor for type TrackingBuffersPB and conformance TrackingBuffersPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB;
  if (!lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB)
  {
    v1 = type metadata accessor for TrackingBuffersPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingBuffersPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingBuffersPB and conformance TrackingBuffersPB);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EstimatedBoundingBox(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EstimatedBoundingBox(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 36) = v3;
  return result;
}

ValueMetadata *type metadata accessor for EstimatedBoundingBox()
{
  return &type metadata for EstimatedBoundingBox;
}

unint64_t lazy protocol witness table accessor for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB;
  if (!lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB)
  {
    v1 = type metadata accessor for EstimatedBoundingBoxPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EstimatedBoundingBoxPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EstimatedBoundingBoxPB and conformance EstimatedBoundingBoxPB);
  }
  return result;
}

uint64_t EstimatedBoundingBox.init(protoBuf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD v20[4];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) == 2 && (v4 = *(_QWORD *)(a1 + 8), *(_QWORD *)(v4 + 16) == 2))
  {
    specialized SIMD.init<A>(_:)(*(_QWORD *)a1);
    v6 = v5;
    specialized SIMD.init<A>(_:)(v4);
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(unsigned __int8 *)(a1 + 32);
    v12 = *(unsigned int *)(a1 + 16);
    v11 = *(_DWORD *)(a1 + 20);
    result = outlined destroy of EstimatedBoundingBoxPB(a1);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v10 | (v12 << 32);
    *(_DWORD *)(a2 + 32) = v11;
    *(_BYTE *)(a2 + 36) = 0;
  }
  else
  {
    v21 = xmmword_23D9A8970;
    v22 = 0;
    v23 = 0;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v20[0] = 0xD00000000000001FLL;
    v20[1] = 0x800000023D9D95E0;
    v14 = swift_bridgeObjectRetain();
    v15 = MEMORY[0x24BEE14E8];
    v16._countAndFlagsBits = MEMORY[0x2426374F8](v14, MEMORY[0x24BEE14E8]);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 32;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18 = swift_bridgeObjectRetain();
    v19._countAndFlagsBits = MEMORY[0x2426374F8](v18, v15);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000074, 0x800000023D9D9560, 39, (uint64_t *)&v21, (uint64_t)v20, MEMORY[0x24BEE4AF8]);
    outlined destroy of EstimatedBoundingBoxPB(a1);
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
    *(_DWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 36) = 1;
  }
  return result;
}

double EstimatedBoundingBox.toProtoBuf()@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = *((_BYTE *)v1 + 24);
  type metadata accessor for EstimatedBoundingBoxPB(0);
  UnknownStorage.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23D9A7050;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)a1 = v7;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23D9A7050;
  *(_QWORD *)(v8 + 32) = v4;
  *(_QWORD *)(a1 + 8) = v8;
  result = *(double *)((char *)v1 + 28);
  *(double *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

uint64_t EstimatedBoundingBox.almostEqual(to:withThreshold:)(float32x2_t *a1, double a2)
{
  float32x2_t *v2;
  float32x2_t v3;
  float v4;
  float v5;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t v13;
  float v14;
  float v15;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  float v20;
  float v21;
  float v22;
  float v23;
  char v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;

  v3 = vsub_f32(*v2, *a1);
  v4 = a2;
  v5 = fabsf(v3.f32[1]);
  if (fabsf(v3.f32[0]) > v4 || v5 > v4)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v34[0] = 0xD000000000000010;
    v34[1] = 0x800000023D9D9600;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>();
    v7._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v35 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v31 = xmmword_23D9A8970;
    v32 = 0;
    v33 = 0;
    v10 = MEMORY[0x24BEE4AF8];
    v11 = 66;
LABEL_7:
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v31, 0xD000000000000074, 0x800000023D9D9560, v11, (uint64_t)v34, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
    return 0;
  }
  v13 = vsub_f32(v2[1], a1[1]);
  v14 = fabsf(v13.f32[0]);
  v15 = fabsf(v13.f32[1]);
  if (v14 > v4 || v15 > v4)
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    strcpy((char *)v34, "size mismatch ");
    HIBYTE(v34[1]) = -18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>();
    v17._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 32;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v35 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v31 = xmmword_23D9A8970;
    v32 = 0;
    v33 = 0;
    v10 = MEMORY[0x24BEE4AF8];
    v11 = 70;
    goto LABEL_7;
  }
  v21 = a1[3].f32[1];
  v20 = a1[4].f32[0];
  v23 = v2[3].f32[1];
  v22 = v2[4].f32[0];
  v24 = specialized == infix<A>(_:_:)(*(_QWORD *)&v2[2], v2[3].u8[0], *(_QWORD *)&a1[2], a1[3].u8[0]);
  if ((v24 & 1) == 0)
  {
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    v27._countAndFlagsBits = 0xD000000000000016;
    v27._object = (void *)0x800000023D9D9620;
    String.append(_:)(v27);
    _print_unlocked<A, B>(_:_:)();
    v28._countAndFlagsBits = 32;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v35 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v31 = xmmword_23D9A8970;
    v32 = 0;
    v33 = 0;
    v10 = MEMORY[0x24BEE4AF8];
    v11 = 74;
    goto LABEL_7;
  }
  if (vabds_f32(v23, v21) > v4)
  {
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v25._countAndFlagsBits = 0xD000000000000013;
    v25._object = (void *)0x800000023D9D9640;
    String.append(_:)(v25);
    Float.write<A>(to:)();
    v26._countAndFlagsBits = 32;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    Float.write<A>(to:)();
    v35 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v31 = xmmword_23D9A8970;
    v32 = 0;
    v33 = 0;
    v10 = MEMORY[0x24BEE4AF8];
    v11 = 78;
    goto LABEL_7;
  }
  if (vabds_f32(v22, v20) > v4)
  {
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v29._countAndFlagsBits = 0xD000000000000018;
    v29._object = (void *)0x800000023D9D9660;
    String.append(_:)(v29);
    Float.write<A>(to:)();
    v30._countAndFlagsBits = 32;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    Float.write<A>(to:)();
    v35 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v31 = xmmword_23D9A8970;
    v32 = 0;
    v33 = 0;
    v10 = MEMORY[0x24BEE4AF8];
    v11 = 82;
    goto LABEL_7;
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EstimatedBoundingBox(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  char v8;
  float32x2_t v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *((_BYTE *)a1 + 24);
  v5 = *(float32x2_t *)a2;
  v6 = *(float32x2_t *)(a2 + 8);
  v7 = *(float32x2_t *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 24);
  v13 = *a1;
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = *(uint64_t *)((char *)a1 + 28);
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v7;
  v11 = v8;
  v12 = *(_QWORD *)(a2 + 28);
  return EstimatedBoundingBox.almostEqual(to:withThreshold:)(v10, 0.0000001) & 1;
}

uint64_t outlined destroy of EstimatedBoundingBoxPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EstimatedBoundingBoxPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static PinchHelper.copyActionResultToHand(from:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, int *);
  int v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[896];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v75 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v13 = (char *)&v66 - v12;
  v15 = MEMORY[0x24BDAC7A8](v11, v14);
  v17 = (char *)&v66 - v16;
  MEMORY[0x24BDAC7A8](v15, v18);
  v20 = (char *)&v66 - v19;
  outlined init with copy of HandDescriptor(a2, a3);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4);
  *(_BYTE *)(a3 + 137) = *(_BYTE *)(a1 + 137);
  v21 = type metadata accessor for HandDescriptor();
  v74 = a1 + *(int *)(v21 + 96);
  outlined init with copy of HandDescriptorInternal?(v74, (uint64_t)v20);
  v22 = (int *)type metadata accessor for HandDescriptorInternal();
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(uint64_t (**)(char *, uint64_t, int *))(v23 + 48);
  v25 = v24(v20, 1, v22);
  result = outlined destroy of HandDescriptorInternal?((uint64_t)v20);
  if (v25 != 1)
  {
    v27 = a3 + *(int *)(v21 + 96);
    outlined init with copy of HandDescriptorInternal?(v27, (uint64_t)v17);
    if (v24(v17, 1, v22) == 1)
    {
      outlined destroy of HandDescriptorInternal?((uint64_t)v17);
      *((_QWORD *)v13 + 18) = 0;
      *((_QWORD *)v13 + 19) = 0;
      _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_((uint64_t)v76);
      outlined init with take of RecoverRepetitivePinchInternalData?((uint64_t)v76, (uint64_t)(v13 + 160));
      v28 = &v13[v22[10]];
      v29 = type metadata accessor for ActionInternalPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
      v30 = &v13[v22[11]];
      v31 = type metadata accessor for UnsureInternalPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
      v32 = &v13[v22[12]];
      v33 = type metadata accessor for ObjectInteractionStateInternalPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
      v34 = &v13[v22[13]];
      v35 = type metadata accessor for HomePinchInternalPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
      v36 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v13[v22[14]] = MEMORY[0x24BEE4AF8];
      *((_DWORD *)v13 + 32) = 0;
      *((_OWORD *)v13 + 6) = 0u;
      *((_OWORD *)v13 + 7) = 0u;
      *((_OWORD *)v13 + 4) = 0u;
      *((_OWORD *)v13 + 5) = 0u;
      *((_OWORD *)v13 + 2) = 0u;
      *((_OWORD *)v13 + 3) = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      v13[8] = 2;
      *(_QWORD *)v13 = specialized Dictionary.init(dictionaryLiteral:)(v36);
      *((_QWORD *)v13 + 17) = specialized Dictionary.init(dictionaryLiteral:)(v36);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v23 + 56))(v13, 0, 1, v22);
      outlined assign with take of HandDescriptorInternal?((uint64_t)v13, v27);
    }
    else
    {
      outlined destroy of HandDescriptorInternal?((uint64_t)v17);
    }
    result = v24((char *)v27, 1, v22);
    if (!(_DWORD)result)
    {
      v37 = v75;
      outlined init with copy of HandDescriptorInternal?(v74, v75);
      if (v24((char *)v37, 1, v22) == 1)
      {
        outlined destroy of HandDescriptorInternal?(v37);
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
      }
      else
      {
        v53 = *(_QWORD *)(v37 + 16);
        v73 = *(_QWORD *)(v37 + 24);
        v74 = v53;
        v54 = *(_QWORD *)(v37 + 32);
        v55 = *(_QWORD *)(v37 + 40);
        v43 = *(_QWORD *)(v37 + 56);
        v67 = *(_QWORD *)(v37 + 48);
        v68 = v55;
        v56 = *(_QWORD *)(v37 + 64);
        v45 = *(_QWORD *)(v37 + 72);
        v57 = *(_QWORD *)(v37 + 88);
        v69 = *(_QWORD *)(v37 + 80);
        v70 = v54;
        v58 = *(_QWORD *)(v37 + 96);
        v59 = *(_QWORD *)(v37 + 104);
        v71 = v57;
        v72 = v58;
        v50 = *(_QWORD *)(v37 + 112);
        v51 = *(_QWORD *)(v37 + 120);
        v52 = *(_DWORD *)(v37 + 128);
        outlined copy of PinchInternalData?(v53, v73, v54, v55, v67);
        v60 = v37;
        v49 = v59;
        outlined destroy of HandDescriptorInternal(v60);
        v47 = v71;
        v48 = v72;
        v41 = v68;
        v46 = v69;
        v44 = v56;
        v42 = v67;
        v40 = v70;
        v39 = v73;
        v38 = v74;
      }
      v61 = *(_QWORD *)(v27 + 16);
      v62 = *(_QWORD *)(v27 + 24);
      v63 = *(_QWORD *)(v27 + 32);
      v64 = *(_QWORD *)(v27 + 40);
      v65 = *(_QWORD *)(v27 + 48);
      *(_QWORD *)(v27 + 16) = v38;
      *(_QWORD *)(v27 + 24) = v39;
      *(_QWORD *)(v27 + 32) = v40;
      *(_QWORD *)(v27 + 40) = v41;
      *(_QWORD *)(v27 + 48) = v42;
      *(_QWORD *)(v27 + 56) = v43;
      *(_QWORD *)(v27 + 64) = v44;
      *(_QWORD *)(v27 + 72) = v45;
      *(_QWORD *)(v27 + 80) = v46;
      *(_QWORD *)(v27 + 88) = v47;
      *(_QWORD *)(v27 + 96) = v48;
      *(_QWORD *)(v27 + 104) = v49;
      *(_QWORD *)(v27 + 112) = v50;
      *(_QWORD *)(v27 + 120) = v51;
      *(_DWORD *)(v27 + 128) = v52;
      return outlined consume of PinchInternalData?(v61, v62, v63, v64, v65);
    }
  }
  return result;
}

uint64_t PinchModelInput.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchModelInput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PinchHelper()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of HandDescriptorInternal?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of HandDescriptorInternal?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of HandDescriptorInternal?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of HandDescriptorInternal(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HandDescriptorInternal();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized static PinchHelper.errFunc(_:)(float a1)
{
  float v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;

  v2 = 1.0 / (float)((float)(fabsf(a1) * 0.5) + 1.0);
  v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v3 + 16) = 8;
  v4 = v2 * (float)(v2 * v2);
  *(float *)(v3 + 32) = v2 * v2;
  *(float *)(v3 + 36) = v4;
  v5 = v2 * v4;
  v6 = v2 * (float)(v2 * v4);
  *(float *)(v3 + 40) = v5;
  *(float *)(v3 + 44) = v6;
  v7 = v2 * v6;
  v8 = v2 * (float)(v2 * v6);
  *(float *)(v3 + 48) = v7;
  *(float *)(v3 + 52) = v8;
  *(float *)(v3 + 56) = v2 * v8;
  *(float *)(v3 + 60) = v2 * (float)(v2 * v8);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static PinchHelper.errFunc(_:));
  v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
  v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v11), v12);
  specialized SIMD.init<A>(_:)(v3);
  v17 = v14;
  v18 = v13;
  swift_bridgeObjectRelease();
  v15 = (int8x16_t)vaddq_f32(vmulq_f32(v18, v20), vmulq_f32(v17, v19));
  *(float32x2_t *)v15.i8 = vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
  v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 0);
  v16.f32[0] = -1.2655 - (float)(a1 * a1);
  *(float *)v15.i32 = v2 * 1.0;
  expf(vaddv_f32(vadd_f32(v16, *(float32x2_t *)v15.i8)));
}

uint64_t getEnumTagSinglePayload for PinchModelError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PinchModelError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for PinchModelError(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for PinchModelError(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchModelError()
{
  return &type metadata for PinchModelError;
}

uint64_t E5RTRegressor.setNamedInput(_:fromRawPointer:)(uint64_t result, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (!v2)
    goto LABEL_10;
  v3 = v2 + 31;
  if (!__OFADD__(v2, 31))
  {
    v4 = v2 + 62;
    if (v3 >= 0)
      v4 = v2 + 31;
    if ((unint64_t)(v2 - 0x2000000000000000) >> 62 == 3)
    {
      if ((unint64_t)(v2 + 62) >= 0x3F)
      {
        v5 = v4 >> 5;
        v2 *= 4;
        if (v2 != 0x8000000000000000 || (unint64_t)(v3 + 63) >= 0x20)
          return E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(result + 16), *(void **)(result + 24), a2, v2 / v5, v2 / v5, v5, *(_QWORD *)(result + 32), *(_QWORD *)(result + 40));
        __break(1u);
LABEL_10:
        v5 = 1;
        return E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(result + 16), *(void **)(result + 24), a2, v2 / v5, v2 / v5, v5, *(_QWORD *)(result + 32), *(_QWORD *)(result + 40));
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> E5RTRegressor.finalizeInput(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  char v4;
  Swift::String v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 40) + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v4 & 1) != 0)
    {
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease();
      InputPortInfo.finalizeInput()();
      swift_release();
      return;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  v7 = xmmword_23D9AB750;
  v8 = 0;
  v9 = 0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v6[0] = 0xD00000000000001ELL;
  v6[1] = 0x800000023D9C7580;
  v5._countAndFlagsBits = countAndFlagsBits;
  v5._object = object;
  String.append(_:)(v5);
  v6[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.W(file:function:line:logArea:_:_:)(0xD00000000000005ALL, 0x800000023D9C9160, 480, (uint64_t *)&v7, (uint64_t)v6, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
}

unint64_t E5RTRegressor.getRawOutput(_:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  _QWORD *v16;

  v3 = v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 48);
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = a1;
    v11._object = a2;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0x20726F6620;
    v12._object = (void *)0xE500000000000000;
    String.append(_:)(v12);
    v14 = *(_QWORD *)(v3 + 56);
    v13 = *(void **)(v3 + 64);
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v14;
    v15._object = v13;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v10 = 0xD00000000000001FLL;
    lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
    swift_allocError();
    *v16 = 0xD00000000000001FLL;
    v16[1] = 0x800000023D9C7430;
    swift_willThrow();
    return v10;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 56);
  swift_release();
  return v10;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> E5RTRegressor.getOutputLength(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  _QWORD *v15;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD *v20;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 48);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_endAccess();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = countAndFlagsBits;
    v10._object = object;
    String.append(_:)(v10);
    v11._countAndFlagsBits = 0x20726F6620;
    v11._object = (void *)0xE500000000000000;
    String.append(_:)(v11);
    v13 = *(_QWORD *)(v2 + 56);
    v12 = *(void **)(v2 + 64);
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = v13;
    v14._object = v12;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v9 = 0xD00000000000001FLL;
    lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
    swift_allocError();
    *v15 = 0xD00000000000001FLL;
    v15[1] = 0x800000023D9C7430;
    swift_willThrow();
    return v9;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(_QWORD *)(v8 + 24))
  {
    v9 = specialized static PortInfo.getTensorNumberOfElements(_:)();
  }
  else
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v2 + 56);
    v17 = *(void **)(v2 + 64);
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = v18;
    v19._object = v17;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v9 = 0xD000000000000025;
    lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
    swift_allocError();
    *v20 = 0xD000000000000025;
    v20[1] = 0x800000023D9D9800;
    swift_willThrow();
  }
  swift_release();
  return v9;
}

Swift::Void __swiftcall E5RTRegressor.unwireBuffers()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  NSObject *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char *v56;
  __int128 aBlock;
  uint64_t (*v58)(uint64_t);
  void *v59;
  uint64_t (*v60)();
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](v1, v4);
  v52 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v47 - v7;
  swift_beginAccess();
  if (v0[13])
  {
    v56 = v8;
    v47 = v0;
    v51 = xmmword_23D9AB750;
    aBlock = xmmword_23D9AB750;
    v58 = 0;
    v59 = 0;
    *(_QWORD *)&v64 = 0;
    *((_QWORD *)&v64 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v9._countAndFlagsBits = 0xD000000000000012;
    v9._object = (void *)0x800000023D9D9850;
    String.append(_:)(v9);
    v10 = v47[7];
    v11 = (void *)v47[8];
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits = v10;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0xD000000000000022;
    v14 = v47;
    v13._object = (void *)0x800000023D9D9870;
    String.append(_:)(v13);
    *(_QWORD *)&v62[0] = *(_QWORD *)(v14[14] + 16);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE0D00];
    v65 = MEMORY[0x24BEE0D00];
    v50 = 0x800000023D9C9160;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005ALL, 0x800000023D9C9160, 286, (uint64_t *)&aBlock, (uint64_t)&v64, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
    v17 = e5rt_execution_stream_reset();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v17);
    v18 = MEMORY[0x24BEE4B00];
    v14[15] = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRelease();
    v14[16] = v18;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v19 = e5rt_execution_stream_release();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v19);
    v20 = v14[14];
    v53 = *(_QWORD *)(v20 + 16);
    if (v53)
    {
      v49 = v3 + 7;
      swift_bridgeObjectRetain();
      v21 = 0;
      v22 = v2;
      v23 = v53;
      v48 = v20;
      do
      {
        v63 = *(_QWORD *)(v20 + 8 * v21 + 32);
        v24 = e5rt_execution_stream_operation_release();
        if (v24)
        {
          v25 = v24;
          if (!MEMORY[0x242638320]())
            goto LABEL_17;
          v26 = String.init(cString:)();
          v28 = v27;
          *(_QWORD *)&aBlock = 0;
          *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(19);
          v29._countAndFlagsBits = 0x7272652074723565;
          v29._object = (void *)0xEC0000002820726FLL;
          String.append(_:)(v29);
          LODWORD(v64) = v25;
          type metadata accessor for e5rt_error_code_t(0);
          _print_unlocked<A, B>(_:_:)();
          v30._countAndFlagsBits = 2112041;
          v30._object = (void *)0xE300000000000000;
          String.append(_:)(v30);
          v31._countAndFlagsBits = v26;
          v31._object = v28;
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          v65 = v16;
          v64 = aBlock;
          v32 = type metadata accessor for HandyLoggerNeo();
          if (static HandyLoggerNeo._currentLogLevel <= 3)
          {
            v33 = v32;
            v34 = (void *)MEMORY[0x2426372E8](0xD00000000000005ALL, v50);
            v35 = objc_msgSend(v34, sel_lastPathComponent);

            v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v37 = v36;

            v38 = v56;
            static Date.now.getter();
            if (one-time initialization token for _dispatchQ != -1)
              swift_once();
            v55 = (id)static HandyLoggerNeo._dispatchQ;
            v39 = v52;
            (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v52, v38, v1);
            outlined init with copy of Any((uint64_t)&v64, (uint64_t)v62);
            v40 = (*(unsigned __int8 *)(v22 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
            v41 = v22;
            v42 = (v49 + v40) & 0xFFFFFFFFFFFFFFF8;
            v43 = swift_allocObject();
            *(_DWORD *)(v43 + 16) = 3;
            *(_QWORD *)(v43 + 24) = v33;
            *(_OWORD *)(v43 + 32) = v51;
            *(_QWORD *)(v43 + 48) = 0;
            *(_QWORD *)(v43 + 56) = 0;
            *(_DWORD *)(v43 + 64) = 1;
            *(_QWORD *)(v43 + 72) = v54;
            *(_QWORD *)(v43 + 80) = v37;
            *(_QWORD *)(v43 + 88) = 55;
            (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v43 + v40, v39, v1);
            outlined init with take of Any(v62, (_OWORD *)(v43 + v42));
            *(_QWORD *)(v43 + ((v42 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
            v44 = swift_allocObject();
            *(_QWORD *)(v44 + 16) = partial apply for closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:);
            *(_QWORD *)(v44 + 24) = v43;
            v60 = _sIg_Ieg_TRTA_0;
            v61 = v44;
            *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
            *((_QWORD *)&aBlock + 1) = 1107296256;
            v58 = thunk for @escaping @callee_guaranteed () -> ();
            v59 = &block_descriptor_23;
            v45 = _Block_copy(&aBlock);
            v46 = v55;
            swift_retain();
            swift_release();
            dispatch_sync(v46, v45);

            _Block_release(v45);
            LOBYTE(v45) = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((v45 & 1) != 0)
            {
              __break(1u);
LABEL_17:
              __break(1u);
            }
            (*(void (**)(char *, uint64_t))(v41 + 8))(v56, v1);
            swift_release();
            v22 = v41;
            v16 = MEMORY[0x24BEE0D00];
            v20 = v48;
            v23 = v53;
          }
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
        }
        ++v21;
      }
      while (v23 != v21);
      swift_bridgeObjectRelease();
      v14 = v47;
    }
    v14[14] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v14[13] = 0;
  }
}

uint64_t E5RTRegressor._library.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t E5RTRegressor._library.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*E5RTRegressor._library.modify())()
{
  swift_beginAccess();
  return static CameraModel.allCases.modify;
}

_QWORD *E5RTRegressor.init(bundle:library:operation:modelPath:inputPortMap:outputPortMap:configName:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  _WORD v33[12];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v10 = v9;
  v9[2] = 0;
  v15 = v9 + 2;
  v15[1] = 0;
  v15[2] = 0;
  v16 = MEMORY[0x24BEE4AF8];
  v15[11] = 0;
  v15[12] = v16;
  v15[13] = specialized Dictionary.init(dictionaryLiteral:)(v16);
  v15[14] = specialized Dictionary.init(dictionaryLiteral:)(v16);
  swift_beginAccess();
  *v15 = a2;
  swift_beginAccess();
  v15[2] = a3;
  v17 = a1;
  v15[5] = a4;
  v15[6] = a5;
  swift_bridgeObjectRetain();
  v18 = (void *)MEMORY[0x2426372E8](a4, a5);
  swift_bridgeObjectRelease();
  v19 = (void *)MEMORY[0x2426372E8](0x656C646E75622ELL, 0xE700000000000000);
  v20 = objc_msgSend(a1, sel_pathForResource_ofType_, v18, v19);

  if (v20)
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

  }
  else
  {
    v21 = 0;
    v23 = 0;
  }
  v10[9] = v21;
  v10[10] = v23;
  v10[11] = a8;
  v10[12] = a9;
  v10[5] = a6;
  v10[6] = a7;
  swift_beginAccess();
  v24 = e5rt_execution_stream_create();
  swift_endAccess();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v24);
  if (v38)
  {
    swift_release();

  }
  else
  {
    v35 = xmmword_23D9AB750;
    v36 = 0;
    v37 = 0;
    strcpy((char *)v33, "Loaded E5 at ");
    v33[7] = -4864;
    v25 = v10[7];
    v26 = (void *)v10[8];
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005ALL, 0x800000023D9C9160, 175, (uint64_t *)&v35, (uint64_t)v33, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
  }
  return v10;
}

_QWORD *E5RTRegressor.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  E5RTRegressor.unwireBuffers()();
  swift_beginAccess();
  if (v0[3])
  {
    swift_beginAccess();
    v1 = e5rt_execution_stream_release();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v1);
    v0[3] = 0;
  }
  swift_beginAccess();
  v2 = MEMORY[0x24BEE4B00];
  v0[5] = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v0[6] = v2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v0[4])
  {
    swift_beginAccess();
    v3 = e5rt_execution_stream_operation_release();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v3);
    v0[4] = 0;
  }
  swift_beginAccess();
  if (v0[2])
  {
    swift_beginAccess();
    v4 = e5rt_program_library_release();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v4);
    v0[2] = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t E5RTRegressor.__deallocating_deinit()
{
  E5RTRegressor.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> E5RTRegressor.setInput(_:fromIOSurface:)(Swift::String _, IOSurfaceRef fromIOSurface)
{
  _QWORD *v2;
  void *object;
  uint64_t countAndFlagsBits;
  char v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  swift_beginAccess();
  if (!*(_QWORD *)(v2[5] + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_endAccess();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v24 = 0xD00000000000001ELL;
    v25 = 0x800000023D9C7580;
    v15._countAndFlagsBits = countAndFlagsBits;
    v15._object = object;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x20726F6620;
    v16._object = (void *)0xE500000000000000;
    String.append(_:)(v16);
    v18 = v2[7];
    v17 = (void *)v2[8];
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = v18;
    v19._object = v17;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
    swift_allocError();
    *v20 = 0xD00000000000001ELL;
    v20[1] = 0x800000023D9C7580;
    swift_willThrow();
    return;
  }
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  InputPortInfo.setInput(_:)(fromIOSurface);
  v8 = v7;
  if (v7)
  {
    v24 = 0;
    v25 = 0xE000000000000000;
    *(_QWORD *)&v21 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    v9._countAndFlagsBits = 544106784;
    v9._object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = countAndFlagsBits;
    v10._object = object;
    String.append(_:)(v10);
    v11._countAndFlagsBits = 0x20726F6620;
    v11._object = (void *)0xE500000000000000;
    String.append(_:)(v11);
    v13 = v2[7];
    v12 = (void *)v2[8];
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = v13;
    v14._object = v12;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v21 = xmmword_23D9AB750;
    v22 = 0;
    v23 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v21, 0xD00000000000005ALL, 0x800000023D9C9160, 318, (uint64_t)&v24, MEMORY[0x24BEE4AF8]);
    swift_release();

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v24);
  }
  else
  {
    swift_release();
  }
}

uint64_t E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(uint64_t a1, void *a2, char *a3, int64_t a4, int64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  char v16;
  int64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  uint64_t v31;
  Swift::String v32;
  _QWORD *v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a8;
  swift_beginAccess();
  if (*(_QWORD *)(v8[5] + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    if ((v16 & 1) != 0)
    {
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease();
      v17 = a5;
      v18 = v41;
      InputPortInfo.setInput(_:_:_:_:_:_:)(a3, a4, v17, a6, a7, v41);
      if (v34)
      {
        v38 = 0;
        v39 = 0xE000000000000000;
        *(_QWORD *)&v35 = v34;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        _print_unlocked<A, B>(_:_:)();
        v19._countAndFlagsBits = 544106784;
        v19._object = (void *)0xE400000000000000;
        String.append(_:)(v19);
        v20 = a1;
        v21._countAndFlagsBits = a1;
        v21._object = a2;
        String.append(_:)(v21);
        v22._countAndFlagsBits = 0x20726F6620;
        v22._object = (void *)0xE500000000000000;
        String.append(_:)(v22);
        v23 = v8[7];
        v24 = (void *)v8[8];
        swift_bridgeObjectRetain();
        v25._countAndFlagsBits = v23;
        v25._object = v24;
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v40 = MEMORY[0x24BEE0D00];
        type metadata accessor for HandyLoggerNeo();
        v35 = xmmword_23D9AB750;
        v36 = 0;
        v37 = 0;
        static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v35, 0xD00000000000005ALL, 0x800000023D9C9160, 336, (uint64_t)&v38, MEMORY[0x24BEE4AF8]);

        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
        if (v18)
          return swift_release();
      }
      else
      {
        v20 = a1;
        if (v41)
          return swift_release();
      }
      v26._countAndFlagsBits = v20;
      v26._object = a2;
      E5RTRegressor.finalizeInput(_:)(v26);
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v38 = 0xD00000000000001ELL;
  v39 = 0x800000023D9C7580;
  v28._countAndFlagsBits = a1;
  v28._object = a2;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x20726F6620;
  v29._object = (void *)0xE500000000000000;
  String.append(_:)(v29);
  v31 = v8[7];
  v30 = (void *)v8[8];
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = v31;
  v32._object = v30;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
  swift_allocError();
  *v33 = 0xD00000000000001ELL;
  v33[1] = 0x800000023D9C7580;
  return swift_willThrow();
}

void protocol witness for ModelRegressor.setInput(_:fromCVPixelBuffer:) in conformance E5RTRegressor(uint64_t a1, void *a2, CVPixelBufferRef pixelBuffer)
{
  IOSurfaceRef IOSurface;
  __IOSurface *v6;
  Swift::String v7;

  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (IOSurface)
  {
    v6 = IOSurface;
    v7._countAndFlagsBits = a1;
    v7._object = a2;
    E5RTRegressor.setInput(_:fromIOSurface:)(v7, v6);

  }
}

uint64_t protocol witness for ModelRegressor.runNetwork(_:) in conformance E5RTRegressor()
{
  return specialized E5RTRegressor.runNetwork(_:)();
}

unint64_t protocol witness for ModelRegressor.getRawOutput(_:) in conformance E5RTRegressor(uint64_t a1, void *a2)
{
  return E5RTRegressor.getRawOutput(_:)(a1, a2);
}

uint64_t specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  _QWORD *v7;

  if ((_DWORD)result)
  {
    result = MEMORY[0x242638320]();
    if (result)
    {
      v1 = String.init(cString:)();
      v3 = v2;
      _StringGuts.grow(_:)(19);
      v4._countAndFlagsBits = 0x7272652074723565;
      v4._object = (void *)0xEC0000002820726FLL;
      String.append(_:)(v4);
      type metadata accessor for e5rt_error_code_t(0);
      _print_unlocked<A, B>(_:_:)();
      v5._countAndFlagsBits = 2112041;
      v5._object = (void *)0xE300000000000000;
      String.append(_:)(v5);
      v6._countAndFlagsBits = v1;
      v6._object = v3;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
      swift_allocError();
      *v7 = 0;
      v7[1] = 0xE000000000000000;
      return swift_willThrow();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  _QWORD v7[4];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)result)
  {
    result = MEMORY[0x242638320]();
    if (result)
    {
      v1 = String.init(cString:)();
      v3 = v2;
      v8 = xmmword_23D9AB750;
      v9 = 0;
      v10 = 0;
      v7[0] = 0;
      v7[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      v4._countAndFlagsBits = 0x7272652074723565;
      v4._object = (void *)0xEC0000002820726FLL;
      String.append(_:)(v4);
      type metadata accessor for e5rt_error_code_t(0);
      _print_unlocked<A, B>(_:_:)();
      v5._countAndFlagsBits = 2112041;
      v5._object = (void *)0xE300000000000000;
      String.append(_:)(v5);
      v6._countAndFlagsBits = v1;
      v6._object = v3;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7[3] = MEMORY[0x24BEE0D00];
      specialized static HLog.W(file:function:line:logArea:_:_:)(0xD00000000000005ALL, 0x800000023D9C9160, 55, (uint64_t *)&v8, (uint64_t)v7, MEMORY[0x24BEE4AF8]);
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for E5RTRegressor()
{
  return objc_opt_self();
}

uint64_t method lookup function for E5RTRegressor()
{
  return swift_lookUpClassMethod();
}

void specialized E5RTRegressor.__allocating_init(bundle:modelPath:directBindInputNames:directBindOutputNames:configName:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v13;
  void *v14;
  id v15;
  int v16;
  Swift::String v17;
  uint64_t precompiled_compute_operation;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v13 = (void *)MEMORY[0x2426372E8](a2, a3);
  v14 = (void *)MEMORY[0x2426372E8](0x656C646E75622ELL, 0xE700000000000000);
  v15 = objc_msgSend(a1, sel_pathForResource_ofType_, v13, v14);

  if (v15)
  {
    v23 = a7;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    String.utf8CString.getter();
    v16 = e5rt_program_library_create();
    swift_release();
    if (v16)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = xmmword_23D9AB750;
      v29 = 0;
      v30 = 0;
      v27 = MEMORY[0x24BEE0D00];
      v25 = 0xD00000000000001ALL;
      v26 = 0x800000023D9D97E0;
      specialized static HLog.W(file:function:line:logArea:_:_:)(0xD00000000000005ALL, 0x800000023D9C9160, 78, (uint64_t *)&v28, (uint64_t)&v25, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v25);

    }
    else
    {
      v21 = a1;
      *(_QWORD *)&v28 = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      precompiled_compute_operation = e5rt_execution_stream_operation_create_precompiled_compute_operation();
      swift_release();
      swift_release();
      swift_release();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(precompiled_compute_operation);
      if (v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      else
      {
        v19 = specialized static EspressoBuilder.createInputPortInfos(bundle:modelPath:operation:directBindInputNames:)(a1, a2, (uint64_t)a3, v28, a4);
        swift_bridgeObjectRelease();
        v20 = specialized static EspressoBuilder.createOutputPortInfos(bundle:modelPath:operation:directBindOutputNames:)(v21, a2, (uint64_t)a3, v28, a5);
        swift_bridgeObjectRelease();
        type metadata accessor for E5RTRegressor();
        swift_allocObject();
        E5RTRegressor.init(bundle:library:operation:modelPath:inputPortMap:outputPortMap:configName:)(v21, 0, v28, a2, (uint64_t)a3, v19, v20, a6, v23);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = xmmword_23D9AB750;
    v29 = 0;
    v30 = 0;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v25 = 0xD000000000000024;
    v26 = 0x800000023D9D49E0;
    v17._countAndFlagsBits = a2;
    v17._object = a3;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v27 = MEMORY[0x24BEE0D00];
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD00000000000005ALL, 0x800000023D9C9160, 73, (uint64_t *)&v28, (uint64_t)&v25, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v25);
  }
}

uint64_t specialized E5RTRegressor.runNetwork(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v17;
  int64_t v18;

  swift_beginAccess();
  swift_beginAccess();
  v2 = e5rt_execution_stream_encode_operation();
  result = specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v2);
  if (v1)
    return result;
  v4 = e5rt_execution_stream_execute_sync();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v4);
  v5 = e5rt_execution_stream_reset();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v5);
  swift_beginAccess();
  v6 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v6 + 64);
  v8 = v6 + 64;
  v7 = v9;
  v10 = 1 << *(_BYTE *)(*(_QWORD *)(v0 + 48) + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v7;
  v13 = (unint64_t)(v10 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  while (v12)
  {
    v12 &= v12 - 1;
LABEL_6:
    swift_retain();
    OutputPortInfo.dequantizeLayers()();
    result = swift_release();
    if (v15)
      return swift_release();
  }
  if (__OFADD__(v14++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v14 >= v13)
    return swift_release();
  v17 = *(_QWORD *)(v8 + 8 * v14);
  if (v17)
  {
LABEL_18:
    v12 = (v17 - 1) & v17;
    goto LABEL_6;
  }
  v18 = v14 + 1;
  if (v14 + 1 >= v13)
    return swift_release();
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
    goto LABEL_17;
  v18 = v14 + 2;
  if (v14 + 2 >= v13)
    return swift_release();
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
    goto LABEL_17;
  v18 = v14 + 3;
  if (v14 + 3 >= v13)
    return swift_release();
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
LABEL_17:
    v14 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v14 >= v13)
      return swift_release();
    v17 = *(_QWORD *)(v8 + 8 * v14);
    ++v18;
    if (v17)
      goto LABEL_18;
  }
LABEL_26:
  __break(1u);
  return result;
}

_QWORD *specialized E5RTRegressor.__allocating_init(bundle:netPath:directBindInputNames:directBindOutputNames:configName:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t precompiled_compute_operation_with_options;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD v28[4];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v14 = e5rt_e5_compiler_options_create();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v14);
  if (v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v36 = 0;
    v15 = e5rt_e5_compiler_create();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v15);
    v35 = 0;
    String.utf8CString.getter();
    v16 = e5rt_e5_compiler_compile();
    swift_release();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v16);
    v34 = 0;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v18 = e5rt_program_library_retain_program_function();
    swift_release();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v18);
    v33 = 0;
    v19 = e5rt_precompiled_compute_op_create_options_create_with_program_function();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v19);
    v32 = 0;
    precompiled_compute_operation_with_options = e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(precompiled_compute_operation_with_options);
    v29 = xmmword_23D9AB750;
    v30 = 0;
    v31 = 0;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v28[0] = 0x64656C69706D6F43;
    v28[1] = 0xE900000000000020;
    v21._countAndFlagsBits = a2;
    v21._object = a3;
    String.append(_:)(v21);
    v22._object = (void *)0x800000023D9D9830;
    v22._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v22);
    v28[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005ALL, 0x800000023D9C9160, 140, (uint64_t *)&v29, (uint64_t)v28, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
    v23 = v32;
    v24 = specialized static EspressoBuilder.createInputPortInfos(bundle:modelPath:operation:directBindInputNames:)(a1, a2, (uint64_t)a3, v32, a4);
    swift_bridgeObjectRelease();
    v25 = specialized static EspressoBuilder.createOutputPortInfos(bundle:modelPath:operation:directBindOutputNames:)(a1, a2, (uint64_t)a3, v23, a5);
    swift_bridgeObjectRelease();
    v26 = v35;
    type metadata accessor for E5RTRegressor();
    swift_allocObject();
    v27 = a1;
    a7 = E5RTRegressor.init(bundle:library:operation:modelPath:inputPortMap:outputPortMap:configName:)(v27, v26, v23, a2, (uint64_t)a3, v24, v25, 1852399981, 0xE400000000000000);
    e5rt_precompiled_compute_op_create_options_release();
    e5rt_program_function_release();
    e5rt_e5_compiler_release();
    e5rt_e5_compiler_options_release();

  }
  return a7;
}

uint64_t sub_23D9119C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40) >= 0x1AuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 96) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D911A78()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for E5RTException()
{
  return &type metadata for E5RTException;
}

uint64_t HybridPoseActionPipeline.State.getPreviousHand(_:forAction:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v18 - v13;
  UberPoseActionPipeline.State.getPreviousHand(_:forAction:)(a1, (uint64_t)&v18 - v13);
  outlined init with copy of HandDescriptor?((uint64_t)v14, (uint64_t)v10);
  if ((a2 & 1) != 0
    && (v15 = type metadata accessor for HandDescriptor(),
        (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v10, 1, v15) != 1))
  {
    outlined destroy of HandDescriptor?((uint64_t)v10);
    outlined destroy of HandDescriptor?((uint64_t)v14);
    v17 = v3 + OBJC_IVAR____TtCC5Hands24HybridPoseActionPipeline5State_actionPrevHand;
    swift_beginAccess();
    return outlined init with copy of HandDescriptor?(v17, a3);
  }
  else
  {
    outlined destroy of HandDescriptor?((uint64_t)v10);
    return outlined init with take of HandDescriptor?((uint64_t)v14, a3);
  }
}

void HybridPoseActionPipeline.State.setPreviousHand(_:frame:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[12];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (_QWORD *)((char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)v28 - v11;
  if ((_QWORD)static Frame.shared)
  {
    if (*a2 % (unint64_t)static Frame.shared != *((_QWORD *)&static Frame.shared + 1))
    {
LABEL_9:
      UberPoseActionPipeline.State.setPreviousHand(_:frame:)(a1);
      return;
    }
    outlined init with copy of HandDescriptor?(a1, (uint64_t)v8);
    v13 = type metadata accessor for HandDescriptor();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13) == 1)
    {
      outlined destroy of HandDescriptor?((uint64_t)v8);
    }
    else
    {
      v16 = v8[2];
      v15 = v8[3];
      v17 = v8[4];
      v18 = v8[5];
      v19 = v8[6];
      v20 = v8[7];
      v21 = v8[8];
      v22 = v8[9];
      v23 = v8[10];
      v24 = v8[11];
      v25 = v8[12];
      v26 = v8[16];
      v28[1] = v8[13];
      v28[2] = v25;
      v28[3] = v24;
      v28[4] = v23;
      v28[10] = v17;
      v28[11] = v15;
      v28[8] = v19;
      v28[9] = v18;
      v28[6] = v21;
      v28[7] = v20;
      v28[5] = v22;
      outlined copy of HandPose?(v16);
      outlined destroy of HandDescriptor((uint64_t)v8);
      if (v16)
      {
        outlined consume of HandPose?(v16);
        if ((v26 & 1) != 0)
        {
          outlined init with copy of HandDescriptor?(a1, (uint64_t)v12);
          goto LABEL_8;
        }
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
LABEL_8:
    v27 = v2 + OBJC_IVAR____TtCC5Hands24HybridPoseActionPipeline5State_actionPrevHand;
    swift_beginAccess();
    outlined assign with take of HandDescriptor?((uint64_t)v12, v27);
    swift_endAccess();
    goto LABEL_9;
  }
  __break(1u);
}

Swift::Void __swiftcall HybridPoseActionPipeline.State.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v1, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UberPoseActionPipeline.State.reset()();
  v5 = type metadata accessor for HandDescriptor();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0 + OBJC_IVAR____TtCC5Hands24HybridPoseActionPipeline5State_actionPrevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?((uint64_t)v4, v6);
  swift_endAccess();
}

uint64_t HybridPoseActionPipeline.State.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of HandDescriptor?(v0 + OBJC_IVAR____TtCC5Hands24HybridPoseActionPipeline5State_actionPrevHand);
}

uint64_t HybridPoseActionPipeline.State.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of HandDescriptor?(v0 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_prevHand);
  swift_bridgeObjectRelease();
  outlined destroy of HandDescriptor?(v0 + OBJC_IVAR____TtCC5Hands24HybridPoseActionPipeline5State_actionPrevHand);
  return swift_deallocClassInstance();
}

uint64_t HybridPoseActionPipeline.run(forHand:withHandsKitData:ps_handle:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  _BYTE __dst[336];
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int16 v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  if ((_QWORD)static Frame.shared)
  {
    v30 = result;
    v5 = *(_QWORD *)(a2 + 336);
    v6 = *(_QWORD *)(a2 + 344);
    v7 = *(_DWORD *)(a2 + 352);
    v8 = *(_DWORD *)(a2 + 356);
    v9 = *(_QWORD *)(a2 + 360);
    v16 = *(_QWORD *)(a2 + 368);
    v17 = *(_QWORD *)(a2 + 376);
    v18 = *(_QWORD *)(a2 + 384);
    v19 = *(_BYTE *)(a2 + 392);
    v10 = (__int16 *)(a2 + 393);
    v20 = *(_QWORD *)(a2 + 396);
    v21 = *(_DWORD *)(a2 + 404);
    v22 = *(_DWORD *)(a2 + 408);
    v23 = *(_QWORD *)(a2 + 412);
    v24 = *(_QWORD *)(a2 + 420);
    v25 = *(_QWORD *)(a2 + 428);
    v26 = *(_QWORD *)(a2 + 436);
    v27 = *(_BYTE *)(a2 + 444);
    v11 = (__int16 *)(a2 + 445);
    v28 = *(_QWORD *)(a2 + 448);
    v12 = (__int128 *)(a2 + 456);
    *(_BYTE *)(v4 + 32) = v5 % (unint64_t)static Frame.shared == *((_QWORD *)&static Frame.shared + 1);
    memcpy(__dst, (const void *)a2, sizeof(__dst));
    v33 = v5;
    v34 = v6;
    v35 = v7;
    v36 = v8;
    v37 = v9;
    v38 = v16;
    v39 = v17;
    v40 = v18;
    v41 = v19;
    v42 = *v10;
    v43 = *((_BYTE *)v10 + 2);
    v44 = v20;
    v45 = v21;
    v46 = v22;
    v47 = v23;
    v48 = v24;
    v49 = v25;
    v50 = v26;
    v51 = v27;
    v52 = *v11;
    v53 = *((_BYTE *)v11 + 2);
    v54 = v28;
    v13 = v12[5];
    v59 = v12[4];
    v60 = v13;
    v14 = v12[3];
    v57 = v12[2];
    v58 = v14;
    v15 = v12[1];
    v55 = *v12;
    v56 = v15;
    swift_retain();
    UberPoseActionPipeline.run(forHand:withHandsKitData:ps_handle:)(v30, __dst, a3, a4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t HybridPoseActionPipeline.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HybridPoseActionPipeline()
{
  return objc_opt_self();
}

uint64_t ObjC metadata update function for HybridPoseActionPipeline.State()
{
  return type metadata accessor for HybridPoseActionPipeline.State();
}

uint64_t type metadata accessor for HybridPoseActionPipeline.State()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HybridPoseActionPipeline.State;
  if (!type metadata singleton initialization cache for HybridPoseActionPipeline.State)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for HybridPoseActionPipeline.State()
{
  unint64_t v0;

  type metadata accessor for HandDescriptor?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t protocol witness for PoseActionPipeline.reconfig(_:) in conformance HybridPoseActionPipeline(HandsKitConfig *a1)
{
  swift_retain();
  UberPoseActionPipeline.reconfig(_:)(a1);
  swift_release();
  swift_retain();
  UberPoseActionPipeline.reconfig(_:)(a1);
  return swift_release();
}

uint64_t protocol witness for PoseActionPipeline.run(forHand:withHandsKitData:ps_handle:) in conformance HybridPoseActionPipeline@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return HybridPoseActionPipeline.run(forHand:withHandsKitData:ps_handle:)(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for TrackingState()
{
  return &type metadata for TrackingState;
}

uint64_t TrackingState.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return qword_23D9C01D8[result];
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance TrackingState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = specialized TrackingState.init(rawValue:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance TrackingState()
{
  uint64_t v0;

  return TrackingState.rawValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TrackingState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = specialized TrackingState.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TrackingState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = TrackingState.rawValue.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingState()
{
  lazy protocol witness table accessor for type TrackingState and conformance TrackingState();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TrackingState(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TrackingState@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  *a1 = static TrackingState.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingState._protobuf_nameMap, a1);
}

uint64_t TrackingStatePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        lazy protocol witness table accessor for type TrackingState and conformance TrackingState();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t TrackingStatePB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0
    || (lazy protocol witness table accessor for type TrackingState and conformance TrackingState(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for TrackingStatePB();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance TrackingStatePB@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingStatePB()
{
  return 0x676E696B63617254;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingStatePB()
{
  return TrackingStatePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingStatePB()
{
  return TrackingStatePB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingStatePB and conformance TrackingStatePB, (uint64_t (*)(uint64_t))type metadata accessor for TrackingStatePB, (uint64_t)&protocol conformance descriptor for TrackingStatePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingStatePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingStatePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingStatePB and conformance TrackingStatePB, (uint64_t (*)(uint64_t))type metadata accessor for TrackingStatePB, (uint64_t)&protocol conformance descriptor for TrackingStatePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingStatePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingStatePB and conformance TrackingStatePB, (uint64_t (*)(uint64_t))type metadata accessor for TrackingStatePB, (uint64_t)&protocol conformance descriptor for TrackingStatePB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in TrackingStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingStatePB and conformance TrackingStatePB, (uint64_t (*)(uint64_t))type metadata accessor for TrackingStatePB, (uint64_t)&protocol conformance descriptor for TrackingStatePB);
}

uint64_t type metadata accessor for TrackingStatePB()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TrackingStatePB;
  if (!type metadata singleton initialization cache for TrackingStatePB)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t base witness table accessor for Message in TrackingStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingStatePB and conformance TrackingStatePB, (uint64_t (*)(uint64_t))type metadata accessor for TrackingStatePB, (uint64_t)&protocol conformance descriptor for TrackingStatePB);
}

uint64_t base witness table accessor for Hashable in TrackingStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingStatePB and conformance TrackingStatePB, (uint64_t (*)(uint64_t))type metadata accessor for TrackingStatePB, (uint64_t)&protocol conformance descriptor for TrackingStatePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingStatePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingStatePB and conformance TrackingStatePB, (uint64_t (*)(uint64_t))type metadata accessor for TrackingStatePB, (uint64_t)&protocol conformance descriptor for TrackingStatePB);
}

unint64_t lazy protocol witness table accessor for type [TrackingState] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [TrackingState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TrackingState] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TrackingState]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TrackingState] and conformance [A]);
  }
  return result;
}

uint64_t specialized static TrackingStatePB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8)))
  {
    v13 = type metadata accessor for TrackingStatePB();
    v14 = a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 20), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized TrackingState.init(rawValue:)(uint64_t result)
{
  switch(result)
  {
    case 9:
      result = 8;
      break;
    case 10:
      result = 9;
      break;
    case 11:
      result = 10;
      break;
    case 12:
      result = 11;
      break;
    case 14:
      result = 12;
      break;
    case 15:
      result = 13;
      break;
    case 16:
      result = 14;
      break;
    case 18:
      result = 15;
      break;
    case 23:
      result = 16;
      break;
    case 24:
      result = 17;
      break;
    case 26:
      result = 18;
      break;
    case 27:
      result = 19;
      break;
    case 28:
      result = 20;
      break;
    case 29:
      result = 21;
      break;
    case 30:
      result = 22;
      break;
    case 31:
      result = 23;
      break;
    case 32:
      result = 24;
      break;
    case 33:
      result = 25;
      break;
    case 34:
      result = 26;
      break;
    case 35:
      result = 27;
      break;
    case 36:
      result = 28;
      break;
    case 37:
      result = 29;
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TrackingStatePB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = *(int *)(a3 + 20);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for TrackingStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for TrackingStatePB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for TrackingStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for TrackingStatePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingStatePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D913620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for TrackingStatePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D91366C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for TrackingStatePB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> InputPortInfo.setInput(_:)(IOSurfaceRef a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  OSType PixelFormat;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = e5rt_buffer_object_create_from_iosurface();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v4);
  if (!v2)
  {
    PixelFormat = IOSurfaceGetPixelFormat(a1);
    if (PixelFormat - 1278226488 <= 0x30 && ((1 << (PixelFormat - 56)) & 0x1400000000001) != 0
      || PixelFormat == 1111970369)
    {
      swift_beginAccess();
      v6 = e5rt_io_port_bind_buffer_object();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v6);
      v7 = (_QWORD *)(v1 + 32);
      swift_beginAccess();
      if (*(_QWORD *)(v1 + 32))
      {
        swift_beginAccess();
        v8 = e5rt_buffer_object_release();
        swift_endAccess();
        specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v8);
      }
      *v7 = 0;
    }
    else
    {
      lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
      swift_allocError();
      *v9 = 0xD000000000000022;
      v9[1] = 0x800000023D9D9E60;
      swift_willThrow();
    }
  }
}

void *InputPortInfo.setInput(_:_:_:_:_:_:)(char *a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v13;
  BOOL v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  void *result;
  uint64_t data_ptr;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  swift_beginAccess();
  if (!v6[5])
  {
    swift_beginAccess();
    swift_beginAccess();
    v20 = e5rt_tensor_desc_alloc_buffer_object();
    swift_endAccess();
    result = (void *)specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v20);
    if (v7)
      return result;
    swift_beginAccess();
    data_ptr = e5rt_buffer_object_get_data_ptr();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(data_ptr);
  }
  if (a6)
  {
    v13 = a6 - a5;
    if (__OFSUB__(a6, a5))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((unint64_t)(v13 - 0x400000000000000) >> 59 != 31)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if ((unint64_t)(32 * v13 - 0x2000000000000000) >> 62 != 3)
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v14 = (unsigned __int128)(a3 * (__int128)a4) >> 64 != (a3 * a4) >> 63;
    if (!a3 || !a2 || a2 < a3)
    {
LABEL_12:
      _StringGuts.grow(_:)(77);
      v15._countAndFlagsBits = 0xD000000000000024;
      v15._object = (void *)0x800000023D9D9DE0;
      String.append(_:)(v15);
      if (!v14)
      {
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0x7320687469772820;
        v17._object = (void *)0xEE00206564697274;
        String.append(_:)(v17);
        v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._object = (void *)0x800000023D9D9E10;
        v19._countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v19);
LABEL_25:
        v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
        swift_allocError();
        *v30 = 0;
        v30[1] = 0xE000000000000000;
        return (void *)swift_willThrow();
      }
      goto LABEL_47;
    }
    if ((unsigned __int128)(a3 * (__int128)a4) >> 64 != (a3 * a4) >> 63)
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v13 << 7 < a3 * a4)
    {
      v14 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    swift_beginAccess();
    if (a4 == 1)
    {
      a2 = v6[8];
      a3 = a2;
    }
    if ((unsigned __int128)(a3 * (__int128)a4) >> 64 != (a3 * a4) >> 63)
      goto LABEL_48;
    if (v6[8] != a3 * a4 || a2 < a3)
    {
      _StringGuts.grow(_:)(71);
      v24._countAndFlagsBits = 0xD000000000000027;
      v24._object = (void *)0x800000023D9D9E30;
      String.append(_:)(v24);
      v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 0x7320687469772820;
      v26._object = (void *)0xEE00206564697274;
      String.append(_:)(v26);
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 0x6365707865202C29;
      v28._object = (void *)0xEC00000020646574;
      String.append(_:)(v28);
      goto LABEL_25;
    }
  }
  result = (void *)swift_beginAccess();
  v31 = v6[7];
  if (!v31)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if ((unint64_t)(a5 - 0x400000000000000) >> 59 != 31)
    goto LABEL_49;
  if ((unint64_t)(32 * a5 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v32 = (char *)(v31 + (a5 << 7));
  if (a3 == a2)
  {
    v33 = a2 * a4;
    if ((unsigned __int128)(a2 * (__int128)a4) >> 64 == (a2 * a4) >> 63)
    {
      if ((v33 & 0x8000000000000000) == 0)
        return memmove(v32, a1, v33);
      goto LABEL_55;
    }
    goto LABEL_52;
  }
  if (a4 < 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (a4)
  {
    if (a3 < 0)
    {
LABEL_55:
      result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    result = memmove((void *)(v31 + (a5 << 7)), a1, a3);
    if (a4 != 1)
    {
      v34 = 1;
      while (1)
      {
        v35 = v34 * a3;
        if ((unsigned __int128)(v34 * (__int128)a3) >> 64 != (v34 * a3) >> 63)
          break;
        v36 = v34 * a2;
        if ((unsigned __int128)(v34 * (__int128)a2) >> 64 != (v34 * a2) >> 63)
          goto LABEL_43;
        ++v34;
        result = memmove(&v32[v35], &a1[v36], a3);
        if (a4 == v34)
          return result;
      }
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> InputPortInfo.finalizeInput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t shape;
  _QWORD *v3;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 24))
  {
    src.data = 0;
    dest.data = 0;
    shape = e5rt_tensor_desc_get_shape();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(shape);
    if (!v1)
    {
      __break(1u);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
    swift_allocError();
    *v3 = 0xD000000000000020;
    v3[1] = 0x800000023D9CD540;
    swift_willThrow();
  }
}

uint64_t InputPortInfo.init(_:_:_:_:)(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t component_size;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t num_components;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t size;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[4];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v9 = PortInfo.init()();
  String.utf8CString.getter();
  swift_beginAccess();
  swift_retain_n();
  v10 = e5rt_execution_stream_operation_retain_input_port();
  swift_endAccess();
  swift_release();
  swift_release();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v10);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_release_n();
  }
  else
  {
    v11 = a1;
    swift_beginAccess();
    swift_retain();
    v12 = e5rt_io_port_retain_tensor_desc();
    swift_endAccess();
    swift_release();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v12);
    if (*(_QWORD *)(v9 + 24))
    {
      swift_retain();
      specialized static PortInfo.getTensorComponentType(_:)();
      *(_QWORD *)&v42 = 0;
      v41[0] = 0;
      v15 = e5rt_tensor_desc_retain_dtype();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v15);
      component_size = e5rt_tensor_desc_dtype_get_component_size();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(component_size);
      v17 = e5rt_tensor_desc_dtype_release();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v17);
      *(_BYTE *)(v9 + 73) = 0;
      swift_release();
      swift_retain();
      if (specialized static PortInfo.getTensorComponentType(_:)() == 1)
      {
        *(_QWORD *)&v42 = 0;
        v41[0] = 0;
        v18 = e5rt_tensor_desc_retain_dtype();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v18);
        v19 = e5rt_tensor_desc_dtype_get_component_size();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v19);
        v20 = e5rt_tensor_desc_dtype_release();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v20);
      }
      *(_BYTE *)(v9 + 74) = 0;
      swift_release();
      swift_retain();
      if (!specialized static PortInfo.getTensorComponentType(_:)())
      {
        *(_QWORD *)&v42 = 0;
        v41[0] = 0;
        v21 = e5rt_tensor_desc_retain_dtype();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v21);
        v22 = e5rt_tensor_desc_dtype_get_component_size();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v22);
        v23 = e5rt_tensor_desc_dtype_release();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v23);
      }
      *(_BYTE *)(v9 + 75) = 0;
      swift_release();
      specialized static PortInfo.getTensorComponentType(_:)();
      *(_QWORD *)&v42 = 0;
      LOBYTE(v41[0]) = 0;
      v24 = e5rt_tensor_desc_retain_dtype();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v24);
      num_components = e5rt_tensor_desc_dtype_get_num_components();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(num_components);
      v26 = e5rt_tensor_desc_dtype_release();
      specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v26);
      if (specialized static PortInfo.getTensorComponentType(_:)() == 4)
      {
        *(_QWORD *)&v42 = 0;
        v41[0] = 0;
        v27 = e5rt_tensor_desc_retain_dtype();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v27);
        v28 = e5rt_tensor_desc_dtype_get_component_size();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v28);
        v29 = e5rt_tensor_desc_dtype_release();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v29);
      }
      *(_BYTE *)(v9 + 72) = a4 & 1;
      v30 = *(unsigned __int8 *)(v9 + 73);
      swift_release();
      if (v30 == 1)
      {
        v31 = specialized static PortInfo.getPackedFP32TensorDescriptor(_:)();
        swift_beginAccess();
        *(_QWORD *)(v9 + 48) = v31;
        swift_beginAccess();
        size = e5rt_tensor_desc_get_size();
        swift_endAccess();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(size);
      }
      if (*(_BYTE *)(v9 + 72) == 1)
      {
        v42 = xmmword_23D9AB750;
        v43 = 0;
        v44 = 0;
        _StringGuts.grow(_:)(44);
        swift_bridgeObjectRelease();
        v41[0] = 0xD000000000000015;
        v41[1] = 0x800000023D9D9D40;
        v33._countAndFlagsBits = v11;
        v33._object = a2;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._object = (void *)0x800000023D9CD4C0;
        v34._countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v34);
        if ((a4 & 1) != 0)
          v35 = 1702195828;
        else
          v35 = 0x65736C6166;
        if ((a4 & 1) != 0)
          v36 = 0xE400000000000000;
        else
          v36 = 0xE500000000000000;
        v37 = v36;
        String.append(_:)(*(Swift::String *)&v35);
        swift_bridgeObjectRelease();
        v41[3] = MEMORY[0x24BEE0D00];
        specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005ALL, 0x800000023D9D9D60, 55, (uint64_t *)&v42, (uint64_t)v41, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
        swift_beginAccess();
        *(_QWORD *)(v9 + 32) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        v45 = 0;
        v38 = e5rt_tensor_desc_alloc_buffer_object();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v38);
        swift_beginAccess();
        *(_QWORD *)(v9 + 32) = 0;
        v39 = e5rt_io_port_bind_buffer_object();
        specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v39);
      }
      swift_beginAccess();
      *(_QWORD *)(v9 + 40) = 0;
      if ((a5 & 0x100000000) == 0)
        *(_DWORD *)(v9 + 76) = a5;
      *(_BYTE *)(v9 + 80) = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release_n();
      lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
      swift_allocError();
      *v14 = 0xD000000000000023;
      v14[1] = 0x800000023D9CD470;
      swift_willThrow();
    }
    swift_release();
  }
  return v9;
}

_QWORD *InputPortInfo.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  if (*(_QWORD *)(v0 + 32))
  {
    swift_beginAccess();
    v1 = e5rt_buffer_object_release();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v1);
    *(_QWORD *)(v0 + 32) = 0;
  }
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 40))
  {
    if ((*(_BYTE *)(v0 + 72) & 1) == 0)
    {
      swift_beginAccess();
      v2 = e5rt_buffer_object_release();
      swift_endAccess();
      specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v2);
    }
    *(_QWORD *)(v0 + 40) = 0;
  }
  return PortInfo.deinit();
}

uint64_t InputPortInfo.__deallocating_deinit()
{
  InputPortInfo.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InputPortInfo()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MissedPinchState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MissedPinchState);
}

unint64_t lazy protocol witness table accessor for type MissedPinchStatePB and conformance MissedPinchStatePB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB;
  if (!lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB)
  {
    v1 = type metadata accessor for MissedPinchStatePB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MissedPinchStatePB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MissedPinchStatePB and conformance MissedPinchStatePB);
  }
  return result;
}

__n128 MissedPinchState.toProtoBuf()@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *v1;
  v3 = v1[1].n128_u64[0];
  type metadata accessor for MissedPinchStatePB(0);
  UnknownStorage.init()();
  result = v5;
  *a1 = v5;
  a1[1].n128_u64[0] = v3;
  return result;
}

Swift::Bool __swiftcall Detection2DComputePipelineProtocol.hasModelChanged(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v2;
  v5 = v1;
  v6 = *(_QWORD *)(v1 - 8);
  ((void (*)(HandsKitConfig *))MEMORY[0x24BDAC7A8])(a1);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = specialized static Detection2DComputePipelineFactory.getModelPaths(_:)(v9);
  v12 = v11;
  v32 = v13;
  v33 = v3;
  v34 = v14;
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 24);
  v16 = v15(v5, v4);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 144))(v16);
  v19 = v18;
  swift_release();
  if (v17 == v10 && v19 == v12)
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v33, v5);
    v22 = v34;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v33, v5);
    v22 = v34;
    if ((v21 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      v23 = 1;
      return v23 & 1;
    }
  }
  v24 = v15(v5, v4);
  v25 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 152))();
  v27 = v26;
  swift_release();
  if (v25 == v32 && v27 == v22)
  {
    swift_bridgeObjectRelease_n();
    v23 = 0;
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v29 ^ 1;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v23 & 1;
}

Swift::Void __swiftcall Detection2DComputePipelineProtocol.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = (*(uint64_t (**)())(v1 + 24))();
  (*(void (**)(HandsKitConfig *))(*(_QWORD *)v3 + 456))(a1);
  swift_release();
}

uint64_t Detection2DComputePipelineProtocol.process(detectionSpec:pixelBuffer:calibration:ps_handle:)(uint64_t a1, _OWORD *a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD *);
  uint64_t (*v16)(uint64_t, _QWORD *);
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  float v21;
  Swift::Int v22;
  Swift::Int v23;
  float32x2_t v24;
  id v25;
  float32x2_t v26;
  void *v27;
  float32x2_t v28;
  char v29;
  float32x2_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(uint64_t *__return_ptr, uint64_t, _QWORD *);
  float32x2_t v44;
  uint64_t v47;
  __int128 v48;
  uint64_t v50;
  float v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;
  char v56;
  char v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  __int128 v80;

  result = *((unsigned __int8 *)a3 + 8);
  v13 = a3[2];
  v14 = a3[6];
  if ((a3[3] & 1) == 0)
  {
    if (v13 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v13 <= 0x7FFFFFFF)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_4:
  v55 = *a3;
  v56 = *((_BYTE *)a3 + 8);
  v57 = *((_BYTE *)a3 + 24);
  v63 = a3[14];
  v64 = a3[2];
  v58 = *((_OWORD *)a3 + 2);
  v59 = *((_OWORD *)a3 + 4);
  v60 = a3[10];
  v61 = *((_DWORD *)a3 + 22);
  v62 = *((_DWORD *)a3 + 23);
  v52 = a3[12];
  v53 = *((_DWORD *)a3 + 26);
  v54 = *((_BYTE *)a3 + 108);
  v15 = (void (*)(uint64_t, _QWORD *))a8[9];
  swift_bridgeObjectRetain();
  v15(a7, a8);
  v16 = (uint64_t (*)(uint64_t, _QWORD *))a8[3];
  v17 = v16(a7, a8);
  v18 = (*(double (**)(uint64_t))(*(_QWORD *)v17 + 280))(v17);
  v65 = *(float *)&v18;
  result = swift_release();
  if ((~LODWORD(v65) & 0x7F800000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v65 <= -9.2234e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v65 >= 9.2234e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v19 = v16(a7, a8);
  v20 = (*(double (**)(uint64_t))(*(_QWORD *)v19 + 280))(v19);
  v51 = *((float *)&v20 + 1);
  result = swift_release();
  v21 = v51;
  if ((~LODWORD(v51) & 0x7F800000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v51 <= -9.2234e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v51 >= 9.2234e18)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v50 = v14;
  v22 = (uint64_t)v65;
  v23 = (uint64_t)v21;
  v47 = a7;
  if (CVPixelBufferGetWidth((CVPixelBufferRef)a4) == (uint64_t)v65
    && CVPixelBufferGetHeight((CVPixelBufferRef)a4) == v23)
  {
    v24.f32[0] = (float)v22;
    v24.f32[1] = (float)v23;
    v44 = v24;
    v25 = a4;
    swift_release();
    v42 = 0;
    v26 = v44;
  }
  else
  {
    DetectionUtils.ImagePreprocessor.scaleAndPadLuma(srcPixelBuffer:dstWidth:dstHeight:)((__CVBuffer *)a4, v22, v23);
    v25 = v27;
    v26 = v28;
    v42 = v29;
    v44 = v30;
    swift_release();
  }
  v31 = v25;
  Hands_trace_CBridge_5();
  v43 = (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *))a8[6];
  v43(&v66, v47, a8);
  v32 = v69;
  v33 = v70;
  __swift_project_boxed_opaque_existential_1(&v66, v69);
  v16(v47, a8);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v35 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  v36 = swift_checkMetadataState();
  v37 = v35(v36, AssociatedConformanceWitness);
  v39 = v38;
  swift_release();
  (*(void (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v33 + 16))(v37, v39, v31, v32, v33);
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v66);
  Hands_trace_CBridge_5();
  Hands_trace_CBridge_5();
  v43(&v66, v47, a8);
  v40 = v69;
  v41 = v70;
  __swift_project_boxed_opaque_existential_1(&v66, v69);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 144))(a6, v40, v41);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v66);
  Hands_trace_CBridge_5();
  Hands_trace_CBridge_5();
  v66 = v55;
  LOBYTE(v67) = v56;
  v68 = v64;
  LOBYTE(v69) = v57;
  v70 = v58;
  v71 = v50;
  v72 = v59;
  v73 = v60;
  v74 = v61;
  v75 = v62;
  v76 = v52;
  v77 = v53;
  v78 = v54;
  v79 = v63;
  Detection2DComputePipelineProtocol.extractDetectionResults(_:calibration:scalingInfo:)((uint64_t)&v66, a5, v42 & 1, v47, (uint64_t)a8, (uint64_t *)&v80, v44, v26);

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v48 = v80;
  Hands_trace_CBridge_5();

  *(_QWORD *)a1 = v55;
  *(_BYTE *)(a1 + 8) = v56;
  *(_QWORD *)(a1 + 16) = v64;
  *(_BYTE *)(a1 + 24) = v57;
  *(_OWORD *)(a1 + 32) = v58;
  *(_QWORD *)(a1 + 48) = v50;
  *(_OWORD *)(a1 + 64) = v59;
  *(_QWORD *)(a1 + 80) = v60;
  *(_DWORD *)(a1 + 88) = v61;
  *(_DWORD *)(a1 + 92) = v62;
  *(_QWORD *)(a1 + 96) = v52;
  *(_DWORD *)(a1 + 104) = v53;
  *(_BYTE *)(a1 + 108) = v54;
  *(_QWORD *)(a1 + 112) = v63;
  *a2 = v48;
  return swift_bridgeObjectRetain();
}

uint64_t Detection2DComputePipelineProtocol.extractDetectionResults(_:calibration:scalingInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>, float32x2_t a7@<D0>, float32x2_t a8@<D1>)
{
  uint64_t v8;
  uint64_t v14;
  char v15;
  float v16;
  int v17;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t (*v28)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t, float, double);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  float v48;
  uint64_t v49;
  double v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  char v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  float v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  unint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  void (*v90)(uint64_t, uint64_t);
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  __int16 v94;
  char v95;
  char v96;
  __int16 v97;
  char v98;
  __int16 v99;
  char v100;
  char v101;
  char v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;

  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_BYTE *)(a1 + 24);
  v16 = *(float *)(a1 + 104);
  v17 = *(unsigned __int8 *)(a1 + 108);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 152))(a4, a5);
  if (!v8)
  {
    v85 = v15;
    v86 = v14;
    v87 = a6;
    v109 = result;
    v108 = v20;
    v21 = a4;
    v107 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 144))(a4, a5);
    v84 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a4, a5);
    v83 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 136))(a4, a5);
    specialized static DetectionUtils.adjustOutputForScaledImage(scalingInfo:center2D:size2D:keypoints:)(a3 & 1, &v109, &v108, &v107, a7, a8);
    if (v17)
      v22 = 0.042;
    else
      v22 = v16;
    v90 = *(void (**)(uint64_t, uint64_t))(a5 + 24);
    v90(a4, a5);
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
    v25 = swift_checkMetadataState();
    v88 = v24;
    LOBYTE(v24) = v24(v25, AssociatedConformanceWitness);
    swift_release();
    if ((v24 & 1) != 0)
    {
      v65 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 104))(v21, a5);
      v80 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 120))(v21, a5);
      v81 = v65;
      v67 = v90;
      v82 = v25;
    }
    else
    {
      if (!a2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v93 = MEMORY[0x24BEE0D00];
        v91 = 0xD000000000000028;
        v92 = 0x800000023D9D9F70;
        v66 = MEMORY[0x24BEE4AF8];
        specialized static HLog.E(file:function:line:_:_:)(0xD00000000000007FLL, 0x800000023D9D9E90, 93, (uint64_t)&v91, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v91);
        *v87 = v66;
        v87[1] = v66;
        goto LABEL_34;
      }
      v67 = v90;
      v82 = v25;
      v27 = v107;
      v26 = v108;
      v28 = *(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t, float, double))(a5 + 112);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = v28(a2, v26, v27, v21, a5, v22, *(double *)&a7);
      v80 = v30;
      v81 = v29;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    v77 = v109;
    v31 = *(_QWORD *)(v109 + 16);
    v67(v21, a5);
    v78 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
    v32 = v78(v82, AssociatedConformanceWitness);
    swift_release();
    if (v31 == v32)
    {
      v76 = v108;
      v33 = v108[2];
      v67(v21, a5);
      v34 = v78(v82, AssociatedConformanceWitness);
      swift_release();
      if (v33 == v34)
      {
        v74 = v107;
        v35 = v107[2];
        v67(v21, a5);
        v36 = v78(v82, AssociatedConformanceWitness);
        swift_release();
        if (v35 == v36)
        {
          v37 = *(_QWORD *)(v84 + 16);
          v67(v21, a5);
          v38 = v78(v82, AssociatedConformanceWitness);
          swift_release();
          if (v37 == v38)
          {
            v39 = *(_QWORD *)(v83 + 16);
            v67(v21, a5);
            v40 = v78(v82, AssociatedConformanceWitness);
            swift_release();
            if (v39 == v40)
            {
              v41 = *(_QWORD *)(v81 + 16);
              v67(v21, a5);
              v42 = v78(v82, AssociatedConformanceWitness);
              swift_release();
              if (v41 == v42)
              {
                v43 = *(_QWORD *)(v80 + 16);
                v67(v21, a5);
                v44 = v78(v82, AssociatedConformanceWitness);
                swift_release();
                if (v43 == v44)
                {
                  v67(v21, a5);
                  v45 = v78(v82, AssociatedConformanceWitness);
                  swift_release();
                  v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45 & ~(v45 >> 63), 0, MEMORY[0x24BEE4AF8]);
                  v67(v21, a5);
                  v46 = v78(v82, AssociatedConformanceWitness);
                  result = swift_release();
                  if (v46 < 0)
                  {
                    __break(1u);
                  }
                  else
                  {
                    if (!v46)
                    {
LABEL_36:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v68 = ((uint64_t (*)(uint64_t, uint64_t))v90)(v21, a5);
                      v69 = (*(double (**)(unint64_t))(*(_QWORD *)v68 + 304))(v68);
                      specialized static DetectionUtils.splitLeftAndRightHand(_:_:)((uint64_t)v75, v69);
                      v70 = specialized static DetectionUtils.findBestHandCandidates(_:_:_:)(v68);
                      swift_bridgeObjectRelease();
                      v71 = specialized static DetectionUtils.recalculateBoundingBoxFromKeyPoints(_:)(v70);
                      swift_bridgeObjectRelease();
                      v72 = specialized static DetectionUtils.findBestHandCandidates(_:_:_:)(v68);
                      swift_bridgeObjectRelease();
                      v73 = specialized static DetectionUtils.recalculateBoundingBoxFromKeyPoints(_:)(v72);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_bridgeObjectRelease();
                      *v87 = v71;
                      v87[1] = v73;
                      swift_bridgeObjectRelease();
                      return swift_bridgeObjectRelease();
                    }
                    v79 = v46 - 1;
                    if ((unint64_t)(v46 - 1) < *(_QWORD *)(v81 + 16))
                    {
                      if (v79 < *(_QWORD *)(v80 + 16))
                      {
                        if (v79 < *(_QWORD *)(v77 + 16))
                        {
                          if (v79 < v76[2])
                          {
                            if (v79 < v74[2])
                            {
                              if (v79 < *(_QWORD *)(v84 + 16))
                              {
                                if (v79 < *(_QWORD *)(v83 + 16))
                                {
                                  for (i = 0; ; ++i)
                                  {
                                    v48 = *(float *)(v81 + 32 + 4 * i);
                                    v49 = ((uint64_t (*)(uint64_t, uint64_t))v90)(v21, a5);
                                    v50 = (*(double (**)(uint64_t))(*(_QWORD *)v49 + 424))(v49);
                                    swift_release();
                                    v51 = *(float *)(v80 + 32 + 4 * i);
                                    v52 = *(_QWORD *)(v77 + 32 + 8 * i);
                                    v53 = v76[i + 4];
                                    v54 = v74[i + 4];
                                    v55 = *(_DWORD *)(v84 + 32 + 4 * i);
                                    v56 = *(_DWORD *)(v83 + 32 + 4 * i);
                                    swift_bridgeObjectRetain();
                                    v90(v21, a5);
                                    v57 = v88(v82, AssociatedConformanceWitness);
                                    swift_release();
                                    v58 = v75;
                                    v60 = v75[2];
                                    v59 = v75[3];
                                    if (v60 >= v59 >> 1)
                                      v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1, v75);
                                    v61 = v50;
                                    v103 = v85;
                                    v102 = 1;
                                    v101 = 0;
                                    v96 = 1;
                                    v58[2] = v60 + 1;
                                    v75 = v58;
                                    v62 = &v58[14 * v60];
                                    v62[4] = v52;
                                    v62[5] = v53;
                                    v62[6] = v54;
                                    *((_DWORD *)v62 + 14) = v55;
                                    *((_DWORD *)v62 + 15) = v56;
                                    v62[8] = v86;
                                    *((_BYTE *)v62 + 72) = v103;
                                    v63 = v91;
                                    *((_DWORD *)v62 + 19) = *(_DWORD *)((char *)&v91 + 3);
                                    *(_DWORD *)((char *)v62 + 73) = v63;
                                    v62[10] = 1;
                                    *((_BYTE *)v62 + 88) = v102;
                                    LOWORD(v63) = v104;
                                    *((_BYTE *)v62 + 91) = BYTE2(v104);
                                    *(_WORD *)((char *)v62 + 89) = v63;
                                    *((float *)v62 + 23) = (float)(v22 * v48) * v61;
                                    *((_BYTE *)v62 + 96) = v101;
                                    LOWORD(v63) = v99;
                                    *((_BYTE *)v62 + 99) = v100;
                                    *(_WORD *)((char *)v62 + 97) = v63;
                                    *((float *)v62 + 25) = 1.0 - v51;
                                    *((_BYTE *)v62 + 104) = 0;
                                    LOWORD(v63) = v97;
                                    *((_BYTE *)v62 + 107) = v98;
                                    *(_WORD *)((char *)v62 + 105) = v63;
                                    *((_DWORD *)v62 + 27) = 0;
                                    v62[14] = 1;
                                    *((_DWORD *)v62 + 30) = 0;
                                    *((_BYTE *)v62 + 124) = v96;
                                    LOWORD(v63) = v94;
                                    *((_BYTE *)v62 + 127) = v95;
                                    *(_WORD *)((char *)v62 + 125) = v63;
                                    v62[16] = 0;
                                    *((_BYTE *)v62 + 136) = v57 & 1;
                                    if (v79 == i)
                                      break;
                                  }
                                  goto LABEL_36;
                                }
                                goto LABEL_44;
                              }
LABEL_43:
                              __break(1u);
LABEL_44:
                              __break(1u);
                              return result;
                            }
LABEL_42:
                            __break(1u);
                            goto LABEL_43;
                          }
LABEL_41:
                          __break(1u);
                          goto LABEL_42;
                        }
LABEL_40:
                        __break(1u);
                        goto LABEL_41;
                      }
LABEL_39:
                      __break(1u);
                      goto LABEL_40;
                    }
                  }
                  __break(1u);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v93 = MEMORY[0x24BEE0D00];
    v91 = 0xD000000000000022;
    v92 = 0x800000023D9D9FA0;
    type metadata accessor for HandyLoggerNeo();
    v104 = xmmword_23D9A7060;
    v105 = 0;
    v106 = 0;
    v64 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v104, 0xD00000000000007FLL, 0x800000023D9D9E90, 112, (uint64_t)&v91, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v91);
    *v87 = v64;
    v87[1] = v64;
LABEL_34:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Hands_trace_CBridge_5()
{
  return kdebug_trace();
}

uint64_t specialized BasePoseModelParams.setImageInputs(espressoRegressor:handsKitData:hand:cameraSource:cameraKeys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unsigned int a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _OWORD *v51;
  uint64_t v52;
  char v53;
  float32x4_t *v54;
  void *v55;
  uint64_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint64_t result;
  void *v61;
  uint64_t v62;
  __CVBuffer *v63;
  IOSurfaceRef IOSurface;
  __IOSurface *v65;
  Swift::String v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  __CVBuffer *v91;
  IOSurfaceRef v92;
  __IOSurface *v93;
  Swift::String v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  int32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  __int128 v105;
  simd_float3x3 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  _OWORD v117[3];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  simd_float3x3 v128;

  v12 = v10;
  v127 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(v10 + 56);
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_28;
  v14 = v11;
  swift_bridgeObjectRetain();
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a6);
  if ((v22 & 1) == 0)
    goto LABEL_24;
  v23 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21);
  swift_retain();
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v12 + 56);
  if (!*(_QWORD *)(v24 + 16))
    goto LABEL_27;
  v112 = v23;
  swift_bridgeObjectRetain();
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a8);
  if ((v26 & 1) == 0)
  {
LABEL_23:
    swift_release();
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_28:
    lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError();
    swift_allocError();
    *v68 = 1;
    return swift_willThrow();
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
  swift_retain();
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v12 + 56);
  if (!*(_QWORD *)(v28 + 16))
  {
    swift_release();
LABEL_27:
    swift_release();
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v29 = specialized __RawDictionaryStorage.find<A>(_:)(a9);
  if ((v30 & 1) == 0)
  {
    swift_release();
    goto LABEL_23;
  }
  v111 = v27;
  v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
  swift_retain();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v12 + 56);
  if (!*(_QWORD *)(v32 + 16))
  {
    swift_release();
    swift_release();
    goto LABEL_27;
  }
  v110 = v31;
  swift_bridgeObjectRetain();
  v33 = specialized __RawDictionaryStorage.find<A>(_:)(a10);
  if ((v34 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v35 = *(_QWORD *)(a2 + 200);
  v109 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
  swift_retain();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v35 + 16))
    goto LABEL_30;
  v36 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5 & 1);
  if ((v37 & 1) == 0)
    goto LABEL_30;
  v38 = (_OWORD *)(*(_QWORD *)(v35 + 56) + 192 * v36);
  v40 = v38[2];
  v39 = v38[3];
  v41 = v38[1];
  v117[0] = *v38;
  v117[1] = v41;
  v117[2] = v40;
  v118 = v39;
  v42 = v38[4];
  v43 = v38[5];
  v44 = v38[7];
  v121 = v38[6];
  v122 = v44;
  v119 = v42;
  v120 = v43;
  v45 = v38[8];
  v46 = v38[9];
  v47 = v38[11];
  v125 = v38[10];
  v126 = v47;
  v123 = v45;
  v124 = v46;
  v48 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for HandDescriptor() + 92));
  if (!*(_QWORD *)(v48 + 16))
    goto LABEL_30;
  outlined retain of ImageData((uint64_t)v117);
  v49 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5 & 1);
  if ((v50 & 1) == 0
    || !*(_QWORD *)(v48 + 16)
    || (v51 = (_OWORD *)(*(_QWORD *)(v48 + 56) + 176 * v49),
        v107 = v51[3],
        v108 = v51[2],
        v105 = v51[4],
        v52 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5 & 1),
        (v53 & 1) == 0))
  {
    outlined release of ImageData((uint64_t)v117);
LABEL_30:
    lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError();
    swift_allocError();
    *v69 = 2;
    swift_willThrow();
    goto LABEL_31;
  }
  v54 = (float32x4_t *)(*(_QWORD *)(v48 + 56) + 176 * v52);
  v99 = v54[5];
  v100 = v54[6];
  v101 = v54[7];
  v55 = (void *)objc_opt_self();
  v56 = v119;
  swift_beginAccess();
  objc_msgSend(v55, sel_shiftIntrinsics_, *(double *)(v56 + 64), *(double *)(v56 + 80), *(double *)(v56 + 96));
  v102 = v57;
  v103 = v58;
  v104 = v59;
  objc_msgSend(v55, sel_shiftIntrinsics_, *(double *)&v108, *(double *)&v107, *(double *)&v105);
  v106 = __invert_f3(v128);
  result = swift_beginAccess();
  if (!*((_QWORD *)&v118 + 1))
  {
    __break(1u);
    return result;
  }
  v98 = *(int32x4_t *)(v56 + 112);
  v62 = *(_QWORD *)(v112 + 16);
  v61 = *(void **)(v112 + 24);
  v63 = (__CVBuffer *)*((id *)&v118 + 1);
  swift_bridgeObjectRetain();
  IOSurface = CVPixelBufferGetIOSurface(v63);
  if (IOSurface)
  {
    v65 = IOSurface;
    v66._countAndFlagsBits = v62;
    v66._object = v61;
    E5RTRegressor.setInput(_:fromIOSurface:)(v66, v65);
    v14 = v67;
    if (v67)
    {
      swift_bridgeObjectRelease();

      outlined release of ImageData((uint64_t)v117);
LABEL_31:
      swift_release();
LABEL_32:
      swift_release();
LABEL_33:
      swift_release();
      return swift_release();
    }
    swift_bridgeObjectRelease();

    v63 = v65;
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v70 = vzip1q_s32(v102, v104);
  v71 = vzip1q_s32(v103, (int32x4_t)0);
  v72 = vzip1q_s32(v70, v71);
  v73 = vzip2q_s32(v70, v71);
  v72.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v104, 0).i32[2];
  v74 = vzip1q_s32(vdupq_laneq_s32(v102, 2), vdupq_laneq_s32(v103, 2));
  v73.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v104, 1).i32[2];
  v74.i32[2] = v104.i32[2];
  v114 = v72;
  v115 = v73;
  v116 = v74;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v111 + 16), *(void **)(v111 + 24), v114.i8, 16, 12, 3, *(_QWORD *)(v111 + 32), *(_QWORD *)(v111 + 40));
  if (v14)
  {
    outlined release of ImageData((uint64_t)v117);
    swift_release();
    swift_release();
    goto LABEL_33;
  }
  v75 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v99, v106.columns[0].f32[0]), v100, *(float32x2_t *)v106.columns[0].f32, 1), v101, (float32x4_t)v106.columns[0], 2);
  v76 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v99, v106.columns[1].f32[0]), v100, *(float32x2_t *)v106.columns[1].f32, 1), v101, (float32x4_t)v106.columns[1], 2);
  v77 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v99, v106.columns[2].f32[0]), v100, *(float32x2_t *)v106.columns[2].f32, 1), v101, (float32x4_t)v106.columns[2], 2);
  v78 = vdupq_laneq_s32(v75, 2);
  v79 = vzip1q_s32(v75, v77);
  v80 = vzip1q_s32(v76, (int32x4_t)0);
  v81 = vzip1q_s32(v79, v80);
  v82 = vzip2q_s32(v79, v80);
  v81.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v77, 0).i32[2];
  v83 = vzip1q_s32(v78, vdupq_laneq_s32(v76, 2));
  v82.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v77, 1).i32[2];
  v83.i32[2] = v77.i32[2];
  v114 = v81;
  v115 = v82;
  v116 = v83;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v110 + 16), *(void **)(v110 + 24), v114.i8, 16, 12, 3, *(_QWORD *)(v110 + 32), *(_QWORD *)(v110 + 40));
  v114 = v98;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v109 + 16), *(void **)(v109 + 24), v114.i8, 16, 16, 1, *(_QWORD *)(v109 + 32), *(_QWORD *)(v109 + 40));
  if ((*(_BYTE *)(v12 + 112) & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return outlined release of ImageData((uint64_t)v117);
  }
  v84 = *(_QWORD *)(v12 + 56);
  if (!*(_QWORD *)(v84 + 16))
  {
LABEL_49:
    lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError();
    swift_allocError();
    *v96 = 1;
    swift_willThrow();
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  v85 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
  if ((v86 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  v87 = *(_QWORD *)(*(_QWORD *)(v84 + 56) + 8 * v85);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v88 = *(void **)(v56 + 136);
  if (!v88)
  {
    lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError();
    swift_allocError();
    *v97 = 2;
    swift_willThrow();
    swift_release();
    goto LABEL_39;
  }
  v89 = *(_QWORD *)(v87 + 16);
  v90 = *(void **)(v87 + 24);
  v91 = v88;
  swift_bridgeObjectRetain();
  v92 = CVPixelBufferGetIOSurface(v91);
  if (v92)
  {
    v93 = v92;
    v94._countAndFlagsBits = v89;
    v94._object = v90;
    E5RTRegressor.setInput(_:fromIOSurface:)(v94, v93);
    if (v95)
    {
      swift_release();

      swift_bridgeObjectRelease();
LABEL_39:
      outlined release of ImageData((uint64_t)v117);
      swift_release();
      goto LABEL_32;
    }
    swift_release();
    swift_release();

  }
  else
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  outlined release of ImageData((uint64_t)v117);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t specialized Data.init<A>(buffer:)(uint64_t __src, uint64_t a2)
{
  uint64_t v3;

  if (__src)
  {
    if ((unint64_t)(a2 - 0x2000000000000000) >> 62 == 3)
    {
      v3 = 4 * a2;
      if (4 * a2)
      {
        if (v3 <= 14)
        {
          return specialized Data.InlineData.init(_:)((_BYTE *)__src, (_BYTE *)(__src + v3));
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            __src = swift_allocObject();
            *(_QWORD *)(__src + 16) = 0;
            *(_QWORD *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 34;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

Swift::Void __swiftcall MonoPoseDetectorModel.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  HandsKitConfig *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  NSArray *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _QWORD v27[4];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  type metadata accessor for MonoModelParams(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 120) = 0;
  v5 = a1;
  LODWORD(a1) = -[HandsKitConfig UseUberMono](v5, sel_UseUberMono);
  v6 = specialized static MonoModelParams.resolveModelName(_:)(v5);
  v8 = v7;
  v9 = -[HandsKitConfig AllowInternalModel](v5, sel_AllowInternalModel);
  v10 = MEMORY[0x24BEE4AF8];
  v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if ((_DWORD)a1)
    v12 = 3;
  else
    v12 = 0;
  v13 = specialized BasePoseModelParams.init(_:modelConfig:allowInternalModel:configurationName:)(v6, v8, v11, v9, v12, v4);
  swift_release();
  swift_retain();
  MonoModelParams.configure()();
  swift_release();

  *(_QWORD *)(v2 + 16) = v13;
  swift_release();
  *(_BYTE *)(v2 + 65) = -[HandsKitConfig EnableEnrolment](v5, sel_EnableEnrolment);
  v14 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  *(_BYTE *)(v2 + 66) = -[HandsKitConfig UseKalmanFiltering](v5, sel_UseKalmanFiltering);
  *(_BYTE *)(v2 + 67) = -[HandsKitConfig FilterInWorldCoordinates](v5, sel_FilterInWorldCoordinates);
  v28 = xmmword_23D9A6CC0;
  v29 = 0;
  v30 = 0;
  v27[3] = MEMORY[0x24BEE0D00];
  v27[0] = 0xD000000000000021;
  v27[1] = 0x800000023D9DA2E0;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9DA0E0, 46, (uint64_t *)&v28, (uint64_t)v27, v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);
  v15 = -[HandsKitConfig BoneScale](v5, sel_BoneScale);
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_6;
LABEL_18:
    v19 = (char *)MEMORY[0x24BEE4AF8];
LABEL_19:
    swift_bridgeObjectRelease_n();
    *(_QWORD *)(v2 + 72) = v19;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v2 + 92) = -[HandsKitConfig UseMonoActionModel](v5, sel_UseMonoActionModel);
    -[HandsKitConfig HandRadius](v5, sel_HandRadius);
    *(_DWORD *)(v2 + 88) = v26;
    *(_BYTE *)(v2 + 93) = -[HandsKitConfig MonoDD](v5, sel_MonoDD);
    *(_BYTE *)(v2 + 94) = -[HandsKitConfig UseMonoOnlineEnrollment](v5, sel_UseMonoOnlineEnrollment);
    *(_BYTE *)(v2 + 95) = -[HandsKitConfig OutputRawPose](v5, sel_OutputRawPose);
    return;
  }
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  if (!v17)
    goto LABEL_18;
LABEL_6:
  if (v17 >= 1)
  {
    v18 = 0;
    v19 = (char *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x24263790C](v18, v16);
      else
        v20 = *(id *)(v16 + 8 * v18 + 32);
      v21 = v20;
      Float.init(truncating:)();
      v23 = v22;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
      v25 = *((_QWORD *)v19 + 2);
      v24 = *((_QWORD *)v19 + 3);
      if (v25 >= v24 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v19);
      ++v18;
      *((_QWORD *)v19 + 2) = v25 + 1;
      *(_DWORD *)&v19[4 * v25 + 32] = v23;
    }
    while (v17 != v18);
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t MonoPoseDetectorModel.run(forHand:withPrevHand:withHandsKitData:ps_handle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE *v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _OWORD *v75;
  __int128 v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t);
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  id v95;
  uint64_t v96;
  id v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unsigned int (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _OWORD v142[35];
  _BYTE v143[552];
  uint64_t v144;

  v126 = a2;
  v5 = v4;
  v115 = a4;
  v144 = *MEMORY[0x24BDAC8D0];
  v124 = type metadata accessor for HandDescriptor();
  v8 = *(_QWORD *)(v124 - 8);
  v10 = MEMORY[0x24BDAC7A8](v124, v9);
  v114 = (uint64_t)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v122 = (uint64_t)&v111 - v14;
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)&v111 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  v20 = MEMORY[0x24BDAC7A8](v18, v19);
  v121 = (uint64_t)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20, v22);
  v25 = (char *)&v111 - v24;
  v27 = MEMORY[0x24BDAC7A8](v23, v26);
  v29 = (char *)&v111 - v28;
  MEMORY[0x24BDAC7A8](v27, v30);
  v32 = (char *)&v111 - v31;
  memcpy(v143, a3, sizeof(v143));
  v128 = a1;
  if (!*(_QWORD *)(a1 + 200) || (v33 = *(_QWORD *)(v5 + 16)) == 0)
  {
    lazy protocol witness table accessor for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError();
    swift_allocError();
    *v40 = 2;
    return swift_willThrow();
  }
  v123 = v5;
  swift_retain();
  v127 = v33;
  specialized ImageVariantModelParams.hasImageWidthChanged(_:)();
  if ((v34 & 1) != 0)
    MonoModelParams.configure()();
  v35 = v128;
  v36 = MonoPoseDetectorModel.getCameraSources(forHand:)(v128);
  v116 = v36[2];
  if (!v116)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError();
    swift_allocError();
    *v42 = 0;
    swift_willThrow();
    return swift_release();
  }
  v113 = v36;
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  v38 = v126;
  v120 = v37;
  v39 = v37(v126, 1, v124);
  outlined init with copy of HandDescriptor?(v38, (uint64_t)v32);
  outlined init with copy of HandDescriptor(v35, (uint64_t)v17);
  if (v39 == 1)
  {
    outlined destroy of HandDescriptor((uint64_t)v17);
    outlined destroy of HandDescriptor?((uint64_t)v32);
LABEL_12:
    v44 = v128;
    v45 = v122;
    outlined init with copy of HandDescriptor?(v126, (uint64_t)v25);
    outlined init with copy of HandDescriptor(v44, v45);
LABEL_13:
    outlined destroy of HandDescriptor(v45);
    outlined destroy of HandDescriptor?((uint64_t)v25);
LABEL_14:
    v46 = v125;
LABEL_15:
    v142[0] = xmmword_23D9A6CC0;
    v142[1] = 0uLL;
    *(_QWORD *)&v130 = 0;
    *((_QWORD *)&v130 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v130 = 0xD000000000000012;
    *((_QWORD *)&v130 + 1) = 0x800000023D9C93B0;
    v129 = *(_QWORD *)(v128 + 144);
    v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v131 + 1) = MEMORY[0x24BEE0D00];
    v48 = v128;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9DA0E0, 74, (uint64_t *)v142, (uint64_t)&v130, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v130);
    goto LABEL_16;
  }
  outlined init with take of HandDescriptor?((uint64_t)v32, (uint64_t)v29);
  v43 = v120;
  if (v120((uint64_t)v29, 1, v124) == 1)
  {
    outlined destroy of HandDescriptor?((uint64_t)v29);
    outlined destroy of HandDescriptor((uint64_t)v17);
    goto LABEL_12;
  }
  v83 = *((_QWORD *)v29 + 18);
  outlined destroy of HandDescriptor((uint64_t)v29);
  v84 = *((_QWORD *)v17 + 18);
  outlined destroy of HandDescriptor((uint64_t)v17);
  outlined init with copy of HandDescriptor?(v126, (uint64_t)v25);
  v48 = v128;
  v45 = v122;
  outlined init with copy of HandDescriptor(v128, v122);
  if (v83 != v84)
    goto LABEL_13;
  v85 = v121;
  outlined init with take of HandDescriptor?((uint64_t)v25, v121);
  if (v43(v85, 1, v124) == 1)
  {
    outlined destroy of HandDescriptor?(v85);
    outlined destroy of HandDescriptor(v45);
    goto LABEL_14;
  }
  v90 = *(unsigned __int8 *)(v85 + 136);
  outlined destroy of HandDescriptor(v85);
  v91 = *(unsigned __int8 *)(v45 + 136);
  outlined destroy of HandDescriptor(v45);
  v46 = v125;
  if (v91 != v90)
    goto LABEL_15;
LABEL_16:
  v49 = *(_QWORD *)&v143[456];
  LODWORD(v126) = *(unsigned __int8 *)(v48 + 136);
  v120 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4AF8];
  v129 = MEMORY[0x24BEE4AF8];
  v50 = (char *)(v113 + 5);
  swift_bridgeObjectRetain();
  v51 = 1;
  v112 = v50;
  v125 = v49;
  while (1)
  {
    v121 = (uint64_t)v50;
    v122 = v51;
    v52 = *((_QWORD *)v50 - 1);
    v53 = *v50;
    Hands_trace_CBridge_0();
    memcpy(v142, v143, 0x228uLL);
    *(_QWORD *)&v130 = v52;
    BYTE8(v130) = v53;
    v54 = v48;
    v55 = v48;
    v56 = v127;
    specialized MonoPoseDetectorModel.setInputs(forHand:withHandsKitData:withModelParams:withCameraSource:)(v55, v142, v127);
    if (v46)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    Hands_trace_CBridge_0();
    Hands_trace_CBridge_0();
    if (*(_QWORD *)(v56 + 120))
    {
      swift_retain();
      specialized E5RTRegressor.runNetwork(_:)();
      swift_release();
    }
    Hands_trace_CBridge_0();
    Hands_trace_CBridge_0();
    v57 = (void *)specialized MonoPoseDetectorModel.getOutputs(forHand:withModelParams:)(v54, v127);
    v58 = *(_QWORD *)&v143[200];
    if (!*(_QWORD *)(*(_QWORD *)&v143[200] + 16)
      || (v59 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v53), (v60 & 1) == 0))
    {
      swift_bridgeObjectRelease_n();
      lazy protocol witness table accessor for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError();
      swift_allocError();
      *v86 = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();

      swift_release();
      return swift_bridgeObjectRelease();
    }
    v61 = (_OWORD *)(*(_QWORD *)(v58 + 56) + 192 * v59);
    v62 = v61[4];
    v63 = v61[5];
    v64 = v61[7];
    v142[6] = v61[6];
    v142[7] = v64;
    v142[5] = v63;
    v65 = v61[8];
    v66 = v61[9];
    v67 = v61[11];
    v142[10] = v61[10];
    v142[11] = v67;
    v142[8] = v65;
    v142[9] = v66;
    v68 = v61[1];
    v70 = v61[2];
    v69 = v61[3];
    v142[0] = *v61;
    v142[1] = v68;
    v142[2] = v70;
    v142[3] = v69;
    v142[4] = v62;
    v71 = *(_QWORD *)(v128 + *(int *)(v124 + 92));
    v72 = *(_QWORD *)(v71 + 16);
    outlined retain of ImageData((uint64_t)v142);
    if (!v72 || (v73 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v53), (v74 & 1) == 0))
    {
      swift_bridgeObjectRelease_n();
      lazy protocol witness table accessor for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError();
      swift_allocError();
      *v87 = 4;
      swift_willThrow();
      swift_release();
      outlined release of ImageData((uint64_t)v142);
      swift_bridgeObjectRelease();

      return swift_bridgeObjectRelease();
    }
    v75 = (_OWORD *)(*(_QWORD *)(v71 + 56) + 176 * v73);
    v76 = v75[4];
    v118 = v75[3];
    v119 = v76;
    v117 = v75[2];
    v138 = v142[8];
    v139 = v142[9];
    v140 = v142[10];
    v141 = v142[11];
    v134 = v142[4];
    v135 = v142[5];
    v136 = v142[6];
    v137 = v142[7];
    v130 = v142[0];
    v131 = v142[1];
    v132 = v142[2];
    v133 = v142[3];
    v77 = v123;
    MonoPoseDetectorModel.calculateLocalizerMatrix(imageData:hand:handsKitData:)((uint64_t)&v130, v128, (float32x4_t *)v143);
    objc_msgSend(v57, sel_setLocalizer_);
    objc_msgSend(v57, sel_setIntrinsics_, *(double *)&v117, *(double *)&v118, *(double *)&v119);
    v78 = v57;
    MEMORY[0x2426374D4]();
    v46 = 0;
    if (*(_QWORD *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    Hands_trace_CBridge_0();
    if (*(_BYTE *)(v77 + 92) == 1)
    {
      v79 = specialized MonoPoseDetectorModel.buildMonoBranchFeatures(withModelParams:)(v127);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v80 = v120;
      else
        v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v120 + 2) + 1, 1, v120);
      v82 = *((_QWORD *)v80 + 2);
      v81 = *((_QWORD *)v80 + 3);
      if (v82 >= v81 >> 1)
        v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v81 > 1), v82 + 1, 1, v80);
      *((_QWORD *)v80 + 2) = v82 + 1;
      v120 = v80;
      *((_QWORD *)v80 + v82 + 4) = v79;
      v77 = v123;
      v48 = v128;
    }
    else
    {
      v48 = v128;
    }

    outlined release of ImageData((uint64_t)v142);
    if (v116 == v122)
      break;
    v50 = (char *)(v121 + 16);
    v51 = v122 + 1;
    if (__OFADD__(v122, 1))
    {
      __break(1u);
      goto LABEL_65;
    }
  }
  v88 = v113;
  swift_bridgeObjectRelease();
  v89 = v129;
  swift_bridgeObjectRetain();
  MonoPoseDetectorModel.computeHandDescriptor(forHand:withHandsKitData:withEstimatorInputs:)(v48, (uint64_t)v143, v89, v114);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v77 + 96) == 1)
  {
    v92 = v88[2];
    v93 = v115;
    *(_QWORD *)&v118 = v92;
    if (v92)
    {
      v125 = 0;
      v94 = *v112;
      v126 = *((_QWORD *)v112 - 1);
      LODWORD(v122) = v94;
      if ((v129 & 0xC000000000000001) != 0)
      {
        v95 = (id)MEMORY[0x24263790C](0);
LABEL_52:
        v96 = (uint64_t)v95;
        v121 = 1;
        v97 = objc_msgSend(v95, sel_uvdJoints);
        static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v99 = v98;

        v100 = (char *)&loc_23D9176D8 + *((int *)qword_23D917D10 + (v99 >> 62));
        v128 = v96;
        __asm { BR              X9 }
      }
      if (*(_QWORD *)((v129 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v95 = *(id *)(v129 + 32);
        goto LABEL_52;
      }
LABEL_65:
      __break(1u);
      JUMPOUT(0x23D917CE4);
    }
    swift_bridgeObjectRelease();
    v101 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v101 = MEMORY[0x24BEE4AF8];
    v93 = v115;
  }
  v102 = v114 + *(int *)(v124 + 96);
  v103 = type metadata accessor for HandDescriptorInternal();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 48))(v102, 1, v103))
    *(_QWORD *)(v102 + *(int *)(v103 + 56)) = v101;
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v77 + 92) == 1)
  {
    v104 = *((_QWORD *)v120 + 2);
    v105 = v104 == 2;
    if (v104)
    {
      v106 = v124;
      if (v104 > v105)
      {
        v107 = *((_QWORD *)v120 + v105 + 4);
        *(_QWORD *)&v130 = *((_QWORD *)v120 + 4);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v107);
        swift_bridgeObjectRelease();
        swift_release();
        v108 = v130;
        v109 = *(int *)(v106 + 116);
        v110 = v114;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v110 + v109) = v108;
        v93 = v115;
        goto LABEL_63;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  swift_release();
  v110 = v114;
LABEL_63:
  outlined init with take of HandDescriptor(v110, v93);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *MonoPoseDetectorModel.getCameraSources(forHand:)(uint64_t a1)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v5 = *(_QWORD *)(a1 + 200);
  if (!v5)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 < 2)
  {
    if (v6 == 1)
    {
      v3 = *(_QWORD *)(v5 + 32);
      LOBYTE(v5) = *(_BYTE *)(v5 + 40);
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v4 = v1[2];
      v6 = v1[3];
      v2 = v4 + 1;
      if (v4 < v6 >> 1)
      {
LABEL_11:
        v1[2] = v2;
        v15 = &v1[2 * v4];
        v15[4] = v3;
        *((_BYTE *)v15 + 40) = v5;
        return v1;
      }
    }
    else
    {
      __break(1u);
    }
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v2, 1, v1);
    goto LABEL_11;
  }
  v7 = *(unsigned __int8 *)(a1 + 136);
  v8 = v5 + 32;
  v9 = 16;
  if (*(_BYTE *)(a1 + 136))
    v9 = 0;
  v10 = (uint64_t *)(v8 + v9);
  v11 = *v10;
  v12 = *((unsigned __int8 *)v10 + 8);
  if (v12 == 1)
    __asm { BR              X9 }
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
    swift_bridgeObjectRetain();
    v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v16 = v1[2];
  v14 = v1[3];
  v13 = v16 + 1;
  if (v16 >= v14 >> 1)
    goto LABEL_33;
  while (1)
  {
    v1[2] = v13;
    v17 = &v1[2 * v16];
    v17[4] = v11;
    *((_BYTE *)v17 + 40) = v12;
LABEL_15:
    if (*(_BYTE *)(v2 + 93) == 1 && v1[2])
      goto LABEL_22;
    v16 = *(_QWORD *)(v5 + 16);
    if (v16 > v7)
      break;
    __break(1u);
LABEL_33:
    v29 = v13;
    v26 = v1;
    v27 = v16;
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v13, 1, v26);
    v16 = v27;
    v13 = v29;
    v1 = v28;
  }
  v18 = 16;
  if (!(_DWORD)v7)
    v18 = 0;
  v19 = (uint64_t *)(v8 + v18);
  v20 = *v19;
  v21 = *((unsigned __int8 *)v19 + 8);
  if (v21 == 1)
    __asm { BR              X9 }
  if ((v20 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return v1;
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
  v23 = v1[2];
  v22 = v1[3];
  if (v23 >= v22 >> 1)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v1);
  v1[2] = v23 + 1;
  v24 = &v1[2 * v23];
  v24[4] = v20;
  *((_BYTE *)v24 + 40) = v21;
  return v1;
}

uint64_t closure #1 in MonoPoseDetectorModel.buildMonoBranchFeatures(withModelParams:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;

  v6 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(v6 + 16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v8 = v4;
  v9 = *a1;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v11 & 1) == 0)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v12 = *(_QWORD **)(*(_QWORD *)(v6 + 56) + 8 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  v13 = v8;
  v14 = specialized static ModelUtils.getEspressoOutputAsBuffer(_:_:)(v12);
  v16 = v15;
  v18 = v17;
  result = swift_release();
  if (v13)
  {
    *a3 = v13;
    return result;
  }
  if ((v18 & 1) != 0)
    goto LABEL_15;
  if (v14)
    v20 = v16 - (_QWORD)v14;
  else
    v20 = 0;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
  v28 = lazy protocol witness table accessor for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>();
  v26[0] = v14;
  v26[1] = v20;
  v21 = __swift_project_boxed_opaque_existential_1(v26, v27);
  if (*v21)
    v22 = (_BYTE *)(*v21 + v21[1]);
  else
    v22 = 0;
  closure #1 in Data.init<A>(_:)((_BYTE *)*v21, v22, v25);
  v23 = v25[0];
  v24 = v25[1];
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v26);
  *a4 = v23;
  a4[1] = v24;
  return result;
}

void MonoPoseDetectorModel.computeHandDescriptor(forHand:withHandsKitData:withEstimatorInputs:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  float32x4_t v32;
  int v33;
  float32x4_t v34;
  void *v35;
  float v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  void *v48;
  __int16 *v49;
  __int128 v50;
  __int16 *v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  double v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  NSArray v75;
  double v76;
  uint64_t v77;
  SEL *p_align;
  unint64_t value;
  id v80;
  void *v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  id v86;
  id v87;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v89;
  id v90;
  void *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  id v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  CMTimeValue v102;
  unint64_t v103;
  id v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  id v109;
  void *v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  char isUniquelyReferenced_nonNull_native;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  float32x4_t v128;
  int v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  float32x4_t v143;
  uint64_t v144;
  _QWORD v145[2];
  float32x4_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  CMTime v174;
  CMTime v175;
  float32x4_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  __int16 v206;
  char v207;
  uint64_t v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  __int16 v216;
  char v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;

  v160 = a4;
  v161 = a3;
  v8 = (uint64_t *)(a2 + 396);
  v9 = type metadata accessor for HandDescriptor();
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v13 = (char *)v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v14);
  v15 = *(float32x4_t *)(a2 + 208);
  v168 = *(float32x4_t *)(a2 + 224);
  v169 = v15;
  v16 = *(float32x4_t *)(a2 + 240);
  v166 = *(float32x4_t *)(a2 + 256);
  v167 = v16;
  v17 = *(float32x4_t *)(a2 + 288);
  v170 = *(float32x4_t *)(a2 + 272);
  v171 = v17;
  v18 = *(float32x4_t *)(a2 + 320);
  v172 = *(float32x4_t *)(a2 + 304);
  v173 = v18;
  v19 = *(_QWORD *)(a2 + 336);
  v20 = *(_QWORD *)(a2 + 344);
  v163 = *(unsigned int *)(a2 + 352);
  v162 = *(unsigned int *)(a2 + 356);
  v165 = *(_QWORD *)(a2 + 360);
  v149 = *(_QWORD *)(a2 + 368);
  v150 = v19;
  v21 = *(_QWORD *)(a2 + 376);
  v147 = *(_QWORD *)(a2 + 384);
  v148 = v21;
  v22 = *(_BYTE *)(a2 + 392);
  v23 = *v8;
  v24 = *(_DWORD *)(a2 + 404);
  v156 = *(_DWORD *)(a2 + 408);
  v157 = v24;
  v25 = v8[2];
  v154 = v8[3];
  v155 = v25;
  v26 = v8[4];
  v152 = v8[5];
  v153 = v26;
  v28 = (char *)v145 - v27;
  v151 = *(unsigned __int8 *)(a2 + 444);
  v29 = *(_QWORD *)(a2 + 448);
  v158 = v23;
  v159 = v29;
  outlined init with copy of HandDescriptor(a1, (uint64_t)v145 - v27);
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
    lazy protocol witness table accessor for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError();
    swift_allocError();
    *v30 = 4;
    swift_willThrow();
    outlined destroy of HandDescriptor((uint64_t)v28);
    return;
  }
  v164 = a1;
  v31 = *(_QWORD *)(a1 + 176);
  v32.i64[0] = v31;
  v32.i64[1] = *(_QWORD *)(a1 + 184);
  v33 = *(unsigned __int8 *)(v4 + 67);
  v145[0] = v28;
  if (v33 == 1)
  {
    v34 = vaddq_f32(v166, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v169, *(float *)&v31), v168, *(float32x2_t *)v32.f32, 1), v167, v32, 2));
    v34.i32[3] = 0;
    v146 = v34;
  }
  else
  {
    v146 = v32;
  }
  v145[1] = v5;
  v35 = *(void **)(v4 + 32);
  v36 = *(float *)v164 / 0.12645;
  outlined init with copy of HandDescriptor(v164, (uint64_t)v13);
  if (!v35)
  {
    outlined destroy of HandDescriptor((uint64_t)v13);
    goto LABEL_15;
  }
  v37 = objc_msgSend(v35, sel_isLeft);
  v38 = v13[136];
  outlined destroy of HandDescriptor((uint64_t)v13);
  if (v37 != v38)
  {
LABEL_15:
    v49 = (__int16 *)(a2 + 393);
    v50 = *(_OWORD *)(a2 + 176);
    v51 = (__int16 *)(a2 + 445);
    v52 = (__int128 *)(a2 + 456);
    v186 = *(_OWORD *)(a2 + 160);
    v187 = v50;
    v53 = *(_OWORD *)(a2 + 112);
    v182 = *(_OWORD *)(a2 + 96);
    v183 = v53;
    v54 = *(_OWORD *)(a2 + 144);
    v184 = *(_OWORD *)(a2 + 128);
    v185 = v54;
    v55 = *(_OWORD *)(a2 + 48);
    v178 = *(_OWORD *)(a2 + 32);
    v179 = v55;
    v56 = *(_OWORD *)(a2 + 80);
    v180 = *(_OWORD *)(a2 + 64);
    v181 = v56;
    v57 = *(_OWORD *)(a2 + 16);
    v176 = *(float32x4_t *)a2;
    v177 = v57;
    v188 = *(_OWORD *)(a2 + 192);
    v189 = v169;
    v190 = v168;
    v191 = v167;
    v192 = v166;
    v193 = v170;
    v194 = v171;
    v195 = v172;
    v196 = v173;
    v197 = v150;
    v198 = v20;
    v58 = v163;
    v199 = v163;
    v169.i64[0] = v20;
    v59 = v162;
    v200 = v162;
    v46 = v165;
    v201 = v165;
    v202 = v149;
    v203 = v148;
    v204 = v147;
    v205 = v22;
    v60 = *((_BYTE *)v49 + 2);
    v206 = *v49;
    v207 = v60;
    v208 = v158;
    v209 = v157;
    v210 = v156;
    v211 = v155;
    v212 = v154;
    v213 = v153;
    v214 = v152;
    v215 = v151;
    v216 = *v51;
    v217 = *((_BYTE *)v51 + 2);
    v218 = v159;
    v61 = v52[1];
    v219 = *v52;
    v220 = v61;
    v62 = v52[2];
    v63 = v52[3];
    v64 = v52[5];
    v223 = v52[4];
    v224 = v64;
    v221 = v62;
    v222 = v63;
    v43 = v164;
    v65 = *(unsigned __int8 *)(v164 + 136);
    MonoPoseDetectorModel.configureBoneScale(handsKitData:isLeft:)((uint64_t)&v176, *(_BYTE *)(v164 + 136));
    swift_beginAccess();
    v66 = *(unsigned __int8 *)(v4 + 66);
    v67 = *(_QWORD *)(v4 + 80) + 32;
    v68 = objc_allocWithZone((Class)MonoPoseEstimatorWrapper);
    *(float *)&v69 = v36;
    v70 = objc_msgSend(v68, sel_initWithHandScale_boneScale_isLeft_useKalman_, v67, v65, v66, v69);
    v71 = *(void **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v70;

    v44 = v58 | (v59 << 32);
    v45 = v169.i64[0];
    goto LABEL_18;
  }
  if ((*(_BYTE *)(v4 + 64) & 1) != 0)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v39 = *(_QWORD *)(v4 + 48);
  v40 = *(_QWORD *)(v4 + 56);
  v41 = *(_QWORD *)(v4 + 40);
  CMTimeMakeWithSeconds((CMTime *)&v176, 1.0, 1);
  v42 = v176;
  v175.epoch = v177;
  v176.i64[0] = v41;
  v176.i64[1] = v39;
  *(_QWORD *)&v177 = v40;
  *(float32x4_t *)&v175.value = v42;
  CMTimeAdd(&v174, (CMTime *)&v176, &v175);
  v43 = v164;
  if ((*(_BYTE *)(v4 + 64) & 1) != 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v44 = v163 | (v162 << 32);
  v45 = v20;
  v46 = v165;
  if ((static CMTime.> infix(_:_:)() & 1) != 0 && (static CMTime.< infix(_:_:)() & 1) != 0)
  {
    v48 = *(void **)(v4 + 32);
    if (!v48)
    {
LABEL_85:
      __break(1u);
      return;
    }
    LODWORD(v47) = 1.0;
    objc_msgSend(v48, sel_predict_, v47);
  }
  else
  {
    v72 = *(void **)(v4 + 32);
    if (!v72)
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    objc_msgSend(v72, sel_reset);
  }
LABEL_18:
  *(_QWORD *)(v4 + 40) = v45;
  *(_QWORD *)(v4 + 48) = v44;
  *(_QWORD *)(v4 + 56) = v46;
  *(_BYTE *)(v4 + 64) = 0;
  v73 = *(void **)(v4 + 32);
  if (!v73)
    goto LABEL_80;
  type metadata accessor for NSDictionary(0, &lazy cache variable for type metadata for MonoPoseEstimatorInput);
  v74 = v73;
  v75.super.isa = Array._bridgeToObjectiveC()().super.isa;
  *(float *)&v76 = v36;
  v77 = v4;
  p_align = (SEL *)objc_msgSend(v74, sel_computeTransformsWithHandScale_globalHandCenter_estimatorInput_enrollment_, v75.super.isa, *(unsigned __int8 *)(v4 + 94), v76, *(double *)v146.i64);

  type metadata accessor for NSDictionary(0, &lazy cache variable for type metadata for SimdFloat4x4Obj);
  value = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v174.value = value;
  v165 = v77;
  if (*(_BYTE *)(v77 + 67) != 1)
    goto LABEL_40;
  if ((value & 0xC000000000000001) != 0)
  {
LABEL_72:
    v80 = (id)MEMORY[0x24263790C](0, value);
  }
  else
  {
    if (!*(_QWORD *)((value & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v80 = *(id *)(value + 32);
  }
  v81 = v80;
  objc_msgSend(v80, sel_value, v145[0]);
  v168 = v83;
  v169 = v82;
  v166 = v84;
  v167 = v85;

  v169 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v169.f32[0]), v171, *(float32x2_t *)v169.f32, 1), v172, v169, 2), v173, v169, 3);
  v168 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v168.f32[0]), v171, *(float32x2_t *)v168.f32, 1), v172, v168, 2), v173, v168, 3);
  v166 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v166.f32[0]), v171, *(float32x2_t *)v166.f32, 1), v172, v166, 2), v173, v166, 3);
  v167 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v167.f32[0]), v171, *(float32x2_t *)v167.f32, 1), v172, v167, 2), v173, v167, 3);
  v75.super.isa = (Class)&off_250E2E000;
  v86 = objc_allocWithZone((Class)SimdFloat4x4Obj);
  p_align = (SEL *)&stru_250E5FFE8.align;
  v87 = objc_msgSend(v86, sel_initWithSimdFloat4x4_, *(double *)v169.i64, *(double *)v168.i64, *(double *)v166.i64, *(double *)v167.i64);
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  v174.value = value;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (value & 0x8000000000000000) != 0
    || (value & 0x4000000000000000) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(value);
  }
  if (!*(_QWORD *)((value & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_74;
  v89 = *(void **)((value & 0xFFFFFFFFFFFFFF8) + 0x20);
  *(_QWORD *)((value & 0xFFFFFFFFFFFFFF8) + 0x20) = v87;

  specialized Array._endMutation()();
  value = v174.value;
  if (!((unint64_t)v174.value >> 62))
  {
    if (*(uint64_t *)((v174.value & 0xFFFFFFFFFFFFF8) + 0x10) < 28)
      goto LABEL_40;
    goto LABEL_30;
  }
LABEL_75:
  swift_bridgeObjectRetain();
  v144 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v144 < 28)
    goto LABEL_40;
LABEL_30:
  if (*(_BYTE *)(v165 + 95) == 1)
  {
    if ((value & 0xC000000000000001) != 0)
    {
      v90 = (id)MEMORY[0x24263790C](27, value);
    }
    else
    {
      if (*(_QWORD *)((value & 0xFFFFFFFFFFFFF8) + 0x10) < 0x1CuLL)
      {
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v90 = *(id *)(value + 248);
    }
    v91 = v90;
    objc_msgSend(v90, sel_value, v145[0]);
    v168 = v93;
    v169 = v92;
    v166 = v95;
    v167 = v94;

    v169 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v169.f32[0]), v171, *(float32x2_t *)v169.f32, 1), v172, v169, 2), v173, v169, 3);
    v167 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v167.f32[0]), v171, *(float32x2_t *)v167.f32, 1), v172, v167, 2), v173, v167, 3);
    v166 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v166.f32[0]), v171, *(float32x2_t *)v166.f32, 1), v172, v166, 2), v173, v166, 3);
    v173 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v168.f32[0]), v171, *(float32x2_t *)v168.f32, 1), v172, v168, 2), v173, v168, 3);
    v96 = objc_allocWithZone(*((Class *)v75.super.isa + 121));
    v97 = objc_msgSend(v96, p_align[90], *(double *)v169.i64, *(double *)v167.i64, *(double *)v166.i64, *(double *)v173.i64);
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || (value & 0x8000000000000000) != 0
      || (value & 0x4000000000000000) != 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()(value);
    }
    if (*(_QWORD *)((value & 0xFFFFFFFFFFFFFF8) + 0x10) >= 0x1CuLL)
    {
      v98 = *(void **)((value & 0xFFFFFFFFFFFFFF8) + 0xF8);
      *(_QWORD *)((value & 0xFFFFFFFFFFFFFF8) + 0xF8) = v97;

      specialized Array._endMutation()();
      goto LABEL_40;
    }
    goto LABEL_79;
  }
LABEL_40:
  value = 0;
  v99 = *(_QWORD *)(v43 + 16);
  v100 = (uint64_t *)(v99 + 40);
  v101 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v102 = v174.value;
    if ((unint64_t)v174.value >> 62)
    {
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = *(_QWORD *)((v174.value & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v103 = value;
    if (v43 >= 28)
    {
      if (*(_BYTE *)(v165 + 95))
        v103 = value + 27;
      else
        v103 = value;
    }
    if ((v102 & 0xC000000000000001) != 0)
    {
      v104 = (id)MEMORY[0x24263790C](value, v102);
    }
    else
    {
      if (value >= *(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      v104 = *(id *)(v102 + 8 * value + 32);
    }
    v43 = (uint64_t)v104;
    objc_msgSend(v104, sel_value, v145[0]);
    v172 = v106;
    v173 = v105;
    v170 = v108;
    v171 = v107;

    if ((v102 & 0xC000000000000001) != 0)
    {
      v109 = (id)MEMORY[0x24263790C](v103, v102);
    }
    else
    {
      if (v103 >= *(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_70;
      v109 = *(id *)(v102 + 8 * v103 + 32);
    }
    v110 = v109;
    objc_msgSend(v109, sel_value);
    v168 = v112;
    v169 = v111;
    v166 = v114;
    v167 = v113;

    if (!v99)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v116 = 0;
      v115 = MEMORY[0x24BEE4B00];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_56;
LABEL_61:
      v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v101[2] + 1, 1, v101);
      goto LABEL_56;
    }
    if (value >= *(_QWORD *)(v99 + 16))
      goto LABEL_71;
    v115 = *v100;
    v116 = *(v100 - 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_61;
LABEL_56:
    v118 = v101[2];
    v117 = v101[3];
    if (v118 >= v117 >> 1)
      v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v117 > 1), v118 + 1, 1, v101);
    v101[2] = v118 + 1;
    v119 = (float32x4_t *)&v101[18 * v118];
    v119[2].i64[0] = v116;
    ++value;
    v119[2].i64[1] = v115;
    v120 = v172;
    v119[3] = v173;
    v119[4] = v120;
    v121 = v170;
    v119[5] = v171;
    v119[6] = v121;
    v122 = v168;
    v119[7] = v169;
    v119[8] = v122;
    v123 = v166;
    v119[9] = v167;
    v119[10] = v123;
    v100 += 18;
  }
  while (value != 27);
  v125 = *(void **)(v165 + 32);
  if (!v125)
    goto LABEL_81;
  v127 = *(_QWORD *)(MEMORY[0x24BDAEE00] + 48);
  v126 = *(_QWORD *)(MEMORY[0x24BDAEE00] + 56);
  v128 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 32);
  v172 = *(float32x4_t *)(MEMORY[0x24BDAEE00] + 16);
  v173 = v128;
  v171 = *(float32x4_t *)MEMORY[0x24BDAEE00];
  v129 = *(unsigned __int8 *)(v164 + 136);
  swift_bridgeObjectRetain();
  objc_msgSend(v125, sel_getWristAccuracy);
  v168 = v130;
  v169 = v131;
  v170 = v132;
  swift_bridgeObjectRelease();
  v133 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
  v134 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v168, v133), v133, v169), v133, v170), v133);
  v135 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).f32[0]);
  v136 = swift_bridgeObjectRetain();
  v137 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v136);
  swift_bridgeObjectRelease();
  type metadata accessor for HandsKitUtils();
  v138 = swift_bridgeObjectRetain();
  static HandsKitUtils.calculatePalmCenter(_:)(v138, &v176);
  swift_bridgeObjectRelease();
  v170 = v176;
  v139 = v177;
  v140 = 257;
  if (!v129)
    v140 = 1;
  v141 = v140 | ((unint64_t)LODWORD(v135) << 32);
  v142 = v145[0];
  outlined consume of HandPose?(*(_QWORD *)(v145[0] + 16));
  *(_QWORD *)(v142 + 16) = v101;
  *(_QWORD *)(v142 + 24) = v137;
  *(float32x4_t *)(v142 + 32) = v170;
  *(_OWORD *)(v142 + 48) = v139;
  v143 = v172;
  *(float32x4_t *)(v142 + 64) = v171;
  *(float32x4_t *)(v142 + 80) = v143;
  *(float32x4_t *)(v142 + 96) = v173;
  *(_QWORD *)(v142 + 112) = v127;
  *(_QWORD *)(v142 + 120) = v126;
  *(_QWORD *)(v142 + 128) = v141;
  outlined init with copy of HandDescriptor(v142, v160);
  swift_bridgeObjectRelease();
  outlined destroy of HandDescriptor(v142);
}

void MonoPoseDetectorModel.configureBoneScale(handsKitData:isLeft:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v8;
  Swift::OpaquePointer v9;
  void *v10;
  Swift::OpaquePointer v11;
  Swift::Bool v12;
  uint64_t v13;
  uint64_t v19;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(v2 + 72);
  v4 = MEMORY[0x24BEE0D00];
  if (*(_QWORD *)(v3 + 16) == 27)
  {
    swift_beginAccess();
    *(_QWORD *)(v2 + 80) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v32 = (Swift::String)xmmword_23D9A6CC0;
    v33 = 0;
    v34 = 0;
    v31 = v4;
    v29 = 0xD00000000000002BLL;
    v30 = 0x800000023D9DA2B0;
    v5 = MEMORY[0x24BEE4AF8];
    v6 = 403;
LABEL_5:
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9DA0E0, v6, &v32._countAndFlagsBits, (uint64_t)&v29, v5);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29);
    goto LABEL_16;
  }
  v8 = *(float *)(a1 + 84);
  v9._rawValue = *(void **)(a1 + 96);
  v10 = *(void **)(a1 + 112);
  if (MonoPoseDetectorModel.boneScaleFromReference(referenceHands:isLeft:)(*(Swift::OpaquePointer *)(a1 + 160), a2 & 1))
  {
    v32 = (Swift::String)xmmword_23D9A6CC0;
    v33 = 0;
    v34 = 0;
    v31 = v4;
    v29 = 0xD000000000000030;
    v30 = 0x800000023D9DA270;
    v5 = MEMORY[0x24BEE4AF8];
    v6 = 411;
    goto LABEL_5;
  }
  v32 = (Swift::String)xmmword_23D9A6CC0;
  v33 = 0;
  v34 = 0;
  v31 = v4;
  v29 = 0xD000000000000038;
  v30 = 0x800000023D9DA150;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9DA0E0, 413, &v32._countAndFlagsBits, (uint64_t)&v29, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29);
  if ((a2 & 1) == 0)
    v9._rawValue = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (*((_QWORD *)v9._rawValue + 2) == 27)
  {
    if (v8 <= 0.0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized MonoPoseDetectorModel.calcArvinoBoneLengths(handRadius:isLeft:)(a2 & 1, v8);
      v12 = MonoPoseDetectorModel.calcBoneScale(measuredBoneLengths:arvinoBoneLengths:)(v9, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
        v32 = (Swift::String)xmmword_23D9A6CC0;
        v33 = 0;
        v34 = 0;
        v31 = v4;
        v29 = 0xD000000000000031;
        v30 = 0x800000023D9DA230;
        specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9DA0E0, 428, &v32._countAndFlagsBits, (uint64_t)&v29, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29);
        goto LABEL_16;
      }
    }
    v32 = (Swift::String)xmmword_23D9A6CC0;
    v33 = 0;
    v34 = 0;
    v31 = v4;
    v29 = 0xD000000000000039;
    v30 = 0x800000023D9DA1F0;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9DA0E0, 430, &v32._countAndFlagsBits, (uint64_t)&v29, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v32 = (Swift::String)xmmword_23D9A6CC0;
  v33 = 0;
  v34 = 0;
  v31 = v4;
  v29 = 0xD000000000000039;
  v30 = 0x800000023D9DA190;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9DA0E0, 437, &v32._countAndFlagsBits, (uint64_t)&v29, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29);
  v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v13 + 16) = 27;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v13 + 32) = _Q0;
  *(_OWORD *)(v13 + 48) = _Q0;
  *(_OWORD *)(v13 + 64) = _Q0;
  *(_OWORD *)(v13 + 80) = _Q0;
  *(_OWORD *)(v13 + 96) = _Q0;
  *(_OWORD *)(v13 + 112) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v13 + 128) = _Q0;
  *(_DWORD *)(v13 + 136) = 1065353216;
  swift_beginAccess();
  *(_QWORD *)(v2 + 80) = v13;
  swift_bridgeObjectRelease();
LABEL_16:
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v19 = v2 + 80;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 80) + 16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  Float.write<A>(to:)();
  object = v32._object;
  countAndFlagsBits = v32._countAndFlagsBits;
  v28 = v32;
  v22 = *(_QWORD *)(*(_QWORD *)v19 + 16);
  v23 = v22 - 1;
  if (v22 == 1)
  {
LABEL_23:
    v32 = (Swift::String)xmmword_23D9A6CC0;
    v33 = 0;
    v34 = 0;
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v29 = 0xD000000000000015;
    v30 = 0x800000023D9DA1D0;
    v27._countAndFlagsBits = countAndFlagsBits;
    v27._object = object;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v31 = v4;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000065, 0x800000023D9DA0E0, 445, &v32._countAndFlagsBits, (uint64_t)&v29, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29);
    return;
  }
  if (v22)
  {
    v24 = 0;
    while (1)
    {
      v25 = v24 + 1;
      v32._countAndFlagsBits = 0;
      v32._object = (void *)0xE000000000000000;
      v26._countAndFlagsBits = 8236;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      if ((unint64_t)(v24 + 1) >= *(_QWORD *)(*(_QWORD *)v19 + 16))
        break;
      Float.write<A>(to:)();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      ++v24;
      if (v23 == v25)
      {
        object = v28._object;
        countAndFlagsBits = v28._countAndFlagsBits;
        v4 = MEMORY[0x24BEE0D00];
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_26:
  __break(1u);
}

Swift::Bool __swiftcall MonoPoseDetectorModel.boneScaleFromReference(referenceHands:isLeft:)(Swift::OpaquePointer referenceHands, Swift::Bool isLeft)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  Swift::OpaquePointer v23;
  Swift::Bool v24;
  _QWORD v26[6];
  Swift::OpaquePointer v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[14];
  __int16 v38;
  int rawValue;

  v5 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *((_QWORD *)referenceHands._rawValue + 2);
  if (!v10)
    return 0;
  v11 = (char *)referenceHands._rawValue
      + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v12 = *(_QWORD *)(v7 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of HandDescriptor((uint64_t)v11, (uint64_t)v9);
    if (v9[136] == isLeft)
      break;
    outlined destroy of HandDescriptor((uint64_t)v9);
    v11 += v12;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v9 + 2);
  if (!v13)
  {
    outlined destroy of HandDescriptor((uint64_t)v9);
    return 0;
  }
  v15 = *((_QWORD *)v9 + 3);
  v14 = *((_QWORD *)v9 + 4);
  v35 = v2;
  v36 = v14;
  v16 = *((_QWORD *)v9 + 5);
  v17 = *((_QWORD *)v9 + 6);
  v19 = *((_QWORD *)v9 + 7);
  v18 = *((_QWORD *)v9 + 8);
  v20 = *((_QWORD *)v9 + 9);
  v33 = *((_QWORD *)v9 + 10);
  v34 = v16;
  v32 = *((_QWORD *)v9 + 11);
  v31 = *((_QWORD *)v9 + 12);
  v30 = *((_QWORD *)v9 + 13);
  v29 = *((_QWORD *)v9 + 14);
  v21 = *((_QWORD *)v9 + 16);
  v28 = *((_QWORD *)v9 + 15);
  v27._rawValue = (void *)HIDWORD(v21);
  v22 = *(float *)v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of HandDescriptor((uint64_t)v9);
  if (v22 <= 0.0)
    v22 = *(float *)(v35 + 88);
  v37[0] = v13;
  v37[1] = v15;
  v26[1] = v15;
  v37[2] = v36;
  v37[3] = v34;
  v26[5] = v17;
  v37[4] = v17;
  v37[5] = v19;
  v26[4] = v19;
  v26[3] = v18;
  v37[6] = v18;
  v37[7] = v20;
  v26[2] = v20;
  v37[8] = v33;
  v37[9] = v32;
  v37[10] = v31;
  v37[11] = v30;
  v37[12] = v29;
  v37[13] = v28;
  v38 = v21 & 0x101;
  rawValue = (int)v27._rawValue;
  v27._rawValue = (void *)specialized static HandsKitUtils.calcBoneLengths(forPose:)((uint64_t)v37);
  outlined consume of HandPose?(v13);
  specialized MonoPoseDetectorModel.calcArvinoBoneLengths(handRadius:isLeft:)(isLeft, v22);
  v24 = MonoPoseDetectorModel.calcBoneScale(measuredBoneLengths:arvinoBoneLengths:)(v27, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v24;
}

Swift::Bool __swiftcall MonoPoseDetectorModel.calcBoneScale(measuredBoneLengths:arvinoBoneLengths:)(Swift::OpaquePointer measuredBoneLengths, Swift::OpaquePointer arvinoBoneLengths)
{
  uint64_t v2;
  char **v5;
  Swift::Bool result;
  unint64_t v7;
  unint64_t v8;
  float v9;
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  char *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  char *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v35;

  v5 = (char **)(v2 + 80);
  swift_beginAccess();
  *(_QWORD *)(v2 + 80) = MEMORY[0x24BEE4AF8];
  result = swift_bridgeObjectRelease();
  v35 = *((_QWORD *)measuredBoneLengths._rawValue + 2);
  if (v35 < 0xB)
    goto LABEL_32;
  if (v35 == 11)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v7 = *((_QWORD *)arvinoBoneLengths._rawValue + 2);
  if (v7 < 0xB)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v7 != 11)
  {
    v8 = 0;
    v9 = (float)(*((float *)measuredBoneLengths._rawValue + 18) + *((float *)measuredBoneLengths._rawValue + 19))
       / (float)(*((float *)arvinoBoneLengths._rawValue + 18) + *((float *)arvinoBoneLengths._rawValue + 19));
    while (1)
    {
      if (v8 <= 0x19)
      {
        if (((1 << v8) & 0x2108C23) != 0)
        {
          swift_beginAccess();
          v10 = *v5;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v5 = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
            *v5 = v10;
          }
          v13 = *((_QWORD *)v10 + 2);
          v12 = *((_QWORD *)v10 + 3);
          if (v13 >= v12 >> 1)
          {
            v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v10);
            *v5 = v10;
          }
          *((_QWORD *)v10 + 2) = v13 + 1;
          *(float *)&v10[4 * v13 + 32] = v9;
LABEL_7:
          result = swift_endAccess();
          goto LABEL_8;
        }
        if (v8 == 2)
        {
          v14 = *((float *)measuredBoneLengths._rawValue + 9);
          v15 = *((float *)measuredBoneLengths._rawValue + 10);
          v16 = *((float *)arvinoBoneLengths._rawValue + 9);
          v17 = *((float *)arvinoBoneLengths._rawValue + 10);
          swift_beginAccess();
          v18 = *v5;
          v19 = swift_isUniquelyReferenced_nonNull_native();
          *v5 = v18;
          if ((v19 & 1) == 0)
          {
            v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
            *v5 = v18;
          }
          v21 = *((_QWORD *)v18 + 2);
          v20 = *((_QWORD *)v18 + 3);
          if (v21 >= v20 >> 1)
          {
            v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v18);
            *v5 = v18;
          }
          *((_QWORD *)v18 + 2) = v21 + 1;
          *(float *)&v18[4 * v21 + 32] = (float)(v14 + v15) / (float)(v16 + v17);
          goto LABEL_7;
        }
      }
      if (v8 >= v35)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if (v8 >= v7)
        goto LABEL_31;
      v22 = *((float *)measuredBoneLengths._rawValue + v8 + 8);
      v23 = *((float *)arvinoBoneLengths._rawValue + v8 + 8);
      swift_beginAccess();
      v24 = *v5;
      v25 = swift_isUniquelyReferenced_nonNull_native();
      *v5 = v24;
      if ((v25 & 1) == 0)
      {
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
        *v5 = v24;
      }
      v27 = *((_QWORD *)v24 + 2);
      v26 = *((_QWORD *)v24 + 3);
      if (v27 >= v26 >> 1)
      {
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v24);
        *v5 = v24;
      }
      v28 = v22 / v23;
      *((_QWORD *)v24 + 2) = v27 + 1;
      *(float *)&v24[4 * v27 + 32] = v28;
      result = swift_endAccess();
      if ((~LODWORD(v28) & 0x7F800000) == 0)
      {
        v29 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v29 + 16) = 27;
        __asm { FMOV            V0.4S, #1.0 }
        *(_OWORD *)(v29 + 32) = _Q0;
        *(_OWORD *)(v29 + 48) = _Q0;
        *(_OWORD *)(v29 + 64) = _Q0;
        *(_OWORD *)(v29 + 80) = _Q0;
        *(_OWORD *)(v29 + 96) = _Q0;
        *(_OWORD *)(v29 + 112) = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)(v29 + 128) = _Q0;
        *(_DWORD *)(v29 + 136) = 1065353216;
        *v5 = (char *)v29;
        swift_bridgeObjectRelease();
        return 0;
      }
LABEL_8:
      if (++v8 == 27)
        return 1;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

void MonoPoseDetectorModel.calculateLocalizerMatrix(imageData:hand:handsKitData:)(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v3;
  simd_float4x4 *v5;
  char v6;
  simd_float4x4 v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  v5 = *(simd_float4x4 **)(a1 + 64);
  v8 = a3[13];
  v9 = a3[14];
  v10 = a3[15];
  v11 = a3[16];
  if (!*(_QWORD *)(*(_QWORD *)(a2 + *(int *)(type metadata accessor for HandDescriptor() + 92)) + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  if ((v6 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    return;
  }
  swift_beginAccess();
  v7 = v5[3];
  if (*(_BYTE *)(v3 + 67) == 1)
  {
    v7.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v7.columns[0].f32[0]), v9, *(float32x2_t *)v7.columns[0].f32, 1), v10, (float32x4_t)v7.columns[0], 2), v11, (float32x4_t)v7.columns[0], 3);
    v7.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v7.columns[1].f32[0]), v9, *(float32x2_t *)v7.columns[1].f32, 1), v10, (float32x4_t)v7.columns[1], 2), v11, (float32x4_t)v7.columns[1], 3);
    v7.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v7.columns[2].f32[0]), v9, *(float32x2_t *)v7.columns[2].f32, 1), v10, (float32x4_t)v7.columns[2], 2), v11, (float32x4_t)v7.columns[2], 3);
    v7.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v7.columns[3].f32[0]), v9, *(float32x2_t *)v7.columns[3].f32, 1), v10, (float32x4_t)v7.columns[3], 2), v11, (float32x4_t)v7.columns[3], 3);
  }
  __invert_f4(v7);
}

uint64_t MonoPoseDetectorModel.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MonoPoseDetectorModel()
{
  return objc_opt_self();
}

id @nonobjc MonoPoseEstimatorInput.init(pose:poseStdDev:wristRotation:wristRotationStdDev:boneScale:boneScaleStdDev:uvdJoints:uvdJointsStdDev:latents:debug1:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20)
{
  Class v20;
  Class v21;
  Class v22;
  Class v23;
  Class isa;
  Class v26;
  id v27;
  id v28;
  Class v31;
  Class v36;
  Class v37;
  Class v38;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v38 = Data._bridgeToObjectiveC()().super.isa;
  v37 = Data._bridgeToObjectiveC()().super.isa;
  v36 = Data._bridgeToObjectiveC()().super.isa;
  v20 = Data._bridgeToObjectiveC()().super.isa;
  v21 = Data._bridgeToObjectiveC()().super.isa;
  v26 = Data._bridgeToObjectiveC()().super.isa;
  v22 = Data._bridgeToObjectiveC()().super.isa;
  v23 = Data._bridgeToObjectiveC()().super.isa;
  v31 = Data._bridgeToObjectiveC()().super.isa;
  v28 = objc_msgSend(v27, sel_initWithPose_poseStdDev_wristRotation_wristRotationStdDev_boneScale_boneScaleStdDev_uvdJoints_uvdJointsStdDev_latents_debug1_, isa, v38, v37, v36, v20, v21, v26, v22, v23, v31);
  outlined consume of Data._Representation(a19, a20);
  outlined consume of Data._Representation(a17, a18);
  outlined consume of Data._Representation(a15, a16);
  outlined consume of Data._Representation(a13, a14);
  outlined consume of Data._Representation(a11, a12);
  outlined consume of Data._Representation(a9, a10);
  outlined consume of Data._Representation(a7, a8);
  outlined consume of Data._Representation(a5, a6);
  outlined consume of Data._Representation(a3, a4);
  outlined consume of Data._Representation(a1, a2);

  return v28;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands18MonoDnnOutputLayerOG_10Foundation4DataVSgsAE_pTg5010_s5Hands21e109PoseDetectorModelC05buildB14BranchFeatures33_63CDF624130E65C4B8CCE539A10CD8A0LL04withE6ParamsSay10Foundation4j20VSgGAA0beR0C_tKFAjA0qfgH7OKXEfU_AF0eO6ParamsCAF13E5RTRegressorCTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v18;
    v8 = (unsigned __int8 *)(a1 + 32);
    while (1)
    {
      v9 = *v8++;
      v16 = v9;
      closure #1 in MonoPoseDetectorModel.buildMonoBranchFeatures(withModelParams:)(&v16, a2, &v15, &v17);
      if (v3)
        break;
      v3 = 0;
      v10 = v17;
      v18 = v5;
      v12 = *(_QWORD *)(v5 + 16);
      v11 = *(_QWORD *)(v5 + 24);
      if (v12 >= v11 >> 1)
      {
        v14 = v17;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v10 = v14;
        v5 = v18;
      }
      *(_QWORD *)(v5 + 16) = v12 + 1;
      *(_OWORD *)(v5 + 16 * v12 + 32) = v10;
      if (!--v4)
        return v5;
    }
    swift_release();
  }
  return v5;
}

void specialized MonoPoseDetectorModel.setPoseCrops(forHand:withHandsKitData:withModelParams:withCameraSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  NSData v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  objc_class *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[32];

  v5 = v4;
  v8 = *(_QWORD *)a4;
  v9 = *(_BYTE *)(a4 + 8);
  Hands_trace_CBridge_0();
  v10 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for HandDescriptor() + 92));
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
  if ((v12 & 1) == 0)
    goto LABEL_4;
  v13 = (__int128 *)(*(_QWORD *)(v10 + 56) + 176 * v11);
  v15 = v13[1];
  v14 = v13[2];
  v30 = *v13;
  v31 = v15;
  v32 = v14;
  v16 = v13[3];
  v17 = v13[4];
  v18 = v13[6];
  v35 = v13[5];
  v36 = v18;
  v33 = v16;
  v34 = v17;
  v19 = v13[7];
  v20 = v13[8];
  v21 = v13[9];
  *(_OWORD *)&v39[9] = *(__int128 *)((char *)v13 + 153);
  v38 = v20;
  *(_OWORD *)v39 = v21;
  v37 = v19;
  if (*((_QWORD *)&v21 + 1) >> 60 == 15)
    goto LABEL_4;
  outlined retain of PoseImageCrop((uint64_t)&v30);
  v22.super.isa = Data._bridgeToObjectiveC()().super.isa;
  outlined release of PoseImageCrop((uint64_t)&v30);
  v23 = *(_QWORD *)(a3 + 56);
  if (*(_QWORD *)(v23 + 16))
  {
    swift_bridgeObjectRetain();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(17);
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
      swift_retain();
      swift_bridgeObjectRelease();
      v27 = objc_retainAutorelease(v22.super.isa);
      v28 = (char *)-[objc_class bytes](v27, sel_bytes, v30, v31, v32, v33, v34, v35, v36, v37, v38, *(_QWORD *)v39, *(_OWORD *)&v39[8], *(_QWORD *)&v39[24]);
      if (*(_QWORD *)(a3 + 120))
      {
        v29 = v28;
        swift_retain();
        E5RTRegressor.setNamedInput(_:fromRawPointer:)(v26, v29);
        if (v5)
        {

          swift_release();
          swift_release();
          return;
        }
        swift_release();
      }
      swift_release();

LABEL_4:
      Hands_trace_CBridge_0();
      return;
    }

    swift_bridgeObjectRelease();
  }
  else
  {

  }
}

void specialized MonoPoseDetectorModel.setInputs(forHand:withHandsKitData:withModelParams:withCameraSource:)(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[104];
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE v15[552];

  v13 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v13 - 8);
  v5 = *(_QWORD *)(v11 + 64);
  v7 = MEMORY[0x24BDAC7A8](v13, v6);
  v14 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7, v8);
  v12 = &v10[-v9];
  memcpy(v15, a2, sizeof(v15));
  __asm { BR              X10 }
}

void sub_23D91A164()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;

  swift_bridgeObjectRelease();
  memcpy((void *)(v0 + 144), v5, 0x228uLL);
  *(_QWORD *)(v0 + 736) = v3;
  *(_BYTE *)(v0 + 744) = v2;
  specialized MonoPoseDetectorModel.setPoseCrops(forHand:withHandsKitData:withModelParams:withCameraSource:)(v4, v0 + 144, v1, v0 + 736);
}

uint64_t specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  Swift::String v23;
  Swift::Int v24;
  uint64_t v25;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 64);
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD **)(*(_QWORD *)(v5 + 56) + 8 * v7);
  swift_retain();
  swift_bridgeObjectRelease();
  v10 = v9[2];
  v11 = (void *)v9[3];
  v13 = v9[4];
  v12 = v9[5];
  v14 = v9[6];
  if (v14 >= 1)
  {
    v15 = 32;
    if ((unint64_t)v14 >= 0x20)
      v14 = 32;
    if (v12)
      goto LABEL_7;
LABEL_19:
    swift_retain();
    v23._countAndFlagsBits = v10;
    v23._object = v11;
    v24 = E5RTRegressor.getOutputLength(_:)(v23);
    v4 = v25;
    if (v25)
      goto LABEL_20;
    v18 = v24;
    goto LABEL_10;
  }
  v15 = 1;
  v14 = 1;
  if (!v12)
    goto LABEL_19;
LABEL_7:
  v16 = __OFSUB__(v12, v13);
  v17 = v12 - v13;
  if (v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v18 = v17 * v14;
  if ((unsigned __int128)(v17 * (__int128)v14) >> 64 != (v17 * v14) >> 63)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_retain();
LABEL_10:
  if ((unint64_t)(v18 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_23;
  }
  v19 = E5RTRegressor.getRawOutput(_:)(v10, v11);
  if (v4)
  {
LABEL_20:
    swift_release();
    return swift_release();
  }
  v20 = v19;
  if (v19)
  {
    swift_release();
    swift_release();
    if ((unint64_t)(v13 - 0x2000000000000000) >> 62 == 3)
    {
      v21 = 4 * v13 * v15;
      if ((unsigned __int128)(4 * v13 * (__int128)v15) >> 64 == v21 >> 63)
        return v20 + v21;
      goto LABEL_26;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized MonoPoseDetectorModel.getOutputs(forHand:withModelParams:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE *v54;
  uint64_t result;
  uint64_t v56;
  char v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  id v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v3 = *(_QWORD *)(a2 + 120);
  if (!v3)
  {
    lazy protocol witness table accessor for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError();
    swift_allocError();
    *v54 = 3;
    return swift_willThrow();
  }
  swift_retain();
  v5 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(0, v3, a2);
  if (v2)
    return swift_release();
  v8 = v7;
  v9 = (v6 - v5) / 4;
  if (v5)
    v10 = v5;
  else
    v10 = 0;
  if (!v5)
    v9 = 0;
  if ((v7 & 1) != 0)
    v11 = 0;
  else
    v11 = v10;
  if ((v7 & 1) != 0)
    v12 = 0;
  else
    v12 = v9;
  v13 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(1, v3, a2);
  v15 = v14;
  v17 = (v16 - v13) / 4;
  if (v13)
    v18 = v13;
  else
    v18 = 0;
  if (!v13)
    v17 = 0;
  if ((v14 & 1) != 0)
    v18 = 0;
  v112 = v18;
  if ((v14 & 1) != 0)
    v19 = 0;
  else
    v19 = v17;
  v20 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(2, v3, a2);
  v22 = v21;
  v24 = (v23 - v20) / 4;
  if (v20)
    v25 = v20;
  else
    v25 = 0;
  if (!v20)
    v24 = 0;
  if ((v21 & 1) != 0)
  {
    v25 = 0;
    v24 = 0;
  }
  v108 = v24;
  v110 = v25;
  v26 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(3, v3, a2);
  v29 = (v28 - v26) / 4;
  if (v26)
    v30 = v26;
  else
    v30 = 0;
  if (!v26)
    v29 = 0;
  v106 = v27;
  if ((v27 & 1) != 0)
  {
    v30 = 0;
    v29 = 0;
  }
  v102 = v29;
  v104 = v30;
  v31 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(4, v3, a2);
  v34 = (v33 - v31) / 4;
  if (v31)
    v35 = v31;
  else
    v35 = 0;
  if (!v31)
    v34 = 0;
  v100 = v32;
  if ((v32 & 1) != 0)
  {
    v35 = 0;
    v34 = 0;
  }
  v96 = v34;
  v98 = v35;
  v36 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(5, v3, a2);
  v39 = (v38 - v36) / 4;
  if (v36)
    v40 = v36;
  else
    v40 = 0;
  if (!v36)
    v39 = 0;
  v94 = v37;
  if ((v37 & 1) != 0)
  {
    v40 = 0;
    v39 = 0;
  }
  v92 = v39;
  v93 = v40;
  v41 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(6, v3, a2);
  v44 = (v43 - v41) / 4;
  if (v41)
    v45 = v41;
  else
    v45 = 0;
  if (!v41)
    v44 = 0;
  v91 = v42;
  if ((v42 & 1) != 0)
  {
    v45 = 0;
    v44 = 0;
  }
  v89 = v44;
  v90 = v45;
  v46 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(7, v3, a2);
  v48 = 0;
  v88 = v49;
  v50 = 0;
  if ((v49 & 1) == 0 && v46)
  {
    v50 = (v47 - v46) / 4;
    v48 = v46;
  }
  v86 = v50;
  v87 = v48;
  v51 = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(10, v3, a2);
  v83 = v53;
  v84 = 0;
  if ((v53 & 1) != 0)
  {
    v85 = 0;
  }
  else
  {
    v85 = 0;
    if (v51)
    {
      v84 = v51;
      v85 = (v52 - v51) / 4;
    }
  }
  result = specialized static MonoPoseDetectorModel.getEspressoOutputAsBuffer(_:_:_:)(11, v3, a2);
  v58 = v57;
  v82 = 0;
  if ((v57 & 1) != 0)
  {
    v81 = 0;
  }
  else
  {
    v81 = 0;
    if (result)
    {
      v81 = (v56 - result) / 4;
      v82 = result;
    }
  }
  if ((v8 & 1) != 0)
  {
    __break(1u);
    goto LABEL_85;
  }
  result = specialized Data.init<A>(buffer:)(v11, v12);
  v79 = v59;
  v80 = result;
  if ((v15 & 1) != 0)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  result = specialized Data.init<A>(buffer:)(v112, v19);
  v113 = result;
  v78 = v60;
  if ((v22 & 1) != 0)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  result = specialized Data.init<A>(buffer:)(v110, v108);
  v109 = v61;
  v111 = result;
  if ((v106 & 1) != 0)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  result = specialized Data.init<A>(buffer:)(v104, v102);
  v105 = v62;
  v107 = result;
  if ((v100 & 1) != 0)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  result = specialized Data.init<A>(buffer:)(v98, v96);
  v101 = v63;
  v103 = result;
  if ((v94 & 1) != 0)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  result = specialized Data.init<A>(buffer:)(v93, v92);
  v97 = v64;
  v99 = result;
  if ((v91 & 1) != 0)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  result = specialized Data.init<A>(buffer:)(v90, v89);
  v95 = result;
  if ((v88 & 1) != 0)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v66 = v65;
  result = specialized Data.init<A>(buffer:)(v87, v86);
  if ((v83 & 1) != 0)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v68 = result;
  v69 = v67;
  result = specialized Data.init<A>(buffer:)(v84, v85);
  if ((v58 & 1) == 0)
  {
    v71 = result;
    v72 = v70;
    v73 = specialized Data.init<A>(buffer:)(v82, v81);
    v75 = v74;
    v76 = objc_allocWithZone((Class)MonoPoseEstimatorInput);
    v77 = @nonobjc MonoPoseEstimatorInput.init(pose:poseStdDev:wristRotation:wristRotationStdDev:boneScale:boneScaleStdDev:uvdJoints:uvdJointsStdDev:latents:debug1:)(v80, v79, v113, v78, v111, v109, v107, v105, v103, v101, v99, v97, v95, v66, v68, v69, v71, v72, v73,
            v75);
    swift_release();
    return (uint64_t)v77;
  }
LABEL_93:
  __break(1u);
  return result;
}

uint64_t specialized MonoPoseDetectorModel.buildMonoBranchFeatures(withModelParams:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 120))
  {
    swift_retain();
    swift_retain();
    v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands18MonoDnnOutputLayerOG_10Foundation4DataVSgsAE_pTg5010_s5Hands21e109PoseDetectorModelC05buildB14BranchFeatures33_63CDF624130E65C4B8CCE539A10CD8A004withE6ParamsSay10Foundation4j20VSgGAA0beR0C_tKFAjA0qfgH7OKXEfU_AF0eO6ParamsCAF13E5RTRegressorCTf1cn_nTf4ngg_n((uint64_t)&outlined read-only object #0 of MonoPoseDetectorModel.buildMonoBranchFeatures(withModelParams:), a1);
    if (v2)
    {
      swift_release();
      swift_release();
    }
    else
    {
      v1 = v4;
      swift_release();
      v7 = *(_QWORD *)(v1 + 16);
      if (v7)
      {
        v8 = 40;
        while (*(_QWORD *)(v1 + v8) >> 60 != 15)
        {
          v8 += 16;
          if (!--v7)
            goto LABEL_10;
        }
        swift_release();
        swift_bridgeObjectRelease();
        return MEMORY[0x24BEE4AF8];
      }
      else
      {
LABEL_10:
        swift_release();
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError();
    swift_allocError();
    *v5 = 3;
    swift_willThrow();
  }
  return v1;
}

void specialized MonoPoseDetectorModel.calcArvinoBoneLengths(handRadius:isLeft:)(char a1, float a2)
{
  float v3;
  void *v4;
  double v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  char v52;
  int v53;

  v3 = a2 / 0.12645;
  v4 = (void *)objc_opt_self();
  *(float *)&v5 = v3;
  v6 = objc_msgSend(v4, sel_defaultTransformsWithHandScale_isLeft_, a1 & 1, v5);
  type metadata accessor for NSDictionary(0, &lazy cache variable for type metadata for SimdFloat4x4Obj);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0 || *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= 0x1BuLL)
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v10 = 4;
    v11 = MEMORY[0x24BEE4B00];
    do
    {
      if (v8)
        v12 = (id)MEMORY[0x24263790C](v10 - 4, v7);
      else
        v12 = *(id *)(v7 + 8 * v10);
      v13 = v12;
      objc_msgSend(v12, sel_value, v32, v33, v34, v35);
      v40 = v15;
      v42 = v14;
      v36 = v17;
      v38 = v16;

      if (v8)
        v18 = (id)MEMORY[0x24263790C](v10 - 4, v7);
      else
        v18 = *(id *)(v7 + 8 * v10);
      v19 = v18;
      objc_msgSend(v18, sel_value);
      v34 = v21;
      v35 = v20;
      v32 = v23;
      v33 = v22;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v25 = v9[2];
      v24 = v9[3];
      if (v25 >= v24 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v9);
      v9[2] = v25 + 1;
      v26 = &v9[18 * v25];
      v26[4] = 0;
      v26[5] = v11;
      *((_OWORD *)v26 + 3) = v42;
      *((_OWORD *)v26 + 4) = v40;
      *((_OWORD *)v26 + 5) = v38;
      *((_OWORD *)v26 + 6) = v36;
      *((_OWORD *)v26 + 7) = v35;
      *((_OWORD *)v26 + 8) = v34;
      *((_OWORD *)v26 + 9) = v33;
      *((_OWORD *)v26 + 10) = v32;
      ++v10;
    }
    while (v10 != 31);
    swift_bridgeObjectRelease();
    v41 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v43 = *MEMORY[0x24BDAEE00];
    v37 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v39 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v27 = swift_bridgeObjectRetain();
    v28 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v27);
    swift_bridgeObjectRelease();
    type metadata accessor for HandsKitUtils();
    v29 = swift_bridgeObjectRetain();
    static HandsKitUtils.calculatePalmCenter(_:)(v29, &v44);
    swift_bridgeObjectRelease();
    v30 = v44;
    v31 = v45;
    *(_QWORD *)&v44 = v9;
    *((_QWORD *)&v44 + 1) = v28;
    v45 = v30;
    v46 = v31;
    v47 = v43;
    v48 = v41;
    v49 = v39;
    v50 = v37;
    v51 = 1;
    v52 = a1 & 1;
    v53 = 0;
    specialized static HandsKitUtils.calcBoneLengths(forPose:)((uint64_t)&v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError;
  if (!lazy protocol witness table cache variable for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MonoPoseDetectorModelError, &type metadata for MonoPoseDetectorModelError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError;
  if (!lazy protocol witness table cache variable for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MonoPoseDetectorModelError, &type metadata for MonoPoseDetectorModelError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MonoPoseDetectorModelError and conformance MonoPoseDetectorModelError);
  }
  return result;
}

uint64_t sub_23D91B1CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40) >= 0x1AuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 96) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D91B284()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t specialized MonoPoseDetectorModel.init(options:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v2;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_BYTE *)(v1 + 64) = 1;
  *(_WORD *)(v1 + 65) = 256;
  *(_BYTE *)(v1 + 67) = 0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 72) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 80) = v3;
  *(_DWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 91) = 0;
  *(_WORD *)(v1 + 95) = 257;
  MonoPoseDetectorModel.reconfig(_:)(a1);
  return v1;
}

uint64_t storeEnumTagSinglePayload for MonoPoseDetectorModelError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23D91B354 + 4 * byte_23D9C0345[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23D91B388 + 4 * byte_23D9C0340[v4]))();
}

uint64_t sub_23D91B388(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D91B390(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D91B398);
  return result;
}

uint64_t sub_23D91B3A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D91B3ACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23D91B3B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D91B3B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MonoPoseDetectorModelError()
{
  return &type metadata for MonoPoseDetectorModelError;
}

Swift::Void __swiftcall PinchCancellationProcessing.reconfig(_:)(HandsKitConfig *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  HandsKitConfig *v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  HandsKitConfig *v9;
  uint64_t v10;
  uint64_t v11;
  HandsKitConfig *v12;
  uint64_t v13;

  v2 = v1;
  type metadata accessor for PinchSuppression();
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 26) = 2;
  *(_BYTE *)(v4 + 16) = 0;
  v5 = a1;
  -[HandsKitConfig PinchScoreSuppressionThreshold](v5, sel_PinchScoreSuppressionThreshold);
  v7 = v6;
  LOBYTE(a1) = -[HandsKitConfig UsePinchSuppressionAfterCancellation](v5, sel_UsePinchSuppressionAfterCancellation);
  v8 = -[HandsKitConfig UsePinchSuppressionAfterScrollBreak](v5, sel_UsePinchSuppressionAfterScrollBreak);
  *(_DWORD *)(v4 + 20) = v7;
  *(_BYTE *)(v4 + 24) = (_BYTE)a1;
  *(_BYTE *)(v4 + 25) = v8;
  LOBYTE(a1) = -[HandsKitConfig SerializeInternalData](v5, sel_SerializeInternalData);

  *(_BYTE *)(v4 + 26) = (_BYTE)a1;
  v2[4] = v4;
  swift_release();
  if (-[HandsKitConfig EnablePinchBreak](v5, sel_EnablePinchBreak))
  {
    type metadata accessor for ScrollBreak();
    swift_allocObject();
    v9 = v5;
    specialized ScrollBreak.init(_:)(v9);
    v11 = v10;

    v2[3] = v11;
  }
  else
  {
    v2[3] = 0;
  }
  swift_release();
  if (-[HandsKitConfig EnablePinchCancellation](v5, sel_EnablePinchCancellation))
  {
    if (v2[2])
    {
      swift_retain();
      PinchCancellation.reconfig(_:)(v5);
    }
    else
    {
      type metadata accessor for PinchCancellation();
      swift_allocObject();
      v12 = v5;
      v13 = specialized PinchCancellation.init(_:)(v12);

      v2[2] = v13;
    }
  }
  else
  {
    v2[2] = 0;
  }
  swift_release();
}

uint64_t PinchCancellationProcessing.process(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, const void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  int v29;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[22];

  v7 = v6;
  v36 = a2;
  v37 = a4;
  v12 = type metadata accessor for HandPinchEvent(0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hands_trace_CBridge_1();
  if (!*(_QWORD *)(v7 + 16) && !*(_QWORD *)(v7 + 24))
    return outlined init with copy of TrackingUpdateDataPB(a1, a6, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v38 = a6;
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  memcpy(v45, a5, 0x151uLL);
  PinchSuppression.process(_:_:)((uint64_t)v19, (uint64_t)v45);
  if (*(_QWORD *)(v7 + 16))
  {
    memcpy(v45, a5, 0x151uLL);
    swift_retain();
    PinchCancellation.process(_:_:)(v19, v45);
    swift_release();
  }
  v35 = HIDWORD(a3);
  if (*(_QWORD *)(v7 + 24))
  {
    memcpy(v45, a5, 0x151uLL);
    swift_retain();
    ScrollBreak.process(_:_:)((uint64_t)v19, (uint64_t)v45);
    swift_release();
  }
  v20 = a3;
  if (v19[137] == 1)
  {
    v21 = v36;
    v22 = v20;
    v23 = v20;
    v24 = v37;
    static HandPinchEvent.generatePinchCancellationEvent(hand:timestamp:)((uint64_t)v19, v36, v23, (uint64_t)v15);
    v45[0] = xmmword_23D9AB690;
    v45[1] = 0uLL;
    v44 = v12;
    v25 = __swift_allocate_boxed_opaque_existential_0(&v41);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v15, (uint64_t)v25, type metadata accessor for HandPinchEvent);
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000099, 0x800000023D9DA390, 80, (uint64_t *)v45, (uint64_t)&v41, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v41);
    v45[0] = xmmword_23D9A9560;
    v45[1] = 0uLL;
    v41 = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v39 = v41;
    v40 = v42;
    v26._countAndFlagsBits = 0xD00000000000003DLL;
    v26._object = (void *)0x800000023D9DA470;
    String.append(_:)(v26);
    v27._countAndFlagsBits = specialized static PinchGestureHelper.getCancellationReasonDescription(_:)(*(_QWORD *)&v19[*(int *)(v16 + 108)], v19[*(int *)(v16 + 108) + 8]);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 8236;
    v28._object = (void *)0xE200000000000000;
    String.append(_:)(v28);
    v41 = v21;
    v42 = __PAIR64__(v35, v22);
    v43 = v24;
    type metadata accessor for CMTime(0);
    _print_unlocked<A, B>(_:_:)();
    v44 = MEMORY[0x24BEE0D00];
    v41 = v39;
    v42 = v40;
    specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000099, 0x800000023D9DA390, 81, (uint64_t *)v45, (uint64_t)&v41, MEMORY[0x24BEE4AF8]);
    outlined destroy of HandPinchEvent((uint64_t)v15);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 4) & 1) == 0)
      goto LABEL_15;
    v29 = v19[4];
    if (v29 == 2 || (v29 & 1) != 0)
      goto LABEL_15;
    v45[0] = xmmword_23D9A9560;
    v45[1] = 0uLL;
    v41 = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v39 = v41;
    v40 = v42;
    v32._countAndFlagsBits = 0xD000000000000035;
    v32._object = (void *)0x800000023D9DA430;
    String.append(_:)(v32);
    v33._countAndFlagsBits = specialized static PinchGestureHelper.getCancellationReasonDescription(_:)(*(_QWORD *)&v19[*(int *)(v16 + 108)], v19[*(int *)(v16 + 108) + 8]);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 8236;
    v34._object = (void *)0xE200000000000000;
    String.append(_:)(v34);
    v41 = v36;
    v42 = __PAIR64__(v35, a3);
    v43 = v37;
    type metadata accessor for CMTime(0);
    _print_unlocked<A, B>(_:_:)();
    v44 = MEMORY[0x24BEE0D00];
    v41 = v39;
    v42 = v40;
    specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000099, 0x800000023D9DA390, 83, (uint64_t *)v45, (uint64_t)&v41, MEMORY[0x24BEE4AF8]);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v41);
LABEL_15:
  Hands_trace_CBridge_1();
  return outlined init with take of HandDescriptor((uint64_t)v19, v38);
}

uint64_t PinchCancellationProcessing.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchCancellationProcessing()
{
  return objc_opt_self();
}

uint64_t specialized PinchCancellationProcessing.init(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  HandsKitConfig *v11;
  uint64_t v12;
  HandsKitConfig *v13;
  uint64_t v14;

  v2 = v1;
  type metadata accessor for PinchSuppression();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  v4 = (uint64_t *)(v1 + 16);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 26) = 2;
  *(_BYTE *)(v5 + 16) = 0;
  -[HandsKitConfig PinchScoreSuppressionThreshold](a1, sel_PinchScoreSuppressionThreshold);
  v7 = v6;
  v8 = -[HandsKitConfig UsePinchSuppressionAfterCancellation](a1, sel_UsePinchSuppressionAfterCancellation);
  v9 = -[HandsKitConfig UsePinchSuppressionAfterScrollBreak](a1, sel_UsePinchSuppressionAfterScrollBreak);
  *(_DWORD *)(v5 + 20) = v7;
  *(_BYTE *)(v5 + 24) = v8;
  *(_BYTE *)(v5 + 25) = v9;
  *(_BYTE *)(v5 + 26) = -[HandsKitConfig SerializeInternalData](a1, sel_SerializeInternalData);
  v4[2] = v5;
  v10 = 0;
  if (-[HandsKitConfig EnablePinchBreak](a1, sel_EnablePinchBreak))
  {
    type metadata accessor for ScrollBreak();
    swift_allocObject();
    v11 = a1;
    specialized ScrollBreak.init(_:)(v11);
    v10 = v12;

  }
  *(_QWORD *)(v2 + 24) = v10;
  swift_release();
  if (-[HandsKitConfig EnablePinchCancellation](a1, sel_EnablePinchCancellation))
  {
    if (*(_QWORD *)(v2 + 16))
    {
      swift_retain();
      PinchCancellation.reconfig(_:)(a1);
    }
    else
    {
      type metadata accessor for PinchCancellation();
      swift_allocObject();
      v13 = a1;
      v14 = specialized PinchCancellation.init(_:)(v13);

      *v4 = v14;
    }
  }
  else
  {
    *v4 = 0;
  }
  swift_release();
  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandEventCommon.EventStatus()
{
  lazy protocol witness table accessor for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance HandEventCommon.EventStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static HandEventCommon.EventStatus.allCases, a1);
}

void protocol witness for Enum.init(rawValue:) in conformance HandPinchEvent.PinchSource(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized HandPinchEvent.PinchSource.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance HandPinchEvent.PinchSource(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized HandPinchEvent.PinchSource.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandPinchEvent.PinchSource()
{
  lazy protocol witness table accessor for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance HandPinchEvent.PinchSource@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static HandPinchEvent.PinchSource.allCases, a1);
}

uint64_t HandEventCommon.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          closure #2 in HandEventCommon.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in HandEventCommon.decodeMessage<A>(decoder:)()
{
  type metadata accessor for HandEventCommon(0);
  type metadata accessor for CMTimeProtobuf(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t HandEventCommon.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)v3
    || (lazy protocol witness table accessor for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    result = closure #1 in HandEventCommon.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (!v4)
    {
      if (*(_QWORD *)(v3 + 16))
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
      if (*(_BYTE *)(v3 + 24) == 1)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      type metadata accessor for HandEventCommon(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in HandEventCommon.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HandEventCommon(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t protocol witness for Message.init() in conformance HandEventCommon@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for CMTimeProtobuf(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance HandEventCommon()
{
  return 0x6E657645646E6148;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandEventCommon()
{
  return HandEventCommon.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandEventCommon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandEventCommon.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandEventCommon()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandEventCommon@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandEventCommon._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandEventCommon()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandEventCommon()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  return Message.hash(into:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandEventCommon.EventStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandEventCommon.EventStatus._protobuf_nameMap, a1);
}

uint64_t HandTrackingEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in HandTrackingEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for HandTrackingEvent, (void (*)(void))lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason);
      }
      else if (result == 1)
      {
        closure #1 in HandTrackingEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for HandTrackingEvent);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t HandTrackingEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in HandTrackingEvent.traverse<A>(visitor:)(v3, a1, a2, a3, (uint64_t (*)(_QWORD, __n128))type metadata accessor for HandTrackingEvent);
  if (!v4)
  {
    closure #2 in HandTrackingEvent.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for HandTrackingEvent, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance HandTrackingEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for HandEventCommon(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a2 + *(int *)(a1 + 24);
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandTrackingEvent()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandTrackingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandTrackingEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandTrackingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandTrackingEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandTrackingEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandTrackingEvent and conformance HandTrackingEvent, type metadata accessor for HandTrackingEvent, (uint64_t)&protocol conformance descriptor for HandTrackingEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandTrackingEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandTrackingEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandTrackingEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandTrackingEvent and conformance HandTrackingEvent, type metadata accessor for HandTrackingEvent, (uint64_t)&protocol conformance descriptor for HandTrackingEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandTrackingEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandTrackingEvent and conformance HandTrackingEvent, type metadata accessor for HandTrackingEvent, (uint64_t)&protocol conformance descriptor for HandTrackingEvent);
  return Message.hash(into:)();
}

uint64_t HandFilteringEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in HandTrackingEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for HandFilteringEvent);
          break;
        case 2:
          closure #2 in HandTrackingEvent.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for HandFilteringEvent, (void (*)(void))lazy protocol witness table accessor for type HandFilteredOutReason and conformance HandFilteredOutReason);
          break;
        case 3:
          closure #2 in HandPosePB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for HandFilteringEvent, type metadata accessor for OperationalEnvelopeSignalsPB, (unint64_t *)&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
          break;
        case 4:
          closure #4 in HandFilteringEvent.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in HandTrackingEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  type metadata accessor for HandEventCommon(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in HandTrackingEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), void (*a6)(void))
{
  a5(0);
  a6();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #4 in HandFilteringEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for HandFilteringEvent(0);
  lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t HandFilteringEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in HandTrackingEvent.traverse<A>(visitor:)(v3, a1, a2, a3, (uint64_t (*)(_QWORD, __n128))type metadata accessor for HandFilteringEvent);
  if (!v4)
  {
    closure #2 in HandTrackingEvent.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for HandFilteringEvent, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type HandFilteredOutReason and conformance HandFilteredOutReason);
    closure #3 in HandFilteringEvent.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #4 in HandFilteringEvent.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in HandTrackingEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, __n128))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[4];

  v19[3] = a4;
  v19[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HandEventCommon(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a5(0, v14);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v17 + 20), (uint64_t)v10, &demangling cache variable for type metadata for HandEventCommon?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with take of Matrix2dPB((uint64_t)v10, (uint64_t)v16, type metadata accessor for HandEventCommon);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for HandEventCommon);
}

uint64_t closure #2 in HandTrackingEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 9) & 1) == 0)
  {
    a6(result, v9);
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #3 in HandFilteringEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HandFilteringEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for OperationalEnvelopeSignalsPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type OperationalEnvelopeSignalsPB and conformance OperationalEnvelopeSignalsPB, type metadata accessor for OperationalEnvelopeSignalsPB, (uint64_t)&protocol conformance descriptor for OperationalEnvelopeSignalsPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for OperationalEnvelopeSignalsPB);
}

uint64_t closure #4 in HandFilteringEvent.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for HandFilteringEvent(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance HandFilteringEvent@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for HandEventCommon(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1[7];
  v7 = a2 + a1[6];
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  v8 = a2 + v6;
  v9 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v11 = a2 + a1[8];
  *(_QWORD *)v11 = 0;
  *(_WORD *)(v11 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandFilteringEvent()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandFilteringEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandFilteringEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandFilteringEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandFilteringEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandFilteringEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandFilteringEvent and conformance HandFilteringEvent, type metadata accessor for HandFilteringEvent, (uint64_t)&protocol conformance descriptor for HandFilteringEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandFilteringEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandFilteringEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandFilteringEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandFilteringEvent and conformance HandFilteringEvent, type metadata accessor for HandFilteringEvent, (uint64_t)&protocol conformance descriptor for HandFilteringEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandFilteringEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandFilteringEvent and conformance HandFilteringEvent, type metadata accessor for HandFilteringEvent, (uint64_t)&protocol conformance descriptor for HandFilteringEvent);
  return Message.hash(into:)();
}

uint64_t HandCameraTransitionEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        closure #2 in HandPosePB.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for HandCameraTransitionEvent, type metadata accessor for HandEventCommon, &lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t HandCameraTransitionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in HandCameraTransitionEvent.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*v3 + 16))
    {
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(v3[1] + 16))
    {
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
    }
    type metadata accessor for HandCameraTransitionEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in HandCameraTransitionEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandEventCommon(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HandCameraTransitionEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for HandEventCommon?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandEventCommon);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandEventCommon);
}

uint64_t protocol witness for Message.init() in conformance HandCameraTransitionEvent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 28);
  v6 = type metadata accessor for HandEventCommon(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandCameraTransitionEvent()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandCameraTransitionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandCameraTransitionEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandCameraTransitionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandCameraTransitionEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandCameraTransitionEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCameraTransitionEvent and conformance HandCameraTransitionEvent, type metadata accessor for HandCameraTransitionEvent, (uint64_t)&protocol conformance descriptor for HandCameraTransitionEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandCameraTransitionEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandCameraTransitionEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandCameraTransitionEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCameraTransitionEvent and conformance HandCameraTransitionEvent, type metadata accessor for HandCameraTransitionEvent, (uint64_t)&protocol conformance descriptor for HandCameraTransitionEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandCameraTransitionEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCameraTransitionEvent and conformance HandCameraTransitionEvent, type metadata accessor for HandCameraTransitionEvent, (uint64_t)&protocol conformance descriptor for HandCameraTransitionEvent);
  return Message.hash(into:)();
}

uint64_t HandPinchEvent._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  v2 = type metadata accessor for HandEventCommon(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown) = 0;
  v3 = v0 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__signal;
  *(_QWORD *)v3 = 0;
  *(_WORD *)(v3 + 8) = 256;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMin) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax) = v4;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__uncertainty) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance) = 0;
  v5 = v0 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v0 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__intentionScore;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate;
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  v8 = v0 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID;
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  v9 = v0 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason;
  *(_QWORD *)v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  return v0;
}

uint64_t HandPinchEvent._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo, &demangling cache variable for type metadata for HandEventCommon?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandPinchEvent._StorageClass()
{
  return type metadata accessor for HandPinchEvent._StorageClass(0);
}

uint64_t type metadata accessor for HandPinchEvent._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandPinchEvent._StorageClass);
}

void type metadata completion function for HandPinchEvent._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandEventCommon?, (void (*)(uint64_t))type metadata accessor for HandEventCommon);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for HandEventCommon(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandEventCommon);
}

uint64_t *initializeBufferWithCopyOfBuffer for HandCursorEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(uint64_t *)((char *)a1 + 4) = *(uint64_t *)((char *)a2 + 4);
    a1[2] = a2[2];
    v7 = *(int *)(a3 + 32);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 36);
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for HandEventCommon(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
      v13[2] = v14[2];
      *((_BYTE *)v13 + 24) = *((_BYTE *)v14 + 24);
      v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
      v19 = *(int *)(v15 + 32);
      v20 = (_DWORD *)((char *)v13 + v19);
      v21 = (_DWORD *)((char *)v14 + v19);
      v22 = type metadata accessor for CMTimeProtobuf(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v20 = *(_QWORD *)v21;
        v20[2] = v21[2];
        v11((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v10);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for HandCursorEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 36);
  v7 = type metadata accessor for HandEventCommon(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v11(v6 + *(int *)(v7 + 28), v5);
    v9 = v6 + *(int *)(v7 + 32);
    v10 = type metadata accessor for CMTimeProtobuf(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 24), v5);
  }
  return result;
}

uint64_t initializeWithCopy for HandCursorEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 32);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 36);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for HandEventCommon(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    v17 = *(int *)(v14 + 32);
    v18 = (_DWORD *)((char *)v12 + v17);
    v19 = (_DWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for CMTimeProtobuf(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for HandCursorEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  int v38;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = type metadata accessor for HandEventCommon(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *v14;
      *(_BYTE *)(v13 + 8) = *((_BYTE *)v14 + 8);
      *(_QWORD *)v13 = v30;
      *(_QWORD *)(v13 + 16) = v14[2];
      *(_BYTE *)(v13 + 24) = *((_BYTE *)v14 + 24);
      v11(v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v9);
      v31 = *(int *)(v15 + 32);
      v32 = v13 + v31;
      v33 = (char *)v14 + v31;
      v34 = type metadata accessor for CMTimeProtobuf(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, v34);
      v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *(_DWORD *)(v32 + 8) = *((_DWORD *)v33 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v32 + *(int *)(v34 + 24), &v33[*(int *)(v34 + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *(_DWORD *)(v32 + 8) = *((_DWORD *)v33 + 2);
          v11(v32 + *(int *)(v34 + 24), (uint64_t)&v33[*(int *)(v34 + 24)], v9);
          return a1;
        }
        outlined destroy of Matrix3x3PB(v32, type metadata accessor for CMTimeProtobuf);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v28 = (void *)v32;
      v29 = v33;
      goto LABEL_8;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for HandEventCommon);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = (char *)v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *v14;
  *(_BYTE *)(v13 + 8) = *((_BYTE *)v14 + 8);
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = v14[2];
  *(_BYTE *)(v13 + 24) = *((_BYTE *)v14 + 24);
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  v20(v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v9);
  v21 = *(int *)(v15 + 32);
  v22 = (_DWORD *)(v13 + v21);
  v23 = (_DWORD *)((char *)v14 + v21);
  v24 = type metadata accessor for CMTimeProtobuf(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[2] = v23[2];
    v20((uint64_t)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for HandCursorEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 32);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 36);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for HandEventCommon(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    v17 = *(int *)(v14 + 32);
    v18 = (_DWORD *)((char *)v12 + v17);
    v19 = (_DWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for CMTimeProtobuf(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for HandCursorEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for HandEventCommon(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_BYTE *)(v13 + 24) = *(_BYTE *)(v14 + 24);
      v11(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v9);
      v29 = *(int *)(v15 + 32);
      v30 = v13 + v29;
      v31 = (char *)(v14 + v29);
      v32 = type metadata accessor for CMTimeProtobuf(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *(_DWORD *)(v30 + 8) = *((_DWORD *)v31 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v30 + *(int *)(v32 + 24), &v31[*(int *)(v32 + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *(_DWORD *)(v30 + 8) = *((_DWORD *)v31 + 2);
          v11(v30 + *(int *)(v32 + 24), (uint64_t)&v31[*(int *)(v32 + 24)], v9);
          return a1;
        }
        outlined destroy of Matrix3x3PB(v30, type metadata accessor for CMTimeProtobuf);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v27 = (void *)v30;
      v28 = v31;
      goto LABEL_8;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for HandEventCommon);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?)
                                - 8)
                    + 64);
    v27 = (void *)v13;
    v28 = (char *)v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_BYTE *)(v13 + 24) = *(_BYTE *)(v14 + 24);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v19(v13 + *(int *)(v15 + 28), v14 + *(int *)(v15 + 28), v9);
  v20 = *(int *)(v15 + 32);
  v21 = (_DWORD *)(v13 + v20);
  v22 = (_DWORD *)(v14 + v20);
  v23 = type metadata accessor for CMTimeProtobuf(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[2] = v22[2];
    v19((uint64_t)v21 + *(int *)(v23 + 24), (uint64_t)v22 + *(int *)(v23 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandCursorEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D91F110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandCursorEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D91F1C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for HandCursorEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandCursorEvent);
}

void type metadata completion function for HandCursorEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandEventCommon?, (void (*)(uint64_t))type metadata accessor for HandEventCommon);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for HandPinchEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D91F33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for HandPinchEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D91F3C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for HandPinchEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandPinchEvent);
}

ValueMetadata *type metadata accessor for HandPinchEvent.PinchSource()
{
  return &type metadata for HandPinchEvent.PinchSource;
}

_QWORD *initializeBufferWithCopyOfBuffer for HandEventCommon(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = *(int *)(a3 + 28);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 32);
    v13 = (_DWORD *)((char *)v4 + v12);
    v14 = (_DWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for CMTimeProtobuf(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t initializeWithCopy for HandEventCommon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for HandEventCommon(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_DWORD *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 32);
  v14 = (_DWORD *)(a1 + v13);
  v15 = (_DWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for CMTimeProtobuf(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[2] = v15[2];
      v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v10);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for CMTimeProtobuf);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[2] = v15[2];
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v10);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for HandEventCommon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for CMTimeProtobuf(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for HandEventCommon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_DWORD *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 32);
  v13 = (_DWORD *)(a1 + v12);
  v14 = (_DWORD *)(a2 + v12);
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[2] = v14[2];
      v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v9);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[2] = v14[2];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v9);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandEventCommon()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D91FB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 24);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 28);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for HandEventCommon()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D91FBBC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 24) = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for HandEventCommon()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t lazy protocol witness table accessor for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource;
  if (!lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPinchEvent.PinchSource, &type metadata for HandPinchEvent.PinchSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource;
  if (!lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPinchEvent.PinchSource, &type metadata for HandPinchEvent.PinchSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource;
  if (!lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPinchEvent.PinchSource, &type metadata for HandPinchEvent.PinchSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource;
  if (!lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPinchEvent.PinchSource, &type metadata for HandPinchEvent.PinchSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource);
  }
  return result;
}

uint64_t HandPinchEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for HandPinchEvent(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandPinchEvent._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = specialized HandPinchEvent._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)(v11, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t (*v17)();
  ValueMetadata *v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    v11 = MEMORY[0x24BE5C070];
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)();
          break;
        case 3:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__signal;
          v17 = lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus;
          v18 = &type metadata for PinchOcclusionStatus;
          goto LABEL_17;
        case 4:
        case 5:
        case 9:
          closure #3 in closure #1 in JointTransformPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
        case 7:
        case 8:
          closure #6 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)();
          break;
        case 10:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
          v17 = lazy protocol witness table accessor for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource;
          v18 = &type metadata for HandPinchEvent.PinchSource;
          v19 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C078];
          goto LABEL_18;
        case 11:
          closure #11 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)();
          break;
        case 12:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate;
          v17 = lazy protocol witness table accessor for type OisSubstate and conformance OisSubstate;
          v18 = &type metadata for OisSubstate;
          goto LABEL_17;
        case 13:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID;
          v17 = lazy protocol witness table accessor for type PinchAcceptorID and conformance PinchAcceptorID;
          v18 = &type metadata for PinchAcceptorID;
          goto LABEL_17;
        case 14:
          v12 = a2;
          v13 = a1;
          v14 = a3;
          v15 = a4;
          v16 = &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason;
          v17 = lazy protocol witness table accessor for type OisEntryReason and conformance OisEntryReason;
          v18 = &type metadata for OisEntryReason;
LABEL_17:
          v19 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v11;
LABEL_18:
          closure #3 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)(v12, v13, v14, v15, v16, (uint64_t (*)(uint64_t))v17, (uint64_t)v18, v19);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for HandEventCommon(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularFloatField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in HandPinchEvent.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(uint64_t), uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2 + *a5;
  v14 = swift_beginAccess();
  v15 = a6(v14);
  a8(v13, a7, v15, a3, a4);
  return swift_endAccess();
}

uint64_t HandPinchEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for HandPinchEvent(0);
  v7 = swift_retain();
  closure #1 in HandPinchEvent.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in HandPinchEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  _QWORD *v17;

  result = closure #1 in closure #1 in HandPinchEvent.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    v10 = (_BYTE *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
    swift_beginAccess();
    if (*v10 == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    closure #35 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__signal, (void (*)(uint64_t))lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus);
    v11 = (float *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore);
    swift_beginAccess();
    if (*v11 != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    v12 = (float *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore);
    swift_beginAccess();
    if (*v12 != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    v13 = a1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMin;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v13 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    v14 = a1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v14 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    v15 = a1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__uncertainty;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v15 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    v16 = (float *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
    swift_beginAccess();
    if (*v16 != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    v17 = (_QWORD *)(a1
                   + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource);
    swift_beginAccess();
    if (*v17)
    {
      lazy protocol witness table accessor for type HandPinchEvent.PinchSource and conformance HandPinchEvent.PinchSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #3 in closure #1 in HandPinchEvent.traverse<A>(visitor:)(a1);
    closure #35 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate, (void (*)(uint64_t))lazy protocol witness table accessor for type OisSubstate and conformance OisSubstate);
    closure #35 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID, (void (*)(uint64_t))lazy protocol witness table accessor for type PinchAcceptorID and conformance PinchAcceptorID);
    return closure #35 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason, (void (*)(uint64_t))lazy protocol witness table accessor for type OisEntryReason and conformance OisEntryReason);
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandPinchEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandEventCommon(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HandEventCommon?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandEventCommon);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandEventCommon);
}

uint64_t closure #3 in closure #1 in HandPinchEvent.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__intentionScore;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #1 in static HandPinchEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  char v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  float *v37;
  float v38;
  float *v39;
  float *v40;
  float v41;
  float *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  float *v52;
  float v53;
  float *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  uint64_t *v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t *v78;
  char *v79;
  uint64_t v80;

  v80 = a2;
  v3 = type metadata accessor for HandEventCommon(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v78 = (uint64_t *)((char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v79 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v78 - v16;
  v18 = a1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v18, (uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
  v19 = v80;
  v20 = v80
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  v21 = (uint64_t)&v10[*(int *)(v7 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v10, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with copy of (Int32, Matrix2dPB)(v20, v21, &demangling cache variable for type metadata for HandEventCommon?);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v10, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
    v23 = v22(v21, 1, v3);
    v24 = v19;
    v25 = a1;
    if (v23 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for HandEventCommon?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v25 = a1;
  v26 = v19;
  v27 = v79;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v10, (uint64_t)v79, &demangling cache variable for type metadata for HandEventCommon?);
  if (v22(v21, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Matrix3x3PB((uint64_t)v27, type metadata accessor for HandEventCommon);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
LABEL_41:
    swift_release();
    swift_release();
    return 0;
  }
  v28 = v78;
  outlined init with take of Matrix2dPB(v21, (uint64_t)v78, type metadata accessor for HandEventCommon);
  swift_retain();
  v24 = v26;
  swift_retain();
  v29 = specialized static HandEventCommon.== infix(_:_:)(v27, v28);
  outlined destroy of Matrix3x3PB((uint64_t)v28, type metadata accessor for HandEventCommon);
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
  outlined destroy of Matrix3x3PB((uint64_t)v27, type metadata accessor for HandEventCommon);
  outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for HandEventCommon?);
  if ((v29 & 1) == 0)
    goto LABEL_41;
LABEL_8:
  v30 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
  swift_beginAccess();
  v31 = *v30;
  v32 = (unsigned __int8 *)(v24
                          + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
  swift_beginAccess();
  if (v31 != *v32)
    goto LABEL_41;
  v33 = v25 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__signal;
  swift_beginAccess();
  v34 = *(_QWORD *)v33;
  v35 = *(_BYTE *)(v33 + 8);
  LOBYTE(v33) = *(_BYTE *)(v33 + 9);
  v36 = v24 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__signal;
  swift_beginAccess();
  if ((v33 & 1) != 0)
  {
    if ((*(_BYTE *)(v36 + 9) & 1) == 0)
      goto LABEL_41;
  }
  else if ((*(_BYTE *)(v36 + 9) & 1) != 0
         || (specialized == infix<A>(_:_:)(v34, v35 & 1, *(_QWORD *)v36, *(_BYTE *)(v36 + 8) & 1) & 1) == 0)
  {
    goto LABEL_41;
  }
  v37 = (float *)(v25
                + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore);
  swift_beginAccess();
  v38 = *v37;
  v39 = (float *)(v24
                + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore);
  swift_beginAccess();
  if (v38 != *v39)
    goto LABEL_41;
  v40 = (float *)(v25
                + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore);
  swift_beginAccess();
  v41 = *v40;
  v42 = (float *)(v24
                + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore);
  swift_beginAccess();
  if (v41 != *v42)
    goto LABEL_41;
  v43 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMin);
  swift_beginAccess();
  v44 = *v43;
  v45 = (uint64_t *)(v24
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMin);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v44, *v45))
    goto LABEL_41;
  v46 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax);
  swift_beginAccess();
  v47 = *v46;
  v48 = (uint64_t *)(v24
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v47, *v48))
    goto LABEL_41;
  v49 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__uncertainty);
  swift_beginAccess();
  v50 = *v49;
  v51 = (uint64_t *)(v24
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__uncertainty);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v50, *v51))
    goto LABEL_41;
  v52 = (float *)(v25
                + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
  swift_beginAccess();
  v53 = *v52;
  v54 = (float *)(v24
                + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
  swift_beginAccess();
  if (v53 != *v54)
    goto LABEL_41;
  v55 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource);
  swift_beginAccess();
  v56 = *v55;
  v57 = (uint64_t *)(v24
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource);
  swift_beginAccess();
  v58 = *v57;
  if (*((_BYTE *)v57 + 8) == 1)
    __asm { BR              X10 }
  if (v56 != v58)
    goto LABEL_41;
  v59 = v25 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__intentionScore;
  swift_beginAccess();
  v60 = *(float *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  v61 = v24 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__intentionScore;
  swift_beginAccess();
  if ((v59 & 1) != 0)
  {
    if ((*(_BYTE *)(v61 + 4) & 1) == 0)
      goto LABEL_41;
  }
  else if ((*(_BYTE *)(v61 + 4) & 1) != 0 || v60 != *(float *)v61)
  {
    goto LABEL_41;
  }
  v62 = v25
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate;
  swift_beginAccess();
  v63 = *(_QWORD *)v62;
  v64 = *(_BYTE *)(v62 + 8);
  LOBYTE(v62) = *(_BYTE *)(v62 + 9);
  v65 = v24
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate;
  swift_beginAccess();
  if ((v62 & 1) != 0)
  {
    if ((*(_BYTE *)(v65 + 9) & 1) == 0)
      goto LABEL_41;
  }
  else if ((*(_BYTE *)(v65 + 9) & 1) != 0 || !specialized == infix<A>(_:_:)(v63, v64 & 1, *(_QWORD *)v65))
  {
    goto LABEL_41;
  }
  v66 = v25
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID;
  swift_beginAccess();
  v67 = *(_QWORD *)v66;
  v68 = *(_BYTE *)(v66 + 8);
  LOBYTE(v66) = *(_BYTE *)(v66 + 9);
  v69 = v24
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID;
  swift_beginAccess();
  if ((v66 & 1) != 0)
  {
    if ((*(_BYTE *)(v69 + 9) & 1) == 0)
      goto LABEL_41;
  }
  else if ((*(_BYTE *)(v69 + 9) & 1) != 0
         || !specialized == infix<A>(_:_:)(v67, v68 & 1, *(_QWORD *)v69, *(_BYTE *)(v69 + 8) & 1))
  {
    goto LABEL_41;
  }
  v70 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason);
  swift_beginAccess();
  v71 = *v70;
  v72 = *((_BYTE *)v70 + 9);
  swift_release();
  v73 = (uint64_t *)(v24
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason);
  swift_beginAccess();
  v74 = *v73;
  v75 = *((_BYTE *)v73 + 8);
  v76 = *((_BYTE *)v73 + 9);
  swift_release();
  if ((v72 & 1) != 0)
  {
    if ((v76 & 1) == 0)
      return 0;
  }
  else
  {
    if ((v76 & 1) != 0)
      return 0;
    if ((v75 & 1) != 0)
      __asm { BR              X9 }
    if (v71 != v74)
      return 0;
  }
  return 1;
}

uint64_t protocol witness for Message.init() in conformance HandPinchEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static HandPinchEvent._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance HandPinchEvent()
{
  return 0x636E6950646E6148;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandPinchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandPinchEvent.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandPinchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandPinchEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandPinchEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPinchEvent and conformance HandPinchEvent, type metadata accessor for HandPinchEvent, (uint64_t)&protocol conformance descriptor for HandPinchEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandPinchEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandPinchEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandPinchEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPinchEvent and conformance HandPinchEvent, type metadata accessor for HandPinchEvent, (uint64_t)&protocol conformance descriptor for HandPinchEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandPinchEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPinchEvent and conformance HandPinchEvent, type metadata accessor for HandPinchEvent, (uint64_t)&protocol conformance descriptor for HandPinchEvent);
  return Message.hash(into:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandPinchEvent.PinchSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandPinchEvent.PinchSource._protobuf_nameMap, a1);
}

uint64_t HandCursorEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          closure #1 in HandCursorEvent.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId();
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in HandCursorEvent.decodeMessage<A>(decoder:)()
{
  type metadata accessor for HandCursorEvent(0);
  type metadata accessor for HandEventCommon(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t HandCursorEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in HandCursorEvent.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_BYTE *)v3 == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(float *)(v3 + 4) != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if (*(_DWORD *)(v3 + 8))
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16))
    {
      lazy protocol witness table accessor for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId();
      dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
    }
    type metadata accessor for HandCursorEvent(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in HandCursorEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HandEventCommon(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HandCursorEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 36), (uint64_t)v8, &demangling cache variable for type metadata for HandEventCommon?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HandEventCommon);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HandEventCommon);
}

uint64_t protocol witness for Message.init() in conformance HandCursorEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 16) = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for HandEventCommon(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance HandCursorEvent()
{
  return 0x73727543646E6148;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandCursorEvent()
{
  return HandCursorEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandCursorEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandCursorEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandCursorEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCursorEvent and conformance HandCursorEvent, type metadata accessor for HandCursorEvent, (uint64_t)&protocol conformance descriptor for HandCursorEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandCursorEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandCursorEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandCursorEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCursorEvent and conformance HandCursorEvent, type metadata accessor for HandCursorEvent, (uint64_t)&protocol conformance descriptor for HandCursorEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandCursorEvent()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCursorEvent and conformance HandCursorEvent, type metadata accessor for HandCursorEvent, (uint64_t)&protocol conformance descriptor for HandCursorEvent);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in HandCursorEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCursorEvent and conformance HandCursorEvent, type metadata accessor for HandCursorEvent, (uint64_t)&protocol conformance descriptor for HandCursorEvent);
}

uint64_t base witness table accessor for Message in HandCursorEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCursorEvent and conformance HandCursorEvent, type metadata accessor for HandCursorEvent, (uint64_t)&protocol conformance descriptor for HandCursorEvent);
}

uint64_t base witness table accessor for Hashable in HandCursorEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCursorEvent and conformance HandCursorEvent, type metadata accessor for HandCursorEvent, (uint64_t)&protocol conformance descriptor for HandCursorEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandCursorEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCursorEvent and conformance HandCursorEvent, type metadata accessor for HandCursorEvent, (uint64_t)&protocol conformance descriptor for HandCursorEvent);
}

uint64_t base witness table accessor for Equatable in HandPinchEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPinchEvent and conformance HandPinchEvent, type metadata accessor for HandPinchEvent, (uint64_t)&protocol conformance descriptor for HandPinchEvent);
}

uint64_t base witness table accessor for Message in HandPinchEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPinchEvent and conformance HandPinchEvent, type metadata accessor for HandPinchEvent, (uint64_t)&protocol conformance descriptor for HandPinchEvent);
}

uint64_t base witness table accessor for Hashable in HandPinchEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPinchEvent and conformance HandPinchEvent, type metadata accessor for HandPinchEvent, (uint64_t)&protocol conformance descriptor for HandPinchEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandPinchEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPinchEvent and conformance HandPinchEvent, type metadata accessor for HandPinchEvent, (uint64_t)&protocol conformance descriptor for HandPinchEvent);
}

uint64_t base witness table accessor for Equatable in HandCameraTransitionEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCameraTransitionEvent and conformance HandCameraTransitionEvent, type metadata accessor for HandCameraTransitionEvent, (uint64_t)&protocol conformance descriptor for HandCameraTransitionEvent);
}

uint64_t type metadata accessor for HandCameraTransitionEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandCameraTransitionEvent);
}

uint64_t base witness table accessor for Message in HandCameraTransitionEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCameraTransitionEvent and conformance HandCameraTransitionEvent, type metadata accessor for HandCameraTransitionEvent, (uint64_t)&protocol conformance descriptor for HandCameraTransitionEvent);
}

uint64_t base witness table accessor for Hashable in HandCameraTransitionEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCameraTransitionEvent and conformance HandCameraTransitionEvent, type metadata accessor for HandCameraTransitionEvent, (uint64_t)&protocol conformance descriptor for HandCameraTransitionEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandCameraTransitionEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandCameraTransitionEvent and conformance HandCameraTransitionEvent, type metadata accessor for HandCameraTransitionEvent, (uint64_t)&protocol conformance descriptor for HandCameraTransitionEvent);
}

uint64_t base witness table accessor for Equatable in HandFilteringEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandFilteringEvent and conformance HandFilteringEvent, type metadata accessor for HandFilteringEvent, (uint64_t)&protocol conformance descriptor for HandFilteringEvent);
}

uint64_t type metadata accessor for HandFilteringEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandFilteringEvent);
}

uint64_t base witness table accessor for Message in HandFilteringEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandFilteringEvent and conformance HandFilteringEvent, type metadata accessor for HandFilteringEvent, (uint64_t)&protocol conformance descriptor for HandFilteringEvent);
}

uint64_t base witness table accessor for Hashable in HandFilteringEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandFilteringEvent and conformance HandFilteringEvent, type metadata accessor for HandFilteringEvent, (uint64_t)&protocol conformance descriptor for HandFilteringEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandFilteringEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandFilteringEvent and conformance HandFilteringEvent, type metadata accessor for HandFilteringEvent, (uint64_t)&protocol conformance descriptor for HandFilteringEvent);
}

uint64_t base witness table accessor for Equatable in HandTrackingEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandTrackingEvent and conformance HandTrackingEvent, type metadata accessor for HandTrackingEvent, (uint64_t)&protocol conformance descriptor for HandTrackingEvent);
}

uint64_t type metadata accessor for HandTrackingEvent(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandTrackingEvent);
}

uint64_t base witness table accessor for Message in HandTrackingEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandTrackingEvent and conformance HandTrackingEvent, type metadata accessor for HandTrackingEvent, (uint64_t)&protocol conformance descriptor for HandTrackingEvent);
}

uint64_t base witness table accessor for Hashable in HandTrackingEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandTrackingEvent and conformance HandTrackingEvent, type metadata accessor for HandTrackingEvent, (uint64_t)&protocol conformance descriptor for HandTrackingEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandTrackingEvent()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandTrackingEvent and conformance HandTrackingEvent, type metadata accessor for HandTrackingEvent, (uint64_t)&protocol conformance descriptor for HandTrackingEvent);
}

uint64_t base witness table accessor for Equatable in HandEventCommon()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
}

uint64_t base witness table accessor for Message in HandEventCommon()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
}

uint64_t base witness table accessor for Hashable in HandEventCommon()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandEventCommon()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandEventCommon and conformance HandEventCommon, type metadata accessor for HandEventCommon, (uint64_t)&protocol conformance descriptor for HandEventCommon);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HandPinchEvent.PinchSource()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [HandPinchEvent.PinchSource] and conformance [A], &demangling cache variable for type metadata for [HandPinchEvent.PinchSource]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HandEventCommon.EventStatus()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [HandEventCommon.EventStatus] and conformance [A], &demangling cache variable for type metadata for [HandEventCommon.EventStatus]);
}

unint64_t lazy protocol witness table accessor for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus;
  if (!lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandEventCommon.EventStatus, &type metadata for HandEventCommon.EventStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus;
  if (!lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandEventCommon.EventStatus, &type metadata for HandEventCommon.EventStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus;
  if (!lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandEventCommon.EventStatus, &type metadata for HandEventCommon.EventStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus;
  if (!lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandEventCommon.EventStatus, &type metadata for HandEventCommon.EventStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandEventCommon.EventStatus and conformance HandEventCommon.EventStatus);
  }
  return result;
}

uint64_t specialized static HandCameraTransitionEvent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;

  v4 = type metadata accessor for UnknownStorage();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v51 = (char *)&v50 - v9;
  v10 = type metadata accessor for HandEventCommon(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v57 = (uint64_t *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v50 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v50 - v28;
  v30 = type metadata accessor for HandCameraTransitionEvent(0);
  v31 = *(int *)(v30 + 28);
  v55 = a1;
  v32 = (uint64_t)a1 + v31;
  v33 = v30;
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
  v34 = *(int *)(v33 + 28);
  v56 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a2 + v34, (uint64_t)v25, &demangling cache variable for type metadata for HandEventCommon?);
  v35 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v25, v35, &demangling cache variable for type metadata for HandEventCommon?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v17, 1, v10) != 1)
  {
    v37 = v57;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for HandEventCommon?);
    if (v36(v35, 1, v10) != 1)
    {
      outlined init with take of Matrix2dPB(v35, (uint64_t)v37, type metadata accessor for HandEventCommon);
      v38 = specialized static HandEventCommon.== infix(_:_:)(v21, v37);
      outlined destroy of Matrix3x3PB((uint64_t)v37, type metadata accessor for HandEventCommon);
      outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for HandEventCommon?);
      outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
      outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for HandEventCommon);
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
      if ((v38 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v47 = 0;
      return v47 & 1;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for HandEventCommon);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
    goto LABEL_11;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for HandEventCommon?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
  if (v36(v35, 1, v10) != 1)
    goto LABEL_6;
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
LABEL_8:
  v39 = v55;
  v40 = v56;
  if ((specialized static Array<A>.== infix(_:_:)(*v55, *v56) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v39[1], v40[1]) & 1) == 0)
  {
    goto LABEL_11;
  }
  v41 = (char *)v39 + *(int *)(v33 + 24);
  v43 = v53;
  v42 = v54;
  v44 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  v45 = v51;
  v44(v51, v41, v54);
  v46 = v52;
  v44(v52, (char *)v40 + *(int *)(v33 + 24), v42);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v46, v42);
  v48(v45, v42);
  return v47 & 1;
}

uint64_t specialized static HandFilteringEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  char v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char v55;
  uint64_t *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;

  v95 = a1;
  v96 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v84 = *(_QWORD *)(v2 - 8);
  v85 = v2;
  MEMORY[0x24BDAC7A8](v2, v3);
  v83 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v82 = (char *)&v81 - v7;
  v93 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v89 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93, v8);
  v86 = (uint64_t)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OperationalEnvelopeSignalsPB?, OperationalEnvelopeSignalsPB?));
  MEMORY[0x24BDAC7A8](v88, v10);
  v94 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v87 = (uint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v91 = (char *)&v81 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v92 = (char *)&v81 - v20;
  v21 = type metadata accessor for HandEventCommon(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21, v23);
  v25 = (uint64_t *)((char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = (char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34, v35);
  v37 = (char *)&v81 - v36;
  MEMORY[0x24BDAC7A8](v38, v39);
  v41 = (char *)&v81 - v40;
  v42 = type metadata accessor for HandFilteringEvent(0);
  outlined init with copy of (Int32, Matrix2dPB)(v95 + *(int *)(v42 + 20), (uint64_t)v41, &demangling cache variable for type metadata for HandEventCommon?);
  v90 = v42;
  outlined init with copy of (Int32, Matrix2dPB)(v96 + *(int *)(v42 + 20), (uint64_t)v37, &demangling cache variable for type metadata for HandEventCommon?);
  v43 = (uint64_t)&v29[*(int *)(v26 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v41, (uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v37, v43, &demangling cache variable for type metadata for HandEventCommon?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v44((uint64_t)v29, 1, v21) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for HandEventCommon?);
    if (v44(v43, 1, v21) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
      goto LABEL_11;
    }
LABEL_6:
    v45 = &demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?);
    v46 = (uint64_t)v29;
    goto LABEL_7;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v33, &demangling cache variable for type metadata for HandEventCommon?);
  if (v44(v43, 1, v21) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for HandEventCommon);
    goto LABEL_6;
  }
  outlined init with take of Matrix2dPB(v43, (uint64_t)v25, type metadata accessor for HandEventCommon);
  v49 = specialized static HandEventCommon.== infix(_:_:)(v33, v25);
  outlined destroy of Matrix3x3PB((uint64_t)v25, type metadata accessor for HandEventCommon);
  outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for HandEventCommon?);
  outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for HandEventCommon?);
  outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for HandEventCommon);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
  if ((v49 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v50 = v90;
  v51 = *(int *)(v90 + 24);
  v52 = v95;
  v53 = v96;
  v54 = (uint64_t *)(v95 + v51);
  v55 = *(_BYTE *)(v95 + v51 + 9);
  v56 = (uint64_t *)(v96 + v51);
  v57 = *(_BYTE *)(v96 + v51 + 9);
  if ((v55 & 1) != 0)
  {
    v59 = v93;
    v58 = (uint64_t)v94;
    v61 = (uint64_t)v91;
    v60 = (uint64_t)v92;
    if ((v57 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v59 = v93;
    v58 = (uint64_t)v94;
    v61 = (uint64_t)v91;
    v60 = (uint64_t)v92;
    if ((v57 & 1) != 0)
      goto LABEL_8;
    v68 = *v54;
    v69 = *v56;
    if ((v56[1] & 1) != 0)
      __asm { BR              X11 }
    if (v68 != v69)
      goto LABEL_8;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v95 + *(int *)(v90 + 28), v60, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v53 + *(int *)(v50 + 28), v61, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  v62 = v58 + *(int *)(v88 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v60, v58, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v61, v62, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  if (v63(v58, 1, v59) != 1)
  {
    v70 = v87;
    outlined init with copy of (Int32, Matrix2dPB)(v58, v87, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    if (v63(v62, 1, v59) == 1)
    {
      outlined destroy of Coordinate3DPB?(v61, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      outlined destroy of Coordinate3DPB?(v60, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      outlined destroy of Matrix3x3PB(v70, type metadata accessor for OperationalEnvelopeSignalsPB);
      goto LABEL_25;
    }
    v71 = v86;
    outlined init with take of Matrix2dPB(v62, v86, type metadata accessor for OperationalEnvelopeSignalsPB);
    if (*(float *)v70 == *(float *)v71
      && (specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(v70 + 8), *(_QWORD *)(v71 + 8)) & 1) != 0)
    {
      v72 = v70;
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v73 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of Matrix3x3PB(v71, type metadata accessor for OperationalEnvelopeSignalsPB);
      outlined destroy of Coordinate3DPB?(v61, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      outlined destroy of Coordinate3DPB?(v60, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      outlined destroy of Matrix3x3PB(v72, type metadata accessor for OperationalEnvelopeSignalsPB);
      outlined destroy of Coordinate3DPB?(v58, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      if ((v73 & 1) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
    outlined destroy of Matrix3x3PB(v71, type metadata accessor for OperationalEnvelopeSignalsPB);
    outlined destroy of Coordinate3DPB?(v61, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    outlined destroy of Coordinate3DPB?(v60, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    outlined destroy of Matrix3x3PB(v70, type metadata accessor for OperationalEnvelopeSignalsPB);
    v46 = v58;
    v45 = &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?;
LABEL_7:
    outlined destroy of Coordinate3DPB?(v46, v45);
    goto LABEL_8;
  }
  outlined destroy of Coordinate3DPB?(v61, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  outlined destroy of Coordinate3DPB?(v60, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  if (v63(v62, 1, v59) != 1)
  {
LABEL_25:
    v45 = &demangling cache variable for type metadata for (OperationalEnvelopeSignalsPB?, OperationalEnvelopeSignalsPB?);
    v46 = v58;
    goto LABEL_7;
  }
  outlined destroy of Coordinate3DPB?(v58, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
LABEL_16:
  v64 = *(int *)(v50 + 32);
  v65 = v52 + v64;
  v66 = *(_BYTE *)(v52 + v64 + 9);
  v67 = v53 + v64;
  if ((v66 & 1) != 0)
  {
    if (*(_BYTE *)(v67 + 9))
    {
LABEL_34:
      v74 = v84;
      v75 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
      v76 = v82;
      v77 = v52;
      v78 = v85;
      v75(v82, v77, v85);
      v79 = v83;
      v75(v83, v53, v78);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      v80 = *(void (**)(char *, uint64_t))(v74 + 8);
      v80(v79, v78);
      v80(v76, v78);
      return v47 & 1;
    }
  }
  else if ((*(_BYTE *)(v67 + 9) & 1) == 0
         && (specialized == infix<A>(_:_:)(*(_QWORD *)v65, *(_BYTE *)(v65 + 8) & 1, *(_QWORD *)v67, *(_BYTE *)(v67 + 8) & 1) & 1) != 0)
  {
    goto LABEL_34;
  }
LABEL_8:
  v47 = 0;
  return v47 & 1;
}

uint64_t specialized static HandTrackingEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  char *v34;
  char v35;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v4 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v53 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v52 = (char *)&v52 - v9;
  v10 = type metadata accessor for HandEventCommon(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v56 = (uint64_t *)((char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v59 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v52 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v52 - v27;
  v29 = type metadata accessor for HandTrackingEvent(0);
  v30 = *(int *)(v29 + 20);
  v57 = a1;
  outlined init with copy of (Int32, Matrix2dPB)(a1 + v30, (uint64_t)v28, &demangling cache variable for type metadata for HandEventCommon?);
  v31 = *(int *)(v29 + 20);
  v58 = a2;
  outlined init with copy of (Int32, Matrix2dPB)(a2 + v31, (uint64_t)v24, &demangling cache variable for type metadata for HandEventCommon?);
  v32 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v28, (uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v24, v32, &demangling cache variable for type metadata for HandEventCommon?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v33((uint64_t)v17, 1, v10) != 1)
  {
    v34 = v59;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v59, &demangling cache variable for type metadata for HandEventCommon?);
    if (v33(v32, 1, v10) != 1)
    {
      v37 = v56;
      outlined init with take of Matrix2dPB(v32, (uint64_t)v56, type metadata accessor for HandEventCommon);
      v38 = specialized static HandEventCommon.== infix(_:_:)(v34, v37);
      outlined destroy of Matrix3x3PB((uint64_t)v37, type metadata accessor for HandEventCommon);
      outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for HandEventCommon?);
      outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for HandEventCommon?);
      outlined destroy of Matrix3x3PB((uint64_t)v34, type metadata accessor for HandEventCommon);
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
      if ((v38 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Matrix3x3PB((uint64_t)v34, type metadata accessor for HandEventCommon);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
    goto LABEL_7;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for HandEventCommon?);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for HandEventCommon?);
  if (v33(v32, 1, v10) != 1)
    goto LABEL_6;
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
LABEL_10:
  v39 = *(int *)(v29 + 24);
  v41 = v57;
  v40 = v58;
  v42 = v57 + v39;
  v43 = *(_BYTE *)(v57 + v39 + 9);
  v44 = v58 + v39;
  if ((v43 & 1) != 0)
  {
    if (*(_BYTE *)(v44 + 9))
    {
LABEL_15:
      v45 = v54;
      v46 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
      v47 = v52;
      v48 = v41;
      v49 = v55;
      v46(v52, v48, v55);
      v50 = v53;
      v46(v53, v40, v49);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v51 = *(void (**)(char *, uint64_t))(v45 + 8);
      v51(v50, v49);
      v51(v47, v49);
      return v35 & 1;
    }
  }
  else if ((*(_BYTE *)(v44 + 9) & 1) == 0
         && (specialized == infix<A>(_:_:)(*(_QWORD *)v42, *(_BYTE *)(v42 + 8) & 1, *(_QWORD *)v44, *(_BYTE *)(v44 + 8) & 1) & 1) != 0)
  {
    goto LABEL_15;
  }
LABEL_7:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static HandCursorEvent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  char v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unsigned __int8 *, uint64_t);
  char *v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t *v57;

  v4 = type metadata accessor for UnknownStorage();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v51 = (char *)&v50 - v9;
  v10 = type metadata accessor for HandEventCommon(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v57 = (uint64_t *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v50 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v50 - v28;
  v30 = type metadata accessor for HandCursorEvent(0);
  v31 = *(int *)(v30 + 36);
  v55 = a1;
  v32 = (uint64_t)&a1[v31];
  v33 = v30;
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
  v34 = *(int *)(v33 + 36);
  v56 = a2;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&a2[v34], (uint64_t)v25, &demangling cache variable for type metadata for HandEventCommon?);
  v35 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v25, v35, &demangling cache variable for type metadata for HandEventCommon?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v17, 1, v10) != 1)
  {
    v37 = v57;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for HandEventCommon?);
    if (v36(v35, 1, v10) != 1)
    {
      outlined init with take of Matrix2dPB(v35, (uint64_t)v37, type metadata accessor for HandEventCommon);
      v38 = specialized static HandEventCommon.== infix(_:_:)(v21, v37);
      outlined destroy of Matrix3x3PB((uint64_t)v37, type metadata accessor for HandEventCommon);
      outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for HandEventCommon?);
      outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
      outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for HandEventCommon);
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
      if ((v38 & 1) != 0)
        goto LABEL_8;
LABEL_13:
      v47 = 0;
      return v47 & 1;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for HandEventCommon);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for (HandEventCommon?, HandEventCommon?));
    goto LABEL_13;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for HandEventCommon?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for HandEventCommon?);
  if (v36(v35, 1, v10) != 1)
    goto LABEL_6;
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for HandEventCommon?);
LABEL_8:
  v39 = v55;
  v40 = v56;
  if (*v55 != *v56
    || *((float *)v55 + 1) != *((float *)v56 + 1)
    || *((_DWORD *)v55 + 2) != *((_DWORD *)v56 + 2)
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v55 + 2), *((_QWORD *)v56 + 2)) & 1) == 0)
  {
    goto LABEL_13;
  }
  v41 = &v39[*(int *)(v33 + 32)];
  v43 = v53;
  v42 = v54;
  v44 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v53 + 16);
  v45 = v51;
  v44(v51, v41, v54);
  v46 = v52;
  v44(v52, &v40[*(int *)(v33 + 32)], v42);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v46, v42);
  v48(v45, v42);
  return v47 & 1;
}

uint64_t specialized static HandEventCommon.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;

  v4 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v49 = (char *)&v48 - v9;
  v10 = type metadata accessor for CMTimeProtobuf(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v52 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v48 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v48 - v28;
  v53 = a1;
  v30 = *(_QWORD *)a1;
  v31 = *a2;
  if (*((_BYTE *)a2 + 8) != 1)
  {
    if (v30 != v31)
      goto LABEL_26;
    goto LABEL_11;
  }
  if (!v31)
  {
    if (!v30)
      goto LABEL_11;
LABEL_26:
    v41 = 0;
    return v41 & 1;
  }
  if (v31 != 1)
  {
    if (v30 == 2)
      goto LABEL_11;
    goto LABEL_26;
  }
  if (v30 != 1)
    goto LABEL_26;
LABEL_11:
  v48 = v4;
  v32 = type metadata accessor for HandEventCommon(0);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v53[*(int *)(v32 + 32)], (uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a2 + *(int *)(v32 + 32), (uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v33 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v25, v33, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v34((uint64_t)v17, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v34(v33, 1, v10) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v34(v33, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for CMTimeProtobuf);
LABEL_19:
    v43 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v44 = (uint64_t)v17;
LABEL_25:
    outlined destroy of Coordinate3DPB?(v44, v43);
    goto LABEL_26;
  }
  v45 = v52;
  outlined init with take of Matrix2dPB(v33, v52, type metadata accessor for CMTimeProtobuf);
  if (*(_QWORD *)v21 != *(_QWORD *)v45 || *((_DWORD *)v21 + 2) != *(_DWORD *)(v45 + 8))
  {
    outlined destroy of Matrix3x3PB(v45, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for CMTimeProtobuf);
    v44 = (uint64_t)v17;
    v43 = &demangling cache variable for type metadata for CMTimeProtobuf?;
    goto LABEL_25;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB(v45, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((v46 & 1) == 0)
    goto LABEL_26;
LABEL_14:
  if (*((_QWORD *)v53 + 2) != a2[2] || v53[24] != *((_BYTE *)a2 + 24))
    goto LABEL_26;
  v35 = v51;
  v36 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v37 = v48;
  v38 = v49;
  v36(v49, &v53[*(int *)(v32 + 28)], v48);
  v39 = (char *)a2 + *(int *)(v32 + 28);
  v40 = v50;
  v36(v50, v39, v37);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  v42 = *(void (**)(char *, uint64_t))(v35 + 8);
  v42(v40, v37);
  v42(v38, v37);
  return v41 & 1;
}

uint64_t specialized static HandPinchEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for HandPinchEvent(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static HandPinchEvent.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        (v16 & 1) != 0))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized HandPinchEvent._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  int v25;
  int *v26;
  int v27;
  _DWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  int *v37;
  int v38;
  _DWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  _DWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  v8 = type metadata accessor for HandEventCommon(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_BYTE *)(v1
               + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown) = 0;
  v10 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__signal;
  *(_QWORD *)v10 = 0;
  *(_WORD *)(v10 + 8) = 256;
  v11 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore) = 0;
  v56 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore) = 0;
  v12 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMin);
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMin) = MEMORY[0x24BEE4AF8];
  v57 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax) = v13;
  v14 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__uncertainty);
  *v14 = v13;
  v58 = v14;
  v59 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
  *v59 = 0;
  v15 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
  v60 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__intentionScore;
  v61 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__intentionScore;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate;
  v62 = v1
      + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate;
  *(_QWORD *)v17 = 0;
  *(_WORD *)(v17 + 8) = 256;
  v18 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID;
  v63 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID;
  *(_QWORD *)v18 = 0;
  *(_WORD *)(v18 + 8) = 256;
  v19 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason;
  v64 = v1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason;
  *(_QWORD *)v19 = 0;
  *(_WORD *)(v19 + 8) = 256;
  v20 = a1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__eventCommonInfo;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v20, (uint64_t)v6, &demangling cache variable for type metadata for HandEventCommon?);
  swift_beginAccess();
  outlined assign with take of HandEventCommon?((uint64_t)v6, v7);
  swift_endAccess();
  v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchDown);
  swift_beginAccess();
  LOBYTE(v21) = *v21;
  swift_beginAccess();
  *v9 = (_BYTE)v21;
  v22 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__signal);
  swift_beginAccess();
  v23 = *v22;
  LOBYTE(v9) = *((_BYTE *)v22 + 8);
  LOBYTE(v22) = *((_BYTE *)v22 + 9);
  swift_beginAccess();
  *(_QWORD *)v10 = v23;
  *(_BYTE *)(v10 + 8) = (_BYTE)v9;
  *(_BYTE *)(v10 + 9) = (_BYTE)v22;
  v24 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__rawPinchScore);
  swift_beginAccess();
  v25 = *v24;
  swift_beginAccess();
  *v11 = v25;
  v26 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__filteredPinchScore);
  swift_beginAccess();
  v27 = *v26;
  v28 = v56;
  swift_beginAccess();
  *v28 = v27;
  v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMin);
  swift_beginAccess();
  v30 = *v29;
  swift_beginAccess();
  *v12 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__occlusionMax);
  swift_beginAccess();
  v32 = *v31;
  v33 = v57;
  swift_beginAccess();
  *v33 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__uncertainty);
  swift_beginAccess();
  v35 = *v34;
  v36 = v58;
  swift_beginAccess();
  *v36 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = (int *)(a1
              + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__hoverDistance);
  swift_beginAccess();
  v38 = *v37;
  v39 = v59;
  swift_beginAccess();
  *v39 = v38;
  v40 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchSource);
  swift_beginAccess();
  v41 = *v40;
  LOBYTE(v40) = *((_BYTE *)v40 + 8);
  v42 = v60;
  swift_beginAccess();
  *(_QWORD *)v42 = v41;
  *(_BYTE *)(v42 + 8) = (_BYTE)v40;
  v43 = a1 + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__intentionScore;
  swift_beginAccess();
  LODWORD(v41) = *(_DWORD *)v43;
  LOBYTE(v43) = *(_BYTE *)(v43 + 4);
  v44 = v61;
  swift_beginAccess();
  *(_DWORD *)v44 = v41;
  *(_BYTE *)(v44 + 4) = v43;
  v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__currentOisSubstate);
  swift_beginAccess();
  v46 = *v45;
  LOBYTE(v44) = *((_BYTE *)v45 + 8);
  LOBYTE(v45) = *((_BYTE *)v45 + 9);
  v47 = v62;
  swift_beginAccess();
  *(_QWORD *)v47 = v46;
  *(_BYTE *)(v47 + 8) = v44;
  *(_BYTE *)(v47 + 9) = (_BYTE)v45;
  v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__pinchAcceptorID);
  swift_beginAccess();
  v49 = *v48;
  LOBYTE(v44) = *((_BYTE *)v48 + 8);
  LOBYTE(v48) = *((_BYTE *)v48 + 9);
  v50 = v63;
  swift_beginAccess();
  *(_QWORD *)v50 = v49;
  *(_BYTE *)(v50 + 8) = v44;
  *(_BYTE *)(v50 + 9) = (_BYTE)v48;
  v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands14HandPinchEventP33_46E4B2B1F6D87B4ADD2FA82D162CD40113_StorageClass__oisEntryReason);
  swift_beginAccess();
  v52 = *v51;
  LOBYTE(v49) = *((_BYTE *)v51 + 8);
  LOBYTE(v51) = *((_BYTE *)v51 + 9);
  v53 = v64;
  swift_beginAccess();
  *(_QWORD *)v53 = v52;
  *(_BYTE *)(v53 + 8) = v49;
  *(_BYTE *)(v53 + 9) = (_BYTE)v51;
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for HandTrackingEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v24;
  _DWORD *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for HandEventCommon(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *v10 = *v11;
      *((_BYTE *)v10 + 8) = *((_BYTE *)v11 + 8);
      v10[2] = v11[2];
      *((_BYTE *)v10 + 24) = *((_BYTE *)v11 + 24);
      v8((_QWORD *)((char *)v10 + *(int *)(v12 + 28)), (_QWORD *)((char *)v11 + *(int *)(v12 + 28)), v7);
      v16 = *(int *)(v12 + 32);
      __dst = (_DWORD *)((char *)v10 + v16);
      v17 = (_DWORD *)((char *)v11 + v16);
      v18 = type metadata accessor for CMTimeProtobuf(0);
      v24 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48))(v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
        memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v17;
        __dst[2] = v17[2];
        v8((uint64_t *)((char *)__dst + *(int *)(v18 + 24)), (uint64_t *)((char *)v17 + *(int *)(v18 + 24)), v7);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v18);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v20 = *(int *)(a3 + 24);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_WORD *)v21 + 4) = *((_WORD *)v22 + 4);
  }
  return a1;
}

uint64_t destroy for HandTrackingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for HandEventCommon(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v10(v5 + *(int *)(v6 + 28), v4);
    v8 = v5 + *(int *)(v6 + 32);
    v9 = type metadata accessor for CMTimeProtobuf(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8 + *(int *)(v9 + 24), v4);
  }
  return result;
}

char *initializeWithCopy for HandTrackingEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v22;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for HandEventCommon(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    v9[24] = v10[24];
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    v14 = *(int *)(v11 + 32);
    __dst = &v9[v14];
    v15 = &v10[v14];
    v16 = type metadata accessor for CMTimeProtobuf(0);
    v22 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v15;
      *((_DWORD *)__dst + 2) = *((_DWORD *)v15 + 2);
      v7(&__dst[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v16);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_WORD *)v19 + 4) = *((_WORD *)v20 + 4);
  return a1;
}

uint64_t assignWithCopy for HandTrackingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v42 = a3;
  v43 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (uint64_t *)(a2 + v9);
  v12 = type metadata accessor for HandEventCommon(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v28 = *v11;
      *(_BYTE *)(v10 + 8) = *((_BYTE *)v11 + 8);
      *(_QWORD *)v10 = v28;
      *(_QWORD *)(v10 + 16) = v11[2];
      *(_BYTE *)(v10 + 24) = *((_BYTE *)v11 + 24);
      v8(v10 + *(int *)(v12 + 28), (uint64_t)v11 + *(int *)(v12 + 28), v6);
      v29 = *(int *)(v12 + 32);
      v30 = v10 + v29;
      v31 = (char *)v11 + v29;
      v32 = type metadata accessor for CMTimeProtobuf(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *(_DWORD *)(v30 + 8) = *((_DWORD *)v31 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v30 + *(int *)(v32 + 24), &v31[*(int *)(v32 + 24)], v6);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *(_DWORD *)(v30 + 8) = *((_DWORD *)v31 + 2);
          v8(v30 + *(int *)(v32 + 24), (uint64_t)&v31[*(int *)(v32 + 24)], v6);
          goto LABEL_14;
        }
        outlined destroy of Matrix3x3PB(v30, type metadata accessor for CMTimeProtobuf);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v26 = (void *)v30;
      v27 = v31;
      goto LABEL_8;
    }
    outlined destroy of Matrix3x3PB(v10, type metadata accessor for HandEventCommon);
LABEL_7:
    v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?)
                                - 8)
                    + 64);
    v26 = (void *)v10;
    v27 = (char *)v11;
LABEL_8:
    memcpy(v26, v27, v25);
    goto LABEL_14;
  }
  if (v16)
    goto LABEL_7;
  v17 = *v11;
  *(_BYTE *)(v10 + 8) = *((_BYTE *)v11 + 8);
  *(_QWORD *)v10 = v17;
  *(_QWORD *)(v10 + 16) = v11[2];
  *(_BYTE *)(v10 + 24) = *((_BYTE *)v11 + 24);
  v18 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v18(v10 + *(int *)(v12 + 28), (char *)v11 + *(int *)(v12 + 28), v6);
  v19 = *(int *)(v12 + 32);
  v20 = (_DWORD *)(v10 + v19);
  v21 = (_DWORD *)((char *)v11 + v19);
  v22 = type metadata accessor for CMTimeProtobuf(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[2] = v21[2];
    v18((uint64_t)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v6);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_14:
  v37 = *(int *)(v42 + 24);
  v38 = a1 + v37;
  v39 = (uint64_t *)(v43 + v37);
  v40 = *v39;
  *(_WORD *)(v38 + 8) = *((_WORD *)v39 + 4);
  *(_QWORD *)v38 = v40;
  return a1;
}

char *initializeWithTake for HandTrackingEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v22;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for HandEventCommon(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    v9[24] = v10[24];
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    v14 = *(int *)(v11 + 32);
    __dst = &v9[v14];
    v15 = &v10[v14];
    v16 = type metadata accessor for CMTimeProtobuf(0);
    v22 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v15;
      *((_DWORD *)__dst + 2) = *((_DWORD *)v15 + 2);
      v7(&__dst[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v16);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_WORD *)v19 + 4) = *((_WORD *)v20 + 4);
  return a1;
}

uint64_t assignWithTake for HandTrackingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v39 = a3;
  v40 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for HandEventCommon(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
      *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
      v8(v10 + *(int *)(v12 + 28), v11 + *(int *)(v12 + 28), v6);
      v27 = *(int *)(v12 + 32);
      v28 = v10 + v27;
      v29 = (char *)(v11 + v27);
      v30 = type metadata accessor for CMTimeProtobuf(0);
      v31 = *(_QWORD *)(v30 - 8);
      v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
      v33 = v32(v28, 1, v30);
      v34 = v32((uint64_t)v29, 1, v30);
      if (v33)
      {
        if (!v34)
        {
          *(_QWORD *)v28 = *(_QWORD *)v29;
          *(_DWORD *)(v28 + 8) = *((_DWORD *)v29 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v28 + *(int *)(v30 + 24), &v29[*(int *)(v30 + 24)], v6);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v34)
        {
          *(_QWORD *)v28 = *(_QWORD *)v29;
          *(_DWORD *)(v28 + 8) = *((_DWORD *)v29 + 2);
          v8(v28 + *(int *)(v30 + 24), (uint64_t)&v29[*(int *)(v30 + 24)], v6);
          goto LABEL_14;
        }
        outlined destroy of Matrix3x3PB(v28, type metadata accessor for CMTimeProtobuf);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v25 = (void *)v28;
      v26 = v29;
      goto LABEL_8;
    }
    outlined destroy of Matrix3x3PB(v10, type metadata accessor for HandEventCommon);
LABEL_7:
    v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?)
                                - 8)
                    + 64);
    v25 = (void *)v10;
    v26 = (char *)v11;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_14;
  }
  if (v16)
    goto LABEL_7;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v17(v10 + *(int *)(v12 + 28), v11 + *(int *)(v12 + 28), v6);
  v18 = *(int *)(v12 + 32);
  v19 = (_DWORD *)(v10 + v18);
  v20 = (_DWORD *)(v11 + v18);
  v21 = type metadata accessor for CMTimeProtobuf(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[2] = v20[2];
    v17((uint64_t)v19 + *(int *)(v21 + 24), (uint64_t)v20 + *(int *)(v21 + 24), v6);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_14:
  v35 = *(int *)(v39 + 24);
  v36 = a1 + v35;
  v37 = v40 + v35;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_WORD *)(v36 + 8) = *(_WORD *)(v37 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandTrackingEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D925284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for HandTrackingEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D925308(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for HandTrackingEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandEventCommon?, (void (*)(uint64_t))type metadata accessor for HandEventCommon);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

char *initializeBufferWithCopyOfBuffer for HandFilteringEvent(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v36;
  char *__dst;
  void (*v38)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for HandEventCommon(0);
    v13 = *(_QWORD *)(v12 - 8);
    v38 = v8;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v10[8] = v11[8];
      *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
      v10[24] = v11[24];
      v8(&v10[*(int *)(v12 + 28)], &v11[*(int *)(v12 + 28)], v7);
      v16 = *(int *)(v12 + 32);
      __dst = &v10[v16];
      v17 = &v11[v16];
      v18 = type metadata accessor for CMTimeProtobuf(0);
      v36 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
        memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v17;
        *((_DWORD *)__dst + 2) = *((_DWORD *)v17 + 2);
        v8(&__dst[*(int *)(v18 + 24)], &v17[*(int *)(v18 + 24)], v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v18);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v20 = a3[6];
    v21 = a3[7];
    v22 = &a1[v20];
    v23 = &a2[v20];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_WORD *)v22 + 4) = *((_WORD *)v23 + 4);
    v24 = &a1[v21];
    v25 = &a2[v21];
    v26 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v24 = *(_DWORD *)v25;
      *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
      v29 = *(int *)(v26 + 24);
      v30 = &v24[v29];
      v31 = &v25[v29];
      swift_bridgeObjectRetain();
      v38(v30, v31, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v32 = a3[8];
    v33 = &a1[v32];
    v34 = &a2[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_WORD *)v33 + 4) = *((_WORD *)v34 + 4);
  }
  return a1;
}

uint64_t destroy for HandFilteringEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for HandEventCommon(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v12(v5 + *(int *)(v6 + 28), v4);
    v7 = v5 + *(int *)(v6 + 32);
    v8 = type metadata accessor for CMTimeProtobuf(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
      v12(v7 + *(int *)(v8 + 24), v4);
  }
  v9 = a1 + *(int *)(a2 + 28);
  v10 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9 + *(int *)(v10 + 24), v4);
  }
  return result;
}

char *initializeWithCopy for HandFilteringEvent(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v34;
  char *__dst;
  void (*v36)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for HandEventCommon(0);
  v12 = *(_QWORD *)(v11 - 8);
  v36 = v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    v9[24] = v10[24];
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    v14 = *(int *)(v11 + 32);
    __dst = &v9[v14];
    v15 = &v10[v14];
    v16 = type metadata accessor for CMTimeProtobuf(0);
    v34 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v15;
      *((_DWORD *)__dst + 2) = *((_DWORD *)v15 + 2);
      v7(&__dst[*(int *)(v16 + 24)], &v15[*(int *)(v16 + 24)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v16);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v18 = a3[6];
  v19 = a3[7];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_WORD *)v20 + 4) = *((_WORD *)v21 + 4);
  v22 = &a1[v19];
  v23 = &a2[v19];
  v24 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v22 = *(_DWORD *)v23;
    *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
    v27 = *(int *)(v24 + 24);
    v28 = &v22[v27];
    v29 = &v23[v27];
    swift_bridgeObjectRetain();
    v36(v28, v29, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v30 = a3[8];
  v31 = &a1[v30];
  v32 = &a2[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_WORD *)v31 + 4) = *((_WORD *)v32 + 4);
  return a1;
}

uint64_t assignWithCopy for HandFilteringEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  _DWORD *__dst;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;

  v6 = type metadata accessor for UnknownStorage();
  v60 = *(_QWORD *)(v6 - 8);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 24);
  v58(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = type metadata accessor for HandEventCommon(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  v59 = v6;
  if (!v13)
  {
    if (!v14)
    {
      v25 = *v9;
      *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
      *(_QWORD *)v8 = v25;
      *(_QWORD *)(v8 + 16) = v9[2];
      *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
      v58(v8 + *(int *)(v10 + 28), (uint64_t)v9 + *(int *)(v10 + 28), v6);
      v26 = *(int *)(v10 + 32);
      v27 = v8 + v26;
      v28 = (char *)v9 + v26;
      v29 = type metadata accessor for CMTimeProtobuf(0);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
      v32 = v31(v27, 1, v29);
      v33 = v31((uint64_t)v28, 1, v29);
      if (v32)
      {
        if (!v33)
        {
          *(_QWORD *)v27 = *(_QWORD *)v28;
          *(_DWORD *)(v27 + 8) = *((_DWORD *)v28 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v27 + *(int *)(v29 + 24), &v28[*(int *)(v29 + 24)], v59);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v33)
        {
          *(_QWORD *)v27 = *(_QWORD *)v28;
          *(_DWORD *)(v27 + 8) = *((_DWORD *)v28 + 2);
          v58(v27 + *(int *)(v29 + 24), (uint64_t)&v28[*(int *)(v29 + 24)], v59);
          goto LABEL_14;
        }
        outlined destroy of Matrix3x3PB(v27, type metadata accessor for CMTimeProtobuf);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v23 = (void *)v27;
      v24 = v28;
LABEL_8:
      memcpy(v23, v24, v22);
      goto LABEL_14;
    }
    outlined destroy of Matrix3x3PB(v8, type metadata accessor for HandEventCommon);
LABEL_7:
    v22 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?)
                                - 8)
                    + 64);
    v23 = (void *)v8;
    v24 = (char *)v9;
    goto LABEL_8;
  }
  if (v14)
    goto LABEL_7;
  v15 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v15;
  *(_QWORD *)(v8 + 16) = v9[2];
  *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
  v16 = *(void (**)(uint64_t, char *, uint64_t))(v60 + 16);
  v16(v8 + *(int *)(v10 + 28), (char *)v9 + *(int *)(v10 + 28), v6);
  v17 = *(int *)(v10 + 32);
  __dst = (_DWORD *)(v8 + v17);
  v18 = (_DWORD *)((char *)v9 + v17);
  v19 = v6;
  v20 = type metadata accessor for CMTimeProtobuf(0);
  v56 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v56 + 48))(v18, 1, v20))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *(_QWORD *)__dst = *(_QWORD *)v18;
    __dst[2] = v18[2];
    v16((uint64_t)__dst + *(int *)(v20 + 24), (char *)v18 + *(int *)(v20 + 24), v19);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(__dst, 0, 1, v20);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_14:
  v34 = a3[6];
  v35 = a1 + v34;
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  *(_WORD *)(v35 + 8) = *((_WORD *)v36 + 4);
  *(_QWORD *)v35 = v37;
  v38 = a3[7];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  v41 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      *(_DWORD *)v39 = *(_DWORD *)v40;
      v39[1] = v40[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v58((uint64_t)v39 + *(int *)(v41 + 24), (uint64_t)v40 + *(int *)(v41 + 24), v59);
      goto LABEL_20;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v39, type metadata accessor for OperationalEnvelopeSignalsPB);
    goto LABEL_19;
  }
  if (v45)
  {
LABEL_19:
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_20;
  }
  *(_DWORD *)v39 = *(_DWORD *)v40;
  v39[1] = v40[1];
  v46 = *(int *)(v41 + 24);
  v47 = (char *)v39 + v46;
  v48 = (char *)v40 + v46;
  v49 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  swift_bridgeObjectRetain();
  v49(v47, v48, v59);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
LABEL_20:
  v51 = a3[8];
  v52 = a1 + v51;
  v53 = (uint64_t *)(a2 + v51);
  v54 = *v53;
  *(_WORD *)(v52 + 8) = *((_WORD *)v53 + 4);
  *(_QWORD *)v52 = v54;
  return a1;
}

char *initializeWithTake for HandFilteringEvent(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v32;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for HandEventCommon(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    v9[24] = v10[24];
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    v14 = *(int *)(v11 + 32);
    __dst = &v9[v14];
    v15 = &v10[v14];
    v16 = v7;
    v17 = type metadata accessor for CMTimeProtobuf(0);
    v32 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, v17))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v15;
      *((_DWORD *)__dst + 2) = *((_DWORD *)v15 + 2);
      v16(&__dst[*(int *)(v17 + 24)], &v15[*(int *)(v17 + 24)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    v7 = v16;
  }
  v19 = a3[6];
  v20 = a3[7];
  v21 = &a1[v19];
  v22 = &a2[v19];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_WORD *)v21 + 4) = *((_WORD *)v22 + 4);
  v23 = &a1[v20];
  v24 = &a2[v20];
  v25 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v23 = *(_DWORD *)v24;
    *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
    v7(&v23[*(int *)(v25 + 24)], &v24[*(int *)(v25 + 24)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v28 = a3[8];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_WORD *)v29 + 4) = *((_WORD *)v30 + 4);
  return a1;
}

uint64_t assignWithTake for HandFilteringEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  _DWORD *__dst;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for UnknownStorage();
  v52 = *(_QWORD *)(v6 - 8);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 40);
  v50(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for HandEventCommon(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  v51 = v6;
  if (!v13)
  {
    if (!v14)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_BYTE *)(v8 + 24) = *(_BYTE *)(v9 + 24);
      v50(v8 + *(int *)(v10 + 28), v9 + *(int *)(v10 + 28), v6);
      v24 = *(int *)(v10 + 32);
      v25 = v8 + v24;
      v26 = (char *)(v9 + v24);
      v27 = type metadata accessor for CMTimeProtobuf(0);
      v28 = *(_QWORD *)(v27 - 8);
      v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
      v30 = v29(v25, 1, v27);
      v31 = v29((uint64_t)v26, 1, v27);
      if (v30)
      {
        if (!v31)
        {
          *(_QWORD *)v25 = *(_QWORD *)v26;
          *(_DWORD *)(v25 + 8) = *((_DWORD *)v26 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v25 + *(int *)(v27 + 24), &v26[*(int *)(v27 + 24)], v51);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v31)
        {
          *(_QWORD *)v25 = *(_QWORD *)v26;
          *(_DWORD *)(v25 + 8) = *((_DWORD *)v26 + 2);
          v50(v25 + *(int *)(v27 + 24), (uint64_t)&v26[*(int *)(v27 + 24)], v51);
          goto LABEL_14;
        }
        outlined destroy of Matrix3x3PB(v25, type metadata accessor for CMTimeProtobuf);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v22 = (void *)v25;
      v23 = v26;
LABEL_8:
      memcpy(v22, v23, v21);
      goto LABEL_14;
    }
    outlined destroy of Matrix3x3PB(v8, type metadata accessor for HandEventCommon);
LABEL_7:
    v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?)
                                - 8)
                    + 64);
    v22 = (void *)v8;
    v23 = (char *)v9;
    goto LABEL_8;
  }
  if (v14)
    goto LABEL_7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(v9 + 24);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32);
  v15(v8 + *(int *)(v10 + 28), v9 + *(int *)(v10 + 28), v6);
  v16 = *(int *)(v10 + 32);
  __dst = (_DWORD *)(v8 + v16);
  v17 = (_DWORD *)(v9 + v16);
  v18 = v6;
  v19 = type metadata accessor for CMTimeProtobuf(0);
  v48 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v48 + 48))(v17, 1, v19))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *(_QWORD *)__dst = *(_QWORD *)v17;
    __dst[2] = v17[2];
    v15((uint64_t)__dst + *(int *)(v19 + 24), (uint64_t)v17 + *(int *)(v19 + 24), v18);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v19);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_14:
  v32 = a3[6];
  v33 = a3[7];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_WORD *)(v34 + 8) = *(_WORD *)(v35 + 8);
  v36 = (_QWORD *)(a1 + v33);
  v37 = (_QWORD *)(a2 + v33);
  v38 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v36[1] = v37[1];
      swift_bridgeObjectRelease();
      v50((uint64_t)v36 + *(int *)(v38 + 24), (uint64_t)v37 + *(int *)(v38 + 24), v51);
      goto LABEL_20;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for OperationalEnvelopeSignalsPB);
    goto LABEL_19;
  }
  if (v42)
  {
LABEL_19:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_20;
  }
  *(_DWORD *)v36 = *(_DWORD *)v37;
  v36[1] = v37[1];
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v36 + *(int *)(v38 + 24), (char *)v37 + *(int *)(v38 + 24), v51);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
LABEL_20:
  v44 = a3[8];
  v45 = a1 + v44;
  v46 = a2 + v44;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_WORD *)(v45 + 8) = *(_WORD *)(v46 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandFilteringEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D926620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 28);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for HandFilteringEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D9266CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 28);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for HandFilteringEvent()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandEventCommon?, (void (*)(uint64_t))type metadata accessor for HandEventCommon);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for OperationalEnvelopeSignalsPB?, (void (*)(uint64_t))type metadata accessor for OperationalEnvelopeSignalsPB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for HandCameraTransitionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for HandEventCommon(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v14[2] = v15[2];
      *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
      v12((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v11);
      v19 = *(int *)(v16 + 32);
      v20 = (_DWORD *)((char *)v14 + v19);
      v21 = (_DWORD *)((char *)v15 + v19);
      v22 = type metadata accessor for CMTimeProtobuf(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v20 = *(_QWORD *)v21;
        v20[2] = v21[2];
        v12((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v11);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for HandCameraTransitionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for HandEventCommon(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v11(v6 + *(int *)(v7 + 28), v5);
    v9 = v6 + *(int *)(v7 + 32);
    v10 = type metadata accessor for CMTimeProtobuf(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 24), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for HandCameraTransitionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for HandEventCommon(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v13[2] = v14[2];
    *((_BYTE *)v13 + 24) = *((_BYTE *)v14 + 24);
    v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
    v18 = *(int *)(v15 + 32);
    v19 = (_DWORD *)((char *)v13 + v18);
    v20 = (_DWORD *)((char *)v14 + v18);
    v21 = type metadata accessor for CMTimeProtobuf(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[2] = v20[2];
      v11((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for HandCameraTransitionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  int v38;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for HandEventCommon(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v30 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = v14[8];
      *(_QWORD *)v13 = v30;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_BYTE *)(v13 + 24) = v14[24];
      v11((char *)(v13 + *(int *)(v15 + 28)), &v14[*(int *)(v15 + 28)], v9);
      v31 = *(int *)(v15 + 32);
      v32 = v13 + v31;
      v33 = &v14[v31];
      v34 = type metadata accessor for CMTimeProtobuf(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      v37 = v36(v32, 1, v34);
      v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *(_DWORD *)(v32 + 8) = *((_DWORD *)v33 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v32 + *(int *)(v34 + 24), &v33[*(int *)(v34 + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *(_QWORD *)v32 = *(_QWORD *)v33;
          *(_DWORD *)(v32 + 8) = *((_DWORD *)v33 + 2);
          v11((char *)(v32 + *(int *)(v34 + 24)), &v33[*(int *)(v34 + 24)], v9);
          return a1;
        }
        outlined destroy of Matrix3x3PB(v32, type metadata accessor for CMTimeProtobuf);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v28 = (void *)v32;
      v29 = v33;
      goto LABEL_8;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for HandEventCommon);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?)
                                - 8)
                    + 64);
    v28 = (void *)v13;
    v29 = v14;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  v19 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_BYTE *)(v13 + 24) = v14[24];
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  v20(v13 + *(int *)(v15 + 28), &v14[*(int *)(v15 + 28)], v9);
  v21 = *(int *)(v15 + 32);
  v22 = (_DWORD *)(v13 + v21);
  v23 = &v14[v21];
  v24 = type metadata accessor for CMTimeProtobuf(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[2] = *((_DWORD *)v23 + 2);
    v20((uint64_t)v22 + *(int *)(v24 + 24), &v23[*(int *)(v24 + 24)], v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for HandCameraTransitionEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for HandEventCommon(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    v17 = *(int *)(v14 + 32);
    v18 = (_DWORD *)((char *)v12 + v17);
    v19 = (_DWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for CMTimeProtobuf(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for HandCameraTransitionEvent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for HandEventCommon(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = v14[8];
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      *(_BYTE *)(v13 + 24) = v14[24];
      v11((char *)(v13 + *(int *)(v15 + 28)), &v14[*(int *)(v15 + 28)], v9);
      v29 = *(int *)(v15 + 32);
      v30 = v13 + v29;
      v31 = &v14[v29];
      v32 = type metadata accessor for CMTimeProtobuf(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *(_DWORD *)(v30 + 8) = *((_DWORD *)v31 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v30 + *(int *)(v32 + 24), &v31[*(int *)(v32 + 24)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          *(_QWORD *)v30 = *(_QWORD *)v31;
          *(_DWORD *)(v30 + 8) = *((_DWORD *)v31 + 2);
          v11((char *)(v30 + *(int *)(v32 + 24)), &v31[*(int *)(v32 + 24)], v9);
          return a1;
        }
        outlined destroy of Matrix3x3PB(v30, type metadata accessor for CMTimeProtobuf);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?)
                                  - 8)
                      + 64);
      v27 = (void *)v30;
      v28 = v31;
      goto LABEL_8;
    }
    outlined destroy of Matrix3x3PB(v13, type metadata accessor for HandEventCommon);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?)
                                - 8)
                    + 64);
    v27 = (void *)v13;
    v28 = v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
  *(_BYTE *)(v13 + 24) = v14[24];
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v19(v13 + *(int *)(v15 + 28), &v14[*(int *)(v15 + 28)], v9);
  v20 = *(int *)(v15 + 32);
  v21 = (_DWORD *)(v13 + v20);
  v22 = &v14[v20];
  v23 = type metadata accessor for CMTimeProtobuf(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[2] = *((_DWORD *)v22 + 2);
    v19((uint64_t)v21 + *(int *)(v23 + 24), &v22[*(int *)(v23 + 24)], v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandCameraTransitionEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D92750C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandCameraTransitionEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D9275BC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for HandCameraTransitionEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HandEventCommon?, (void (*)(uint64_t))type metadata accessor for HandEventCommon);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for HandEventCommon.EventStatus()
{
  return &type metadata for HandEventCommon.EventStatus;
}

uint64_t type metadata accessor for RepetitivePinchBasicFeature()
{
  return objc_opt_self();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg50105_s5Hands27RepetitivePinchBasicFeatureC25notFullyOccludedConditionySbAA23SingleHandFrameFeaturesV_SftFZSD6g4Vys5h9VSf_GSo18deF6VXEfU_5Hands0vwxY0VTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v16 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v16;
  v7 = (uint64_t *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 192);
  v9 = v8 + 32;
  v10 = *(_QWORD *)(v8 + 16);
  while (1)
  {
    v12 = *v7++;
    v11 = v12;
    if (v12 < 0)
      break;
    if (v11 >= v10)
      goto LABEL_10;
    v13 = *(_QWORD *)(v9 + 144 * v11 + 8);
    v14 = *(_QWORD *)(v16 + 16);
    v15 = *(_QWORD *)(v16 + 24);
    result = swift_bridgeObjectRetain();
    if (v14 >= v15 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v14 + 1, 1);
    *(_QWORD *)(v16 + 16) = v14 + 1;
    *(_QWORD *)(v16 + 8 * v14 + 32) = v13;
    if (!--v2)
      return v3;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized static RepetitivePinchBasicFeature.handPalmNormalForRepetitivePinch(_:)(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 < 7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 0xC)
LABEL_7:
    __break(1u);
  return result;
}

uint64_t specialized static RepetitivePinchBasicFeature.makeRangeCondition(_:_:)(uint64_t *a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 16);
  if (!v7)
  {
    __break(1u);
LABEL_10:
    swift_bridgeObjectRelease();
    v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v6, v2, 0, (2 * v3) | 1);
    goto LABEL_7;
  }
  v4 = a2;
  v3 = v7 - 1;
  v2 = v6 + 32;
  v5 = *(float *)(v6 + 32 + 4 * (v7 - 1));
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  swift_release();
  if (v9 != v3)
    goto LABEL_10;
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
LABEL_7:
  swift_bridgeObjectRelease();
  v11 = specialized Sequence<>.min()(v10);
  result = swift_release();
  if ((v11 & 0x100000000) == 0)
    return (float)(v5 - *(float *)&v11) >= v4;
  __break(1u);
  return result;
}

uint64_t specialized static RepetitivePinchBasicFeature.notFullyOccludedCondition(_:_:)(void *__src, float a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE __dst[592];

  memcpy(__dst, __src, 0x242uLL);
  outlined retain of SingleHandFrameFeatures((uint64_t)__dst);
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg50105_s5Hands27RepetitivePinchBasicFeatureC25notFullyOccludedConditionySbAA23SingleHandFrameFeaturesV_SftFZSD6g4Vys5h9VSf_GSo18deF6VXEfU_5Hands0vwxY0VTf1cn_nTf4ng_nTm((uint64_t)&outlined read-only object #0 of static RepetitivePinchBasicFeature.notFullyOccludedCondition(_:_:), (uint64_t)__dst);
  outlined release of SingleHandFrameFeatures((uint64_t)__dst);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v25 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v6 = 0;
    v7 = v25;
LABEL_3:
    v8 = 0;
    v9 = *(_QWORD *)(v3 + 32 + 8 * v6);
    v10 = v9 + 64;
    v11 = 1 << *(_BYTE *)(v9 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v9 + 64);
    ++v6;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = 1.0;
    while (1)
    {
      if (v13)
      {
        v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_37;
        }
        if (v19 >= v14)
        {
LABEL_29:
          v23 = *(_QWORD *)(v25 + 16);
          v22 = *(_QWORD *)(v25 + 24);
          if (v23 >= v22 >> 1)
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          *(_QWORD *)(v25 + 16) = v23 + 1;
          *(float *)(v25 + 4 * v23 + 32) = v15;
          if (v6 == v4)
          {
            swift_bridgeObjectRelease();
            goto LABEL_34;
          }
          goto LABEL_3;
        }
        v20 = *(_QWORD *)(v10 + 8 * v19);
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_29;
          v20 = *(_QWORD *)(v10 + 8 * v8);
          if (!v20)
          {
            v8 = v19 + 2;
            if (v19 + 2 >= v14)
              goto LABEL_29;
            v20 = *(_QWORD *)(v10 + 8 * v8);
            if (!v20)
            {
              v8 = v19 + 3;
              if (v19 + 3 >= v14)
                goto LABEL_29;
              v20 = *(_QWORD *)(v10 + 8 * v8);
              if (!v20)
              {
                v8 = v19 + 4;
                if (v19 + 4 >= v14)
                  goto LABEL_29;
                v20 = *(_QWORD *)(v10 + 8 * v8);
                if (!v20)
                {
                  v21 = v19 + 5;
                  if (v21 >= v14)
                    goto LABEL_29;
                  v20 = *(_QWORD *)(v10 + 8 * v21);
                  if (!v20)
                  {
                    while (1)
                    {
                      v8 = v21 + 1;
                      if (__OFADD__(v21, 1))
                        break;
                      if (v8 >= v14)
                        goto LABEL_29;
                      v20 = *(_QWORD *)(v10 + 8 * v8);
                      ++v21;
                      if (v20)
                        goto LABEL_28;
                    }
LABEL_37:
                    __break(1u);
LABEL_38:
                    __break(1u);
                    return result;
                  }
                  v8 = v21;
                }
              }
            }
          }
        }
LABEL_28:
        v13 = (v20 - 1) & v20;
        v17 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v18 = *(_QWORD *)(v9 + 56);
      if (*(float *)(v18 + 4 * v17) < v15)
        v15 = *(float *)(v18 + 4 * v17);
    }
  }
  swift_bridgeObjectRelease();
  v7 = MEMORY[0x24BEE4AF8];
LABEL_34:
  v24 = specialized Sequence<>.min()(v7);
  result = swift_bridgeObjectRelease();
  if ((v24 & 0x100000000) != 0)
    goto LABEL_38;
  return *(float *)&v24 <= a2;
}

uint64_t specialized static RepetitivePinchBasicFeature.notRecentPinchDown(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 - a2;
  if (__OFSUB__(v2, a2))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 < v3)
  {
LABEL_13:
    __break(1u);
    return 1;
  }
  if (v2 != v3)
  {
    v4 = a2 - 1;
    v5 = (unsigned __int8 *)(a1 + 592 * v2 - 548);
    while (v3 < v2)
    {
      if (v2-- < 1)
        goto LABEL_11;
      v7 = *v5;
      if ((v7 & 1) == 0)
      {
        v8 = v4--;
        v5 -= 592;
        if (v8)
          continue;
      }
      return v7 ^ 1u;
    }
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  return 1;
}

BOOL specialized static RepetitivePinchBasicFeature.movingTheSameDirection(_:_:)(_BOOL8 result, float32x4_t a2)
{
  unint64_t v2;
  int32x4_t *v3;
  uint64_t v4;
  float32x2_t v5;
  float v6;
  float32x2_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x2_t v11;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return 0;
  v3 = *(int32x4_t **)(592 * v2 + result + 32 - 392);
  if (v3[1].i64[0] < 7uLL)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(592 * v2 + result + 32 - 1576);
  if (*(_QWORD *)(v4 + 16) < 7uLL)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v8 = v3[14];
  v5.i32[0] = *(_DWORD *)(v4 + 232);
  v6 = *(float *)&v8.i32[1] - *(float *)(v4 + 228);
  v7.i32[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u32[0];
  v7.i32[1] = v8.i32[0];
  v5.i32[1] = *(_DWORD *)(v4 + 224);
  *(float32x2_t *)v8.i8 = vsub_f32(v7, v5);
  v9 = (float32x4_t)vuzp2q_s32(v8, vzip1q_s32(v8, v8));
  v9.f32[1] = v6;
  v10 = vmulq_f32(v9, a2);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0] < 0.0)return 0;
  v11 = vmul_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
  return sqrtf(v11.f32[0] + (float)(v11.f32[1] + (float)(v6 * v6))) > 0.01;
}

uint64_t specialized static RepetitivePinchBasicFeature.consecutiveMissCondition(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;

  v2 = a2 - 1;
  if (a2 >= 1)
  {
    if (a2 == 1)
      return 1;
    v3 = *(_QWORD *)(result + 16);
    v4 = (unsigned __int8 *)(result + 592 * (v3 >> 1) + 636);
    v5 = (v3 >> 1) + 1;
    while (v2)
    {
      if (v5 >= v3)
        goto LABEL_11;
      v6 = *v4;
      if ((v6 & 1) == 0)
      {
        v4 += 592;
        ++v5;
        if (--v2)
          continue;
      }
      return v6 ^ 1u;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL specialized static RepetitivePinchBasicFeature.notMovingAlongZ(_:_:_:)(_BOOL8 result, float a2, float a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  float *v7;
  unint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t v11;
  float v12;

  v3 = *(_QWORD *)(result + 16);
  v4 = v3 - 1;
  v5 = v3 >> 1;
  if (v3 >> 1 != v3)
  {
    v6 = 1.0 - a2;
    v7 = (float *)(result + 592 * v5 + 40);
    v8 = v3 >> 1;
    while (v8 < v3)
    {
      if (v6 >= *v7)
      {
        v4 = v8;
        goto LABEL_8;
      }
      ++v8;
      v7 += 148;
      if (v3 == v8)
        goto LABEL_8;
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_8:
  if (v4 >= v3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v9 = *(float32x4_t **)(result + 32 + 592 * v4 + 72);
  if (v9[1].i64[0] < 7uLL)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = *(float32x4_t **)(result + 32 + 592 * v5 + 72);
  if (v10[1].i64[0] < 7uLL)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v11 = vsubq_f32(v9[14], v10[14]);
  v12 = fabsf(v11.f32[2]);
  return (float)(fabsf(v11.f32[0]) * a3) >= v12 || (float)(fabsf(v11.f32[1]) * a3) >= v12;
}

void specialized static RepetitivePinchBasicFeature.isHdSharpIncrease(_:_:)(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    HandPose.getHoverDistanceVector()();
    if (v1 == 1)
      __break(1u);
    else
      HandPose.getHoverDistanceVector()();
  }
}

uint64_t specialized static RepetitivePinchBasicFeature.isTipHighlyVisible(_:_:)(void *__src, float a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE __dst[592];

  memcpy(__dst, __src, 0x242uLL);
  outlined retain of SingleHandFrameFeatures((uint64_t)__dst);
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg50105_s5Hands27RepetitivePinchBasicFeatureC25notFullyOccludedConditionySbAA23SingleHandFrameFeaturesV_SftFZSD6g4Vys5h9VSf_GSo18deF6VXEfU_5Hands0vwxY0VTf1cn_nTf4ng_nTm((uint64_t)&outlined read-only object #0 of static RepetitivePinchBasicFeature.isTipHighlyVisible(_:_:), (uint64_t)__dst);
  outlined release of SingleHandFrameFeatures((uint64_t)__dst);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v25 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v6 = 0;
    v7 = v25;
LABEL_3:
    v8 = 0;
    v9 = *(_QWORD *)(v3 + 32 + 8 * v6);
    v10 = v9 + 64;
    v11 = 1 << *(_BYTE *)(v9 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v9 + 64);
    ++v6;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = 1.0;
    while (1)
    {
      if (v13)
      {
        v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_37;
        }
        if (v19 >= v14)
        {
LABEL_29:
          v23 = *(_QWORD *)(v25 + 16);
          v22 = *(_QWORD *)(v25 + 24);
          if (v23 >= v22 >> 1)
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          *(_QWORD *)(v25 + 16) = v23 + 1;
          *(float *)(v25 + 4 * v23 + 32) = v15;
          if (v6 == v4)
          {
            swift_bridgeObjectRelease();
            goto LABEL_34;
          }
          goto LABEL_3;
        }
        v20 = *(_QWORD *)(v10 + 8 * v19);
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_29;
          v20 = *(_QWORD *)(v10 + 8 * v8);
          if (!v20)
          {
            v8 = v19 + 2;
            if (v19 + 2 >= v14)
              goto LABEL_29;
            v20 = *(_QWORD *)(v10 + 8 * v8);
            if (!v20)
            {
              v8 = v19 + 3;
              if (v19 + 3 >= v14)
                goto LABEL_29;
              v20 = *(_QWORD *)(v10 + 8 * v8);
              if (!v20)
              {
                v8 = v19 + 4;
                if (v19 + 4 >= v14)
                  goto LABEL_29;
                v20 = *(_QWORD *)(v10 + 8 * v8);
                if (!v20)
                {
                  v21 = v19 + 5;
                  if (v21 >= v14)
                    goto LABEL_29;
                  v20 = *(_QWORD *)(v10 + 8 * v21);
                  if (!v20)
                  {
                    while (1)
                    {
                      v8 = v21 + 1;
                      if (__OFADD__(v21, 1))
                        break;
                      if (v8 >= v14)
                        goto LABEL_29;
                      v20 = *(_QWORD *)(v10 + 8 * v8);
                      ++v21;
                      if (v20)
                        goto LABEL_28;
                    }
LABEL_37:
                    __break(1u);
LABEL_38:
                    __break(1u);
                    return result;
                  }
                  v8 = v21;
                }
              }
            }
          }
        }
LABEL_28:
        v13 = (v20 - 1) & v20;
        v17 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v18 = *(_QWORD *)(v9 + 56);
      if (*(float *)(v18 + 4 * v17) < v15)
        v15 = *(float *)(v18 + 4 * v17);
    }
  }
  swift_bridgeObjectRelease();
  v7 = MEMORY[0x24BEE4AF8];
LABEL_34:
  v24 = specialized Sequence<>.max()(v7);
  result = swift_bridgeObjectRelease();
  if ((v24 & 0x100000000) != 0)
    goto LABEL_38;
  return *(float *)&v24 < a2;
}

uint64_t specialized CircularBuffer.getLastNValues(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  return specialized CircularBuffer.getLastNValues(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:));
}

{
  return specialized CircularBuffer.getLastNValues(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:));
}

uint64_t specialized CircularBuffer.getLastNValues(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;

  v9 = *(_QWORD *)(a3 + 16);
  if (v9 >= a1)
    v10 = a1;
  else
    v10 = *(_QWORD *)(a3 + 16);
  if (v9 < a2)
  {
    v11 = v9 - v10;
    if (__OFSUB__(v9, v10))
    {
      __break(1u);
    }
    else
    {
      v12 = v10;
      if (v9 >= v11)
      {
        if ((v11 & 0x8000000000000000) == 0)
        {
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain_n();
          v13 = swift_dynamicCastClass();
          if (!v13)
          {
            swift_bridgeObjectRelease();
            v13 = MEMORY[0x24BEE4AF8];
          }
          v14 = *(_QWORD *)(v13 + 16);
          swift_release();
          if (v14 == v12)
            goto LABEL_28;
          goto LABEL_41;
        }
LABEL_40:
        __break(1u);
LABEL_41:
        swift_bridgeObjectRelease();
        v30 = a3 + 32;
        v31 = a3;
        v32 = v11;
        v33 = (2 * v9) | 1;
LABEL_53:
        v23 = a5(v31, v30, v32, v33);
        swift_bridgeObjectRelease();
        return v23;
      }
    }
    __break(1u);
    goto LABEL_40;
  }
  v16 = __OFSUB__(a4, v10);
  v17 = a4 - v10;
  if (v16)
  {
    __break(1u);
    goto LABEL_43;
  }
  v16 = __OFADD__(v17, v9);
  v18 = v17 + v9;
  if (v16)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (!v9)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (__OFSUB__(a4, 1))
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v6 = v18 % v9;
  if (a4 - 1 >= v18 % v9)
  {
    v24 = a4 - v6;
    if (a4 >= v6)
    {
      if ((v6 & 0x8000000000000000) == 0)
      {
        if (v9 >= a4)
        {
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain_n();
          v25 = swift_dynamicCastClass();
          if (!v25)
          {
            swift_bridgeObjectRelease();
            v25 = MEMORY[0x24BEE4AF8];
          }
          v26 = *(_QWORD *)(v25 + 16);
          swift_release();
          if (v26 == v24)
          {
LABEL_28:
            v23 = swift_dynamicCastClass();
            swift_bridgeObjectRelease();
            if (!v23)
            {
              swift_bridgeObjectRelease();
              return MEMORY[0x24BEE4AF8];
            }
            return v23;
          }
          goto LABEL_52;
        }
LABEL_51:
        __break(1u);
LABEL_52:
        swift_bridgeObjectRelease();
        v30 = a3 + 32;
        v31 = a3;
        v32 = v6;
        v33 = (2 * a4) | 1;
        goto LABEL_53;
      }
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v6 < 0)
    goto LABEL_46;
  if (a4 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v9 < (unint64_t)a4)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v20 = (2 * v9) | 1;
  v35 = a3 + 32;
  v21 = (2 * a4) | 1;
  v36 = v20;
  v22 = swift_bridgeObjectRetain();
  a6(v22, a3 + 32, 0, v21);
  if ((v36 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v28 = swift_dynamicCastClass();
    if (!v28)
    {
      swift_unknownObjectRelease();
      v28 = MEMORY[0x24BEE4AF8];
    }
    v29 = *(_QWORD *)(v28 + 16);
    swift_release();
    if (__OFSUB__(v36 >> 1, v6))
    {
      __break(1u);
    }
    else if (v29 == (v36 >> 1) - v6)
    {
      v23 = swift_dynamicCastClass();
      swift_unknownObjectRelease();
      if (v23)
        return v23;
      swift_unknownObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    swift_unknownObjectRelease();
  }
  v23 = a5(a3, v35, v6, v36);
  swift_unknownObjectRelease();
  return v23;
}

Swift::Void __swiftcall PinchAcceptorHighConfidencePinch.reset()()
{
  _QWORD *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;

  v1 = (char *)MEMORY[0x24BEE4AF8];
  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10, 0, MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  v0[7] = 10;
  v0[8] = v2;
  v0[9] = 0;
  swift_bridgeObjectRelease();
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10, 0, v1);
  swift_beginAccess();
  v0[10] = 10;
  v0[11] = v3;
  v0[12] = 0;
  swift_bridgeObjectRelease();
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10, 0, v1);
  swift_beginAccess();
  v0[13] = 10;
  v0[14] = v4;
  v0[15] = 0;
  swift_bridgeObjectRelease();
}

BOOL PinchAcceptorHighConfidencePinch.process(_:)(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;

  result = PinchAcceptorHighConfidencePinch.shouldMake(_:_:)(*(Swift::Float *)(a1 + 136), *(_BYTE *)(a1 + 474));
  *(_BYTE *)(v1 + 33) = result;
  *(_BYTE *)(v1 + 34) = result;
  return result;
}

Swift::Bool __swiftcall PinchAcceptorHighConfidencePinch.shouldMake(_:_:)(Swift::Float a1, Swift::Bool a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_QWORD *)(v2 + 64);
  v7 = *(_QWORD *)(v2 + 72);
  swift_bridgeObjectRetain();
  v8 = specialized CircularBuffer.getLastNValues(_:)(10, v5, v6, v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:));
  swift_bridgeObjectRelease();
  v9 = specialized Sequence<>.max()(v8);
  swift_bridgeObjectRelease();
  if ((v9 & 0x100000000) != 0)
    return 0;
  swift_beginAccess();
  v10 = *(_QWORD *)(v2 + 80);
  v11 = *(_QWORD *)(v2 + 88);
  v12 = *(_QWORD *)(v2 + 96);
  swift_bridgeObjectRetain();
  v13 = specialized CircularBuffer.getLastNValues(_:)(10, v10, v11, v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:));
  swift_bridgeObjectRelease();
  v14 = specialized Sequence<>.min()(v13);
  swift_bridgeObjectRelease();
  if ((v14 & 0x100000000) != 0)
    return 0;
  swift_beginAccess();
  v15 = *(_QWORD *)(v2 + 104);
  v16 = *(_QWORD *)(v2 + 112);
  v17 = *(_QWORD *)(v2 + 120);
  swift_bridgeObjectRetain();
  v18 = specialized CircularBuffer.getLastNValues(_:)(10, v15, v16, v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized ArraySlice.append<A>(contentsOf:));
  swift_bridgeObjectRelease();
  v19 = specialized Sequence<>.min()(v18);
  swift_bridgeObjectRelease();
  if ((v19 & 0x100000000) != 0
    || *(float *)(v2 + 140) > *(float *)&v9
    || *(float *)(v2 + 144) < *(float *)&v14
    || *(float *)(v2 + 148) <= *(float *)&v19
    || *(float *)(v2 + 136) >= a1)
  {
    return 0;
  }
  return a2;
}

uint64_t PinchAcceptorHighConfidencePinch.postProcess(_:_:)(uint64_t a1)
{
  float v1;
  float v2;
  unint64_t v3;
  float v4;

  v1 = *(float *)(a1 + 136);
  v2 = *(float *)(a1 + 360);
  v3 = specialized Sequence<>.max()(*(_QWORD *)(a1 + 400));
  if ((v3 & 0x100000000) != 0)
    v4 = 1.0;
  else
    v4 = *(float *)&v3;
  swift_beginAccess();
  specialized CircularBuffer.add(_:)(v2);
  swift_endAccess();
  swift_beginAccess();
  specialized CircularBuffer.add(_:)(v1);
  swift_endAccess();
  swift_beginAccess();
  specialized CircularBuffer.add(_:)(v4);
  return swift_endAccess();
}

uint64_t PinchAcceptorHighConfidencePinch.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PinchAcceptorHighConfidencePinch.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorHighConfidencePinch()
{
  return objc_opt_self();
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for PinchAcceptorHighConfidencePinch.ThresholdConfig()
{
  return &type metadata for PinchAcceptorHighConfidencePinch.ThresholdConfig;
}

uint64_t specialized PinchAcceptorHighConfidencePinch.init(_:_:)(uint64_t a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  *(_QWORD *)(a3 + 128) = 10;
  *(_OWORD *)(a3 + 136) = xmmword_23D9C1170;
  swift_retain();
  v6 = (char *)MEMORY[0x24BEE4AF8];
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10, 0, MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a3 + 56) = 10;
  *(_QWORD *)(a3 + 64) = v7;
  *(_QWORD *)(a3 + 72) = 0;
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10, 0, v6);
  *(_QWORD *)(a3 + 80) = 10;
  *(_QWORD *)(a3 + 88) = v8;
  *(_QWORD *)(a3 + 96) = 0;
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10, 0, v6);
  *(_QWORD *)(a3 + 104) = 10;
  *(_QWORD *)(a3 + 112) = v9;
  *(_QWORD *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 49) = 0;
  *(_QWORD *)(a3 + 16) = a1;
  *(_BYTE *)(a3 + 24) = a2 & 1;
  *(_WORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 34) = 0;
  *(_QWORD *)(a3 + 40) = a1;
  *(_BYTE *)(a3 + 48) = a2 & 1;
  return a3;
}

void MiddleDoubleTapEventLogger.generateStringFromEventBuffer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, char *);
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  Swift::String v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  uint64_t v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  void *v123;
  Swift::String v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  char *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v127 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v133 = (uint64_t)&v125 - v7;
  v139 = (char *)type metadata accessor for CMTimeProtobuf(0);
  v136 = *((_QWORD *)v139 - 1);
  MEMORY[0x24BDAC7A8](v139, v8);
  v128 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v125 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandEventCommon?);
  MEMORY[0x24BDAC7A8](v14, v15);
  v130 = (uint64_t)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v132 = (uint64_t)&v125 - v19;
  MEMORY[0x24BDAC7A8](v20, v21);
  v134 = (char *)&v125 - v22;
  MEMORY[0x24BDAC7A8](v23, v24);
  v26 = (char *)&v125 - v25;
  v27 = type metadata accessor for HandEventCommon(0);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27, v29);
  v129 = (uint64_t *)((char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v31, v32);
  v131 = (uint64_t *)((char *)&v125 - v33);
  MEMORY[0x24BDAC7A8](v34, v35);
  v126 = (uint64_t *)((char *)&v125 - v36);
  MEMORY[0x24BDAC7A8](v37, v38);
  v40 = (char *)&v125 - v39;
  v41 = type metadata accessor for HandCursorEvent(0);
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41, v43);
  v137 = (char *)&v125 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45, v46);
  v141 = (uint64_t)&v125 - v47;
  MEMORY[0x24BDAC7A8](v48, v49);
  v142 = (char *)&v125 - v50;
  MEMORY[0x24BDAC7A8](v51, v52);
  v54 = (char *)&v125 - v53;
  MEMORY[0x24BDAC7A8](v55, v56);
  v58 = (char *)&v125 - v57;
  v135 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  v59 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v59 + 16))
  {
    v138 = v42;
    v143 = (_QWORD *)((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    outlined init with copy of HandCursorEvent((uint64_t)v143 + v59, (uint64_t)v58);
    v140 = v41;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v58[*(int *)(v41 + 36)], (uint64_t)v26, &demangling cache variable for type metadata for HandEventCommon?);
    v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    if (v60(v26, 1, v27) == 1)
    {
      *(_QWORD *)v40 = 0;
      v40[8] = 1;
      *((_QWORD *)v40 + 2) = 0;
      v40[24] = 0;
      UnknownStorage.init()();
      v61 = v136;
      v62 = v139;
      (*(void (**)(char *, uint64_t, uint64_t, char *))(v136 + 56))(&v40[*(int *)(v27 + 32)], 1, 1, v139);
      outlined destroy of Coordinate3DPB?((uint64_t)v26, &demangling cache variable for type metadata for HandEventCommon?);
    }
    else
    {
      outlined init with take of Matrix2dPB((uint64_t)v26, (uint64_t)v40, type metadata accessor for HandEventCommon);
      v62 = v139;
      v61 = v136;
    }
    v63 = (uint64_t)v54;
    outlined destroy of Matrix3x3PB((uint64_t)v58, type metadata accessor for HandCursorEvent);
    v64 = v133;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v40[*(int *)(v27 + 32)], v133, &demangling cache variable for type metadata for CMTimeProtobuf?);
    v65 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v61 + 48);
    v66 = v61;
    if (v65(v64, 1, v62) == 1)
    {
      *(_QWORD *)v13 = 0;
      *((_DWORD *)v13 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v64, &demangling cache variable for type metadata for CMTimeProtobuf?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v64, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
    }
    outlined destroy of Matrix3x3PB((uint64_t)v40, type metadata accessor for HandEventCommon);
    v67 = v135;
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
    v68 = *(_QWORD *)(*v67 + 16);
    v69 = (uint64_t)v134;
    if (v68)
    {
      outlined init with copy of HandCursorEvent((uint64_t)v143 + *v67 + *(_QWORD *)(v138 + 72) * (v68 - 1), v63);
      outlined init with copy of (Int32, Matrix2dPB)(v63 + *(int *)(v140 + 36), v69, &demangling cache variable for type metadata for HandEventCommon?);
      if (v60((char *)v69, 1, v27) == 1)
      {
        v70 = v126;
        *v126 = 0;
        *((_BYTE *)v70 + 8) = 1;
        v70[2] = 0;
        *((_BYTE *)v70 + 24) = 0;
        UnknownStorage.init()();
        (*(void (**)(char *, uint64_t, uint64_t, char *))(v61 + 56))((char *)v70 + *(int *)(v27 + 32), 1, 1, v62);
        outlined destroy of Coordinate3DPB?(v69, &demangling cache variable for type metadata for HandEventCommon?);
      }
      else
      {
        v70 = v126;
        outlined init with take of Matrix2dPB(v69, (uint64_t)v126, type metadata accessor for HandEventCommon);
      }
      v71 = (uint64_t)v128;
      v72 = (uint64_t)v127;
      outlined destroy of Matrix3x3PB(v63, type metadata accessor for HandCursorEvent);
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v70 + *(int *)(v27 + 32), v72, &demangling cache variable for type metadata for CMTimeProtobuf?);
      if (v65(v72, 1, v62) == 1)
      {
        *(_QWORD *)v71 = 0;
        *(_DWORD *)(v71 + 8) = 0;
        UnknownStorage.init()();
        outlined destroy of Coordinate3DPB?(v72, &demangling cache variable for type metadata for CMTimeProtobuf?);
      }
      else
      {
        outlined init with take of Matrix2dPB(v72, v71, type metadata accessor for CMTimeProtobuf);
      }
      outlined destroy of Matrix3x3PB((uint64_t)v70, type metadata accessor for HandEventCommon);
      outlined destroy of Matrix3x3PB(v71, type metadata accessor for CMTimeProtobuf);
    }
    v145 = 0;
    v146 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v73._countAndFlagsBits = 0xD000000000000016;
    v73._object = (void *)0x800000023D9DA9A0;
    String.append(_:)(v73);
    Float.write<A>(to:)();
    v74._countAndFlagsBits = 0x54646E65206F7420;
    v74._object = (void *)0xED0000203A656D69;
    String.append(_:)(v74);
    Float.write<A>(to:)();
    v75._countAndFlagsBits = 0x4449646E6168202CLL;
    v75._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v75);
    if (!*(_QWORD *)(*v67 + 16))
    {
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      return;
    }
    v76 = (uint64_t)v142;
    outlined init with copy of HandCursorEvent((uint64_t)v143 + *v67, (uint64_t)v142);
    v77 = v140;
    v78 = v132;
    outlined init with copy of (Int32, Matrix2dPB)(v76 + *(int *)(v140 + 36), v132, &demangling cache variable for type metadata for HandEventCommon?);
    if (v60((char *)v78, 1, v27) == 1)
    {
      v79 = v131;
      *v131 = 0;
      *((_BYTE *)v79 + 8) = 1;
      v79[2] = 0;
      *((_BYTE *)v79 + 24) = 0;
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, char *))(v66 + 56))((char *)v79 + *(int *)(v27 + 32), 1, 1, v62);
      outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for HandEventCommon?);
    }
    else
    {
      v79 = v131;
      outlined init with take of Matrix2dPB(v78, (uint64_t)v131, type metadata accessor for HandEventCommon);
    }
    outlined destroy of Matrix3x3PB((uint64_t)v142, type metadata accessor for HandCursorEvent);
    v80 = v79[2];
    outlined destroy of Matrix3x3PB((uint64_t)v79, type metadata accessor for HandEventCommon);
    v144 = v80;
    v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    v82._countAndFlagsBits = 0x7466654C7369202CLL;
    v82._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v82);
    if (!*(_QWORD *)(*v67 + 16))
      goto LABEL_57;
    v83 = v141;
    outlined init with copy of HandCursorEvent((uint64_t)v143 + *v67, v141);
    v84 = v130;
    outlined init with copy of (Int32, Matrix2dPB)(v83 + *(int *)(v77 + 36), v130, &demangling cache variable for type metadata for HandEventCommon?);
    if (v60((char *)v84, 1, v27) == 1)
    {
      v85 = v129;
      *v129 = 0;
      *((_BYTE *)v85 + 8) = 1;
      v85[2] = 0;
      *((_BYTE *)v85 + 24) = 0;
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, char *))(v66 + 56))((char *)v85 + *(int *)(v27 + 32), 1, 1, v62);
      outlined destroy of Coordinate3DPB?(v84, &demangling cache variable for type metadata for HandEventCommon?);
    }
    else
    {
      v85 = v129;
      outlined init with take of Matrix2dPB(v84, (uint64_t)v129, type metadata accessor for HandEventCommon);
    }
    v87 = (uint64_t)v137;
    v86 = v138;
    outlined destroy of Matrix3x3PB(v141, type metadata accessor for HandCursorEvent);
    v88 = *((unsigned __int8 *)v85 + 24);
    outlined destroy of Matrix3x3PB((uint64_t)v85, type metadata accessor for HandEventCommon);
    if (v88)
      v89 = 1702195828;
    else
      v89 = 0x65736C6166;
    if (v88)
      v90 = 0xE400000000000000;
    else
      v90 = 0xE500000000000000;
    v91 = v90;
    String.append(_:)(*(Swift::String *)&v89);
    swift_bridgeObjectRelease();
    v92._countAndFlagsBits = 8236;
    v92._object = (void *)0xE200000000000000;
    String.append(_:)(v92);
    v134 = v145;
    v136 = v146;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>);
    v93 = (_QWORD *)swift_allocObject();
    *((_OWORD *)v93 + 1) = xmmword_23D9A70A0;
    v94 = (char *)MEMORY[0x24BEE4AF8];
    v93[4] = MEMORY[0x24BEE4AF8];
    v95 = *v67;
    v141 = *(_QWORD *)(*v67 + 16);
    if (v141)
    {
      v139 = (char *)v143 + v95;
      v96 = swift_bridgeObjectRetain();
      v97 = 0;
      v98 = v94;
      v140 = v96;
      while (v97 < *(_QWORD *)(v96 + 16))
      {
        outlined init with copy of HandCursorEvent((uint64_t)&v139[*(_QWORD *)(v86 + 72) * v97], v87);
        v99 = *(_DWORD *)(v87 + 4);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v94 + 2) + 1, 1, v94);
        v101 = *((_QWORD *)v94 + 2);
        v100 = *((_QWORD *)v94 + 3);
        v143 = v93;
        if (v101 >= v100 >> 1)
          v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v100 > 1), v101 + 1, 1, v94);
        *((_QWORD *)v94 + 2) = v101 + 1;
        *(_DWORD *)&v94[4 * v101 + 32] = v99;
        v102 = *(_DWORD *)(v87 + 8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v98 + 2) + 1, 1, v98);
        v104 = *((_QWORD *)v98 + 2);
        v103 = *((_QWORD *)v98 + 3);
        if (v104 >= v103 >> 1)
          v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v103 > 1), v104 + 1, 1, v98);
        *((_QWORD *)v98 + 2) = v104 + 1;
        v142 = v98;
        *(_DWORD *)&v98[4 * v104 + 32] = v102;
        v105 = *(_QWORD *)(v87 + 16);
        v106 = *(_QWORD *)(v105 + 16);
        if (v106)
        {
          v145 = (char *)MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v106, 0);
          v107 = v145;
          v108 = 32;
          do
          {
            v109 = *(_QWORD *)(v105 + v108);
            v145 = v107;
            v111 = *((_QWORD *)v107 + 2);
            v110 = *((_QWORD *)v107 + 3);
            if (v111 >= v110 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
              v107 = v145;
            }
            *((_QWORD *)v107 + 2) = v111 + 1;
            *(_QWORD *)&v107[8 * v111 + 32] = v109;
            v108 += 16;
            --v106;
          }
          while (v106);
          swift_bridgeObjectRelease();
          v87 = (uint64_t)v137;
          v86 = v138;
        }
        else
        {
          v107 = (char *)MEMORY[0x24BEE4AF8];
        }
        v93 = v143;
        v113 = v143[2];
        v112 = v143[3];
        if (v113 >= v112 >> 1)
          v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v112 > 1), v113 + 1, 1, v143);
        ++v97;
        v93[2] = v113 + 1;
        v93[v113 + 4] = v107;
        outlined destroy of Matrix3x3PB(v87, type metadata accessor for HandCursorEvent);
        v98 = v142;
        v96 = v140;
        if (v97 == v141)
        {
          swift_bridgeObjectRelease();
          goto LABEL_54;
        }
      }
      __break(1u);
      goto LABEL_56;
    }
    v98 = v94;
LABEL_54:
    v145 = 0;
    v146 = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v114._countAndFlagsBits = 0x6F48656C6464696DLL;
    v114._object = (void *)0xEE00203A73726576;
    String.append(_:)(v114);
    v115._countAndFlagsBits = MEMORY[0x2426374F8](v94, MEMORY[0x24BEE14E8]);
    String.append(_:)(v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v116._countAndFlagsBits = 0xD000000000000019;
    v116._object = (void *)0x800000023D9DA9C0;
    String.append(_:)(v116);
    v117._countAndFlagsBits = MEMORY[0x2426374F8](v98, MEMORY[0x24BEE44F0]);
    String.append(_:)(v117);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v118._object = (void *)0x800000023D9DA9E0;
    v118._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v118);
    v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    v120._countAndFlagsBits = MEMORY[0x2426374F8](v93, v119);
    String.append(_:)(v120);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v121._countAndFlagsBits = 46;
    v121._object = (void *)0xE100000000000000;
    String.append(_:)(v121);
    v122 = (uint64_t)v145;
    v123 = (void *)v146;
    v145 = v134;
    v146 = v136;
    swift_bridgeObjectRetain();
    v124._countAndFlagsBits = v122;
    v124._object = v123;
    String.append(_:)(v124);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t MiddleDoubleTapEventLogger.recordHandCursorEvent(withHand:withInternalData:withStateDetectionResult:atTime:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v11 = type metadata accessor for HandCursorEvent(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static HandCursorEvent.generateEvent(hand:timestamp:middleHover:middleDoubleTapState:doubleTapDetected:activeSuppressors:)(a1, a4, a5, *(_DWORD *)(a2 + 4), a3, *(_QWORD *)(a2 + 8), (uint64_t)v15, *(float *)a2);
  v16 = (unint64_t *)(v5 + 24);
  swift_beginAccess();
  v17 = *v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v16 = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    *v16 = v17;
  }
  v20 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  if (v20 >= v19 >> 1)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
    *v16 = v17;
  }
  *(_QWORD *)(v17 + 16) = v20 + 1;
  outlined init with take of Matrix2dPB((uint64_t)v15, v17+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v20, type metadata accessor for HandCursorEvent);
  v21 = *v16;
  result = swift_endAccess();
  if (*(_QWORD *)(v21 + 16) >= 0x1FuLL)
  {
    result = swift_beginAccess();
    if (!*(_QWORD *)(*v16 + 16))
    {
      __break(1u);
      return result;
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    result = swift_endAccess();
  }
  if ((a3 & 1) != 0)
  {
    MiddleDoubleTapEventLogger.generateStringFromEventBuffer()();
    v25[3] = MEMORY[0x24BEE0D00];
    v25[0] = v23;
    v25[1] = v24;
    specialized static HLog.I(file:function:line:_:_:)(0xD00000000000008BLL, 0x800000023D9DA910, 79, (uint64_t)v25, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  }
  return result;
}

void MiddleDoubleTapEventLogger.recordCoreAnalytics(withHand:withInternalData:atTime:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDecimal *v5;
  uint64_t v6;
  uint64_t v7;
  NSDecimal *v8;
  Swift::Int v9;
  NSDecimal *v10;
  NSDecimalNumber *v11;
  void *v12;
  void *v13;
  id v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t inited;
  uint64_t v21;
  double v22;
  void *v23;
  Class isa;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = 32;
    while (1)
    {
      NSDecimal.init(integerLiteral:)(v5, 2);
      pow(_:_:)(v10, v8, v9);
      NSDecimal._bridgeToObjectiveC()(v11);
      v13 = v12;
      v14 = objc_msgSend(v12, sel_integerValue);

      v15 = __OFADD__(v6, v14);
      v6 += (uint64_t)v14;
      if (v15)
        break;
      v7 += 16;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        CMTime.seconds.getter();
        v17 = v16;
        v18 = *(double *)(v2 + 16);
        v3 = a1;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  CMTime.seconds.getter();
  v17 = v19;
  v18 = *(double *)(v2 + 16);
  *(double *)(v2 + 16) = v19;
LABEL_7:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 40) = 0x800000023D9DA8D0;
  if (*(_BYTE *)(v3 + 138) == 2)
    goto LABEL_13;
  v21 = inited;
  if (v18 == 0.0)
    v22 = 0.0;
  else
    v22 = v17 - v18;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(v21 + 56) = 0xD000000000000010;
  *(_QWORD *)(v21 + 64) = 0x800000023D9CCB60;
  *(NSNumber *)(v21 + 72) = Int._bridgeToObjectiveC()();
  strcpy((char *)(v21 + 80), "is_left_hand");
  *(_BYTE *)(v21 + 93) = 0;
  *(_WORD *)(v21 + 94) = -5120;
  *(NSNumber *)(v21 + 96) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(v21 + 104) = 0xD000000000000018;
  *(_QWORD *)(v21 + 112) = 0x800000023D9DA8F0;
  *(_QWORD *)(v21 + 120) = MEMORY[0x2426375B8](v22);
  specialized Dictionary.init(dictionaryLiteral:)(v21);
  v23 = (void *)MEMORY[0x2426372E8](0xD000000000000027, 0x800000023D9DA8A0);
  type metadata accessor for NSObject();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  AnalyticsSendEvent();

}

uint64_t type metadata accessor for MiddleDoubleTapEventLogger()
{
  return objc_opt_self();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandyLoggerSinkProtocolNeo);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for HandCursorEvent(0) - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[16 * a1 + 32];
    v15 = &v4[16 * a2 + 32];
    if (a1 != a2 || result >= &v15[16 * v14])
      result = (char *)memmove(result, v15, 16 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[4 * a1 + 32];
    v15 = &v4[4 * a2 + 32];
    if (a1 != a2 || result >= &v15[4 * v14])
      result = (char *)memmove(result, v15, 4 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_24;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_24;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_30;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[80 * a1 + 32];
    v15 = &v4[80 * a2 + 32];
    v16 = 80 * v14;
    if (80 * a1 < 80 * a2 || (result < &v15[v16] ? (v17 = a1 == a2) : (v17 = 0), !v17))
      result = (char *)memmove(result, v15, v16);
    v18 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v18, v8);
    v19 = v18 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v19;
LABEL_24:
      *v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[8 * a1 + 32];
    v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14])
      result = (char *)memmove(result, v15, 8 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[48 * a1 + 32];
    v15 = &v4[48 * a2 + 32];
    if (a1 != a2 || result >= &v15[48 * v14])
      result = (char *)memmove(result, v15, 48 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of HandCursorEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandCursorEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall Tracking3D.resetTrackingState(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  CMTimeEpoch epoch;
  uint64_t v4;
  CMTime v5;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  v2 = MEMORY[0x24BEE4AF8];
  if (!a1)
  {
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = v2;
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v1 + 520) = 0x7FFFFFFFFFFFFFFFLL;
  swift_beginAccess();
  TrackingIntermediateData.clear()();
  swift_endAccess();
  CMTimeMake(&v5, 0, 1);
  epoch = v5.epoch;
  v4 = *(_QWORD *)&v5.timescale;
  *(_QWORD *)(v1 + 544) = v5.value;
  *(_QWORD *)(v1 + 552) = v4;
  *(_QWORD *)(v1 + 560) = epoch;
  *(_QWORD *)(v1 + 568) = v2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 760) = 0;
  *(_BYTE *)(v1 + 764) = 1;
}

Swift::Void __swiftcall Tracking3D.reconfigTracking(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  HandsKitConfig *v7;
  id v8;
  _QWORD *v9;
  HandsKitConfig *v10;
  NSArray *v11;
  uint64_t v12;
  int64_t v13;
  void **v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  char v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  HandsKitConfig *v25;
  uint64_t v26;
  unsigned int v27;
  Swift::String v28;
  HandsKitConfig *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  Swift::String v36;
  unsigned int v37;
  int v38;
  int v39;
  HandsKitConfig *v40;
  _QWORD v41[4];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD __src[29];
  _OWORD __dst[30];

  v2 = v1;
  type metadata accessor for MiddleDoubleTapPostProcessing();
  v4 = swift_allocObject();
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 16) = MEMORY[0x24BEE4AF8];
  v6 = objc_allocWithZone((Class)HandsKitConfig);
  v7 = a1;
  v8 = objc_msgSend(v6, sel_init);
  *(_BYTE *)(v4 + 32) = 0;
  type metadata accessor for MiddleDoubleTapEventLogger();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = v5;
  v9[4] = 30;
  *(_QWORD *)(v4 + 40) = v9;
  *(_QWORD *)(v4 + 24) = v7;
  v10 = v7;

  MiddleDoubleTapPostProcessing.reset()();
  *(_QWORD *)(v2 + 800) = v4;
  swift_release();
  v11 = -[HandsKitConfig GTInjections](v10, sel_GTInjections);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v40 = v10;
    *(_QWORD *)&v42 = v5;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v14 = (void **)(v12 + 40);
    do
    {
      v15 = (uint64_t)*(v14 - 1);
      v16 = *v14;
      swift_bridgeObjectRetain();
      v17._countAndFlagsBits = v15;
      v17._object = v16;
      switch(_findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Tracking3D.reconfigTracking(_:), v17))
      {
        case 0:
          goto LABEL_6;
        case 1:
          swift_bridgeObjectRelease();
          v18 = 1;
          break;
        case 2:
          swift_bridgeObjectRelease();
          v18 = 2;
          break;
        case 3:
          swift_bridgeObjectRelease();
          v18 = 3;
          break;
        default:
          *(_QWORD *)&__dst[0] = 0;
          *((_QWORD *)&__dst[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          *(_QWORD *)&__dst[0] = 0xD00000000000001DLL;
          *((_QWORD *)&__dst[0] + 1) = 0x800000023D9C9390;
          v19._countAndFlagsBits = v15;
          v19._object = v16;
          String.append(_:)(v19);
          *((_QWORD *)&__dst[1] + 1) = MEMORY[0x24BEE0D00];
          type metadata accessor for HandyLoggerNeo();
          memset(__src, 0, 32);
          static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)__src, 0xD00000000000005ELL, 0x800000023D9CB6A0, 80, (uint64_t)__dst, MEMORY[0x24BEE4AF8]);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
LABEL_6:
          swift_bridgeObjectRelease();
          v18 = 0;
          break;
      }
      v20 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1);
        v20 = v42;
      }
      v22 = *(_QWORD *)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v20 = v42;
      }
      v14 += 2;
      *(_QWORD *)(v20 + 16) = v22 + 1;
      *(_BYTE *)(v20 + v22 + 32) = v18;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    v10 = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
  }
  v23 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v23 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v24 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v23 + 32));
    if (((*(_QWORD *)(v23 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
      __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  Tracking3D.resetTrackingState(_:)((-[HandsKitConfig EnableEnrolment](v10, sel_EnableEnrolment) ^ *(_BYTE *)(v2 + 817)) & 1);
  *(_BYTE *)(v2 + 817) = -[HandsKitConfig EnableEnrolment](v10, sel_EnableEnrolment);
  type metadata accessor for DetectionScheduler();
  swift_allocObject();
  *(_QWORD *)(v2 + 48) = DetectionScheduler.init()();
  swift_release();
  type metadata accessor for DetectionResultSync();
  swift_allocObject();
  v25 = v10;
  v26 = specialized DetectionResultSync.init(config:)(v25);

  *(_QWORD *)(v2 + 536) = v26;
  swift_release();
  type metadata accessor for MissingFingerReconstruction();
  swift_allocObject();
  *(_QWORD *)(v2 + 808) = MissingFingerReconstruction.init()();
  swift_release();
  *(_BYTE *)(v2 + 816) = -[HandsKitConfig EnableMissingFinger](v25, sel_EnableMissingFinger);
  *(_BYTE *)(v2 + 528) = -[HandsKitConfig SerializeInternalData](v25, sel_SerializeInternalData);
  v27 = -[HandsKitConfig DisabledHand](v25, sel_DisabledHand);
  *(_DWORD *)(v2 + 824) = v27;
  if (v27)
  {
    __dst[0] = xmmword_23D9B03A0;
    __dst[1] = 0uLL;
    *(_QWORD *)&__src[0] = 0;
    *((_QWORD *)&__src[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    v28._countAndFlagsBits = 0xD00000000000002ALL;
    v28._object = (void *)0x800000023D9DB000;
    String.append(_:)(v28);
    LODWORD(v42) = *(_DWORD *)(v2 + 824);
    type metadata accessor for DisabledHandConfig(0);
    _print_unlocked<A, B>(_:_:)();
    *((_QWORD *)&__src[1] + 1) = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005ELL, 0x800000023D9CB6A0, 99, (uint64_t *)__dst, (uint64_t)__src, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)__src);
  }
  v29 = v25;
  TrackingConfig.init(_:)(v29, __src);
  memcpy(__dst, (const void *)(v2 + 56), 0x1CCuLL);
  memcpy((void *)(v2 + 56), __src, 0x1CCuLL);
  outlined release of TrackingConfig((uint64_t)__dst);
  swift_retain();
  DetectionScheduler.reconfig(_:)(v29);
  swift_release();
  v30 = (double)-[HandsKitConfig NumCachedPoseForBoneLength](v29, sel_NumCachedPoseForBoneLength) * 1.2;
  if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v30 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v30 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  *(_QWORD *)(v2 + 776) = (uint64_t)v30;
  v31 = (double)(uint64_t)v30;
  v32 = v31 * 0.1;
  if ((~COERCE__INT64(v31 * 0.1) & 0x7FF0000000000000) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v32 >= 9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  *(_QWORD *)(v2 + 784) = (uint64_t)v32;
  v33 = v31 * 0.9;
  if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v33 <= -9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v33 >= 9.22337204e18)
  {
LABEL_43:
    __break(1u);
    JUMPOUT(0x23D92B278);
  }
  *(_QWORD *)(v2 + 792) = (uint64_t)v33;
  -[HandsKitConfig DetectionAvgBoneLengthOverride](v29, sel_DetectionAvgBoneLengthOverride);
  if (v34 > 0.0)
  {
    -[HandsKitConfig DetectionAvgBoneLengthOverride](v29, sel_DetectionAvgBoneLengthOverride);
    *(float *)&v35 = v35;
    *(_DWORD *)(v2 + 760) = LODWORD(v35);
    *(_BYTE *)(v2 + 764) = 0;
    v42 = xmmword_23D9B03A0;
    v43 = 0;
    v44 = 0;
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    v36._countAndFlagsBits = 0xD000000000000025;
    v36._object = (void *)0x800000023D9DB030;
    String.append(_:)(v36);
    -[HandsKitConfig DetectionAvgBoneLengthOverride](v29, sel_DetectionAvgBoneLengthOverride);
    Double.write<A>(to:)();
    v41[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005ELL, 0x800000023D9CB6A0, 110, (uint64_t *)&v42, (uint64_t)v41, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
  }
  swift_beginAccess();
  *(_QWORD *)(v2 + 768) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  *(_DWORD *)(v2 + 828) = -[HandsKitConfig PosePipelineType](v29, sel_PosePipelineType);
  v37 = -[HandsKitConfig PosePipelineType](v29, sel_PosePipelineType);
  *(_BYTE *)(v2 + 832) = v37 != 2;
  -[HandsKitConfig WristStdDevLowerThreshold](v29, sel_WristStdDevLowerThreshold);
  *(_DWORD *)(v2 + 836) = v38;
  -[HandsKitConfig WristStdDevUpperThreshold](v29, sel_WristStdDevUpperThreshold);
  *(_DWORD *)(v2 + 840) = v39;
  if (v37 == 2)
  {
    *(_DWORD *)(v2 + 296) = 1084227584;
    *(_BYTE *)(v2 + 460) = 0;
    *(_BYTE *)(v2 + 228) = 0;
  }
}

void Tracking3D.configEnrollment(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  __int128 v4;
  float v5;
  float v6;
  float v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_OWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 16))
  {
    if (v3)
      goto LABEL_17;
    v5 = 0.0;
  }
  else
  {
    v14 = *(_OWORD *)(a1 + 40);
    v18 = *(_OWORD *)(a1 + 24);
    v6 = specialized static HandsKitUtils.calcAvgBoneLength(fromEnrollData:)((uint64_t *)&v18);
    v5 = v6;
    if (v3)
    {
      if (v6 > 0.0)
      {
LABEL_12:
        *(float *)(v2 + 760) = v5;
        *(_BYTE *)(v2 + 764) = 0;
        v18 = xmmword_23D9B03A0;
        v19 = 0;
        v20 = 0;
        v15 = 0;
        v16 = 0xE000000000000000;
        _StringGuts.grow(_:)(90);
        v11._countAndFlagsBits = 0xD000000000000058;
        v11._object = (void *)0x800000023D9DAF40;
        String.append(_:)(v11);
        if ((*(_BYTE *)(v2 + 764) & 1) == 0)
        {
          Float.write<A>(to:)();
          v17 = MEMORY[0x24BEE0D00];
          v9 = MEMORY[0x24BEE4AF8];
          v10 = 141;
          goto LABEL_19;
        }
        goto LABEL_21;
      }
LABEL_17:
      strcpy((char *)(v2 + 760), "1\b,=");
      v18 = xmmword_23D9B03A0;
      v19 = 0;
      v20 = 0;
      v15 = 0;
      v16 = 0xE000000000000000;
      _StringGuts.grow(_:)(94);
      v13._countAndFlagsBits = 0xD00000000000005CLL;
      v13._object = (void *)0x800000023D9DAE80;
      String.append(_:)(v13);
      if ((*(_BYTE *)(v2 + 764) & 1) == 0)
      {
        Float.write<A>(to:)();
        v17 = MEMORY[0x24BEE0D00];
        v9 = MEMORY[0x24BEE4AF8];
        v10 = 147;
        goto LABEL_19;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v4 = v14;
  }
  v18 = v4;
  v7 = specialized static HandsKitUtils.calcAvgBoneLength(fromEnrollData:)((uint64_t *)&v18);
  if (v5 > 0.0)
  {
    if (v7 > 0.0)
    {
      *(float *)(v2 + 760) = (float)(v5 + v7) * 0.5;
      *(_BYTE *)(v2 + 764) = 0;
      v18 = xmmword_23D9B03A0;
      v19 = 0;
      v20 = 0;
      v15 = 0;
      v16 = 0xE000000000000000;
      _StringGuts.grow(_:)(86);
      v8._countAndFlagsBits = 0xD000000000000054;
      v8._object = (void *)0x800000023D9DAFA0;
      String.append(_:)(v8);
      if ((*(_BYTE *)(v2 + 764) & 1) == 0)
      {
        Float.write<A>(to:)();
        v17 = MEMORY[0x24BEE0D00];
        v9 = MEMORY[0x24BEE4AF8];
        v10 = 138;
LABEL_19:
        specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005ELL, 0x800000023D9CB6A0, v10, (uint64_t *)&v18, (uint64_t)&v15, v9);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v15);
        return;
      }
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (v7 <= 0.0)
    goto LABEL_17;
  *(float *)(v2 + 760) = v7;
  *(_BYTE *)(v2 + 764) = 0;
  v18 = xmmword_23D9B03A0;
  v19 = 0;
  v20 = 0;
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(91);
  v12._countAndFlagsBits = 0xD000000000000059;
  v12._object = (void *)0x800000023D9DAEE0;
  String.append(_:)(v12);
  if ((*(_BYTE *)(v2 + 764) & 1) == 0)
  {
    Float.write<A>(to:)();
    v17 = MEMORY[0x24BEE0D00];
    v9 = MEMORY[0x24BEE4AF8];
    v10 = 144;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
}

uint64_t *Tracking3D.runSync(withInput:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  Swift::String v49;
  char v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  char v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  _QWORD *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _QWORD *v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  _OWORD *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  unsigned __int8 *v161;
  _OWORD v162[9];
  uint64_t v163;
  unsigned __int8 v164;
  __int128 v165;
  uint64_t v166;
  char v167;
  _BYTE v168[32];
  _QWORD v169[58];
  __int128 v170;
  uint64_t v171;
  uint64_t v172[2];
  uint64_t *v173[69];
  uint64_t v174[3];
  _QWORD v175[2];
  _OWORD v176[35];
  uint64_t v177[70];
  _BYTE v178[464];
  _OWORD v179[11];
  _OWORD v180[35];
  _QWORD v181[70];
  _OWORD v182[11];
  _OWORD v183[36];

  MEMORY[0x24BDAC7A8](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v6 + 396;
  v9 = type metadata accessor for HandDescriptor();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v141 = (char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v135 - v15;
  memcpy(v183, v5, 0x228uLL);
  v161 = (unsigned __int8 *)(v3 + 528);
  if (*(_BYTE *)(v3 + 576) == 1)
  {
    v17 = *(_QWORD *)&v183[10];
    swift_retain();
    outlined retain of HandsKitData(v183);
    v18 = swift_bridgeObjectRetain();
    v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands14HandDescriptorVG_AHs5NeverOTg5061_s5Hands10Tracking3DC7runSync9withInputAA0A7KitDataVAG_tFAA14eF8VAIXEfU_AF0J1DCTf1cn_nTf4ng_n(v18, v3);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v20 = *((_QWORD *)&v183[4] + 1);
    result = (uint64_t *)LOBYTE(v183[5]);
    v22 = DWORD1(v183[5]);
    v23 = *(_QWORD *)&v183[8];
    v24 = *((_QWORD *)&v183[10] + 1);
    v25 = v183[11];
    v26 = *((_QWORD *)&v183[11] + 1);
    v27 = v183[14];
    v28 = v183[15];
    v29 = v183[16];
    v30 = v183[17];
    v31 = v183[18];
    v32 = v183[19];
    v33 = *((_QWORD *)&v183[22] + 1);
    v34 = *(_QWORD *)&v183[24];
    v35 = *(_QWORD *)((char *)&v183[24] + 12);
    v36 = DWORD1(v183[25]);
    v37 = DWORD2(v183[25]);
    v38 = v183[29];
    v39 = *(_OWORD *)((char *)&v183[29] + 8);
    v40 = *((_QWORD *)&v183[30] + 1);
    v41 = v183[33];
    v42 = *(_QWORD *)&v183[34];
    LOBYTE(v181[0]) = v183[5];
    LOBYTE(v180[0]) = BYTE8(v183[8]);
    LOBYTE(v177[0]) = BYTE8(v183[24]);
    LOBYTE(v176[0]) = BYTE12(v183[27]);
    *(_QWORD *)v7 = v19;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)((char *)v183 + 8);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)((char *)&v183[1] + 8);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)((char *)&v183[2] + 8);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)((char *)&v183[3] + 8);
    *((_QWORD *)v7 + 9) = v20;
    v7[80] = (char)result;
    *((_DWORD *)v7 + 21) = v22;
    *((_QWORD *)v7 + 11) = *((_QWORD *)&v183[5] + 1);
    v43 = v183[7];
    *((_OWORD *)v7 + 6) = v183[6];
    *((_OWORD *)v7 + 7) = v43;
    *((_QWORD *)v7 + 16) = v23;
    v7[136] = v180[0];
    *((_OWORD *)v7 + 9) = v183[9];
    *((_QWORD *)v7 + 20) = v17;
    *((_QWORD *)v7 + 21) = v24;
    *((_DWORD *)v7 + 44) = v25;
    *((_QWORD *)v7 + 23) = v26;
    v44 = v183[13];
    *((_OWORD *)v7 + 12) = v183[12];
    *((_OWORD *)v7 + 13) = v44;
    *((_OWORD *)v7 + 14) = v27;
    *((_OWORD *)v7 + 15) = v28;
    *((_OWORD *)v7 + 16) = v29;
    *((_OWORD *)v7 + 17) = v30;
    *((_OWORD *)v7 + 18) = v31;
    *((_OWORD *)v7 + 19) = v32;
    v45 = v183[21];
    *((_OWORD *)v7 + 20) = v183[20];
    *((_OWORD *)v7 + 21) = v45;
    *((_QWORD *)v7 + 44) = *(_QWORD *)&v183[22];
    *((_QWORD *)v7 + 45) = v33;
    *((_OWORD *)v7 + 23) = v183[23];
    *((_QWORD *)v7 + 48) = v34;
    v7[392] = v177[0];
    *(_QWORD *)v8 = v35;
    *((_DWORD *)v7 + 101) = v36;
    *((_DWORD *)v7 + 102) = v37;
    v46 = *(_OWORD *)((char *)&v183[26] + 12);
    *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)&v183[25] + 12);
    *((_OWORD *)v8 + 2) = v46;
    v7[444] = v176[0];
    *((_OWORD *)v7 + 28) = v183[28];
    v7[464] = v38;
    *(_OWORD *)(v7 + 472) = v39;
    *((_QWORD *)v7 + 61) = v40;
    v47 = v183[32];
    *((_OWORD *)v7 + 31) = v183[31];
    *((_OWORD *)v7 + 32) = v47;
    *((_OWORD *)v7 + 33) = v41;
    *((_QWORD *)v7 + 68) = v42;
    return result;
  }
  v140 = v10;
  v48 = *((_QWORD *)&v183[28] + 1);
  Hands_trace_CBridge();
  Tracking3D.assertImageStreamsMatchConfig(images:)(*(Swift::OpaquePointer *)((char *)&v183[30] + 8));
  if (!specialized == infix<A>(_:_:)(*(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24), 0, 1))
  {
    v181[0] = 0;
    v181[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v49._countAndFlagsBits = 0xD000000000000019;
    v49._object = (void *)0x800000023D9DAD70;
    String.append(_:)(v49);
    v50 = *(_BYTE *)(v3 + 24);
    *(_QWORD *)&v180[0] = *(_QWORD *)(v3 + 16);
    BYTE8(v180[0]) = v50;
    _print_unlocked<A, B>(_:_:)();
    v51._countAndFlagsBits = 0xD000000000000015;
    v51._object = (void *)0x800000023D9DAE10;
    String.append(_:)(v51);
    v181[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v180, 0, 32);
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v180, 0xD00000000000005ELL, 0x800000023D9CB6A0, 197, (uint64_t)v181, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v181);
  }
  v52 = *(_QWORD *)(v3 + 536);
  if (!v52)
  {
    v181[3] = MEMORY[0x24BEE0D00];
    v181[0] = 0xD00000000000001ELL;
    v181[1] = 0x800000023D9DAE30;
    type metadata accessor for HandyLoggerNeo();
    memset(v180, 0, 32);
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v180, 0xD00000000000005ELL, 0x800000023D9CB6A0, 201, (uint64_t)v181, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v181);
    memcpy(v7, v183, 0x228uLL);
    return outlined retain of HandsKitData(v183);
  }
  v142 = v16;
  v137 = v48;
  v138 = v8;
  v139 = v7;
  v136 = (char *)&v180[24] + 8;
  v53 = *((_QWORD *)&v183[10] + 1);
  *(_OWORD *)v177 = v183[9];
  v54 = v52;
  memcpy(v181, v183, 0x228uLL);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v135 = v54;
  DetectionResultSync.sync(detectionSpecItems:detectionOuputs:input:)(v53, v177, v181, v180);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = (_OWORD *)(v3 + 584);
  swift_beginAccess();
  TrackingIntermediateData.clear()();
  swift_endAccess();
  v147 = (_OWORD *)(v3 + 56);
  v148 = 0;
  v145 = 0xD000000000000023;
  v146 = v161 + 304;
  v143 = 0x800000023D9CB6A0;
  v144 = 0x800000023D9DAE50;
  while (1)
  {
    v56 = *(_QWORD *)(v3 + 16);
    v57 = *(_BYTE *)(v3 + 24);
    memcpy(v177, v180, 0x228uLL);
    memcpy(v173, v180, sizeof(v173));
    v58 = *(_QWORD *)(v3 + 40);
    v172[0] = *(_QWORD *)(v3 + 32);
    v172[1] = v58;
    v59 = *(_OWORD *)(v3 + 728);
    v182[8] = *(_OWORD *)(v3 + 712);
    v182[9] = v59;
    v182[10] = *(_OWORD *)(v3 + 744);
    v60 = *(_OWORD *)(v3 + 664);
    v182[4] = *(_OWORD *)(v3 + 648);
    v182[5] = v60;
    v61 = *(_OWORD *)(v3 + 680);
    v182[7] = *(_OWORD *)(v3 + 696);
    v182[6] = v61;
    v62 = *(_OWORD *)(v3 + 600);
    v182[0] = *v55;
    v182[1] = v62;
    v63 = *(_OWORD *)(v3 + 616);
    v64 = *(_QWORD *)(v3 + 48);
    v182[3] = *(_OWORD *)(v3 + 632);
    v182[2] = v63;
    swift_beginAccess();
    v65 = *(_QWORD *)(v64 + 32);
    v170 = *(_OWORD *)(v64 + 16);
    v171 = v65;
    memcpy(v178, v147, 0x1CCuLL);
    memcpy(v169, v147, 0x1CCuLL);
    LOBYTE(v64) = *v146;
    memset(v168, 0, sizeof(v168));
    v66 = *v161;
    outlined retain of HandsKitData(v177);
    swift_bridgeObjectRetain();
    outlined retain of TrackingIntermediateData((uint64_t *)v182);
    swift_bridgeObjectRetain();
    outlined retain of TrackingConfig((uint64_t)v178);
    LOBYTE(v134) = v66;
    LOBYTE(v133) = v64;
    TrackingState.process(handsData:trackingInfos:intermediateData:schedulingData:config:isN301:detectionSpec:serializeInternalData:)((uint64_t)v162, v176, v175, v174, v173, v172, (uint64_t *)v182, (uint64_t *)&v170, v169, v133, (uint64_t)v168, v134, v56, v57);
    v149 = v162[0];
    v150 = v162[1];
    v151 = v162[2];
    v152 = v162[3];
    v153 = v162[4];
    v154 = v162[5];
    v156 = v162[6];
    v157 = v162[7];
    v159 = v162[8];
    v67 = v163;
    LODWORD(v158) = v164;
    v68 = v166;
    LOBYTE(v56) = v167;
    v155 = v165;
    outlined release of TrackingIntermediateData((uint64_t *)v182);
    outlined release of TrackingConfig((uint64_t)v178);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of HandsKitData(v177);
    swift_bridgeObjectRelease();
    memcpy(v181, v176, 0x228uLL);
    v69 = v175[0];
    v70 = v175[1];
    v71 = v181[61];
    v72 = v181[0];
    swift_bridgeObjectRetain();
    v160 = v72;
    swift_bridgeObjectRetain();
    outlined retain of HandsKitData(v181);
    outlined release of HandsKitData(v177);
    memcpy(v180, v181, 0x228uLL);
    *(_QWORD *)(v3 + 32) = v69;
    *(_QWORD *)(v3 + 40) = v70;
    swift_bridgeObjectRelease();
    v73 = *(_OWORD *)(v3 + 728);
    v179[8] = *(_OWORD *)(v3 + 712);
    v179[9] = v73;
    v179[10] = *(_OWORD *)(v3 + 744);
    v74 = *(_OWORD *)(v3 + 664);
    v179[4] = *(_OWORD *)(v3 + 648);
    v179[5] = v74;
    v75 = *(_OWORD *)(v3 + 680);
    v179[7] = *(_OWORD *)(v3 + 696);
    v179[6] = v75;
    v76 = *(_OWORD *)(v3 + 600);
    v179[0] = *v55;
    v179[1] = v76;
    v77 = *(_OWORD *)(v3 + 616);
    v179[3] = *(_OWORD *)(v3 + 632);
    v179[2] = v77;
    *v55 = v149;
    *(_OWORD *)(v3 + 600) = v150;
    *(_OWORD *)(v3 + 616) = v151;
    *(_OWORD *)(v3 + 632) = v152;
    *(_OWORD *)(v3 + 648) = v153;
    *(_OWORD *)(v3 + 664) = v154;
    *(_OWORD *)(v3 + 680) = v156;
    *(_OWORD *)(v3 + 696) = v157;
    *(_OWORD *)(v3 + 712) = v159;
    *(_QWORD *)(v3 + 728) = v67;
    *(_BYTE *)(v3 + 736) = v158;
    *(_OWORD *)(v161 + 216) = v155;
    result = outlined release of TrackingIntermediateData((uint64_t *)v179);
    *(_QWORD *)(v3 + 16) = v68;
    *(_BYTE *)(v3 + 24) = v56;
    v78 = v148;
    if (__OFADD__(v148, 1))
    {
      __break(1u);
      return result;
    }
    if (v148 + 1 >= 51)
    {
      *((_QWORD *)&v176[1] + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v176[0] = v145;
      *((_QWORD *)&v176[0] + 1) = v144;
      type metadata accessor for HandyLoggerNeo();
      memset(v173, 0, 32);
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v173, 0xD00000000000005ELL, v143, 225, (uint64_t)v176, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v176);
      v68 = *(_QWORD *)(v3 + 16);
    }
    if (v68 == 6)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of HandsKitData(v181);
    v148 = v78 + 1;
  }
  v79 = v147[5];
  v176[4] = v147[4];
  v176[5] = v79;
  v176[6] = v147[6];
  *(_QWORD *)&v176[7] = *((_QWORD *)v147 + 14);
  v80 = v147[1];
  v176[0] = *v147;
  v176[1] = v80;
  v81 = v147[3];
  v176[2] = v147[2];
  v176[3] = v81;
  v82 = *(uint64_t **)(v3 + 40);
  v83 = *(_DWORD *)(v3 + 828);
  outlined retain of SchedulingConfig((uint64_t)v176);
  swift_bridgeObjectRetain();
  outlined retain of SchedulingConfig((uint64_t)v176);
  swift_bridgeObjectRetain();
  v84 = specialized _ArrayProtocol.filter(_:)(v71, (uint64_t)v176);
  outlined release of SchedulingConfig((uint64_t)v176);
  swift_bridgeObjectRelease();
  v173[0] = v82;
  v85 = v160;
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(v181);
  outlined retain of SchedulingConfig((uint64_t)v176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v86 = specialized Sequence.compactMap<A>(_:)(v85, v84, (double *)v176, (uint64_t)v82, v181, v83, v173);
  outlined release of HandsKitData(v181);
  outlined release of SchedulingConfig((uint64_t)v176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v87 = v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  outlined release of SchedulingConfig((uint64_t)v176);
  outlined release of HandsKitData(v181);
  v88 = v173[0];
  v89 = MEMORY[0x24BEE4AF8];
  v169[0] = MEMORY[0x24BEE4AF8];
  v90 = *(_QWORD *)(v87 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  if (!v90)
    goto LABEL_30;
  *(_QWORD *)&v156 = v88;
  *(_QWORD *)&v157 = 0;
  v91 = (uint64_t)v141;
  v92 = *(unsigned __int8 *)(v140 + 80);
  v93 = *(_QWORD *)(v140 + 72);
  v158 = v87;
  *(_QWORD *)&v159 = (v92 + 32) & ~v92;
  v94 = v87 + v159;
  v95 = MEMORY[0x24BEE4AF8];
  v96 = (uint64_t)v142;
  do
  {
    outlined init with copy of HandDescriptor(v94, v96);
    v97 = *(_DWORD *)(v3 + 824);
    if (!v97)
      v97 = *(_DWORD *)(v3 + 820);
    if (v97 == 4)
    {
LABEL_14:
      outlined destroy of HandDescriptor(v96);
      goto LABEL_15;
    }
    if (v97 == 3)
    {
      if ((*(_BYTE *)(v96 + 136) & 1) == 0)
        goto LABEL_14;
    }
    else if (v97 == 2 && *(_BYTE *)(v96 + 136) == 1)
    {
      goto LABEL_14;
    }
    outlined init with take of Matrix2dPB(v96, v91, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v95 + 16) + 1, 1);
    v95 = v169[0];
    v99 = *(_QWORD *)(v169[0] + 16);
    v98 = *(_QWORD *)(v169[0] + 24);
    if (v99 >= v98 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
      v95 = v169[0];
    }
    *(_QWORD *)(v95 + 16) = v99 + 1;
    outlined init with take of Matrix2dPB(v91, v95 + v159 + v99 * v93, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v96 = (uint64_t)v142;
LABEL_15:
    v94 += v93;
    --v90;
  }
  while (v90);
  v89 = v169[0];
  v87 = v158;
  v88 = (uint64_t *)v156;
LABEL_30:
  swift_bridgeObjectRelease();
  swift_release();
  v100 = specialized _ArrayProtocol.filter(_:)(v160, v87);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v173[0] = (uint64_t *)8;
  LOBYTE(v173[1]) = 1;
  HandsKitData.recordRejected(hands:reason:save:)(v100, (uint64_t)v173, *v161);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 40) = v88;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Hands_trace_CBridge();
  swift_release();
  v101 = *((_QWORD *)&v180[4] + 1);
  result = (uint64_t *)LOBYTE(v180[5]);
  v102 = DWORD1(v180[5]);
  v103 = *(_QWORD *)&v180[8];
  v104 = v180[11];
  v105 = *((_QWORD *)&v180[11] + 1);
  v106 = v180[14];
  v107 = v180[15];
  v108 = v180[16];
  v109 = v180[17];
  v110 = v180[18];
  v111 = v180[19];
  v112 = *((_QWORD *)&v180[22] + 1);
  v113 = *(_QWORD *)&v180[24];
  v114 = v136;
  v115 = *v136;
  v116 = *(_QWORD *)(v136 + 4);
  v117 = DWORD1(v180[25]);
  v118 = DWORD2(v180[25]);
  v119 = v136[52];
  v120 = v136[72];
  v121 = *(_OWORD *)((char *)&v180[29] + 8);
  v122 = *((_QWORD *)&v180[30] + 1);
  v123 = v180[33];
  v124 = *(_QWORD *)&v180[34];
  LOBYTE(v173[0]) = v180[5];
  LOBYTE(v162[0]) = BYTE8(v180[8]);
  v168[0] = v115;
  LOBYTE(v174[0]) = v119;
  v125 = v139;
  *v139 = v89;
  *(_OWORD *)(v125 + 1) = *(_OWORD *)((char *)v180 + 8);
  *(_OWORD *)(v125 + 3) = *(_OWORD *)((char *)&v180[1] + 8);
  *(_OWORD *)(v125 + 5) = *(_OWORD *)((char *)&v180[2] + 8);
  *(_OWORD *)(v125 + 7) = *(_OWORD *)((char *)&v180[3] + 8);
  v125[9] = v101;
  *((_BYTE *)v125 + 80) = (_BYTE)result;
  *((_DWORD *)v125 + 21) = v102;
  v125[11] = *((_QWORD *)&v180[5] + 1);
  v126 = v180[7];
  *((_OWORD *)v125 + 6) = v180[6];
  *((_OWORD *)v125 + 7) = v126;
  v125[16] = v103;
  *((_BYTE *)v125 + 136) = v162[0];
  v127 = v180[10];
  *((_OWORD *)v125 + 9) = v180[9];
  *((_OWORD *)v125 + 10) = v127;
  *((_DWORD *)v125 + 44) = v104;
  v125[23] = v105;
  v128 = v180[13];
  *((_OWORD *)v125 + 12) = v180[12];
  *((_OWORD *)v125 + 13) = v128;
  *((_OWORD *)v125 + 14) = v106;
  *((_OWORD *)v125 + 15) = v107;
  *((_OWORD *)v125 + 16) = v108;
  *((_OWORD *)v125 + 17) = v109;
  *((_OWORD *)v125 + 18) = v110;
  *((_OWORD *)v125 + 19) = v111;
  v129 = v180[21];
  *((_OWORD *)v125 + 20) = v180[20];
  *((_OWORD *)v125 + 21) = v129;
  v125[44] = *(_QWORD *)&v180[22];
  v125[45] = v112;
  *((_OWORD *)v125 + 23) = v180[23];
  v125[48] = v113;
  *((_BYTE *)v125 + 392) = v168[0];
  v130 = v138;
  *v138 = v116;
  *((_DWORD *)v125 + 101) = v117;
  *((_DWORD *)v125 + 102) = v118;
  v131 = *(_OWORD *)(v114 + 36);
  *((_OWORD *)v130 + 1) = *(_OWORD *)(v114 + 20);
  *((_OWORD *)v130 + 2) = v131;
  *((_BYTE *)v125 + 444) = v174[0];
  *((_OWORD *)v125 + 28) = v180[28];
  *((_BYTE *)v125 + 464) = v120;
  *(_OWORD *)(v125 + 59) = v121;
  v125[61] = v122;
  v132 = v180[32];
  *((_OWORD *)v125 + 31) = v180[31];
  *((_OWORD *)v125 + 32) = v132;
  *((_OWORD *)v125 + 33) = v123;
  v125[68] = v124;
  return result;
}

void closure #1 in Tracking3D.runSync(withInput:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  float v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[32];
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD v45[3];
  int v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54[2];
  __int128 v55[7];
  uint64_t v56;
  __int128 v57[2];
  char v58;
  __int128 v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;

  v35 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HandDescriptor();
  v10 = *(_QWORD *)(a1 + v9[18]);
  v33 = *(_QWORD *)(a1 + 144);
  v34 = v10;
  v32 = *(unsigned __int8 *)(a1 + 136);
  v11 = *(float *)a1;
  v12 = *(_BYTE *)(a1 + 192);
  v13 = *(_OWORD *)(a1 + 176);
  v57[0] = *(_OWORD *)(a1 + 160);
  v57[1] = v13;
  v58 = v12;
  v56 = 0;
  memset(v55, 0, sizeof(v55));
  swift_bridgeObjectRetain();
  v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v14 = *(_QWORD *)(a1 + 200);
  v15 = *(_QWORD *)(a1 + 208);
  v54[0] = v14;
  v54[1] = v15;
  v52 = 0;
  v53 = 1;
  v16 = *(_QWORD *)(a1 + v9[23]);
  if (*(_BYTE *)(a2 + 528) == 1)
  {
    *((_QWORD *)v8 + 18) = 0;
    *((_QWORD *)v8 + 19) = 0;
    _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_((uint64_t)v36);
    outlined init with take of ImageData?((uint64_t)v36, (uint64_t)(v8 + 160), &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
    v17 = (int *)type metadata accessor for HandDescriptorInternal();
    v18 = &v8[v17[10]];
    v19 = type metadata accessor for ActionInternalPB(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    v20 = &v8[v17[11]];
    v21 = type metadata accessor for UnsureInternalPB(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
    v22 = &v8[v17[12]];
    v23 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
    v24 = &v8[v17[13]];
    v25 = type metadata accessor for HomePinchInternalPB(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
    v26 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v8[v17[14]] = MEMORY[0x24BEE4AF8];
    *((_DWORD *)v8 + 32) = 0;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + 7) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v8[8] = 2;
    outlined copy of HandPose?(v14);
    swift_bridgeObjectRetain();
    *(_QWORD *)v8 = specialized Dictionary.init(dictionaryLiteral:)(v26);
    *((_QWORD *)v8 + 17) = specialized Dictionary.init(dictionaryLiteral:)(v26);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v17 - 1) + 56))(v8, 0, 1, v17);
  }
  else
  {
    v27 = type metadata accessor for HandDescriptorInternal();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
    outlined copy of HandPose?(v14);
    swift_bridgeObjectRetain();
    v26 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v59 = &outlined read-only object #0 of ObjectInteractionData.init();
  *((_QWORD *)&v59 + 1) = &outlined read-only object #1 of ObjectInteractionData.init();
  v60 = &outlined read-only object #2 of ObjectInteractionData.init();
  v61 = &outlined read-only object #3 of ObjectInteractionData.init();
  v62 = &outlined read-only object #4 of ObjectInteractionData.init();
  v63 = &outlined read-only object #5 of ObjectInteractionData.init();
  v64 = &outlined read-only object #6 of ObjectInteractionData.init();
  v28 = *(float *)(a1 + v9[34]);
  v45[0] = 0;
  v44 = 0;
  *(_QWORD *)((char *)v45 + 5) = 0;
  v45[2] = -1;
  v46 = 0;
  v47 = v26;
  v48 = 0;
  v49 = 1;
  v50 = 0;
  v51 = 0;
  v37 = 0u;
  memset(v36, 0, 24);
  v38 = -1;
  v39 = 0;
  v40 = 0x3F800000BF800000;
  v41 = 0;
  v42 = 0;
  v43 = 1;
  v29 = swift_bridgeObjectRetain();
  HandDescriptor.init(detectionResults:handID:isLeft:handRadius:handCenter:detection3DHandCenter:handPose:handPresenceScore:handPresenceClass:poseSpec:pinchDown:pinchDownHomeUserInterface:pinchCancelled:branchFeatsArr:objectInteractionData:objectInteractionClass:imageCrops:internalData:trackingHealthScore:pinchFeatures:operationalEnvelopeSignals:objectInteractionInfo:objectInteractionStateStatus:)(v34, v33, v32, v57, 0, 0, 1, v55, v35, v11, 1.0, v28, v31, 0, 1, v54, 514, 0, v26,
    &v59,
    &v52,
    v16,
    (uint64_t)v8,
    &v44,
    v29,
    (uint64_t)v36,
    &v42);
}

_QWORD *Tracking3D.didGetPoseResults(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  CMTimeValue *v6;
  CMTimeValue *v7;
  const void *v8;
  CMTimeValue v9;
  CMTimeEpoch epoch;
  CMTimeValue v11;
  _QWORD *result;
  Swift::String v13;
  Swift::String v14;
  CMTimeValue value;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CMTimeValue v23;
  char timescale;
  CMTimeFlags flags;
  CMTimeEpoch v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  CMTimeScale v33;
  CMTimeEpoch v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  CMTimeEpoch v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  char v53;
  __int128 v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  CMTimeValue v60;
  uint64_t v61;
  CMTimeEpoch v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  CMTimeValue v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  CMTimeValue v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  CMTimeValue v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  CMTimeValue v125;
  CMTimeValue v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  int v131;
  CMTimeValue v132;
  Swift::String v133;
  Swift::String v134;
  Swift::String v135;
  CMTimeValue v136;
  uint64_t v137;
  CMTimeValue v138;
  CMTimeValue v139;
  char v140;
  CMTimeFlags v141;
  unsigned int v142;
  unsigned int epoch_high;
  CMTimeValue v144;
  uint64_t v145;
  CMTimeEpoch v146;
  CMTimeValue v147;
  char v148;
  uint64_t v149;
  CMTimeValue v150;
  uint64_t v151;
  CMTimeEpoch v152;
  CMTimeValue v153;
  CMTimeScale v154;
  CMTimeEpoch v155;
  CMTimeValue v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  char v166;
  char v167;
  char v168;
  CMTimeEpoch v169;
  uint64_t v170;
  CMTimeValue v171;
  CMTimeValue v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  char v183;
  char v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  char v190;
  char v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  Hands::DetectionSpec v198;
  BOOL v199;
  CMTimeValue v200;
  CMTimeValue v201;
  CMTimeValue v202;
  CMTimeEpoch v203;
  _QWORD *v204;
  char v205;
  CMTimeEpoch v206;
  uint64_t v207;
  CMTimeValue v208;
  CMTimeValue v209;
  CMTimeEpoch v210;
  CMTimeValue v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  CMTimeValue *v219;
  char *v220;
  CMTimeValue v221;
  unint64_t v222;
  CMTimeValue v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  char v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  CMTimeValue v239;
  CMTimeValue v240;
  char v241;
  char v242;
  uint64_t v243;
  __int128 v244;
  CMTimeValue v245;
  CMTimeValue v246;
  CMTimeEpoch v247;
  CMTimeValue v248;
  CMTimeEpoch v249;
  uint64_t v250;
  CMTimeValue v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  CMTimeValue v263;
  CMTimeEpoch v264;
  uint64_t v265;
  CMTimeValue v266;
  CMTimeEpoch v267;
  uint64_t v268;
  CMTimeEpoch v269;
  unsigned int v270;
  unint64_t v271;
  unsigned int v272;
  CMTime v273;
  unint64_t v274;
  CMTimeValue v275;
  CMTimeValue v276;
  uint64_t v277;
  CMTimeEpoch v278;
  _DWORD *v279;
  char *v280;
  uint64_t v281;
  CMTimeValue v282;
  unint64_t v283;
  uint64_t v284;
  __int128 v285;
  CMTimeValue v286;
  CMTimeEpoch v287;
  _OWORD *__src;
  char __srca;
  _OWORD *v290;
  char v291;
  _QWORD *v292;
  CMTimeValue v293;
  __int128 v294;
  uint64_t v295;
  CMTimeEpoch v296;
  __int128 v297;
  uint64_t v298;
  char *v299;
  __int128 v300;
  uint64_t v301;
  CMTimeValue v302;
  __int128 v303;
  char v304;
  CMTimeEpoch v305;
  __int128 v306;
  uint64_t v307;
  CMTimeValue v308;
  __int128 v309;
  char v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  CMTimeEpoch v314;
  __int128 v315;
  __int128 v316;
  CMTimeEpoch v317;
  __int128 v318;
  __int128 v319;
  CMTimeValue v320;
  __int128 v321;
  CMTimeValue v322;
  uint64_t v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;
  char v334;
  __int128 v335;
  uint64_t v336;
  char v337;
  _QWORD v338[4];
  _OWORD v339[29];
  __int128 v340;
  uint64_t v341;
  uint64_t v342[2];
  _BYTE v343[552];
  __int128 v344;
  uint64_t v345;
  _QWORD v346[2];
  _BYTE v347[460];
  _BYTE v348[7];
  _DWORD v349[2];
  __int16 v350;
  char v351;
  __int16 v352;
  char v353;
  _DWORD v354[2];
  __int16 v355;
  char v356;
  _OWORD v357[11];
  _OWORD v358[29];
  _OWORD __dst[35];
  CMTime v360[23];
  _BYTE v361[552];
  _BYTE v362[465];
  _BYTE v363[7];
  _OWORD v364[35];
  _OWORD v365[11];
  CMTime v366[23];
  _OWORD v367[11];
  _OWORD v368[11];
  _OWORD v369[7];
  uint64_t v370;
  _OWORD v371[11];
  CMTime v372[24];

  MEMORY[0x24BDAC7A8](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  memcpy(v372, v8, 0x228uLL);
  v299 = (char *)(v3 + 528);
  if (*(_BYTE *)(v3 + 576) == 1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    CMTimeMake(v366, 0, 1);
    epoch = v366[0].epoch;
    v11 = *(_QWORD *)&v366[0].timescale;
    *v7 = v366[0].value;
    v7[1] = v11;
    v7[2] = epoch;
    v7[3] = v9;
    memcpy(v5, v372, 0x228uLL);
    return outlined retain of HandsKitData(v372);
  }
  v219 = v7;
  v220 = v5;
  Hands_trace_CBridge();
  Tracking3D.assertImageStreamsMatchConfig(images:)(*(Swift::OpaquePointer *)&v372[20].timescale);
  if (!specialized == infix<A>(_:_:)(*(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24), 6, 1))
  {
    v366[0].value = 0;
    *(_QWORD *)&v366[0].timescale = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v13._countAndFlagsBits = 0xD000000000000019;
    v13._object = (void *)0x800000023D9DAD70;
    String.append(_:)(v13);
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 0xD000000000000016;
    v14._object = (void *)0x800000023D9DAD90;
    String.append(_:)(v14);
    v366[1].value = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v364, 0, 32);
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v364, 0xD00000000000005ELL, 0x800000023D9CB6A0, 286, (uint64_t)v366, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v366);
  }
  swift_beginAccess();
  v290 = (_OWORD *)(v3 + 584);
  TrackingIntermediateData.clear()();
  swift_endAccess();
  value = v372[0].value;
  memcpy(v366, v372, sizeof(v366));
  v16 = *(_BYTE *)(v3 + 832);
  outlined retain of HandsKitData(v372);
  if ((v16 & 1) == 0)
  {
    v17 = swift_bridgeObjectRetain();
    v18 = Tracking3D.dropHandsWithHighWristStdDev(_:handsKitData:)(v17, (uint64_t)v366);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    value = v18;
  }
  v19 = *(_OWORD *)&v366[0].timescale;
  v218 = v5 + 396;
  v20 = *(_OWORD *)&v366[1].value;
  v21 = *(_OWORD *)&v366[1].epoch;
  v22 = *(_OWORD *)&v366[2].timescale;
  v280 = (char *)(v3 + 832);
  v23 = v366[3].value;
  timescale = v366[3].timescale;
  flags = v366[3].flags;
  v26 = v366[3].epoch;
  v27 = *(_OWORD *)&v366[4].value;
  v28 = *(_OWORD *)&v366[4].epoch;
  v29 = *(_QWORD *)&v366[5].timescale;
  v30 = v366[5].epoch;
  v31 = *(_OWORD *)&v366[6].value;
  v32 = *(_OWORD *)&v366[6].epoch;
  v33 = v366[7].timescale;
  v34 = v366[7].epoch;
  v35 = *(_OWORD *)&v366[8].value;
  v36 = *(_OWORD *)&v366[8].epoch;
  v37 = *(_OWORD *)&v366[9].timescale;
  v38 = *(_OWORD *)&v366[10].value;
  v39 = *(_OWORD *)&v366[10].epoch;
  v40 = *(_OWORD *)&v366[11].timescale;
  v41 = *(_OWORD *)&v366[12].value;
  v42 = *(_OWORD *)&v366[12].epoch;
  v43 = *(_OWORD *)&v366[13].timescale;
  v44 = *(_OWORD *)&v366[14].value;
  v45 = v366[14].epoch;
  v46 = *(_OWORD *)&v366[15].value;
  v47 = *(_OWORD *)&v366[15].epoch;
  v48 = v366[16].timescale;
  v49 = *(_QWORD *)&v366[16].flags;
  v50 = *(CMTimeEpoch *)((char *)&v366[16].epoch + 4);
  v51 = *(_OWORD *)((char *)&v366[17].value + 4);
  v52 = *(_OWORD *)((char *)&v366[17].epoch + 4);
  v53 = v366[18].flags;
  v54 = *(_OWORD *)&v366[18].epoch;
  v55 = v366[19].timescale;
  v56 = *(_OWORD *)&v366[19].epoch;
  v57 = *(_QWORD *)&v366[20].timescale;
  v58 = *(_OWORD *)&v366[20].epoch;
  v59 = *(_OWORD *)&v366[21].timescale;
  v60 = v366[22].value;
  v61 = *(_QWORD *)&v366[22].timescale;
  v62 = v366[22].epoch;
  __src = (_OWORD *)(v3 + 56);
  v279 = (_DWORD *)(v3 + 737);
  v63 = *(_QWORD *)(v3 + 16);
  v292 = (_QWORD *)MEMORY[0x24BEE4AF8];
  LOBYTE(v64) = *(_BYTE *)(v3 + 24);
  while (1)
  {
    v65 = *(_QWORD *)(v3 + 48);
    *(_OWORD *)&v361[8] = v19;
    *(_OWORD *)&v361[24] = v20;
    *(_OWORD *)&v361[40] = v21;
    *(_OWORD *)&v361[56] = v22;
    *(_QWORD *)v361 = value;
    *(_QWORD *)&v361[72] = v23;
    v361[80] = timescale & 1;
    *(_DWORD *)&v361[84] = flags;
    *(_QWORD *)&v361[88] = v26;
    *(_OWORD *)&v361[96] = v27;
    *(_OWORD *)&v361[112] = v28;
    *(_QWORD *)&v361[128] = v29;
    v361[136] = v30 & 1;
    *(_OWORD *)&v361[144] = v31;
    *(_OWORD *)&v361[160] = v32;
    *(_DWORD *)&v361[176] = v33;
    *(_QWORD *)&v361[184] = v34;
    *(_OWORD *)&v361[192] = v35;
    *(_OWORD *)&v361[208] = v36;
    *(_OWORD *)&v361[224] = v37;
    *(_OWORD *)&v361[240] = v38;
    *(_OWORD *)&v361[256] = v39;
    *(_OWORD *)&v361[272] = v40;
    *(_OWORD *)&v361[288] = v41;
    *(_OWORD *)&v361[304] = v42;
    *(_OWORD *)&v361[320] = v43;
    *(_OWORD *)&v361[336] = v44;
    *(_QWORD *)&v361[352] = v45;
    *(_OWORD *)&v361[360] = v46;
    *(_OWORD *)&v361[376] = v47;
    v361[392] = v48 & 1;
    *(_QWORD *)&v361[396] = v49;
    *(_QWORD *)&v361[404] = v50;
    *(_OWORD *)&v361[412] = v51;
    *(_OWORD *)&v361[428] = v52;
    v361[444] = v53 & 1;
    *(_OWORD *)&v361[448] = v54;
    v361[464] = v55 & 1;
    *(_OWORD *)&v361[472] = v56;
    *(_QWORD *)&v361[488] = v57;
    *(_OWORD *)&v361[496] = v58;
    *(_OWORD *)&v361[512] = v59;
    *(_QWORD *)&v361[528] = v60;
    *(_QWORD *)&v361[536] = v61;
    *(_QWORD *)&v361[544] = v62;
    memcpy(__dst, v361, 0x228uLL);
    v66 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)&v367[0] = *(_QWORD *)(v3 + 32);
    *((_QWORD *)&v367[0] + 1) = v66;
    v67 = *(_OWORD *)(v3 + 728);
    v371[8] = *(_OWORD *)(v3 + 712);
    v371[9] = v67;
    v371[10] = *(_OWORD *)(v3 + 744);
    v68 = *(_OWORD *)(v3 + 664);
    v371[4] = *(_OWORD *)(v3 + 648);
    v371[5] = v68;
    v69 = *(_OWORD *)(v3 + 680);
    v371[7] = *(_OWORD *)(v3 + 696);
    v371[6] = v69;
    v70 = *(_OWORD *)(v3 + 600);
    v371[0] = *v290;
    v371[1] = v70;
    v71 = *(_OWORD *)(v3 + 616);
    v371[3] = *(_OWORD *)(v3 + 632);
    v371[2] = v71;
    swift_beginAccess();
    v72 = *(_QWORD *)(v65 + 32);
    v324 = *(_OWORD *)(v65 + 16);
    *(_QWORD *)&v325 = v72;
    memcpy(v362, __src, 0x1CCuLL);
    memcpy(v343, __src, 0x1CCuLL);
    v73 = *v280;
    memset(v347, 0, 32);
    v74 = *v299;
    swift_retain();
    outlined retain of HandsKitData(v361);
    swift_bridgeObjectRetain();
    outlined retain of TrackingIntermediateData((uint64_t *)v371);
    swift_bridgeObjectRetain();
    outlined retain of TrackingConfig((uint64_t)v362);
    LOBYTE(v216) = v74;
    LOBYTE(v214) = v73;
    TrackingState.process(handsData:trackingInfos:intermediateData:schedulingData:config:isN301:detectionSpec:serializeInternalData:)((uint64_t)v358, v360, v368, v339, __dst, (uint64_t *)v367, (uint64_t *)v371, (uint64_t *)&v324, v343, v214, (uint64_t)v347, v216, v63, v64 & 1);
    v294 = v358[0];
    v297 = v358[1];
    v300 = v358[2];
    v303 = v358[3];
    v306 = v358[4];
    v309 = v358[5];
    v312 = v358[6];
    v315 = v358[7];
    v318 = v358[8];
    v75 = *(_QWORD *)&v358[9];
    v76 = BYTE8(v358[9]);
    v77 = *(_QWORD *)&v358[11];
    v78 = BYTE8(v358[11]);
    v321 = v358[10];
    outlined release of TrackingIntermediateData((uint64_t *)v371);
    outlined release of TrackingConfig((uint64_t)v362);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of HandsKitData(v361);
    outlined release of HandsKitData(v361);
    memcpy(v364, v360, 0x228uLL);
    v79 = *((_QWORD *)&v368[0] + 1);
    v285 = v339[0];
    v80 = *(_QWORD *)&v339[1];
    *(_QWORD *)(v3 + 32) = *(_QWORD *)&v368[0];
    *(_QWORD *)(v3 + 40) = v79;
    swift_bridgeObjectRelease();
    v81 = *(_OWORD *)(v3 + 728);
    v365[8] = *(_OWORD *)(v3 + 712);
    v365[9] = v81;
    v365[10] = *(_OWORD *)(v3 + 744);
    v82 = *(_OWORD *)(v3 + 664);
    v365[4] = *(_OWORD *)(v3 + 648);
    v365[5] = v82;
    v83 = *(_OWORD *)(v3 + 680);
    v365[7] = *(_OWORD *)(v3 + 696);
    v365[6] = v83;
    v84 = *(_OWORD *)(v3 + 600);
    v365[0] = *v290;
    v365[1] = v84;
    v85 = *(_OWORD *)(v3 + 616);
    v365[3] = *(_OWORD *)(v3 + 632);
    v365[2] = v85;
    *(_OWORD *)(v3 + 584) = v294;
    *(_OWORD *)(v3 + 600) = v297;
    *(_OWORD *)(v3 + 616) = v300;
    *(_OWORD *)(v3 + 632) = v303;
    *(_OWORD *)(v3 + 648) = v306;
    *(_OWORD *)(v3 + 664) = v309;
    *(_OWORD *)(v3 + 680) = v312;
    *(_OWORD *)(v3 + 696) = v315;
    *(_OWORD *)(v3 + 712) = v318;
    *(_QWORD *)(v3 + 728) = v75;
    *(_BYTE *)(v3 + 736) = v76;
    *v279 = *(_DWORD *)v363;
    *(_DWORD *)(v3 + 740) = *(_DWORD *)&v363[3];
    *(_OWORD *)(v3 + 744) = v321;
    outlined release of TrackingIntermediateData((uint64_t *)v365);
    *(_OWORD *)(v65 + 16) = v285;
    *(_QWORD *)(v65 + 32) = v80;
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v77;
    *(_BYTE *)(v3 + 24) = v78;
    v86 = v292;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v292[2] + 1, 1, v292);
    v88 = v86[2];
    v87 = v86[3];
    if (v88 >= v87 >> 1)
      v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v87 > 1), v88 + 1, 1, v86);
    v86[2] = v88 + 1;
    v89 = &v86[2 * v88];
    v89[4] = v77;
    *((_BYTE *)v89 + 40) = v78;
    v63 = *(_QWORD *)(v3 + 16);
    v64 = *(unsigned __int8 *)(v3 + 24);
    v292 = v86;
    if (v64 != 1)
      break;
    if (v63 == 14)
      goto LABEL_16;
LABEL_9:
    v62 = *(_QWORD *)&v364[34];
    v61 = *((_QWORD *)&v364[33] + 1);
    v58 = v364[31];
    v59 = v364[32];
    v60 = *(_QWORD *)&v364[33];
    v57 = *((_QWORD *)&v364[30] + 1);
    v56 = *(_OWORD *)((char *)&v364[29] + 8);
    v55 = v364[29];
    v45 = *(_QWORD *)&v364[22];
    v46 = *(_OWORD *)((char *)&v364[22] + 8);
    v47 = *(_OWORD *)((char *)&v364[23] + 8);
    v48 = BYTE8(v364[24]);
    v49 = *(_QWORD *)((char *)&v364[24] + 12);
    v50 = *(_QWORD *)((char *)&v364[25] + 4);
    v51 = *(_OWORD *)((char *)&v364[25] + 12);
    v52 = *(_OWORD *)((char *)&v364[26] + 12);
    v53 = BYTE12(v364[27]);
    v54 = v364[28];
    v41 = v364[18];
    v42 = v364[19];
    v44 = v364[21];
    v43 = v364[20];
    v37 = v364[14];
    v38 = v364[15];
    v40 = v364[17];
    v39 = v364[16];
    v34 = *((_QWORD *)&v364[11] + 1);
    v36 = v364[13];
    v35 = v364[12];
    v33 = v364[11];
    v32 = v364[10];
    v31 = v364[9];
    value = *(_QWORD *)&v364[0];
    v23 = *((_QWORD *)&v364[4] + 1);
    timescale = v364[5];
    flags = DWORD1(v364[5]);
    v26 = *((_QWORD *)&v364[5] + 1);
    v27 = v364[6];
    v28 = v364[7];
    v29 = *(_QWORD *)&v364[8];
    v30 = BYTE8(v364[8]);
    v19 = *(_OWORD *)((char *)v364 + 8);
    v20 = *(_OWORD *)((char *)&v364[1] + 8);
    v21 = *(_OWORD *)((char *)&v364[2] + 8);
    v22 = *(_OWORD *)((char *)&v364[3] + 8);
  }
  if (v63 != 16)
    goto LABEL_9;
LABEL_16:
  memcpy(v366, v364, sizeof(v366));
  if (*(_BYTE *)(v3 + 764) != 1)
    goto LABEL_24;
  if (LOBYTE(v372[3].timescale) != 1)
  {
    if (v372[3].value != 5)
      goto LABEL_22;
LABEL_19:
    v360[0].value = v372[3].value;
    LOBYTE(v360[0].timescale) = v372[3].timescale;
    v360[0].flags = v372[3].flags;
    v360[0].epoch = v372[3].epoch;
    v360[1] = v372[4];
    v360[2].value = v372[5].value;
    *(_QWORD *)&v360[2].timescale = *(_QWORD *)&v372[5].timescale;
    LOBYTE(v360[2].epoch) = v372[5].epoch;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Tracking3D.configEnrollment(_:)((uint64_t)v360);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v372[3].value >= 5uLL)
    goto LABEL_19;
LABEL_22:
  if (*(_BYTE *)(v3 + 164) == 1 && (*(_BYTE *)(v3 + 817) & 1) == 0)
  {
    memcpy(v360, v372, sizeof(v360));
    v212 = *(_QWORD **)(v3 + 40);
    swift_bridgeObjectRetain();
    Tracking3D.estimateAvgBoneLengthFromPose(handsData:trackingInfos:)(v360, v212);
LABEL_20:
    swift_bridgeObjectRelease();
  }
LABEL_24:
  v286 = 0;
  v322 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = *(_QWORD *)(v3 + 16);
  LOBYTE(v94) = *(_BYTE *)(v3 + 24);
  v298 = v3;
  do
  {
    memcpy(v360, v364, sizeof(v360));
    v95 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)&v339[0] = *(_QWORD *)(v3 + 32);
    *((_QWORD *)&v339[0] + 1) = v95;
    v96 = v290[9];
    v368[8] = v290[8];
    v368[9] = v96;
    v368[10] = v290[10];
    v97 = v290[5];
    v368[4] = v290[4];
    v368[5] = v97;
    v98 = v290[6];
    v368[7] = v290[7];
    v368[6] = v98;
    v99 = v290[1];
    v368[0] = *v290;
    v368[1] = v99;
    v100 = v290[2];
    v368[3] = v290[3];
    v368[2] = v100;
    v101 = *(_QWORD *)(v3 + 48);
    memcpy(v358, __src, 0x1CCuLL);
    v102 = __src[5];
    v369[4] = __src[4];
    v369[5] = v102;
    v369[6] = __src[6];
    v370 = *((_QWORD *)__src + 14);
    v103 = __src[1];
    v369[0] = *__src;
    v369[1] = v103;
    v104 = __src[3];
    v369[2] = __src[2];
    v369[3] = v104;
    v105 = *(_DWORD *)(v3 + 828);
    swift_retain();
    outlined retain of HandsKitData(v364);
    swift_bridgeObjectRetain();
    outlined retain of TrackingIntermediateData((uint64_t *)v368);
    outlined retain of TrackingConfig((uint64_t)v358);
    outlined retain of SchedulingConfig((uint64_t)v358);
    LODWORD(v213) = v105;
    v106 = TrackingState.schedule(handsData:trackingInfos:intermediateData:detectionScheduler:trackingConfig:config:pipeline:)(v347, v343, (uint64_t)v360, v339, (uint64_t)v368, v101, (uint64_t)__dst, (uint64_t)v369, v213, v93, v94 & 1);
    v108 = v107;
    swift_release();
    outlined release of TrackingIntermediateData((uint64_t *)v368);
    outlined release of SchedulingConfig((uint64_t)v358);
    outlined release of TrackingConfig((uint64_t)v358);
    swift_bridgeObjectRelease();
    outlined release of HandsKitData(v364);
    v109 = *(_QWORD *)&v347[8];
    v110 = *(_QWORD *)v343;
    v111 = *(_QWORD *)&v343[8];
    v112 = *(_QWORD *)&v343[16];
    v113 = *(_QWORD *)&v343[24];
    *(_QWORD *)(v3 + 32) = *(_QWORD *)v347;
    *(_QWORD *)(v3 + 40) = v109;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v106;
    *(_BYTE *)(v3 + 24) = v108 & 1;
    if (v113)
    {
      v281 = v112;
      v283 = v111;
      v114 = *(_QWORD *)(v113 + 16);
      if (v114)
      {
        v360[0].value = MEMORY[0x24BEE4AF8];
        swift_retain();
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114, 0);
        v115 = 0;
        v116 = v360[0].value;
        v295 = v113;
        do
        {
          v117 = v113 + v115;
          v313 = *(_QWORD *)(v113 + v115 + 32);
          v310 = *(_BYTE *)(v113 + v115 + 40);
          v307 = *(_QWORD *)(v113 + v115 + 48);
          v304 = *(_BYTE *)(v113 + v115 + 56);
          v319 = *(_OWORD *)(v113 + v115 + 64);
          v118 = *(_QWORD *)(v113 + v115 + 80);
          v316 = *(_OWORD *)(v117 + 96);
          v119 = *(_QWORD *)(v117 + 112);
          v120 = *(_QWORD *)(v117 + 120);
          v301 = *(_QWORD *)(v117 + 128);
          v323 = *(_QWORD *)(v117 + 144);
          v121 = *(_DWORD *)(v3 + 760);
          v122 = v299[236];
          v124 = *(_QWORD *)(v116 + 16);
          v123 = *(_QWORD *)(v116 + 24);
          v360[0].value = v116;
          swift_bridgeObjectRetain();
          if (v124 >= v123 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v124 + 1, 1);
            v116 = v360[0].value;
          }
          *(_QWORD *)(v116 + 16) = v124 + 1;
          v125 = v116 + (v124 << 7);
          *(_QWORD *)(v125 + 32) = v313;
          *(_BYTE *)(v125 + 40) = v310;
          *(_QWORD *)(v125 + 48) = v307;
          *(_BYTE *)(v125 + 56) = v304;
          *(_OWORD *)(v125 + 64) = v319;
          *(_QWORD *)(v125 + 80) = v118;
          *(_OWORD *)(v125 + 96) = v316;
          *(_QWORD *)(v125 + 112) = v119;
          *(_QWORD *)(v125 + 120) = v120;
          *(_QWORD *)(v125 + 128) = v301;
          *(_DWORD *)(v125 + 136) = v121;
          *(_BYTE *)(v125 + 140) = v122;
          v115 += 128;
          *(_QWORD *)(v125 + 144) = v323;
          --v114;
          v3 = v298;
          v113 = v295;
        }
        while (v114);
        v126 = v116;
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        v126 = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v106 = *(_QWORD *)(v3 + 16);
      v108 = *(_BYTE *)(v3 + 24);
      v286 = v126;
      v322 = v110;
      v90 = v283;
      v91 = v281;
      v92 = v126;
    }
    v127 = v292;
    v129 = v292[2];
    v128 = v292[3];
    if (v129 >= v128 >> 1)
      v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v128 > 1), v129 + 1, 1, v292);
    v127[2] = v129 + 1;
    v130 = &v127[2 * v129];
    v130[4] = v106;
    *((_BYTE *)v130 + 40) = v108 & 1;
    v93 = *(_QWORD *)(v3 + 16);
    v94 = *(unsigned __int8 *)(v3 + 24);
    v292 = v127;
    if (v94 == 1)
      __asm { BR              X8 }
  }
  while (v93 != 24);
  v131 = *(_DWORD *)(v3 + 824);
  if (!v131)
    v131 = *(_DWORD *)(v3 + 820);
  v132 = v92;
  if (v131 == 4 && v286)
  {
    swift_bridgeObjectRelease();
    v93 = *(_QWORD *)(v3 + 16);
    LOBYTE(v94) = *(_BYTE *)(v3 + 24);
    v132 = MEMORY[0x24BEE4AF8];
    goto LABEL_45;
  }
  if (v92)
  {
LABEL_45:
    v223 = v132;
    v217 = HIDWORD(v90);
    v222 = v90;
    if (specialized == infix<A>(_:_:)(v93, v94, 17, 1))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      v360[0].value = 0;
      *(_QWORD *)&v360[0].timescale = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(61);
      v133._countAndFlagsBits = 0xD00000000000003ALL;
      v133._object = (void *)0x800000023D9DADD0;
      String.append(_:)(v133);
      v134._countAndFlagsBits = MEMORY[0x2426374F8](v127, &type metadata for TrackingState);
      String.append(_:)(v134);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v135._countAndFlagsBits = 46;
      v135._object = (void *)0xE100000000000000;
      String.append(_:)(v135);
      v360[1].value = MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      memset(__dst, 0, 32);
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)__dst, 0xD00000000000005ELL, 0x800000023D9CB6A0, 356, (uint64_t)v360, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v360);
    }
    v136 = v366[0].value;
    v137 = *(_QWORD *)&v366[0].timescale;
    v269 = v366[0].epoch;
    v138 = v366[1].value;
    v268 = *(_QWORD *)&v366[1].timescale;
    v267 = v366[1].epoch;
    v266 = v366[2].value;
    v265 = *(_QWORD *)&v366[2].timescale;
    v264 = v366[2].epoch;
    v139 = v366[3].value;
    v140 = v366[3].timescale;
    v141 = v366[3].flags;
    v142 = v366[3].epoch;
    epoch_high = HIDWORD(v366[3].epoch);
    v145 = *(_QWORD *)&v366[4].timescale;
    v144 = v366[4].value;
    v147 = v366[5].value;
    v146 = v366[4].epoch;
    v148 = v366[5].epoch;
    v149 = *(_QWORD *)&v366[5].timescale;
    v151 = *(_QWORD *)&v366[6].timescale;
    v150 = v366[6].value;
    v153 = v366[7].value;
    v152 = v366[6].epoch;
    v154 = v366[7].timescale;
    v155 = v366[7].epoch;
    v156 = v366[8].value;
    v157 = *(_OWORD *)&v366[8].epoch;
    v158 = *(_OWORD *)&v366[9].timescale;
    v159 = *(_OWORD *)&v366[10].value;
    v160 = *(_OWORD *)&v366[10].epoch;
    v161 = *(_OWORD *)&v366[11].timescale;
    v162 = *(_OWORD *)&v366[12].value;
    v163 = *(_OWORD *)&v366[12].epoch;
    v164 = *(_OWORD *)&v366[13].timescale;
    v165 = *(_QWORD *)&v366[22].timescale;
    v271 = *(_QWORD *)&v366[8].timescale;
    v274 = *(_QWORD *)&v366[14].timescale;
    v276 = v366[14].value;
    v272 = HIDWORD(v366[14].epoch);
    v270 = v366[14].epoch;
    v273 = v366[15];
    v275 = v366[16].value;
    v166 = v366[16].timescale;
    v277 = *(_QWORD *)&v366[16].flags;
    v278 = *(CMTimeEpoch *)((char *)&v366[16].epoch + 4);
    v282 = *(CMTimeValue *)((char *)&v366[17].value + 4);
    v284 = *(_QWORD *)&v366[17].flags;
    v287 = *(CMTimeEpoch *)((char *)&v366[17].epoch + 4);
    v293 = *(CMTimeValue *)((char *)&v366[18].value + 4);
    v167 = v366[18].flags;
    v302 = v366[19].value;
    v296 = v366[18].epoch;
    v168 = v366[19].timescale;
    v305 = v366[19].epoch;
    v308 = v366[20].value;
    v311 = *(_QWORD *)&v366[20].timescale;
    v320 = v366[21].value;
    v317 = v366[20].epoch;
    v169 = v366[21].epoch;
    v170 = *(_QWORD *)&v366[21].timescale;
    v171 = v366[22].value;
    v314 = v366[22].epoch;
    v172 = v322;
    v221 = v91;
    while (1)
    {
      v360[0].value = v136;
      *(_QWORD *)&v360[0].timescale = v137;
      v360[0].epoch = v269;
      v360[1].value = v138;
      *(_QWORD *)&v360[1].timescale = v268;
      v360[1].epoch = v267;
      v360[2].value = v266;
      *(_QWORD *)&v360[2].timescale = v265;
      v360[2].epoch = v264;
      v360[3].value = v139;
      v360[3].epoch = __PAIR64__(epoch_high, v142);
      v360[4].value = v144;
      *(_QWORD *)&v360[4].timescale = v145;
      v360[4].epoch = v146;
      v360[5].value = v147;
      *(_QWORD *)&v360[5].timescale = v149;
      v360[6].value = v150;
      *(_QWORD *)&v360[6].timescale = v151;
      v360[6].epoch = v152;
      v360[7].value = v153;
      v360[7].timescale = v154;
      v360[7].epoch = v155;
      v360[8].value = v156;
      *(_QWORD *)&v360[8].timescale = v271;
      LOBYTE(v360[3].timescale) = v140 & 1;
      v360[3].flags = v141;
      LOBYTE(v360[5].epoch) = v148 & 1;
      *(_OWORD *)&v360[8].epoch = v157;
      *(_OWORD *)&v360[9].timescale = v158;
      *(_OWORD *)&v360[10].value = v159;
      *(_OWORD *)&v360[10].epoch = v160;
      *(_OWORD *)&v360[11].timescale = v161;
      *(_OWORD *)&v360[12].value = v162;
      *(_OWORD *)&v360[12].epoch = v163;
      *(_OWORD *)&v360[13].timescale = v164;
      v360[14].value = v276;
      *(_QWORD *)&v360[14].timescale = v274;
      v360[14].epoch = __PAIR64__(v272, v270);
      v360[15] = v273;
      v360[16].value = v275;
      LOBYTE(v360[16].timescale) = v166 & 1;
      *(_QWORD *)&v360[16].flags = v277;
      *(CMTimeEpoch *)((char *)&v360[16].epoch + 4) = v278;
      *(CMTimeValue *)((char *)&v360[17].value + 4) = v282;
      *(_QWORD *)&v360[17].flags = v284;
      *(CMTimeEpoch *)((char *)&v360[17].epoch + 4) = v287;
      *(CMTimeValue *)((char *)&v360[18].value + 4) = v293;
      LOBYTE(v360[18].flags) = v167 & 1;
      v360[18].epoch = v296;
      v360[19].value = v302;
      LOBYTE(v360[19].timescale) = v168 & 1;
      v360[19].epoch = v305;
      v360[20].value = v308;
      *(_QWORD *)&v360[20].timescale = v311;
      v360[20].epoch = v317;
      v360[21].value = v320;
      *(_QWORD *)&v360[21].timescale = v170;
      v360[21].epoch = v169;
      v360[22].value = v171;
      *(_QWORD *)&v360[22].timescale = v165;
      v360[22].epoch = v314;
      v173 = *(_QWORD *)(v3 + 48);
      v174 = *(_QWORD *)(v3 + 16);
      v175 = *(_BYTE *)(v3 + 24);
      memcpy(v343, v360, sizeof(v343));
      v176 = *(_QWORD *)(v3 + 40);
      v342[0] = *(_QWORD *)(v3 + 32);
      v342[1] = v176;
      v177 = v290[9];
      v367[8] = v290[8];
      v367[9] = v177;
      v367[10] = v290[10];
      v178 = v290[5];
      v367[4] = v290[4];
      v367[5] = v178;
      v179 = v290[6];
      v367[7] = v290[7];
      v367[6] = v179;
      v180 = v290[1];
      v367[0] = *v290;
      v367[1] = v180;
      v181 = v290[2];
      v367[3] = v290[3];
      v367[2] = v181;
      swift_beginAccess();
      v182 = *(_QWORD *)(v173 + 32);
      v340 = *(_OWORD *)(v173 + 16);
      v341 = v182;
      memcpy(v347, __src, sizeof(v347));
      memcpy(v339, __src, 0x1CCuLL);
      v183 = *v280;
      v338[0] = v172;
      v338[1] = v222;
      v338[2] = v91;
      v338[3] = v223;
      v184 = *v299;
      swift_retain();
      outlined retain of HandsKitData(v360);
      swift_bridgeObjectRetain();
      outlined retain of TrackingIntermediateData((uint64_t *)v367);
      swift_bridgeObjectRetain();
      outlined retain of TrackingConfig((uint64_t)v347);
      swift_bridgeObjectRetain();
      LOBYTE(v216) = v184;
      v3 = v298;
      LOBYTE(v215) = v183;
      TrackingState.process(handsData:trackingInfos:intermediateData:schedulingData:config:isN301:detectionSpec:serializeInternalData:)((uint64_t)&v324, __dst, v346, &v344, v343, v342, (uint64_t *)v367, (uint64_t *)&v340, v339, v215, (uint64_t)v338, v216, v174, v175);
      v228 = v325;
      v229 = v324;
      v226 = v327;
      v227 = v326;
      v225 = v328;
      v230 = v329;
      v231 = v330;
      v232 = v331;
      v185 = v333;
      v233 = v334;
      v236 = v336;
      v237 = v337;
      v234 = v332;
      v235 = v335;
      outlined release of TrackingIntermediateData((uint64_t *)v367);
      swift_bridgeObjectRelease();
      outlined release of TrackingConfig((uint64_t)v347);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of HandsKitData(v360);
      outlined release of HandsKitData(v360);
      v238 = *((_QWORD *)&__dst[0] + 1);
      v239 = *((_QWORD *)&__dst[1] + 1);
      v269 = *(_QWORD *)&__dst[1];
      v240 = *(_QWORD *)&__dst[0];
      v267 = *((_QWORD *)&__dst[2] + 1);
      v268 = *(_QWORD *)&__dst[2];
      v265 = *((_QWORD *)&__dst[3] + 1);
      v266 = *(_QWORD *)&__dst[3];
      v263 = *((_QWORD *)&__dst[4] + 1);
      v264 = *(_QWORD *)&__dst[4];
      v242 = __dst[5];
      v356 = BYTE3(__dst[5]);
      v355 = *(_WORD *)((char *)&__dst[5] + 1);
      v254 = DWORD2(__dst[5]);
      v141 = DWORD1(__dst[5]);
      v253 = HIDWORD(__dst[5]);
      v186 = __dst[6];
      v187 = __dst[7];
      v252 = *(_QWORD *)&__dst[8];
      v241 = BYTE8(__dst[8]);
      *(_DWORD *)((char *)v354 + 3) = HIDWORD(__dst[8]);
      v354[0] = *(_DWORD *)((char *)&__dst[8] + 9);
      v251 = *(_QWORD *)&__dst[9];
      v249 = *(_QWORD *)&__dst[10];
      v250 = *((_QWORD *)&__dst[9] + 1);
      v247 = *((_QWORD *)&__dst[11] + 1);
      v243 = *(_QWORD *)&__dst[11];
      v248 = *((_QWORD *)&__dst[10] + 1);
      v271 = *((_QWORD *)&__dst[12] + 1);
      v246 = *(_QWORD *)&__dst[12];
      v261 = __dst[14];
      v262 = __dst[13];
      v259 = __dst[16];
      v260 = __dst[15];
      v257 = __dst[18];
      v258 = __dst[17];
      v255 = __dst[20];
      v256 = __dst[19];
      v274 = *((_QWORD *)&__dst[21] + 1);
      v276 = *(_QWORD *)&__dst[21];
      v352 = *(_WORD *)((char *)&__dst[24] + 9);
      v353 = BYTE11(__dst[24]);
      v350 = *(_WORD *)((char *)&__dst[27] + 13);
      v351 = HIBYTE(__dst[27]);
      v349[0] = *(_DWORD *)((char *)&__dst[29] + 1);
      *(_DWORD *)((char *)v349 + 3) = DWORD1(__dst[29]);
      v188 = v346[1];
      *(_QWORD *)(v298 + 32) = v346[0];
      *(_QWORD *)(v298 + 40) = v188;
      v272 = DWORD1(__dst[22]);
      v270 = __dst[22];
      v165 = *((_QWORD *)&__dst[33] + 1);
      v224 = v344;
      v273.value = *((_QWORD *)&__dst[22] + 1);
      *(_OWORD *)&v273.timescale = __dst[23];
      v275 = *(_QWORD *)&__dst[24];
      v189 = BYTE8(__dst[24]);
      v277 = *(_QWORD *)((char *)&__dst[24] + 12);
      v278 = *(_QWORD *)((char *)&__dst[25] + 4);
      v282 = *(_QWORD *)((char *)&__dst[25] + 12);
      v284 = *(_QWORD *)((char *)&__dst[26] + 4);
      v287 = *(_QWORD *)((char *)&__dst[26] + 12);
      v293 = *(_QWORD *)((char *)&__dst[27] + 4);
      v190 = BYTE12(__dst[27]);
      v302 = *((_QWORD *)&__dst[28] + 1);
      v296 = *(_QWORD *)&__dst[28];
      v191 = __dst[29];
      v305 = *((_QWORD *)&__dst[29] + 1);
      v311 = *((_QWORD *)&__dst[30] + 1);
      v308 = *(_QWORD *)&__dst[30];
      v320 = *((_QWORD *)&__dst[31] + 1);
      v317 = *(_QWORD *)&__dst[31];
      v244 = __dst[32];
      v245 = *(_QWORD *)&__dst[33];
      v314 = *(_QWORD *)&__dst[34];
      LODWORD(v171) = __dst[29] & 1;
      v192 = v345;
      swift_bridgeObjectRelease();
      v193 = v290[9];
      v357[8] = v290[8];
      v357[9] = v193;
      v357[10] = v290[10];
      v194 = v290[5];
      v357[4] = v290[4];
      v357[5] = v194;
      v195 = v290[6];
      v357[7] = v290[7];
      v357[6] = v195;
      v196 = v290[1];
      v357[0] = *v290;
      v357[1] = v196;
      v197 = v290[2];
      v357[3] = v290[3];
      v357[2] = v197;
      *(_OWORD *)(v298 + 584) = v229;
      *(_OWORD *)(v298 + 600) = v228;
      *(_OWORD *)(v298 + 616) = v227;
      *(_OWORD *)(v298 + 632) = v226;
      *(_OWORD *)(v298 + 648) = v225;
      *(_OWORD *)(v298 + 664) = v230;
      *(_OWORD *)(v298 + 680) = v231;
      *(_OWORD *)(v298 + 696) = v232;
      *(_OWORD *)(v298 + 712) = v234;
      *(_QWORD *)(v298 + 728) = v185;
      *(_BYTE *)(v298 + 736) = v233;
      *v279 = *(_DWORD *)v348;
      *(_DWORD *)((char *)v279 + 3) = *(_DWORD *)&v348[3];
      *(_OWORD *)(v299 + 216) = v235;
      outlined release of TrackingIntermediateData((uint64_t *)v357);
      *(_OWORD *)(v173 + 16) = v224;
      *(_QWORD *)(v173 + 32) = v192;
      swift_release();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v298 + 16) = v236;
      *(_BYTE *)(v298 + 24) = v237;
      if (!v236)
        break;
      v166 = v189 & 1;
      v167 = v190 & 1;
      v140 = v242 & 1;
      v148 = v241 & 1;
      v168 = (_DWORD)v171 != 0;
      v154 = v243;
      v91 = v221;
      v172 = v322;
      v136 = v240;
      v139 = v263;
      v158 = v261;
      v157 = v262;
      v160 = v259;
      v159 = v260;
      v162 = v257;
      v161 = v258;
      v164 = v255;
      v163 = v256;
      v142 = v254;
      epoch_high = v253;
      v145 = *((_QWORD *)&v186 + 1);
      v144 = v186;
      v147 = *((_QWORD *)&v187 + 1);
      v146 = v187;
      v149 = v252;
      v150 = v251;
      v152 = v249;
      v151 = v250;
      v155 = v247;
      v153 = v248;
      v171 = v245;
      v156 = v246;
      v137 = v238;
      v138 = v239;
      v169 = *((_QWORD *)&v244 + 1);
      v170 = v244;
    }
    *(_WORD *)((char *)&v366[16].timescale + 1) = v352;
    *(_WORD *)((char *)&v366[18].flags + 1) = v350;
    *(CMTimeScale *)((char *)&v366[19].timescale + 1) = v349[0];
    v366[0].epoch = v269;
    *(_QWORD *)&v366[1].timescale = v268;
    v366[1].epoch = v267;
    v366[2].value = v266;
    *(_QWORD *)&v366[2].timescale = v265;
    v366[2].epoch = v264;
    *(_WORD *)((char *)&v366[3].timescale + 1) = v355;
    HIBYTE(v366[3].timescale) = v356;
    *(_DWORD *)((char *)&v366[5].epoch + 1) = v354[0];
    HIDWORD(v366[5].epoch) = *(_DWORD *)((char *)v354 + 3);
    HIBYTE(v366[16].timescale) = v353;
    *(_QWORD *)&v366[16].flags = v277;
    *(CMTimeValue *)((char *)&v366[17].value + 4) = v282;
    *(_QWORD *)&v366[17].flags = v284;
    *(CMTimeEpoch *)((char *)&v366[17].epoch + 4) = v287;
    *(CMTimeValue *)((char *)&v366[18].value + 4) = v293;
    HIBYTE(v366[18].flags) = v351;
    LOBYTE(v366[19].timescale) = v191;
    v366[19].flags = *(_DWORD *)((char *)v349 + 3);
    *(_QWORD *)&v366[0].timescale = v238;
    v366[1].value = v239;
    v366[3].value = v263;
    LOBYTE(v366[3].timescale) = v242;
    v366[3].flags = v141;
    *(_QWORD *)&v366[5].timescale = v252;
    LOBYTE(v366[5].epoch) = v241;
    *(_QWORD *)&v366[6].timescale = v250;
    v366[7].value = v248;
    *(_QWORD *)&v366[7].timescale = v243;
    *(_OWORD *)&v366[8].value = __PAIR128__(v271, v246);
    *(_OWORD *)&v366[9].timescale = v261;
    *(_OWORD *)&v366[10].epoch = v259;
    *(_OWORD *)&v366[12].value = v257;
    *(_OWORD *)&v366[13].timescale = v255;
    v366[14].epoch = __PAIR64__(v272, v270);
    *(_OWORD *)&v366[15].timescale = *(_OWORD *)&v273.timescale;
    v366[16].value = v275;
    v291 = v189;
    LOBYTE(v366[16].timescale) = v189;
    *(CMTimeEpoch *)((char *)&v366[16].epoch + 4) = v278;
    __srca = v190;
    LOBYTE(v366[18].flags) = v190;
    v366[20].value = v308;
    *(_OWORD *)&v366[20].epoch = __PAIR128__(v320, v317);
    *(_OWORD *)&v366[21].timescale = v244;
    v366[22].value = v245;
    *(_QWORD *)&v366[22].timescale = v165;
    v366[22].epoch = v314;
    v199 = *v299 == 1;
    v200 = v240;
    v366[0].value = v240;
    v366[3].epoch = __PAIR64__(v253, v254);
    *(_OWORD *)&v366[4].value = v186;
    *(_OWORD *)&v366[4].epoch = v187;
    v366[6].value = v251;
    v366[6].epoch = v249;
    v366[7].epoch = v247;
    *(_OWORD *)&v366[8].epoch = v262;
    *(_OWORD *)&v366[10].value = v260;
    *(_OWORD *)&v366[11].timescale = v258;
    *(_OWORD *)&v366[12].epoch = v256;
    *(_OWORD *)&v366[14].value = __PAIR128__(v274, v276);
    v366[15].value = v273.value;
    *(_OWORD *)&v366[18].epoch = __PAIR128__(v302, v296);
    v366[19].epoch = v305;
    *(_QWORD *)&v366[20].timescale = v311;
    v201 = v221;
    if (v199)
    {
      if (!v238)
      {
        v366[0].epoch = 0;
        v366[1].value = 0;
        *(_QWORD *)&v366[0].timescale = MEMORY[0x24BEE4AF8];
        *(_QWORD *)&v366[1].timescale = 2;
        v366[2].value = 0;
        *(_QWORD *)&v366[2].timescale = 0;
        v366[1].epoch = 0;
        v366[2].epoch = MEMORY[0x24BEE4AF8];
      }
      *(_QWORD *)&__dst[0] = v322;
      *((_QWORD *)&__dst[0] + 1) = __PAIR64__(v217, v222);
      *(_QWORD *)&__dst[1] = v221;
      *((_QWORD *)&__dst[1] + 1) = v223;
      v198.inputTimestamp.value = (CMTimeValue)__dst;
      LOBYTE(v366[1].timescale) = Tracking3D.checkTrackingInitialState(_:)(v198);
      v203 = *(_QWORD *)(v298 + 32);
      v202 = *(_QWORD *)(v298 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v201 = v221;
      v366[0].epoch = v203;
      v366[1].value = v202;
      if (*(_QWORD *)&v366[0].timescale)
      {
        v204 = *(_QWORD **)(v298 + 48);
        swift_beginAccess();
        v205 = v171;
        v206 = v204[2];
        v171 = v204[3];
        v207 = v204[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v201 = v221;
        v366[1].epoch = v206;
        v366[2].value = v171;
        LOBYTE(v171) = v205;
        v200 = v240;
        *(_QWORD *)&v366[2].timescale = v207;
      }
    }
    *(_QWORD *)(v298 + 544) = v322;
    *(_DWORD *)(v298 + 552) = v222;
    *(_DWORD *)(v298 + 556) = v217;
    *(_QWORD *)(v298 + 560) = v201;
    *(_QWORD *)(v298 + 568) = v223;
    v208 = v201;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Hands_trace_CBridge();
    Hands_trace_CBridge();
    Hands_trace_CBridge();
    result = (_QWORD *)swift_bridgeObjectRelease();
    *v219 = v322;
    *((_DWORD *)v219 + 2) = v222;
    *((_DWORD *)v219 + 3) = v217;
    v219[2] = v208;
    v219[3] = v223;
    *(_QWORD *)v220 = v200;
    *((_QWORD *)v220 + 9) = v263;
    *((_DWORD *)v220 + 22) = v254;
    *((_DWORD *)v220 + 23) = v253;
    *((_OWORD *)v220 + 6) = v186;
    *((_OWORD *)v220 + 7) = v187;
    *((_QWORD *)v220 + 16) = v252;
    *((_QWORD *)v220 + 18) = v251;
    *((_QWORD *)v220 + 19) = v250;
    *((_QWORD *)v220 + 20) = v249;
    *((_QWORD *)v220 + 21) = v248;
    *((_QWORD *)v220 + 23) = v247;
    *((_QWORD *)v220 + 24) = v246;
    *((_QWORD *)v220 + 25) = v271;
    *((_QWORD *)v220 + 42) = v276;
    *((_QWORD *)v220 + 43) = v274;
    *((_DWORD *)v220 + 88) = v270;
    v343[0] = v242 & 1;
    LOBYTE(v339[0]) = v241 & 1;
    LOBYTE(v324) = v291 & 1;
    LOBYTE(v338[0]) = __srca & 1;
    *(_OWORD *)(v220 + 8) = *(_OWORD *)&v366[0].timescale;
    *(_OWORD *)(v220 + 24) = *(_OWORD *)&v366[1].value;
    *(_OWORD *)(v220 + 40) = *(_OWORD *)&v366[1].epoch;
    *(_OWORD *)(v220 + 56) = *(_OWORD *)&v366[2].timescale;
    v220[80] = v242 & 1;
    *((_DWORD *)v220 + 21) = v141;
    v220[136] = v339[0];
    *((_DWORD *)v220 + 44) = v243;
    *((_OWORD *)v220 + 13) = v262;
    *((_OWORD *)v220 + 14) = v261;
    *((_OWORD *)v220 + 15) = v260;
    *((_OWORD *)v220 + 16) = v259;
    *((_OWORD *)v220 + 17) = v258;
    *((_OWORD *)v220 + 18) = v257;
    *((_OWORD *)v220 + 19) = v256;
    *((_OWORD *)v220 + 20) = v255;
    *((_DWORD *)v220 + 89) = v272;
    *((CMTime *)v220 + 15) = v273;
    *((_QWORD *)v220 + 48) = v275;
    v220[392] = v324;
    *v218 = v277;
    *(_QWORD *)(v220 + 404) = v278;
    v218[2] = v282;
    v218[3] = v284;
    v218[4] = v287;
    v218[5] = v293;
    v220[444] = v338[0];
    *((_QWORD *)v220 + 56) = v296;
    *((_QWORD *)v220 + 57) = v302;
    v220[464] = v171;
    *((_QWORD *)v220 + 59) = v305;
    *((_QWORD *)v220 + 60) = v308;
    *((_QWORD *)v220 + 61) = v311;
    *((_QWORD *)v220 + 62) = v317;
    *((_QWORD *)v220 + 63) = v320;
    *((_OWORD *)v220 + 32) = v244;
    *((_QWORD *)v220 + 66) = v245;
    *((_QWORD *)v220 + 67) = v165;
    *((_QWORD *)v220 + 68) = v314;
  }
  else
  {
    swift_bridgeObjectRelease();
    v360[1].value = MEMORY[0x24BEE0D00];
    v360[0].value = 0xD00000000000001CLL;
    *(_QWORD *)&v360[0].timescale = 0x800000023D9DADB0;
    type metadata accessor for HandyLoggerNeo();
    memset(__dst, 0, 32);
    v209 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)__dst, 0xD00000000000005ELL, 0x800000023D9CB6A0, 348, (uint64_t)v360, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v360);
    CMTimeMake(v360, 0, 1);
    v210 = v360[0].epoch;
    v211 = *(_QWORD *)&v360[0].timescale;
    *v219 = v360[0].value;
    v219[1] = v211;
    v219[2] = v210;
    v219[3] = v209;
    memcpy(v220, v366, 0x228uLL);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Bool __swiftcall Tracking3D.checkTrackingInitialState(_:)(Hands::DetectionSpec a1)
{
  uint64_t v1;
  Swift::Bool result;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(*(_QWORD *)(v1 + 40) + 16))
  {
    result = 0;
    *(_QWORD *)(v1 + 520) = 0;
    return result;
  }
  v3 = *(_QWORD *)(a1.inputTimestamp.value + 24);
  v4 = *(_QWORD *)(v1 + 520);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(_QWORD *)(v1 + 520) = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)(v1 + 520) = v4 + 1;
    if (v4 < 9)
      return 0;
  }
  if (*(_QWORD *)(v3 + 16) == 1)
    return *(_QWORD *)(v3 + 48) == 2;
  return 0;
}

Swift::Void __swiftcall Tracking3D.assertImageStreamsMatchConfig(images:)(Swift::OpaquePointer images)
{
  uint64_t v2;
  char v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::String v17;
  _OWORD v18[2];
  _QWORD v19[5];

  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.allSatisfy(_:)(v2, (uint64_t)images._rawValue);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0)
  {
    v19[0] = 0;
    v19[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(90);
    v4._countAndFlagsBits = 0xD000000000000044;
    v4._object = (void *)0x800000023D9DAD00;
    String.append(_:)(v4);
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = Set.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6._object = (void *)0x800000023D9DAD50;
    v6._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v6);
    v7 = *((_QWORD *)images._rawValue + 2);
    v8 = MEMORY[0x24BEE4AF8];
    if (v7)
    {
      *(_QWORD *)&v18[0] = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
      v8 = *(_QWORD *)&v18[0];
      v9 = *(_QWORD *)(*(_QWORD *)&v18[0] + 16);
      v10 = 16 * v9;
      v11 = (char *)images._rawValue + 112;
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        *(_QWORD *)&v18[0] = v8;
        v14 = *(_QWORD *)(v8 + 24);
        v15 = v9 + 1;
        if (v9 >= v14 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v9 + 1, 1);
          v8 = *(_QWORD *)&v18[0];
        }
        *(_QWORD *)(v8 + 16) = v15;
        v16 = v8 + v10;
        *(_QWORD *)(v16 + 32) = v12;
        *(_BYTE *)(v16 + 40) = v13;
        v10 += 16;
        v11 += 192;
        v9 = v15;
        --v7;
      }
      while (v7);
    }
    v17._countAndFlagsBits = MEMORY[0x2426374F8](v8, &type metadata for CameraSource);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v18, 0, sizeof(v18));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v18, 0xD00000000000005ELL, 0x800000023D9CB6A0, 394, (uint64_t)v19, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  }
}

uint64_t Tracking3D.estimateAvgBoneLengthFromPose(handsData:trackingInfos:)(void *__src, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v6;
  char **v7;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float v27;
  Swift::String v28;
  uint64_t v29;
  _QWORD v30[5];
  _OWORD __dst[35];

  v3 = v2;
  memcpy(__dst, __src, 0x228uLL);
  result = specialized static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)(*(float *)(v3 + 168), (uint64_t)__dst, a2, *(int *)(v3 + 172));
  if ((result & 0x100000000) == 0)
  {
    v6 = result;
    v7 = (char **)(v3 + 768);
    swift_beginAccess();
    v8 = *(char **)(v3 + 768);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 768) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      *v7 = v8;
    }
    v11 = *((_QWORD *)v8 + 2);
    v10 = *((_QWORD *)v8 + 3);
    if (v11 >= v10 >> 1)
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v8);
      *v7 = v8;
    }
    *((_QWORD *)v8 + 2) = v11 + 1;
    *(_DWORD *)&v8[4 * v11 + 32] = v6;
    v12 = *(_QWORD *)(v3 + 768);
    result = swift_endAccess();
    if (*(_QWORD *)(v12 + 16) >= *(_QWORD *)(v3 + 776))
    {
      *(_QWORD *)&__dst[0] = v12;
      swift_bridgeObjectRetain_n();
      v13 = 0;
      specialized MutableCollection<>.sort(by:)((uint64_t *)__dst);
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v3 + 784);
      v15 = *(_QWORD *)(v3 + 792);
      if (v15 < v14)
      {
        __break(1u);
      }
      else if ((v14 & 0x8000000000000000) == 0)
      {
        v13 = *(_QWORD *)&__dst[0];
        v16 = *(_QWORD *)(*(_QWORD *)&__dst[0] + 16);
        if (v16 >= v14 && (uint64_t)v16 >= v15)
        {
          type metadata accessor for __ContiguousArrayStorageBase();
          swift_unknownObjectRetain_n();
          v17 = swift_dynamicCastClass();
          if (!v17)
          {
            swift_release();
            v17 = MEMORY[0x24BEE4AF8];
          }
          v18 = *(_QWORD *)(v17 + 16);
          swift_release();
          if (v18 == v15 - v14)
          {
            v19 = swift_dynamicCastClass();
            if (!v19)
            {
              swift_release();
              v19 = MEMORY[0x24BEE4AF8];
            }
LABEL_16:
            swift_release();
            v20 = *(_QWORD *)(v19 + 16);
            if (v20)
            {
              if (v20 == 1)
              {
                v21 = 0;
                v22 = 0.0;
              }
              else
              {
                v21 = v20 & 0x7FFFFFFFFFFFFFFELL;
                v23 = (float *)(v19 + 36);
                v22 = 0.0;
                v24 = v20 & 0x7FFFFFFFFFFFFFFELL;
                do
                {
                  v22 = (float)(v22 + *(v23 - 1)) + *v23;
                  v23 += 2;
                  v24 -= 2;
                }
                while (v24);
                if (v20 == v21)
                  goto LABEL_25;
              }
              v25 = v20 - v21;
              v26 = (float *)(v19 + 4 * v21 + 32);
              do
              {
                v27 = *v26++;
                v22 = v22 + v27;
                --v25;
              }
              while (v25);
            }
            else
            {
              v22 = 0.0;
            }
LABEL_25:
            swift_release();
            *(float *)(v3 + 760) = v22 / (float)v20;
            *(_BYTE *)(v3 + 764) = 0;
            __dst[0] = xmmword_23D9B03A0;
            __dst[1] = 0uLL;
            v30[0] = 0;
            v30[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(71);
            v28._object = (void *)0x800000023D9DACB0;
            v28._countAndFlagsBits = 0xD000000000000045;
            String.append(_:)(v28);
            if ((*(_BYTE *)(v3 + 764) & 1) != 0)
            {
              __break(1u);
              result = swift_release();
              __break(1u);
            }
            else
            {
              Float.write<A>(to:)();
              v30[3] = MEMORY[0x24BEE0D00];
              v29 = MEMORY[0x24BEE4AF8];
              specialized static HLog.I(file:function:line:logArea:_:_:)(0xD00000000000005ELL, 0x800000023D9CB6A0, 412, (uint64_t *)__dst, (uint64_t)v30, MEMORY[0x24BEE4AF8]);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
              *(_QWORD *)(v3 + 768) = v29;
              return swift_bridgeObjectRelease();
            }
            return result;
          }
LABEL_31:
          swift_release();
          v19 = specialized _copyCollectionToContiguousArray<A>(_:)(v13, v13 + 32, v14, (2 * v15) | 1);
          goto LABEL_16;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      __break(1u);
      goto LABEL_30;
    }
  }
  return result;
}

uint64_t Tracking3D.dropHandsWithHighWristStdDev(_:handsKitData:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t result;
  _QWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char v101;
  uint64_t v102;

  v3 = v2;
  v6 = type metadata accessor for HandDescriptor();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v94 = (uint64_t)v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v88 = (uint64_t)v86 - v12;
  MEMORY[0x24BDAC7A8](v13, v14);
  v87 = (uint64_t)v86 - v15;
  MEMORY[0x24BDAC7A8](v16, v17);
  v89 = (uint64_t)v86 - v18;
  MEMORY[0x24BDAC7A8](v19, v20);
  v91 = (uint64_t)v86 - v21;
  MEMORY[0x24BDAC7A8](v22, v23);
  v90 = (uint64_t)v86 - v24;
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)v86 - v27;
  v102 = MEMORY[0x24BEE4B08];
  v29 = *(_QWORD *)(a1 + 16);
  if (!v29)
  {
    v32 = MEMORY[0x24BEE4AF8];
LABEL_62:
    v100 = 14;
    v101 = 1;
    v81 = *(unsigned __int8 *)(v3 + 528);
    v82 = swift_bridgeObjectRetain();
    HandsKitData.recordRejected(hands:reason:save:)(v82, (uint64_t)&v100, v81);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v83 = swift_bridgeObjectRetain();
    v84 = specialized _NativeDictionary.filter(_:)(v83, &v102);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 864) = v84;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v32;
  }
  v86[1] = a2;
  v30 = (uint64_t *)(v3 + 864);
  v95 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v31 = a1 + v95;
  v86[0] = a1;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v32 = MEMORY[0x24BEE4AF8];
  v33 = *(_QWORD *)(v7 + 72);
  v92 = MEMORY[0x24BEE4AF8];
  v93 = v3;
  v96 = v33;
  while (1)
  {
    outlined init with copy of HandDescriptor(v31, (uint64_t)v28);
    if (!*((_QWORD *)v28 + 2))
    {
      outlined init with copy of HandDescriptor((uint64_t)v28, v94);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1, v32);
      v49 = *(_QWORD *)(v32 + 16);
      v48 = *(_QWORD *)(v32 + 24);
      if (v49 >= v48 >> 1)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v32);
      *(_QWORD *)(v32 + 16) = v49 + 1;
      outlined init with take of Matrix2dPB(v94, v32 + v95 + v49 * v33, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      specialized Set._Variant.insert(_:)(&v100, *((_QWORD *)v28 + 18));
      outlined destroy of HandDescriptor((uint64_t)v28);
      goto LABEL_5;
    }
    v35 = *((float *)v28 + 33);
    v36 = *((_QWORD *)v28 + 18);
    v37 = *v30;
    if (*(_QWORD *)(*v30 + 16)
      && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v28 + 18)), (v39 & 1) != 0))
    {
      v40 = (uint64_t *)(*(_QWORD *)(v37 + 56) + 16 * v38);
      v41 = *v40;
      v42 = v40[1];
    }
    else
    {
      v42 = 0;
      v41 = 0;
    }
    v43 = *(float *)(v3 + 836);
    v98 = v36;
    if (v43 <= v35)
    {
      v50 = *(float *)(v3 + 840);
      v97 = v41;
      if (v50 < v35)
      {
        outlined init with copy of HandDescriptor((uint64_t)v28, v91);
        v51 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v51 + 16) + 1, 1, v51);
        v53 = *(_QWORD *)(v51 + 16);
        v52 = *(_QWORD *)(v51 + 24);
        if (v53 >= v52 >> 1)
          v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v51);
        *(_QWORD *)(v51 + 16) = v53 + 1;
        v92 = v51;
        v54 = v51 + v95 + v53 * v96;
        v55 = v91;
LABEL_44:
        outlined init with take of Matrix2dPB(v55, v54, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        goto LABEL_45;
      }
      v56 = __OFADD__(v42++, 1);
      if (v56)
        goto LABEL_65;
      if (*(_QWORD *)(v3 + 856) < v42)
      {
        outlined init with copy of HandDescriptor((uint64_t)v28, v89);
        v57 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v57 + 16) + 1, 1, v57);
        v59 = *(_QWORD *)(v57 + 16);
        v58 = *(_QWORD *)(v57 + 24);
        if (v59 >= v58 >> 1)
          v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1, v57);
        *(_QWORD *)(v57 + 16) = v59 + 1;
        v92 = v57;
        v54 = v57 + v95 + v59 * v96;
        v55 = v89;
        goto LABEL_44;
      }
      if (v41 < *(_QWORD *)(v3 + 848))
      {
        outlined init with copy of HandDescriptor((uint64_t)v28, v88);
        v61 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v61 + 16) + 1, 1, v61);
        v63 = *(_QWORD *)(v61 + 16);
        v62 = *(_QWORD *)(v61 + 24);
        if (v63 >= v62 >> 1)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, v61);
        *(_QWORD *)(v61 + 16) = v63 + 1;
        v92 = v61;
        v54 = v61 + v95 + v63 * v96;
        v55 = v88;
        goto LABEL_44;
      }
      outlined init with copy of HandDescriptor((uint64_t)v28, v87);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1, v32);
      v80 = *(_QWORD *)(v32 + 16);
      v79 = *(_QWORD *)(v32 + 24);
      if (v80 >= v79 >> 1)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1, v32);
      *(_QWORD *)(v32 + 16) = v80 + 1;
      outlined init with take of Matrix2dPB(v87, v32 + v95 + v80 * v33, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      specialized Set._Variant.insert(_:)(&v100, v98);
    }
    else
    {
      v44 = v41;
      v45 = v90;
      outlined init with copy of HandDescriptor((uint64_t)v28, v90);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1, v32);
      v47 = *(_QWORD *)(v32 + 16);
      v46 = *(_QWORD *)(v32 + 24);
      if (v47 >= v46 >> 1)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v32);
      *(_QWORD *)(v32 + 16) = v47 + 1;
      outlined init with take of Matrix2dPB(v45, v32 + v95 + v47 * v96, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      specialized Set._Variant.insert(_:)(&v100, v98);
      if (v42 <= 0)
      {
        v56 = __OFADD__(v44, 1);
        v60 = v44 + 1;
        if (v56)
          goto LABEL_66;
        v97 = v60;
        v42 = 0;
      }
      else
      {
        v42 = 0;
        v97 = 1;
      }
    }
LABEL_45:
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v99 = (_QWORD *)*v30;
    v65 = v99;
    *v30 = 0x8000000000000000;
    v67 = specialized __RawDictionaryStorage.find<A>(_:)(v98);
    v68 = v65[2];
    v69 = (v66 & 1) == 0;
    v70 = v68 + v69;
    if (__OFADD__(v68, v69))
      break;
    v71 = v66;
    if (v65[3] >= v70)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
      v72 = v98;
      v75 = v99;
      if ((v71 & 1) == 0)
        goto LABEL_53;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v70, isUniquelyReferenced_nonNull_native);
      v72 = v98;
      v73 = specialized __RawDictionaryStorage.find<A>(_:)(v98);
      if ((v71 & 1) != (v74 & 1))
        goto LABEL_67;
      v67 = v73;
      v75 = v99;
      if ((v71 & 1) == 0)
      {
LABEL_53:
        v75[(v67 >> 6) + 8] |= 1 << v67;
        *(_QWORD *)(v75[6] + 8 * v67) = v72;
        v76 = (uint64_t *)(v75[7] + 16 * v67);
        *v76 = v97;
        v76[1] = v42;
        v77 = v75[2];
        v56 = __OFADD__(v77, 1);
        v78 = v77 + 1;
        if (v56)
          goto LABEL_64;
        v75[2] = v78;
        goto LABEL_4;
      }
    }
    v34 = (uint64_t *)(v75[7] + 16 * v67);
    *v34 = v97;
    v34[1] = v42;
LABEL_4:
    *v30 = (uint64_t)v75;
    swift_bridgeObjectRelease();
    swift_endAccess();
    outlined destroy of HandDescriptor((uint64_t)v28);
    v3 = v93;
    v33 = v96;
LABEL_5:
    v31 += v33;
    if (!--v29)
    {
      swift_bridgeObjectRelease();
      goto LABEL_62;
    }
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Tracking3D.deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[464];
  _OWORD v8[11];

  swift_bridgeObjectRelease();
  swift_release();
  memcpy(v7, (const void *)(v0 + 56), 0x1CCuLL);
  outlined release of TrackingConfig((uint64_t)v7);
  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(_OWORD *)(v0 + 728);
  v8[8] = *(_OWORD *)(v0 + 712);
  v8[9] = v1;
  v8[10] = *(_OWORD *)(v0 + 744);
  v2 = *(_OWORD *)(v0 + 664);
  v8[4] = *(_OWORD *)(v0 + 648);
  v8[5] = v2;
  v3 = *(_OWORD *)(v0 + 696);
  v8[6] = *(_OWORD *)(v0 + 680);
  v8[7] = v3;
  v4 = *(_OWORD *)(v0 + 600);
  v8[0] = *(_OWORD *)(v0 + 584);
  v8[1] = v4;
  v5 = *(_OWORD *)(v0 + 632);
  v8[2] = *(_OWORD *)(v0 + 616);
  v8[3] = v5;
  outlined release of TrackingIntermediateData((uint64_t *)v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Tracking3D.__deallocating_deinit()
{
  Tracking3D.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Tracking3D()
{
  return objc_opt_self();
}

uint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v3 = a2;
  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, a2);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, v3);
    if (v2)
      swift_willThrow();
    else
      return (uint64_t *)v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    v3 = (uint64_t *)specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9, v6, v4, v3);
    MEMORY[0x242638D4C](v9, -1, -1);
  }
  return v3;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v24;

  v24 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_18;
    }
    v14 = __OFADD__(v6++, 1);
    if (v14)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v6 >= v11)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    if (!v15)
      break;
LABEL_17:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_18:
    v17 = *a4;
    if (*(_QWORD *)(*a4 + 16))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v13);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v17 + 32);
      v20 = result & ~v19;
      if (((*(_QWORD *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
      {
        v21 = *(_QWORD *)(v17 + 48);
        if (*(_QWORD *)(v21 + 8 * v20) == v18)
        {
LABEL_24:
          *(unint64_t *)((char *)v24 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          v14 = __OFADD__(v5++, 1);
          if (v14)
            goto LABEL_33;
        }
        else
        {
          v22 = ~v19;
          while (1)
          {
            v20 = (v20 + 1) & v22;
            if (((*(_QWORD *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
              break;
            if (*(_QWORD *)(v21 + 8 * v20) == v18)
              goto LABEL_24;
          }
        }
      }
    }
  }
  v16 = v6 + 1;
  if (v6 + 1 >= v11)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v6 + 2;
  if (v6 + 2 >= v11)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v6 + 3;
  if (v6 + 3 >= v11)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v6 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = a1[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = a1[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = a1[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = 4 * v14;
    v19 = *(_DWORD *)(*(_QWORD *)(v4 + 48) + v18);
    v20 = *(_DWORD *)(*(_QWORD *)(v4 + 56) + v18);
    result = MEMORY[0x242637B88](*(_QWORD *)(v9 + 40), v19, 4);
    v21 = -1 << *(_BYTE *)(v9 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = 4 * v24;
    *(_DWORD *)(*(_QWORD *)(v9 + 48) + v29) = v19;
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v29) = v20;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[3];

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, DetectionResult>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v42 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v42)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v42)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v42)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v42)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v42)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = *(_QWORD *)(v4 + 48) + 16 * v13;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = (__int128 *)(*(_QWORD *)(v4 + 56) + 112 * v13);
    v22 = *v20;
    v21 = v20[1];
    v46 = v20[2];
    v24 = v20[4];
    v23 = v20[5];
    v25 = v20[3];
    *(_OWORD *)((char *)v49 + 9) = *(__int128 *)((char *)v20 + 89);
    v48 = v24;
    v49[0] = v23;
    v47 = v25;
    v44 = v22;
    v45 = v21;
    Hasher.init(_seed:)();
    outlined retain of DetectionResult((uint64_t)&v44);
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v34 = *(_QWORD *)(v8 + 48) + 16 * v29;
    *(_QWORD *)v34 = v18;
    *(_BYTE *)(v34 + 8) = v19;
    v35 = (_OWORD *)(*(_QWORD *)(v8 + 56) + 112 * v29);
    v36 = v44;
    v37 = v46;
    v35[1] = v45;
    v35[2] = v37;
    *v35 = v36;
    v38 = v47;
    v39 = v48;
    v40 = v49[0];
    *(_OWORD *)((char *)v35 + 89) = *(_OWORD *)((char *)v49 + 9);
    v35[4] = v39;
    v35[5] = v40;
    v35[3] = v38;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  __int128 v28;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, WristCounts>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = a1[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = a1[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = a1[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v28 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v22) = v28;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v31;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, FilterHandPipeline>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v31 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v31[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v31[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v31[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v31[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = 8 * v14;
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v18);
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    result = static Hasher._hash(seed:_:)();
    v21 = -1 << *(_BYTE *)(v9 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = 8 * v24;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v29) = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v29) = v20;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    result = swift_retain();
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v50;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, ImageData>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v50 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v50)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v50)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v50)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v50)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v50)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = *(_QWORD *)(v4 + 48) + 16 * v13;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = (__int128 *)(*(_QWORD *)(v4 + 56) + 192 * v13);
    v22 = *v20;
    v21 = v20[1];
    v23 = v20[2];
    v55 = v20[3];
    v54 = v23;
    v24 = v20[7];
    v26 = v20[4];
    v25 = v20[5];
    v58 = v20[6];
    v59 = v24;
    v56 = v26;
    v57 = v25;
    v27 = v20[11];
    v29 = v20[8];
    v28 = v20[9];
    v62 = v20[10];
    v63 = v27;
    v60 = v29;
    v61 = v28;
    v52 = v22;
    v53 = v21;
    Hasher.init(_seed:)();
    outlined retain of ImageData((uint64_t)&v52);
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v11 + 8 * (v31 >> 6))) != 0)
    {
      v33 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v11 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v36 = v32 == v35;
        if (v32 == v35)
          v32 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v11 + 8 * v32);
      }
      while (v37 == -1);
      v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }
    *(_QWORD *)(v11 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    v38 = *(_QWORD *)(v8 + 48) + 16 * v33;
    *(_QWORD *)v38 = v18;
    *(_BYTE *)(v38 + 8) = v19;
    v39 = (_OWORD *)(*(_QWORD *)(v8 + 56) + 192 * v33);
    v40 = v52;
    v41 = v53;
    v42 = v55;
    v39[2] = v54;
    v39[3] = v42;
    *v39 = v40;
    v39[1] = v41;
    v43 = v56;
    v44 = v57;
    v45 = v59;
    v39[6] = v58;
    v39[7] = v45;
    v39[4] = v43;
    v39[5] = v44;
    v46 = v60;
    v47 = v61;
    v48 = v63;
    v39[10] = v62;
    v39[11] = v48;
    v39[8] = v46;
    v39[9] = v47;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  uint64_t result;
  float *v22;
  float *v23;
  float *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 3;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 3;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 2;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 2)
  {
    if (v11 >= -3)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 4 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 4)
      {
        v17 = (float *)(a3 - 4);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -3)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 4 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 4)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -128)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0x7FuLL : 0)) & 0xFFFFFFFFFFFFFF80;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -80)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 80;
    if (result != v3 || result >= &v3[80 * v6])
      return (char *)memmove(result, v3, 80 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -112)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 112 * (v4 / 112);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 3;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -4)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7])
      return (char *)memmove(result, v3, 4 * v7);
  }
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for HandDescriptor();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
    return a2(v3 > 1);
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_BYTE *)(v5 + 40) = a3 & 1;
  return result;
}

__n128 specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = a1 + 1;
  v4 = v3 + 40 * a1;
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 48) = v6;
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = type metadata accessor for RejectedHandPB(0);
  return outlined init with take of Matrix2dPB(a2, v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1, type metadata accessor for RejectedHandPB);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands14HandDescriptorVG_AHs5NeverOTg5061_s5Hands10Tracking3DC7runSync9withInputAA0A7KitDataVAG_tFAA14eF8VAIXEfU_AF0J1DCTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v19 = a2;
  v5 = type metadata accessor for HandDescriptor();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v20 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = v20;
    v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v13 = a1 + v12;
    v14 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      closure #1 in Tracking3D.runSync(withInput:)(v13, v19, (uint64_t)v9);
      if (v3)
        break;
      v3 = 0;
      v20 = v11;
      v16 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v11 = v20;
      }
      *(_QWORD *)(v11 + 16) = v16 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v9, v11 + v12 + v16 * v14, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v13 += v14;
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, _QWORD *a5, int a6, uint64_t **a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float32x4_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;

  v39 = a6;
  v37 = a4;
  v38 = a5;
  v35 = a2;
  v36 = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for HandDescriptor();
  v14 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34, v15);
  v33 = (uint64_t)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v32 = (uint64_t)&v29 - v19;
  v20 = *(_QWORD *)(a1 + 16);
  if (!v20)
    return MEMORY[0x24BEE4AF8];
  v21 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v29 = a1;
  v30 = v21;
  v22 = (float32x4_t *)(a1 + v21);
  v23 = *(_QWORD *)(v14 + 72);
  swift_bridgeObjectRetain();
  v24 = MEMORY[0x24BEE4AF8];
  v31 = a7;
  do
  {
    closure #2 in static PoseScheduler.generatePoseSpec(handsData:images:config:trackingInfos:pipeline:)(v22, v35, v36, v37, v38, a7, (uint64_t)v13);
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v24;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v34) == 1)
    {
      outlined destroy of HandDescriptor?((uint64_t)v13);
    }
    else
    {
      v25 = v32;
      outlined init with take of Matrix2dPB((uint64_t)v13, v32, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined init with take of Matrix2dPB(v25, v33, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
      v27 = *(_QWORD *)(v24 + 16);
      v26 = *(_QWORD *)(v24 + 24);
      if (v27 >= v26 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v24);
      *(_QWORD *)(v24 + 16) = v27 + 1;
      outlined init with take of Matrix2dPB(v33, v24 + v30 + v27 * v23, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      a7 = v31;
    }
    v22 = (float32x4_t *)((char *)v22 + v23);
    --v20;
  }
  while (v20);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
LABEL_4:
  if (!v6)
  {
    v11 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
    }
    else
    {
      if (v11 >= v7)
        return 1;
      v12 = *(_QWORD *)(v3 + 8 * v11);
      ++v2;
      if (v12)
        goto LABEL_22;
      v2 = v11 + 1;
      if (v11 + 1 >= v7)
        return 1;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 2;
      if (v11 + 2 >= v7)
        return 1;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 3;
      if (v11 + 3 >= v7)
        return 1;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v13 = v11 + 4;
      if (v13 >= v7)
        return 1;
      v12 = *(_QWORD *)(v3 + 8 * v13);
      if (v12)
      {
        v2 = v13;
LABEL_22:
        v6 = (v12 - 1) & v12;
        v9 = __clz(__rbit64(v12)) + (v2 << 6);
        v10 = *(_QWORD *)(a2 + 16);
        if (!v10)
          return 0;
        goto LABEL_23;
      }
      while (1)
      {
        v2 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        if (v2 >= v7)
          return 1;
        v12 = *(_QWORD *)(v3 + 8 * v2);
        ++v13;
        if (v12)
          goto LABEL_22;
      }
    }
    __break(1u);
    JUMPOUT(0x23D932514);
  }
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v9 = v8 | (v2 << 6);
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    return 0;
LABEL_23:
  v14 = *(_QWORD *)(a1 + 48) + 16 * v9;
  v15 = *(_QWORD *)v14;
  v16 = *(unsigned __int8 *)(v14 + 8);
  v17 = (uint64_t *)(a2 + 104);
  while (1)
  {
    v19 = *v17;
    v17 += 24;
    v18 = v19;
    if (v16)
      return ((uint64_t (*)(void))((char *)&loc_23D932448 + dword_23D932514[v15]))();
    if (v18 == v15)
      goto LABEL_4;
    if (!--v10)
      return 0;
  }
}

uint64_t specialized Tracking3D.init(options:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[10];
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = v3;
  type metadata accessor for DetectionScheduler();
  swift_allocObject();
  *(_QWORD *)(v1 + 48) = DetectionScheduler.init()();
  *(_OWORD *)(v1 + 56) = xmmword_23D9C1230;
  *(_OWORD *)(v1 + 72) = xmmword_23D9C1240;
  v4 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v1 + 88) = v3;
  *(_QWORD *)(v1 + 96) = v4;
  *(_QWORD *)(v1 + 104) = v3;
  *(_QWORD *)(v1 + 112) = 0x23E4CCCCDLL;
  *(_OWORD *)(v1 + 120) = xmmword_23D9C1250;
  *(_BYTE *)(v1 + 136) = 1;
  *(_QWORD *)(v1 + 144) = 0x3FE0000000000000;
  *(_QWORD *)(v1 + 152) = 0x200000001;
  *(_DWORD *)(v1 + 160) = 2;
  *(_BYTE *)(v1 + 164) = 0;
  *(_QWORD *)(v1 + 168) = 0xC3C23D70ALL;
  *(_DWORD *)(v1 + 176) = 1045220557;
  *(_BYTE *)(v1 + 180) = 1;
  *(_OWORD *)(v1 + 184) = xmmword_23D9A87A0;
  *(_QWORD *)(v1 + 200) = 0x31000001F4;
  *(_OWORD *)(v1 + 208) = xmmword_23D9A87B0;
  *(_DWORD *)(v1 + 224) = 1;
  *(_BYTE *)(v1 + 228) = 1;
  *(_DWORD *)(v1 + 252) = 0;
  *(_QWORD *)(v1 + 245) = 0;
  *(_OWORD *)(v1 + 229) = 0u;
  *(_QWORD *)(v1 + 256) = 0x9600000096;
  *(_DWORD *)(v1 + 264) = 150;
  *(_QWORD *)(v1 + 272) = 0x3FB3333333333333;
  *(_WORD *)(v1 + 280) = 256;
  *(_BYTE *)(v1 + 282) = 1;
  *(_QWORD *)(v1 + 284) = 0x3F3333333F733333;
  *(_WORD *)(v1 + 292) = 257;
  *(_OWORD *)(v1 + 296) = xmmword_23D9C1260;
  *(_QWORD *)(v1 + 312) = &outlined read-only object #0 of TrackingUpdateConfig.init();
  *(_QWORD *)(v1 + 320) = &outlined read-only object #1 of TrackingUpdateConfig.init();
  *(_QWORD *)(v1 + 328) = &outlined read-only object #2 of TrackingUpdateConfig.init();
  *(_QWORD *)(v1 + 336) = &outlined read-only object #3 of TrackingUpdateConfig.init();
  *(_QWORD *)(v1 + 344) = &outlined read-only object #4 of TrackingUpdateConfig.init();
  *(_QWORD *)(v1 + 352) = &outlined read-only object #5 of TrackingUpdateConfig.init();
  *(_QWORD *)(v1 + 360) = &outlined read-only object #6 of TrackingUpdateConfig.init();
  *(_QWORD *)(v1 + 368) = &outlined read-only object #7 of TrackingUpdateConfig.init();
  *(_BYTE *)(v1 + 376) = 1;
  *(_QWORD *)(v1 + 384) = &outlined read-only object #8 of TrackingUpdateConfig.init();
  *(_QWORD *)(v1 + 392) = &outlined read-only object #9 of TrackingUpdateConfig.init();
  *(_BYTE *)(v1 + 400) = 0;
  *(_DWORD *)(v1 + 404) = 1028443341;
  *(_WORD *)(v1 + 408) = 257;
  *(_BYTE *)(v1 + 410) = 1;
  *(_OWORD *)(v1 + 416) = xmmword_23D9C1270;
  *(_QWORD *)(v1 + 432) = 0x3FC999999999999ALL;
  *(_BYTE *)(v1 + 440) = 1;
  *(_DWORD *)(v1 + 444) = 1064011039;
  *(_QWORD *)(v1 + 448) = 0x412000003CA3D70ALL;
  *(_BYTE *)(v1 + 456) = 0;
  *(_BYTE *)(v1 + 460) = 1;
  *(_QWORD *)(v1 + 464) = 0x42B4000042F00000;
  *(_DWORD *)(v1 + 472) = 1048576000;
  *(_BYTE *)(v1 + 476) = 0;
  *(_QWORD *)(v1 + 480) = 0;
  *(_QWORD *)(v1 + 488) = 0x3E4CCCCD3E19999ALL;
  *(_BYTE *)(v1 + 496) = 1;
  *(_QWORD *)(v1 + 500) = 0x3DCCCCCD3E19999ALL;
  *(_BYTE *)(v1 + 508) = 0;
  *(_DWORD *)(v1 + 512) = 981668463;
  *(_QWORD *)(v1 + 520) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(v1 + 528) = 0;
  *(_QWORD *)(v1 + 536) = 0;
  CMTimeMake((CMTime *)v27, 0, 1);
  v5 = *(_QWORD *)&v27[16];
  v6 = *(_QWORD *)&v27[8];
  *(_QWORD *)(v1 + 544) = *(_QWORD *)v27;
  *(_QWORD *)(v1 + 552) = v6;
  *(_QWORD *)(v1 + 560) = v5;
  *(_QWORD *)(v1 + 568) = v3;
  *(_BYTE *)(v1 + 576) = 0;
  _s5Hands26SimilarityMatrixCollectionVSgWOi0_(v26);
  *(_QWORD *)&v25 = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *((_QWORD *)&v25 + 1) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  outlined init with take of ImageData?((uint64_t)v26, (uint64_t)&v15, &demangling cache variable for type metadata for SimilarityMatrixCollection?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : Int]);
  Dictionary.reserveCapacity(_:)(4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : TrackingUpdateData]);
  Dictionary.reserveCapacity(_:)(4);
  v34 = v23;
  v35 = v24;
  v36 = v25;
  v30 = v19;
  v31 = v20;
  v7 = v22;
  v32 = v21;
  v33 = v22;
  *(_OWORD *)v27 = v15;
  *(_OWORD *)&v27[16] = v16;
  v8 = v18;
  v28 = v17;
  v29 = v18;
  v9 = v24;
  *(_OWORD *)(v1 + 712) = v23;
  *(_OWORD *)(v1 + 728) = v9;
  *(_OWORD *)(v1 + 744) = v36;
  v10 = v31;
  v11 = v32;
  *(_OWORD *)(v1 + 648) = v30;
  *(_OWORD *)(v1 + 664) = v10;
  *(_OWORD *)(v1 + 680) = v11;
  *(_OWORD *)(v1 + 696) = v7;
  v12 = *(_OWORD *)&v27[16];
  v13 = v28;
  *(_OWORD *)(v1 + 584) = *(_OWORD *)v27;
  *(_OWORD *)(v1 + 600) = v12;
  *(_OWORD *)(v1 + 616) = v13;
  *(_OWORD *)(v1 + 632) = v8;
  *(_DWORD *)(v1 + 760) = 0;
  *(_BYTE *)(v1 + 764) = 1;
  *(_QWORD *)(v1 + 768) = v3;
  *(_QWORD *)(v1 + 776) = 15;
  *(_OWORD *)(v1 + 784) = xmmword_23D9C1280;
  *(_OWORD *)(v1 + 800) = 0u;
  *(_WORD *)(v1 + 816) = 0;
  *(_DWORD *)(v1 + 820) = 1;
  *(_QWORD *)(v1 + 824) = 0;
  *(_BYTE *)(v1 + 832) = 1;
  *(_QWORD *)(v1 + 836) = 0x3C03126F3BA3D70ALL;
  *(_OWORD *)(v1 + 848) = xmmword_23D9C1290;
  *(_QWORD *)(v1 + 864) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *((_QWORD *)&v16 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v15 = 0xD000000000000022;
  *((_QWORD *)&v15 + 1) = 0x800000023D9DB060;
  specialized static HLog.I(file:function:line:_:_:)(0xD00000000000005ELL, 0x800000023D9CB6A0, 49, (uint64_t)&v15, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v15);
  Tracking3D.reconfigTracking(_:)(a1);
  return v1;
}

double _s5Hands26SimilarityMatrixCollectionVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

char *specialized Array.reserveCapacity(_:)(int64_t a1)
{
  char **v1;
  char *v3;
  char *result;
  int64_t v5;

  v3 = *v1;
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || a1 > *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v3 + 2) <= a1)
      v5 = a1;
    else
      v5 = *((_QWORD *)v3 + 2);
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0, v3);
    v3 = result;
  }
  *v1 = v3;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVys6UInt64VSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_G_AIs5NeverOTg50137_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6E90VAA0b6UpdateL0VGSayAA0B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZA2MXEfU4_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v25;
  result = specialized _NativeDictionary.startIndex.getter(a1);
  v6 = result;
  v7 = v24;
  v8 = 0;
  v9 = a1 + 64;
  v10 = a1 + 88;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_26;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v6);
    v15 = *(_QWORD *)(v25 + 16);
    v14 = *(_QWORD *)(v25 + 24);
    if (v15 >= v14 >> 1)
    {
      v22 = v9;
      v23 = v5;
      v21 = v10;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v10 = v21;
      v9 = v22;
      v5 = v23;
      v7 = v24;
    }
    *(_QWORD *)(v25 + 16) = v15 + 1;
    *(_QWORD *)(v25 + 8 * v15 + 32) = v13;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v11)
      goto LABEL_27;
    v16 = *(_QWORD *)(v9 + 8 * v12);
    if ((v16 & (1 << v6)) == 0)
      goto LABEL_28;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_29;
    v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      v11 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v18 = v12 + 1;
      v19 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v19)
      {
        v20 = *(_QWORD *)(v9 + 8 * v18);
        if (!v20)
        {
          v18 = v12 + 2;
          if (v12 + 2 >= v19)
            goto LABEL_4;
          v20 = *(_QWORD *)(v9 + 8 * v18);
          if (!v20)
          {
            while (v19 - 3 != v12)
            {
              v20 = *(_QWORD *)(v10 + 8 * v12++);
              if (v20)
              {
                v18 = v12 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        v11 = __clz(__rbit64(v20)) + (v18 << 6);
      }
    }
LABEL_4:
    ++v8;
    v6 = v11;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF15DetectionResultVG_Sfs5NeverOTg50255_s5Hands27TrackingProcessingFunctionsC31ComputeHandCenterAndReliability13trackingInfos5hands10updateData6config0L12KitTimestampSDys6UInt64VAA0b6UpdateN0VG_AA0B5StateOtSayAA0B4InfoVG_SayAA0F10DescriptorVGAnA0bS6ConfigVAKtFZyANz_AK3key_AM5valuettXEfU_SfAA12ef8OAY_AA15gH12VAZt_tXEfU0_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v23 = *(_QWORD *)(a1 + 16);
  v24 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v24;
  result = specialized Dictionary.startIndex.getter(a1);
  v6 = result;
  v7 = v23;
  v8 = 0;
  v9 = a1 + 64;
  v10 = a1 + 80;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_24;
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 112 * v6 + 28);
    v15 = *(_QWORD *)(v24 + 16);
    v14 = *(_QWORD *)(v24 + 24);
    if (v15 >= v14 >> 1)
    {
      v21 = v10;
      v22 = v5;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v10 = v21;
      v5 = v22;
      v7 = v23;
    }
    *(_QWORD *)(v24 + 16) = v15 + 1;
    *(_DWORD *)(v24 + 4 * v15 + 32) = v13;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v11)
      goto LABEL_25;
    v16 = *(_QWORD *)(v9 + 8 * v12);
    if ((v16 & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_27;
    v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      v11 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v18 = v12 + 1;
      v19 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v19)
      {
        v20 = *(_QWORD *)(v9 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v11 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v12)
          {
            v20 = *(_QWORD *)(v10 + 8 * v12++);
            if (v20)
            {
              v18 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v6 = v11;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  _QWORD *v31;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return result;
  v4 = result;
  v5 = *(_QWORD *)(type metadata accessor for HandDescriptor() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)(v6 + v4 + 144);
  v29 = vdupq_n_s64(MEMORY[0x24BEE4AF8]);
  v30 = v7;
  while (1)
  {
    if (!*(v8 - 16) || (*(_BYTE *)(v8 - 2) & 1) == 0)
      goto LABEL_5;
    v11 = *v8;
    v12 = *((_BYTE *)v8 - 8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = (_QWORD *)*a2;
    v31 = (_QWORD *)*a2;
    v15 = a2;
    *a2 = 0x8000000000000000;
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    v18 = v14[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      break;
    v21 = v16;
    if (v14[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v24 = v31;
        if ((v16 & 1) == 0)
          goto LABEL_15;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v24 = v31;
        if ((v21 & 1) == 0)
          goto LABEL_15;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_23;
      v17 = v22;
      v24 = v31;
      if ((v21 & 1) == 0)
      {
LABEL_15:
        v24[(v17 >> 6) + 8] |= 1 << v17;
        *(_QWORD *)(v24[6] + 8 * v17) = v11;
        v25 = v24[7] + 96 * v17;
        *(_OWORD *)v25 = 0u;
        *(_OWORD *)(v25 + 16) = 0u;
        *(_BYTE *)(v25 + 32) = 1;
        *(_BYTE *)(v25 + 33) = v12;
        *(_DWORD *)(v25 + 36) = 0;
        *(_BYTE *)(v25 + 40) = 0;
        *(_DWORD *)(v25 + 44) = 0;
        *(_BYTE *)(v25 + 48) = 1;
        *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE4B00];
        *(_WORD *)(v25 + 64) = 1;
        *(_BYTE *)(v25 + 66) = 0;
        *(_DWORD *)(v25 + 68) = 0;
        *(_DWORD *)(v25 + 72) = 0;
        *(int64x2_t *)(v25 + 80) = v29;
        v26 = v24[2];
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_22;
        v24[2] = v28;
        goto LABEL_4;
      }
    }
    v9 = v24[7] + 96 * v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_BYTE *)(v9 + 32) = 1;
    *(_BYTE *)(v9 + 33) = v12;
    *(_DWORD *)(v9 + 36) = 0;
    *(_BYTE *)(v9 + 40) = 0;
    *(_DWORD *)(v9 + 44) = 0;
    *(_BYTE *)(v9 + 48) = 1;
    *(_QWORD *)(v9 + 56) = MEMORY[0x24BEE4B00];
    *(_WORD *)(v9 + 64) = 1;
    *(_BYTE *)(v9 + 66) = 0;
    *(_DWORD *)(v9 + 68) = 0;
    *(_DWORD *)(v9 + 72) = 0;
    v10 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v9 + 80) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v9 + 88) = v10;
LABEL_4:
    a2 = v15;
    *v15 = v24;
    swift_bridgeObjectRelease();
    v7 = v30;
LABEL_5:
    v8 = (_QWORD *)((char *)v8 + v7);
    if (!--v2)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized CircularBuffer.add(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *v1;
  if (*v1)
  {
    v3 = v1;
    v4 = result;
    v7 = v1[1];
    v5 = v1 + 1;
    v6 = v7;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 < v2)
      {
LABEL_4:
        v8 = swift_retain();
        MEMORY[0x2426374D4](v8);
        if (*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          goto LABEL_20;
        while (1)
        {
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_14:
          result = specialized Array._endMutation()();
          v12 = v3[2];
          v13 = __OFADD__(v12, 1);
          v14 = v12 + 1;
          if (!v13)
            break;
          __break(1u);
LABEL_20:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        if (v2 != -1 || v14 != 0x8000000000000000)
        {
          v3[2] = v14 % v2;
          return result;
        }
LABEL_23:
        __break(1u);
        return result;
      }
    }
    else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) < v2)
    {
      goto LABEL_4;
    }
    v10 = v3[1];
    v11 = v3[2];
    result = swift_isUniquelyReferenced_nonNull_bridgeObject();
    v3[1] = v10;
    if (!(_DWORD)result || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      swift_retain();
      swift_release();
      *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v11 + 0x20) = v4;
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_23;
  }
  return result;
}

{
  int64_t *v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *v1;
  if (*v1)
  {
    v3 = result;
    v4 = (_QWORD *)v1[1];
    v5 = v4[2];
    if (v5 < v2)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        goto LABEL_16;
      while (1)
      {
        v7 = v4[2];
        v6 = v4[3];
        v5 = v7 + 1;
        if (v7 >= v6 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
          v4 = (_QWORD *)result;
        }
        v4[2] = v5;
LABEL_10:
        v8 = &v4[15 * v7];
        v9 = *(_OWORD *)v3;
        v10 = *(_OWORD *)(v3 + 16);
        v11 = *(_OWORD *)(v3 + 48);
        *((_OWORD *)v8 + 4) = *(_OWORD *)(v3 + 32);
        *((_OWORD *)v8 + 5) = v11;
        *((_OWORD *)v8 + 2) = v9;
        *((_OWORD *)v8 + 3) = v10;
        v12 = *(_OWORD *)(v3 + 64);
        v13 = *(_OWORD *)(v3 + 80);
        v14 = *(_OWORD *)(v3 + 96);
        v8[18] = *(_QWORD *)(v3 + 112);
        *((_OWORD *)v8 + 7) = v13;
        *((_OWORD *)v8 + 8) = v14;
        *((_OWORD *)v8 + 6) = v12;
        v1[1] = (int64_t)v4;
        v15 = v1[2];
        v16 = __OFADD__(v15, 1);
        v17 = v15 + 1;
        if (!v16)
          break;
        __break(1u);
LABEL_16:
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 + 1, 1, v4);
        v4 = (_QWORD *)result;
      }
      if (v2 != -1 || v17 != 0x8000000000000000)
      {
        v1[2] = v17 % v2;
        return result;
      }
LABEL_20:
      __break(1u);
      return result;
    }
    v7 = v1[2];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((v7 & 0x8000000000000000) == 0)
        goto LABEL_9;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
      v4 = (_QWORD *)result;
      if ((v7 & 0x8000000000000000) == 0)
      {
LABEL_9:
        if (v7 < v4[2])
          goto LABEL_10;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  return result;
}

{
  int64_t *v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *v1;
  if (*v1)
  {
    v3 = result;
    v4 = (_QWORD *)v1[1];
    v5 = v4[2];
    if (v5 < v2)
    {
      outlined retain of (CameraSource, DetectionResult)(result);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        goto LABEL_17;
      while (1)
      {
        v7 = v4[2];
        v6 = v4[3];
        v5 = v7 + 1;
        if (v7 >= v6 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
          v4 = (_QWORD *)result;
        }
        v4[2] = v5;
        v8 = (uint64_t)&v4[9 * v7 + 4];
LABEL_11:
        *(_OWORD *)v8 = *(_OWORD *)v3;
        v11 = *(_OWORD *)(v3 + 16);
        v12 = *(_OWORD *)(v3 + 32);
        v13 = *(_OWORD *)(v3 + 48);
        *(_QWORD *)(v8 + 64) = *(_QWORD *)(v3 + 64);
        *(_OWORD *)(v8 + 32) = v12;
        *(_OWORD *)(v8 + 48) = v13;
        *(_OWORD *)(v8 + 16) = v11;
        v1[1] = (int64_t)v4;
        v14 = v1[2];
        v15 = __OFADD__(v14, 1);
        v16 = v14 + 1;
        if (!v15)
          break;
        __break(1u);
LABEL_17:
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 + 1, 1, v4);
        v4 = (_QWORD *)result;
      }
      if (v2 != -1 || v16 != 0x8000000000000000)
      {
        v1[2] = v16 % v2;
        return result;
      }
LABEL_21:
      __break(1u);
      return result;
    }
    v9 = v1[2];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if ((v9 & 0x8000000000000000) == 0)
        goto LABEL_9;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
      v4 = (_QWORD *)result;
      if ((v9 & 0x8000000000000000) == 0)
      {
LABEL_9:
        if (v9 < v4[2])
        {
          v10 = &v4[9 * v9];
          v8 = (uint64_t)(v10 + 4);
          v5 = v10[8];
          outlined retain of (CameraSource, DetectionResult)(v3);
          result = swift_bridgeObjectRelease();
          goto LABEL_11;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

void specialized CircularBuffer.add(_:)(float a1)
{
  int64_t *v1;
  int64_t v2;
  char *v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v2 = *v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *((_QWORD *)v4 + 2);
    if (v5 < v2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_16;
      while (1)
      {
        v7 = *((_QWORD *)v4 + 2);
        v6 = *((_QWORD *)v4 + 3);
        v5 = v7 + 1;
        if (v7 >= v6 >> 1)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
        *((_QWORD *)v4 + 2) = v5;
LABEL_10:
        *(float *)&v4[4 * v7 + 32] = a1;
        v1[1] = (int64_t)v4;
        v8 = v1[2];
        v9 = __OFADD__(v8, 1);
        v10 = v8 + 1;
        if (!v9)
          break;
        __break(1u);
LABEL_16:
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 + 1, 1, v4);
      }
      if (v2 != -1 || v10 != 0x8000000000000000)
      {
        v1[2] = v10 % v2;
        return;
      }
LABEL_20:
      __break(1u);
      return;
    }
    v7 = v1[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v7 & 0x8000000000000000) == 0)
        goto LABEL_9;
    }
    else
    {
      v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      if ((v7 & 0x8000000000000000) == 0)
      {
LABEL_9:
        if (v7 < *((_QWORD *)v4 + 2))
          goto LABEL_10;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
}

void specialized CircularBuffer.add(_:)(__n128 a1)
{
  int64_t *v1;
  int64_t v2;
  _QWORD *v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *v1;
  if (*v1)
  {
    v3 = (_QWORD *)v1[1];
    v4 = v3[2];
    if (v4 < v2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_16;
      while (1)
      {
        v6 = v3[2];
        v5 = v3[3];
        v4 = v6 + 1;
        v7 = a1;
        if (v6 >= v5 >> 1)
        {
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
          v7 = a1;
          v3 = v11;
        }
        v3[2] = v4;
LABEL_10:
        *(__n128 *)&v3[2 * v6 + 4] = v7;
        v1[1] = (int64_t)v3;
        v8 = v1[2];
        v9 = __OFADD__(v8, 1);
        v10 = v8 + 1;
        if (!v9)
          break;
        __break(1u);
LABEL_16:
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 1, v3);
      }
      if (v2 != -1 || v10 != 0x8000000000000000)
      {
        v1[2] = v10 % v2;
        return;
      }
LABEL_20:
      __break(1u);
      return;
    }
    v6 = v1[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v7 = a1;
      if ((v6 & 0x8000000000000000) == 0)
        goto LABEL_9;
    }
    else
    {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      v7 = a1;
      if ((v6 & 0x8000000000000000) == 0)
      {
LABEL_9:
        if (v6 < v3[2])
          goto LABEL_10;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
}

void specialized CircularBuffer.add(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (unint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v1)
  {
    v8 = v1[1];
    v9 = *(_QWORD *)(v8 + 16);
    if ((uint64_t)v9 < *v1)
    {
      outlined init with copy of (Int32, Matrix2dPB)(a1, v7, &demangling cache variable for type metadata for DerivedHandAttributes?);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_19;
      while (1)
      {
        v9 = *(_QWORD *)(v8 + 16);
        v10 = *(_QWORD *)(v8 + 24);
        if (v9 >= v10 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v9 + 1, 1, v8);
        *(_QWORD *)(v8 + 16) = v9 + 1;
        outlined init with take of ImageData?(v7, v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v9, &demangling cache variable for type metadata for DerivedHandAttributes?);
        v1[1] = v8;
LABEL_11:
        v12 = v1[2];
        v13 = __OFADD__(v12, 1);
        v14 = v12 + 1;
        if (v13)
        {
          __break(1u);
        }
        else
        {
          v15 = *v1;
          if (*v1)
          {
            if (v14 != 0x8000000000000000 || v15 != -1)
            {
              v1[2] = v14 % v15;
              return;
            }
LABEL_23:
            __break(1u);
            return;
          }
        }
        __break(1u);
LABEL_19:
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 + 1, 1, v8);
      }
    }
    v7 = v1[2];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1[1] = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v7 & 0x8000000000000000) == 0)
        goto LABEL_9;
    }
    else
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      v1[1] = v8;
      if ((v7 & 0x8000000000000000) == 0)
      {
LABEL_9:
        if (v7 < *(_QWORD *)(v8 + 16))
        {
          outlined assign with copy of DerivedHandAttributes?(a1, v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v7);
          goto LABEL_11;
        }
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for LogMessage(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (unint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v1)
  {
    v8 = v1[1];
    v9 = *(_QWORD *)(v8 + 16);
    if ((uint64_t)v9 < *v1)
    {
      outlined init with copy of TrackingUpdateDataPB(a1, v7, type metadata accessor for LogMessage);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_19;
      while (1)
      {
        v9 = *(_QWORD *)(v8 + 16);
        v10 = *(_QWORD *)(v8 + 24);
        if (v9 >= v10 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v9 + 1, 1, v8);
        *(_QWORD *)(v8 + 16) = v9 + 1;
        outlined init with take of Matrix2dPB(v7, v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v9, type metadata accessor for LogMessage);
        v1[1] = v8;
LABEL_11:
        v12 = v1[2];
        v13 = __OFADD__(v12, 1);
        v14 = v12 + 1;
        if (v13)
        {
          __break(1u);
        }
        else
        {
          v15 = *v1;
          if (*v1)
          {
            if (v14 != 0x8000000000000000 || v15 != -1)
            {
              v1[2] = v14 % v15;
              return;
            }
LABEL_23:
            __break(1u);
            return;
          }
        }
        __break(1u);
LABEL_19:
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 + 1, 1, v8);
      }
    }
    v7 = v1[2];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1[1] = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v7 & 0x8000000000000000) == 0)
        goto LABEL_9;
    }
    else
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      v1[1] = v8;
      if ((v7 & 0x8000000000000000) == 0)
      {
LABEL_9:
        if (v7 < *(_QWORD *)(v8 + 16))
        {
          outlined assign with copy of LogMessage(a1, v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v7);
          goto LABEL_11;
        }
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, unsigned int a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, Swift::UInt a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t *closure #1 in static TrackingProcessingFunctions.ComputeHandCenterAndReliability(trackingInfos:hands:updateData:config:handsKitTimestamp:)(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float v58;
  _BYTE *v59;
  _BYTE *v60;
  unint64_t v61;
  uint64_t *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t updated;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  float v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  _BYTE v80[4];
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[20];
  uint64_t v107;
  uint64_t v108[40];
  uint64_t v109[40];

  v97 = a1;
  v98 = type metadata accessor for HandDescriptor();
  v7 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98, v8);
  v10 = &v80[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = &v80[-v13];
  MEMORY[0x24BDAC7A8](v15, v16);
  v103 = &v80[-v17];
  v18 = *(_QWORD *)a2;
  v19 = *(_QWORD *)(a2 + 72);
  v20 = *(unsigned __int8 *)(a2 + 80);
  v100 = *(unsigned __int8 *)(a2 + 81);
  v101 = v20;
  v99 = *(unsigned __int8 *)(a2 + 82);
  v21 = *(_QWORD *)(a2 + 84);
  v22 = *(_QWORD *)(a2 + 96);
  v23 = *(_QWORD *)(a2 + 104);
  v104 = v22;
  v105 = v19;
  v24 = a3[2];
  if (v24)
  {
    memcpy(v108, a3 + 4, 0x138uLL);
    if (v108[2] == v18)
    {
LABEL_6:
      memcpy(v106, v108, 0x138uLL);
      _s5Hands13PoseImageCropVSgWOi_(v106);
      outlined retain of (TrackingInfo, Int)((uint64_t)v108);
      v27 = (uint64_t *)v106;
      goto LABEL_8;
    }
    v25 = (char *)(a3 + 44);
    while (--v24)
    {
      v26 = v25 + 320;
      memcpy(v108, v25, 0x138uLL);
      v25 = v26;
      if (v108[2] == v18)
        goto LABEL_6;
    }
  }
  _s5Hands12TrackingInfoVSgWOi0_((uint64_t)v108);
  v27 = v108;
LABEL_8:
  outlined init with take of ImageData?((uint64_t)v27, (uint64_t)v109, &demangling cache variable for type metadata for TrackingInfo?);
  v28 = *(_QWORD *)(a4 + 16);
  if (!v28)
    return outlined release of TrackingInfo?(v109);
  v29 = a4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v30 = *(_QWORD *)(v7 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v102 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TrackingUpdateDataPB(v29, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (*((_QWORD *)v10 + 18) == v18)
      break;
    outlined destroy of HandDescriptor((uint64_t)v10);
    v29 += v30;
    if (!--v28)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined release of TrackingInfo?(v109);
    }
  }
  swift_bridgeObjectRelease();
  outlined init with take of Matrix2dPB((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v32 = v103;
  outlined init with take of Matrix2dPB((uint64_t)v14, (uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v33 = v32[2];
  if (!v33)
  {
    outlined release of TrackingInfo?(v109);
    outlined destroy of HandDescriptor((uint64_t)v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  v34 = v32[3];
  v35 = v32[4];
  v37 = v32[5];
  v36 = v32[6];
  v38 = v32[7];
  v39 = v32[8];
  v40 = v32[9];
  v41 = v32[10];
  v43 = v32[11];
  v42 = v32[12];
  v44 = v32[13];
  v45 = v32[14];
  v47 = v32[15];
  v46 = v32[16];
  v108[0] = v32[2];
  v108[1] = v34;
  v90 = v37;
  v91 = v40;
  v108[3] = v37;
  v108[2] = v35;
  *(_QWORD *)&v96 = v36;
  *((_QWORD *)&v96 + 1) = v38;
  v108[5] = v38;
  v108[4] = v36;
  v108[7] = v40;
  v92 = v39;
  v93 = v45;
  v108[6] = v39;
  v108[9] = v43;
  v88 = v42;
  v89 = v41;
  v108[8] = v41;
  v94 = v47;
  v95 = v44;
  v108[11] = v44;
  v108[10] = v42;
  v108[13] = v47;
  v108[12] = v45;
  LOWORD(v108[14]) = v46 & 0x101;
  v48 = v46;
  HIDWORD(v108[14]) = HIDWORD(v46);
  v49 = specialized static TrackingUtils.CollectPoseUncertainty(handPose:)(v108);
  v50 = *(_QWORD *)(v49 + 16);
  v87 = v49;
  if (v50)
  {
    if (v50 == 1)
    {
      v51 = 0;
      v52 = 0.0;
    }
    else
    {
      v51 = v50 & 0x7FFFFFFFFFFFFFFELL;
      v54 = (float *)(v49 + 36);
      v52 = 0.0;
      v55 = v50 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v52 = (float)(v52 + *(v54 - 1)) + *v54;
        v54 += 2;
        v55 -= 2;
      }
      while (v55);
      if (v50 == v51)
        goto LABEL_25;
    }
    v56 = v50 - v51;
    v57 = (float *)(v49 + 4 * v51 + 32);
    do
    {
      v58 = *v57++;
      v52 = v52 + v58;
      --v56;
    }
    while (v56);
LABEL_25:
    v53 = v52 / (float)v50;
    goto LABEL_26;
  }
  v53 = 0.0;
LABEL_26:
  v85 = v48;
  v86 = v43;
  v83 = v33;
  v84 = v35;
  v82 = v34;
  outlined copy of HandPose?(v33);
  swift_bridgeObjectRelease();
  v81 = v103[136];
  outlined init with take of ImageData?((uint64_t)v109, (uint64_t)v108, &demangling cache variable for type metadata for TrackingInfo?);
  LODWORD(v87) = _s5Hands12CameraSourceO_AA9ImageDataVtSgWOg((uint64_t)v108);
  outlined consume of HandPose?(v83);
  if ((_DWORD)v87 == 1 || BYTE1(v108[16]) != 1)
  {
    v63 = 0;
    v62 = v97;
    v59 = v103;
  }
  else
  {
    v59 = v103;
    v60 = &v103[*(int *)(v98 + 100)];
    v61 = *(_QWORD *)v60;
    if (v60[8] == 1)
    {
      v62 = v97;
      if (v61 < 3)
      {
LABEL_30:
        v63 = 0;
        goto LABEL_32;
      }
    }
    else
    {
      v62 = v97;
      if (v61 != 3)
        goto LABEL_30;
    }
    if ((v103[192] & 1) == 0)
    {
      v79 = *((_QWORD *)v103 + 23);
      *(_QWORD *)&v96 = *((_QWORD *)v103 + 22);
      *((_QWORD *)&v96 + 1) = v79;
    }
    v63 = 1;
  }
LABEL_32:
  v64 = swift_bridgeObjectRetain();
  v66 = specialized _NativeDictionary.filter(_:)(v64, v65);
  swift_bridgeObjectRelease();
  v67 = v66[2];
  swift_release();
  v68 = 0.0;
  if (v67)
  {
    v69 = swift_bridgeObjectRetain();
    updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF15DetectionResultVG_Sfs5NeverOTg50255_s5Hands27TrackingProcessingFunctionsC31ComputeHandCenterAndReliability13trackingInfos5hands10updateData6config0L12KitTimestampSDys6UInt64VAA0b6UpdateN0VG_AA0B5StateOtSayAA0B4InfoVG_SayAA0F10DescriptorVGAnA0bS6ConfigVAKtFZyANz_AK3key_AM5valuettXEfU_SfAA12ef8OAY_AA15gH12VAZt_tXEfU0_Tf1cn_n(v69);
    swift_bridgeObjectRelease();
    v71 = *(_QWORD *)(updated + 16);
    if (v71)
    {
      if (v71 == 1)
      {
        v72 = 0;
      }
      else
      {
        v72 = v71 & 0x7FFFFFFFFFFFFFFELL;
        v73 = (float *)(updated + 36);
        v74 = v71 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v68 = (float)(v68 + *(v73 - 1)) + *v73;
          v73 += 2;
          v74 -= 2;
        }
        while (v74);
        if (v71 == v72)
          goto LABEL_42;
      }
      v75 = v71 - v72;
      v76 = (float *)(updated + 4 * v72 + 32);
      do
      {
        v77 = *v76++;
        v68 = v68 + v77;
        --v75;
      }
      while (v75);
LABEL_42:
      swift_bridgeObjectRelease();
      v68 = v68 / (float)v71;
      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
  }
LABEL_43:
  v106[0] = v96;
  v106[1] = v96;
  LOBYTE(v106[2]) = 0;
  BYTE1(v106[2]) = v81;
  *((float *)&v106[2] + 1) = v53;
  BYTE8(v106[2]) = v63;
  *((float *)&v106[2] + 3) = v68;
  LOBYTE(v106[3]) = v67 == 0;
  *((_QWORD *)&v106[3] + 1) = v105;
  LOBYTE(v106[4]) = v101;
  BYTE1(v106[4]) = v100;
  BYTE2(v106[4]) = v99;
  *(_QWORD *)((char *)&v106[4] + 4) = v21;
  *(_QWORD *)&v106[5] = v104;
  *((_QWORD *)&v106[5] + 1) = v102;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v107 = *v62;
  *v62 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v106, v18, isUniquelyReferenced_nonNull_native);
  *v62 = v107;
  swift_bridgeObjectRelease();
  outlined release of TrackingInfo?(v109);
  return (uint64_t *)outlined destroy of HandDescriptor((uint64_t)v59);
}

uint64_t closure #1 in static TrackingProcessingFunctions.FilterHandAndCalcTrackingHealthScore(hands:images:config:trackingInfos:handsKitTimestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  float32x2_t v38;
  double v39;
  float32x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  uint64_t updated;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x2_t v60;
  float v61;
  BOOL v62;
  float32x4_t v63;
  float v64;
  float v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v74;
  uint64_t v75;
  float32x2_t *v76;
  float32x4_t v77;
  float32x4_t v78;
  float v79;
  char v80;
  float32x2_t v81;
  float32x2_t v82;
  float v83;
  char v85;
  void *v86;
  Swift::String v87;
  Swift::String v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  _QWORD *v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x2_t v158;
  float32x2_t v159;
  unint64_t v160;
  uint64_t v161;
  float32x4_t v162;
  _OWORD v163[2];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _QWORD v176[24];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char v189;
  char v190;
  float32x4_t v191[4];
  float32x4_t v192[4];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  int v207;
  __int128 v208;
  __int128 v209;
  int v210;
  uint64_t v211[2];
  uint64_t v212[2];
  uint64_t v213;
  uint64_t v214[3];
  char v215;
  char v216;

  v6 = v5;
  v11 = a1;
  v12 = *(_BYTE *)(a1 + 136);
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v14 = v13;
  v190 = 1;
  v216 = v12;
  v215 = 0;
  v189 = 1;
  if (!*(_QWORD *)(v11 + 16) || (*(_BYTE *)(v11 + 128) & 1) == 0 || (v15 = *(_QWORD *)(v11 + 200)) == 0)
  {
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v11 + 192) & 1) != 0)
  {
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  v150 = a2;
  v147 = *(_QWORD *)(v15 + 16);
  v144 = a4;
  if (!v147)
  {
    v85 = 0;
    v26 = 3.4028e38;
    if ((*(_BYTE *)(a3 + 176) & 1) == 0)
    {
      v86 = (void *)MEMORY[0x24BEE4AF8];
      v25 = 0.0;
      v145 = 0;
      v153 = 0;
      goto LABEL_152;
    }
    v153 = 0;
    goto LABEL_96;
  }
  v151 = v13;
  v146 = *(_QWORD *)(v11 + 24);
  v16 = *(int8x16_t *)(v11 + 48);
  v17 = *(_QWORD *)(v11 + 208);
  v18 = *(float32x2_t *)(v11 + 176);
  *(float32x2_t *)v19.f32 = vsub_f32(v18, *(float32x2_t *)v16.i8);
  *(float32x2_t *)&v19.u32[2] = vsub_f32(*(float32x2_t *)(v11 + 184), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  v20 = vmulq_f32(v19, v19);
  v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]);
  v22 = *(float *)v11;
  v23 = *(_QWORD *)(v17 + 16);
  v149 = v15 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = 0;
  v153 = 0;
  v145 = 0;
  v25 = 0.0;
  v26 = 3.4028e38;
  v148 = v15;
  v27 = v23;
  v154 = v23;
  v155 = a3;
  v152 = v11;
  while (1)
  {
    v160 = v24;
    v28 = (uint64_t *)(v149 + 16 * v24);
    v29 = *v28;
    v30 = *((unsigned __int8 *)v28 + 8);
    v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v177 = MEMORY[0x24BEE4AF8];
    if (v27)
    {
      v156 = v6;
      swift_bridgeObjectRetain();
      v32 = 32;
      v33 = v27;
      do
      {
        v36 = *(_OWORD *)(v17 + v32);
        v37 = *(_OWORD *)(v17 + v32 + 16);
        v210 = *(_DWORD *)(v17 + v32 + 32);
        v208 = v36;
        v209 = v37;
        outlined init with take of CameraSource((uint64_t *)&v209, (uint64_t)v211);
        outlined init with take of CameraSource(v211, (uint64_t)v214);
        if (v30)
          __asm { BR              X9 }
        if (v214[0] == v29)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
          v34 = *(_QWORD *)(v177 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, (uint64_t)&v208);
          _s5Hands13PoseImageCropVSgWOi_(v35);
        }
        v32 += 40;
        --v33;
      }
      while (v33);
      swift_bridgeObjectRelease();
      v31 = (_QWORD *)v177;
      v6 = v156;
      a2 = v150;
    }
    if (!v31[2])
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((*(_BYTE *)(v155 + 176) & 1) == 0)
      {
        v86 = (void *)MEMORY[0x24BEE4AF8];
        v14 = v151;
        v11 = v152;
        goto LABEL_152;
      }
      v14 = v151;
      v11 = v152;
      goto LABEL_95;
    }
    v38 = (float32x2_t)v31[5];
    v161 = v31[4];
    swift_release();
    type metadata accessor for TrackingUtils();
    *(_QWORD *)&v163[0] = v29;
    BYTE8(v163[0]) = v30;
    static TrackingUtils.findImageOfCameraSource(_:camera:)(a2, (uint64_t *)v163, (uint64_t)&v164);
    outlined init with take of ImageData?((uint64_t)&v164, (uint64_t)v176, &demangling cache variable for type metadata for ImageData?);
    outlined init with take of ImageData?((uint64_t)v176, (uint64_t)&v177, &demangling cache variable for type metadata for ImageData?);
    if (_s5Hands9ImageDataVSgWOg((uint64_t)&v177) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v164 = 0;
      *((_QWORD *)&v164 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      v87._object = (void *)0x800000023D9DB110;
      v87._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v87);
      *(_QWORD *)&v163[0] = v29;
      BYTE8(v163[0]) = v30;
      _print_unlocked<A, B>(_:_:)();
      v88._countAndFlagsBits = 0xD000000000000013;
      v88._object = (void *)0x800000023D9DB130;
      String.append(_:)(v88);
      *((_QWORD *)&v165 + 1) = MEMORY[0x24BEE0D00];
      v89 = specialized static Array._allocateUninitialized(_:)(0);
      type metadata accessor for HandyLoggerNeo();
      memset(v163, 0, sizeof(v163));
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v163, 0xD000000000000078, 0x800000023D9DB090, 113, (uint64_t)&v164, v89);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v164);
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    v201 = v185;
    v202 = v186;
    v203 = v187;
    v204 = v188;
    v197 = v181;
    v198 = v182;
    v199 = v183;
    v200 = v184;
    v193 = v177;
    v194 = v178;
    v195 = v179;
    v196 = v180;
    if (v22 >= v21)
    {
      v47 = v155;
      goto LABEL_46;
    }
    v40 = (float32x2_t *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v164 = MEMORY[0x24BEE4AF8];
    if (v154)
    {
      v157 = v6;
      swift_bridgeObjectRetain();
      v41 = 32;
      v42 = v154;
      do
      {
        v45 = *(_OWORD *)(v17 + v41);
        v46 = *(_OWORD *)(v17 + v41 + 16);
        v207 = *(_DWORD *)(v17 + v41 + 32);
        v206 = v46;
        v205 = v45;
        outlined init with take of CameraSource((uint64_t *)&v206, (uint64_t)v212);
        outlined init with take of CameraSource(v212, (uint64_t)&v213);
        if (v30)
          __asm { BR              X9 }
        if (v213 == v29)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
          v43 = *(_QWORD *)(v164 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v43);
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, (uint64_t)&v205);
          _s5Hands13PoseImageCropVSgWOi_(v44);
        }
        v41 += 40;
        --v42;
      }
      while (v42);
      swift_bridgeObjectRelease();
      v40 = (float32x2_t *)v164;
      v48 = v157;
      v49 = v150;
    }
    else
    {
      v48 = v6;
      v49 = a2;
    }
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v40);
    v50 = v40[4];
    v158 = v40[5];
    swift_release();
    specialized static HandsKitUtils.extractLegacyJoints(_:)(v146);
    v52 = v51;
    outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ImageData?);
    v53 = v48;
    updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands12Coordinate3DVG_s5SIMD3VySfGs5NeverOTg50162_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6UInt64VAA0b6UpdateL0VGSayx61B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZs5f9VySfGAA12E8DVXEfU1_AF9ImageDataVTf1cn_nTf4ng_nTm(v52, (uint64_t)&v193);
    outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
    swift_bridgeObjectRelease();
    outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ImageData?);
    v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_s5SIMD2VySfGs5NeverOTg50250_s5Hands27TrackingProcessingFunctionsC017FilterHandAndCalcB11HealthScore5hands6images6config13trackingInfos0K12KitTimestampSDys6UInt64VAA0B10UpdateDataVG_SayAA0F10DescriptorVGSayAA0B4InfoVGAhA0B5StateOtAQ_SayAA05ImageT0VGAA0bS6ConfigVAtKtFZyAPXEfU_s5e7VySfGs5D11VySfGXEfU2_5Hands9ImageDataVTf1cn_nTf4ng_n(updated, (uint64_t)&v193);
    outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
    swift_bridgeObjectRelease();
    if (v158.f32[1] >= v158.f32[0])
      v56 = v158.f32[0];
    else
      v56 = v158.f32[1];
    v57 = specialized Array.count.getter(v55);
    if (v57)
    {
      v58 = 0;
      v47 = v155;
      a2 = v49;
      v6 = v53;
      while (1)
      {
        v59 = v58 + 1;
        if (__OFADD__(v58, 1))
          break;
        v60 = vsub_f32(*(float32x2_t *)(v55 + 8 * v58 + 32), v50);
        v61 = sqrtf(vaddv_f32(vmul_f32(v60, v60)));
        if ((float)(v56 * 0.5) < v61
          || ((~LODWORD(v61) & 0x7F800000) == 0 ? (v62 = (LODWORD(v61) & 0x7FFFFF) == 0) : (v62 = 1), !v62))
        {
          swift_bridgeObjectRelease();
          v145 = 1;
          goto LABEL_46;
        }
        ++v58;
        if (v59 == v57)
        {
          swift_bridgeObjectRelease();
          goto LABEL_46;
        }
      }
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
      goto LABEL_167;
    }
    swift_bridgeObjectRelease();
    v47 = v155;
    a2 = v49;
    v6 = v53;
LABEL_46:
    v63.i64[0] = v161;
    if ((*(_BYTE *)(v47 + 29) & 1) != 0)
    {
      if ((HIDWORD(v188) & 0x7FFFFF) != 0)
        v64 = *((float *)&v188 + 2);
      else
        v64 = *((float *)&v188 + 3);
      if ((~HIDWORD(v188) & 0x7F800000) != 0)
        v64 = *((float *)&v188 + 3);
      v65 = *((float *)&v188 + 3) >= *((float *)&v188 + 2) ? v64 : *((float *)&v188 + 2);
      v39 = *(double *)(v47 + 32);
      *(float *)&v39 = v39;
      *(float *)&v39 = v65 * *(float *)&v39;
    }
    else
    {
      *(float *)&v39 = (float)*(int *)(v47 + 56);
    }
    v63.i64[1] = v161;
    *(float32x2_t *)v66.f32 = vmul_f32(v38, (float32x2_t)0x3F0000003F000000);
    v66.i64[1] = v66.i64[0];
    v67.i64[0] = vsubq_f32(v63, v66).u64[0];
    v67.i64[1] = vaddq_f32(v63, v66).i64[1];
    v159 = *(float32x2_t *)((char *)&v188 + 8);
    if (specialized static TrackingUtils.onMarginRectilinearImage(bbox:imageSize:thres:)(v67, *((double *)&v188 + 1), v39))
    {
      outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ImageData?);
      v68 = (float32x4_t *)swift_bridgeObjectRetain();
      v69 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands12Coordinate3DVG_s5SIMD3VySfGs5NeverOTg50162_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6UInt64VAA0b6UpdateL0VGSayx61B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZs5f9VySfGAA12E8DVXEfU1_AF9ImageDataVTf1cn_nTf4ng_nTm(v68, (uint64_t)&v193);
      outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
      swift_bridgeObjectRelease();
      outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ImageData?);
      v70 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_s5SIMD2VySfGs5NeverOTg50162_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6UInt64VAA0b6UpdateL0VGSayw61B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZs5e7VySfGs5D11VySfGXEfU2_5Hands9ImageDataVTf1cn_nTf4ng_nTm(v69, (uint64_t)&v193);
      outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
      swift_bridgeObjectRelease();
      v71 = *((_QWORD *)&v181 + 1);
      v72 = v182;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v164 = v151;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v71, v72, isUniquelyReferenced_nonNull_native);
      v151 = v164;
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v70 + 16) <= 0x19uLL)
        goto LABEL_162;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      v74 = swift_dynamicCastClass();
      if (!v74)
      {
        swift_bridgeObjectRelease();
        v74 = MEMORY[0x24BEE4AF8];
      }
      v75 = *(_QWORD *)(v74 + 16);
      swift_release();
      v11 = v152;
      if (v75 == 26)
      {
        v76 = (float32x2_t *)swift_dynamicCastClass();
        v47 = v155;
        if (!v76)
        {
          swift_bridgeObjectRelease();
          v76 = (float32x2_t *)MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v76 = (float32x2_t *)specialized _copyCollectionToContiguousArray<A>(_:)(v70, v70 + 32, 0, 0x35uLL);
        v47 = v155;
      }
      swift_bridgeObjectRelease();
      if ((v153 & 1) != 0)
      {
        swift_release();
        v153 = 1;
        if ((*(_BYTE *)(v152 + 192) & 1) != 0)
          goto LABEL_166;
      }
      else
      {
        v172 = v201;
        v173 = v202;
        v174 = v203;
        v175 = v204;
        v168 = v197;
        v169 = v198;
        v170 = v199;
        v171 = v200;
        v164 = v193;
        v165 = v194;
        v166 = v195;
        v167 = v196;
        v153 = specialized static TrackingUtils.isHandOnImageMargin(joints2d:image:config:)(v76, (uint64_t)&v164, v47);
        swift_release();
        if ((*(_BYTE *)(v152 + 192) & 1) != 0)
          goto LABEL_166;
      }
    }
    else
    {
      v11 = v152;
      if ((*(_BYTE *)(v152 + 192) & 1) != 0)
        goto LABEL_166;
    }
    v162 = *(float32x4_t *)(v11 + 176);
    ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v191);
    v77 = vaddq_f32(v191[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v191[0], v162.f32[0]), v191[1], *(float32x2_t *)v162.f32, 1), v191[2], v162, 2));
    v78 = vmulq_f32(v77, v77);
    v79 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0]);
    if (v79 < v26)
      v26 = v79;
    v80 = *(_BYTE *)(v47 + 176);
    if ((v80 & 1) != 0)
    {
      outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
    }
    else
    {
      ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v192);
      v172 = v201;
      v173 = v202;
      v174 = v203;
      v175 = v204;
      v168 = v197;
      v169 = v198;
      v170 = v199;
      v171 = v200;
      v164 = v193;
      v165 = v194;
      v166 = v195;
      v167 = v196;
      if ((specialized static HandsKitUtils.project3DPointTo2D(_:withSourceImage:)((uint64_t)&v164, *(double *)vaddq_f32(v192[3], vmlaq_f32(vmlaq_f32(vmulq_n_f32(v192[0], v162.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v162.f32, 1), v192[1]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v162, 2), v192[2])).i64) & 1) != 0)
      {
        v82 = vadd_f32(vmul_f32(v159, v81), vmul_f32(v159, (float32x2_t)0xBF000000BF000000));
        v83 = sqrtf(vaddv_f32(vmul_f32(v82, v82)));
        outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
        if (v83 > v25)
          v25 = v83;
      }
      else
      {
        outlined retain of ImageData?(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
        v25 = INFINITY;
      }
    }
    v24 = v160 + 1;
    v27 = v154;
    if (v160 + 1 == v147)
      break;
    if (v24 >= *(_QWORD *)(v148 + 16))
      goto LABEL_159;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v80 & 1) == 0)
  {
    v86 = (void *)MEMORY[0x24BEE4AF8];
    v14 = v151;
    goto LABEL_152;
  }
  v14 = v151;
LABEL_95:
  v85 = v145;
LABEL_96:
  v145 = v85;
  v90 = *(_QWORD *)(a2 + 16);
  v91 = MEMORY[0x24BEE4AF8];
  if (v90)
  {
    *(_QWORD *)&v177 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90, 0);
    v92 = (char *)(a2 + 112);
    do
    {
      v95 = *((_QWORD *)v92 - 1);
      v96 = *v92;
      v97 = v177;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v97 + 16) + 1, 1);
        v97 = v177;
      }
      v93 = *(_QWORD *)(v97 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v93);
      v94 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v93, v95, v96);
      _s5Hands13PoseImageCropVSgWOi_(v94);
      v92 += 192;
      --v90;
    }
    while (v90);
    v91 = v177;
    a4 = v144;
  }
  v98 = *(_QWORD *)(v91 + 16);
  if (!v98)
  {
    swift_bridgeObjectRelease();
    v102 = 3.4028e38;
    v103 = 3.4028e38;
    v25 = 3.4028e38;
    goto LABEL_143;
  }
  v99 = (_QWORD *)(v91 + 32);
  v100 = 32;
  v101 = *(_QWORD *)(v91 + 16);
  do
  {
    if (*(_QWORD *)(v91 + v100) == 2)
    {
      v104 = 0;
      v105 = (_QWORD *)(v91 + 32);
      while (1)
      {
        v106 = v104 + 1;
        if (__OFADD__(v104, 1))
          goto LABEL_163;
        if (*v105 == 3)
          break;
        v105 += 2;
        ++v104;
        if (v106 == v98)
          goto LABEL_112;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
      v107 = swift_allocObject();
      v108 = specialized static Array._adoptStorage(_:count:)(v107, 2);
      *(_QWORD *)v109 = 2;
      *(_BYTE *)(v109 + 8) = 1;
      *(_QWORD *)(v109 + 16) = 3;
      *(_BYTE *)(v109 + 24) = 1;
      v110 = specialized Dictionary.subscript.getter(*(_QWORD *)(v11 + 144), *a4);
      if (v110)
      {
        v111 = v110;
        v112 = _s5Hands13PoseImageCropVSgWOi_(v108);
        v25 = specialized static TrackingUtils.calcMaxCenterDistance(hand:poseSpecCameras:images:center2DPerCamera:)(v11, v112, v150, v111);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a4 = v144;
        goto LABEL_115;
      }
      goto LABEL_168;
    }
    v100 += 16;
    --v101;
  }
  while (v101);
LABEL_112:
  v25 = 3.4028e38;
LABEL_115:
  v113 = 0;
  v114 = 32;
  while (1)
  {
    v115 = v113 + 1;
    if (__OFADD__(v113, 1))
      goto LABEL_160;
    if (*(_QWORD *)(v91 + v114) == 2)
      break;
    v114 += 16;
    ++v113;
    if (v115 == v98)
    {
LABEL_124:
      v103 = 3.4028e38;
      v118 = v150;
      goto LABEL_127;
    }
  }
  v116 = 0;
  while (1)
  {
    v117 = v116 + 1;
    if (__OFADD__(v116, 1))
      goto LABEL_164;
    if (*v99 == 4)
      break;
    v99 += 2;
    ++v116;
    if (v117 == v98)
      goto LABEL_124;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
  v119 = swift_allocObject();
  v120 = specialized static Array._adoptStorage(_:count:)(v119, 2);
  *(_QWORD *)v121 = 2;
  *(_BYTE *)(v121 + 8) = 1;
  *(_QWORD *)(v121 + 16) = 4;
  *(_BYTE *)(v121 + 24) = 1;
  v122 = specialized Dictionary.subscript.getter(*(_QWORD *)(v11 + 144), *a4);
  if (!v122)
    goto LABEL_169;
  v123 = v122;
  v124 = _s5Hands13PoseImageCropVSgWOi_(v120);
  v118 = v150;
  v103 = specialized static TrackingUtils.calcMaxCenterDistance(hand:poseSpecCameras:images:center2DPerCamera:)(v11, v124, v150, v123);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a4 = v144;
LABEL_127:
  v125 = 0;
  v126 = 32;
  while (2)
  {
    v127 = v125 + 1;
    if (__OFADD__(v125, 1))
      goto LABEL_161;
    if (*(_QWORD *)(v91 + v126) == 3)
    {
      v128 = 0;
      v129 = 32;
      while (1)
      {
        v130 = v128 + 1;
        if (__OFADD__(v128, 1))
          goto LABEL_165;
        if (*(_QWORD *)(v91 + v129) == 5)
          break;
        v129 += 16;
        ++v128;
        if (v130 == v98)
          goto LABEL_136;
      }
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
      v131 = swift_allocObject();
      v132 = specialized static Array._adoptStorage(_:count:)(v131, 2);
      *(_QWORD *)v133 = 3;
      *(_BYTE *)(v133 + 8) = 1;
      *(_QWORD *)(v133 + 16) = 5;
      *(_BYTE *)(v133 + 24) = 1;
      v134 = specialized Dictionary.subscript.getter(*(_QWORD *)(v11 + 144), *a4);
      if (!v134)
      {
LABEL_170:
        __break(1u);
        JUMPOUT(0x23D935580);
      }
      v135 = v134;
      v136 = _s5Hands13PoseImageCropVSgWOi_(v132);
      v102 = specialized static TrackingUtils.calcMaxCenterDistance(hand:poseSpecCameras:images:center2DPerCamera:)(v11, v136, v118, v135);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v102 < v103)
      {
LABEL_143:
        v137 = v25;
        if (v102 < v25)
          v25 = v102;
        if (v25 != v137)
        {
          if (v25 != v103)
            goto LABEL_151;
          goto LABEL_149;
        }
LABEL_146:
        v86 = &outlined read-only object #0 of closure #1 in static TrackingProcessingFunctions.FilterHandAndCalcTrackingHealthScore(hands:images:config:trackingInfos:handsKitTimestamp:);
        goto LABEL_152;
      }
LABEL_142:
      v102 = v103;
      goto LABEL_143;
    }
    v126 += 16;
    ++v125;
    if (v127 != v98)
      continue;
    break;
  }
LABEL_136:
  swift_bridgeObjectRelease();
  if (v103 <= 3.4028e38)
    goto LABEL_142;
  if (v25 <= 3.4028e38)
    goto LABEL_146;
  if (v25 == 3.4028e38)
  {
    v86 = &outlined read-only object #0 of closure #1 in static TrackingProcessingFunctions.FilterHandAndCalcTrackingHealthScore(hands:images:config:trackingInfos:handsKitTimestamp:);
    v25 = 3.4028e38;
    goto LABEL_152;
  }
  v25 = 3.4028e38;
  if (v103 == 3.4028e38)
  {
LABEL_149:
    v86 = &outlined read-only object #1 of closure #1 in static TrackingProcessingFunctions.FilterHandAndCalcTrackingHealthScore(hands:images:config:trackingInfos:handsKitTimestamp:);
    goto LABEL_152;
  }
LABEL_151:
  v86 = &outlined read-only object #2 of closure #1 in static TrackingProcessingFunctions.FilterHandAndCalcTrackingHealthScore(hands:images:config:trackingInfos:handsKitTimestamp:);
LABEL_152:
  v138 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v139 = v11 + *(int *)(type metadata accessor for HandDescriptor() + 100);
  v140 = *(_QWORD *)v139;
  if (*(_BYTE *)(v139 + 8) == 1)
  {
    if (v140 >= 3)
      goto LABEL_154;
LABEL_156:
    v141 = 1;
  }
  else
  {
    if (v140 != 3)
      goto LABEL_156;
LABEL_154:
    v141 = 0;
  }
  v142 = *(_QWORD *)(v11 + 144);
  v177 = 0u;
  v178 = 0u;
  LOBYTE(v179) = v190;
  BYTE1(v179) = v216;
  DWORD1(v179) = 0;
  BYTE8(v179) = v215;
  HIDWORD(v179) = 0;
  LOBYTE(v180) = v189;
  *((_QWORD *)&v180 + 1) = v14;
  LOBYTE(v181) = v141;
  BYTE1(v181) = v153 & 1;
  BYTE2(v181) = v145 & 1;
  *(_QWORD *)((char *)&v181 + 4) = __PAIR64__(LODWORD(v25), LODWORD(v26));
  *(_QWORD *)&v182 = v86;
  *((_QWORD *)&v182 + 1) = v138;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v143 = swift_isUniquelyReferenced_nonNull_native();
  v176[0] = *a5;
  *a5 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v177, v142, v143);
  *a5 = v176[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void closure #1 in static TrackingProcessingFunctions.CreateTrackingInfo(trackingInfos:handsInput:updateData:config:handsKitTimestamp:)(_QWORD **a1, uint64_t a2, uint64_t a3, _QWORD *a4, double *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  float v34;
  float v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  unsigned int v44;
  __int128 v45;
  _QWORD **v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD **v75;
  __int128 v76;
  _OWORD v77[20];
  char v78;
  __int16 v79;
  char v80;
  char v81;
  uint64_t v82;
  int v83;
  __int16 v84;
  char v85;
  _BYTE v86[11];
  __int16 v87;
  __int16 v88;
  char v89;

  v74 = a7;
  v75 = a1;
  *(_QWORD *)&v76 = a6;
  v11 = type metadata accessor for HandDescriptor();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v64 - v18;
  MEMORY[0x24BDAC7A8](v20, v21);
  v24 = (char *)&v64 - v23;
  v25 = *(_QWORD *)a2;
  v26 = *(unsigned __int8 *)(a2 + 49);
  v27 = *(float *)(a2 + 84);
  v28 = *(_QWORD *)(a3 + 16);
  if (!v28)
  {
LABEL_5:
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v77[0] = *a4;
      *a4 = 0x8000000000000000;
      specialized _NativeSet.update(with:isUnique:)(v25, isUniquelyReferenced_nonNull_native);
      *a4 = *(_QWORD *)&v77[0];
      swift_bridgeObjectRelease();
      return;
    }
    v66 = v22;
    v67 = v24;
    v73 = v26;
    v31 = *(int *)a5;
    outlined retain of TrackingUpdateConfig((uint64_t)a5);
    v72 = v31;
    v32 = v31 & ~(v31 >> 63);
    v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0, MEMORY[0x24BEE4AF8]);
    v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0, v33);
    v34 = sqrt(a5[2]);
    v35 = a5[1];
    type metadata accessor for HandCenterFilter();
    swift_allocObject();
    v69 = HandCenterFilter.init(noiseStd:withVelocityLimit:)(v34, v35);
    v68 = *((unsigned __int8 *)a5 + 80);
    v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v33);
    outlined release of TrackingUpdateConfig((uint64_t)a5);
    v78 = 1;
    v81 = 1;
    v37 = *(_QWORD *)(v76 + 16);
    v38 = 0uLL;
    v39 = 0;
    if (!v37)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0uLL;
      v27 = 0.0;
      v46 = v75;
      v48 = v71;
      v47 = v72;
      v49 = v70;
LABEL_26:
      v59 = v69;
      v60 = v68;
LABEL_27:
      v77[0] = 0uLL;
      *(_QWORD *)&v77[1] = v25;
      DWORD2(v77[1]) = 1038657310;
      BYTE12(v77[1]) = v73;
      *(_WORD *)((char *)&v77[1] + 13) = v88;
      HIBYTE(v77[1]) = v89;
      v77[2] = v38;
      v77[3] = v38;
      *(_QWORD *)&v77[4] = 0;
      *((_QWORD *)&v77[4] + 1) = v47;
      v77[5] = (unint64_t)v48;
      *(_QWORD *)&v77[6] = v47;
      *((_QWORD *)&v77[6] + 1) = v49;
      *(_QWORD *)&v77[7] = 0;
      *((_QWORD *)&v77[7] + 1) = v59;
      LOWORD(v77[8]) = v60;
      *(_DWORD *)((char *)&v77[8] + 2) = *(_DWORD *)&v86[7];
      WORD3(v77[8]) = v87;
      *((_QWORD *)&v77[8] + 1) = 0;
      *(_QWORD *)&v77[9] = v33;
      BYTE8(v77[9]) = 0;
      *(_DWORD *)((char *)&v77[9] + 9) = *(_DWORD *)v86;
      HIDWORD(v77[9]) = *(_DWORD *)&v86[3];
      v77[10] = v36;
      LOWORD(v77[11]) = 0;
      *(_QWORD *)((char *)&v77[11] + 4) = __PAIR64__(v44, v39);
      v77[12] = v45;
      v77[13] = v45;
      LODWORD(v77[14]) = 0;
      BYTE4(v77[14]) = 1;
      BYTE7(v77[14]) = v85;
      *(_WORD *)((char *)&v77[14] + 5) = v84;
      *((_QWORD *)&v77[14] + 1) = v42;
      LODWORD(v77[15]) = 0;
      HIDWORD(v77[15]) = v83;
      *(_QWORD *)((char *)&v77[15] + 4) = v82;
      v77[16] = v38;
      v77[17] = v38;
      LODWORD(v77[18]) = 0;
      *((_QWORD *)&v77[18] + 1) = v43;
      LOBYTE(v77[19]) = v81;
      *(_WORD *)((char *)&v77[19] + 1) = v79;
      BYTE3(v77[19]) = v80;
      *((float *)&v77[19] + 1) = v27;
      v61 = *v46;
      outlined retain of (TrackingInfo, Int)((uint64_t)v77);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
      v63 = v61[2];
      v62 = v61[3];
      if (v63 >= v62 >> 1)
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v61);
      v61[2] = v63 + 1;
      memcpy(&v61[40 * v63 + 4], v77, 0x138uLL);
      outlined release of TrackingInfo((uint64_t)v77);
      *v46 = v61;
      return;
    }
    v65 = v36;
    v40 = v76 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v41 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v40, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (*((_QWORD *)v15 + 18) == v25)
        break;
      outlined destroy of HandDescriptor((uint64_t)v15);
      v40 += v41;
      if (!--v37)
      {
        swift_bridgeObjectRelease();
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0uLL;
        v27 = 0.0;
        v46 = v75;
        v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_25:
        v48 = v71;
        v47 = v72;
        v49 = v70;
        v38 = 0uLL;
        v36 = v65;
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with take of Matrix2dPB((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v50 = (uint64_t)v67;
    outlined init with take of Matrix2dPB((uint64_t)v19, (uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v51 = *(_QWORD *)(v50 + *(int *)(v66 + 104));
    v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(v51 + 16))
    {
      swift_bridgeObjectRetain();
      v52 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
      if ((v53 & 1) != 0)
      {
        v44 = *(_DWORD *)(*(_QWORD *)(v51 + 56) + 4 * v52);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v51 + 16))
        {
          swift_bridgeObjectRetain();
          v54 = specialized __RawDictionaryStorage.find<A>(_:)(0, 1);
          if ((v55 & 1) != 0)
          {
            v39 = *(_DWORD *)(*(_QWORD *)(v51 + 56) + 4 * v54);
            swift_bridgeObjectRelease();
            if ((v67[192] & 1) != 0)
            {
              __break(1u);
              return;
            }
            v76 = *((_OWORD *)v67 + 11);
            v56 = *((_QWORD *)a5 + 17);
            v36 = v65;
            if (*(_QWORD *)(v56 + 16) <= 2uLL)
            {
              outlined destroy of HandDescriptor((uint64_t)v67);
              v43 = 0;
            }
            else
            {
              v57 = *(float *)(v56 + 36);
              outlined destroy of HandDescriptor((uint64_t)v67);
              v43 = v57 < v27;
              v81 = 1;
            }
            v42 = v74;
            v46 = v75;
            v48 = v71;
            v47 = v72;
            v59 = v69;
            v49 = v70;
            v38 = 0uLL;
            v60 = v68;
            v45 = v76;
            goto LABEL_27;
          }
          swift_bridgeObjectRelease();
        }
        v58 = (uint64_t)v67;
LABEL_24:
        outlined destroy of HandDescriptor(v58);
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0uLL;
        v27 = 0.0;
        v46 = v75;
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      v50 = (uint64_t)v67;
    }
    v58 = v50;
    goto LABEL_24;
  }
  v29 = (_QWORD *)(a3 + 48);
  while (*v29 != v25)
  {
    v29 += 40;
    if (!--v28)
      goto LABEL_5;
  }
}

uint64_t closure #1 in static TrackingProcessingFunctions.UpdateTrackingInfoBuffer(trackingInfos:hands:updateData:config:handsKitTimestamp:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD **a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  _QWORD **v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD **v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[40];
  _QWORD v70[40];
  _QWORD v71[39];
  unint64_t v72[6];
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v65 = a4;
  v66 = a5;
  v11 = type metadata accessor for HandDescriptor();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v67 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v68 = (uint64_t)&v61 - v17;
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)&v61 - v17, v18);
  v19 = a2[2];
  if (v19)
  {
    v62 = a6;
    v63 = v12;
    v64 = v6;
    v20 = *(_QWORD *)(a1 + 144);
    memcpy(v70, a2 + 4, 0x138uLL);
    v22 = v70[10];
    v21 = v70[11];
    v23 = v70[12];
    v24 = v70[13];
    v25 = v70[14];
    v26 = v70[9];
    if (v70[2] == v20)
    {
LABEL_6:
      v80 = v26;
      v81 = v22;
      v82 = v21;
      v83 = v23;
      v84 = v24;
      v85 = v25;
      memcpy(v71, v70, sizeof(v71));
      v29 = *(int *)(a3 + 144);
      v61 = *(int *)(a3 + 148);
      if (v26 == v29)
      {
        outlined retain of (TrackingInfo, Int)((uint64_t)v70);
        v30 = v66;
      }
      else
      {
        v69[3] = MEMORY[0x24BEE0D00];
        v69[0] = 0xD00000000000005ALL;
        v69[1] = 0x800000023D9DB150;
        outlined retain of (TrackingInfo, Int)((uint64_t)v70);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized static HLog.W(file:function:line:_:_:)(0xD000000000000078, 0x800000023D9DB090, 418, (uint64_t)v69, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v69);
        specialized TrackingBuffers.init(fromBuffer:newCapacity:)(&v80, v29, v72);
        result = outlined init with take of ImageData?((uint64_t)v72, (uint64_t)&v73, &demangling cache variable for type metadata for TrackingBuffers?);
        v30 = v66;
        if (!*((_QWORD *)&v73 + 1))
        {
          __break(1u);
          return result;
        }
        v78 = v73;
        v32 = v75;
        v79 = v74;
        v34 = v76;
        v33 = v77;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_OWORD *)&v71[9] = v78;
        v71[11] = v79;
        v71[12] = v32;
        v71[13] = v34;
        v71[14] = v33;
      }
      v35 = v65;
      LODWORD(v71[3]) = *(_DWORD *)a1;
      if (*(_QWORD *)(v65 + 16))
      {
        v36 = *(_QWORD *)(a1 + 144);
        v37 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
        if ((v38 & 1) != 0)
        {
          v39 = *(_QWORD *)(v35 + 56) + 96 * v37;
          v40 = *(_BYTE *)(v39 + 65);
          v41 = *(_BYTE *)(v39 + 66);
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
        LOBYTE(v71[22]) = v40;
        BYTE1(v71[22]) = v41;
        v42 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
        if ((v43 & 1) != 0)
        {
          v44 = *(_QWORD *)(v35 + 56);
          v45 = v44 + 96 * v42;
          if ((*(_BYTE *)(v45 + 40) & 1) == 0)
          {
            v46 = *(_QWORD *)(v45 + 56);
            if ((*(_BYTE *)(v44 + 96 * v42 + 48) & 1) != 0)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v47 = *(float *)(v45 + 44);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized CircularBuffer.add(_:)(v47);
              v48 = v71[9];
              v49 = v71[10];
              v50 = v71[11];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              LOBYTE(v50) = specialized static TrackingProcessingFunctions.voteChirality(buffer:windowSize:)(v48, v49, v50, v61);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(_BYTE *)(v68 + 136) = v50 & 1;
              BYTE4(v71[3]) = v50 & 1;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v71[20] = v46;
          }
        }
      }
      else
      {
        LOWORD(v71[22]) = 0;
      }
      memcpy(v69, v71, 0x138uLL);
      v51 = *v30;
      outlined retain of (TrackingInfo, Int)((uint64_t)v69);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v30 = v51;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
        *v30 = v51;
      }
      v12 = v63;
      a6 = v62;
      v54 = v51[2];
      v53 = v51[3];
      if (v54 >= v53 >> 1)
      {
        v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v51);
        *v30 = v51;
      }
      v51[2] = v54 + 1;
      memcpy(&v51[40 * v54 + 4], v69, 0x138uLL);
      outlined release of TrackingInfo((uint64_t)v69);
    }
    else
    {
      v27 = (char *)(a2 + 44);
      while (--v19)
      {
        v28 = v27 + 320;
        memcpy(v70, v27, 0x138uLL);
        v22 = v70[10];
        v21 = v70[11];
        v23 = v70[12];
        v24 = v70[13];
        v25 = v70[14];
        v26 = v70[9];
        v27 = v28;
        if (v70[2] == v20)
          goto LABEL_6;
      }
      v80 = v26;
      v81 = v22;
      v82 = v21;
      v83 = v23;
      v84 = v24;
      v85 = v25;
      v12 = v63;
      a6 = v62;
    }
  }
  v55 = v67;
  v56 = v68;
  outlined init with copy of TrackingUpdateDataPB(v68, v67, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v57 = *a6;
  v58 = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v57;
  if ((v58 & 1) == 0)
  {
    v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v57 + 16) + 1, 1, v57);
    *a6 = v57;
  }
  v60 = *(_QWORD *)(v57 + 16);
  v59 = *(_QWORD *)(v57 + 24);
  if (v60 >= v59 >> 1)
  {
    v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1, v57);
    *a6 = v57;
  }
  *(_QWORD *)(v57 + 16) = v60 + 1;
  outlined init with take of Matrix2dPB(v55, v57+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v60, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  return outlined destroy of HandDescriptor(v56);
}

uint64_t closure #1 in static TrackingProcessingFunctions.UpdateTrackingFilter(trackingInfos:hands:updateData:config:handsKitTimestamp:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  char v23;
  uint64_t v24;
  float v25;
  float v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  float v37;
  double v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  void *v42;
  __int128 v43;
  uint64_t result;
  float32x2_t v45;
  uint64_t v46;
  char v47;
  float32x2_t v48;
  float32x2_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _QWORD v74[4];
  _OWORD __dst[20];
  uint64_t v76;

  memcpy(__dst, __src, 0x138uLL);
  v7 = *((_QWORD *)&__dst[7] + 1);
  v8 = *(float32x2_t *)((char *)&__dst[3] + 8);
  v9 = *(float32x2_t *)&__dst[3];
  v10 = DWORD2(__dst[1]);
  v12 = *((_QWORD *)&__dst[8] + 1);
  v11 = *(_QWORD *)&__dst[9];
  v13 = *(_QWORD *)((char *)&__dst[11] + 4);
  v14 = __dst[14];
  v15 = *(float *)&__dst[15];
  v16 = __dst[18];
  v17 = DWORD1(__dst[19]);
  v71 = __dst[13];
  v72 = __dst[12];
  v69 = __dst[17];
  v70 = __dst[16];
  v76 = *(_QWORD *)&__dst[10];
  v67 = *((_QWORD *)&__dst[14] + 1);
  v68 = *((_QWORD *)&__dst[10] + 1);
  v66 = *((_QWORD *)&__dst[18] + 1);
  v73 = __dst[4];
  v65 = *(_OWORD *)((char *)&__dst[5] + 8);
  v63 = *((_QWORD *)&__dst[6] + 1);
  v64 = *(_QWORD *)&__dst[5];
  v62 = *(_QWORD *)&__dst[7];
  v60 = __dst[2];
  v61 = __dst[0];
  v59 = *(_QWORD *)&__dst[1];
  v57 = __dst[8];
  v58 = BYTE12(__dst[1]);
  v55 = BYTE8(__dst[9]);
  v56 = BYTE1(__dst[8]);
  v53 = BYTE1(__dst[11]);
  v54 = __dst[11];
  v51 = __dst[19];
  v52 = BYTE4(__dst[14]);
  if (*((_QWORD *)&__dst[7] + 1))
  {
    swift_bridgeObjectRetain_n();
    outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
    if (!*(_QWORD *)(a3 + 16))
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
      v27 = v72;
      v28 = v73;
      v30 = v70;
      v29 = v71;
      v31 = v69;
      v32 = v76;
      v34 = v67;
      v33 = v68;
      v35 = v66;
      goto LABEL_15;
    }
  }
  else
  {
    v74[3] = MEMORY[0x24BEE0D00];
    v74[0] = 0xD00000000000005DLL;
    v74[1] = 0x800000023D9DB240;
    swift_bridgeObjectRetain_n();
    outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
    specialized static HLog.W(file:function:line:_:_:)(0xD000000000000078, 0x800000023D9DB090, 469, (uint64_t)v74, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v74);
    v25 = sqrt(*(double *)(a2 + 16));
    v26 = *(double *)(a2 + 8);
    type metadata accessor for HandCenterFilter();
    swift_allocObject();
    v7 = HandCenterFilter.init(noiseStd:withVelocityLimit:)(v25, v26);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_7;
  }
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)&__dst[1]);
  if ((v19 & 1) == 0)
    goto LABEL_7;
  v46 = a2;
  v49 = v9;
  v50 = v12;
  v48 = v8;
  v20 = *(_QWORD *)(a3 + 56) + 96 * v18;
  v22 = *(float32x2_t *)(v20 + 16);
  v21 = *(float32x2_t *)(v20 + 24);
  v47 = *(_BYTE *)(v20 + 32);
  v23 = *(_BYTE *)(v20 + 40);
  v24 = *(_QWORD *)(v20 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0 || (v45 = v21, (v47 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v49;
    v8 = v48;
    v29 = v71;
    v27 = v72;
    v31 = v69;
    v30 = v70;
    v12 = v50;
  }
  else
  {
    v36 = *(double *)(v46 + 8);
    v37 = v36;
    v9 = v49;
    if ((_QWORD)v73)
    {
      swift_bridgeObjectRelease();
      v8 = v48;
      v38 = *(double *)&v22;
      *(float32x2_t *)v39.f32 = vsub_f32(v49, v22);
      *(float32x2_t *)&v39.u32[2] = vsub_f32(v48, v45);
      v40 = vmulq_f32(v39, v39);
      v15 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
      *(float *)&v36 = expf((float)((float)(v15 + -0.05) * -5.0) / 0.01);
      v41 = *(double *)(v46 + 72);
      v37 = (float)((float)(1.0 - (float)(1.0 / (float)(*(float *)&v36 + 1.0))) * v41) + v37;
    }
    else
    {
      v8 = v48;
      v38 = *(double *)&v22;
    }
    *(float *)&v36 = v37;
    objc_msgSend(*(id *)(v7 + 16), sel_setVelocityLimit_, v36, v24);
    v42 = *(void **)(v7 + 16);
    swift_retain();
    objc_msgSend(v42, sel_filter_, v38);
    *(_OWORD *)(v7 + 32) = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v29 = v71;
    v27 = v72;
    v31 = v69;
    v30 = v70;
    v12 = v50;
  }
  v32 = v76;
  v34 = v67;
  v33 = v68;
  v35 = v66;
  v28 = v73;
LABEL_15:
  result = v64;
  LOBYTE(v74[0]) = v51 & 1;
  *(_OWORD *)a4 = v61;
  *(_QWORD *)(a4 + 16) = v59;
  *(_DWORD *)(a4 + 24) = v10;
  *(_BYTE *)(a4 + 28) = v58 & 1;
  *(_OWORD *)(a4 + 32) = v60;
  *(float32x2_t *)(a4 + 48) = v9;
  *(float32x2_t *)(a4 + 56) = v8;
  *(_OWORD *)(a4 + 64) = v28;
  *(_QWORD *)(a4 + 80) = v64;
  *(_OWORD *)(a4 + 88) = v65;
  *(_QWORD *)(a4 + 104) = v63;
  *(_QWORD *)(a4 + 112) = v62;
  *(_QWORD *)(a4 + 120) = v7;
  *(_BYTE *)(a4 + 128) = v57 & 1;
  *(_BYTE *)(a4 + 129) = v56 & 1;
  *(_QWORD *)(a4 + 136) = v12;
  *(_QWORD *)(a4 + 144) = v11;
  *(_BYTE *)(a4 + 152) = v55 & 1;
  *(_QWORD *)(a4 + 160) = v32;
  *(_QWORD *)(a4 + 168) = v33;
  *(_BYTE *)(a4 + 176) = v54 & 1;
  *(_BYTE *)(a4 + 177) = v53 & 1;
  *(_QWORD *)(a4 + 180) = v13;
  *(_OWORD *)(a4 + 192) = v27;
  *(_OWORD *)(a4 + 208) = v29;
  *(_DWORD *)(a4 + 224) = v14;
  *(_BYTE *)(a4 + 228) = v52 & 1;
  *(_QWORD *)(a4 + 232) = v34;
  *(float *)(a4 + 240) = v15;
  *(_OWORD *)(a4 + 256) = v30;
  *(_OWORD *)(a4 + 272) = v31;
  *(_DWORD *)(a4 + 288) = v16;
  *(_QWORD *)(a4 + 296) = v35;
  *(_BYTE *)(a4 + 304) = v74[0];
  *(_DWORD *)(a4 + 308) = v17;
  return result;
}

uint64_t closure #2 in static TrackingProcessingFunctions.CleanUpHandByChirality(trackingInfos:hands:handsKitTimestamp:)(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  const void *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  float v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[40];
  _QWORD __dst[40];
  _QWORD v72[14];
  __int16 v73;
  int v74;
  _QWORD v75[14];
  __int16 v76;
  int v77;

  v4 = a3[2];
  if (!v4)
    goto LABEL_37;
  v8 = a1[18];
  v9 = a3 + 4;
  memcpy(__dst, a3 + 4, 0x138uLL);
  if (__dst[2] != v8)
  {
    v10 = (char *)(a3 + 44);
    v3 = v4;
    while (--v3)
    {
      v11 = v10 + 320;
      memcpy(__dst, v10, 0x138uLL);
      v10 = v11;
      if (__dst[2] == v8)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_36;
  }
LABEL_6:
  v12 = a2[18];
  v3 = __dst[1];
  result = (uint64_t)memcpy(v70, v9, 0x138uLL);
  if (v70[2] != v12)
  {
    v14 = (char *)(a3 + 44);
    while (--v4)
    {
      v15 = v14 + 320;
      result = (uint64_t)memcpy(v70, v14, 0x138uLL);
      v14 = v15;
      if (v70[2] == v12)
        goto LABEL_10;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    swift_once();
    goto LABEL_12;
  }
LABEL_10:
  v66 = a2;
  v65 = __dst[1];
  v16 = a1[2];
  if (!v16)
  {
    __break(1u);
    goto LABEL_40;
  }
  v63 = v70[1];
  v17 = a1[4];
  v67 = a1[3];
  v18 = a1[6];
  v19 = a1[7];
  v69 = a1[5];
  v21 = a1[10];
  v20 = a1[9];
  v68 = a1[8];
  v22 = a1[11];
  v23 = a1[12];
  v24 = a1[13];
  v26 = a1[15];
  v25 = a1[16];
  v27 = a1[14];
  v75[0] = v16;
  v75[1] = v67;
  v75[2] = v17;
  v75[3] = v69;
  v75[4] = v18;
  v75[5] = v19;
  v75[6] = v68;
  v75[7] = v20;
  v75[8] = v21;
  v75[9] = v22;
  v75[10] = v23;
  v75[11] = v24;
  v75[12] = v27;
  v75[13] = v26;
  v76 = v25 & 0x101;
  v77 = HIDWORD(v25);
  outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
  outlined retain of (TrackingInfo, Int)((uint64_t)v70);
  outlined copy of HandPose?(v16);
  v3 = v16;
  if (one-time initialization token for _mapping != -1)
    goto LABEL_38;
LABEL_12:
  outlined copy of HandPose?(v3);
  v28 = swift_bridgeObjectRetain();
  v64 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_Sfs5NeverOTg5015_s5Hands19Pinche53OcclusionC06updatebC11UncertaintyySaySfGAA8HandPoseV_o4So06d2C7F14VGtFZSfAIXEfU_5Hands0rS0VTf1cn_nTf4ng_n(v28, (uint64_t)v75);
  outlined consume of HandPose?(v3);
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v64 + 16);
  if (!v29)
  {
    v32 = 0.0;
    v30 = v66;
    goto LABEL_21;
  }
  v30 = v66;
  if (v29 == 1)
  {
    v31 = 0;
    v32 = 0.0;
LABEL_19:
    v35 = v29 - v31;
    v36 = (float *)(v64 + 4 * v31 + 32);
    do
    {
      v37 = *v36++;
      v32 = v32 + v37;
      --v35;
    }
    while (v35);
    goto LABEL_21;
  }
  v31 = v29 & 0x7FFFFFFFFFFFFFFELL;
  v33 = (float *)(v64 + 36);
  v32 = 0.0;
  v34 = v29 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v32 = (float)(v32 + *(v33 - 1)) + *v33;
    v33 += 2;
    v34 -= 2;
  }
  while (v34);
  if (v29 != v31)
    goto LABEL_19;
LABEL_21:
  swift_bridgeObjectRelease();
  result = outlined consume of HandPose?(v3);
  v38 = v30[2];
  if (!v38)
  {
LABEL_40:
    __break(1u);
    return result;
  }
  v39 = v30[3];
  v40 = v30[4];
  v41 = v30[5];
  v42 = v30[6];
  v43 = v30[7];
  v44 = v30[8];
  v45 = v30[9];
  v46 = v30[10];
  v48 = v30[11];
  v47 = v30[12];
  v49 = v30[13];
  v50 = v30[14];
  v52 = v30[15];
  v51 = v30[16];
  v72[0] = v38;
  v72[1] = v39;
  v72[3] = v41;
  v72[2] = v40;
  v72[5] = v43;
  v72[4] = v42;
  v72[7] = v45;
  v72[6] = v44;
  v72[9] = v48;
  v72[8] = v46;
  v72[11] = v49;
  v72[10] = v47;
  v72[13] = v52;
  v72[12] = v50;
  v73 = v51 & 0x101;
  v74 = HIDWORD(v51);
  outlined copy of HandPose?(v38);
  v53 = swift_bridgeObjectRetain();
  v54 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_Sfs5NeverOTg5015_s5Hands19Pinche53OcclusionC06updatebC11UncertaintyySaySfGAA8HandPoseV_o4So06d2C7F14VGtFZSfAIXEfU_5Hands0rS0VTf1cn_nTf4ng_n(v53, (uint64_t)v72);
  swift_bridgeObjectRelease();
  v55 = *(_QWORD *)(v54 + 16);
  if (!v55)
  {
    swift_bridgeObjectRelease();
    outlined consume of HandPose?(v38);
    v57 = 0.0;
    goto LABEL_32;
  }
  if (v55 == 1)
  {
    v56 = 0;
    v57 = 0.0;
  }
  else
  {
    v56 = v55 & 0x7FFFFFFFFFFFFFFELL;
    v58 = (float *)(v54 + 36);
    v57 = 0.0;
    v59 = v55 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v57 = (float)(v57 + *(v58 - 1)) + *v58;
      v58 += 2;
      v59 -= 2;
    }
    while (v59);
    if (v55 == v56)
      goto LABEL_31;
  }
  v60 = v55 - v56;
  v61 = (float *)(v54 + 4 * v56 + 32);
  do
  {
    v62 = *v61++;
    v57 = v57 + v62;
    --v60;
  }
  while (v60);
LABEL_31:
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v38);
LABEL_32:
  if (v65 == v63)
  {
    outlined release of TrackingInfo((uint64_t)v70);
    outlined release of TrackingInfo((uint64_t)__dst);
    return v32 < v57;
  }
  else
  {
    outlined release of TrackingInfo((uint64_t)__dst);
    outlined release of TrackingInfo((uint64_t)v70);
    return v63 < v65;
  }
}

uint64_t closure #5 in static TrackingProcessingFunctions.cleanUpHandByTwoHandsOcclusion(handsData:updateData:config:trackingInfos:)(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  Swift::String v92;
  Swift::String v93;
  __int32 v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  uint64_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  float32x4_t v104;
  float v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  simd_float4x4 v133;

  if (*(_QWORD *)(result + 16))
  {
    v6 = result;
    if ((*(_BYTE *)(result + 128) & 1) != 0)
    {
      result = *(_QWORD *)(result + 200);
      if (result)
      {
        v7 = *(_QWORD *)(result + 16);
        if (v7)
        {
          v13 = *(_QWORD *)(a2 + 16);
          v14 = swift_bridgeObjectRetain();
          v15 = v13;
          v16 = v14 + 32;
          v17 = *(_QWORD *)(v14 + 32);
          v18 = *(_BYTE *)(v14 + 40);
          if (v15)
          {
            v19 = (__int128 *)(a2 + 224);
            v20 = v15 - 1;
            v21 = 1;
            while (1)
            {
              v22 = *(_OWORD *)(a2 + 176);
              v129 = *(_OWORD *)(a2 + 160);
              v130 = v22;
              v23 = *(_OWORD *)(a2 + 208);
              v131 = *(_OWORD *)(a2 + 192);
              v132 = v23;
              v24 = *(_OWORD *)(a2 + 112);
              v125 = *(_OWORD *)(a2 + 96);
              v126 = v24;
              v25 = *(_OWORD *)(a2 + 144);
              v127 = *(_OWORD *)(a2 + 128);
              v128 = v25;
              v26 = *(_OWORD *)(a2 + 48);
              v121 = *(_OWORD *)(a2 + 32);
              v122 = v26;
              v27 = *(_OWORD *)(a2 + 80);
              v123 = *(_OWORD *)(a2 + 64);
              v124 = v27;
              v28 = v20;
              v29 = v19;
              v30 = *((_QWORD *)&v125 + 1);
              if ((v18 & 1) != 0)
LABEL_8:
                __asm { BR              X11 }
              while (v30 != v17)
              {
                if (!v28)
                  goto LABEL_60;
                v31 = v29[9];
                v129 = v29[8];
                v130 = v31;
                v32 = v29[11];
                v131 = v29[10];
                v132 = v32;
                v33 = v29[5];
                v125 = v29[4];
                v126 = v33;
                v34 = v29[7];
                v127 = v29[6];
                v128 = v34;
                v35 = v29[1];
                v121 = *v29;
                v122 = v35;
                v36 = v29[3];
                v123 = v29[2];
                v124 = v36;
                v29 += 12;
                --v28;
                v30 = *((_QWORD *)&v125 + 1);
                if ((v18 & 1) != 0)
                  goto LABEL_8;
              }
              v117 = v14;
              v118 = v21;
              v112 = v20;
              v113 = v19;
              v114 = v16;
              v115 = v15;
              v116 = a3;
              v37 = *a3;
              v119 = *(_QWORD *)(v6 + 144);
              v111 = a4;
              if (*(_QWORD *)(v37 + 16)
                && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v6 + 144)), (v39 & 1) != 0))
              {
                v108 = a5;
                v104 = *(float32x4_t *)(*(_QWORD *)(v37 + 56) + 32 * v38 + 16);
                v40 = *a4;
                if (*(_QWORD *)(*a4 + 16)
                  && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(v119), (v42 & 1) != 0))
                {
                  v43 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v41);
                  outlined retain of ImageData((uint64_t)&v121);
                  swift_bridgeObjectRetain();
                }
                else
                {
                  outlined retain of ImageData((uint64_t)&v121);
                  v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
                }
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)&v120[0] = *a4;
                *a4 = 0x8000000000000000;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v43, v119, isUniquelyReferenced_nonNull_native);
                *a4 = *(_QWORD *)&v120[0];
                swift_bridgeObjectRelease();
                v45 = v125;
                v46 = (_BYTE *)(v125 + 320);
                v106 = a6;
                if ((*(_BYTE *)(v125 + 400) & 1) != 0)
                {
                  swift_beginAccess();
                  v133 = __invert_f4(*(simd_float4x4 *)(v45 + 192));
                  *(simd_float4x4 *)(v45 + 256) = v133;
                  *v46 = 0;
                  v133.columns[0].i32[3] = v94;
                  v133.columns[1].i32[3] = v95;
                  v133.columns[2].i32[3] = v96;
                  v133.columns[3].i32[3] = v97;
                  *(simd_float4x4 *)(v45 + 336) = v133;
                  v46[80] = 0;
                  v101 = v133.columns[0].i64[1];
                  v98 = v133.columns[0].i64[0];
                  v102 = v133.columns[2].i64[1];
                  v99 = (float32x4_t)v133.columns[1];
                  v100 = v133.columns[2].i64[0];
                  v103 = v133.columns[3].u64[1];
                }
                else
                {
                  v102 = *(_QWORD *)(v125 + 376);
                  v103 = *(_QWORD *)(v125 + 392);
                  v99 = *(float32x4_t *)(v125 + 352);
                  v100 = *(_QWORD *)(v125 + 368);
                  v101 = *(_QWORD *)(v125 + 344);
                  v98 = *(_QWORD *)(v125 + 336);
                }
                v47 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)&v120[0] = *a4;
                v48 = *(_QWORD *)&v120[0];
                *a4 = 0x8000000000000000;
                v50 = specialized __RawDictionaryStorage.find<A>(_:)(v119);
                v51 = *(_QWORD *)(v48 + 16);
                v52 = (v49 & 1) == 0;
                v53 = v51 + v52;
                if (__OFADD__(v51, v52))
                {
                  __break(1u);
LABEL_64:
                  __break(1u);
LABEL_65:
                  __break(1u);
LABEL_66:
                  swift_bridgeObjectRelease();
                  __break(1u);
LABEL_67:
                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  JUMPOUT(0x23D93749CLL);
                }
                v54 = v49;
                if (*(_QWORD *)(v48 + 24) >= v53)
                {
                  if ((v47 & 1) != 0)
                  {
                    a5 = v108;
                    if ((v49 & 1) == 0)
                      goto LABEL_64;
                  }
                  else
                  {
                    v91 = v50;
                    specialized _NativeDictionary.copy()();
                    v50 = v91;
                    a5 = v108;
                    if ((v54 & 1) == 0)
                      goto LABEL_64;
                  }
                }
                else
                {
                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, v47);
                  v55 = specialized __RawDictionaryStorage.find<A>(_:)(v119);
                  if ((v54 & 1) != (v56 & 1))
                    goto LABEL_67;
                  v50 = v55;
                  a5 = v108;
                  if ((v54 & 1) == 0)
                    goto LABEL_64;
                }
                v57.i64[0] = v98;
                v57.i64[1] = v101;
                v58.i64[0] = v100;
                v58.i64[1] = v102;
                LODWORD(v59) = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, *(float *)&v104), v99, *(float32x2_t *)&v104, 1), v58, v104, 2), (float32x4_t)vdupq_n_s64(v103)).i32[2];
                v60 = *(_QWORD *)&v120[0];
                v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v120[0] + 56) + 8 * v50);
                v109 = v50;
                v62 = swift_isUniquelyReferenced_nonNull_native();
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v18 & 1, v62, v59);
                swift_bridgeObjectRelease();
                if (v61)
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v120[0] + 56) + 8 * v109) = v61;
                else
                  specialized _NativeDictionary._delete(at:)(v109, *(uint64_t *)&v120[0]);
                *a4 = v60;
                a6 = v106;
              }
              else
              {
                outlined retain of ImageData((uint64_t)&v121);
              }
              v63 = *a5;
              if (*(_QWORD *)(*a5 + 16))
              {
                v64 = specialized __RawDictionaryStorage.find<A>(_:)(v119);
                if ((v65 & 1) != 0)
                {
                  v110 = a5;
                  v66 = *(_QWORD *)(*(_QWORD *)(v63 + 56) + 8 * v64);
                  v67 = *a6;
                  if (*(_QWORD *)(*a6 + 16)
                    && (v68 = specialized __RawDictionaryStorage.find<A>(_:)(v119), (v69 & 1) != 0))
                  {
                    v70 = *(_QWORD *)(*(_QWORD *)(v67 + 56) + 8 * v68);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
                    v70 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
                  }
                  v71 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)&v120[0] = *a6;
                  *a6 = 0x8000000000000000;
                  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v119, v71);
                  *a6 = *(_QWORD *)&v120[0];
                  swift_bridgeObjectRelease();
                  if (!*(_QWORD *)(v66 + 16))
                    goto LABEL_66;
                  v72 = v18 & 1;
                  v73 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v72);
                  if ((v74 & 1) == 0)
                    goto LABEL_66;
                  v75 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v73);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  v76 = specialized static TrackingUtils.armJointToHandCenterAngle(jointsARvino:)(v75);
                  swift_bridgeObjectRelease();
                  a5 = v110;
                  v105 = *(float *)&v76;
                  if ((v76 & 0x100000000) == 0)
                  {
                    v77 = swift_isUniquelyReferenced_nonNull_native();
                    *(_QWORD *)&v120[0] = *a6;
                    v78 = *(_QWORD *)&v120[0];
                    v107 = a6;
                    *a6 = 0x8000000000000000;
                    v80 = specialized __RawDictionaryStorage.find<A>(_:)(v119);
                    v81 = *(_QWORD *)(v78 + 16);
                    v82 = (v79 & 1) == 0;
                    v83 = v81 + v82;
                    if (__OFADD__(v81, v82))
                      goto LABEL_65;
                    v84 = v79;
                    if (*(_QWORD *)(v78 + 24) >= v83)
                    {
                      if ((v77 & 1) != 0)
                      {
                        a5 = v110;
                        if ((v79 & 1) == 0)
                          goto LABEL_59;
                      }
                      else
                      {
                        specialized _NativeDictionary.copy()();
                        a5 = v110;
                        if ((v84 & 1) == 0)
                          goto LABEL_59;
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v83, v77);
                      v85 = specialized __RawDictionaryStorage.find<A>(_:)(v119);
                      if ((v84 & 1) != (v86 & 1))
                        goto LABEL_67;
                      v80 = v85;
                      a5 = v110;
                      if ((v84 & 1) == 0)
                      {
LABEL_59:
                        __break(1u);
                        goto LABEL_60;
                      }
                    }
                    v87 = *(_QWORD *)&v120[0];
                    v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v120[0] + 56) + 8 * v80);
                    v89 = swift_isUniquelyReferenced_nonNull_native();
                    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v72, v89, v105);
                    swift_bridgeObjectRelease();
                    if (v88)
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v120[0] + 56) + 8 * v80) = v88;
                    else
                      specialized _NativeDictionary._delete(at:)(v80, *(uint64_t *)&v120[0]);
                    *v107 = v87;
                    a6 = v107;
                  }
                }
              }
              outlined release of ImageData((uint64_t)&v121);
              if (v118 == v7)
                return swift_bridgeObjectRelease();
              v16 = v114;
              v15 = v115;
              v90 = v114 + 16 * v118;
              v21 = v118 + 1;
              v17 = *(_QWORD *)v90;
              v18 = *(_BYTE *)(v90 + 8);
              a3 = v116;
              v14 = v117;
              v20 = v112;
              v19 = v113;
              a4 = v111;
            }
          }
          else
          {
LABEL_60:
            swift_bridgeObjectRelease();
            *(_QWORD *)&v121 = 0;
            *((_QWORD *)&v121 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(37);
            v92._object = (void *)0x800000023D9DB110;
            v92._countAndFlagsBits = 0xD000000000000010;
            String.append(_:)(v92);
            _print_unlocked<A, B>(_:_:)();
            v93._countAndFlagsBits = 0xD000000000000013;
            v93._object = (void *)0x800000023D9DB130;
            String.append(_:)(v93);
            *((_QWORD *)&v122 + 1) = MEMORY[0x24BEE0D00];
            type metadata accessor for HandyLoggerNeo();
            memset(v120, 0, sizeof(v120));
            static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v120, 0xD000000000000078, 0x800000023D9DB090, 777, (uint64_t)&v121, MEMORY[0x24BEE4AF8]);
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v121);
          }
        }
      }
    }
  }
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(_QWORD, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v2;
  if ((result & 1) == 0)
    return a1(0, *(_QWORD *)(v2 + 16) + 1, 1);
  return result;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, unsigned int a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, Swift::UInt a2))()
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

uint64_t specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t result;

  v4 = v3;
  v8 = (char *)malloc(0x140uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 36) = a2;
  *((_QWORD *)v8 + 37) = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[312] = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_22;
  }
  v15 = v10;
  v16 = *(_QWORD *)(v9 + 24);
  if (v16 >= v14 && (a3 & 1) != 0)
    goto LABEL_9;
  if (v16 < v14 || (a3 & 1) != 0)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      v11 = v17;
      goto LABEL_9;
    }
LABEL_22:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  specialized _NativeDictionary.copy()();
LABEL_9:
  v19 = v8 + 192;
  *((_QWORD *)v8 + 38) = v11;
  if ((v15 & 1) != 0)
  {
    v20 = *(_QWORD *)(*v4 + 56) + 96 * v11;
    v21 = *(unsigned __int8 *)(v20 + 48);
    v22 = *(_QWORD *)(v20 + 56);
    v23 = *(_OWORD *)(v20 + 80);
    if (*(_BYTE *)(v20 + 33))
      v24 = 256;
    else
      v24 = 0;
    v25 = v24 | *(unsigned __int8 *)(v20 + 32) | ((unint64_t)*(unsigned int *)(v20 + 36) << 32);
    v26 = *(unsigned __int8 *)(v20 + 40) | ((unint64_t)*(unsigned int *)(v20 + 44) << 32);
    if (*(_BYTE *)(v20 + 65))
      v27 = 256;
    else
      v27 = 0;
    v28 = v27 | *(unsigned __int8 *)(v20 + 64);
    v29 = 0x10000;
    if (!*(_BYTE *)(v20 + 66))
      v29 = 0;
    v30 = v28 | v29;
    v31 = *(unsigned int *)(v20 + 72);
    v32 = v30 | ((unint64_t)*(unsigned int *)(v20 + 68) << 32);
    v33 = *(_OWORD *)(v20 + 16);
    *v19 = *(_OWORD *)v20;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v21 = 0;
    v22 = 0;
    v32 = 0;
    v31 = 0;
    v33 = 0uLL;
    *v19 = 0u;
    v23 = 0uLL;
  }
  *((_OWORD *)v8 + 13) = v33;
  *((_QWORD *)v8 + 28) = v25;
  *((_QWORD *)v8 + 29) = v26;
  result = (uint64_t)_NativeDictionary.subscript.modifyspecialized ;
  *((_QWORD *)v8 + 30) = v21;
  *((_QWORD *)v8 + 31) = v22;
  *((_QWORD *)v8 + 32) = v32;
  *((_QWORD *)v8 + 33) = v31;
  *((_OWORD *)v8 + 17) = v23;
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (char **a1, char a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 24);
  v4 = *((_QWORD *)*a1 + 25);
  v5 = *((_QWORD *)*a1 + 26);
  v7 = *((_QWORD *)*a1 + 27);
  v6 = *((_QWORD *)*a1 + 28);
  v8 = *((_QWORD *)*a1 + 29);
  v9 = *((_QWORD *)*a1 + 30);
  v10 = *((_QWORD *)*a1 + 31);
  v11 = *((_QWORD *)*a1 + 32);
  v13 = *((_QWORD *)*a1 + 33);
  v12 = *((_QWORD *)*a1 + 34);
  v14 = *((_QWORD *)v2 + 35);
  v15 = v2[312];
  if ((a2 & 1) == 0)
  {
    if (v10)
    {
      v24 = v2 + 96;
      *((_QWORD *)v2 + 12) = v3;
      *((_QWORD *)v2 + 13) = v4;
      *((_QWORD *)v2 + 14) = v5;
      *((_QWORD *)v2 + 15) = v7;
      v2[128] = v6 & 1;
      v2[129] = BYTE1(v6) & 1;
      *((_DWORD *)v2 + 33) = HIDWORD(v6);
      v2[136] = v8 & 1;
      *((_DWORD *)v2 + 35) = HIDWORD(v8);
      v2[144] = v9 & 1;
      *((_QWORD *)v2 + 19) = v10;
      v2[160] = v11 & 1;
      v2[161] = BYTE1(v11) & 1;
      v2[162] = BYTE2(v11) & 1;
      *((_DWORD *)v2 + 41) = HIDWORD(v11);
      *((_DWORD *)v2 + 42) = v13;
      *((_QWORD *)v2 + 22) = v12;
      *((_QWORD *)v2 + 23) = v14;
      v16 = *((_QWORD *)v2 + 38);
      v17 = (_QWORD *)**((_QWORD **)v2 + 37);
      if ((v15 & 1) != 0)
      {
        v18 = (_OWORD *)(v17[7] + 96 * v16);
        v25 = *((_OWORD *)v2 + 7);
        *v18 = *v24;
        v18[1] = v25;
        v20 = *((_OWORD *)v2 + 8);
        v21 = *((_OWORD *)v2 + 9);
        v22 = *((_OWORD *)v2 + 10);
        v23 = *((_OWORD *)v2 + 11);
        goto LABEL_8;
      }
      v32 = *((_QWORD *)v2 + 36);
LABEL_15:
      v48 = v6;
      v33 = v3;
      v34 = v4;
      v35 = v5;
      v36 = v7;
      v37 = v8;
      v38 = v9;
      v39 = v10;
      specialized _NativeDictionary._insert(at:key:value:)(v16, v32, v24, v17);
      v10 = v39;
      v9 = v38;
      v8 = v37;
      v7 = v36;
      v5 = v35;
      v4 = v34;
      v3 = v33;
      v6 = v48;
      goto LABEL_16;
    }
    if ((v2[312] & 1) == 0)
      goto LABEL_16;
LABEL_12:
    v47 = v6;
    v26 = v3;
    v27 = v4;
    v28 = v5;
    v29 = v7;
    v30 = v8;
    v31 = v9;
    specialized _NativeDictionary._delete(at:)(*((_QWORD *)v2 + 38), **((_QWORD **)v2 + 37));
    v10 = 0;
    v9 = v31;
    v8 = v30;
    v7 = v29;
    v5 = v28;
    v4 = v27;
    v3 = v26;
    v6 = v47;
    goto LABEL_16;
  }
  if (!v10)
  {
    if ((v2[312] & 1) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  *(_QWORD *)v2 = v3;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v5;
  *((_QWORD *)v2 + 3) = v7;
  v2[32] = v6 & 1;
  v2[33] = BYTE1(v6) & 1;
  *((_DWORD *)v2 + 9) = HIDWORD(v6);
  v2[40] = v8 & 1;
  *((_DWORD *)v2 + 11) = HIDWORD(v8);
  v2[48] = v9 & 1;
  *((_QWORD *)v2 + 7) = v10;
  v2[64] = v11 & 1;
  v2[65] = BYTE1(v11) & 1;
  v2[66] = BYTE2(v11) & 1;
  *((_DWORD *)v2 + 17) = HIDWORD(v11);
  *((_DWORD *)v2 + 18) = v13;
  *((_QWORD *)v2 + 10) = v12;
  *((_QWORD *)v2 + 11) = v14;
  v16 = *((_QWORD *)v2 + 38);
  v17 = (_QWORD *)**((_QWORD **)v2 + 37);
  if ((v15 & 1) == 0)
  {
    v32 = *((_QWORD *)v2 + 36);
    v24 = v2;
    goto LABEL_15;
  }
  v18 = (_OWORD *)(v17[7] + 96 * v16);
  v19 = *((_OWORD *)v2 + 1);
  *v18 = *(_OWORD *)v2;
  v18[1] = v19;
  v20 = *((_OWORD *)v2 + 2);
  v21 = *((_OWORD *)v2 + 3);
  v22 = *((_OWORD *)v2 + 4);
  v23 = *((_OWORD *)v2 + 5);
LABEL_8:
  v18[4] = v22;
  v18[5] = v23;
  v18[2] = v20;
  v18[3] = v21;
LABEL_16:
  v40 = *((_QWORD *)v2 + 24);
  v49 = *((_QWORD *)v2 + 25);
  v41 = *((_QWORD *)v2 + 26);
  v42 = *((_QWORD *)v2 + 27);
  v43 = *((_QWORD *)v2 + 28);
  v44 = *((_QWORD *)v2 + 29);
  v45 = *((_QWORD *)v2 + 30);
  v46 = *((_QWORD *)v2 + 31);
  outlined copy of TrackingUpdateData?(v3, v4, v5, v7, v6, v8, v9, v10);
  outlined consume of TrackingUpdateData?(v40, v49, v41, v42, v43, v44, v45, v46);
  free(v2);
}

{
  char *v2;
  char v3;
  __int128 *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = *a1;
  v3 = (*a1)[58];
  if ((a2 & 1) != 0)
  {
    if (((*a1)[57] & 1) == 0)
    {
      v4 = (__int128 *)(v2 + 64);
      v5 = v2[56];
      v6 = *((_QWORD *)v2 + 6);
      v7 = *((_QWORD *)v2 + 5);
      v9 = *((_QWORD *)v2 + 3);
      v8 = *((_QWORD *)v2 + 4);
      v11 = *((_QWORD *)v2 + 1);
      v10 = *((_QWORD *)v2 + 2);
      v12 = HIDWORD(*(_QWORD *)v2);
      *((_DWORD *)v2 + 16) = *(_QWORD *)v2;
      *((_DWORD *)v2 + 17) = v12;
      *((_DWORD *)v2 + 18) = v11;
      v2[76] = BYTE4(v11) & 1;
      *((_DWORD *)v2 + 20) = v10;
      v2[84] = BYTE4(v10) & 1;
      *((_DWORD *)v2 + 22) = v9;
      v2[92] = BYTE4(v9) & 1;
      *((_DWORD *)v2 + 24) = v8;
      v2[100] = BYTE4(v8) & 1;
      *((_QWORD *)v2 + 13) = v7;
      *((_QWORD *)v2 + 14) = v6;
      v2[120] = v5 & 1;
      goto LABEL_8;
    }
  }
  else if (((*a1)[57] & 1) == 0)
  {
    v4 = (__int128 *)(v2 + 128);
    v13 = v2[56];
    v14 = *((_QWORD *)v2 + 6);
    v15 = *((_QWORD *)v2 + 5);
    v17 = *((_QWORD *)v2 + 3);
    v16 = *((_QWORD *)v2 + 4);
    v19 = *((_QWORD *)v2 + 1);
    v18 = *((_QWORD *)v2 + 2);
    v20 = HIDWORD(*(_QWORD *)v2);
    *((_DWORD *)v2 + 32) = *(_QWORD *)v2;
    *((_DWORD *)v2 + 33) = v20;
    *((_DWORD *)v2 + 34) = v19;
    v2[140] = BYTE4(v19) & 1;
    *((_DWORD *)v2 + 36) = v18;
    v2[148] = BYTE4(v18) & 1;
    *((_DWORD *)v2 + 38) = v17;
    v2[156] = BYTE4(v17) & 1;
    *((_DWORD *)v2 + 40) = v16;
    v2[164] = BYTE4(v16) & 1;
    *((_QWORD *)v2 + 21) = v15;
    *((_QWORD *)v2 + 22) = v14;
    v2[184] = v13 & 1;
LABEL_8:
    v21 = *((_QWORD *)v2 + 26);
    v22 = (_QWORD *)**((_QWORD **)v2 + 25);
    if ((v3 & 1) != 0)
    {
      v23 = (_OWORD *)(v22[7] + (v21 << 6));
      v24 = *v4;
      v25 = v4[1];
      v26 = v4[2];
      *(_OWORD *)((char *)v23 + 41) = *(__int128 *)((char *)v4 + 41);
      v23[1] = v25;
      v23[2] = v26;
      *v23 = v24;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v21, *((_QWORD *)v2 + 24), v4, v22);
    }
    goto LABEL_11;
  }
  if (((*a1)[58] & 1) != 0)
    specialized _NativeDictionary._delete(at:)(*((_QWORD *)v2 + 26), **((_QWORD **)v2 + 25));
LABEL_11:
  free(v2);
}

void (*specialized _NativeDictionary.subscript.modify(uint64_t a1, unsigned int a2, char a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*result)(uint64_t);

  v4 = v3;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 24) = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v9 = malloc(*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  *(_QWORD *)(a1 + 8) = v9;
  v10 = *v3;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *(_BYTE *)(a1 + 28) = v11 & 1;
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a3 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(a1 + 16) = v12;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v18 = *(_QWORD *)(*v4 + 56);
        v19 = type metadata accessor for ImageCalibrationDataPB(0);
        v20 = *(_QWORD *)(v19 - 8);
        outlined init with take of Matrix2dPB(v18 + *(_QWORD *)(v20 + 72) * v12, (uint64_t)v9, type metadata accessor for ImageCalibrationDataPB);
        v21 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v9, v21, 1, v19);
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v19 = type metadata accessor for ImageCalibrationDataPB(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = 1;
      goto LABEL_12;
    }
    if (v17 >= v15 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a3 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      *(_QWORD *)(a1 + 16) = v22;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t)v1, *(_BYTE *)(a1 + 28), *(uint64_t **)a1, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24));
  outlined destroy of Coordinate3DPB?((uint64_t)v1, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  free(v1);
}

uint64_t specialized _NativeDictionary.subscript.modify(_QWORD *a1, Swift::UInt a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t result;

  v4 = v3;
  v8 = (char *)malloc(0xD8uLL);
  *a1 = v8;
  *((_QWORD *)v8 + 24) = a2;
  *((_QWORD *)v8 + 25) = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[58] = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = v10 ^ 1;
  v14 = v12 + ((v10 ^ 1) & 1);
  if (__OFADD__(v12, (v10 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v8 + 26) = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*v4 + 56) + (v11 << 6);
        v18 = *(_QWORD *)v17;
        v19 = *(unsigned int *)(v17 + 8);
        v20 = *(unsigned __int8 *)(v17 + 12);
        v21 = *(unsigned int *)(v17 + 16);
        v22 = *(unsigned __int8 *)(v17 + 20);
        v23 = *(unsigned int *)(v17 + 24);
        v24 = *(unsigned __int8 *)(v17 + 28);
        v25 = *(unsigned int *)(v17 + 32);
        v26 = *(unsigned __int8 *)(v17 + 36);
        v27 = *(_OWORD *)(v17 + 40);
        v28 = *(_BYTE *)(v17 + 56);
        if (v20)
          v29 = 0x100000000;
        else
          v29 = 0;
        v30 = v29 | v19;
        if (v22)
          v31 = 0x100000000;
        else
          v31 = 0;
        v32 = v31 | v21;
        if (v24)
          v33 = 0x100000000;
        else
          v33 = 0;
        v34 = v33 | v23;
        if (v26)
          v35 = 0x100000000;
        else
          v35 = 0;
        v36 = v35 | v25;
        goto LABEL_24;
      }
LABEL_23:
      v18 = 0;
      v30 = 0;
      v32 = 0;
      v34 = 0;
      v36 = 0;
      v28 = 0;
      v27 = 0uLL;
LABEL_24:
      *(_QWORD *)v8 = v18;
      *((_QWORD *)v8 + 1) = v30;
      *((_QWORD *)v8 + 2) = v32;
      *((_QWORD *)v8 + 3) = v34;
      *((_QWORD *)v8 + 4) = v36;
      *(_OWORD *)(v8 + 40) = v27;
      result = (uint64_t)_NativeDictionary.subscript.modifyspecialized ;
      v8[56] = v28;
      v8[57] = v13 & 1;
      return result;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v38 & 1))
    {
      v11 = v37;
      *((_QWORD *)v8 + 26) = v37;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_23;
    }
  }
  type metadata accessor for ARVinoJointIndexes(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

unint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t result;
  _QWORD *v23;
  _BYTE v24[12];
  int v25;

  v25 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for ImageCalibrationDataPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = &v24[-v20];
  outlined init with copy of (Int32, Matrix2dPB)(a1, (uint64_t)v12, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    result = outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    if ((a2 & 1) != 0)
      return specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v12, (uint64_t)v21, type metadata accessor for ImageCalibrationDataPB);
    v23 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      return outlined init with take of Matrix2dPB((uint64_t)v21, v23[7] + *(_QWORD *)(v14 + 72) * a4, type metadata accessor for ImageCalibrationDataPB);
    }
    else
    {
      outlined init with take of Matrix2dPB((uint64_t)v21, (uint64_t)v17, type metadata accessor for ImageCalibrationDataPB);
      return specialized _NativeDictionary._insert(at:key:value:)(a4, v25, (uint64_t)v17, v23);
    }
  }
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v31;
  uint64_t v32;

  if (!a3)
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CameraSource>);
  result = static _SetStorage.allocate(capacity:)();
  v6 = result;
  v31 = a1;
  v32 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v32)
      {
LABEL_37:
        swift_release();
        return v6;
      }
      v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v32)
          goto LABEL_37;
        v16 = v31[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v32)
            goto LABEL_37;
          v16 = v31[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v32)
              goto LABEL_37;
            v16 = v31[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v32)
                  goto LABEL_37;
                v16 = v31[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(a4 + 48) + 16 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = *(_QWORD *)(v6 + 48) + 16 * v24;
    *(_QWORD *)v29 = v19;
    *(_BYTE *)(v29 + 8) = v20;
    ++*(_QWORD *)(v6 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = specialized closure #1 in _NativeSet.intersection(_:)((_QWORD *)((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = specialized closure #1 in _NativeSet.intersection(_:)((unint64_t *)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x242638D4C](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  Swift::Int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v46;

  v5 = a3;
  v6 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v7 = a4 + 56;
    v8 = 1 << *(_BYTE *)(a4 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(a4 + 56);
    v43 = (unint64_t)(v8 + 63) >> 6;
    v11 = a3 + 56;
    v46 = 0;
    while (1)
    {
LABEL_6:
      if (v10)
      {
        v12 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v13 = v12 | (v6 << 6);
      }
      else
      {
        v14 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
          goto LABEL_60;
        }
        if (v14 >= v43)
          goto LABEL_58;
        v15 = *(_QWORD *)(v7 + 8 * v14);
        ++v6;
        if (!v15)
        {
          v6 = v14 + 1;
          if (v14 + 1 >= v43)
            goto LABEL_58;
          v15 = *(_QWORD *)(v7 + 8 * v6);
          if (!v15)
          {
            v6 = v14 + 2;
            if (v14 + 2 >= v43)
              goto LABEL_58;
            v15 = *(_QWORD *)(v7 + 8 * v6);
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v43)
                goto LABEL_58;
              v15 = *(_QWORD *)(v7 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v6 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    break;
                  if (v6 >= v43)
                    goto LABEL_58;
                  v15 = *(_QWORD *)(v7 + 8 * v6);
                  ++v16;
                  if (v15)
                    goto LABEL_21;
                }
LABEL_63:
                __break(1u);
LABEL_64:
                __break(1u);
                JUMPOUT(0x23D9396A8);
              }
              v6 = v16;
            }
          }
        }
LABEL_21:
        v10 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v6 << 6);
      }
      v17 = *(_QWORD *)(a4 + 48) + 16 * v13;
      v18 = *(_QWORD *)v17;
      v19 = *(unsigned __int8 *)(v17 + 8);
      Hasher.init(_seed:)();
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Hashable.hash(into:)();
      v20 = Hasher._finalize()();
      v5 = a3;
      v21 = -1 << *(_BYTE *)(a3 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)(v11 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = ~v21;
        while (1)
        {
          if (v19)
            __asm { BR              X12 }
          if (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v22) == v18)
            break;
          v22 = (v22 + 1) & v23;
          if (((*(_QWORD *)(v11 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            goto LABEL_6;
        }
        *(unint64_t *)((char *)a1 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
        if (__OFADD__(v46, 1))
          goto LABEL_61;
        ++v46;
      }
    }
  }
  v42 = a3 + 56;
  v24 = 1 << *(_BYTE *)(a3 + 32);
  if (v24 < 64)
    v25 = ~(-1 << v24);
  else
    v25 = -1;
  v26 = v25 & *(_QWORD *)(a3 + 56);
  v44 = (unint64_t)(v24 + 63) >> 6;
  v27 = a4 + 56;
  v46 = 0;
LABEL_34:
  while (v26)
  {
    v28 = __clz(__rbit64(v26));
    v26 &= v26 - 1;
    v29 = v28 | (v6 << 6);
LABEL_50:
    v33 = *(_QWORD *)(v5 + 48) + 16 * v29;
    v34 = *(_QWORD *)v33;
    v35 = *(unsigned __int8 *)(v33 + 8);
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    v36 = Hasher._finalize()();
    v5 = a3;
    v37 = -1 << *(_BYTE *)(a4 + 32);
    v38 = v36 & ~v37;
    if (((*(_QWORD *)(v27 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) != 0)
    {
      v39 = ~v37;
      while (1)
      {
        if (v35)
          __asm { BR              X12 }
        if (*(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v38) == v34)
          break;
        v38 = (v38 + 1) & v39;
        if (((*(_QWORD *)(v27 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
          goto LABEL_34;
      }
      *(unint64_t *)((char *)a1 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      if (__OFADD__(v46, 1))
        goto LABEL_62;
      ++v46;
    }
  }
  v30 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v30 >= v44)
    goto LABEL_58;
  v31 = *(_QWORD *)(v42 + 8 * v30);
  ++v6;
  if (v31)
    goto LABEL_49;
  v6 = v30 + 1;
  if (v30 + 1 >= v44)
    goto LABEL_58;
  v31 = *(_QWORD *)(v42 + 8 * v6);
  if (v31)
    goto LABEL_49;
  v6 = v30 + 2;
  if (v30 + 2 >= v44)
    goto LABEL_58;
  v31 = *(_QWORD *)(v42 + 8 * v6);
  if (v31)
  {
LABEL_49:
    v26 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v6 << 6);
    goto LABEL_50;
  }
  v32 = v30 + 3;
  if (v32 >= v44)
    goto LABEL_58;
  v31 = *(_QWORD *)(v42 + 8 * v32);
  if (v31)
  {
    v6 = v32;
    goto LABEL_49;
  }
  while (1)
  {
    v6 = v32 + 1;
    if (__OFADD__(v32, 1))
      goto LABEL_64;
    if (v6 >= v44)
      break;
    v31 = *(_QWORD *)(v42 + 8 * v6);
    ++v32;
    if (v31)
      goto LABEL_49;
  }
LABEL_58:
  swift_retain();
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, v46, v5);
}

uint64_t specialized _NativeSet.update(with:isUnique:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = *v2;
  v6 = static Hasher._hash(seed:_:)();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  v9 = v5 + 56;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    goto LABEL_9;
  v10 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v10 + 8 * v8) == a1)
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_10;
  }
  v13 = ~v7;
  v8 = (v8 + 1) & ~v7;
  if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v11 = 1;
    while (1)
    {
      v14 = *(_QWORD *)(v10 + 8 * v8);
      v12 = v14 == a1;
      if (v14 == a1)
        break;
      v8 = (v8 + 1) & v13;
      if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_10;
    }
    v11 = 0;
  }
  else
  {
LABEL_9:
    v12 = 0;
    v11 = 1;
  }
LABEL_10:
  v15 = *(_QWORD *)(v5 + 16);
  v16 = v15 + v11;
  if (__OFADD__(v15, v11))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v17 = *(_QWORD *)(v5 + 24);
  if (v17 >= v16 && (a2 & 1) != 0)
  {
    if (!v12)
      goto LABEL_29;
    goto LABEL_27;
  }
  if ((a2 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v16);
  }
  else
  {
    if (v17 >= v16)
    {
      specialized _NativeSet.copy()();
      if (!v12)
      {
LABEL_29:
        v25 = *v2;
        *(_QWORD *)(*v2 + 8 * (v8 >> 6) + 56) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v8) = a1;
        v26 = *(_QWORD *)(v25 + 16);
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (!v27)
        {
          result = 0;
          *(_QWORD *)(v25 + 16) = v28;
          return result;
        }
        goto LABEL_33;
      }
LABEL_27:
      v23 = *(_QWORD *)(*v2 + 48);
      result = *(_QWORD *)(v23 + 8 * v8);
      *(_QWORD *)(v23 + 8 * v8) = a1;
      return result;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v16);
  }
  v18 = *v2;
  v19 = static Hasher._hash(seed:_:)();
  v20 = -1 << *(_BYTE *)(v18 + 32);
  v8 = v19 & ~v20;
  if (((*(_QWORD *)(v18 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    goto LABEL_28;
  v21 = *(_QWORD *)(v18 + 48);
  if (*(_QWORD *)(v21 + 8 * v8) != a1)
  {
    v22 = ~v20;
    while (1)
    {
      v8 = (v8 + 1) & v22;
      if (((*(_QWORD *)(v18 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      if (*(_QWORD *)(v21 + 8 * v8) == a1)
        goto LABEL_26;
    }
LABEL_28:
    if (!v12)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_26:
  if (v12)
    goto LABEL_27;
LABEL_34:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands12Coordinate3DVG_s5SIMD3VySfGs5NeverOTg50162_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6UInt64VAA0b6UpdateL0VGSayx61B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZs5f9VySfGAA12E8DVXEfU1_AF9ImageDataVTf1cn_nTf4ng_nTm(float32x4_t *a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int32 v7;
  _BYTE *v8;
  float32x4_t *v9;
  float32x4_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  float32x4_t v38;
  float32x4_t v39;
  __int32 v40;
  __int32 v41;
  uint64_t v42;
  simd_float4x4 v43;

  v2 = a1[1].i64[0];
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v42 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v42;
    v6 = *(_QWORD *)(a2 + 64);
    swift_beginAccess();
    v8 = (_BYTE *)(v6 + 320);
    v9 = a1 + 3;
    do
    {
      v10 = *v9;
      if ((v8[80] & 1) != 0)
      {
        v38 = *v9;
        v40 = v7;
        v11 = v8;
        v43 = __invert_f4(*(simd_float4x4 *)(v6 + 192));
        v8 = v11;
        *(simd_float4x4 *)(v6 + 256) = v43;
        v43.columns[0].i32[3] = v34;
        v43.columns[1].i32[3] = v35;
        v43.columns[2].i32[3] = v36;
        *v11 = 0;
        v43.columns[3].i32[3] = v37;
        *(simd_float4x4 *)(v6 + 336) = v43;
        v11[80] = 0;
        v12 = v43.columns[0].i64[1];
        v13 = v43.columns[0].i64[0];
        v14 = v43.columns[1].i64[1];
        v15 = v43.columns[1].i64[0];
        v16 = v43.columns[2].i64[1];
        v17 = v43.columns[2].i64[0];
        v7 = v40;
        v18 = v43.columns[3].i64[1];
        v19 = v43.columns[3].i64[0];
        v10 = v38;
      }
      else
      {
        v19 = *(_QWORD *)(v6 + 384);
        v18 = *(_QWORD *)(v6 + 392);
        v17 = *(_QWORD *)(v6 + 368);
        v16 = *(_QWORD *)(v6 + 376);
        v15 = *(_QWORD *)(v6 + 352);
        v14 = *(_QWORD *)(v6 + 360);
        v13 = *(_QWORD *)(v6 + 336);
        v12 = *(_QWORD *)(v6 + 344);
      }
      v21 = *(_QWORD *)(v42 + 16);
      v20 = *(_QWORD *)(v42 + 24);
      if (v21 >= v20 >> 1)
      {
        v33 = v8;
        v41 = v7;
        v39 = v10;
        v31 = v19;
        v32 = v18;
        v29 = v12;
        v30 = v16;
        v28 = v17;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v17 = v28;
        v12 = v29;
        v16 = v30;
        v19 = v31;
        v18 = v32;
        v8 = v33;
        v10 = v39;
        v7 = v41;
      }
      v22.i64[0] = v13;
      v22.i64[1] = v12;
      v23.i64[0] = v15;
      v23.i64[1] = v14;
      v24 = vmlaq_lane_f32(vmulq_n_f32(v22, v10.f32[0]), v23, *(float32x2_t *)v10.f32, 1);
      v23.i64[0] = v17;
      v23.i64[1] = v16;
      v25 = vmlaq_laneq_f32(v24, v23, v10, 2);
      v23.i64[0] = v19;
      v23.i64[1] = v18;
      v26 = vaddq_f32(v25, v23);
      v26.i32[3] = v7;
      *(_QWORD *)(v42 + 16) = v21 + 1;
      *(float32x4_t *)(v42 + 16 * v21 + 32) = v26;
      v9 += 2;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_s5SIMD2VySfGs5NeverOTg50250_s5Hands27TrackingProcessingFunctionsC017FilterHandAndCalcB11HealthScore5hands6images6config13trackingInfos0K12KitTimestampSDys6UInt64VAA0B10UpdateDataVG_SayAA0F10DescriptorVGSayAA0B4InfoVGAhA0B5StateOtAQ_SayAA05ImageT0VGAA0bS6ConfigVAtKtFZyAPXEfU_s5e7VySfGs5D11VySfGXEfU2_5Hands9ImageDataVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  __int128 *v6;
  uint64_t v7;
  double v8;
  void *v9;
  int8x8_t v10;
  __int128 v11;
  uint64_t v12;
  int8x8_t v13;
  int8x8_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v20 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v20;
    v6 = (__int128 *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 64);
    v8 = *(double *)(a2 + 184);
    v9 = (void *)objc_opt_self();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    v10 = (int8x8_t)vdup_n_s32(0x7FC00000u);
    do
    {
      v11 = *v6;
      v19 = 0;
      if (*(_BYTE *)(v7 + 24))
        v12 = *(_QWORD *)(v7 + 16) != 0;
      else
        v12 = -1;
      objc_msgSend(v9, sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v12, &v19, *(double *)&v11, *(double *)(v7 + 64), *(double *)(v7 + 80), *(double *)(v7 + 96), *(double *)(v7 + 112), v8);
      v14 = v13;
      if (v19)
        v15 = -1;
      else
        v15 = 0;
      v20 = v3;
      v17 = *(_QWORD *)(v3 + 16);
      v16 = *(_QWORD *)(v3 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v3 = v20;
      }
      *(_QWORD *)(v3 + 16) = v17 + 1;
      *(int8x8_t *)(v3 + 8 * v17 + 32) = vbsl_s8((int8x8_t)vdup_n_s32(v15), v14, v10);
      ++v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_s5SIMD2VySfGs5NeverOTg50162_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6UInt64VAA0b6UpdateL0VGSayw61B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZs5e7VySfGs5D11VySfGXEfU2_5Hands9ImageDataVTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  __int128 *v6;
  uint64_t v7;
  double v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v18;
    v6 = (__int128 *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 64);
    v8 = *(double *)(a2 + 184);
    v9 = (void *)objc_opt_self();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    do
    {
      v10 = *v6;
      v17 = 0;
      if (*(_BYTE *)(v7 + 24))
        v11 = *(_QWORD *)(v7 + 16) != 0;
      else
        v11 = -1;
      objc_msgSend(v9, sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v11, &v17, *(double *)&v10, *(double *)(v7 + 64), *(double *)(v7 + 80), *(double *)(v7 + 96), *(double *)(v7 + 112), v8);
      v13 = v12;
      v18 = v3;
      v15 = *(_QWORD *)(v3 + 16);
      v14 = *(_QWORD *)(v3 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v3 = v18;
      }
      *(_QWORD *)(v3 + 16) = v15 + 1;
      *(_QWORD *)(v3 + 8 * v15 + 32) = v13;
      ++v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized static TrackingProcessingFunctions.FilterHandAndCalcTrackingHealthScore(hands:images:config:trackingInfos:handsKitTimestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47;
  uint64_t v48;
  float32x2_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int128 v66;
  uint64_t v67;
  double v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char isUniquelyReferenced_nonNull_native;
  char v77;
  unint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  int v116;
  _BYTE *v117;
  _BYTE *v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  float v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  float v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  float v145;
  uint64_t v146;
  char v147;
  float v148;
  float v149;
  uint64_t v151;
  float v152;
  uint64_t v153;
  float v154;
  uint64_t v155;
  unint64_t v156;
  float v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _BYTE *v161;
  unint64_t v162;
  _BYTE *v163;
  unint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  char v173;
  uint64_t v174;
  float v175;
  char v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  float v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  float v190;
  float v192;
  uint64_t v193;
  uint64_t v194;
  int *v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  float *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  float v215;
  float v216;
  float v217;
  uint64_t v218;
  uint64_t result;
  _QWORD *v220;
  _BYTE v221[12];
  int v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  __int128 *v226;
  uint64_t v227;
  _BYTE *v228;
  unint64_t v229;
  uint64_t v230;
  unsigned __int8 *v231;
  uint64_t v232;
  _BYTE *v233;
  float *v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  simd_float4x4 v239;
  uint64_t v240;
  unint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  float32x4_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD v250[13];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  simd_float4x4 v264;

  v225 = a6;
  v263 = *MEMORY[0x24BDAC8D0];
  v11 = type metadata accessor for HandDescriptor();
  v12 = *(_QWORD *)(v11 - 8);
  v235 = v11;
  v236 = v12;
  MEMORY[0x24BDAC7A8](v11, v13);
  v233 = &v221[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15, v16);
  v228 = &v221[-v17];
  MEMORY[0x24BDAC7A8](v18, v19);
  v234 = (float *)&v221[-v20];
  MEMORY[0x24BDAC7A8](v21, v22);
  v238 = &v221[-v23];
  MEMORY[0x24BDAC7A8](v24, v25);
  v27 = &v221[-v26];
  v224 = a5;
  Hands_trace_CBridge();
  v28 = specialized static Array._allocateUninitialized(_:)(0);
  v29 = specialized Dictionary.init(dictionaryLiteral:)(v28);
  swift_bridgeObjectRelease();
  v250[0] = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : TrackingUpdateData]);
  Dictionary.reserveCapacity(_:)(4);
  v249 = a4;
  v223 = a4;
  swift_bridgeObjectRetain();
  v30 = (_QWORD *)specialized static Array._allocateUninitialized(_:)(0);
  v31 = specialized Dictionary.init(dictionaryLiteral:)(v30);
  swift_bridgeObjectRelease();
  v248 = v31;
  v32 = a3[176];
  v231 = a3;
  v222 = v32;
  if ((v32 & 1) != 0)
  {
    v230 = specialized Array.count.getter(a1);
    if (v230)
    {
      v240 = specialized Array.count.getter(a2);
      v229 = a1 + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80));
      v226 = (__int128 *)(a2 + 32);
      swift_bridgeObjectRetain();
      v33 = 0;
      v227 = a1;
      v237 = v27;
      do
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v33, 1, a1);
        v34 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_171;
        outlined init with copy of TrackingUpdateDataPB(v229 + *(_QWORD *)(v236 + 72) * v33, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v38 = specialized static Array._allocateUninitialized(_:)(0);
        v241 = specialized Dictionary.init(dictionaryLiteral:)(v38);
        if (v240)
        {
          v232 = v33 + 1;
          swift_bridgeObjectRetain();
          v39 = v226[9];
          v259 = v226[8];
          v260 = v39;
          v40 = v226[11];
          v261 = v226[10];
          v262 = v40;
          v41 = v226[5];
          v255 = v226[4];
          v256 = v41;
          v42 = v226[7];
          v257 = v226[6];
          v258 = v42;
          v43 = v226[1];
          v251 = *v226;
          v252 = v43;
          v44 = v226[3];
          v45 = 1;
          v46 = 224;
          v253 = v226[2];
          v254 = v44;
          v47 = v246;
          while (1)
          {
            if ((v27[192] & 1) != 0)
              goto LABEL_175;
            v49 = *(float32x2_t *)(v27 + 176);
            v48 = *((_QWORD *)v27 + 23);
            v50 = v255;
            v51 = (_BYTE *)(v255 + 320);
            if ((*(_BYTE *)(v255 + 400) & 1) != 0)
            {
              v246 = v47;
              swift_beginAccess();
              v264 = __invert_f4(*(simd_float4x4 *)(v50 + 192));
              *(simd_float4x4 *)(v50 + 256) = v264;
              v264.columns[0].i32[3] = v239.columns[0].i32[3];
              v264.columns[1].i32[3] = v239.columns[1].i32[3];
              v264.columns[2].i32[3] = v239.columns[2].i32[3];
              *v51 = 0;
              v264.columns[3].i32[3] = v239.columns[3].i32[3];
              v47.i32[3] = v246.i32[3];
              *(simd_float4x4 *)(v50 + 336) = v264;
              *(_BYTE *)(v50 + 400) = 0;
              v52 = v264.columns[0].i64[1];
              v239 = v264;
              v53 = v264.columns[0].i64[0];
              v54 = v264.columns[1].i64[1];
              v55 = v264.columns[1].i64[0];
              v56 = v264.columns[2].i64[1];
              v57 = v264.columns[2].i64[0];
              v58 = v264.columns[3].i64[1];
              v59 = v264.columns[3].i64[0];
            }
            else
            {
              v59 = *(_QWORD *)(v255 + 384);
              v58 = *(_QWORD *)(v255 + 392);
              v57 = *(_QWORD *)(v255 + 368);
              v56 = *(_QWORD *)(v255 + 376);
              v55 = *(_QWORD *)(v255 + 352);
              v54 = *(_QWORD *)(v255 + 360);
              v53 = *(_QWORD *)(v255 + 336);
              v52 = *(_QWORD *)(v255 + 344);
            }
            v60.i64[0] = v53;
            v60.i64[1] = v52;
            *(float32x2_t *)v61.f32 = v49;
            v61.i64[1] = v48;
            v62.i64[0] = v55;
            v62.i64[1] = v54;
            v63 = vmlaq_lane_f32(vmulq_n_f32(v60, v49.f32[0]), v62, v49, 1);
            v62.i64[0] = v57;
            v62.i64[1] = v56;
            v64.i64[0] = v59;
            v64.i64[1] = v58;
            v65 = vaddq_f32(vmlaq_laneq_f32(v63, v62, v61, 2), v64);
            v65.i32[3] = v47.i32[3];
            v246 = v65;
            LOBYTE(v247) = 0;
            swift_beginAccess();
            v66 = *(_OWORD *)(v50 + 96);
            v244 = *(_OWORD *)(v50 + 80);
            v245 = v66;
            v243 = *(_OWORD *)(v50 + 64);
            swift_beginAccess();
            v242 = *(_OWORD *)(v50 + 112);
            swift_beginAccess();
            v67 = *(_BYTE *)(v50 + 24) ? *(_QWORD *)(v50 + 16) != 0 : -1;
            v68 = *((double *)&v262 + 1);
            v69 = (void *)objc_opt_self();
            outlined retain of ImageData((uint64_t)&v251);
            objc_msgSend(v69, sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v67, &v247, *(double *)v246.i64, *(double *)&v243, *(double *)&v244, *(double *)&v245, *(double *)&v242, v68);
            if (v247 == 1)
            {
              v71 = v70;
              v72 = a2;
              v73 = *((_QWORD *)&v255 + 1);
              v74 = v256;
              v75 = v241;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v247 = v75;
              v78 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
              v79 = *(_QWORD *)(v75 + 16);
              v80 = (v77 & 1) == 0;
              v81 = v79 + v80;
              if (__OFADD__(v79, v80))
                goto LABEL_168;
              v82 = v77;
              if (*(_QWORD *)(v75 + 24) >= v81)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  specialized _NativeDictionary.copy()();
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, isUniquelyReferenced_nonNull_native);
                v83 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
                if ((v82 & 1) != (v84 & 1))
                {
                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  JUMPOUT(0x23D93CBFCLL);
                }
                v78 = v83;
              }
              v85 = (_QWORD *)v247;
              v241 = v247;
              if ((v82 & 1) != 0)
              {
                *(_QWORD *)(*(_QWORD *)(v247 + 56) + 8 * v78) = v71;
              }
              else
              {
                *(_QWORD *)(v247 + 8 * (v78 >> 6) + 64) |= 1 << v78;
                v86 = v85[6] + 16 * v78;
                *(_QWORD *)v86 = v73;
                *(_BYTE *)(v86 + 8) = v74;
                *(_QWORD *)(v85[7] + 8 * v78) = v71;
                v87 = v85[2];
                v88 = __OFADD__(v87, 1);
                v89 = v87 + 1;
                if (v88)
                  goto LABEL_169;
                v85[2] = v89;
              }
              swift_bridgeObjectRelease();
              outlined release of ImageData((uint64_t)&v251);
              a2 = v72;
              v27 = v237;
            }
            else
            {
              outlined release of ImageData((uint64_t)&v251);
            }
            if (v240 == v45)
              break;
            v90 = *(_OWORD *)(a2 + v46 + 144);
            v259 = *(_OWORD *)(a2 + v46 + 128);
            v260 = v90;
            v91 = *(_OWORD *)(a2 + v46 + 176);
            v261 = *(_OWORD *)(a2 + v46 + 160);
            v262 = v91;
            v92 = *(_OWORD *)(a2 + v46 + 80);
            v255 = *(_OWORD *)(a2 + v46 + 64);
            v256 = v92;
            v93 = *(_OWORD *)(a2 + v46 + 112);
            v257 = *(_OWORD *)(a2 + v46 + 96);
            v258 = v93;
            v94 = *(_OWORD *)(a2 + v46 + 16);
            v251 = *(_OWORD *)(a2 + v46);
            v252 = v94;
            v95 = *(_OWORD *)(a2 + v46 + 32);
            v96 = *(_OWORD *)(a2 + v46 + 48);
            v46 += 192;
            v47 = v246;
            v253 = v95;
            v254 = v96;
            v88 = __OFADD__(v45++, 1);
            if (v88)
            {
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
              goto LABEL_173;
            }
          }
          swift_bridgeObjectRelease();
          a1 = v227;
          v34 = v232;
        }
        v35 = *((_QWORD *)v27 + 18);
        v36 = v248;
        v37 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v251 = v36;
        v248 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v241, v35, v37);
        v248 = v251;
        swift_bridgeObjectRelease();
        outlined destroy of HandDescriptor((uint64_t)v27);
        v33 = v34;
        a3 = v231;
      }
      while (v34 != v230);
      swift_bridgeObjectRelease();
    }
  }
  LODWORD(v243) = a3[28];
  if ((v243 & 1) != 0)
  {
    v97 = *(_QWORD *)(a1 + 16);
    if (v97)
    {
      v98 = v236;
      v99 = a1 + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined retain of TrackingUpdateConfig((uint64_t)a3);
      v100 = *(_QWORD *)(v98 + 72);
      do
      {
        closure #1 in static TrackingProcessingFunctions.FilterHandAndCalcTrackingHealthScore(hands:images:config:trackingInfos:handsKitTimestamp:)(v99, a2, (uint64_t)a3, &v248, v250);
        v99 += v100;
        --v97;
      }
      while (v97);
      swift_bridgeObjectRelease();
      outlined release of TrackingUpdateConfig((uint64_t)a3);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    specialized Sequence.forEach(_:)(a1, v250);
  }
  v101 = specialized static Array._allocateUninitialized(_:)(0);
  v247 = v101;
  v102 = specialized Array.count.getter(a1);
  v103 = (uint64_t)v234;
  v246.i64[0] = v102;
  if (!v102)
  {
    v112 = v250[0];
    goto LABEL_167;
  }
  *(_QWORD *)&v245 = a1
                   + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80));
  LODWORD(v244) = a3[92];
  v240 = (uint64_t)(a3 + 144);
  v239.columns[3].i64[0] = (uint64_t)(a3 + 120);
  v239.columns[2].i64[0] = (uint64_t)(a3 + 152);
  v239.columns[1].i64[0] = (uint64_t)(a3 + 128);
  swift_bridgeObjectRetain();
  v104 = 0;
  v227 = a1;
  do
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v104, 1, a1);
    v109 = v104 + 1;
    if (__OFADD__(v104, 1))
      goto LABEL_170;
    v110 = v245 + *(_QWORD *)(v236 + 72) * v104;
    v111 = v238;
    outlined init with copy of TrackingUpdateDataPB(v110, (uint64_t)v238, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v111, v103, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    *(_DWORD *)(v103 + 8) = 1065353216;
    v112 = v250[0];
    v113 = *((_QWORD *)v111 + 18);
    if (!*(_QWORD *)(v250[0] + 16))
      goto LABEL_94;
    v114 = specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v111 + 18));
    if ((v115 & 1) != 0)
    {
      v116 = *(unsigned __int8 *)(*(_QWORD *)(v112 + 56) + 96 * v114 + 65);
      v117 = v228;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v238, (uint64_t)v228, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (v116 != 1)
      {
        outlined destroy of HandDescriptor((uint64_t)v117);
        goto LABEL_51;
      }
      v118 = &v117[*(int *)(v235 + 100)];
      v119 = *(_QWORD *)v118;
      v120 = v118[8];
      outlined destroy of HandDescriptor((uint64_t)v117);
      if (v120 == 1)
      {
        v103 = (uint64_t)v234;
        if (v119 >= 3)
          goto LABEL_51;
      }
      else
      {
        v103 = (uint64_t)v234;
        if (v119 == 3)
          goto LABEL_51;
      }
      v142 = *(_QWORD *)&v238[*(int *)(v235 + 104)];
      if (*(_QWORD *)(v142 + 16))
      {
        swift_bridgeObjectRetain();
        v143 = specialized __RawDictionaryStorage.find<A>(_:)(0, 1);
        if ((v144 & 1) == 0)
          goto LABEL_76;
        v145 = *(float *)(*(_QWORD *)(v142 + 56) + 4 * v143);
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(v142 + 16))
          goto LABEL_51;
        swift_bridgeObjectRetain();
        v146 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
        if ((v147 & 1) == 0)
        {
LABEL_76:
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
        v148 = *(float *)(*(_QWORD *)(v142 + 56) + 4 * v146);
        swift_bridgeObjectRelease();
        v149 = *((float *)v231 + 22) * 0.5;
        if (v149 >= v145)
        {
          if (*((float *)v231 + 21) >= v145)
          {
LABEL_75:
            v151 = v103 + *(int *)(v235 + 100);
            *(_QWORD *)v151 = 1;
LABEL_83:
            *(_BYTE *)(v151 + 8) = 1;
            goto LABEL_51;
          }
        }
        else if (*((float *)v231 + 21) >= v145 && v149 >= v148)
        {
          goto LABEL_75;
        }
        v151 = v103 + *(int *)(v235 + 100);
        *(_QWORD *)v151 = 0;
        goto LABEL_83;
      }
    }
LABEL_51:
    v113 = *((_QWORD *)v238 + 18);
    if (!*(_QWORD *)(v112 + 16))
      goto LABEL_94;
    v121 = specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v238 + 18));
    if ((v122 & 1) == 0)
      goto LABEL_94;
    if ((v243 & 1) == 0)
      goto LABEL_94;
    v123 = *(_QWORD *)&v238[*(int *)(v235 + 104)];
    if (!*(_QWORD *)(v123 + 16))
      goto LABEL_94;
    v124 = *(_QWORD *)(v112 + 56) + 96 * v121;
    v125 = *(_QWORD *)(v124 + 56);
    v126 = *(float *)(v124 + 68);
    v127 = *(float *)(v124 + 72);
    v128 = *(_QWORD *)(v124 + 80);
    v129 = *(_QWORD *)(v124 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v130 = specialized __RawDictionaryStorage.find<A>(_:)(0, 1);
    if ((v131 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_79:
      swift_bridgeObjectRelease();
      a1 = v227;
      goto LABEL_94;
    }
    v241 = v125;
    *(_QWORD *)&v242 = v129;
    v132 = *(float *)(*(_QWORD *)(v123 + 56) + 4 * v130);
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v123 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
    swift_bridgeObjectRetain();
    v133 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
    v134 = v128;
    a1 = v227;
    if ((v135 & 1) == 0)
      goto LABEL_92;
    v136 = *(float *)(*(_QWORD *)(v123 + 56) + 4 * v133);
    swift_bridgeObjectRelease();
    v239.columns[0].i64[0] = *((_QWORD *)v238 + 25);
    if (!v239.columns[0].i64[0])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_93:
      swift_bridgeObjectRelease();
      goto LABEL_94;
    }
    v137 = v249;
    v237 = *(_BYTE **)(v103 + 144);
    v138 = specialized Array.count.getter(v249);
    if (v138)
    {
      v139 = 0;
      v140 = 216;
      while (*(_BYTE **)(v137 + v140 - 168) != v237)
      {
        v141 = v139 + 1;
        if (__OFADD__(v139, 1))
          goto LABEL_172;
        ++v139;
        v140 += 320;
        if (v141 == v138)
          goto LABEL_64;
      }
      v152 = v132 + v136;
      v153 = v223;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v139, 1, v223);
      if (*(float *)(v153 + v140 - 4) >= v152)
      {
        v154 = *((float *)v231 + 25);
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v139, 1, v137);
        v152 = (float)(v152 * v154) + (float)((float)(1.0 - v154) * *(float *)(v137 + v140 - 4));
      }
      swift_bridgeObjectRetain();
      specialized Array._makeMutableAndUnique()();
      v155 = v249;
      v156 = specialized Array._checkSubscript_mutating(_:)(v139, v249);
      *(float *)(v155 + v140 - 4) = v152;
      _s5Hands13PoseImageCropVSgWOi_(v156);
      if (*(float *)(v223 + v140) >= v136)
      {
        v157 = *((float *)v231 + 26);
        v158 = v249;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v139, 1, v249);
        v136 = (float)(v136 * v157) + (float)((float)(1.0 - v157) * *(float *)(v158 + v140));
      }
      specialized Array._makeMutableAndUnique()();
      v159 = v249;
      v160 = specialized Array._checkSubscript_mutating(_:)(v139, v249);
      *(float *)(v159 + v140) = v136;
      _s5Hands13PoseImageCropVSgWOi_(v160);
      v137 = v249;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v139, 1, v249);
      v136 = *(float *)(v137 + v140);
    }
    else
    {
LABEL_64:
      swift_bridgeObjectRetain();
    }
    v103 = (uint64_t)v234;
    v161 = &v238[*(int *)(v235 + 100)];
    v162 = *(_QWORD *)v161;
    a1 = v227;
    if (v161[8] == 1)
    {
      if (v162 >= 3)
        goto LABEL_92;
    }
    else if (v162 == 3)
    {
LABEL_92:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_93;
    }
    v232 = *((_QWORD *)v231 + 17);
    v168 = *((_QWORD *)v231 + 14);
    if ((v222 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v169 = v134;
    }
    else
    {
      v169 = v239.columns[0].i64[0];
    }
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v169);
    v170 = *(_QWORD *)(v169 + 32);
    if (*(_BYTE *)(v169 + 40) == 1)
      __asm { BR              X9 }
    switch(v170)
    {
      case 2:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v169);
        if (*(_QWORD *)(v169 + 48) != 3)
        {
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v169);
          v171 = (uint64_t *)v239.columns[2].i64[0];
          v172 = (uint64_t *)v239.columns[1].i64[0];
          if (*(_QWORD *)(v169 + 48) == 4)
            goto LABEL_120;
        }
        break;
      case 3:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v169);
        if (*(_QWORD *)(v169 + 48) != 2)
        {
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v169);
          v171 = (uint64_t *)v240;
          v172 = (uint64_t *)v239.columns[3].i64[0];
          if (*(_QWORD *)(v169 + 48) == 5)
            goto LABEL_120;
        }
        break;
      case 4:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v169);
        v171 = (uint64_t *)v239.columns[2].i64[0];
        v172 = (uint64_t *)v239.columns[1].i64[0];
        if (*(_QWORD *)(v169 + 48) == 2)
          goto LABEL_120;
        break;
      case 5:
        specialized Array.subscript.getter(1uLL, v169, (uint64_t)&v251);
        v173 = specialized == infix<A>(_:_:)(v251, BYTE8(v251), 3, 1);
        v171 = (uint64_t *)v240;
        v172 = (uint64_t *)v239.columns[3].i64[0];
        if ((v173 & 1) != 0)
        {
LABEL_120:
          v232 = *v171;
          v168 = *v172;
        }
        break;
      default:
        break;
    }
    v230 = v168;
    v239.columns[0].i64[0] = v169;
    v174 = specialized static TrackingUtils.findTrackingInfoIndexOfID(_:ID:)(v137, (uint64_t)v237);
    v175 = v126;
    if ((v176 & 1) == 0)
    {
      v177 = v174;
      specialized Array._makeMutableAndUnique()();
      v178 = v249;
      v179 = specialized Array._checkSubscript_mutating(_:)(v177, v249);
      v180 = 320 * v177;
      *(float *)(v178 + 320 * v177 + 340) = v126;
      _s5Hands13PoseImageCropVSgWOi_(v179);
      v175 = v126;
      if (specialized Array.count.getter(v232) >= 3)
      {
        v175 = v126;
        if ((v231[200] & 1) != 0)
        {
          v181 = v232;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v232);
          v182 = *(float *)(v181 + 36);
          if ((float)(v182 + *((float *)v231 + 51)) < v126)
          {
            specialized Array._makeMutableAndUnique()();
            v183 = v249;
            v184 = specialized Array._checkSubscript_mutating(_:)(v177, v249);
            v185 = v183 + v180;
            *(_QWORD *)(v185 + 328) = 1;
            *(_BYTE *)(v185 + 336) = 1;
            _s5Hands13PoseImageCropVSgWOi_(v184);
            v182 = *(float *)(v232 + 36);
          }
          if (v126 < v182)
          {
            specialized Array._makeMutableAndUnique()();
            v186 = v249;
            v187 = specialized Array._checkSubscript_mutating(_:)(v177, v249);
            v188 = v186 + v180;
            *(_QWORD *)(v188 + 328) = 0;
            *(_BYTE *)(v188 + 336) = 1;
            _s5Hands13PoseImageCropVSgWOi_(v187);
          }
          v189 = v249;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v177, 1, v249);
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v177, 1, v189);
          v175 = v126;
          if (!*(_QWORD *)(v189 + v180 + 328))
          {
            specialized Array.subscript.getter(1uLL, v232);
            v175 = v190 + -0.01;
          }
        }
      }
    }
    if (v126 <= 0.3 || v136 <= 0.2)
      v192 = 1.0;
    else
      v192 = 0.5;
    v193 = *((_QWORD *)v231 + 20);
    v194 = specialized Array.count.getter(v193);
    if (v194)
    {
      if (v194 < 1)
        goto LABEL_183;
      v195 = (int *)(v193 + 32);
      v196 = -1;
      while (1)
      {
        v197 = *v195++;
        if (v127 >= (float)v197)
        {
          v88 = __OFADD__(v196++, 1);
          if (v88)
            break;
        }
        if (!--v194)
          goto LABEL_145;
      }
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }
    v196 = -1;
LABEL_145:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v198 = specialized Array.count.getter(v193);
    if (__OFSUB__(v198, 1))
      goto LABEL_176;
    if (v198 - 1 >= v196)
      v199 = v196;
    else
      v199 = v198 - 1;
    v200 = v232;
    v201 = specialized Array.count.getter(v232);
    v202 = v199 * v201;
    if ((unsigned __int128)(v199 * (__int128)v201) >> 64 != (v199 * v201) >> 63)
      goto LABEL_177;
    v203 = v201;
    v204 = specialized Array.count.getter(v200);
    a1 = v227;
    if (v204)
    {
      v205 = v204;
      if (v204 >= 1)
      {
        v206 = (float *)(v200 + 32);
        v207 = -1;
        while (1)
        {
          if (*v206 <= v175)
          {
            v88 = __OFADD__(v207++, 1);
            if (v88)
              break;
          }
          ++v206;
          if (!--v205)
            goto LABEL_159;
        }
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
      }
      __break(1u);
    }
    v207 = -1;
LABEL_159:
    if (__OFSUB__(v203, 1))
      goto LABEL_178;
    v208 = specialized min<A>(_:_:)(v207, v203 - 1);
    v88 = __OFADD__(v202, v208);
    v209 = v202 + v208;
    if (v88)
      goto LABEL_179;
    v210 = *((_QWORD *)v231 + 21);
    v211 = specialized Array.subscript.getter(v209, v230);
    v212 = specialized Array.count.getter(v210);
    if (v212 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_180;
    if (v212 > 0x7FFFFFFF)
      goto LABEL_181;
    v88 = __OFSUB__((_DWORD)v212, 1);
    v213 = (v212 - 1);
    if (v88)
      goto LABEL_182;
    v214 = specialized min<A>(_:_:)(v213, v211);
    specialized Array.subscript.getter(v214, v210);
    v216 = v215;
    swift_bridgeObjectRelease();
    v217 = specialized min<A>(_:_:)(v216, v192);
    v103 = (uint64_t)v234;
    v234[2] = v217;
LABEL_94:
    v163 = &v238[*(int *)(v235 + 100)];
    v164 = *(_QWORD *)v163;
    if (v163[8] == 1)
    {
      if (v164 < 3)
        goto LABEL_99;
LABEL_98:
      *(_DWORD *)(v103 + 8) = 0;
      goto LABEL_99;
    }
    if (v164 == 3)
      goto LABEL_98;
LABEL_99:
    if ((v244 & 1) != 0)
    {
      if (*(_QWORD *)(v112 + 16))
      {
        v165 = specialized __RawDictionaryStorage.find<A>(_:)(v113);
        if ((v166 & 1) != 0 && *(_BYTE *)(*(_QWORD *)(v112 + 56) + 96 * v165 + 66) == 1)
        {
          v167 = v103 + *(int *)(v235 + 100);
          *(_QWORD *)v167 = 3;
          *(_BYTE *)(v167 + 8) = 1;
          *(_DWORD *)(v103 + 8) = 0;
        }
      }
    }
    v105 = v233;
    outlined init with copy of TrackingUpdateDataPB(v103, (uint64_t)v233, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v106 = *(_QWORD *)(v247 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v106);
    v107 = v106;
    v103 = (uint64_t)v234;
    v108 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v107, (uint64_t)v105);
    _s5Hands13PoseImageCropVSgWOi_(v108);
    outlined destroy of HandDescriptor(v103);
    outlined destroy of HandDescriptor((uint64_t)v238);
    v104 = v109;
  }
  while (v109 != v246.i64[0]);
  swift_bridgeObjectRelease();
  v101 = v247;
LABEL_167:
  Hands_trace_CBridge();
  v218 = v249;
  result = swift_bridgeObjectRelease();
  v220 = v225;
  *v225 = v112;
  v220[1] = v101;
  v220[2] = v218;
  v220[3] = 7;
  *((_BYTE *)v220 + 32) = 1;
  return result;
}

uint64_t outlined init with take of CameraSource(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

double _s5Hands12TrackingInfoVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 304) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t *outlined release of TrackingInfo?(uint64_t *a1)
{
  outlined consume of TrackingInfo?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return a1;
}

uint64_t outlined consume of TrackingInfo?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  result = a11;
  if (a11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t specialized static TrackingProcessingFunctions.voteChirality(buffer:windowSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  float v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v5 = a4;
  if (a4 > 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
      goto LABEL_3;
LABEL_8:
    v28 = MEMORY[0x24BEE0D00];
    v26 = 0xD000000000000041;
    v27 = 0x800000023D9DB1F0;
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000078, 0x800000023D9DB090, 933, (uint64_t)&v26, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    goto LABEL_9;
  }
  v28 = MEMORY[0x24BEE0D00];
  v26 = 0xD000000000000033;
  v27 = 0x800000023D9DB1B0;
  specialized static HLog.E(file:function:line:_:_:)(0xD000000000000078, 0x800000023D9DB090, 928, (uint64_t)&v26, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    goto LABEL_8;
LABEL_3:
  if (v9 <= 2)
  {
LABEL_9:
    v11 = specialized CircularBuffer.toList()(a1, a2, a3);
    if (*(_QWORD *)(v11 + 16))
    {
      v12 = *(float *)(v11 + 32);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_38;
  }
  v10 = __OFSUB__(v9, v5);
  v5 = v9 - v5;
  if (v5 < 0 == v10)
  {
    if (v10)
    {
      __break(1u);
      goto LABEL_43;
    }
    v14 = specialized CircularBuffer.toList()(a1, a2, a3);
    if ((uint64_t)v9 > v5)
    {
      a3 = v14;
      if ((v5 & 0x8000000000000000) == 0)
        goto LABEL_16;
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      swift_bridgeObjectRelease();
      v18 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a3 + 32, v5, (2 * v9) | 1);
      goto LABEL_23;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  a3 = specialized CircularBuffer.toList()(a1, a2, a3);
  v5 = 0;
LABEL_16:
  v15 = *(_QWORD *)(a3 + 16);
  if (v15 < v5 || v15 < v9)
    goto LABEL_40;
  v4 = v9 - v5;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  v17 = *(_QWORD *)(v16 + 16);
  swift_release();
  if (v17 != v4)
    goto LABEL_41;
  v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
LABEL_23:
  swift_bridgeObjectRelease();
  v26 = v18;
  specialized MutableCollection<>.sort(by:)(&v26);
  if (v4 >= 0)
    v19 = v4;
  else
    v19 = v4 + 1;
  v20 = v19 >> 1;
  if ((v4 & 1) != 0)
  {
    if (v4 < -1)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v20 >= *(_QWORD *)(v26 + 16))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v12 = *(float *)(v26 + 4 * v20 + 32);
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    return v12 < 0.5;
  }
  if (v4 < -1)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v21 = *(_QWORD *)(v26 + 16);
  if (v20 >= v21)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v22 = v4 - 1;
  if (v4 < 1)
    v22 = v4;
  if ((unint64_t)v4 <= 0x8000000000000000)
  {
    v23 = v22 >> 1;
    if (v23 < v21)
    {
      v24 = *(float *)(v26 + 32 + 4 * v20);
      v25 = *(float *)(v26 + 32 + 4 * v23);
      swift_release();
      swift_bridgeObjectRelease();
      v12 = (float)(v24 + v25) * 0.5;
      return v12 < 0.5;
    }
  }
LABEL_47:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized static TrackingProcessingFunctions.UpdateTrackingHealthScoreForSpeed(trackingInfos:hands:updateData:config:handsKitTimestamp:)(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float32x2_t *v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  float32x2_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  unint64_t v38;
  uint64_t v39;
  float *v40;
  float v41;
  float32x4_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  float *v51;
  float v52;
  float32x2_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  float32x2_t v57;
  _QWORD *v58;
  uint64_t v59;
  float32x4_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v59 = a3;
  v7 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v7, v8);
  v67 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v13 = (float *)((char *)&v56 - v12);
  MEMORY[0x24BDAC7A8](v14, v15);
  v18 = (char *)&v56 - v17;
  v66 = *(_QWORD *)(a2 + 16);
  if (!v66)
  {
    swift_bridgeObjectRetain();
    return MEMORY[0x24BEE4AF8];
  }
  v64 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v65 = a2 + v64;
  v19 = *(_QWORD *)(v16 + 72);
  swift_bridgeObjectRetain();
  v56 = a2;
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = MEMORY[0x24BEE4AF8];
  v22 = a1;
  v63 = v19;
  v57 = (float32x2_t)a4;
  v58 = a1;
  while (1)
  {
    outlined init with copy of TrackingUpdateDataPB(v65 + v19 * v20, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    result = outlined init with copy of TrackingUpdateDataPB((uint64_t)v18, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v26 = v22[2];
    if (!v26)
      goto LABEL_36;
    v27 = 0;
    v28 = 28;
    while (v22[v28 - 22] != *((_QWORD *)v18 + 18))
    {
      ++v27;
      v28 += 40;
      if (v26 == v27)
        goto LABEL_36;
    }
    if ((v18[192] & 1) != 0)
      goto LABEL_50;
    if (v27 >= a1[2])
      break;
    v29 = (float32x2_t *)&a1[v28];
    v30 = a1[v28 + 5];
    LODWORD(v25) = 30.0;
    v31 = a4 >= v30;
    v32 = a4 - v30;
    if (v32 != 0 && v31)
      *(float *)&v25 = fmaxf(1000000000.0 / (float)v32, 30.0);
    if (v27 >= v26)
      goto LABEL_46;
    v33 = *(float32x2_t *)(v18 + 176);
    v34 = *((_QWORD *)v18 + 23);
    v35.i64[1] = v34;
    *(float *)&v24 = *(float *)&v34 - v29[3].f32[0];
    *(float32x2_t *)v35.f32 = vsub_f32(v33, v29[2]);
    v60 = v35;
    v61 = v24;
    v35.i64[1] = v24;
    v36 = vmulq_f32(v35, v35);
    v62 = v25;
    v37 = *(float *)&v25
        * sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]);
    if (BYTE4(v22[v28 + 4]) == 1)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
        v22 = (_QWORD *)result;
      }
      v38 = v22[2];
      v39 = v59;
      if (v27 >= v38)
        goto LABEL_48;
      v40 = (float *)&v22[v28];
      v40[8] = v37;
      *((_BYTE *)v40 + 36) = 0;
    }
    else
    {
      v41 = *(float *)&v22[v28 + 4];
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
        v22 = (_QWORD *)result;
      }
      v38 = v22[2];
      v39 = v59;
      if (v27 >= v38)
        goto LABEL_49;
      v37 = (float)(v37 * *(float *)(v59 + 108)) + (float)(v41 * (float)(1.0 - *(float *)(v59 + 108)));
      *(float *)&v22[v28 + 4] = v37;
    }
    if (v27 >= v38)
      goto LABEL_47;
    *(float32x2_t *)v42.f32 = vmul_n_f32(*(float32x2_t *)v60.f32, *(float *)&v62);
    v42.f32[2] = *(float *)&v62 * *(float *)&v61;
    v42.i32[3] = 0;
    v43 = (float32x4_t *)&v22[v28];
    v44 = vsubq_f32(v42, *(float32x4_t *)&v22[v28 + 10]);
    v45 = vmulq_f32(v44, v44);
    *(float *)&v22[v28 + 12] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]);
    v46 = *(_QWORD *)(v39 + 192);
    v47 = *(_QWORD *)(v46 + 16);
    if (v47)
    {
      v48 = *(_QWORD *)(v39 + 184);
      v49 = (float *)(v48 + 32);
      v50 = *(_QWORD *)(v48 + 16);
      v51 = (float *)(v46 + 32);
      while (1)
      {
        if (!v50)
        {
          __break(1u);
          goto LABEL_45;
        }
        if (*v49 <= v43[3].f32[0] && *v51 <= v37)
          break;
        --v50;
        ++v49;
        ++v51;
        if (!--v47)
          goto LABEL_33;
      }
      v52 = v13[2];
      if (v52 > 0.5)
        v52 = 0.5;
    }
    else
    {
LABEL_33:
      v52 = v13[2];
      if (v52 > 1.0)
        v52 = 1.0;
    }
    v13[2] = v52;
    v43[4] = v42;
    v43[5] = v42;
    v53 = (float32x2_t *)&v22[v28];
    *v53 = v33;
    v53[1] = (float32x2_t)v34;
    v53[2] = v33;
    v53[3] = (float32x2_t)v34;
    a4 = (unint64_t)v57;
    a1 = v58;
    v53[5] = v57;
LABEL_36:
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v13, v67, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1, v21);
    v55 = *(_QWORD *)(v21 + 16);
    v54 = *(_QWORD *)(v21 + 24);
    if (v55 >= v54 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1, v21);
    ++v20;
    *(_QWORD *)(v21 + 16) = v55 + 1;
    v19 = v63;
    outlined init with take of Matrix2dPB(v67, v21 + v64 + v55 * v63, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of HandDescriptor((uint64_t)v13);
    outlined destroy of HandDescriptor((uint64_t)v18);
    if (v20 == v66)
    {
      swift_bridgeObjectRelease();
      return v21;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

unint64_t specialized static TrackingProcessingFunctions.CleanUpHandByChirality(trackingInfos:hands:handsKitTimestamp:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _QWORD v69[3];
  unint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;

  v2 = type metadata accessor for HandDescriptor();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v76 = (uint64_t)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)v69 - v8;
  MEMORY[0x24BDAC7A8](v10, v11);
  v75 = (uint64_t)v69 - v12;
  MEMORY[0x24BDAC7A8](v13, v14);
  v80 = (uint64_t)v69 - v15;
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)v69 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v20, v21);
  v74 = (uint64_t)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v24);
  v79 = (uint64_t)v69 - v25;
  MEMORY[0x24BDAC7A8](v26, v27);
  v78 = (uint64_t)v69 - v28;
  MEMORY[0x24BDAC7A8](v29, v30);
  v77 = (uint64_t)v69 - v31;
  MEMORY[0x24BDAC7A8](v32, v33);
  v35 = (char *)v69 - v34;
  MEMORY[0x24BDAC7A8](v36, v37);
  v39 = (char *)v69 - v38;
  swift_bridgeObjectRetain();
  v40 = swift_bridgeObjectRetain();
  v41 = specialized _ArrayProtocol.filter(_:)(v40, (uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v86 = v41;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((unint64_t *)&v86, a1);
  swift_bridgeObjectRelease();
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v83 = v39;
  v42(v39, 1, 1, v2);
  v82 = v35;
  v73 = v42;
  v42(v35, 1, 1, v2);
  v85 = MEMORY[0x24BEE4AF8];
  v43 = *(_QWORD *)(v86 + 16);
  if (v43)
  {
    v84 = v2;
    v69[1] = 0;
    v69[2] = a1;
    v70 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v44 = v86 + v70;
    v81 = *(_QWORD *)(v3 + 72);
    v69[0] = v86;
    swift_bridgeObjectRetain();
    v45 = v43 - 1;
    v71 = v9;
    v72 = v3;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v44, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v46 = v77;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v83, v77, &demangling cache variable for type metadata for HandDescriptor?);
      v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
      v48 = v47(v46, 1, v84);
      outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for HandDescriptor?);
      v49 = v80;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v19, v80, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (v48 == 1)
      {
        v50 = *(_BYTE *)(v49 + 136);
        outlined destroy of HandDescriptor(v49);
        if ((v50 & 1) != 0)
        {
          v51 = (uint64_t)v83;
          outlined destroy of Coordinate3DPB?((uint64_t)v83, &demangling cache variable for type metadata for HandDescriptor?);
          outlined init with copy of TrackingUpdateDataPB((uint64_t)v19, v51, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v73((char *)v51, 0, 1, v84);
          outlined init with copy of TrackingUpdateDataPB((uint64_t)v19, v75, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v52 = v85;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v52 + 16) + 1, 1, v52);
          v54 = *(_QWORD *)(v52 + 16);
          v53 = *(_QWORD *)(v52 + 24);
          if (v54 >= v53 >> 1)
            v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v52);
          *(_QWORD *)(v52 + 16) = v54 + 1;
          outlined init with take of Matrix2dPB(v75, v52 + v70 + v54 * v81, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v85 = v52;
          v9 = v71;
          v3 = v72;
        }
      }
      else
      {
        outlined destroy of HandDescriptor(v49);
      }
      v55 = v78;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v82, v78, &demangling cache variable for type metadata for HandDescriptor?);
      v56 = v84;
      v57 = v47(v55, 1, v84);
      outlined destroy of Coordinate3DPB?(v55, &demangling cache variable for type metadata for HandDescriptor?);
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v19, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (v57 == 1)
      {
        v58 = v9[136];
        outlined destroy of HandDescriptor((uint64_t)v9);
        if ((v58 & 1) == 0)
        {
          v59 = (uint64_t)v82;
          outlined destroy of Coordinate3DPB?((uint64_t)v82, &demangling cache variable for type metadata for HandDescriptor?);
          outlined init with copy of TrackingUpdateDataPB((uint64_t)v19, v59, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v73((char *)v59, 0, 1, v56);
          outlined init with copy of TrackingUpdateDataPB((uint64_t)v19, v76, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v60 = v85;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v60 + 16) + 1, 1, v60);
          v62 = *(_QWORD *)(v60 + 16);
          v61 = *(_QWORD *)(v60 + 24);
          v56 = v84;
          if (v62 >= v61 >> 1)
            v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, v60);
          *(_QWORD *)(v60 + 16) = v62 + 1;
          outlined init with take of Matrix2dPB(v76, v60 + v70 + v62 * v81, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v85 = v60;
          v9 = v71;
          v3 = v72;
        }
      }
      else
      {
        outlined destroy of HandDescriptor((uint64_t)v9);
      }
      outlined destroy of HandDescriptor((uint64_t)v19);
      v63 = v79;
      outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v83, v79, &demangling cache variable for type metadata for HandDescriptor?);
      v64 = v47(v63, 1, v56);
      outlined destroy of Coordinate3DPB?(v63, &demangling cache variable for type metadata for HandDescriptor?);
      if (v64 != 1)
      {
        v65 = v74;
        outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v82, v74, &demangling cache variable for type metadata for HandDescriptor?);
        v66 = v47(v65, 1, v56);
        outlined destroy of Coordinate3DPB?(v65, &demangling cache variable for type metadata for HandDescriptor?);
        if (v66 != 1)
          break;
      }
      if (!v45)
        break;
      --v45;
      v44 += v81;
    }
    swift_bridgeObjectRelease();
  }
  v67 = swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)(v67, (uint64_t)&v85);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?((uint64_t)v82, &demangling cache variable for type metadata for HandDescriptor?);
  outlined destroy of Coordinate3DPB?((uint64_t)v83, &demangling cache variable for type metadata for HandDescriptor?);
  swift_bridgeObjectRelease();
  return v85;
}

uint64_t specialized static TrackingProcessingFunctions.FilterTrackerByDistance(hands:trackingInfos:updateData:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = a1;
  v21 = MEMORY[0x24BEE4B08];
  if ((*(_BYTE *)(a4 + 93) & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v8 = *(_QWORD *)(type metadata accessor for HandDescriptor() - 8);
      v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v10 = *(_QWORD *)(v8 + 72);
      swift_bridgeObjectRetain();
      v11 = v9 + 144;
      v12 = MEMORY[0x24BEE4B08];
      do
      {
        if (*(_QWORD *)(a3 + 16))
        {
          v13 = *(_QWORD *)(v4 + v11);
          v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
          if ((v15 & 1) != 0 && *(float *)(a4 + 96) < *(float *)(*(_QWORD *)(a3 + 56) + 96 * v14 + 68))
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeSet.update(with:isUnique:)(v13, isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease();
          }
        }
        v11 += v10;
        --v5;
      }
      while (v5);
      v21 = v12;
      swift_bridgeObjectRelease();
    }
    v17 = swift_bridgeObjectRetain();
    v18 = specialized _ArrayProtocol.filter(_:)(v17, &v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v19 = swift_bridgeObjectRetain();
    specialized _ArrayProtocol.filter(_:)(v19, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v18;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized static TrackingProcessingFunctions.Predict(trackingInfos:config:handsKitTimestamp:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  uint64_t result;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  char *v57;
  _BYTE *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _OWORD v85[20];
  _OWORD v86[2];
  __int128 v87;
  uint64_t v88;
  _OWORD v89[20];

  v2 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v2, v3);
  v55 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v57 = (char *)&v51 - v10;
  v60 = a1;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v11)
    return (uint64_t)v12;
  v53 = v9;
  v54 = v7;
  v58 = &v85[19];
  v59 = (unsigned __int8 *)&v89[19];
  v52 = v8 + 7;
  swift_bridgeObjectRetain();
  v13 = v11 - 1;
  v14 = 32;
  v56 = (void *)0x800000023D9DB2A0;
  v51 = 0x800000023D9DB090;
  while (1)
  {
    memcpy(v89, (const void *)(v60 + v14), 0x138uLL);
    v15 = *((_QWORD *)&v89[7] + 1);
    if (!*((_QWORD *)&v89[7] + 1))
      break;
    v82 = v14;
    v83 = v13;
    v63 = v89[0];
    v62 = *(_QWORD *)&v89[1];
    v16 = DWORD2(v89[1]);
    v61 = BYTE12(v89[1]);
    v17 = *(_QWORD *)&v89[5];
    v65 = *(_QWORD *)&v89[6];
    v66 = *((_QWORD *)&v89[5] + 1);
    v18 = *((_QWORD *)&v89[6] + 1);
    v64 = *(_QWORD *)&v89[7];
    v72 = BYTE1(v89[8]);
    v73 = LOBYTE(v89[8]);
    v71 = *((_QWORD *)&v89[8] + 1);
    v19 = *(_QWORD *)&v89[9];
    v70 = BYTE8(v89[9]);
    v84 = v12;
    v69 = *((_QWORD *)&v89[10] + 1);
    v20 = *(_QWORD *)&v89[10];
    v67 = BYTE1(v89[11]);
    v68 = LOBYTE(v89[11]);
    v80 = v89[13];
    v81 = v89[12];
    v21 = v89[14];
    v79 = BYTE4(v89[14]);
    v78 = *((_QWORD *)&v89[14] + 1);
    v22 = v89[15];
    v76 = v89[17];
    v77 = v89[16];
    v23 = v89[18];
    v75 = *((_QWORD *)&v89[18] + 1);
    v74 = *v59;
    v24 = DWORD1(v89[19]);
    v25 = *((_QWORD *)&v89[4] + 1);
    v27 = *(_QWORD *)(*((_QWORD *)&v89[7] + 1) + 32);
    v26 = *(_QWORD *)(*((_QWORD *)&v89[7] + 1) + 40);
    swift_retain();
    v28 = *(_QWORD *)((char *)&v89[11] + 4);
    outlined retain of (TrackingInfo, Int)((uint64_t)v89);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v85[0] = v63;
    *(_QWORD *)&v85[1] = v62;
    DWORD2(v85[1]) = v16;
    BYTE12(v85[1]) = v61;
    *(_QWORD *)&v85[2] = v27;
    *((_QWORD *)&v85[2] + 1) = v26;
    *(_QWORD *)&v85[3] = v27;
    *((_QWORD *)&v85[3] + 1) = v26;
    *(_QWORD *)&v85[4] = MEMORY[0x24BEE4AF8];
    *((_QWORD *)&v85[4] + 1) = v25;
    *(_QWORD *)&v85[5] = v17;
    *((_QWORD *)&v85[5] + 1) = v66;
    *(_QWORD *)&v85[6] = v65;
    *((_QWORD *)&v85[6] + 1) = v18;
    *(_QWORD *)&v85[7] = v64;
    *((_QWORD *)&v85[7] + 1) = v15;
    LOBYTE(v85[8]) = v73;
    BYTE1(v85[8]) = v72;
    *((_QWORD *)&v85[8] + 1) = v71;
    *(_QWORD *)&v85[9] = v19;
    BYTE8(v85[9]) = v70;
    *(_QWORD *)&v85[10] = v20;
    *((_QWORD *)&v85[10] + 1) = v69;
    LOBYTE(v85[11]) = v68;
    BYTE1(v85[11]) = v67;
    *(_QWORD *)((char *)&v85[11] + 4) = v28;
    v85[12] = v81;
    v85[13] = v80;
    LODWORD(v85[14]) = v21;
    BYTE4(v85[14]) = v79;
    *((_QWORD *)&v85[14] + 1) = v78;
    LODWORD(v85[15]) = v22;
    v85[16] = v77;
    v85[17] = v76;
    LODWORD(v85[18]) = v23;
    *((_QWORD *)&v85[18] + 1) = v75;
    *v58 = v74;
    DWORD1(v85[19]) = v24;
    outlined retain of (TrackingInfo, Int)((uint64_t)v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v12 = v84;
    swift_bridgeObjectRelease();
    outlined release of TrackingInfo((uint64_t)v85);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v14 = v82;
    v13 = v83;
    v30 = v12[2];
    v29 = v12[3];
    if (v30 >= v29 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v12);
    v12[2] = v30 + 1;
    memcpy(&v12[40 * v30 + 4], v85, 0x138uLL);
    if (!v13)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
LABEL_16:
    --v13;
    v14 += 320;
  }
  *(_QWORD *)&v85[0] = 0;
  *((_QWORD *)&v85[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v31._countAndFlagsBits = 0x676E696B63617254;
  v31._object = (void *)0xED0000206F666E49;
  String.append(_:)(v31);
  *(_QWORD *)&v87 = *(_QWORD *)&v89[1];
  v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0xD00000000000002FLL;
  v33._object = v56;
  String.append(_:)(v33);
  v88 = MEMORY[0x24BEE0D00];
  v87 = v85[0];
  v34 = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel > 4)
  {
LABEL_15:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v87);
    if (!v13)
      goto LABEL_17;
    goto LABEL_16;
  }
  v35 = v34;
  v83 = v13;
  v84 = v12;
  v82 = v14;
  v36 = (void *)MEMORY[0x2426372E8](0xD000000000000078, v51);
  v37 = objc_msgSend(v36, sel_lastPathComponent);

  *(_QWORD *)&v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v39 = v38;

  v40 = v57;
  static Date.now.getter();
  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  *(_QWORD *)&v81 = static HandyLoggerNeo._dispatchQ;
  v41 = v53;
  v42 = v54;
  v43 = v55;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v55, v40, v54);
  outlined init with copy of Any((uint64_t)&v87, (uint64_t)v86);
  v44 = (*(unsigned __int8 *)(v41 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v45 = (v52 + v44) & 0xFFFFFFFFFFFFFFF8;
  v46 = swift_allocObject();
  *(_DWORD *)(v46 + 16) = 4;
  *(_QWORD *)(v46 + 24) = v35;
  *(_OWORD *)(v46 + 32) = 0u;
  *(_OWORD *)(v46 + 48) = 0u;
  *(_DWORD *)(v46 + 64) = 1;
  *(_QWORD *)(v46 + 72) = v80;
  *(_QWORD *)(v46 + 80) = v39;
  *(_QWORD *)(v46 + 88) = 646;
  (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v46 + v44, v43, v42);
  outlined init with take of Any(v86, (_OWORD *)(v46 + v45));
  *(_QWORD *)(v46 + ((v45 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = partial apply for closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:);
  *(_QWORD *)(v47 + 24) = v46;
  *(_QWORD *)&v85[2] = _sIg_Ieg_TRTA_0;
  *((_QWORD *)&v85[2] + 1) = v47;
  *(_QWORD *)&v85[0] = MEMORY[0x24BDAC760];
  *((_QWORD *)&v85[0] + 1) = 1107296256;
  *(_QWORD *)&v85[1] = thunk for @escaping @callee_guaranteed () -> ();
  *((_QWORD *)&v85[1] + 1) = &block_descriptor_25;
  v48 = _Block_copy(v85);
  v49 = (id)v81;
  swift_retain();
  swift_release();
  dispatch_sync(v49, v48);

  _Block_release(v48);
  LOBYTE(v48) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v48 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v57, v42);
    swift_release();
    v14 = v82;
    v13 = v83;
    v12 = v84;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_23D93E498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40) >= 0x1AuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 96) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D93E550()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t specialized static TrackingProcessingFunctions.cleanUpHandByTwoHandsOcclusion(handsData:updateData:config:trackingInfos:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  float v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  __n128 v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  float32x2_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  _BOOL4 v78;
  _QWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  uint64_t updated;
  uint64_t v108;
  uint64_t (*v109)();
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char v162;
  char v163;
  char v164;
  unint64_t v165;
  float v166;
  unint64_t v167;
  float v168;
  unint64_t v169;
  float v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  float v174;
  unint64_t v175;
  float v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  float v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  float32x2_t *v202;
  uint64_t v203;
  float32x2_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  char v217;
  float32x4_t v218;
  float32x4_t v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char v229;
  char v230;
  float v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  float v238;
  uint64_t v239;
  _QWORD *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __n128 v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __n128 v269;
  float32x4_t v270;
  float v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t result;
  _QWORD *v320;
  float v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  __n128 v389;
  __int128 v390;
  char *v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  __int128 v401;
  __n128 v402;
  _QWORD *v403;
  uint64_t v404;
  uint64_t v405;
  char v406;
  _QWORD v407[24];
  __int128 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  __int16 v421;
  int v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD *v428;
  _OWORD v429[7];
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _OWORD v439[13];

  v385 = a4;
  v395 = a3;
  v378 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v391 = (char *)&v357 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v399 = (char *)&v357 - v13;
  v14 = (uint64_t *)type metadata accessor for IndexSet();
  v379 = *(v14 - 1);
  MEMORY[0x24BDAC7A8](v14, v15);
  v380 = (char *)&v357 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v383 = (uint64_t)&v357 - v19;
  v397 = type metadata accessor for HandDescriptor();
  v20 = *(_QWORD *)(v397 - 8);
  MEMORY[0x24BDAC7A8](v397, v21);
  v398 = (uint64_t)&v357 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v24);
  v404 = (uint64_t)&v357 - v25;
  MEMORY[0x24BDAC7A8](v26, v27);
  v376 = (uint64_t)&v357 - v28;
  MEMORY[0x24BDAC7A8](v29, v30);
  v396 = (uint64_t)&v357 - v31;
  MEMORY[0x24BDAC7A8](v32, v33);
  v373 = (uint64_t)&v357 - v34;
  MEMORY[0x24BDAC7A8](v35, v36);
  v374 = (uint64_t *)((char *)&v357 - v37);
  MEMORY[0x24BDAC7A8](v38, v39);
  *(_QWORD *)&v392 = (char *)&v357 - v40;
  MEMORY[0x24BDAC7A8](v41, v42);
  v44 = (char *)&v357 - v43;
  v45 = *(_QWORD **)a1;
  isUniquelyReferenced_nonNull_native = *(_QWORD *)(a1 + 488);
  v377 = *(_QWORD *)(a1 + 456);
  Hands_trace_CBridge();
  v438 = a2;
  v381 = specialized Array.count.getter(v45);
  v400 = v20;
  v403 = v45;
  *(_QWORD *)&v393 = v14;
  *(_QWORD *)&v394 = isUniquelyReferenced_nonNull_native;
  if (v381 == 2)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v45);
    v47 = (char *)v45 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v45);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)&v47[*(_QWORD *)(v20 + 72)], (uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v48 = *((_QWORD *)v47 + 25);
    if (v48)
    {
      v49 = *((_QWORD *)v44 + 25);
      if (v49)
      {
        v50 = *((_QWORD *)v47 + 26);
        v51 = *((_QWORD *)v44 + 26);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v52 = specialized Set.init<A>(_:)(v48);
        swift_bridgeObjectRelease();
        v53 = specialized Set.init<A>(_:)(v49);
        swift_bridgeObjectRelease();
        v54 = specialized _NativeSet.intersection(_:)(v53, v52);
        swift_bridgeObjectRelease();
        v45 = specialized _copyCollectionToContiguousArray<A>(_:)(v54);
        swift_release();
        v55 = specialized Array.count.getter((uint64_t)v45);
        *(_QWORD *)&v390 = v51;
        v386 = v50;
        if (v55)
        {
          v56 = v55;
          v57 = specialized Array.count.getter(v50);
          LODWORD(v388) = 0;
          v58 = 0;
          v402.n128_u64[0] = (unint64_t)(v45 + 4);
          *(_QWORD *)&v401 = v50 + 48;
          v387 = (_QWORD *)(v51 + 48);
          v14 = qword_23D940948;
          v59 = 0.5;
          do
          {
            v60 = specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v58, 1, v45);
            v20 = v58 + 1;
            if (__OFADD__(v58, 1))
              goto LABEL_263;
            if (v57)
            {
              v61 = 0;
              v62 = v402.n128_u64[0] + 16 * v58;
              v58 = *(_QWORD *)v62;
              isUniquelyReferenced_nonNull_native = *(unsigned __int8 *)(v62 + 8);
              v63 = (_QWORD *)v401;
              while (1)
              {
                v64 = v61 + 1;
                if (__OFADD__(v61, 1))
                {
                  __break(1u);
                  goto LABEL_244;
                }
                if ((_DWORD)isUniquelyReferenced_nonNull_native)
                  __asm { BR              X12 }
                if (*v63 == v58)
                  break;
                ++v61;
                v63 += 5;
                if (v64 == v57)
                  goto LABEL_6;
              }
              v60.n128_u64[0] = *(v63 - 2);
              v65 = (float32x2_t)*(v63 - 1);
              v389 = v60;
              v66 = specialized Array.count.getter(v390);
              if (!v66)
              {
LABEL_6:
                isUniquelyReferenced_nonNull_native = v394;
                goto LABEL_7;
              }
              v67 = 0;
              v68 = v387;
              while (1)
              {
                v69 = v67 + 1;
                if (__OFADD__(v67, 1))
                {
LABEL_259:
                  __break(1u);
LABEL_260:
                  __break(1u);
                  goto LABEL_261;
                }
                if (*v68 == v58)
                  break;
                ++v67;
                v68 += 5;
                if (v69 == v66)
                  goto LABEL_6;
              }
              v70.i64[0] = *(v68 - 2);
              v71.i64[0] = v389.n128_u64[0];
              v71.i64[1] = v389.n128_u64[0];
              *(float32x2_t *)v72.f32 = vmul_f32(v65, (float32x2_t)0x3F0000003F000000);
              v72.i64[1] = v72.i64[0];
              v73.i64[0] = vsubq_f32(v71, v72).u64[0];
              v73.i64[1] = vaddq_f32(v71, v72).i64[1];
              v70.i64[1] = v70.i64[0];
              *(float32x2_t *)v72.f32 = vmul_f32((float32x2_t)*(v68 - 1), (float32x2_t)0x3F0000003F000000);
              v72.i64[1] = v72.i64[0];
              v74.i64[0] = vsubq_f32(v70, v72).u64[0];
              v74.i64[1] = vaddq_f32(v70, v72).i64[1];
              v75 = specialized static TrackingUtils.calculateIntersectionOverHand(bbox0:bbox1:)(v73, v74);
              isUniquelyReferenced_nonNull_native = v394;
              v78 = (v388 & 1) != 0 || (v77 = *(double *)(v395 + 24), v75 > v77) || v76 > v77;
              LODWORD(v388) = v78;
            }
LABEL_7:
            v58 = v20;
          }
          while (v20 != v56);
        }
        else
        {
          LODWORD(v388) = 0;
        }
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v20 = v400;
        v45 = v403;
        v14 = (uint64_t *)v393;
        LOBYTE(v48) = v388;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LOBYTE(v48) = 0;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    outlined destroy of HandDescriptor((uint64_t)v44);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v48) = 0;
  }
  v58 = (uint64_t)v399;
  v437 = specialized static Array._allocateUninitialized(_:)(0);
  v436 = specialized static Array._allocateUninitialized(_:)(0);
  v79 = (_QWORD *)specialized static Array._allocateUninitialized(_:)(0);
  v80 = specialized Dictionary.init(dictionaryLiteral:)(v79);
  swift_bridgeObjectRelease();
  v435 = v80;
  if (v381 == 2 && (v48 & 1) != 0)
  {
    v81 = (_QWORD *)specialized static Array._allocateUninitialized(_:)(0);
    v82 = specialized Dictionary.init(dictionaryLiteral:)(v81);
    swift_bridgeObjectRelease();
    v428 = (_QWORD *)v82;
    v83 = specialized static Array._allocateUninitialized(_:)(0);
    v84 = specialized Dictionary.init(dictionaryLiteral:)(v83);
    swift_bridgeObjectRelease();
    v427 = v84;
    v426 = specialized static Array._allocateUninitialized(_:)(0);
    v425 = specialized static Array._allocateUninitialized(_:)(0);
    v85 = (_QWORD *)specialized static Array._allocateUninitialized(_:)(0);
    v86 = specialized Dictionary.init(dictionaryLiteral:)(v85);
    swift_bridgeObjectRelease();
    v424 = v86;
    v423 = specialized static Array._allocateUninitialized(_:)(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : [CameraSource : [SIMD2<Float>]]]);
    Dictionary.reserveCapacity(_:)(4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : [CameraSource : Float]]);
    Dictionary.reserveCapacity(_:)(4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : Coordinate3D]);
    Dictionary.reserveCapacity(_:)(4);
    specialized Array.reserveCapacity(_:)(4);
    specialized Array.reserveCapacity(_:)(4);
    v87 = specialized Array.count.getter(v45);
    if (v87)
    {
      v58 = v87;
      *(_QWORD *)&v401 = (char *)v45
                       + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      swift_bridgeObjectRetain();
      v88 = 0;
      v375 = 0;
      v89 = v392;
      v382 = v58;
      while (1)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v88, 1, v45);
        v93 = v88 + 1;
        if (__OFADD__(v88, 1))
          goto LABEL_260;
        outlined init with copy of TrackingUpdateDataPB(v401 + *(_QWORD *)(v20 + 72) * v88, v89, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v94 = *(_QWORD *)(v89 + 144);
        v95 = v438;
        if (*(_QWORD *)(v438 + 16))
        {
          specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v89 + 144));
          if ((v96 & 1) != 0)
          {
            v97 = *(_QWORD *)(v89 + 200);
            if (v97)
            {
              if (*(_QWORD *)(v89 + 16) && (*(_BYTE *)(v89 + 128) & 1) != 0)
              {
                *(_QWORD *)&v390 = *(_QWORD *)(v89 + 24);
                v389.n128_u64[0] = v97;
                v98 = specialized Array.count.getter(v97);
                if (!v98)
                {
                  v45 = v403;
                  if (!*(_QWORD *)(v95 + 16))
                    goto LABEL_40;
                  goto LABEL_61;
                }
                v99 = v98;
                if (v98 < 1)
                {
                  __break(1u);
LABEL_269:
                  __break(1u);
LABEL_270:
                  __break(1u);
LABEL_271:
                  __break(1u);
LABEL_272:
                  __break(1u);
LABEL_273:
                  __break(1u);
LABEL_274:
                  __break(1u);
LABEL_275:
                  __break(1u);
LABEL_276:
                  __break(1u);
LABEL_277:
                  __break(1u);
LABEL_278:
                  __break(1u);
                  goto LABEL_279;
                }
                v100 = (char *)(swift_bridgeObjectRetain() + 40);
                v101 = v375;
                v384 = v93;
                v402.n128_u64[0] = v94;
                do
                {
                  v102 = *((_QWORD *)v100 - 1);
                  v103 = *v100;
                  specialized Dictionary.subscript.getter(v94, v438, (uint64_t)v429);
                  v104 = *((_QWORD *)&v429[3] + 1);
                  if (*((_QWORD *)&v429[3] + 1)
                    && (v105 = specialized Dictionary.subscript.getter(v102, v103, *((uint64_t *)&v429[3] + 1)),
                        outlined consume of TrackingUpdateData?(*(uint64_t *)&v429[0], *((uint64_t *)&v429[0] + 1), *(uint64_t *)&v429[1], *((uint64_t *)&v429[1] + 1), *(uint64_t *)&v429[2], *((uint64_t *)&v429[2] + 1), *(uint64_t *)&v429[3], v104), v105))
                  {
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    type metadata accessor for TrackingUtils();
                    v405 = v102;
                    v406 = v103;
                    static TrackingUtils.findImageOfCameraSource(_:camera:)(isUniquelyReferenced_nonNull_native, &v405, (uint64_t)v407);
                    outlined init with take of ImageData?((uint64_t)v407, (uint64_t)&v408, &demangling cache variable for type metadata for ImageData?);
                    outlined init with take of ImageData?((uint64_t)&v408, (uint64_t)v429, &demangling cache variable for type metadata for ImageData?);
                    if (_s5Hands9ImageDataVSgWOg((uint64_t)v429) != 1)
                    {
                      v439[8] = v431;
                      v439[9] = v432;
                      v439[10] = v433;
                      v439[11] = v434;
                      v439[4] = v429[4];
                      v439[5] = v429[5];
                      v439[6] = v429[6];
                      v439[7] = v430;
                      v439[0] = v429[0];
                      v439[1] = v429[1];
                      v439[2] = v429[2];
                      v439[3] = v429[3];
                      v106 = (float32x4_t *)v390;
                      swift_bridgeObjectRetain();
                      outlined retain of ImageData?(&v408, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ImageData?);
                      updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands12Coordinate3DVG_s5SIMD3VySfGs5NeverOTg50162_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6UInt64VAA0b6UpdateL0VGSayx61B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZs5f9VySfGAA12E8DVXEfU1_AF9ImageDataVTf1cn_nTf4ng_nTm(v106, (uint64_t)v439);
                      outlined retain of ImageData?(&v408, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
                      swift_bridgeObjectRelease();
                      outlined retain of ImageData((uint64_t)v429);
                      v108 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays5SIMD3VySfGG_s5SIMD2VySfGs5NeverOTg50162_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6UInt64VAA0b6UpdateL0VGSayw61B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZs5e7VySfGs5D11VySfGXEfU2_5Hands9ImageDataVTf1cn_nTf4ng_nTm(updated, (uint64_t)v439);
                      outlined retain of ImageData?(&v408, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
                      swift_bridgeObjectRelease();
                      v109 = specialized Dictionary.subscript.modify(v407, v402.n128_i64[0]);
                      if (*(_QWORD *)(v110 + 56))
                        specialized Dictionary.subscript.setter(v108, v102, v103);
                      else
                        swift_bridgeObjectRelease();
                      ((void (*)(_QWORD *, _QWORD))v109)(v407, 0);
                      outlined retain of ImageData?(&v408, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
                      isUniquelyReferenced_nonNull_native = v394;
                      v93 = v384;
                    }
                  }
                  v94 = v402.n128_u64[0];
                  v100 += 16;
                  --v99;
                }
                while (v99);
                v375 = v101;
                swift_bridgeObjectRelease();
                v95 = v438;
                v20 = v400;
                v45 = v403;
                v14 = (uint64_t *)v393;
                v89 = v392;
                v58 = v382;
              }
            }
          }
        }
        if (!*(_QWORD *)(v95 + 16))
          goto LABEL_40;
LABEL_61:
        v111 = specialized __RawDictionaryStorage.find<A>(_:)(v94);
        if ((v112 & 1) == 0)
          goto LABEL_40;
        v113 = *(_QWORD *)(v95 + 56) + 96 * v111;
        v114 = *(_QWORD *)(v113 + 8);
        v115 = *(_QWORD **)(v113 + 16);
        v386 = *(_QWORD *)v113;
        v387 = v115;
        v116 = *(_QWORD *)(v113 + 24);
        v388 = v114;
        v389.n128_u64[0] = v116;
        v20 = *(unsigned __int8 *)(v113 + 32);
        v58 = v94;
        v117 = *(_QWORD *)(v113 + 56);
        v118 = *(_QWORD *)(v113 + 80);
        v45 = *(_QWORD **)(v113 + 88);
        swift_bridgeObjectRetain_n();
        *(_QWORD *)&v390 = v118;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v119 = (uint64_t)v428;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v429[0] = v119;
        v120 = v58;
        v122 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
        v123 = *(_QWORD *)(v119 + 16);
        v124 = (v121 & 1) == 0;
        v125 = v123 + v124;
        if (__OFADD__(v123, v124))
          goto LABEL_264;
        v58 = v121;
        if (*(_QWORD *)(v119 + 24) >= v125)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v125, isUniquelyReferenced_nonNull_native);
          v126 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
          if ((v58 & 1) != (v127 & 1))
            goto LABEL_282;
          v122 = v126;
        }
        v128 = *(_QWORD **)&v429[0];
        isUniquelyReferenced_nonNull_native = 8 * v122;
        if ((v58 & 1) != 0)
        {
          v129 = *(_QWORD *)(*(_QWORD *)&v429[0] + 56);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v129 + 8 * v122) = v117;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)&v429[0] + 8 * (v122 >> 6) + 64) |= 1 << v122;
          *(_QWORD *)(v128[6] + 8 * v122) = v120;
          *(_QWORD *)(v128[7] + 8 * v122) = v117;
          v130 = v128[2];
          v131 = __OFADD__(v130, 1);
          v132 = v130 + 1;
          if (v131)
            goto LABEL_265;
          v128[2] = v132;
        }
        v428 = v128;
        swift_bridgeObjectRelease();
        v133 = *(_QWORD *)(v392 + 144);
        v14 = (uint64_t *)v393;
        isUniquelyReferenced_nonNull_native = v394;
        if ((v20 & 1) != 0)
        {
          v134 = v427;
          v135 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v392 + 144));
          if ((v136 & 1) != 0)
          {
            v137 = v135;
            v138 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v429[0] = v134;
            v20 = v400;
            if ((v138 & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v134 = *(_QWORD *)&v429[0];
            }
            specialized _NativeDictionary._delete(at:)(v137, v134);
            v427 = v134;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_39;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v90.n128_u64[0] = v386;
          v90.n128_u64[1] = v388;
          v402 = v90;
          v90.n128_u64[0] = (unint64_t)v387;
          v90.n128_u64[1] = v389.n128_u64[0];
          v389 = v90;
          v91 = v427;
          v92 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v429[0] = v91;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v133, v92, v402, v389);
          v427 = *(_QWORD *)&v429[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v20 = v400;
LABEL_39:
        v45 = v403;
        v89 = v392;
        v58 = v382;
LABEL_40:
        outlined destroy of HandDescriptor(v89);
        v88 = v93;
        if (v93 == v58)
        {
          swift_bridgeObjectRelease();
          v139 = v375;
          v140 = v45[2];
          if (!v140)
            goto LABEL_87;
          goto LABEL_84;
        }
      }
    }
    v139 = 0;
    v140 = v45[2];
    if (!v140)
      goto LABEL_87;
LABEL_84:
    v141 = (uint64_t)v45 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v142 = *(_QWORD *)(v20 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    do
    {
      closure #5 in static TrackingProcessingFunctions.cleanUpHandByTwoHandsOcclusion(handsData:updateData:config:trackingInfos:)(v141, isUniquelyReferenced_nonNull_native, &v427, (uint64_t *)&v435, (uint64_t *)&v428, &v424);
      v141 += v142;
      --v140;
    }
    while (v140);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_87:
    v143 = swift_bridgeObjectRetain();
    v144 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVys6UInt64VSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_G_AIs5NeverOTg50137_s5Hands27TrackingProcessingFunctionsC016cleanUpHandByTwoA9Occlusion9handsData06updateL06config13trackingInfosSayAA0G10DescriptorVG_SDys6E90VAA0b6UpdateL0VGSayAA0B4InfoVGAA0B5StateOtAA0a3KitL0V_ApA0iaJ12FilterConfigVAStFZA2MXEfU4_Tf1cn_n(v143);
    swift_bridgeObjectRelease();
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v144);
    v145 = *(_QWORD *)(v144 + 32);
    v146 = v435;
    v147 = specialized Dictionary.subscript.getter(v145, v435);
    *(_QWORD *)&v392 = v144;
    *(_QWORD *)&v390 = v139;
    if (v147)
    {
      v148 = v147;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v144);
      v149 = *(_QWORD *)(v144 + 40);
      v150 = specialized Dictionary.subscript.getter(v149, v146);
      if (v150)
      {
        v151 = v150;
        v152 = v424;
        v153 = specialized Dictionary.subscript.getter(v145, v424);
        if (!v153)
          goto LABEL_280;
        v154 = v153;
        v402.n128_u64[0] = specialized Dictionary.subscript.getter(v149, v152);
        if (!v402.n128_u64[0])
        {
LABEL_281:
          __break(1u);
LABEL_282:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x23D940948);
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
        v155 = swift_allocObject();
        v156 = specialized static Array._adoptStorage(_:count:)(v155, 6);
        *(_QWORD *)v157 = 2;
        *(_BYTE *)(v157 + 8) = 1;
        *(_QWORD *)(v157 + 16) = 3;
        *(_BYTE *)(v157 + 24) = 1;
        *(_QWORD *)(v157 + 32) = 4;
        *(_BYTE *)(v157 + 40) = 1;
        *(_QWORD *)(v157 + 48) = 5;
        *(_BYTE *)(v157 + 56) = 1;
        *(_QWORD *)(v157 + 64) = 0;
        *(_BYTE *)(v157 + 72) = 1;
        *(_QWORD *)(v157 + 80) = 1;
        *(_BYTE *)(v157 + 88) = 1;
        v158 = _s5Hands13PoseImageCropVSgWOi_(v156);
        v159 = 0;
        v160 = (char *)(v158 + 40);
        do
        {
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v159, 1, v158);
          v161 = *((_QWORD *)v160 - 1);
          v162 = *v160;
          if (*(_QWORD *)(v148 + 16))
          {
            specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v160 - 1), *v160);
            if ((v163 & 1) != 0)
            {
              if (*(_QWORD *)(v151 + 16))
              {
                specialized __RawDictionaryStorage.find<A>(_:)(v161, v162);
                if ((v164 & 1) != 0)
                {
                  v165 = specialized Dictionary.subscript.getter(v161, v162, v148);
                  if ((v165 & 0x100000000) != 0)
                    goto LABEL_275;
                  v166 = *(float *)&v165;
                  v167 = specialized Dictionary.subscript.getter(v161, v162, v151);
                  if ((v167 & 0x100000000) != 0)
                    goto LABEL_276;
                  v168 = specialized abs<A>(_:)(v166 - *(float *)&v167);
                  specialized Array.append(_:)(v168);
                  v169 = specialized Dictionary.subscript.getter(v161, v162, v148);
                  if ((v169 & 0x100000000) != 0)
                    goto LABEL_277;
                  v170 = *(float *)&v169;
                  v171 = specialized Dictionary.subscript.getter(v161, v162, v151);
                  if ((v171 & 0x100000000) != 0)
                    goto LABEL_278;
                  specialized Array.append(_:)(v170 - *(float *)&v171);
                }
              }
            }
          }
          if (*(_QWORD *)(v154 + 16))
          {
            specialized __RawDictionaryStorage.find<A>(_:)(v161, v162);
            if ((v172 & 1) != 0
              && (specialized Dictionary.subscript.getter(v161, v162, v402.n128_i64[0]) & 0x100000000) == 0)
            {
              v173 = specialized Dictionary.subscript.getter(v161, v162, v154);
              if ((v173 & 0x100000000) != 0)
                goto LABEL_273;
              v174 = *(float *)&v173;
              v175 = specialized Dictionary.subscript.getter(v161, v162, v402.n128_i64[0]);
              if ((v175 & 0x100000000) != 0)
                goto LABEL_274;
              v176 = specialized abs<A>(_:)(v174 - *(float *)&v175);
              specialized Array.append(_:)(v176);
            }
          }
          ++v159;
          v160 += 16;
        }
        while (v159 != 6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 = v400;
        v45 = v403;
        v14 = (uint64_t *)v393;
      }
      swift_bridgeObjectRelease();
      v144 = v392;
    }
    v177 = specialized static HandsKitUtils.getLegacyJointsIndices()();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x24BDCF468]);
    dispatch thunk of SetAlgebra.init()();
    v178 = specialized Array.count.getter(v177);
    if (v178)
    {
      v179 = v178;
      if (v178 < 1)
        goto LABEL_269;
      v180 = 0;
      v181 = v380;
      do
      {
        v182 = *(_QWORD *)(v177 + 8 * v180++ + 32);
        *(_QWORD *)&v408 = v182;
        dispatch thunk of SetAlgebra.insert(_:)();
      }
      while (v179 != v180);
      swift_bridgeObjectRelease();
      v183 = v181;
      v144 = v392;
    }
    else
    {
      swift_bridgeObjectRelease();
      v183 = v380;
    }
    (*(void (**)(uint64_t, char *, uint64_t *))(v379 + 32))(v383, v183, v14);
    v184 = (uint64_t)v428;
    v185 = specialized Dictionary.subscript.getter(*(_QWORD *)(v144 + 32), v428);
    v58 = (uint64_t)v399;
    if (v185)
    {
      isUniquelyReferenced_nonNull_native = v185;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v144);
      *(_QWORD *)&v394 = specialized Dictionary.subscript.getter(*(_QWORD *)(v144 + 40), v184);
      if ((_QWORD)v394)
      {
        v186 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 64);
        *(_QWORD *)&v401 = isUniquelyReferenced_nonNull_native + 64;
        v187 = 1 << *(_BYTE *)(isUniquelyReferenced_nonNull_native + 32);
        v188 = -1;
        if (v187 < 64)
          v188 = ~(-1 << v187);
        v189 = v188 & v186;
        v402.n128_u64[0] = (unint64_t)(v187 + 63) >> 6;
        swift_bridgeObjectRetain();
        v190 = 0;
        v5 = -1.0;
        v191 = 0.0;
        while (1)
        {
          while (v189)
          {
            v192 = __clz(__rbit64(v189));
            v189 &= v189 - 1;
            v193 = v192 | (v190 << 6);
            if (*(_QWORD *)(isUniquelyReferenced_nonNull_native + 16))
              goto LABEL_140;
          }
          v131 = __OFADD__(v190++, 1);
          if (v131)
            goto LABEL_262;
          if (v190 >= v402.n128_i64[0])
          {
            v14 = (uint64_t *)v393;
LABEL_156:
            v144 = v392;
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v224 = *(double *)(v395 + 8);
            if (v5 <= v224)
            {
LABEL_157:
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = v390;
LABEL_165:
              (*(void (**)(uint64_t, uint64_t *))(v379 + 8))(v383, v14);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_166;
            }
LABEL_160:
            isUniquelyReferenced_nonNull_native = v390;
            v226 = v426;
            v227 = specialized Sequence<>.max()(v426);
            if ((v227 & 0x100000000) != 0)
            {
              swift_bridgeObjectRelease();
              goto LABEL_165;
            }
            v59 = *(float *)&v227;
            v228 = specialized Collection<>.firstIndex(of:)(v226, *(float *)&v227);
            v230 = v229;
            swift_bridgeObjectRelease();
            if ((v230 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint64_t *))(v379 + 8))(v383, v14);
              swift_bridgeObjectRelease();
              v58 = (uint64_t)v399;
              goto LABEL_166;
            }
            v231 = *(double *)(v395 + 16);
            if (v59 < v231)
            {
              v232 = *(_QWORD *)(v144 + 32);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              v233 = *(_QWORD **)(v437 + 16);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v233);
              v234 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)((uint64_t)v233, v232);
              _s5Hands13PoseImageCropVSgWOi_(v234);
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v144);
              v235 = *(_QWORD *)(v144 + 40);
              swift_bridgeObjectRelease();
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              v236 = *(_QWORD **)(v437 + 16);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v236);
              v237 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)((uint64_t)v236, v235);
              _s5Hands13PoseImageCropVSgWOi_(v237);
LABEL_245:
              v58 = (uint64_t)v399;
              v324 = specialized Sequence<>.max()(v423);
              swift_bridgeObjectRelease();
              if ((v324 & 0x100000000) != 0
                || (*(_BYTE *)(v395 + 32) & 1) == 0
                || specialized Array.count.getter(v385) != 2
                || *(float *)(v395 + 36) >= v5
                || *(float *)(v395 + 40) <= v59
                || *(float *)(v395 + 44) <= *(float *)&v324)
              {
                (*(void (**)(uint64_t, uint64_t *))(v379 + 8))(v383, v14);
                goto LABEL_166;
              }
              v325 = v374;
              specialized Array.subscript.getter(0, (uint64_t)v45, (uint64_t)v374);
              v327 = v325[2];
              v326 = v325[3];
              v328 = v325[4];
              v329 = v325[5];
              v330 = v325[6];
              v331 = v325[7];
              v333 = v325[8];
              v332 = v325[9];
              v335 = v325[10];
              v334 = (_QWORD *)v325[11];
              v336 = v325[12];
              v337 = v325[13];
              v338 = v325[14];
              v339 = (char *)v325[15];
              v375 = v325[16];
              v380 = v339;
              v382 = v338;
              v384 = v337;
              v386 = v336;
              v387 = v334;
              v372 = v335;
              v388 = v326;
              *(_QWORD *)&v392 = v328;
              *(_QWORD *)&v394 = v329;
              *(_QWORD *)&v401 = v330;
              v402.n128_u64[0] = v331;
              outlined copy of HandPose?(v327);
              outlined destroy of HandDescriptor((uint64_t)v325);
              v389.n128_u64[0] = v327;
              if (!v327)
                goto LABEL_266;
              v371 = v333;
              v374 = (_QWORD *)v332;
              *(_QWORD *)&v390 = isUniquelyReferenced_nonNull_native;
              v340 = (_QWORD *)v373;
              specialized Array.subscript.getter(1uLL, (uint64_t)v45, v373);
              v341 = v340[2];
              v342 = v340[3];
              v344 = v340[4];
              v343 = v340[5];
              v345 = v340[6];
              v346 = v340[7];
              v347 = v340[8];
              v348 = v340[9];
              v349 = v340[10];
              v350 = v340[11];
              v351 = v340[12];
              v352 = v340[13];
              v353 = v340[14];
              v354 = v340[15];
              v369 = v340[16];
              v364 = v354;
              v365 = v353;
              v366 = v352;
              v367 = v351;
              v368 = v350;
              v370 = v349;
              outlined copy of HandPose?(v341);
              outlined destroy of HandDescriptor((uint64_t)v340);
              if (!v341)
              {
                (*(void (**)(uint64_t, _QWORD))(v379 + 8))(v383, v393);
                outlined consume of HandPose?(v389.n128_i64[0]);
                v58 = (uint64_t)v399;
                v20 = v400;
                v45 = v403;
                isUniquelyReferenced_nonNull_native = v390;
                goto LABEL_166;
              }
              v358 = v341;
              LOWORD(v430) = v375 & 0x101;
              DWORD1(v430) = HIDWORD(v375);
              v421 = v369 & 0x101;
              v422 = HIDWORD(v369);
              *(_QWORD *)&v429[0] = v389.n128_u64[0];
              *((_QWORD *)&v429[0] + 1) = v388;
              *((_QWORD *)&v429[1] + 1) = v394;
              *(_QWORD *)&v429[1] = v392;
              *((_QWORD *)&v429[2] + 1) = v402.n128_u64[0];
              *(_QWORD *)&v429[2] = v401;
              *((_QWORD *)&v429[3] + 1) = v374;
              *(_QWORD *)&v429[3] = v371;
              v359 = v345;
              v360 = v342;
              *((_QWORD *)&v429[4] + 1) = v387;
              *(_QWORD *)&v429[4] = v372;
              *((_QWORD *)&v429[5] + 1) = v384;
              v362 = v343;
              v363 = v348;
              *(_QWORD *)&v429[5] = v386;
              v361 = v346;
              *((_QWORD *)&v429[6] + 1) = v380;
              *(_QWORD *)&v429[6] = v382;
              *(_QWORD *)&v408 = v341;
              *((_QWORD *)&v408 + 1) = v342;
              v410 = v343;
              v409 = v344;
              v412 = v346;
              v411 = v345;
              v414 = v348;
              v413 = v347;
              v416 = v368;
              v415 = v370;
              v418 = v366;
              v417 = v367;
              v420 = v364;
              v419 = v365;
              v373 = specialized static TrackingUtils.voteHandByLegacyJointUncertainty(handPose0:handPose1:)((uint64_t)v429, &v408);
              outlined consume of HandPose?(v358);
              outlined consume of HandPose?(v389.n128_i64[0]);
              if (!__OFSUB__(1, v373))
              {
                v355 = v396;
                v45 = v403;
                specialized Array.subscript.getter(1 - v373, (uint64_t)v403, v396);
                v356 = *(_QWORD *)(v355 + 144);
                outlined destroy of HandDescriptor(v355);
                specialized Array.append(_:)(v356);
                (*(void (**)(uint64_t, _QWORD))(v379 + 8))(v383, v393);
                v58 = (uint64_t)v399;
                v20 = v400;
                isUniquelyReferenced_nonNull_native = v390;
                goto LABEL_166;
              }
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
              goto LABEL_281;
            }
            v321 = *(double *)(v395 + 24);
            if (v59 < v321)
            {
              v322 = v425;
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v228, 1, v425);
              v323 = specialized Array.subscript.getter(*(float *)(v322 + 4 * v228 + 32) <= 0.0, v144);
              swift_bridgeObjectRelease();
              specialized Array.append(_:)(v323);
              goto LABEL_245;
            }
LABEL_244:
            swift_bridgeObjectRelease();
            goto LABEL_245;
          }
          v194 = *(_QWORD *)(v401 + 8 * v190);
          v14 = (uint64_t *)v393;
          if (!v194)
          {
            v195 = v190 + 1;
            if (v190 + 1 >= v402.n128_i64[0])
              goto LABEL_156;
            v194 = *(_QWORD *)(v401 + 8 * v195);
            if (!v194)
            {
              v195 = v190 + 2;
              if (v190 + 2 >= v402.n128_i64[0])
                goto LABEL_156;
              v194 = *(_QWORD *)(v401 + 8 * v195);
              if (!v194)
              {
                v195 = v190 + 3;
                if (v190 + 3 >= v402.n128_i64[0])
                  goto LABEL_156;
                v194 = *(_QWORD *)(v401 + 8 * v195);
                if (!v194)
                {
                  v195 = v190 + 4;
                  if (v190 + 4 >= v402.n128_i64[0])
                    goto LABEL_156;
                  v194 = *(_QWORD *)(v401 + 8 * v195);
                  if (!v194)
                  {
                    v195 = v190 + 5;
                    if (v190 + 5 >= v402.n128_i64[0])
                      goto LABEL_156;
                    v194 = *(_QWORD *)(v401 + 8 * v195);
                    if (!v194)
                    {
                      while (1)
                      {
                        v190 = v195 + 1;
                        if (__OFADD__(v195, 1))
                          goto LABEL_270;
                        if (v190 >= v402.n128_i64[0])
                          goto LABEL_156;
                        v194 = *(_QWORD *)(v401 + 8 * v190);
                        ++v195;
                        if (v194)
                          goto LABEL_139;
                      }
                    }
                  }
                }
              }
            }
            v190 = v195;
          }
LABEL_139:
          v189 = (v194 - 1) & v194;
          v193 = __clz(__rbit64(v194)) + (v190 << 6);
          if (*(_QWORD *)(isUniquelyReferenced_nonNull_native + 16))
          {
LABEL_140:
            v196 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v193;
            v197 = *(_QWORD *)v196;
            v198 = *(_BYTE *)(v196 + 8);
            v199 = isUniquelyReferenced_nonNull_native;
            v200 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v196, v198);
            if ((v201 & 1) != 0)
            {
              v202 = *(float32x2_t **)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v200);
              swift_bridgeObjectRetain();
              v203 = specialized Dictionary.subscript.getter(v197, v198, v394);
              if (v203)
              {
                v204 = (float32x2_t *)v203;
                if (specialized Array.count.getter(v202) == 21)
                {
                  v205 = v390;
                }
                else
                {
                  v205 = v390;
                  v206 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_s5SIMD2VySfGs5NeverOTg5074_s5Hands13TrackingUtilsC25armJointToHandCenterAngle12jointsARvinoSfSgSays5g2VyT15GG_tFZAISiXEfU_SayAKGTf1cn_nTf4ng_n(v383, (uint64_t)v202);
                  swift_bridgeObjectRelease();
                  v202 = (float32x2_t *)v206;
                }
                if (specialized Array.count.getter(v204) != 21)
                {
                  v207 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_s5SIMD2VySfGs5NeverOTg5074_s5Hands13TrackingUtilsC25armJointToHandCenterAngle12jointsARvinoSfSgSays5g2VyT15GG_tFZAISiXEfU_SayAKGTf1cn_nTf4ng_n(v383, (uint64_t)v204);
                  swift_bridgeObjectRelease();
                  v204 = (float32x2_t *)v207;
                }
                *(_QWORD *)&v390 = v205;
                v208 = specialized static TrackingUtils.calculateBboxFromJoints(joints2d:)(v202);
                v210 = v209;
                v212 = v211;
                swift_bridgeObjectRelease();
                if ((v212 & 1) != 0)
                  goto LABEL_271;
                v213 = specialized static TrackingUtils.calculateBboxFromJoints(joints2d:)(v204);
                v215 = v214;
                v217 = v216;
                swift_bridgeObjectRelease();
                if ((v217 & 1) != 0)
                  goto LABEL_272;
                v218.i64[0] = v208;
                v218.i64[1] = v210;
                v219.i64[0] = v213;
                v219.i64[1] = v215;
                v220 = specialized static TrackingUtils.calculateIntersectionOverHand(bbox0:bbox1:)(v218, v219);
                v222 = specialized max<A>(_:_:)(v220, v221);
                v58 = (uint64_t)v399;
                v20 = v400;
                v45 = v403;
                isUniquelyReferenced_nonNull_native = v199;
                if (v5 < v222)
                {
                  v223 = v222;
                  v191 = specialized max<A>(_:_:)(v191, v222);
                  v5 = v223;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                v58 = (uint64_t)v399;
              }
            }
          }
        }
      }
      swift_bridgeObjectRelease();
    }
    v225 = *(double *)(v395 + 8);
    v5 = -1.0;
    if (v225 >= -1.0)
      goto LABEL_157;
    goto LABEL_160;
  }
  isUniquelyReferenced_nonNull_native = 0;
LABEL_167:
  v238 = 0.0;
  if (*(_QWORD *)(v80 + 16) == 2 && v381 == 2)
  {
    v239 = 1;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v45);
    v240 = v45;
    v241 = (char *)v45 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, 1, v240);
    v242 = (uint64_t)&v241[*(_QWORD *)(v20 + 72)];
    v243 = v376;
    outlined init with copy of TrackingUpdateDataPB(v242, v376, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v244 = *((_QWORD *)v241 + 18);
    v245 = specialized Dictionary.subscript.getter(v244, v80);
    if (v245)
    {
      v246 = *(_QWORD *)(v243 + 144);
      v247 = specialized Dictionary.subscript.getter(v246, v80);
      if (v247)
      {
        v248 = v247;
        v249 = specialized _copyCollectionToContiguousArray<A>(_:)(v245);
        swift_bridgeObjectRelease();
        v250 = specialized _copyCollectionToContiguousArray<A>(_:)(v248);
        swift_bridgeObjectRelease();
        LOBYTE(v248) = specialized static TwoHandOcclusionHelper.checkIfUpperHand(targetHandDepth:otherHandDepth:)(v249, v250);
        v20 = v400;
        swift_release();
        swift_release();
        v239 = 0;
        if ((v248 & 1) != 0)
          v245 = v244;
        else
          v245 = v246;
      }
      else
      {
        swift_bridgeObjectRelease();
        v245 = 0;
        v239 = 1;
      }
      v252 = v398;
      v253 = v376;
    }
    else
    {
      v252 = v398;
      v253 = v243;
    }
    v254 = *((_QWORD *)v241 + 2);
    v58 = (uint64_t)v399;
    if (v254)
    {
      v255 = *(_QWORD *)(v242 + 16);
      if (v255)
      {
        v256 = *(__n128 *)(v242 + 24);
        v258 = *((_QWORD *)v241 + 15);
        v257 = *((_QWORD *)v241 + 16);
        v259 = *(_OWORD *)(v241 + 104);
        v260 = *(_OWORD *)(v241 + 88);
        v261 = *(_OWORD *)(v241 + 72);
        v262 = *(_OWORD *)(v241 + 56);
        v263 = *(_OWORD *)(v241 + 40);
        v264 = *(_OWORD *)(v241 + 24);
        v401 = *(_OWORD *)(v242 + 40);
        v402 = v256;
        v265 = *(_OWORD *)(v242 + 56);
        v393 = *(_OWORD *)(v242 + 72);
        v394 = v265;
        v392 = *(_OWORD *)(v242 + 88);
        v390 = *(_OWORD *)(v242 + 104);
        v268 = v242 + 120;
        v266 = *(_QWORD *)(v242 + 120);
        v267 = *(_QWORD *)(v268 + 8);
        *(_OWORD *)((char *)v429 + 8) = v264;
        *(_OWORD *)((char *)&v429[1] + 8) = v263;
        *(_OWORD *)((char *)&v429[2] + 8) = v262;
        *(_OWORD *)((char *)&v429[3] + 8) = v261;
        *(_OWORD *)((char *)&v429[4] + 8) = v260;
        *(_OWORD *)((char *)&v429[5] + 8) = v259;
        *(_QWORD *)&v429[0] = v254;
        *((_QWORD *)&v429[6] + 1) = v258;
        LOWORD(v430) = v257 & 0x101;
        DWORD1(v430) = HIDWORD(v257);
        specialized static PinchGestureHelper.getPalmNormalHMD(_:)((uint64_t)v429);
        v389 = v269;
        *(__n128 *)((char *)v429 + 8) = v402;
        *(_OWORD *)((char *)&v429[1] + 8) = v401;
        *(_OWORD *)((char *)&v429[2] + 8) = v394;
        *(_OWORD *)((char *)&v429[3] + 8) = v393;
        *(_OWORD *)((char *)&v429[4] + 8) = v392;
        *(_OWORD *)((char *)&v429[5] + 8) = v390;
        v58 = (uint64_t)v399;
        *(_QWORD *)&v429[0] = v255;
        *((_QWORD *)&v429[6] + 1) = v266;
        LOWORD(v430) = v267 & 0x101;
        DWORD1(v430) = HIDWORD(v267);
        specialized static PinchGestureHelper.getPalmNormalHMD(_:)((uint64_t)v429);
        v271 = specialized static TwoHandOcclusionHelper.calculateRelativePalmAngle(_:_:)((float32x4_t)v389, v270);
        v253 = v376;
        v238 = v271;
        v251 = 0;
      }
      else
      {
        v251 = 1;
      }
      v252 = v398;
    }
    else
    {
      v251 = 1;
    }
    outlined destroy of HandDescriptor(v253);
    v45 = v403;
  }
  else
  {
    v245 = 0;
    v251 = 1;
    v239 = 1;
    v252 = v398;
  }
  *(_QWORD *)&v408 = specialized static Array._allocateUninitialized(_:)(0);
  v402.n128_u64[0] = specialized Array.count.getter(v45);
  if (v402.n128_u64[0])
  {
    LODWORD(v387) = v251;
    v386 = v245;
    *(_QWORD *)&v390 = isUniquelyReferenced_nonNull_native;
    v272 = 0;
    *(_QWORD *)&v401 = (char *)v45
                     + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    *(_QWORD *)&v392 = v391 + 16;
    *(_QWORD *)&v394 = v391 + 144;
    *(_QWORD *)&v393 = v391 + 160;
    v388 = v239;
    v389.n128_u64[0] = v385 + 184;
    do
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v272, 1, v403);
      isUniquelyReferenced_nonNull_native = v272 + 1;
      if (__OFADD__(v272, 1))
      {
        __break(1u);
        goto LABEL_257;
      }
      v278 = v401 + *(_QWORD *)(v20 + 72) * v272;
      v279 = v404;
      outlined init with copy of TrackingUpdateDataPB(v278, v404, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined init with copy of TrackingUpdateDataPB(v279, v252, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v280 = v436;
      v281 = *(_QWORD *)(v279 + 144);
      v282 = specialized Array.count.getter(v436);
      if (v282)
      {
        if (*(_QWORD *)(v280 + 32) == v281)
          goto LABEL_192;
        if (v282 != 1)
        {
          if (*(_QWORD *)(v280 + 40) == v281)
            goto LABEL_192;
          if (v282 != 2)
          {
            v306 = 6;
            do
            {
              v307 = v306 - 3;
              if (__OFADD__(v306 - 4, 1))
                goto LABEL_258;
              if (*(_QWORD *)(v280 + 8 * v306) == v281)
                goto LABEL_192;
              ++v306;
            }
            while (v307 != v282);
          }
        }
      }
      v283 = v252 + *(int *)(v397 + 96);
      outlined init with copy of (Int32, Matrix2dPB)(v283, v58, &demangling cache variable for type metadata for HandDescriptorInternal?);
      v284 = (int *)type metadata accessor for HandDescriptorInternal();
      v45 = (_QWORD *)*((_QWORD *)v284 - 1);
      v20 = v45[6];
      if (((unsigned int (*)(uint64_t, uint64_t, int *))v20)(v58, 1, v284) == 1)
      {
        outlined destroy of Coordinate3DPB?(v58, &demangling cache variable for type metadata for HandDescriptorInternal?);
        v285 = v394;
        *(_QWORD *)v394 = 0;
        *(_QWORD *)(v285 + 8) = 0;
        _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_((uint64_t)v429);
        outlined init with take of ImageData?((uint64_t)v429, v393, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
        v286 = (uint64_t)v391;
        v287 = &v391[v284[10]];
        v288 = type metadata accessor for ActionInternalPB(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v288 - 8) + 56))(v287, 1, 1, v288);
        v289 = v286 + v284[11];
        v290 = type metadata accessor for UnsureInternalPB(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v290 - 8) + 56))(v289, 1, 1, v290);
        v291 = v286 + v284[12];
        v292 = type metadata accessor for ObjectInteractionStateInternalPB(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v292 - 8) + 56))(v291, 1, 1, v292);
        v293 = v286 + v284[13];
        v294 = type metadata accessor for HomePinchInternalPB(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v294 - 8) + 56))(v293, 1, 1, v294);
        v295 = v284[14];
        *(_QWORD *)(v286 + v295) = specialized static Array._allocateUninitialized(_:)(0);
        v296 = v392;
        *(_OWORD *)v392 = 0u;
        *(_OWORD *)(v296 + 16) = 0u;
        *(_OWORD *)(v296 + 32) = 0u;
        *(_OWORD *)(v296 + 48) = 0u;
        *(_OWORD *)(v296 + 64) = 0u;
        *(_OWORD *)(v296 + 80) = 0u;
        *(_OWORD *)(v296 + 96) = 0u;
        *(_DWORD *)(v296 + 112) = 0;
        *(_BYTE *)(v286 + 8) = 2;
        v297 = specialized static Array._allocateUninitialized(_:)(0);
        *(_QWORD *)v286 = specialized Dictionary.init(dictionaryLiteral:)(v297);
        v298 = specialized static Array._allocateUninitialized(_:)(0);
        *(_QWORD *)(v286 + 136) = specialized Dictionary.init(dictionaryLiteral:)(v298);
        ((void (*)(uint64_t, _QWORD, uint64_t, int *))v45[7])(v286, 0, 1, v284);
        outlined assign with take of HandDescriptorInternal?(v286, v283);
        v280 = v436;
      }
      else
      {
        outlined destroy of Coordinate3DPB?(v58, &demangling cache variable for type metadata for HandDescriptorInternal?);
      }
      if (specialized Array.count.getter(v280) && (*(_BYTE *)(v395 + 2) & 1) != 0)
        goto LABEL_188;
      v58 = v437;
      v299 = *(_QWORD *)(v404 + 144);
      v300 = specialized Array.count.getter(v437);
      if (!v300)
        goto LABEL_188;
      if (*(_QWORD *)(v58 + 32) != v299)
      {
        if (v300 == 1)
          goto LABEL_188;
        if (*(_QWORD *)(v58 + 40) != v299)
        {
          if (v300 != 2)
          {
            v308 = 6;
            while (1)
            {
              v309 = v308 - 3;
              if (__OFADD__(v308 - 4, 1))
                break;
              if (*(_QWORD *)(v58 + 8 * v308) == v299)
                goto LABEL_204;
              ++v308;
              if (v309 == v300)
                goto LABEL_188;
            }
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
LABEL_263:
            __break(1u);
LABEL_264:
            __break(1u);
LABEL_265:
            __break(1u);
LABEL_266:
            (*(void (**)(uint64_t, _QWORD))(v379 + 8))(v383, v393);
LABEL_166:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v80 = v435;
            goto LABEL_167;
          }
          goto LABEL_188;
        }
      }
LABEL_204:
      if ((*(_BYTE *)(v395 + 1) & 1) != 0)
      {
        v301 = ((uint64_t (*)(uint64_t, uint64_t, int *))v20)(v283, 1, v284);
        v58 = (uint64_t)v399;
        if (!v301)
          *(_BYTE *)(v283 + 8) = 1;
        v302 = specialized Array.count.getter(v385);
        if (v302)
        {
          v303 = 0;
          v304 = (_BYTE *)v389.n128_u64[0];
          while (1)
          {
            v305 = v303 + 1;
            if (__OFADD__(v303, 1))
              break;
            if (*((_QWORD *)v304 - 17) == v299)
            {
              v310 = *v304;
              if ((*v304 & 1) == 0)
              {
                v311 = (*(_BYTE *)(v395 + 48) & 1) != 0 ? v388 : 1;
                if (((v387 | v311) & 1) == 0)
                {
                  v312 = v398 + *(int *)(v397 + 148);
                  *(_BYTE *)v312 = *(_QWORD *)(v398 + 144) == v386;
                  *(float *)(v312 + 4) = v238;
                  *(_BYTE *)(v312 + 8) = 0;
                }
              }
              v313 = v398;
              *(_BYTE *)(v398 + 4) = v310;
              *(_BYTE *)(v313 + 251) = 1;
              if (!((unsigned int (*)(uint64_t, uint64_t, int *))v20)(v283, 1, v284)
                && *(_QWORD *)(v283 + 48))
              {
                *(_BYTE *)(v283 + 24) = 1;
              }
              if (!((unsigned int (*)(uint64_t, uint64_t, int *))v20)(v283, 1, v284)
                && *(_QWORD *)(v283 + 48))
              {
                *(_QWORD *)(v283 + 32) = 3;
                *(_BYTE *)(v283 + 40) = 1;
              }
              goto LABEL_191;
            }
            ++v303;
            v304 += 320;
            if (v305 == v302)
              goto LABEL_191;
          }
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
          goto LABEL_259;
        }
        goto LABEL_191;
      }
LABEL_188:
      if (!((unsigned int (*)(uint64_t, uint64_t, int *))v20)(v283, 1, v284))
        *(_BYTE *)(v283 + 8) = 0;
      v58 = (uint64_t)v399;
LABEL_191:
      v273 = v398;
      v274 = v396;
      outlined init with copy of TrackingUpdateDataPB(v398, v396, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v275 = *(_QWORD *)(v408 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v275);
      v276 = v275;
      v252 = v273;
      v277 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v276, v274);
      _s5Hands13PoseImageCropVSgWOi_(v277);
      v20 = v400;
LABEL_192:
      outlined destroy of HandDescriptor(v404);
      outlined destroy of HandDescriptor(v252);
      v272 = isUniquelyReferenced_nonNull_native;
    }
    while (isUniquelyReferenced_nonNull_native != v402.n128_u64[0]);
  }
  swift_bridgeObjectRelease();
  v314 = swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)(v314, (uint64_t)&v408);
  v316 = v315;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Hands_trace_CBridge();
  v317 = v408;
  v318 = v438;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v320 = v378;
  *v378 = v317;
  v320[1] = v318;
  v320[2] = v316;
  v320[3] = 0;
  *((_BYTE *)v320 + 32) = 1;
  return result;
}

uint64_t outlined copy of TrackingUpdateData?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined assign with copy of DerivedHandAttributes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of LogMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LogMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t TemporalTransformSampler.__allocating_init(measurements:)(uint64_t a1)
{
  swift_allocObject();
  return TemporalTransformSampler.init(measurements:)(a1);
}

void __swiftcall TemporalTransformSampler.getTransform(timestamp:)(simd_float4x4 *__return_ptr retstr, Swift::Double timestamp)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  float v11;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = TemporalTransformSampler.getBaseIndex(timestamp:)(timestamp);
  if (v6 >= v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = v5 - 1;
  v8 = v4 + 32 + 96 * v6;
  if (v6 != v5 - 1)
  {
    v9 = timestamp - *(double *)v8;
    if (v6 || v9 > 0.0)
    {
      if ((uint64_t)v7 >= (uint64_t)(v6 + 1))
        v7 = v6 + 1;
      if (v7 < v5)
      {
        v10 = v4 + 32 + 96 * v7;
        v11 = v9 / (*(double *)v10 - *(double *)v8);
        simd_slerp(*(float32x4_t *)(v8 + 80), *(float32x4_t *)(v10 + 80), v11);
        MEMORY[0x2426376C0]();
        return;
      }
LABEL_11:
      __break(1u);
    }
  }
}

uint64_t specialized min<A>(_:_:)(uint64_t result, uint64_t a2)
{
  if (a2 < result)
    return a2;
  return result;
}

float specialized min<A>(_:_:)(float result, float a2)
{
  if (a2 < result)
    return a2;
  return result;
}

uint64_t specialized min<A>(_:_:)(uint64_t result, int a2)
{
  if (a2 >= (int)result)
    return result;
  else
    return a2;
}

uint64_t TemporalTransformSampler.init(measurements:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  simd_float4x4 *v10;
  uint64_t v11;
  simd_float4 v12;
  simd_float4 v13;
  unint64_t v14;
  simd_float4 *v15;
  simd_float4 v17;
  simd_float4 v18;
  simd_float4 v19;
  simd_float4 v20;
  simd_float4 v21;
  _QWORD *v22;
  simd_float4x4 v23;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v3 = swift_bridgeObjectRetain();
    v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
    swift_bridgeObjectRelease();
    v22 = v4;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v22);
    swift_bridgeObjectRelease();
    v5 = (uint64_t)v22;
    v6 = v22[2];
    if (v6)
    {
      v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      v7 = (uint64_t)v22;
      v8 = v22[2];
      v9 = 96 * v8 + 64;
      v10 = (simd_float4x4 *)(v5 + 48);
      do
      {
        v11 = v10[-1].columns[3].i64[0];
        v23 = *v10;
        v19 = v23.columns[1];
        v20 = v10->columns[0];
        v18 = v23.columns[2];
        v21 = v23.columns[3];
        *(double *)v12.i64 = simd_quaternion(*v10);
        v13 = v12;
        v22 = (_QWORD *)v7;
        v14 = *(_QWORD *)(v7 + 24);
        if (v8 >= v14 >> 1)
        {
          v17 = v12;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v8 + 1, 1);
          v13 = v17;
          v7 = (uint64_t)v22;
        }
        *(_QWORD *)(v7 + 16) = v8 + 1;
        v15 = (simd_float4 *)(v7 + v9);
        v15[-2].i64[0] = v11;
        v15[-1] = v20;
        *v15 = v19;
        v9 += 96;
        v10 = (simd_float4x4 *)((char *)v10 + 80);
        ++v8;
        v15[1] = v18;
        v15[2] = v21;
        v15[3] = v13;
        --v6;
      }
      while (v6);
      swift_release();
    }
    else
    {
      swift_release();
      v7 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)(v2 + 16) = v7;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

Swift::Int __swiftcall TemporalTransformSampler.getBaseIndex(timestamp:)(Swift::Double timestamp)
{
  Swift::Int result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v4 < 2)
    return 0;
  v5 = 0;
  v6 = v4 - 1;
  v7 = v3 + 32;
  while (1)
  {
    v8 = v5 + v6;
    if (__OFADD__(v5, v6))
      break;
    if (v8 >= 0)
      v9 = v5 + v6;
    else
      v9 = v8 + 1;
    if (v8 < -1)
      goto LABEL_19;
    result = v9 >> 1;
    if (v9 >> 1 >= v4)
      goto LABEL_19;
    v10 = *(double *)(v7 + 96 * result);
    if (v10 >= timestamp)
    {
      if (v10 <= timestamp)
        return result;
      v6 = result - 1;
    }
    else
    {
      v5 = result + 1;
      if (result + 1 >= v4)
        goto LABEL_20;
      if (*(double *)(v7 + 96 * v5) > timestamp)
        return result;
    }
    result = v5;
    if (v5 >= v6)
      return result;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void simd_slerp(float32x4_t a1, float32x4_t a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = vmulq_f32(a1, a2);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i32[0] = 0;
  _simd_slerp_internal(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

uint64_t TemporalTransformSampler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TemporalTransformSampler.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double v18;
  uint64_t result;
  double *v20;
  double *v21;
  double *v22;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 80;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 80;
  v22 = __dst;
  v21 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -79)
    {
      if (a4 != __src || &__src[10 * v11] <= a4)
        memmove(a4, __src, 80 * v11);
      v14 = &v4[10 * v11];
      v20 = v14;
      v22 = v6;
      if (v7 < v6 && v10 >= 80)
      {
        v15 = (double *)(a3 - 80);
        v16 = v6;
        while (1)
        {
          v17 = v15 + 10;
          v18 = *(v16 - 10);
          v16 -= 10;
          if (*(v14 - 10) >= v18)
          {
            v20 = v14 - 10;
            if (v17 < v14 || v15 >= v14 || v17 != v14)
              memmove(v15, v14 - 10, 0x50uLL);
            v16 = v6;
            v14 -= 10;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v17 != v6 || v15 >= v6)
              memmove(v15, v16, 0x50uLL);
            v22 = v16;
            if (v16 <= v7)
              goto LABEL_38;
          }
          v15 -= 10;
          v6 = v16;
          if (v14 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -79)
  {
    if (a4 != __dst || &__dst[10 * v9] <= a4)
      memmove(a4, __dst, 80 * v9);
    v12 = &v4[10 * v9];
    v20 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 80)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            memmove(v7, v4, 0x50uLL);
          v4 += 10;
          v21 = v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 10;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
            memmove(v7, v6, 0x50uLL);
        }
        v7 += 10;
        if (v4 >= v12)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v22 = v7;
    }
LABEL_38:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TemporalTransformSampler()
{
  return objc_opt_self();
}

uint64_t method lookup function for TemporalTransformSampler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TemporalTransformSampler.__allocating_init(measurements:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata instantiation function for CircularBuffer()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for CircularBuffer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CircularBuffer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for CircularBuffer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for CircularBuffer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CircularBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CircularBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CircularBuffer);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in CircularBuffer<A>()
{
  JUMPOUT(0x242638C74);
}

uint64_t CircularBuffer.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  char v14;

  swift_bridgeObjectRetain();
  v10 = CircularBuffer.firstAddedElementPtr.getter(a1, a2, a3, a4);
  v12 = v11;
  result = CircularBuffer.lastAddedElementPtr.getter(a1, a2, a3, a4);
  *(_QWORD *)a5 = a2;
  *(_QWORD *)(a5 + 8) = result;
  *(_BYTE *)(a5 + 16) = v14 & 1;
  *(_QWORD *)(a5 + 24) = v10;
  *(_BYTE *)(a5 + 32) = v12 & 1;
  *(_BYTE *)(a5 + 33) = 0;
  return result;
}

uint64_t CircularBufferIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Array();
  MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v6);
  if ((Collection.isEmpty.getter() & 1) != 0
    || *(_BYTE *)(v2 + 33) == 1
    || (*(_BYTE *)(v2 + 32) & 1) != 0
    || (*(_BYTE *)(v2 + 16) & 1) != 0)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 1, 1, v5);
  }
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v3 + 8);
  Array.subscript.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
  return $defer #1 <A>() in CircularBufferIterator.next()(v8, v9, v3, v5);
}

uint64_t $defer #1 <A>() in CircularBufferIterator.next()(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result == a2)
    *(_BYTE *)(a3 + 33) = 1;
  v6 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = swift_bridgeObjectRetain();
  v8 = MEMORY[0x242637540](v7, a4);
  result = swift_bridgeObjectRelease();
  if (!v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 != 0x8000000000000000 || v8 != -1)
  {
    *(_QWORD *)(a3 + 24) = v6 % v8;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t CircularBuffer.firstAddedElementPtr.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = type metadata accessor for Array();
  MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v8);
  if ((Collection.isEmpty.getter() & 1) != 0)
    return 0;
  result = MEMORY[0x24263754C](a2, a4);
  if (result)
  {
    if (MEMORY[0x242637540](a2, a4) == a1)
      return a3;
    else
      return 0;
  }
  return result;
}

uint64_t CircularBuffer.lastAddedElementPtr.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v8 = type metadata accessor for Array();
  MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v8);
  if ((Collection.isEmpty.getter() & 1) != 0)
    return 0;
  result = MEMORY[0x24263754C](a2, a4);
  if (result)
  {
    v10 = a3 - 1;
    if (__OFSUB__(a3, 1))
    {
      __break(1u);
    }
    else
    {
      v11 = __OFADD__(v10, a1);
      v12 = v10 + a1;
      if (!v11)
      {
        if (a1)
        {
          if (a1 != -1 || v12 != 0x8000000000000000)
            return v12 % a1;
LABEL_14:
          __break(1u);
          return result;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance CircularBuffer<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int16 v7;

  CircularBuffer.makeIterator()(*v2, v2[1], v2[2], *(_QWORD *)(a1 + 16), (uint64_t)v6);
  swift_bridgeObjectRelease();
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_WORD *)(a2 + 32) = v7;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CircularBuffer<A>()
{
  return 0;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance CircularBuffer<A>()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CircularBuffer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance CircularBuffer<A>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t initializeWithCopy for CircularBufferIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CircularBufferIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CircularBufferIterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for CircularBufferIterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CircularBufferIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CircularBufferIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CircularBufferIterator);
}

Swift::Void __swiftcall HandsKitPostProcessing.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  HandsKitConfig *v5;
  id v6;
  void *v7;
  HandsKitConfig *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  HandsKitConfig *v12;

  v2 = v1;
  v4 = objc_allocWithZone((Class)type metadata accessor for Enrolment());
  v5 = a1;
  v6 = Enrolment.init(options:)(v5);
  v7 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v6;

  type metadata accessor for PipelineStatistics();
  swift_allocObject();
  v8 = v5;
  v9 = specialized PipelineStatistics.init(options:)(v8);

  *(_QWORD *)(v2 + 24) = v9;
  swift_release();
  type metadata accessor for PrewittDataLogger();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = 0;
  *(_QWORD *)(v2 + 48) = v10;
  swift_release();
  v11 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v8;
  v12 = v8;

  *(_BYTE *)(v2 + 58) = -[HandsKitConfig SerializeInternalData](v12, sel_SerializeInternalData);
  *(_BYTE *)(v2 + 59) = -[HandsKitConfig DumpARKitResult](v12, sel_DumpARKitResult);
  *(_DWORD *)(v2 + 60) = -[HandsKitConfig DumpFrequency](v12, sel_DumpFrequency);
  *(_BYTE *)(v2 + 64) = -[HandsKitConfig StripRawData](v12, sel_StripRawData);
  *(_BYTE *)(v2 + 56) = -[HandsKitConfig OpenLoopErrorInjectionForTesting](v12, sel_OpenLoopErrorInjectionForTesting);
  *(_BYTE *)(v2 + 57) = -[HandsKitConfig SerializeRawImages](v12, sel_SerializeRawImages);
}

void *HandsKitPostProcessing.runSync(withInput:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[4];
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[35];
  _OWORD v55[35];
  _QWORD v56[70];
  _QWORD v57[70];
  _QWORD v58[70];
  _QWORD v59[70];
  _QWORD v60[72];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for HandDescriptor();
  v10 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52, v11);
  v13 = (float32x4_t *)((char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  memcpy(v57, a1, 0x228uLL);
  v14 = v57[57];
  memcpy(v56, a1, 0x228uLL);
  outlined retain of HandsKitData(v57);
  Hands_trace_CBridge();
  HandsKitPostProcessing.checkForOpenLoopError(_:)(v56);
  Hands_trace_CBridge();
  v15 = *(id *)(v3 + 16);
  Enrolment.runSync(withInput:)((uint64_t)v56, v60);

  memcpy(v58, v56, 0x228uLL);
  outlined release of HandsKitData(v58);
  memcpy(v59, v60, 0x228uLL);
  memcpy(v56, v60, 0x228uLL);
  outlined retain of HandsKitData(v59);
  Hands_trace_CBridge();
  Hands_trace_CBridge();
  memcpy(v54, v59, 0x228uLL);
  swift_retain();
  PipelineStatistics.runSync(withInput:)(v54, v55);
  swift_release();
  outlined release of HandsKitData(v59);
  memcpy(v60, v55, 0x228uLL);
  outlined release of HandsKitData(v60);
  Hands_trace_CBridge();
  Hands_trace_CBridge();
  if (*(_BYTE *)(v3 + 58) == 1)
  {
    v16 = v59[0];
    v17 = *(_QWORD *)(v59[0] + 16);
    v18 = MEMORY[0x24BEE4AF8];
    if (v17)
    {
      v45[2] = v14;
      v45[3] = v3;
      v46 = a2;
      v53 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      v51 = v17;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
      v19 = 0;
      v20 = *(unsigned __int8 *)(v10 + 80);
      v45[1] = v16;
      v50 = (v20 + 32) & ~v20;
      v49 = v16 + v50;
      v21 = *(_QWORD *)(v10 + 72);
      v22 = v56[25];
      v47 = v9;
      v48 = v21;
      do
      {
        v23 = v49 + v21 * v19;
        outlined init with copy of TrackingUpdateDataPB(v23, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined init with copy of HandDescriptorInternal?(v23 + *(int *)(v52 + 96), (uint64_t)v9);
        v24 = type metadata accessor for HandDescriptorInternal();
        LODWORD(v23) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v9, 1, v24);
        outlined destroy of Coordinate3DPB?((uint64_t)v9, &demangling cache variable for type metadata for HandDescriptorInternal?);
        if ((_DWORD)v23 != 1)
        {
          v25 = v13[12].i64[1];
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 16);
            if (v26)
            {
              swift_bridgeObjectRetain();
              v27 = (char *)(v25 + 40);
              do
              {
                if (*(_QWORD *)(v22 + 16))
                {
                  v38 = *v27;
                  v39 = *((_QWORD *)v27 - 1);
                  swift_bridgeObjectRetain();
                  v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v38);
                  if ((v41 & 1) != 0)
                  {
                    v28 = (_OWORD *)(*(_QWORD *)(v22 + 56) + 192 * v40);
                    v30 = v28[2];
                    v29 = v28[3];
                    v31 = v28[1];
                    v55[0] = *v28;
                    v55[1] = v31;
                    v55[2] = v30;
                    v55[3] = v29;
                    v32 = v28[4];
                    v33 = v28[5];
                    v34 = v28[7];
                    v55[6] = v28[6];
                    v55[7] = v34;
                    v55[4] = v32;
                    v55[5] = v33;
                    v35 = v28[8];
                    v36 = v28[9];
                    v37 = v28[11];
                    v55[10] = v28[10];
                    v55[11] = v37;
                    v55[8] = v35;
                    v55[9] = v36;
                    outlined retain of ImageData((uint64_t)v55);
                    swift_bridgeObjectRelease();
                    v54[8] = v55[8];
                    v54[9] = v55[9];
                    v54[10] = v55[10];
                    v54[11] = v55[11];
                    v54[4] = v55[4];
                    v54[5] = v55[5];
                    v54[6] = v55[6];
                    v54[7] = v55[7];
                    v54[0] = v55[0];
                    v54[1] = v55[1];
                    v54[2] = v55[2];
                    v54[3] = v55[3];
                    specialized static PoseModelUtils.populateCropBBoxField(_:_:)(v13, v54);
                    outlined release of ImageData((uint64_t)v55);
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                }
                v27 += 16;
                --v26;
              }
              while (v26);
              swift_bridgeObjectRelease();
              v9 = v47;
            }
          }
        }
        v18 = v53;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
          v18 = v53;
        }
        v43 = *(_QWORD *)(v18 + 16);
        v42 = *(_QWORD *)(v18 + 24);
        if (v43 >= v42 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
          v18 = v53;
        }
        ++v19;
        *(_QWORD *)(v18 + 16) = v43 + 1;
        v21 = v48;
        outlined init with take of Matrix2dPB((uint64_t)v13, v18 + v50 + v43 * v48, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      }
      while (v19 != v51);
      swift_bridgeObjectRelease();
      a2 = v46;
    }
    swift_bridgeObjectRelease();
    v56[0] = v18;
  }
  Hands_trace_CBridge();
  Hands_trace_CBridge();
  HandsKitPostProcessing.serializeRawImageData(_:)(v56);
  memcpy(v55, v56, 0x228uLL);
  outlined retain of HandsKitData(v55);
  HandsKitPostProcessing.dumpData(_:)((unint64_t)v56);
  outlined release of HandsKitData(v55);
  Hands_trace_CBridge();
  memcpy(v54, v55, 0x228uLL);
  outlined retain of HandsKitData(v55);
  swift_retain();
  PrewittDataLogger.run(_:)(v54);
  swift_release();
  outlined release of HandsKitData(v55);
  Hands_trace_CBridge();
  return memcpy(a2, v55, 0x228uLL);
}

void HandsKitPostProcessing.serializeRawImageData(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __CVBuffer *v31;
  void *BaseAddress;
  const void *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t Height;
  int64_t BytesPerRow;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSObject *v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[35];
  _OWORD v117[35];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  _OWORD v130[2];
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  MEMORY[0x24BDAC7A8](v3, v5);
  v101 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  if (*(_BYTE *)(v1 + 57) != 1)
    return;
  v10 = a1[61];
  v11 = *(_QWORD *)(v10 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (!v11)
    goto LABEL_35;
  v106 = (char *)&v91 - v8;
  v98 = v9;
  v91 = a1;
  v115 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
  v109 = (char *)&v117[8] + 8;
  v97 = v4 + 7;
  v13 = v11 - 1;
  v14 = 32;
  v102 = 0x800000023D9C7840;
  v103 = 0xD000000000000016;
  v92 = (unint64_t)"gressor is nil for ";
  v94 = 0x800000023D9C77E0;
  v96 = 0x800000023D9C7860;
  v107 = v10;
  v93 = v3;
  while (1)
  {
    v15 = *(_OWORD *)(v10 + v14);
    v16 = *(_OWORD *)(v10 + v14 + 16);
    v17 = *(_OWORD *)(v10 + v14 + 48);
    v117[2] = *(_OWORD *)(v10 + v14 + 32);
    v117[3] = v17;
    v117[0] = v15;
    v117[1] = v16;
    v18 = *(_OWORD *)(v10 + v14 + 64);
    v19 = *(_OWORD *)(v10 + v14 + 80);
    v20 = *(_OWORD *)(v10 + v14 + 112);
    v117[6] = *(_OWORD *)(v10 + v14 + 96);
    v117[7] = v20;
    v117[4] = v18;
    v117[5] = v19;
    v21 = *(_OWORD *)(v10 + v14 + 128);
    v22 = *(_OWORD *)(v10 + v14 + 144);
    v23 = *(_OWORD *)(v10 + v14 + 176);
    v117[10] = *(_OWORD *)(v10 + v14 + 160);
    v117[11] = v23;
    v117[8] = v21;
    v117[9] = v22;
    v24 = *(_OWORD *)(v10 + v14 + 80);
    v116[4] = *(_OWORD *)(v10 + v14 + 64);
    v116[5] = v24;
    v116[6] = *(_OWORD *)(v10 + v14 + 96);
    *(_QWORD *)&v116[7] = *(_QWORD *)(v10 + v14 + 112);
    v25 = *(_OWORD *)(v10 + v14 + 16);
    v116[0] = *(_OWORD *)(v10 + v14);
    v116[1] = v25;
    v26 = *(_OWORD *)(v10 + v14 + 48);
    v116[2] = *(_OWORD *)(v10 + v14 + 32);
    v116[3] = v26;
    v27 = *((_QWORD *)&v117[7] + 1);
    v28 = v21;
    v114 = *((_QWORD *)v109 + 6);
    v29 = *((_OWORD *)v109 + 2);
    v30 = *(_OWORD *)v109;
    v112 = *((_OWORD *)v109 + 1);
    v113 = v29;
    v111 = v30;
    if (!*((_QWORD *)&v117[3] + 1))
    {
      *((_QWORD *)&v119 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v118 = v103;
      *((_QWORD *)&v118 + 1) = v102;
      v43 = type metadata accessor for HandyLoggerNeo();
      v44 = static HandyLoggerNeo._currentLogLevel;
      outlined retain of ImageData((uint64_t)v117);
      if (v44 > 4)
      {
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v118);
        goto LABEL_28;
      }
      v110 = v28;
      v108 = v27;
      v104 = v14;
      v105 = v13;
      v61 = (void *)MEMORY[0x2426372E8](0xD000000000000051, v94);
      v62 = objc_msgSend(v61, sel_lastPathComponent);

      v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v64 = v63;

      v65 = v106;
      static Date.now.getter();
      if (one-time initialization token for _dispatchQ != -1)
        swift_once();
      v100 = (id)static HandyLoggerNeo._dispatchQ;
      v66 = v98;
      v67 = v101;
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v101, v65, v3);
      outlined init with copy of Any((uint64_t)&v118, (uint64_t)v130);
      v68 = (*(unsigned __int8 *)(v66 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
      v69 = (v97 + v68) & 0xFFFFFFFFFFFFFFF8;
      v70 = swift_allocObject();
      *(_DWORD *)(v70 + 16) = 4;
      *(_QWORD *)(v70 + 24) = v43;
      *(_OWORD *)(v70 + 32) = 0u;
      *(_OWORD *)(v70 + 48) = 0u;
      *(_DWORD *)(v70 + 64) = 1;
      *(_QWORD *)(v70 + 72) = v99;
      *(_QWORD *)(v70 + 80) = v64;
      *(_QWORD *)(v70 + 88) = 264;
      (*(void (**)(unint64_t, char *, uint64_t))(v66 + 32))(v70 + v68, v67, v3);
      outlined init with take of Any(v130, (_OWORD *)(v70 + v69));
      *(_QWORD *)(v70 + ((v69 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
      v71 = swift_allocObject();
      *(_QWORD *)(v71 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
      *(_QWORD *)(v71 + 24) = v70;
      *(_QWORD *)&v124 = thunk for @callee_guaranteed () -> ()partial apply;
      *((_QWORD *)&v124 + 1) = v71;
      *(_QWORD *)&v122 = MEMORY[0x24BDAC760];
      *((_QWORD *)&v122 + 1) = 1107296256;
      *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed () -> ();
      *((_QWORD *)&v123 + 1) = &block_descriptor_14_3;
      v72 = _Block_copy(&v122);
      v73 = v100;
      swift_retain();
      swift_release();
      dispatch_sync(v73, v72);

      _Block_release(v72);
      LOBYTE(v72) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v72 & 1) != 0)
        goto LABEL_38;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v106, v3);
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v118);
      v10 = v107;
      v27 = v108;
      v14 = v104;
      v13 = v105;
      goto LABEL_23;
    }
    v110 = v21;
    v31 = (__CVBuffer *)*((id *)&v117[3] + 1);
    outlined retain of ImageData((uint64_t)v117);
    CVPixelBufferLockBaseAddress(v31, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(v31);
    if (!BaseAddress)
    {
      *((_QWORD *)&v119 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v118 = 0xD000000000000027;
      *((_QWORD *)&v118 + 1) = v96;
      v45 = type metadata accessor for HandyLoggerNeo();
      if (static HandyLoggerNeo._currentLogLevel <= 4)
      {
        v46 = v45;
        v108 = v27;
        v104 = v14;
        v105 = v13;
        v47 = (void *)MEMORY[0x2426372E8](0xD000000000000051, v92 | 0x8000000000000000);
        v48 = objc_msgSend(v47, sel_lastPathComponent);

        v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v95 = v49;

        v50 = v106;
        static Date.now.getter();
        if (one-time initialization token for _dispatchQ != -1)
          swift_once();
        v100 = (id)static HandyLoggerNeo._dispatchQ;
        v51 = v98;
        v52 = v101;
        (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v101, v50, v3);
        outlined init with copy of Any((uint64_t)&v118, (uint64_t)v130);
        v53 = (*(unsigned __int8 *)(v51 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
        v54 = v3;
        v55 = (v97 + v53) & 0xFFFFFFFFFFFFFFF8;
        v56 = swift_allocObject();
        *(_DWORD *)(v56 + 16) = 4;
        *(_QWORD *)(v56 + 24) = v46;
        *(_OWORD *)(v56 + 32) = 0u;
        *(_OWORD *)(v56 + 48) = 0u;
        *(_DWORD *)(v56 + 64) = 1;
        v57 = v95;
        *(_QWORD *)(v56 + 72) = v99;
        *(_QWORD *)(v56 + 80) = v57;
        *(_QWORD *)(v56 + 88) = 272;
        (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v56 + v53, v52, v54);
        outlined init with take of Any(v130, (_OWORD *)(v56 + v55));
        *(_QWORD *)(v56 + ((v55 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
        v58 = swift_allocObject();
        *(_QWORD *)(v58 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
        *(_QWORD *)(v58 + 24) = v56;
        *(_QWORD *)&v124 = thunk for @callee_guaranteed () -> ()partial apply;
        *((_QWORD *)&v124 + 1) = v58;
        *(_QWORD *)&v122 = MEMORY[0x24BDAC760];
        *((_QWORD *)&v122 + 1) = 1107296256;
        *(_QWORD *)&v123 = thunk for @escaping @callee_guaranteed () -> ();
        *((_QWORD *)&v123 + 1) = &block_descriptor_25;
        v59 = _Block_copy(&v122);
        v60 = v100;
        swift_retain();
        swift_release();
        dispatch_sync(v60, v59);

        _Block_release(v59);
        LOBYTE(v59) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v59 & 1) != 0)
          goto LABEL_39;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v106, v54);
        swift_release();
        v3 = v54;
        v10 = v107;
        v27 = v108;
        v14 = v104;
        v13 = v105;
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v118);
      CVPixelBufferUnlockBaseAddress(v31, 1uLL);

LABEL_23:
      v28 = v110;
      goto LABEL_28;
    }
    v33 = BaseAddress;
    v34 = v14;
    v35 = v13;
    v36 = *((_QWORD *)&v117[7] + 1);
    v37 = *(_QWORD *)&v117[8];
    Height = CVPixelBufferGetHeight(v31);
    BytesPerRow = CVPixelBufferGetBytesPerRow(v31);
    v40 = Height * BytesPerRow;
    if ((unsigned __int128)(Height * (__int128)BytesPerRow) >> 64 != (Height * BytesPerRow) >> 63)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
    }
    if (v40)
    {
      if (v40 <= 14)
      {
        *(_QWORD *)((char *)&v122 + 6) = 0;
        *(_QWORD *)&v122 = 0;
        BYTE14(v122) = Height * BytesPerRow;
        memcpy(&v122, v33, v40);
        v108 = v122;
        v74 = DWORD2(v122);
        v75 = BYTE12(v122);
        v76 = BYTE13(v122);
        v77 = BYTE14(v122);
        outlined consume of Data?(v36, v37);
        v78 = v74 | (v75 << 32);
        v27 = v108;
        v42 = v78 | (v76 << 40) | (v77 << 48);
        v3 = v93;
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v41 = __DataStorage.init(bytes:length:)();
        if ((unint64_t)v40 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          v27 = swift_allocObject();
          *(_QWORD *)(v27 + 16) = 0;
          *(_QWORD *)(v27 + 24) = v40;
          outlined consume of Data?(v36, v37);
          v42 = v41 | 0x8000000000000000;
        }
        else
        {
          outlined consume of Data?(v36, v37);
          v27 = v40 << 32;
          v42 = v41 | 0x4000000000000000;
        }
      }
    }
    else
    {
      outlined consume of Data?(v36, v37);
      v27 = 0;
      v42 = 0xC000000000000000;
    }
    v10 = v107;
    v13 = v35;
    v14 = v34;
    CVPixelBufferUnlockBaseAddress(v31, 1uLL);

    v28 = v42;
LABEL_28:
    v126 = v116[4];
    v127 = v116[5];
    v128 = v116[6];
    v129 = *(_QWORD *)&v116[7];
    v122 = v116[0];
    v123 = v116[1];
    v124 = v116[2];
    v125 = v116[3];
    v118 = v111;
    v119 = v112;
    v120 = v113;
    v12 = v115;
    v121 = v114;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v12 = v115;
    }
    v80 = *(_QWORD *)(v12 + 16);
    v79 = *(_QWORD *)(v12 + 24);
    if (v80 >= v79 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
      v12 = v115;
    }
    *(_QWORD *)(v12 + 16) = v80 + 1;
    v81 = v12 + 192 * v80;
    v82 = v122;
    v83 = v123;
    v84 = v125;
    *(_OWORD *)(v81 + 64) = v124;
    *(_OWORD *)(v81 + 80) = v84;
    *(_OWORD *)(v81 + 32) = v82;
    *(_OWORD *)(v81 + 48) = v83;
    v85 = v128;
    v86 = v129;
    v87 = v127;
    *(_OWORD *)(v81 + 96) = v126;
    *(_OWORD *)(v81 + 112) = v87;
    *(_OWORD *)(v81 + 128) = v85;
    *(_QWORD *)(v81 + 144) = v86;
    *(_QWORD *)(v81 + 152) = v27;
    *(_QWORD *)(v81 + 160) = v28;
    v88 = v120;
    v89 = v121;
    v90 = v119;
    *(_OWORD *)(v81 + 168) = v118;
    *(_QWORD *)(v81 + 216) = v89;
    *(_OWORD *)(v81 + 200) = v88;
    *(_OWORD *)(v81 + 184) = v90;
    if (!v13)
      break;
    --v13;
    v14 += 192;
  }
  swift_bridgeObjectRelease();
  a1 = v91;
LABEL_35:
  memcpy(v116, a1, 0x228uLL);
  HandsKitData.init(updateData:withImages:)(v116, v12, v117);
  memcpy(a1, v117, 0x228uLL);
}

_QWORD *HandsKitPostProcessing.dumpData(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *result;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  NSString *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[70];
  _QWORD v80[70];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int16 v87;
  char v88;
  __int16 v89;
  char v90;
  _BYTE v91[336];

  v2 = v1;
  v4 = (_QWORD *)(a1 + 396);
  v77 = type metadata accessor for HandsKitDataPB(0);
  MEMORY[0x24BDAC7A8](v77, v5);
  v78 = (uint64_t)v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)v58 - v14;
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)v58 - v18;
  memcpy(v91, (const void *)a1, sizeof(v91));
  v20 = *(_QWORD *)(a1 + 336);
  v21 = *(_QWORD *)(a1 + 344);
  v22 = *(_QWORD *)(a1 + 352);
  v23 = *(_QWORD *)(a1 + 360);
  v24 = *(_QWORD *)(a1 + 368);
  v25 = *(_QWORD *)(a1 + 376);
  v26 = *(_QWORD *)(a1 + 384);
  v27 = *(unsigned __int8 *)(a1 + 392);
  v89 = *(_WORD *)(a1 + 393);
  v90 = *(_BYTE *)(a1 + 395);
  result = (_QWORD *)*v4;
  v29 = *(_DWORD *)(a1 + 404);
  v30 = *(_DWORD *)(a1 + 408);
  v31 = v4[2];
  v32 = v4[3];
  v33 = v4[4];
  v34 = v4[5];
  v35 = *(unsigned __int8 *)(a1 + 444);
  v87 = *(_WORD *)(a1 + 445);
  v88 = *(_BYTE *)(a1 + 447);
  v36 = *(_QWORD *)(a1 + 448);
  v37 = *(_OWORD *)(a1 + 504);
  v83 = *(_OWORD *)(a1 + 488);
  v84 = v37;
  v38 = *(_OWORD *)(a1 + 536);
  v85 = *(_OWORD *)(a1 + 520);
  v86 = v38;
  v39 = *(_OWORD *)(a1 + 472);
  v81 = *(_OWORD *)(a1 + 456);
  v82 = v39;
  if (*(_BYTE *)(v2 + 59) == 1)
  {
    v40 = *(_DWORD *)(v2 + 68);
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
    {
      __break(1u);
      outlined consume of Data._Representation(v2, a1);
      result = (_QWORD *)swift_unexpectedError();
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v2 + 68) = v42;
      v43 = *(_DWORD *)(v2 + 60);
      if (v43 >= 1 && !(v42 % v43))
      {
        v75 = (_QWORD *)((char *)&v79[49] + 4);
        v76 = v7;
        v44 = *(_BYTE *)(v2 + 64) == 0;
        v45 = 1952539766;
        if (*(_BYTE *)(v2 + 64))
          v45 = 7627108;
        v59 = v45;
        if (v44)
          v46 = (void *)0xE400000000000000;
        else
          v46 = (void *)0xE300000000000000;
        v79[0] = v21;
        v74 = result;
        v73 = v29;
        v60 = v20;
        v61 = v21;
        v62 = v23;
        v63 = v24;
        v64 = v25;
        v65 = v26;
        v66 = v27;
        v67 = v30;
        v68 = v31;
        v69 = v32;
        v70 = v33;
        v71 = v34;
        v72 = v35;
        v80[0] = dispatch thunk of CustomStringConvertible.description.getter();
        v80[1] = v47;
        v48._countAndFlagsBits = 46;
        v48._object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        v49._countAndFlagsBits = v59;
        v49._object = v46;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v58[1] = v80[1];
        v58[2] = v80[0];
        v50 = NSTemporaryDirectory();
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        v59 = v36;

        v51 = v76;
        URL.init(fileURLWithPath:)();
        swift_bridgeObjectRelease();
        URL.appendingPathComponent(_:)();
        v52 = *(void (**)(char *, uint64_t))(v8 + 8);
        v52(v11, v51);
        URL.appendingPathComponent(_:)();
        swift_bridgeObjectRelease();
        v52(v15, v51);
        memcpy(v79, v91, 0x150uLL);
        v79[42] = v60;
        v79[43] = v61;
        v79[44] = v22;
        v79[45] = v62;
        v79[46] = v63;
        v79[47] = v64;
        v79[48] = v65;
        LOBYTE(v79[49]) = v66;
        *(_WORD *)((char *)&v79[49] + 1) = v89;
        BYTE3(v79[49]) = v90;
        v53 = v75;
        *v75 = v74;
        HIDWORD(v79[50]) = v73;
        LODWORD(v79[51]) = v67;
        v53[2] = v68;
        v53[3] = v69;
        v53[4] = v70;
        v53[5] = v71;
        BYTE4(v79[55]) = v72;
        *(_WORD *)((char *)&v79[55] + 5) = v87;
        HIBYTE(v79[55]) = v88;
        v79[56] = v59;
        *(_OWORD *)&v79[61] = v83;
        *(_OWORD *)&v79[63] = v84;
        *(_OWORD *)&v79[65] = v85;
        *(_OWORD *)&v79[67] = v86;
        *(_OWORD *)&v79[57] = v81;
        *(_OWORD *)&v79[59] = v82;
        static HandsKitData.strippedHandsKitData(from:stripPixelBuffer:stripWarperMeshBin:stripWarperMeshBuffer:stripJpegData:stripRawData:stripCropData:stripPoseModelLatent:)(v79, *(unsigned __int8 *)(v2 + 64), *(_BYTE *)(v2 + 64), *(_BYTE *)(v2 + 64), *(unsigned __int8 *)(v2 + 64), *(_BYTE *)(v2 + 64), *(unsigned __int8 *)(v2 + 64), 1, (uint64_t)v80);
        memcpy(v79, v80, 0x228uLL);
        v54 = v78;
        HandsKitData.toProtoBuf()(v78);
        lazy protocol witness table accessor for type HandsKitDataPB and conformance HandsKitDataPB();
        v55 = Message.serializedData(partial:)();
        v57 = v56;
        outlined destroy of Matrix3x3PB(v54, type metadata accessor for HandsKitDataPB);
        Data.write(to:options:)();
        v52(v19, v51);
        outlined consume of Data._Representation(v55, v57);
        return outlined release of HandsKitData(v80);
      }
    }
  }
  return result;
}

void HandsKitPostProcessing.checkForOpenLoopError(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  void *v16;
  void *v17;
  uint32x2_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  __CVBuffer *v31;
  unint64_t v32;
  int64_t Width;
  size_t Height;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  uint32x2_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  int v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v122;
  void *v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(unint64_t, char *, uint64_t);
  uint64_t v135;
  uint64_t v136;
  void *v137;
  NSObject *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  void *v142;
  HandsKitConfig *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _BYTE *v156;
  _BYTE *v157;
  __int128 *v158;
  _OWORD *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint32x2_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  id v171;
  __int128 v172;
  int64_t v173;
  _QWORD *i;
  void (*v175)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  _OWORD v181[5];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  int v205;
  int v206;
  __int128 v207;
  __int128 v208;
  char v209;
  __int128 v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  char v221;
  _BYTE v222[552];
  _OWORD v223[2];
  __int128 v224;
  __int128 v225;

  v144 = type metadata accessor for Date();
  v147 = *(_QWORD *)(v144 - 8);
  MEMORY[0x24BDAC7A8](v144, v3);
  v152 = (char *)&v144 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = v4;
  MEMORY[0x24BDAC7A8](v5, v6);
  v146 = (char *)&v144 - v7;
  v8 = type metadata accessor for CMTimeProtobuf(0);
  v150 = *(_QWORD *)(v8 - 8);
  v151 = v8;
  MEMORY[0x24BDAC7A8](v8, v9);
  v149 = (char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for ImageExpirationEvent(0);
  MEMORY[0x24BDAC7A8](v148, v11);
  v13 = (uint64_t *)((char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v12) = *(unsigned __int8 *)(v1 + 56);
  v154 = v13;
  v155 = a1;
  if ((_DWORD)v12 != 1 || specialized RandomNumberGenerator.next<A>(upperBound:)(0x64uLL))
    goto LABEL_24;
  v145 = v1;
  *(_QWORD *)&v222[24] = MEMORY[0x24BEE0D00];
  *(_QWORD *)v222 = 0xD000000000000032;
  *(_QWORD *)&v222[8] = 0x800000023D9DB500;
  memset(v181, 0, 32);
  v14 = MEMORY[0x24BEE4AF8];
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000070, 0x800000023D9DB440, 139, 0, (uint64_t *)v181, (uint64_t)v222, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v222);
  v160 = a1[61];
  v15 = *(_QWORD *)(v160 + 16);
  if (!v15)
    goto LABEL_23;
  *(_QWORD *)&v224 = v14;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
  v14 = v224;
  v158 = &v187;
  v159 = &v181[2];
  v156 = &v222[160];
  v157 = &v222[32];
  v173 = v15 - 1;
  for (i = 0; ; i += 24)
  {
    v16 = *(void **)((char *)i + v160 + 32);
    v175 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)i + v160 + 40);
    LODWORD(v177) = *(_DWORD *)((char *)i + v160 + 48);
    LODWORD(v176) = *(_DWORD *)((char *)i + v160 + 52);
    v17 = *(void **)((char *)i + v160 + 88);
    v18 = *(uint32x2_t **)((char *)i + v160 + 96);
    v19 = *(_QWORD *)((char *)i + v160 + 104);
    v168 = *(_QWORD *)((char *)i + v160 + 56);
    v169 = v19;
    LODWORD(v180) = *((unsigned __int8 *)i + v160 + 112);
    LODWORD(v178) = *(_DWORD *)((char *)i + v160 + 116);
    v20 = *(_QWORD *)((char *)i + v160 + 128);
    v179 = *(_QWORD *)((char *)i + v160 + 120);
    v22 = *(_QWORD *)((char *)i + v160 + 136);
    v21 = *(_QWORD *)((char *)i + v160 + 144);
    v24 = *(_QWORD *)((char *)i + v160 + 152);
    v23 = *(_QWORD *)((char *)i + v160 + 160);
    v25 = *(_QWORD *)((char *)i + v160 + 176);
    v166 = *(_QWORD *)((char *)i + v160 + 184);
    v167 = v25;
    v171 = v17;
    v164 = v18;
    v165 = v14;
    *(_QWORD *)&v170 = v23;
    if (!v17)
    {
      swift_beginAccess();
      *(float32x2_t *)&v38 = vcvt_f32_u32(v18[18]);
      v172 = v38;
      swift_bridgeObjectRetain();
      v39 = v16;
      swift_retain();
      outlined copy of Data?(v22, v21);
      outlined copy of Data?(v24, v23);
      v35 = v172;
      v37 = v23;
      if (v20)
        goto LABEL_18;
LABEL_13:
      if ((v180 & 1) != 0)
      {
        v179 = qword_23D9C15F0[v169];
        v20 = qword_23D9C1660[v169];
      }
      else if ((unint64_t)(v169 - 2) >= 6)
      {
        v179 = 0;
        v20 = 0;
      }
      else
      {
        v179 = qword_23D9C16D0[v169 - 2];
        v20 = 0xE900000000000077;
      }
      goto LABEL_18;
    }
    v26 = v20;
    swift_bridgeObjectRetain();
    v27 = v16;
    v28 = v16;
    v29 = v171;
    v30 = v28;
    v31 = (__CVBuffer *)v29;
    v32 = v170;
    swift_retain();
    outlined copy of Data?(v22, v21);
    outlined copy of Data?(v24, v32);
    Width = CVPixelBufferGetWidth(v31);
    Height = CVPixelBufferGetHeight(v31);
    if ((unsigned __int128)(Width * (__int128)7) >> 64 != (7 * Width) >> 63)
      goto LABEL_47;
    if (Height == 7 * Width / 4)
      v36 = Width;
    else
      v36 = Height;
    *(float *)&v35 = (float)Width;
    *((float *)&v35 + 1) = (float)v36;
    v16 = v27;
    v20 = v26;
    v37 = v32;
    if (!v26)
      goto LABEL_13;
LABEL_18:
    *(_QWORD *)&v181[0] = v16;
    *((_QWORD *)&v181[0] + 1) = v175;
    *(_QWORD *)&v181[1] = __PAIR64__(v176, v177);
    v40 = v159;
    *((_QWORD *)v159 + 1) = 0;
    v40[2] = 0;
    *v40 = 0;
    v41 = v168;
    *((_QWORD *)&v181[1] + 1) = v168;
    v42 = v171;
    v43 = v164;
    *((_QWORD *)&v181[3] + 1) = v171;
    *(_QWORD *)&v181[4] = v164;
    v44 = v16;
    v45 = v169;
    *((_QWORD *)&v181[4] + 1) = v169;
    LOBYTE(v182) = v180;
    DWORD1(v182) = (_DWORD)v178;
    *((_QWORD *)&v182 + 1) = v179;
    *(_QWORD *)&v183 = v20;
    *((_QWORD *)&v183 + 1) = v22;
    *(_QWORD *)&v184 = v21;
    *((_QWORD *)&v184 + 1) = v24;
    *(_QWORD *)&v185 = v37;
    v162 = v22;
    v163 = v24;
    v47 = v166;
    v46 = v167;
    *((_QWORD *)&v185 + 1) = 1;
    *(_QWORD *)&v186 = v167;
    *((_QWORD *)&v186 + 1) = v166;
    v48 = v158;
    v161 = v21;
    *((_QWORD *)v158 + 1) = -1;
    *((_QWORD *)v48 + 2) = -1;
    *(_QWORD *)v48 = -1;
    *((_QWORD *)&v188 + 1) = v35;
    v172 = v35;
    swift_bridgeObjectRetain();
    outlined retain of ImageData((uint64_t)v181);
    swift_bridgeObjectRelease();

    *(_QWORD *)v222 = v44;
    *(_QWORD *)&v222[8] = v175;
    *(_DWORD *)&v222[16] = v177;
    *(_DWORD *)&v222[20] = v176;
    v49 = v157;
    *((_QWORD *)v157 + 1) = 0;
    v49[2] = 0;
    *v49 = 0;
    *(_QWORD *)&v222[24] = v41;
    *(_QWORD *)&v222[56] = v42;
    *(_QWORD *)&v222[64] = v43;
    *(_QWORD *)&v222[72] = v45;
    v222[80] = v180;
    *(_DWORD *)&v222[84] = (_DWORD)v178;
    *(_QWORD *)&v222[88] = v179;
    *(_QWORD *)&v222[96] = v20;
    *(_QWORD *)&v222[104] = v162;
    *(_QWORD *)&v222[112] = v161;
    *(_QWORD *)&v222[120] = v163;
    *(_QWORD *)&v222[128] = v170;
    *(_QWORD *)&v222[136] = 1;
    *(_QWORD *)&v222[144] = v46;
    *(_QWORD *)&v222[152] = v47;
    v50 = v156;
    *((_QWORD *)v156 + 1) = -1;
    v50[2] = -1;
    *v50 = -1;
    *(_QWORD *)&v222[184] = v172;
    outlined release of ImageData((uint64_t)v222);
    v14 = v165;
    *(_QWORD *)&v224 = v165;
    v52 = *(_QWORD *)(v165 + 16);
    v51 = *(_QWORD *)(v165 + 24);
    if (v52 >= v51 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      v14 = v224;
    }
    *(_QWORD *)(v14 + 16) = v52 + 1;
    v53 = (_OWORD *)(v14 + 192 * v52);
    v54 = v181[0];
    v55 = v181[1];
    v56 = v181[3];
    v53[4] = v181[2];
    v53[5] = v56;
    v53[2] = v54;
    v53[3] = v55;
    v57 = v181[4];
    v58 = v182;
    v59 = v184;
    v53[8] = v183;
    v53[9] = v59;
    v53[6] = v57;
    v53[7] = v58;
    v60 = v185;
    v61 = v186;
    v62 = v188;
    v53[12] = v187;
    v53[13] = v62;
    v53[10] = v60;
    v53[11] = v61;
    if (!v173)
      break;
    --v173;
  }
  swift_bridgeObjectRelease();
LABEL_23:
  v63 = *v155;
  v64 = v155[9];
  v65 = *((_DWORD *)v155 + 21);
  v66 = v155[16];
  v67 = *((_BYTE *)v155 + 136);
  v68 = *((_DWORD *)v155 + 44);
  v69 = v155[23];
  v70 = *((_OWORD *)v155 + 14);
  v71 = *((_OWORD *)v155 + 15);
  v72 = *((_OWORD *)v155 + 16);
  v73 = *((_OWORD *)v155 + 17);
  v74 = *((_OWORD *)v155 + 18);
  v75 = *((_OWORD *)v155 + 19);
  v76 = v155[45];
  v77 = v155[48];
  v78 = *((_BYTE *)v155 + 392);
  v79 = *(_QWORD *)((char *)v155 + 396);
  v80 = *((_DWORD *)v155 + 101);
  v81 = *((_DWORD *)v155 + 102);
  v82 = *((_BYTE *)v155 + 444);
  v83 = *((_BYTE *)v155 + 464);
  v84 = v155[59];
  v85 = v155[60];
  v86 = v155[66];
  v87 = v155[67];
  v88 = v155[68];
  LOBYTE(v224) = *((_BYTE *)v155 + 80);
  LOBYTE(v223[0]) = v67;
  v221 = v78;
  a1 = v155;
  v220 = v82;
  *(_QWORD *)&v181[0] = v63;
  *(_OWORD *)((char *)v181 + 8) = *(_OWORD *)(v155 + 1);
  *(_OWORD *)((char *)&v181[1] + 8) = *(_OWORD *)(v155 + 3);
  *(_OWORD *)((char *)&v181[2] + 8) = *(_OWORD *)(v155 + 5);
  *(_OWORD *)((char *)&v181[3] + 8) = *(_OWORD *)(v155 + 7);
  *((_QWORD *)&v181[4] + 1) = v64;
  LOBYTE(v182) = v224;
  DWORD1(v182) = v65;
  *((_QWORD *)&v182 + 1) = v155[11];
  v89 = *((_OWORD *)v155 + 7);
  v183 = *((_OWORD *)v155 + 6);
  v184 = v89;
  *(_QWORD *)&v185 = v66;
  BYTE8(v185) = v67;
  v90 = *((_OWORD *)v155 + 10);
  v186 = *((_OWORD *)v155 + 9);
  v187 = v90;
  LODWORD(v188) = v68;
  *((_QWORD *)&v188 + 1) = v69;
  v91 = *((_OWORD *)v155 + 13);
  v189 = *((_OWORD *)v155 + 12);
  v190 = v91;
  v191 = v70;
  v192 = v71;
  v193 = v72;
  v194 = v73;
  v195 = v74;
  v196 = v75;
  v92 = *((_OWORD *)v155 + 21);
  v197 = *((_OWORD *)v155 + 20);
  v198 = v92;
  v199 = v155[44];
  v200 = v76;
  v201 = *((_OWORD *)v155 + 23);
  v202 = v77;
  v203 = v221;
  v204 = v79;
  v205 = v80;
  v206 = v81;
  v93 = *(_OWORD *)((char *)v155 + 428);
  v207 = *(_OWORD *)((char *)v155 + 412);
  v208 = v93;
  v209 = v82;
  v210 = *((_OWORD *)v155 + 28);
  v211 = v83;
  v212 = v84;
  v213 = v85;
  v214 = v160;
  v94 = *((_OWORD *)v155 + 32);
  v215 = *((_OWORD *)v155 + 31);
  v216 = v94;
  v217 = v86;
  v218 = v87;
  v219 = v88;
  HandsKitData.init(updateData:withImages:)(v181, v14, v222);
  memcpy(a1, v222, 0x228uLL);
  v1 = v145;
  v13 = v154;
LABEL_24:
  v95 = mach_absolute_time();
  v96 = a1[61];
  v97 = *(_QWORD *)(v96 + 16);
  if (v97)
  {
    v98 = v95;
    v145 = v1;
    swift_bridgeObjectRetain();
    v99 = 0;
    v100 = 0;
    v101 = v13 + 2;
    v173 = (int64_t)"";
    v171 = (id)0x800000023D9DB440;
    *(_QWORD *)&v172 = v153 + 7;
    v170 = xmmword_23D9AB690;
    v102 = v97;
    while (2)
    {
      v103 = (192 * v99++) | 0x20;
      while (1)
      {
        v104 = *(_OWORD *)(v96 + v103);
        v105 = *(_OWORD *)(v96 + v103 + 16);
        v106 = *(_OWORD *)(v96 + v103 + 48);
        *(_OWORD *)&v222[32] = *(_OWORD *)(v96 + v103 + 32);
        *(_OWORD *)&v222[48] = v106;
        *(_OWORD *)v222 = v104;
        *(_OWORD *)&v222[16] = v105;
        v107 = *(_OWORD *)(v96 + v103 + 64);
        v108 = *(_OWORD *)(v96 + v103 + 80);
        v109 = *(_OWORD *)(v96 + v103 + 112);
        *(_OWORD *)&v222[96] = *(_OWORD *)(v96 + v103 + 96);
        *(_OWORD *)&v222[112] = v109;
        *(_OWORD *)&v222[64] = v107;
        *(_OWORD *)&v222[80] = v108;
        v110 = *(_OWORD *)(v96 + v103 + 128);
        v111 = *(_OWORD *)(v96 + v103 + 144);
        v112 = *(_OWORD *)(v96 + v103 + 160);
        *(_OWORD *)&v222[176] = *(_OWORD *)(v96 + v103 + 176);
        *(_OWORD *)&v222[160] = v112;
        *(_OWORD *)&v222[144] = v111;
        *(_OWORD *)&v222[128] = v110;
        v113 = *((_QWORD *)&v110 + 1);
        if (*((_QWORD *)&v110 + 1))
        {
          if (*((_QWORD *)&v110 + 1) < v98)
            break;
        }
        if (v97 == v99)
        {
          swift_bridgeObjectRelease();
          if ((v100 & 1) == 0)
            return;
          goto LABEL_43;
        }
        v103 += 192;
        if (v99++ >= v102)
          goto LABEL_46;
      }
      v179 = *(_QWORD *)&v222[72];
      LODWORD(v178) = v222[80];
      v115 = v154;
      v177 = v155[43];
      LODWORD(v176) = *((_DWORD *)v155 + 88);
      *v154 = 0;
      *((_BYTE *)v115 + 8) = 1;
      *v101 = 0;
      v101[1] = 0;
      i = v101;
      v116 = v148;
      outlined retain of ImageData((uint64_t)v222);
      UnknownStorage.init()();
      v117 = (uint64_t)v115 + *(int *)(v116 + 32);
      v175 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v150 + 56);
      v180 = v98;
      v118 = v151;
      v175(v117, 1, 1, v151);
      v119 = (uint64_t)v149;
      UnknownStorage.init()();
      *(_QWORD *)v119 = v177;
      *(_DWORD *)(v119 + 8) = v176;
      outlined destroy of Coordinate3DPB?(v117, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined init with take of Matrix2dPB(v119, v117, type metadata accessor for CMTimeProtobuf);
      v120 = v118;
      v98 = v180;
      v175(v117, 0, 1, v120);
      *v115 = v179;
      *((_BYTE *)v115 + 8) = (_BYTE)v178;
      v115[2] = v98;
      v115[3] = v113;
      *((_QWORD *)&v225 + 1) = v116;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v224);
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v115, (uint64_t)boxed_opaque_existential_0, type metadata accessor for ImageExpirationEvent);
      v122 = type metadata accessor for HandyLoggerNeo();
      if (static HandyLoggerNeo._currentLogLevel > 4)
      {
        outlined release of ImageData((uint64_t)v222);
        outlined destroy of Matrix3x3PB((uint64_t)v115, type metadata accessor for ImageExpirationEvent);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v224);
        if (v97 == v99)
          goto LABEL_45;
        goto LABEL_40;
      }
      v179 = v122;
      v123 = (void *)MEMORY[0x2426372E8](0xD000000000000070, v171);
      v124 = objc_msgSend(v123, sel_lastPathComponent);

      v125 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v176 = v126;
      v177 = v125;

      v127 = v146;
      static Date.now.getter();
      if (one-time initialization token for _dispatchQ != -1)
        swift_once();
      v178 = (id)static HandyLoggerNeo._dispatchQ;
      v128 = v147;
      v129 = v144;
      (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v152, v127, v144);
      outlined init with copy of Any((uint64_t)&v224, (uint64_t)v223);
      v130 = (*(unsigned __int8 *)(v128 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
      v131 = (v172 + v130) & 0xFFFFFFFFFFFFFFF8;
      v132 = swift_allocObject();
      *(_DWORD *)(v132 + 16) = 4;
      *(_QWORD *)(v132 + 24) = v179;
      *(_OWORD *)(v132 + 32) = v170;
      *(_QWORD *)(v132 + 48) = 0;
      *(_QWORD *)(v132 + 56) = 0;
      *(_DWORD *)(v132 + 64) = 1;
      v133 = v176;
      *(_QWORD *)(v132 + 72) = v177;
      *(_QWORD *)(v132 + 80) = v133;
      *(_QWORD *)(v132 + 88) = 166;
      v134 = *(void (**)(unint64_t, char *, uint64_t))(v128 + 32);
      v135 = v129;
      v134(v132 + v130, v152, v129);
      outlined init with take of Any(v223, (_OWORD *)(v132 + v131));
      *(_QWORD *)(v132 + ((v131 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
      v136 = swift_allocObject();
      *(_QWORD *)(v136 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
      *(_QWORD *)(v136 + 24) = v132;
      *(_QWORD *)&v181[2] = _sIg_Ieg_TRTA_0;
      *((_QWORD *)&v181[2] + 1) = v136;
      *(_QWORD *)&v181[0] = MEMORY[0x24BDAC760];
      *((_QWORD *)&v181[0] + 1) = 1107296256;
      *(_QWORD *)&v181[1] = thunk for @escaping @callee_guaranteed () -> ();
      *((_QWORD *)&v181[1] + 1) = &block_descriptor_26;
      v137 = _Block_copy(v181);
      v138 = v178;
      swift_retain();
      swift_release();
      dispatch_sync(v138, v137);

      _Block_release(v137);
      LOBYTE(v137) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v137 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v147 + 8))(v146, v135);
        swift_release();
        outlined release of ImageData((uint64_t)v222);
        outlined destroy of Matrix3x3PB((uint64_t)v154, type metadata accessor for ImageExpirationEvent);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v224);
        v98 = v180;
        if (v97 == v99)
        {
LABEL_45:
          swift_bridgeObjectRelease();
LABEL_43:
          v139 = MEMORY[0x24BEE0D00];
          *((_QWORD *)&v181[1] + 1) = MEMORY[0x24BEE0D00];
          *(_QWORD *)&v181[0] = 0xD00000000000003CLL;
          *((_QWORD *)&v181[0] + 1) = 0x800000023D9DB4C0;
          v224 = 0u;
          v225 = 0u;
          v140 = MEMORY[0x24BEE4AF8];
          specialized static HLog.E(file:function:line:privacy:logArea:_:_:)(0xD000000000000070, v173 | 0x8000000000000000, 172, 0, (uint64_t *)&v224, (uint64_t)v181, MEMORY[0x24BEE4AF8]);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v181);
          v141 = v155;
          swift_bridgeObjectRelease();
          *v141 = v140;
          v142 = *(void **)(v145 + 40);
          *((_QWORD *)&v181[1] + 1) = v139;
          *(_QWORD *)&v181[0] = 0xD000000000000023;
          *((_QWORD *)&v181[0] + 1) = 0x800000023D9CB700;
          v143 = v142;
          specialized static HLog.I(file:function:line:_:_:)(0xD00000000000005ELL, 0x800000023D9CB6A0, 54, (uint64_t)v181, v140);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v181);
          Tracking3D.reconfigTracking(_:)(v143);

          return;
        }
LABEL_40:
        v102 = *(_QWORD *)(v96 + 16);
        v100 = 1;
        v101 = i;
        if (v99 < v102)
          continue;
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
      }
      break;
    }
    __break(1u);
  }
}

uint64_t HandsKitPostProcessing.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandsKitPostProcessing()
{
  return objc_opt_self();
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x242638D64](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x242638D64](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23D944528()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type HandsKitDataPB and conformance HandsKitDataPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB;
  if (!lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB)
  {
    v1 = type metadata accessor for HandsKitDataPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandsKitDataPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB);
  }
  return result;
}

uint64_t sub_23D94459C()
{
  return swift_deallocObject();
}

uint64_t sub_23D9445B0()
{
  return swift_deallocObject();
}

uint64_t TypedKeysDictionary.makeIterator()(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v10 = ~v13;
    v9 = a1 + 64;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v11 = v15 & *(_QWORD *)(a1 + 64);
    v12 = a1;
  }
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v12;
  v16[3] = v9;
  v16[4] = v10;
  v16[5] = 0;
  v16[6] = v11;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a5;
  v17[6] = v16;
  swift_bridgeObjectRetain();
  swift_getTupleTypeMetadata2();
  return AnyIterator.init(_:)();
}

void (*static ModelUtils.getModelPath(modelDir:modelName:allowInternalModel:expectAbsolute:)(uint64_t a1, void *a2, uint64_t a3, void *a4, int a5, int a6))(char *, uint64_t)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  char v22;
  uint64_t ObjCClassFromMetadata;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  void (*v68)(char *, uint64_t);
  unint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  unsigned int v71;
  void *v72;
  char *v73;
  int v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  char *v80;
  int v81;
  char v82[16];
  _QWORD v83[2];

  v81 = a6;
  v74 = a5;
  v78 = a2;
  v79 = a1;
  v77 = type metadata accessor for URL.DirectoryHint();
  v8 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77, v9);
  v76 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v75 - 8);
  v13 = MEMORY[0x24BDAC7A8](v75, v12);
  v73 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13, v15);
  v18 = (char *)&v66 - v17;
  MEMORY[0x24BDAC7A8](v16, v19);
  v80 = (char *)&v66 - v20;
  v21 = String.lowercased()();
  if (v21._countAndFlagsBits == 0x6F72687473736170 && v21._object == (void *)0xEB00000000686775)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRetain();
    return (void (*)(char *, uint64_t))a3;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0 || (specialized Sequence<>.starts<A>(with:)() & 1) != 0)
    goto LABEL_6;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v25 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v26 = specialized static ModelUtils.getModelAbsolutePath(_:_:)(a3, (uint64_t)a4, v25);
  if (!v27)
  {
    v72 = v25;
    URL.init(fileURLWithPath:)();
    v83[0] = a3;
    v83[1] = a4;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
    v31 = v76;
    v30 = v77;
    v71 = *MEMORY[0x24BDCD7A0];
    v70 = v29;
    ((void (*)(char *))v29)(v76);
    v69 = lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(path:directoryHint:)();
    v32 = *(void (**)(char *, uint64_t))(v8 + 8);
    v32(v31, v30);
    v33 = URL.relativePath.getter();
    v35 = v34;
    v36 = *(void (**)(char *, uint64_t))(v11 + 8);
    v37 = v75;
    v36(v18, v75);
    v68 = (void (*)(char *, uint64_t))v33;
    v38 = v72;
    v39 = specialized static ModelUtils.getModelAbsolutePath(_:_:)(v33, v35, v72);
    if (v40)
    {
      a3 = v39;
      v36(v80, v37);

      if ((v81 & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        return v68;
      }
      return (void (*)(char *, uint64_t))a3;
    }
    v68 = v32;
    v41 = v71;
    swift_bridgeObjectRelease();
    v67 = v36;
    if ((v74 & 1) != 0)
    {
      strcpy((char *)v83, "__internal__");
      BYTE5(v83[1]) = 0;
      HIWORD(v83[1]) = -5120;
      v43 = v76;
      v42 = v77;
      v70(v76, v41, v77);
      v44 = v73;
      URL.appending<A>(path:directoryHint:)();
      v45 = v68;
      v68(v43, v42);
      swift_bridgeObjectRelease();
      v83[0] = a3;
      v83[1] = a4;
      v70(v43, v71, v42);
      URL.appending<A>(path:directoryHint:)();
      v45(v43, v42);
      v46 = v67;
      v67(v44, v37);
      v47 = URL.relativePath.getter();
      v49 = v48;
      v46(v18, v37);
      v50 = v72;
      v51 = specialized static ModelUtils.getModelAbsolutePath(_:_:)(v47, v49, v72);
      if (v52)
      {
        v53 = v51;
        v46(v80, v37);

        if ((v81 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (void (*)(char *, uint64_t))v53;
        }
        else
        {
          swift_bridgeObjectRelease();
          return (void (*)(char *, uint64_t))v47;
        }
      }
      swift_bridgeObjectRelease();
      v55 = (void *)0xE400000000000000;
      v54 = 1702195828;
    }
    else
    {
      v54 = 0x65736C6166;
      v55 = (void *)0xE500000000000000;
    }
    v56 = v80;
    v57 = v78;
    v83[0] = 0;
    v83[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(91);
    v58._object = (void *)0x800000023D9DB5C0;
    v58._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v58);
    v59._countAndFlagsBits = a3;
    v59._object = a4;
    String.append(_:)(v59);
    v60._countAndFlagsBits = 0x65726964206E6920;
    v60._object = (void *)0xEE002079726F7463;
    String.append(_:)(v60);
    v61._countAndFlagsBits = v79;
    v61._object = v57;
    String.append(_:)(v61);
    v62._countAndFlagsBits = 0xD000000000000028;
    v62._object = (void *)0x800000023D9DB5E0;
    String.append(_:)(v62);
    v63._countAndFlagsBits = v54;
    v63._object = v55;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64 = v83[0];
    a3 = v83[1];
    lazy protocol witness table accessor for type ModelUtils.ModelError and conformance ModelUtils.ModelError();
    swift_allocError();
    *v65 = v64;
    v65[1] = a3;
    swift_willThrow();

    v67(v56, v37);
    return (void (*)(char *, uint64_t))a3;
  }
  if ((v81 & 1) != 0)
  {
    v28 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v28 = a3;
  }
  v83[0] = a3;
  v83[1] = a4;
  strcpy(v82, "/__internal__/");
  v82[15] = -18;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.contains<A>(_:)();

  return (void (*)(char *, uint64_t))v28;
}

void (*static ModelUtils.getUberModelPath(_:_:)(uint64_t a1, void *a2, int a3))(char *, uint64_t)
{
  return static ModelUtils.getUberModelPath(_:_:)(a1, a2, a3, 0xD000000000000021, (void *)0x800000023D9DB640);
}

void (*static ModelUtils.getPoseModelPath(_:_:)(uint64_t a1, void *a2, int a3))(char *, uint64_t)
{
  return static ModelUtils.getUberModelPath(_:_:)(a1, a2, a3, 0xD000000000000021, (void *)0x800000023D9DB6A0);
}

void (*static ModelUtils.getMonoModelPath(_:_:)(uint64_t a1, void *a2, int a3))(char *, uint64_t)
{
  return static ModelUtils.getUberModelPath(_:_:)(a1, a2, a3, 0xD000000000000021, (void *)0x800000023D9DB670);
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  Swift::String_optional v0;
  uint64_t countAndFlagsBits;
  void *object;
  char v3;
  Swift::String_optional v4;
  Swift::String_optional v5;
  void *v6;
  _BOOL8 v7;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v4 = String.Iterator.next()();
      countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

void (*static ModelUtils.getPinchModelPath(_:_:)(uint64_t a1, void *a2, int a3))(char *, uint64_t)
{
  return static ModelUtils.getUberModelPath(_:_:)(a1, a2, a3, 0xD000000000000022, (void *)0x800000023D9DB610);
}

void (*static ModelUtils.getUberModelPath(_:_:)(uint64_t a1, void *a2, int a3, uint64_t a4, void *a5))(char *, uint64_t)
{
  uint64_t v5;
  void (*result)(char *, uint64_t);
  uint64_t v7;

  result = static ModelUtils.getModelPath(modelDir:modelName:allowInternalModel:expectAbsolute:)(a4, a5, a1, a2, a3, 0);
  if (v5)
    return (void (*)(char *, uint64_t))v7;
  return result;
}

uint64_t closure #1 in TypedKeysDictionary.makeIterator()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t TupleTypeMetadata2;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;

  result = swift_beginAccess();
  v9 = a1[2];
  if (v9 < 0)
  {
    if (__CocoaDictionary.Iterator.next()())
    {
      _forceBridgeFromObjectiveC<A>(_:_:)();
      swift_unknownObjectRelease();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      _forceBridgeFromObjectiveC<A>(_:_:)();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a4, 0, 1, TupleTypeMetadata2);
    }
    else
    {
      v25 = swift_getTupleTypeMetadata2();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a4, 1, 1, v25);
    }
    return swift_endAccess();
  }
  v10 = a1[3];
  v11 = a1[4];
  v13 = a1[5];
  v12 = a1[6];
  if (v12)
  {
    v28 = a1[4];
    v14 = a1[3];
    v15 = (v12 - 1) & v12;
    v16 = __clz(__rbit64(v12)) | (v13 << 6);
LABEL_4:
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, *(_QWORD *)(v9 + 48) + *(_QWORD *)(*(_QWORD *)(a2 - 8) + 72) * v16, a2);
    v17 = *(_QWORD *)(a3 - 8);
    v18 = *(_QWORD *)(v9 + 56) + *(_QWORD *)(v17 + 72) * v16;
    v19 = swift_getTupleTypeMetadata2();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16))(a4 + *(int *)(v19 + 48), v18, a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a4, 0, 1, v19);
    v20 = v13;
    v10 = v14;
    v11 = v28;
LABEL_22:
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = v11;
    a1[5] = v20;
    a1[6] = v15;
    return swift_endAccess();
  }
  v22 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    v23 = (unint64_t)(v11 + 64) >> 6;
    v20 = a1[5];
    if (v22 < v23)
    {
      v24 = *(_QWORD *)(v10 + 8 * v22);
      if (v24)
      {
LABEL_10:
        v28 = a1[4];
        v14 = a1[3];
        v15 = (v24 - 1) & v24;
        v16 = __clz(__rbit64(v24)) + (v22 << 6);
        v13 = v22;
        goto LABEL_4;
      }
      v20 = v13 + 1;
      if (v13 + 2 < v23)
      {
        v24 = *(_QWORD *)(v10 + 8 * (v13 + 2));
        if (v24)
        {
          v22 = v13 + 2;
          goto LABEL_10;
        }
        v22 = v13 + 3;
        v20 = v13 + 2;
        if (v13 + 3 < v23)
        {
          v24 = *(_QWORD *)(v10 + 8 * v22);
          if (v24)
            goto LABEL_10;
          v20 = v23 - 1;
          v26 = v13 + 4;
          while (v23 != v26)
          {
            v24 = *(_QWORD *)(v10 + 8 * v26++);
            if (v24)
            {
              v22 = v26 - 1;
              goto LABEL_10;
            }
          }
        }
      }
    }
    v27 = swift_getTupleTypeMetadata2();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a4, 1, 1, v27);
    v15 = 0;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TypedKeysDictionary<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t result;

  v4 = TypedKeysDictionary.makeIterator()(*v2, a1[2], a1[3], a1[4], a1[5]);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TypedKeysDictionary<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t IONamedSlice.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;

  v2 = v1;
  outlined init with copy of Any(a1, (uint64_t)&v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    outlined init with copy of Any(a1, (uint64_t)&v20);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v11 = *((_QWORD *)&v19[0] + 1);
      v10 = *(_QWORD *)&v19[0];
    }
    else
    {
      v10 = 0;
      v11 = 0xE000000000000000;
    }
    __swift_destroy_boxed_opaque_existential_0(a1);
    v2[2] = v10;
    v2[3] = v11;
    v2[5] = 0;
    v2[6] = 0;
    v2[4] = 0;
    return (unint64_t)v2;
  }
  v5 = *(_QWORD *)&v19[0];
  if (*(_QWORD *)(*(_QWORD *)&v19[0] + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
    if ((v6 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)&v19[0] + 56) + 32 * result, (uint64_t)v19);
      outlined init with take of Any(v19, &v20);
      swift_dynamicCast();
      v2[2] = v17;
      v2[3] = v18;
      v7 = *(_QWORD *)(v5 + 16);
      if (v7)
      {
        v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
        if ((v9 & 1) != 0
          && (outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v8, (uint64_t)&v20),
              swift_dynamicCast()))
        {
          v7 = *(_QWORD *)&v19[0];
        }
        else
        {
          v7 = 0;
        }
      }
      v2[4] = v7;
      v12 = *(_QWORD *)(v5 + 16);
      if (v12)
      {
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
        if ((v14 & 1) != 0
          && (outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v13, (uint64_t)&v20),
              swift_dynamicCast()))
        {
          v12 = *(_QWORD *)&v19[0];
        }
        else
        {
          v12 = 0;
        }
      }
      v2[5] = v12;
      if (*(_QWORD *)(v5 + 16)
        && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(1702521203, 0xE400000000000000), (v16 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v5 + 56) + 32 * v15, (uint64_t)&v20);
      }
      else
      {
        v20 = 0u;
        v21 = 0u;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0(a1);
      if (*((_QWORD *)&v21 + 1))
      {
        if (swift_dynamicCast())
        {
          v2[6] = *(_QWORD *)&v19[0];
          return (unint64_t)v2;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v20);
      }
      v2[6] = 0;
      return (unint64_t)v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t IONamedSlice.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IONamedSlice()
{
  return objc_opt_self();
}

void type metadata accessor for TypedKeysDictionary()
{
  JUMPOUT(0x242638C08);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TypedKeysDictionary<A, B>()
{
  JUMPOUT(0x242638C74);
}

_QWORD *specialized static ModelUtils.getEspressoOutputAsBuffer(_:_:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;

  v2 = v1;
  v3 = result[2];
  v4 = (void *)result[3];
  v6 = result[4];
  v5 = result[5];
  v7 = result[6];
  if (v7 >= 1)
  {
    v8 = 32;
    if ((unint64_t)v7 >= 0x20)
      v7 = 32;
    if (v5)
      goto LABEL_5;
LABEL_15:
    swift_retain();
    v15._countAndFlagsBits = v3;
    v15._object = v4;
    result = (_QWORD *)E5RTRegressor.getOutputLength(_:)(v15);
    v2 = v16;
    if (v16)
      return (_QWORD *)swift_release();
    v11 = (uint64_t)result;
    goto LABEL_8;
  }
  v8 = 1;
  v7 = 1;
  if (!v5)
    goto LABEL_15;
LABEL_5:
  v9 = __OFSUB__(v5, v6);
  v10 = v5 - v6;
  if (v9)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v10 * v7;
  if ((unsigned __int128)(v10 * (__int128)v7) >> 64 != (v10 * v7) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = (_QWORD *)swift_retain();
LABEL_8:
  if ((unint64_t)(v11 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_19;
  }
  v12 = E5RTRegressor.getRawOutput(_:)(v3, v4);
  if (v2)
    return (_QWORD *)swift_release();
  v13 = v12;
  result = (_QWORD *)swift_release();
  if (v13)
  {
    if ((unint64_t)(v6 - 0x2000000000000000) >> 62 == 3)
    {
      v14 = 4 * v6 * v8;
      if ((unsigned __int128)(4 * v6 * (__int128)v8) >> 64 == v14 >> 63)
        return (_QWORD *)(v13 + v14);
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized static ModelUtils.getModelAbsolutePath(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v12);
  v14 = (char *)&v25 - v13;
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x2426372E8](a1, a2);
  v16 = (void *)MEMORY[0x2426372E8](*(_QWORD *)"json", 0xE400000000000000);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(a3, sel_pathForResource_ofType_, v15, v16);

  if (v17)
    goto LABEL_4;
  swift_bridgeObjectRetain();
  v18 = (void *)MEMORY[0x2426372E8](a1, a2);
  v19 = (void *)MEMORY[0x2426372E8](7628142, 0xE300000000000000);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(a3, sel_pathForResource_ofType_, v18, v19);

  if (v17
    || (swift_bridgeObjectRetain(),
        v20 = (void *)MEMORY[0x2426372E8](a1, a2),
        v21 = (void *)MEMORY[0x2426372E8](*(_QWORD *)"bundle", 0xE600000000000000),
        swift_bridgeObjectRelease(),
        v17 = objc_msgSend(a3, sel_pathForResource_ofType_, v20, v21),
        v20,
        v21,
        v17))
  {
LABEL_4:
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_arrayDestroy();
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    URL.deletingPathExtension()();
    v22 = URL.relativePath.getter();
    v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    v23(v11, v6);
    v23(v14, v6);
  }
  else
  {
    swift_arrayDestroy();
    return 0;
  }
  return v22;
}

unint64_t lazy protocol witness table accessor for type ModelUtils.ModelError and conformance ModelUtils.ModelError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelUtils.ModelError and conformance ModelUtils.ModelError;
  if (!lazy protocol witness table cache variable for type ModelUtils.ModelError and conformance ModelUtils.ModelError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ModelUtils.ModelError, &type metadata for ModelUtils.ModelError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelUtils.ModelError and conformance ModelUtils.ModelError);
  }
  return result;
}

uint64_t sub_23D9459D8()
{
  outlined consume of [CameraSource : Float].Iterator._Variant();
  return swift_deallocObject();
}

uint64_t sub_23D945A04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TypedKeysDictionary.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TypedKeysDictionary.makeIterator()(*(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for ModelUtils.ModelError()
{
  return &type metadata for ModelUtils.ModelError;
}

double static LogArea.from(description:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if ((specialized Sequence<>.starts<A>(with:)() & 1) == 0)
  {
    if (a1 == 0x746C7561666544 && a2 == (void *)0xE700000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_14;
    }
    if (a1 == 0x6F72436567616D49 && a2 == (void *)0xE900000000000070
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9B16F0;
    }
    else if (a1 == 0x726F746365746544 && a2 == (void *)0xE800000000000000
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9A7060;
    }
    else if (a1 == 0x61724773646E6148 && a2 == (void *)0xEA00000000006870
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9AC010;
    }
    else if (a1 == 0x6E69726977657250 && a2 == (void *)0xEF7265706C654867
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9C18A0;
    }
    else if (a1 == 0x676E696B63617254 && a2 == (void *)0xE800000000000000
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9B03A0;
    }
    else if (a1 == 0xD000000000000014 && a2 == (void *)0x800000023D9DB770
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9B32A0;
    }
    else if (a1 == 0x6E6F69746341 && a2 == (void *)0xE600000000000000
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9A9550;
    }
    else if (a1 == 0x6E656D6C6F726E45 && a2 == (void *)0xE900000000000074
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9B1300;
    }
    else if (a1 == 0x68636E6950 && a2 == (void *)0xE500000000000000
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9A9560;
    }
    else if (a1 == 1702063952 && a2 == (void *)0xE400000000000000
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9A6CC0;
    }
    else if (a1 == 0xD000000000000011 && a2 == (void *)0x800000023D9DB7B0
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9C1890;
    }
    else if (a1 == 0x7267655254523545 && a2 == (void *)0xED0000726F737365
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9AB750;
    }
    else if (a1 == 0xD000000000000010 && a2 == (void *)0x800000023D9DB790
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9C1880;
    }
    else if (a1 == 0xD000000000000016 && a2 == (void *)0x800000023D9DB6D0
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9C1870;
    }
    else if (a1 == 0x6C697455656C6946 && a2 == (void *)0xE800000000000000
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9AC550;
    }
    else if (a1 == 0x74694B73646E6148 && a2 == (void *)0xED0000736C697455
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9A7070;
    }
    else if (a1 == 0xD000000000000015 && a2 == (void *)0x800000023D9DB750
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9A7090;
    }
    else if (a1 == 0x5074657361746144 && a2 == (void *)0xEF6B63616279616CLL
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9C1860;
    }
    else if (a1 == 0xD000000000000015 && a2 == (void *)0x800000023D9DB730
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9C1850;
    }
    else if (a1 == 0x756F536F65646956 && a2 == (void *)0xEB00000000656372
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9C1840;
    }
    else if (a1 == 0x6675626F746F7250 && a2 == (void *)0xEA00000000004F49
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9C1830;
    }
    else if (a1 == 0xD000000000000010 && a2 == (void *)0x800000023D9DB710
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9B1700;
    }
    else if (a1 == 0xD000000000000011 && a2 == (void *)0x800000023D9DB6F0
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9A8970;
    }
    else if (a1 == 0x676F4C746E657645 && a2 == (void *)0xEC000000676E6967
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v12 = xmmword_23D9AB690;
    }
    else
    {
      if ((a1 != 0x6C616E4165726F43 || a2 != (void *)0xED00007363697479)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        v18 = 0xD000000000000011;
        v19 = 0x800000023D9DB870;
        v16._countAndFlagsBits = a1;
        v16._object = a2;
        String.append(_:)(v16);
        v20 = MEMORY[0x24BEE0D00];
        v14 = MEMORY[0x24BEE4AF8];
        v15 = 82;
        goto LABEL_13;
      }
      v12 = xmmword_23D9A8B80;
    }
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    return *(double *)&v12;
  }
  v18 = a1;
  v19 = (unint64_t)a2;
  lazy protocol witness table accessor for type String and conformance String();
  v6 = MEMORY[0x24BEE0D00];
  v7 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
  if (v7[2] != 3)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v18 = 0xD00000000000001DLL;
    v19 = 0x800000023D9DB890;
    v13._countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
    v20 = v6;
    v14 = MEMORY[0x24BEE4AF8];
    v15 = 49;
LABEL_13:
    specialized static HLog.E(file:function:line:_:_:)(0xD00000000000004BLL, 0x800000023D9DB820, v15, (uint64_t)&v18, v14);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v18);
LABEL_14:
    *(_QWORD *)&v12 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return *(double *)&v12;
  }
  v9 = v7[6];
  v8 = v7[7];
  v11 = v7[8];
  v10 = v7[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v10;
  return *(double *)&v12;
}

unint64_t LogArea.description.getter()
{
  Swift::String *v0;
  unint64_t result;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v4;
  Swift::String v5;

  result = 0x746C7561666544;
  switch((unint64_t)v0->_object)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0x726F746365746544;
      break;
    case 2uLL:
      result = 0x6F72436567616D49;
      break;
    case 3uLL:
      result = 0x61724773646E6148;
      break;
    case 4uLL:
      result = 0x6E69726977657250;
      break;
    case 5uLL:
      result = 0xD000000000000014;
      break;
    case 6uLL:
      result = 0x676E696B63617254;
      break;
    case 7uLL:
      result = 0x6E6F69746341;
      break;
    case 8uLL:
      result = 0x6E656D6C6F726E45;
      break;
    case 9uLL:
      result = 0x68636E6950;
      break;
    case 0xAuLL:
      result = 0xD000000000000011;
      break;
    case 0xBuLL:
      result = 1702063952;
      break;
    case 0xCuLL:
      result = 0x7267655254523545;
      break;
    case 0xDuLL:
    case 0x16uLL:
      result = 0xD000000000000010;
      break;
    case 0xEuLL:
      result = 0xD000000000000016;
      break;
    case 0xFuLL:
      result = 0x6C697455656C6946;
      break;
    case 0x10uLL:
      result = 0x74694B73646E6148;
      break;
    case 0x11uLL:
      result = 0xD000000000000015;
      break;
    case 0x12uLL:
      result = 0x5074657361746144;
      break;
    case 0x13uLL:
      result = 0xD000000000000015;
      break;
    case 0x14uLL:
      result = 0x756F536F65646956;
      break;
    case 0x15uLL:
      result = 0x6675626F746F7250;
      break;
    case 0x17uLL:
      result = 0xD000000000000011;
      break;
    case 0x18uLL:
      result = 0x676F4C746E657645;
      break;
    case 0x19uLL:
      result = 0x6C616E4165726F43;
      break;
    default:
      countAndFlagsBits = v0[1]._countAndFlagsBits;
      object = v0[1]._object;
      String.append(_:)(*v0);
      v4._countAndFlagsBits = 95;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      v5._countAndFlagsBits = countAndFlagsBits;
      v5._object = object;
      String.append(_:)(v5);
      result = 0x5F4F496C65646F4DLL;
      break;
  }
  return result;
}

uint64_t static HLog.D(file:function:line:privacy:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD aBlock[6];
  _OWORD v49[2];

  v43 = (char *)a8;
  v44 = a6;
  v45 = a5;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12, v15);
  v16 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v39 - v19;
  v22 = *a7;
  v21 = a7[1];
  v23 = a7[2];
  v46 = a7[3];
  v47 = v21;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 1)
  {
    v25 = result;
    v41 = a9;
    v42 = v22;
    v26 = (void *)MEMORY[0x2426372E8](a1, a2);
    v27 = objc_msgSend(v26, sel_lastPathComponent);

    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v40 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
    outlined init with copy of Any((uint64_t)v43, (uint64_t)v49);
    v30 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v31 = (v14 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = v20;
    v32 = swift_allocObject();
    *(_DWORD *)(v32 + 16) = 1;
    *(_QWORD *)(v32 + 24) = v25;
    v33 = v42;
    v34 = v47;
    *(_QWORD *)(v32 + 32) = v42;
    *(_QWORD *)(v32 + 40) = v34;
    v35 = v46;
    *(_QWORD *)(v32 + 48) = v23;
    *(_QWORD *)(v32 + 56) = v35;
    *(_DWORD *)(v32 + 64) = v44;
    *(_QWORD *)(v32 + 72) = v39;
    *(_QWORD *)(v32 + 80) = v29;
    *(_QWORD *)(v32 + 88) = v45;
    v45 = v13;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v32 + v30, v16, v12);
    outlined init with take of Any(v49, (_OWORD *)(v32 + v31));
    *(_QWORD *)(v32 + ((v31 + 39) & 0xFFFFFFFFFFFFFFF8)) = v41;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v36 + 24) = v32;
    aBlock[4] = _sIg_Ieg_TRTA_0;
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_27;
    v37 = _Block_copy(aBlock);
    v38 = v40;
    outlined copy of LogArea(v33, v47);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v38, v37);

    _Block_release(v37);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v37 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v12);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_23D946BF4()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t static HLog.D(file:function:line:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];
  _OWORD v37[2];

  v35 = a5;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11, v14);
  v15 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v32 - v18;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 1)
  {
    v21 = result;
    v34 = a7;
    v22 = (void *)MEMORY[0x2426372E8](a1, a2);
    v23 = objc_msgSend(v22, sel_lastPathComponent);

    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v33 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
    outlined init with copy of Any(a6, (uint64_t)v37);
    v26 = (*(unsigned __int8 *)(v12 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v27 = (v13 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28 = swift_allocObject();
    *(_DWORD *)(v28 + 16) = 1;
    *(_QWORD *)(v28 + 24) = v21;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_DWORD *)(v28 + 64) = 1;
    *(_QWORD *)(v28 + 72) = v32;
    *(_QWORD *)(v28 + 80) = v25;
    *(_QWORD *)(v28 + 88) = v35;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v26, v15, v11);
    outlined init with take of Any(v37, (_OWORD *)(v28 + v27));
    *(_QWORD *)(v28 + ((v27 + 39) & 0xFFFFFFFFFFFFFFF8)) = v34;
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v29 + 24) = v28;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_14_4;
    v30 = _Block_copy(aBlock);
    v31 = v33;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v31, v30);

    _Block_release(v30);
    LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v30 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_23D946F00()
{
  return swift_deallocObject();
}

uint64_t static HLog.D(file:function:line:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  return specialized static HLog.D(file:function:line:logArea:_:_:)(a1, a2, a5, a6, a7, a8);
}

uint64_t static HLog.D(file:function:line:logArea:privacy:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD aBlock[6];
  _OWORD v49[2];

  v43 = (char *)a8;
  v44 = a7;
  v45 = a5;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12, v15);
  v16 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v39 - v19;
  v22 = *a6;
  v21 = a6[1];
  v23 = a6[2];
  v46 = a6[3];
  v47 = v21;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 1)
  {
    v25 = result;
    v41 = a9;
    v42 = v22;
    v26 = (void *)MEMORY[0x2426372E8](a1, a2);
    v27 = objc_msgSend(v26, sel_lastPathComponent);

    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v40 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
    outlined init with copy of Any((uint64_t)v43, (uint64_t)v49);
    v30 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v31 = (v14 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = v20;
    v32 = swift_allocObject();
    *(_DWORD *)(v32 + 16) = 1;
    *(_QWORD *)(v32 + 24) = v25;
    v33 = v42;
    v34 = v47;
    *(_QWORD *)(v32 + 32) = v42;
    *(_QWORD *)(v32 + 40) = v34;
    v35 = v46;
    *(_QWORD *)(v32 + 48) = v23;
    *(_QWORD *)(v32 + 56) = v35;
    *(_DWORD *)(v32 + 64) = v44;
    *(_QWORD *)(v32 + 72) = v39;
    *(_QWORD *)(v32 + 80) = v29;
    *(_QWORD *)(v32 + 88) = v45;
    v45 = v13;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v32 + v30, v16, v12);
    outlined init with take of Any(v49, (_OWORD *)(v32 + v31));
    *(_QWORD *)(v32 + ((v31 + 39) & 0xFFFFFFFFFFFFFFF8)) = v41;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v36 + 24) = v32;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_25_0;
    v37 = _Block_copy(aBlock);
    v38 = v40;
    outlined copy of LogArea(v33, v47);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v38, v37);

    _Block_release(v37);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v37 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v12);
      return swift_release();
    }
  }
  return result;
}

uint64_t static HLog.I(file:function:line:privacy:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  return specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(a1, a2, a5, a6, a7, a8, a9);
}

uint64_t static HLog.I(file:function:line:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized static HLog.I(file:function:line:_:_:)(a1, a2, a5, a6, a7);
}

uint64_t static HLog.I(file:function:line:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  return specialized static HLog.I(file:function:line:logArea:_:_:)(a1, a2, a5, a6, a7, a8);
}

uint64_t static HLog.I(file:function:line:logArea:privacy:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD aBlock[6];
  _OWORD v49[2];

  v43 = (char *)a8;
  v44 = a7;
  v45 = a5;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12, v15);
  v16 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v39 - v19;
  v22 = *a6;
  v21 = a6[1];
  v23 = a6[2];
  v46 = a6[3];
  v47 = v21;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 2)
  {
    v25 = result;
    v41 = a9;
    v42 = v22;
    v26 = (void *)MEMORY[0x2426372E8](a1, a2);
    v27 = objc_msgSend(v26, sel_lastPathComponent);

    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v40 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
    outlined init with copy of Any((uint64_t)v43, (uint64_t)v49);
    v30 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v31 = (v14 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = v20;
    v32 = swift_allocObject();
    *(_DWORD *)(v32 + 16) = 2;
    *(_QWORD *)(v32 + 24) = v25;
    v33 = v42;
    v34 = v47;
    *(_QWORD *)(v32 + 32) = v42;
    *(_QWORD *)(v32 + 40) = v34;
    v35 = v46;
    *(_QWORD *)(v32 + 48) = v23;
    *(_QWORD *)(v32 + 56) = v35;
    *(_DWORD *)(v32 + 64) = v44;
    *(_QWORD *)(v32 + 72) = v39;
    *(_QWORD *)(v32 + 80) = v29;
    *(_QWORD *)(v32 + 88) = v45;
    v45 = v13;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v32 + v30, v16, v12);
    outlined init with take of Any(v49, (_OWORD *)(v32 + v31));
    *(_QWORD *)(v32 + ((v31 + 39) & 0xFFFFFFFFFFFFFFF8)) = v41;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v36 + 24) = v32;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_36;
    v37 = _Block_copy(aBlock);
    v38 = v40;
    outlined copy of LogArea(v33, v47);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v38, v37);

    _Block_release(v37);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v37 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v12);
      return swift_release();
    }
  }
  return result;
}

uint64_t static HLog.W(file:function:line:privacy:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  return specialized static HLog.W(file:function:line:privacy:logArea:_:_:)(a1, a2, a5, a6, a7, a8, a9);
}

uint64_t static HLog.W(file:function:line:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized static HLog.W(file:function:line:_:_:)(a1, a2, a5, a6, a7);
}

uint64_t static HLog.W(file:function:line:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  return specialized static HLog.W(file:function:line:logArea:_:_:)(a1, a2, a5, a6, a7, a8);
}

uint64_t static HLog.W(file:function:line:logArea:privacy:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD aBlock[6];
  _OWORD v49[2];

  v43 = (char *)a8;
  v44 = a7;
  v45 = a5;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12, v15);
  v16 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v39 - v19;
  v22 = *a6;
  v21 = a6[1];
  v23 = a6[2];
  v46 = a6[3];
  v47 = v21;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 3)
  {
    v25 = result;
    v41 = a9;
    v42 = v22;
    v26 = (void *)MEMORY[0x2426372E8](a1, a2);
    v27 = objc_msgSend(v26, sel_lastPathComponent);

    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v40 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
    outlined init with copy of Any((uint64_t)v43, (uint64_t)v49);
    v30 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v31 = (v14 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = v20;
    v32 = swift_allocObject();
    *(_DWORD *)(v32 + 16) = 3;
    *(_QWORD *)(v32 + 24) = v25;
    v33 = v42;
    v34 = v47;
    *(_QWORD *)(v32 + 32) = v42;
    *(_QWORD *)(v32 + 40) = v34;
    v35 = v46;
    *(_QWORD *)(v32 + 48) = v23;
    *(_QWORD *)(v32 + 56) = v35;
    *(_DWORD *)(v32 + 64) = v44;
    *(_QWORD *)(v32 + 72) = v39;
    *(_QWORD *)(v32 + 80) = v29;
    *(_QWORD *)(v32 + 88) = v45;
    v45 = v13;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v32 + v30, v16, v12);
    outlined init with take of Any(v49, (_OWORD *)(v32 + v31));
    *(_QWORD *)(v32 + ((v31 + 39) & 0xFFFFFFFFFFFFFFF8)) = v41;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v36 + 24) = v32;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_47;
    v37 = _Block_copy(aBlock);
    v38 = v40;
    outlined copy of LogArea(v33, v47);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v38, v37);

    _Block_release(v37);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v37 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v12);
      return swift_release();
    }
  }
  return result;
}

uint64_t static HLog.E(file:function:line:privacy:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  return specialized static HLog.E(file:function:line:privacy:logArea:_:_:)(a1, a2, a5, a6, a7, a8, a9);
}

uint64_t static HLog.E(file:function:line:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized static HLog.E(file:function:line:_:_:)(a1, a2, a5, a6, a7);
}

uint64_t static HLog.E(file:function:line:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];
  _OWORD v46[2];

  v40 = (char *)a7;
  v41 = a5;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12, v15);
  v16 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v37 - v19;
  v21 = *a6;
  v22 = a6[1];
  v43 = a6[2];
  v44 = v21;
  v42 = a6[3];
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 4)
  {
    v24 = result;
    v39 = a8;
    v25 = (void *)MEMORY[0x2426372E8](a1, a2);
    v26 = objc_msgSend(v25, sel_lastPathComponent);

    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v27;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v38 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
    outlined init with copy of Any((uint64_t)v40, (uint64_t)v46);
    v29 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v30 = (v14 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    v40 = v20;
    v31 = swift_allocObject();
    *(_DWORD *)(v31 + 16) = 4;
    v32 = v44;
    *(_QWORD *)(v31 + 24) = v24;
    *(_QWORD *)(v31 + 32) = v32;
    v33 = v43;
    *(_QWORD *)(v31 + 40) = v22;
    *(_QWORD *)(v31 + 48) = v33;
    *(_QWORD *)(v31 + 56) = v42;
    *(_DWORD *)(v31 + 64) = 1;
    *(_QWORD *)(v31 + 72) = v37;
    *(_QWORD *)(v31 + 80) = v28;
    *(_QWORD *)(v31 + 88) = v41;
    v41 = v13;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v31 + v29, v16, v12);
    outlined init with take of Any(v46, (_OWORD *)(v31 + v30));
    *(_QWORD *)(v31 + ((v30 + 39) & 0xFFFFFFFFFFFFFFF8)) = v39;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v34 + 24) = v31;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_58;
    v35 = _Block_copy(aBlock);
    v36 = v38;
    outlined copy of LogArea(v44, v22);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v36, v35);

    _Block_release(v35);
    LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v35 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v12);
      return swift_release();
    }
  }
  return result;
}

uint64_t static HLog.E(file:function:line:logArea:privacy:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD aBlock[6];
  _OWORD v49[2];

  v43 = (char *)a8;
  v44 = a7;
  v45 = a5;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12, v15);
  v16 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v39 - v19;
  v22 = *a6;
  v21 = a6[1];
  v23 = a6[2];
  v46 = a6[3];
  v47 = v21;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 4)
  {
    v25 = result;
    v41 = a9;
    v42 = v22;
    v26 = (void *)MEMORY[0x2426372E8](a1, a2);
    v27 = objc_msgSend(v26, sel_lastPathComponent);

    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v40 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
    outlined init with copy of Any((uint64_t)v43, (uint64_t)v49);
    v30 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v31 = (v14 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = v20;
    v32 = swift_allocObject();
    *(_DWORD *)(v32 + 16) = 4;
    *(_QWORD *)(v32 + 24) = v25;
    v33 = v42;
    v34 = v47;
    *(_QWORD *)(v32 + 32) = v42;
    *(_QWORD *)(v32 + 40) = v34;
    v35 = v46;
    *(_QWORD *)(v32 + 48) = v23;
    *(_QWORD *)(v32 + 56) = v35;
    *(_DWORD *)(v32 + 64) = v44;
    *(_QWORD *)(v32 + 72) = v39;
    *(_QWORD *)(v32 + 80) = v29;
    *(_QWORD *)(v32 + 88) = v45;
    v45 = v13;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v32 + v30, v16, v12);
    outlined init with take of Any(v49, (_OWORD *)(v32 + v31));
    *(_QWORD *)(v32 + ((v31 + 39) & 0xFFFFFFFFFFFFFFF8)) = v41;
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v36 + 24) = v32;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_69;
    v37 = _Block_copy(aBlock);
    v38 = v40;
    outlined copy of LogArea(v33, v47);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v38, v37);

    _Block_release(v37);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v37 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v12);
      return swift_release();
    }
  }
  return result;
}

uint64_t static HLog.F(file:function:line:privacy:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, __int128 *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v17 = *a7;
  v14 = *((_QWORD *)a7 + 2);
  v15 = *((_QWORD *)a7 + 3);
  type metadata accessor for HandyLoggerNeo();
  v18 = v17;
  v19 = v14;
  v20 = v15;
  return static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, a6, (uint64_t *)&v18, a1, a2, a5, a8, a9);
}

uint64_t static HLog.F(file:function:line:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v13[2];

  type metadata accessor for HandyLoggerNeo();
  memset(v13, 0, sizeof(v13));
  return static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v13, a1, a2, a5, a6, a7);
}

uint64_t static HLog.F(file:function:line:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v16 = *a6;
  v13 = *((_QWORD *)a6 + 2);
  v14 = *((_QWORD *)a6 + 3);
  type metadata accessor for HandyLoggerNeo();
  v17 = v16;
  v18 = v13;
  v19 = v14;
  return static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v17, a1, a2, a5, a7, a8);
}

uint64_t static HLog.F(file:function:line:logArea:privacy:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v17 = *a6;
  v14 = *((_QWORD *)a6 + 2);
  v15 = *((_QWORD *)a6 + 3);
  type metadata accessor for HandyLoggerNeo();
  v18 = v17;
  v19 = v14;
  v20 = v15;
  return static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, a7, (uint64_t *)&v18, a1, a2, a5, a8, a9);
}

void static HLog.PerfStart(file:function:line:)()
{
  static HLog.startTime = CACurrentMediaTime();
  byte_256CA9298 = 0;
}

void static HLog.PerfEnd(file:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  char v12[24];
  uint64_t v13;

  v13 = MEMORY[0x24BEE0D00];
  strcpy(v12, "CPU time: %fms");
  v12[15] = -18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23D9A70A0;
  v9 = CACurrentMediaTime();
  if ((byte_256CA9298 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = MEMORY[0x24BEE1448];
    v11 = (v9 - *(double *)&static HLog.startTime) * 1000.0;
    *(_QWORD *)(v8 + 56) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v8 + 64) = v10;
    *(double *)(v8 + 32) = v11;
    specialized static HLog.I(file:function:line:_:_:)(a1, a2, a5, (uint64_t)v12, v8);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  }
}

uint64_t HLog.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t HLog.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static LogUtils.convertToJsonString(dictionary:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Class isa;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v0, v1);
  v2 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v14[0] = 0;
  v4 = objc_msgSend(v2, sel_dataWithJSONObject_options_error_, isa, 0, v14);

  v5 = v14[0];
  if (v4)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    static String.Encoding.utf8.getter();
    v9 = String.init(data:encoding:)();
    if (!v10)
      __break(1u);
    v11 = v9;
    outlined consume of Data._Representation(v6, v8);
    return v11;
  }
  else
  {
    v13 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t LogUtils.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized static HLog.D(file:function:line:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[6];
  _OWORD v44[2];

  v38 = (char *)a5;
  v39 = a3;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = MEMORY[0x24BDAC7A8](v10, v13);
  v15 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v16);
  v18 = (char *)&v35 - v17;
  v19 = *a4;
  v20 = a4[1];
  v41 = a4[2];
  v42 = v19;
  v40 = a4[3];
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 1)
  {
    v22 = result;
    v37 = a6;
    v23 = (void *)MEMORY[0x2426372E8](a1, a2);
    v24 = objc_msgSend(v23, sel_lastPathComponent);

    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v36 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v18, v10);
    outlined init with copy of Any((uint64_t)v38, (uint64_t)v44);
    v27 = (*(unsigned __int8 *)(v11 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v28 = (v12 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = v18;
    v29 = swift_allocObject();
    *(_DWORD *)(v29 + 16) = 1;
    v30 = v42;
    *(_QWORD *)(v29 + 24) = v22;
    *(_QWORD *)(v29 + 32) = v30;
    v31 = v41;
    *(_QWORD *)(v29 + 40) = v20;
    *(_QWORD *)(v29 + 48) = v31;
    *(_QWORD *)(v29 + 56) = v40;
    *(_DWORD *)(v29 + 64) = 1;
    *(_QWORD *)(v29 + 72) = v35;
    *(_QWORD *)(v29 + 80) = v26;
    *(_QWORD *)(v29 + 88) = v39;
    v39 = v11;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v29 + v27, v15, v10);
    outlined init with take of Any(v44, (_OWORD *)(v29 + v28));
    *(_QWORD *)(v29 + ((v28 + 39) & 0xFFFFFFFFFFFFFFF8)) = v37;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v32 + 24) = v29;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v32;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_113;
    v33 = _Block_copy(aBlock);
    v34 = v36;
    outlined copy of LogArea(v42, v20);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v34, v33);

    _Block_release(v33);
    LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v33 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v10);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_23D9487B8()
{
  return swift_deallocObject();
}

uint64_t specialized static HLog.W(file:function:line:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[6];
  _OWORD v44[2];

  v38 = (char *)a5;
  v39 = a3;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = MEMORY[0x24BDAC7A8](v10, v13);
  v15 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v16);
  v18 = (char *)&v35 - v17;
  v19 = *a4;
  v20 = a4[1];
  v41 = a4[2];
  v42 = v19;
  v40 = a4[3];
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 3)
  {
    v22 = result;
    v37 = a6;
    v23 = (void *)MEMORY[0x2426372E8](a1, a2);
    v24 = objc_msgSend(v23, sel_lastPathComponent);

    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v36 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v18, v10);
    outlined init with copy of Any((uint64_t)v38, (uint64_t)v44);
    v27 = (*(unsigned __int8 *)(v11 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v28 = (v12 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = v18;
    v29 = swift_allocObject();
    *(_DWORD *)(v29 + 16) = 3;
    v30 = v42;
    *(_QWORD *)(v29 + 24) = v22;
    *(_QWORD *)(v29 + 32) = v30;
    v31 = v41;
    *(_QWORD *)(v29 + 40) = v20;
    *(_QWORD *)(v29 + 48) = v31;
    *(_QWORD *)(v29 + 56) = v40;
    *(_DWORD *)(v29 + 64) = 1;
    *(_QWORD *)(v29 + 72) = v35;
    *(_QWORD *)(v29 + 80) = v26;
    *(_QWORD *)(v29 + 88) = v39;
    v39 = v11;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v29 + v27, v15, v10);
    outlined init with take of Any(v44, (_OWORD *)(v29 + v28));
    *(_QWORD *)(v29 + ((v28 + 39) & 0xFFFFFFFFFFFFFFF8)) = v37;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v32 + 24) = v29;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v32;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_135;
    v33 = _Block_copy(aBlock);
    v34 = v36;
    outlined copy of LogArea(v42, v20);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v34, v33);

    _Block_release(v33);
    LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v33 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v10);
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized static HLog.I(file:function:line:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[6];
  _OWORD v44[2];

  v38 = (char *)a5;
  v39 = a3;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = MEMORY[0x24BDAC7A8](v10, v13);
  v15 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v16);
  v18 = (char *)&v35 - v17;
  v19 = *a4;
  v20 = a4[1];
  v41 = a4[2];
  v42 = v19;
  v40 = a4[3];
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 2)
  {
    v22 = result;
    v37 = a6;
    v23 = (void *)MEMORY[0x2426372E8](a1, a2);
    v24 = objc_msgSend(v23, sel_lastPathComponent);

    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v36 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v18, v10);
    outlined init with copy of Any((uint64_t)v38, (uint64_t)v44);
    v27 = (*(unsigned __int8 *)(v11 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v28 = (v12 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = v18;
    v29 = swift_allocObject();
    *(_DWORD *)(v29 + 16) = 2;
    v30 = v42;
    *(_QWORD *)(v29 + 24) = v22;
    *(_QWORD *)(v29 + 32) = v30;
    v31 = v41;
    *(_QWORD *)(v29 + 40) = v20;
    *(_QWORD *)(v29 + 48) = v31;
    *(_QWORD *)(v29 + 56) = v40;
    *(_DWORD *)(v29 + 64) = 1;
    *(_QWORD *)(v29 + 72) = v35;
    *(_QWORD *)(v29 + 80) = v26;
    *(_QWORD *)(v29 + 88) = v39;
    v39 = v11;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v29 + v27, v15, v10);
    outlined init with take of Any(v44, (_OWORD *)(v29 + v28));
    *(_QWORD *)(v29 + ((v28 + 39) & 0xFFFFFFFFFFFFFFF8)) = v37;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v32 + 24) = v29;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v32;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_146;
    v33 = _Block_copy(aBlock);
    v34 = v36;
    outlined copy of LogArea(v42, v20);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v34, v33);

    _Block_release(v33);
    LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v33 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v10);
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized static HLog.W(file:function:line:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];
  _OWORD v35[2];

  v33 = a3;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v14 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)&v30 - v16;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 3)
  {
    v19 = result;
    v32 = a5;
    v20 = (void *)MEMORY[0x2426372E8](a1, a2);
    v21 = objc_msgSend(v20, sel_lastPathComponent);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v31 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v9);
    outlined init with copy of Any(a4, (uint64_t)v35);
    v24 = (*(unsigned __int8 *)(v10 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v25 = (v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject();
    *(_DWORD *)(v26 + 16) = 3;
    *(_QWORD *)(v26 + 24) = v19;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(_DWORD *)(v26 + 64) = 1;
    *(_QWORD *)(v26 + 72) = v30;
    *(_QWORD *)(v26 + 80) = v23;
    *(_QWORD *)(v26 + 88) = v33;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v26 + v24, v14, v9);
    outlined init with take of Any(v35, (_OWORD *)(v26 + v25));
    *(_QWORD *)(v26 + ((v25 + 39) & 0xFFFFFFFFFFFFFFF8)) = v32;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v27 + 24) = v26;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_124;
    v28 = _Block_copy(aBlock);
    v29 = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v29, v28);

    _Block_release(v28);
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v28 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized static HLog.E(file:function:line:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];
  _OWORD v35[2];

  v33 = a3;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v14 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)&v30 - v16;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 4)
  {
    v19 = result;
    v32 = a5;
    v20 = (void *)MEMORY[0x2426372E8](a1, a2);
    v21 = objc_msgSend(v20, sel_lastPathComponent);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v31 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v9);
    outlined init with copy of Any(a4, (uint64_t)v35);
    v24 = (*(unsigned __int8 *)(v10 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v25 = (v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject();
    *(_DWORD *)(v26 + 16) = 4;
    *(_QWORD *)(v26 + 24) = v19;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(_DWORD *)(v26 + 64) = 1;
    *(_QWORD *)(v26 + 72) = v30;
    *(_QWORD *)(v26 + 80) = v23;
    *(_QWORD *)(v26 + 88) = v33;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v26 + v24, v14, v9);
    outlined init with take of Any(v35, (_OWORD *)(v26 + v25));
    *(_QWORD *)(v26 + ((v25 + 39) & 0xFFFFFFFFFFFFFFF8)) = v32;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v27 + 24) = v26;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_168;
    v28 = _Block_copy(aBlock);
    v29 = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v29, v28);

    _Block_release(v28);
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v28 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized static HLog.I(file:function:line:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];
  _OWORD v35[2];

  v33 = a3;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v14 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)&v30 - v16;
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 2)
  {
    v19 = result;
    v32 = a5;
    v20 = (void *)MEMORY[0x2426372E8](a1, a2);
    v21 = objc_msgSend(v20, sel_lastPathComponent);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v31 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v9);
    outlined init with copy of Any(a4, (uint64_t)v35);
    v24 = (*(unsigned __int8 *)(v10 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v25 = (v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject();
    *(_DWORD *)(v26 + 16) = 2;
    *(_QWORD *)(v26 + 24) = v19;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(_DWORD *)(v26 + 64) = 1;
    *(_QWORD *)(v26 + 72) = v30;
    *(_QWORD *)(v26 + 80) = v23;
    *(_QWORD *)(v26 + 88) = v33;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v26 + v24, v14, v9);
    outlined init with take of Any(v35, (_OWORD *)(v26 + v25));
    *(_QWORD *)(v26 + ((v25 + 39) & 0xFFFFFFFFFFFFFFF8)) = v32;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v27 + 24) = v26;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_157;
    v28 = _Block_copy(aBlock);
    v29 = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v29, v28);

    _Block_release(v28);
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v28 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];
  _OWORD v46[2];

  v39 = (char *)a6;
  v40 = a4;
  v41 = a3;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11, v14);
  v15 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v36 - v18;
  v20 = *a5;
  v21 = a5[1];
  v43 = a5[2];
  v44 = v20;
  v42 = a5[3];
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 2)
  {
    v23 = result;
    v38 = a7;
    v24 = (void *)MEMORY[0x2426372E8](a1, a2);
    v25 = objc_msgSend(v24, sel_lastPathComponent);

    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v37 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v46);
    v28 = (*(unsigned __int8 *)(v12 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v29 = (v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    v39 = v19;
    v30 = swift_allocObject();
    *(_DWORD *)(v30 + 16) = 2;
    v31 = v44;
    *(_QWORD *)(v30 + 24) = v23;
    *(_QWORD *)(v30 + 32) = v31;
    v32 = v43;
    *(_QWORD *)(v30 + 40) = v21;
    *(_QWORD *)(v30 + 48) = v32;
    *(_QWORD *)(v30 + 56) = v42;
    *(_DWORD *)(v30 + 64) = v40;
    *(_QWORD *)(v30 + 72) = v36;
    *(_QWORD *)(v30 + 80) = v27;
    *(_QWORD *)(v30 + 88) = v41;
    v41 = v12;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v30 + v28, v15, v11);
    outlined init with take of Any(v46, (_OWORD *)(v30 + v29));
    *(_QWORD *)(v30 + ((v29 + 39) & 0xFFFFFFFFFFFFFFF8)) = v38;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v33 + 24) = v30;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v33;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_102;
    v34 = _Block_copy(aBlock);
    v35 = v37;
    outlined copy of LogArea(v44, v21);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v35, v34);

    _Block_release(v34);
    LOBYTE(v34) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v34 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v11);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_23D9499E4()
{
  return swift_deallocObject();
}

uint64_t specialized static HLog.E(file:function:line:privacy:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];
  _OWORD v46[2];

  v39 = (char *)a6;
  v40 = a4;
  v41 = a3;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11, v14);
  v15 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v36 - v18;
  v20 = *a5;
  v21 = a5[1];
  v43 = a5[2];
  v44 = v20;
  v42 = a5[3];
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 4)
  {
    v23 = result;
    v38 = a7;
    v24 = (void *)MEMORY[0x2426372E8](a1, a2);
    v25 = objc_msgSend(v24, sel_lastPathComponent);

    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v37 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v46);
    v28 = (*(unsigned __int8 *)(v12 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v29 = (v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    v39 = v19;
    v30 = swift_allocObject();
    *(_DWORD *)(v30 + 16) = 4;
    v31 = v44;
    *(_QWORD *)(v30 + 24) = v23;
    *(_QWORD *)(v30 + 32) = v31;
    v32 = v43;
    *(_QWORD *)(v30 + 40) = v21;
    *(_QWORD *)(v30 + 48) = v32;
    *(_QWORD *)(v30 + 56) = v42;
    *(_DWORD *)(v30 + 64) = v40;
    *(_QWORD *)(v30 + 72) = v36;
    *(_QWORD *)(v30 + 80) = v27;
    *(_QWORD *)(v30 + 88) = v41;
    v41 = v12;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v30 + v28, v15, v11);
    outlined init with take of Any(v46, (_OWORD *)(v30 + v29));
    *(_QWORD *)(v30 + ((v29 + 39) & 0xFFFFFFFFFFFFFFF8)) = v38;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v33 + 24) = v30;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v33;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_80;
    v34 = _Block_copy(aBlock);
    v35 = v37;
    outlined copy of LogArea(v44, v21);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v35, v34);

    _Block_release(v34);
    LOBYTE(v34) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v34 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v11);
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized static HLog.W(file:function:line:privacy:logArea:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];
  _OWORD v46[2];

  v39 = (char *)a6;
  v40 = a4;
  v41 = a3;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11, v14);
  v15 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v36 - v18;
  v20 = *a5;
  v21 = a5[1];
  v43 = a5[2];
  v44 = v20;
  v42 = a5[3];
  result = type metadata accessor for HandyLoggerNeo();
  if (static HandyLoggerNeo._currentLogLevel <= 3)
  {
    v23 = result;
    v38 = a7;
    v24 = (void *)MEMORY[0x2426372E8](a1, a2);
    v25 = objc_msgSend(v24, sel_lastPathComponent);

    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v37 = (id)static HandyLoggerNeo._dispatchQ;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v46);
    v28 = (*(unsigned __int8 *)(v12 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v29 = (v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    v39 = v19;
    v30 = swift_allocObject();
    *(_DWORD *)(v30 + 16) = 3;
    v31 = v44;
    *(_QWORD *)(v30 + 24) = v23;
    *(_QWORD *)(v30 + 32) = v31;
    v32 = v43;
    *(_QWORD *)(v30 + 40) = v21;
    *(_QWORD *)(v30 + 48) = v32;
    *(_QWORD *)(v30 + 56) = v42;
    *(_DWORD *)(v30 + 64) = v40;
    *(_QWORD *)(v30 + 72) = v36;
    *(_QWORD *)(v30 + 80) = v27;
    *(_QWORD *)(v30 + 88) = v41;
    v41 = v12;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v30 + v28, v15, v11);
    outlined init with take of Any(v46, (_OWORD *)(v30 + v29));
    *(_QWORD *)(v30 + ((v29 + 39) & 0xFFFFFFFFFFFFFFF8)) = v38;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = _s5Hands14HandyLoggerNeoC3log7atLevel11withPrivacy0H7LogArea6inFile6onLine7message0H4ArgsySo0bcjG0a_So0bciG0aAA0jK0OSSSiyps7CVarArg_pdtFZyyXEfU_TA_0;
    *(_QWORD *)(v33 + 24) = v30;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v33;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_91;
    v34 = _Block_copy(aBlock);
    v35 = v37;
    outlined copy of LogArea(v44, v21);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v35, v34);

    _Block_release(v34);
    LOBYTE(v34) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v34 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v11);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_23D94A050()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A064()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A078()
{
  return swift_deallocObject();
}

unint64_t destroy for LogArea(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for LogArea(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for LogArea(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LogArea(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LogArea(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFE5 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483622);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 25;
  if (v4 >= 0x1B)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LogArea(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFE6)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483622;
    if (a3 >= 0x7FFFFFE6)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFE6)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 25;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for LogArea(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LogArea()
{
  return &type metadata for LogArea;
}

uint64_t type metadata accessor for HLog()
{
  return objc_opt_self();
}

uint64_t method lookup function for HLog()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static HLog.V(file:function:line:privacy:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static HLog.V(file:function:line:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static HLog.V(file:function:line:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static HLog.V(file:function:line:logArea:privacy:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static HLog.D(file:function:line:privacy:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static HLog.D(file:function:line:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static HLog.D(file:function:line:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static HLog.D(file:function:line:logArea:privacy:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of static HLog.I(file:function:line:privacy:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of static HLog.I(file:function:line:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of static HLog.I(file:function:line:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of static HLog.I(file:function:line:logArea:privacy:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of static HLog.W(file:function:line:privacy:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of static HLog.W(file:function:line:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of static HLog.W(file:function:line:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of static HLog.W(file:function:line:logArea:privacy:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of static HLog.E(file:function:line:privacy:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of static HLog.E(file:function:line:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of static HLog.E(file:function:line:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of static HLog.E(file:function:line:logArea:privacy:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of static HLog.F(file:function:line:privacy:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of static HLog.F(file:function:line:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of static HLog.F(file:function:line:logArea:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of static HLog.F(file:function:line:logArea:privacy:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of static HLog.PerfStart(file:function:line:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of static HLog.PerfEnd(file:function:line:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t type metadata accessor for LogUtils()
{
  return objc_opt_self();
}

uint64_t method lookup function for LogUtils()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static LogUtils.convertToJsonString(dictionary:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_23D94A4EC()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A500()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A514()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A528()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A53C()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A550()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A564()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A578()
{
  return swift_deallocObject();
}

uint64_t sub_23D94A58C()
{
  return swift_deallocObject();
}

uint64_t PinchAcceptorDuringTouch.processAtPotentialMake(_:)(void *__src)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[776];

  memcpy(v3, __src, 0x306uLL);
  swift_beginAccess();
  *(_BYTE *)(v1 + 64) = 1;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  PichAcceptorWithMakeCandidate.resetPinchBuffer()();
  *(_BYTE *)(v1 + 80) = 1;
  result = PinchCandidateProcessor.assignMakeFrameCandidate(_:)((uint64_t)v3);
  *(_BYTE *)(v1 + 49) = 1;
  return result;
}

uint64_t PinchAcceptorDuringTouch.processAtPotentialTouchFrame(_:)(const void *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7[97];

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 72);
  v5 = __CFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    if (v6 >= 0x3E8)
      v6 = 1000;
    *(_QWORD *)(v1 + 72) = v6;
    memcpy(v7, a1, 0x306uLL);
    PichAcceptorWithMakeCandidate.updatePinchBuffer(_:)(v7);
    result = PinchAcceptorDuringTouch.checkRecoveryConditionsDuringTouch(_:)((uint64_t)a1);
    if (result == 8)
    {
      *(_BYTE *)(v1 + 64) = 0;
    }
    else if (result == 14)
    {
      *(_WORD *)(v1 + 33) = 257;
    }
  }
  return result;
}

uint64_t PinchAcceptorDuringTouch.checkRecoveryConditionsDuringTouch(_:)(uint64_t a1)
{
  uint64_t v1;
  float v2;
  float v3;
  unint64_t v4;
  unint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  float v10;

  v2 = *(float *)(a1 + 136);
  v3 = *(float *)(a1 + 536);
  v4 = *(_QWORD *)(v1 + 136);
  if (v4)
  {
    swift_beginAccess();
    if (*(_QWORD *)(v1 + 72) < v4)
      return 10;
  }
  if (v2 < v3)
    return 8;
  swift_beginAccess();
  v6 = specialized Sequence<>.max()(*(_QWORD *)(v1 + 112));
  if ((v6 & 0x100000000) != 0)
    v7 = 1.0;
  else
    v7 = *(float *)&v6;
  v8 = specialized Sequence<>.max()(*(_QWORD *)(v1 + 104));
  if (v7 > 1.0)
    v9 = v7;
  else
    v9 = 1.0;
  v10 = *(float *)&v8;
  if (v7 > *(float *)&v8)
    v10 = v7;
  if ((v8 & 0x100000000) == 0)
    v9 = v10;
  if (*(float *)(v1 + 128) >= v9)
    return 14;
  else
    return 6;
}

uint64_t PinchAcceptorDuringTouch.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorDuringTouch()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PinchAcceptorDuringTouch.ThresholdConfig()
{
  return &type metadata for PinchAcceptorDuringTouch.ThresholdConfig;
}

double Coordinate3D.coord(imageSpaceRaw:)()
{
  float32x4_t *v0;
  double result;
  float32x4_t v2;
  float32x4_t v3[4];

  v2 = v0[1];
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v3);
  *(_QWORD *)&result = vaddq_f32(v3[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v3[0], v2.f32[0]), v3[1], *(float32x2_t *)v2.f32, 1), v3[2], v2, 2)).u64[0];
  return result;
}

void Coordinate3D.init(withCoord:coordRaw:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  *a1 = a2;
  a1[1] = a3;
}

void Coordinate3D.init(withCoord:)(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  *a1 = a2;
  a1[1] = a2;
}

double static Coordinate3D.convert(point:transform:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5).u64[0];
  return result;
}

double Coordinate3D.coord(imageSpace:)()
{
  float32x4_t *v0;
  double result;
  float32x4_t v2;
  float32x4_t v3[4];

  v2 = *v0;
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v3);
  *(_QWORD *)&result = vaddq_f32(v3[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v3[0], v2.f32[0]), v3[1], *(float32x2_t *)v2.f32, 1), v3[2], v2, 2)).u64[0];
  return result;
}

__n128 Coordinate3D.coord.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void Coordinate3D.coord.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*Coordinate3D.coord.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

__n128 Coordinate3D.coordRaw.getter()
{
  __n128 *v0;

  return v0[1];
}

void Coordinate3D.coordRaw.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*Coordinate3D.coordRaw.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

__n128 Coordinate3D.init(withImageSpaceCoord:image:)@<Q0>(_OWORD *a1@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  float32x4_t v13;
  _OWORD v14[4];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = a1[8];
  v5 = a1[10];
  v6 = a1[11];
  v20 = a1[9];
  v21 = v5;
  v22 = v6;
  v7 = a1[5];
  v15 = a1[4];
  v16 = v7;
  v8 = a1[7];
  v17 = a1[6];
  v18 = v8;
  v19 = v4;
  v9 = a1[1];
  v14[0] = *a1;
  v14[1] = v9;
  v10 = a1[3];
  v14[2] = a1[2];
  v14[3] = v10;
  swift_beginAccess();
  v13 = vaddq_f32(*(float32x4_t *)(v15 + 240), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v15 + 192), a3.f32[0]), *(float32x4_t *)(v15 + 208), *(float32x2_t *)a3.f32, 1), *(float32x4_t *)(v15 + 224), a3, 2));
  outlined release of ImageData((uint64_t)v14);
  result = (__n128)v13;
  *a2 = v13;
  a2[1] = v13;
  return result;
}

void Coordinate3D.Coordinate3D(withUpdatedCoordinate:)(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  __int128 *v2;
  __int128 v3;

  v3 = *v2;
  *(__n128 *)a1 = a2;
  *(_OWORD *)(a1 + 16) = v3;
}

float32x2_t static Coordinate3D.normalize(coord:withCenter3D:withNormalizationFactor:)(float32x2_t a1, float32x4_t a2, int32x2_t a3)
{
  int32x4_t v3;
  float32x2_t v5;
  float32x2_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  simd_float3x3 v22;
  simd_float3x3 v23;

  v3 = (int32x4_t)vmulq_f32(a2, a2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v5 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5)));
  v22.columns[2] = (simd_float3)vmulq_n_f32(a2, vmul_f32(v6, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v6, v6))).f32[0]);
  v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22.columns[2], (int32x4_t)v22.columns[2]), (int8x16_t)v22.columns[2], 0xCuLL);
  v8 = vmlaq_f32(vmulq_f32(v7, (float32x4_t)xmmword_23D9B0390), (float32x4_t)xmmword_23D9A3E30, (float32x4_t)v22.columns[2]);
  v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
  v10 = (int32x4_t)vmulq_f32(v8, v8);
  v10.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), *(float32x2_t *)v10.i8)).u32[0];
  v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
  v22.columns[0] = (simd_float3)vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
  v13 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22.columns[0], (int32x4_t)v22.columns[0]), (int8x16_t)v22.columns[0], 0xCuLL), vnegq_f32((float32x4_t)v22.columns[2])), (float32x4_t)v22.columns[0], v7);
  v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
  v15 = (int32x4_t)vmulq_f32(v13, v13);
  v15.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), *(float32x2_t *)v15.i8)).u32[0];
  v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
  v22.columns[1] = (simd_float3)vmulq_n_f32(v14, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]);
  v23 = __invert_f3(v22);
  return vadd_f32(vdiv_f32(vsub_f32(a1, (float32x2_t)*(_OWORD *)&vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v23.columns[0], a2.f32[0]), (float32x4_t)v23.columns[1], *(float32x2_t *)a2.f32, 1), (float32x4_t)v23.columns[2], a2, 2)), (float32x2_t)vdup_lane_s32(a3, 0)), (float32x2_t)0x3F0000003F000000);
}

double static Coordinate3D.coord(cropSpace:imageSpaceCenter:)(double a1, float32x4_t a2)
{
  int32x4_t v2;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  double result;
  simd_float3x3 v19;
  simd_float3x3 v20;

  v2 = (int32x4_t)vmulq_f32(a2, a2);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4)));
  v19.columns[2] = (simd_float3)vmulq_n_f32(a2, vmul_f32(v5, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v5, v5))).f32[0]);
  v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19.columns[2], (int32x4_t)v19.columns[2]), (int8x16_t)v19.columns[2], 0xCuLL);
  v7 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_23D9B0390), (float32x4_t)xmmword_23D9A3E30, (float32x4_t)v19.columns[2]);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmulq_f32(v7, v7);
  v9.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), *(float32x2_t *)v9.i8)).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  v19.columns[0] = (simd_float3)vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19.columns[0], (int32x4_t)v19.columns[0]), (int8x16_t)v19.columns[0], 0xCuLL), vnegq_f32((float32x4_t)v19.columns[2])), (float32x4_t)v19.columns[0], v6);
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  v14 = (int32x4_t)vmulq_f32(v12, v12);
  v14.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), *(float32x2_t *)v14.i8)).u32[0];
  v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
  v19.columns[1] = (simd_float3)vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  v20 = __invert_f3(v19);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v20.columns[0], a2.f32[0]), (float32x4_t)v20.columns[1], *(float32x2_t *)a2.f32, 1), (float32x4_t)v20.columns[2], a2, 2).u64[0];
  return result;
}

ValueMetadata *type metadata accessor for Coordinate3D()
{
  return &type metadata for Coordinate3D;
}

uint64_t ImageCalibrationDataPB.intrinsics.setter(uint64_t a1)
{
  return ImageCalibrationDataPB.intrinsics.setter(a1, &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics);
}

uint64_t ImageCalibrationDataPB.extrinsics.setter(uint64_t a1)
{
  return ImageCalibrationDataPB.intrinsics.setter(a1, &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics);
}

uint64_t ImageCalibrationDataPB.intrinsics.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  v13 = *(int *)(type metadata accessor for ImageCalibrationDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
    swift_allocObject();
    v14 = swift_retain();
    *(_QWORD *)(v2 + v13) = ImageCalibrationDataPB._StorageClass.init(copying:)(v14);
    swift_release();
  }
  v15 = *(_QWORD *)(v2 + v13);
  outlined init with take of Matrix2dPB(a1, (uint64_t)v12, type metadata accessor for Matrix2dPB);
  v16 = type metadata accessor for Matrix2dPB(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 0, 1, v16);
  outlined init with take of Matrix2dPB?((uint64_t)v12, (uint64_t)v8);
  v17 = v15 + *a2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v8, v17, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_endAccess();
  return swift_release();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CameraType()
{
  lazy protocol witness table accessor for type CameraType and conformance CameraType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CameraType@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  *a1 = static CameraType.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CameraType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CameraType._protobuf_nameMap, a1);
}

uint64_t ImageCalibrationDataPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v59 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v58 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v57 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics;
  v17 = type metadata accessor for Matrix2dPB(0);
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v16, 1, 1, v17);
  v19 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters);
  v20 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters) = MEMORY[0x24BEE4AF8];
  v52 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics;
  v18();
  v21 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__cameraModel;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v22 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize) = v20;
  v23 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  v53 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  v24 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v54 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__warperMesh);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__warperMesh) = v20;
  v25 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  v55 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  v26 = type metadata accessor for Matrix3x3PB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  v56 = v1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  v28 = type metadata accessor for TransformMatrixPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v29, (uint64_t)v15, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v15, v16, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_endAccess();
  v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters);
  swift_beginAccess();
  v31 = *v30;
  swift_beginAccess();
  *v19 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v15, &demangling cache variable for type metadata for Matrix2dPB?);
  v33 = v52;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v15, v33, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_endAccess();
  v34 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__cameraModel);
  swift_beginAccess();
  v35 = *v34;
  LOBYTE(v34) = *((_BYTE *)v34 + 8);
  swift_beginAccess();
  *(_QWORD *)v21 = v35;
  *(_BYTE *)(v21 + 8) = (_BYTE)v34;
  v36 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize);
  swift_beginAccess();
  v37 = *v36;
  swift_beginAccess();
  *v22 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  swift_beginAccess();
  v39 = v57;
  outlined init with copy of (Int32, Matrix2dPB)(v38, v57, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v40 = v53;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v39, v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
  swift_endAccess();
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__warperMesh);
  swift_beginAccess();
  v42 = *v41;
  v43 = v54;
  swift_beginAccess();
  *v43 = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  swift_beginAccess();
  v45 = v58;
  outlined init with copy of (Int32, Matrix2dPB)(v44, v58, &demangling cache variable for type metadata for Matrix3x3PB?);
  v46 = v55;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v45, v46, &demangling cache variable for type metadata for Matrix3x3PB?);
  swift_endAccess();
  v47 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  swift_beginAccess();
  v48 = v59;
  outlined init with copy of (Int32, Matrix2dPB)(v47, v59, &demangling cache variable for type metadata for TransformMatrixPB?);
  swift_release();
  v49 = v56;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v48, v49, &demangling cache variable for type metadata for TransformMatrixPB?);
  swift_endAccess();
  return v1;
}

uint64_t ImageCalibrationDataPB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp, &demangling cache variable for type metadata for CMTimeProtobuf?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix, &demangling cache variable for type metadata for Matrix3x3PB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform, &demangling cache variable for type metadata for TransformMatrixPB?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ImageCalibrationDataPB._StorageClass()
{
  return type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
}

uint64_t type metadata accessor for ImageCalibrationDataPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ImageCalibrationDataPB._StorageClass);
}

void type metadata completion function for ImageCalibrationDataPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix3x3PB?, (void (*)(uint64_t))type metadata accessor for Matrix3x3PB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for TransformMatrixPB?, (void (*)(uint64_t))type metadata accessor for TransformMatrixPB);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for ImageCalibrationDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D94BCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageCalibrationDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D94BD78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ImageCalibrationDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ImageCalibrationDataPB);
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageDataPB(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    v8 = a3[8];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[9];
    v14 = (_DWORD *)((char *)v4 + v13);
    v15 = (_DWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for CMTimeProtobuf(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[2] = v15[2];
      v12((uint64_t)v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = a3[10];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for ImageCalibrationDataPB(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v12((uint64_t)v21, (uint64_t)v22, v11);
      *(_QWORD *)&v21[*(int *)(v23 + 20)] = *(_QWORD *)&v22[*(int *)(v23 + 20)];
      v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
      swift_retain();
      v26(v21, 0, 1, v23);
    }
    v27 = a3[11];
    v28 = (char *)v4 + v27;
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = v29[1];
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
    }
    else
    {
      v31 = *v29;
      outlined copy of Data._Representation(*v29, v29[1]);
      *(_QWORD *)v28 = v31;
      *((_QWORD *)v28 + 1) = v30;
    }
    v32 = a3[12];
    v33 = (char *)v4 + v32;
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = v34[1];
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v36 = *v34;
      outlined copy of Data._Representation(*v34, v34[1]);
      *(_QWORD *)v33 = v36;
      *((_QWORD *)v33 + 1) = v35;
    }
    v37 = a3[13];
    v38 = a3[14];
    v39 = (char *)v4 + v37;
    v40 = (uint64_t)a2 + v37;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = *(_BYTE *)(v40 + 8);
    v41 = (char *)v4 + v38;
    v42 = (uint64_t)a2 + v38;
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = *(_BYTE *)(v42 + 8);
  }
  return v4;
}

uint64_t destroy for ImageDataPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[9];
  v8 = type metadata accessor for CMTimeProtobuf(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    v6(v7 + *(int *)(v8 + 24), v5);
  v9 = a1 + a2[10];
  v10 = type metadata accessor for ImageCalibrationDataPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    v6(v9, v5);
    result = swift_release();
  }
  v12 = (uint64_t *)(a1 + a2[11]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    result = outlined consume of Data._Representation(*v12, v13);
  v14 = (uint64_t *)(a1 + a2[12]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    return outlined consume of Data._Representation(*v14, v15);
  return result;
}

uint64_t initializeWithCopy for ImageDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[9];
  v13 = (_DWORD *)(a1 + v12);
  v14 = (_DWORD *)(a2 + v12);
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[2] = v14[2];
    v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[10];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for ImageCalibrationDataPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v19, (uint64_t)v20, v10);
    *(_QWORD *)&v19[*(int *)(v21 + 20)] = *(_QWORD *)&v20[*(int *)(v21 + 20)];
    v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
    swift_retain();
    v24(v19, 0, 1, v21);
  }
  v25 = a3[11];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  else
  {
    v29 = *v27;
    outlined copy of Data._Representation(*v27, v27[1]);
    *(_QWORD *)v26 = v29;
    *(_QWORD *)(v26 + 8) = v28;
  }
  v30 = a3[12];
  v31 = a1 + v30;
  v32 = (uint64_t *)(a2 + v30);
  v33 = v32[1];
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    outlined copy of Data._Representation(*v32, v32[1]);
    *(_QWORD *)v31 = v34;
    *(_QWORD *)(v31 + 8) = v33;
  }
  v35 = a3[13];
  v36 = a3[14];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  return a1;
}

uint64_t assignWithCopy for ImageDataPB(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v57 = *(_QWORD *)(v11 - 8);
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 24);
  v56(v9, v10, v11);
  v12 = a3[9];
  v13 = (char *)(a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
  v56((uint64_t)&v13[*(int *)(v15 + 24)], (uint64_t)&v14[*(int *)(v15 + 24)], v11);
LABEL_7:
  v21 = a3[10];
  v22 = (char *)(a1 + v21);
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for ImageCalibrationDataPB(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v22, v23, v11);
      *(_QWORD *)&v22[*(int *)(v24 + 20)] = *(_QWORD *)&v23[*(int *)(v24 + 20)];
      v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
      swift_retain();
      v29(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v22, type metadata accessor for ImageCalibrationDataPB);
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  v56((uint64_t)v22, (uint64_t)v23, v11);
  *(_QWORD *)&v22[*(int *)(v24 + 20)] = *(_QWORD *)&v23[*(int *)(v24 + 20)];
  swift_retain();
  swift_release();
LABEL_13:
  v31 = a3[11];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *(uint64_t *)((char *)a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      outlined copy of Data._Representation(v35, v34);
      *v32 = v35;
      v32[1] = v34;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v34 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v32);
LABEL_18:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_20;
  }
  v36 = *v33;
  outlined copy of Data._Representation(v36, v34);
  v37 = *v32;
  v38 = v32[1];
  *v32 = v36;
  v32[1] = v34;
  outlined consume of Data._Representation(v37, v38);
LABEL_20:
  v39 = a3[12];
  v40 = (uint64_t *)(a1 + v39);
  v41 = (uint64_t *)((char *)a2 + v39);
  v42 = *(uint64_t *)((char *)a2 + v39 + 8);
  if (*(_QWORD *)(a1 + v39 + 8) >> 60 != 15)
  {
    if (v42 >> 60 != 15)
    {
      v44 = *v41;
      outlined copy of Data._Representation(v44, v42);
      v45 = *v40;
      v46 = v40[1];
      *v40 = v44;
      v40[1] = v42;
      outlined consume of Data._Representation(v45, v46);
      goto LABEL_27;
    }
    outlined destroy of Data((uint64_t)v40);
    goto LABEL_25;
  }
  if (v42 >> 60 == 15)
  {
LABEL_25:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_27;
  }
  v43 = *v41;
  outlined copy of Data._Representation(v43, v42);
  *v40 = v43;
  v40[1] = v42;
LABEL_27:
  v47 = a3[13];
  v48 = a1 + v47;
  v49 = (uint64_t *)((char *)a2 + v47);
  v50 = *v49;
  *(_BYTE *)(v48 + 8) = *((_BYTE *)v49 + 8);
  *(_QWORD *)v48 = v50;
  v51 = a3[14];
  v52 = a1 + v51;
  v53 = (uint64_t *)((char *)a2 + v51);
  v54 = *v53;
  *(_BYTE *)(v52 + 8) = *((_BYTE *)v53 + 8);
  *(_QWORD *)v52 = v54;
  return a1;
}

uint64_t initializeWithTake for ImageDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[9];
  v13 = (_DWORD *)(a1 + v12);
  v14 = (_DWORD *)(a2 + v12);
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[2] = v14[2];
    v11((uint64_t)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[10];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for ImageCalibrationDataPB(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v19, (uint64_t)v20, v10);
    *(_QWORD *)&v19[*(int *)(v21 + 20)] = *(_QWORD *)&v20[*(int *)(v21 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  v25 = a3[13];
  v26 = a3[14];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a1 + v26;
  v30 = a2 + v26;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  return a1;
}

uint64_t assignWithTake for ImageDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v9 - 8);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 40);
  v47(v7, v8, v9);
  v10 = a3[9];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for CMTimeProtobuf(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for CMTimeProtobuf);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  v47((uint64_t)&v11[*(int *)(v13 + 24)], (uint64_t)&v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v19 = a3[10];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for ImageCalibrationDataPB(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v20, v21, v9);
      *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for ImageCalibrationDataPB);
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  v47((uint64_t)v20, (uint64_t)v21, v9);
  *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
  swift_release();
LABEL_13:
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)(a1 + v28 + 8);
  if (v31 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v29 = *(_OWORD *)v30;
    goto LABEL_18;
  }
  v32 = *(_QWORD *)(v30 + 8);
  if (v32 >> 60 == 15)
  {
    outlined destroy of Data(v29);
    goto LABEL_16;
  }
  v33 = *(_QWORD *)v29;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)(v29 + 8) = v32;
  outlined consume of Data._Representation(v33, v31);
LABEL_18:
  v34 = a3[12];
  v35 = (uint64_t *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v37 = *(_QWORD *)(a1 + v34 + 8);
  if (v37 >> 60 != 15)
  {
    v38 = v36[1];
    if (v38 >> 60 != 15)
    {
      v39 = *v35;
      *v35 = *v36;
      v35[1] = v38;
      outlined consume of Data._Representation(v39, v37);
      goto LABEL_23;
    }
    outlined destroy of Data((uint64_t)v35);
  }
  *(_OWORD *)v35 = *(_OWORD *)v36;
LABEL_23:
  v40 = a3[13];
  v41 = a3[14];
  v42 = a1 + v40;
  v43 = a2 + v40;
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  v44 = a1 + v41;
  v45 = a2 + v41;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D94CDCC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ImageDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D94CEA4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ImageDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ImageDataPB);
}

void type metadata completion function for ImageDataPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ImageCalibrationDataPB?, (void (*)(uint64_t))type metadata accessor for ImageCalibrationDataPB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t ImageCalibrationDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for ImageCalibrationDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = ImageCalibrationDataPB._StorageClass.init(copying:)(v8);
    swift_release();
  }
  v9 = swift_retain();
  closure #1 in ImageCalibrationDataPB.decodeMessage<A>(decoder:)(v9, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in ImageCalibrationDataPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics;
          goto LABEL_5;
        case 2:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters;
          v24 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C088];
          goto LABEL_16;
        case 3:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics;
LABEL_5:
          v16 = type metadata accessor for Matrix2dPB;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB;
          v18 = &protocol conformance descriptor for Matrix2dPB;
          goto LABEL_6;
        case 4:
          closure #4 in closure #1 in ImageCalibrationDataPB.decodeMessage<A>(decoder:)();
          break;
        case 5:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize;
          v24 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0F0];
          goto LABEL_16;
        case 6:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
          v16 = type metadata accessor for CMTimeProtobuf;
          v17 = (unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf;
          v18 = &protocol conformance descriptor for CMTimeProtobuf;
          goto LABEL_6;
        case 7:
          v19 = a2;
          v20 = a1;
          v21 = a3;
          v22 = a4;
          v23 = &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__warperMesh;
          v24 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C090];
LABEL_16:
          closure #24 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v19, v20, v21, v22, v23, v24);
          break;
        case 8:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
          v16 = type metadata accessor for Matrix3x3PB;
          v17 = &lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB;
          v18 = &protocol conformance descriptor for Matrix3x3PB;
          goto LABEL_6;
        case 9:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
          v16 = type metadata accessor for TransformMatrixPB;
          v17 = &lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB;
          v18 = &protocol conformance descriptor for TransformMatrixPB;
LABEL_6:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in closure #1 in ImageCalibrationDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type CameraModel and conformance CameraModel();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t ImageCalibrationDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for ImageCalibrationDataPB(0);
  v7 = swift_retain();
  closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = closure #1 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics, 1);
  if (!v4)
  {
    v10 = a1
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v10 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #1 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics, 3);
    v11 = (_QWORD *)(a1
                   + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__cameraModel);
    swift_beginAccess();
    if (*v11)
    {
      lazy protocol witness table accessor for type CameraModel and conformance CameraModel();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    v12 = a1
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v12 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #3 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    v13 = a1
        + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__warperMesh;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v13 + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedInt32Field(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #4 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
    return closure #5 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  }
  return result;
}

uint64_t closure #1 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[8];

  v19[1] = a6;
  v19[2] = a3;
  v19[7] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Matrix2dPB(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1 + *a5;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v17, (uint64_t)v11, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v11, (uint64_t)v16, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for Matrix2dPB);
}

uint64_t closure #3 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t closure #4 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix3x3PB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Matrix3x3PB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix3x3PB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix3x3PB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix3x3PB);
}

uint64_t closure #5 in closure #1 in ImageCalibrationDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TransformMatrixPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for TransformMatrixPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for TransformMatrixPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for TransformMatrixPB);
}

BOOL closure #1 in static ImageCalibrationDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  int v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v4 = type metadata accessor for TransformMatrixPB(0);
  v147 = *(_QWORD *)(v4 - 8);
  v148 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v143 = (uint64_t)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TransformMatrixPB?, TransformMatrixPB?));
  MEMORY[0x24BDAC7A8](v146, v7);
  v149 = (uint64_t)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v144 = (uint64_t)&v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v154 = (uint64_t)&v142 - v14;
  v15 = type metadata accessor for Matrix3x3PB(0);
  v151 = *(_QWORD *)(v15 - 8);
  v152 = v15;
  MEMORY[0x24BDAC7A8](v15, v16);
  v145 = (uint64_t)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix3x3PB?, Matrix3x3PB?));
  MEMORY[0x24BDAC7A8](v150, v18);
  v153 = (uint64_t)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
  MEMORY[0x24BDAC7A8](v20, v21);
  v165 = (char *)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23, v24);
  v166 = (uint64_t)&v142 - v25;
  v26 = type metadata accessor for CMTimeProtobuf(0);
  v158 = *(_QWORD *)(v26 - 8);
  v159 = v26;
  MEMORY[0x24BDAC7A8](v26, v27);
  v155 = (uint64_t)&v142 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v157, v29);
  v160 = (uint64_t)&v142 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v31, v32);
  v156 = (uint64_t)&v142 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34, v35);
  v161 = (uint64_t)&v142 - v36;
  v37 = type metadata accessor for Matrix2dPB(0);
  v170 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37, v38);
  v168 = (uint64_t)&v142 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v40, v41);
  v164 = (uint64_t)&v142 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v43, v44);
  v46 = (char *)&v142 - v45;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v47, v48);
  v162 = (uint64_t)&v142 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v50, v51);
  v167 = (uint64_t)&v142 - v52;
  MEMORY[0x24BDAC7A8](v53, v54);
  v169 = (uint64_t)&v142 - v55;
  MEMORY[0x24BDAC7A8](v56, v57);
  v59 = (char *)&v142 - v58;
  v60 = a1;
  v61 = a1
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v61, (uint64_t)v59, &demangling cache variable for type metadata for Matrix2dPB?);
  v62 = a2
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics;
  swift_beginAccess();
  v163 = v40;
  v63 = (uint64_t)&v46[*(int *)(v40 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v59, (uint64_t)v46, &demangling cache variable for type metadata for Matrix2dPB?);
  v64 = v37;
  outlined init with copy of (Int32, Matrix2dPB)(v62, v63, &demangling cache variable for type metadata for Matrix2dPB?);
  v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 48);
  if (v65((uint64_t)v46, 1, v37) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v59, &demangling cache variable for type metadata for Matrix2dPB?);
    v66 = v65(v63, 1, v37);
    v67 = v60;
    if (v66 == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v46, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_9;
    }
LABEL_6:
    v70 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    v71 = (uint64_t)v46;
LABEL_7:
    outlined destroy of Coordinate3DPB?(v71, v70);
LABEL_50:
    swift_release();
    swift_release();
    return 0;
  }
  v68 = v60;
  v69 = v169;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v46, v169, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v65(v63, 1, v64) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v59, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB(v69, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  v72 = v168;
  outlined init with take of Matrix2dPB(v63, v168, type metadata accessor for Matrix2dPB);
  v67 = v68;
  swift_retain();
  swift_retain();
  v73 = static Matrix2dPB.== infix(_:_:)(v69, v72);
  outlined destroy of Matrix3x3PB(v72, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v59, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB(v69, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v46, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v73 & 1) == 0)
    goto LABEL_50;
LABEL_9:
  v74 = (uint64_t *)(v67
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters);
  swift_beginAccess();
  v75 = *v74;
  v76 = (uint64_t *)(a2
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v75, *v76))
    goto LABEL_50;
  v77 = v67
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics;
  swift_beginAccess();
  v78 = v167;
  outlined init with copy of (Int32, Matrix2dPB)(v77, v167, &demangling cache variable for type metadata for Matrix2dPB?);
  v79 = a2
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics;
  swift_beginAccess();
  v80 = v164;
  v81 = v164 + *(int *)(v163 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v78, v164, &demangling cache variable for type metadata for Matrix2dPB?);
  v82 = v79;
  v83 = v80;
  outlined init with copy of (Int32, Matrix2dPB)(v82, v81, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v65(v80, 1, v64) == 1)
  {
    outlined destroy of Coordinate3DPB?(v78, &demangling cache variable for type metadata for Matrix2dPB?);
    v84 = v65(v81, 1, v64);
    v86 = (uint64_t)v165;
    v85 = v166;
    if (v84 == 1)
    {
      outlined destroy of Coordinate3DPB?(v83, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v87 = v162;
  outlined init with copy of (Int32, Matrix2dPB)(v80, v162, &demangling cache variable for type metadata for Matrix2dPB?);
  v88 = v65(v81, 1, v64);
  v86 = (uint64_t)v165;
  v85 = v166;
  if (v88 == 1)
  {
    outlined destroy of Coordinate3DPB?(v167, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB(v87, type metadata accessor for Matrix2dPB);
LABEL_15:
    v70 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
    v71 = v83;
    goto LABEL_7;
  }
  v89 = v87;
  v90 = v168;
  outlined init with take of Matrix2dPB(v81, v168, type metadata accessor for Matrix2dPB);
  v91 = static Matrix2dPB.== infix(_:_:)(v89, v90);
  outlined destroy of Matrix3x3PB(v90, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v167, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB(v89, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v83, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v91 & 1) == 0)
    goto LABEL_50;
LABEL_17:
  v92 = (uint64_t *)(v67
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__cameraModel);
  swift_beginAccess();
  v93 = *v92;
  v94 = *((unsigned __int8 *)v92 + 8);
  v95 = (uint64_t *)(a2
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__cameraModel);
  swift_beginAccess();
  v96 = *v95;
  v97 = v93 != 0;
  if (!v94)
    v97 = v93;
  if (*((_BYTE *)v95 + 8) == 1)
  {
    v98 = v161;
    if (v96)
    {
      if (v97 != 1)
        goto LABEL_50;
    }
    else if (v97)
    {
      goto LABEL_50;
    }
  }
  else
  {
    v98 = v161;
    if (v97 != v96)
      goto LABEL_50;
  }
  v99 = (uint64_t *)(v67
                  + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize);
  swift_beginAccess();
  v100 = *v99;
  v101 = (uint64_t *)(a2
                   + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v100, *v101))
    goto LABEL_50;
  v102 = v67
       + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v102, v98, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v103 = a2
       + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  swift_beginAccess();
  v104 = v160;
  v105 = v160 + *(int *)(v157 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v98, v160, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)(v103, v105, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v106 = v159;
  v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48);
  if (v107(v104, 1, v159) == 1)
  {
    outlined destroy of Coordinate3DPB?(v98, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v107(v105, 1, v106) == 1)
    {
      outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for CMTimeProtobuf?);
      goto LABEL_30;
    }
LABEL_36:
    v70 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
LABEL_37:
    v71 = v104;
    goto LABEL_7;
  }
  v122 = v156;
  outlined init with copy of (Int32, Matrix2dPB)(v104, v156, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v107(v105, 1, v106) == 1)
  {
    outlined destroy of Coordinate3DPB?(v161, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v122, type metadata accessor for CMTimeProtobuf);
    goto LABEL_36;
  }
  v123 = v155;
  outlined init with take of Matrix2dPB(v105, v155, type metadata accessor for CMTimeProtobuf);
  if (*(_QWORD *)v122 != *(_QWORD *)v123 || *(_DWORD *)(v122 + 8) != *(_DWORD *)(v123 + 8))
  {
    outlined destroy of Matrix3x3PB(v123, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?(v161, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB(v122, type metadata accessor for CMTimeProtobuf);
    v71 = v104;
    v70 = &demangling cache variable for type metadata for CMTimeProtobuf?;
    goto LABEL_7;
  }
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v124 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB(v123, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?(v161, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Matrix3x3PB(v122, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?(v160, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((v124 & 1) == 0)
    goto LABEL_50;
LABEL_30:
  v108 = (uint64_t *)(v67
                   + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__warperMesh);
  swift_beginAccess();
  v109 = *v108;
  v110 = (uint64_t *)(a2
                   + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__warperMesh);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v109, *v110))
    goto LABEL_50;
  v111 = v67
       + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v111, v85, &demangling cache variable for type metadata for Matrix3x3PB?);
  v112 = a2
       + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  swift_beginAccess();
  v113 = v85;
  v114 = v153;
  v115 = v153 + *(int *)(v150 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v113, v153, &demangling cache variable for type metadata for Matrix3x3PB?);
  v116 = v112;
  v104 = v114;
  outlined init with copy of (Int32, Matrix2dPB)(v116, v115, &demangling cache variable for type metadata for Matrix3x3PB?);
  v117 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
  v118 = v114;
  v119 = v152;
  if (v117(v118, 1, v152) == 1)
  {
    outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for Matrix3x3PB?);
    v120 = v117(v115, 1, v119);
    v121 = v154;
    if (v120 == 1)
    {
      outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for Matrix3x3PB?);
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  outlined init with copy of (Int32, Matrix2dPB)(v104, v86, &demangling cache variable for type metadata for Matrix3x3PB?);
  v125 = v117(v115, 1, v119);
  v121 = v154;
  if (v125 == 1)
  {
    outlined destroy of Coordinate3DPB?(v166, &demangling cache variable for type metadata for Matrix3x3PB?);
    outlined destroy of Matrix3x3PB(v86, type metadata accessor for Matrix3x3PB);
LABEL_45:
    v70 = &demangling cache variable for type metadata for (Matrix3x3PB?, Matrix3x3PB?);
    goto LABEL_37;
  }
  v126 = v145;
  outlined init with take of Matrix2dPB(v115, v145, type metadata accessor for Matrix3x3PB);
  v127 = static Matrix3x3PB.== infix(_:_:)(v86, v126);
  outlined destroy of Matrix3x3PB(v126, type metadata accessor for Matrix3x3PB);
  outlined destroy of Coordinate3DPB?(v166, &demangling cache variable for type metadata for Matrix3x3PB?);
  outlined destroy of Matrix3x3PB(v86, type metadata accessor for Matrix3x3PB);
  outlined destroy of Coordinate3DPB?(v104, &demangling cache variable for type metadata for Matrix3x3PB?);
  if ((v127 & 1) == 0)
    goto LABEL_50;
LABEL_47:
  v128 = v67
       + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v128, v121, &demangling cache variable for type metadata for TransformMatrixPB?);
  v129 = a2
       + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  swift_beginAccess();
  v130 = v121;
  v131 = v149;
  v132 = v149 + *(int *)(v146 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v130, v149, &demangling cache variable for type metadata for TransformMatrixPB?);
  v133 = v129;
  v134 = v131;
  outlined init with copy of (Int32, Matrix2dPB)(v133, v132, &demangling cache variable for type metadata for TransformMatrixPB?);
  v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
  v136 = v131;
  v137 = v148;
  if (v135(v136, 1, v148) != 1)
  {
    v139 = v144;
    outlined init with copy of (Int32, Matrix2dPB)(v134, v144, &demangling cache variable for type metadata for TransformMatrixPB?);
    if (v135(v132, 1, v137) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of Coordinate3DPB?(v154, &demangling cache variable for type metadata for TransformMatrixPB?);
      outlined destroy of Matrix3x3PB(v139, type metadata accessor for TransformMatrixPB);
      goto LABEL_54;
    }
    v140 = v143;
    outlined init with take of Matrix2dPB(v132, v143, type metadata accessor for TransformMatrixPB);
    v141 = specialized static TransformMatrixPB.== infix(_:_:)(v139, v140);
    swift_release();
    swift_release();
    outlined destroy of Matrix3x3PB(v140, type metadata accessor for TransformMatrixPB);
    outlined destroy of Coordinate3DPB?(v154, &demangling cache variable for type metadata for TransformMatrixPB?);
    outlined destroy of Matrix3x3PB(v139, type metadata accessor for TransformMatrixPB);
    outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for TransformMatrixPB?);
    return (v141 & 1) != 0;
  }
  swift_release();
  swift_release();
  outlined destroy of Coordinate3DPB?(v130, &demangling cache variable for type metadata for TransformMatrixPB?);
  if (v135(v132, 1, v137) != 1)
  {
LABEL_54:
    outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for (TransformMatrixPB?, TransformMatrixPB?));
    return 0;
  }
  outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for TransformMatrixPB?);
  return 1;
}

uint64_t protocol witness for Message.init() in conformance ImageCalibrationDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static ImageCalibrationDataPB._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ImageCalibrationDataPB()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ImageCalibrationDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ImageCalibrationDataPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ImageCalibrationDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ImageCalibrationDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ImageCalibrationDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ImageCalibrationDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ImageCalibrationDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageCalibrationDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImageCalibrationDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  return Message.hash(into:)();
}

uint64_t ImageDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in ImageDataPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in ImageDataPB.decodeMessage<A>(decoder:)();
          break;
        case 3:
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
          goto LABEL_10;
        case 4:
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
          break;
        case 5:
        case 8:
          type metadata accessor for ImageDataPB(0);
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 6:
          lazy protocol witness table accessor for type CameraType and conformance CameraType();
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 9:
        case 10:
          type metadata accessor for ImageDataPB(0);
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in ImageDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ImageDataPB(0);
  type metadata accessor for CMTimeProtobuf(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in ImageDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ImageDataPB(0);
  type metadata accessor for ImageCalibrationDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t ImageDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in ImageDataPB.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in ImageDataPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (*(_QWORD *)v3)
    {
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16))
      dispatch thunk of Visitor.visitPackedInt32Field(value:fieldNumber:)();
    closure #3 in ImageDataPB.traverse<A>(visitor:)(v3);
    if (*(_QWORD *)(v3 + 24))
    {
      lazy protocol witness table accessor for type CameraType and conformance CameraType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_DWORD *)(v3 + 36))
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    closure #4 in ImageDataPB.traverse<A>(visitor:)(v3);
    closure #5 in ImageDataPB.traverse<A>(visitor:)(v3);
    closure #6 in ImageDataPB.traverse<A>(visitor:)(v3);
    type metadata accessor for ImageDataPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in ImageDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ImageDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 36), (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t closure #2 in ImageDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageCalibrationDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ImageDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ImageCalibrationDataPB);
}

uint64_t closure #3 in ImageDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for ImageDataPB(0);
  v3 = a1 + *(int *)(result + 44);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #4 in ImageDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for ImageDataPB(0);
  v3 = a1 + *(int *)(result + 48);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #5 in ImageDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ImageDataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 52) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in ImageDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ImageDataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 56) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  return result;
}

double protocol witness for Message.init() in conformance ImageDataPB@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = 0;
  UnknownStorage.init()();
  v4 = a2 + a1[9];
  v5 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[10];
  v7 = type metadata accessor for ImageCalibrationDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  result = 0.0;
  v9 = a1[12];
  *(_OWORD *)(a2 + a1[11]) = xmmword_23D9AB950;
  *(_OWORD *)(a2 + v9) = xmmword_23D9AB950;
  v10 = a1[14];
  v11 = a2 + a1[13];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v10;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance ImageDataPB()
{
  return 0x7461446567616D49;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ImageDataPB()
{
  return ImageDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ImageDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ImageDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ImageDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ImageDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ImageDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImageDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in ImageDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
}

uint64_t base witness table accessor for Message in ImageDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
}

uint64_t base witness table accessor for Hashable in ImageDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
}

uint64_t base witness table accessor for Equatable in ImageCalibrationDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
}

uint64_t base witness table accessor for Message in ImageCalibrationDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
}

uint64_t base witness table accessor for Hashable in ImageCalibrationDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
}

unint64_t lazy protocol witness table accessor for type [CameraType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CameraType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CameraType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CameraType]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CameraType] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ImageCalibrationDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ImageDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
}

unint64_t lazy protocol witness table accessor for type CameraType and conformance CameraType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraType and conformance CameraType;
  if (!lazy protocol witness table cache variable for type CameraType and conformance CameraType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraType, &type metadata for CameraType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraType and conformance CameraType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraType and conformance CameraType;
  if (!lazy protocol witness table cache variable for type CameraType and conformance CameraType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraType, &type metadata for CameraType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraType and conformance CameraType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraType and conformance CameraType;
  if (!lazy protocol witness table cache variable for type CameraType and conformance CameraType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraType, &type metadata for CameraType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraType and conformance CameraType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraType and conformance CameraType;
  if (!lazy protocol witness table cache variable for type CameraType and conformance CameraType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraType, &type metadata for CameraType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraType and conformance CameraType);
  }
  return result;
}

uint64_t specialized static ImageCalibrationDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for ImageCalibrationDataPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static ImageCalibrationDataPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        v16))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static ImageDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  char v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  char v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  char v88;
  _QWORD *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v4 = type metadata accessor for UnknownStorage();
  v101 = *(_QWORD *)(v4 - 8);
  v102 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v100 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v99 = (char *)&v98 - v9;
  v109 = type metadata accessor for ImageCalibrationDataPB(0);
  v107 = *(_QWORD *)(v109 - 8);
  MEMORY[0x24BDAC7A8](v109, v10);
  v103 = (uint64_t)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?));
  MEMORY[0x24BDAC7A8](v106, v12);
  v110 = (uint64_t)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v14, v15);
  v104 = (uint64_t)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v113 = (uint64_t)&v98 - v19;
  MEMORY[0x24BDAC7A8](v20, v21);
  v108 = (uint64_t)&v98 - v22;
  v23 = type metadata accessor for CMTimeProtobuf(0);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23, v25);
  v105 = (uint64_t)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v27, v28);
  v30 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v31, v32);
  v34 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35, v36);
  v38 = (char *)&v98 - v37;
  MEMORY[0x24BDAC7A8](v39, v40);
  v42 = (char *)&v98 - v41;
  v43 = type metadata accessor for ImageDataPB(0);
  v44 = *(int *)(v43 + 36);
  v111 = a1;
  v45 = a1 + v44;
  v46 = (int *)v43;
  outlined init with copy of (Int32, Matrix2dPB)(v45, (uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v47 = v46[9];
  v112 = a2;
  outlined init with copy of (Int32, Matrix2dPB)(a2 + v47, (uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v48 = (uint64_t)&v30[*(int *)(v27 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v42, (uint64_t)v30, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v38, v48, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v49((uint64_t)v30, 1, v23) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v49(v48, 1, v23) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v30, &demangling cache variable for type metadata for CMTimeProtobuf?);
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v30, (uint64_t)v34, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v49(v48, 1, v23) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v34, type metadata accessor for CMTimeProtobuf);
LABEL_9:
    v58 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v59 = (uint64_t)v30;
LABEL_18:
    outlined destroy of Coordinate3DPB?(v59, v58);
    goto LABEL_19;
  }
  v60 = v105;
  outlined init with take of Matrix2dPB(v48, v105, type metadata accessor for CMTimeProtobuf);
  if (*(_QWORD *)v34 != *(_QWORD *)v60 || *((_DWORD *)v34 + 2) != *(_DWORD *)(v60 + 8))
  {
    outlined destroy of Matrix3x3PB(v60, type metadata accessor for CMTimeProtobuf);
    outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v34, type metadata accessor for CMTimeProtobuf);
    v59 = (uint64_t)v30;
    v58 = &demangling cache variable for type metadata for CMTimeProtobuf?;
    goto LABEL_18;
  }
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of Matrix3x3PB(v60, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Matrix3x3PB((uint64_t)v34, type metadata accessor for CMTimeProtobuf);
  outlined destroy of Coordinate3DPB?((uint64_t)v30, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((v61 & 1) == 0)
    goto LABEL_19;
LABEL_4:
  v50 = v111;
  v51 = v108;
  outlined init with copy of (Int32, Matrix2dPB)(v111 + v46[10], v108, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v52 = v112;
  v53 = v113;
  outlined init with copy of (Int32, Matrix2dPB)(v112 + v46[10], v113, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v54 = v110;
  v55 = v110 + *(int *)(v106 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v51, v110, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v53, v55, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
  v57 = v109;
  if (v56(v54, 1, v109) == 1)
  {
    outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    if (v56(v55, 1, v57) == 1)
    {
      outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  v62 = v104;
  outlined init with copy of (Int32, Matrix2dPB)(v54, v104, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if (v56(v55, 1, v57) == 1)
  {
    outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    outlined destroy of Matrix3x3PB(v62, type metadata accessor for ImageCalibrationDataPB);
LABEL_17:
    v58 = &demangling cache variable for type metadata for (ImageCalibrationDataPB?, ImageCalibrationDataPB?);
    v59 = v54;
    goto LABEL_18;
  }
  v65 = v103;
  outlined init with take of Matrix2dPB(v55, v103, type metadata accessor for ImageCalibrationDataPB);
  v66 = specialized static ImageCalibrationDataPB.== infix(_:_:)(v62, v65);
  outlined destroy of Matrix3x3PB(v65, type metadata accessor for ImageCalibrationDataPB);
  outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined destroy of Matrix3x3PB(v62, type metadata accessor for ImageCalibrationDataPB);
  outlined destroy of Coordinate3DPB?(v54, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((v66 & 1) == 0)
    goto LABEL_19;
LABEL_22:
  if ((specialized == infix<A>(_:_:)(*(_QWORD *)v50, *(unsigned __int8 *)(v50 + 8), *(_QWORD *)v52, *(unsigned __int8 *)(v52 + 8)) & 1) == 0|| !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v50 + 16), *(_QWORD *)(v52 + 16)))
  {
    goto LABEL_19;
  }
  v67 = v46[11];
  v68 = *(_QWORD *)(v50 + v67);
  v69 = *(_QWORD *)(v50 + v67 + 8);
  v70 = (uint64_t *)(v52 + v67);
  v71 = *v70;
  v72 = v70[1];
  if (v69 >> 60 == 15)
  {
    if (v72 >> 60 != 15)
      goto LABEL_28;
  }
  else
  {
    if (v72 >> 60 == 15)
      goto LABEL_28;
    outlined copy of Data?(v68, v69);
    outlined copy of Data?(v71, v72);
    specialized static Data.== infix(_:_:)(v68, v69);
    v74 = v73;
    outlined consume of Data?(v71, v72);
    outlined consume of Data?(v68, v69);
    if ((v74 & 1) == 0)
      goto LABEL_19;
  }
  v75 = *(_QWORD *)(v50 + 24);
  v76 = *(_QWORD *)(v52 + 24);
  if (*(_BYTE *)(v52 + 32) == 1)
  {
    if (v76)
    {
      if (v76 == 1)
      {
        if (v75 != 1)
          goto LABEL_19;
      }
      else if (v75 != 2)
      {
        goto LABEL_19;
      }
    }
    else if (v75)
    {
      goto LABEL_19;
    }
  }
  else if (v75 != v76)
  {
    goto LABEL_19;
  }
  if (*(_DWORD *)(v50 + 36) != *(_DWORD *)(v52 + 36))
    goto LABEL_19;
  v77 = v46[12];
  v68 = *(_QWORD *)(v50 + v77);
  v69 = *(_QWORD *)(v50 + v77 + 8);
  v78 = (uint64_t *)(v52 + v77);
  v71 = *v78;
  v72 = v78[1];
  if (v69 >> 60 != 15)
  {
    if (v72 >> 60 != 15)
    {
      outlined copy of Data?(v68, v69);
      outlined copy of Data?(v71, v72);
      specialized static Data.== infix(_:_:)(v68, v69);
      v80 = v79;
      outlined consume of Data?(v71, v72);
      outlined consume of Data?(v68, v69);
      if ((v80 & 1) == 0)
        goto LABEL_19;
      goto LABEL_46;
    }
LABEL_28:
    outlined copy of Data?(v68, v69);
    outlined copy of Data?(v71, v72);
    outlined consume of Data?(v68, v69);
    outlined consume of Data?(v71, v72);
    goto LABEL_19;
  }
  if (v72 >> 60 != 15)
    goto LABEL_28;
LABEL_46:
  v81 = v46[13];
  v82 = (_QWORD *)(v50 + v81);
  v83 = *(_BYTE *)(v50 + v81 + 8);
  v84 = (_QWORD *)(v52 + v81);
  v85 = *(unsigned __int8 *)(v52 + v81 + 8);
  if ((v83 & 1) != 0)
  {
    if (!v85)
      goto LABEL_19;
  }
  else
  {
    if (*v82 != *v84)
      LOBYTE(v85) = 1;
    if ((v85 & 1) != 0)
      goto LABEL_19;
  }
  v86 = v46[14];
  v87 = (_QWORD *)(v50 + v86);
  v88 = *(_BYTE *)(v50 + v86 + 8);
  v89 = (_QWORD *)(v52 + v86);
  v90 = *(unsigned __int8 *)(v52 + v86 + 8);
  if ((v88 & 1) != 0)
  {
    if (v90)
    {
LABEL_58:
      v91 = v50 + v46[8];
      v93 = v101;
      v92 = v102;
      v94 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
      v95 = v99;
      v94(v99, v91, v102);
      v96 = v100;
      v94(v100, v52 + v46[8], v92);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v63 = dispatch thunk of static Equatable.== infix(_:_:)();
      v97 = *(void (**)(char *, uint64_t))(v93 + 8);
      v97(v96, v92);
      v97(v95, v92);
      return v63 & 1;
    }
  }
  else
  {
    if (*v87 != *v89)
      LOBYTE(v90) = 1;
    if ((v90 & 1) == 0)
      goto LABEL_58;
  }
LABEL_19:
  v63 = 0;
  return v63 & 1;
}

uint64_t outlined init with take of Matrix2dPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for CameraType()
{
  return &type metadata for CameraType;
}

uint64_t destroy for UnitResult(uint64_t result)
{
  if (*(_QWORD *)(result + 88))
    return __swift_destroy_boxed_opaque_existential_0(result + 64);
  return result;
}

uint64_t initializeWithCopy for UnitResult(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  v5 = a1 + 64;
  v6 = a2 + 64;
  v7 = *(_QWORD *)(a2 + 88);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 96) = v8;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v5, v6);
  }
  else
  {
    v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *(_OWORD *)(v5 + 16) = v9;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(v6 + 32);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for UnitResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a1 + 64;
  v9 = (__int128 *)(a2 + 8);
  v10 = a2[11];
  if (!*(_QWORD *)(a1 + 88))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 88) = v10;
      *(_QWORD *)(a1 + 96) = a2[12];
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 64, (uint64_t)(a2 + 8));
      goto LABEL_8;
    }
LABEL_7:
    v11 = *v9;
    v12 = v9[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
    *(_OWORD *)v8 = v11;
    *(_OWORD *)(v8 + 16) = v12;
    goto LABEL_8;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 64);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 64), a2 + 8);
LABEL_8:
  v13 = *(_OWORD *)(a2 + 13);
  v14 = *(_OWORD *)(a2 + 15);
  v15 = *(_OWORD *)(a2 + 17);
  *(_WORD *)(a1 + 152) = *((_WORD *)a2 + 76);
  *(_OWORD *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 120) = v14;
  *(_OWORD *)(a1 + 104) = v13;
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy154_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for UnitResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = a1 + 64;
  if (*(_QWORD *)(a1 + 88))
    __swift_destroy_boxed_opaque_existential_0(a1 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnitResult(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 154))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UnitResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 154) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 154) = 0;
    if (a2)
      *(_QWORD *)(result + 88) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitResult()
{
  return &type metadata for UnitResult;
}

uint64_t getEnumTagSinglePayload for PinchAlgorithmUnitInternalStates(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[50])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchAlgorithmUnitInternalStates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 50) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchAlgorithmUnitInternalStates()
{
  return &type metadata for PinchAlgorithmUnitInternalStates;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for StateMask(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StateMask(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 58) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StateMask()
{
  return &type metadata for StateMask;
}

uint64_t static HandsLocalStorage.enrolmentStorageKey.getter()
{
  return 0x656D6C6C6F726E65;
}

uint64_t static HandsLocalStorage.missFingersStorageKey.getter()
{
  return 0x46676E697373696DLL;
}

id HandsLocalStorage.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HandsLocalStorage.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsLocalStorage();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for HandsLocalStorage()
{
  return objc_opt_self();
}

id HandsLocalStorage.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsLocalStorage();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall OIHSignalStatistics.sendCoreAnalytics()()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  float v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD aBlock[6];

  v1 = v0 + OBJC_IVAR____TtC5Hands16SignalStatistics_jointOcclusion;
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 4);
  if (v2)
  {
    v3 = *(float *)v1 / (float)v2;
    v4 = (void *)MEMORY[0x2426372E8](0xD000000000000024, 0x800000023D9DBB30);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v0;
    *(float *)(v5 + 24) = v3;
    *(_QWORD *)(v5 + 32) = 0xD000000000000024;
    *(_QWORD *)(v5 + 40) = 0x800000023D9DBB30;
    aBlock[4] = partial apply for closure #1 in OIHSignalStatistics.sendCoreAnalytics();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_28;
    v6 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v6);

    v7 = swift_beginAccess();
    MEMORY[0x24BDAC7A8](v7, v8);
    v9 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v9, (void (*)(uint64_t *, uint64_t))partial apply for closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:));
    swift_bridgeObjectRelease();
    v10 = swift_beginAccess();
    MEMORY[0x24BDAC7A8](v10, v11);
    v12 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v12, (void (*)(uint64_t *, uint64_t))closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)partial apply);
    swift_bridgeObjectRelease();
  }
}

unint64_t closure #1 in OIHSignalStatistics.sendCoreAnalytics()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A74A0;
  *(_QWORD *)(inited + 32) = 0x7466656C5F7369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(inited + 56), "total_duration");
  *(_BYTE *)(inited + 71) = -18;
  v7 = (double *)(a1 + OBJC_IVAR____TtC5Hands16SignalStatistics_duration);
  v8 = swift_beginAccess();
  *(_QWORD *)(inited + 72) = MEMORY[0x2426375B8](v8, *v7);
  *(_QWORD *)(inited + 80) = 0xD000000000000013;
  *(_QWORD *)(inited + 88) = 0x800000023D9DBBC0;
  *(NSNumber *)(inited + 96) = Float._bridgeToObjectiveC()();
  v9 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v15 = xmmword_23D9A8B80;
  v16 = 0;
  v17 = 0;
  v14[0] = a2;
  v14[1] = a3;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  type metadata accessor for NSObject();
  v11 = MEMORY[0x24BEE0D00];
  v12._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v14[3] = v11;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9DBBE0, 29, (uint64_t *)&v15, (uint64_t)v14, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  return v9;
}

BOOL OIHSignalStatistics.isSignalActiveFor(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v2 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v9);
  v10 = type metadata accessor for DerivedHandAttributes(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v9, &demangling cache variable for type metadata for DerivedHandAttributes?);
    return 0;
  }
  else
  {
    outlined init with copy of HandDescriptor((uint64_t)v9, (uint64_t)v5);
    outlined destroy of Matrix3x3PB((uint64_t)v9, type metadata accessor for DerivedHandAttributes);
    v12 = &v5[*(int *)(v2 + 120)];
    v13 = *(_QWORD *)v12;
    v14 = v12[8];
    outlined destroy of Matrix3x3PB((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v14 == 1)
      v13 = qword_23D9C1F88[v13];
    return v13 != 0;
  }
}

uint64_t ObjC metadata update function for OIHSignalStatistics()
{
  return type metadata accessor for OIHSignalStatistics();
}

uint64_t type metadata accessor for OIHSignalStatistics()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OIHSignalStatistics;
  if (!type metadata singleton initialization cache for OIHSignalStatistics)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v8)
      return swift_release();
    v17 = *(_QWORD *)(v4 + 8 * v16);
    ++v10;
    if (!v17)
    {
      v10 = v16 + 1;
      if (v16 + 1 >= v8)
        return swift_release();
      v17 = *(_QWORD *)(v4 + 8 * v10);
      if (!v17)
      {
        v10 = v16 + 2;
        if (v16 + 2 >= v8)
          return swift_release();
        v17 = *(_QWORD *)(v4 + 8 * v10);
        if (!v17)
        {
          v10 = v16 + 3;
          if (v16 + 3 >= v8)
            return swift_release();
          v17 = *(_QWORD *)(v4 + 8 * v10);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_5:
    v13 = *(_QWORD *)(a1 + 48) + 16 * v12;
    v14 = *(_QWORD *)v13;
    LOBYTE(v13) = *(_BYTE *)(v13 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    v19 = v14;
    v20 = v13;
    v21 = v15;
    swift_bridgeObjectRetain();
    a2(&v19, v15);
    result = swift_bridgeObjectRelease();
  }
  v18 = v16 + 4;
  if (v18 >= v8)
    return swift_release();
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
    v10 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v17 = *(_QWORD *)(v4 + 8 * v10);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23D9519F4()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in OIHSignalStatistics.sendCoreAnalytics()()
{
  uint64_t *v0;

  return closure #1 in OIHSignalStatistics.sendCoreAnalytics()(v0[2], v0[4], v0[5]);
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)(a1, a2);
}

uint64_t PichAcceptorWithMakeCandidate.processAtPotentialMake(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  swift_beginAccess();
  *(_BYTE *)(v1 + 64) = 1;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  PichAcceptorWithMakeCandidate.resetPinchBuffer()();
  *(_BYTE *)(v1 + 80) = 1;
  result = PinchCandidateProcessor.assignMakeFrameCandidate(_:)(a1);
  *(_BYTE *)(v1 + 49) = 1;
  return result;
}

void *PichAcceptorWithMakeCandidate.processAtPotentialTouchFrame(_:)(uint64_t *a1)
{
  uint64_t v1;
  void *result;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;

  result = (void *)swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 72);
  v5 = __CFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    if (v6 >= 0x3E8)
      v6 = 1000;
    *(_QWORD *)(v1 + 72) = v6;
    return PichAcceptorWithMakeCandidate.updatePinchBuffer(_:)(a1);
  }
  return result;
}

Swift::Void __swiftcall PichAcceptorWithMakeCandidate.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v1;
  *(_QWORD *)(v0 + 112) = v1;
  *(_QWORD *)(v0 + 120) = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 56);
  *(_DWORD *)(v2 + 160) = 0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
}

uint64_t PichAcceptorWithMakeCandidate.process(_:)(__int128 *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  float v8;
  int v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float v19;
  __int128 v20;
  float v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  float v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  _BYTE v126[7];
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  float v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  float v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _BYTE v167[22];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  _DWORD v191[2];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;

  v3 = a1[4];
  v197 = a1[5];
  v4 = a1[7];
  v198 = a1[6];
  v199 = v4;
  v200 = *((_QWORD *)a1 + 16);
  v5 = *a1;
  v193 = a1[1];
  v6 = a1[3];
  v194 = a1[2];
  v195 = v6;
  v196 = v3;
  v192 = v5;
  v7 = (_DWORD *)((char *)a1 + 161);
  v8 = *((float *)a1 + 34);
  v9 = *((_DWORD *)a1 + 35);
  v108 = *((_QWORD *)a1 + 18);
  v109 = *((_QWORD *)a1 + 19);
  v110 = *((_BYTE *)a1 + 160);
  v191[0] = *(_DWORD *)((char *)a1 + 161);
  *(_DWORD *)((char *)v191 + 3) = *((_DWORD *)a1 + 41);
  v111 = *((_QWORD *)a1 + 21);
  v107 = *((_QWORD *)a1 + 22);
  v10 = (__int128 *)((char *)a1 + 184);
  v187 = *(__int128 *)((char *)a1 + 312);
  v188 = *(__int128 *)((char *)a1 + 328);
  v189 = *(__int128 *)((char *)a1 + 344);
  v190 = *((_QWORD *)a1 + 45);
  v183 = *(__int128 *)((char *)a1 + 248);
  v184 = *(__int128 *)((char *)a1 + 264);
  v185 = *(__int128 *)((char *)a1 + 280);
  v186 = *(__int128 *)((char *)a1 + 296);
  v11 = *(__int128 *)((char *)a1 + 200);
  v179 = *(__int128 *)((char *)a1 + 184);
  v180 = v11;
  v12 = *(__int128 *)((char *)a1 + 232);
  v181 = *(__int128 *)((char *)a1 + 216);
  v182 = v12;
  v13 = (__int128 *)((char *)a1 + 372);
  v14 = *(__int128 *)((char *)a1 + 484);
  v15 = *(__int128 *)((char *)a1 + 516);
  v176 = *(__int128 *)((char *)a1 + 500);
  v177 = v15;
  v16 = *(__int128 *)((char *)a1 + 420);
  v17 = *(__int128 *)((char *)a1 + 452);
  v18 = *(__int128 *)((char *)a1 + 468);
  v172 = *(__int128 *)((char *)a1 + 436);
  v173 = v17;
  v19 = *((float *)a1 + 92);
  v178 = *(_QWORD *)((char *)a1 + 532);
  v174 = v18;
  v175 = v14;
  v20 = *(__int128 *)((char *)a1 + 388);
  v168 = *(__int128 *)((char *)a1 + 372);
  v169 = v20;
  v170 = *(__int128 *)((char *)a1 + 404);
  v171 = v16;
  v21 = *((float *)a1 + 135);
  v22 = a1 + 34;
  if (*(_BYTE *)(v1 + 49) == 1)
  {
    swift_beginAccess();
    if ((*(_BYTE *)(v1 + 80) & 1) == 0 && v19 < (float)(1.0 - v21))
      *(_BYTE *)(v1 + 49) = 0;
  }
  swift_beginAccess();
  v23 = a1[6];
  v119 = a1[7];
  v24 = a1[3];
  v114 = a1[2];
  v115 = v24;
  v25 = a1[4];
  v117 = a1[5];
  v118 = v23;
  v116 = v25;
  v26 = a1[1];
  v112 = *a1;
  v113 = v26;
  v27 = v10[8];
  v28 = v10[10];
  v138 = v10[9];
  v139 = v28;
  v29 = v10[6];
  v30 = v10[7];
  v31 = v10[4];
  v134 = v10[5];
  v135 = v29;
  v32 = *(unsigned __int8 *)(v1 + 64);
  v120 = *((_QWORD *)a1 + 16);
  v121 = v8;
  v122 = v9;
  v123 = v108;
  v124 = v109;
  v125 = v110;
  *(_DWORD *)v126 = *v7;
  *(_DWORD *)&v126[3] = *(_DWORD *)((char *)v7 + 3);
  v127 = v111;
  v128 = v107;
  v136 = v30;
  v137 = v27;
  v140 = *((_QWORD *)v10 + 22);
  v133 = v31;
  v33 = v10[1];
  v129 = *v10;
  v130 = v33;
  v34 = v10[3];
  v131 = v10[2];
  v132 = v34;
  v141 = v19;
  v35 = v13[9];
  v150 = v13[8];
  v151 = v35;
  v152 = *((_QWORD *)v13 + 20);
  v36 = v13[5];
  v146 = v13[4];
  v147 = v36;
  v37 = v13[7];
  v148 = v13[6];
  v149 = v37;
  v38 = v13[1];
  v142 = *v13;
  v143 = v38;
  v39 = v13[3];
  v144 = v13[2];
  v145 = v39;
  v153 = v21;
  *(_QWORD *)&v167[14] = *(_QWORD *)((char *)v22 + 222);
  v40 = v22[13];
  v166 = v22[12];
  *(_OWORD *)v167 = v40;
  v41 = v22[9];
  v162 = v22[8];
  v163 = v41;
  v42 = v22[11];
  v164 = v22[10];
  v165 = v42;
  v43 = v22[5];
  v158 = v22[4];
  v159 = v43;
  v44 = v22[7];
  v160 = v22[6];
  v161 = v44;
  v45 = v22[1];
  v154 = *v22;
  v155 = v45;
  v46 = v22[3];
  v156 = v22[2];
  v157 = v46;
  if ((PinchCandidateProcessor.detectCandidateMake(_:_:)(v32, (uint64_t)&v112) & 1) != 0)
  {
    v47 = a1[6];
    v119 = a1[7];
    v48 = a1[3];
    v114 = a1[2];
    v115 = v48;
    v49 = a1[4];
    v117 = a1[5];
    v118 = v47;
    v116 = v49;
    v50 = a1[1];
    v112 = *a1;
    v113 = v50;
    v51 = v10[8];
    v52 = v10[10];
    v138 = v10[9];
    v139 = v52;
    v53 = v10[6];
    v54 = v10[7];
    v55 = v10[4];
    v134 = v10[5];
    v135 = v53;
    v120 = *((_QWORD *)a1 + 16);
    v121 = v8;
    v122 = v9;
    v56 = v107;
    v123 = v108;
    v124 = v109;
    v125 = v110;
    *(_DWORD *)v126 = *v7;
    *(_DWORD *)&v126[3] = *(_DWORD *)((char *)v7 + 3);
    v127 = v111;
    v128 = v107;
    v136 = v54;
    v137 = v51;
    v140 = *((_QWORD *)v10 + 22);
    v133 = v55;
    v57 = v10[1];
    v129 = *v10;
    v130 = v57;
    v58 = v10[3];
    v131 = v10[2];
    v132 = v58;
    v141 = v19;
    v59 = v13[9];
    v150 = v13[8];
    v151 = v59;
    v152 = *((_QWORD *)v13 + 20);
    v60 = v13[5];
    v146 = v13[4];
    v147 = v60;
    v61 = v13[7];
    v148 = v13[6];
    v149 = v61;
    v62 = v13[1];
    v142 = *v13;
    v143 = v62;
    v63 = v13[3];
    v144 = v13[2];
    v145 = v63;
    v153 = v21;
    *(_QWORD *)&v167[14] = *(_QWORD *)((char *)v22 + 222);
    v64 = v22[13];
    v166 = v22[12];
    *(_OWORD *)v167 = v64;
    v65 = v22[9];
    v162 = v22[8];
    v163 = v65;
    v66 = v22[11];
    v164 = v22[10];
    v165 = v66;
    v67 = v22[5];
    v158 = v22[4];
    v159 = v67;
    v68 = v22[7];
    v160 = v22[6];
    v161 = v68;
    v69 = v22[1];
    v154 = *v22;
    v155 = v69;
    v70 = v22[3];
    v156 = v22[2];
    v157 = v70;
    (*(void (**)(__int128 *))(*(_QWORD *)v1 + 408))(&v112);
    v71 = v111;
    v72 = v110;
    v74 = v108;
    v73 = v109;
  }
  else
  {
    if (v8 < (float)(1.0 - v21))
      v75 = v32;
    else
      v75 = 0;
    v56 = v107;
    v74 = v108;
    v71 = v111;
    v72 = v110;
    v73 = v109;
    if (v75 == 1)
    {
      *(_BYTE *)(v1 + 64) = 0;
      *(_QWORD *)(v1 + 88) = 0;
      goto LABEL_14;
    }
  }
  if (*(_BYTE *)(v1 + 64) == 1)
  {
    v76 = a1[6];
    v119 = a1[7];
    v77 = a1[3];
    v114 = a1[2];
    v115 = v77;
    v78 = a1[4];
    v117 = a1[5];
    v118 = v76;
    v116 = v78;
    v79 = a1[1];
    v112 = *a1;
    v113 = v79;
    v121 = v8;
    v122 = v9;
    v80 = v10[8];
    v81 = v10[10];
    v138 = v10[9];
    v139 = v81;
    v82 = v10[6];
    v83 = v10[7];
    v84 = v10[4];
    v134 = v10[5];
    v135 = v82;
    v120 = *((_QWORD *)a1 + 16);
    v123 = v74;
    v124 = v73;
    v125 = v72;
    *(_DWORD *)v126 = *v7;
    *(_DWORD *)&v126[3] = *(_DWORD *)((char *)v7 + 3);
    v127 = v71;
    v128 = v56;
    v136 = v83;
    v137 = v80;
    v140 = *((_QWORD *)v10 + 22);
    v133 = v84;
    v85 = v10[1];
    v129 = *v10;
    v130 = v85;
    v86 = v10[3];
    v131 = v10[2];
    v132 = v86;
    v141 = v19;
    v87 = v13[9];
    v150 = v13[8];
    v151 = v87;
    v152 = *((_QWORD *)v13 + 20);
    v88 = v13[5];
    v146 = v13[4];
    v147 = v88;
    v89 = v13[7];
    v148 = v13[6];
    v149 = v89;
    v90 = v13[1];
    v142 = *v13;
    v143 = v90;
    v91 = v13[3];
    v144 = v13[2];
    v145 = v91;
    v153 = v21;
    *(_QWORD *)&v167[14] = *(_QWORD *)((char *)v22 + 222);
    v92 = v22[13];
    v166 = v22[12];
    *(_OWORD *)v167 = v92;
    v93 = v22[9];
    v162 = v22[8];
    v163 = v93;
    v94 = v22[11];
    v164 = v22[10];
    v165 = v94;
    v95 = v22[5];
    v158 = v22[4];
    v159 = v95;
    v96 = v22[7];
    v160 = v22[6];
    v161 = v96;
    v97 = v22[1];
    v154 = *v22;
    v155 = v97;
    v98 = v22[3];
    v156 = v22[2];
    v157 = v98;
    return (*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 424))(&v112);
  }
LABEL_14:
  v117 = v197;
  v118 = v198;
  v119 = v199;
  v120 = v200;
  v114 = v194;
  v115 = v195;
  v116 = v196;
  v112 = v192;
  v113 = v193;
  v121 = v8;
  v122 = v9;
  v123 = v74;
  v124 = v73;
  v125 = v72;
  *(_DWORD *)v126 = v191[0];
  *(_DWORD *)&v126[3] = *(_DWORD *)((char *)v191 + 3);
  v127 = v71;
  v128 = v56;
  v138 = v188;
  v139 = v189;
  v134 = v184;
  v135 = v185;
  v136 = v186;
  v137 = v187;
  v140 = v190;
  v133 = v183;
  v129 = v179;
  v130 = v180;
  v131 = v181;
  v132 = v182;
  v141 = v19;
  v150 = v176;
  v151 = v177;
  v152 = v178;
  v146 = v172;
  v147 = v173;
  v148 = v174;
  v149 = v175;
  v142 = v168;
  v143 = v169;
  v144 = v170;
  v145 = v171;
  v153 = v21;
  *(_QWORD *)&v167[14] = *(_QWORD *)((char *)v22 + 222);
  v100 = v22[13];
  v166 = v22[12];
  *(_OWORD *)v167 = v100;
  v101 = v22[9];
  v162 = v22[8];
  v163 = v101;
  v102 = v22[11];
  v164 = v22[10];
  v165 = v102;
  v103 = v22[5];
  v158 = v22[4];
  v159 = v103;
  v104 = v22[7];
  v160 = v22[6];
  v161 = v104;
  v105 = v22[1];
  v154 = *v22;
  v155 = v105;
  v106 = v22[3];
  v156 = v22[2];
  v157 = v106;
  return (*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 432))(&v112);
}

uint64_t PichAcceptorWithMakeCandidate.postProcessRegular(_:)(void *__src)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  _BYTE v5[784];

  memcpy(v5, __src, 0x306uLL);
  v2 = *(_QWORD *)(v1 + 56);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(v2 + 64);
  result = specialized static PinchGestureHelper.getIndexTipToThumbTipVectorFromPinchFrameFeatures(_:)((uint64_t)v5);
  *(_OWORD *)(v2 + 64) = v4;
  return result;
}

void *PichAcceptorWithMakeCandidate.updatePinchBuffer(_:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  void *result;
  int v24;
  int v25;
  char *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  char *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  _BYTE v86[410];
  _BYTE __dst[410];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[5];
  v6 = a1[7];
  v53 = a1[6];
  v7 = a1[9];
  v51 = a1[4];
  v52 = a1[8];
  v9 = a1[10];
  v8 = a1[11];
  v45 = a1[12];
  v10 = a1[14];
  v49 = a1[2];
  v50 = a1[13];
  v11 = *(_OWORD *)(a1 + 15);
  v12 = *(_OWORD *)(a1 + 19);
  v89 = *(_OWORD *)(a1 + 17);
  v88 = v11;
  v13 = *(_OWORD *)(a1 + 21);
  v14 = *(_OWORD *)(a1 + 23);
  v15 = *(_OWORD *)(a1 + 27);
  v93 = *(_OWORD *)(a1 + 25);
  v92 = v14;
  v90 = v12;
  v91 = v13;
  v16 = *(_OWORD *)(a1 + 29);
  v17 = *(_OWORD *)(a1 + 31);
  v18 = *(_OWORD *)(a1 + 35);
  v97 = *(_OWORD *)(a1 + 33);
  v96 = v17;
  v94 = v15;
  v95 = v16;
  v19 = *(_OWORD *)(a1 + 41);
  v102 = *(_OWORD *)(a1 + 43);
  v20 = *(_OWORD *)(a1 + 37);
  v21 = *(_OWORD *)(a1 + 39);
  v101 = v19;
  v100 = v21;
  v98 = v18;
  v99 = v20;
  v22 = *((_DWORD *)a1 + 90);
  result = memcpy(__dst, (char *)a1 + 364, sizeof(__dst));
  if (v2)
  {
    v55 = v2;
    v56 = v3;
    v46 = v3;
    v48 = v4;
    v57 = v49;
    v58 = v4;
    v59 = v51;
    v60 = v5;
    v61 = v53;
    v62 = v6;
    v63 = v52;
    v64 = v7;
    v65 = v9;
    v66 = v8;
    v47 = v9;
    v67 = v45;
    v68 = v50;
    LOWORD(v69) = v10 & 0x101;
    HIDWORD(v69) = HIDWORD(v10);
    specialized static SelectionRecoveryInBreakProcessing.getIndexOccluionScore(_:)((uint64_t)&v55);
    v25 = v24;
    swift_beginAccess();
    v26 = (char *)v1[13];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1[13] = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
      v1[13] = v26;
    }
    v29 = *((_QWORD *)v26 + 2);
    v28 = *((_QWORD *)v26 + 3);
    if (v29 >= v28 >> 1)
    {
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v26);
      v1[13] = v26;
    }
    *((_QWORD *)v26 + 2) = v29 + 1;
    *(_DWORD *)&v26[4 * v29 + 32] = v25;
    swift_endAccess();
    v55 = v2;
    v56 = v3;
    v57 = v49;
    v58 = v48;
    v59 = v51;
    v60 = v5;
    v61 = v53;
    v62 = v6;
    v63 = v52;
    v64 = v7;
    v65 = v47;
    v66 = v8;
    v67 = v45;
    v68 = v50;
    LOWORD(v69) = v10 & 0x101;
    HIDWORD(v69) = HIDWORD(v10);
    specialized static SelectionRecoveryInBreakProcessing.getThumbOccluionScore(_:)((uint64_t)&v55);
    v31 = v30;
    swift_beginAccess();
    v32 = (char *)v1[14];
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v1[14] = v32;
    if ((v33 & 1) == 0)
    {
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
      v1[14] = v32;
    }
    v35 = *((_QWORD *)v32 + 2);
    v34 = *((_QWORD *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v32);
      v1[14] = v32;
    }
    *((_QWORD *)v32 + 2) = v35 + 1;
    *(_DWORD *)&v32[4 * v35 + 32] = v31;
    swift_endAccess();
    v55 = v2;
    v56 = v46;
    v57 = v49;
    v58 = v48;
    v59 = v51;
    v60 = v5;
    v61 = v53;
    v62 = v6;
    v63 = v52;
    v64 = v7;
    v65 = v47;
    v66 = v8;
    v67 = v45;
    v68 = v50;
    v69 = v10;
    v79 = v97;
    v80 = v98;
    v83 = v101;
    v84 = v102;
    v81 = v99;
    v82 = v100;
    v70 = v88;
    v71 = v89;
    v72 = v90;
    v76 = v94;
    v75 = v93;
    v74 = v92;
    v73 = v91;
    v78 = v96;
    v77 = v95;
    v85 = v22;
    memcpy(v86, __dst, sizeof(v86));
    *(double *)&v36 = specialized static PinchGestureHelper.updatePinchCentroidFromPinchFrameFeatures(_:_:_:)((uint64_t)&v55, *(float32x4_t *)(v1[7] + 112), *(float32x4_t *)(v1[7] + 128));
    v54 = v36;
    swift_beginAccess();
    v37 = (_QWORD *)v1[12];
    v38 = swift_isUniquelyReferenced_nonNull_native();
    v1[12] = v37;
    if ((v38 & 1) == 0)
    {
      v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
      v1[12] = v37;
    }
    v40 = v37[2];
    v39 = v37[3];
    if (v40 >= v39 >> 1)
    {
      v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v37);
      v1[12] = v37;
    }
    v37[2] = v40 + 1;
    *(_OWORD *)&v37[2 * v40 + 4] = v54;
    v41 = (char *)v1[15];
    v42 = swift_isUniquelyReferenced_nonNull_native();
    v1[15] = v41;
    if ((v42 & 1) == 0)
    {
      v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
      v1[15] = v41;
    }
    v44 = *((_QWORD *)v41 + 2);
    v43 = *((_QWORD *)v41 + 3);
    if (v44 >= v43 >> 1)
    {
      v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v41);
      v1[15] = v41;
    }
    *((_QWORD *)v41 + 2) = v44 + 1;
    *(_DWORD *)&v41[4 * v44 + 32] = v22;
    return (void *)swift_endAccess();
  }
  return result;
}

Swift::Void __swiftcall PichAcceptorWithMakeCandidate.resetPinchBuffer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  *(_BYTE *)(v0 + 80) = 0;
  v1 = *(_QWORD *)(v0 + 56);
  *(_DWORD *)(v1 + 160) = 0;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 96) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 104) = v2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 112) = v2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 120) = v2;
  swift_bridgeObjectRelease();
}

uint64_t PinchCandidateProcessor.assignMakeFrameCandidate(_:)(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[15];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  _BYTE v64[406];
  _OWORD v65[15];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  _BYTE v83[406];

  v2 = *(_OWORD *)(a1 + 208);
  v46[12] = *(_OWORD *)(a1 + 192);
  v46[13] = v2;
  v46[14] = *(_OWORD *)(a1 + 224);
  v3 = *(_OWORD *)(a1 + 144);
  v46[8] = *(_OWORD *)(a1 + 128);
  v46[9] = v3;
  v4 = *(_OWORD *)(a1 + 176);
  v46[10] = *(_OWORD *)(a1 + 160);
  v46[11] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v46[4] = *(_OWORD *)(a1 + 64);
  v46[5] = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v46[6] = *(_OWORD *)(a1 + 96);
  v46[7] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v46[0] = *(_OWORD *)a1;
  v46[1] = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v46[2] = *(_OWORD *)(a1 + 32);
  v46[3] = v8;
  v10 = *(_QWORD *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 248);
  v11 = *(_QWORD *)(a1 + 256);
  v12 = *(_QWORD *)(a1 + 264);
  v13 = *(_QWORD *)(a1 + 272);
  v14 = *(_QWORD *)(a1 + 280);
  v15 = *(_QWORD *)(a1 + 288);
  v16 = *(_QWORD *)(a1 + 304);
  v39 = *(_QWORD *)(a1 + 312);
  v17 = *(_QWORD *)(a1 + 328);
  v38 = *(_QWORD *)(a1 + 320);
  v44 = *(_QWORD *)(a1 + 336);
  v45 = *(_QWORD *)(a1 + 296);
  v42 = *(_QWORD *)(a1 + 352);
  v43 = *(_QWORD *)(a1 + 344);
  v18 = *(_DWORD *)(a1 + 360);
  v41 = (const void *)(a1 + 368);
  v19 = *(_DWORD *)(a1 + 364);
  memcpy(v64, (const void *)(a1 + 368), sizeof(v64));
  v20 = *(_OWORD *)(a1 + 208);
  v65[12] = *(_OWORD *)(a1 + 192);
  v65[13] = v20;
  v65[14] = *(_OWORD *)(a1 + 224);
  v21 = *(_OWORD *)(a1 + 144);
  v65[8] = *(_OWORD *)(a1 + 128);
  v65[9] = v21;
  v22 = *(_OWORD *)(a1 + 160);
  v65[11] = *(_OWORD *)(a1 + 176);
  v65[10] = v22;
  v23 = *(_OWORD *)(a1 + 80);
  v65[4] = *(_OWORD *)(a1 + 64);
  v65[5] = v23;
  v24 = *(_OWORD *)(a1 + 112);
  v65[6] = *(_OWORD *)(a1 + 96);
  v65[7] = v24;
  v25 = *(_OWORD *)(a1 + 16);
  v65[0] = *(_OWORD *)a1;
  v65[1] = v25;
  v26 = *(_OWORD *)(a1 + 48);
  v65[2] = *(_OWORD *)(a1 + 32);
  v65[3] = v26;
  v66 = v10;
  v67 = v9;
  v68 = v11;
  v69 = v12;
  v70 = v13;
  v71 = v14;
  v72 = v15;
  v73 = v45;
  v74 = v16;
  v75 = v39;
  v76 = v38;
  v77 = v17;
  v78 = v44;
  v79 = v43;
  v80 = v42;
  v81 = v18;
  v82 = v19;
  memcpy(v83, v41, sizeof(v83));
  specialized static PinchGestureHelper.getPinchVectorFromPinchFrameFeatures(_:)((uint64_t)v65);
  *(_OWORD *)(v40 + 128) = v27;
  v47 = v10;
  v48 = v9;
  v49 = v11;
  v50 = v12;
  v51 = v13;
  v52 = v14;
  v53 = v15;
  v54 = v45;
  v55 = v16;
  v56 = v39;
  v57 = v38;
  v58 = v17;
  v59 = v44;
  v60 = v43;
  v61 = v42;
  v62 = v18;
  v63 = v19;
  result = specialized static PinchGestureHelper.getPalmNormalFromPinchFrameFeatures(_:)((uint64_t)v46);
  *(_OWORD *)(v40 + 112) = v29;
  if (!v10)
  {
    *(_QWORD *)&v30 = 0;
    DWORD2(v30) = 0;
    goto LABEL_5;
  }
  if (*(_QWORD *)(v9 + 16) >= 7uLL)
  {
    v30 = *(_OWORD *)(v9 + 240);
LABEL_5:
    *(float32x2_t *)&v31 = vadd_f32(*(float32x2_t *)&v30, *(float32x2_t *)(v40 + 128));
    *((float *)&v31 + 2) = *((float *)&v30 + 2) + *(float *)(v40 + 136);
    HIDWORD(v31) = 0;
    *(_OWORD *)(v40 + 96) = v31;
    v33 = *(float32x4_t *)(v40 + 64);
    v32 = *(float32x4_t *)(v40 + 80);
    v34 = vmulq_f32(v32, v32);
    v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)));
    v36 = vmulq_f32(v33, v33);
    v35.f32[0] = sqrtf(v35.f32[0]);
    v37 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1)));
    v37.f32[0] = sqrtf(v37.f32[0]);
    *(int8x16_t *)(v40 + 144) = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v35, v37), 0), (int8x16_t)v32, (int8x16_t)v33);
    *(_DWORD *)(v40 + 160) = v19;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t PinchCandidateProcessor.detectCandidateMake(_:_:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  BOOL v15;
  float v16;
  BOOL v17;
  float v18;

  result = 0;
  if ((a1 & 1) != 0)
    return result;
  v5 = *(float *)(a2 + 136);
  v6 = *(float *)(a2 + 536);
  if (v5 < v6)
    return result;
  v7 = *(float *)(a2 + 140);
  v8 = *(float *)(a2 + 364);
  v9 = *(float *)(a2 + 444);
  v18 = *(float *)(a2 + 452);
  v10 = *(float *)(a2 + 548);
  v11 = *(float *)(a2 + 552);
  v12 = specialized Sequence<>.max()(*(_QWORD *)(a2 + 400));
  if ((v12 & 0x100000000) != 0)
  {
    v15 = v10 >= 1.0 && v11 < v5;
    v13 = 1.0;
    if (!v15)
      goto LABEL_10;
  }
  else
  {
    v13 = *(float *)&v12;
    if (v10 < *(float *)&v12 || v11 >= v5)
      goto LABEL_10;
  }
  v7 = v7 * v13;
LABEL_10:
  if (*(_BYTE *)(v2 + 48) == 1 && (float)((float)(1.0 - v6) + (float)(1.0 - v6)) < v7)
    return 0;
  if (*(float *)(v2 + 16) < v8)
  {
    v16 = *(float *)(v2 + 28);
    v17 = v16 < v9;
    if (*(float *)(v2 + 20) >= v8)
    {
      if (v16 < v9)
        goto LABEL_26;
      return 0;
    }
LABEL_24:
    if (v17 || *(float *)(v2 + 24) < v9)
    {
LABEL_26:
      if (*(_BYTE *)(v2 + 32) != 1 || v18 >= *(float *)(v2 + 40) && *(float *)(v2 + 44) >= v18)
        return 1;
    }
    return 0;
  }
  v17 = 0;
  result = 0;
  if (*(float *)(v2 + 20) < v8)
    goto LABEL_24;
  return result;
}

uint64_t PinchCandidateProcessor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchCandidateProcessor()
{
  return objc_opt_self();
}

uint64_t PinchAcceptorAcceptGoodMake.process(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = PinchCandidateProcessor.detectCandidateMake(_:_:)(0, a1);
  if ((result & 1) != 0)
    *(_WORD *)(v1 + 33) = 257;
  return result;
}

uint64_t PinchAcceptorAcceptGoodMake.__ivar_destroyer()
{
  return swift_release();
}

uint64_t PinchAcceptorAcceptGoodMake.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorAcceptGoodMake()
{
  return objc_opt_self();
}

uint64_t PichAcceptorWithMakeCandidate.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PichAcceptorWithMakeCandidate.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PichAcceptorWithMakeCandidate()
{
  return objc_opt_self();
}

uint64_t destroy for PichAcceptorWithMakeCandidate.InternalStates()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PichAcceptorWithMakeCandidate.InternalStates(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PichAcceptorWithMakeCandidate.InternalStates(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PichAcceptorWithMakeCandidate.InternalStates(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PichAcceptorWithMakeCandidate.InternalStates(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PichAcceptorWithMakeCandidate.InternalStates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PichAcceptorWithMakeCandidate.InternalStates()
{
  return &type metadata for PichAcceptorWithMakeCandidate.InternalStates;
}

__n128 __swift_memcpy100_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PinchCandidateProcessor.MakeCandidateInternalStates(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 100))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PinchCandidateProcessor.MakeCandidateInternalStates(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 100) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PinchCandidateProcessor.MakeCandidateInternalStates()
{
  return &type metadata for PinchCandidateProcessor.MakeCandidateInternalStates;
}

__n128 __swift_memcpy33_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PinchCandidateProcessor.MakeCandidateThresholdConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchCandidateProcessor.MakeCandidateThresholdConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchCandidateProcessor.MakeCandidateThresholdConfig()
{
  return &type metadata for PinchCandidateProcessor.MakeCandidateThresholdConfig;
}

__n128 __swift_memcpy68_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for PinchCandidateProcessor.PinchMakeInfo()
{
  return &type metadata for PinchCandidateProcessor.PinchMakeInfo;
}

uint64_t specialized PinchAcceptorAcceptGoodMake.init(_:_:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;

  type metadata accessor for PinchCandidateProcessor();
  v8 = swift_allocObject();
  swift_retain();
  objc_msgSend(a1, sel_OisPinchAcceptorStrictHoverDistanceReductionAtMakeThreshold);
  v10 = v9;
  objc_msgSend(a1, sel_OisPinchAcceptorMediumHoverDistanceReductionAtMakeThreshold);
  v12 = v11;
  objc_msgSend(a1, sel_OisPinchAcceptorStrictIntentionThreshold);
  v14 = v13;
  objc_msgSend(a1, sel_OisPinchAcceptorMediumIntentionThreshold);
  v16 = v15;
  v17 = objc_msgSend(a1, sel_OisPinchAcceptorIgnoreSidePinch);
  v18 = objc_msgSend(a1, sel_OisPinchAcceptorUsingUnsureCond);
  *(_DWORD *)(v8 + 16) = v10;
  *(_DWORD *)(v8 + 20) = v12;
  *(_DWORD *)(v8 + 24) = v14;
  *(_DWORD *)(v8 + 28) = v16;
  *(_BYTE *)(v8 + 32) = v17;
  *(_QWORD *)(v8 + 36) = 0x3F8000003F7AE148;
  *(_DWORD *)(v8 + 44) = 0x40000000;
  *(_BYTE *)(v8 + 48) = v18;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_DWORD *)(v8 + 160) = 0;
  *(_QWORD *)(a4 + 56) = v8;
  *(_BYTE *)(a4 + 49) = 0;
  *(_QWORD *)(a4 + 16) = a2;
  *(_BYTE *)(a4 + 24) = a3 & 1;
  *(_WORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 34) = 0;
  *(_QWORD *)(a4 + 40) = a2;
  *(_BYTE *)(a4 + 48) = a3 & 1;
  return a4;
}

uint64_t specialized PichAcceptorWithMakeCandidate.init(_:_:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;

  *(_BYTE *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  v8 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = v8;
  *(_QWORD *)(a4 + 104) = v8;
  *(_QWORD *)(a4 + 112) = v8;
  *(_QWORD *)(a4 + 120) = v8;
  type metadata accessor for PinchCandidateProcessor();
  v9 = swift_allocObject();
  swift_retain();
  objc_msgSend(a1, sel_OisPinchAcceptorStrictHoverDistanceReductionAtMakeThreshold);
  v11 = v10;
  objc_msgSend(a1, sel_OisPinchAcceptorMediumHoverDistanceReductionAtMakeThreshold);
  v13 = v12;
  objc_msgSend(a1, sel_OisPinchAcceptorStrictIntentionThreshold);
  v15 = v14;
  objc_msgSend(a1, sel_OisPinchAcceptorMediumIntentionThreshold);
  v17 = v16;
  v18 = objc_msgSend(a1, sel_OisPinchAcceptorIgnoreSidePinch);
  v19 = objc_msgSend(a1, sel_OisPinchAcceptorUsingUnsureCond);
  *(_DWORD *)(v9 + 16) = v11;
  *(_DWORD *)(v9 + 20) = v13;
  *(_DWORD *)(v9 + 24) = v15;
  *(_DWORD *)(v9 + 28) = v17;
  *(_BYTE *)(v9 + 32) = v18;
  *(_QWORD *)(v9 + 36) = 0x3F8000003F7AE148;
  *(_DWORD *)(v9 + 44) = 0x40000000;
  *(_BYTE *)(v9 + 48) = v19;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_DWORD *)(v9 + 160) = 0;
  *(_QWORD *)(a4 + 56) = v9;
  *(_BYTE *)(a4 + 49) = 0;
  *(_QWORD *)(a4 + 16) = a2;
  *(_BYTE *)(a4 + 24) = a3 & 1;
  *(_WORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 34) = 0;
  *(_QWORD *)(a4 + 40) = a2;
  *(_BYTE *)(a4 + 48) = a3 & 1;
  return a4;
}

uint64_t CameraStreamUtils.StreamCombination.toCameraSourceSet()(unint64_t a1)
{
  uint64_t result;

  if (a1 < 5)
    return specialized Set.init<A>(_:)((uint64_t)*(&off_250E46710 + a1));
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

unint64_t CameraStreamUtils.StreamCombination.init(rawValue:)(unint64_t a1)
{
  return specialized CameraStreamUtils.StreamCombination.init(rawValue:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CameraStreamUtils.StreamCombination@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = specialized CameraStreamUtils.StreamCombination.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

BOOL static CameraStreamUtils.CameraStreamSource.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CameraStreamUtils.CameraStreamSource.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int CameraStreamUtils.CameraStreamSource.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static CameraStreamUtils.findCameraSource(forKey:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  __int16 v4;
  char v5;

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = 2;
    *(_WORD *)(a1 + 8) = 1;
    return result;
  }
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v3 = 3;
LABEL_13:
    *(_QWORD *)a1 = v3;
LABEL_14:
    v4 = 1;
    goto LABEL_15;
  }
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v3 = 4;
    goto LABEL_13;
  }
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v3 = 5;
    goto LABEL_13;
  }
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v3 = 6;
    goto LABEL_13;
  }
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v3 = 7;
    goto LABEL_13;
  }
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = 0;
    goto LABEL_14;
  }
  v5 = StringProtocol.contains<A>(_:)();
  result = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    *(_QWORD *)a1 = 1;
    *(_WORD *)(a1 + 8) = 1;
    return result;
  }
  *(_QWORD *)a1 = 0;
  v4 = 256;
LABEL_15:
  *(_WORD *)(a1 + 8) = v4;
  return result;
}

uint64_t static CameraStreamUtils.getCameraSource(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  BOOL v13;
  char v14;
  BOOL v15;
  BOOL v16;
  char v17;
  BOOL v18;
  BOOL v19;
  char v20;
  char v21;
  BOOL v23;

  result = String.count.getter();
  if (result < 5)
    goto LABEL_7;
  v3 = String.subscript.getter();
  v5 = v4;
  String.index(_:offsetBy:)();
  v7 = String.subscript.getter();
  v8 = v6;
  if (v7 == 95 && v6 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (String.count.getter() < 6)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
LABEL_7:
      *(_QWORD *)a1 = 0;
      *(_WORD *)(a1 + 8) = 256;
      return result;
    }
    String.index(_:offsetBy:)();
    v7 = String.subscript.getter();
    v10 = v9;
    swift_bridgeObjectRelease();
    v8 = v10;
  }
  if (v3 != 100 || v5 != 0xE100000000000000)
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v12 = v3 == 115 && v5 == 0xE100000000000000;
    v13 = v12;
    if ((v11 & 1) == 0 && !v13)
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v15 = v3 == 106 && v5 == 0xE100000000000000;
      v16 = v15;
      if ((v14 & 1) == 0 && !v16)
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v18 = v3 == 109 && v5 == 0xE100000000000000;
        v19 = v18;
        if ((v17 & 1) == 0 && !v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_6;
      }
    }
  }
  if (v7 == 108 && v8 == 0xE100000000000000)
  {
    v20 = 1;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v23 = v7 == 114 && v8 == 0xE100000000000000;
    if ((v21 & 1) == 0 && !v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_6;
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  closure #1 in static CameraStreamUtils.getCameraSource(_:)(v3, v5, v20 & 1, a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static CameraStreamUtils.getCameraSource(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v8;
  BOOL v9;
  uint64_t v10;
  char v11;

  v6 = result;
  if (result == 100 && a2 == 0xE100000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v8 = 0;
    v9 = (a3 & 1) == 0;
    v10 = 2;
    goto LABEL_5;
  }
  if (v6 == 115 && a2 == 0xE100000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v8 = 0;
    v9 = (a3 & 1) == 0;
    v10 = 4;
    goto LABEL_5;
  }
  if (v6 == 106 && a2 == 0xE100000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v8 = 0;
    v9 = (a3 & 1) == 0;
    v10 = 6;
LABEL_5:
    if (v9)
      ++v10;
    goto LABEL_7;
  }
  if (v6 != 109 || a2 != 0xE100000000000000)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
      v10 = 0;
      v11 = 0;
      v8 = 1;
      goto LABEL_8;
    }
  }
  v8 = 0;
  v10 = (a3 & 1) == 0;
LABEL_7:
  v11 = 1;
LABEL_8:
  *(_QWORD *)a4 = v10;
  *(_BYTE *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 9) = v8;
  return result;
}

unint64_t one-time initialization function for warpedStreamsKeysLUT()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for warpedStreamsKeysLUT);
  static CameraStreamUtils.warpedStreamsKeysLUT = result;
  return result;
}

unint64_t one-time initialization function for unwarpedStreamsKeysLUT()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for unwarpedStreamsKeysLUT);
  static CameraStreamUtils.unwarpedStreamsKeysLUT = result;
  return result;
}

unint64_t one-time initialization function for warpedStreamsKeysLUT640()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for warpedStreamsKeysLUT640);
  static CameraStreamUtils.warpedStreamsKeysLUT640 = result;
  return result;
}

unint64_t one-time initialization function for unwarpedStreamsKeysLUT640()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for unwarpedStreamsKeysLUT640);
  static CameraStreamUtils.unwarpedStreamsKeysLUT640 = result;
  return result;
}

unint64_t one-time initialization function for warpedBinnedStreamsKeysLUT640()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for warpedBinnedStreamsKeysLUT640);
  static CameraStreamUtils.warpedBinnedStreamsKeysLUT640 = result;
  return result;
}

unint64_t one-time initialization function for unwarpedBinnedStreamsKeysLUT640()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for unwarpedBinnedStreamsKeysLUT640);
  static CameraStreamUtils.unwarpedBinnedStreamsKeysLUT640 = result;
  return result;
}

uint64_t static CameraStreamUtils.findKey(forCameraSource:warped:mode640:binned:streamSource:)(uint64_t a1, char a2, char a3, char a4, char *a5)
{
  uint64_t v5;
  char v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  v7 = *a5;
  if ((a3 & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      if ((a4 & 1) != 0)
      {
        if (one-time initialization token for warpedBinnedStreamsKeysLUT640 != -1)
          swift_once();
        v8 = &static CameraStreamUtils.warpedBinnedStreamsKeysLUT640;
      }
      else
      {
        if (one-time initialization token for warpedStreamsKeysLUT640 != -1)
          swift_once();
        v8 = &static CameraStreamUtils.warpedStreamsKeysLUT640;
      }
    }
    else if ((a4 & 1) != 0)
    {
      if (one-time initialization token for unwarpedBinnedStreamsKeysLUT640 != -1)
        swift_once();
      v8 = &static CameraStreamUtils.unwarpedBinnedStreamsKeysLUT640;
    }
    else
    {
      if (one-time initialization token for unwarpedStreamsKeysLUT640 != -1)
        swift_once();
      v8 = &static CameraStreamUtils.unwarpedStreamsKeysLUT640;
    }
  }
  else if ((a2 & 1) != 0)
  {
    if (one-time initialization token for warpedStreamsKeysLUT != -1)
      swift_once();
    v8 = &static CameraStreamUtils.warpedStreamsKeysLUT;
  }
  else
  {
    if (one-time initialization token for unwarpedStreamsKeysLUT != -1)
      swift_once();
    v8 = &static CameraStreamUtils.unwarpedStreamsKeysLUT;
  }
  v9 = *v8;
  if (!*(_QWORD *)(*v8 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    v12 = specialized static CameraStreamUtils.polarisCameraStreamNameToRoyaStreamName(_:)();
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t CameraStreamUtils.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t CameraStreamUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized static CameraStreamUtils.StreamCombination.create(from:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = a1 == 0x656D61436E69614DLL && a2 == 0xEB00000000736172;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0;
  if (a1 == 0x656D61436E776F44 && a2 == 0xEB00000000736172
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0x6E776F4465646953 && a2 == 0xEC00000072696150
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (a1 == 0x6E776F4465646953 && a2 == 0xEB0000000077614ALL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0x43636972656E6547 && a2 == 0xED00006172656D61)
    return 4;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 4;
  return 0;
}

unint64_t specialized CameraStreamUtils.StreamCombination.init(rawValue:)(unint64_t result)
{
  if (result > 4)
    return 0;
  return result;
}

void *specialized static CameraStreamUtils.getCameraKeysForCalibration(_:)(void *a1)
{
  unsigned int v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v2 = objc_msgSend(a1, sel_UseBinned640Streams);
  if (v2)
    v3 = &outlined read-only object #0 of static CameraStreamUtils.getCameraKeysForCalibration(_:);
  else
    v3 = &outlined read-only object #2 of static CameraStreamUtils.getCameraKeysForCalibration(_:);
  if (v2)
    v4 = &outlined read-only object #1 of static CameraStreamUtils.getCameraKeysForCalibration(_:);
  else
    v4 = &outlined read-only object #3 of static CameraStreamUtils.getCameraKeysForCalibration(_:);
  v5 = objc_msgSend(a1, sel_InputImageStreams);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  if (v6 == 0x6E776F4465646953 && v8 == 0xEB0000000077614ALL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_14:
    specialized Array.append<A>(contentsOf:)((uint64_t)v4);
    return v3;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized static CameraStreamUtils.polarisCameraStreamNameToRoyaStreamName(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, camera: Substring, chirality: Substring, streamType: Substring)>.Match?);
  MEMORY[0x24BDAC7A8](v0, v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, camera: Substring, chirality: Substring, streamType: Substring)>.Match);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, camera: Substring, chirality: Substring, streamType: Substring)>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, camera: Substring, chirality: Substring, streamType: Substring));
  Regex.init(_regexString:version:)();
  Regex.firstMatch(in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    outlined destroy of Regex<(Substring, camera: Substring, chirality: Substring, streamType: Substring)>.Match?((uint64_t)v3);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    swift_getKeyPath();
    Regex.Match.subscript.getter();
    swift_release();
    v15 = MEMORY[0x242637378](v30, v31, v32, v33);
    v17 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = v15;
    v35 = v17;
    v18._countAndFlagsBits = 95;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_getKeyPath();
    Regex.Match.subscript.getter();
    swift_release();
    v19 = MEMORY[0x242637378](v30, v31, v32, v33);
    v21 = v20;
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 46;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    swift_getKeyPath();
    Regex.Match.subscript.getter();
    swift_release();
    v24 = MEMORY[0x242637378](v30, v31, v32, v33);
    v26 = v25;
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v14 = v34;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return v14;
}

uint64_t specialized static CameraStreamUtils.matchStreams(_:_:)()
{
  char v0;

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  v0 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type CameraStreamUtils.StreamCombination and conformance CameraStreamUtils.StreamCombination()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraStreamUtils.StreamCombination and conformance CameraStreamUtils.StreamCombination;
  if (!lazy protocol witness table cache variable for type CameraStreamUtils.StreamCombination and conformance CameraStreamUtils.StreamCombination)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraStreamUtils.StreamCombination, &type metadata for CameraStreamUtils.StreamCombination);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraStreamUtils.StreamCombination and conformance CameraStreamUtils.StreamCombination);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CameraStreamUtils.CameraStreamSource and conformance CameraStreamUtils.CameraStreamSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraStreamUtils.CameraStreamSource and conformance CameraStreamUtils.CameraStreamSource;
  if (!lazy protocol witness table cache variable for type CameraStreamUtils.CameraStreamSource and conformance CameraStreamUtils.CameraStreamSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraStreamUtils.CameraStreamSource, &type metadata for CameraStreamUtils.CameraStreamSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraStreamUtils.CameraStreamSource and conformance CameraStreamUtils.CameraStreamSource);
  }
  return result;
}

uint64_t type metadata accessor for CameraStreamUtils()
{
  return objc_opt_self();
}

uint64_t method lookup function for CameraStreamUtils()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static CameraStreamUtils.findCameraSource(forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static CameraStreamUtils.getCameraKeysForCalibration(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static CameraStreamUtils.getCameraSource(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static CameraStreamUtils.findKey(forCameraSource:warped:mode640:binned:streamSource:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static CameraStreamUtils.matchStreams(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for CameraStreamUtils.StreamCombination()
{
  return &type metadata for CameraStreamUtils.StreamCombination;
}

uint64_t storeEnumTagSinglePayload for CameraStreamUtils.CameraStreamSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D9549B4 + 4 * byte_23D9C2095[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D9549E8 + 4 * asc_23D9C2090[v4]))();
}

uint64_t sub_23D9549E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D9549F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D9549F8);
  return result;
}

uint64_t sub_23D954A04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D954A0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D954A10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D954A18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraStreamUtils.CameraStreamSource()
{
  return &type metadata for CameraStreamUtils.CameraStreamSource;
}

uint64_t outlined destroy of Regex<(Substring, camera: Substring, chirality: Substring, streamType: Substring)>.Match?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, camera: Substring, chirality: Substring, streamType: Substring)>.Match?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *HandyLoggerBufferSink.__allocating_init(withPath:withLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v7;

  v7 = a4 & 1;
  swift_allocObject();
  return HandyLoggerBufferSink.init(withPath:withLimit:)(a1, a2, a3, v7);
}

char *HandyLoggerBufferSink.init(withPath:withLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, _QWORD, uint64_t);
  unint64_t v22;
  id v23;
  id v24;
  void *v25;
  char *v26;
  id v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  uint64_t isEscapingClosureAtFileLocation;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  Swift::String v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  uint64_t aBlock;
  unint64_t v49;
  uint64_t (*v50)(uint64_t);
  void *v51;
  uint64_t (*v52)();
  unint64_t v53;
  uint64_t v54;

  v5 = v4;
  v46 = a4;
  v40 = a3;
  v43 = a1;
  v44 = a2;
  v54 = *MEMORY[0x24BDAC8D0];
  v45 = type metadata accessor for URL();
  v42 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45, v6);
  v41 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v8, v9);
  v10 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v10, v11);
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BEE4AF8];
  v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x24BEE4AF8]);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v18;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 6) = 10000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__fileSizeLimit] = 5000000;
  v19 = &v4[OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__filePrefix];
  strcpy(&v4[OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__filePrefix], "hands-log-blob");
  v19[15] = -18;
  v20 = &v4[OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__latestLogPath];
  type metadata accessor for OS_dispatch_queue();
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v13 + 104);
  v22 = 0xD000000000000018;
  v21(v16, *MEMORY[0x24BEE5758], v12);
  static DispatchQoS.unspecified.getter();
  aBlock = v17;
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *((_QWORD *)v4 + 5) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  *(_QWORD *)&v4[OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__dateFormatter] = v23;
  v24 = v23;
  v25 = (void *)MEMORY[0x2426372E8](0xD000000000000018, 0x800000023D9C8D50);
  objc_msgSend(v24, sel_setDateFormat_, v25);

  v26 = v41;
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v5[OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__outputDir], v26, v45);
  if ((v46 & 1) == 0)
    *(_QWORD *)&v5[OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__fileSizeLimit] = v40;
  v27 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v28 = URL.path.getter();
  v29 = (void *)MEMORY[0x2426372E8](v28);
  swift_bridgeObjectRelease();
  aBlock = 0;
  v30 = objc_msgSend(v27, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v29, 1, 0, &aBlock);

  isEscapingClosureAtFileLocation = aBlock;
  if (!v30)
    goto LABEL_6;
  v32 = *((_QWORD *)v5 + 5);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = partial apply for closure #1 in HandyLoggerBufferSink.reconfig();
  *(_QWORD *)(v33 + 24) = v5;
  v52 = _sIg_Ieg_TRTA_0;
  v53 = v33;
  aBlock = MEMORY[0x24BDAC760];
  v49 = 1107296256;
  v50 = thunk for @escaping @callee_guaranteed () -> ();
  v51 = &block_descriptor_29;
  v34 = _Block_copy(&aBlock);
  v22 = v53;
  v35 = (id)isEscapingClosureAtFileLocation;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v32, v34);
  _Block_release(v34);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_6:
    v36 = (id)isEscapingClosureAtFileLocation;
    swift_release();
    v37 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    aBlock = 0;
    v49 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v38._countAndFlagsBits = v22 + 10;
    v38._object = (void *)0x800000023D9DBE40;
    String.append(_:)(v38);
    v47 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    v51 = (void *)MEMORY[0x24BEE0D00];
    specialized static HLog.E(file:function:line:_:_:)(v22 + 81, 0x800000023D9DBDD0, 41, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
    return 0;
  }
  return v5;
}

Swift::Void __swiftcall HandyLoggerBufferSink.clearLogs()()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v1 = *(NSObject **)(v0 + 40);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in HandyLoggerBufferSink.reconfig();
  *(_QWORD *)(v2 + 24) = v0;
  v4[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v4[5] = v2;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_8;
  v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
}

Swift::Void __swiftcall HandyLoggerBufferSink.flush()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  Class isa;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  NSObject *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t aBlock;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  void *v36;
  uint64_t (*v37)();
  uint64_t v38;

  v1 = v0;
  v32 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v32 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](v32, v4);
  v5 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__filePrefix + 8);
  aBlock = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__filePrefix);
  v34 = v15;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 95;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17 = *(void **)(v0 + OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__dateFormatter);
  static Date.now.getter();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v19 = objc_msgSend(v17, sel_stringFromDate_, isa);

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 6451246;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v25 = *(NSObject **)(v1 + 40);
  v26 = v32;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v9, v32);
  v27 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v28 + v27, v5, v26);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for closure #1 in HandyLoggerBufferSink.flush();
  *(_QWORD *)(v29 + 24) = v28;
  v37 = thunk for @callee_guaranteed () -> ()partial apply;
  v38 = v29;
  aBlock = MEMORY[0x24BDAC760];
  v34 = 1107296256;
  v35 = thunk for @escaping @callee_guaranteed () -> ();
  v36 = &block_descriptor_18;
  v30 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v25, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v9, v26);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v27 & 1) != 0)
    __break(1u);
}

uint64_t closure #1 in HandyLoggerBufferSink.flush()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for LogMessageBundle(0);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  HandyLoggerBufferSink.toProtobuf()(v5);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessageBundle and conformance LogMessageBundle, type metadata accessor for LogMessageBundle, (uint64_t)&protocol conformance descriptor for LogMessageBundle);
  v6 = Message.serializedData(partial:)();
  v8 = v7;
  Data.write(to:options:)();
  outlined consume of Data._Representation(v6, v8);
  v9 = URL.path.getter();
  v10 = (uint64_t *)(a1 + OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__latestLogPath);
  *v10 = v9;
  v10[1] = v11;
  swift_bridgeObjectRelease();
  return outlined destroy of Matrix3x3PB((uint64_t)v5, type metadata accessor for LogMessageBundle);
}

uint64_t HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(int a1, CMTimeValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(a1, a2, a4, a5, a6, a7, a8, a9);
}

uint64_t closure #1 in HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for LogMessage(0);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LogMessage(a2, (uint64_t)v6);
  swift_beginAccess();
  specialized CircularBuffer.add(_:)((uint64_t)v6);
  outlined destroy of Matrix3x3PB((uint64_t)v6, type metadata accessor for LogMessage);
  return swift_endAccess();
}

uint64_t closure #1 in HandyLoggerBufferSink.reconfig()(_QWORD *a1)
{
  uint64_t v2;

  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 10000, 0, MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  a1[2] = 10000;
  a1[3] = v2;
  a1[4] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t HandyLoggerBufferSink.toProtobuf()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[4];
  _QWORD *v16;
  uint64_t v17;

  v17 = type metadata accessor for LogMessage(0);
  v3 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for LogMessageBundle(0);
  UnknownStorage.init()();
  swift_beginAccess();
  v7 = v1[2];
  v8 = v1[3];
  v16 = v1;
  v9 = v1[4];
  swift_bridgeObjectRetain();
  v10 = specialized CircularBuffer.toList()(v7, v8, v9);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v10 + 16))
  {
    v15[3] = OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__fileSizeLimit;
    v11 = v10 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v15[0] = v10;
    v15[1] = v12;
    v15[2] = a1;
    outlined init with copy of LogMessage(v11, (uint64_t)v6);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
    Message.serializedData(partial:)();
    __asm { BR              X10 }
  }
  return swift_bridgeObjectRelease();
}

uint64_t HandyLoggerBufferSink.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();

  v1 = v0 + OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__outputDir;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HandyLoggerBufferSink.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();

  v1 = v0 + OBJC_IVAR____TtC5Hands21HandyLoggerBufferSink__outputDir;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in HandyLoggerBufferSink.reconfig()()
{
  _QWORD *v0;

  return closure #1 in HandyLoggerBufferSink.reconfig()(v0);
}

uint64_t sub_23D955B04()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t sub_23D955B2C()
{
  return swift_deallocObject();
}

uint64_t sub_23D955B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HandyLoggerBufferSink.flush()()
{
  uint64_t v0;

  type metadata accessor for URL();
  return closure #1 in HandyLoggerBufferSink.flush()(*(_QWORD *)(v0 + 16));
}

uint64_t sub_23D955BE0()
{
  return swift_deallocObject();
}

uint64_t specialized HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(int a1, CMTimeValue *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Float64 v55;
  CMTimeValue value;
  CMTimeScale timescale;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  void (*v59)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  CMTimeValue *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t result;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(uint64_t *, uint64_t, uint64_t, uint64_t);
  void *v72;
  CMTimeEpoch v73;
  CMTimeValue v74;
  CMTimeValue v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  CMTimeValue *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90[40];
  _BYTE v91[32];
  CMTime aBlock;
  void *v93;
  uint64_t (*v94)();
  uint64_t v95;
  _BYTE v96[12];

  v70 = a8;
  v89 = a7;
  v82 = a6;
  v81 = a5;
  v78 = a4;
  v77 = a3;
  v76 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v86 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v84 = (char *)&v68 - v14;
  v15 = type metadata accessor for CMTimeProtobuf(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15, v17);
  v85 = (CMTimeValue *)((char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v19, v20);
  v83 = (char *)&v68 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Google_Protobuf_Any();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26, v28);
  v68 = (char *)&v68 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30, v31);
  v69 = (char *)&v68 - v32;
  v33 = type metadata accessor for LogMessage(0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v36 = (char *)&v68 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = *a2;
  v74 = a2[1];
  v73 = a2[2];
  v72 = (void *)a2[3];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0xE000000000000000;
  *((_DWORD *)v36 + 4) = 0;
  *((_QWORD *)v36 + 3) = 0;
  *((_QWORD *)v36 + 4) = 0xE000000000000000;
  *((_QWORD *)v36 + 5) = 0;
  *((_QWORD *)v36 + 6) = 0xE000000000000000;
  v38 = (uint64_t *)&v36[*(int *)(v37 + 32)];
  v39 = type metadata accessor for LogMessage.OneOf_Content(0);
  v71 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
  v71(v38, 1, 1, v39);
  UnknownStorage.init()();
  v40 = (uint64_t)&v36[*(int *)(v33 + 40)];
  v79 = v16;
  v41 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v87 = v15;
  v80 = v41;
  v41(v40, 1, 1, v15);
  outlined init with copy of Any(v89, (uint64_t)v96);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
  if (swift_dynamicCast())
  {
    outlined init with take of PinchCancellationModule((__int128 *)&aBlock.value, (uint64_t)v91);
    outlined init with copy of Detection2DComputePipelineProtocol((uint64_t)v91, (uint64_t)v90);
    defaultAnyTypeURLPrefix.getter();
    Google_Protobuf_Any.init(message:partial:typePrefix:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v26);
    v46 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v47 = v69;
    v46(v69, v25, v26);
    v48 = v68;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v68, v47, v26);
    outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    v46((char *)v38, v48, v26);
    swift_storeEnumTagMultiPayload();
    v71(v38, 0, 1, v39);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v47, v26);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v91);
  }
  else
  {
    if (!swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
      v45 = 0;
LABEL_15:
      outlined destroy of Matrix3x3PB((uint64_t)v36, type metadata accessor for LogMessage);
      return _sxRi_zRi0_zlySDy5Hands14StatisticUtilsC12CameraRegionOs6UInt64VGIsegr_SgWOe((uint64_t)v45);
    }
    swift_bridgeObjectRetain();
    v42 = String.init(format:_:)();
    v44 = v43;
    swift_bridgeObjectRelease();
    outlined destroy of Coordinate3DPB?((uint64_t)v38, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    *v38 = v42;
    v38[1] = v44;
    swift_storeEnumTagMultiPayload();
    v71(v38, 0, 1, v39);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
  *((_QWORD *)v36 + 5) = HandyLoggerLogLevel.description.getter(v76);
  *((_QWORD *)v36 + 6) = v49;
  swift_bridgeObjectRelease();
  aBlock.value = v75;
  *(_QWORD *)&aBlock.timescale = v74;
  aBlock.epoch = v73;
  v93 = v72;
  *((_QWORD *)v36 + 3) = LogArea.description.getter();
  *((_QWORD *)v36 + 4) = v50;
  swift_bridgeObjectRelease();
  v51 = v78;
  *(_QWORD *)v36 = v77;
  *((_QWORD *)v36 + 1) = v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = v87;
  v53 = (uint64_t)v84;
  v54 = (uint64_t)v83;
  if ((v81 & 0x8000000000000000) == 0 && !HIDWORD(v81))
  {
    *((_DWORD *)v36 + 4) = v81;
    Date.timeIntervalSince1970.getter();
    CMTimeMakeWithSeconds(&aBlock, v55, 1000000);
    value = aBlock.value;
    timescale = aBlock.timescale;
    outlined init with copy of CMTimeProtobuf?(v40, v53);
    v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
    if (v58(v53, 1, v52) == 1)
    {
      *(_QWORD *)v54 = 0;
      *(_DWORD *)(v54 + 8) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for CMTimeProtobuf?);
    }
    else
    {
      outlined init with take of CMTimeProtobuf(v53, v54);
    }
    *(_DWORD *)(v54 + 8) = timescale;
    outlined destroy of Coordinate3DPB?(v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined init with take of CMTimeProtobuf(v54, v40);
    v59 = v80;
    v80(v40, 0, 1, v52);
    v60 = v86;
    outlined init with copy of CMTimeProtobuf?(v40, v86);
    if (v58(v60, 1, v52) == 1)
    {
      v61 = v85;
      *v85 = 0;
      *((_DWORD *)v61 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v60, &demangling cache variable for type metadata for CMTimeProtobuf?);
    }
    else
    {
      v61 = v85;
      outlined init with take of CMTimeProtobuf(v60, (uint64_t)v85);
    }
    *v61 = value;
    outlined destroy of Coordinate3DPB?(v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined init with take of CMTimeProtobuf((uint64_t)v61, v40);
    v59(v40, 0, 1, v52);
    v62 = v88;
    v63 = *(NSObject **)(v88 + 40);
    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = v62;
    *(_QWORD *)(v64 + 24) = v36;
    v65 = swift_allocObject();
    v45 = partial apply for closure #1 in HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:);
    *(_QWORD *)(v65 + 16) = partial apply for closure #1 in HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:);
    *(_QWORD *)(v65 + 24) = v64;
    v94 = thunk for @callee_guaranteed () -> ()partial apply;
    v95 = v65;
    aBlock.value = MEMORY[0x24BDAC760];
    *(_QWORD *)&aBlock.timescale = 1107296256;
    aBlock.epoch = (CMTimeEpoch)thunk for @escaping @callee_guaranteed () -> ();
    v93 = &block_descriptor_28;
    v66 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v63, v66);
    _Block_release(v66);
    LOBYTE(v63) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v63 & 1) == 0)
      goto LABEL_15;
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ObjC metadata update function for HandyLoggerBufferSink()
{
  return type metadata accessor for HandyLoggerBufferSink();
}

uint64_t type metadata accessor for HandyLoggerBufferSink()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HandyLoggerBufferSink;
  if (!type metadata singleton initialization cache for HandyLoggerBufferSink)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for HandyLoggerBufferSink()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for HandyLoggerBufferSink()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HandyLoggerBufferSink.__allocating_init(withPath:withLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 216))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of HandyLoggerBufferSink.clearLogs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of HandyLoggerBufferSink.flush()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t outlined init with copy of LogMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LogMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23D95662C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)()
{
  uint64_t v0;

  return closure #1 in HandyLoggerBufferSink.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23D956658()
{
  return swift_deallocObject();
}

unint64_t specialized Sequence.min(by:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = a1 + 64;
  v2 = *(_BYTE *)(a1 + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v23 = *(_QWORD *)(a1 + 72);
    if (v23)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v23 = *(_QWORD *)(a1 + 80);
      if (v23)
      {
        v6 = 2;
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 88);
        if (v23)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v23 = *(_QWORD *)(a1 + 96);
          if (v23)
          {
            v6 = 4;
          }
          else
          {
            v23 = *(_QWORD *)(a1 + 104);
            if (!v23)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v23 - 1) & v23;
    v7 = __clz(__rbit64(v23)) + (v6 << 6);
  }
  v10 = 4 * v7;
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_DWORD *)(v11 + v10);
  v14 = *(float *)(v12 + v10);
  v15 = v14;
  while (v8)
  {
    v16 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v17 = v16 | (v6 << 6);
LABEL_7:
    v18 = 4 * v17;
    if (*(float *)(v12 + v18) < v15)
    {
      v13 = *(_DWORD *)(v11 + v18);
      v14 = *(float *)(v12 + v18);
      v15 = v14;
    }
  }
  v19 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v19 >= v9)
    return v13 | ((unint64_t)LODWORD(v14) << 32);
  v20 = *(_QWORD *)(v1 + 8 * v19);
  ++v6;
  if (v20)
    goto LABEL_25;
  v6 = v19 + 1;
  if (v19 + 1 >= v9)
    return v13 | ((unint64_t)LODWORD(v14) << 32);
  v20 = *(_QWORD *)(v1 + 8 * v6);
  if (v20)
    goto LABEL_25;
  v6 = v19 + 2;
  if (v19 + 2 >= v9)
    return v13 | ((unint64_t)LODWORD(v14) << 32);
  v20 = *(_QWORD *)(v1 + 8 * v6);
  if (v20)
    goto LABEL_25;
  v6 = v19 + 3;
  if (v19 + 3 >= v9)
    return v13 | ((unint64_t)LODWORD(v14) << 32);
  v20 = *(_QWORD *)(v1 + 8 * v6);
  if (v20)
  {
LABEL_25:
    v8 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v6 << 6);
    goto LABEL_7;
  }
  v21 = v19 + 4;
  if (v21 >= v9)
    return v13 | ((unint64_t)LODWORD(v14) << 32);
  v20 = *(_QWORD *)(v1 + 8 * v21);
  if (v20)
  {
    v6 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v6 >= v9)
      return v13 | ((unint64_t)LODWORD(v14) << 32);
    v20 = *(_QWORD *)(v1 + 8 * v6);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v24 = 0;
  v25 = 6;
  if (v9 > 6)
    v25 = v9;
  v26 = v25 - 6;
  while (v26 != v24)
  {
    v23 = *(_QWORD *)(a1 + 112 + 8 * v24++);
    if (v23)
    {
      v6 = v24 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t JointOcclusionSuppressor.init(occlusionThreshold:)(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = v1;
  *(_QWORD *)(v1 + 16) = 7;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 48) = &outlined read-only object #0 of JointOcclusionSuppressor.init(occlusionThreshold:);
  *(_QWORD *)(v1 + 56) = &outlined read-only object #1 of JointOcclusionSuppressor.init(occlusionThreshold:);
  *(float *)(v1 + 40) = a1;
  return result;
}

BOOL JointOcclusionSuppressor.shouldSuppress(basedOn:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = v1 + 32;
  while (*(_BYTE *)(v5 + v3) != 1 || !__OFADD__(v4++, 1))
  {
    if (v2 == ++v3)
      return (double)v4 / (double)v2 > 0.5;
  }
  __break(1u);
  return (double)v4 / (double)v2 > 0.5;
}

uint64_t JointOcclusionSuppressor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JointOcclusionSuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance JointOcclusionSuppressor(uint64_t a1, uint64_t a2)
{
  return specialized JointOcclusionSuppressor.update(inProgress:withHand:withData:atTime:)(a1, a2);
}

BOOL protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance JointOcclusionSuppressor()
{
  return JointOcclusionSuppressor.shouldSuppress(basedOn:)();
}

uint64_t specialized closure #2 in JointOcclusionSuppressor.update(inProgress:withHand:withData:atTime:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v3 = *(_QWORD *)(result + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v7 = result;
    v24 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v24;
    v8 = (uint64_t *)(v7 + 32);
    v9 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v11 = *v8++;
      v10 = v11;
      if (v11 < 0)
        break;
      if (v10 >= v9)
        goto LABEL_26;
      swift_retain();
      v12 = swift_bridgeObjectRetain();
      v13 = specialized Sequence.min(by:)(v12);
      if ((v14 & 1) != 0)
        v15 = 1.0;
      else
        v15 = *((float *)&v13 + 1);
      v16 = *(float *)(a3 + 40);
      swift_release();
      result = swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(v24 + 16);
      v17 = *(_QWORD *)(v24 + 24);
      if (v18 >= v17 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      *(_QWORD *)(v24 + 16) = v18 + 1;
      *(_BYTE *)(v24 + v18 + 32) = v16 < v15;
      if (!--v3)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_12:
  v19 = *(_QWORD *)(v4 + 16);
  if (!v19)
    goto LABEL_15;
  if ((*(_BYTE *)(v4 + 32) & 1) == 0)
  {
    v20 = 0;
    goto LABEL_24;
  }
  if (v19 == 1)
  {
LABEL_15:
    v20 = 1;
LABEL_24:
    swift_bridgeObjectRelease();
    return v20;
  }
  v21 = 33;
  while (1)
  {
    v22 = v21 - 31;
    if (__OFADD__(v21 - 32, 1))
      break;
    v20 = *(unsigned __int8 *)(v4 + v21++);
    if ((_DWORD)v20 != 1 || v22 == v19)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized JointOcclusionSuppressor.update(inProgress:withHand:withData:atTime:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char **v7;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  unint64_t v11;
  unint64_t v12;

  if ((result & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
      v4 = v2[6];
      swift_retain();
      swift_bridgeObjectRetain();
      v5 = specialized closure #2 in JointOcclusionSuppressor.update(inProgress:withHand:withData:atTime:)(v4, v3, (uint64_t)v2);
      v6 = specialized closure #2 in JointOcclusionSuppressor.update(inProgress:withHand:withData:atTime:)(v2[7], v3, (uint64_t)v2);
      swift_bridgeObjectRelease();
      swift_release();
      v7 = (char **)(v2 + 4);
      swift_beginAccess();
      v8 = (char *)v2[4];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v2[4] = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        *v7 = v8;
      }
      v10 = v5 | v6;
      v12 = *((_QWORD *)v8 + 2);
      v11 = *((_QWORD *)v8 + 3);
      if (v12 >= v11 >> 1)
      {
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v8);
        *v7 = v8;
      }
      *((_QWORD *)v8 + 2) = v12 + 1;
      v8[v12 + 32] = v10 & 1;
      return swift_endAccess();
    }
  }
  else
  {
    swift_beginAccess();
    v2[4] = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
  return result;
}

#error "23D956FFC: call analysis failed (funcsize=201)"

#error "23D957304: call analysis failed (funcsize=193)"

void APL_dgemm_noPack_TN(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, double *a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17)
{
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float64x2_t v20;
  int8x16_t v21;
  float64x2_t v22;
  double *v23;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  __n128 *v37;
  uint64_t v38;
  int8x16_t *v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t *v42;
  uint64_t v43;
  double *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  float64_t *v47;
  _QWORD *f64;
  float64_t *v49;
  double *v50;
  double *v51;
  float64x2_t *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  _QWORD *v64;
  float64_t v65;
  float64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  _QWORD *v72;
  float64_t v73;
  _QWORD *v74;
  float64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v79;
  __n128 *v80;
  int8x16_t *v81;
  double *v82;
  double *v83;
  double v84;
  double *v85;
  double *v86;
  double *v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  char v110;

  v23 = a6;
  v27 = a17;
  v100 = *(uint64_t *)&a10.f64[0];
  a9.f64[1] = a10.f64[0];
  v28 = 0;
  if (a2 >= 2)
  {
    v29 = a2 - 1;
    v30 = 3 * a5;
    v31 = a1 - 3;
    v32 = 32 * a5;
    v33 = a5;
    v34 = 8 * a5;
    v35 = a6;
    v36 = 16 * a7;
    v98 = a17;
    v99 = a8;
    do
    {
      v37 = (__n128 *)(a8 + 8 * v28 * v27);
      v38 = v28 | 1;
      v39 = (int8x16_t *)(a8 + 8 * (v28 | 1) * v27);
      if (a1 <= 3)
      {
        v41 = 0;
        v43 = v38 * a7;
      }
      else
      {
        v40 = v36;
        v41 = 0;
        v42 = (float64x2_t *)&v23[v28 * a7];
        v43 = v38 * a7;
        v44 = v23;
        v45 = (float64x2_t *)&v23[v38 * a7];
        v46 = a4;
        do
        {
          v47 = &a4->f64[(unint64_t)v34 / 8];
          f64 = (_QWORD *)a4[v33].f64;
          v49 = &a4->f64[v30];
          v50 = (double *)v42;
          v51 = (double *)v45;
          v52 = a4;
          v53 = (float64x2_t)veorq_s8((int8x16_t)a15, (int8x16_t)a15);
          v54 = (float64x2_t)veorq_s8((int8x16_t)a16, (int8x16_t)a16);
          v55 = (float64x2_t)veorq_s8(v17, v17);
          v56 = (float64x2_t)veorq_s8(v18, v18);
          v57 = (float64x2_t)veorq_s8(v19, v19);
          v58 = (float64x2_t)veorq_s8((int8x16_t)v20, (int8x16_t)v20);
          v59 = (float64x2_t)veorq_s8(v21, v21);
          v60 = (float64x2_t)veorq_s8((int8x16_t)v22, (int8x16_t)v22);
          if (a3 >= 2)
          {
            v62.f64[0] = a4->f64[0];
            v52 = a4 + 1;
            v63.f64[0] = a4->f64[1];
            v62.f64[1] = *v47;
            v63.f64[1] = v47[1];
            v61 = v47 + 2;
            v65 = *(double *)f64;
            v64 = f64 + 1;
            v67.f64[0] = v65;
            v66 = *(double *)v64;
            f64 = v64 + 1;
            v68.f64[0] = v66;
            v67.f64[1] = *v49;
            v68.f64[1] = v49[1];
            v49 += 2;
            v50 = v42[1].f64;
            v69 = *v42;
            v51 = v45[1].f64;
            v70 = *v45;
            v71 = ((unint64_t)a3 >> 1) - 1;
            if ((unint64_t)a3 >> 1 > 1)
            {
              do
              {
                v53 = vmlaq_n_f64(v53, v62, v69.f64[0]);
                v54 = vmlaq_n_f64(v54, v67, v69.f64[0]);
                v55 = vmlaq_n_f64(v55, v62, v70.f64[0]);
                v73 = v52->f64[0];
                v72 = (_QWORD *)&v52->f64[1];
                v62.f64[0] = v73;
                v56 = vmlaq_n_f64(v56, v67, v70.f64[0]);
                v75 = *(double *)f64;
                v74 = f64 + 1;
                v67.f64[0] = v75;
                v57 = vmlaq_laneq_f64(v57, v63, v69, 1);
                v58 = vmlaq_laneq_f64(v58, v68, v69, 1);
                v76 = *(float64x2_t *)v50;
                v50 += 2;
                v69 = v76;
                v59 = vmlaq_laneq_f64(v59, v63, v70, 1);
                v76.f64[0] = *(float64_t *)v72;
                v52 = (float64x2_t *)(v72 + 1);
                v63.f64[0] = v76.f64[0];
                v60 = vmlaq_laneq_f64(v60, v68, v70, 1);
                v76.f64[0] = *(float64_t *)v74;
                f64 = v74 + 1;
                v68.f64[0] = v76.f64[0];
                v62.f64[1] = *v61;
                v63.f64[1] = v61[1];
                v61 += 2;
                v67.f64[1] = *v49;
                v68.f64[1] = v49[1];
                v49 += 2;
                v77 = *(float64x2_t *)v51;
                v51 += 2;
                v70 = v77;
              }
              while (v71-- > 1);
            }
            v53 = vaddq_f64(vmlaq_n_f64(v53, v62, v69.f64[0]), vmlaq_laneq_f64(v57, v63, v69, 1));
            v54 = vaddq_f64(vmlaq_n_f64(v54, v67, v69.f64[0]), vmlaq_laneq_f64(v58, v68, v69, 1));
            v55 = vaddq_f64(vmlaq_n_f64(v55, v62, v70.f64[0]), vmlaq_laneq_f64(v59, v63, v70, 1));
            v56 = vaddq_f64(vmlaq_n_f64(v56, v67, v70.f64[0]), vmlaq_laneq_f64(v60, v68, v70, 1));
          }
          if ((a3 & 1) != 0)
          {
            v79.f64[0] = *(float64_t *)f64;
            v79.f64[1] = *v49;
            v53 = vmlaq_n_f64(v53, *v52, *v50);
            v54 = vmlaq_n_f64(v54, v79, *v50);
            v55 = vmlaq_n_f64(v55, *v52, *v51);
            v56 = vmlaq_n_f64(v56, v79, *v51);
          }
          v19 = *(int8x16_t *)v37;
          v20 = (float64x2_t)v37[1];
          v21 = *v39;
          v22 = (float64x2_t)v39[1];
          a15 = vmlaq_laneq_f64(vmulq_n_f64(v53, a9.f64[0]), *(float64x2_t *)v37, a9, 1);
          a16 = vmlaq_laneq_f64(vmulq_n_f64(v54, a9.f64[0]), v20, a9, 1);
          v17 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v55, a9.f64[0]), *(float64x2_t *)v39, a9, 1);
          v18 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v56, a9.f64[0]), v22, a9, 1);
          *v37 = (__n128)a15;
          v80 = v37 + 1;
          *v80 = (__n128)a16;
          v37 = v80 + 1;
          *v39 = v17;
          v81 = v39 + 1;
          *v81 = v18;
          v39 = v81 + 1;
          v41 += 4;
          a4 = (float64x2_t *)((char *)a4 + v32);
        }
        while (v41 < v31);
        a4 = v46;
        v36 = v40;
        v23 = v44;
        v27 = a17;
        a8 = v99;
      }
      if (v41 < a1)
      {
        v82 = &v23[v43];
        v83 = (double *)((char *)a4->f64 + v34 * v41);
        do
        {
          if (a3 < 1)
          {
            v89 = 0.0;
            v84 = 0.0;
          }
          else
          {
            v84 = 0.0;
            v85 = v35;
            v86 = v83;
            v87 = v82;
            v88 = a3;
            v89 = 0.0;
            do
            {
              v90 = *v85++;
              v91 = v90;
              v92 = *v86++;
              v93 = v92;
              v89 = v89 + v91 * v92;
              v94 = *v87++;
              v84 = v84 + v94 * v93;
              --v88;
            }
            while (v88);
          }
          a14.f64[0] = a9.f64[0];
          v37->n128_f64[0] = v89 * a9.f64[0] + v37->n128_f64[0] * *(double *)&v100;
          v37 = (__n128 *)((char *)v37 + 8);
          *(_QWORD *)&a11.f64[0] = v39->i64[0];
          *(_QWORD *)&a12.f64[0] = v100;
          a13.f64[0] = a9.f64[0];
          *(double *)v39->i64 = v84 * a9.f64[0] + *(double *)v39->i64 * *(double *)&v100;
          v39 = (int8x16_t *)((char *)v39 + 8);
          ++v41;
          v83 = (double *)((char *)v83 + v34);
        }
        while (v41 != a1);
      }
      v28 += 2;
      v35 = (double *)((char *)v35 + v36);
    }
    while (v28 < v29);
  }
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&a10.f64[0] = v100;
    LODWORD(v95) = 1;
    cblas_dgemv_sequential(101, 111, a1, a3, (uint64_t)a4, a5, (uint64_t)&v23[v28 * a7], 1, a9, a10, a11, a12, a13, a14, a15, a16, (double *)(a8 + 8 * v28 * v27), v95, a5,
      a2,
      v98,
      v99,
      v100,
      *(uint64_t *)&a9.f64[0],
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110);
  }
}

void APL_dgemm_noPack_TT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17)
{
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  double *v28;
  double *f64;
  double *v30;
  double *v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  __n128 *v58;
  int8x16_t *v59;
  double *v60;
  double v61;
  double *v62;
  uint64_t v63;
  double *v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  char vars0;

  v68 = *(uint64_t *)&a10.f64[0];
  a9.f64[1] = a10.f64[0];
  if (a2 < 2)
  {
    v20 = 0;
    if ((a2 & 1) == 0)
      return;
    goto LABEL_25;
  }
  v20 = 0;
  v21 = (double *)(a6 + 8);
  v22 = 8 * a5;
  do
  {
    v23 = (float64x2_t *)(a8 + 8 * v20 * a17);
    v24 = (float64x2_t *)(a8 + 8 * (v20 | 1) * a17);
    if (a1 < 4)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      v26 = (float64x2_t *)(a6 + 8 * v20);
      v27 = (float64x2_t *)a4;
      do
      {
        v28 = &v27->f64[(unint64_t)v22 / 8];
        f64 = v27[a5].f64;
        v30 = &v27->f64[3 * a5];
        v31 = (double *)v27;
        v32 = (float64x2_t *)(a6 + 8 * v20);
        v33 = (float64x2_t)veorq_s8((int8x16_t)a15, (int8x16_t)a15);
        v34 = (float64x2_t)veorq_s8((int8x16_t)a16, (int8x16_t)a16);
        v35 = (float64x2_t)veorq_s8(v17, v17);
        v36 = (float64x2_t)veorq_s8(v18, v18);
        if (a3 >= 2)
        {
          v37 = *v26;
          v38 = *(float64x2_t *)((char *)v26 + 8 * a7);
          v31 = v27[1].f64;
          v39 = *v27;
          v40 = *(float64x2_t *)v28;
          v28 += 2;
          v41 = v40;
          v42 = *(float64x2_t *)f64;
          f64 += 2;
          v43 = v42;
          v44 = *(float64x2_t *)v30;
          v30 += 2;
          v45 = v44;
          v46 = ((unint64_t)a3 >> 1) - 1;
          if ((unint64_t)a3 >> 1 > 1)
          {
            do
            {
              v32 += a7;
              v47 = vmlaq_n_f64(v33, v37, v39.f64[0]);
              v48 = vmlaq_n_f64(v34, v37, v41.f64[0]);
              v49 = vmlaq_n_f64(v35, v37, v43.f64[0]);
              v50 = vmlaq_n_f64(v36, v37, v45.f64[0]);
              v37 = *v32;
              v33 = vmlaq_laneq_f64(v47, v38, v39, 1);
              v51 = *(float64x2_t *)v31;
              v31 += 2;
              v39 = v51;
              v34 = vmlaq_laneq_f64(v48, v38, v41, 1);
              v52 = *(float64x2_t *)v28;
              v28 += 2;
              v41 = v52;
              v35 = vmlaq_laneq_f64(v49, v38, v43, 1);
              v53 = *(float64x2_t *)f64;
              f64 += 2;
              v43 = v53;
              v36 = vmlaq_laneq_f64(v50, v38, v45, 1);
              v54 = *(float64x2_t *)v30;
              v30 += 2;
              v45 = v54;
              v38 = *(float64x2_t *)((char *)v32 + 8 * a7);
            }
            while (v46-- > 1);
          }
          v32 += a7;
          v33 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v37, v39.f64[0]), v38, v39, 1);
          v34 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v37, v41.f64[0]), v38, v41, 1);
          v35 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v37, v43.f64[0]), v38, v43, 1);
          v36 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v37, v45.f64[0]), v38, v45, 1);
        }
        if ((a3 & 1) != 0)
        {
          v33 = vmlaq_n_f64(v33, *v32, *v31);
          v34 = vmlaq_n_f64(v34, *v32, *v28);
          v35 = vmlaq_n_f64(v35, *v32, *f64);
          v36 = vmlaq_n_f64(v36, *v32, *v30);
        }
        v56 = (float64x2_t)vtrn2q_s64((int64x2_t)v33, (int64x2_t)v34);
        v57 = (float64x2_t)vtrn2q_s64((int64x2_t)v35, (int64x2_t)v36);
        a15 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vtrn1q_s64((int64x2_t)v33, (int64x2_t)v34), a9.f64[0]), *v23, a9, 1);
        a16 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vtrn1q_s64((int64x2_t)v35, (int64x2_t)v36), a9.f64[0]), v23[1], a9, 1);
        v17 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v56, a9.f64[0]), *v24, a9, 1);
        v18 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v57, a9.f64[0]), v24[1], a9, 1);
        *v23 = a15;
        v58 = (__n128 *)&v23[1];
        *v58 = (__n128)a16;
        v23 = (float64x2_t *)&v58[1];
        *v24 = (float64x2_t)v17;
        v59 = (int8x16_t *)&v24[1];
        *v59 = v18;
        v24 = (float64x2_t *)&v59[1];
        v25 += 4;
        v27 += 2 * a5;
      }
      while (v25 < a1 - 3);
    }
    if (v25 < a1)
    {
      v60 = (double *)(a4 + v22 * v25);
      do
      {
        if (a3 < 1)
        {
          v65 = 0.0;
          v61 = 0.0;
        }
        else
        {
          v61 = 0.0;
          v62 = v60;
          v63 = a3;
          v64 = v21;
          v65 = 0.0;
          do
          {
            v66 = *v62++;
            v65 = v65 + *(v64 - 1) * v66;
            v61 = v61 + *v64 * v66;
            v64 += a7;
            --v63;
          }
          while (v63);
        }
        a14.f64[0] = a9.f64[0];
        v23->f64[0] = v65 * a9.f64[0] + v23->f64[0] * *(double *)&v68;
        v23 = (float64x2_t *)((char *)v23 + 8);
        a11.f64[0] = v24->f64[0];
        *(_QWORD *)&a12.f64[0] = v68;
        a13.f64[0] = a9.f64[0];
        v24->f64[0] = v61 * a9.f64[0] + v24->f64[0] * *(double *)&v68;
        v24 = (float64x2_t *)((char *)v24 + 8);
        ++v25;
        v60 = (double *)((char *)v60 + v22);
      }
      while (v25 != a1);
    }
    v20 += 2;
    v21 += 2;
  }
  while (v20 < a2 - 1);
  if ((a2 & 1) != 0)
  {
LABEL_25:
    *(_QWORD *)&a10.f64[0] = v68;
    LODWORD(v67) = 1;
    cblas_dgemv_sequential(101, 111, a1, a3, a4, a5, a6 + 8 * v20, a7, a9, a10, a11, a12, a13, a14, a15, a16, (double *)(a8 + 8 * v20 * a17), v67, v68,
      *(uint64_t *)&a9.f64[0],
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      vars0);
  }
}

uint64_t Accelerate_AR_dgeqrf(__CLPK_integer *__n1, __CLPK_integer *__n2, uint64_t a3, __CLPK_integer *a4, __CLPK_doublereal *a5, __CLPK_doublereal *a6, int *a7, int *a8)
{
  __CLPK_integer v15;
  int v16;
  __CLPK_integer v17;
  __CLPK_integer v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __CLPK_integer v24;
  unsigned int v25;
  int v26;
  int v27;
  __CLPK_integer v28;
  __CLPK_integer v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  _BOOL4 v35;
  int v36;
  int v37;
  uint64_t v38;
  __CLPK_doublereal *v39;
  __CLPK_integer v40;
  BOOL v41;
  __CLPK_integer v42;
  unsigned int v43;
  uint64_t v44;
  __CLPK_doublereal *v45;
  int v46;
  uint64_t v48;
  __CLPK_integer __info[2];
  __CLPK_integer __m[2];
  __CLPK_integer v51;
  __CLPK_integer __n[3];

  *(_QWORD *)__info = 0;
  *(_QWORD *)__m = 0;
  v48 = *a4;
  *a8 = 0;
  v15 = ilaenv_(&c__1, "DGEQRF", " ", __n1, __n2, &c_n1, &c_n1);
  v16 = *__n2;
  *a6 = (double)(*__n2 * v15);
  v17 = *__n1;
  if (*__n1 < 0)
  {
    v19 = -1;
    goto LABEL_16;
  }
  if (v16 < 0)
  {
    v19 = -2;
    goto LABEL_16;
  }
  if (v17 <= 1)
    v18 = 1;
  else
    v18 = *__n1;
  if (*a4 < v18)
  {
    v19 = -4;
LABEL_16:
    *a8 = v19;
LABEL_17:
    __n[0] = -v19;
    xerbla_();
    return 0;
  }
  v20 = v15;
  v21 = *a7;
  if (v16 <= 1)
    v22 = 1;
  else
    v22 = v16;
  if (v21 < v22 && v21 != -1)
  {
    v19 = -7;
    goto LABEL_16;
  }
  v19 = *a8;
  if (*a8)
    goto LABEL_17;
  if (v21 != -1)
  {
    if (v17 >= v16)
      v24 = v16;
    else
      v24 = *__n1;
    if (v24)
    {
      v25 = 0;
      v26 = ~(_DWORD)v48;
      v27 = 2;
      v43 = v24;
      if (v15 >= 2 && v15 < v24)
      {
        v28 = ilaenv_(&c__3, "DGEQRF", " ", __n1, __n2, &c_n1, &c_n1);
        v24 = v43;
        v25 = v28 & ~(v28 >> 31);
        if (v25 >= v43)
        {
          v27 = 2;
        }
        else
        {
          v29 = *__n2;
          HIDWORD(v48) = v29;
          v16 = v29 * v20;
          v30 = *a7;
          v27 = 2;
          if (*a7 < v29 * v20)
          {
            __n[0] = 2;
            v20 = v30 / v29;
            v31 = ilaenv_(&c__2, "DGEQRF", " ", __n1, __n2, &c_n1, &c_n1);
            v24 = v43;
            v51 = v31;
            if (v31 <= 2)
              v27 = 2;
            else
              v27 = v31;
          }
        }
        v26 = ~(_DWORD)v48;
      }
      v44 = a3 + 8 * v26;
      v32 = 1;
      v33 = v24 - v25;
      if (v24 > v25 && v20 < v24 && v20 >= v27)
      {
        __n[0] = v24 - v25;
        v34 = v33 < 2;
        v35 = v33 > 0;
        if (v20 >= 0)
          v34 = v35;
        if (v34)
        {
          v36 = 0;
          v37 = v48 + 1;
          v38 = 1;
          v39 = a5;
          do
          {
            v40 = v24 + v36;
            if (v24 + v36 >= v20)
              v40 = v20;
            __info[1] = v40;
            __m[1] = v36 + *__n1;
            v46 = v37;
            v45 = (__CLPK_doublereal *)(v44 + 8 * v37);
            dgeqr2_(&__m[1], &__info[1], v45, a4, v39, a6, __info);
            if ((int)v38 + __info[1] <= *__n2)
            {
              __m[1] = v36 + *__n1;
              Accelerate_AR_dlarft((uint64_t)"Forward", (uint64_t)"Columnwise", &__m[1], &__info[1], (uint64_t)v45, a4, (uint64_t)v39, a6, (int *)&v48 + 1);
              __m[1] = v36 + *__n1;
              __m[0] = v36 + *__n2 - __info[1];
              Accelerate_AR_dlarfb((uint64_t)"Left", "Transpose", (uint64_t)"Forward", (uint64_t)"Columnwise", &__m[1], __m, &__info[1], v45, a4, (int)a6, (int *)&v48 + 1, (__CLPK_doublereal *)(v44 + 8 * (v38 + (int)v48 * (__info[1] + (int)v38))), a4, (uint64_t)&a6[__info[1]], (int *)&v48 + 1);
            }
            v41 = v20 + (int)v38 >= __n[0];
            if (v20 >= 0)
              v41 = v20 + (int)v38 <= __n[0];
            v36 -= v20;
            v39 += v20;
            v38 += v20;
            v37 = v46 + v20 * (v48 + 1);
            v24 = v43;
          }
          while (v41);
          v32 = 1 - v36;
        }
        else
        {
          v32 = 1;
        }
      }
      if (v32 <= v24)
      {
        v42 = *__n2 - v32 + 1;
        v51 = *__n1 - v32 + 1;
        __n[0] = v42;
        dgeqr2_(&v51, __n, (__CLPK_doublereal *)(v44 + 8 * (v32 + v32 * (int)v48)), a4, &a5[v32 - 1], a6, __info);
      }
      *a6 = (double)v16;
    }
    else
    {
      *a6 = 1.0;
    }
  }
  return 0;
}

uint64_t Accelerate_AR_sQRSolve_NEWLAPACK(int a1, unsigned int a2, int a3, int a4, __CLPK_real *a5, __CLPK_integer a6, __CLPK_real *a7, __CLPK_real *a8, int *a9)
{
  return Accelerate_AR_sQRSolve_fallback_NEWLAPACK(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t Accelerate_AR_dlarfb(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, __CLPK_integer *a5, __CLPK_integer *a6, __CLPK_integer *a7, __CLPK_doublereal *a8, __CLPK_integer *a9, int a10, int *a11, __CLPK_doublereal *a12, __CLPK_integer *a13, uint64_t a14, int *a15)
{
  uint64_t v18;
  uint64_t v19;
  __CLPK_doublereal *v20;
  char v21;
  int v22;
  int v23;
  __CLPK_integer v24;
  __CLPK_integer v25;
  __CLPK_integer v26;
  int v27;
  uint64_t v28;
  double *v29;
  double *v30;
  __CLPK_integer v31;
  __CLPK_integer v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double *v41;
  double v42;
  int v43;
  int v44;
  __CLPK_integer v45;
  __CLPK_integer v46;
  __CLPK_integer v47;
  int v48;
  uint64_t v49;
  double *v50;
  double *v51;
  __CLPK_integer v52;
  __CLPK_integer v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  double *v62;
  double v63;
  int *v64;
  __CLPK_integer v65;
  __CLPK_integer v66;
  __CLPK_integer v67;
  int v68;
  uint64_t v69;
  double *v70;
  __CLPK_integer v71;
  __CLPK_integer v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  int v81;
  double v82;
  __CLPK_integer v83;
  __CLPK_integer v84;
  __CLPK_integer v85;
  int v86;
  uint64_t v87;
  double *v88;
  double *v89;
  __CLPK_integer v90;
  __CLPK_integer v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  double *v101;
  double v102;
  int *v103;
  __CLPK_integer v104;
  __CLPK_integer v105;
  __CLPK_integer v106;
  int v107;
  uint64_t v108;
  double *v109;
  __CLPK_integer v110;
  __CLPK_integer v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double *v119;
  int v120;
  double v121;
  __CLPK_integer v122;
  __CLPK_integer v123;
  __CLPK_integer v124;
  int v125;
  uint64_t v126;
  double *v127;
  __CLPK_integer v128;
  __CLPK_integer v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  double *v136;
  uint64_t v137;
  double *v138;
  double v139;
  __CLPK_integer v140;
  __CLPK_integer v141;
  __CLPK_integer v142;
  int v143;
  uint64_t v144;
  double *v145;
  double *v146;
  __CLPK_integer v147;
  __CLPK_integer v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double *v157;
  double *v158;
  double v159;
  __CLPK_integer v160;
  __CLPK_integer v161;
  __CLPK_integer v162;
  int v163;
  uint64_t v164;
  double *v165;
  __CLPK_integer v166;
  __CLPK_integer v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  double *v174;
  uint64_t v175;
  double *v176;
  double v177;
  __CLPK_doublereal *v179;
  __CLPK_doublereal *v180;
  uint64_t v182;
  __CLPK_doublereal *v183;
  __CLPK_integer v184;
  uint64_t v185;
  uint64_t v186;
  char v188;
  __CLPK_integer __m;
  int n;
  int v191[3];

  if (*a5 >= 1 && *a6 >= 1)
  {
    v18 = a14;
    v184 = *a9;
    v183 = &a8[~*a9];
    v19 = *a13;
    v182 = ~(_DWORD)v19;
    v20 = &a12[v182];
    v185 = *a15;
    v186 = ~(_DWORD)v185;
    n = 0;
    if (lsame_())
      v21 = 84;
    else
      v21 = 78;
    v188 = v21;
    if (lsame_())
    {
      v22 = lsame_();
      v23 = lsame_();
      if (v22)
      {
        if (v23)
        {
          v191[0] = *a7;
          v24 = iladlr_(a5, a7, a8, a9);
          if (v191[0] <= v24)
            v25 = v24;
          else
            v25 = v191[0];
          __m = v25;
          v26 = iladlc_(&__m, a6, a12, a13);
          v27 = *a7;
          n = v26;
          v191[0] = v27;
          if (v27 >= 1)
          {
            v28 = 0;
            v29 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
            v30 = &a12[v19 + 1 + v182];
            do
            {
              dcopy_(&n, v30, a13, v29, (int *)&c__1_0);
              ++v28;
              v29 += v185;
              ++v30;
            }
            while (v28 < v191[0]);
          }
          Accelerate_AR_dtrmm("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (int)a8, a9, a14, a15);
          v31 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_dgemm("Transpose", "No transpose", &n, a7, v191, (uint64_t)&c_b14, (_DWORD)v20 + 8 * (v31 + 1 + v19), a13, (uint64_t)&v183[v31 + 1 + v184], a9, (uint64_t)&c_b14, a14, SHIDWORD(a14), a15);
          }
          Accelerate_AR_dtrmm("Right", "Upper", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, a10, a11, a14, a15);
          v32 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_dgemm("No transpose", "Transpose", v191, &n, a7, (uint64_t)&c_b25, (_DWORD)v183 + 8 * (v32 + 1 + v184), a9, a14, a15, (uint64_t)&c_b14, (_DWORD)v20 + 8 * (v32 + 1 + v19), (unint64_t)&v20[v32 + 1 + (int)v19] >> 32, a13);
          }
          Accelerate_AR_dtrmm("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (int)a8, a9, a14, a15);
          v33 = *a7;
          if ((int)v33 >= 1)
          {
            v34 = n;
            v35 = v33 + 1;
            v36 = (uint64_t)&a12[v19 + 1 + v182];
            v37 = 8 * v185 + 8 * v186 + a14 + 8;
            v38 = 1;
            do
            {
              if (v34 >= 1)
              {
                v39 = (v34 + 1) - 1;
                v40 = (double *)v37;
                v41 = (double *)v36;
                do
                {
                  v42 = *v40++;
                  *v41 = *v41 - v42;
                  v41 += v19;
                  --v39;
                }
                while (v39);
              }
              ++v38;
              v36 += 8;
              v37 += 8 * v185;
            }
            while (v38 != v35);
          }
        }
        else if (lsame_())
        {
          v191[0] = *a7;
          v83 = iladlr_(a6, a7, a8, a9);
          if (v191[0] <= v83)
            v84 = v83;
          else
            v84 = v191[0];
          __m = v84;
          v85 = iladlr_(a5, &__m, a12, a13);
          v86 = *a7;
          n = v85;
          v191[0] = v86;
          if (v86 >= 1)
          {
            v87 = 0;
            v88 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
            v89 = &a12[v19 + 1 + v182];
            do
            {
              dcopy_(&n, v89, (int *)&c__1_0, v88, (int *)&c__1_0);
              ++v87;
              v88 += v185;
              v89 += v19;
            }
            while (v87 < v191[0]);
          }
          Accelerate_AR_dtrmm("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (int)a8, a9, a14, a15);
          v90 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_dgemm("No transpose", "No transpose", &n, a7, v191, (uint64_t)&c_b14, (_DWORD)v20 + 8 * ((v90 + 1) * v19 + 1), a13, (uint64_t)&v183[v90 + 1 + v184], a9, (uint64_t)&c_b14, a14, SHIDWORD(a14), a15);
          }
          Accelerate_AR_dtrmm("Right", "Upper", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, a10, a11, a14, a15);
          v91 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            v92 = v91 + 1;
            v179 = &v20[v92 * (int)v19 + 1];
            Accelerate_AR_dgemm("No transpose", "Transpose", &n, v191, a7, (uint64_t)&c_b25, a14, a15, (uint64_t)&v183[v92 + v184], a9, (uint64_t)&c_b14, (int)v179, SHIDWORD(v179), a13);
          }
          Accelerate_AR_dtrmm("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (int)a8, a9, a14, a15);
          v93 = *a7;
          if ((int)v93 >= 1)
          {
            v94 = n;
            v95 = v93 + 1;
            v96 = (uint64_t)&a12[v19 + 1 + v182];
            v97 = 8 * v185 + 8 * v186 + a14 + 8;
            v98 = 1;
            do
            {
              if (v94 >= 1)
              {
                v99 = (v94 + 1) - 1;
                v100 = (double *)v97;
                v101 = (double *)v96;
                do
                {
                  v102 = *v100++;
                  *v101 = *v101 - v102;
                  ++v101;
                  --v99;
                }
                while (v99);
              }
              ++v98;
              v96 += 8 * v19;
              v97 += 8 * v185;
            }
            while (v98 != v95);
          }
        }
      }
      else if (v23)
      {
        v191[0] = *a7;
        v64 = a9;
        v65 = iladlr_(a5, a7, a8, a9);
        if (v191[0] <= v65)
          v66 = v65;
        else
          v66 = v191[0];
        __m = v66;
        v67 = iladlc_(&__m, a6, a12, a13);
        v68 = *a7;
        n = v67;
        v191[0] = v68;
        if (v68 >= 1)
        {
          v69 = 0;
          v70 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
          do
          {
            dcopy_(&n, &v20[(int)v19 + 1 + (int)v69++ + __m - *a7], a13, v70, (int *)&c__1_0);
            v70 += v185;
          }
          while (v69 < v191[0]);
          v68 = *a7;
          v18 = a14;
          v64 = a9;
        }
        Accelerate_AR_dtrmm("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (_DWORD)v183 + 8 * (v184 + 1 + __m - v68), v64, v18, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_dgemm("Transpose", "No transpose", &n, a7, v191, (uint64_t)&c_b14, (int)a12, a13, (uint64_t)a8, v64, (uint64_t)&c_b14, v18, SHIDWORD(v18), a15);
        }
        Accelerate_AR_dtrmm("Right", "Lower", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, a10, a11, v18, a15);
        v71 = __m;
        v72 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_dgemm("No transpose", "Transpose", v191, &n, a7, (uint64_t)&c_b25, (int)a8, v64, v18, a15, (uint64_t)&c_b14, (int)a12, SHIDWORD(a12), a13);
          v71 = __m;
          v72 = *a7;
        }
        Accelerate_AR_dtrmm("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (_DWORD)v183 + 8 * (v184 + 1 + v71 - v72), v64, v18, a15);
        v73 = *a7;
        if ((int)v73 >= 1)
        {
          v74 = n;
          v75 = v73 + 1;
          v76 = __m + v19 - v73 + 1;
          v77 = 8 * v185 + 8 * v186 + v18 + 8;
          v78 = 1;
          do
          {
            if (v74 >= 1)
            {
              v79 = (v74 + 1) - 1;
              v80 = (double *)v77;
              v81 = v76;
              do
              {
                v82 = *v80++;
                v20[v81] = v20[v81] - v82;
                v81 += v19;
                --v79;
              }
              while (v79);
            }
            ++v78;
            ++v76;
            v77 += 8 * v185;
          }
          while (v78 != v75);
        }
      }
      else if (lsame_())
      {
        v191[0] = *a7;
        v122 = iladlr_(a6, a7, a8, a9);
        if (v191[0] <= v122)
          v123 = v122;
        else
          v123 = v191[0];
        __m = v123;
        v124 = iladlr_(a5, &__m, a12, a13);
        v125 = *a7;
        n = v124;
        v191[0] = v125;
        if (v125 >= 1)
        {
          v126 = 0;
          v127 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
          do
          {
            dcopy_(&n, &v20[(int)v19 + 1 + (int)v19 * ((int)v126++ + *a6 - *a7)], (int *)&c__1_0, v127, (int *)&c__1_0);
            v127 += v185;
          }
          while (v126 < v191[0]);
          v125 = *a7;
        }
        Accelerate_AR_dtrmm("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (_DWORD)v183 + 8 * (v184 + 1 + __m - v125), a9, a14, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_dgemm("No transpose", "No transpose", &n, a7, v191, (uint64_t)&c_b14, (int)a12, a13, (uint64_t)a8, a9, (uint64_t)&c_b14, a14, SHIDWORD(a14), a15);
        }
        Accelerate_AR_dtrmm("Right", "Lower", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, a10, a11, a14, a15);
        v128 = __m;
        v129 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_dgemm("No transpose", "Transpose", &n, v191, a7, (uint64_t)&c_b25, a14, a15, (uint64_t)a8, a9, (uint64_t)&c_b14, (int)a12, SHIDWORD(a12), a13);
          v128 = __m;
          v129 = *a7;
        }
        Accelerate_AR_dtrmm("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (_DWORD)v183 + 8 * (v184 + 1 + v128 - v129), a9, a14, a15);
        v130 = *a7;
        if ((int)v130 >= 1)
        {
          v131 = n;
          v132 = v130 + 1;
          v133 = v19 + v19 * (__m - v130);
          v134 = 8 * v185 + 8 * v186 + a14 + 8;
          v135 = 1;
          do
          {
            if (v131 >= 1)
            {
              v136 = &a12[v182 + 1 + v133];
              v137 = (v131 + 1) - 1;
              v138 = (double *)v134;
              do
              {
                v139 = *v138++;
                *v136 = *v136 - v139;
                ++v136;
                --v137;
              }
              while (v137);
            }
            ++v135;
            v133 += v19;
            v134 += 8 * v185;
          }
          while (v135 != v132);
        }
      }
    }
    else if (lsame_())
    {
      v43 = lsame_();
      v44 = lsame_();
      if (v43)
      {
        if (v44)
        {
          v191[0] = *a7;
          v45 = iladlc_(a7, a5, a8, a9);
          if (v191[0] <= v45)
            v46 = v45;
          else
            v46 = v191[0];
          __m = v46;
          v47 = iladlc_(&__m, a6, a12, a13);
          v48 = *a7;
          n = v47;
          v191[0] = v48;
          if (v48 >= 1)
          {
            v49 = 0;
            v50 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
            v51 = &a12[v19 + 1 + v182];
            do
            {
              dcopy_(&n, v51, a13, v50, (int *)&c__1_0);
              ++v49;
              v50 += v185;
              ++v51;
            }
            while (v49 < v191[0]);
          }
          Accelerate_AR_dtrmm("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (int)a8, a9, a14, a15);
          v52 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_dgemm("Transpose", "Transpose", &n, a7, v191, (uint64_t)&c_b14, (_DWORD)v20 + 8 * (v52 + 1 + v19), a13, (uint64_t)&v183[(v52 + 1) * v184 + 1], a9, (uint64_t)&c_b14, a14, SHIDWORD(a14), a15);
          }
          Accelerate_AR_dtrmm("Right", "Upper", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, a10, a11, a14, a15);
          v53 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_dgemm("Transpose", "Transpose", v191, &n, a7, (uint64_t)&c_b25, (_DWORD)v183 + 8 * ((v53 + 1) * v184 + 1), a9, a14, a15, (uint64_t)&c_b14, (_DWORD)v20 + 8 * (v53 + 1 + v19), (unint64_t)&v20[v53 + 1 + (int)v19] >> 32, a13);
          }
          Accelerate_AR_dtrmm("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (int)a8, a9, a14, a15);
          v54 = *a7;
          if ((int)v54 >= 1)
          {
            v55 = n;
            v56 = v54 + 1;
            v57 = (uint64_t)&a12[v19 + 1 + v182];
            v58 = 8 * v185 + 8 * v186 + a14 + 8;
            v59 = 1;
            do
            {
              if (v55 >= 1)
              {
                v60 = (v55 + 1) - 1;
                v61 = (double *)v58;
                v62 = (double *)v57;
                do
                {
                  v63 = *v61++;
                  *v62 = *v62 - v63;
                  v62 += v19;
                  --v60;
                }
                while (v60);
              }
              ++v59;
              v57 += 8;
              v58 += 8 * v185;
            }
            while (v59 != v56);
          }
        }
        else if (lsame_())
        {
          v191[0] = *a7;
          v140 = iladlc_(a7, a6, a8, a9);
          if (v191[0] <= v140)
            v141 = v140;
          else
            v141 = v191[0];
          __m = v141;
          v142 = iladlr_(a5, &__m, a12, a13);
          v143 = *a7;
          n = v142;
          v191[0] = v143;
          if (v143 >= 1)
          {
            v144 = 0;
            v145 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
            v146 = &a12[v19 + 1 + v182];
            do
            {
              dcopy_(&n, v146, (int *)&c__1_0, v145, (int *)&c__1_0);
              ++v144;
              v145 += v185;
              v146 += v19;
            }
            while (v144 < v191[0]);
          }
          Accelerate_AR_dtrmm("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (int)a8, a9, a14, a15);
          v147 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_dgemm("No transpose", "Transpose", &n, a7, v191, (uint64_t)&c_b14, (_DWORD)v20 + 8 * ((v147 + 1) * v19 + 1), a13, (uint64_t)&v183[(v147 + 1) * v184 + 1], a9, (uint64_t)&c_b14, a14, SHIDWORD(a14), a15);
          }
          Accelerate_AR_dtrmm("Right", "Upper", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, a10, a11, a14, a15);
          v148 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            v149 = v148 + 1;
            v180 = &v20[v149 * (int)v19 + 1];
            Accelerate_AR_dgemm("No transpose", "No transpose", &n, v191, a7, (uint64_t)&c_b25, a14, a15, (uint64_t)&v183[v149 * v184 + 1], a9, (uint64_t)&c_b14, (int)v180, SHIDWORD(v180), a13);
          }
          Accelerate_AR_dtrmm("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (int)a8, a9, a14, a15);
          v150 = *a7;
          if ((int)v150 >= 1)
          {
            v151 = n;
            v152 = v150 + 1;
            v153 = (uint64_t)&a12[v19 + 1 + v182];
            v154 = 8 * v185 + 8 * v186 + a14 + 8;
            v155 = 1;
            do
            {
              if (v151 >= 1)
              {
                v156 = (v151 + 1) - 1;
                v157 = (double *)v154;
                v158 = (double *)v153;
                do
                {
                  v159 = *v157++;
                  *v158 = *v158 - v159;
                  ++v158;
                  --v156;
                }
                while (v156);
              }
              ++v155;
              v153 += 8 * v19;
              v154 += 8 * v185;
            }
            while (v155 != v152);
          }
        }
      }
      else if (v44)
      {
        v191[0] = *a7;
        v103 = a9;
        v104 = iladlc_(a7, a5, a8, a9);
        if (v191[0] <= v104)
          v105 = v104;
        else
          v105 = v191[0];
        __m = v105;
        v106 = iladlc_(&__m, a6, a12, a13);
        v107 = *a7;
        n = v106;
        v191[0] = v107;
        if (v107 >= 1)
        {
          v108 = 0;
          v109 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
          do
          {
            dcopy_(&n, &v20[(int)v19 + 1 + (int)v108++ + __m - *a7], a13, v109, (int *)&c__1_0);
            v109 += v185;
          }
          while (v108 < v191[0]);
          v107 = *a7;
          v18 = a14;
          v103 = a9;
        }
        Accelerate_AR_dtrmm("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (_DWORD)v183 + 8 * (v184 + v184 * (__m - v107) + 1), v103, v18, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_dgemm("Transpose", "Transpose", &n, a7, v191, (uint64_t)&c_b14, (int)a12, a13, (uint64_t)a8, v103, (uint64_t)&c_b14, v18, SHIDWORD(v18), a15);
        }
        Accelerate_AR_dtrmm("Right", "Lower", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, a10, a11, v18, a15);
        v110 = __m;
        v111 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_dgemm("Transpose", "Transpose", v191, &n, a7, (uint64_t)&c_b25, (int)a8, v103, v18, a15, (uint64_t)&c_b14, (int)a12, SHIDWORD(a12), a13);
          v110 = __m;
          v111 = *a7;
        }
        Accelerate_AR_dtrmm("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (_DWORD)v183 + 8 * (v184 + v184 * (v110 - v111) + 1), v103, v18, a15);
        v112 = *a7;
        if ((int)v112 >= 1)
        {
          v113 = n;
          v114 = v112 + 1;
          v115 = __m + v19 - v112 + 1;
          v116 = 8 * v185 + 8 * v186 + v18 + 8;
          v117 = 1;
          do
          {
            if (v113 >= 1)
            {
              v118 = (v113 + 1) - 1;
              v119 = (double *)v116;
              v120 = v115;
              do
              {
                v121 = *v119++;
                v20[v120] = v20[v120] - v121;
                v120 += v19;
                --v118;
              }
              while (v118);
            }
            ++v117;
            ++v115;
            v116 += 8 * v185;
          }
          while (v117 != v114);
        }
      }
      else if (lsame_())
      {
        v191[0] = *a7;
        v160 = iladlc_(a7, a6, a8, a9);
        if (v191[0] <= v160)
          v161 = v160;
        else
          v161 = v191[0];
        __m = v161;
        v162 = iladlr_(a5, &__m, a12, a13);
        v163 = *a7;
        n = v162;
        v191[0] = v163;
        if (v163 >= 1)
        {
          v164 = 0;
          v165 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
          do
          {
            dcopy_(&n, &v20[(int)v19 + 1 + (int)v19 * ((int)v164++ + __m - *a7)], (int *)&c__1_0, v165, (int *)&c__1_0);
            v165 += v185;
          }
          while (v164 < v191[0]);
          v163 = *a7;
        }
        Accelerate_AR_dtrmm("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (_DWORD)v183 + 8 * (v184 + v184 * (__m - v163) + 1), a9, a14, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_dgemm("No transpose", "Transpose", &n, a7, v191, (uint64_t)&c_b14, (int)a12, a13, (uint64_t)a8, a9, (uint64_t)&c_b14, a14, SHIDWORD(a14), a15);
        }
        Accelerate_AR_dtrmm("Right", "Lower", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, a10, a11, a14, a15);
        v166 = __m;
        v167 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_dgemm("No transpose", "No transpose", &n, v191, a7, (uint64_t)&c_b25, a14, a15, (uint64_t)a8, a9, (uint64_t)&c_b14, (int)a12, SHIDWORD(a12), a13);
          v166 = __m;
          v167 = *a7;
        }
        Accelerate_AR_dtrmm("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14, (_DWORD)v183 + 8 * (v184 + v184 * (v166 - v167) + 1), a9, a14, a15);
        v168 = *a7;
        if ((int)v168 >= 1)
        {
          v169 = n;
          v170 = v168 + 1;
          v171 = v19 + v19 * (__m - v168);
          v172 = 8 * v185 + 8 * v186 + a14 + 8;
          v173 = 1;
          do
          {
            if (v169 >= 1)
            {
              v174 = &a12[v182 + 1 + v171];
              v175 = (v169 + 1) - 1;
              v176 = (double *)v172;
              do
              {
                v177 = *v176++;
                *v174 = *v174 - v177;
                ++v174;
                --v175;
              }
              while (v175);
            }
            ++v173;
            v171 += v19;
            v172 += 8 * v185;
          }
          while (v173 != v170);
        }
      }
    }
  }
  return 0;
}

uint64_t Accelerate_AR_dlauum(char *a1, __CLPK_integer *a2, __CLPK_doublereal *a3, int *a4, __CLPK_integer *a5)
{
  int v9;
  int v10;
  __CLPK_integer v11;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __CLPK_integer v20;
  __CLPK_doublereal *v21;
  __CLPK_doublereal *v22;
  __CLPK_integer v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  __CLPK_integer v29;
  __CLPK_doublereal *v30;
  int v31;
  __CLPK_integer *v32;
  __CLPK_doublereal *v33;
  uint64_t v34;
  __CLPK_integer __n;
  __CLPK_integer v37;
  int v38;

  v9 = *a4;
  *a5 = 0;
  v10 = lsame_();
  if (!v10 && !lsame_())
  {
    v12 = -1;
    goto LABEL_15;
  }
  v34 = *a2;
  if ((v34 & 0x80000000) != 0)
  {
    v12 = -2;
    goto LABEL_15;
  }
  if (v34 <= 1)
    v11 = 1;
  else
    v11 = *a2;
  if (*a4 < v11)
  {
    v12 = -4;
LABEL_15:
    *a5 = v12;
    goto LABEL_16;
  }
  v12 = *a5;
  if (*a5)
  {
LABEL_16:
    v38 = -v12;
    xerbla_();
    return 0;
  }
  v31 = v9;
  if ((_DWORD)v34)
  {
    if (v34 > 0x18)
    {
      v14 = ~v9;
      v32 = a2;
      v33 = &a3[v14];
      if (v10)
      {
        v15 = 0;
        v16 = 0;
        v17 = (uint64_t)&a3[v31 + 1 + v14];
        v18 = 1;
        v19 = v31;
        do
        {
          v20 = v15 + *a2;
          v37 = v20;
          v38 = v16;
          if (v20 - 1 > 22)
            v20 = 24;
          __n = v20;
          v21 = &v33[v16 + v19];
          v22 = v21 + 1;
          Accelerate_AR_dtrmm("Right", "Upper", "Transpose", "Non-unit", (unsigned int *)&v38, (unsigned int *)&__n, (uint64_t)&c_b15, (_DWORD)v21 + 8, a4, v17, a4);
          dlauu2_("Upper", &__n, v22, a4, a5);
          v23 = v16 + __n + 1;
          if (v23 <= *a2)
          {
            v37 = v15 + *a2 - __n;
            v38 = v16;
            Accelerate_AR_dgemm("No transpose", "Transpose", &v38, &__n, &v37, (uint64_t)&c_b15, (_DWORD)v33 + 8 * (v23 * v31 + 1), a4, (uint64_t)&v33[v16 + 1 + v31 * (__n + v18)], a4, (uint64_t)&c_b15, v17, SHIDWORD(v17), a4);
            v38 = v15 + *v32 - __n;
            a2 = v32;
            Accelerate_AR_dsyrk("Upper", "No transpose", (unsigned int *)&__n, (unsigned int *)&v38, &c_b15, (uint64_t)&v33[v16 + 1 + v31 * (__n + v18)], (unsigned int *)a4, &c_b15, (uint64_t)v22, a4);
          }
          v24 = v16 + 25;
          v16 += 24;
          v15 -= 24;
          v19 += 24 * v31;
          v17 += 192 * v31;
          v18 += 24;
        }
        while (v24 <= v34);
      }
      else
      {
        v25 = 0;
        v26 = v31 + 1;
        v27 = (uint64_t)&a3[v14 + 1 + v31];
        v28 = 1;
        do
        {
          v29 = v25 + *a2;
          v37 = v29;
          if (v29 - 1 > 22)
            v29 = 24;
          __n = v29;
          v38 = v28 - 1;
          v30 = &v33[v26];
          Accelerate_AR_dtrmm("Left", "Lower", "Transpose", "Non-unit", (unsigned int *)&__n, (unsigned int *)&v38, (uint64_t)&c_b15, (_DWORD)v33 + 8 * v26, a4, v27, a4);
          dlauu2_("Lower", &__n, v30, a4, a5);
          if (v28 + __n <= *a2)
          {
            v37 = v25 + *a2 - __n;
            v38 = v28 - 1;
            Accelerate_AR_dgemm("Transpose", "No transpose", &__n, &v38, &v37, (uint64_t)&c_b15, (_DWORD)v33 + 8 * (v26 + __n), a4, (uint64_t)&v33[v31 + v28 + __n], a4, (uint64_t)&c_b15, v27, SHIDWORD(v27), a4);
            v38 = v25 + *v32 - __n;
            a2 = v32;
            Accelerate_AR_dsyrk("Lower", "Transpose", (unsigned int *)&__n, (unsigned int *)&v38, &c_b15, (uint64_t)&v33[v26 + __n], (unsigned int *)a4, &c_b15, (uint64_t)v30, a4);
          }
          v28 += 24;
          v25 -= 24;
          v26 += 24 * v31 + 24;
          v27 += 192;
        }
        while (v28 <= (int)v34);
      }
    }
    else
    {
      dlauu2_(a1, a2, a3, a4, a5);
    }
  }
  return 0;
}

uint64_t Accelerate_AR_dtrtri_prealloc(char *a1, char *a2, unsigned int *a3, double *a4, int *a5, double *a6, int *a7, __CLPK_integer *a8)
{
  int v13;
  unsigned int *v14;
  uint64_t v15;
  __CLPK_integer *v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int64_t v34;
  int v35;
  uint64_t v36;
  __CLPK_integer v37;
  int v38;
  __CLPK_integer *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  double *v50;
  int v51;
  __CLPK_integer v52;
  double v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  signed int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  __CLPK_integer v74;
  __CLPK_integer v75;
  __CLPK_integer v76;
  double v77;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  int v85;
  int v86;
  char *__diag;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  double *v93;
  int v94;
  uint64_t v95;
  unsigned int __b;
  int v99;
  __CLPK_integer __n;
  unsigned int v101;
  int v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v104 = 0;
  v105 = 0;
  v102 = 0;
  __n = 0;
  v101 = 0;
  v88 = *a5;
  v13 = lsame_();
  v94 = lsame_();
  v90 = *a7;
  if (v13)
  {
    v99 = -1;
    __b = 32;
    Accelerate_AR_dtrmm_prealloc("Left", "Upper", "No transpose", a2, a3, &__b, (uint64_t)&c_b18, (int)a4, a5, (uint64_t)a4, a5, (uint64_t)&v103, &v99);
    v14 = a3;
    v15 = (uint64_t)*(double *)&v103;
    v16 = (__CLPK_integer *)v14;
    Accelerate_AR_dtrsm_prealloc("Right", "Upper", "No transpose", a2, v14, &__b, &c_b22, a4, *(double *)&v103, v17, v18, v19, v20, v21, v22, v23, a5, (char *)a4, a5,
      (double *)&v103,
      (unsigned int *)&v99);
    v24 = (uint64_t)*(double *)&v103;
    if (v15 > (uint64_t)*(double *)&v103)
      v24 = v15;
  }
  else
  {
    v99 = -1;
    __b = 32;
    Accelerate_AR_dtrmm_prealloc("Left", "Lower", "No transpose", a2, a3, &__b, (uint64_t)&c_b18, (int)a4, a5, (uint64_t)a4, a5, (uint64_t)&v103, &v99);
    v25 = a2;
    v26 = (uint64_t)*(double *)&v103;
    v16 = (__CLPK_integer *)a3;
    Accelerate_AR_dtrsm_prealloc("Right", "Lower", "No transpose", v25, a3, &__b, &c_b22, a4, *(double *)&v103, v27, v28, v29, v30, v31, v32, v33, a5, (char *)a4, a5,
      (double *)&v103,
      (unsigned int *)&v99);
    v24 = (uint64_t)*(double *)&v103;
    if (v26 > (uint64_t)*(double *)&v103)
      v24 = v26;
    a2 = v25;
  }
  v34 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  *a6 = (double)v34 * 0.125;
  v35 = 8 * *a7;
  v99 = v35;
  *a8 = 0;
  if (!v13 && !lsame_())
  {
    v38 = -1;
    goto LABEL_36;
  }
  if (!v94 && !lsame_())
  {
    v38 = -2;
    goto LABEL_36;
  }
  v36 = *v16;
  if ((v36 & 0x80000000) != 0)
  {
    v38 = -3;
    goto LABEL_36;
  }
  if (v36 <= 1)
    v37 = 1;
  else
    v37 = *v16;
  if (*a5 < v37)
  {
    v38 = -5;
LABEL_36:
    *a8 = v38;
    goto LABEL_37;
  }
  if (v34 > v35 && v90 != -1)
  {
    v38 = -7;
    goto LABEL_36;
  }
  v38 = *a8;
  if (*a8)
  {
LABEL_37:
    v102 = -v38;
    xerbla_();
    return 0;
  }
  __diag = a2;
  if (v90 != -1 && (_DWORD)v36)
  {
    v40 = v16;
    v41 = ~(_DWORD)v88;
    if (v94)
    {
      v102 = *v16;
      v42 = v36 + 1;
      v43 = 1;
      v44 = v88 + 1;
      while (a4[v41 + v44] != 0.0)
      {
        ++v43;
        v44 += v88 + 1;
        if (v42 == v43)
        {
          *a8 = 0;
          goto LABEL_32;
        }
      }
      *a8 = v43;
    }
    else
    {
LABEL_32:
      v103 = 0x100000001;
      v104 = a1;
      v105 = a2;
      s_cat((char *)&__b, (uint64_t)&v104, (uint64_t)&v103, &c__2_0, 2uLL);
      if (*v16 > 32)
      {
        v46 = v41;
        if (v13)
        {
          v47 = 0;
          v48 = (char *)&a4[v88 + 1 + v41];
          v102 = *v16;
          v49 = -1;
          v50 = (double *)v48;
          do
          {
            v51 = v49 + *v40;
            if (v51 <= 30)
              v52 = v51 + 1;
            else
              v52 = 32;
            __n = v52;
            v101 = v47;
            Accelerate_AR_dtrmm_prealloc("Left", "Upper", "No transpose", __diag, &v101, (unsigned int *)&__n, (uint64_t)&c_b18, (int)a4, a5, (uint64_t)v48, a5, (uint64_t)a6, &v99);
            v101 = v47;
            Accelerate_AR_dtrsm_prealloc("Right", "Upper", "No transpose", __diag, &v101, (unsigned int *)&__n, &c_b22, v50, v53, v54, v55, v56, v57, v58, v59, v60, a5, v48, a5,
              a6,
              (unsigned int *)&v99);
            v40 = v16;
            dtrti2_("Upper", __diag, &__n, v50, a5, a8);
            v61 = v47 + 33;
            v47 += 32;
            v49 -= 32;
            v50 += 32 * v88 + 32;
            v48 += 256 * v88;
          }
          while (v61 <= v102);
        }
        else
        {
          v93 = &a4[v41];
          v62 = (*v16 - 1);
          v63 = v62 & 0xFFFFFFE0 | 1;
          v64 = v62 >> 5;
          v65 = (32 * ((*v16 - 1) >> 5)) | 1;
          v66 = -32 * v64;
          v67 = v63 * v88;
          v68 = 32 * v64 + 33;
          v69 = (v88 + 1) * v65;
          v70 = 32 * ~(_DWORD)v88;
          v71 = &a4[32 * v64 + 1 + v63 * v88 + v46];
          v72 = ~v88 << 8;
          v73 = 32 * v88;
          v85 = v70;
          v86 = v88 + 1;
          v89 = 32 * v88;
          v91 = v72;
          do
          {
            v95 = v65;
            v102 = 32;
            v74 = *v40;
            v75 = v66 + *v40;
            if (v75 - 1 > 30)
              v75 = 32;
            __n = v75;
            v76 = v68 + v75 - 32;
            if (v76 <= v74)
            {
              v102 = v66 + v74 - v75;
              Accelerate_AR_dtrmm_prealloc("Left", "Lower", "No transpose", __diag, (unsigned int *)&v102, (unsigned int *)&__n, (uint64_t)&c_b18, (_DWORD)v93 + 8 * v76 * v86, a5, (uint64_t)&v93[v67 + v75 + v95], a5, (uint64_t)a6, &v99);
              v102 = v66 + *v40 - __n;
              v70 = v85;
              v73 = v89;
              Accelerate_AR_dtrsm_prealloc("Right", "Lower", "No transpose", __diag, (unsigned int *)&v102, (unsigned int *)&__n, &c_b22, v71, v77, v78, v79, v80, v81, v82, v83, v84, a5, (char *)&v93[v67 + __n + (int)v95], a5,
                a6,
                (unsigned int *)&v99);
            }
            dtrti2_("Lower", __diag, &__n, &v93[v69], a5, a8);
            v68 -= 32;
            v69 += v70;
            v66 += 32;
            v71 = (double *)((char *)v71 + v91);
            v67 -= v73;
            v65 = v95 - 32;
          }
          while (v68 > 32);
        }
      }
      else
      {
        dtrti2_(a1, a2, v16, a4, a5, a8);
      }
    }
  }
  return 0;
}

#error "23D95A390: call analysis failed (funcsize=190)"

void dtrsm_noPack_RLTU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, double *__X, uint64_t a6, double a7, float64x2_t a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  float64x2_t v14;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t *v34;
  double *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  uint64_t v84;
  float64x2_t *v85;
  double *v86;
  uint64_t v87;
  float64_t *v88;
  float64x2_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  double *v92;
  float64x2_t v93;
  float64_t v94;
  float64x2_t *v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  double *v99;
  float64x2_t v100;
  float64_t *v101;
  float64_t v102;
  double *v103;
  float64x2_t v104;
  float64_t v105;
  double *v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  double *v113;
  double *v114;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v23 = 2;
      }
      else
      {
        a8.f64[0] = *(float64_t *)(a3 + 8);
        v23 = 2;
        v28 = __X;
        v29 = __N;
        do
        {
          v30 = *v28 * a7;
          *v28 = v30;
          v28[a6] = v28[a6] * a7 - v30 * a8.f64[0];
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v23 = 1;
      cblas_dscal(__N, a7, __X, 1);
    }
    else
    {
      v23 = 0;
    }
  }
  else if (__N < 1)
  {
    v23 = 3;
  }
  else
  {
    a8.f64[0] = *(float64_t *)(a3 + 8);
    v21 = *(double *)(a3 + 16);
    v22 = *(double *)(a3 + 8 * a4 + 16);
    v23 = 3;
    v24 = __X;
    v25 = __N;
    do
    {
      v26 = *v24 * a7;
      *v24 = v26;
      v27 = v24[a6] * a7 - v26 * a8.f64[0];
      v24[a6] = v27;
      v24[2 * a6] = -(v22 * v27 + *v24 * v21 - v24[2 * a6] * a7);
      ++v24;
      --v25;
    }
    while (v25);
  }
  if (v23 < a2)
  {
    v31 = a6;
    v32 = 8 * a4;
    do
    {
      if (__N < 4)
      {
        v33 = 0;
      }
      else
      {
        v33 = 0;
        v35 = __X;
        do
        {
          v36 = v23;
          v37 = (float64x2_t *)v35;
          v34 = (float64x2_t *)(a3 + 8 * v23);
          v38 = v34;
          v39 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v40 = v39;
          v41 = v39;
          v42 = v39;
          v43 = v39;
          v44 = v39;
          v45 = v39;
          v46 = v39;
          if ((v23 & 1) != 0)
          {
            v47 = *(float64x2_t *)(v35 + 2);
            v37 = (float64x2_t *)&v35[v31];
            v48 = v34[1];
            v38 = (float64x2_t *)((char *)v34 + v32);
            v39 = vmlaq_n_f64(v39, *(float64x2_t *)v35, v34->f64[0]);
            v41 = vmlaq_laneq_f64(v41, *(float64x2_t *)v35, *v34, 1);
            v43 = vmlaq_n_f64(v43, *(float64x2_t *)v35, v48.f64[0]);
            v45 = vmlaq_laneq_f64(v45, *(float64x2_t *)v35, v48, 1);
            v40 = vmlaq_n_f64(v40, v47, v34->f64[0]);
            v42 = vmlaq_laneq_f64(v42, v47, *v34, 1);
            v44 = vmlaq_n_f64(v44, v47, v48.f64[0]);
            v46 = vmlaq_laneq_f64(v46, v47, v48, 1);
            v36 = v23 - 1;
          }
          for (; v36; v36 -= 2)
          {
            v50 = *v37;
            v51 = v37[1];
            v49 = (float64x2_t *)((char *)v37 + v31 * 8);
            v52 = *v49;
            v53 = v49[1];
            v37 = (float64x2_t *)((char *)v49 + v31 * 8);
            v55 = *v38;
            v56 = v38[1];
            v54 = (float64x2_t *)((char *)v38 + v32);
            v57 = *v54;
            v58 = v54[1];
            v38 = (float64x2_t *)((char *)v54 + v32);
            v39 = vmlaq_n_f64(vmlaq_n_f64(v39, v50, v55.f64[0]), v52, v57.f64[0]);
            v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v50, v55, 1), v52, v57, 1);
            v43 = vmlaq_n_f64(vmlaq_n_f64(v43, v50, v56.f64[0]), v52, v58.f64[0]);
            v45 = vmlaq_laneq_f64(vmlaq_laneq_f64(v45, v50, v56, 1), v52, v58, 1);
            v40 = vmlaq_n_f64(vmlaq_n_f64(v40, v51, v55.f64[0]), v53, v57.f64[0]);
            v42 = vmlaq_laneq_f64(vmlaq_laneq_f64(v42, v51, v55, 1), v53, v57, 1);
            v44 = vmlaq_n_f64(vmlaq_n_f64(v44, v51, v56.f64[0]), v53, v58.f64[0]);
            v46 = vmlaq_laneq_f64(vmlaq_laneq_f64(v46, v51, v56, 1), v53, v58, 1);
          }
          v60 = *v37;
          v61 = v37[1];
          v59 = (float64x2_t *)((char *)v37 + v31 * 8);
          v63 = *v59;
          v64 = v59[1];
          v62 = (float64x2_t *)((char *)v59 + v31 * 8);
          v66 = *v62;
          v67 = v62[1];
          v65 = (float64x2_t *)((char *)v62 + v31 * 8);
          v68 = *v65;
          v69 = v65[1];
          v70 = (float64x2_t *)((char *)v65 + 8 * a6 + -32 * a6);
          v14 = vsubq_f64(vmulq_n_f64(v60, a7), v39);
          v71 = vsubq_f64(vmulq_n_f64(v61, a7), v40);
          v72 = *v38;
          v73 = v38[1];
          v74 = (float64x2_t *)((char *)v38 + v32 + 16);
          v75 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v63, a7), v41), v14, v72, 1);
          v76 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v64, a7), v42), v71, v72, 1);
          a8 = *v74;
          v77 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v66, a7), v43), v14, v73.f64[0], 0), v75, v74->f64[0], 0);
          v78 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v67, a7), v44), v71, v73.f64[0], 0), v76, v74->f64[0], 0);
          a8.f64[0] = v74->f64[(unint64_t)v32 / 8 + 1];
          v79 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v68, a7), v45), v14, v73, 1), v75, *v74, 1), v77, a8.f64[0], 0);
          v80 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v69, a7), v46), v71, v73, 1), v76, *v74, 1), v78, a8.f64[0], 0);
          *v70 = v14;
          v70[1] = v71;
          v81 = (float64x2_t *)((char *)v70 + v31 * 8);
          *v81 = v75;
          v81[1] = v76;
          v82 = (float64x2_t *)((char *)v81 + v31 * 8);
          *v82 = v77;
          v82[1] = v78;
          v83 = (float64x2_t *)((char *)v82 + v31 * 8);
          *v83 = v79;
          v83[1] = v80;
          v33 += 4;
          v35 += 4;
        }
        while (v33 < __N - 3);
      }
      v84 = __N - v33;
      if (__N > v33)
      {
        v86 = &__X[v33];
        do
        {
          v87 = v23;
          v88 = v86;
          v85 = (float64x2_t *)(a3 + 8 * v23);
          v89 = v85;
          v90 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v91 = v90;
          if ((v23 & 1) != 0)
          {
            v88 = &v86[v31];
            v89 = (float64x2_t *)((char *)v85 + v32);
            v90 = vmlaq_n_f64(v90, *v85, *v86);
            v91 = vmlaq_n_f64(v91, v85[1], *v86);
            v87 = v23 - 1;
          }
          for (; v87; v87 -= 2)
          {
            v93.f64[0] = *v88;
            v92 = &v88[v31];
            v94 = *v92;
            v88 = &v92[v31];
            v96 = *v89;
            v97 = v89[1];
            v95 = (float64x2_t *)((char *)v89 + v32);
            v93.f64[1] = v94;
            v98 = *v95;
            a14 = v95[1];
            v89 = (float64x2_t *)((char *)v95 + v32);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v96, v93.f64[0]), v98, v93, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v97, v93.f64[0]), a14, v93, 1);
          }
          v100.f64[0] = *v88;
          v99 = &v88[v31];
          v102 = *v99;
          v101 = &v99[v31];
          v104.f64[0] = *v101;
          v103 = &v101[v31];
          v105 = *v103;
          v106 = &v103[a6 + -4 * a6];
          v100.f64[1] = v102;
          v104.f64[1] = v105;
          v107 = vsubq_f64(vmulq_n_f64(v100, a7), v90);
          v108 = v107.f64[0];
          v109 = *v89;
          v110 = v89[1];
          v111 = (float64x2_t *)((char *)v89 + v32 + 16);
          a8 = vmlsq_lane_f64(v107, v109, v107.f64[0], 0);
          v14 = *v111;
          v112 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v104, a7), v91), v110, v108, 0), *v111, a8, 1);
          a14.f64[1] = v111->f64[(unint64_t)v32 / 8 + 1];
          *v106 = v108;
          v113 = &v106[v31];
          *v113 = a8.f64[1];
          v114 = &v113[v31];
          *v114 = v112.f64[0];
          v114[a6] = vmlsq_lane_f64(v112, a14, *(double *)&v112, 0).f64[1];
          ++v86;
          --v84;
        }
        while (v84);
      }
      v23 += 4;
    }
    while (v23 < a2);
  }
}

void dtrsm_noPack_RLTN(uint64_t __N, uint64_t a2, double *a3, uint64_t a4, double *__X, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  float64x2_t v14;
  double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  const double *v43;
  const double *v44;
  const double *v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  double *v56;
  double *v57;
  uint64_t v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t *v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  float64x2_t *v104;
  float64x2_t *v105;
  uint64_t v106;
  float64x2_t *v107;
  double *v108;
  uint64_t v109;
  float64_t *v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  double *v114;
  float64x2_t v115;
  float64_t v116;
  float64x2_t *v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double *v121;
  float64x2_t v122;
  float64_t *v123;
  float64_t v124;
  double *v125;
  float64x2_t v126;
  float64_t v127;
  float64_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t *v133;
  float64x2_t v134;
  float64_t *v135;
  double *v136;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v27 = 2;
      }
      else
      {
        v33 = a3[1];
        v34 = a7 / *a3;
        v27 = 2;
        v35 = __X;
        v36 = __N;
        v37 = 1.0 / a3[a4 + 1];
        do
        {
          v38 = v34 * *v35;
          *v35 = v38;
          v35[a6] = v37 * (v35[a6] * a7 - v38 * v33);
          ++v35;
          --v36;
        }
        while (v36);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v27 = 1;
      cblas_dscal(__N, a7 / *a3, __X, 1);
    }
    else
    {
      v27 = 0;
    }
  }
  else if (__N < 1)
  {
    v27 = 3;
  }
  else
  {
    v22 = a3[1];
    v21 = a3[2];
    v23 = &a3[a4];
    v24 = a7 / *a3;
    v25 = v23[2];
    v26 = 1.0 / v23[1];
    v27 = 3;
    v28 = __X;
    v29 = __N;
    v30 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v31 = v24 * *v28;
      *v28 = v31;
      v32 = v26 * (v28[a6] * a7 - v31 * v22);
      v28[a6] = v32;
      v14.f64[0] = v28[2 * a6];
      a14.f64[0] = v30 * -(v25 * v32 + *v28 * v21 - v14.f64[0] * a7);
      v28[2 * a6] = a14.f64[0];
      ++v28;
      --v29;
    }
    while (v29);
  }
  if (v27 < a2)
  {
    v39 = a4 + 1;
    v40 = a6;
    v41 = 8 * a4;
    do
    {
      v42 = &a3[v27 * a4 + v27];
      v43 = &a3[v39 + v39 * v27];
      v44 = &a3[(v27 + 2) * v39];
      v45 = &a3[(v27 + 3) * v39];
      v46 = vld1q_dup_f64(v42);
      v47 = vld1q_dup_f64(v43);
      v48 = vld1q_dup_f64(v44);
      v49 = vld1q_dup_f64(v45);
      v50 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v51 = vdivq_f64(v50, v46);
      v52 = vdivq_f64(v50, v47);
      v53 = vdivq_f64(v50, v48);
      v54 = vdivq_f64(v50, v49);
      if (__N < 4)
      {
        v55 = 0;
      }
      else
      {
        v55 = 0;
        v57 = __X;
        do
        {
          v58 = v27;
          v59 = (float64x2_t *)v57;
          v56 = &a3[v27];
          v60 = (float64x2_t *)v56;
          v61 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v62 = v61;
          v63 = v61;
          v64 = v61;
          v65 = v61;
          v66 = v61;
          v67 = v61;
          v68 = v61;
          if ((v27 & 1) != 0)
          {
            v69 = *(float64x2_t *)(v57 + 2);
            v59 = (float64x2_t *)&v57[v40];
            v70 = *(float64x2_t *)(v56 + 2);
            v60 = (float64x2_t *)&v56[(unint64_t)v41 / 8];
            v61 = vmlaq_n_f64(v61, *(float64x2_t *)v57, *v56);
            v63 = vmlaq_laneq_f64(v63, *(float64x2_t *)v57, *(float64x2_t *)v56, 1);
            v65 = vmlaq_n_f64(v65, *(float64x2_t *)v57, v70.f64[0]);
            v67 = vmlaq_laneq_f64(v67, *(float64x2_t *)v57, v70, 1);
            v62 = vmlaq_n_f64(v62, v69, *v56);
            v64 = vmlaq_laneq_f64(v64, v69, *(float64x2_t *)v56, 1);
            v66 = vmlaq_n_f64(v66, v69, v70.f64[0]);
            v68 = vmlaq_laneq_f64(v68, v69, v70, 1);
            v58 = v27 - 1;
          }
          for (; v58; v58 -= 2)
          {
            v72 = *v59;
            v73 = v59[1];
            v71 = (float64x2_t *)((char *)v59 + v40 * 8);
            v74 = *v71;
            v75 = v71[1];
            v59 = (float64x2_t *)((char *)v71 + v40 * 8);
            v77 = *v60;
            v78 = v60[1];
            v76 = (float64x2_t *)((char *)v60 + v41);
            v79 = *v76;
            v80 = v76[1];
            v60 = (float64x2_t *)((char *)v76 + v41);
            v61 = vmlaq_n_f64(vmlaq_n_f64(v61, v72, v77.f64[0]), v74, v79.f64[0]);
            v63 = vmlaq_laneq_f64(vmlaq_laneq_f64(v63, v72, v77, 1), v74, v79, 1);
            v65 = vmlaq_n_f64(vmlaq_n_f64(v65, v72, v78.f64[0]), v74, v80.f64[0]);
            v67 = vmlaq_laneq_f64(vmlaq_laneq_f64(v67, v72, v78, 1), v74, v80, 1);
            v62 = vmlaq_n_f64(vmlaq_n_f64(v62, v73, v77.f64[0]), v75, v79.f64[0]);
            v64 = vmlaq_laneq_f64(vmlaq_laneq_f64(v64, v73, v77, 1), v75, v79, 1);
            v66 = vmlaq_n_f64(vmlaq_n_f64(v66, v73, v78.f64[0]), v75, v80.f64[0]);
            v68 = vmlaq_laneq_f64(vmlaq_laneq_f64(v68, v73, v78, 1), v75, v80, 1);
          }
          v82 = *v59;
          v83 = v59[1];
          v81 = (float64x2_t *)((char *)v59 + v40 * 8);
          v85 = *v81;
          v86 = v81[1];
          v84 = (float64x2_t *)((char *)v81 + v40 * 8);
          v88 = *v84;
          v89 = v84[1];
          v87 = (float64x2_t *)((char *)v84 + v40 * 8);
          v90 = *v87;
          v91 = v87[1];
          v92 = (float64x2_t *)((char *)v87 + 8 * a6 + -32 * a6);
          v14 = vmulq_f64(vsubq_f64(vmulq_n_f64(v82, a7), v61), v51);
          v93 = vmulq_f64(vsubq_f64(vmulq_n_f64(v83, a7), v62), v51);
          v94 = *v60;
          v95 = v60[1];
          v96 = (float64x2_t *)((char *)v60 + v41 + 16);
          v97 = vmulq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v85, a7), v63), v14, v94, 1), v52);
          v98 = vmulq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v86, a7), v64), v93, v94, 1), v52);
          v46 = *v96;
          v99 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v88, a7), v65), v14, v95.f64[0], 0), v97, v96->f64[0], 0), v53);
          v100 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v89, a7), v66), v93, v95.f64[0], 0), v98, v96->f64[0], 0), v53);
          v46.f64[0] = v96->f64[(unint64_t)v41 / 8 + 1];
          v101 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v90, a7), v67), v14, v95, 1), v97, *v96, 1), v99, v46.f64[0], 0), v54);
          v102 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v91, a7), v68), v93, v95, 1), v98, *v96, 1), v100, v46.f64[0], 0), v54);
          *v92 = v14;
          v92[1] = v93;
          v103 = (float64x2_t *)((char *)v92 + v40 * 8);
          *v103 = v97;
          v103[1] = v98;
          v104 = (float64x2_t *)((char *)v103 + v40 * 8);
          *v104 = v99;
          v104[1] = v100;
          v105 = (float64x2_t *)((char *)v104 + v40 * 8);
          *v105 = v101;
          v105[1] = v102;
          v55 += 4;
          v57 += 4;
        }
        while (v55 < __N - 3);
      }
      v106 = __N - v55;
      if (__N > v55)
      {
        v108 = &__X[v55];
        do
        {
          v109 = v27;
          v110 = v108;
          v107 = (float64x2_t *)&a3[v27];
          v111 = v107;
          v112 = (float64x2_t)veorq_s8((int8x16_t)v46, (int8x16_t)v46);
          v113 = v112;
          if ((v27 & 1) != 0)
          {
            v110 = &v108[v40];
            v111 = (float64x2_t *)((char *)v107 + v41);
            v112 = vmlaq_n_f64(v112, *v107, *v108);
            v113 = vmlaq_n_f64(v113, v107[1], *v108);
            v109 = v27 - 1;
          }
          for (; v109; v109 -= 2)
          {
            v115.f64[0] = *v110;
            v114 = &v110[v40];
            v116 = *v114;
            v110 = &v114[v40];
            v118 = *v111;
            v119 = v111[1];
            v117 = (float64x2_t *)((char *)v111 + v41);
            v115.f64[1] = v116;
            v120 = *v117;
            a14 = v117[1];
            v111 = (float64x2_t *)((char *)v117 + v41);
            v112 = vmlaq_laneq_f64(vmlaq_n_f64(v112, v118, v115.f64[0]), v120, v115, 1);
            v113 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v119, v115.f64[0]), a14, v115, 1);
          }
          v122.f64[0] = *v110;
          v121 = &v110[v40];
          v124 = *v121;
          v123 = &v121[v40];
          v126.f64[0] = *v123;
          v125 = &v123[v40];
          v127 = *v125;
          v128 = &v125[a6 + -4 * a6];
          v122.f64[1] = v124;
          v126.f64[1] = v127;
          v129 = vsubq_f64(vmulq_n_f64(v122, a7), v112);
          v130.f64[0] = v129.f64[0] * v51.f64[0];
          v131 = *v111;
          v132 = v111[1];
          v133 = (float64x2_t *)((char *)v111 + v41 + 16);
          v46 = vmulq_f64(vmlsq_lane_f64(v129, v131, v129.f64[0] * v51.f64[0], 0), v52);
          v130.f64[1] = v46.f64[1];
          v14 = *v133;
          v134 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v126, a7), v113), v132, v130.f64[0], 0), *v133, v130, 1);
          a14.f64[1] = v133->f64[(unint64_t)v41 / 8 + 1];
          *v128 = v130.f64[0];
          v135 = &v128[v40];
          *v135 = v46.f64[1];
          v136 = &v135[v40];
          *v136 = v134.f64[0] * v53.f64[0];
          v136[a6] = vmulq_f64(vmlsq_lane_f64(v134, a14, *(double *)&v134 * *(double *)&v53, 0), v54).f64[1];
          ++v108;
          --v106;
        }
        while (v106);
      }
      v27 += 4;
    }
    while (v27 < a2);
  }
}

void dtrsm_noPack_RLNU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int8x16_t a8, double a9, double a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, int64x2_t a14)
{
  int64x2_t v14;
  float64x2_t v15;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  double *v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t *v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  int64x2_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t *v100;
  float64x2_t *v101;
  float64x2_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  double *f64;
  float64_t *v112;
  uint64_t v113;
  __n128 *v114;
  int64x2_t *v115;
  int64x2_t *v116;
  int64x2_t *v117;
  uint64_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double *v121;
  float64x2_t v122;
  float64_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t *v127;
  float64_t *v128;
  double *v129;
  float64x2_t v130;
  float64_t *v131;
  float64_t v132;
  double *v133;
  float64x2_t v134;
  float64_t v135;
  double *v136;
  float64x2_t v137;
  float64x2_t v138;
  double *v139;
  double *v140;
  BOOL v141;

  v22 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        a8.i64[0] = *(_QWORD *)(a3 + 8 * (v22 + (a2 - 2) * a4));
        v33 = (double *)(a5 + 8 * v22 * a6);
        v34 = (double *)(a5 + a6 * (8 * a2 - 16));
        v35 = __N;
        do
        {
          v36 = *v33 * a7;
          *v33++ = v36;
          *v34 = *v34 * a7 - v36 * *(double *)a8.i64;
          ++v34;
          --v35;
        }
        while (v35);
      }
      v22 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v22 * a6), 1);
      v22 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      a8.i64[0] = *(_QWORD *)(a3 + 8 * (v22 + (a2 - 2) * a4));
      v23 = (double *)(a3 + 8 * (v22 + (a2 - 3) * a4));
      v25 = *(v23 - 1);
      v24 = *v23;
      v26 = (double *)(a5 + 8 * v22 * a6);
      v27 = (double *)(a5 + a6 * (8 * a2 - 16));
      v28 = (double *)(a5 + a6 * (8 * a2 - 24));
      v29 = __N;
      do
      {
        v30 = *v26 * a7;
        *v26 = v30;
        v31 = *v27 * a7 - v30 * *(double *)a8.i64;
        *v27++ = v31;
        v32 = *v26++;
        *v28 = -(v25 * v31 + v32 * v24 - *v28 * a7);
        ++v28;
        --v29;
      }
      while (v29);
    }
    v22 = a2 - 4;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    v37 = v22 + 1;
    v38 = 8 * a6;
    v39 = (float64x2_t *)(a5 + 8 * a6 * (v22 + 1));
    v40 = -32 * a6;
    do
    {
      v41 = v37 - 4;
      if (__N < 4)
      {
        v42 = 0;
      }
      else
      {
        v42 = 0;
        v43 = a3 + 8 * v37;
        v44 = (double *)(v43 + 8 * v41 * a4);
        v45 = (double *)(v43 + 8 * (v37 - 3) * a4);
        v46 = (double *)(v43 + 8 * (v37 - 2) * a4);
        v47 = (double *)(v43 + 8 * (v37 - 1) * a4);
        v48 = a2 - v41;
        if (a2 - v41 <= 4)
          v48 = 4;
        v49 = v48 - 4;
        v50 = v39;
        do
        {
          v51 = (float64x2_t *)v45;
          v52 = (float64x2_t *)v47;
          v53 = (float64x2_t *)v44;
          v54 = (float64x2_t *)v46;
          v55 = v50;
          v56 = v49;
          v57 = v49 + 1;
          v58 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v59 = v58;
          v60 = v58;
          v61 = v58;
          v62 = v58;
          v63 = v58;
          v64 = v58;
          v65 = v58;
          if ((v49 & 1) != 0)
          {
            v66 = v50[1];
            v55 = (float64x2_t *)((char *)v50 + v38);
            v53 = (float64x2_t *)(v44 + 1);
            v51 = (float64x2_t *)(v45 + 1);
            v54 = (float64x2_t *)(v46 + 1);
            v52 = (float64x2_t *)(v47 + 1);
            v58 = vmlaq_n_f64(v58, *v50, *v44);
            v60 = vmlaq_n_f64(v60, *v50, *v45);
            v62 = vmlaq_n_f64(v62, *v50, *v46);
            v64 = vmlaq_n_f64(v64, *v50, *v47);
            v59 = vmlaq_n_f64(v59, v66, *v44);
            v61 = vmlaq_n_f64(v61, v66, *v45);
            v63 = vmlaq_n_f64(v63, v66, *v46);
            v65 = vmlaq_n_f64(v65, v66, *v47);
            v56 = v49 - 1;
          }
          for (; v56; v56 -= 2)
          {
            v68 = *v55;
            v69 = v55[1];
            v67 = (float64x2_t *)((char *)v55 + v38);
            v70 = *v67;
            v71 = v67[1];
            v55 = (float64x2_t *)((char *)v67 + v38);
            v72 = *v53++;
            v73 = *v51++;
            v74 = *v54++;
            v75 = *v52++;
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v68, v72.f64[0]), v70, v72, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v68, v73.f64[0]), v70, v73, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v68, v74.f64[0]), v70, v74, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v68, v75.f64[0]), v70, v75, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v69, v72.f64[0]), v71, v72, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v69, v73.f64[0]), v71, v73, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v69, v74.f64[0]), v71, v74, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v69, v75.f64[0]), v71, v75, 1);
          }
          v76 = (float64x2_t *)((char *)v53 - 8 * v57 - 8);
          v77 = (float64x2_t *)((char *)v55 - v38 * (v49 + 4));
          v79 = *v77;
          v80 = v77[1];
          v78 = (float64x2_t *)((char *)v77 + v38);
          v82 = *v78;
          v83 = v78[1];
          v81 = (float64x2_t *)((char *)v78 + v38);
          v85 = *v81;
          v86 = v81[1];
          v84 = (float64x2_t *)((char *)v81 + v38);
          v87 = *v84;
          v88 = v84[1];
          v89 = (int64x2_t *)((char *)v84 + v38 + -4 * v38);
          a11 = vmulq_n_f64(v83, a7);
          a12 = vmulq_n_f64(v85, a7);
          a13 = vmulq_n_f64(v86, a7);
          v90 = vsubq_f64(vmulq_n_f64(v79, a7), v58);
          v91 = vsubq_f64(vmulq_n_f64(v80, a7), v59);
          v92 = vsubq_f64(vmulq_n_f64(v82, a7), v60);
          v93 = vsubq_f64(vmulq_n_f64(v87, a7), v64);
          v94 = vsubq_f64(vmulq_n_f64(v88, a7), v65);
          a8 = *(int8x16_t *)v76;
          v95 = *(float64x2_t *)((char *)v51 - 8 * v57 - 8);
          v82.f64[0] = v54->f64[-v57];
          v96 = vmlsq_lane_f64(vsubq_f64(a12, v62), v93, v82.f64[0], 0);
          v97 = vmlsq_lane_f64(vsubq_f64(a13, v63), v94, v82.f64[0], 0);
          v98 = vmlsq_lane_f64(vmlsq_laneq_f64(v92, v93, v95, 1), v96, v95.f64[0], 0);
          v99 = vmlsq_lane_f64(vmlsq_laneq_f64(vsubq_f64(a11, v61), v94, v95, 1), v97, v95.f64[0], 0);
          a8.i64[0] = *(_QWORD *)&v76[-1].f64[1];
          v14 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v90, v93, *v76, 1), v96, v76->f64[0], 0), v98, *(double *)a8.i64, 0);
          v15 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v91, v94, *v76, 1), v97, v76->f64[0], 0), v99, *(double *)a8.i64, 0);
          *v89 = v14;
          v89[1] = (int64x2_t)v15;
          v100 = (float64x2_t *)&v89->i8[v38];
          *v100 = v98;
          v100[1] = v99;
          v101 = (float64x2_t *)((char *)v100 + v38);
          *v101 = v96;
          v101[1] = v97;
          v102 = (float64x2_t *)((char *)v101 + v38);
          *v102 = v93;
          v102[1] = v94;
          v42 += 4;
          v50 += 2;
        }
        while (v42 < __N - 3);
      }
      v103 = __N - v42;
      if (__N > v42)
      {
        v104 = a3 + 8 * v37;
        v105 = (unint64_t *)(v104 + 8 * v41 * a4);
        v106 = (unint64_t *)(v104 + 8 * (v37 - 3) * a4);
        v107 = (unint64_t *)(v104 + 8 * (v37 - 2) * a4);
        v108 = (unint64_t *)(v104 + 8 * (v37 - 1) * a4);
        v109 = a2 - v41;
        if (a2 - v41 <= 4)
          v109 = 4;
        v110 = v109 - 4;
        f64 = v39[(unint64_t)v42 / 2].f64;
        do
        {
          v112 = f64;
          v113 = v110;
          v114 = (__n128 *)v106;
          v115 = (int64x2_t *)v108;
          v116 = (int64x2_t *)v105;
          v117 = (int64x2_t *)v107;
          v118 = v110 + 1;
          v119 = (float64x2_t)veorq_s8(a8, a8);
          v120 = v119;
          if ((v110 & 1) != 0)
          {
            v112 = &f64[(unint64_t)v38 / 8];
            *(_QWORD *)&a11.f64[0] = *v105;
            v116 = (int64x2_t *)(v105 + 1);
            *(_QWORD *)&a12.f64[0] = *v106;
            v114 = (__n128 *)(v106 + 1);
            *(_QWORD *)&a13.f64[0] = *v107;
            v117 = (int64x2_t *)(v107 + 1);
            a14.i64[0] = *v108;
            v115 = (int64x2_t *)(v108 + 1);
            v119 = vmlaq_n_f64(v119, (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)a12), *f64);
            v120 = vmlaq_n_f64(v120, (float64x2_t)vtrn1q_s64((int64x2_t)a13, a14), *f64);
            v113 = v110 - 1;
          }
          for (; v113; v113 -= 2)
          {
            v122.f64[0] = *v112;
            v121 = &v112[(unint64_t)v38 / 8];
            v123 = *v121;
            v112 = &v121[(unint64_t)v38 / 8];
            v124 = *v116++;
            a12 = *(float64x2_t *)v114++;
            v125 = *v117++;
            v122.f64[1] = v123;
            v126 = *v115++;
            v15 = (float64x2_t)vtrn1q_s64(v125, v126);
            v119 = vmlaq_laneq_f64(vmlaq_n_f64(v119, (float64x2_t)vtrn1q_s64(v124, (int64x2_t)a12), v122.f64[0]), (float64x2_t)vtrn2q_s64(v124, (int64x2_t)a12), v122, 1);
            v120 = vmlaq_laneq_f64(vmlaq_n_f64(v120, v15, v122.f64[0]), (float64x2_t)vtrn2q_s64(v125, v126), v122, 1);
          }
          v127 = (int64x2_t *)((char *)v116 - 8 * v118 - 8);
          v128 = (float64_t *)((char *)v112 - v38 * (v110 + 4));
          v130.f64[0] = *v128;
          v129 = &v128[(unint64_t)v38 / 8];
          v132 = *v129;
          v131 = &v129[(unint64_t)v38 / 8];
          v134.f64[0] = *v131;
          v133 = &v131[(unint64_t)v38 / 8];
          v135 = *v133;
          v136 = &v133[(unint64_t)v38 / 8 + v38 / 0xFFFFFFFFFFFFFFFELL];
          v130.f64[1] = v132;
          v134.f64[1] = v135;
          a11 = vmulq_n_f64(v134, a7);
          v137 = vsubq_f64(a11, v120);
          a14 = *v127;
          v14 = *(int64x2_t *)((char *)v114 - 8 * v118 - 8);
          *(_QWORD *)&v15.f64[0] = v117->i64[-v118];
          *(_QWORD *)&v137.f64[0] = *(_OWORD *)&vmlsq_lane_f64(v137, v15, v137.f64[1], 0);
          a13 = (float64x2_t)vtrn1q_s64(*v127, v14);
          v138 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v130, a7), v119), (float64x2_t)vtrn2q_s64(*v127, v14), v137.f64[1], 0), a13, v137.f64[0], 0);
          a11.f64[0] = v138.f64[1];
          a14.i64[0] = v127[-1].i64[1];
          a8 = (int8x16_t)vmlsq_lane_f64(v138, (float64x2_t)a14, v138.f64[1], 0);
          *v136 = *(double *)a8.i64;
          v139 = &v136[(unint64_t)v38 / 8];
          *v139 = a11.f64[0];
          v140 = &v139[(unint64_t)v38 / 8];
          *v140 = v137.f64[0];
          v140[(unint64_t)v38 / 8] = v137.f64[1];
          ++f64;
          --v103;
        }
        while (v103);
      }
      v39 = (float64x2_t *)((char *)v39 + v40);
      v141 = v37 < 5;
      v37 -= 4;
    }
    while (!v141);
  }
}

void dtrsm_noPack_RLNN(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13, int64x2_t a14)
{
  int64x2_t v14;
  float64x2_t v15;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double *v32;
  uint64_t *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const double *v55;
  uint64_t v56;
  const double *v57;
  uint64_t v58;
  const double *v59;
  uint64_t v60;
  const double *v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  double *v74;
  double *v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t *v79;
  float64x2_t *v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t *v105;
  float64x2_t *v106;
  float64x2_t *v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t *v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  int64x2_t *v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t *v129;
  float64x2_t *v130;
  float64x2_t *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  double *f64;
  uint64_t v141;
  float64x2_t *v142;
  int64x2_t *v143;
  int64x2_t *v144;
  int64x2_t *v145;
  float64_t *v146;
  uint64_t v147;
  float64x2_t v148;
  float64x2_t v149;
  double *v150;
  float64x2_t v151;
  float64_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t *v156;
  float64_t *v157;
  double *v158;
  float64x2_t v159;
  float64_t *v160;
  float64_t v161;
  double *v162;
  float64x2_t v163;
  float64_t v164;
  double *v165;
  float64x2_t v166;
  float64x2_t v167;
  double *v168;
  double *v169;
  BOOL v170;

  v22 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v39 = (a2 - 2) * a4;
        v40 = *(double *)(a3 + 8 * (v39 + v22));
        v41 = a7 / *(double *)(a3 + 8 * (v22 + v22 * a4));
        v42 = *(double *)(a3 + 8 * (v39 + a2 - 2));
        v43 = (double *)(a5 + 8 * v22 * a6);
        v44 = (double *)(a5 + a6 * (8 * a2 - 16));
        v45 = __N;
        v46 = 1.0 / v42;
        do
        {
          v47 = v41 * *v43;
          *v43++ = v47;
          *v44 = v46 * (*v44 * a7 - v47 * v40);
          ++v44;
          --v45;
        }
        while (v45);
      }
      v22 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v22 + v22 * a4)), (double *)(a5 + 8 * v22 * a6), 1);
      v22 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v23 = (a2 - 2) * a4;
      v24 = *(double *)(a3 + 8 * (v23 + v22));
      v25 = (a2 - 3) * a4;
      v26 = (double *)(a3 + 8 * (v25 + v22));
      v28 = *(v26 - 1);
      v27 = *v26;
      v29 = a7 / *(double *)(a3 + 8 * (v22 + v22 * a4));
      v30 = 1.0 / *(double *)(a3 + 8 * (v23 + a2 - 2));
      v31 = (double *)(a5 + 8 * v22 * a6);
      v32 = (double *)(a5 + a6 * (8 * a2 - 16));
      v33 = (uint64_t *)(a5 + a6 * (8 * a2 - 24));
      v34 = __N;
      v35 = 1.0 / *(double *)(a3 + 8 * (v25 + a2 - 3));
      do
      {
        v36 = v29 * *v31;
        *v31 = v36;
        v37 = v30 * (*v32 * a7 - v36 * v24);
        *v32++ = v37;
        v14.i64[0] = *v33;
        v38 = *v31++;
        *(double *)v33 = v35 * -(v28 * v37 + v38 * v27 - *(double *)v33 * a7);
        ++v33;
        --v34;
      }
      while (v34);
    }
    v22 = a2 - 4;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    v48 = v22 + 1;
    v49 = a4 + 1;
    v50 = 8 * a6;
    v51 = (float64x2_t *)(a5 + 8 * a6 * v48);
    v52 = -32 * a6;
    do
    {
      v53 = v48 - 4;
      v54 = a3 + 8 * (v48 - 4) * a4;
      v55 = (const double *)(v54 + 8 * (v48 - 4));
      v56 = v48 - 3;
      v57 = (const double *)(a3 + 8 * (v48 - 3) * v49);
      v58 = v48 - 2;
      v59 = (const double *)(a3 + 8 * (v48 - 2) * v49);
      v60 = v48 - 1;
      v61 = (const double *)(a3 + 8 * (v48 - 1) * v49);
      v62 = vld1q_dup_f64(v55);
      v63 = vld1q_dup_f64(v57);
      v64 = vld1q_dup_f64(v59);
      v65 = vld1q_dup_f64(v61);
      v66 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v67 = vdivq_f64(v66, v62);
      v68 = vdivq_f64(v66, v63);
      v69 = vdivq_f64(v66, v64);
      v70 = vdivq_f64(v66, v65);
      if (__N < 4)
      {
        v71 = 0;
      }
      else
      {
        v71 = 0;
        v72 = a3 + 8 * v48;
        v74 = (double *)(v72 + 8 * v56 * a4);
        v75 = (double *)(v72 + 8 * v58 * a4);
        v76 = (double *)(v72 + 8 * v60 * a4);
        v77 = a2 - v53;
        if (a2 - v53 <= 4)
          v77 = 4;
        v78 = v77 - 4;
        v79 = v51;
        do
        {
          v80 = (float64x2_t *)v74;
          v81 = (float64x2_t *)v76;
          v73 = (double *)(v54 + 8 * v48);
          v82 = (float64x2_t *)v73;
          v83 = (float64x2_t *)v75;
          v84 = v79;
          v85 = v78;
          v86 = v78 + 1;
          v87 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v88 = v87;
          v89 = v87;
          v90 = v87;
          v91 = v87;
          v92 = v87;
          v93 = v87;
          v94 = v87;
          if ((v78 & 1) != 0)
          {
            v95 = v79[1];
            v84 = (float64x2_t *)((char *)v79 + v50);
            v82 = (float64x2_t *)(v73 + 1);
            v80 = (float64x2_t *)(v74 + 1);
            v83 = (float64x2_t *)(v75 + 1);
            v81 = (float64x2_t *)(v76 + 1);
            v87 = vmlaq_n_f64(v87, *v79, *v73);
            v89 = vmlaq_n_f64(v89, *v79, *v74);
            v91 = vmlaq_n_f64(v91, *v79, *v75);
            v93 = vmlaq_n_f64(v93, *v79, *v76);
            v88 = vmlaq_n_f64(v88, v95, *v73);
            v90 = vmlaq_n_f64(v90, v95, *v74);
            v92 = vmlaq_n_f64(v92, v95, *v75);
            v94 = vmlaq_n_f64(v94, v95, *v76);
            v85 = v78 - 1;
          }
          for (; v85; v85 -= 2)
          {
            v97 = *v84;
            v98 = v84[1];
            v96 = (float64x2_t *)((char *)v84 + v50);
            v99 = *v96;
            v100 = v96[1];
            v84 = (float64x2_t *)((char *)v96 + v50);
            v101 = *v82++;
            v102 = *v80++;
            v103 = *v83++;
            v104 = *v81++;
            v87 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v97, v101.f64[0]), v99, v101, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v97, v102.f64[0]), v99, v102, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v97, v103.f64[0]), v99, v103, 1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v97, v104.f64[0]), v99, v104, 1);
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v98, v101.f64[0]), v100, v101, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v98, v102.f64[0]), v100, v102, 1);
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v98, v103.f64[0]), v100, v103, 1);
            v94 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v98, v104.f64[0]), v100, v104, 1);
          }
          v105 = (float64x2_t *)((char *)v82 - 8 * v86 - 8);
          v106 = (float64x2_t *)((char *)v84 - v50 * (v78 + 4));
          v108 = *v106;
          v109 = v106[1];
          v107 = (float64x2_t *)((char *)v106 + v50);
          v111 = *v107;
          v112 = v107[1];
          v110 = (float64x2_t *)((char *)v107 + v50);
          v114 = *v110;
          v115 = v110[1];
          v113 = (float64x2_t *)((char *)v110 + v50);
          v116 = *v113;
          v117 = v113[1];
          v118 = (int64x2_t *)((char *)v113 + v50 + -4 * v50);
          v65 = vmulq_n_f64(v112, a7);
          v66 = vmulq_n_f64(v114, a7);
          a13 = vmulq_n_f64(v115, a7);
          v119 = vsubq_f64(vmulq_n_f64(v108, a7), v87);
          v120 = vsubq_f64(vmulq_n_f64(v109, a7), v88);
          v121 = vsubq_f64(vmulq_n_f64(v111, a7), v89);
          v122 = vmulq_f64(vsubq_f64(vmulq_n_f64(v116, a7), v93), v70);
          v123 = vmulq_f64(vsubq_f64(vmulq_n_f64(v117, a7), v94), v70);
          v62 = *v105;
          v124 = *(float64x2_t *)((char *)v80 - 8 * v86 - 8);
          v111.f64[0] = v83->f64[-v86];
          v125 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(v66, v91), v122, v111.f64[0], 0), v69);
          v126 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(a13, v92), v123, v111.f64[0], 0), v69);
          v127 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v121, v122, v124, 1), v125, v124.f64[0], 0), v68);
          v128 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vsubq_f64(v65, v90), v123, v124, 1), v126, v124.f64[0], 0), v68);
          v62.f64[0] = v105[-1].f64[1];
          v14 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v119, v122, *v105, 1), v125, v105->f64[0], 0), v127, v62.f64[0], 0), v67);
          v15 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v120, v123, *v105, 1), v126, v105->f64[0], 0), v128, v62.f64[0], 0), v67);
          *v118 = v14;
          v118[1] = (int64x2_t)v15;
          v129 = (float64x2_t *)&v118->i8[v50];
          *v129 = v127;
          v129[1] = v128;
          v130 = (float64x2_t *)((char *)v129 + v50);
          *v130 = v125;
          v130[1] = v126;
          v131 = (float64x2_t *)((char *)v130 + v50);
          *v131 = v122;
          v131[1] = v123;
          v71 += 4;
          v79 += 2;
        }
        while (v71 < __N - 3);
      }
      v132 = __N - v71;
      if (__N > v71)
      {
        v133 = a3 + 8 * v48;
        v134 = (_QWORD *)(v54 + 8 * v48);
        v135 = (_QWORD *)(v133 + 8 * v56 * a4);
        v136 = (unint64_t *)(v133 + 8 * v58 * a4);
        v137 = (unint64_t *)(v133 + 8 * v60 * a4);
        v138 = a2 - v53;
        if (a2 - v53 <= 4)
          v138 = 4;
        v139 = v138 - 4;
        f64 = v51[(unint64_t)v71 / 2].f64;
        do
        {
          v141 = v139;
          v142 = (float64x2_t *)v135;
          v143 = (int64x2_t *)v137;
          v144 = (int64x2_t *)v134;
          v145 = (int64x2_t *)v136;
          v146 = f64;
          v147 = v139 + 1;
          v148 = (float64x2_t)veorq_s8((int8x16_t)v62, (int8x16_t)v62);
          v149 = v148;
          if ((v139 & 1) != 0)
          {
            v146 = &f64[(unint64_t)v50 / 8];
            v65.f64[0] = *(float64_t *)v134;
            v144 = (int64x2_t *)(v134 + 1);
            v66.f64[0] = *(float64_t *)v135;
            v142 = (float64x2_t *)(v135 + 1);
            *(_QWORD *)&a13.f64[0] = *v136;
            v145 = (int64x2_t *)(v136 + 1);
            a14.i64[0] = *v137;
            v143 = (int64x2_t *)(v137 + 1);
            v148 = vmlaq_n_f64(v148, (float64x2_t)vtrn1q_s64((int64x2_t)v65, (int64x2_t)v66), *f64);
            v149 = vmlaq_n_f64(v149, (float64x2_t)vtrn1q_s64((int64x2_t)a13, a14), *f64);
            v141 = v139 - 1;
          }
          for (; v141; v141 -= 2)
          {
            v151.f64[0] = *v146;
            v150 = &v146[(unint64_t)v50 / 8];
            v152 = *v150;
            v146 = &v150[(unint64_t)v50 / 8];
            v153 = *v144++;
            v66 = *v142++;
            v154 = *v145++;
            v151.f64[1] = v152;
            v155 = *v143++;
            v15 = (float64x2_t)vtrn1q_s64(v154, v155);
            v148 = vmlaq_laneq_f64(vmlaq_n_f64(v148, (float64x2_t)vtrn1q_s64(v153, (int64x2_t)v66), v151.f64[0]), (float64x2_t)vtrn2q_s64(v153, (int64x2_t)v66), v151, 1);
            v149 = vmlaq_laneq_f64(vmlaq_n_f64(v149, v15, v151.f64[0]), (float64x2_t)vtrn2q_s64(v154, v155), v151, 1);
          }
          v156 = (int64x2_t *)((char *)v144 - 8 * v147 - 8);
          v157 = (float64_t *)((char *)v146 - v50 * (v139 + 4));
          v159.f64[0] = *v157;
          v158 = &v157[(unint64_t)v50 / 8];
          v161 = *v158;
          v160 = &v158[(unint64_t)v50 / 8];
          v163.f64[0] = *v160;
          v162 = &v160[(unint64_t)v50 / 8];
          v164 = *v162;
          v165 = &v162[(unint64_t)v50 / 8 + v50 / 0xFFFFFFFFFFFFFFFELL];
          v159.f64[1] = v161;
          v163.f64[1] = v164;
          v65 = vmulq_n_f64(v163, a7);
          v166 = vsubq_f64(v65, v149);
          a14 = *v156;
          v14 = *(int64x2_t *)((char *)v142 - 8 * v147 - 8);
          *(_QWORD *)&v15.f64[0] = v145->i64[-v147];
          v166.f64[0] = vmlsq_lane_f64(v166, v15, v166.f64[1] * v70.f64[0], 0).f64[0] * v69.f64[0];
          a13 = (float64x2_t)vtrn1q_s64(*v156, v14);
          v167 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v159, a7), v148), (float64x2_t)vtrn2q_s64(*v156, v14), v166.f64[1] * v70.f64[0], 0), a13, v166.f64[0], 0);
          v65.f64[0] = v167.f64[1] * v68.f64[0];
          a14.i64[0] = v156[-1].i64[1];
          v62 = vmlsq_lane_f64(v167, (float64x2_t)a14, v167.f64[1] * v68.f64[0], 0);
          v62.f64[0] = v62.f64[0] * v67.f64[0];
          *v165 = v62.f64[0];
          v168 = &v165[(unint64_t)v50 / 8];
          *v168 = v65.f64[0];
          v169 = &v168[(unint64_t)v50 / 8];
          *v169 = v166.f64[0];
          v169[(unint64_t)v50 / 8] = v166.f64[1] * v70.f64[0];
          ++f64;
          --v132;
        }
        while (v132);
      }
      v51 = (float64x2_t *)((char *)v51 + v52);
      v170 = v48 < 5;
      v48 -= 4;
    }
    while (!v170);
  }
}

uint64_t ssyrk_noPack_UN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t *v44;
  float32x4_t *v45;
  float32x2_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  __int32 *v50;
  float32x4_t v51;
  __int32 *v52;
  float32x2_t *v53;
  float32x2_t *v54;
  uint64_t result;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t *v68;
  float32x2_t *v69;
  uint64_t v70;
  unint64_t *v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  uint64_t v85;
  unsigned __int32 *v86;
  float32x2_t v87;
  float v88;
  unsigned __int32 *v89;

  a7.i64[1] = a8.i64[0];
  v12 = 0;
  v13 = 4 * a4;
  v14 = 4 * a6;
  v15 = a1 <= 3;
  for (i = a1 - 3; !v15; v12 += 4)
  {
    v17 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v14);
    if (v12)
    {
      v18 = 0;
      do
      {
        v19 = a2;
        v20 = (float32x4_t *)(a3 + 4 * v12);
        v21 = (float32x4_t *)(a3 + 4 * v18);
        v22 = (float32x4_t)veorq_s8(a8, a8);
        v23 = v22;
        v24 = v22;
        v25 = v22;
        do
        {
          v26 = *v21;
          v21 = (float32x4_t *)((char *)v21 + v13);
          v27 = *v20;
          v20 = (float32x4_t *)((char *)v20 + v13);
          v22 = vmlaq_n_f32(v22, v26, v27.f32[0]);
          v23 = vmlaq_lane_f32(v23, v26, *(float32x2_t *)v27.f32, 1);
          v24 = vmlaq_laneq_f32(v24, v26, v27, 2);
          v25 = vmlaq_laneq_f32(v25, v26, v27, 3);
          v15 = v19-- <= 1;
        }
        while (!v15);
        v29 = *v17;
        v28 = (float32x4_t *)((char *)v17 + v14);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v14);
        v33 = *v30;
        v32 = (float32x4_t *)((char *)v30 + v14);
        v34 = *v32;
        v35 = (__n128 *)((char *)v32 + v14 + -4 * v14);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v22, a7.f32[0]), v29, a7, 2);
        *v35 = (__n128)a8;
        v36 = (float32x4_t *)((char *)v35 + v14);
        *v36 = vmlaq_laneq_f32(vmulq_n_f32(v23, a7.f32[0]), v31, a7, 2);
        v37 = (float32x4_t *)((char *)v36 + v14);
        *v37 = vmlaq_laneq_f32(vmulq_n_f32(v24, a7.f32[0]), v33, a7, 2);
        v38 = (float32x4_t *)((char *)v37 + v14);
        *v38 = vmlaq_laneq_f32(vmulq_n_f32(v25, a7.f32[0]), v34, a7, 2);
        v17 = (float32x4_t *)((char *)v38 + v14 + -4 * v14 + 16);
        v18 += 4;
      }
      while (v18 < v12);
    }
    v39 = a2;
    v40 = (float32x4_t *)(a3 + 4 * v12);
    a8 = veorq_s8(a8, a8);
    v41 = *(float32x2_t *)a8.i8;
    v42 = (float32x4_t)a8;
    v43 = (float32x4_t)a8;
    do
    {
      a12 = *v40;
      v40 = (float32x4_t *)((char *)v40 + v13);
      *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a12.f32[0]);
      v41 = vmla_lane_f32(v41, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
      v42 = vmlaq_laneq_f32(v42, a12, a12, 2);
      v43 = vmlaq_laneq_f32(v43, a12, a12, 3);
      v15 = v39-- <= 1;
    }
    while (!v15);
    a12.i32[0] = v17->i32[0];
    v44 = (float32x2_t *)((char *)v17 + v14);
    v46 = *v44;
    v45 = (float32x4_t *)((char *)v44 + v14);
    v48 = *v45;
    v47 = (float32x4_t *)((char *)v45 + v14);
    v49 = *v47;
    v50 = (__int32 *)((char *)v47 + v14 + -4 * v14);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v51 = vmlaq_laneq_f32(vmulq_n_f32(v42, a7.f32[0]), v48, a7, 2);
    v52 = &v50[(unint64_t)v14 / 2];
    *v50 = a8.i32[0];
    v53 = (float32x2_t *)&v50[(unint64_t)v14 / 4];
    *v53 = vmla_laneq_f32(vmul_n_f32(v41, a7.f32[0]), v46, a7, 2);
    v54 = (float32x2_t *)((char *)v53 + v14);
    *v54 = *(float32x2_t *)v51.f32;
    v52[2] = v51.i32[2];
    *(float32x4_t *)&v54->f32[(unint64_t)v14 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v43, a7.f32[0]), v49, a7, 2);
    v15 = i <= 4;
    i -= 4;
  }
  v15 = i <= -3;
  result = i + 3;
  if (!v15)
  {
    if (result >= 2)
    {
      v56 = (float32x2_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v14);
      if (v12)
      {
        v57 = 0;
        do
        {
          v58 = a2;
          v59 = (float32x2_t *)(a3 + 4 * v12);
          v60 = (float32x2_t *)(a3 + 4 * v57);
          v61 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v62 = v61;
          do
          {
            v63 = *v60;
            v60 = (float32x2_t *)((char *)v60 + v13);
            v64 = *v59;
            v59 = (float32x2_t *)((char *)v59 + v13);
            v61 = vmla_n_f32(v61, v63, v64.f32[0]);
            v62 = vmla_lane_f32(v62, v63, v64, 1);
            v15 = v58-- <= 1;
          }
          while (!v15);
          v66 = *v56;
          v65 = (float32x2_t *)((char *)v56 + v14);
          v67 = *v65;
          v68 = (float32x2_t *)((char *)v65 + v14 + -2 * v14);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v66, a7, 2);
          *v68 = *(float32x2_t *)a8.i8;
          v69 = (float32x2_t *)((char *)v68 + v14);
          *v69 = vmla_laneq_f32(vmul_n_f32(v62, a7.f32[0]), v67, a7, 2);
          v56 = (float32x2_t *)((char *)v69 + v14 + -2 * v14 + 8);
          v57 += 2;
        }
        while (v57 < v12);
      }
      v70 = a2;
      v71 = (unint64_t *)(a3 + 4 * v12);
      v72 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v73 = v72;
      do
      {
        a12.i64[0] = *v71;
        v71 = (unint64_t *)((char *)v71 + v13);
        v72 = vmla_n_f32(v72, *(float32x2_t *)a12.f32, a12.f32[0]);
        v73 = vmla_lane_f32(v73, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
        v15 = v70-- <= 1;
      }
      while (!v15);
      a12.i32[0] = v56->i32[0];
      v74 = (float32x2_t *)((char *)v56 + v14);
      v75 = *v74;
      v76 = (float32x2_t *)((char *)v74 + v14 + -2 * v14);
      v72.f32[0] = v72.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v72, *(float32x2_t *)a12.f32, a7, 2);
      v76->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v76 + v14) = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), v75, a7, 2);
      result -= 2;
      v12 += 2;
    }
    if (result >= 1)
    {
      v77 = (float32x2_t *)a5;
      v78 = 0;
      if (v12 >= 1)
      {
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + 4 * v12);
          v81 = (float32x2_t *)(a3 + 4 * v78);
          v82 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          do
          {
            v83 = *v81;
            v81 = (float32x2_t *)((char *)v81 + v13);
            v84 = *v80;
            v80 = (float *)((char *)v80 + v13);
            v82 = vmla_n_f32(v82, v83, v84);
            v15 = v79-- <= 1;
          }
          while (!v15);
          *(float32x2_t *)a12.f32 = *v77;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v82, a7.f32[0]), *v77, a7, 2);
          *v77++ = *(float32x2_t *)a8.i8;
          v78 += 2;
        }
        while (v78 < v12 - 1);
      }
      v85 = a2;
      v86 = (unsigned __int32 *)(a3 + 4 * v12);
      v87 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v88 = *(float *)v86,
            v86 = (unsigned __int32 *)((char *)v86 + v13),
            v87.f32[0] = v88 * v88,
            v85 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i32[0] = *v86;
          v89 = &v86[(unint64_t)v13 / 4];
          a12.i32[1] = *v89;
          v86 = &v89[(unint64_t)v13 / 4];
          v87 = vmla_f32(v87, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v15 = v85 <= 2;
          v85 -= 2;
        }
        while (!v15);
        v87.f32[0] = vaddv_f32(v87);
      }
      a12.i32[0] = v77->i32[0];
      v87.f32[0] = v87.f32[0] * a7.f32[0];
      v77->i32[0] = vmla_laneq_f32(v87, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

void dtrmm_noPack_LUNU(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t a6, double a7, double a8, int8x16_t a9)
{
  float64x2_t v9;
  const double *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v23;
  uint64_t v24;
  const double *v25;
  float64x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64_t *f64;
  int8x16_t *v34;
  float64x2_t v35;
  double *v36;
  float64x2_t v37;
  double *v38;
  float64x2_t v39;
  double *v40;
  float64x2_t v41;
  double *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t *v64;
  float64x2_t *v65;
  float64x2_t *v66;
  float64x2_t *v67;
  double *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v11 = a3;
  v13 = a6;
  v14 = 0;
  if (a2 >= 4)
  {
    v80 = a2 - 3;
    v15 = __N - 3;
    v16 = 3 * a6;
    v17 = 8 * a4;
    v18 = __N & 3;
    if (__N <= 0)
      v18 = -(-__N & 3);
    v78 = 2 * a4;
    v79 = 8 * __N;
    v77 = a4 + 1;
    v19 = 3 * a6;
    v20 = a6;
    v21 = a5;
    v23 = a5;
    while (1)
    {
      if (__N < 4)
      {
        v24 = 0;
      }
      else
      {
        v24 = 0;
        v25 = v11;
        v26 = v21;
        v27 = __N;
        v28 = v79;
        do
        {
          v29 = v27 - 4;
          a9 = veorq_s8(a9, a9);
          *(double *)a9.i64 = v25[a4];
          v30 = (float64x2_t *)&v25[(unint64_t)v17 / 8 + (unint64_t)v17 / 8];
          v9 = (float64x2_t)veorq_s8((int8x16_t)v9, (int8x16_t)v9);
          v32 = *v30;
          v31 = (float64x2_t *)((char *)v30 + v17);
          f64 = v31[1].f64;
          v35 = *v31;
          v34 = (int8x16_t *)((char *)v31 + v17);
          v9.f64[0] = *f64;
          v37 = v26[1];
          v36 = v26[2].f64;
          v39 = *(float64x2_t *)((char *)v26 + v13 * 8 + 16);
          v38 = &v26[2].f64[v13];
          v41 = v26[v20 + 1];
          v40 = v26[v20 + 2].f64;
          v43 = *(float64x2_t *)((char *)v26 + v19 * 8 + 16);
          v42 = &v26[2].f64[v19];
          v44 = vmlaq_laneq_f64(v37, v9, v37, 1);
          v45 = vmlaq_laneq_f64(v39, v9, v39, 1);
          v46 = vmlaq_laneq_f64(v41, v9, v41, 1);
          v47 = vmlaq_laneq_f64(v43, v9, v43, 1);
          v48 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(*v26, (float64x2_t)a9, *v26, 1), v32, v37.f64[0]), v35, v37, 1);
          v49 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(*(float64x2_t *)((char *)v26 + 8 * a6), (float64x2_t)a9, *(float64x2_t *)((char *)v26 + 8 * a6), 1), v32, v39.f64[0]), v35, v39, 1);
          v50 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v26[a6], (float64x2_t)a9, v26[a6], 1), v32, v41.f64[0]), v35, v41, 1);
          v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(*(float64x2_t *)((char *)v26 + 24 * a6), (float64x2_t)a9, *(float64x2_t *)((char *)v26 + 24 * a6), 1), v32, v43.f64[0]), v35, v43, 1);
          if ((((_DWORD)v27 - 4) & 1) != 0)
          {
            v52 = *(float64x2_t *)v34;
            a9 = v34[1];
            v34 = (int8x16_t *)((char *)v34 + v17);
            v53 = *v36;
            v36 = &v26[2].f64[1];
            v54 = *v38;
            v38 = &v26[2].f64[v13 + 1];
            v55 = *v40;
            v40 = &v26[v20 + 2].f64[1];
            v56 = *v42;
            v42 = &v26[2].f64[v19 + 1];
            v48 = vmlaq_n_f64(v48, v52, v53);
            v49 = vmlaq_n_f64(v49, v52, v54);
            v50 = vmlaq_n_f64(v50, v52, v55);
            v51 = vmlaq_n_f64(v51, v52, v56);
            v44 = vmlaq_n_f64(v44, (float64x2_t)a9, v53);
            v45 = vmlaq_n_f64(v45, (float64x2_t)a9, v54);
            v46 = vmlaq_n_f64(v46, (float64x2_t)a9, v55);
            v47 = vmlaq_n_f64(v47, (float64x2_t)a9, v56);
            v29 = v27 - 5;
          }
          for (; v29; v29 -= 2)
          {
            v58 = *(float64x2_t *)v34;
            a9 = v34[1];
            v57 = (float64x2_t *)&v34->i8[v17];
            v59 = *v57;
            v9 = v57[1];
            v34 = (int8x16_t *)((char *)v57 + v17);
            v60 = *(float64x2_t *)v36;
            v36 += 2;
            v61 = *(float64x2_t *)v38;
            v38 += 2;
            v62 = *(float64x2_t *)v40;
            v40 += 2;
            v63 = *(float64x2_t *)v42;
            v42 += 2;
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v58, v60.f64[0]), v59, v60, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v58, v61.f64[0]), v59, v61, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v58, v62.f64[0]), v59, v62, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v58, v63.f64[0]), v59, v63, 1);
            v44 = vmlaq_laneq_f64(vmlaq_n_f64(v44, (float64x2_t)a9, v60.f64[0]), v9, v60, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, (float64x2_t)a9, v61.f64[0]), v9, v61, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, (float64x2_t)a9, v62.f64[0]), v9, v62, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, (float64x2_t)a9, v63.f64[0]), v9, v63, 1);
          }
          v64 = (float64x2_t *)((char *)v36 - v28);
          v65 = (float64x2_t *)((char *)v38 - v28);
          v66 = (float64x2_t *)((char *)v40 - v28);
          v67 = (float64x2_t *)((char *)v42 - v28);
          *v64 = vmulq_n_f64(v48, a7);
          v64[1] = vmulq_n_f64(v44, a7);
          *v65 = vmulq_n_f64(v49, a7);
          v65[1] = vmulq_n_f64(v45, a7);
          *v66 = vmulq_n_f64(v50, a7);
          v66[1] = vmulq_n_f64(v46, a7);
          *v67 = vmulq_n_f64(v51, a7);
          v67[1] = vmulq_n_f64(v47, a7);
          v24 += 4;
          v28 -= 32;
          v27 -= 4;
          v26 += 2;
          v25 += 4 * a4 + 4;
        }
        while (v24 < v15);
      }
      a5 = v23;
      v68 = &v23->f64[v14 * a6 + v24];
      v11 = a3;
      v69 = (uint64_t)&a3[v24 + v24 * a4];
      if (v18 == 3)
        break;
      if (v18 == 2)
      {
        v70 = a7;
        v72 = (2 * a6) | 1;
        v71 = a6 + 1;
        v73 = v16 + 1;
LABEL_20:
        *v68 = v70 * (*v68 + v68[1] * *(double *)(v69 + 8 * a4));
        v68[a6] = v70 * (v68[a6] + v68[v71] * *(double *)(v69 + 8 * a4));
        v68[2 * a6] = v70 * (v68[2 * a6] + v68[v72] * *(double *)(v69 + 8 * a4));
        v68[3 * a6] = v70 * (v68[3 * a6] + v68[v73] * *(double *)(v69 + 8 * a4));
        ++v68;
        goto LABEL_21;
      }
      if (v18 == 1)
      {
        v70 = a7;
LABEL_21:
        *v68 = v70 * *v68;
        v68[a6] = v70 * v68[a6];
        v68[2 * a6] = a7 * v68[2 * a6];
        *(double *)a9.i64 = v68[3 * a6];
        v68[3 * a6] = a7 * *(double *)a9.i64;
      }
      v14 += 4;
      v21 += 2 * a6;
      if (v14 >= v80)
        goto LABEL_23;
    }
    v70 = a7;
    *v68 = a7 * (*v68 + v68[1] * *(double *)(v69 + 8 * a4) + v68[2] * *(double *)(v69 + 8 * v78));
    v71 = a6 + 1;
    v68[a6] = a7 * (v68[a6] + v68[a6 + 1] * *(double *)(v69 + 8 * a4) + v68[a6 + 2] * *(double *)(v69 + 8 * v78));
    v72 = (2 * a6) | 1;
    v68[2 * a6] = a7
                * (v68[2 * a6] + v68[v72] * *(double *)(v69 + 8 * a4) + v68[2 * a6 + 2] * *(double *)(v69 + 8 * v78));
    v73 = v16 + 1;
    v68[3 * a6] = a7
                * (v68[3 * a6] + v68[v16 + 1] * *(double *)(v69 + 8 * a4) + v68[v16 + 2] * *(double *)(v69 + 8 * v78));
    v69 += 8 * v77;
    ++v68;
    goto LABEL_20;
  }
LABEL_23:
  v74 = a2 - v14;
  if (a2 > v14)
  {
    v75 = &a5->f64[v14 * a6];
    do
    {
      cblas_dscal(__N, a7, v75, 1);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasNoTrans, CblasUnit, __N, v11, a4, v75, 1);
      v75 = (double *)((char *)v75 + v13 * 8);
      --v74;
    }
    while (v74);
  }
}

void dtrmm_noPack_LUNN(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t a6, double a7, __n128 a8)
{
  const double *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v21;
  uint64_t v22;
  const double *v23;
  float64x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  __n128 *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  __n128 *v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  double *f64;
  float64x2_t v42;
  double *v43;
  float64x2_t v44;
  double *v45;
  float64x2_t v46;
  double *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;
  double *v74;
  double *v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v9 = a3;
  v11 = a6;
  v12 = 0;
  if (a2 >= 4)
  {
    v87 = a2 - 3;
    v13 = __N - 3;
    v14 = 3 * a6;
    v15 = 8 * a4;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v84 = 2 * a4;
    v86 = 8 * __N;
    v85 = a4 + 1;
    v17 = 3 * a6;
    v18 = a6;
    v19 = a5;
    v21 = a5;
    while (1)
    {
      if (__N < 4)
      {
        v22 = 0;
      }
      else
      {
        v22 = 0;
        v23 = v9;
        v24 = v19;
        v25 = __N;
        v26 = v86;
        do
        {
          v27 = v25 - 4;
          v28 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v28.f64[0] = *v23;
          v30 = *(float64x2_t *)&v23[a4];
          v29 = (__n128 *)&v23[(unint64_t)v15 / 8 + (unint64_t)v15 / 8];
          v31 = vmlaq_n_f64(vmulq_laneq_f64(v30, *v24, 1), v28, v24->f64[0]);
          v32 = vmlaq_n_f64(vmulq_laneq_f64(v30, *(float64x2_t *)((char *)v24 + 8 * a6), 1), v28, v24->f64[a6]);
          v33 = vmlaq_n_f64(vmulq_laneq_f64(v30, v24[a6], 1), v28, v24[a6].f64[0]);
          v34 = vmlaq_n_f64(vmulq_laneq_f64(v30, *(float64x2_t *)((char *)v24 + 24 * a6), 1), v28, v24->f64[3 * a6]);
          v35 = (float64x2_t)veorq_s8((int8x16_t)v30, (int8x16_t)v30);
          v36 = v29 + 1;
          a8 = *v29;
          v37 = (float64x2_t *)((char *)v29 + v15);
          *(_QWORD *)&v35.f64[0] = v36->n128_u64[0];
          v39 = *v37;
          v40 = v37[1];
          v38 = (float64x2_t *)((char *)v37 + v15);
          v42 = v24[1];
          f64 = v24[2].f64;
          v44 = *(float64x2_t *)((char *)v24 + v11 * 8 + 16);
          v43 = &v24[2].f64[v11];
          v46 = v24[v18 + 1];
          v45 = v24[v18 + 2].f64;
          v48 = *(float64x2_t *)((char *)v24 + v17 * 8 + 16);
          v47 = &v24[2].f64[v17];
          v49 = vmlaq_n_f64(vmulq_laneq_f64(v40, v42, 1), v35, v42.f64[0]);
          v50 = vmlaq_n_f64(vmulq_laneq_f64(v40, v44, 1), v35, v44.f64[0]);
          v51 = vmlaq_n_f64(vmulq_laneq_f64(v40, v46, 1), v35, v46.f64[0]);
          v52 = vmlaq_n_f64(vmulq_laneq_f64(v40, v48, 1), v35, v48.f64[0]);
          v53 = vmlaq_laneq_f64(vmlaq_n_f64(v31, (float64x2_t)a8, v42.f64[0]), v39, v42, 1);
          v54 = vmlaq_laneq_f64(vmlaq_n_f64(v32, (float64x2_t)a8, v44.f64[0]), v39, v44, 1);
          v55 = vmlaq_laneq_f64(vmlaq_n_f64(v33, (float64x2_t)a8, v46.f64[0]), v39, v46, 1);
          v56 = vmlaq_laneq_f64(vmlaq_n_f64(v34, (float64x2_t)a8, v48.f64[0]), v39, v48, 1);
          if ((((_DWORD)v25 - 4) & 1) != 0)
          {
            a8 = *(__n128 *)v38;
            v57 = v38[1];
            v38 = (float64x2_t *)((char *)v38 + v15);
            v58 = *f64;
            f64 = &v24[2].f64[1];
            v59 = *v43;
            v43 = &v24[2].f64[v11 + 1];
            v60 = *v45;
            v45 = &v24[v18 + 2].f64[1];
            v61 = *v47;
            v47 = &v24[2].f64[v17 + 1];
            v53 = vmlaq_n_f64(v53, (float64x2_t)a8, v58);
            v54 = vmlaq_n_f64(v54, (float64x2_t)a8, v59);
            v55 = vmlaq_n_f64(v55, (float64x2_t)a8, v60);
            v56 = vmlaq_n_f64(v56, (float64x2_t)a8, v61);
            v49 = vmlaq_n_f64(v49, v57, v58);
            v50 = vmlaq_n_f64(v50, v57, v59);
            v51 = vmlaq_n_f64(v51, v57, v60);
            v52 = vmlaq_n_f64(v52, v57, v61);
            v27 = v25 - 5;
          }
          for (; v27; v27 -= 2)
          {
            a8 = *(__n128 *)v38;
            v63 = v38[1];
            v62 = (float64x2_t *)((char *)v38 + v15);
            v64 = *v62;
            v65 = v62[1];
            v38 = (float64x2_t *)((char *)v62 + v15);
            v66 = *(float64x2_t *)f64;
            f64 += 2;
            v67 = *(float64x2_t *)v43;
            v43 += 2;
            v68 = *(float64x2_t *)v45;
            v45 += 2;
            v69 = *(float64x2_t *)v47;
            v47 += 2;
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, (float64x2_t)a8, v66.f64[0]), v64, v66, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, (float64x2_t)a8, v67.f64[0]), v64, v67, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, (float64x2_t)a8, v68.f64[0]), v64, v68, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, (float64x2_t)a8, v69.f64[0]), v64, v69, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v63, v66.f64[0]), v65, v66, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v63, v67.f64[0]), v65, v67, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v63, v68.f64[0]), v65, v68, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v63, v69.f64[0]), v65, v69, 1);
          }
          v70 = (float64x2_t *)((char *)f64 - v26);
          v71 = (float64x2_t *)((char *)v43 - v26);
          v72 = (float64x2_t *)((char *)v45 - v26);
          v73 = (float64x2_t *)((char *)v47 - v26);
          *v70 = vmulq_n_f64(v53, a7);
          v70[1] = vmulq_n_f64(v49, a7);
          *v71 = vmulq_n_f64(v54, a7);
          v71[1] = vmulq_n_f64(v50, a7);
          *v72 = vmulq_n_f64(v55, a7);
          v72[1] = vmulq_n_f64(v51, a7);
          *v73 = vmulq_n_f64(v56, a7);
          v73[1] = vmulq_n_f64(v52, a7);
          v22 += 4;
          v26 -= 32;
          v25 -= 4;
          v24 += 2;
          v23 += 4 * a4 + 4;
        }
        while (v22 < v13);
      }
      a5 = v21;
      v74 = &v21->f64[v12 * a6 + v22];
      v9 = a3;
      v75 = (double *)&a3[v22 + v22 * a4];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v76 = a7;
        v78 = (2 * a6) | 1;
        v77 = a6 + 1;
        v80 = v85;
        v79 = v14 + 1;
LABEL_20:
        *v74 = v76 * (*v74 * *v75 + v74[1] * v75[a4]);
        v74[a6] = v76 * (v74[a6] * *v75 + v74[v77] * v75[a4]);
        v74[2 * a6] = v76 * (v74[2 * a6] * *v75 + v74[v78] * v75[a4]);
        v74[3 * a6] = v76 * (v74[3 * a6] * *v75 + v74[v79] * v75[a4]);
        v75 += v80;
        ++v74;
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v76 = a7;
LABEL_21:
        *v74 = v76 * (*v74 * *v75);
        v74[a6] = v76 * (v74[a6] * *v75);
        v74[2 * a6] = a7 * (v74[2 * a6] * *v75);
        a8.n128_f64[0] = a7 * (v74[3 * a6] * *v75);
        v74[3 * a6] = a8.n128_f64[0];
      }
      v12 += 4;
      v19 += 2 * a6;
      if (v12 >= v87)
        goto LABEL_23;
    }
    v76 = a7;
    *v74 = a7 * (v74[1] * v75[a4] + v74[2] * v75[v84] + *v74 * *v75);
    v77 = a6 + 1;
    v74[a6] = a7 * (v74[a6 + 1] * v75[a4] + v74[a6 + 2] * v75[v84] + v74[a6] * *v75);
    v78 = (2 * a6) | 1;
    v74[2 * a6] = a7 * (v74[v78] * v75[a4] + v74[2 * a6 + 2] * v75[v84] + v74[2 * a6] * *v75);
    v80 = v85;
    v79 = v14 + 1;
    v74[3 * a6] = a7 * (v74[v14 + 1] * v75[a4] + v74[v14 + 2] * v75[v84] + v74[3 * a6] * *v75);
    v75 += v85;
    ++v74;
    goto LABEL_20;
  }
LABEL_23:
  v81 = a2 - v12;
  if (a2 > v12)
  {
    v82 = &a5->f64[v12 * a6];
    do
    {
      cblas_dscal(__N, a7, v82, 1);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasNoTrans, CblasNonUnit, __N, v9, a4, v82, 1);
      v82 = (double *)((char *)v82 + v11 * 8);
      --v81;
    }
    while (v81);
  }
}

void dtrmm_noPack_LUTU(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, int64x2_t a9)
{
  uint64_t v10;
  const double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float64x2_t v33;
  float64_t *v34;
  float64_t *v35;
  int64x2_t v36;
  unint64_t *v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t v57;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  BOOL v78;
  uint64_t v79;
  double *v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const double *v105;

  v10 = a4;
  v11 = a3;
  v12 = __N;
  v13 = 0;
  if (a2 >= 4)
  {
    v103 = a2 - 3;
    v14 = 3 * a6;
    v15 = 2 * a6;
    if (__N <= 0)
      v16 = -(-__N & 3);
    else
      v16 = __N & 3;
    v94 = v15 - 2;
    v93 = v14 - 2;
    v92 = -a4;
    v17 = 8 * __N;
    v98 = (uint64_t)&a3[a4 * (__N - 1) - 4];
    v18 = 32 * ~a4;
    v97 = (uint64_t)&a3[a4 * (__N - 2) - 4];
    v96 = (uint64_t)&a3[a4 * (__N - 3) - 4];
    v95 = (uint64_t)&a3[a4 * (__N - 4) - 4];
    v19 = a5 - 32;
    v101 = 32 * a6;
    v20 = a5 - 32 + 24 * a6;
    v21 = a5 - 32 + 16 * a6;
    v22 = a5 - 32 + 8 * a6;
    v105 = v11;
    v104 = v10;
    v102 = v16;
    v100 = v15 - 1;
    v99 = v14 - 1;
    while (1)
    {
      v10 = v12;
      if (v12 >= 4)
      {
        v23 = v19;
        v24 = v22;
        v25 = v21;
        v26 = v20;
        v28 = v95;
        v27 = v96;
        v30 = v97;
        v29 = v98;
        v31 = __N;
        do
        {
          v10 = v31 - 4;
          v32 = v31 - 4;
          *(_QWORD *)&v33.f64[0] = veorq_s8((int8x16_t)a9, (int8x16_t)a9).u64[0];
          v34 = (float64_t *)(v28 + v17 - 8 * (v31 - 4));
          v33.f64[1] = *(float64_t *)(v27 + v17);
          v35 = (float64_t *)(v27 + v17 - 8 * (v31 - 4));
          v36 = *(int64x2_t *)(v30 + v17);
          v37 = (unint64_t *)(v30 + v17 - 8 * (v31 - 4));
          v38 = *(int64x2_t *)(v29 + v17);
          v39 = *(float64x2_t *)(v23 + v17);
          v40 = *(float64x2_t *)(v24 + v17);
          v41 = *(float64x2_t *)(v25 + v17);
          v42 = *(float64x2_t *)(v26 + v17);
          v43 = (float64x2_t)vtrn1q_s64(v36, v38);
          v44 = (float64x2_t)vtrn2q_s64(v36, v38);
          v45 = vmlaq_laneq_f64(vmulq_n_f64(v43, v39.f64[0]), v44, v39, 1);
          v46 = vmlaq_laneq_f64(vmulq_n_f64(v43, v40.f64[0]), v44, v40, 1);
          v47 = vmlaq_laneq_f64(vmulq_n_f64(v43, v41.f64[0]), v44, v41, 1);
          v48 = vmlaq_laneq_f64(vmulq_n_f64(v43, v42.f64[0]), v44, v42, 1);
          v49 = vmlaq_n_f64(v39, v33, v39.f64[0]);
          v50 = vmlaq_n_f64(v40, v33, v40.f64[0]);
          v51 = vmlaq_n_f64(v41, v33, v41.f64[0]);
          v52 = vmlaq_n_f64(v42, v33, v42.f64[0]);
          a9.i64[0] = veorq_s8((int8x16_t)v33, (int8x16_t)v33).u64[0];
          a9.i64[1] = *(_QWORD *)(v29 + v17 + 16);
          v53 = (unint64_t *)(v29 + v17 - 8 * (v31 - 4));
          v54 = v23 + v17 - 8 * (v31 - 4);
          v55 = v24 + v17 - 8 * (v31 - 4);
          v56 = v25 + v17 - 8 * (v31 - 4);
          v57 = vmlaq_n_f64(vaddq_f64(v45, *(float64x2_t *)(v23 + v17 + 16)), (float64x2_t)a9, *(double *)(v23 + v17 + 16));
          v58 = v26 + v17 - 8 * (v31 - 4);
          v59 = vmlaq_n_f64(vaddq_f64(v46, *(float64x2_t *)(v24 + v17 + 16)), (float64x2_t)a9, *(double *)(v24 + v17 + 16));
          v60 = vmlaq_n_f64(vaddq_f64(v47, *(float64x2_t *)(v25 + v17 + 16)), (float64x2_t)a9, *(double *)(v25 + v17 + 16));
          v61 = vmlaq_n_f64(vaddq_f64(v48, *(float64x2_t *)(v26 + v17 + 16)), (float64x2_t)a9, *(double *)(v26 + v17 + 16));
          if ((((_DWORD)v31 - 4) & 1) != 0)
          {
            v62.f64[0] = *v34++;
            v62.f64[1] = *v35++;
            a9.i64[0] = *v37++;
            a9.i64[1] = *v53++;
            v63 = *(double *)v54;
            v54 += 8;
            v64 = *(double *)v55;
            v55 += 8;
            v65 = *(double *)v56;
            v56 += 8;
            v66 = *(double *)v58;
            v58 += 8;
            v49 = vmlaq_n_f64(v49, v62, v63);
            v50 = vmlaq_n_f64(v50, v62, v64);
            v51 = vmlaq_n_f64(v51, v62, v65);
            v52 = vmlaq_n_f64(v52, v62, v66);
            v57 = vmlaq_n_f64(v57, (float64x2_t)a9, v63);
            v59 = vmlaq_n_f64(v59, (float64x2_t)a9, v64);
            v60 = vmlaq_n_f64(v60, (float64x2_t)a9, v65);
            v61 = vmlaq_n_f64(v61, (float64x2_t)a9, v66);
            v32 = v31 - 5;
          }
          for (; v32; v32 -= 2)
          {
            v67 = *(int64x2_t *)v34;
            v34 += 2;
            v68 = *(int64x2_t *)v35;
            v35 += 2;
            v69 = *(int64x2_t *)v37;
            v37 += 2;
            v70 = *(int64x2_t *)v53;
            v53 += 2;
            v71 = *(float64x2_t *)v54;
            v54 += 16;
            v72 = *(float64x2_t *)v55;
            v55 += 16;
            v73 = *(float64x2_t *)v56;
            v56 += 16;
            v74 = *(float64x2_t *)v58;
            v58 += 16;
            v75 = (float64x2_t)vtrn1q_s64(v67, v68);
            v76 = (float64x2_t)vtrn2q_s64(v67, v68);
            v77 = (float64x2_t)vtrn1q_s64(v69, v70);
            a9 = vtrn2q_s64(v69, v70);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v75, v71.f64[0]), v76, v71, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v75, v72.f64[0]), v76, v72, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v75, v73.f64[0]), v76, v73, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v75, v74.f64[0]), v76, v74, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v77, v71.f64[0]), (float64x2_t)a9, v71, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v77, v72.f64[0]), (float64x2_t)a9, v72, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v77, v73.f64[0]), (float64x2_t)a9, v73, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v77, v74.f64[0]), (float64x2_t)a9, v74, 1);
          }
          *(float64x2_t *)v54 = vmulq_n_f64(v49, a7);
          *(float64x2_t *)(v54 + 16) = vmulq_n_f64(v57, a7);
          *(float64x2_t *)v55 = vmulq_n_f64(v50, a7);
          *(float64x2_t *)(v55 + 16) = vmulq_n_f64(v59, a7);
          *(float64x2_t *)v56 = vmulq_n_f64(v51, a7);
          *(float64x2_t *)(v56 + 16) = vmulq_n_f64(v60, a7);
          *(float64x2_t *)v58 = vmulq_n_f64(v52, a7);
          *(float64x2_t *)(v58 + 16) = vmulq_n_f64(v61, a7);
          v29 += v18;
          v30 += v18;
          v27 += v18;
          v28 += v18;
          v26 -= 32;
          v25 -= 32;
          v24 -= 32;
          v23 -= 32;
          v78 = v31 > 7;
          v31 -= 4;
        }
        while (v78);
      }
      v79 = v10 - 1;
      v80 = (double *)(a5 + 8 * v13 * a6 + 8 * (v10 - 1));
      LODWORD(v10) = v104;
      v11 = v105;
      v81 = (double *)&v105[v79 * v104];
      if (v102 == 3)
        break;
      if (v102 == 2)
      {
        v84 = a7;
        v12 = __N;
        v83 = 2 * a6;
        v82 = 3 * a6;
        v86 = v100;
        v85 = a6 - 1;
        v87 = v99;
LABEL_19:
        *v80 = v84 * (*v80 + *(v80 - 1) * *v81);
        v80[a6] = v84 * (v80[a6] + v80[v85] * *v81);
        v80[v83] = v84 * (v80[v83] + v80[v86] * *v81);
        v80[v82] = v84 * (v80[v82] + v80[v87] * *v81);
        --v80;
        goto LABEL_20;
      }
      v12 = __N;
      v83 = 2 * a6;
      v82 = 3 * a6;
      if (v102 == 1)
      {
        v84 = a7;
LABEL_20:
        *v80 = v84 * *v80;
        v80[a6] = v84 * v80[a6];
        v80[v83] = a7 * v80[v83];
        *(double *)a9.i64 = v80[v82];
        v80[v82] = a7 * *(double *)a9.i64;
      }
      v13 += 4;
      v20 += v101;
      v21 += v101;
      v22 += v101;
      v19 += v101;
      if (v13 >= v103)
        goto LABEL_22;
    }
    v84 = a7;
    *v80 = a7 * (*v80 + *(v80 - 1) * v81[1] + *(v80 - 2) * *v81);
    v85 = a6 - 1;
    v83 = 2 * a6;
    v80[a6] = a7 * (v80[a6] + v80[a6 - 1] * v81[1] + v80[a6 - 2] * *v81);
    v87 = v99;
    v86 = v100;
    v80[2 * a6] = a7 * (v80[2 * a6] + v80[v100] * v81[1] + v80[v94] * *v81);
    v82 = 3 * a6;
    v80[3 * a6] = a7 * (v80[3 * a6] + v80[v99] * v81[1] + v80[v93] * *v81);
    v81 += v92;
    --v80;
    v12 = __N;
    goto LABEL_19;
  }
LABEL_22:
  v88 = a2 - v13;
  if (a2 > v13)
  {
    v89 = (double *)(a5 + 8 * v13 * a6);
    v90 = 8 * a6;
    do
    {
      cblas_dscal(v12, a7, v89, 1);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasTrans, CblasUnit, v12, v11, v10, v89, 1);
      v89 = (double *)((char *)v89 + v90);
      --v88;
    }
    while (v88);
  }
}

void dtrmm_noPack_LUTN(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int64x2_t a8)
{
  int v9;
  const double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64x2_t v33;
  unint64_t *v34;
  int64x2_t v35;
  unint64_t *v36;
  int64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  int64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64_t *v58;
  float64_t *v59;
  uint64_t v60;
  uint64_t v61;
  float64x2_t v62;
  uint64_t v63;
  float64x2_t v64;
  uint64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  BOOL v84;
  uint64_t v85;
  double *v86;
  double *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const double *v112;

  v9 = a4;
  v10 = a3;
  v11 = __N;
  v12 = 0;
  if (a2 >= 4)
  {
    v110 = a2 - 3;
    v13 = 3 * a6;
    v14 = 2 * a6;
    if (__N <= 0)
      v15 = -(-__N & 3);
    else
      v15 = __N & 3;
    v100 = v14 - 2;
    v99 = v13 - 2;
    v16 = 8 * __N;
    v17 = 32 * ~a4;
    v103 = (uint64_t)&a3[a4 * (__N - 2) - 4];
    v104 = (uint64_t)&a3[a4 * (__N - 1) - 4];
    v101 = (uint64_t)&a3[a4 * (__N - 4) - 4];
    v102 = (uint64_t)&a3[a4 * (__N - 3) - 4];
    v18 = a5 - 32;
    v108 = 32 * a6;
    v19 = a5 - 32 + 24 * a6;
    v20 = a5 - 32 + 16 * a6;
    v21 = a5 - 32 + 8 * a6;
    v112 = v10;
    v109 = v15;
    v106 = v13 - 1;
    v107 = v14 - 1;
    v105 = -a4;
    while (1)
    {
      v22 = v11;
      if (v11 >= 4)
      {
        v23 = v18;
        v24 = v21;
        v25 = v20;
        v26 = v19;
        v28 = v101;
        v27 = v102;
        v30 = v103;
        v29 = v104;
        v31 = __N;
        do
        {
          v22 = v31 - 4;
          v32 = v31 - 4;
          v33 = (int64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v33.i64[0] = *(_QWORD *)(v28 + v16);
          v34 = (unint64_t *)(v28 + v16 - 8 * (v31 - 4));
          v35 = *(int64x2_t *)(v27 + v16);
          v36 = (unint64_t *)(v27 + v16 - 8 * (v31 - 4));
          v37 = *(int64x2_t *)(v30 + v16);
          v38 = *(int64x2_t *)(v29 + v16);
          v39 = *(float64x2_t *)(v23 + v16);
          v40 = *(float64x2_t *)(v24 + v16);
          v41 = *(float64x2_t *)(v25 + v16);
          v42 = *(float64x2_t *)(v26 + v16);
          v43 = (float64x2_t)vtrn1q_s64(v33, v35);
          v44 = (float64x2_t)vtrn2q_s64(v33, v35);
          v45 = (float64x2_t)vtrn1q_s64(v37, v38);
          v46 = (float64x2_t)vtrn2q_s64(v37, v38);
          v47 = vmlaq_laneq_f64(vmulq_n_f64(v43, v39.f64[0]), v44, v39, 1);
          v48 = vmlaq_laneq_f64(vmulq_n_f64(v43, v40.f64[0]), v44, v40, 1);
          v49 = vmlaq_laneq_f64(vmulq_n_f64(v43, v41.f64[0]), v44, v41, 1);
          v50 = vmlaq_laneq_f64(vmulq_n_f64(v43, v42.f64[0]), v44, v42, 1);
          v51 = vmlaq_laneq_f64(vmulq_n_f64(v45, v39.f64[0]), v46, v39, 1);
          v52 = vmlaq_laneq_f64(vmulq_n_f64(v45, v40.f64[0]), v46, v40, 1);
          v53 = vmlaq_laneq_f64(vmulq_n_f64(v45, v41.f64[0]), v46, v41, 1);
          v54 = vmlaq_laneq_f64(vmulq_n_f64(v45, v42.f64[0]), v46, v42, 1);
          a8 = (int64x2_t)veorq_s8((int8x16_t)v45, (int8x16_t)v45);
          a8.i64[0] = *(_QWORD *)(v30 + v16 + 16);
          v55 = *(int64x2_t *)(v29 + v16 + 16);
          v56 = (float64x2_t)vtrn1q_s64(a8, v55);
          v57 = (float64x2_t)vtrn2q_s64(a8, v55);
          v58 = (float64_t *)(v30 + v16 - 8 * (v31 - 4));
          v59 = (float64_t *)(v29 + v16 - 8 * (v31 - 4));
          v60 = v23 + v16 - 8 * (v31 - 4);
          v61 = v24 + v16 - 8 * (v31 - 4);
          v62 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v56, *(double *)(v23 + v16 + 16)), v57, *(float64x2_t *)(v23 + v16 + 16), 1);
          v63 = v25 + v16 - 8 * (v31 - 4);
          v64 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v56, *(double *)(v24 + v16 + 16)), v57, *(float64x2_t *)(v24 + v16 + 16), 1);
          v65 = v26 + v16 - 8 * (v31 - 4);
          v66 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v56, *(double *)(v25 + v16 + 16)), v57, *(float64x2_t *)(v25 + v16 + 16), 1);
          v67 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v56, *(double *)(v26 + v16 + 16)), v57, *(float64x2_t *)(v26 + v16 + 16), 1);
          if ((((_DWORD)v31 - 4) & 1) != 0)
          {
            a8.i64[0] = *v34++;
            a8.i64[1] = *v36++;
            v68.f64[0] = *v58++;
            v68.f64[1] = *v59++;
            v69 = *(double *)v60;
            v60 += 8;
            v70 = *(double *)v61;
            v61 += 8;
            v71 = *(double *)v63;
            v63 += 8;
            v72 = *(double *)v65;
            v65 += 8;
            v47 = vmlaq_n_f64(v47, (float64x2_t)a8, v69);
            v48 = vmlaq_n_f64(v48, (float64x2_t)a8, v70);
            v49 = vmlaq_n_f64(v49, (float64x2_t)a8, v71);
            v50 = vmlaq_n_f64(v50, (float64x2_t)a8, v72);
            v62 = vmlaq_n_f64(v62, v68, v69);
            v64 = vmlaq_n_f64(v64, v68, v70);
            v66 = vmlaq_n_f64(v66, v68, v71);
            v67 = vmlaq_n_f64(v67, v68, v72);
            v32 = v31 - 5;
          }
          for (; v32; v32 -= 2)
          {
            v73 = *(int64x2_t *)v34;
            v34 += 2;
            v74 = *(int64x2_t *)v36;
            v36 += 2;
            v75 = *(int64x2_t *)v58;
            v58 += 2;
            v76 = *(int64x2_t *)v59;
            v59 += 2;
            v77 = *(float64x2_t *)v60;
            v60 += 16;
            v78 = *(float64x2_t *)v61;
            v61 += 16;
            v79 = *(float64x2_t *)v63;
            v63 += 16;
            v80 = *(float64x2_t *)v65;
            v65 += 16;
            v81 = (float64x2_t)vtrn1q_s64(v73, v74);
            v82 = (float64x2_t)vtrn2q_s64(v73, v74);
            a8 = vtrn1q_s64(v75, v76);
            v83 = (float64x2_t)vtrn2q_s64(v75, v76);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v81, v77.f64[0]), v82, v77, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v81, v78.f64[0]), v82, v78, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v81, v79.f64[0]), v82, v79, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v81, v80.f64[0]), v82, v80, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, (float64x2_t)a8, v77.f64[0]), v83, v77, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, (float64x2_t)a8, v78.f64[0]), v83, v78, 1);
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, (float64x2_t)a8, v79.f64[0]), v83, v79, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(v67, (float64x2_t)a8, v80.f64[0]), v83, v80, 1);
          }
          *(float64x2_t *)v60 = vmulq_n_f64(v47, a7);
          *(float64x2_t *)(v60 + 16) = vmulq_n_f64(v62, a7);
          *(float64x2_t *)v61 = vmulq_n_f64(v48, a7);
          *(float64x2_t *)(v61 + 16) = vmulq_n_f64(v64, a7);
          *(float64x2_t *)v63 = vmulq_n_f64(v49, a7);
          *(float64x2_t *)(v63 + 16) = vmulq_n_f64(v66, a7);
          *(float64x2_t *)v65 = vmulq_n_f64(v50, a7);
          *(float64x2_t *)(v65 + 16) = vmulq_n_f64(v67, a7);
          v29 += v17;
          v30 += v17;
          v27 += v17;
          v28 += v17;
          v26 -= 32;
          v25 -= 32;
          v24 -= 32;
          v23 -= 32;
          v84 = v31 > 7;
          v31 -= 4;
        }
        while (v84);
      }
      v85 = v22 - 1;
      v86 = (double *)(a5 + 8 * v12 * a6 + 8 * (v22 - 1));
      v9 = a4;
      v10 = v112;
      v87 = (double *)&v112[v85 * a4];
      if (v109 == 3)
        break;
      if (v109 == 2)
      {
        v88 = a7;
        v11 = __N;
        v90 = 2 * a6;
        v89 = 3 * a6;
        v92 = v107;
        v91 = a6 - 1;
        v94 = v105;
        v93 = v106;
LABEL_19:
        *v86 = v88 * (*(v86 - 1) * *v87 + *v86 * v87[1]);
        v86[a6] = v88 * (v86[v91] * *v87 + v86[a6] * v87[1]);
        v86[v90] = v88 * (v86[v92] * *v87 + v86[v90] * v87[1]);
        v86[v89] = v88 * (v86[v93] * *v87 + v86[v89] * v87[1]);
        v87 += v94;
        --v86;
        goto LABEL_20;
      }
      v11 = __N;
      if (v109 == 1)
      {
        v88 = a7;
        v90 = 2 * a6;
        v89 = 3 * a6;
LABEL_20:
        *v86 = v88 * (*v86 * *v87);
        v86[a6] = v88 * (v86[a6] * *v87);
        v86[v90] = a7 * (v86[v90] * *v87);
        *(double *)a8.i64 = a7 * (v86[v89] * *v87);
        v86[v89] = *(double *)a8.i64;
      }
      v12 += 4;
      v19 += v108;
      v20 += v108;
      v21 += v108;
      v18 += v108;
      if (v12 >= v110)
        goto LABEL_22;
    }
    v88 = a7;
    *v86 = a7 * (*(v86 - 1) * v87[1] + *v86 * v87[2] + *(v86 - 2) * *v87);
    v91 = a6 - 1;
    v90 = 2 * a6;
    v86[a6] = a7 * (v86[a6 - 1] * v87[1] + v86[a6] * v87[2] + v86[a6 - 2] * *v87);
    v93 = v106;
    v92 = v107;
    v86[2 * a6] = a7 * (v86[v107] * v87[1] + v86[2 * a6] * v87[2] + v86[v100] * *v87);
    v89 = 3 * a6;
    v86[3 * a6] = a7 * (v86[v106] * v87[1] + v86[3 * a6] * v87[2] + v86[v99] * *v87);
    v94 = v105;
    v87 += v105;
    --v86;
    v11 = __N;
    goto LABEL_19;
  }
LABEL_22:
  v95 = a2 - v12;
  if (a2 > v12)
  {
    v96 = (double *)(a5 + 8 * v12 * a6);
    v97 = 8 * a6;
    do
    {
      cblas_dscal(v11, a7, v96, 1);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasTrans, CblasNonUnit, v11, v10, v9, v96, 1);
      v96 = (double *)((char *)v96 + v97);
      --v95;
    }
    while (v95);
  }
}

uint64_t dgePack_A_Tran_Aligned(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _OWORD *a5)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 *v8;
  _QWORD *v9;
  __int128 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v5 = &a3[a4];
  v6 = (__int128 *)&a3[2 * a4];
  v7 = &v5[2 * a4];
  v8 = &v6[a4];
  v9 = &v7[2 * a4];
  v10 = &v8[a4];
  v11 = &v9[2 * a4];
  v12 = (a4 << 6) - 8 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        *(_QWORD *)&v14 = *a3;
        *(_QWORD *)&v15 = a3[1];
        a3 += 2;
        *((_QWORD *)&v14 + 1) = *v5;
        *((_QWORD *)&v15 + 1) = v5[1];
        v5 += 2;
        v16 = *v6;
        *(_QWORD *)&v17 = *((_QWORD *)v6++ + 1);
        *((_QWORD *)&v17 + 1) = v7[1];
        v7 += 2;
        v18 = *v8;
        *(_QWORD *)&v19 = *((_QWORD *)v8++ + 1);
        *((_QWORD *)&v19 + 1) = v9[1];
        v9 += 2;
        v20 = *v10;
        *(_QWORD *)&v21 = *((_QWORD *)v10++ + 1);
        *((_QWORD *)&v21 + 1) = v11[1];
        v11 += 2;
        *a5 = v14;
        a5[1] = v16;
        v22 = a5 + 2;
        *v22 = v18;
        v22[1] = v20;
        v22 += 2;
        *v22 = v15;
        v22[1] = v17;
        v22 += 2;
        *v22 = v19;
        v22[1] = v21;
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      *(_QWORD *)&v24 = *a3++;
      *((_QWORD *)&v24 + 1) = *v5++;
      v25 = *v6;
      v6 = (__int128 *)((char *)v6 + 8);
      ++v7;
      v26 = *v8;
      v8 = (__int128 *)((char *)v8 + 8);
      ++v9;
      v27 = *v10;
      v10 = (__int128 *)((char *)v10 + 8);
      ++v11;
      *a5 = v24;
      a5[1] = v25;
      a5[2] = v26;
      a5[3] = v27;
      a5 += 4;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (_QWORD *)((char *)a3 + v12);
    v5 = (_QWORD *)((char *)v5 + v12);
    v6 = (__int128 *)((char *)v6 + v12);
    v7 = (_QWORD *)((char *)v7 + v12);
    v8 = (__int128 *)((char *)v8 + v12);
    v9 = (_QWORD *)((char *)v9 + v12);
    v10 = (__int128 *)((char *)v10 + v12);
    v11 = (_QWORD *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

uint64_t Accelerate_AR_dgels(uint64_t a1, __CLPK_integer *a2, __CLPK_integer *a3, __CLPK_integer *a4, __CLPK_doublereal *a5, __CLPK_integer *a6, __CLPK_doublereal *a7, __CLPK_integer *a8, __CLPK_doublereal *a9, int *a10, int *a11)
{
  __CLPK_integer v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  __CLPK_integer v20;
  int v21;
  int v23;
  __CLPK_integer *v25;
  int v26;
  int v27;
  char *v28;
  char *v29;
  __CLPK_integer *v30;
  __CLPK_integer *v31;
  __CLPK_integer *v32;
  __CLPK_integer v33;
  __CLPK_integer v34;
  __CLPK_integer v35;
  int v36;
  __CLPK_integer v37;
  __CLPK_integer v38;
  __CLPK_integer v39;
  __CLPK_integer *__lda;
  double v41;
  __CLPK_doublereal *v42;
  double v43;
  _BOOL4 v44;
  double v45;
  _BOOL4 v46;
  __CLPK_doublereal *p_large;
  int v48;
  __CLPK_integer v49;
  double *v50;
  __CLPK_integer v51;
  __CLPK_integer v52;
  __CLPK_doublereal *v53;
  __CLPK_integer v54;
  uint64_t v55;
  __CLPK_integer v56;
  __CLPK_integer v57;
  int v58;
  int v59;
  __CLPK_integer v60;
  uint64_t v61;
  __CLPK_integer v62;
  __CLPK_integer v63;
  int v64;
  __CLPK_integer *v65;
  __CLPK_doublereal *p_small;
  _BOOL4 v67;
  size_t v68;
  size_t v69;
  uint64_t v70;
  __CLPK_doublereal *v71;
  __CLPK_doublereal *v72;
  __CLPK_integer v73;
  __CLPK_integer v74;
  int v75;
  _BOOL4 v76;
  int *v77;
  int v78;
  __CLPK_integer __cto;
  __CLPK_doublereal *__ctoa;
  _BOOL4 __ctob;
  _BOOL4 v82;
  __CLPK_integer v83;
  __CLPK_integer v84;
  __CLPK_integer v87;
  __CLPK_doublereal __small;
  __CLPK_doublereal __large;
  __CLPK_integer __m[2];
  __CLPK_doublereal v91;
  __CLPK_doublereal __cfrom;
  __CLPK_integer __lwork;
  __CLPK_doublereal __work[3];

  __work[1] = *(__CLPK_doublereal *)MEMORY[0x24BDAC8D0];
  __lwork = 0;
  v91 = 0.0;
  __cfrom = 0.0;
  *(_QWORD *)__m = 0;
  __small = 0.0;
  __large = 0.0;
  v87 = *a8;
  *a11 = 0;
  if (*a2 >= *a3)
    v16 = *a3;
  else
    v16 = *a2;
  v17 = *a10;
  if (!lsame_() && !lsame_())
  {
    v21 = -1;
    goto LABEL_21;
  }
  v18 = *a2;
  if (*a2 < 0)
  {
    v21 = -2;
    goto LABEL_21;
  }
  v19 = *a3;
  if (*a3 < 0)
  {
    v21 = -3;
    goto LABEL_21;
  }
  v20 = *a4;
  if (*a4 < 0)
  {
    v21 = -4;
    goto LABEL_21;
  }
  if (v18 <= 1)
    v18 = 1;
  if (*a6 < (int)v18)
  {
    v21 = -6;
LABEL_21:
    *a11 = v21;
LABEL_22:
    __lwork = -v21;
    xerbla_();
    return 0;
  }
  if (v18 > v19)
    v19 = v18;
  if (*a8 < (int)v19)
  {
    v21 = -8;
    goto LABEL_21;
  }
  if (v16 > v20)
    v20 = v16;
  v23 = v20 + v16;
  if (v23 <= 1)
    v23 = 1;
  if (*a10 >= v23 || v17 == -1)
  {
    v21 = *a11;
    if (*a11 && v21 != -10)
    {
      v25 = a6;
      v82 = 0;
      v26 = 0;
      goto LABEL_53;
    }
  }
  else
  {
    *a11 = -10;
  }
  v27 = lsame_();
  v82 = v27 == 0;
  if (*a2 >= *a3)
  {
    __cto = ilaenv_(&c__1_1, "DGEQRF", " ", a2, a3, c_n1_0, c_n1_0);
    v28 = "DORMQR";
    if (v27)
      v29 = "LT";
    else
      v29 = "LN";
    v30 = a2;
    v31 = a4;
    v32 = a3;
  }
  else
  {
    __cto = ilaenv_(&c__1_1, "DGELQF", " ", a2, a3, c_n1_0, c_n1_0);
    v28 = "DORMLQ";
    if (v27)
      v29 = "LN";
    else
      v29 = "LT";
    v30 = a3;
    v31 = a4;
    v32 = a2;
  }
  v33 = ilaenv_(&c__1_1, v28, v29, v30, v31, v32, c_n1_0);
  v34 = __cto;
  if (__cto <= v33)
    v34 = v33;
  v35 = *a4;
  if (v16 > *a4)
    v35 = v16;
  v36 = v16 + v35 * v34;
  if (v36 <= 1)
    v26 = 1;
  else
    v26 = v36;
  *a9 = (double)v26;
  v21 = *a11;
  v25 = a6;
LABEL_53:
  if (v21)
    goto LABEL_22;
  if (v17 == -1)
    return 0;
  v37 = *a2;
  v38 = *a3;
  if (*a2 >= *a3)
    v39 = *a3;
  else
    v39 = *a2;
  __lwork = v39;
  if (v39 >= *a4)
    v39 = *a4;
  if (v39)
  {
    v78 = v26;
    __lda = v25;
    v41 = dlamch_("S");
    __small = v41 / dlamch_("P");
    __large = 1.0 / __small;
    __ctoa = &__small;
    dlabad_(&__small, &__large);
    v42 = a5;
    v43 = dlange_("M", a2, a3, a5, __lda, __work);
    __cfrom = v43;
    v44 = v43 > 0.0;
    if (v43 >= __small)
      v44 = 0;
    if (!v44)
    {
      if (v43 <= __large)
      {
        v48 = v78;
        if (v43 == 0.0)
        {
          v49 = *a2;
          if (*a2 <= *a3)
            v49 = *a3;
          __lwork = v49;
          dlaset_("F", &__lwork, a4, &c_b33, &c_b33, a7, a8);
          v50 = a9;
          goto LABEL_116;
        }
        v75 = 0;
        v76 = v44;
LABEL_67:
        __m[1] = *a2;
        if (v82)
          __m[1] = *a3;
        v45 = dlange_("M", &__m[1], a4, a7, a8, __work);
        v91 = v45;
        v46 = v45 <= 0.0;
        if (v45 >= __small)
          v46 = 1;
        __ctob = v46;
        if (v46)
        {
          if (v45 <= __large)
          {
            v67 = 0;
LABEL_84:
            v70 = ~v87;
            v51 = *a2;
            v52 = *a3;
            __lwork = *a10 - v16;
            v53 = &a9[v16];
            v77 = a6;
            if (v51 >= v52)
            {
              Accelerate_AR_dgeqrf(a2, a3, (uint64_t)a5, a6, a9, v53, &__lwork, a11);
              if (!v82)
              {
                __lwork = *a10 - v16;
                v50 = a9;
                Accelerate_AR_dormqr((uint64_t)"Left", (uint64_t)"Transpose", (int)a2, (int)a4, (int)a3, (int)a5, (int)v77, (int)a9, a7, a8, v53, &__lwork, a11);
                Accelerate_AR_dtrtrs("Upper", "No transpose", "Non-unit", (unsigned int *)a3, (unsigned int *)a4, a5, v77, (char *)a7, a8, a11);
                v48 = v78;
                if (*a11 > 0)
                  return 0;
                v54 = *a3;
LABEL_106:
                __m[0] = v54;
                goto LABEL_107;
              }
              Accelerate_AR_dtrtrs("Upper", "Transpose", "Non-unit", (unsigned int *)a3, (unsigned int *)a4, a5, a6, (char *)a7, a8, a11);
              if (*a11 > 0)
                return 0;
              v55 = *a4;
              if ((int)v55 >= 1)
              {
                v56 = *a2;
                v57 = *a3;
                v71 = &a7[v70];
                v68 = 8 * (*a2 + ~*a3) + 8;
                v58 = v87 + *a3 + 1;
                v83 = *a2;
                v73 = *a3;
                do
                {
                  if (v57 < v56)
                  {
                    bzero(&v71[v58], v68);
                    v57 = v73;
                    v56 = v83;
                  }
                  v58 += v87;
                  --v55;
                }
                while (v55);
              }
              __lwork = *a10 - v16;
              v59 = (int)a6;
              v50 = a9;
              Accelerate_AR_dormqr((uint64_t)"Left", (uint64_t)"No transpose", (int)a2, (int)a4, (int)a3, (int)a5, v59, (int)a9, a7, a8, &a9[v16], &__lwork, a11);
              v60 = *a2;
            }
            else
            {
              dgelqf_(a2, a3, a5, a6, a9, v53, &__lwork, a11);
              if (v82)
              {
                __lwork = *a10 - v16;
                v50 = a9;
                dormlq_("Left", "No transpose", a3, a4, a2, a5, v77, a9, a7, a8, v53, &__lwork, a11);
                Accelerate_AR_dtrtrs("Lower", "Transpose", "Non-unit", (unsigned int *)a2, (unsigned int *)a4, a5, v77, (char *)a7, a8, a11);
                v48 = v78;
                if (*a11 > 0)
                  return 0;
                v54 = *a2;
                goto LABEL_106;
              }
              Accelerate_AR_dtrtrs("Lower", "No transpose", "Non-unit", (unsigned int *)a2, (unsigned int *)a4, a5, a6, (char *)a7, a8, a11);
              if (*a11 > 0)
                return 0;
              v61 = *a4;
              if ((int)v61 >= 1)
              {
                v62 = *a3;
                v63 = *a2;
                v72 = &a7[v70];
                v69 = 8 * (*a3 + ~*a2) + 8;
                v64 = v87 + *a2 + 1;
                v84 = *a3;
                v74 = *a2;
                do
                {
                  if (v63 < v62)
                  {
                    bzero(&v72[v64], v69);
                    v63 = v74;
                    v62 = v84;
                  }
                  v64 += v87;
                  --v61;
                }
                while (v61);
              }
              __lwork = *a10 - v16;
              v65 = a6;
              v50 = a9;
              dormlq_("Left", "Transpose", a3, a4, a2, a5, v65, a9, a7, a8, &a9[v16], &__lwork, a11);
              v60 = *a3;
            }
            __m[0] = v60;
            v48 = v78;
LABEL_107:
            if ((v76 | v75) == 1)
            {
              if (v76)
                p_small = &__small;
              else
                p_small = &__large;
              dlascl_("G", c__0, c__0, &__cfrom, p_small, __m, a4, a7, a8, a11);
            }
            if (__ctob)
            {
              if (v67)
                dlascl_("G", c__0, c__0, &__large, &v91, __m, a4, a7, a8, a11);
            }
            else
            {
              dlascl_("G", c__0, c__0, &__small, &v91, __m, a4, a7, a8, a11);
            }
LABEL_116:
            *v50 = (double)v48;
            return 0;
          }
          p_large = &__large;
        }
        else
        {
          p_large = &__small;
        }
        dlascl_("G", c__0, c__0, &v91, p_large, &__m[1], a4, a7, a8, a11);
        v67 = __ctob;
        goto LABEL_84;
      }
      __ctoa = &__large;
      __lda = a6;
      v42 = a5;
    }
    v76 = v44;
    v75 = !v44;
    dlascl_("G", c__0, c__0, &__cfrom, __ctoa, a2, a3, v42, __lda, a11);
    goto LABEL_67;
  }
  if (v37 <= v38)
    v37 = v38;
  __lwork = v37;
  dlaset_("Full", &__lwork, a4, &c_b33, &c_b33, a7, a8);
  return 0;
}

void dsyr2k_Pack_Lower(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,int __N,uint64_t a29,uint64_t a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,char a47)
{
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double *(*v77)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v78)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float64x2_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const double *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t vars8;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  double *(*v139)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  double *(*v143)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t __Na;
  uint64_t v149;
  uint64_t v150;

  v51 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v135 = v52;
  v126 = v53;
  v122 = v54;
  v56 = v55;
  v58 = v57;
  v59 = *(double *)&v51;
  v60 = v48;
  STACK[0x10298] = *MEMORY[0x24BDAC8D0];
  if (v47 == 111)
    v61 = v49;
  else
    v61 = 1;
  v121 = v61;
  v127 = v50;
  if (v47 == 111)
    v62 = v50;
  else
    v62 = 1;
  v125 = v62;
  if (v47 == 111)
    v63 = 1;
  else
    v63 = v49;
  vars8 = v63;
  v133 = v49;
  v64 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dgePack_B_NoTran;
  if (v47 == 111)
    v64 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dgePack_B_Tran;
  v124 = v64;
  v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))dgePack_A_Tran;
  if (v47 == 111)
    v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))dgePack_A_NoTran;
  vars0 = v65;
  if (v48 >= 225)
  {
    v147 = (char *)malloc_type_malloc((v48 << 8) + 8288, 0x100004000313F17uLL);
    v66 = (unint64_t *)(v147 + 8256);
  }
  else
  {
    v147 = &a47;
    v66 = &STACK[0x2260];
  }
  v141 = (uint64_t)v66;
  if (v56 >= 1)
  {
    v67 = 0;
    v129 = 8 * v133;
    v130 = v60;
    v68 = 8 * v133 + 8;
    v123 = v56;
    while (1)
    {
      v128 = v67 + 32;
      v69 = v67 + 32 <= v56 ? 32 : v56 - v67;
      v124(v69, v60, v126 + 8 * v67 * v125, v127, v141, v59);
      if (v60 >= 1)
        break;
LABEL_94:
      v67 = v128;
      v56 = v123;
      if (v128 >= v123)
        goto LABEL_95;
    }
    v70 = v69;
    v71 = 0;
    v134 = v122 + 8 * v67 * v121;
    v72 = v58 != 0.0;
    if (v58 == 1.0 || v67 != 0)
      v72 = 0;
    v140 = v72;
    v74 = v135;
    v139 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
    v143 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
    __Na = v69;
    while (1)
    {
      v149 = v71;
      v75 = v71 + 32;
      if (v71 + 32 <= v60)
        v76 = 32;
      else
        v76 = v60 - v71;
      v142 = v135 + 8 * v71;
      v77 = v143;
      if ((v76 & 7) != 0)
        v77 = dgebpUnalignedC_8M4N;
      v143 = v77;
      v78 = v139;
      if ((v76 & 7) != 0)
        v78 = dgebpScaleUnalignedC_8M4N;
      v139 = v78;
      vars0(v76, v70, v134 + 8 * v71 * vars8, v133, v147);
      v79 = v149;
      v80 = v76;
      v136 = v76 + v149;
      v137 = v75;
      v81 = ((v76 + v149) << 32) - 0x300000000;
      v146 = v76;
      v138 = v74;
      if (v81 >= 1)
      {
        v82 = 0;
        v83 = 0;
        v150 = v81 >> 32;
        v84 = v74;
        v85 = 32 * v133;
        v86 = v133;
        v70 = __Na;
        while (2)
        {
          v87 = v83 - v79;
          v88 = v83 & 4;
          if ((v83 & 4) != 0)
            v89 = v83 - v79 - 4;
          else
            v89 = v83 - v79;
          v90 = v89 & ~(v87 >> 63);
          if (v90 > v80)
            goto LABEL_64;
          v91 = v142 + 8 * v83 * v86;
          v92 = (float64x2_t *)(v141 + 8 * v83 * v70);
          if (v87 < 0)
          {
            v94 = 0;
            if (v140)
              goto LABEL_55;
          }
          else
          {
            v144 = 32 * (v82 & 1);
            a45 = 0u;
            a46 = 0u;
            v93 = (char *)&a31 + v144;
            a43 = 0u;
            a44 = 0u;
            a41 = 0u;
            a42 = 0u;
            a39 = 0u;
            a40 = 0u;
            a37 = 0u;
            a38 = 0u;
            a35 = 0u;
            a36 = 0u;
            a33 = 0u;
            a34 = 0u;
            if (v80 - v89 >= 8)
              v94 = 8;
            else
              v94 = v80 - v89;
            a31 = 0uLL;
            a32 = 0uLL;
            v145 = v141 + 8 * v83 * v70;
            v95 = v91;
            ((void (*)(char *))v143)(&v147[8 * v89 * v70]);
            v91 = v95 + 8 * v89;
            if (v140)
            {
              v96 = 0;
              v92 = (float64x2_t *)v145;
              v97 = v84 + v144 + 8 * v89;
              v85 = 32 * v133;
              v70 = __Na;
              v80 = v146;
              do
              {
                if (v88 < v94)
                {
                  v98 = 0;
                  do
                  {
                    *(double *)(v97 + 8 * v98) = *(double *)&v93[8 * v98] + *(double *)(v97 + 8 * v98) * v58;
                    ++v98;
                  }
                  while (v88 + v98 < v94);
                }
                ++v88;
                ++v96;
                v93 += 72;
                v97 += v68;
              }
              while (v96 != 4);
              v86 = v133;
              v79 = v149;
              if (v94 + v90 >= v146)
                goto LABEL_64;
LABEL_55:
              v139((float64x2_t *)&v147[8 * (v94 + v90) * v70], v92, (float64x2_t *)(v91 + 8 * v94), v86, v80 - (v94 + v90), v70, v58);
LABEL_63:
              v70 = __Na;
              v79 = v149;
              v80 = v146;
LABEL_64:
              v83 += 4;
              ++v82;
              v84 += v85;
              if (v83 >= v150)
                goto LABEL_67;
              continue;
            }
            v99 = 0;
            v92 = (float64x2_t *)v145;
            v100 = v84 + v144 + 8 * v89;
            v85 = 32 * v133;
            v70 = __Na;
            v80 = v146;
            do
            {
              if (v88 < v94)
              {
                v101 = 0;
                do
                {
                  *(double *)(v100 + 8 * v101) = *(double *)(v100 + 8 * v101) + *(double *)&v93[8 * v101];
                  ++v101;
                }
                while (v88 + v101 < v94);
              }
              ++v88;
              ++v99;
              v93 += 72;
              v100 += v68;
            }
            while (v99 != 4);
            v86 = v133;
            v79 = v149;
            if (v94 + v90 >= v146)
              goto LABEL_64;
          }
          break;
        }
        v143((float64x2_t *)&v147[8 * (v94 + v90) * v70], v92, (float64x2_t *)(v91 + 8 * v94), v86, v80 - (v94 + v90), v70);
        goto LABEL_63;
      }
      v83 = 0;
      v86 = v133;
      v70 = __Na;
LABEL_67:
      v102 = v136 <= 0 ? -(-v136 & 3) : v136 & 3;
      if (v102)
      {
        v103 = v83 - v79;
        v104 = (v83 - v79) & ~((v83 - v79) >> 63);
        if (v80 > v104)
          break;
      }
LABEL_93:
      v74 = v138 + 256;
      v71 = v137;
      v60 = v130;
      if (v137 >= v130)
        goto LABEL_94;
    }
    v105 = v142 + 8 * v83 * v86;
    v106 = (const double *)(v141 + 8 * v83 * v70);
    if (v103 < 0)
    {
      v108 = 0;
      v115 = 0;
      v116 = 0;
      v110 = v102;
      if (v140)
      {
LABEL_84:
        dgebpScale_8M1N((float64x2_t *)&v147[8 * v115 * v70 + 8 * v108], v106, v105, v86, v80 - v115, v110, __Na, v58);
LABEL_92:
        v70 = __Na;
        goto LABEL_93;
      }
    }
    else
    {
      a41 = 0u;
      a42 = 0u;
      a39 = 0u;
      a40 = 0u;
      a37 = 0u;
      a38 = 0u;
      a35 = 0u;
      a36 = 0u;
      a33 = 0u;
      a34 = 0u;
      a31 = 0u;
      a32 = 0u;
      if (v80 - v104 >= 8)
        v107 = 8;
      else
        v107 = v80 - v104;
      v108 = v104 & (4 * v70) & 4;
      v109 = v105 + 8 * v104;
      v110 = v102;
      dgebp_8M1N((float64x2_t *)&v147[8 * v103 * v70 + 8 * v108], (const double *)(v141 + 8 * v83 * v70), (uint64_t)&a31, 8, v107, v102, v70);
      if (v140)
      {
        v70 = __Na;
        if (v102 >= 1)
        {
          v111 = 0;
          v112 = v138 + v129 * v83 + 8 * v104;
          v113 = &a31;
          do
          {
            v114 = 0;
            do
            {
              *(double *)(v112 + 8 * v114) = *((double *)v113 + v114) + *(double *)(v112 + 8 * v114) * v58;
              ++v114;
            }
            while (v111 + v114 < v102);
            ++v111;
            v113 = (__int128 *)((char *)v113 + 72);
            v112 += v68;
          }
          while (v111 != v102);
        }
        v105 = v109 + 8 * v107;
        v115 = v107 + v104;
        v86 = v133;
        v80 = v146;
        goto LABEL_84;
      }
      v70 = __Na;
      if (v102 >= 1)
      {
        v117 = 0;
        v118 = v138 + v129 * v83 + 8 * v104;
        v119 = &a31;
        do
        {
          v120 = 0;
          do
          {
            *(double *)(v118 + 8 * v120) = *(double *)(v118 + 8 * v120) + *((double *)v119 + v120);
            ++v120;
          }
          while (v117 + v120 < v102);
          ++v117;
          v119 = (__int128 *)((char *)v119 + 72);
          v118 += v68;
        }
        while (v117 != v102);
      }
      v105 = v109 + 8 * v107;
      v116 = v107 + v104;
      v86 = v133;
      v80 = v146;
    }
    dgebp_8M1N((float64x2_t *)&v147[8 * v116 * v70 + 8 * v108], v106, v105, v86, v80 - v116, v110, __Na);
    goto LABEL_92;
  }
LABEL_95:
  if (v60 >= 225)
    free(v147);
}

uint64_t Accelerate_AR_dpotf2(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double da;
  int v32;
  int n;

  v32 = 0;
  da = 0.0;
  v9 = *a4;
  *a5 = 0;
  v10 = lsame_();
  if (!v10 && !lsame_())
  {
    v13 = -1;
    goto LABEL_21;
  }
  v11 = *a2;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = -2;
    goto LABEL_21;
  }
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = *a2;
  if (*a4 < v12)
  {
    v13 = -4;
LABEL_21:
    *a5 = v13;
    goto LABEL_22;
  }
  v13 = *a5;
  if (*a5)
  {
LABEL_22:
    n = -v13;
    xerbla_();
    return 0;
  }
  if ((_DWORD)v11)
  {
    v14 = a3 + 8 * ~(_DWORD)v9;
    if (v10)
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v16 = v15 + (int)v9 * (int)v15;
        v17 = *(double *)(v14 + 8 * v16);
        v18 = (double *)(v14 + 8 * v15 * v9 + 8);
        v19 = v17 - ddot_(&n, v18, (int *)&c__1_2, v18, (int *)&c__1_2);
        if (v19 <= 0.0)
          break;
        v20 = sqrt(v19);
        *(double *)(v14 + 8 * v16) = v20;
        v21 = *a2;
        if (v15 >= v21)
        {
          v22 = v15 + 1;
        }
        else
        {
          v32 = v21 - v15;
          n = v15 - 1;
          v22 = v15 + 1;
          Accelerate_AR_dgemv("Transpose", &n, &v32, &c_b10, v14 + 8 * (v15 + 1) * v9 + 8, a4, v18, &c__1_2, &c_b12, v14 + 8 * (v15 + (int)v9 + (int)v9 * (int)v15), a4);
          n = *a2 - v15;
          da = 1.0 / v20;
          dscal_(&n, &da, (double *)(v14 + 8 * (v15 + (int)v9 + (int)v9 * (int)v15)), a4);
        }
        v23 = v15 < v11;
        v15 = v22;
        if (!v23)
          return 0;
      }
      *(double *)(v14 + 8 * v16) = v19;
    }
    else
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v25 = v15 + (int)v9 * (int)v15;
        v26 = *(double *)(v14 + 8 * v25);
        v27 = v26 - ddot_(&n, (double *)(v14 + 8 * (v15 + v9)), a4, (double *)(v14 + 8 * (v15 + v9)), a4);
        if (v27 <= 0.0)
          break;
        v28 = sqrt(v27);
        *(double *)(v14 + 8 * v25) = v28;
        v29 = *a2;
        if (v15 >= v29)
        {
          v30 = v15 + 1;
        }
        else
        {
          v32 = v15 - 1;
          n = v29 - v15;
          v30 = v15 + 1;
          Accelerate_AR_dgemv("No transpose", &n, &v32, &c_b10, v14 + 8 * (v15 + 1 + v9), a4, v14 + 8 * (v15 + v9), a4, &c_b12, v14 + 8 * (v15 + 1 + v15 * v9), &c__1_2);
          n = *a2 - v15;
          da = 1.0 / v28;
          dscal_(&n, &da, (double *)(v14 + 8 * (v15 + 1 + v15 * v9)), (int *)&c__1_2);
        }
        v23 = v15 < v11;
        v15 = v30;
        if (!v23)
          return 0;
      }
      *(double *)(v14 + 8 * v25) = v27;
    }
    *a5 = v15;
  }
  return 0;
}

_OWORD *dgebpScaleAlignedC_8M4N(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  _OWORD *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;

  v8 = _X2;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    v25 = _X2[2];
    v26 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v29 = *_X2;
    v30 = _X2[1];
    v31 = _X2[2];
    v32 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    v37 = _X2[2];
    v38 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v41 = *a2;
    v42 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v46 = vmulq_n_f64(v23, a7);
    v47 = vmulq_n_f64(v24, a7);
    v48 = vmulq_n_f64(v25, a7);
    v49 = vmulq_n_f64(v26, a7);
    v50 = vmulq_n_f64(v29, a7);
    v51 = vmulq_n_f64(v30, a7);
    v52 = vmulq_n_f64(v31, a7);
    v53 = vmulq_n_f64(v32, a7);
    v54 = vmulq_n_f64(v35, a7);
    v55 = vmulq_n_f64(v36, a7);
    v56 = vmulq_n_f64(v37, a7);
    v57 = vmulq_n_f64(v38, a7);
    v58 = vmulq_n_f64(*_X2, a7);
    v59 = vmulq_n_f64(_X2[1], a7);
    v60 = vmulq_n_f64(_X2[2], a7);
    v61 = vmulq_n_f64(_X2[3], a7);
    do
    {
      v62 = v11;
      v63 = v12;
      v46 = vmlaq_n_f64(v46, v11, v41.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v11, v41, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v64 = result + 2;
      v54 = vmlaq_n_f64(v54, v62, v42.f64[0]);
      v58 = vmlaq_laneq_f64(v58, v62, v42, 1);
      v65 = *_X6;
      v66 = _X6[1];
      _X6 += 2;
      v67 = v14;
      v47 = vmlaq_n_f64(v47, v63, v41.f64[0]);
      v51 = vmlaq_laneq_f64(v51, v63, v41, 1);
      v68 = v15;
      v55 = vmlaq_n_f64(v55, v63, v42.f64[0]);
      v59 = vmlaq_laneq_f64(v59, v63, v42, 1);
      v14 = *(float64x2_t *)v64;
      v15 = *((float64x2_t *)v64 + 1);
      result = v64 + 2;
      v48 = vmlaq_n_f64(v48, v67, v41.f64[0]);
      v52 = vmlaq_laneq_f64(v52, v67, v41, 1);
      v56 = vmlaq_n_f64(v56, v67, v42.f64[0]);
      v60 = vmlaq_laneq_f64(v60, v67, v42, 1);
      v49 = vmlaq_n_f64(v49, v68, v41.f64[0]);
      v53 = vmlaq_laneq_f64(v53, v68, v41, 1);
      v41 = v65;
      v57 = vmlaq_n_f64(v57, v68, v42.f64[0]);
      v61 = vmlaq_laneq_f64(v61, v68, v42, 1);
      v42 = v66;
      --v16;
    }
    while (v16);
    v69 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v46;
    v8[1] = v47;
    v8[2] = v48;
    v8[3] = v49;
    v8 += 4;
    *v69 = v50;
    v69[1] = v51;
    v69[2] = v52;
    v69[3] = v53;
    v70 = (float64x2_t *)((char *)v69 + v9);
    *v70 = v54;
    v70[1] = v55;
    v70[2] = v56;
    v70[3] = v57;
    v71 = (float64x2_t *)((char *)v70 + v9);
    *v71 = v58;
    v71[1] = v59;
    v71[2] = v60;
    v71[3] = v61;
    _X2 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

_OWORD *dgebpAlignedC_8M4N(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  float64x2_t *v58;

  v7 = _X2;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v22 = *_X2;
    v23 = _X2[1];
    v24 = _X2[2];
    v25 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    v30 = _X2[2];
    v31 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    v36 = _X2[2];
    v37 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v39 = *_X2;
    v40 = _X2[1];
    v41 = _X2[2];
    v42 = _X2[3];
    v44 = *a2;
    v45 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    do
    {
      v49 = v10;
      v50 = v11;
      v22 = vmlaq_n_f64(v22, v10, v44.f64[0]);
      v28 = vmlaq_laneq_f64(v28, v10, v44, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v34 = vmlaq_n_f64(v34, v49, v45.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v49, v45, 1);
      v52 = *_X6;
      v53 = _X6[1];
      _X6 += 2;
      v54 = v13;
      v23 = vmlaq_n_f64(v23, v50, v44.f64[0]);
      v29 = vmlaq_laneq_f64(v29, v50, v44, 1);
      v55 = v14;
      v35 = vmlaq_n_f64(v35, v50, v45.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v50, v45, 1);
      v13 = *(float64x2_t *)v51;
      v14 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v24 = vmlaq_n_f64(v24, v54, v44.f64[0]);
      v30 = vmlaq_laneq_f64(v30, v54, v44, 1);
      v36 = vmlaq_n_f64(v36, v54, v45.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v54, v45, 1);
      v25 = vmlaq_n_f64(v25, v55, v44.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v55, v44, 1);
      v44 = v52;
      v37 = vmlaq_n_f64(v37, v55, v45.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v55, v45, 1);
      v45 = v53;
      --v15;
    }
    while (v15);
    v56 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v22;
    v7[1] = v23;
    v7[2] = v24;
    v7[3] = v25;
    v7 += 4;
    *v56 = v28;
    v56[1] = v29;
    v56[2] = v30;
    v56[3] = v31;
    v57 = (float64x2_t *)((char *)v56 + v8);
    *v57 = v34;
    v57[1] = v35;
    v57[2] = v36;
    v57[3] = v37;
    v58 = (float64x2_t *)((char *)v57 + v8);
    *v58 = v39;
    v58[1] = v40;
    v58[2] = v41;
    v58[3] = v42;
    _X2 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t strmm_noPack_LUNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x2_t *v35;
  float32x4_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  BOOL v65;
  uint64_t v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  __int32 *v74;
  float32x2_t *v75;
  float32x2_t v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  __int32 *v87;
  float32x2_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t *v103;
  float v104;
  float32x4_t *v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x2_t *v111;
  float32x4_t v112;
  float32x2_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  uint64_t v129;
  float32x2_t *v130;
  float32x2_t *v131;
  __int32 *v132;
  __int32 *v133;
  float32x2_t v134;
  __int32 *v135;
  float32x2_t *v136;
  float32x2_t v137;
  float32x2_t *v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  __int32 *v142;
  float32x2_t v143;
  float32_t v144;
  float32_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  float32x4_t *v149;
  float *v150;
  uint64_t v151;
  float32x2_t *v152;
  float v153;
  float32x4_t *v154;
  float32x2_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  float32x2_t *v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float v165;
  float32x4_t v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  uint64_t v171;
  float32x2_t *v172;
  __int32 *v173;
  __int32 *v174;
  float32x2_t v175;
  __int32 *v176;
  float32x2_t *v177;
  float32x2_t v178;
  float32x2_t v179;
  __int32 *v180;
  float32x2_t v181;

  v11 = 4 * a6;
  v12 = 4 * a4;
  v13 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v14 = a2 - 3;
  do
  {
    v15 = 0;
    v16 = __OFSUB__(result, 3);
    v17 = result - 3;
    if (result > 3)
    {
      do
      {
        v18 = (float32x4_t *)(a5 + v13 * v11 + 4 * v15);
        v19 = (float32x4_t *)((char *)v18 + v11);
        v20 = (float32x4_t *)((char *)v18 + 2 * v11);
        v21 = (float32x4_t *)((char *)v18 + 2 * v11 + v11);
        v22 = (float *)(a3 + v15 * v12 + 4 * v15);
        v23 = 4 * (result - v15);
        v24 = result - v15 - 4;
        v26 = *v22;
        v25 = (float32x2_t *)&v22[(unint64_t)v12 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v12);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v12);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v12);
        v34 = *v18;
        v33 = (float32x2_t *)&v18[1];
        v36 = *v19;
        v35 = (float32x2_t *)&v19[1];
        v38 = *v20;
        v37 = (float32x2_t *)&v20[1];
        v40 = *v21;
        v39 = (float32x2_t *)&v21[1];
        v30.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vmul_lane_f32(v28, *(float32x2_t *)v34.f32, 1);
        *(float32x2_t *)v8.f32 = vmul_lane_f32(v28, *(float32x2_t *)v36.f32, 1);
        *(float32x2_t *)v9.f32 = vmul_lane_f32(v28, *(float32x2_t *)v38.f32, 1);
        *(float32x2_t *)v10.f32 = vmul_lane_f32(v28, *(float32x2_t *)v40.f32, 1);
        v41 = vmulq_laneq_f32(v30, v34, 2);
        v42 = vmulq_laneq_f32(v30, v36, 2);
        v43 = vmulq_laneq_f32(v30, v38, 2);
        v44 = vmulq_laneq_f32(v30, v40, 2);
        v41.f32[0] = (float)(v26 * v34.f32[0]) + v41.f32[0];
        v42.f32[0] = (float)(v26 * v36.f32[0]) + v42.f32[0];
        v43.f32[0] = (float)(v26 * v38.f32[0]) + v43.f32[0];
        v44.f32[0] = (float)(v26 * v40.f32[0]) + v44.f32[0];
        v45 = vaddq_f32(vmlaq_laneq_f32(v7, v32, v34, 3), v41);
        v46 = vaddq_f32(vmlaq_laneq_f32(v8, v32, v36, 3), v42);
        v47 = vaddq_f32(vmlaq_laneq_f32(v9, v32, v38, 3), v43);
        v48 = vaddq_f32(vmlaq_laneq_f32(v10, v32, v40, 3), v44);
        if ((v24 & 1) != 0)
        {
          v49 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v12);
          v50 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v51 = v35->f32[0];
          v35 = (float32x2_t *)((char *)v35 + 4);
          v52 = v37->f32[0];
          v37 = (float32x2_t *)((char *)v37 + 4);
          v53 = v39->f32[0];
          v39 = (float32x2_t *)((char *)v39 + 4);
          v45 = vmlaq_n_f32(v45, v49, v50);
          v46 = vmlaq_n_f32(v46, v49, v51);
          v47 = vmlaq_n_f32(v47, v49, v52);
          v48 = vmlaq_n_f32(v48, v49, v53);
          v24 = result - v15 - 5;
        }
        if (v24)
        {
          v54 = 0uLL;
          v55 = 0uLL;
          v56 = 0uLL;
          v57 = 0uLL;
          do
          {
            v59 = *v31;
            v58 = (float32x4_t *)((char *)v31 + v12);
            v60 = *v58;
            v31 = (float32x4_t *)((char *)v58 + v12);
            v61 = *v33++;
            v62 = *v35++;
            v63 = *v37++;
            v64 = *v39++;
            v45 = vmlaq_n_f32(v45, v59, v61.f32[0]);
            v46 = vmlaq_n_f32(v46, v59, v62.f32[0]);
            v47 = vmlaq_n_f32(v47, v59, v63.f32[0]);
            v48 = vmlaq_n_f32(v48, v59, v64.f32[0]);
            v54 = vmlaq_lane_f32(v54, v60, v61, 1);
            v55 = vmlaq_lane_f32(v55, v60, v62, 1);
            v56 = vmlaq_lane_f32(v56, v60, v63, 1);
            v57 = vmlaq_lane_f32(v57, v60, v64, 1);
            v65 = v24 <= 2;
            v24 -= 2;
          }
          while (!v65);
          v45 = vaddq_f32(v45, v54);
          v46 = vaddq_f32(v46, v55);
          v47 = vaddq_f32(v47, v56);
          v48 = vaddq_f32(v48, v57);
        }
        v7 = vmulq_n_f32(v45, a7);
        v8 = vmulq_n_f32(v46, a7);
        v9 = vmulq_n_f32(v47, a7);
        v10 = vmulq_n_f32(v48, a7);
        *(float32x4_t *)&v33->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v7;
        *(float32x4_t *)&v35->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v8;
        *(float32x4_t *)&v37->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v9;
        *(float32x4_t *)&v39->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v10;
        v15 += 4;
        v16 = __OFSUB__(v17, 4);
        v65 = v17 <= 4;
        v17 -= 4;
      }
      while (!v65);
    }
    v66 = result & 3;
    if (!v16 && v66 != 0)
    {
      v67 = (float32x2_t *)(a5 + v13 * v11 + 4 * v15);
      v68 = (float32x2_t *)((char *)v67 + v11);
      v69 = &v67[(unint64_t)v11 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v11 / 4] + v11);
      v71 = (__int32 *)(a3 + v15 * v12 + 4 * v15);
      if (v66 != 1)
      {
        if (v66 != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v12 / 4];
          v73.i32[1] = *v72;
          v74 = &v72[(unint64_t)v12 / 4];
          v76 = *v67;
          v75 = v67 + 1;
          v78 = *v68;
          v77 = v68 + 1;
          v80 = *v69;
          v79 = v69 + 1;
          v82 = *v70;
          v81 = v70 + 1;
          v83 = vmul_f32(v73, v76);
          v84 = vmul_f32(v73, v78);
          v85 = vmul_f32(v73, v80);
          v86 = vmul_f32(v73, v82);
          v73.i32[0] = *v74;
          v76.i32[0] = v75->i32[0];
          --v75;
          v78.i32[0] = v77->i32[0];
          --v77;
          v80.i32[0] = v79->i32[0];
          --v79;
          v82.i32[0] = v81->i32[0];
          --v81;
          v71 = &v74[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v75->f32[0] = (float)(vaddv_f32(v83) + (float)(v73.f32[0] * v76.f32[0])) * a7;
          v67 = (float32x2_t *)((char *)v75 + 4);
          v77->f32[0] = (float)(vaddv_f32(v84) + (float)(v73.f32[0] * v78.f32[0])) * a7;
          v68 = (float32x2_t *)((char *)v77 + 4);
          v79->f32[0] = (float)(vaddv_f32(v85) + (float)(v73.f32[0] * v80.f32[0])) * a7;
          v69 = (float32x2_t *)((char *)v79 + 4);
          v81->f32[0] = (float)(vaddv_f32(v86) + (float)(v73.f32[0] * v82.f32[0])) * a7;
          v70 = (float32x2_t *)((char *)v81 + 4);
        }
        v88.i32[0] = *v71;
        v87 = &v71[(unint64_t)v12 / 4];
        v88.i32[1] = *v87;
        v71 = v87 + 1;
        v89 = vaddv_f32(vmul_f32(v88, *v68)) * a7;
        v90 = vaddv_f32(vmul_f32(v88, *v69)) * a7;
        v91 = vaddv_f32(vmul_f32(v88, *v70)) * a7;
        v67->f32[0] = vaddv_f32(vmul_f32(v88, *v67)) * a7;
        v67 = (float32x2_t *)((char *)v67 + 4);
        v68->f32[0] = v89;
        v68 = (float32x2_t *)((char *)v68 + 4);
        v69->f32[0] = v90;
        v69 = (float32x2_t *)((char *)v69 + 4);
        v70->f32[0] = v91;
        v70 = (float32x2_t *)((char *)v70 + 4);
      }
      v92 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v93 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v94 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v92;
      v69->f32[0] = v93;
      v70->f32[0] = v94;
    }
    v13 += 4;
    v65 = v14 <= 4;
    v14 -= 4;
  }
  while (!v65);
  v65 = v14 <= -3;
  a2 = v14 + 3;
  if (!v65)
  {
LABEL_22:
    if (a2 > 1)
    {
      v95 = 0;
      v96 = __OFSUB__(result, 3);
      v97 = result - 3;
      if (result > 3)
      {
        do
        {
          v98 = (float32x4_t *)(a5 + v13 * v11 + 4 * v95);
          v99 = (float32x4_t *)((char *)v98 + v11);
          v100 = (float *)(a3 + v95 * v12 + 4 * v95);
          v101 = 4 * (result - v95);
          v102 = result - v95 - 4;
          v104 = *v100;
          v103 = (float32x2_t *)&v100[(unint64_t)v12 / 4];
          v106 = *v103;
          v105 = (float32x4_t *)((char *)v103 + v12);
          v108 = *v105;
          v107 = (float32x4_t *)((char *)v105 + v12);
          v110 = *v107;
          v109 = (float32x4_t *)((char *)v107 + v12);
          v112 = *v98;
          v111 = (float32x2_t *)&v98[1];
          v114 = *v99;
          v113 = (float32x2_t *)&v99[1];
          v108.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v106, *(float32x2_t *)v112.f32, 1);
          *(float32x2_t *)v8.f32 = vmul_lane_f32(v106, *(float32x2_t *)v114.f32, 1);
          v115 = vmulq_laneq_f32(v108, v112, 2);
          v116 = vmulq_laneq_f32(v108, v114, 2);
          v115.f32[0] = (float)(v104 * v112.f32[0]) + v115.f32[0];
          v116.f32[0] = (float)(v104 * v114.f32[0]) + v116.f32[0];
          v117 = vaddq_f32(vmlaq_laneq_f32(v7, v110, v112, 3), v115);
          v118 = vaddq_f32(vmlaq_laneq_f32(v8, v110, v114, 3), v116);
          if ((v102 & 1) != 0)
          {
            v119 = *v109;
            v109 = (float32x4_t *)((char *)v109 + v12);
            v120 = v111->f32[0];
            v111 = (float32x2_t *)((char *)v111 + 4);
            v121 = v113->f32[0];
            v113 = (float32x2_t *)((char *)v113 + 4);
            v117 = vmlaq_n_f32(v117, v119, v120);
            v118 = vmlaq_n_f32(v118, v119, v121);
            v102 = result - v95 - 5;
          }
          if (v102)
          {
            v122 = 0uLL;
            v123 = 0uLL;
            do
            {
              v125 = *v109;
              v124 = (float32x4_t *)((char *)v109 + v12);
              v126 = *v124;
              v109 = (float32x4_t *)((char *)v124 + v12);
              v127 = *v111++;
              v128 = *v113++;
              v117 = vmlaq_n_f32(v117, v125, v127.f32[0]);
              v118 = vmlaq_n_f32(v118, v125, v128.f32[0]);
              v122 = vmlaq_lane_f32(v122, v126, v127, 1);
              v123 = vmlaq_lane_f32(v123, v126, v128, 1);
              v65 = v102 <= 2;
              v102 -= 2;
            }
            while (!v65);
            v117 = vaddq_f32(v117, v122);
            v118 = vaddq_f32(v118, v123);
          }
          v7 = vmulq_n_f32(v117, a7);
          v8 = vmulq_n_f32(v118, a7);
          *(float32x4_t *)&v111->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v7;
          *(float32x4_t *)&v113->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v8;
          v95 += 4;
          v96 = __OFSUB__(v97, 4);
          v65 = v97 <= 4;
          v97 -= 4;
        }
        while (!v65);
      }
      v129 = result & 3;
      if (!v96 && v129 != 0)
      {
        v130 = (float32x2_t *)(a5 + v13 * v11 + 4 * v95);
        v131 = (float32x2_t *)((char *)v130 + v11);
        v132 = (__int32 *)(a3 + v95 * v12 + 4 * v95);
        if (v129 != 1)
        {
          if (v129 != 2)
          {
            v134.i32[0] = *v132;
            v133 = &v132[(unint64_t)v12 / 4];
            v134.i32[1] = *v133;
            v135 = &v133[(unint64_t)v12 / 4];
            v137 = *v130;
            v136 = v130 + 1;
            v139 = *v131;
            v138 = v131 + 1;
            v140 = vmul_f32(v134, v137);
            v141 = vmul_f32(v134, v139);
            v134.i32[0] = *v135;
            v137.i32[0] = v136->i32[0];
            --v136;
            v139.i32[0] = v138->i32[0];
            --v138;
            v132 = &v135[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v136->f32[0] = (float)(vaddv_f32(v140) + (float)(v134.f32[0] * v137.f32[0])) * a7;
            v130 = (float32x2_t *)((char *)v136 + 4);
            v138->f32[0] = (float)(vaddv_f32(v141) + (float)(v134.f32[0] * v139.f32[0])) * a7;
            v131 = (float32x2_t *)((char *)v138 + 4);
          }
          v143.i32[0] = *v132;
          v142 = &v132[(unint64_t)v12 / 4];
          v143.i32[1] = *v142;
          v132 = v142 + 1;
          v144 = vaddv_f32(vmul_f32(v143, *v131)) * a7;
          v130->f32[0] = vaddv_f32(vmul_f32(v143, *v130)) * a7;
          v130 = (float32x2_t *)((char *)v130 + 4);
          v131->f32[0] = v144;
          v131 = (float32x2_t *)((char *)v131 + 4);
        }
        v145 = (float)(*(float *)v132 * v131->f32[0]) * a7;
        v130->f32[0] = (float)(*(float *)v132 * v130->f32[0]) * a7;
        v131->f32[0] = v145;
      }
      a2 -= 2;
      v13 += 2;
    }
    if (a2)
    {
      v146 = 0;
      v147 = __OFSUB__(result, 3);
      v148 = result - 3;
      if (result > 3)
      {
        do
        {
          v149 = (float32x4_t *)(a5 + v13 * v11 + 4 * v146);
          v150 = (float *)(a3 + v146 * v12 + 4 * v146);
          v151 = result - v146 - 4;
          v153 = *v150;
          v152 = (float32x2_t *)&v150[(unint64_t)v12 / 4];
          v155 = *v152;
          v154 = (float32x4_t *)((char *)v152 + v12);
          v157 = *v154;
          v156 = (float32x4_t *)((char *)v154 + v12);
          v159 = *v156;
          v158 = (float32x4_t *)((char *)v156 + v12);
          v161 = *v149;
          v160 = (float32x2_t *)&v149[1];
          v157.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v155, *(float32x2_t *)v161.f32, 1);
          v162 = vmulq_laneq_f32(v157, v161, 2);
          v162.f32[0] = (float)(v153 * v161.f32[0]) + v162.f32[0];
          v163 = vaddq_f32(vmlaq_laneq_f32(v7, v159, v161, 3), v162);
          if ((v151 & 1) != 0)
          {
            v164 = *v158;
            v158 = (float32x4_t *)((char *)v158 + v12);
            v165 = v160->f32[0];
            v160 = (float32x2_t *)((char *)v160 + 4);
            v163 = vmlaq_n_f32(v163, v164, v165);
            v151 = result - v146 - 5;
          }
          if (v151)
          {
            v166 = 0uLL;
            do
            {
              v168 = *v158;
              v167 = (float32x4_t *)((char *)v158 + v12);
              v169 = *v167;
              v158 = (float32x4_t *)((char *)v167 + v12);
              v170 = *v160++;
              v163 = vmlaq_n_f32(v163, v168, v170.f32[0]);
              v166 = vmlaq_lane_f32(v166, v169, v170, 1);
              v65 = v151 <= 2;
              v151 -= 2;
            }
            while (!v65);
            v163 = vaddq_f32(v163, v166);
          }
          v7 = vmulq_n_f32(v163, a7);
          *(float32x4_t *)&v160->f32[-(result - v146)] = v7;
          v146 += 4;
          v147 = __OFSUB__(v148, 4);
          v65 = v148 <= 4;
          v148 -= 4;
        }
        while (!v65);
      }
      v171 = result & 3;
      if (!v147 && v171 != 0)
      {
        v172 = (float32x2_t *)(a5 + v13 * v11 + 4 * v146);
        v173 = (__int32 *)(a3 + v146 * v12 + 4 * v146);
        if (v171 != 1)
        {
          if (v171 != 2)
          {
            v175.i32[0] = *v173;
            v174 = &v173[(unint64_t)v12 / 4];
            v175.i32[1] = *v174;
            v176 = &v174[(unint64_t)v12 / 4];
            v178 = *v172;
            v177 = v172 + 1;
            v179 = vmul_f32(v175, v178);
            v175.i32[0] = *v176;
            v178.i32[0] = v177->i32[0];
            --v177;
            v173 = &v176[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v177->f32[0] = (float)(vaddv_f32(v179) + (float)(v175.f32[0] * v178.f32[0])) * a7;
            v172 = (float32x2_t *)((char *)v177 + 4);
          }
          v181.i32[0] = *v173;
          v180 = &v173[(unint64_t)v12 / 4];
          v181.i32[1] = *v180;
          v173 = v180 + 1;
          v172->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v181, *v172), a7));
          v172 = (float32x2_t *)((char *)v172 + 4);
        }
        v172->f32[0] = (float)(*(float *)v173 * v172->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LUNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  float32x2_t *v21;
  unsigned int v22;
  float32x4_t *v23;
  float32x2_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float32x2_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  BOOL v55;
  uint64_t v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int32x2_t *v59;
  int32x2_t *v60;
  float *v61;
  __int32 *v62;
  float32x2_t v63;
  float32x2_t *v64;
  float v65;
  float32x2_t *v66;
  float v67;
  float32x2_t *v68;
  float v69;
  float32x2_t *v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  float32x2_t *v89;
  unsigned int v90;
  float32x4_t *v91;
  float32x2_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x2_t *v95;
  float32x4_t v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  int32x2_t *v112;
  int32x2_t *v113;
  float *v114;
  __int32 *v115;
  float32x2_t v116;
  float32x2_t *v117;
  float v118;
  float32x2_t *v119;
  float v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  float32x4_t *v128;
  uint64_t v129;
  unsigned int *v130;
  float32x2_t *v131;
  unsigned int v132;
  float32x4_t *v133;
  float32x2_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x2_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  uint64_t v147;
  _QWORD *v148;
  __int32 *v149;
  __int32 *v150;
  float32x2_t v151;
  float32x2_t *v152;
  float v153;
  float32x2_t v154;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (float32x4_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (float32x4_t *)((char *)v14 + v7);
        v16 = (float32x4_t *)((char *)v14 + 2 * v7);
        v17 = (float32x4_t *)((char *)v14 + 2 * v7 + v7);
        v18 = 4 * (result - v11);
        v19 = result - v11 - 4;
        v20 = (unsigned int *)(a3 + v11 * v8 + 4 * v11 + v8);
        v22 = *v20;
        v21 = (float32x2_t *)&v20[(unint64_t)v8 / 4];
        v24 = *v21;
        v23 = (float32x4_t *)((char *)v21 + v8);
        v26 = *v23;
        v25 = (float32x4_t *)((char *)v23 + v8);
        v28 = *v14;
        v27 = (float32x2_t *)&v14[1];
        v30 = *v15;
        v29 = (float32x2_t *)&v15[1];
        v32 = *v16;
        v31 = (float32x2_t *)&v16[1];
        v34 = *v17;
        v33 = (float32x2_t *)&v17[1];
        v26.i32[3] = 0;
        v35 = vmlaq_laneq_f32(v28, v26, v28, 3);
        v36 = vmlaq_laneq_f32(v30, v26, v30, 3);
        v37 = vmlaq_laneq_f32(v32, v26, v32, 3);
        v38 = vmlaq_laneq_f32(v34, v26, v34, 3);
        *(float32x2_t *)v35.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v28, 2), (float32x2_t)v22, *(float32x2_t *)v28.f32, 1), *(float32x2_t *)v35.f32);
        *(float32x2_t *)v36.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v30, 2), (float32x2_t)v22, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v36.f32);
        *(float32x2_t *)v37.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v32, 2), (float32x2_t)v22, *(float32x2_t *)v32.f32, 1), *(float32x2_t *)v37.f32);
        *(float32x2_t *)v38.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v34, 2), (float32x2_t)v22, *(float32x2_t *)v34.f32, 1), *(float32x2_t *)v38.f32);
        if ((v19 & 1) != 0)
        {
          v39 = *v25;
          v25 = (float32x4_t *)((char *)v25 + v8);
          v40 = v27->f32[0];
          v27 = (float32x2_t *)((char *)v27 + 4);
          v41 = v29->f32[0];
          v29 = (float32x2_t *)((char *)v29 + 4);
          v42 = v31->f32[0];
          v31 = (float32x2_t *)((char *)v31 + 4);
          v43 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v35 = vmlaq_n_f32(v35, v39, v40);
          v36 = vmlaq_n_f32(v36, v39, v41);
          v37 = vmlaq_n_f32(v37, v39, v42);
          v38 = vmlaq_n_f32(v38, v39, v43);
          v19 = result - v11 - 5;
        }
        if (v19)
        {
          v44 = 0uLL;
          v45 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          do
          {
            v49 = *v25;
            v48 = (float32x4_t *)((char *)v25 + v8);
            v50 = *v48;
            v25 = (float32x4_t *)((char *)v48 + v8);
            v51 = *v27++;
            v52 = *v29++;
            v53 = *v31++;
            v54 = *v33++;
            v35 = vmlaq_n_f32(v35, v49, v51.f32[0]);
            v36 = vmlaq_n_f32(v36, v49, v52.f32[0]);
            v37 = vmlaq_n_f32(v37, v49, v53.f32[0]);
            v38 = vmlaq_n_f32(v38, v49, v54.f32[0]);
            v44 = vmlaq_lane_f32(v44, v50, v51, 1);
            v45 = vmlaq_lane_f32(v45, v50, v52, 1);
            v46 = vmlaq_lane_f32(v46, v50, v53, 1);
            v47 = vmlaq_lane_f32(v47, v50, v54, 1);
            v55 = v19 <= 2;
            v19 -= 2;
          }
          while (!v55);
          v35 = vaddq_f32(v35, v44);
          v36 = vaddq_f32(v36, v45);
          v37 = vaddq_f32(v37, v46);
          v38 = vaddq_f32(v38, v47);
        }
        *(float32x4_t *)&v27->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v35, a7);
        *(float32x4_t *)&v29->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v36, a7);
        *(float32x4_t *)&v31->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v37, a7);
        *(float32x4_t *)&v33->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v38, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v55 = v13 <= 4;
        v13 -= 4;
      }
      while (!v55);
    }
    v56 = result & 3;
    if (!v12 && v56 != 0)
    {
      v57 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v58 = (int32x2_t *)((char *)v57 + v7);
      v59 = &v57[(unint64_t)v7 / 4];
      v60 = (int32x2_t *)((char *)&v57[(unint64_t)v7 / 4] + v7);
      v61 = (float *)(a3 + v11 * v8 + 4 * v11 + v8);
      if (v56 != 1)
      {
        if (v56 != 2)
        {
          v63.f32[0] = *v61;
          v62 = (__int32 *)&v61[(unint64_t)v8 / 4];
          v63.i32[1] = *v62;
          v65 = *(float *)v57->i32;
          v64 = (float32x2_t *)((char *)v57 + 4);
          v67 = *(float *)v58->i32;
          v66 = (float32x2_t *)((char *)v58 + 4);
          v69 = *(float *)v59->i32;
          v68 = (float32x2_t *)((char *)v59 + 4);
          v71 = *(float *)v60->i32;
          v70 = (float32x2_t *)((char *)v60 + 4);
          v72 = vmul_f32(v63, *v64);
          v73 = vmul_f32(v63, *v66);
          v74 = vmul_f32(v63, *v68);
          v75 = vmul_f32(v63, *v70);
          v64 = (float32x2_t *)((char *)v64 - 4);
          v66 = (float32x2_t *)((char *)v66 - 4);
          v68 = (float32x2_t *)((char *)v68 - 4);
          v70 = (float32x2_t *)((char *)v70 - 4);
          v61 = (float *)(v62 + 1);
          v64->f32[0] = (float)(vaddv_f32(v72) + v65) * a7;
          v57 = (int32x2_t *)((char *)v64 + 4);
          v66->f32[0] = (float)(vaddv_f32(v73) + v67) * a7;
          v58 = (int32x2_t *)((char *)v66 + 4);
          v68->f32[0] = (float)(vaddv_f32(v74) + v69) * a7;
          v59 = (int32x2_t *)((char *)v68 + 4);
          v70->f32[0] = (float)(vaddv_f32(v75) + v71) * a7;
          v60 = (int32x2_t *)((char *)v70 + 4);
        }
        v76 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v57, *v58), vmul_n_f32((float32x2_t)vtrn2_s32(*v57, *v58), *v61)), a7);
        v77 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v59, *v60), vmul_n_f32((float32x2_t)vtrn2_s32(*v59, *v60), *v61)), a7);
        v57->i32[0] = v76.i32[0];
        v57 = (int32x2_t *)((char *)v57 + 4);
        v58->i32[0] = v76.i32[1];
        v58 = (int32x2_t *)((char *)v58 + 4);
        v59->i32[0] = v77.i32[0];
        v59 = (int32x2_t *)((char *)v59 + 4);
        v60->i32[0] = v77.i32[1];
        v60 = (int32x2_t *)((char *)v60 + 4);
      }
      v78 = *(float *)v58->i32 * a7;
      v79 = *(float *)v59->i32 * a7;
      v80 = *(float *)v60->i32 * a7;
      *(float *)v57->i32 = *(float *)v57->i32 * a7;
      *(float *)v58->i32 = v78;
      *(float *)v59->i32 = v79;
      *(float *)v60->i32 = v80;
    }
    v9 += 4;
    v55 = v10 <= 4;
    v10 -= 4;
  }
  while (!v55);
  v55 = v10 <= -3;
  a2 = v10 + 3;
  if (!v55)
  {
LABEL_22:
    if (a2 > 1)
    {
      v81 = 0;
      v82 = __OFSUB__(result, 3);
      v83 = result - 3;
      if (result > 3)
      {
        do
        {
          v84 = (float32x4_t *)(a5 + v9 * v7 + 4 * v81);
          v85 = (float32x4_t *)((char *)v84 + v7);
          v86 = 4 * (result - v81);
          v87 = result - v81 - 4;
          v88 = (unsigned int *)(a3 + v81 * v8 + 4 * v81 + v8);
          v90 = *v88;
          v89 = (float32x2_t *)&v88[(unint64_t)v8 / 4];
          v92 = *v89;
          v91 = (float32x4_t *)((char *)v89 + v8);
          v94 = *v91;
          v93 = (float32x4_t *)((char *)v91 + v8);
          v96 = *v84;
          v95 = (float32x2_t *)&v84[1];
          v98 = *v85;
          v97 = (float32x2_t *)&v85[1];
          v94.i32[3] = 0;
          v99 = vmlaq_laneq_f32(v96, v94, v96, 3);
          v100 = vmlaq_laneq_f32(v98, v94, v98, 3);
          *(float32x2_t *)v99.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v96, 2), (float32x2_t)v90, *(float32x2_t *)v96.f32, 1), *(float32x2_t *)v99.f32);
          *(float32x2_t *)v100.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v98, 2), (float32x2_t)v90, *(float32x2_t *)v98.f32, 1), *(float32x2_t *)v100.f32);
          if ((v87 & 1) != 0)
          {
            v101 = *v93;
            v93 = (float32x4_t *)((char *)v93 + v8);
            v102 = v95->f32[0];
            v95 = (float32x2_t *)((char *)v95 + 4);
            v103 = v97->f32[0];
            v97 = (float32x2_t *)((char *)v97 + 4);
            v99 = vmlaq_n_f32(v99, v101, v102);
            v100 = vmlaq_n_f32(v100, v101, v103);
            v87 = result - v81 - 5;
          }
          if (v87)
          {
            v104 = 0uLL;
            v105 = 0uLL;
            do
            {
              v107 = *v93;
              v106 = (float32x4_t *)((char *)v93 + v8);
              v108 = *v106;
              v93 = (float32x4_t *)((char *)v106 + v8);
              v109 = *v95++;
              v110 = *v97++;
              v99 = vmlaq_n_f32(v99, v107, v109.f32[0]);
              v100 = vmlaq_n_f32(v100, v107, v110.f32[0]);
              v104 = vmlaq_lane_f32(v104, v108, v109, 1);
              v105 = vmlaq_lane_f32(v105, v108, v110, 1);
              v55 = v87 <= 2;
              v87 -= 2;
            }
            while (!v55);
            v99 = vaddq_f32(v99, v104);
            v100 = vaddq_f32(v100, v105);
          }
          *(float32x4_t *)&v95->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v99, a7);
          *(float32x4_t *)&v97->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v100, a7);
          v81 += 4;
          v82 = __OFSUB__(v83, 4);
          v55 = v83 <= 4;
          v83 -= 4;
        }
        while (!v55);
      }
      v111 = result & 3;
      if (!v82 && v111 != 0)
      {
        v112 = (int32x2_t *)(a5 + v9 * v7 + 4 * v81);
        v113 = (int32x2_t *)((char *)v112 + v7);
        v114 = (float *)(a3 + v81 * v8 + 4 * v81 + v8);
        if (v111 != 1)
        {
          if (v111 != 2)
          {
            v116.f32[0] = *v114;
            v115 = (__int32 *)&v114[(unint64_t)v8 / 4];
            v116.i32[1] = *v115;
            v118 = *(float *)v112->i32;
            v117 = (float32x2_t *)((char *)v112 + 4);
            v120 = *(float *)v113->i32;
            v119 = (float32x2_t *)((char *)v113 + 4);
            v121 = vmul_f32(v116, *v117);
            v122 = vmul_f32(v116, *v119);
            v117 = (float32x2_t *)((char *)v117 - 4);
            v119 = (float32x2_t *)((char *)v119 - 4);
            v114 = (float *)(v115 + 1);
            v117->f32[0] = (float)(vaddv_f32(v121) + v118) * a7;
            v112 = (int32x2_t *)((char *)v117 + 4);
            v119->f32[0] = (float)(vaddv_f32(v122) + v120) * a7;
            v113 = (int32x2_t *)((char *)v119 + 4);
          }
          v123 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v112, *v113), vmul_n_f32((float32x2_t)vtrn2_s32(*v112, *v113), *v114)), a7);
          v112->i32[0] = v123.i32[0];
          v112 = (int32x2_t *)((char *)v112 + 4);
          v113->i32[0] = v123.i32[1];
          v113 = (int32x2_t *)((char *)v113 + 4);
        }
        v124 = *(float *)v113->i32 * a7;
        *(float *)v112->i32 = *(float *)v112->i32 * a7;
        *(float *)v113->i32 = v124;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v125 = 0;
      v126 = __OFSUB__(result, 3);
      v127 = result - 3;
      if (result > 3)
      {
        do
        {
          v128 = (float32x4_t *)(a5 + v9 * v7 + 4 * v125);
          v129 = result - v125 - 4;
          v130 = (unsigned int *)(a3 + v125 * v8 + 4 * v125 + v8);
          v132 = *v130;
          v131 = (float32x2_t *)&v130[(unint64_t)v8 / 4];
          v134 = *v131;
          v133 = (float32x4_t *)((char *)v131 + v8);
          v136 = *v133;
          v135 = (float32x4_t *)((char *)v133 + v8);
          v138 = *v128;
          v137 = (float32x2_t *)&v128[1];
          v136.i32[3] = 0;
          v139 = vmlaq_laneq_f32(v138, v136, v138, 3);
          *(float32x2_t *)v139.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v134, v138, 2), (float32x2_t)v132, *(float32x2_t *)v138.f32, 1), *(float32x2_t *)v139.f32);
          if ((v129 & 1) != 0)
          {
            v140 = *v135;
            v135 = (float32x4_t *)((char *)v135 + v8);
            v141 = v137->f32[0];
            v137 = (float32x2_t *)((char *)v137 + 4);
            v139 = vmlaq_n_f32(v139, v140, v141);
            v129 = result - v125 - 5;
          }
          if (v129)
          {
            v142 = 0uLL;
            do
            {
              v144 = *v135;
              v143 = (float32x4_t *)((char *)v135 + v8);
              v145 = *v143;
              v135 = (float32x4_t *)((char *)v143 + v8);
              v146 = *v137++;
              v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
              v142 = vmlaq_lane_f32(v142, v145, v146, 1);
              v55 = v129 <= 2;
              v129 -= 2;
            }
            while (!v55);
            v139 = vaddq_f32(v139, v142);
          }
          *(float32x4_t *)&v137->f32[-(result - v125)] = vmulq_n_f32(v139, a7);
          v125 += 4;
          v126 = __OFSUB__(v127, 4);
          v55 = v127 <= 4;
          v127 -= 4;
        }
        while (!v55);
      }
      v147 = result & 3;
      if (!v126 && v147 != 0)
      {
        v148 = (_QWORD *)(a5 + v9 * v7 + 4 * v125);
        v149 = (__int32 *)(a3 + v125 * v8 + 4 * v125 + v8);
        if (v147 != 1)
        {
          if (v147 != 2)
          {
            v151.i32[0] = *v149;
            v150 = &v149[(unint64_t)v8 / 4];
            v151.i32[1] = *v150;
            v149 = v150 + 1;
            v153 = *(float *)v148;
            v152 = (float32x2_t *)((char *)v148 + 4);
            v154 = vmul_f32(v151, *v152);
            v152 = (float32x2_t *)((char *)v152 - 4);
            v152->f32[0] = (float)(vaddv_f32(v154) + v153) * a7;
            v148 = (_QWORD *)((char *)v152 + 4);
          }
          *(float *)v148 = (float)((float)(COERCE_FLOAT(HIDWORD(*v148)) * *(float *)v149) + COERCE_FLOAT(*v148)) * a7;
          v148 = (_QWORD *)((char *)v148 + 4);
        }
        *(float *)v148 = *(float *)v148 * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LUTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  float *v17;
  float32x2_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  float v22;
  __int32 *v23;
  float32x2_t v24;
  __int32 *v25;
  float32x4_t v26;
  __int32 *v27;
  float32x4_t v28;
  __int32 *v29;
  int64x2_t v30;
  float32x2_t *v31;
  int64x2_t v32;
  float32x2_t *v33;
  int64x2_t v34;
  float32x2_t *v35;
  int64x2_t v36;
  float32x4_t *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  BOOL v76;
  float32x2_t *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32x2_t v87;
  float32_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  uint64_t j;
  int32x4_t *v95;
  int32x4_t *v96;
  float *v97;
  float32x2_t *v98;
  float32x4_t *v99;
  float32x4_t *v100;
  uint64_t v101;
  float v102;
  __int32 *v103;
  float32x2_t v104;
  __int32 *v105;
  float32x4_t v106;
  __int32 *v107;
  float32x4_t v108;
  __int32 *v109;
  int32x4_t v110;
  float32x2_t *v111;
  int32x4_t v112;
  float32x4_t *v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float v121;
  float v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t *v133;
  float32x2_t *v134;
  float32x2_t *v135;
  float32x2_t v136;
  float v137;
  float32_t v138;
  float32x2_t v139;
  float32_t v140;
  float32_t v141;
  uint64_t k;
  float *v143;
  float32x2_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  uint64_t v147;
  float v148;
  __int32 *v149;
  float32x2_t v150;
  __int32 *v151;
  float32x4_t v152;
  __int32 *v153;
  float32x4_t v154;
  __int32 *v155;
  float32x4_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float v163;
  float32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  float32x2_t v169;
  float32x2_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v37 = vmulq_n_f32(v56, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = (float *)(a3 + i * v9 + 4 * i);
      v18 = (float32x2_t *)&v17[(unint64_t)v9 / 4];
      v19 = (float32x4_t *)&v17[(unint64_t)v9 / 2];
      v20 = (float32x4_t *)&v17[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
      v21 = i;
      v22 = *v17;
      v23 = (__int32 *)(a3 + i * v9);
      v24 = *v18;
      v25 = (__int32 *)v18 - i;
      v26 = *v19;
      v27 = (__int32 *)v19 - i;
      v28 = *v20;
      v29 = (__int32 *)v20 - i;
      v30 = *v13;
      v31 = (float32x2_t *)(a5 + v10 * v8);
      v32 = *v14;
      v33 = (float32x2_t *)((char *)v14 - 4 * i);
      v34 = *v15;
      v35 = (float32x2_t *)((char *)v15 - 4 * i);
      v36 = *v16;
      v37 = (float32x4_t *)((char *)v16 - 4 * i);
      v38 = (int32x4_t)vtrn1q_s64(v30, v34);
      v39 = (int32x4_t)vtrn1q_s64(v32, v36);
      v40 = (int32x4_t)vtrn2q_s64(v30, v34);
      v41 = (int32x4_t)vtrn2q_s64(v32, v36);
      v42 = (float32x4_t)vtrn1q_s32(v38, v39);
      v43 = (float32x4_t)vtrn2q_s32(v38, v39);
      v44 = (float32x4_t)vtrn1q_s32(v40, v41);
      v45 = (int64x2_t)vmulq_n_f32(v42, v22);
      v46 = (int64x2_t)vaddq_f32(vmulq_n_f32(v42, v24.f32[0]), vmulq_lane_f32(v43, v24, 1));
      v47 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v26.f32[0]), v44, v26, 2), vmulq_lane_f32(v43, *(float32x2_t *)v26.f32, 1));
      v48 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v28.f32[0]), v44, v28, 2), vmulq_lane_f32(v43, *(float32x2_t *)v28.f32, 1)), vmulq_laneq_f32((float32x4_t)vtrn2q_s32(v40, v41), v28, 3));
      v49 = (int32x4_t)vtrn1q_s64(v45, v47);
      v50 = (int32x4_t)vtrn1q_s64(v46, v48);
      v51 = (int32x4_t)vtrn2q_s64(v45, v47);
      v52 = (int32x4_t)vtrn2q_s64(v46, v48);
      v53 = (float32x4_t)vtrn1q_s32(v49, v50);
      v54 = (float32x4_t)vtrn2q_s32(v49, v50);
      v55 = (float32x4_t)vtrn1q_s32(v51, v52);
      v56 = (float32x4_t)vtrn2q_s32(v51, v52);
      if ((i & 1) != 0)
      {
        v57.i32[0] = *v23++;
        v57.i32[1] = *v25++;
        v57.i32[2] = *v27++;
        v57.i32[3] = *v29++;
        v58 = v31->f32[0];
        v31 = (float32x2_t *)((char *)v31 + 4);
        v59 = v33->f32[0];
        v33 = (float32x2_t *)((char *)v33 + 4);
        v60 = v35->f32[0];
        v35 = (float32x2_t *)((char *)v35 + 4);
        v61 = v37->f32[0];
        v37 = (float32x4_t *)((char *)v37 + 4);
        v53 = vmlaq_n_f32(v53, v57, v58);
        v54 = vmlaq_n_f32(v54, v57, v59);
        v55 = vmlaq_n_f32(v55, v57, v60);
        v56 = vmlaq_n_f32(v56, v57, v61);
        v21 = i - 1;
      }
      if (v21)
      {
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        v65 = 0uLL;
        do
        {
          v66.i64[0] = *(_QWORD *)v23;
          v23 += 2;
          v67.i64[0] = *(_QWORD *)v25;
          v25 += 2;
          v68 = *(_QWORD *)v27;
          v27 += 2;
          v69 = *(_QWORD *)v29;
          v29 += 2;
          v70 = *v31++;
          v71 = *v33++;
          v72 = *v35++;
          v73 = *(float32x2_t *)v37->f32;
          v37 = (float32x4_t *)((char *)v37 + 8);
          v66.i64[1] = v68;
          v67.i64[1] = v69;
          v74 = (float32x4_t)vtrn1q_s32(v66, v67);
          v75 = (float32x4_t)vtrn2q_s32(v66, v67);
          v53 = vmlaq_n_f32(v53, v74, v70.f32[0]);
          v54 = vmlaq_n_f32(v54, v74, v71.f32[0]);
          v55 = vmlaq_n_f32(v55, v74, v72.f32[0]);
          v56 = vmlaq_n_f32(v56, v74, v73.f32[0]);
          v62 = vmlaq_lane_f32(v62, v75, v70, 1);
          v63 = vmlaq_lane_f32(v63, v75, v71, 1);
          v64 = vmlaq_lane_f32(v64, v75, v72, 1);
          v65 = vmlaq_lane_f32(v65, v75, v73, 1);
          v76 = v21 <= 2;
          v21 -= 2;
        }
        while (!v76);
        v53 = vaddq_f32(v53, v62);
        v54 = vaddq_f32(v54, v63);
        v55 = vaddq_f32(v55, v64);
        v56 = vaddq_f32(v56, v65);
      }
      *(float32x4_t *)v31->f32 = vmulq_n_f32(v53, a7);
      *(float32x4_t *)v33->f32 = vmulq_n_f32(v54, a7);
      *(float32x4_t *)v35->f32 = vmulq_n_f32(v55, a7);
    }
    if (i)
    {
      v77 = (float32x2_t *)(a5 + v10 * v8);
      v78 = (float32x2_t *)((char *)v77 + v8);
      v79 = &v77[(unint64_t)v8 / 4];
      v80 = (float32x2_t *)((char *)&v77[(unint64_t)v8 / 4] + v8);
      v81 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v82 = *v81;
          v83 = v81[1].f32[0];
          v81 = (float32x2_t *)((char *)v81 - v9);
          v84 = (float)(vaddv_f32(vmul_f32(v82, *v78)) + (float)(v78[1].f32[0] * v83)) * a7;
          v85 = (float)(vaddv_f32(vmul_f32(v82, *v79)) + (float)(v79[1].f32[0] * v83)) * a7;
          v86 = (float)(vaddv_f32(vmul_f32(v82, *v80)) + (float)(v80[1].f32[0] * v83)) * a7;
          v77[1].f32[0] = (float)(vaddv_f32(vmul_f32(v82, *v77)) + (float)(v77[1].f32[0] * v83)) * a7;
          v78[1].f32[0] = v84;
          v79[1].f32[0] = v85;
          v80[1].f32[0] = v86;
        }
        v87 = *v81;
        v81 = (float32x2_t *)((char *)v81 - v9);
        v88 = vaddv_f32(vmul_f32(v87, *v78)) * a7;
        v89 = vaddv_f32(vmul_f32(v87, *v79)) * a7;
        v90 = vaddv_f32(vmul_f32(v87, *v80)) * a7;
        v77->f32[1] = vaddv_f32(vmul_f32(v87, *v77)) * a7;
        v78->f32[1] = v88;
        v79->f32[1] = v89;
        v80->f32[1] = v90;
      }
      v91 = (float)(v81->f32[0] * v78->f32[0]) * a7;
      v92 = (float)(v81->f32[0] * v79->f32[0]) * a7;
      v93 = (float)(v81->f32[0] * v80->f32[0]) * a7;
      v77->f32[0] = (float)(v81->f32[0] * v77->f32[0]) * a7;
      v78->f32[0] = v91;
      v79->f32[0] = v92;
      v80->f32[0] = v93;
    }
    v10 += 4;
    v76 = v11 <= 4;
    v11 -= 4;
  }
  while (!v76);
  v76 = v11 <= -3;
  a2 = v11 + 3;
  if (!v76)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v113 = vmulq_n_f32(v119, a7))
      {
        j -= 4;
        v95 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v96 = (int32x4_t *)((char *)v95 + v8);
        v97 = (float *)(a3 + j * v9 + 4 * j);
        v98 = (float32x2_t *)&v97[(unint64_t)v9 / 4];
        v99 = (float32x4_t *)&v97[(unint64_t)v9 / 2];
        v100 = (float32x4_t *)&v97[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v101 = j;
        v102 = *v97;
        v103 = (__int32 *)(a3 + j * v9);
        v104 = *v98;
        v105 = (__int32 *)v98 - j;
        v106 = *v99;
        v107 = (__int32 *)v99 - j;
        v108 = *v100;
        v109 = (__int32 *)v100 - j;
        v110 = *v95;
        v111 = (float32x2_t *)(a5 + v10 * v8);
        v112 = *v96;
        v113 = (float32x4_t *)((char *)v96 - 4 * j);
        v114 = vtrn1q_s32(v110, v112);
        v115 = vtrn2q_s32(v110, v112);
        *(float32x2_t *)v116.i8 = vmul_n_f32(*(float32x2_t *)v114.i8, v102);
        *(float32x2_t *)v117.i8 = vadd_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v104.f32[0]), vmul_lane_f32(*(float32x2_t *)v115.i8, v104, 1));
        v116.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v106.f32[0]), (float32x2_t)v114.u64[1], v106, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v106.f32, 1));
        v117.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v108.f32[0]), (float32x2_t)v114.u64[1], v108, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v108.f32, 1)), vmul_laneq_f32((float32x2_t)v115.u64[1], v108, 3));
        v118 = (float32x4_t)vtrn1q_s32(v116, v117);
        v119 = (float32x4_t)vtrn2q_s32(v116, v117);
        if ((j & 1) != 0)
        {
          v120.i32[0] = *v103++;
          v120.i32[1] = *v105++;
          v120.i32[2] = *v107++;
          v120.i32[3] = *v109++;
          v121 = v111->f32[0];
          v111 = (float32x2_t *)((char *)v111 + 4);
          v122 = v113->f32[0];
          v113 = (float32x4_t *)((char *)v113 + 4);
          v118 = vmlaq_n_f32(v118, v120, v121);
          v119 = vmlaq_n_f32(v119, v120, v122);
          v101 = j - 1;
        }
        if (v101)
        {
          v123 = 0uLL;
          v124 = 0uLL;
          do
          {
            v125.i64[0] = *(_QWORD *)v103;
            v103 += 2;
            v126.i64[0] = *(_QWORD *)v105;
            v105 += 2;
            v127 = *(_QWORD *)v107;
            v107 += 2;
            v128 = *(_QWORD *)v109;
            v109 += 2;
            v129 = *v111++;
            v130 = *(float32x2_t *)v113->f32;
            v113 = (float32x4_t *)((char *)v113 + 8);
            v125.i64[1] = v127;
            v126.i64[1] = v128;
            v131 = (float32x4_t)vtrn1q_s32(v125, v126);
            v132 = (float32x4_t)vtrn2q_s32(v125, v126);
            v118 = vmlaq_n_f32(v118, v131, v129.f32[0]);
            v119 = vmlaq_n_f32(v119, v131, v130.f32[0]);
            v123 = vmlaq_lane_f32(v123, v132, v129, 1);
            v124 = vmlaq_lane_f32(v124, v132, v130, 1);
            v76 = v101 <= 2;
            v101 -= 2;
          }
          while (!v76);
          v118 = vaddq_f32(v118, v123);
          v119 = vaddq_f32(v119, v124);
        }
        *(float32x4_t *)v111->f32 = vmulq_n_f32(v118, a7);
      }
      if (j)
      {
        v133 = (float32x2_t *)(a5 + v10 * v8);
        v134 = (float32x2_t *)((char *)v133 + v8);
        v135 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v136 = *v135;
            v137 = v135[1].f32[0];
            v135 = (float32x2_t *)((char *)v135 - v9);
            v138 = (float)(vaddv_f32(vmul_f32(v136, *v134)) + (float)(v134[1].f32[0] * v137)) * a7;
            v133[1].f32[0] = (float)(vaddv_f32(vmul_f32(v136, *v133)) + (float)(v133[1].f32[0] * v137)) * a7;
            v134[1].f32[0] = v138;
          }
          v139 = *v135;
          v135 = (float32x2_t *)((char *)v135 - v9);
          v140 = vaddv_f32(vmul_f32(v139, *v134)) * a7;
          v133->f32[1] = vaddv_f32(vmul_f32(v139, *v133)) * a7;
          v134->f32[1] = v140;
        }
        v141 = (float)(v135->f32[0] * v134->f32[0]) * a7;
        v133->f32[0] = (float)(v135->f32[0] * v133->f32[0]) * a7;
        v134->f32[0] = v141;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v157 = vmulq_n_f32(v161, a7))
      {
        k -= 4;
        v143 = (float *)(a3 + k * v9 + 4 * k);
        v144 = (float32x2_t *)&v143[(unint64_t)v9 / 4];
        v145 = (float32x4_t *)&v143[(unint64_t)v9 / 2];
        v146 = (float32x4_t *)&v143[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v147 = k;
        v148 = *v143;
        v149 = (__int32 *)(a3 + k * v9);
        v150 = *v144;
        v151 = (__int32 *)v144 - k;
        v152 = *v145;
        v153 = (__int32 *)v145 - k;
        v154 = *v146;
        v155 = (__int32 *)v146 - k;
        v156 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v157 = (float32x4_t *)(a5 + v10 * v8);
        v152.i32[3] = 0;
        v158 = vmulq_f32(v154, v156);
        v159 = vmulq_f32(v152, v156);
        v160 = vmul_f32(v150, *(float32x2_t *)v156.f32);
        *(float *)v7.i32 = v148 * v156.f32[0];
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160.f32[0] = vaddv_f32(v160);
        v158.f32[0] = vaddv_f32(*(float32x2_t *)v158.f32);
        v159.f32[0] = vaddv_f32(*(float32x2_t *)v159.f32);
        *(int32x2_t *)v161.f32 = vtrn1_s32(v7, (int32x2_t)v160);
        *(int32x2_t *)&v161.u32[2] = vtrn1_s32(*(int32x2_t *)v159.f32, *(int32x2_t *)v158.f32);
        if ((k & 1) != 0)
        {
          v162.i32[0] = *v149++;
          v162.i32[1] = *v151++;
          v162.i32[2] = *v153++;
          v162.i32[3] = *v155++;
          v163 = v157->f32[0];
          v157 = (float32x4_t *)((char *)v157 + 4);
          v161 = vmlaq_n_f32(v161, v162, v163);
          v147 = k - 1;
        }
        if (v147)
        {
          v164 = 0uLL;
          do
          {
            v165.i64[0] = *(_QWORD *)v149;
            v149 += 2;
            v166.i64[0] = *(_QWORD *)v151;
            v151 += 2;
            v167 = *(_QWORD *)v153;
            v153 += 2;
            v168 = *(_QWORD *)v155;
            v155 += 2;
            v169 = *(float32x2_t *)v157->f32;
            v157 = (float32x4_t *)((char *)v157 + 8);
            v165.i64[1] = v167;
            v166.i64[1] = v168;
            v161 = vmlaq_n_f32(v161, (float32x4_t)vtrn1q_s32(v165, v166), v169.f32[0]);
            v164 = vmlaq_lane_f32(v164, (float32x4_t)vtrn2q_s32(v165, v166), v169, 1);
            v76 = v147 <= 2;
            v147 -= 2;
          }
          while (!v76);
          v161 = vaddq_f32(v161, v164);
        }
      }
      if (k)
      {
        v170 = (float32x2_t *)(a5 + v10 * v8);
        v171 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v172 = *v171;
            v173 = v171[1].f32[0];
            v171 = (float32x2_t *)((char *)v171 - v9);
            v170[1].f32[0] = (float)(vaddv_f32(vmul_f32(v172, *v170)) + (float)(v170[1].f32[0] * v173)) * a7;
          }
          v174 = *v171;
          v171 = (float32x2_t *)((char *)v171 - v9);
          v170->f32[1] = vaddv_f32(vmul_f32(v174, *v170)) * a7;
        }
        v170->f32[0] = (float)(v171->f32[0] * v170->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LUTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  uint64_t v17;
  float *v18;
  float32x2_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  __int32 *v22;
  float v23;
  __int32 *v24;
  float32x2_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  int64x2_t v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x4_t v71;
  BOOL v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  float32x2_t *v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32_t v87;
  uint64_t j;
  int32x4_t *v89;
  int32x4_t *v90;
  uint64_t v91;
  float *v92;
  float32x2_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  __int32 *v96;
  float v97;
  __int32 *v98;
  float32x2_t v99;
  __int32 *v100;
  float32x4_t v101;
  __int32 *v102;
  int32x4_t v103;
  float32x2_t *v104;
  int32x4_t v105;
  float32x4_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float32x2_t *v126;
  float32x2_t *v127;
  float32x2_t v128;
  float32_t v129;
  float32_t v130;
  float32_t v131;
  uint64_t k;
  uint64_t v133;
  float *v134;
  float32x2_t *v135;
  float32x4_t *v136;
  uint64_t v137;
  __int32 *v138;
  float v139;
  __int32 *v140;
  float32x2_t v141;
  __int32 *v142;
  float32x4_t v143;
  __int32 *v144;
  float32x4_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x2_t v158;
  float32x2_t *v159;
  float32x2_t *v160;
  float32x2_t v161;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v36 = vmulq_n_f32(v53, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = a3 + i * v9 + 4 * i;
      v18 = (float *)(v17 + v9);
      v19 = (float32x2_t *)(v17 + 2 * v9);
      v20 = (float32x4_t *)(v17 + v9 + 2 * v9);
      v21 = i;
      v22 = (__int32 *)(a3 + i * v9);
      v23 = *v18;
      v24 = (__int32 *)&v18[-i];
      v25 = *v19;
      v26 = (__int32 *)v19 - i;
      v27 = *v20;
      v28 = (__int32 *)v20 - i;
      v29 = *v13;
      v30 = (float32x2_t *)(a5 + v10 * v8);
      v31 = *v14;
      v32 = (float32x2_t *)((char *)v14 - 4 * i);
      v33 = *v15;
      v34 = (float32x2_t *)((char *)v15 - 4 * i);
      v35 = *v16;
      v36 = (float32x4_t *)((char *)v16 - 4 * i);
      v37 = (int32x4_t)vtrn1q_s64(v29, v33);
      v38 = (int32x4_t)vtrn1q_s64(v31, v35);
      v39 = (int32x4_t)vtrn2q_s64(v29, v33);
      v40 = (int32x4_t)vtrn2q_s64(v31, v35);
      v41 = (float32x4_t)vtrn1q_s32(v37, v38);
      v42 = (float32x4_t)vtrn2q_s32(v37, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (int64x2_t)vmlaq_n_f32(v42, v41, v23);
      v45 = (int64x2_t)vaddq_f32(vmlaq_n_f32(v43, v41, v25.f32[0]), vmulq_lane_f32(v42, v25, 1));
      v46 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32((float32x4_t)vtrn2q_s32(v39, v40), v41, v27.f32[0]), v43, v27, 2), vmulq_lane_f32(v42, *(float32x2_t *)v27.f32, 1));
      v47 = (int32x4_t)vtrn1q_s64((int64x2_t)v41, v45);
      v48 = (int32x4_t)vtrn1q_s64(v44, v46);
      v49 = (int32x4_t)vtrn2q_s64((int64x2_t)v41, v45);
      v7 = (float32x4_t)vtrn2q_s64(v44, v46);
      v50 = (float32x4_t)vtrn1q_s32(v47, v48);
      v51 = (float32x4_t)vtrn2q_s32(v47, v48);
      v52 = (float32x4_t)vtrn1q_s32(v49, (int32x4_t)v7);
      v53 = (float32x4_t)vtrn2q_s32(v49, (int32x4_t)v7);
      if ((i & 1) != 0)
      {
        v54.i32[0] = *v22++;
        v54.i32[1] = *v24++;
        v54.i32[2] = *v26++;
        v54.i32[3] = *v28++;
        v55 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v56 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v57 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        v58 = v36->f32[0];
        v36 = (float32x4_t *)((char *)v36 + 4);
        v50 = vmlaq_n_f32(v50, v54, v55);
        v51 = vmlaq_n_f32(v51, v54, v56);
        v52 = vmlaq_n_f32(v52, v54, v57);
        v53 = vmlaq_n_f32(v53, v54, v58);
        v21 = i - 1;
      }
      if (v21)
      {
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        do
        {
          v63.i64[0] = *(_QWORD *)v22;
          v22 += 2;
          v64.i64[0] = *(_QWORD *)v24;
          v24 += 2;
          v65 = *(_QWORD *)v26;
          v26 += 2;
          v66 = *(_QWORD *)v28;
          v28 += 2;
          v67 = *v30++;
          v68 = *v32++;
          v69 = *v34++;
          v70 = *(float32x2_t *)v36->f32;
          v36 = (float32x4_t *)((char *)v36 + 8);
          v63.i64[1] = v65;
          v64.i64[1] = v66;
          v71 = (float32x4_t)vtrn1q_s32(v63, v64);
          v7 = (float32x4_t)vtrn2q_s32(v63, v64);
          v50 = vmlaq_n_f32(v50, v71, v67.f32[0]);
          v51 = vmlaq_n_f32(v51, v71, v68.f32[0]);
          v52 = vmlaq_n_f32(v52, v71, v69.f32[0]);
          v53 = vmlaq_n_f32(v53, v71, v70.f32[0]);
          v59 = vmlaq_lane_f32(v59, v7, v67, 1);
          v60 = vmlaq_lane_f32(v60, v7, v68, 1);
          v61 = vmlaq_lane_f32(v61, v7, v69, 1);
          v62 = vmlaq_lane_f32(v62, v7, v70, 1);
          v72 = v21 <= 2;
          v21 -= 2;
        }
        while (!v72);
        v50 = vaddq_f32(v50, v59);
        v51 = vaddq_f32(v51, v60);
        v52 = vaddq_f32(v52, v61);
        v53 = vaddq_f32(v53, v62);
      }
      *(float32x4_t *)v30->f32 = vmulq_n_f32(v50, a7);
      *(float32x4_t *)v32->f32 = vmulq_n_f32(v51, a7);
      *(float32x4_t *)v34->f32 = vmulq_n_f32(v52, a7);
    }
    if (i)
    {
      v73 = (float32x2_t *)(a5 + v10 * v8);
      v74 = (float32x2_t *)((char *)v73 + v8);
      v75 = &v73[(unint64_t)v8 / 4];
      v76 = (float32x2_t *)((char *)&v73[(unint64_t)v8 / 4] + v8);
      v77 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v78 = *v77;
          v77 = (float32x2_t *)((char *)v77 - v9);
          v79 = (float)(vaddv_f32(vmul_f32(v78, *v74)) + v74[1].f32[0]) * a7;
          v80 = (float)(vaddv_f32(vmul_f32(v78, *v75)) + v75[1].f32[0]) * a7;
          v81 = (float)(vaddv_f32(vmul_f32(v78, *v76)) + v76[1].f32[0]) * a7;
          v73[1].f32[0] = (float)(vaddv_f32(vmul_f32(v78, *v73)) + v73[1].f32[0]) * a7;
          v74[1].f32[0] = v79;
          v75[1].f32[0] = v80;
          v76[1].f32[0] = v81;
        }
        v82 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v74)) + (float)(v77->f32[0] * COERCE_FLOAT(*v74))) * a7;
        v83 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v75)) + (float)(v77->f32[0] * COERCE_FLOAT(*v75))) * a7;
        v84 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v76)) + (float)(v77->f32[0] * COERCE_FLOAT(*v76))) * a7;
        v73->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v73)) + (float)(v77->f32[0] * COERCE_FLOAT(*v73)))
                    * a7;
        v74->f32[1] = v82;
        v75->f32[1] = v83;
        v76->f32[1] = v84;
      }
      v85 = v74->f32[0] * a7;
      v86 = v75->f32[0] * a7;
      v87 = v76->f32[0] * a7;
      v73->f32[0] = v73->f32[0] * a7;
      v74->f32[0] = v85;
      v75->f32[0] = v86;
      v76->f32[0] = v87;
    }
    v10 += 4;
    v72 = v11 <= 4;
    v11 -= 4;
  }
  while (!v72);
  v72 = v11 <= -3;
  a2 = v11 + 3;
  if (!v72)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v106 = vmulq_n_f32(v112, a7))
      {
        j -= 4;
        v89 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v90 = (int32x4_t *)((char *)v89 + v8);
        v91 = a3 + j * v9 + 4 * j;
        v92 = (float *)(v91 + v9);
        v93 = (float32x2_t *)(v91 + 2 * v9);
        v94 = (float32x4_t *)(v91 + v9 + 2 * v9);
        v95 = j;
        v96 = (__int32 *)(a3 + j * v9);
        v97 = *v92;
        v98 = (__int32 *)&v92[-j];
        v99 = *v93;
        v100 = (__int32 *)v93 - j;
        v101 = *v94;
        v102 = (__int32 *)v94 - j;
        v103 = *v89;
        v104 = (float32x2_t *)(a5 + v10 * v8);
        v105 = *v90;
        v106 = (float32x4_t *)((char *)v90 - 4 * j);
        v107 = vtrn1q_s32(v103, v105);
        v108 = vtrn2q_s32(v103, v105);
        *(float32x2_t *)v109.i8 = vmla_n_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v107.i8, v97);
        v110 = vadd_f32(vmla_laneq_f32(vmla_n_f32((float32x2_t)v108.u64[1], *(float32x2_t *)v107.i8, v101.f32[0]), (float32x2_t)v107.u64[1], v101, 2), vmul_lane_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v101.f32, 1));
        v107.u64[1] = (unint64_t)vadd_f32(vmla_n_f32((float32x2_t)v107.u64[1], *(float32x2_t *)v107.i8, v99.f32[0]), vmul_lane_f32(*(float32x2_t *)v108.i8, v99, 1));
        v109.u64[1] = (unint64_t)v110;
        v111 = (float32x4_t)vtrn1q_s32(v107, v109);
        v112 = (float32x4_t)vtrn2q_s32(v107, v109);
        if ((j & 1) != 0)
        {
          v113.i32[0] = *v96++;
          v113.i32[1] = *v98++;
          v113.i32[2] = *v100++;
          v113.i32[3] = *v102++;
          v114 = v104->f32[0];
          v104 = (float32x2_t *)((char *)v104 + 4);
          v115 = v106->f32[0];
          v106 = (float32x4_t *)((char *)v106 + 4);
          v111 = vmlaq_n_f32(v111, v113, v114);
          v112 = vmlaq_n_f32(v112, v113, v115);
          v95 = j - 1;
        }
        if (v95)
        {
          v116 = 0uLL;
          v117 = 0uLL;
          do
          {
            v118.i64[0] = *(_QWORD *)v96;
            v96 += 2;
            v119.i64[0] = *(_QWORD *)v98;
            v98 += 2;
            v120 = *(_QWORD *)v100;
            v100 += 2;
            v121 = *(_QWORD *)v102;
            v102 += 2;
            v122 = *v104++;
            v123 = *(float32x2_t *)v106->f32;
            v106 = (float32x4_t *)((char *)v106 + 8);
            v118.i64[1] = v120;
            v119.i64[1] = v121;
            v124 = (float32x4_t)vtrn1q_s32(v118, v119);
            v7 = (float32x4_t)vtrn2q_s32(v118, v119);
            v111 = vmlaq_n_f32(v111, v124, v122.f32[0]);
            v112 = vmlaq_n_f32(v112, v124, v123.f32[0]);
            v116 = vmlaq_lane_f32(v116, v7, v122, 1);
            v117 = vmlaq_lane_f32(v117, v7, v123, 1);
            v72 = v95 <= 2;
            v95 -= 2;
          }
          while (!v72);
          v111 = vaddq_f32(v111, v116);
          v112 = vaddq_f32(v112, v117);
        }
        *(float32x4_t *)v104->f32 = vmulq_n_f32(v111, a7);
      }
      if (j)
      {
        v125 = (float32x2_t *)(a5 + v10 * v8);
        v126 = (float32x2_t *)((char *)v125 + v8);
        v127 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v128 = *v127;
            v127 = (float32x2_t *)((char *)v127 - v9);
            v129 = (float)(vaddv_f32(vmul_f32(v128, *v126)) + v126[1].f32[0]) * a7;
            v125[1].f32[0] = (float)(vaddv_f32(vmul_f32(v128, *v125)) + v125[1].f32[0]) * a7;
            v126[1].f32[0] = v129;
          }
          v130 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v126)) + (float)(v127->f32[0] * COERCE_FLOAT(*v126)))
               * a7;
          v125->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v125))
                               + (float)(v127->f32[0] * COERCE_FLOAT(*v125)))
                       * a7;
          v126->f32[1] = v130;
        }
        v131 = v126->f32[0] * a7;
        v125->f32[0] = v125->f32[0] * a7;
        v126->f32[0] = v131;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v146 = vmulq_n_f32(v150, a7))
      {
        k -= 4;
        v133 = a3 + k * v9 + 4 * k;
        v134 = (float *)(v133 + v9);
        v135 = (float32x2_t *)(v133 + 2 * v9);
        v136 = (float32x4_t *)(v133 + v9 + 2 * v9);
        v137 = k;
        v138 = (__int32 *)(a3 + k * v9);
        v139 = *v134;
        v140 = (__int32 *)&v134[-k];
        v141 = *v135;
        v142 = (__int32 *)v135 - k;
        v143 = *v136;
        v144 = (__int32 *)v136 - k;
        v145 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v146 = (float32x4_t *)(a5 + v10 * v8);
        v143.i32[3] = 0;
        v147 = vmulq_f32(v143, v145);
        v148 = vmul_f32(v141, *(float32x2_t *)v145.f32);
        v7.f32[0] = v139 * v145.f32[0];
        v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
        *(int32x2_t *)v149.f32 = vtrn1_s32(*(int32x2_t *)v145.f32, *(int32x2_t *)v7.f32);
        *(int32x2_t *)&v149.u32[2] = vtrn1_s32((int32x2_t)vpadd_f32(v148, v148), (int32x2_t)vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32));
        v145.i32[0] = 0;
        v150 = vaddq_f32(v149, v145);
        if ((k & 1) != 0)
        {
          v151.i32[0] = *v138++;
          v151.i32[1] = *v140++;
          v151.i32[2] = *v142++;
          v151.i32[3] = *v144++;
          v152 = v146->f32[0];
          v146 = (float32x4_t *)((char *)v146 + 4);
          v150 = vmlaq_n_f32(v150, v151, v152);
          v137 = k - 1;
        }
        if (v137)
        {
          v153 = 0uLL;
          do
          {
            v154.i64[0] = *(_QWORD *)v138;
            v138 += 2;
            v155.i64[0] = *(_QWORD *)v140;
            v140 += 2;
            v156 = *(_QWORD *)v142;
            v142 += 2;
            v157 = *(_QWORD *)v144;
            v144 += 2;
            v158 = *(float32x2_t *)v146->f32;
            v146 = (float32x4_t *)((char *)v146 + 8);
            v154.i64[1] = v156;
            v155.i64[1] = v157;
            v7 = (float32x4_t)vtrn2q_s32(v154, v155);
            v150 = vmlaq_n_f32(v150, (float32x4_t)vtrn1q_s32(v154, v155), v158.f32[0]);
            v153 = vmlaq_lane_f32(v153, v7, v158, 1);
            v72 = v137 <= 2;
            v137 -= 2;
          }
          while (!v72);
          v150 = vaddq_f32(v150, v153);
        }
      }
      if (k)
      {
        v159 = (float32x2_t *)(a5 + v10 * v8);
        v160 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v161 = *v160;
            v160 = (float32x2_t *)((char *)v160 - v9);
            v159[1].f32[0] = (float)(vaddv_f32(vmul_f32(v161, *v159)) + v159[1].f32[0]) * a7;
          }
          v159->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v159))
                               + (float)(v160->f32[0] * COERCE_FLOAT(*v159)))
                       * a7;
        }
        v159->f32[0] = v159->f32[0] * a7;
      }
    }
  }
  return result;
}

uint64_t Accelerate_AR_sgeqrf(unsigned int *a1, int *a2, uint64_t a3, __CLPK_integer *__lda, __CLPK_real *a5, __CLPK_real *a6, int *a7, int *a8)
{
  __CLPK_integer v8;
  int v9;
  int v10;
  __CLPK_real *v11;
  unsigned int v12;
  __CLPK_integer v14;
  __CLPK_integer v15;
  int v16;
  int v17;
  int v18;
  unsigned int v20;
  unsigned int v21;
  int v22;
  __CLPK_integer v23;
  uint64_t v24;
  int v25;
  int v26;
  __CLPK_real *v27;
  __CLPK_integer v28;
  __CLPK_real *v29;
  __CLPK_integer v30;
  unsigned int v32;
  __CLPK_integer v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  uint64_t v39;
  float *v40;
  int v42;
  __CLPK_integer __info[2];
  __CLPK_integer __m[2];
  __CLPK_integer v45;
  __CLPK_integer __n[3];

  *(_QWORD *)__info = 0;
  *(_QWORD *)__m = 0;
  v42 = 0;
  v8 = *__lda;
  *a8 = 0;
  v9 = *a2;
  v10 = 32 * *a2;
  *a6 = (float)v10;
  v11 = a6 - 1;
  v12 = *a1;
  if ((*a1 & 0x80000000) != 0)
  {
    v15 = 1;
    v16 = -1;
    goto LABEL_16;
  }
  if (v9 < 0)
  {
    v15 = 2;
    v16 = -2;
    goto LABEL_16;
  }
  if (v12 <= 1)
    v14 = 1;
  else
    v14 = *a1;
  if (*__lda < v14)
  {
    v15 = 4;
    v16 = -4;
LABEL_16:
    *a8 = v16;
    __n[0] = v15;
    xerbla_();
    return 0;
  }
  v17 = *a7;
  if (v9 <= 1)
    v18 = 1;
  else
    v18 = v9;
  if (v17 < v18 && v17 != -1)
  {
    v15 = 7;
    v16 = -7;
    goto LABEL_16;
  }
  if (v17 == -1)
    return 0;
  if ((int)v12 >= v9)
    v20 = v9;
  else
    v20 = *a1;
  if (!v20)
  {
    *a6 = 1.0;
    return 0;
  }
  if (v20 < 0x21)
  {
    v21 = 0;
  }
  else
  {
    if (v20 >= 0x81)
    {
      v42 = v9;
      if (v17 >= v10)
      {
        v21 = 128;
        v22 = 32;
      }
      else
      {
        v45 = 2;
        __n[0] = 2;
        v21 = 128;
        v22 = v17 / v9;
      }
      v9 *= 32;
      goto LABEL_33;
    }
    v21 = 128;
  }
  v22 = 32;
LABEL_33:
  v33 = v8;
  v39 = a3 + 4 * ~v8;
  v40 = a6;
  v23 = 1;
  if (v22 >= 2 && v22 < (int)v20 && v20 > v21)
  {
    __n[0] = v20 - v21;
    if ((int)(v20 - v21) >= 1)
    {
      v24 = 0;
      v25 = 0;
      v26 = v8 + 1;
      v35 = 4 * v22;
      v36 = v22;
      v34 = v22 * (v8 + 1);
      v27 = a5;
      v37 = v22;
      v38 = a1;
      v32 = v20;
      do
      {
        v28 = v20 + v25;
        if ((int)(v20 + v25) >= v22)
          v28 = v22;
        __info[1] = v28;
        __m[1] = v25 + *a1;
        v29 = (__CLPK_real *)(v39 + 4 * v26);
        sgeqr2_(&__m[1], &__info[1], v29, __lda, v27, a6, __info);
        if (v23 + __info[1] <= *a2)
        {
          __m[1] = v25 + *v38;
          Accelerate_AR_slarft((uint64_t)"Forward", (uint64_t)"Columnwise", &__m[1], &__info[1], (uint64_t)v29, __lda, (uint64_t)v27, v40, &v42);
          v20 = v32;
          __m[1] = v25 + *v38;
          __m[0] = v25 + *a2 - __info[1];
          Accelerate_AR_slarfb((uint64_t)"Left", "Transpose", (uint64_t)"Forward", (uint64_t)"Columnwise", &__m[1], __m, &__info[1], v29, __lda, (int)v40, &v42, (__CLPK_real *)(v39 + 4 * (v24 + v33 * (__info[1] + v23)) + 4), __lda, (uint64_t)&v11[__info[1] + 1], &v42);
        }
        v22 = v37;
        a1 = v38;
        v25 -= v37;
        v27 = (__CLPK_real *)((char *)v27 + v35);
        v23 += v37;
        v24 += v36;
        v26 += v34;
        a6 = v40;
      }
      while (v23 <= __n[0]);
    }
  }
  if (v23 <= (int)v20)
  {
    v30 = *a2 - v23 + 1;
    v45 = *a1 - v23 + 1;
    __n[0] = v30;
    sgeqr2_(&v45, __n, (__CLPK_real *)(v39 + 4 * (v23 + v23 * v33)), __lda, &a5[v23 - 1], v40, __info);
    a6 = v40;
  }
  *a6 = (float)v9;
  return 0;
}

void strsm_noPack_RLTU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v11;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x2_t *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  char *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  float v66;

  v11 = a7;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v17 = 2;
      }
      else
      {
        v22 = *(float *)(a3 + 4);
        v17 = 2;
        v23 = __X;
        v24 = __N;
        do
        {
          v25 = *v23 * v11;
          *v23 = v25;
          v23[a6] = (float)(v23[a6] * v11) - (float)(v25 * v22);
          ++v23;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v17 = 1;
      cblas_sscal(__N, a7, __X, 1);
      v11 = a7;
    }
    else
    {
      v17 = 0;
    }
  }
  else if (__N < 1)
  {
    v17 = 3;
  }
  else
  {
    v14 = *(float *)(a3 + 4);
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a3 + 4 * a4 + 8);
    v17 = 3;
    v18 = __X;
    v19 = __N;
    do
    {
      v20 = *v18 * v11;
      *v18 = v20;
      v21 = (float)(v18[a6] * v11) - (float)(v20 * v14);
      v18[a6] = v21;
      v18[2 * a6] = -(float)((float)((float)(v16 * v21) + (float)(*v18 * v15)) - (float)(v18[2 * a6] * v11));
      ++v18;
      --v19;
    }
    while (v19);
  }
  if (v17 < a2)
  {
    v26 = 8 * a4;
    v27 = 8 * a6;
    v28 = v17;
    while (1)
    {
      if (__N >= 4)
      {
        v29 = 0;
        v30 = (float32x2_t *)(a3 + 4 * v28);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v29];
          v32 = 0uLL;
          if ((v17 & 1) != 0)
          {
            v38 = vmlaq_n_f32((float32x4_t)0, *v31, COERCE_FLOAT(*(_OWORD *)v30->f32));
            v35 = vmlaq_lane_f32((float32x4_t)0, *v31, *v30, 1);
            v34 = vmlaq_laneq_f32((float32x4_t)0, *v31, *(float32x4_t *)v30->f32, 2);
            v33 = vmlaq_laneq_f32((float32x4_t)0, *v31, *(float32x4_t *)v30->f32, 3);
            v31 = (float32x4_t *)((char *)v31 + 4 * a6);
            v36 = v28 - 1;
            v37 = (float32x2_t *)((char *)v30 + 4 * a4);
            if (v28 != 1)
            {
LABEL_22:
              v39 = 0uLL;
              v40 = 0uLL;
              v41 = 0uLL;
              do
              {
                v38 = vmlaq_n_f32(v38, *v31, COERCE_FLOAT(*(_OWORD *)v37->f32));
                v35 = vmlaq_lane_f32(v35, *v31, *v37, 1);
                v34 = vmlaq_laneq_f32(v34, *v31, *(float32x4_t *)v37->f32, 2);
                v33 = vmlaq_laneq_f32(v33, *v31, *(float32x4_t *)v37->f32, 3);
                v42 = *(float32x4_t *)&v37->f32[a4];
                v43 = *(float32x4_t *)((char *)v31 + 4 * a6);
                v39 = vmlaq_n_f32(v39, v43, v42.f32[0]);
                v40 = vmlaq_lane_f32(v40, v43, *(float32x2_t *)v42.f32, 1);
                v41 = vmlaq_laneq_f32(v41, v43, v42, 2);
                v32 = vmlaq_laneq_f32(v32, v43, v42, 3);
                v37 = (float32x2_t *)((char *)v37 + v26);
                v31 = (float32x4_t *)((char *)v31 + v27);
                v36 -= 2;
              }
              while (v36);
              goto LABEL_27;
            }
          }
          else
          {
            v33 = 0uLL;
            v34 = 0uLL;
            v35 = 0uLL;
            v36 = v28;
            v37 = (float32x2_t *)(a3 + 4 * v28);
            v38 = 0uLL;
            if (v28)
              goto LABEL_22;
          }
          v41 = 0uLL;
          v40 = 0uLL;
          v39 = 0uLL;
LABEL_27:
          v44 = vaddq_f32(v39, v38);
          v45 = vaddq_f32(v40, v35);
          v46 = vaddq_f32(v32, v33);
          v47 = vmulq_n_f32(*v31, v11);
          v48 = vsubq_f32(v47, v44);
          v49 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 4 * a6), v11), v45);
          v45.i32[0] = v37->i32[1];
          v47.i32[0] = v37[1].i32[0];
          v50 = vmlsq_lane_f32(v49, v48, *(float32x2_t *)v45.f32, 0);
          v51 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 8 * a6), v11), vaddq_f32(v41, v34)), v48, *(float32x2_t *)v47.f32, 0);
          v45.i32[0] = v37[1].i32[1];
          v52 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 12 * a6), v11), v46), v48, *(float32x2_t *)v45.f32, 0);
          v53 = (char *)v37 + 4 * a4;
          v45.i32[0] = *((_DWORD *)v53 + 2);
          v47.i32[0] = *((_DWORD *)v53 + 3);
          v54 = vmlsq_lane_f32(v51, v50, *(float32x2_t *)v45.f32, 0);
          v45.i32[0] = *(_DWORD *)&v53[4 * a4 + 12];
          *v31 = v48;
          *(float32x4_t *)((char *)v31 + 4 * a6) = v50;
          *(float32x4_t *)((char *)v31 + 8 * a6) = v54;
          *(float32x4_t *)((char *)v31 + 12 * a6) = vmlsq_lane_f32(vmlsq_lane_f32(v52, v50, *(float32x2_t *)v47.f32, 0), v54, *(float32x2_t *)v45.f32, 0);
          v29 += 4;
          if (v29 >= __N - 3)
            goto LABEL_30;
        }
      }
      v29 = 0;
LABEL_30:
      if (v29 < __N)
        break;
LABEL_38:
      v28 += 4;
      if (v28 >= a2)
        return;
    }
    v55 = (float32x4_t *)(a3 + 4 * v28);
    while (1)
    {
      v56 = &__X[v29];
      v57 = 0uLL;
      if ((v17 & 1) != 0)
      {
        v58 = vmlaq_n_f32((float32x4_t)0, *v55, *v56);
        v56 += a6;
        v59 = v28 - 1;
        v60 = (float32x4_t *)((char *)v55 + 4 * a4);
        if (v28 != 1)
        {
          do
          {
LABEL_36:
            v58 = vmlaq_n_f32(v58, *v60, *v56);
            v57 = vmlaq_n_f32(v57, *(float32x4_t *)((char *)v60 + 4 * a4), v56[a6]);
            v60 = (float32x4_t *)((char *)v60 + v26);
            v56 = (float *)((char *)v56 + v27);
            v59 -= 2;
          }
          while (v59);
        }
      }
      else
      {
        v58 = 0uLL;
        v59 = v28;
        v60 = (float32x4_t *)(a3 + 4 * v28);
        if (v28)
          goto LABEL_36;
      }
      v61 = vaddq_f32(v57, v58);
      v62 = -(float)(v61.f32[0] - (float)(*v56 * v11));
      v63 = (float)-(float)(v61.f32[1] - (float)(v56[a6] * v11)) - (float)(v62 * v60->f32[1]);
      v64 = (float)-(float)(v61.f32[2] - (float)(v56[2 * a6] * v11)) - (float)(v62 * v60->f32[2]);
      v61.f32[0] = (float)-(float)(v61.f32[3] - (float)(v56[3 * a6] * v11)) - (float)(v62 * v60->f32[3]);
      v65 = &v60->f32[a4];
      v66 = v64 - (float)(v63 * v65[2]);
      v61.f32[0] = (float)(v61.f32[0] - (float)(v63 * v65[3])) - (float)(v66 * v65[a4 + 3]);
      *v56 = v62;
      v56[a6] = v63;
      v56[2 * a6] = v66;
      v56[3 * a6] = v61.f32[0];
      if (++v29 == __N)
        goto LABEL_38;
    }
  }
}

void strsm_noPack_RLTN(uint64_t __N, uint64_t a2, float *a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v11;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x2_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x2_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  char *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float *v69;
  float32x4_t v70;
  float32x4_t *v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float *v78;
  float v79;
  float v80;

  v11 = a7;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v20 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = v11 / *a3;
        v20 = 2;
        v28 = __X;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = v27 * *v28;
          *v28 = v31;
          v28[a6] = v30 * (float)((float)(v28[a6] * v11) - (float)(v31 * v26));
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v20 = 1;
      cblas_sscal(__N, a7 / *a3, __X, 1);
      v11 = a7;
    }
    else
    {
      v20 = 0;
    }
  }
  else if (__N < 1)
  {
    v20 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = v11 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = 3;
    v21 = __X;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *v21;
      *v21 = v24;
      v25 = v19 * (float)((float)(v21[a6] * v11) - (float)(v24 * v15));
      v21[a6] = v25;
      v21[2 * a6] = v23
                  * (float)-(float)((float)((float)(v18 * v25) + (float)(*v21 * v14)) - (float)(v21[2 * a6] * v11));
      ++v21;
      --v22;
    }
    while (v22);
  }
  if (v20 < a2)
  {
    v32 = a4 + 1;
    v33 = 8 * a4;
    v34 = 8 * a6;
    v35 = v20;
    while (1)
    {
      v36 = 1.0 / a3[v35 * v32];
      v37 = 1.0 / a3[v32 + v35 * v32];
      v38 = 1.0 / a3[(v35 + 2) * v32];
      v39 = 1.0 / a3[(v35 + 3) * v32];
      if (__N >= 4)
      {
        v40 = 0;
        v41 = (float32x2_t *)&a3[v35];
        while (1)
        {
          v42 = (float32x4_t *)&__X[v40];
          v43 = 0uLL;
          if ((v20 & 1) != 0)
          {
            v49 = vmlaq_n_f32((float32x4_t)0, *v42, COERCE_FLOAT(*(_OWORD *)v41->f32));
            v46 = vmlaq_lane_f32((float32x4_t)0, *v42, *v41, 1);
            v45 = vmlaq_laneq_f32((float32x4_t)0, *v42, *(float32x4_t *)v41->f32, 2);
            v44 = vmlaq_laneq_f32((float32x4_t)0, *v42, *(float32x4_t *)v41->f32, 3);
            v42 = (float32x4_t *)((char *)v42 + 4 * a6);
            v47 = v35 - 1;
            v48 = (float32x2_t *)((char *)v41 + 4 * a4);
            if (v35 != 1)
            {
LABEL_22:
              v50 = 0uLL;
              v51 = 0uLL;
              v52 = 0uLL;
              do
              {
                v49 = vmlaq_n_f32(v49, *v42, COERCE_FLOAT(*(_OWORD *)v48->f32));
                v46 = vmlaq_lane_f32(v46, *v42, *v48, 1);
                v45 = vmlaq_laneq_f32(v45, *v42, *(float32x4_t *)v48->f32, 2);
                v44 = vmlaq_laneq_f32(v44, *v42, *(float32x4_t *)v48->f32, 3);
                v53 = *(float32x4_t *)&v48->f32[a4];
                v54 = *(float32x4_t *)((char *)v42 + 4 * a6);
                v50 = vmlaq_n_f32(v50, v54, v53.f32[0]);
                v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)v53.f32, 1);
                v52 = vmlaq_laneq_f32(v52, v54, v53, 2);
                v43 = vmlaq_laneq_f32(v43, v54, v53, 3);
                v48 = (float32x2_t *)((char *)v48 + v33);
                v42 = (float32x4_t *)((char *)v42 + v34);
                v47 -= 2;
              }
              while (v47);
              goto LABEL_27;
            }
          }
          else
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = v35;
            v48 = (float32x2_t *)&a3[v35];
            v49 = 0uLL;
            if (v35)
              goto LABEL_22;
          }
          v52 = 0uLL;
          v51 = 0uLL;
          v50 = 0uLL;
LABEL_27:
          v55 = vaddq_f32(v50, v49);
          v56 = vaddq_f32(v43, v44);
          v57 = vmulq_n_f32(*(float32x4_t *)((char *)v42 + 8 * a6), v11);
          v58 = vsubq_f32(vmulq_n_f32(*v42, v11), v55);
          v59 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v42 + 4 * a6), v11), vaddq_f32(v51, v46));
          v60 = vsubq_f32(v57, vaddq_f32(v52, v45));
          v61 = vmulq_n_f32(v58, v36);
          v58.i32[0] = v48->i32[1];
          v57.i32[0] = v48[1].i32[0];
          v62 = vmlsq_lane_f32(v59, v61, *(float32x2_t *)v58.f32, 0);
          v63 = vmlsq_lane_f32(v60, v61, *(float32x2_t *)v57.f32, 0);
          v58.i32[0] = v48[1].i32[1];
          v64 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v42 + 12 * a6), v11), v56), v61, *(float32x2_t *)v58.f32, 0);
          v65 = (char *)v48 + 4 * a4;
          v66 = vmulq_n_f32(v62, v37);
          v58.i32[0] = *((_DWORD *)v65 + 2);
          v57.i32[0] = *((_DWORD *)v65 + 3);
          v67 = vmulq_n_f32(vmlsq_lane_f32(v63, v66, *(float32x2_t *)v58.f32, 0), v38);
          v58.i32[0] = *(_DWORD *)&v65[4 * a4 + 12];
          *v42 = v61;
          *(float32x4_t *)((char *)v42 + 4 * a6) = v66;
          *(float32x4_t *)((char *)v42 + 8 * a6) = v67;
          *(float32x4_t *)((char *)v42 + 12 * a6) = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v64, v66, *(float32x2_t *)v57.f32, 0), v67, *(float32x2_t *)v58.f32, 0), v39);
          v40 += 4;
          if (v40 >= __N - 3)
            goto LABEL_30;
        }
      }
      v40 = 0;
LABEL_30:
      if (v40 < __N)
        break;
LABEL_38:
      v35 += 4;
      if (v35 >= a2)
        return;
    }
    v68 = (float32x4_t *)&a3[v35];
    while (1)
    {
      v69 = &__X[v40];
      v70 = 0uLL;
      if ((v20 & 1) != 0)
      {
        v73 = vmlaq_n_f32((float32x4_t)0, *v68, *v69);
        v69 += a6;
        v71 = (float32x4_t *)((char *)v68 + 4 * a4);
        v72 = v35 - 1;
        if (v35 != 1)
        {
          do
          {
LABEL_36:
            v73 = vmlaq_n_f32(v73, *v71, *v69);
            v70 = vmlaq_n_f32(v70, *(float32x4_t *)((char *)v71 + 4 * a4), v69[a6]);
            v69 = (float *)((char *)v69 + v34);
            v71 = (float32x4_t *)((char *)v71 + v33);
            v72 -= 2;
          }
          while (v72);
        }
      }
      else
      {
        v71 = (float32x4_t *)&a3[v35];
        v72 = v35;
        v73 = 0uLL;
        if (v35)
          goto LABEL_36;
      }
      v74 = vaddq_f32(v73, v70);
      v75 = v36 * (float)-(float)(v74.f32[0] - (float)(*v69 * v11));
      v76 = (float)-(float)(v74.f32[1] - (float)(v69[a6] * v11)) - (float)(v75 * v71->f32[1]);
      v77 = (float)-(float)(v74.f32[2] - (float)(v69[2 * a6] * v11)) - (float)(v75 * v71->f32[2]);
      v74.f32[0] = (float)-(float)(v74.f32[3] - (float)(v69[3 * a6] * v11)) - (float)(v75 * v71->f32[3]);
      v78 = &v71->f32[a4];
      v79 = v37 * v76;
      v80 = v38 * (float)(v77 - (float)(v79 * v78[2]));
      v74.f32[0] = v39 * (float)((float)(v74.f32[0] - (float)(v79 * v78[3])) - (float)(v80 * v78[a4 + 3]));
      *v69 = v75;
      v69[a6] = v79;
      v69[2 * a6] = v80;
      v69[3 * a6] = v74.f32[0];
      if (++v40 == __N)
        goto LABEL_38;
    }
  }
}

void strsm_noPack_RLNU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float *v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  float *v52;
  float *v53;
  float32x4_t v54;
  float *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  __int32 *v86;
  uint64_t v87;
  __int32 *v88;
  uint64_t v89;
  __int32 *v90;
  __int32 *v91;
  uint64_t v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  float32x4_t v98;
  uint64_t v99;
  float32x4_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  float32x4_t v105;
  float v106;
  uint64_t v107;
  int32x4_t v108;
  uint64_t v109;
  int32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float32x4_t v114;
  float *v115;
  float v116;
  float v117;
  float v118;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;

  v9 = __N;
  v10 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v22 = *(float *)(a3 + 4 * (v10 + (a2 - 2) * a4));
        v23 = (float *)(a5 + 4 * v10 * a6);
        v24 = (float *)(a5 + a6 * (4 * a2 - 8));
        v25 = __N;
        do
        {
          v26 = *v23 * a7;
          *v23++ = v26;
          *v24 = (float)(*v24 * a7) - (float)(v26 * v22);
          ++v24;
          --v25;
        }
        while (v25);
      }
      v10 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      v125 = a7;
      cblas_sscal(__N, a7, (float *)(a5 + 4 * v10 * a6), 1);
      a7 = v125;
      v10 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v11 = *(float *)(a3 + 4 * (v10 + (a2 - 2) * a4));
      v12 = (a2 - 3) * a4;
      v13 = *(float *)(a3 + 4 * (v12 + v10));
      v14 = *(float *)(a3 + 4 * (v12 + a2 - 2));
      v15 = (float *)(a5 + 4 * v10 * a6);
      v16 = (float *)(a5 + a6 * (4 * a2 - 8));
      v17 = (float *)(a5 + a6 * (4 * a2 - 12));
      v18 = __N;
      do
      {
        v19 = *v15 * a7;
        *v15 = v19;
        v20 = (float)(*v16 * a7) - (float)(v19 * v11);
        *v16++ = v20;
        v21 = *v15++;
        *v17 = -(float)((float)((float)(v14 * v20) + (float)(v21 * v13)) - (float)(*v17 * a7));
        ++v17;
        --v18;
      }
      while (v18);
    }
    v10 = a2 - 4;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    v27 = v10 + 1;
    v124 = v9 - 3;
    v126 = v9;
    v28 = 8 * a6;
    while (1)
    {
      v29 = v27 - 4;
      v122 = v27 - 4;
      v123 = v27;
      v30 = 0;
      if (v9 >= 4)
      {
        v31 = a3 + 4 * v29;
        v32 = a3 + 4 * v27;
        v33 = (float *)(v32 + 4 * v29 * a4);
        v34 = (v27 - 3) * a4;
        v35 = (float *)(v32 + 4 * v34);
        v36 = (v27 - 2) * a4;
        v37 = (float *)(v32 + 4 * v36);
        v38 = (float *)(v32 + 4 * (v27 - 1) * a4);
        v39 = v27 * a6;
        v40 = 4;
        if (a2 - v29 > 4)
          v40 = a2 - v29;
        v41 = (_DWORD *)(v31 + 4 * v29 * a4);
        v42 = v31 + 4 * v34;
        v43 = v31 + 4 * v36;
        v44 = v29 * a6;
        do
        {
          v45 = a5 + 4 * v30;
          v46 = (float32x4_t *)(v45 + 4 * v39);
          v47 = 0uLL;
          if ((v40 & 1) != 0)
          {
            v69 = *v46;
            v54 = vmlaq_n_f32((float32x4_t)0, *v46, *v33);
            v50 = vmlaq_n_f32((float32x4_t)0, *v46, *v35);
            v49 = vmlaq_n_f32((float32x4_t)0, *v46, *v37);
            v46 = (float32x4_t *)((char *)v46 + 4 * a6);
            v51 = v40 - 5;
            v48 = vmlaq_n_f32((float32x4_t)0, v69, *v38);
            v52 = v38 + 1;
            v53 = v37 + 1;
            v55 = v35 + 1;
            v56 = v33 + 1;
            if (v40 != 5)
            {
LABEL_21:
              v57 = 0uLL;
              v58 = 0uLL;
              v59 = 0uLL;
              do
              {
                v60 = *v56;
                v61 = v56[1];
                v56 += 2;
                v54 = vmlaq_n_f32(v54, *v46, v60);
                v62 = *v55;
                v63 = v55[1];
                v55 += 2;
                v50 = vmlaq_n_f32(v50, *v46, v62);
                v64 = *v53;
                v65 = v53[1];
                v53 += 2;
                v49 = vmlaq_n_f32(v49, *v46, v64);
                v66 = *v52;
                v67 = v52[1];
                v52 += 2;
                v48 = vmlaq_n_f32(v48, *v46, v66);
                v68 = *(float32x4_t *)((char *)v46 + 4 * a6);
                v57 = vmlaq_n_f32(v57, v68, v61);
                v58 = vmlaq_n_f32(v58, v68, v63);
                v59 = vmlaq_n_f32(v59, v68, v65);
                v46 = (float32x4_t *)((char *)v46 + v28);
                v47 = vmlaq_n_f32(v47, v68, v67);
                v51 -= 2;
              }
              while (v51);
              goto LABEL_26;
            }
          }
          else
          {
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = 0uLL;
            v51 = v40 - 4;
            v52 = v38;
            v53 = v37;
            v54 = 0uLL;
            v55 = v35;
            v56 = v33;
            if (v40 != 4)
              goto LABEL_21;
          }
          v59 = 0uLL;
          v58 = 0uLL;
          v57 = 0uLL;
LABEL_26:
          v70 = vaddq_f32(v57, v54);
          v71 = vaddq_f32(v59, v49);
          v72 = vaddq_f32(v47, v48);
          v73 = (float32x4_t *)(v45 + 4 * v44);
          v74 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 4 * a6), a7);
          v75 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 8 * a6), a7);
          v76 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 12 * a6), a7);
          v77 = vsubq_f32(v74, vaddq_f32(v58, v50));
          v78 = vsubq_f32(v75, v71);
          v79 = vsubq_f32(v76, v72);
          v74.i32[0] = v41[3];
          v80 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*v73, a7), v70), v79, *(float32x2_t *)v74.f32, 0);
          v75.i32[0] = *(_DWORD *)(v42 + 8);
          v74.i32[0] = *(_DWORD *)(v42 + 12);
          v81 = vmlsq_lane_f32(v77, v79, *(float32x2_t *)v74.f32, 0);
          v74.i32[0] = *(_DWORD *)(v43 + 12);
          v82 = vmlsq_lane_f32(v78, v79, *(float32x2_t *)v74.f32, 0);
          v76.i32[0] = v41[1];
          v74.i32[0] = v41[2];
          v83 = vmlsq_lane_f32(v81, v82, *(float32x2_t *)v75.f32, 0);
          *v73 = vmlsq_lane_f32(vmlsq_lane_f32(v80, v82, *(float32x2_t *)v74.f32, 0), v83, *(float32x2_t *)v76.f32, 0);
          *(float32x4_t *)((char *)v73 + 4 * a6) = v83;
          *(float32x4_t *)((char *)v73 + 8 * a6) = v82;
          *(float32x4_t *)((char *)v73 + 12 * a6) = v79;
          v30 += 4;
        }
        while (v30 < v124);
      }
      v9 = v126;
      if (v30 < v126)
        break;
LABEL_37:
      v27 = v122;
      if (v123 < 5)
        return;
    }
    v84 = a3 + 4 * v122;
    v85 = a3 + 4 * v123;
    v86 = (__int32 *)(v85 + 4 * v122 * a4);
    v87 = (v123 - 3) * a4;
    v88 = (__int32 *)(v85 + 4 * v87);
    v89 = (v123 - 2) * a4;
    v90 = (__int32 *)(v85 + 4 * v89);
    v91 = (__int32 *)(v85 + 4 * (v123 - 1) * a4);
    v92 = 4;
    if (a2 - v122 > 4)
      v92 = a2 - v122;
    v93 = (float *)(v84 + 4 * v122 * a4);
    v94 = v84 + 4 * v87;
    v95 = v84 + 4 * v89;
    while (1)
    {
      v96 = a5 + 4 * v30;
      v97 = (float *)(v96 + 4 * v123 * a6);
      v98 = 0uLL;
      if ((v92 & 1) != 0)
      {
        v105.i32[0] = *v86;
        v105.i32[1] = *v88;
        v105.i32[2] = *v90;
        v105.i32[3] = *v91;
        v106 = *v97;
        v97 += a6;
        v99 = v92 - 5;
        v100 = vmlaq_n_f32((float32x4_t)0, v105, v106);
        v101 = (uint64_t *)(v91 + 1);
        v102 = (uint64_t *)(v90 + 1);
        v103 = (uint64_t *)(v88 + 1);
        v104 = (uint64_t *)(v86 + 1);
        if (v92 != 5)
        {
          do
          {
LABEL_35:
            v107 = *v104++;
            v108.i64[0] = v107;
            v109 = *v103++;
            v110.i64[0] = v109;
            v111 = *v102++;
            v112 = v111;
            v113 = *v101++;
            v108.i64[1] = v112;
            v110.i64[1] = v113;
            v100 = vmlaq_n_f32(v100, (float32x4_t)vtrn1q_s32(v108, v110), *v97);
            v98 = vmlaq_n_f32(v98, (float32x4_t)vtrn2q_s32(v108, v110), v97[a6]);
            v97 = (float *)((char *)v97 + v28);
            v99 -= 2;
          }
          while (v99);
        }
      }
      else
      {
        v99 = v92 - 4;
        v100 = 0uLL;
        v101 = (uint64_t *)v91;
        v102 = (uint64_t *)v90;
        v103 = (uint64_t *)v88;
        v104 = (uint64_t *)v86;
        if (v92 != 4)
          goto LABEL_35;
      }
      v114 = vaddq_f32(v98, v100);
      v115 = (float *)(v96 + 4 * v122 * a6);
      v116 = -(float)(v114.f32[3] - (float)(v115[3 * a6] * a7));
      v117 = (float)-(float)(v114.f32[2] - (float)(v115[2 * a6] * a7)) - (float)(v116 * *(float *)(v95 + 12));
      v118 = (float)((float)-(float)(v114.f32[1] - (float)(v115[a6] * a7)) - (float)(v116 * *(float *)(v94 + 12)))
           - (float)(v117 * *(float *)(v94 + 8));
      *v115 = (float)((float)((float)-(float)(v114.f32[0] - (float)(*v115 * a7)) - (float)(v116 * v93[3]))
                    - (float)(v117 * v93[2]))
            - (float)(v118 * v93[1]);
      v115[a6] = v118;
      v115[2 * a6] = v117;
      v115[3 * a6] = v116;
      ++v30;
      v9 = v126;
      if (v30 == v126)
        goto LABEL_37;
    }
  }
}

void strsm_noPack_RLNN(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float32x4_t v69;
  float *v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  __int32 *v101;
  __int32 *v102;
  uint64_t v103;
  __int32 *v104;
  uint64_t v105;
  __int32 *v106;
  float *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float *v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  float32x4_t v119;
  float v120;
  uint64_t v121;
  int32x4_t v122;
  uint64_t v123;
  int32x4_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x4_t v128;
  float *v129;
  float v130;
  float v131;
  float v132;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;

  v9 = a3;
  v10 = a7;
  v11 = __N;
  v12 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v28 = (a2 - 2) * a4;
        v29 = *(float *)(a3 + 4 * (v28 + v12));
        v30 = v10 / *(float *)(a3 + 4 * (v12 + v12 * a4));
        v31 = *(float *)(a3 + 4 * (v28 + a2 - 2));
        v32 = (float *)(a5 + 4 * v12 * a6);
        v33 = (float *)(a5 + a6 * (4 * a2 - 8));
        v34 = __N;
        v35 = 1.0 / v31;
        do
        {
          v36 = v30 * *v32;
          *v32++ = v36;
          *v33 = v35 * (float)((float)(*v33 * v10) - (float)(v36 * v29));
          ++v33;
          --v34;
        }
        while (v34);
      }
      v12 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *(float *)(a3 + 4 * (v12 + v12 * a4)), (float *)(a5 + 4 * v12 * a6), 1);
      v10 = a7;
      v12 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v13 = (a2 - 2) * a4;
      v14 = *(float *)(a3 + 4 * (v13 + v12));
      v15 = (a2 - 3) * a4;
      v16 = *(float *)(a3 + 4 * (v15 + v12));
      v17 = *(float *)(a3 + 4 * (v15 + a2 - 2));
      v18 = v10 / *(float *)(a3 + 4 * (v12 + v12 * a4));
      v19 = 1.0 / *(float *)(a3 + 4 * (v13 + a2 - 2));
      v20 = (float *)(a5 + 4 * v12 * a6);
      v21 = (float *)(a5 + a6 * (4 * a2 - 8));
      v22 = (float *)(a5 + a6 * (4 * a2 - 12));
      v23 = __N;
      v24 = 1.0 / *(float *)(a3 + 4 * (v15 + a2 - 3));
      do
      {
        v25 = v18 * *v20;
        *v20 = v25;
        v26 = v19 * (float)((float)(*v21 * v10) - (float)(v25 * v14));
        *v21++ = v26;
        v27 = *v20++;
        *v22 = v24 * (float)-(float)((float)((float)(v17 * v26) + (float)(v27 * v16)) - (float)(*v22 * v10));
        ++v22;
        --v23;
      }
      while (v23);
    }
    v12 = a2 - 4;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v37 = v12 + 1;
    v141 = v11 - 3;
    v143 = v11;
    v38 = 8 * a6;
    v138 = v9;
    while (1)
    {
      v39 = v37 - 4;
      v40 = (v37 - 4) * a4;
      v41 = 1.0 / *(float *)(v9 + 4 * (v40 + v37 - 4));
      v42 = (v37 - 3) * a4;
      v43 = 1.0 / *(float *)(v9 + 4 * (v37 - 3 + v42));
      v44 = (v37 - 2) * a4;
      v45 = 1.0 / *(float *)(v9 + 4 * (v37 - 2 + v44));
      v46 = (v37 - 1) * a4;
      v47 = 1.0 / *(float *)(v9 + 4 * (v37 - 1 + v46));
      v139 = v37 - 4;
      v140 = v37;
      v136 = v42;
      v137 = v40;
      v135 = v44;
      v48 = 0;
      if (v11 >= 4)
      {
        v49 = v9 + 4 * v39;
        v50 = v9 + 4 * v37;
        v51 = (float *)(v50 + 4 * v40);
        v52 = (float *)(v50 + 4 * v42);
        v53 = (float *)(v50 + 4 * v44);
        if (a2 - v39 <= 4)
          v54 = 4;
        else
          v54 = a2 - v39;
        v55 = (float *)(v50 + 4 * v46);
        v56 = v39 * a6;
        v57 = (_DWORD *)(v49 + 4 * v40);
        v58 = v49 + 4 * (v37 - 3) * a4;
        v59 = v49 + 4 * v44;
        do
        {
          v60 = a5 + 4 * v48;
          v61 = (float32x4_t *)(v60 + 4 * v37 * a6);
          v62 = 0uLL;
          if ((v54 & 1) != 0)
          {
            v84 = *v61;
            v69 = vmlaq_n_f32((float32x4_t)0, *v61, *v51);
            v65 = vmlaq_n_f32((float32x4_t)0, *v61, *v52);
            v64 = vmlaq_n_f32((float32x4_t)0, *v61, *v53);
            v61 = (float32x4_t *)((char *)v61 + 4 * a6);
            v66 = v54 - 5;
            v63 = vmlaq_n_f32((float32x4_t)0, v84, *v55);
            v67 = v55 + 1;
            v68 = v53 + 1;
            v70 = v52 + 1;
            v71 = v51 + 1;
            if (v54 != 5)
            {
LABEL_22:
              v72 = 0uLL;
              v73 = 0uLL;
              v74 = 0uLL;
              do
              {
                v75 = *v71;
                v76 = v71[1];
                v71 += 2;
                v69 = vmlaq_n_f32(v69, *v61, v75);
                v77 = *v70;
                v78 = v70[1];
                v70 += 2;
                v65 = vmlaq_n_f32(v65, *v61, v77);
                v79 = *v68;
                v80 = v68[1];
                v68 += 2;
                v64 = vmlaq_n_f32(v64, *v61, v79);
                v81 = *v67;
                v82 = v67[1];
                v67 += 2;
                v63 = vmlaq_n_f32(v63, *v61, v81);
                v83 = *(float32x4_t *)((char *)v61 + 4 * a6);
                v72 = vmlaq_n_f32(v72, v83, v76);
                v73 = vmlaq_n_f32(v73, v83, v78);
                v74 = vmlaq_n_f32(v74, v83, v80);
                v61 = (float32x4_t *)((char *)v61 + v38);
                v62 = vmlaq_n_f32(v62, v83, v82);
                v66 -= 2;
              }
              while (v66);
              goto LABEL_27;
            }
          }
          else
          {
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = v54 - 4;
            v67 = v55;
            v68 = v53;
            v69 = 0uLL;
            v70 = v52;
            v71 = v51;
            if (v54 != 4)
              goto LABEL_22;
          }
          v74 = 0uLL;
          v73 = 0uLL;
          v72 = 0uLL;
LABEL_27:
          v85 = vaddq_f32(v72, v69);
          v86 = vaddq_f32(v74, v64);
          v87 = vaddq_f32(v62, v63);
          v88 = (float32x4_t *)(v60 + 4 * v56);
          v89 = vmulq_n_f32(*v88, v10);
          v90 = vmulq_n_f32(*(float32x4_t *)((char *)v88 + 4 * a6), v10);
          v91 = vmulq_n_f32(*(float32x4_t *)((char *)v88 + 8 * a6), v10);
          v92 = vsubq_f32(v89, v85);
          v93 = vsubq_f32(v90, vaddq_f32(v73, v65));
          v94 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v88 + 12 * a6), v10), v87), v47);
          v89.i32[0] = v57[3];
          v95 = vmlsq_lane_f32(v92, v94, *(float32x2_t *)v89.f32, 0);
          v90.i32[0] = *(_DWORD *)(v58 + 8);
          v89.i32[0] = *(_DWORD *)(v58 + 12);
          v96 = vmlsq_lane_f32(v93, v94, *(float32x2_t *)v89.f32, 0);
          v89.i32[0] = *(_DWORD *)(v59 + 12);
          v97 = vmulq_n_f32(vmlsq_lane_f32(vsubq_f32(v91, v86), v94, *(float32x2_t *)v89.f32, 0), v45);
          v91.i32[0] = v57[1];
          v89.i32[0] = v57[2];
          v98 = vmulq_n_f32(vmlsq_lane_f32(v96, v97, *(float32x2_t *)v90.f32, 0), v43);
          *v88 = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v95, v97, *(float32x2_t *)v89.f32, 0), v98, *(float32x2_t *)v91.f32, 0), v41);
          *(float32x4_t *)((char *)v88 + 4 * a6) = v98;
          *(float32x4_t *)((char *)v88 + 8 * a6) = v97;
          *(float32x4_t *)((char *)v88 + 12 * a6) = v94;
          v48 += 4;
        }
        while (v48 < v141);
      }
      v11 = v143;
      if (v48 < v143)
        break;
LABEL_39:
      v37 = v139;
      v9 = v138;
      if (v140 < 5)
        return;
    }
    v99 = v138 + 4 * v139;
    v100 = v138 + 4 * v37;
    v101 = (__int32 *)(v100 + 4 * v137);
    v102 = (__int32 *)(v100 + 4 * v136);
    v103 = v37 * a6;
    v104 = (__int32 *)(v100 + 4 * v135);
    if (a2 - v139 <= 4)
      v105 = 4;
    else
      v105 = a2 - v139;
    v106 = (__int32 *)(v100 + 4 * (v37 - 1) * a4);
    v107 = (float *)(v99 + 4 * v137);
    v108 = v99 + 4 * v136;
    v109 = v99 + 4 * v135;
    while (1)
    {
      v110 = a5 + 4 * v48;
      v111 = (float *)(v110 + 4 * v103);
      v112 = 0uLL;
      if ((v105 & 1) != 0)
      {
        v119.i32[0] = *v101;
        v119.i32[1] = *v102;
        v119.i32[2] = *v104;
        v119.i32[3] = *v106;
        v120 = *v111;
        v111 += a6;
        v113 = v105 - 5;
        v114 = vmlaq_n_f32((float32x4_t)0, v119, v120);
        v115 = (uint64_t *)(v106 + 1);
        v116 = (uint64_t *)(v104 + 1);
        v117 = (uint64_t *)(v102 + 1);
        v118 = (uint64_t *)(v101 + 1);
        if (v105 != 5)
        {
          do
          {
LABEL_37:
            v121 = *v118++;
            v122.i64[0] = v121;
            v123 = *v117++;
            v124.i64[0] = v123;
            v125 = *v116++;
            v126 = v125;
            v127 = *v115++;
            v122.i64[1] = v126;
            v124.i64[1] = v127;
            v114 = vmlaq_n_f32(v114, (float32x4_t)vtrn1q_s32(v122, v124), *v111);
            v112 = vmlaq_n_f32(v112, (float32x4_t)vtrn2q_s32(v122, v124), v111[a6]);
            v111 = (float *)((char *)v111 + v38);
            v113 -= 2;
          }
          while (v113);
        }
      }
      else
      {
        v113 = v105 - 4;
        v114 = 0uLL;
        v115 = (uint64_t *)v106;
        v116 = (uint64_t *)v104;
        v117 = (uint64_t *)v102;
        v118 = (uint64_t *)v101;
        if (v105 != 4)
          goto LABEL_37;
      }
      v128 = vaddq_f32(v114, v112);
      v129 = (float *)(v110 + 4 * v139 * a6);
      v130 = -(float)(v128.f32[0] - (float)(*v129 * v10));
      v128.f32[0] = v47 * (float)-(float)(v128.f32[3] - (float)(v129[3 * a6] * v10));
      v131 = v45
           * (float)((float)-(float)(v128.f32[2] - (float)(v129[2 * a6] * v10))
                   - (float)(v128.f32[0] * *(float *)(v109 + 12)));
      v132 = v43
           * (float)((float)((float)-(float)(v128.f32[1] - (float)(v129[a6] * v10))
                           - (float)(v128.f32[0] * *(float *)(v108 + 12)))
                   - (float)(v131 * *(float *)(v108 + 8)));
      *v129 = v41
            * (float)((float)((float)(v130 - (float)(v128.f32[0] * v107[3])) - (float)(v131 * v107[2]))
                    - (float)(v132 * v107[1]));
      v129[a6] = v132;
      v129[2 * a6] = v131;
      v129[3 * a6] = v128.f32[0];
      ++v48;
      v11 = v143;
      if (v48 == v143)
        goto LABEL_39;
    }
  }
}

void cblas_dsyr2k_sequential(int a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, int a11, double *a12, int a13)
{
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;

  v33 = a8;
  if ((a2 - 123) > 0xFFFFFFFD)
  {
    v23 = 2000;
    if ((a4 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    v23 = cblas_errprn(2, 2000, "UPLO must be %d or %d, but is set to %d", 121, 122, a2);
    if ((a4 & 0x80000000) == 0)
      goto LABEL_6;
  }
  v23 = cblas_errprn(4, v23, "N cannot be less than zero; it is set to %d.", a4);
LABEL_6:
  if (a5 < 0)
    v23 = cblas_errprn(5, v23, "K cannot be less than zero; it is set to %d.", a5);
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v24 = cblas_errprn(1, v23, "Order must be %d or %d, but is set to %d");
      goto LABEL_35;
    }
    if ((_DWORD)a3 != 111)
    {
      if ((a3 - 114) <= 0xFFFFFFFD)
        v23 = cblas_errprn(3, v23, "Trans must be %d or %d, but is set to %d", 111, 112, a3);
      if (a7 < a4 || a7 <= 0)
        goto LABEL_31;
      goto LABEL_32;
    }
    if (a7 >= a5 && a7 > 0)
    {
LABEL_23:
      if (a11 >= a5 && a11 > 0)
        goto LABEL_36;
      v24 = cblas_errprn(10, v23, "ldb must be >= MAX(K,1): ldb=%d K=%d");
LABEL_35:
      v23 = v24;
      goto LABEL_36;
    }
LABEL_22:
    v23 = cblas_errprn(8, v23, "lda must be >= MAX(K,1): lda=%d K=%d", a7, a5);
    goto LABEL_23;
  }
  if ((_DWORD)a3 != 111)
  {
    if ((a3 - 114) <= 0xFFFFFFFD)
      v23 = cblas_errprn(3, v23, "Trans must be %d or %d, but is set to %d", 111, 112, a3);
    if (a7 >= a5 && a7 > 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (a7 < a4 || a7 <= 0)
LABEL_31:
    v23 = cblas_errprn(8, v23, "lda must be >= MAX(N,1): lda=%d N=%d", a7, a4);
LABEL_32:
  if (a11 < a4 || a11 <= 0)
  {
    v24 = cblas_errprn(10, v23, "ldb must be >= MAX(N,1): ldb=%d N=%d");
    goto LABEL_35;
  }
LABEL_36:
  if (a13 < a4 || a13 <= 0)
    v23 = cblas_errprn(13, v23, "ldc must be >= MAX(N,1): ldc=%d N=%d", a13, a4);
  if (v23 == 2000)
  {
    if (a1 == 102)
    {
      v25 = a4;
      v26 = a5;
      v27 = a7;
      v34 = a12;
      v35 = a13;
      v28 = a11;
      v29 = a9;
      v30 = a10;
      v31 = a2;
      v32 = a3;
    }
    else
    {
      if (a2 == 121)
        v31 = 122;
      else
        v31 = 121;
      if ((_DWORD)a3 == 111)
        v32 = 112;
      else
        v32 = 111;
      v25 = a4;
      v26 = a5;
      v27 = a7;
      v28 = a11;
      v34 = a12;
      v35 = a13;
      v29 = a9;
      v30 = a10;
    }
    APL_seq_dsyr2k(v31, v32, v25, v26, a6, v27, v33, v28, v29, v30, v34, v35);
  }
  else
  {
    cblas_xerbla(v23, "cblas_dsyr2k", "");
  }
}

void cblas_dtrmm_sequential_prealloc(int a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  int v18;
  int v20;
  int v21;
  char *v23;
  char *v24;
  int v25;
  int v27;
  int v28;
  char *v30;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v18 = a2;
  v20 = a11;
  v21 = a9;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v25 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
LABEL_47:
      v28 = v25;
      goto LABEL_48;
    }
    if ((_DWORD)a2 == 142)
    {
      if ((int)a9 < (int)a7 || (int)a9 <= 0)
      {
        v39 = a9;
        v42 = a7;
        v24 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v44 = a2;
        v39 = 142;
        v42 = 141;
        v24 = "SIDE must be %d or %d, but is set to %d";
        v32 = 2;
        goto LABEL_41;
      }
      if ((int)a9 < (int)a6 || (int)a9 <= 0)
      {
        v39 = a9;
        v42 = a6;
        v24 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v32 = 10;
LABEL_41:
        v28 = cblas_errprn(v32, 2000, v24, v39, v42, v44);
        goto LABEL_43;
      }
    }
    v28 = 2000;
LABEL_43:
    if ((int)a11 >= (int)a7 && (int)a11 > 0)
      goto LABEL_48;
    v40 = a11;
    v43 = a7;
    v30 = "ldb must be >= MAX(N,1): ldb=%d N=%d";
    goto LABEL_46;
  }
  if ((_DWORD)a2 == 142)
  {
    if ((int)a9 >= (int)a7 && (int)a9 > 0)
      goto LABEL_24;
    v38 = a9;
    v41 = a7;
    v23 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v41 = 141;
      v44 = a2;
      v38 = 142;
      v23 = "SIDE must be %d or %d, but is set to %d";
      v27 = 2;
      goto LABEL_26;
    }
    if ((int)a9 >= (int)a6 && (int)a9 > 0)
    {
LABEL_24:
      v28 = 2000;
      goto LABEL_27;
    }
    v38 = a9;
    v41 = a6;
    v23 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v27 = 10;
LABEL_26:
  v28 = cblas_errprn(v27, 2000, v23, v38, v41, v44);
LABEL_27:
  if ((int)a11 < (int)a6 || (int)a11 <= 0)
  {
    v40 = a11;
    v43 = a6;
    v30 = "ldb must be >= MAX(M,1): ldb=%d M=%d";
LABEL_46:
    v25 = cblas_errprn(12, v28, v30, v40, v43, v44);
    goto LABEL_47;
  }
LABEL_48:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v28 = cblas_errprn(3, v28, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v28 = cblas_errprn(4, v28, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((a6 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_59:
    v28 = cblas_errprn(6, v28, "M cannot be less than zero; it is set to %d.", a6);
    if ((a7 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_60;
  }
  v28 = cblas_errprn(5, v28, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if ((a6 & 0x80000000) != 0)
    goto LABEL_59;
LABEL_54:
  if ((a7 & 0x80000000) == 0)
    goto LABEL_55;
LABEL_60:
  v28 = cblas_errprn(7, v28, "N cannot be less than zero; it is set to %d.", a7);
LABEL_55:
  if (v28 == 2000)
  {
    if (a1 == 102)
    {
      v33 = a6;
      v34 = a7;
      v48 = a12;
      v46 = a10;
      v47 = v20;
      v49 = a13;
      v35 = v21;
      v36 = v18;
      v37 = a3;
    }
    else
    {
      if (v18 == 141)
        v36 = 142;
      else
        v36 = 141;
      if (a3 == 121)
        v37 = 122;
      else
        v37 = 121;
      v33 = a7;
      v34 = a6;
      v35 = (int)a9;
      v48 = a12;
      v46 = a10;
      v47 = v20;
      v49 = a13;
    }
    APL_seq_dtrmm(v36, v37, a4, a5, v33, v34, a8, v35, v46, v47, v48, v49);
  }
  else
  {
    cblas_xerbla(v28, "cblas_dtrmm", "");
  }
}

_OWORD *sgebpAlignedC_8M4N(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  float32x4_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD *result;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  float32x4_t v45;
  _OWORD *v49;
  _OWORD *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;

  v8 = _X2;
  v9 = 4 * a4;
  v11 = *(float32x4_t *)a1;
  v12 = *((float32x4_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float32x4_t *)v10;
  v15 = *((float32x4_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v27 = *_X2;
    v28 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v31 = *_X2;
    v32 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    _X2 = v8 + 2;
    v36 = v6;
    v37 = v6;
    v38 = v6;
    v39 = v6;
    v40 = v6;
    v41 = v6;
    v42 = v6;
    v44 = *(float32x4_t *)a2;
    v45 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
    v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
    v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
    v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
    v11 = v14;
    v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
    v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
    v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
    v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
    v12 = v15;
    v14 = *(float32x4_t *)result;
    v15 = *((float32x4_t *)result + 1);
    result += 2;
    v44 = *((float32x4_t *)a2 + 1);
    v45 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v16 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
        v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
        v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
        v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
        v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
        v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
        v11 = *(float32x4_t *)result;
        v12 = *((float32x4_t *)result + 1);
        v49 = result + 2;
        v44 = *(float32x4_t *)_X6;
        v50 = _X6 + 1;
        v6 = vmlaq_n_f32(v6, v14, v45.f32[0]);
        v37 = vmlaq_lane_f32(v37, v14, *(float32x2_t *)v45.f32, 1);
        v39 = vmlaq_laneq_f32(v39, v14, v45, 2);
        v41 = vmlaq_laneq_f32(v41, v14, v45, 3);
        v36 = vmlaq_n_f32(v36, v15, v45.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v45.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v45, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v45, 3);
        v14 = *(float32x4_t *)v49;
        v15 = *((float32x4_t *)v49 + 1);
        result = v49 + 2;
        v45 = *(float32x4_t *)v50;
        _X6 = v50 + 1;
        v16 -= 2;
      }
      while (v16);
      v23 = vaddq_f32(v23, v6);
      v24 = vaddq_f32(v24, v36);
      v27 = vaddq_f32(v27, v37);
      v28 = vaddq_f32(v28, v38);
      v31 = vaddq_f32(v31, v39);
      v32 = vaddq_f32(v32, v40);
      v34 = vaddq_f32(v34, v41);
      v35 = vaddq_f32(v35, v42);
    }
    *v8 = v23;
    v8[1] = v24;
    v51 = (float32x4_t *)((char *)v8 + v9);
    *v51 = v27;
    v51[1] = v28;
    v52 = (float32x4_t *)((char *)v51 + v9);
    *v52 = v31;
    v52[1] = v32;
    v53 = (float32x4_t *)((char *)v52 + v9);
    *v53 = v34;
    v53[1] = v35;
    v8 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

void dtrmm_noPack_RUNN(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  float64x2_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t *v77;
  float64x2_t *v78;
  float64x2_t *v79;
  BOOL v80;
  double *v81;
  double *v82;
  double v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v7 = a4;
  v9 = __N;
  v10 = 0;
  if (a1 >= 4)
  {
    v11 = a1 - 3;
    v12 = 8 * a6;
    v13 = __N & 3;
    if (__N <= 0)
      v13 = -(-__N & 3);
    v14 = a6 + 1;
    v94 = (2 * a6) | 1;
    v95 = 2 * a6;
    v15 = a6 + 2;
    v16 = a6 + 3;
    v92 = 2 * a6 + 3;
    v93 = 2 * a6 + 2;
    v17 = -a4;
    v18 = 32 * ~v7;
    v98 = 8 * v7 * (v9 - 3) + 8 * v9 - 32;
    v99 = 8 * v7 * (v9 - 4) + 8 * v9 - 32;
    v96 = 8 * v7 * (v9 - 1) + 8 * v9 - 32;
    v97 = 8 * v7 * (v9 - 2) + 8 * v9 - 32;
    v19 = (float64x2_t *)(a5 + 8 * a6 * (v9 - 4));
    v20 = -32 * a6;
    while (1)
    {
      v21 = v7;
      v22 = v9;
      v23 = v9;
      if (v9 >= 4)
      {
        v24 = v19;
        v25 = v96;
        v26 = v97;
        v28 = v98;
        v27 = v99;
        do
        {
          v22 = v9 - 4;
          v29 = v9 - 4;
          v30 = *(const double *)((char *)a3 + v27);
          v31 = (float64x2_t *)((char *)a3 + v27 + -8 * v9 + 32);
          v32 = *(float64x2_t *)((char *)a3 + v28);
          v33 = (float64x2_t *)((char *)a3 + v28 + -8 * v9 + 32);
          v34 = *(float64x2_t *)((char *)a3 + v26);
          v35 = *(float64x2_t *)((char *)a3 + v25);
          v36 = v24[1];
          v38 = *(float64x2_t *)((char *)v24 + v12);
          v39 = *(float64x2_t *)((char *)v24 + v12 + 16);
          v37 = (float64x2_t *)((char *)v24 + v12 + v12);
          v40 = vmulq_n_f64(*v24, v30);
          v41 = vmulq_n_f64(v36, v30);
          v42 = vmlaq_laneq_f64(vmulq_n_f64(*v24, v32.f64[0]), v38, v32, 1);
          v43 = vmlaq_laneq_f64(vmulq_n_f64(*v24, v34.f64[0]), v38, v34, 1);
          v44 = vmlaq_laneq_f64(vmulq_n_f64(*v24, v35.f64[0]), v38, v35, 1);
          v45 = vmlaq_laneq_f64(vmulq_n_f64(v36, v32.f64[0]), v39, v32, 1);
          v46 = vmlaq_laneq_f64(vmulq_n_f64(v36, v34.f64[0]), v39, v34, 1);
          v47 = vmlaq_laneq_f64(vmulq_n_f64(v36, v35.f64[0]), v39, v35, 1);
          v48 = *(const double *)((char *)a3 + v26 + 16);
          v49 = *(float64x2_t *)((char *)a3 + v25 + 16);
          v51 = *v37;
          v52 = v37[1];
          v50 = (float64x2_t *)((char *)v37 + v12);
          v53 = (float64x2_t *)((char *)a3 + v26 + -8 * v9 + 32);
          v54 = *v50;
          v55 = v50[1];
          v56 = (float64x2_t *)((char *)a3 + v25 + -8 * v9 + 32);
          v57 = vmlaq_n_f64(v43, v51, v48);
          v58 = vmlaq_n_f64(v46, v52, v48);
          v59 = (float64x2_t *)((char *)v50 + v12 - (v9 - 4) * v12 + -4 * v12);
          v60 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v51, v49.f64[0]), v54, v49, 1);
          v61 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v52, v49.f64[0]), v55, v49, 1);
          if ((((_DWORD)v9 - 4) & 1) != 0)
          {
            v62 = *v59;
            v63 = v59[1];
            v59 = (float64x2_t *)((char *)v59 + v12);
            v64 = v31->f64[0];
            v31 = (float64x2_t *)((char *)v31 + 8);
            v65 = v33->f64[0];
            v33 = (float64x2_t *)((char *)v33 + 8);
            v66 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v67 = v56->f64[0];
            v56 = (float64x2_t *)((char *)v56 + 8);
            v40 = vmlaq_n_f64(v40, v62, v64);
            v42 = vmlaq_n_f64(v42, v62, v65);
            v57 = vmlaq_n_f64(v57, v62, v66);
            v60 = vmlaq_n_f64(v60, v62, v67);
            v41 = vmlaq_n_f64(v41, v63, v64);
            v45 = vmlaq_n_f64(v45, v63, v65);
            v58 = vmlaq_n_f64(v58, v63, v66);
            v61 = vmlaq_n_f64(v61, v63, v67);
            v29 = v9 - 5;
          }
          for (; v29; v29 -= 2)
          {
            v69 = *v59;
            v70 = v59[1];
            v68 = (float64x2_t *)((char *)v59 + v12);
            v71 = *v68;
            v72 = v68[1];
            v59 = (float64x2_t *)((char *)v68 + v12);
            v73 = *v31++;
            v74 = *v33++;
            v75 = *v53++;
            v76 = *v56++;
            v40 = vmlaq_laneq_f64(vmlaq_n_f64(v40, v69, v73.f64[0]), v71, v73, 1);
            v42 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v69, v74.f64[0]), v71, v74, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v69, v75.f64[0]), v71, v75, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v69, v76.f64[0]), v71, v76, 1);
            v41 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v70, v73.f64[0]), v72, v73, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v70, v74.f64[0]), v72, v74, 1);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v70, v75.f64[0]), v72, v75, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v70, v76.f64[0]), v72, v76, 1);
          }
          *v59 = vmulq_n_f64(v40, a7);
          v59[1] = vmulq_n_f64(v41, a7);
          v77 = (float64x2_t *)((char *)v59 + v12);
          *v77 = vmulq_n_f64(v42, a7);
          v77[1] = vmulq_n_f64(v45, a7);
          v78 = (float64x2_t *)((char *)v77 + v12);
          *v78 = vmulq_n_f64(v57, a7);
          v78[1] = vmulq_n_f64(v58, a7);
          v79 = (float64x2_t *)((char *)v78 + v12);
          *v79 = vmulq_n_f64(v60, a7);
          v79[1] = vmulq_n_f64(v61, a7);
          v27 += v18;
          v28 += v18;
          v26 += v18;
          v25 += v18;
          v24 = (float64x2_t *)((char *)v24 + v20);
          v80 = (unint64_t)v9 > 7;
          v9 -= 4;
        }
        while (v80);
      }
      v81 = (double *)(a5 + 8 * v10);
      v7 = v21;
      v82 = (double *)&a3[(v22 - 1) * v21];
      if (v13 == 3)
        break;
      if (v13 == 2)
      {
        v83 = a7;
        v84 = a6;
LABEL_18:
        v9 = v23;
        v81[v84] = v83 * (v81[v84] * v82[1] + *v81 * *v82);
        v81[v14] = v83 * (v81[v14] * v82[1] + v81[1] * *v82);
        v81[v15] = v83 * (v81[v15] * v82[1] + v81[2] * *v82);
        v81[v16] = v83 * (v81[v16] * v82[1] + v81[3] * *v82);
        v82 += v17;
        goto LABEL_19;
      }
      v9 = v23;
      if (v13 == 1)
      {
        v83 = a7;
LABEL_19:
        v87 = v81[1];
        *v81 = v83 * (*v81 * *v82);
        v81[1] = v83 * (v87 * *v82);
        v88 = v81[3];
        v81[2] = v83 * (v81[2] * *v82);
        v81[3] = v83 * (v88 * *v82);
      }
      v10 += 4;
      v19 += 2;
      if (v10 >= v11)
        goto LABEL_21;
    }
    v83 = a7;
    v84 = a6;
    v85 = v81[1];
    v81[v95] = a7 * (v81[a6] * v82[1] + *v81 * *v82 + v81[v95] * v82[2]);
    v81[v94] = a7 * (v81[v14] * v82[1] + v85 * *v82 + v81[v94] * v82[2]);
    v86 = v81[3];
    v81[v93] = a7 * (v81[v15] * v82[1] + v81[2] * *v82 + v81[v93] * v82[2]);
    v81[v92] = a7 * (v81[v16] * v82[1] + v86 * *v82 + v81[v92] * v82[2]);
    v82 += v17;
    goto LABEL_18;
  }
LABEL_21:
  v89 = a1 - v10;
  if (a1 > v10)
  {
    v90 = (double *)(a5 + 8 * v10);
    do
    {
      cblas_dscal(v9, a7, v90, a6);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasTrans, CblasNonUnit, v9, a3, v7, v90++, a6);
      --v89;
    }
    while (v89);
  }
}

void dtrmm_noPack_RUNU(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float64x2_t *v29;
  unint64_t v30;
  double v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  float64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t *v75;
  float64x2_t *v76;
  BOOL v77;
  float64x2_t *v78;
  double *v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  float64x2_t v84;
  float64x2_t v85;
  uint64_t v86;
  double *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v7 = a4;
  v10 = 0;
  if (a1 >= 4)
  {
    v11 = a1 - 3;
    v12 = 8 * a6;
    v13 = __N & 3;
    if (__N <= 0)
      v13 = -(-__N & 3);
    v14 = a6 + 1;
    v92 = (2 * a6) | 1;
    v93 = a6;
    v15 = a6 + 2;
    v16 = a6 + 3;
    v90 = 2 * a6 + 3;
    v91 = 2 * a6 + 2;
    v89 = -a4;
    v17 = 32 * a4;
    v96 = 8 * a4 * (__N - 3) + 8 * __N - 32;
    v97 = 8 * a4 * (__N - 4);
    v18 = (32 * a4) ^ 0xFFFFFFFFFFFFFFE0;
    v94 = 8 * a4 * (__N - 1) + 8 * __N - 32;
    v95 = 8 * a4 * (__N - 2) + 8 * __N - 32;
    v19 = (float64x2_t *)(a5 + 8 * a6 * (__N - 4));
    v20 = -32 * a6;
    while (1)
    {
      v21 = v7;
      v22 = __N;
      if (__N >= 4)
      {
        v23 = v19;
        v25 = v94;
        v24 = v95;
        v27 = v96;
        v26 = v97;
        v28 = __N;
        do
        {
          v22 = v28 - 4;
          v29 = (float64x2_t *)((char *)a3 + v26);
          v30 = v28 - 4;
          v31 = *(const double *)((char *)a3 + v27);
          v32 = (float64x2_t *)((char *)a3 + v27 + -8 * v28 + 32);
          v33 = *(float64x2_t *)((char *)a3 + v24);
          v34 = (float64x2_t *)((char *)a3 + v24 + -8 * v28 + 32);
          v35 = *(float64x2_t *)((char *)a3 + v25);
          v36 = *v23;
          v37 = v23[1];
          v39 = *(float64x2_t *)((char *)v23 + v12);
          v40 = *(float64x2_t *)((char *)v23 + v12 + 16);
          v38 = (float64x2_t *)((char *)v23 + v12 + v12);
          v41 = vmulq_laneq_f64(v39, v33, 1);
          v42 = vmulq_laneq_f64(v39, v35, 1);
          v43 = vmulq_laneq_f64(v40, v33, 1);
          v44 = vmulq_laneq_f64(v40, v35, 1);
          v45 = vmlaq_n_f64(v39, *v23, v31);
          v46 = vmlaq_n_f64(v40, v37, v31);
          v47 = *(const double *)((char *)a3 + v25 + 16);
          v49 = *v38;
          v50 = v38[1];
          v48 = (float64x2_t *)((char *)v38 + v12);
          v51 = *v48;
          v52 = v48[1];
          v53 = (float64x2_t *)((char *)a3 + v25 + -8 * v28 + 32);
          v54 = vaddq_f64(vmlaq_n_f64(v41, *v23, v33.f64[0]), v49);
          v55 = vaddq_f64(vmlaq_n_f64(v43, v37, v33.f64[0]), v50);
          v56 = (float64x2_t *)((char *)v48 + v12 - (v28 - 4) * v12 + -4 * v12);
          v57 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v42, *v23, v35.f64[0]), v49, v47), v51);
          v58 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v44, v37, v35.f64[0]), v50, v47), v52);
          if ((((_DWORD)v28 - 4) & 1) != 0)
          {
            v59 = *v56;
            v60 = v56[1];
            v56 = (float64x2_t *)((char *)v56 + v12);
            v61 = v29->f64[0];
            v29 = (float64x2_t *)((char *)v29 + 8);
            v62 = v32->f64[0];
            v32 = (float64x2_t *)((char *)v32 + 8);
            v63 = v34->f64[0];
            v34 = (float64x2_t *)((char *)v34 + 8);
            v64 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v36 = vmlaq_n_f64(v36, v59, v61);
            v45 = vmlaq_n_f64(v45, v59, v62);
            v54 = vmlaq_n_f64(v54, v59, v63);
            v57 = vmlaq_n_f64(v57, v59, v64);
            v37 = vmlaq_n_f64(v37, v60, v61);
            v46 = vmlaq_n_f64(v46, v60, v62);
            v55 = vmlaq_n_f64(v55, v60, v63);
            v58 = vmlaq_n_f64(v58, v60, v64);
            v30 = v28 - 5;
          }
          for (; v30; v30 -= 2)
          {
            v66 = *v56;
            v67 = v56[1];
            v65 = (float64x2_t *)((char *)v56 + v12);
            v68 = *v65;
            v69 = v65[1];
            v56 = (float64x2_t *)((char *)v65 + v12);
            v70 = *v29++;
            v71 = *v32++;
            v72 = *v34++;
            v73 = *v53++;
            v36 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v66, v70.f64[0]), v68, v70, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v66, v71.f64[0]), v68, v71, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v66, v72.f64[0]), v68, v72, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v66, v73.f64[0]), v68, v73, 1);
            v37 = vmlaq_laneq_f64(vmlaq_n_f64(v37, v67, v70.f64[0]), v69, v70, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v67, v71.f64[0]), v69, v71, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v67, v72.f64[0]), v69, v72, 1);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v67, v73.f64[0]), v69, v73, 1);
          }
          *v56 = vmulq_n_f64(v36, a7);
          v56[1] = vmulq_n_f64(v37, a7);
          v74 = (float64x2_t *)((char *)v56 + v12);
          *v74 = vmulq_n_f64(v45, a7);
          v74[1] = vmulq_n_f64(v46, a7);
          v75 = (float64x2_t *)((char *)v74 + v12);
          *v75 = vmulq_n_f64(v54, a7);
          v75[1] = vmulq_n_f64(v55, a7);
          v76 = (float64x2_t *)((char *)v75 + v12);
          *v76 = vmulq_n_f64(v57, a7);
          v76[1] = vmulq_n_f64(v58, a7);
          v26 -= v17;
          v27 += v18;
          v24 += v18;
          v25 += v18;
          v23 = (float64x2_t *)((char *)v23 + v20);
          v77 = v28 > 7;
          v28 -= 4;
        }
        while (v77);
      }
      v78 = (float64x2_t *)(a5 + 8 * v10);
      v7 = v21;
      v79 = (double *)&a3[(v22 - 1) * v21];
      if (v13 == 3)
        break;
      if (v13 == 2)
      {
        v80 = a7;
        v81 = a6;
LABEL_18:
        v78->f64[v81] = v80 * (v78->f64[v81] + v78->f64[0] * *v79);
        v78->f64[v14] = v80 * (v78->f64[v14] + v78->f64[1] * *v79);
        v78->f64[v15] = v80 * (v78->f64[v15] + v78[1].f64[0] * *v79);
        v78->f64[v16] = v80 * (v78->f64[v16] + v78[1].f64[1] * *v79);
        goto LABEL_19;
      }
      if (v13 == 1)
      {
        v80 = a7;
LABEL_19:
        v84 = vmulq_n_f64(*v78, v80);
        v85 = vmulq_n_f64(v78[1], v80);
        *v78 = v84;
        v78[1] = v85;
      }
      v10 += 4;
      v19 += 2;
      if (v10 >= v11)
        goto LABEL_21;
    }
    v80 = a7;
    v81 = a6;
    v82 = v78->f64[1];
    v78[v93].f64[0] = a7 * (v78[v93].f64[0] + v78->f64[a6] * v79[1] + v78->f64[0] * *v79);
    v78->f64[v92] = a7 * (v78->f64[v92] + v78->f64[v14] * v79[1] + v82 * *v79);
    v83 = v78[1].f64[1];
    v78->f64[v91] = a7 * (v78->f64[v91] + v78->f64[v15] * v79[1] + v78[1].f64[0] * *v79);
    v78->f64[v90] = a7 * (v78->f64[v90] + v78->f64[v16] * v79[1] + v83 * *v79);
    v79 += v89;
    goto LABEL_18;
  }
LABEL_21:
  v86 = a1 - v10;
  if (a1 > v10)
  {
    v87 = (double *)(a5 + 8 * v10);
    do
    {
      cblas_dscal(__N, a7, v87, a6);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasTrans, CblasUnit, __N, a3, v7, v87++, a6);
      --v86;
    }
    while (v86);
  }
}

void dtrmm_noPack_RUTN(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t __incX, double a7)
{
  float64x2_t *v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  double *v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  double *f64;
  uint64_t v85;
  uint64_t v86;

  v8 = a5;
  v11 = __N;
  v12 = 0;
  if (a1 >= 4)
  {
    v13 = a1 - 3;
    v14 = 8 * __incX;
    v15 = 8 * a4;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v17 = __incX + 1;
    v18 = __incX + 2;
    v85 = 2 * __incX + 2;
    v86 = 2 * __incX;
    v19 = __incX + 3;
    v20 = a4 + 1;
    while (1)
    {
      if (__N < 4)
      {
        v21 = 0;
      }
      else
      {
        v21 = 0;
        v22 = (double *)a3;
        v23 = a5;
        v24 = __N;
        do
        {
          v25 = v24 - 4;
          v27 = *(float64x2_t *)&v22[a4];
          v26 = (float64x2_t *)&v22[(unint64_t)v15 / 8 + (unint64_t)v15 / 8];
          v29 = *(float64x2_t *)((char *)v23 + 8 * __incX);
          v30 = *(float64x2_t *)((char *)v23 + v14 + 16);
          v28 = (float64x2_t *)((char *)v23 + v14 + v14);
          v31 = vmlaq_n_f64(vmulq_n_f64(*v23, *v22), v29, v27.f64[0]);
          v32 = vmlaq_n_f64(vmulq_n_f64(v23[1], *v22), v30, v27.f64[0]);
          v33 = vmulq_laneq_f64(v29, v27, 1);
          v34 = vmulq_laneq_f64(v30, v27, 1);
          v36 = *v26;
          v37 = v26[1];
          v35 = (float64x2_t *)((char *)v26 + v15);
          v39 = *v35;
          v40 = v35[1];
          v38 = (float64x2_t *)((char *)v35 + v15);
          v42 = *v28;
          v43 = v28[1];
          v41 = (float64x2_t *)((char *)v28 + v14);
          v45 = *v41;
          v46 = v41[1];
          v44 = (float64x2_t *)((char *)v41 + v14);
          v47 = vmlaq_n_f64(vmlaq_n_f64(v31, v42, v36.f64[0]), v45, v39.f64[0]);
          v48 = vmlaq_n_f64(vmlaq_n_f64(v32, v43, v36.f64[0]), v46, v39.f64[0]);
          v49 = vmlaq_laneq_f64(vmlaq_laneq_f64(v33, v42, v36, 1), v45, v39, 1);
          v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v34, v43, v36, 1), v46, v39, 1);
          v51 = vmlaq_n_f64(vmulq_n_f64(v42, v37.f64[0]), v45, v40.f64[0]);
          v52 = vmlaq_n_f64(vmulq_n_f64(v43, v37.f64[0]), v46, v40.f64[0]);
          v53 = vmulq_laneq_f64(v45, v40, 1);
          v54 = vmulq_laneq_f64(v46, v40, 1);
          if ((((_DWORD)v24 - 4) & 1) != 0)
          {
            v55 = *v44;
            v56 = v44[1];
            v44 = (float64x2_t *)((char *)v44 + v14);
            v57 = *v38;
            v58 = v38[1];
            v38 = (float64x2_t *)((char *)v38 + v15);
            v47 = vmlaq_n_f64(v47, v55, v57.f64[0]);
            v49 = vmlaq_laneq_f64(v49, v55, v57, 1);
            v51 = vmlaq_n_f64(v51, v55, v58.f64[0]);
            v53 = vmlaq_laneq_f64(v53, v55, v58, 1);
            v48 = vmlaq_n_f64(v48, v56, v57.f64[0]);
            v50 = vmlaq_laneq_f64(v50, v56, v57, 1);
            v52 = vmlaq_n_f64(v52, v56, v58.f64[0]);
            v54 = vmlaq_laneq_f64(v54, v56, v58, 1);
            v25 = v24 - 5;
          }
          for (; v25; v25 -= 2)
          {
            v60 = *v44;
            v61 = v44[1];
            v59 = (float64x2_t *)((char *)v44 + v14);
            v62 = *v59;
            v63 = v59[1];
            v44 = (float64x2_t *)((char *)v59 + v14);
            v65 = *v38;
            v66 = v38[1];
            v64 = (float64x2_t *)((char *)v38 + v15);
            v67 = *v64;
            v68 = v64[1];
            v38 = (float64x2_t *)((char *)v64 + v15);
            v47 = vmlaq_n_f64(vmlaq_n_f64(v47, v60, v65.f64[0]), v62, v67.f64[0]);
            v49 = vmlaq_laneq_f64(vmlaq_laneq_f64(v49, v60, v65, 1), v62, v67, 1);
            v51 = vmlaq_n_f64(vmlaq_n_f64(v51, v60, v66.f64[0]), v62, v68.f64[0]);
            v53 = vmlaq_laneq_f64(vmlaq_laneq_f64(v53, v60, v66, 1), v62, v68, 1);
            v48 = vmlaq_n_f64(vmlaq_n_f64(v48, v61, v65.f64[0]), v63, v67.f64[0]);
            v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v50, v61, v65, 1), v63, v67, 1);
            v52 = vmlaq_n_f64(vmlaq_n_f64(v52, v61, v66.f64[0]), v63, v68.f64[0]);
            v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v54, v61, v66, 1), v63, v68, 1);
          }
          v69 = (float64x2_t *)((char *)v44 - v24 * v14);
          *v69 = vmulq_n_f64(v47, a7);
          v69[1] = vmulq_n_f64(v48, a7);
          v70 = (float64x2_t *)((char *)v69 + v14);
          *v70 = vmulq_n_f64(v49, a7);
          v70[1] = vmulq_n_f64(v50, a7);
          v71 = (float64x2_t *)((char *)v70 + v14);
          *v71 = vmulq_n_f64(v51, a7);
          v71[1] = vmulq_n_f64(v52, a7);
          v72 = (float64x2_t *)((char *)v71 + v14);
          *v72 = vmulq_n_f64(v53, a7);
          v72[1] = vmulq_n_f64(v54, a7);
          v21 += 4;
          v23 += 2 * __incX;
          v22 += 4 * a4 + 4;
          v24 -= 4;
        }
        while (v21 < __N - 3);
      }
      v73 = &v8[(unint64_t)v12 / 2].f64[v21 * __incX];
      v74 = (double *)&a3[v21 * a4 + v21];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v75 = a7;
LABEL_20:
        v78 = v73[1];
        *v73 = v75 * (v73[__incX] * v74[a4] + *v73 * *v74);
        v73[1] = v75 * (v73[v17] * v74[a4] + v78 * *v74);
        v79 = v73[3];
        v73[2] = v75 * (v73[v18] * v74[a4] + v73[2] * *v74);
        v73[3] = v75 * (v73[v19] * v74[a4] + v79 * *v74);
        v74 += v20;
        v73 += __incX;
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v75 = a7;
LABEL_21:
        v80 = v73[1];
        *v73 = v75 * (*v73 * *v74);
        v73[1] = v75 * (v80 * *v74);
        v81 = v73[3];
        v73[2] = v75 * (v73[2] * *v74);
        v73[3] = v75 * (v81 * *v74);
      }
      v12 += 4;
      a5 += 2;
      if (v12 >= v13)
        goto LABEL_23;
    }
    v75 = a7;
    v76 = v73[1];
    *v73 = a7 * (v73[__incX] * v74[a4] + *v73 * *v74 + v73[v86] * v74[2 * a4]);
    v73[1] = a7 * (v73[v17] * v74[a4] + v76 * *v74 + v73[(2 * __incX) | 1] * v74[2 * a4]);
    v77 = v73[3];
    v73[2] = a7 * (v73[v18] * v74[a4] + v73[2] * *v74 + v73[v85] * v74[2 * a4]);
    v73[3] = a7 * (v73[v19] * v74[a4] + v77 * *v74 + v73[2 * __incX + 3] * v74[2 * a4]);
    v74 += v20;
    v73 += __incX;
    goto LABEL_20;
  }
LABEL_23:
  v82 = a1 - v12;
  if (a1 > v12)
  {
    f64 = v8[(unint64_t)v12 / 2].f64;
    do
    {
      cblas_dscal(v11, a7, f64, __incX);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasNoTrans, CblasNonUnit, v11, a3, a4, f64++, __incX);
      --v82;
    }
    while (v82);
  }
}

void dtrmm_noPack_RUTU(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t __incX, double a7)
{
  float64x2_t *v8;
  int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t *v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;
  double *f64;
  uint64_t v75;
  uint64_t v76;

  v8 = a5;
  v9 = a4;
  v11 = __N;
  v12 = 0;
  if (a1 >= 4)
  {
    v13 = a1 - 3;
    v14 = 8 * __incX;
    v15 = 8 * a4;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v17 = __incX + 1;
    v18 = __incX + 2;
    v75 = 2 * __incX + 2;
    v76 = __incX;
    v19 = __incX + 3;
    while (1)
    {
      if (__N < 4)
      {
        v20 = 0;
      }
      else
      {
        v20 = 0;
        v21 = a5;
        v22 = __N;
        v23 = (double *)&a3[a4];
        do
        {
          v24 = v22 - 4;
          v26 = *(float64x2_t *)((char *)v21 + 8 * __incX);
          v27 = *(float64x2_t *)((char *)v21 + v14 + 16);
          v25 = (float64x2_t *)((char *)v21 + v14 + v14);
          v29 = *(float64x2_t *)&v23[a4];
          v28 = (float64x2_t *)&v23[(unint64_t)v15 / 8 + (unint64_t)v15 / 8];
          v31 = *v28;
          v32 = v28[1];
          v30 = (float64x2_t *)((char *)v28 + v15);
          v34 = *v25;
          v35 = v25[1];
          v33 = (float64x2_t *)((char *)v25 + v14);
          v37 = *v33;
          v38 = v33[1];
          v36 = (float64x2_t *)((char *)v33 + v14);
          v39 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*v21, v26, *v23), v34, v29.f64[0]), v37, v31.f64[0]);
          v40 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v21[1], v27, *v23), v35, v29.f64[0]), v38, v31.f64[0]);
          v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v26, v34, v29, 1), v37, v31, 1);
          v42 = vmlaq_laneq_f64(vmlaq_laneq_f64(v27, v35, v29, 1), v38, v31, 1);
          v43 = vmlaq_n_f64(v34, v37, v32.f64[0]);
          v44 = vmlaq_n_f64(v35, v38, v32.f64[0]);
          if ((((_DWORD)v22 - 4) & 1) != 0)
          {
            v45 = *v36;
            v46 = v36[1];
            v36 = (float64x2_t *)((char *)v36 + v14);
            v47 = *v30;
            v48 = v30[1];
            v30 = (float64x2_t *)((char *)v30 + v15);
            v39 = vmlaq_n_f64(v39, v45, v47.f64[0]);
            v41 = vmlaq_laneq_f64(v41, v45, v47, 1);
            v43 = vmlaq_n_f64(v43, v45, v48.f64[0]);
            v37 = vmlaq_laneq_f64(v37, v45, v48, 1);
            v40 = vmlaq_n_f64(v40, v46, v47.f64[0]);
            v42 = vmlaq_laneq_f64(v42, v46, v47, 1);
            v44 = vmlaq_n_f64(v44, v46, v48.f64[0]);
            v38 = vmlaq_laneq_f64(v38, v46, v48, 1);
            v24 = v22 - 5;
          }
          for (; v24; v24 -= 2)
          {
            v50 = *v36;
            v51 = v36[1];
            v49 = (float64x2_t *)((char *)v36 + v14);
            v52 = *v49;
            v53 = v49[1];
            v36 = (float64x2_t *)((char *)v49 + v14);
            v55 = *v30;
            v56 = v30[1];
            v54 = (float64x2_t *)((char *)v30 + v15);
            v57 = *v54;
            v58 = v54[1];
            v30 = (float64x2_t *)((char *)v54 + v15);
            v39 = vmlaq_n_f64(vmlaq_n_f64(v39, v50, v55.f64[0]), v52, v57.f64[0]);
            v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v50, v55, 1), v52, v57, 1);
            v43 = vmlaq_n_f64(vmlaq_n_f64(v43, v50, v56.f64[0]), v52, v58.f64[0]);
            v37 = vmlaq_laneq_f64(vmlaq_laneq_f64(v37, v50, v56, 1), v52, v58, 1);
            v40 = vmlaq_n_f64(vmlaq_n_f64(v40, v51, v55.f64[0]), v53, v57.f64[0]);
            v42 = vmlaq_laneq_f64(vmlaq_laneq_f64(v42, v51, v55, 1), v53, v57, 1);
            v44 = vmlaq_n_f64(vmlaq_n_f64(v44, v51, v56.f64[0]), v53, v58.f64[0]);
            v38 = vmlaq_laneq_f64(vmlaq_laneq_f64(v38, v51, v56, 1), v53, v58, 1);
          }
          v59 = (float64x2_t *)((char *)v36 - v22 * v14);
          *v59 = vmulq_n_f64(v39, a7);
          v59[1] = vmulq_n_f64(v40, a7);
          v60 = (float64x2_t *)((char *)v59 + v14);
          *v60 = vmulq_n_f64(v41, a7);
          v60[1] = vmulq_n_f64(v42, a7);
          v61 = (float64x2_t *)((char *)v60 + v14);
          *v61 = vmulq_n_f64(v43, a7);
          v61[1] = vmulq_n_f64(v44, a7);
          v62 = (float64x2_t *)((char *)v61 + v14);
          *v62 = vmulq_n_f64(v37, a7);
          v62[1] = vmulq_n_f64(v38, a7);
          v20 += 4;
          v23 += 4 * a4 + 4;
          v21 += 2 * __incX;
          v22 -= 4;
        }
        while (v20 < __N - 3);
      }
      v63 = (float64x2_t *)((char *)&v8[(unint64_t)v12 / 2] + 8 * v20 * __incX);
      v64 = (uint64_t)&a3[v20 * a4 + v20];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v65 = a7;
LABEL_20:
        v68 = v63->f64[1];
        v63->f64[0] = v65 * (v63->f64[0] + v63->f64[__incX] * *(double *)(v64 + 8 * a4));
        v63->f64[1] = v65 * (v68 + v63->f64[v17] * *(double *)(v64 + 8 * a4));
        v69 = v63[1].f64[1];
        v63[1].f64[0] = v65 * (v63[1].f64[0] + v63->f64[v18] * *(double *)(v64 + 8 * a4));
        v63[1].f64[1] = v65 * (v69 + v63->f64[v19] * *(double *)(v64 + 8 * a4));
        v63 = (float64x2_t *)((char *)v63 + 8 * __incX);
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v65 = a7;
LABEL_21:
        v70 = vmulq_n_f64(*v63, v65);
        v71 = vmulq_n_f64(v63[1], v65);
        *v63 = v70;
        v63[1] = v71;
      }
      v12 += 4;
      a5 += 2;
      if (v12 >= v13)
        goto LABEL_23;
    }
    v65 = a7;
    v66 = v63->f64[1];
    v63->f64[0] = a7
                * (v63->f64[0]
                 + v63->f64[__incX] * *(double *)(v64 + 8 * a4)
                 + v63[v76].f64[0] * *(double *)(v64 + 16 * a4));
    v63->f64[1] = a7
                * (v66
                 + v63->f64[v17] * *(double *)(v64 + 8 * a4)
                 + v63->f64[(2 * __incX) | 1] * *(double *)(v64 + 16 * a4));
    v67 = v63[1].f64[1];
    v63[1].f64[0] = a7
                  * (v63[1].f64[0]
                   + v63->f64[v18] * *(double *)(v64 + 8 * a4)
                   + v63->f64[v75] * *(double *)(v64 + 16 * a4));
    v63[1].f64[1] = a7
                  * (v67
                   + v63->f64[v19] * *(double *)(v64 + 8 * a4)
                   + v63[__incX + 1].f64[1] * *(double *)(v64 + 16 * a4));
    v64 += 8 * (a4 + 1);
    v63 = (float64x2_t *)((char *)v63 + 8 * __incX);
    goto LABEL_20;
  }
LABEL_23:
  v72 = a1 - v12;
  if (a1 > v12)
  {
    f64 = v8[(unint64_t)v12 / 2].f64;
    do
    {
      cblas_dscal(v11, a7, f64, __incX);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasNoTrans, CblasUnit, v11, a3, v9, f64++, __incX);
      --v72;
    }
    while (v72);
  }
}

void dsyr2k_Pack_Upper(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,int a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,__int128 a35,void *a36,uint64_t a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,char a54)
{
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(double);
  void (*v68)(uint64_t, uint64_t, uint64_t, uint64_t, char *, __n128);
  unint64_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *(*v89)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v90)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v91;
  float64x2_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float64x2_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  float64x2_t *v114;
  __int128 v115;
  __int128 v116;
  float64x2_t *v117;
  float64x2_t *v118;
  __int128 v119;
  double *v120;
  uint64_t v121;
  uint64_t v122;
  float64x2_t *v123;
  __int128 v124;
  __int128 v125;
  float64x2_t *v126;
  float64x2_t *v127;
  __int128 v128;
  double *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const double *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(double);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t, uint64_t, char *, __n128);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  double *(*v171)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  double *(*v180)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  __int128 v182;
  char *v183;
  uint64_t v184;

  v57 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v163 = v59;
  v149 = v60;
  v62 = v61;
  v63 = *(double *)&v57;
  v64 = v55;
  STACK[0x102D8] = *MEMORY[0x24BDAC8D0];
  if (v54 == 111)
    v65 = 1;
  else
    v65 = v56;
  v160 = v65;
  v161 = v56;
  if (v54 == 111)
    v66 = v56;
  else
    v66 = 1;
  v148 = v66;
  v67 = (void (*)(double))dgePack_B_NoTran;
  if (v54 == 111)
    v67 = (void (*)(double))dgePack_B_Tran;
  v151 = v67;
  v68 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, __n128))dgePack_A_Tran;
  if (v54 == 111)
    v68 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, __n128))dgePack_A_NoTran;
  v159 = v68;
  v182 = v58;
  if (v55 >= 65)
  {
    v70 = (char *)malloc_type_malloc((v55 << 9) + 32864, 0x100004000313F17uLL);
    *(_QWORD *)&v58 = v182;
    v183 = v70;
    v69 = (unint64_t *)(v70 + 32832);
  }
  else
  {
    v183 = &a54;
    v69 = &STACK[0x82A0];
  }
  v164 = (uint64_t)v69;
  if (v62 >= 1)
  {
    v154 = 0;
    v71 = 0;
    v179 = v64 - 3;
    if (v64 <= 0)
      v73 = -(-v64 & 3);
    else
      v73 = v64 & 3;
    v170 = (__int128)vdupq_lane_s64(v58, 0);
    v74 = 8 * a9;
    v176 = 32 * a9;
    v75 = 64;
    vars8 = v73;
    v158 = v64;
    vars0 = 8 * a9;
    v150 = v62;
    do
    {
      v153 = v75;
      if (v62 >= v75)
        v76 = v75;
      else
        v76 = v62;
      v152 = v71 + 64;
      if (v71 + 64 <= v62)
        v77 = 64;
      else
        v77 = v62 - v71;
      v184 = v77;
      v151(v63);
      v78 = (__n128)v182;
      if (v64 >= 1)
      {
        v79 = 0;
        v80 = 0;
        v81 = 0;
        v177 = 32 * (v76 + v154);
        v162 = v149 + 8 * v71 * v148;
        v82 = *(double *)&v182 != 0.0;
        if (*(double *)&v182 == 1.0 || v71 != 0)
          v82 = 0;
        v178 = v82;
        v155 = 8 * (v76 + v154);
        v169 = v163;
        v84 = 64;
        v171 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
        v180 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
        do
        {
          v167 = v84;
          if (v64 >= v84)
            v85 = v84;
          else
            v85 = v64;
          v86 = v85 + v80;
          v87 = (int)v81;
          v165 = v81;
          v166 = v81 + 64;
          if (v81 + 64 <= v64)
            v88 = 64;
          else
            v88 = v64 - v81;
          v89 = v180;
          if ((v88 & 7) != 0)
            v89 = dgebpUnalignedC_8M4N;
          v180 = v89;
          v90 = v171;
          if ((v88 & 7) != 0)
            v90 = dgebpScaleUnalignedC_8M4N;
          v171 = v90;
          v159(v88, v184, v162 + 8 * v81 * v160, v161, v183, v78);
          v168 = v79;
          v181 = v80;
          if (v87 >= v179)
          {
            v96 = *(double *)&v182;
          }
          else
          {
            v91 = v80;
            v92 = (float64x2_t *)(v164 + v155 * v87);
            v93 = v163 + v74 * v87;
            v94 = v91 + (int)v87;
            v174 = v163 + a9 * (8 * v87 + 24);
            v95 = v79;
            v172 = v163 + a9 * (8 * v87 + 8);
            v173 = v163 + a9 * (8 * v87 + 16);
            v96 = *(double *)&v182;
            do
            {
              if (v181 + v87 <= 0)
                v97 = -(-(v181 + v87) & 7);
              else
                v97 = (v181 + v87) & 7;
              if (v181 + v87 - v97 >= v88)
                v98 = v88;
              else
                v98 = v181 + v87 - v97;
              v99 = v88 - v98;
              if (v88 - v98 >= 1)
              {
                v78 = 0uLL;
                a52 = 0u;
                a53 = 0u;
                a50 = 0u;
                a51 = 0u;
                a48 = 0u;
                a49 = 0u;
                a46 = 0u;
                a47 = 0u;
                a44 = 0u;
                a45 = 0u;
                a42 = 0u;
                a43 = 0u;
                a40 = 0u;
                a41 = 0u;
                a38 = 0u;
                a39 = 0u;
              }
              v100 = (float64x2_t *)(v93 + v95);
              if (v178)
              {
                if (v98)
                {
                  v171((float64x2_t *)v183, v92, v100, a9, v98, v184, v96);
                  v96 = *(double *)&v182;
                }
                if (v99 >= 1)
                {
                  if (v99 >= 8)
                    v101 = 8;
                  else
                    v101 = v88 - v98;
                  ((void (*)(char *, float64x2_t *, __int128 *, uint64_t, uint64_t))v180)(&v183[8 * v98 * v184], v92, &a38, 8, v101);
                  v96 = *(double *)&v182;
                  v102 = v94 - v97;
                  if (v86 >= v94 - v97)
                    v103 = v94 - v97;
                  else
                    v103 = v86;
                  *(double *)(v93 + 8 * v103 + v95) = *(double *)&a38
                                                    + *(double *)(v93 + 8 * v103 + v95) * *(double *)&v182;
                  if (v86 < v102)
                    v102 = v86;
                  v104 = v95 + 8 * v102;
                  if ((v87 & 4) != 0)
                  {
                    v113 = v93 + v104;
                    *(float64x2_t *)(v113 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a38 + 8), (float64x2_t)v170, *(float64x2_t *)(v93 + v104 + 8));
                    *(float64x2_t *)(v113 + 24) = vmlaq_f64(*(float64x2_t *)((char *)&a39 + 8), (float64x2_t)v170, *(float64x2_t *)(v93 + v104 + 24));
                    v114 = (float64x2_t *)(v172 + v104);
                    v115 = a43;
                    *v114 = vmlaq_f64((float64x2_t)a42, (float64x2_t)v170, *(float64x2_t *)(v172 + v104));
                    *(float64x2_t *)(v172 + 8 * v102 + v95 + 16) = vmlaq_f64((float64x2_t)v115, (float64x2_t)v170, *(float64x2_t *)(v172 + 8 * v102 + v95 + 16));
                    v116 = a46;
                    v114[2] = vmlaq_f64((float64x2_t)a44, (float64x2_t)v170, *(float64x2_t *)(v172 + v104 + 32));
                    v117 = (float64x2_t *)(v173 + v104);
                    *v117 = vmlaq_f64((float64x2_t)v116, (float64x2_t)v170, *(float64x2_t *)(v173 + v104));
                    v118 = (float64x2_t *)(v173 + 8 * v102 + v95);
                    v119 = a48;
                    v118[1] = vmlaq_f64((float64x2_t)a47, (float64x2_t)v170, v118[1]);
                    v117[2] = vmlaq_f64((float64x2_t)v119, (float64x2_t)v170, *(float64x2_t *)(v173 + v104 + 32));
                    *(_QWORD *)&v119 = a50;
                    v118[3].f64[0] = *(double *)&a49 + v118[3].f64[0] * *(double *)&v182;
                    v120 = (double *)(v174 + v104);
                    *v120 = *(double *)&v119 + *v120 * *(double *)&v182;
                    v121 = v174 + 8 * v102 + v95;
                    *(float64x2_t *)(v121 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a50 + 8), (float64x2_t)v170, *(float64x2_t *)(v121 + 8));
                    *(float64x2_t *)(v121 + 24) = vmlaq_f64(*(float64x2_t *)((char *)&a51 + 8), (float64x2_t)v170, *(float64x2_t *)(v121 + 24));
                    v78 = *(__n128 *)(v121 + 40);
                    *(float64x2_t *)(v121 + 40) = vmlaq_f64(*(float64x2_t *)((char *)&a52 + 8), (float64x2_t)v170, (float64x2_t)v78);
                    v78.n128_f64[0] = *((double *)&a53 + 1) + v120[7] * *(double *)&v182;
                    v120[7] = v78.n128_f64[0];
                  }
                  else
                  {
                    v105 = a46;
                    *(float64x2_t *)(v172 + v104) = vmlaq_f64((float64x2_t)a42, (float64x2_t)v170, *(float64x2_t *)(v172 + v104));
                    *(float64x2_t *)(v173 + v104) = vmlaq_f64((float64x2_t)v105, (float64x2_t)v170, *(float64x2_t *)(v173 + v104));
                    *(_QWORD *)&v105 = a50;
                    *(double *)(v173 + 8 * v102 + v95 + 16) = *(double *)&a47
                                                            + *(double *)(v173 + 8 * v102 + v95 + 16) * *(double *)&v182;
                    *(double *)(v174 + v104) = *(double *)&v105 + *(double *)(v174 + v104) * *(double *)&v182;
                    v106 = v174 + 8 * v102 + v95;
                    v78 = *(__n128 *)(v106 + 8);
                    *(float64x2_t *)(v106 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a50 + 8), (float64x2_t)v170, (float64x2_t)v78);
                    v78.n128_f64[0] = *((double *)&a51 + 1) + *(double *)(v106 + 24) * *(double *)&v182;
                    *(_QWORD *)(v106 + 24) = v78.n128_u64[0];
                  }
                }
              }
              else
              {
                if (v98)
                {
                  v180((float64x2_t *)v183, v92, v100, a9, v98, v184);
                  v96 = *(double *)&v182;
                }
                if (v99 >= 1)
                {
                  if (v99 >= 8)
                    v107 = 8;
                  else
                    v107 = v88 - v98;
                  ((void (*)(char *, float64x2_t *, __int128 *, uint64_t, uint64_t))v180)(&v183[8 * v98 * v184], v92, &a38, 8, v107);
                  v108 = v94 - v97;
                  if (v86 >= v94 - v97)
                    v109 = v94 - v97;
                  else
                    v109 = v86;
                  *(double *)(v93 + 8 * v109 + v95) = *(double *)(v93 + 8 * v109 + v95) + *(double *)&a38;
                  if (v86 < v108)
                    v108 = v86;
                  v110 = v95 + 8 * v108;
                  if ((v87 & 4) != 0)
                  {
                    v122 = v93 + v110;
                    *(float64x2_t *)(v122 + 8) = vaddq_f64(*(float64x2_t *)(v93 + v110 + 8), *(float64x2_t *)((char *)&a38 + 8));
                    *(float64x2_t *)(v122 + 24) = vaddq_f64(*(float64x2_t *)(v93 + v110 + 24), *(float64x2_t *)((char *)&a39 + 8));
                    v123 = (float64x2_t *)(v172 + v110);
                    v124 = a43;
                    *v123 = vaddq_f64(*(float64x2_t *)(v172 + v110), (float64x2_t)a42);
                    *(float64x2_t *)(v172 + 8 * v108 + v95 + 16) = vaddq_f64(*(float64x2_t *)(v172 + 8 * v108 + v95 + 16), (float64x2_t)v124);
                    v125 = a46;
                    v123[2] = vaddq_f64(*(float64x2_t *)(v172 + v110 + 32), (float64x2_t)a44);
                    v126 = (float64x2_t *)(v173 + v110);
                    *v126 = vaddq_f64(*(float64x2_t *)(v173 + v110), (float64x2_t)v125);
                    v127 = (float64x2_t *)(v173 + 8 * v108 + v95);
                    v128 = a48;
                    v127[1] = vaddq_f64(v127[1], (float64x2_t)a47);
                    v126[2] = vaddq_f64(*(float64x2_t *)(v173 + v110 + 32), (float64x2_t)v128);
                    *(_QWORD *)&v128 = a50;
                    v127[3].f64[0] = v127[3].f64[0] + *(double *)&a49;
                    v129 = (double *)(v174 + v110);
                    *v129 = *v129 + *(double *)&v128;
                    v130 = v174 + 8 * v108 + v95;
                    *(float64x2_t *)(v130 + 8) = vaddq_f64(*(float64x2_t *)(v130 + 8), *(float64x2_t *)((char *)&a50 + 8));
                    *(float64x2_t *)(v130 + 24) = vaddq_f64(*(float64x2_t *)(v130 + 24), *(float64x2_t *)((char *)&a51 + 8));
                    v78 = (__n128)vaddq_f64(*(float64x2_t *)(v130 + 40), *(float64x2_t *)((char *)&a52 + 8));
                    *(__n128 *)(v130 + 40) = v78;
                    v78.n128_f64[0] = v129[7] + *((double *)&a53 + 1);
                    v129[7] = v78.n128_f64[0];
                  }
                  else
                  {
                    v111 = a46;
                    *(float64x2_t *)(v172 + v110) = vaddq_f64(*(float64x2_t *)(v172 + v110), (float64x2_t)a42);
                    *(float64x2_t *)(v173 + v110) = vaddq_f64(*(float64x2_t *)(v173 + v110), (float64x2_t)v111);
                    *(_QWORD *)&v111 = a50;
                    *(double *)(v173 + 8 * v108 + v95 + 16) = *(double *)(v173 + 8 * v108 + v95 + 16) + *(double *)&a47;
                    *(double *)(v174 + v110) = *(double *)(v174 + v110) + *(double *)&v111;
                    v112 = v174 + 8 * v108 + v95;
                    v78 = (__n128)vaddq_f64(*(float64x2_t *)(v112 + 8), *(float64x2_t *)((char *)&a50 + 8));
                    *(__n128 *)(v112 + 8) = v78;
                    v78.n128_f64[0] = *(double *)(v112 + 24) + *((double *)&a51 + 1);
                    *(_QWORD *)(v112 + 24) = v78.n128_u64[0];
                  }
                  v96 = *(double *)&v182;
                }
              }
              v87 += 4;
              v92 = (float64x2_t *)((char *)v92 + v177);
              v94 += 4;
              v95 += v176;
            }
            while (v87 < v179);
          }
          v74 = vars0;
          if (vars8)
          {
            if (v87 - v165 >= v88)
              v131 = v88;
            else
              v131 = v87 - v165;
            v132 = v88 - v131;
            if (v88 - v131 >= 3)
              v133 = 3;
            else
              v133 = v88 - v131;
            if (v132 >= 1)
            {
              v78 = 0uLL;
              a48 = 0u;
              a49 = 0u;
              a46 = 0u;
              a47 = 0u;
              a44 = 0u;
              a45 = 0u;
              a42 = 0u;
              a43 = 0u;
              a40 = 0u;
              a41 = 0u;
              a38 = 0u;
              a39 = 0u;
            }
            v134 = v163 + 8 * v165 + 8 * v87 * a9;
            v135 = (const double *)(v164 + 8 * v87 * v184);
            if (v178)
            {
              if (v131)
                dgebpScale_8M1N((float64x2_t *)v183, (const double *)(v164 + 8 * v87 * v184), v134, a9, v131, vars8, v184, v96);
              if (v132 >= 1)
              {
                dgebp_8M1N((float64x2_t *)&v183[8 * v131 * v184+ 8* (v131 & ((int)((_DWORD)v184 << 31) >> 31) & 7)], v135, (uint64_t)&a38, 8, v133, vars8, v184);
                if (vars8 >= 1)
                {
                  v136 = 0;
                  v137 = v87 + v181;
                  if (v87 + v181 >= v86)
                    v137 = v86;
                  v138 = v169 + vars0 * v87 + 8 * v137;
                  v139 = &a38;
                  v140 = 1;
                  do
                  {
                    v141 = 0;
                    do
                    {
                      v78.n128_f64[0] = *((double *)v139 + v141) + *(double *)(v138 + 8 * v141) * *(double *)&v182;
                      *(_QWORD *)(v138 + 8 * v141++) = v78.n128_u64[0];
                    }
                    while (v140 != v141);
                    ++v136;
                    ++v140;
                    v139 += 4;
                    v138 += vars0;
                  }
                  while (v136 != vars8);
                }
              }
            }
            else
            {
              if (v131)
                dgebp_8M1N((float64x2_t *)v183, (const double *)(v164 + 8 * v87 * v184), v134, a9, v131, vars8, v184);
              if (v132 >= 1)
              {
                dgebp_8M1N((float64x2_t *)&v183[8 * v131 * v184+ 8* (v131 & ((int)((_DWORD)v184 << 31) >> 31) & 7)], v135, (uint64_t)&a38, 8, v133, vars8, v184);
                if (vars8 >= 1)
                {
                  v142 = 0;
                  v143 = v87 + v181;
                  if (v87 + v181 >= v86)
                    v143 = v86;
                  v144 = v169 + vars0 * v87 + 8 * v143;
                  v145 = &a38;
                  v146 = 1;
                  do
                  {
                    v147 = 0;
                    do
                    {
                      v78.n128_f64[0] = *(double *)(v144 + 8 * v147) + *((double *)v145 + v147);
                      *(_QWORD *)(v144 + 8 * v147++) = v78.n128_u64[0];
                    }
                    while (v146 != v147);
                    ++v142;
                    ++v146;
                    v145 += 4;
                    v144 += vars0;
                  }
                  while (v142 != vars8);
                }
              }
            }
          }
          v80 = v181 - 64;
          v84 = v167 + 64;
          v79 = v168 + 512;
          v169 += 512;
          v81 = v166;
          v64 = v158;
        }
        while (v166 < v158);
      }
      v75 = v153 + 64;
      v154 -= 64;
      v71 = v152;
      v62 = v150;
    }
    while (v152 < v150);
  }
  if (v64 >= 65)
    free(v183);
}

uint64_t Accelerate_AR_slarfb(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, __CLPK_integer *a5, __CLPK_integer *a6, __CLPK_integer *a7, __CLPK_real *a8, __CLPK_integer *a9, int a10, int *a11, __CLPK_real *a12, __CLPK_integer *a13, uint64_t a14, int *a15)
{
  uint64_t v18;
  uint64_t v19;
  __CLPK_real *v20;
  char v21;
  int v22;
  int v23;
  __CLPK_integer v24;
  __CLPK_integer v25;
  __CLPK_integer v26;
  int v27;
  uint64_t v28;
  float *v29;
  float *v30;
  __CLPK_integer v31;
  __CLPK_integer v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  float *v41;
  float v42;
  int v43;
  int v44;
  __CLPK_integer v45;
  __CLPK_integer v46;
  __CLPK_integer v47;
  int v48;
  uint64_t v49;
  float *v50;
  float *v51;
  __CLPK_integer v52;
  __CLPK_integer v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float *v62;
  float v63;
  int *v64;
  __CLPK_integer v65;
  __CLPK_integer v66;
  __CLPK_integer v67;
  int v68;
  uint64_t v69;
  float *v70;
  __CLPK_integer v71;
  __CLPK_integer v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  int v81;
  float v82;
  __CLPK_integer v83;
  __CLPK_integer v84;
  __CLPK_integer v85;
  int v86;
  uint64_t v87;
  float *v88;
  float *v89;
  __CLPK_integer v90;
  __CLPK_integer v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float *v100;
  float *v101;
  float v102;
  int *v103;
  __CLPK_integer v104;
  __CLPK_integer v105;
  __CLPK_integer v106;
  int v107;
  uint64_t v108;
  float *v109;
  __CLPK_integer v110;
  __CLPK_integer v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float *v119;
  int v120;
  float v121;
  __CLPK_integer v122;
  __CLPK_integer v123;
  __CLPK_integer v124;
  int v125;
  uint64_t v126;
  float *v127;
  __CLPK_integer v128;
  __CLPK_integer v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  float *v136;
  uint64_t v137;
  float *v138;
  float v139;
  __CLPK_integer v140;
  __CLPK_integer v141;
  __CLPK_integer v142;
  int v143;
  uint64_t v144;
  float *v145;
  float *v146;
  __CLPK_integer v147;
  __CLPK_integer v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float *v157;
  float *v158;
  float v159;
  __CLPK_integer v160;
  __CLPK_integer v161;
  __CLPK_integer v162;
  int v163;
  uint64_t v164;
  float *v165;
  __CLPK_integer v166;
  __CLPK_integer v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  float *v174;
  uint64_t v175;
  float *v176;
  float v177;
  __CLPK_real *v179;
  __CLPK_real *v180;
  uint64_t v182;
  __CLPK_real *v183;
  __CLPK_integer v184;
  uint64_t v185;
  uint64_t v186;
  char v188;
  __CLPK_integer __m;
  int n;
  int v191[3];

  if (*a5 >= 1 && *a6 >= 1)
  {
    v18 = a14;
    v184 = *a9;
    v183 = &a8[~*a9];
    v19 = *a13;
    v182 = ~(_DWORD)v19;
    v20 = &a12[v182];
    v185 = *a15;
    v186 = ~(_DWORD)v185;
    n = 0;
    if (lsame_())
      v21 = 84;
    else
      v21 = 78;
    v188 = v21;
    if (lsame_())
    {
      v22 = lsame_();
      v23 = lsame_();
      if (v22)
      {
        if (v23)
        {
          v191[0] = *a7;
          v24 = ilaslr_(a5, a7, a8, a9);
          if (v191[0] <= v24)
            v25 = v24;
          else
            v25 = v191[0];
          __m = v25;
          v26 = ilaslc_(&__m, a6, a12, a13);
          v27 = *a7;
          n = v26;
          v191[0] = v27;
          if (v27 >= 1)
          {
            v28 = 0;
            v29 = (float *)(4 * v185 + 4 * v186 + a14 + 4);
            v30 = &a12[v19 + 1 + v182];
            do
            {
              scopy_(&n, v30, a13, v29, &c__1_3);
              ++v28;
              v29 += v185;
              ++v30;
            }
            while (v28 < v191[0]);
          }
          Accelerate_AR_strmm("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (int)a8, a9, a14, a15);
          v31 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_sgemm("Transpose", "No transpose", &n, a7, v191, (uint64_t)&c_b14_0, (_DWORD)v20 + 4 * (v31 + 1 + v19), a13, (uint64_t)&v183[v31 + 1 + v184], a9, (uint64_t)&c_b14_0, a14, SHIDWORD(a14), a15);
          }
          Accelerate_AR_strmm("Right", "Upper", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, a10, a11, a14, a15);
          v32 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_sgemm("No transpose", "Transpose", v191, &n, a7, (uint64_t)&c_b25_0, (_DWORD)v183 + 4 * (v32 + 1 + v184), a9, a14, a15, (uint64_t)&c_b14_0, (_DWORD)v20 + 4 * (v32 + 1 + v19), (unint64_t)&v20[v32 + 1 + (int)v19] >> 32, a13);
          }
          Accelerate_AR_strmm("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (int)a8, a9, a14, a15);
          v33 = *a7;
          if ((int)v33 >= 1)
          {
            v34 = n;
            v35 = v33 + 1;
            v36 = (uint64_t)&a12[v19 + 1 + v182];
            v37 = 4 * v185 + 4 * v186 + a14 + 4;
            v38 = 1;
            do
            {
              if (v34 >= 1)
              {
                v39 = (v34 + 1) - 1;
                v40 = (float *)v37;
                v41 = (float *)v36;
                do
                {
                  v42 = *v40++;
                  *v41 = *v41 - v42;
                  v41 += v19;
                  --v39;
                }
                while (v39);
              }
              ++v38;
              v36 += 4;
              v37 += 4 * v185;
            }
            while (v38 != v35);
          }
        }
        else if (lsame_())
        {
          v191[0] = *a7;
          v83 = ilaslr_(a6, a7, a8, a9);
          if (v191[0] <= v83)
            v84 = v83;
          else
            v84 = v191[0];
          __m = v84;
          v85 = ilaslr_(a5, &__m, a12, a13);
          v86 = *a7;
          n = v85;
          v191[0] = v86;
          if (v86 >= 1)
          {
            v87 = 0;
            v88 = (float *)(4 * v185 + 4 * v186 + a14 + 4);
            v89 = &a12[v19 + 1 + v182];
            do
            {
              scopy_(&n, v89, &c__1_3, v88, &c__1_3);
              ++v87;
              v88 += v185;
              v89 += v19;
            }
            while (v87 < v191[0]);
          }
          Accelerate_AR_strmm("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (int)a8, a9, a14, a15);
          v90 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_sgemm("No transpose", "No transpose", &n, a7, v191, (uint64_t)&c_b14_0, (_DWORD)v20 + 4 * ((v90 + 1) * v19 + 1), a13, (uint64_t)&v183[v90 + 1 + v184], a9, (uint64_t)&c_b14_0, a14, SHIDWORD(a14), a15);
          }
          Accelerate_AR_strmm("Right", "Upper", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, a10, a11, a14, a15);
          v91 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            v92 = v91 + 1;
            v179 = &v20[v92 * (int)v19 + 1];
            Accelerate_AR_sgemm("No transpose", "Transpose", &n, v191, a7, (uint64_t)&c_b25_0, a14, a15, (uint64_t)&v183[v92 + v184], a9, (uint64_t)&c_b14_0, (int)v179, SHIDWORD(v179), a13);
          }
          Accelerate_AR_strmm("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (int)a8, a9, a14, a15);
          v93 = *a7;
          if ((int)v93 >= 1)
          {
            v94 = n;
            v95 = v93 + 1;
            v96 = (uint64_t)&a12[v19 + 1 + v182];
            v97 = 4 * v185 + 4 * v186 + a14 + 4;
            v98 = 1;
            do
            {
              if (v94 >= 1)
              {
                v99 = (v94 + 1) - 1;
                v100 = (float *)v97;
                v101 = (float *)v96;
                do
                {
                  v102 = *v100++;
                  *v101 = *v101 - v102;
                  ++v101;
                  --v99;
                }
                while (v99);
              }
              ++v98;
              v96 += 4 * v19;
              v97 += 4 * v185;
            }
            while (v98 != v95);
          }
        }
      }
      else if (v23)
      {
        v191[0] = *a7;
        v64 = a9;
        v65 = ilaslr_(a5, a7, a8, a9);
        if (v191[0] <= v65)
          v66 = v65;
        else
          v66 = v191[0];
        __m = v66;
        v67 = ilaslc_(&__m, a6, a12, a13);
        v68 = *a7;
        n = v67;
        v191[0] = v68;
        if (v68 >= 1)
        {
          v69 = 0;
          v70 = (float *)(4 * v185 + 4 * v186 + a14 + 4);
          do
          {
            scopy_(&n, &v20[(int)v19 + 1 + (int)v69++ + __m - *a7], a13, v70, &c__1_3);
            v70 += v185;
          }
          while (v69 < v191[0]);
          v68 = *a7;
          v18 = a14;
          v64 = a9;
        }
        Accelerate_AR_strmm("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (_DWORD)v183 + 4 * (v184 + 1 + __m - v68), v64, v18, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_sgemm("Transpose", "No transpose", &n, a7, v191, (uint64_t)&c_b14_0, (int)a12, a13, (uint64_t)a8, v64, (uint64_t)&c_b14_0, v18, SHIDWORD(v18), a15);
        }
        Accelerate_AR_strmm("Right", "Lower", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, a10, a11, v18, a15);
        v71 = __m;
        v72 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_sgemm("No transpose", "Transpose", v191, &n, a7, (uint64_t)&c_b25_0, (int)a8, v64, v18, a15, (uint64_t)&c_b14_0, (int)a12, SHIDWORD(a12), a13);
          v71 = __m;
          v72 = *a7;
        }
        Accelerate_AR_strmm("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (_DWORD)v183 + 4 * (v184 + 1 + v71 - v72), v64, v18, a15);
        v73 = *a7;
        if ((int)v73 >= 1)
        {
          v74 = n;
          v75 = v73 + 1;
          v76 = __m + v19 - v73 + 1;
          v77 = 4 * v185 + 4 * v186 + v18 + 4;
          v78 = 1;
          do
          {
            if (v74 >= 1)
            {
              v79 = (v74 + 1) - 1;
              v80 = (float *)v77;
              v81 = v76;
              do
              {
                v82 = *v80++;
                v20[v81] = v20[v81] - v82;
                v81 += v19;
                --v79;
              }
              while (v79);
            }
            ++v78;
            ++v76;
            v77 += 4 * v185;
          }
          while (v78 != v75);
        }
      }
      else if (lsame_())
      {
        v191[0] = *a7;
        v122 = ilaslr_(a6, a7, a8, a9);
        if (v191[0] <= v122)
          v123 = v122;
        else
          v123 = v191[0];
        __m = v123;
        v124 = ilaslr_(a5, &__m, a12, a13);
        v125 = *a7;
        n = v124;
        v191[0] = v125;
        if (v125 >= 1)
        {
          v126 = 0;
          v127 = (float *)(4 * v185 + 4 * v186 + a14 + 4);
          do
          {
            scopy_(&n, &v20[(int)v19 + 1 + (int)v19 * ((int)v126++ + *a6 - *a7)], &c__1_3, v127, &c__1_3);
            v127 += v185;
          }
          while (v126 < v191[0]);
          v125 = *a7;
        }
        Accelerate_AR_strmm("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (_DWORD)v183 + 4 * (v184 + 1 + __m - v125), a9, a14, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_sgemm("No transpose", "No transpose", &n, a7, v191, (uint64_t)&c_b14_0, (int)a12, a13, (uint64_t)a8, a9, (uint64_t)&c_b14_0, a14, SHIDWORD(a14), a15);
        }
        Accelerate_AR_strmm("Right", "Lower", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, a10, a11, a14, a15);
        v128 = __m;
        v129 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_sgemm("No transpose", "Transpose", &n, v191, a7, (uint64_t)&c_b25_0, a14, a15, (uint64_t)a8, a9, (uint64_t)&c_b14_0, (int)a12, SHIDWORD(a12), a13);
          v128 = __m;
          v129 = *a7;
        }
        Accelerate_AR_strmm("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (_DWORD)v183 + 4 * (v184 + 1 + v128 - v129), a9, a14, a15);
        v130 = *a7;
        if ((int)v130 >= 1)
        {
          v131 = n;
          v132 = v130 + 1;
          v133 = v19 + v19 * (__m - v130);
          v134 = 4 * v185 + 4 * v186 + a14 + 4;
          v135 = 1;
          do
          {
            if (v131 >= 1)
            {
              v136 = &a12[v182 + 1 + v133];
              v137 = (v131 + 1) - 1;
              v138 = (float *)v134;
              do
              {
                v139 = *v138++;
                *v136 = *v136 - v139;
                ++v136;
                --v137;
              }
              while (v137);
            }
            ++v135;
            v133 += v19;
            v134 += 4 * v185;
          }
          while (v135 != v132);
        }
      }
    }
    else if (lsame_())
    {
      v43 = lsame_();
      v44 = lsame_();
      if (v43)
      {
        if (v44)
        {
          v191[0] = *a7;
          v45 = ilaslc_(a7, a5, a8, a9);
          if (v191[0] <= v45)
            v46 = v45;
          else
            v46 = v191[0];
          __m = v46;
          v47 = ilaslc_(&__m, a6, a12, a13);
          v48 = *a7;
          n = v47;
          v191[0] = v48;
          if (v48 >= 1)
          {
            v49 = 0;
            v50 = (float *)(4 * v185 + 4 * v186 + a14 + 4);
            v51 = &a12[v19 + 1 + v182];
            do
            {
              scopy_(&n, v51, a13, v50, &c__1_3);
              ++v49;
              v50 += v185;
              ++v51;
            }
            while (v49 < v191[0]);
          }
          Accelerate_AR_strmm("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (int)a8, a9, a14, a15);
          v52 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_sgemm("Transpose", "Transpose", &n, a7, v191, (uint64_t)&c_b14_0, (_DWORD)v20 + 4 * (v52 + 1 + v19), a13, (uint64_t)&v183[(v52 + 1) * v184 + 1], a9, (uint64_t)&c_b14_0, a14, SHIDWORD(a14), a15);
          }
          Accelerate_AR_strmm("Right", "Upper", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, a10, a11, a14, a15);
          v53 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_sgemm("Transpose", "Transpose", v191, &n, a7, (uint64_t)&c_b25_0, (_DWORD)v183 + 4 * ((v53 + 1) * v184 + 1), a9, a14, a15, (uint64_t)&c_b14_0, (_DWORD)v20 + 4 * (v53 + 1 + v19), (unint64_t)&v20[v53 + 1 + (int)v19] >> 32, a13);
          }
          Accelerate_AR_strmm("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (int)a8, a9, a14, a15);
          v54 = *a7;
          if ((int)v54 >= 1)
          {
            v55 = n;
            v56 = v54 + 1;
            v57 = (uint64_t)&a12[v19 + 1 + v182];
            v58 = 4 * v185 + 4 * v186 + a14 + 4;
            v59 = 1;
            do
            {
              if (v55 >= 1)
              {
                v60 = (v55 + 1) - 1;
                v61 = (float *)v58;
                v62 = (float *)v57;
                do
                {
                  v63 = *v61++;
                  *v62 = *v62 - v63;
                  v62 += v19;
                  --v60;
                }
                while (v60);
              }
              ++v59;
              v57 += 4;
              v58 += 4 * v185;
            }
            while (v59 != v56);
          }
        }
        else if (lsame_())
        {
          v191[0] = *a7;
          v140 = ilaslc_(a7, a6, a8, a9);
          if (v191[0] <= v140)
            v141 = v140;
          else
            v141 = v191[0];
          __m = v141;
          v142 = ilaslr_(a5, &__m, a12, a13);
          v143 = *a7;
          n = v142;
          v191[0] = v143;
          if (v143 >= 1)
          {
            v144 = 0;
            v145 = (float *)(4 * v185 + 4 * v186 + a14 + 4);
            v146 = &a12[v19 + 1 + v182];
            do
            {
              scopy_(&n, v146, &c__1_3, v145, &c__1_3);
              ++v144;
              v145 += v185;
              v146 += v19;
            }
            while (v144 < v191[0]);
          }
          Accelerate_AR_strmm("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (int)a8, a9, a14, a15);
          v147 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            Accelerate_AR_sgemm("No transpose", "Transpose", &n, a7, v191, (uint64_t)&c_b14_0, (_DWORD)v20 + 4 * ((v147 + 1) * v19 + 1), a13, (uint64_t)&v183[(v147 + 1) * v184 + 1], a9, (uint64_t)&c_b14_0, a14, SHIDWORD(a14), a15);
          }
          Accelerate_AR_strmm("Right", "Upper", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, a10, a11, a14, a15);
          v148 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            v149 = v148 + 1;
            v180 = &v20[v149 * (int)v19 + 1];
            Accelerate_AR_sgemm("No transpose", "No transpose", &n, v191, a7, (uint64_t)&c_b25_0, a14, a15, (uint64_t)&v183[v149 * v184 + 1], a9, (uint64_t)&c_b14_0, (int)v180, SHIDWORD(v180), a13);
          }
          Accelerate_AR_strmm("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (int)a8, a9, a14, a15);
          v150 = *a7;
          if ((int)v150 >= 1)
          {
            v151 = n;
            v152 = v150 + 1;
            v153 = (uint64_t)&a12[v19 + 1 + v182];
            v154 = 4 * v185 + 4 * v186 + a14 + 4;
            v155 = 1;
            do
            {
              if (v151 >= 1)
              {
                v156 = (v151 + 1) - 1;
                v157 = (float *)v154;
                v158 = (float *)v153;
                do
                {
                  v159 = *v157++;
                  *v158 = *v158 - v159;
                  ++v158;
                  --v156;
                }
                while (v156);
              }
              ++v155;
              v153 += 4 * v19;
              v154 += 4 * v185;
            }
            while (v155 != v152);
          }
        }
      }
      else if (v44)
      {
        v191[0] = *a7;
        v103 = a9;
        v104 = ilaslc_(a7, a5, a8, a9);
        if (v191[0] <= v104)
          v105 = v104;
        else
          v105 = v191[0];
        __m = v105;
        v106 = ilaslc_(&__m, a6, a12, a13);
        v107 = *a7;
        n = v106;
        v191[0] = v107;
        if (v107 >= 1)
        {
          v108 = 0;
          v109 = (float *)(4 * v185 + 4 * v186 + a14 + 4);
          do
          {
            scopy_(&n, &v20[(int)v19 + 1 + (int)v108++ + __m - *a7], a13, v109, &c__1_3);
            v109 += v185;
          }
          while (v108 < v191[0]);
          v107 = *a7;
          v18 = a14;
          v103 = a9;
        }
        Accelerate_AR_strmm("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (_DWORD)v183 + 4 * (v184 + v184 * (__m - v107) + 1), v103, v18, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_sgemm("Transpose", "Transpose", &n, a7, v191, (uint64_t)&c_b14_0, (int)a12, a13, (uint64_t)a8, v103, (uint64_t)&c_b14_0, v18, SHIDWORD(v18), a15);
        }
        Accelerate_AR_strmm("Right", "Lower", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, a10, a11, v18, a15);
        v110 = __m;
        v111 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_sgemm("Transpose", "Transpose", v191, &n, a7, (uint64_t)&c_b25_0, (int)a8, v103, v18, a15, (uint64_t)&c_b14_0, (int)a12, SHIDWORD(a12), a13);
          v110 = __m;
          v111 = *a7;
        }
        Accelerate_AR_strmm("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (_DWORD)v183 + 4 * (v184 + v184 * (v110 - v111) + 1), v103, v18, a15);
        v112 = *a7;
        if ((int)v112 >= 1)
        {
          v113 = n;
          v114 = v112 + 1;
          v115 = __m + v19 - v112 + 1;
          v116 = 4 * v185 + 4 * v186 + v18 + 4;
          v117 = 1;
          do
          {
            if (v113 >= 1)
            {
              v118 = (v113 + 1) - 1;
              v119 = (float *)v116;
              v120 = v115;
              do
              {
                v121 = *v119++;
                v20[v120] = v20[v120] - v121;
                v120 += v19;
                --v118;
              }
              while (v118);
            }
            ++v117;
            ++v115;
            v116 += 4 * v185;
          }
          while (v117 != v114);
        }
      }
      else if (lsame_())
      {
        v191[0] = *a7;
        v160 = ilaslc_(a7, a6, a8, a9);
        if (v191[0] <= v160)
          v161 = v160;
        else
          v161 = v191[0];
        __m = v161;
        v162 = ilaslr_(a5, &__m, a12, a13);
        v163 = *a7;
        n = v162;
        v191[0] = v163;
        if (v163 >= 1)
        {
          v164 = 0;
          v165 = (float *)(4 * v185 + 4 * v186 + a14 + 4);
          do
          {
            scopy_(&n, &v20[(int)v19 + 1 + (int)v19 * ((int)v164++ + __m - *a7)], &c__1_3, v165, &c__1_3);
            v165 += v185;
          }
          while (v164 < v191[0]);
          v163 = *a7;
        }
        Accelerate_AR_strmm("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (_DWORD)v183 + 4 * (v184 + v184 * (__m - v163) + 1), a9, a14, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_sgemm("No transpose", "Transpose", &n, a7, v191, (uint64_t)&c_b14_0, (int)a12, a13, (uint64_t)a8, a9, (uint64_t)&c_b14_0, a14, SHIDWORD(a14), a15);
        }
        Accelerate_AR_strmm("Right", "Lower", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, a10, a11, a14, a15);
        v166 = __m;
        v167 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          Accelerate_AR_sgemm("No transpose", "No transpose", &n, v191, a7, (uint64_t)&c_b25_0, a14, a15, (uint64_t)a8, a9, (uint64_t)&c_b14_0, (int)a12, SHIDWORD(a12), a13);
          v166 = __m;
          v167 = *a7;
        }
        Accelerate_AR_strmm("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&c_b14_0, (_DWORD)v183 + 4 * (v184 + v184 * (v166 - v167) + 1), a9, a14, a15);
        v168 = *a7;
        if ((int)v168 >= 1)
        {
          v169 = n;
          v170 = v168 + 1;
          v171 = v19 + v19 * (__m - v168);
          v172 = 4 * v185 + 4 * v186 + a14 + 4;
          v173 = 1;
          do
          {
            if (v169 >= 1)
            {
              v174 = &a12[v182 + 1 + v171];
              v175 = (v169 + 1) - 1;
              v176 = (float *)v172;
              do
              {
                v177 = *v176++;
                *v174 = *v174 - v177;
                ++v174;
                --v175;
              }
              while (v175);
            }
            ++v173;
            v171 += v19;
            v172 += 4 * v185;
          }
          while (v173 != v170);
        }
      }
    }
  }
  return 0;
}

uint64_t AccelerateAR_dposv_NEWLAPACK(_DWORD *a1, uint64_t a2, int *a3, unsigned int *a4, double *a5, int *a6, char *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    dposv_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_dposv(a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_sposv_NEWLAPACK(_DWORD *a1, uint64_t a2, int *a3, unsigned int *a4, float *a5, int *a6, char *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    sposv_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_sposv(a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_spotrf_NEWLAPACK(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, int *a5, int *a6)
{
  if (!a1)
  {
LABEL_5:
    spotrf_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_spotrf(a2, a3, a4, a5, a6);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_dpotrf_NEWLAPACK(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, int *a5, int *a6)
{
  if (!a1)
  {
LABEL_5:
    dpotrf_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_dpotrf(a2, a3, a4, a5, a6);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_dpotri_NEWLAPACK(_DWORD *a1, char *a2, __CLPK_integer *a3, __CLPK_doublereal *a4, int *a5, __CLPK_integer *a6)
{
  if (!a1)
  {
LABEL_5:
    dpotri_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_dpotri(a2, a3, a4, a5, a6);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_spotrs_NEWLAPACK(_DWORD *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, float *a5, int *a6, char *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    spotrs_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_spotrs(a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_dpotrs_NEWLAPACK(_DWORD *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, double *a5, int *a6, char *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    dpotrs_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_dpotrs(a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_dtrtri_NEWLAPACK(_DWORD *a1, char *a2, char *a3, __CLPK_integer *a4, __CLPK_doublereal *a5, int *a6, __CLPK_integer *a7)
{
  if (!a1)
  {
LABEL_5:
    dtrtri_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_dtrtri(a2, a3, a4, a5, a6, a7);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_dtrtri_prealloc_NEWLAPACK(_DWORD *a1, char *a2, char *a3, unsigned int *a4, double *a5, int *a6, double *a7, int *a8, __CLPK_integer *a9)
{
  uint64_t result;

  if (a1)
  {
    if (*a1 != 1)
    {
      printf("*** ERROR *** CONTEXT ID is incorrect");
      return 0xFFFFFFFFLL;
    }
    if (a1[1])
      return Accelerate_AR_dtrtri_prealloc(a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (*a8 == -1)
  {
    result = 0;
    *a7 = 0.0;
  }
  else
  {
    dtrtri_NEWLAPACK();
    return 0;
  }
  return result;
}

uint64_t AccelerateAR_dsyev_NEWLAPACK(_DWORD *a1, char *a2, char *a3, __CLPK_integer *a4, __CLPK_doublereal *a5, __CLPK_integer *a6, __CLPK_doublereal *a7, __CLPK_doublereal *a8, int *a9, __CLPK_integer *a10)
{
  if (!a1)
  {
LABEL_5:
    dsyev_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_dsyev(a2, a3, a4, a5, a6, a7, a8, a9, a10);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_sgeqrf_NEWLAPACK(_DWORD *a1, unsigned int *a2, int *a3, uint64_t a4, __CLPK_integer *__lda, __CLPK_real *a6, __CLPK_real *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    sgeqrf_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_sgeqrf(a2, a3, a4, __lda, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_dgeqrf_NEWLAPACK(_DWORD *a1, __CLPK_integer *__n1, __CLPK_integer *__n2, uint64_t a4, __CLPK_integer *a5, __CLPK_doublereal *a6, __CLPK_doublereal *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    dgeqrf_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_dgeqrf(__n1, __n2, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_sQRSolve_NEWLAPACK(_DWORD *a1, int a2, unsigned int a3, int a4, int a5, __CLPK_real *a6, __CLPK_integer a7, __CLPK_real *a8, __CLPK_real *a9, int *a10)
{
  if (!a1)
    return Accelerate_AR_sQRSolve_fallback_NEWLAPACK(a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_sQRSolve_NEWLAPACK(a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return Accelerate_AR_sQRSolve_fallback_NEWLAPACK(a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_dQRSolve_NEWLAPACK(uint64_t a1, int a2, __CLPK_integer a3, __CLPK_integer a4, uint64_t a5, __CLPK_doublereal *a6, __CLPK_integer a7, __CLPK_doublereal *a8, __CLPK_doublereal *a9, int *a10)
{
  return Accelerate_AR_dQRSolve_fallback_NEWLAPACK(a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t AccelerateAR_sQRMargin_NEWLAPACK(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __CLPK_real *a7, int *a8)
{
  if (!a1)
    return Accelerate_AR_sQRMargin_fallback_NEWLAPACK(a2, a3, a4, a5, a6, a7, a8);
  if (*a1 == 1)
  {
    if (a1[1])
      return Accelerate_AR_sQRMargin_NEWLAPACK(a2, a3, a4, a5, a6, a7, a8);
    return Accelerate_AR_sQRMargin_fallback_NEWLAPACK(a2, a3, a4, a5, a6, a7, a8);
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t AccelerateAR_dQRMargin_NEWLAPACK(uint64_t a1, __CLPK_integer a2, __CLPK_integer a3, uint64_t a4, uint64_t a5, __CLPK_integer a6, __CLPK_doublereal *a7, int *a8)
{
  return Accelerate_AR_dQRMargin_fallback_NEWLAPACK(a2, a3, a4, a5, a6, a7, a8);
}

void dtrsm_Left_Forward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v56;
  uint64_t v57;
  void (*v58)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  double *(*v60)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t vars0;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *(*v89)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v90;
  float64x2_t *v91;

  v28 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v71 = v30;
  v72 = v29;
  v31 = v25;
  v70 = v32;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  if (v23 == 111)
    v35 = 1;
  else
    v35 = v27;
  v81 = v35;
  v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))dgePack_A_Tran;
  v83 = v27;
  if (v23 == 111)
    v37 = v27;
  else
    v37 = 1;
  v67 = v37;
  if (v23 == 111)
    v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))dgePack_A_NoTran;
  v80 = v36;
  v38 = dtrsm_block_LUT;
  if (v23 == 111)
    v38 = dtrsm_block_LLN;
  v69 = v38;
  v39 = (v25 << 6) + 4108;
  if (a12 == -1)
  {
    v44 = 8 * v39;
    if (v25 < 65)
      v44 = 0;
    v43 = (double)(unint64_t)v44;
    goto LABEL_19;
  }
  v40 = v26;
  v41 = v24;
  v42 = *(double *)&v28;
  if (v25 >= 65 && a12)
  {
    if (8 * v39 > a12)
    {
      v43 = (double)(unint64_t)(8 * v39);
LABEL_19:
      *a11 = v43;
      return;
    }
    goto LABEL_22;
  }
  if (v25 >= 65)
  {
LABEL_22:
    v91 = (float64x2_t *)a11;
    v66 = a11;
    if (!a11)
      v91 = (float64x2_t *)malloc_type_malloc(8 * v39, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v66 = a11;
  v91 = (float64x2_t *)&a23;
LABEL_24:
  if (v40 >= 1)
  {
    vars0 = 0;
    v45 = 0;
    v84 = (__n128 *)&v91[2052];
    v90 = v31 - 3;
    if (v31 <= 0)
      v47 = -(-v31 & 3);
    else
      v47 = v31 & 3;
    v86 = v47;
    v78 = v41;
    v75 = a10 + 512;
    v48 = 64;
    v79 = v31;
    v68 = v40;
    do
    {
      v73 = v48;
      if (v40 >= v48)
        v49 = v48;
      else
        v49 = v40;
      if (v45 + 64 <= v40)
        v50 = 64;
      else
        v50 = v40 - v45;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v69)(v70, v50, v31, v72 + 8 * v45 * v83 + 8 * v45, v42);
      dgePack_B_NoTran(v50, v31, (float64_t *)(v71 + 8 * v45), a9, v84, -1.0, v51, v52);
      v74 = v45 + 64;
      if (v45 + 64 < v41)
      {
        v53 = v75;
        v54 = 32 * (v49 + vars0);
        v82 = v72 + 8 * v45 * v67;
        v56 = v42 != 1.0 && v45 == 0 && v42 != 0.0;
        v57 = v45 + 64;
        v89 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
        v58 = (void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
        do
        {
          v87 = v57 + 64;
          if (v57 + 64 <= v41)
            v59 = 64;
          else
            v59 = v41 - v57;
          v85 = v57;
          if ((v59 & 7) != 0)
            v58 = (void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpUnalignedC_8M4N;
          v60 = v89;
          if ((v59 & 7) != 0)
            v60 = dgebpScaleUnalignedC_8M4N;
          v89 = v60;
          v80(v59, v50, v82 + 8 * v57 * v81, v83, v91);
          v88 = v53;
          v61 = 0;
          if (v31 >= 4)
          {
            v62 = (float64x2_t *)v53;
            v63 = v91 + 2052;
            do
            {
              if (v56)
                v89(v91, v63, v62, a9, v59, v50, v42);
              else
                v58(v91, v63, v62, a9, v59, v50);
              v61 += 4;
              v63 = (float64x2_t *)((char *)v63 + v54);
              v62 += 2 * a9;
            }
            while (v61 < v90);
          }
          v31 = v79;
          if (v86)
          {
            v64 = a10 + 8 * v85 + 8 * v61 * a9;
            v65 = &v84->n128_f64[v61 * v50];
            if (v56)
              dgebpScale_8M1N(v91, v65, v64, a9, v59, v86, v50, v42);
            else
              dgebp_8M1N(v91, v65, v64, a9, v59, v86, v50);
          }
          v53 = v88 + 512;
          v57 = v87;
          v41 = v78;
        }
        while (v87 < v78);
      }
      v45 = v74;
      v48 = v73 + 64;
      v75 += 512;
      vars0 -= 64;
      v42 = 1.0;
      v40 = v68;
    }
    while (v74 < v68);
  }
  if (v31 >= 65 && !v66)
    free(v91);
}

void dtrsm_Left_Backward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19)
{
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float64x2_t v45;
  _BOOL4 v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double *(*v54)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v55)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  uint64_t v59;
  const double *v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int v65;
  uint64_t v66;
  uint64_t vars0;
  void (*vars8)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double *(*v77)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v78)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  float64x2_t *v79;

  v24 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v66 = v25;
  v26 = v20;
  v65 = v27;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  if (v19 == 111)
    v29 = 1;
  else
    v29 = v23;
  v70 = v29;
  v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))dgePack_A_Tran;
  v72 = v23;
  if (v19 == 111)
    v31 = v23;
  else
    v31 = 1;
  v63 = v31;
  if (v19 == 111)
    v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))dgePack_A_NoTran;
  vars8 = v30;
  v32 = dtrsm_block_LLT;
  if (v19 == 111)
    v32 = dtrsm_block_LUN;
  v64 = v32;
  v33 = (v20 << 6) + 4108;
  if (a12 == -1)
  {
    v38 = 8 * v33;
    if (v20 < 65)
      v38 = 0;
    v37 = (double)(unint64_t)v38;
    goto LABEL_19;
  }
  v34 = v22;
  v35 = v21;
  v36 = *(double *)&v24;
  if (v20 >= 65 && a12)
  {
    if (8 * v33 > a12)
    {
      v37 = (double)(unint64_t)(8 * v33);
LABEL_19:
      *a11 = v37;
      return;
    }
    goto LABEL_22;
  }
  if (v20 >= 65)
  {
LABEL_22:
    v79 = (float64x2_t *)a11;
    v61 = a11;
    if (!a11)
      v79 = (float64x2_t *)malloc_type_malloc(8 * v33, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v61 = a11;
  v79 = (float64x2_t *)&a19;
LABEL_24:
  if ((uint64_t)v35 >= 1)
  {
    v73 = (__n128 *)&v79[2052];
    v39 = v26 - 3;
    if (v26 <= 0)
      v40 = -(-v26 & 3);
    else
      v40 = v26 & 3;
    v74 = v40;
    v41 = 1;
    vars0 = v26;
    v62 = v34;
    while (1)
    {
      v42 = v35 >= 0x40 ? v35 - 64 : 0;
      v43 = v35 >= 0x40 ? 64 : v35;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v64)(v65, v43, v26, v34 + 8 * v42 * v72 + 8 * v42, v36);
      dgePack_B_NoTran(v43, v26, (float64_t *)(v66 + 8 * v42), v70, v73, -1.0, v44, v45);
      if (v35 < 0x41)
        break;
      v71 = v34 + 8 * v42 * v63;
      v46 = v36 != 1.0;
      if (v36 == 0.0)
        v46 = 0;
      v47 = v41 & v46;
      v48 = v42;
      v78 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
      v77 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
      do
      {
        v49 = v48;
        v50 = v48 >= 0x40;
        v51 = v48 - 64;
        if (v50)
          v52 = 64;
        else
          v52 = v49;
        if (!v50)
          v51 = 0;
        v75 = v51;
        v76 = a10 + 8 * v51;
        v53 = v71 + 8 * v51 * v70;
        v54 = v77;
        if ((v52 & 7) != 0)
          v54 = dgebpUnalignedC_8M4N;
        v77 = v54;
        v55 = v78;
        if ((v52 & 7) != 0)
          v55 = dgebpScaleUnalignedC_8M4N;
        v78 = v55;
        vars8(v52, v43, v53, v72, v79);
        v56 = 0;
        if (v26 >= 4)
        {
          v56 = 0;
          v57 = (float64x2_t *)v76;
          v58 = v79 + 2052;
          do
          {
            if (v47)
              v78(v79, v58, v57, v70, v52, v43, v36);
            else
              v77(v79, v58, v57, v70, v52, v43);
            v56 += 4;
            v58 += 2 * v43;
            v57 += 2 * v70;
          }
          while (v56 < v39);
        }
        if (v74)
        {
          v59 = v76 + 8 * v56 * v70;
          v60 = &v73->n128_f64[v56 * v43];
          if (v47)
            dgebpScale_8M1N(v79, v60, v59, v70, v52, v74, v43, v36);
          else
            dgebp_8M1N(v79, v60, v59, v70, v52, v74, v43);
        }
        v48 = v75;
        v26 = vars0;
      }
      while (v75 > 0);
      v41 = 0;
      v36 = 1.0;
      v34 = v62;
      v35 = v42;
    }
  }
  if (v26 >= 65 && !v61)
    free(v79);
}

void APL_sgemm_noPack_TN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  unint64_t v12;
  BOOL v13;
  uint64_t i;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  const double *v19;
  const double *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  __int32 v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  double v71;
  int32x2_t v72;
  double v73;
  float32x2_t v74;
  __int32 *v75;

  v12 = 4 * a5;
  v13 = a2 <= 1;
  for (i = a2 - 1; !v13; i -= 2)
  {
    v15 = (float32x4_t *)a4;
    v16 = (float32x4_t *)(a4 + v12);
    v17 = (float32x4_t *)(a4 + 2 * v12);
    v18 = (float32x4_t *)(a4 + v12 + 2 * v12);
    v19 = a6;
    v20 = (double *)((char *)a6 + 4 * a7);
    v21 = (float32x4_t *)((char *)a8 + 8 * a12);
    v22 = __OFSUB__(a1, 3);
    v23 = a1 - 3;
    if (a1 > 3)
    {
      do
      {
        v24 = (float32x4_t)veorq_s8(a11, a11);
        v25 = v24;
        v26 = v24;
        v27 = v24;
        v28 = v24;
        v29 = v24;
        v30 = v24;
        v31 = v24;
        v32 = a3 - 3;
        if (a3 > 3)
        {
          v33 = *v15++;
          v34 = v33;
          v35 = *v16++;
          v36 = v35;
          v37 = *v17++;
          v38 = v37;
          v39 = *v18++;
          v40 = v39;
          v41 = *(float32x4_t *)v19;
          v19 += 2;
          v42 = v41;
          v43 = *(float32x4_t *)v20;
          v20 += 2;
          v44 = v43;
          v22 = __OFSUB__(v32, 4);
          v45 = v32 == 4;
          v32 = a3 - 7;
          if (!((a3 - 7 < 0) ^ v22 | v45))
          {
            do
            {
              v24 = vmlaq_f32(v24, v34, v42);
              v25 = vmlaq_f32(v25, v36, v42);
              v26 = vmlaq_f32(v26, v38, v42);
              v27 = vmlaq_f32(v27, v40, v42);
              v46 = *(float32x4_t *)v19;
              v19 += 2;
              v42 = v46;
              v28 = vmlaq_f32(v28, v34, v44);
              v47 = *v15++;
              v34 = v47;
              v29 = vmlaq_f32(v29, v36, v44);
              v48 = *v16++;
              v36 = v48;
              v30 = vmlaq_f32(v30, v38, v44);
              v49 = *v17++;
              v38 = v49;
              v31 = vmlaq_f32(v31, v40, v44);
              v50 = *v18++;
              v40 = v50;
              v51 = *(float32x4_t *)v20;
              v20 += 2;
              v44 = v51;
              v13 = v32 <= 4;
              v32 -= 4;
            }
            while (!v13);
          }
          v24 = vpaddq_f32(vmlaq_f32(v24, v34, v42), vmlaq_f32(v25, v36, v42));
          v25 = vpaddq_f32(vmlaq_f32(v26, v38, v42), vmlaq_f32(v27, v40, v42));
          v26 = vpaddq_f32(vmlaq_f32(v28, v34, v44), vmlaq_f32(v29, v36, v44));
          v27 = vpaddq_f32(vmlaq_f32(v30, v38, v44), vmlaq_f32(v31, v40, v44));
        }
        v13 = v32 <= -2;
        v52 = v32 + 2;
        if (!v13)
        {
          v53 = v15->i64[0];
          v15 = (float32x4_t *)((char *)v15 + 8);
          v54.i64[0] = v53;
          v54.i64[1] = v16->i64[0];
          v16 = (float32x4_t *)((char *)v16 + 8);
          v55 = v17->i64[0];
          v17 = (float32x4_t *)((char *)v17 + 8);
          v56.i64[0] = v55;
          v56.i64[1] = v18->i64[0];
          v18 = (float32x4_t *)((char *)v18 + 8);
          v57 = (float32x4_t)vld1q_dup_f64(v19++);
          v58 = (float32x4_t)vld1q_dup_f64(v20++);
          v24 = vmlaq_f32(v24, v54, v57);
          v25 = vmlaq_f32(v25, v56, v57);
          v26 = vmlaq_f32(v26, v54, v58);
          v27 = vmlaq_f32(v27, v56, v58);
          v52 -= 2;
        }
        v59 = vpaddq_f32(v24, v25);
        v60 = vpaddq_f32(v26, v27);
        if (v52 > -1)
        {
          v61 = v15->i32[0];
          v15 = (float32x4_t *)((char *)v15 + 4);
          v62.i32[0] = v61;
          v62.i32[1] = v16->i32[0];
          v62.i32[2] = v17->i32[0];
          v62.i32[3] = v18->i32[0];
          v59 = vmlaq_n_f32(v59, v62, *(float *)v19);
          v60 = vmlaq_n_f32(v60, v62, *(float *)v20);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v59, a9), *a8, a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v60, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)&v15[v12 / 4] - 4 * a3);
        v16 = (float32x4_t *)((char *)v15 + v12);
        v17 = (float32x4_t *)((char *)v15 + 2 * v12);
        v18 = (float32x4_t *)((char *)v15 + 2 * v12 + v12);
        v22 = __OFSUB__(v23, 4);
        v13 = v23 <= 4;
        v23 -= 4;
      }
      while (!v13);
    }
    v63 = a1 & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_18;
        v65 = v15->f32[0];
        v15 = (float32x4_t *)((char *)v15 + 4);
        v66 = v65;
        v67 = *(_DWORD *)v19;
        v19 = (const double *)((char *)v19 + 4);
        v68.i32[0] = v67;
        v68.i32[1] = *(_DWORD *)v20;
        v20 = (const double *)((char *)v20 + 4);
        *(float32x2_t *)a11.i8 = vmla_n_f32(*(float32x2_t *)a11.i8, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_18:
          do
          {
            v69 = *(float32x2_t *)v15->f32;
            v15 = (float32x4_t *)((char *)v15 + 8);
            v70 = v69;
            v71 = *v19++;
            v72 = *(int32x2_t *)&v71;
            v73 = *v20++;
            *(float32x2_t *)a11.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a11.i8, (float32x2_t)vtrn1_s32(v72, *(int32x2_t *)&v73), v70.f32[0]), (float32x2_t)vtrn2_s32(v72, *(int32x2_t *)&v73), v70, 1);
            v13 = v64 <= 2;
            v64 -= 2;
          }
          while (!v13);
        }
        v74.i32[0] = a8->i32[0];
        v74.i32[1] = a8->i32[a12];
        *(float32x2_t *)a11.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)a11.i8, a9), v74, a10);
        v75 = &a8->i32[a12];
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v75 = a11.i32[1];
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)v15 + v12 + -4 * a3);
        v13 = v63-- <= 1;
      }
      while (!v13);
    }
    a6 += a7;
    a8 = v21;
    v13 = i <= 2;
  }
  if (i > -1)
    sgemvT_work(a3, a1, a4, v12 >> 2, a6, 1, a8->f32, 1, a9, a10);
}

uint64_t lapack::hardware::query::cpuFamily(lapack::hardware::query *this)
{
  size_t v2;
  uint64_t v3;

  v2 = 8;
  v3 = 0;
  if (!sysctlbyname("hw.cpufamily", &v3, &v2, 0, 0))
  {
    if (v3 > 1176831185)
    {
      if (v3 <= 2465937351)
      {
        if (v3 == 1176831186)
          return 8;
        if (v3 == 1741614739)
          return 5;
      }
      else
      {
        switch(v3)
        {
          case 2465937352:
            return 4;
          case 3660830781:
            return 10;
          case 3894312694:
            return 6;
        }
      }
    }
    else if (v3 <= 506291072)
    {
      if (v3 == 131287967)
        return 7;
      if (v3 == 458787763)
        return 9;
    }
    else
    {
      switch(v3)
      {
        case 506291073:
          return 1;
        case 747742334:
          return 3;
        case 933271106:
          return 2;
      }
    }
  }
  return 0;
}

uint64_t lapack::hardware::query::cpuSubFamily(lapack::hardware::query *this)
{
  int v1;
  unsigned int v2;
  size_t v4;
  uint64_t v5;

  v4 = 8;
  v5 = 0;
  v1 = sysctlbyname("hw.cpusubfamily", &v5, &v4, 0, 0);
  if ((unint64_t)(v5 - 1) <= 4)
    v2 = v5;
  else
    v2 = 0;
  if (v1)
    return 0;
  else
    return v2;
}

unint64_t queryPlatform@<X0>(lapack::hardware::query *a1@<X0>, uint64_t a2@<X8>)
{
  lapack::hardware::query *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t result;
  size_t v19;
  uint64_t v20;

  v3 = (lapack::hardware::query *)lapack::hardware::query::cpuFamily(a1);
  v4 = (int)v3;
  *(_DWORD *)(a2 + 4) = (_DWORD)v3;
  v5 = lapack::hardware::query::cpuSubFamily(v3);
  *(_DWORD *)(a2 + 8) = v5;
  v19 = 8;
  v20 = 0;
  v6 = sysctlbyname("hw.perflevel0.l2cachesize", &v20, &v19, 0, 0);
  v7 = v20;
  if (v6)
    v7 = 0x800000;
  *(_QWORD *)(a2 + 40) = v7;
  v19 = 8;
  v20 = 0;
  if (sysctlbyname("hw.perflevel0.physicalcpu_max", &v20, &v19, 0, 0))
    v8 = 2;
  else
    v8 = v20;
  *(_DWORD *)(a2 + 12) = v8;
  v19 = 8;
  v20 = 0;
  v9 = sysctlbyname("hw.perflevel0.cpusperl2", &v20, &v19, 0, 0);
  v10 = v20;
  if (v9)
    v10 = 2;
  *(_DWORD *)(a2 + 28) = v10;
  *(_DWORD *)(a2 + 20) = v8 / v10;
  v19 = 8;
  v20 = 0;
  v11 = sysctlbyname("hw.perflevel1.l2cachesize", &v20, &v19, 0, 0);
  v12 = v20;
  if (v11)
    v12 = 0x400000;
  *(_QWORD *)(a2 + 48) = v12;
  v19 = 8;
  v20 = 0;
  if (sysctlbyname("hw.perflevel1.physicalcpu_max", &v20, &v19, 0, 0))
    v13 = 4;
  else
    v13 = v20;
  *(_DWORD *)(a2 + 16) = v13;
  v19 = 8;
  v20 = 0;
  v14 = sysctlbyname("hw.perflevel1.cpusperl2", &v20, &v19, 0, 0);
  v15 = v20;
  if (v14)
    v15 = 4;
  *(_DWORD *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 24) = v13 / v15;
  switch(v4)
  {
    case 8:
      v17 = 1;
      break;
    case 10:
      if ((v5 & 6) == 4)
        v17 = 8;
      else
        v17 = 3;
      break;
    case 9:
      v16 = v5 - 2;
      if (v16 >= 4)
        v17 = 2;
      else
        v17 = dword_23D9C2380[v16];
      break;
    default:
      v17 = 0;
      break;
  }
  *(_DWORD *)a2 = v17;
  result = _get_cpu_capabilities();
  *(_DWORD *)(a2 + 56) = (result >> 59) & 2;
  return result;
}

int sgeqr2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__tau, __CLPK_real *__work, __CLPK_integer *__info)
{
  __CLPK_integer v7;
  __CLPK_integer v8;
  __CLPK_integer v9;
  __CLPK_integer v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __CLPK_real *v16;
  __CLPK_real *v17;
  uint64_t v18;
  __CLPK_integer v19;
  uint64_t v20;
  uint64_t v21;
  __CLPK_real *v22;
  uint64_t v23;
  __CLPK_real v24;
  __CLPK_integer v25;
  uint64_t v28;
  __CLPK_integer v30;
  __CLPK_integer v32;
  __CLPK_integer __na[2];

  v30 = *__lda;
  *__info = 0;
  v7 = *__m;
  if (*__m < 0)
  {
    v9 = 1;
    v10 = -1;
    goto LABEL_10;
  }
  if (*__n < 0)
  {
    v9 = 2;
    v10 = -2;
    goto LABEL_10;
  }
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = *__m;
  if (*__lda < v8)
  {
    v9 = 4;
    v10 = -4;
LABEL_10:
    *__info = v10;
    __na[1] = v9;
    xerbla_();
    return 0;
  }
  if (v7 >= *__n)
    v7 = *__n;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = ~v30;
    v16 = &__a[v15];
    v17 = &__a[2 * v30 + 1 + v15];
    v28 = v7;
    v18 = 1;
    v19 = v30;
    do
    {
      v20 = *__m;
      v21 = v18 + 1;
      v32 = v18 + 1;
      __na[0] = v14 + v20;
      v22 = &v16[v18 + v19];
      if (v18 < v20)
        LODWORD(v20) = v18 + 1;
      slarfg_(__na, v22, &v16[v30 + v13 + (int)v20], &c__1_4, __tau);
      v23 = *__n;
      if (v18 < v23)
      {
        v24 = *v22;
        *v22 = 1.0;
        v25 = v14 + *__m;
        v32 = v14 + v23 - 1;
        __na[0] = v25;
        Accelerate_AR_slarf((uint64_t)"Left", __na, &v32, v22, &c__1_4, __tau, v17, __lda, __work);
        *v22 = v24;
      }
      --v14;
      v19 += v30;
      v13 += v30;
      v17 += v30 + 1;
      ++__tau;
      ++v18;
    }
    while (v21 - 1 < v28);
  }
  return 0;
}

void cblas_dtrsm_sequential_prealloc(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, int a17, char *a18, int a19, double *a20,unsigned int a21)
{
  int v27;
  char *v30;
  char *v31;
  int v32;
  int v34;
  int v35;
  char *v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  unint64_t v56;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char v68;

  v27 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v32 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
LABEL_47:
      v35 = v32;
      goto LABEL_48;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a17 < (int)a7 || a17 <= 0)
      {
        v47 = a17;
        v51 = a7;
        v31 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v54 = a2;
        v47 = 142;
        v51 = 141;
        v31 = "SIDE must be %d or %d, but is set to %d";
        v39 = 2;
        goto LABEL_41;
      }
      if (a17 < (int)a6 || a17 <= 0)
      {
        v47 = a17;
        v51 = a6;
        v31 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v39 = 10;
LABEL_41:
        v35 = cblas_errprn(v39, 2000, v31, v47, v51, v54);
        goto LABEL_43;
      }
    }
    v35 = 2000;
LABEL_43:
    if (a19 >= (int)a7 && a19 > 0)
      goto LABEL_48;
    v48 = a19;
    v52 = a7;
    v37 = "ldb must be >= MAX(N,1): ldb=%d N=%d";
    goto LABEL_46;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a17 >= (int)a7 && a17 > 0)
      goto LABEL_24;
    v46 = a17;
    v50 = a7;
    v30 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v50 = 141;
      v54 = a2;
      v46 = 142;
      v30 = "SIDE must be %d or %d, but is set to %d";
      v34 = 2;
      goto LABEL_26;
    }
    if (a17 >= (int)a6 && a17 > 0)
    {
LABEL_24:
      v35 = 2000;
      goto LABEL_27;
    }
    v46 = a17;
    v50 = a6;
    v30 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v34 = 10;
LABEL_26:
  v35 = cblas_errprn(v34, 2000, v30, v46, v50, v54);
LABEL_27:
  if (a19 < (int)a6 || a19 <= 0)
  {
    v48 = a19;
    v52 = a6;
    v37 = "ldb must be >= MAX(M,1): ldb=%d M=%d";
LABEL_46:
    v32 = cblas_errprn(12, v35, v37, v48, v52, v54);
    goto LABEL_47;
  }
LABEL_48:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v35 = cblas_errprn(3, v35, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v35 = cblas_errprn(4, v35, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((a6 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_59:
    v35 = cblas_errprn(6, v35, "M cannot be less than zero; it is set to %d.", a6);
    if ((a7 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_60;
  }
  v35 = cblas_errprn(5, v35, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if ((a6 & 0x80000000) != 0)
    goto LABEL_59;
LABEL_54:
  if ((a7 & 0x80000000) == 0)
    goto LABEL_55;
LABEL_60:
  v35 = cblas_errprn(7, v35, "N cannot be less than zero; it is set to %d.", a7);
LABEL_55:
  if (v35 == 2000)
  {
    if (a1 == 102)
    {
      v40 = (int)a6;
      v41 = (int)a7;
      v42 = a17;
      v56 = (int)a21;
      v53 = a19;
      v55 = a20;
      v49 = a18;
      v43 = a9;
      v44 = v27;
      v45 = a3;
    }
    else
    {
      v40 = (int)a7;
      if (v27 == 141)
        v44 = 142;
      else
        v44 = 141;
      v41 = (int)a6;
      v42 = a17;
      if (a3 == 121)
        v45 = 122;
      else
        v45 = 121;
      v56 = (int)a21;
      v53 = a19;
      v55 = a20;
      v49 = a18;
      v43 = a9;
    }
    APL_seq_dtrsm(v44, v45, a4, a5, v40, v41, a8, v42, v43, a10, a11, a12, a13, a14, a15, a16, v49, v53, v55,
      v56,
      1,
      a21,
      (uint64_t)a20,
      a8,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68);
  }
  else
  {
    cblas_xerbla(v35, "cblas_dtrsm", "");
  }
}

#error "23D967B10: call analysis failed (funcsize=366)"

uint64_t dgePack_B_NoTran(uint64_t result, uint64_t a2, float64_t *a3, uint64_t a4, __n128 *a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float64_t *v10;
  float64_t *v11;
  float64_t *v12;
  float64_t *v13;
  uint64_t v14;
  float64_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  BOOL v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  uint64_t v28;
  float64x2_t v29;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = &v10[v8];
        v12 = &v10[2 * a4];
        v13 = &v10[3 * a4];
        v14 = result - 1;
        v15 = v10;
        if (result - 1 > 0)
        {
          do
          {
            v16.f64[0] = *v15;
            v17.f64[0] = v15[1];
            v15 += 2;
            v16.f64[1] = *v11;
            v17.f64[1] = v11[1];
            v11 += 2;
            v18.f64[0] = *v12;
            v19.f64[0] = v12[1];
            v12 += 2;
            v18.f64[1] = *v13;
            v19.f64[1] = v13[1];
            v13 += 2;
            a8 = vmulq_n_f64(v16, a6);
            *a5 = (__n128)a8;
            v20 = (float64x2_t *)&a5[1];
            *v20++ = vmulq_n_f64(v18, a6);
            *v20++ = vmulq_n_f64(v17, a6);
            *v20 = vmulq_n_f64(v19, a6);
            a5 = (__n128 *)&v20[1];
            v21 = v14 <= 2;
            v14 -= 2;
          }
          while (!v21);
        }
        if (v14 >= 0)
        {
          v22.f64[0] = *v15;
          v22.f64[1] = *v11;
          v23.f64[0] = *v12;
          v23.f64[1] = *v13;
          a8 = vmulq_n_f64(v22, a6);
          *a5 = (__n128)a8;
          v24 = (float64x2_t *)&a5[1];
          *v24 = vmulq_n_f64(v23, a6);
          a5 = (__n128 *)&v24[1];
        }
        v9 += 4;
        v10 += 4 * a4;
      }
      while (v9 < a2 - 3);
    }
    v25 = a2 - v9;
    if (a2 > v9)
    {
      v26 = (float64x2_t *)&a3[v9 * a4];
      do
      {
        v27 = v26;
        v28 = result - 1;
        if (result > 1)
        {
          do
          {
            v29 = *v27++;
            a8 = vmulq_n_f64(v29, a6);
            *a5++ = (__n128)a8;
            v21 = v28 <= 2;
            v28 -= 2;
          }
          while (!v21);
        }
        if (v28 >= 0)
        {
          a8.f64[0] = v27->f64[0];
          a8 = vmulq_n_f64(a8, a6);
          a5->n128_u64[0] = *(_QWORD *)&a8.f64[0];
          ++a5;
        }
        v26 = (float64x2_t *)((char *)v26 + v8 * 8);
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t dgePack_B_Tran(uint64_t result, uint64_t a2, float64x2_t *a3, uint64_t a4, float64x2_t *a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64_t *f64;
  float64_t *v17;
  uint64_t v18;
  float64_t *v19;
  float64x2_t v20;
  BOOL v21;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v10;
        v12 = result;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v11 = (float64x2_t *)((char *)v11 + v8 * 8);
          a8 = vmulq_n_f64(v13, a6);
          *a5 = a8;
          a5[1] = vmulq_n_f64(v14, a6);
          a5 += 2;
          --v12;
        }
        while (v12);
        v9 += 4;
        v10 += 2;
      }
      while (v9 < a2 - 3);
    }
    v15 = a2 - v9;
    if (a2 > v9)
    {
      f64 = a3[(unint64_t)v9 / 2].f64;
      do
      {
        v17 = f64;
        v18 = result - 1;
        if (result > 1)
        {
          do
          {
            v20.f64[0] = *v17;
            v19 = &v17[v8];
            v20.f64[1] = *v19;
            v17 = &v19[v8];
            a8 = vmulq_n_f64(v20, a6);
            *a5++ = a8;
            v21 = v18 <= 2;
            v18 -= 2;
          }
          while (!v21);
        }
        if (!v18)
        {
          a8.f64[0] = *v17;
          a8 = vmulq_n_f64(a8, a6);
          a5->f64[0] = a8.f64[0];
          ++a5;
        }
        ++f64;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t dgePack_A_NoTran(uint64_t result, uint64_t a2, __int128 *a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;

  if ((result & 7) == 0)
    return dgePack_A_NoTran_Aligned(result, a2, a3, a4, a5);
  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = a3 + 2;
    do
    {
      v7 = v6;
      v8 = a2;
      if (a2 >= 1)
      {
        do
        {
          v9 = *(v7 - 1);
          v10 = *v7;
          v11 = v7[1];
          *a5 = *(v7 - 2);
          a5[1] = v9;
          a5[2] = v10;
          a5[3] = v11;
          a5 += 4;
          v7 = (__int128 *)((char *)v7 + 8 * a4);
          --v8;
        }
        while (v8);
      }
      v5 += 8;
      v6 += 4;
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    v12 = (_QWORD *)a3 + v5;
    do
    {
      if (a2 < 2)
      {
        v14 = (_QWORD *)a3 + v5;
        if ((a2 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        v13 = 0;
        v14 = v12;
        do
        {
          *(_QWORD *)&v15 = *v14;
          *((_QWORD *)&v15 + 1) = v14[a4];
          *a5++ = v15;
          v13 += 2;
          v14 += 2 * a4;
        }
        while (v13 < a2 - 1);
        if ((a2 & 1) == 0)
          goto LABEL_17;
      }
      *(_QWORD *)a5++ = *v14;
LABEL_17:
      ++v5;
      ++v12;
    }
    while (v5 != result);
  }
  return result;
}

uint64_t dgePack_A_Tran(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;

  if ((result & 7) == 0)
    return dgePack_A_Tran_Aligned(result, a2, a3, a4, a5);
  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = &a3[7 * a4];
    v7 = &a3[6 * a4];
    v8 = 8 * a4 - a2;
    v9 = a3;
    v10 = &a3[5 * a4];
    v11 = &a3[4 * a4];
    v12 = &a3[3 * a4];
    v13 = &a3[2 * a4];
    v14 = &a3[a4];
    do
    {
      v15 = a2 - 1;
      if (a2 > 1)
      {
        do
        {
          *(_QWORD *)&v16 = *v9;
          *(_QWORD *)&v17 = v9[1];
          v9 += 2;
          *((_QWORD *)&v16 + 1) = *v14;
          *((_QWORD *)&v17 + 1) = v14[1];
          v14 += 2;
          *(_QWORD *)&v18 = *v13;
          *(_QWORD *)&v19 = v13[1];
          v13 += 2;
          *((_QWORD *)&v18 + 1) = *v12;
          *((_QWORD *)&v19 + 1) = v12[1];
          v12 += 2;
          *(_QWORD *)&v20 = *v11;
          *(_QWORD *)&v21 = v11[1];
          v11 += 2;
          *((_QWORD *)&v20 + 1) = *v10;
          *((_QWORD *)&v21 + 1) = v10[1];
          v10 += 2;
          *(_QWORD *)&v22 = *v7;
          *(_QWORD *)&v23 = v7[1];
          v7 += 2;
          *((_QWORD *)&v22 + 1) = *v6;
          *((_QWORD *)&v23 + 1) = v6[1];
          v6 += 2;
          *a5 = v16;
          a5[1] = v18;
          v24 = a5 + 2;
          *v24 = v20;
          v24[1] = v22;
          v24 += 2;
          *v24 = v17;
          v24[1] = v19;
          v24 += 2;
          *v24 = v21;
          v24[1] = v23;
          a5 = v24 + 2;
          v25 = v15 <= 2;
          v15 -= 2;
        }
        while (!v25);
      }
      if (!v15)
      {
        *(_QWORD *)&v26 = *v9++;
        *((_QWORD *)&v26 + 1) = *v14++;
        *(_QWORD *)&v27 = *v13++;
        *((_QWORD *)&v27 + 1) = *v12++;
        *(_QWORD *)&v28 = *v11++;
        *((_QWORD *)&v28 + 1) = *v10++;
        *(_QWORD *)&v29 = *v7++;
        *((_QWORD *)&v29 + 1) = *v6++;
        *a5 = v26;
        a5[1] = v27;
        a5[2] = v28;
        a5[3] = v29;
        a5 += 4;
      }
      v9 += v8;
      v14 += v8;
      v13 += v8;
      v12 += v8;
      v11 += v8;
      v10 += v8;
      v7 += v8;
      v5 += 8;
      v6 += v8;
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    do
    {
      v30 = (__int128 *)&a3[v5 * a4];
      if (a2 >= 2)
      {
        v31 = 0;
        do
        {
          v32 = *v30++;
          *a5++ = v32;
          v31 += 2;
        }
        while (v31 < a2 - 1);
      }
      if ((a2 & 1) != 0)
        *(_QWORD *)a5++ = *(_QWORD *)v30;
      ++v5;
    }
    while (v5 != result);
  }
  return result;
}

uint64_t Accelerate_AR_spotrs(uint64_t a1, unsigned int *a2, unsigned int *a3, float *a4, int *a5, char *a6, int *a7, int *a8)
{
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  *a8 = 0;
  v15 = lsame_();
  if (!v15 && !lsame_())
  {
    v18 = -1;
    goto LABEL_15;
  }
  v16 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v18 = -2;
    goto LABEL_15;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v18 = -3;
    goto LABEL_15;
  }
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = *a2;
  if (*a5 < v17)
  {
    v18 = -5;
LABEL_15:
    *a8 = v18;
LABEL_16:
    xerbla_();
    return 0;
  }
  if (*a7 < v17)
  {
    v18 = -7;
    goto LABEL_15;
  }
  if (*a8)
    goto LABEL_16;
  if (v16 && *a3)
  {
    if (v15)
    {
      Accelerate_AR_strsm("Left", "Upper", "Transpose", "Non-unit", a2, a3, c_b9, a4, a5, a6, a7);
      Accelerate_AR_strsm("Left", "Upper", "No transpose", "Non-unit", a2, a3, c_b9, a4, a5, a6, a7);
    }
    else
    {
      Accelerate_AR_strsm("Left", "Lower", "No transpose", "Non-unit", a2, a3, c_b9, a4, a5, a6, a7);
      Accelerate_AR_strsm("Left", "Lower", "Transpose", "Non-unit", a2, a3, c_b9, a4, a5, a6, a7);
    }
  }
  return 0;
}

uint64_t dgePack_A_NoTran_Aligned(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v18;

  v5 = a2;
  _X3 = 8 * a4;
  v7 = _X2 + 4;
  do
  {
    do
    {
      v9 = *_X2;
      v10 = _X2[1];
      v8 = _X2 + 2;
      v11 = *v8;
      v12 = v8[1];
      _X2 = (__int128 *)((char *)v8 + _X3 - 32);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v9;
      a5[1] = v10;
      v18 = a5 + 2;
      *v18 = v11;
      v18[1] = v12;
      a5 = v18 + 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 4;
  }
  while (result);
  return result;
}

uint64_t dtrmm_block_LUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v30;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dtrmm_noPack_LUNN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dtrmm_noPack_LUNU;
  v29 = v8;
  if (a2 >= 1)
  {
    v10 = a4;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v25 = (_DWORD)a5 << 9;
    v26 = a5 << 6;
    v18 = 64;
    v27 = a2;
    do
    {
      if (a2 >= v18)
        v19 = v18;
      else
        v19 = a2;
      v20 = v19 + v15;
      if (v16)
      {
        v21 = a7;
        v30 = v19 + v15;
        APL_seq_dgemm(111, 111, v17, a3, v20, v10 + v13, a5, a6 + v16, a7, a6, a7);
        v20 = v30;
        v22 = a6;
        v10 = a4;
        v23 = v14;
      }
      else
      {
        v23 = 0;
        v21 = a7;
        v22 = a6;
      }
      v17 += 64;
      result = v29(v20, a3, v10 + v16 + 8 * v23, a5, v22 + v16, v21, a8);
      v16 += 512;
      v18 += 64;
      v15 -= 64;
      a2 = v27;
      v14 += v26;
      v13 += v25;
      a7 = v21;
    }
    while (v17 < v27);
  }
  return result;
}

uint64_t dtrmm_block_LUT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dtrmm_noPack_LUTU;
  else
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dtrmm_noPack_LUTN;
  if (a2 >= 1)
  {
    v16 = a2;
    do
    {
      if (v16 >= 0x40)
        v17 = v16 - 64;
      else
        v17 = 0;
      if (v16 >= 0x40)
        v18 = 64;
      else
        v18 = v16;
      v19 = a2 - (v18 + v17);
      v20 = v17 * a5;
      if (v19 >= 1)
        APL_seq_dgemm(112, 111, v19, a3, v18, a4 + 8 * v20 + 8 * v17 + 8 * v18 * a5, a5, a6 + 8 * v17, a7, a6 + 8 * v17 + 8 * v18, a7);
      result = v8(v18, a3, a4 + 8 * v20 + 8 * v17, a5, a6 + 8 * v17, a7, a8);
      v16 = v17;
    }
    while (v17 > 0);
  }
  return result;
}

uint64_t dtrmm_block_LLN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((_DWORD)result == 132)
    v8 = dtrmm_noPack_LLNU;
  else
    v8 = dtrmm_noPack_LLNN;
  if (a2 >= 1)
  {
    v16 = a2;
    do
    {
      if (v16 >= 0x40)
        v17 = v16 - 64;
      else
        v17 = 0;
      if (v16 >= 0x40)
        v18 = 64;
      else
        v18 = v16;
      v19 = a2 - (v18 + v17);
      v20 = v17 * a5;
      if (v19 >= 1)
        APL_seq_dgemm(111, 111, v19, a3, v18, a4 + 8 * v20 + 8 * v17 + 8 * v18, a5, a6 + 8 * v17, a7, a6 + 8 * v17 + 8 * v18, a7);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v8)(v18, a3, a4 + 8 * v20 + 8 * v17, a5, a6 + 8 * v17, a7, a8);
      v16 = v17;
    }
    while (v17 > 0);
  }
  return result;
}

uint64_t dtrmm_block_LLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);

  v20 = a4;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dtrmm_noPack_LLTN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dtrmm_noPack_LLTU;
  v23 = v8;
  if (a2 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v21 = (a5 << 9) + 512;
    v22 = a2;
    v16 = 64;
    v17 = a4;
    do
    {
      if (a2 >= v16)
        v18 = v16;
      else
        v18 = a2;
      v19 = v18 + v13;
      if (v15)
        APL_seq_dgemm(112, 111, v15, a3, v19, v20 + v14, a5, a6 + v14, a7, a6, a7);
      v15 += 64;
      result = v23(v19, a3, v17, a5, a6 + v14, a7, a8);
      v14 += 512;
      a2 = v22;
      v17 += v21;
      v16 += 64;
      v13 -= 64;
    }
    while (v15 < v22);
  }
  return result;
}

uint64_t dtrmm_block_RLN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, float64x2_t *, uint64_t, double);
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(uint64_t, uint64_t, const double *, uint64_t, float64x2_t *, uint64_t, double);
  uint64_t v32;

  v8 = dtrmm_noPack_RLNN;
  if ((_DWORD)result == 132)
    v8 = dtrmm_noPack_RLNU;
  v30 = v8;
  if (a3 >= 1)
  {
    v11 = a4;
    v13 = a3;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v27 = a7 << 6;
    v28 = (a5 << 9) + 512;
    v26 = (_DWORD)a7 << 9;
    v17 = 64;
    v18 = a6;
    v19 = a4;
    do
    {
      if (v13 >= v17)
        v20 = v17;
      else
        v20 = v13;
      v21 = v20 + v15;
      if (v16)
      {
        v32 = v20 + v15;
        APL_seq_dgemm(111, 111, a2, v16, v21, v18, a7, v11, a5, a6, a7);
        v22 = a2;
        v21 = v32;
        v23 = a6;
        v13 = a3;
        v24 = v14;
      }
      else
      {
        v24 = 0;
        v23 = a6;
        v22 = a2;
      }
      v16 += 64;
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v30)(v22, v21, v19, a5, v23 + 8 * v24, a7, a8);
      v19 += v28;
      v17 += 64;
      v15 -= 64;
      v11 += 512;
      v14 += v27;
      v18 += v26;
    }
    while (v16 < v13);
  }
  return result;
}

uint64_t dtrmm_block_RLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, const double *, uint64_t, uint64_t, uint64_t, double);

  v8 = dtrmm_noPack_RLTN;
  if ((_DWORD)result == 132)
    v8 = dtrmm_noPack_RLTU;
  v20 = v8;
  if (a3 >= 1)
  {
    v16 = a3;
    do
    {
      if (v16 >= 0x40)
        v17 = v16 - 64;
      else
        v17 = 0;
      if (v16 >= 0x40)
        v18 = 64;
      else
        v18 = v16;
      v19 = v17 * a7;
      if (a3 != v17 + v18)
        APL_seq_dgemm(111, 112, a2, a3 - (v17 + v18), v18, a6 + 8 * v19, a7, a4 + 8 * v17 + 8 * v18 + 8 * v17 * a5, a5, a6 + 8 * (v17 + v18) * a7, a7);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v20)(a2, v18, a4 + 8 * v17 * a5 + 8 * v17, a5, a6 + 8 * v19, a7, a8);
      v16 = v17;
    }
    while (v17 > 0);
  }
  return result;
}

uint64_t dtrmm_block_RUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((_DWORD)result == 132)
    v8 = dtrmm_noPack_RUNU;
  else
    v8 = dtrmm_noPack_RUNN;
  if (a3 >= 1)
  {
    v16 = a3;
    do
    {
      if (v16 >= 0x40)
        v17 = v16 - 64;
      else
        v17 = 0;
      if (v16 >= 0x40)
        v18 = 64;
      else
        v18 = v16;
      v19 = v17 * a7;
      if (a3 != v17 + v18)
        APL_seq_dgemm(111, 111, a2, a3 - (v17 + v18), v18, a6 + 8 * v19, a7, a4 + 8 * v17 + 8 * (v17 + v18) * a5, a5, a6 + 8 * (v17 + v18) * a7, a7);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v8)(a2, v18, a4 + 8 * v17 * a5 + 8 * v17, a5, a6 + 8 * v19, a7, a8);
      v16 = v17;
    }
    while (v17 > 0);
  }
  return result;
}

uint64_t dtrmm_block_RUT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, float64x2_t *, uint64_t, double);
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v30)(uint64_t, uint64_t, const double *, uint64_t, float64x2_t *, uint64_t, double);

  v8 = dtrmm_noPack_RUTN;
  if ((_DWORD)result == 132)
    v8 = dtrmm_noPack_RUTU;
  v30 = v8;
  if (a3 >= 1)
  {
    v9 = a4;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v27 = (_DWORD)a5 << 9;
    v28 = a5 << 6;
    v25 = (_DWORD)a7 << 9;
    v26 = a7 << 6;
    v15 = 64;
    v16 = a6;
    v17 = a4;
    v24 = a7;
    do
    {
      v18 = a3;
      if (a3 >= v15)
        v18 = v15;
      v19 = v18 + v13;
      if (v14)
      {
        v20 = a6;
        APL_seq_dgemm(111, 112, a2, v14, v19, v16, a7, v9, a5, a6, a7);
        v21 = a2;
        v22 = v11;
        v23 = v12;
      }
      else
      {
        v22 = 0;
        v23 = 0;
        v20 = a6;
        v21 = a2;
      }
      v14 += 64;
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v30)(v21, v19, v17 + 8 * v23, a5, v20 + 8 * v22, v24, a8);
      v17 += 512;
      v15 += 64;
      v13 -= 64;
      v12 += v28;
      v9 += v27;
      v11 += v26;
      v16 += v25;
      a7 = v24;
    }
    while (v14 < a3);
  }
  return result;
}

void sgebpScale_1M1N(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N, float a8)
{
  int v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;

  if (a5 >= 1)
  {
    v9 = __N;
    v10 = a5;
    v14 = __N & 3;
    if (__N <= 0)
      v14 = -(-__N & 3);
    v15 = __N - v14 + 4;
    if ((__N & 3) == 0)
      v15 = __N;
    v16 = 4 * v15;
    do
    {
      v17 = *a3;
      *a3++ = cblas_sdot(v9, __X, 1, __Y, 1) + (float)(a8 * v17);
      __X = (const float *)((char *)__X + v16);
      --v10;
    }
    while (v10);
  }
}

float sgebp_1M1N(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N)
{
  int v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  if (a5 >= 1)
  {
    v7 = __N;
    v8 = a5;
    v12 = __N & 3;
    if (__N <= 0)
      v12 = -(-__N & 3);
    v13 = __N - v12 + 4;
    if ((__N & 3) == 0)
      v13 = __N;
    v14 = 4 * v13;
    do
    {
      result = cblas_sdot(v7, __X, 1, __Y, 1) + *a3;
      *a3++ = result;
      __X = (const float *)((char *)__X + v14);
      --v8;
    }
    while (v8);
  }
  return result;
}

void sgebpScale_8M1N(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, float a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;

  if (__N >= 1 && a6 >= 1)
  {
    v15 = 0;
    v16 = a5 - 7;
    if (a5 <= 0)
      v17 = -(-a5 & 7);
    else
      v17 = a5 & 7;
    v18 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19 = (float32x4_t *)(a3 + 4 * v15 * a4);
      if (a5 < 8)
      {
        v21 = a1;
        if (!v17)
          goto LABEL_14;
      }
      else
      {
        v20 = 0;
        v21 = a1;
        do
        {
          v22 = __Y;
          v23 = __N;
          v24 = vmulq_n_f32(*v19, a8);
          v25 = vmulq_n_f32(v19[1], a8);
          do
          {
            v26 = *v22++;
            v27 = *v21;
            v28 = v21[1];
            v21 += 2;
            v24 = vmlaq_n_f32(v24, v27, v26);
            v25 = vmlaq_n_f32(v25, v28, v26);
            --v23;
          }
          while (v23);
          *v19 = v24;
          v19[1] = v25;
          v19 += 2;
          v20 += 8;
        }
        while (v20 < v16);
        if (!v17)
          goto LABEL_14;
      }
      sgebpScale_1M1N(v21->f32, __Y, v19->f32, a4, v17, a6, __N, a8);
LABEL_14:
      __Y += v18;
      ++v15;
    }
    while (v15 != a6);
  }
}

void sgebp_8M1N(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  const float *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;

  if (__N >= 1 && a6 >= 1)
  {
    v13 = 0;
    v14 = a5 - 7;
    if (a5 <= 0)
      v15 = -(-a5 & 7);
    else
      v15 = a5 & 7;
    v16 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = (float32x4_t *)(a3 + 4 * v13 * a4);
      if (a5 < 8)
      {
        v19 = a1;
        if (!v15)
          goto LABEL_14;
      }
      else
      {
        v18 = 0;
        v19 = a1;
        do
        {
          v20 = __Y;
          v21 = __N;
          v22 = *v17;
          v23 = v17[1];
          do
          {
            v24 = *v20++;
            v25 = *v19;
            v26 = v19[1];
            v19 += 2;
            v22 = vmlaq_n_f32(v22, v25, v24);
            v23 = vmlaq_n_f32(v23, v26, v24);
            --v21;
          }
          while (v21);
          *v17 = v22;
          v17[1] = v23;
          v17 += 2;
          v18 += 8;
        }
        while (v18 < v14);
        if (!v15)
          goto LABEL_14;
      }
      sgebp_1M1N(v19->f32, __Y, v17->f32, a4, v15, a6, __N);
LABEL_14:
      __Y += v16;
      ++v13;
    }
    while (v13 != a6);
  }
}

float *sgebpScale_1M4N(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  __int32 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  __int32 *v17;
  __int32 *v18;

  if (a5 >= 1)
  {
    v7 = a4;
    if (a6 <= 0)
      v8 = -(-a6 & 3);
    else
      v8 = a6 & 3;
    v9 = 4 - v8;
    if (!v8)
      v9 = 0;
    do
    {
      v10 = a2;
      v11 = a6;
      v12.i32[0] = *a3;
      v13 = &a3[v7 + v7];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v13;
      v12.i32[3] = v13[a4];
      v14 = vmulq_n_f32(v12, a7);
      do
      {
        v15 = *v10++;
        v16 = *result++;
        v14 = vmlaq_n_f32(v14, v15, v16);
        --v11;
      }
      while (v11);
      v17 = &a3[v7];
      *a3++ = v14.i32[0];
      *v17 = v14.i32[1];
      v18 = &v17[v7];
      *v18 = v14.i32[2];
      v18[a4] = v14.i32[3];
      result += v9;
      --a5;
    }
    while (a5);
  }
  return result;
}

float *sgebp_1M4N(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  __int32 *v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  __int32 *v15;
  __int32 *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    if (a6 <= 0)
      v7 = -(-a6 & 3);
    else
      v7 = a6 & 3;
    v8 = 4 - v7;
    if (!v7)
      v8 = 0;
    do
    {
      v9 = a2;
      v10 = a6;
      v12.i32[0] = *a3;
      v11 = &a3[v6 + v6];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v11;
      v12.i32[3] = v11[a4];
      do
      {
        v13 = *v9++;
        v14 = *result++;
        v12 = vmlaq_n_f32(v12, v13, v14);
        --v10;
      }
      while (v10);
      v15 = &a3[v6];
      *a3++ = v12.i32[0];
      *v15 = v12.i32[1];
      v16 = &v15[v6];
      *v16 = v12.i32[2];
      v16[a4] = v12.i32[3];
      result += v8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t Accelerate_AR_dpotrs(uint64_t a1, unsigned int *a2, unsigned int *a3, double *a4, int *a5, char *a6, int *a7, int *a8)
{
  int v15;
  double v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  unsigned int v24;
  int v25;
  int v26;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;

  *a8 = 0;
  v15 = lsame_();
  if (!v15 && !lsame_())
  {
    v26 = -1;
    goto LABEL_15;
  }
  v24 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v26 = -2;
    goto LABEL_15;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v26 = -3;
    goto LABEL_15;
  }
  if (v24 <= 1)
    v25 = 1;
  else
    v25 = *a2;
  if (*a5 < v25)
  {
    v26 = -5;
LABEL_15:
    *a8 = v26;
LABEL_16:
    xerbla_();
    return 0;
  }
  if (*a7 < v25)
  {
    v26 = -7;
    goto LABEL_15;
  }
  if (*a8)
    goto LABEL_16;
  if (v24 && *a3)
  {
    if (v15)
    {
      Accelerate_AR_dtrsm("Left", "Upper", "Transpose", "Non-unit", a2, a3, &c_b9_0, a4, v16, v17, v18, v19, v20, v21, v22, v23, a5, a6, a7);
      Accelerate_AR_dtrsm("Left", "Upper", "No transpose", "Non-unit", a2, a3, &c_b9_0, a4, v28, v29, v30, v31, v32, v33, v34, v35, a5, a6, a7);
    }
    else
    {
      Accelerate_AR_dtrsm("Left", "Lower", "No transpose", "Non-unit", a2, a3, &c_b9_0, a4, v16, v17, v18, v19, v20, v21, v22, v23, a5, a6, a7);
      Accelerate_AR_dtrsm("Left", "Lower", "Transpose", "Non-unit", a2, a3, &c_b9_0, a4, v36, v37, v38, v39, v40, v41, v42, v43, a5, a6, a7);
    }
  }
  return 0;
}

#error "23D969644: call analysis failed (funcsize=189)"

void APL_seq_sgemm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x2_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12, char *a13, uint64_t a14)
{
  float32x4_t *v18;
  uint64_t v25;
  int v26;
  double v27;
  int v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;

  if (!a3 || !a4)
    return;
  v18 = (float32x4_t *)a13;
  if (a5 && a9 != 0.0)
  {
    v25 = a12;
    if (a5 == 1)
    {
      if (a10 == 0.0)
      {
        v26 = a12;
        sgeSetZero(a3, a4, a13, a14);
      }
      else
      {
        if (a10 == 1.0)
        {
LABEL_31:
          if ((_DWORD)a1 == 114 || (_DWORD)a1 == 111)
            v31 = 1;
          else
            v31 = a7;
          if ((_DWORD)a2 != 114 && (_DWORD)a2 != 111)
            LODWORD(v25) = 1;
          cblas_sger(CblasColMajor, a3, a4, a9, a6->f32, v31, (const float *)a8, v25, (float *)a13, a14);
          return;
        }
        v26 = a12;
        sgeScale(a3, a4, (float *)a13, a14, a10);
      }
      LODWORD(v25) = v26;
      goto LABEL_31;
    }
    if (a10 == 0.0)
    {
      v33 = (uint64_t)a13;
      sgeSetZero(a3, a4, a13, a14);
      v25 = a12;
      v18 = (float32x4_t *)a13;
    }
    *(double *)a11.i64 = fmax((double)a3 / (double)a4, (double)a4 / (double)a3);
    v27 = (double)a3 * (double)a4 * (double)a5;
    if (*(double *)a11.i64 <= 4.0)
    {
      if ((v27 < 4096.0 || a5 <= 31) && v27 < 262144.0)
        goto LABEL_14;
    }
    else if (v27 < 262144.0)
    {
LABEL_14:
      if ((_DWORD)a2 == 111)
      {
        if ((_DWORD)a1 == 111)
          APL_sgemm_noPack_NN(a3, a4, a5, a6, a7, a8, v25, v18, a9, a10, a11, a14);
        else
          APL_sgemm_noPack_TN(a3, a4, a5, (uint64_t)a6, a7, (double *)a8, v25, v18, a9, a10, a11, a14);
      }
      else if ((_DWORD)a1 == 111)
      {
        APL_sgemm_noPack_NT(a3, a4, a5, a6, a7, (float32x4_t *)a8, v25, v18, a9, a10, a11, a14);
      }
      else
      {
        APL_sgemm_noPack_TT(a3, a4, a5, a6->f32, a7, a8, v25, v18, a9, a10, a11, a14);
      }
      return;
    }
    sgemm_repack(a1, a2, a3, a4, a5, (int)a6, a7, (int)a8, v25, (uint64_t)v18, a14, 0, 0, v33, v34, v35, v36, v37, v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      SWORD2(v43),
      SHIWORD(v43),
      v44);
    return;
  }
  if (a10 == 0.0)
  {
    sgeSetZero(a3, a4, a13, a14);
  }
  else if (a10 != 1.0)
  {
    sgeScale(a3, a4, (float *)a13, a14, a10);
  }
}

#error "23D969F6C: call analysis failed (funcsize=366)"

void dtrmm_Left_Forward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, float64x2_t *a10, uint64_t a11, double *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v32)(uint64_t, uint64_t, unint64_t, uint64_t, char *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  double *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t vars8;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, unint64_t, uint64_t, char *);
  unint64_t v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  float64_t *v78;
  float64x2_t *v79;

  v23 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v61 = v26;
  v62 = v27;
  v28 = v20;
  v60 = v29;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  v31 = dtrmm_block_LLT;
  if (v19 == 111)
    v31 = dtrmm_block_LUN;
  v59 = v31;
  v32 = (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, char *))dgePack_A_Tran;
  if (v19 == 111)
    v32 = (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, char *))dgePack_A_NoTran;
  v71 = v32;
  if (v19 == 111)
    v33 = v22;
  else
    v33 = 1;
  v56 = v33;
  if (v19 == 111)
    v34 = 1;
  else
    v34 = v22;
  v70 = v34;
  v35 = (v20 << 6) + 4108;
  if (a13 == -1)
  {
    v40 = 8 * v35;
    if (v20 < 65)
      v40 = 0;
    v39 = (double)(unint64_t)v40;
    goto LABEL_19;
  }
  v36 = v22;
  v37 = v21;
  v38 = *(double *)&v23;
  if (v20 >= 65 && a13)
  {
    if (8 * v35 > a13)
    {
      v39 = (double)(unint64_t)(8 * v35);
LABEL_19:
      *a12 = v39;
      return;
    }
    goto LABEL_22;
  }
  if (v20 >= 65)
  {
LABEL_22:
    v41 = (char *)a12;
    v55 = a12;
    if (!a12)
      v41 = (char *)malloc_type_malloc(8 * v35, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v55 = a12;
  v41 = &a19;
LABEL_24:
  if (v37 >= 1)
  {
    v42 = 0;
    v43 = 0;
    v58 = v37;
    v74 = (__n128 *)(v41 + 32832);
    v44 = v28 - 3;
    if (v28 <= 0)
      v45 = -(-v28 & 3);
    else
      v45 = v28 & 3;
    vars8 = v45;
    v68 = v36;
    v46 = 64;
    v69 = v28;
    do
    {
      v64 = v46;
      v65 = v42;
      if (v37 < v46)
        v46 = v37;
      v63 = v43 + 64;
      if ((uint64_t)(v43 + 64) <= v37)
        v47 = 64;
      else
        v47 = v37 - v43;
      if (v43)
      {
        v48 = 32 * (v46 + v42);
        v72 = v61 + 8 * v43 * v56;
        v73 = v43;
        v76 = v43 * v36;
        v78 = (float64_t *)(v62 + 8 * v43);
        dgePack_B_NoTran(v47, v28, v78, a9, v74, v38, v24, v25);
        v49 = v73;
        v59(v60, v47, v28, v61 + 8 * v76 + 8 * v73, v36, (uint64_t)v78, a9, v38);
        v50 = 0;
        v79 = a10;
        do
        {
          v75 = v50;
          v77 = v50 + 64;
          if (v50 + 64 <= v49)
            v51 = 64;
          else
            v51 = v49 - v50;
          v71(v51, v47, v72 + 8 * v50 * v70, v36, v41);
          if (v28 < 4)
          {
            v52 = 0;
          }
          else
          {
            v52 = 0;
            v53 = v79;
            v54 = (float64x2_t *)(v41 + 32832);
            do
            {
              dgebpAlignedC_8M4N(v41, v54, v53, v70, v51, v47);
              v52 += 4;
              v54 = (float64x2_t *)((char *)v54 + v48);
              v53 += 2 * v70;
            }
            while (v52 < v44);
          }
          if (vars8)
            dgebp_8M1N((float64x2_t *)v41, &v74->n128_f64[v52 * v47], (uint64_t)&a10->f64[v75 + v52 * v70], v70, v51, vars8, v47);
          v79 += 32;
          v50 = v77;
          v49 = v73;
          v36 = v68;
          v28 = v69;
        }
        while (v77 < v73);
      }
      else
      {
        v59(v60, v47, v28, v61, v36, v62, a9, v38);
      }
      v46 = v64 + 64;
      v42 = v65 - 64;
      v43 = v63;
      v37 = v58;
    }
    while (v63 < v58);
  }
  if (v28 >= 65 && !v55)
    free(v41);
}

void dtrmm_Left_Backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, double *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  float64x2_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(float64x2_t *, __n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  __n128 *v56;
  double *v57;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int vars8[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void);
  float64x2_t *v69;
  uint64_t v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v28 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v61 = v31;
  v62 = v32;
  v33 = v25;
  v60 = v34;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  v36 = dtrmm_block_LUT;
  if (v23 == 111)
    v36 = dtrmm_block_LLN;
  v59 = v36;
  v37 = (void (*)(void))dgePack_A_Tran;
  if (v23 == 111)
    v37 = (void (*)(void))dgePack_A_NoTran;
  v68 = v37;
  v70 = v27;
  if (v23 == 111)
    v38 = 1;
  else
    v38 = v27;
  v67 = v38;
  v39 = (v25 << 6) + 4108;
  if (a13 == -1)
  {
    v44 = 8 * v39;
    if (v25 < 65)
      v44 = 0;
    v43 = (double)(unint64_t)v44;
    goto LABEL_16;
  }
  v40 = v26;
  v41 = v24;
  v42 = *(double *)&v28;
  if (v25 >= 65 && a13)
  {
    if (8 * v39 > a13)
    {
      v43 = (double)(unint64_t)(8 * v39);
LABEL_16:
      *a12 = v43;
      return;
    }
    goto LABEL_19;
  }
  if (v25 >= 65)
  {
LABEL_19:
    v45 = (float64x2_t *)a12;
    v57 = a12;
    if (!a12)
      v45 = (float64x2_t *)malloc_type_malloc(8 * v39, 0x100004000313F17uLL);
    goto LABEL_21;
  }
  v57 = a12;
  v45 = (float64x2_t *)&a23;
LABEL_21:
  if (v40 >= 1)
  {
    v71 = (__n128 *)&v45[2052];
    if (v33 <= 0)
      v46 = -(-v33 & 3);
    else
      v46 = v33 & 3;
    v65 = v41;
    v66 = v33;
    v69 = v45;
    v74 = v33 - 3;
    *(_QWORD *)vars8 = v46;
    do
    {
      if ((unint64_t)v40 >= 0x40)
        v47 = v40 - 64;
      else
        v47 = 0;
      if ((unint64_t)v40 >= 0x40)
        v48 = 64;
      else
        v48 = v40;
      v49 = v47 + v48;
      if (v47 + v48 >= v41)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v59)(v60, v48, v33, v61 + 8 * v47 * v70 + 8 * v47, v42);
        v45 = v69;
      }
      else
      {
        dgePack_B_NoTran(v48, v33, (float64_t *)(v62 + 8 * v47), a9, v71, v42, v29, v30);
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v59)(v60, v48, v33, v61 + 8 * v47 * v70 + 8 * v47, v42);
        v50 = (void (*)(float64x2_t *, __n128 *, uint64_t, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
        v51 = a10 + 8 * v40;
        do
        {
          v72 = v49 + 64;
          if (v49 + 64 <= v41)
            v52 = 64;
          else
            v52 = v41 - v49;
          if ((v52 & 7) != 0)
            v50 = (void (*)(float64x2_t *, __n128 *, uint64_t, uint64_t, uint64_t, uint64_t))dgebpUnalignedC_8M4N;
          v53 = v52;
          v68();
          v54 = v33 < 4;
          v73 = v51;
          v55 = 0;
          if (v54)
          {
            v45 = v69;
          }
          else
          {
            v56 = v71;
            v45 = v69;
            do
            {
              v50(v69, v56, v51, v67, v53, v48);
              v55 += 4;
              v56 += 2 * v48;
              v51 += 32 * v67;
            }
            while (v55 < v74);
          }
          if (v46)
            dgebp_8M1N(v45, &v71->n128_f64[v55 * v48], a10 + 8 * v49 + 8 * v55 * v67, v67, v53, v46, v48);
          v51 = v73 + 512;
          v49 += 64;
          v41 = v65;
          v33 = v66;
        }
        while (v72 < v65);
      }
      v40 = v47;
    }
    while (v47 > 0);
  }
  if (v33 >= 65 && !v57)
    free(v45);
}

_OWORD *sgebpScaleAlignedC_8M4N(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t *v9;
  uint64_t v10;
  _OWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  _OWORD *result;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  _OWORD *v58;
  _OWORD *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;

  v9 = _X2;
  v10 = 4 * a4;
  v12 = *(float32x4_t *)a1;
  v13 = *((float32x4_t *)a1 + 1);
  v11 = a1 + 2;
  v15 = *(float32x4_t *)v11;
  v16 = *((float32x4_t *)v11 + 1);
  result = v11 + 2;
  do
  {
    v17 = a6;
    v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
    __asm { PRFM            #1, [X2,#0x40] }
    v24 = *_X2;
    v25 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v32 = *_X2;
    v33 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    _X2 = v9 + 2;
    v37 = v7;
    v38 = v7;
    v39 = v7;
    v40 = v7;
    v41 = v7;
    v42 = v7;
    v43 = v7;
    v45 = *(float32x4_t *)a2;
    v46 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v50 = vmulq_n_f32(v24, a7);
    v51 = vmulq_n_f32(v25, a7);
    v52 = vmulq_n_f32(v28, a7);
    v53 = vmulq_n_f32(v29, a7);
    v54 = vmulq_n_f32(v32, a7);
    v55 = vmulq_n_f32(v33, a7);
    v56 = vmulq_n_f32(v35, a7);
    v57 = vmulq_n_f32(v36, a7);
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
    v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
    v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
    v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
    v12 = v15;
    v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
    v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
    v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
    v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
    v13 = v16;
    v15 = *(float32x4_t *)result;
    v16 = *((float32x4_t *)result + 1);
    result += 2;
    v45 = *((float32x4_t *)a2 + 1);
    v46 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v17 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
        v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
        v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
        v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
        v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
        v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
        v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
        v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
        v12 = *(float32x4_t *)result;
        v13 = *((float32x4_t *)result + 1);
        v58 = result + 2;
        v45 = *(float32x4_t *)_X6;
        v59 = _X6 + 1;
        v7 = vmlaq_n_f32(v7, v15, v46.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v46.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v46, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v46, 3);
        v37 = vmlaq_n_f32(v37, v16, v46.f32[0]);
        v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v46.f32, 1);
        v41 = vmlaq_laneq_f32(v41, v16, v46, 2);
        v43 = vmlaq_laneq_f32(v43, v16, v46, 3);
        v15 = *(float32x4_t *)v58;
        v16 = *((float32x4_t *)v58 + 1);
        result = v58 + 2;
        v46 = *(float32x4_t *)v59;
        _X6 = v59 + 1;
        v17 -= 2;
      }
      while (v17);
      v50 = vaddq_f32(v50, v7);
      v51 = vaddq_f32(v51, v37);
      v52 = vaddq_f32(v52, v38);
      v53 = vaddq_f32(v53, v39);
      v54 = vaddq_f32(v54, v40);
      v55 = vaddq_f32(v55, v41);
      v56 = vaddq_f32(v56, v42);
      v57 = vaddq_f32(v57, v43);
    }
    *v9 = v50;
    v9[1] = v51;
    v60 = (float32x4_t *)((char *)v9 + v10);
    *v60 = v52;
    v60[1] = v53;
    v61 = (float32x4_t *)((char *)v60 + v10);
    *v61 = v54;
    v61[1] = v55;
    v62 = (float32x4_t *)((char *)v61 + v10);
    *v62 = v56;
    v62[1] = v57;
    v9 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t Accelerate_AR_dlarft(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t a5, int *a6, uint64_t a7, double *a8, int *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  int v21;
  const char *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int64_t v27;
  char *v28;
  double *v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  double *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  double v49;
  int v50;
  double *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  double *v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int64_t v74;
  double *v75;
  double *aa;
  int v78;
  double *v79;
  int v81;
  int *v82;
  double *v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  int v91;
  int n[4];

  if (*a3)
  {
    v88 = *a6;
    v11 = ~(_DWORD)v88;
    v85 = a5 + 8 * v11;
    v12 = a7 - 8;
    v89 = *a9;
    v90 = 0.0;
    v13 = ~(_DWORD)v89;
    *(_QWORD *)n = 0;
    v84 = &a8[v13];
    v91 = 0;
    v14 = lsame_();
    v15 = *a4;
    if (v14)
    {
      if ((int)v15 >= 1)
      {
        v16 = 0;
        v79 = &a8[v13];
        v17 = 8 * v88;
        v70 = a5 + 8 * v11;
        v18 = a5 + 8 * v88 + 8 * v11;
        v19 = -1;
        v20 = 1;
        v21 = *a3;
        v22 = "No transpose";
        v72 = v12;
        v74 = v15;
        do
        {
          if ((int)v20 > v21)
            v21 = v20;
          if (*(double *)(v12 + 8 * v20) == 0.0)
          {
            n[0] = v20;
            bzero(&v79[(int)v89 + 1 + (int)v89 * (int)v16], 8 * v16 + 8);
          }
          else
          {
            v23 = (_QWORD *)(v85 + 8 * (v20 + (int)v88 * (int)v20));
            v24 = *v23;
            v86 = v23;
            *v23 = 0x3FF0000000000000;
            v25 = lsame_();
            v26 = *a3;
            v27 = *a3;
            if (v25)
            {
              if (v20 < v26)
              {
                while (*(double *)(v18 + 8 * v27) == 0.0)
                {
                  if (--v27 <= v20)
                  {
                    v26 = v20;
                    goto LABEL_20;
                  }
                }
                v26 = v27;
              }
LABEL_20:
              if (v26 >= v21)
                v30 = v21;
              else
                v30 = v26;
              v81 = v20 - 1;
              v91 = v20 - 1;
              n[0] = v19 + v30 + 1;
              v90 = -*(double *)(v12 + 8 * v20);
              v31 = v89;
              v32 = v20 * v89 + 1;
              v33 = (char *)v22;
              v34 = v84;
              Accelerate_AR_dgemv("Transpose", n, &v91, &v90, v85 + 8 * (v20 + v88), a6, v86, &c__1_5, &c_b8, &v84[v32], &c__1_5);
            }
            else
            {
              v28 = (char *)v22;
              if (v20 < v26)
              {
                v29 = (double *)(v70 + 8 * (v20 + (int)v88 * (uint64_t)(int)v27));
                while (*v29 == 0.0)
                {
                  --v27;
                  v29 -= v88;
                  if (v27 <= v20)
                  {
                    v26 = v20;
                    goto LABEL_25;
                  }
                }
                v26 = v27;
              }
LABEL_25:
              if (v26 >= v21)
                v35 = v21;
              else
                v35 = v26;
              v81 = v20 - 1;
              v91 = v19 + v35 + 1;
              n[0] = v20 - 1;
              v90 = -*(double *)(v12 + 8 * v20);
              v34 = v84;
              v31 = v89;
              v32 = v20 * v89 + 1;
              v33 = v28;
              Accelerate_AR_dgemv(v28, n, &v91, &v90, v85 + 8 * v20 * v88 + 8, a6, v86, a6, &c_b8, &v84[v32], &c__1_5);
            }
            v36 = v32;
            v37 = v31;
            v12 = v72;
            *v86 = v24;
            n[0] = v81;
            v38 = v37 * v20;
            dtrmv_("Upper", v33, "Non-unit", n, a8, a9, &v34[v36], &c__1_5);
            v34[v20 + v38] = *(double *)(v72 + 8 * v20);
            if (v21 <= v26)
              v39 = v26;
            else
              v39 = v21;
            if ((unint64_t)v20 <= 1)
              v21 = v26;
            else
              v21 = v39;
            v17 = 8 * v88;
            v15 = v74;
            v22 = v33;
          }
          v19 = ~(_DWORD)v20;
          ++v16;
          v18 += v17;
        }
        while (v20++ < v15);
      }
    }
    else if ((int)v15 >= 1)
    {
      v41 = 0;
      v42 = *a4;
      v75 = &a8[v13];
      v43 = 8 * v88 * v42 + 8 * v11;
      v44 = 8 * (v88 + v42) + 8 * v11;
      v45 = -8 * v88;
      v73 = v15 * (v89 + 1);
      v69 = v88 + 1;
      v46 = v43 + a5 + 8;
      v47 = (double *)(a5 + v44);
      v87 = 1;
      v48 = v42;
      v82 = a4;
      v71 = v42;
      do
      {
        v49 = *(double *)(v12 + 8 * v48);
        v50 = *a4;
        if (v49 == 0.0)
        {
          n[1] = *a4;
          if (v48 <= v50)
            bzero(&v75[v73 + (int)v13 * (int)v41], 8 * (v50 + v41 - v42) + 8);
        }
        else
        {
          v51 = v84;
          if (v48 >= v50)
          {
            v59 = v89 + 1;
          }
          else
          {
            v52 = lsame_();
            v53 = *a3;
            v54 = *a4;
            if (v52)
            {
              v55 = v69 * v48 + v53 - v54;
              v56 = *(_QWORD *)(v85 + 8 * v55);
              *(_QWORD *)(v85 + 8 * v55) = 0x3FF0000000000000;
              if (v48 < 2)
              {
                LODWORD(v58) = 1;
              }
              else
              {
                v57 = 0;
                while (*(double *)(v46 + 8 * v57) == 0.0)
                {
                  if (v48 - 1 == ++v57)
                  {
                    LODWORD(v58) = v48;
                    goto LABEL_63;
                  }
                }
                LODWORD(v58) = v57 + 1;
              }
LABEL_63:
              if ((int)v58 <= v87)
                v66 = v87;
              else
                v66 = v58;
              n[0] = v54 - v48;
              n[1] = v48 + v53 - v54 - v66 + 1;
              v90 = -*(double *)(v12 + 8 * v48);
              v51 = v84;
              v63 = v85;
              aa = (double *)(v48 + 1 + v48 * v89);
              v78 = v48 + 1;
              Accelerate_AR_dgemv("Transpose", &n[1], n, &v90, v85 + 8 * ((v48 + 1) * v88 + v66), a6, v85 + 8 * (v48 * v88 + v66), &c__1_5, &c_b8, &v84[(_QWORD)aa], &c__1_5);
              v64 = *v82;
              v65 = v69 * (int)v48 + *a3 - *v82;
            }
            else
            {
              v60 = v48 + (v53 + (int)v48 - v54) * (int)v88;
              v56 = *(_QWORD *)(v85 + 8 * v60);
              *(_QWORD *)(v85 + 8 * v60) = 0x3FF0000000000000;
              if (v48 < 2)
              {
                LODWORD(v58) = 1;
              }
              else
              {
                v61 = v47;
                v58 = 1;
                while (*v61 == 0.0)
                {
                  ++v58;
                  v61 += v88;
                  if (v48 == v58)
                  {
                    LODWORD(v58) = v48;
                    break;
                  }
                }
              }
              if ((int)v58 <= v87)
                v62 = v87;
              else
                v62 = v58;
              n[0] = v48 + v53 - v54 - v62 + 1;
              n[1] = v54 - v48;
              v90 = -*(double *)(v12 + 8 * v48);
              v51 = v84;
              v63 = v85;
              aa = (double *)(v48 + 1 + v48 * v89);
              v78 = v48 + 1;
              Accelerate_AR_dgemv("No transpose", &n[1], n, &v90, v85 + 8 * (v48 + 1 + v62 * (int)v88), a6, v85 + 8 * (v48 + v62 * (int)v88), a6, &c_b8, &v84[(_QWORD)aa], &c__1_5);
              v64 = *v82;
              v65 = v48 + (*a3 + (int)v48 - *v82) * (int)v88;
            }
            *(_QWORD *)(v63 + 8 * v65) = v56;
            n[1] = v64 - v48;
            dtrmv_("Lower", "No transpose", "Non-unit", &n[1], &v51[((int)v89 + 1) * v78], a9, &v51[(_QWORD)aa], &c__1_5);
            if (v87 >= (int)v58)
              v67 = v58;
            else
              v67 = v87;
            if (v48 <= 1)
              v67 = v58;
            v87 = v67;
            v59 = v89 + 1;
            v49 = *(double *)(v12 + 8 * v48);
            a4 = v82;
            v42 = v71;
            LODWORD(v13) = ~(_DWORD)v89;
            v45 = -8 * v88;
          }
          v51[v59 * (int)v48] = v49;
        }
        --v48;
        ++v41;
        v46 += v45;
        --v47;
      }
      while (v41 != v42);
    }
  }
  return 0;
}

uint64_t Accelerate_AR_sgemm(char *a1, char *a2, int *a3, int *a4, int *a5, uint64_t a6, int a7, int *a8, uint64_t a9, int *a10, uint64_t a11, int a12, int a13, int *a14)
{
  unsigned int v14;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v21;

  v14 = *a1 - 67;
  if (v14 > 0x31)
    goto LABEL_12;
  if (((1 << v14) & 0x2000100020001) != 0)
  {
    v16 = 112;
    goto LABEL_6;
  }
  if (((1 << v14) & 0x80000000800) == 0)
  {
LABEL_12:
    v19 = 1;
LABEL_14:
    printf("** On entry to %6s, parameter number %2i had an illegal value\n", "SGEMM ", v19);
    return 0;
  }
  v16 = 111;
LABEL_6:
  v17 = *a2 - 67;
  if (v17 > 0x31)
  {
LABEL_13:
    v19 = 2;
    goto LABEL_14;
  }
  if (((1 << v17) & 0x2000100020001) == 0)
  {
    if (((1 << v17) & 0x80000000800) != 0)
    {
      v18 = 111;
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  v18 = 112;
LABEL_11:
  cblas_sgemm_sequential(102, v16, v18, *a3, *a4, *a5, a7, *a8, a9, *a10, v21, a12, a13, *a14);
  return 0;
}

uint64_t Accelerate_AR_strmm(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, uint64_t a7, int a8, int *a9, uint64_t a10, int *a11)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;

  v13 = *a1;
  v14 = 141;
  if (v13 > 107)
  {
    if (v13 == 108)
      goto LABEL_8;
    if (v13 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v13 == 76)
      goto LABEL_8;
    if (v13 != 82)
    {
LABEL_4:
      v15 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "STRMM ", v15);
      return 0;
    }
  }
  v14 = 142;
LABEL_8:
  v16 = *a2;
  v17 = 122;
  if (v16 > 107)
  {
    if (v16 != 108)
    {
      if (v16 != 117)
        goto LABEL_11;
LABEL_14:
      v17 = 121;
    }
  }
  else if (v16 != 76)
  {
    if (v16 != 85)
    {
LABEL_11:
      v15 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v18 = *a3 - 67;
  if (v18 > 0x31)
    goto LABEL_28;
  if (((1 << v18) & 0x2000100020001) != 0)
  {
    v19 = 112;
    goto LABEL_20;
  }
  if (((1 << v18) & 0x80000000800) == 0)
  {
LABEL_28:
    v15 = 3;
    goto LABEL_29;
  }
  v19 = 111;
LABEL_20:
  v20 = *a4;
  v21 = 131;
  if (v20 > 109)
  {
    if (v20 != 110)
    {
      if (v20 != 117)
        goto LABEL_23;
LABEL_26:
      v21 = 132;
    }
  }
  else if (v20 != 78)
  {
    if (v20 != 85)
    {
LABEL_23:
      v15 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  cblas_strmm_sequential(102, v14, v17, v19, v21, *a5, *a6, a8, *a9, a10, *a11);
  return 0;
}

uint64_t Accelerate_AR_strsm(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, float *a7, float *a8, int *a9, char *a10, int *a11)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v13 = *a1;
  v14 = 141;
  if (v13 > 107)
  {
    if (v13 == 108)
      goto LABEL_8;
    if (v13 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v13 == 76)
      goto LABEL_8;
    if (v13 != 82)
    {
LABEL_4:
      v15 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "STRSM ", v15);
      return 0;
    }
  }
  v14 = 142;
LABEL_8:
  v16 = *a2;
  v17 = 122;
  if (v16 > 107)
  {
    if (v16 != 108)
    {
      if (v16 != 117)
        goto LABEL_11;
LABEL_14:
      v17 = 121;
    }
  }
  else if (v16 != 76)
  {
    if (v16 != 85)
    {
LABEL_11:
      v15 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v18 = *a3 - 67;
  if (v18 > 0x31)
    goto LABEL_28;
  if (((1 << v18) & 0x2000100020001) != 0)
  {
    v19 = 112;
    goto LABEL_20;
  }
  if (((1 << v18) & 0x80000000800) == 0)
  {
LABEL_28:
    v15 = 3;
    goto LABEL_29;
  }
  v19 = 111;
LABEL_20:
  v20 = *a4;
  v21 = 131;
  if (v20 > 109)
  {
    if (v20 != 110)
    {
      if (v20 != 117)
        goto LABEL_23;
LABEL_26:
      v21 = 132;
    }
  }
  else if (v20 != 78)
  {
    if (v20 != 85)
    {
LABEL_23:
      v15 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  cblas_strsm_sequential(102, v14, v17, v19, v21, *a5, *a6, a8, *a7, *a9, a10, *a11);
  return 0;
}

uint64_t Accelerate_AR_ssyrk(char *a1, char *a2, unsigned int *a3, unsigned int *a4, float *a5, uint64_t a6, unsigned int *a7, float *a8, uint64_t a9, _DWORD *a10)
{
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v11 = *a1;
  v12 = 122;
  if (v11 > 107)
  {
    if (v11 == 108)
      goto LABEL_8;
    if (v11 != 117)
      goto LABEL_4;
  }
  else
  {
    if (v11 == 76)
      goto LABEL_8;
    if (v11 != 85)
    {
LABEL_4:
      v13 = 1;
LABEL_15:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "SSYRK ", v13);
      return 0;
    }
  }
  v12 = 121;
LABEL_8:
  v14 = *a2 - 67;
  if (v14 > 0x31)
    goto LABEL_14;
  if (((1 << v14) & 0x2000100020001) == 0)
  {
    if (((1 << v14) & 0x80000000800) != 0)
    {
      v15 = 111;
      goto LABEL_13;
    }
LABEL_14:
    v13 = 2;
    goto LABEL_15;
  }
  v15 = 112;
LABEL_13:
  cblas_ssyrk_sequential(102, v12, v15, *a3, *a4, a6, *a7, a9, *a5, *a8, *a10);
  return 0;
}

uint64_t Accelerate_AR_dgemm(char *a1, char *a2, int *a3, int *a4, int *a5, uint64_t a6, int a7, int *a8, uint64_t a9, int *a10, uint64_t a11, int a12, int a13, int *a14)
{
  unsigned int v14;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v21;

  v14 = *a1 - 67;
  if (v14 > 0x31)
    goto LABEL_12;
  if (((1 << v14) & 0x2000100020001) != 0)
  {
    v16 = 112;
    goto LABEL_6;
  }
  if (((1 << v14) & 0x80000000800) == 0)
  {
LABEL_12:
    v19 = 1;
LABEL_14:
    printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DGEMM ", v19);
    return 0;
  }
  v16 = 111;
LABEL_6:
  v17 = *a2 - 67;
  if (v17 > 0x31)
  {
LABEL_13:
    v19 = 2;
    goto LABEL_14;
  }
  if (((1 << v17) & 0x2000100020001) == 0)
  {
    if (((1 << v17) & 0x80000000800) != 0)
    {
      v18 = 111;
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  v18 = 112;
LABEL_11:
  cblas_dgemm_sequential(102, v16, v18, *a3, *a4, *a5, a7, *a8, a9, *a10, v21, a12, a13, *a14);
  return 0;
}

uint64_t Accelerate_AR_dtrmm(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, uint64_t a7, int a8, int *a9, uint64_t a10, int *a11)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;

  v13 = *a1;
  v14 = 141;
  if (v13 > 107)
  {
    if (v13 == 108)
      goto LABEL_8;
    if (v13 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v13 == 76)
      goto LABEL_8;
    if (v13 != 82)
    {
LABEL_4:
      v15 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DTRMM ", v15);
      return 0;
    }
  }
  v14 = 142;
LABEL_8:
  v16 = *a2;
  v17 = 122;
  if (v16 > 107)
  {
    if (v16 != 108)
    {
      if (v16 != 117)
        goto LABEL_11;
LABEL_14:
      v17 = 121;
    }
  }
  else if (v16 != 76)
  {
    if (v16 != 85)
    {
LABEL_11:
      v15 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v18 = *a3 - 67;
  if (v18 > 0x31)
    goto LABEL_28;
  if (((1 << v18) & 0x2000100020001) != 0)
  {
    v19 = 112;
    goto LABEL_20;
  }
  if (((1 << v18) & 0x80000000800) == 0)
  {
LABEL_28:
    v15 = 3;
    goto LABEL_29;
  }
  v19 = 111;
LABEL_20:
  v20 = *a4;
  v21 = 131;
  if (v20 > 109)
  {
    if (v20 != 110)
    {
      if (v20 != 117)
        goto LABEL_23;
LABEL_26:
      v21 = 132;
    }
  }
  else if (v20 != 78)
  {
    if (v20 != 85)
    {
LABEL_23:
      v15 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  cblas_dtrmm_sequential(102, v14, v17, v19, v21, *a5, *a6, a8, *a9, a10, *a11);
  return 0;
}

uint64_t Accelerate_AR_dtrmm_prealloc(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, uint64_t a7, int a8, _DWORD *a9, uint64_t a10, _DWORD *a11, uint64_t a12, int *a13)
{
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;

  v15 = *a1;
  v16 = 141;
  if (v15 > 107)
  {
    if (v15 == 108)
      goto LABEL_8;
    if (v15 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v15 == 76)
      goto LABEL_8;
    if (v15 != 82)
    {
LABEL_4:
      v17 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DTRMM ", v17);
      return 0;
    }
  }
  v16 = 142;
LABEL_8:
  v18 = *a2;
  v19 = 122;
  if (v18 > 107)
  {
    if (v18 != 108)
    {
      if (v18 != 117)
        goto LABEL_11;
LABEL_14:
      v19 = 121;
    }
  }
  else if (v18 != 76)
  {
    if (v18 != 85)
    {
LABEL_11:
      v17 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v20 = *a3 - 67;
  if (v20 > 0x31)
    goto LABEL_28;
  if (((1 << v20) & 0x2000100020001) != 0)
  {
    v21 = 112;
    goto LABEL_20;
  }
  if (((1 << v20) & 0x80000000800) == 0)
  {
LABEL_28:
    v17 = 3;
    goto LABEL_29;
  }
  v21 = 111;
LABEL_20:
  v22 = *a4;
  v23 = 131;
  if (v22 > 109)
  {
    if (v22 != 110)
    {
      if (v22 != 117)
        goto LABEL_23;
LABEL_26:
      v23 = 132;
    }
  }
  else if (v22 != 78)
  {
    if (v22 != 85)
    {
LABEL_23:
      v17 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  LODWORD(v26) = *a11;
  LODWORD(v25) = *a9;
  cblas_dtrmm_sequential_prealloc(102, v16, v19, v21, v23, *a5, *a6, a8, v25, a10, v26, a12, *a13);
  return 0;
}

uint64_t Accelerate_AR_dtrsm(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, double *a7, double *a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, int *a17, char *a18, int *a19)
{
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v21 = *a1;
  v22 = 141;
  if (v21 > 107)
  {
    if (v21 == 108)
      goto LABEL_8;
    if (v21 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v21 == 76)
      goto LABEL_8;
    if (v21 != 82)
    {
LABEL_4:
      v23 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DTRSM ", v23);
      return 0;
    }
  }
  v22 = 142;
LABEL_8:
  v24 = *a2;
  v25 = 122;
  if (v24 > 107)
  {
    if (v24 != 108)
    {
      if (v24 != 117)
        goto LABEL_11;
LABEL_14:
      v25 = 121;
    }
  }
  else if (v24 != 76)
  {
    if (v24 != 85)
    {
LABEL_11:
      v23 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v26 = *a3 - 67;
  if (v26 > 0x31)
    goto LABEL_28;
  if (((1 << v26) & 0x2000100020001) != 0)
  {
    v27 = 112;
    goto LABEL_20;
  }
  if (((1 << v26) & 0x80000000800) == 0)
  {
LABEL_28:
    v23 = 3;
    goto LABEL_29;
  }
  v27 = 111;
LABEL_20:
  v28 = *a4;
  v29 = 131;
  if (v28 > 109)
  {
    if (v28 != 110)
    {
      if (v28 != 117)
        goto LABEL_23;
LABEL_26:
      v29 = 132;
    }
  }
  else if (v28 != 78)
  {
    if (v28 != 85)
    {
LABEL_23:
      v23 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  cblas_dtrsm_sequential(102, v22, v25, v27, v29, *a5, *a6, a8, *a7, a10, a11, a12, a13, a14, a15, a16, *a17, a18, *a19);
  return 0;
}

uint64_t Accelerate_AR_dtrsm_prealloc(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, double *a7, double *a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, int *a17, char *a18, int *a19, double *a20,unsigned int *a21)
{
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v23 = *a1;
  v24 = 141;
  if (v23 > 107)
  {
    if (v23 == 108)
      goto LABEL_8;
    if (v23 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v23 == 76)
      goto LABEL_8;
    if (v23 != 82)
    {
LABEL_4:
      v25 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DTRSM ", v25);
      return 0;
    }
  }
  v24 = 142;
LABEL_8:
  v26 = *a2;
  v27 = 122;
  if (v26 > 107)
  {
    if (v26 != 108)
    {
      if (v26 != 117)
        goto LABEL_11;
LABEL_14:
      v27 = 121;
    }
  }
  else if (v26 != 76)
  {
    if (v26 != 85)
    {
LABEL_11:
      v25 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v28 = *a3 - 67;
  if (v28 > 0x31)
    goto LABEL_28;
  if (((1 << v28) & 0x2000100020001) != 0)
  {
    v29 = 112;
    goto LABEL_20;
  }
  if (((1 << v28) & 0x80000000800) == 0)
  {
LABEL_28:
    v25 = 3;
    goto LABEL_29;
  }
  v29 = 111;
LABEL_20:
  v30 = *a4;
  v31 = 131;
  if (v30 > 109)
  {
    if (v30 != 110)
    {
      if (v30 != 117)
        goto LABEL_23;
LABEL_26:
      v31 = 132;
    }
  }
  else if (v30 != 78)
  {
    if (v30 != 85)
    {
LABEL_23:
      v25 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  cblas_dtrsm_sequential_prealloc(102, v24, v27, v29, v31, *a5, *a6, a8, *a7, a10, a11, a12, a13, a14, a15, a16, *a17, a18, *a19,
    a20,
    *a21);
  return 0;
}

uint64_t Accelerate_AR_dsyrk(char *a1, char *a2, unsigned int *a3, unsigned int *a4, double *a5, uint64_t a6, unsigned int *a7, double *a8, uint64_t a9, _DWORD *a10)
{
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v11 = *a1;
  v12 = 122;
  if (v11 > 107)
  {
    if (v11 == 108)
      goto LABEL_8;
    if (v11 != 117)
      goto LABEL_4;
  }
  else
  {
    if (v11 == 76)
      goto LABEL_8;
    if (v11 != 85)
    {
LABEL_4:
      v13 = 1;
LABEL_15:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DSYRK ", v13);
      return 0;
    }
  }
  v12 = 121;
LABEL_8:
  v14 = *a2 - 67;
  if (v14 > 0x31)
    goto LABEL_14;
  if (((1 << v14) & 0x2000100020001) == 0)
  {
    if (((1 << v14) & 0x80000000800) != 0)
    {
      v15 = 111;
      goto LABEL_13;
    }
LABEL_14:
    v13 = 2;
    goto LABEL_15;
  }
  v15 = 112;
LABEL_13:
  cblas_dsyrk_sequential(102, v12, v15, *a3, *a4, a6, *a7, a9, *a5, *a8, *a10);
  return 0;
}

uint64_t Accelerate_AR_dsyr2k(char *a1, char *a2, int *a3, int *a4, double *a5, uint64_t a6, int *a7, uint64_t a8, int *a9, double *a10, double *a11, int *a12)
{
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  v13 = *a1;
  v14 = 122;
  if (v13 > 107)
  {
    if (v13 == 108)
      goto LABEL_8;
    if (v13 != 117)
      goto LABEL_4;
  }
  else
  {
    if (v13 == 76)
      goto LABEL_8;
    if (v13 != 85)
    {
LABEL_4:
      v15 = 1;
LABEL_15:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DSYR2K", v15);
      return 0;
    }
  }
  v14 = 121;
LABEL_8:
  v16 = *a2 - 67;
  if (v16 > 0x31)
    goto LABEL_14;
  if (((1 << v16) & 0x2000100020001) == 0)
  {
    if (((1 << v16) & 0x80000000800) != 0)
    {
      v17 = 111;
      goto LABEL_13;
    }
LABEL_14:
    v15 = 2;
    goto LABEL_15;
  }
  v17 = 112;
LABEL_13:
  cblas_dsyr2k_sequential(102, v14, v17, *a3, *a4, a6, *a7, a8, *a5, *a10, *a9, a11, *a12);
  return 0;
}

uint64_t Accelerate_AR_dormqr(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, __CLPK_doublereal *__c__, __CLPK_integer *a10, double *a11, int *a12, int *a13)
{
  __CLPK_doublereal *v13;
  __CLPK_doublereal *v14;
  __CLPK_integer *v15;
  __CLPK_integer *v16;
  __CLPK_integer *v17;
  __CLPK_integer *v18;
  __CLPK_integer *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int *v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  __CLPK_integer v37;
  int v38;
  int v39;
  int v40;
  __CLPK_integer v42;
  __CLPK_doublereal *__work;
  __CLPK_integer *v44;
  int v45;
  double v46;
  __CLPK_integer v47;
  int v48;
  int v49;
  __CLPK_integer v50;
  int v51;
  int v52;
  int v53;
  int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  __CLPK_doublereal *v75;
  __CLPK_doublereal *v76;
  __CLPK_doublereal *v77;
  __CLPK_doublereal *v78;
  __CLPK_integer v79;
  int v80;
  int v81;
  int *__lda;
  __CLPK_integer *__n3;
  char *v84;
  int v85;
  __CLPK_integer v86;
  uint64_t v87;
  __CLPK_integer v88;
  char __opts[2];
  uint64_t v90;
  double v91[4160];
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;

  MEMORY[0x24BDAC7A8](a1, a2);
  v75 = v13;
  v77 = v14;
  __n3 = v15;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v95 = *MEMORY[0x24BDAC8D0];
  v93 = 0;
  v94 = 0;
  v90 = 0;
  v88 = 0;
  v87 = 0;
  v86 = 0;
  __lda = v24;
  v73 = *v24;
  v79 = *a10;
  *a13 = 0;
  v25 = lsame_();
  v84 = v21;
  v26 = lsame_();
  v80 = *a12;
  if (v25)
    v27 = v19;
  else
    v27 = v17;
  if (v25)
    v28 = v17;
  else
    v28 = v19;
  v29 = *v28;
  v30 = *v27;
  if (!v25)
  {
    v31 = v23;
    v32 = *v27;
    v33 = lsame_();
    v30 = v32;
    v23 = v31;
    if (!v33)
    {
      v38 = -1;
      goto LABEL_34;
    }
  }
  if (!v26)
  {
    v34 = v23;
    v35 = v30;
    v36 = lsame_();
    v30 = v35;
    v23 = v34;
    if (!v36)
    {
      v38 = -2;
      goto LABEL_34;
    }
  }
  v37 = *v19;
  if (*v19 < 0)
  {
    v38 = -3;
    goto LABEL_34;
  }
  if (*v17 < 0)
  {
    v38 = -4;
    goto LABEL_34;
  }
  v38 = -5;
  if (*__n3 < 0 || *__n3 > v30)
    goto LABEL_34;
  if (v30 <= 1)
    v39 = 1;
  else
    v39 = v30;
  if (*__lda >= v39)
  {
    if (v37 <= 1)
      v37 = 1;
    if (*a10 < v37)
    {
      v38 = -10;
      goto LABEL_34;
    }
    if (v29 <= 1)
      v40 = 1;
    else
      v40 = v29;
    if (*a12 < v40 && v80 != -1)
    {
      v38 = -12;
      goto LABEL_34;
    }
    v38 = *a13;
    if (*a13)
      goto LABEL_35;
    v92 = 0x100000001;
    v93 = v23;
    v94 = v84;
    v72 = v30;
    s_cat(__opts, (uint64_t)&v93, (uint64_t)&v92, (unsigned int *)&c__2_1, 2uLL);
    v42 = ilaenv_(&c__1_6, "DORMQR", __opts, v19, v17, __n3, &c_n1_1);
    __work = a11;
    v44 = __lda;
    v45 = v42 >= 64 ? 64 : v42;
    v46 = (double)(v45 * v40);
    *a11 = v46;
    v38 = *a13;
    if (*a13)
      goto LABEL_35;
    if (v80 == -1)
      return 0;
    if (!*v19 || !*v17 || (v47 = *__n3) == 0)
    {
      *a11 = 1.0;
      return 0;
    }
    v85 = v29;
    if (v45 < 2)
      goto LABEL_66;
    if (v45 < v47)
    {
      v48 = *a12;
      if (*a12 < v45 * v29)
      {
        v92 = 0x100000001;
        v93 = v23;
        v94 = v84;
        v49 = v48 / v29;
        s_cat(__opts, (uint64_t)&v93, (uint64_t)&v92, (unsigned int *)&c__2_1, 2uLL);
        v50 = ilaenv_(&c__2_1, "DORMQR", __opts, v19, v17, __n3, &c_n1_1);
        v44 = __lda;
        if (v50 <= 2)
          v51 = 2;
        else
          v51 = v50;
        __work = a11;
        if (v49 < v51)
          goto LABEL_66;
        v45 = v49;
        v47 = *__n3;
      }
    }
    if (v45 < v47)
    {
      if ((v25 != 0) != (v26 != 0))
        v52 = 1;
      else
        v52 = (v47 - 1) / v45 * v45 + 1;
      if ((v25 != 0) == (v26 != 0))
        v47 = 1;
      v68 = v45;
      if ((v25 != 0) != (v26 != 0))
        v53 = v45;
      else
        v53 = -v45;
      v69 = v53;
      if (v25)
      {
        LODWORD(v87) = *v17;
        v70 = 0;
        v71 = 1;
      }
      else
      {
        HIDWORD(v87) = *v19;
        v70 = 1;
        v71 = 0;
      }
      v54 = v52;
      v55 = v52 >= v47;
      v56 = v52 <= v47;
      if (v69 >= 0)
        v55 = v56;
      v67 = (uint64_t)v23;
      if (v55)
      {
        v76 = &v75[~v73];
        v57 = 1 - v54;
        v58 = v54 * (v73 + 1);
        v74 = v69 * (v73 + 1);
        v59 = (uint64_t)&v77[v54 - 1];
        v66 = v47;
        v60 = v54 + (uint64_t)v69;
        do
        {
          v61 = v54;
          v62 = v57 + *__n3;
          if (v68 < v62)
            v62 = v68;
          v88 = v62;
          LODWORD(v90) = v72 + v57;
          v81 = v58;
          v78 = &v76[v58];
          Accelerate_AR_dlarft((uint64_t)"Forward", (uint64_t)"Columnwise", (int *)&v90, &v88, (uint64_t)v78, __lda, v59, v91, &c__65);
          if (v25)
          {
            HIDWORD(v87) = v57 + *v19;
            v63 = v61;
            v64 = v71;
          }
          else
          {
            LODWORD(v87) = v57 + *v17;
            v64 = v61;
            v63 = v70;
          }
          v70 = v63;
          v71 = v64;
          Accelerate_AR_dlarfb(v67, v84, (uint64_t)"Forward", (uint64_t)"Columnwise", (__CLPK_integer *)&v87 + 1, (__CLPK_integer *)&v87, &v88, v78, __lda, (int)v91, &c__65, &__c__[~v79 + v63 + v64 * v79], a10, (uint64_t)a11, &v85);
          v65 = v60 >= v66;
          if (v69 >= 0)
            v65 = v60 <= v66;
          v57 -= v69;
          v58 = v81 + v74;
          v59 += 8 * v69;
          v60 += v69;
          v54 = v61 + v69;
        }
        while (v65);
      }
      goto LABEL_67;
    }
LABEL_66:
    dorm2r_(v23, v84, v19, v17, __n3, v75, v44, v77, __c__, a10, __work, &v86);
LABEL_67:
    *a11 = v46;
    return 0;
  }
  v38 = -7;
LABEL_34:
  *a13 = v38;
LABEL_35:
  HIDWORD(v90) = -v38;
  xerbla_();
  return 0;
}

void dtrsm_Right_Forward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  void (*v37)(uint64_t, double);
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v55;
  _BOOL4 v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v58)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, double);
  uint64_t v71;
  uint64_t v72;
  uint64_t (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int vars8_4;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;

  v34 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v75 = v31;
  v35 = v29;
  vars8_4 = v36;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v37 = (void (*)(uint64_t, double))dgePack_B_Tran;
  if (v27 == 111)
    v37 = (void (*)(uint64_t, double))dgePack_B_NoTran;
  v70 = v37;
  v38 = dtrsm_block_RLT;
  if (v27 == 111)
    v38 = dtrsm_block_RUN;
  vars0 = v38;
  v39 = (v29 << 6) + 4108;
  if (a12 == -1)
  {
    v46 = 8 * v39;
    if (v29 < 65)
      v46 = 0;
    v45 = (double)(unint64_t)v46;
    goto LABEL_13;
  }
  v40 = v33;
  v41 = v32;
  v42 = v30;
  v43 = v28;
  v44 = *(double *)&v34;
  v72 = v31;
  if (v29 >= 65 && a12)
  {
    if (8 * v39 > a12)
    {
      v45 = (double)(unint64_t)(8 * v39);
LABEL_13:
      *a11 = v45;
      return;
    }
    goto LABEL_16;
  }
  if (v29 >= 65)
  {
LABEL_16:
    v91 = (char *)a11;
    v66 = a11;
    if (!a11)
      v91 = (char *)malloc_type_malloc(8 * v39, 0x100004000313F17uLL);
    goto LABEL_18;
  }
  v66 = a11;
  v91 = &a27;
LABEL_18:
  if (v42 >= 1)
  {
    v79 = 0;
    v47 = 0;
    v90 = v35 - 3;
    if (v35 <= 0)
      v48 = -(-v35 & 3);
    else
      v48 = v35 & 3;
    v85 = v48;
    v67 = v42;
    v71 = v41 << 9;
    v89 = 32 * v41;
    v78 = 512;
    v49 = 64;
    v77 = a10 + (v41 << 9);
    v68 = v40;
    v69 = v35;
    v82 = v43;
    do
    {
      v76 = v49;
      if (v42 >= v49)
        v50 = v49;
      else
        v50 = v42;
      if (v47 + 64 <= v42)
        v51 = 64;
      else
        v51 = v42 - v47;
      v83 = v75 + 8 * v47 * v41;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, double))vars0)(vars8_4, v43, v51, v40 + 8 * v47 * v72 + 8 * v47, v72, v44);
      v86 = v47 + 64;
      if (v35 - (v47 + 64) >= 1)
      {
        v70(v51, -1.0);
        if (v43 < 1)
        {
          v44 = 1.0;
        }
        else
        {
          v52 = 0;
          v80 = (uint64_t)&v91[v78 * (v50 + v79) + 32832];
          v53 = 32 * (v50 + v79);
          v55 = v44 != 1.0 && v47 == 0;
          v56 = v44 != 0.0 && v55;
          v88 = v77;
          v57 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
          v58 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
          do
          {
            v87 = v52 + 64;
            if (v52 + 64 <= v43)
              v59 = 64;
            else
              v59 = v43 - v52;
            v84 = v52;
            if ((v59 & 7) != 0)
            {
              v58 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dgebpUnalignedC_8M4N;
              v57 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dgebpScaleUnalignedC_8M4N;
            }
            v60 = v41;
            dgePack_A_NoTran(v59, v51, (__int128 *)(v83 + 8 * v52), v41, v91);
            v61 = v86;
            if (v86 < v90)
            {
              v62 = v88;
              v63 = v80;
              v61 = v86;
              do
              {
                if (v56)
                  v57(v91, v63, v62, v60, v59, v51, v44);
                else
                  v58(v91, v63, v62, v60, v59, v51);
                v61 += 4;
                v63 += v53;
                v62 += v89;
              }
              while (v61 < v90);
            }
            v41 = v60;
            if (v85)
            {
              v64 = a10 + 8 * v84 + 8 * v61 * v60;
              v65 = (const double *)&v91[8 * v61 * v51 + 32832];
              if (v56)
                dgebpScale_8M1N((float64x2_t *)v91, v65, v64, v60, v59, v85, v51, v44);
              else
                dgebp_8M1N((float64x2_t *)v91, v65, v64, v60, v59, v85, v51);
            }
            v88 += 512;
            v52 = v87;
            v43 = v82;
          }
          while (v87 < v82);
          v44 = 1.0;
          v40 = v68;
          v35 = v69;
          v42 = v67;
        }
      }
      v49 = v76 + 64;
      v78 += 512;
      v79 -= 64;
      v77 += v71;
      v47 = v86;
    }
    while (v86 < v42);
  }
  if (v35 >= 65 && !v66)
    free(v91);
}

void dtrsm_Right_Backward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  void (*v49)(char *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  double *(*v51)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v52;
  uint64_t v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  const double *v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v68;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double *(*v76)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v77;
  char *v78;

  v25 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v26 = a9;
  STACK[0x10138] = *MEMORY[0x24BDAC8D0];
  v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dgePack_B_Tran;
  if (v17 == 111)
    v28 = 1;
  else
    v28 = a9;
  v65 = v28;
  if (v17 == 111)
    v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))dgePack_B_NoTran;
  v64 = v27;
  v29 = dtrsm_block_RUT;
  if (v17 == 111)
    v29 = dtrsm_block_RLN;
  v66 = v29;
  v30 = (v20 << 6) + 4108;
  if (a12 == -1)
  {
    v39 = 8 * v30;
    if (v20 < 65)
      v39 = 0;
    v38 = (double)(unint64_t)v39;
    goto LABEL_16;
  }
  v31 = v24;
  v32 = v23;
  v33 = v22;
  v34 = v21;
  v35 = v19;
  v36 = *(double *)&v25;
  v37 = v18;
  if (v20 >= 65 && a12)
  {
    if (8 * v30 > a12)
    {
      v38 = (double)(unint64_t)(8 * v30);
LABEL_16:
      *a11 = v38;
      return;
    }
    goto LABEL_19;
  }
  if (v20 >= 65)
  {
LABEL_19:
    v58 = a11;
    v59 = v20;
    v78 = (char *)a11;
    if (!a11)
      v78 = (char *)malloc_type_malloc(8 * v30, 0x100004000313F17uLL);
    goto LABEL_21;
  }
  v58 = a11;
  v59 = v20;
  v78 = &a17;
LABEL_21:
  if (v34 >= 1)
  {
    v68 = v35;
    v71 = (uint64_t)(v78 + 32832);
    v77 = 32 * v32;
    v40 = 1;
    v62 = v33;
    v63 = v31;
    v61 = v37;
    v60 = v26;
    do
    {
      v41 = v34;
      v42 = (unint64_t)v34 >= 0x40;
      if ((unint64_t)v34 >= 0x40)
        v34 -= 64;
      else
        v34 = 0;
      if (v42)
        v43 = 64;
      else
        v43 = v41;
      vars8 = v33 + 8 * v34 * v32;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v66)(v37, v35, v43, v31 + 8 * v34 * v26 + 8 * v34, v26, v36);
      if (v41 >= 0x41)
      {
        v64(v43, v34, v31 + 8 * v34 * v65, v26, v71, -1.0);
        v44 = 1.0;
        if (v35 < 1)
        {
          v40 = 0;
        }
        else
        {
          v45 = 0;
          v46 = v34 - 3;
          v47 = v36 != 1.0;
          if (v36 == 0.0)
            v47 = 0;
          v48 = v47 & v40;
          v73 = v34 & 3;
          v75 = a10;
          v76 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
          v49 = (void (*)(char *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
          vars0 = v34;
          do
          {
            v74 = v45 + 64;
            if (v45 + 64 <= v35)
              v50 = 64;
            else
              v50 = v35 - v45;
            v72 = v45;
            if ((v50 & 7) != 0)
              v49 = (void (*)(char *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpUnalignedC_8M4N;
            v51 = v76;
            if ((v50 & 7) != 0)
              v51 = dgebpScaleUnalignedC_8M4N;
            v76 = v51;
            v52 = v32;
            dgePack_A_NoTran(v50, v43, (__int128 *)(vars8 + 8 * v45), v32, v78);
            if ((unint64_t)v34 < 4)
            {
              v53 = 0;
            }
            else
            {
              v53 = 0;
              v54 = (float64x2_t *)v75;
              v55 = (float64x2_t *)(v78 + 32832);
              do
              {
                if (v48)
                  v76((float64x2_t *)v78, v55, v54, v52, v50, v43, v36);
                else
                  v49(v78, v55, v54, v52, v50, v43);
                v53 += 4;
                v55 += 2 * v43;
                v54 = (float64x2_t *)((char *)v54 + v77);
              }
              while (v53 < v46);
            }
            v32 = v52;
            v34 = vars0;
            if (v73)
            {
              v56 = a10 + 8 * v72 + 8 * v53 * v52;
              v57 = (const double *)(v71 + 8 * v53 * v43);
              if (v48)
                dgebpScale_8M1N((float64x2_t *)v78, v57, v56, v52, v50, v73, v43, v36);
              else
                dgebp_8M1N((float64x2_t *)v78, v57, v56, v52, v50, v73, v43);
            }
            v75 += 512;
            v45 = v74;
            v35 = v68;
          }
          while (v74 < v68);
          v40 = 0;
          v33 = v62;
          v31 = v63;
          v37 = v61;
          v26 = v60;
        }
      }
      else
      {
        v44 = v36;
      }
      v36 = v44;
    }
    while (v34 > 0);
  }
  if (v59 >= 65 && !v58)
    free(v78);
}

void dgemm_repack(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (**a12)(), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,char a29)
{
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t (**v43)();
  uint64_t (**v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  double *(*v52)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double *(*v68)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const double *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)();
  double *(*v82)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  _OWORD *(*v83)(_OWORD *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)();
  uint64_t v96;
  double *(*v97)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double *(*v107)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  float64x2_t *v108;

  v35 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v86 = v36;
  v78 = v37;
  v38 = v33;
  v101 = v32;
  v39 = v31;
  v41 = v40;
  v42 = *(double *)&v35;
  v43 = a12;
  STACK[0x10198] = *MEMORY[0x24BDAC8D0];
  if (!a12)
    v43 = off_250E46978;
  v44 = v43 + 1;
  if (v29 == 111)
  {
    v44 = v43;
    v45 = 1;
  }
  else
  {
    v45 = v34;
  }
  v98 = v45;
  v99 = v34;
  if (v29 == 111)
    v46 = v34;
  else
    v46 = 1;
  v77 = v46;
  v47 = 3;
  if (v30 == 111)
  {
    v47 = 2;
    v48 = 1;
  }
  else
  {
    v48 = a9;
  }
  v84 = v48;
  if (MEMORY[0xFFFFFC080] <= 747742333)
  {
    if (MEMORY[0xFFFFFC080] != -1829029944)
    {
      v49 = 506291073;
      goto LABEL_17;
    }
LABEL_18:
    if (v33 <= 512)
      v50 = 64;
    else
      v50 = 384;
    if (v31 >= 512)
      v51 = 128;
    else
      v51 = 64;
    v83 = dgebpAlignedC_8M4N;
    v97 = dgebpScaleUnalignedC_8M4N;
    v82 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
    v52 = dgebpUnalignedC_8M4N;
    goto LABEL_25;
  }
  if (MEMORY[0xFFFFFC080] == 933271106)
    goto LABEL_18;
  v49 = 747742334;
LABEL_17:
  if (MEMORY[0xFFFFFC080] == v49)
    goto LABEL_18;
  if (v33 >= 512)
    v50 = 544;
  else
    v50 = 64;
  v75 = 512;
  if (v31 < 1024)
    v75 = 288;
  if (v31 >= 512)
    v51 = v75;
  else
    v51 = 64;
  v83 = dgebpAlignedC_8M4N_hurricane;
  v97 = dgebpScaleUnalignedC_8M4N_hurricane;
  v82 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N_hurricane;
  v52 = dgebpUnalignedC_8M4N_hurricane;
LABEL_25:
  v95 = *v44;
  v96 = (uint64_t)v52;
  v81 = v43[v47];
  v53 = (v51 + v32) * v50;
  v76 = v53;
  if (v53 > 0x2000)
    v108 = (float64x2_t *)malloc_type_malloc((8 * v53) | 0x60, 0x100004000313F17uLL);
  else
    v108 = (float64x2_t *)&a29;
  if (v38 >= 1)
  {
    vars8 = 0;
    v54 = 0;
    v102 = (uint64_t)v108 + ((8 * v51 * (unint64_t)v50) | 0x40);
    if (v101 <= 0)
      v57 = -(-v101 & 3);
    else
      v57 = v101 & 3;
    v103 = v57;
    v91 = 8 * v51;
    v58 = v50;
    v79 = v50;
    v80 = v38;
    v93 = v51;
    v94 = v39;
    v92 = a13;
    do
    {
      vars0 = v58;
      if (v38 >= v58)
        v59 = v58;
      else
        v59 = v38;
      v87 = v54 + v50;
      if (v54 + v50 <= v38)
        v60 = v50;
      else
        v60 = v38 - v54;
      v106 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v83;
      v107 = v82;
      if (a13)
      {
        v106 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a13;
        v107 = *(double *(**)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))(a13 + 24);
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v81)(v60, v101, v86 + 8 * v54 * v84, a9, v102, v42);
      if (v39 >= 1)
      {
        v61 = 0;
        v62 = 32 * (v59 + vars8);
        v100 = v78 + 8 * v54 * v77;
        v64 = v41 != 1.0 && v54 == 0 && v41 != 0.0;
        v65 = a10;
        do
        {
          v104 = v61 + v51;
          if (v61 + v51 <= v39)
            v66 = v51;
          else
            v66 = v39 - v61;
          v67 = v106;
          if ((v66 & 7) != 0)
            v67 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v96;
          v106 = v67;
          v68 = v107;
          if ((v66 & 7) != 0)
            v68 = v97;
          v107 = v68;
          if (a13 && (v66 & 7) != 0)
          {
            v106 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a13 + 8);
            v107 = *(double *(**)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))(a13 + 32);
          }
          v69 = v61;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))v95)(v66, v60, v100 + 8 * v61 * v98, v99, v108);
          v105 = v65;
          v70 = 0;
          if (v101 < 4)
          {
            v72 = v69;
          }
          else
          {
            v71 = v102;
            do
            {
              if (v64)
                v107(v108, (float64x2_t *)v71, (float64x2_t *)v65, a11, v66, v60, v41);
              else
                v106(v108, v71, v65, a11, v66, v60);
              v70 += 4;
              v71 += v62;
              v65 += 32 * a11;
              v72 = v69;
            }
            while (v70 < v101 - 3);
          }
          a13 = v92;
          if (v103)
          {
            v73 = a10 + 8 * v72 + 8 * v70 * a11;
            v74 = (const double *)(v102 + 8 * v70 * v60);
            if (v64)
            {
              if (v92)
                (*(void (**)(float64x2_t *, const double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v92 + 40))(v108, v74, v73, a11, v66, v103, v60, v41);
              else
                dgebpScale_8M1N(v108, v74, v73, a11, v66, v103, v60, v41);
            }
            else if (v92)
            {
              (*(void (**)(float64x2_t *, const double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 16))(v108, v74, v73, a11, v66, v103, v60);
            }
            else
            {
              dgebp_8M1N(v108, v74, v73, a11, v66, v103, v60);
            }
          }
          v65 = v105 + v91;
          v61 = v104;
          v51 = v93;
          v39 = v94;
        }
        while (v104 < v94);
      }
      v50 = v79;
      v38 = v80;
      v58 = vars0 + v79;
      vars8 -= v79;
      v54 = v87;
    }
    while (v87 < v80);
  }
  if (v76 > 0x2000)
    free(v108);
}

uint64_t Accelerate_AR_spotf2(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float *v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  double v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float sa;
  int v32;
  int n;

  sa = 0.0;
  v32 = 0;
  v9 = *a4;
  *a5 = 0;
  v10 = lsame_();
  if (!v10 && !lsame_())
  {
    v13 = -1;
    goto LABEL_21;
  }
  v11 = *a2;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = -2;
    goto LABEL_21;
  }
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = *a2;
  if (*a4 < v12)
  {
    v13 = -4;
LABEL_21:
    *a5 = v13;
    goto LABEL_22;
  }
  v13 = *a5;
  if (*a5)
  {
LABEL_22:
    n = -v13;
    xerbla_();
    return 0;
  }
  if ((_DWORD)v11)
  {
    v14 = a3 + 4 * ~(_DWORD)v9;
    if (v10)
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v16 = v15 + (int)v9 * (int)v15;
        v17 = *(float *)(v14 + 4 * v16);
        v18 = (float *)(v14 + 4 * v15 * v9 + 4);
        v19 = v17 - sdot_(&n, v18, &c__1_7, v18, &c__1_7);
        if (v19 <= 0.0)
          break;
        v20 = sqrtf(v19);
        *(float *)(v14 + 4 * v16) = v20;
        v21 = *a2;
        if (v15 >= v21)
        {
          v22 = v15 + 1;
        }
        else
        {
          v32 = v21 - v15;
          n = v15 - 1;
          v22 = v15 + 1;
          Accelerate_AR_sgemv("Transpose", &n, &v32, &c_b10_0, v14 + 4 * (v15 + 1) * v9 + 4, a4, v18, &c__1_7, &c_b12_0, v14 + 4 * (v15 + (int)v9 + (int)v9 * (int)v15), a4);
          n = *a2 - v15;
          sa = 1.0 / v20;
          sscal_(&n, &sa, (float *)(v14 + 4 * (v15 + (int)v9 + (int)v9 * (int)v15)), a4);
        }
        v23 = v15 < v11;
        v15 = v22;
        if (!v23)
          return 0;
      }
      *(float *)(v14 + 4 * v16) = v19;
    }
    else
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v25 = v15 + (int)v9 * (int)v15;
        v26 = *(float *)(v14 + 4 * v25);
        v27 = v26 - sdot_(&n, (float *)(v14 + 4 * (v15 + v9)), a4, (float *)(v14 + 4 * (v15 + v9)), a4);
        if (v27 <= 0.0)
          break;
        v28 = sqrtf(v27);
        *(float *)(v14 + 4 * v25) = v28;
        v29 = *a2;
        if (v15 >= v29)
        {
          v30 = v15 + 1;
        }
        else
        {
          v32 = v15 - 1;
          n = v29 - v15;
          v30 = v15 + 1;
          Accelerate_AR_sgemv("No transpose", &n, &v32, &c_b10_0, v14 + 4 * (v15 + 1 + v9), a4, v14 + 4 * (v15 + v9), a4, &c_b12_0, v14 + 4 * (v15 + 1 + v15 * v9), &c__1_7);
          n = *a2 - v15;
          sa = 1.0 / v28;
          sscal_(&n, &sa, (float *)(v14 + 4 * (v15 + 1 + v15 * v9)), &c__1_7);
        }
        v23 = v15 < v11;
        v15 = v30;
        if (!v23)
          return 0;
      }
      *(float *)(v14 + 4 * v25) = v27;
    }
    *a5 = v15;
  }
  return 0;
}

uint64_t Accelerate_AR_dorgqr(unsigned int *a1, int *a2, _DWORD *a3, uint64_t a4, __CLPK_integer *a5, uint64_t a6, double *a7, int *a8, int *a9)
{
  __CLPK_integer v9;
  int v10;
  int v11;
  double *v12;
  unsigned int v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v19;
  double *v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  char v49;
  BOOL v50;
  int v51;
  int v52;
  uint64_t v55;
  int v57;
  int v58;
  _DWORD *v59;
  double *v60;
  uint64_t v62;
  size_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72[3];

  v68 = 0;
  v9 = *a5;
  *a9 = 0;
  v10 = *a2;
  if (*a2 <= 1)
    v11 = 1;
  else
    v11 = *a2;
  *a7 = (double)(32 * v11);
  v12 = a7 - 1;
  v13 = *a1;
  if ((*a1 & 0x80000000) != 0)
  {
    v14 = 1;
    v15 = -1;
    goto LABEL_15;
  }
  v14 = 2;
  v15 = -2;
  if (v10 < 0)
    goto LABEL_15;
  if (v10 > (int)v13)
    goto LABEL_15;
  v16 = a3;
  LODWORD(v17) = *a3;
  v14 = 3;
  v15 = -3;
  if ((*a3 & 0x80000000) != 0 || (int)v17 > v10)
    goto LABEL_15;
  if (v13 <= 1)
    v19 = 1;
  else
    v19 = *a1;
  if (*a5 < v19)
  {
    v14 = 5;
    v15 = -5;
LABEL_15:
    *a9 = v15;
    v72[0] = v14;
    xerbla_();
    return 0;
  }
  v21 = a7;
  v22 = a4;
  v23 = a1;
  v24 = *a8;
  if (*a8 < v11 && v24 != -1)
  {
    v14 = 8;
    v15 = -8;
    goto LABEL_15;
  }
  if (v24 == -1)
    return 0;
  if (!v10)
  {
    *a7 = 1.0;
    return 0;
  }
  v25 = ~v9;
  v55 = ~v9;
  v58 = *a3;
  if (v17 < 0x21)
  {
    v28 = 0;
    v26 = 32;
LABEL_30:
    v52 = v10;
    goto LABEL_33;
  }
  if (v17 < 0x81)
  {
    v26 = 32;
    v28 = 128;
    goto LABEL_30;
  }
  LODWORD(v68) = v10;
  v52 = 32 * v10;
  if (v24 >= 32 * v10)
  {
    v26 = 32;
    goto LABEL_32;
  }
  v26 = v24 / v10;
  if (v26 >= 2)
  {
LABEL_32:
    v28 = 128;
LABEL_33:
    v27 = 0;
    if (v28 >= v17 || v26 >= v17)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      v64 = v26;
      v51 = (int)(v17 + ~v28) / v26 * v26;
      v71 = v51 + v26;
      v72[0] = v10;
      if ((int)v17 >= v51 + v26)
        v17 = (v51 + v26);
      else
        v17 = v17;
      v29 = v10 - v17;
      if (v10 > (int)v17)
      {
        v66 = a4 + 8 * v55;
        v30 = v9 + v9 * v17 + 1;
        v62 = 8 * v17;
        do
        {
          if ((int)v17 >= 1)
          {
            v31 = v17;
            bzero((void *)(v66 + 8 * v30), v62);
            v17 = v31;
            v23 = a1;
          }
          v30 += v9;
          --v29;
        }
        while (v29);
      }
      v27 = v51 + 1;
      v26 = v64;
      v22 = a4;
    }
    v25 = ~v9;
    goto LABEL_46;
  }
  v27 = 0;
  LODWORD(v17) = 0;
LABEL_46:
  v65 = v26;
  v63 = v22 + 8 * v25;
  v32 = a6 - 8;
  v67 = a6 - 8;
  if (v10 > (int)v17)
  {
    v71 = v10 - v17;
    v72[0] = v13 - v17;
    v70 = v58 - v17;
    v33 = v17;
    Accelerate_AR_dorg2r(v72, &v71, (unsigned int *)&v70, v63 + 8 * ((int)v17 + 1 + ((int)v17 + 1) * v9), a5, v32 + 8 * ((int)v17 + 1), v21, (int *)&v68 + 1);
    LODWORD(v17) = v33;
    v32 = a6 - 8;
  }
  if ((int)v17 >= 1)
  {
    v72[0] = -v65;
    v34 = v27 > 0;
    if (v65 <= 0)
      v34 = v27 < 2;
    if (v34)
    {
      v35 = v22 + 8 * v55;
      v57 = v9 + 1;
      v59 = v16;
      v60 = v21;
      do
      {
        v36 = *v16 - v27;
        v37 = v36 + 1;
        if (v65 >= v36 + 1)
          v38 = v36 + 1;
        else
          v38 = v65;
        v69 = v38;
        v70 = v37;
        v39 = v38 + v27;
        v40 = *v23;
        if (v39 <= *a2)
        {
          v71 = v40 - v27 + 1;
          v43 = v63;
          v42 = v27;
          Accelerate_AR_dlarft((uint64_t)"Forward", (uint64_t)"Columnwise", &v71, &v69, v63 + 8 * v27 * v57, a5, v32 + 8 * v27, v21, (int *)&v68);
          v44 = *v23 - v27 + 1;
          v70 = *a2 - (v69 + v27) + 1;
          v71 = v44;
          Accelerate_AR_dlarfb((uint64_t)"Left", "No transpose", (uint64_t)"Forward", (uint64_t)"Columnwise", &v71, &v70, &v69, (__CLPK_doublereal *)(v63 + 8 * v27 * v57), a5, (int)v21, (int *)&v68, (__CLPK_doublereal *)(v63 + 8 * (v27 + (v69 + v27) * v9)), a5, (uint64_t)&v12[v69 + 1], (int *)&v68);
          v41 = v27 * v57;
          v32 = v67;
          v40 = *v23;
        }
        else
        {
          v41 = v27 * v57;
          v42 = v27;
          v43 = v63;
        }
        v71 = v40 - v27 + 1;
        Accelerate_AR_dorg2r(&v71, &v69, (unsigned int *)&v69, v43 + 8 * v41, a5, v32 + 8 * v42, v21, (int *)&v68 + 1);
        v45 = v69 + v27;
        v71 = v69 + v27 - 1;
        if (v69 >= 1)
        {
          v70 = v27 - 1;
          v46 = v9 * v27 + 1;
          v47 = v27;
          do
          {
            if (v27 >= 2)
              bzero((void *)(v35 + 8 * v46), 8 * (v27 - 1));
            ++v47;
            v46 += v9;
          }
          while (v47 < v45);
        }
        v48 = __OFADD__(v72[0], v27);
        v27 += v72[0];
        if ((v27 < 0) ^ v48 | (v27 == 0))
          v49 = 0;
        else
          v49 = 1;
        if (v72[0] >= 0)
          v50 = v27 < 2;
        else
          v50 = v49;
        v16 = v59;
        v21 = v60;
        v32 = v67;
      }
      while (v50);
    }
  }
  *v21 = (double)v52;
  return 0;
}

double *dgebpScaleUnalignedC_8M4N(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      v27 = _X2[2];
      v28 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v31 = *_X2;
      v32 = _X2[1];
      v33 = _X2[2];
      v34 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      v39 = _X2[2];
      v40 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v43 = *a2;
      v44 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v48 = vmulq_n_f64(v25, a7);
      v49 = vmulq_n_f64(v26, a7);
      v50 = vmulq_n_f64(v27, a7);
      v51 = vmulq_n_f64(v28, a7);
      v52 = vmulq_n_f64(v31, a7);
      v53 = vmulq_n_f64(v32, a7);
      v54 = vmulq_n_f64(v33, a7);
      v55 = vmulq_n_f64(v34, a7);
      v56 = vmulq_n_f64(v37, a7);
      v57 = vmulq_n_f64(v38, a7);
      v58 = vmulq_n_f64(v39, a7);
      v59 = vmulq_n_f64(v40, a7);
      v60 = vmulq_n_f64(*_X2, a7);
      v61 = vmulq_n_f64(_X2[1], a7);
      v62 = vmulq_n_f64(_X2[2], a7);
      v63 = vmulq_n_f64(_X2[3], a7);
      do
      {
        v64 = v14;
        v65 = v15;
        v48 = vmlaq_n_f64(v48, v14, v43.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v14, v43, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v66 = (float64x2_t *)(result + 4);
        v56 = vmlaq_n_f64(v56, v64, v44.f64[0]);
        v60 = vmlaq_laneq_f64(v60, v64, v44, 1);
        v67 = *_X6;
        v68 = _X6[1];
        _X6 += 2;
        v69 = v16;
        v49 = vmlaq_n_f64(v49, v65, v43.f64[0]);
        v53 = vmlaq_laneq_f64(v53, v65, v43, 1);
        v70 = v17;
        v57 = vmlaq_n_f64(v57, v65, v44.f64[0]);
        v61 = vmlaq_laneq_f64(v61, v65, v44, 1);
        v16 = *v66;
        v17 = v66[1];
        result = v66[2].f64;
        v50 = vmlaq_n_f64(v50, v69, v43.f64[0]);
        v54 = vmlaq_laneq_f64(v54, v69, v43, 1);
        v58 = vmlaq_n_f64(v58, v69, v44.f64[0]);
        v62 = vmlaq_laneq_f64(v62, v69, v44, 1);
        v51 = vmlaq_n_f64(v51, v70, v43.f64[0]);
        v55 = vmlaq_laneq_f64(v55, v70, v43, 1);
        v43 = v67;
        v59 = vmlaq_n_f64(v59, v70, v44.f64[0]);
        v63 = vmlaq_laneq_f64(v63, v70, v44, 1);
        v44 = v68;
        --v18;
      }
      while (v18);
      v71 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v48;
      v11[1] = v49;
      v11[2] = v50;
      v11[3] = v51;
      v11 += 4;
      *v71 = v52;
      v71[1] = v53;
      v71[2] = v54;
      v71[3] = v55;
      v72 = (float64x2_t *)((char *)v71 + v12);
      *v72 = v56;
      v72[1] = v57;
      v72[2] = v58;
      v72[3] = v59;
      v73 = (float64x2_t *)((char *)v72 + v12);
      *v73 = v60;
      v73[1] = v61;
      v73[2] = v62;
      v73[3] = v63;
      _X2 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return dgebpScale_1M4N(result - 8, a2, _X2->f64, a4, v8, a6, a7);
  return result;
}

void cblas_strmm_sequential(int a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10, int a11)
{
  int v11;
  int v12;
  int v16;
  char *v19;
  char *v20;
  int v21;
  int v23;
  int v24;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v11 = a7;
  v12 = a6;
  v16 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v21 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a9 < (int)a7 || a9 <= 0)
      {
        v31 = a9;
        v33 = a7;
        v20 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v34 = a2;
        v31 = 142;
        v33 = 141;
        v20 = "SIDE must be %d or %d, but is set to %d";
        v27 = 2;
        goto LABEL_41;
      }
      if (a9 < (int)a6 || a9 <= 0)
      {
        v31 = a9;
        v33 = a6;
        v20 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v27 = 10;
LABEL_41:
        v24 = cblas_errprn(v27, 2000, v20, v31, v33, v34);
        goto LABEL_43;
      }
    }
    v24 = 2000;
LABEL_43:
    if (a11 >= v11 && a11 > 0)
      goto LABEL_47;
    v21 = cblas_errprn(12, v24, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v24 = v21;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a9 >= (int)a7 && a9 > 0)
      goto LABEL_24;
    v30 = a9;
    v32 = a7;
    v19 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v32 = 141;
      v34 = a2;
      v30 = 142;
      v19 = "SIDE must be %d or %d, but is set to %d";
      v23 = 2;
      goto LABEL_26;
    }
    if (a9 >= (int)a6 && a9 > 0)
    {
LABEL_24:
      v24 = 2000;
      goto LABEL_27;
    }
    v30 = a9;
    v32 = a6;
    v19 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v23 = 10;
LABEL_26:
  v24 = cblas_errprn(v23, 2000, v19, v30, v32, v34);
LABEL_27:
  if (a11 < v12 || a11 <= 0)
  {
    v21 = cblas_errprn(12, v24, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v24 = cblas_errprn(3, v24, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v24 = cblas_errprn(4, v24, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v12 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v24 = cblas_errprn(6, v24, "M cannot be less than zero; it is set to %d.", v12);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v24 = cblas_errprn(5, v24, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v12 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v11 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v24 = cblas_errprn(7, v24, "N cannot be less than zero; it is set to %d.", v11);
LABEL_54:
  if (v24 == 2000)
  {
    if (a1 == 102)
    {
      APL_seq_strmm(v16, a3, a4, a5, v12, v11, a8, a9, a10, a11, 0, 0);
    }
    else
    {
      if (v16 == 141)
        v28 = 142;
      else
        v28 = 141;
      if (a3 == 121)
        v29 = 122;
      else
        v29 = 121;
      APL_seq_strmm(v28, v29, a4, a5, v11, v12, a8, a9, a10, a11, 0, 0);
    }
  }
  else
  {
    cblas_xerbla(v24, "cblas_strmm", "");
  }
}

uint64_t Accelerate_AR_slarf(uint64_t a1, __CLPK_integer *a2, __CLPK_integer *a3, float *a4, int *a5, float *a6, __CLPK_real *a7, __CLPK_integer *a8, float *a9)
{
  int v16;
  __CLPK_integer *v17;
  __CLPK_integer v18;
  int v19;
  BOOL v20;
  __CLPK_integer __m;
  int m;
  float alpha;

  v16 = lsame_();
  m = 0;
  if (*a6 != 0.0)
  {
    if (v16)
      v17 = a2;
    else
      v17 = a3;
    v18 = *v17;
    if (v18 >= 1)
    {
      if (*a5 >= 1)
        v19 = *a5 * (v18 - 1) + 1;
      else
        v19 = 1;
      while (a4[v19 - 1] == 0.0)
      {
        v19 -= *a5;
        v20 = __OFSUB__(v18--, 1);
        if ((v18 < 0) ^ v20 | (v18 == 0))
        {
          v18 = 0;
          break;
        }
      }
    }
    alpha = 0.0;
    __m = v18;
    if (v16)
    {
      m = ilaslc_(&__m, a3, a7, a8);
      if (__m >= 1)
      {
        Accelerate_AR_sgemv("Transpose", &__m, &m, &c_b4, a7, a8, a4, a5, &c_b5_0, a9, &c__1_8);
        alpha = -*a6;
        sger_(&__m, &m, &alpha, a4, a5, a9, &c__1_8, a7, a8);
      }
    }
    else
    {
      m = ilaslr_(a2, &__m, a7, a8);
      if (__m >= 1)
      {
        Accelerate_AR_sgemv("No transpose", &m, &__m, &c_b4, a7, a8, a4, a5, &c_b5_0, a9, &c__1_8);
        alpha = -*a6;
        sger_(&m, &__m, &alpha, a9, &c__1_8, a4, a5, a7, a8);
      }
    }
  }
  return 0;
}

uint64_t APL_sgemm_noPack_TT(uint64_t result, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, _OWORD *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  __int32 *v75;
  float32x4_t v76;
  __int32 *v77;
  __int32 *v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  uint64_t k;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  __int32 v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t v103;
  __int32 *v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float32x2_t v109;
  float32x2_t v110;
  __int32 *v111;

  v12 = 4 * a5;
  v13 = a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = &a4[(unint64_t)v12 / 4];
    v19 = &a4[(unint64_t)v12 / 2];
    v20 = &a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v21 = (float32x4_t *)a6;
    v22 = &a8[a12];
    v23 = __OFSUB__(result, 3);
    v24 = result - 3;
    if (result > 3)
    {
      do
      {
        v25 = a3;
        v26 = (float32x4_t)veorq_s8(a11, a11);
        v27 = v26;
        v28 = v26;
        v29 = v26;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v30 = *v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = v32;
        v34 = *v19++;
        v35 = v34;
        v36 = *v20++;
        v37 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v14);
        v26 = vmlaq_n_f32(v26, v37, v31);
        v27 = vmlaq_n_f32(v27, v37, v33);
        v28 = vmlaq_n_f32(v28, v37, v35);
        v29 = vmlaq_n_f32(v29, v37, v36);
        v25 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v38 = *v21;
          v39 = *(float32x4_t *)((char *)v21 + v14);
          v40 = *(float32x2_t *)v17;
          v17 += 2;
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v15 = v25 <= 2;
          for (j = v25 - 2; !v15; j -= 2)
          {
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v52 = vmlaq_n_f32(v26, v38, v41.f32[0]);
            v53 = vmlaq_n_f32(v27, v38, v44.f32[0]);
            v54 = vmlaq_n_f32(v28, v38, v47.f32[0]);
            v55 = vmlaq_n_f32(v29, v38, v50.f32[0]);
            v38 = *v21;
            v26 = vmlaq_lane_f32(v52, v39, v41, 1);
            v56 = *(float32x2_t *)v17;
            v17 += 2;
            v41 = v56;
            v27 = vmlaq_lane_f32(v53, v39, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v28 = vmlaq_lane_f32(v54, v39, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v29 = vmlaq_lane_f32(v55, v39, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v39 = *(float32x4_t *)((char *)v21 + v14);
            v15 = j <= 2;
          }
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v38, v41.f32[0]), v39, v41, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v38, v44.f32[0]), v39, v44, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v38, v47.f32[0]), v39, v47, 1);
          v29 = vmlaq_lane_f32(vmlaq_n_f32(v29, v38, v50.f32[0]), v39, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        v61 = vzip1q_s32((int32x4_t)v26, (int32x4_t)v28);
        v62 = vzip2q_s32((int32x4_t)v26, (int32x4_t)v28);
        v63 = vzip1q_s32((int32x4_t)v27, (int32x4_t)v29);
        v64 = vzip2q_s32((int32x4_t)v27, (int32x4_t)v29);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v61, v63), a9), *a8, a10);
        v65 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v62, v64), a9), *v60, a10);
        v66 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v62, v64), a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v61, v63), a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v65;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v66;
        v21 = (float32x4_t *)a6;
        v17 = &v17[v12 - a3];
        v18 = &v17[(unint64_t)v12 / 4];
        v19 = &v17[(unint64_t)v12 / 2];
        v20 = &v17[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v23 = __OFSUB__(v24, 4);
        v15 = v24 <= 4;
        v24 -= 4;
      }
      while (!v15);
    }
    v67 = result & 3;
    if (!v23 && v67 != 0)
    {
      do
      {
        v68 = a3;
        v69 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v70 = *v17,
              ++v17,
              v71 = *v21,
              v21 = (float32x4_t *)((char *)v21 + v14),
              v69 = vmlaq_n_f32(v69, v71, v70),
              v68 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v72 = *(float32x2_t *)v17;
            v17 += 2;
            v73 = *v21;
            v74 = *(float32x4_t *)((char *)v21 + v14);
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v69 = vmlaq_lane_f32(vmlaq_n_f32(v69, v73, v72.f32[0]), v74, v72, 1);
            v15 = v68 <= 2;
            v68 -= 2;
          }
          while (!v15);
        }
        v76.i32[0] = a8->i32[0];
        v75 = (__int32 *)((char *)a8 + v13 * 4);
        v76.i32[1] = *v75;
        v77 = &v75[v13];
        v76.i32[2] = *v77;
        v78 = &v77[v13];
        v76.i32[3] = *v78;
        v79 = &v78[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v69, a9), v76, a10);
        v80 = &v79[v13];
        *v79 = a11.i32[0];
        a8 = (float32x4_t *)(v79 + 1);
        *v80 = a11.i32[1];
        v81 = &v80[v13];
        *v81 = a11.i32[2];
        v81[a12] = a11.i32[3];
        v21 = (float32x4_t *)a6;
        v17 = &v17[(unint64_t)v12 / 4 - a3];
        v15 = v67-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v22;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v83 = (__int32 *)a4;
    v84 = (__int32 *)&a4[(unint64_t)v12 / 4];
    v85 = (__int32 *)&a4[(unint64_t)v12 / 2];
    v86 = (__int32 *)&a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v87 = (__int32 *)a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_25;
        v93 = *v83++;
        v94.i32[0] = v93;
        v94.i32[1] = *v84++;
        v94.i32[2] = *v85++;
        v94.i32[3] = *v86++;
        v95 = *v87;
        v87 = (__int32 *)((char *)v87 + v14);
        v92 = vmlaq_n_f32(v92, v94, *(float *)&v95);
        v91 = a3 - 1;
        if (a3 > 1)
        {
LABEL_25:
          do
          {
            v96 = *(_QWORD *)v83;
            v83 += 2;
            v97.i64[0] = v96;
            v98 = *(_QWORD *)v84;
            v84 += 2;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v85;
            v85 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v86;
            v86 += 2;
            v103.i32[0] = *v87;
            v104 = &v87[(unint64_t)v14 / 4];
            v103.i32[1] = *v104;
            v87 = &v104[(unint64_t)v14 / 4];
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, (float32x4_t)vtrn1q_s32(v97, v99), v103.f32[0]), (float32x4_t)vtrn2q_s32(v97, v99), v103, 1);
            v15 = v91 <= 2;
            v91 -= 2;
          }
          while (!v15);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = (__int32 *)a6;
        v83 = &v83[v12 - a3];
        v84 = &v83[(unint64_t)v12 / 4];
        v85 = &v83[(unint64_t)v12 / 2];
        v86 = &v83[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v89 = __OFSUB__(v90, 4);
        v15 = v90 <= 4;
        v90 -= 4;
      }
      while (!v15);
    }
    v105 = result & 3;
    if (!v89 && v105 != 0)
    {
      do
      {
        v106 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v107 = *(float *)v83,
              ++v83,
              v108 = *(float *)v87,
              v87 = (__int32 *)((char *)v87 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v108, v107),
              v106 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v109 = *(float32x2_t *)v83;
            v83 += 2;
            v110.i32[0] = *v87;
            v111 = &v87[(unint64_t)v14 / 4];
            v110.i32[1] = *v111;
            v87 = &v111[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v110, v109);
            v15 = v106 <= 2;
            v106 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = (__int32 *)a6;
        v83 = &v83[(unint64_t)v12 / 4 - a3];
        v15 = v105-- <= 1;
      }
      while (!v15);
    }
    a6 = (_OWORD *)((char *)a6 + 4);
    a8 = v88;
    v15 = k <= 1;
  }
  return result;
}

uint64_t Accelerate_AR_slarft(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t a5, int *a6, uint64_t a7, float *a8, int *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  int v21;
  const char *v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  int64_t v27;
  char *v28;
  float *v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  float *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float v49;
  int v50;
  float *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  float *v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int64_t v74;
  float *v75;
  float *aa;
  int v78;
  float *v79;
  int v81;
  int *v82;
  float *v84;
  uint64_t v85;
  _DWORD *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int n[4];

  if (*a3)
  {
    v88 = *a6;
    v11 = ~(_DWORD)v88;
    v85 = a5 + 4 * v11;
    v12 = a7 - 4;
    v89 = *a9;
    v90 = 0;
    v13 = ~(_DWORD)v89;
    *(_QWORD *)n = 0;
    v84 = &a8[v13];
    v14 = lsame_();
    v15 = *a4;
    if (v14)
    {
      if ((int)v15 >= 1)
      {
        v16 = 0;
        v79 = &a8[v13];
        v17 = 4 * v88;
        v70 = a5 + 4 * v11;
        v18 = a5 + 4 * v88 + 4 * v11;
        v19 = -1;
        v20 = 1;
        v21 = *a3;
        v22 = "No transpose";
        v72 = v12;
        v74 = v15;
        do
        {
          if ((int)v20 > v21)
            v21 = v20;
          if (*(float *)(v12 + 4 * v20) == 0.0)
          {
            n[0] = v20;
            bzero(&v79[(int)v89 + 1 + (int)v89 * (int)v16], 4 * v16 + 4);
          }
          else
          {
            v23 = (_DWORD *)(v85 + 4 * (v20 + (int)v88 * (int)v20));
            v24 = *v23;
            v86 = v23;
            *v23 = 1065353216;
            v25 = lsame_();
            v26 = *a3;
            v27 = *a3;
            if (v25)
            {
              if (v20 < v26)
              {
                while (*(float *)(v18 + 4 * v27) == 0.0)
                {
                  if (--v27 <= v20)
                  {
                    v26 = v20;
                    goto LABEL_20;
                  }
                }
                v26 = v27;
              }
LABEL_20:
              if (v26 >= v21)
                v30 = v21;
              else
                v30 = v26;
              v81 = v20 - 1;
              HIDWORD(v90) = v20 - 1;
              n[0] = v19 + v30 + 1;
              *(float *)&v90 = -*(float *)(v12 + 4 * v20);
              v31 = v89;
              v32 = v20 * v89 + 1;
              v33 = (char *)v22;
              v34 = v84;
              Accelerate_AR_sgemv("Transpose", n, (char *)&v90 + 4, &v90, v85 + 4 * (v20 + v88), a6, v86, &c__1_9, &c_b8_0, &v84[v32], &c__1_9);
            }
            else
            {
              v28 = (char *)v22;
              if (v20 < v26)
              {
                v29 = (float *)(v70 + 4 * (v20 + (int)v88 * (uint64_t)(int)v27));
                while (*v29 == 0.0)
                {
                  --v27;
                  v29 -= v88;
                  if (v27 <= v20)
                  {
                    v26 = v20;
                    goto LABEL_25;
                  }
                }
                v26 = v27;
              }
LABEL_25:
              if (v26 >= v21)
                v35 = v21;
              else
                v35 = v26;
              v81 = v20 - 1;
              HIDWORD(v90) = v19 + v35 + 1;
              n[0] = v20 - 1;
              *(float *)&v90 = -*(float *)(v12 + 4 * v20);
              v34 = v84;
              v31 = v89;
              v32 = v20 * v89 + 1;
              v33 = v28;
              Accelerate_AR_sgemv(v28, n, (char *)&v90 + 4, &v90, v85 + 4 * v20 * v88 + 4, a6, v86, a6, &c_b8_0, &v84[v32], &c__1_9);
            }
            v36 = v32;
            v37 = v31;
            v12 = v72;
            *v86 = v24;
            n[0] = v81;
            v38 = v37 * v20;
            strmv_("Upper", v33, "Non-unit", n, a8, a9, &v34[v36], &c__1_9);
            v34[v20 + v38] = *(float *)(v72 + 4 * v20);
            if (v21 <= v26)
              v39 = v26;
            else
              v39 = v21;
            if ((unint64_t)v20 <= 1)
              v21 = v26;
            else
              v21 = v39;
            v17 = 4 * v88;
            v15 = v74;
            v22 = v33;
          }
          v19 = ~(_DWORD)v20;
          ++v16;
          v18 += v17;
        }
        while (v20++ < v15);
      }
    }
    else if ((int)v15 >= 1)
    {
      v41 = 0;
      v42 = *a4;
      v75 = &a8[v13];
      v43 = 4 * v88 * v42 + 4 * v11;
      v44 = 4 * (v88 + v42) + 4 * v11;
      v45 = -4 * v88;
      v73 = v15 * (v89 + 1);
      v69 = v88 + 1;
      v46 = v43 + a5 + 4;
      v47 = (float *)(a5 + v44);
      v87 = 1;
      v48 = v42;
      v82 = a4;
      v71 = v42;
      do
      {
        v49 = *(float *)(v12 + 4 * v48);
        v50 = *a4;
        if (v49 == 0.0)
        {
          n[1] = *a4;
          if (v48 <= v50)
            bzero(&v75[v73 + (int)v13 * (int)v41], 4 * (v50 + v41 - v42) + 4);
        }
        else
        {
          v51 = v84;
          if (v48 >= v50)
          {
            v59 = v89 + 1;
          }
          else
          {
            v52 = lsame_();
            v53 = *a3;
            v54 = *a4;
            if (v52)
            {
              v55 = v69 * v48 + v53 - v54;
              v56 = *(_DWORD *)(v85 + 4 * v55);
              *(_DWORD *)(v85 + 4 * v55) = 1065353216;
              if (v48 < 2)
              {
                LODWORD(v58) = 1;
              }
              else
              {
                v57 = 0;
                while (*(float *)(v46 + 4 * v57) == 0.0)
                {
                  if (v48 - 1 == ++v57)
                  {
                    LODWORD(v58) = v48;
                    goto LABEL_63;
                  }
                }
                LODWORD(v58) = v57 + 1;
              }
LABEL_63:
              if ((int)v58 <= v87)
                v66 = v87;
              else
                v66 = v58;
              n[0] = v54 - v48;
              n[1] = v48 + v53 - v54 - v66 + 1;
              *(float *)&v90 = -*(float *)(v12 + 4 * v48);
              v51 = v84;
              v63 = v85;
              aa = (float *)(v48 + 1 + v48 * v89);
              v78 = v48 + 1;
              Accelerate_AR_sgemv("Transpose", &n[1], n, &v90, v85 + 4 * ((v48 + 1) * v88 + v66), a6, v85 + 4 * (v48 * v88 + v66), &c__1_9, &c_b8_0, &v84[(_QWORD)aa], &c__1_9);
              v64 = *v82;
              v65 = v69 * (int)v48 + *a3 - *v82;
            }
            else
            {
              v60 = v48 + (v53 + (int)v48 - v54) * (int)v88;
              v56 = *(_DWORD *)(v85 + 4 * v60);
              *(_DWORD *)(v85 + 4 * v60) = 1065353216;
              if (v48 < 2)
              {
                LODWORD(v58) = 1;
              }
              else
              {
                v61 = v47;
                v58 = 1;
                while (*v61 == 0.0)
                {
                  ++v58;
                  v61 += v88;
                  if (v48 == v58)
                  {
                    LODWORD(v58) = v48;
                    break;
                  }
                }
              }
              if ((int)v58 <= v87)
                v62 = v87;
              else
                v62 = v58;
              n[0] = v48 + v53 - v54 - v62 + 1;
              n[1] = v54 - v48;
              *(float *)&v90 = -*(float *)(v12 + 4 * v48);
              v51 = v84;
              v63 = v85;
              aa = (float *)(v48 + 1 + v48 * v89);
              v78 = v48 + 1;
              Accelerate_AR_sgemv("No transpose", &n[1], n, &v90, v85 + 4 * (v48 + 1 + v62 * (int)v88), a6, v85 + 4 * (v48 + v62 * (int)v88), a6, &c_b8_0, &v84[(_QWORD)aa], &c__1_9);
              v64 = *v82;
              v65 = v48 + (*a3 + (int)v48 - *v82) * (int)v88;
            }
            *(_DWORD *)(v63 + 4 * v65) = v56;
            n[1] = v64 - v48;
            strmv_("Lower", "No transpose", "Non-unit", &n[1], &v51[((int)v89 + 1) * v78], a9, &v51[(_QWORD)aa], &c__1_9);
            if (v87 >= (int)v58)
              v67 = v58;
            else
              v67 = v87;
            if (v48 <= 1)
              v67 = v58;
            v87 = v67;
            v59 = v89 + 1;
            v49 = *(float *)(v12 + 4 * v48);
            a4 = v82;
            v42 = v71;
            LODWORD(v13) = ~(_DWORD)v89;
            v45 = -4 * v88;
          }
          v51[v59 * (int)v48] = v49;
        }
        --v48;
        ++v41;
        v46 += v45;
        --v47;
      }
      while (v41 != v42);
    }
  }
  return 0;
}

void dsyrk_Pack_Upper(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int128 a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,int a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,__int128 a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(double);
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128);
  unint64_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *(*v91)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v92)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v93;
  uint64_t v94;
  float64x2_t *v95;
  float64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  float64x2_t *v112;
  __int128 v113;
  __int128 v114;
  float64x2_t *v115;
  __int128 v116;
  double *v117;
  double v118;
  char *v119;
  float64x2_t *v120;
  __int128 v121;
  __int128 v122;
  float64x2_t *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const double *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(double);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  double *(*v168)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  double *(*v181)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  float64x2_t *v182;
  uint64_t v183;

  v61 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v176 = v63;
  v152 = v64;
  v65 = v60;
  v145 = v66;
  v68 = v67;
  v69 = *(double *)&v61;
  v70 = v59;
  STACK[0x10318] = *MEMORY[0x24BDAC8D0];
  if (v58 == 111)
    v71 = 1;
  else
    v71 = v60;
  if (v58 == 111)
    v72 = v60;
  else
    v72 = 1;
  v144 = v72;
  v73 = (void (*)(double))dgePack_B_NoTran;
  if (v58 == 111)
    v73 = (void (*)(double))dgePack_B_Tran;
  v143 = v73;
  v74 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128))dgePack_A_Tran;
  if (v58 == 111)
    v74 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128))dgePack_A_NoTran;
  v154 = v74;
  v177 = v62;
  if (v59 >= 225)
  {
    v76 = (char *)malloc_type_malloc((v59 << 8) + 8288, 0x100004000313F17uLL);
    *(_QWORD *)&v62 = v177;
    v182 = (float64x2_t *)v76;
    v75 = (unint64_t *)(v76 + 8256);
  }
  else
  {
    v182 = (float64x2_t *)&STACK[0x2A0];
    v75 = &STACK[0x22E0];
  }
  v153 = (uint64_t)v75;
  if (v68 >= 1)
  {
    v148 = 0;
    v77 = 0;
    v180 = v70 - 3;
    if (v70 <= 0)
      v78 = -(-v70 & 3);
    else
      v78 = v70 & 3;
    v159 = v78;
    v167 = (__int128)vdupq_lane_s64(v62, 0);
    v166 = 24 * v176 + 40;
    v174 = 24 * v176 + 24;
    v175 = 24 * v176 + 56;
    v165 = 16 * v176 + 48;
    v172 = 16 * v176 + 32;
    v173 = 24 * v176 + 8;
    v170 = 8 * v176 + 32;
    v171 = 16 * v176 + 16;
    v169 = 8 * v176;
    v164 = 8 * v176 + 16;
    v79 = 32;
    vars0 = v70;
    vars8 = v65;
    v142 = v68;
    v149 = v71;
    while (1)
    {
      v147 = v79;
      v80 = v68 >= v79 ? v79 : v68;
      v146 = v77 + 32;
      v81 = v77 + 32 <= v68 ? 32 : v68 - v77;
      v183 = v81;
      v156 = v145 + 8 * v77 * v144;
      v143(v69);
      v82 = (__n128)v177;
      if (v70 >= 1)
        break;
LABEL_119:
      v79 = v147 + 32;
      v148 -= 32;
      v77 = v146;
      v68 = v142;
      if (v146 >= v142)
        goto LABEL_120;
    }
    v83 = 0;
    v84 = 0;
    v155 = (v80 + v148) << 8;
    v178 = 32 * (v80 + v148);
    v85 = *(double *)&v177 != 0.0;
    if (*(double *)&v177 == 1.0 || v77 != 0)
      v85 = 0;
    v179 = v85;
    v161 = v152;
    v87 = 32;
    v162 = v153;
    v163 = v152;
    v168 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
    v181 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
    while (1)
    {
      if (v70 >= v87)
        v88 = v87;
      else
        v88 = v70;
      v160 = v83;
      v89 = v88 + v83;
      v157 = v84 + 32;
      v158 = v87;
      if (v84 + 32 <= v70)
        v90 = 32;
      else
        v90 = v70 - v84;
      v91 = v181;
      if ((v90 & 7) != 0)
        v91 = dgebpUnalignedC_8M4N;
      v181 = v91;
      v92 = v168;
      if ((v90 & 7) != 0)
        v92 = dgebpScaleUnalignedC_8M4N;
      v168 = v92;
      v154(v90, v183, v156 + 8 * v84 * v71, v65, v182, v82);
      v93 = v84;
      if (v84 < v180)
        break;
LABEL_87:
      v82 = (__n128)v177;
      if (v159)
      {
        if (v93 - v84 >= v90)
          v125 = v90;
        else
          v125 = v93 - v84;
        v126 = v90 - v125;
        if (v90 - v125 >= 3)
          v127 = 3;
        else
          v127 = v90 - v125;
        if (v126 >= 1)
        {
          a56 = 0u;
          a57 = 0u;
          a54 = 0u;
          a55 = 0u;
          a52 = 0u;
          a53 = 0u;
          a50 = 0u;
          a51 = 0u;
          a48 = 0u;
          a49 = 0u;
          a46 = 0u;
          a47 = 0u;
        }
        v128 = v152 + 8 * v84 + 8 * v93 * v176;
        v129 = (const double *)(v153 + 8 * v93 * v183);
        if (v179)
        {
          if (v125)
            dgebpScale_8M1N(v182, (const double *)(v153 + 8 * v93 * v183), v128, v176, v125, v159, v183, *(double *)&v177);
          if (v126 >= 1)
          {
            dgebp_8M1N((float64x2_t *)((char *)v182+ 8 * v125 * v183+ 8 * (v125 & ((int)((_DWORD)v183 << 31) >> 31) & 7)), v129, (uint64_t)&a46, 8, v127, v159, v183);
            if (v159 >= 1)
            {
              v130 = 0;
              v131 = v93 + v160;
              if (v93 + v160 >= v89)
                v131 = v89;
              v132 = v161 + v169 * v93 + 8 * v131;
              v133 = &a46;
              v134 = 1;
              do
              {
                v135 = 0;
                do
                {
                  v82.n128_f64[0] = *((double *)v133 + v135) + *(double *)(v132 + 8 * v135) * *(double *)&v177;
                  *(_QWORD *)(v132 + 8 * v135++) = v82.n128_u64[0];
                }
                while (v134 != v135);
                ++v130;
                ++v134;
                v133 += 4;
                v132 += v169;
              }
              while (v130 != v159);
            }
          }
        }
        else
        {
          if (v125)
            dgebp_8M1N(v182, (const double *)(v153 + 8 * v93 * v183), v128, v176, v125, v159, v183);
          if (v126 >= 1)
          {
            dgebp_8M1N((float64x2_t *)((char *)v182+ 8 * v125 * v183+ 8 * (v125 & ((int)((_DWORD)v183 << 31) >> 31) & 7)), v129, (uint64_t)&a46, 8, v127, v159, v183);
            if (v159 >= 1)
            {
              v136 = 0;
              v137 = v93 + v160;
              if (v93 + v160 >= v89)
                v137 = v89;
              v138 = v161 + v169 * v93 + 8 * v137;
              v139 = &a46;
              v140 = 1;
              do
              {
                v141 = 0;
                do
                {
                  v82.n128_f64[0] = *(double *)(v138 + 8 * v141) + *((double *)v139 + v141);
                  *(_QWORD *)(v138 + 8 * v141++) = v82.n128_u64[0];
                }
                while (v140 != v141);
                ++v136;
                ++v140;
                v139 += 4;
                v138 += v169;
              }
              while (v136 != v159);
            }
          }
        }
      }
      v162 += v155;
      v163 += (v176 << 8) + 256;
      v87 = v158 + 32;
      v83 = v160 - 32;
      v161 += 256;
      v84 += 32;
      if (v157 >= v70)
        goto LABEL_119;
    }
    v94 = 0;
    v96 = (float64x2_t *)v162;
    v95 = (float64x2_t *)v163;
    while (1)
    {
      if (v94 <= 0)
        v97 = -(-v94 & 7);
      else
        v97 = v94 & 7;
      v98 = v94 - v97;
      if (v94 - v97 >= v90)
        v99 = v90;
      else
        v99 = v94 - v97;
      v100 = v90 - v99;
      if (v90 - v99 >= 1)
      {
        *(_OWORD *)&STACK[0x280] = 0u;
        *(_OWORD *)&STACK[0x290] = 0u;
        a58 = 0u;
        *(_OWORD *)&STACK[0x270] = 0u;
        a56 = 0u;
        a57 = 0u;
        a54 = 0u;
        a55 = 0u;
        a52 = 0u;
        a53 = 0u;
        a50 = 0u;
        a51 = 0u;
        a48 = 0u;
        a49 = 0u;
        a46 = 0u;
        a47 = 0u;
      }
      if (v179)
      {
        if (v99)
          ((void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, __n128))v168)(v182, v96, v95, v176, v99, v183, (__n128)v177);
        if (v100 < 1)
          goto LABEL_85;
        if (v100 >= 8)
          v101 = 8;
        else
          v101 = v90 - v99;
        ((void (*)(float64_t *, float64x2_t *, __int128 *, uint64_t, uint64_t))v181)(&v182->f64[v99 * v183], v96, &a46, 8, v101);
        if (v89 >= v98)
          v102 = v98;
        else
          v102 = v89;
        v95->f64[v102] = *(double *)&a46 + v95->f64[v102] * *(double *)&v177;
        if (v89 >= v98)
          v103 = v98;
        else
          v103 = v89;
        if ((((_BYTE)v84 + (_BYTE)v94) & 4) != 0)
        {
          v111 = (char *)&v95->f64[v103];
          *(float64x2_t *)(v111 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a46 + 8), (float64x2_t)v167, *(float64x2_t *)(v111 + 8));
          *(float64x2_t *)(v111 + 24) = vmlaq_f64(*(float64x2_t *)((char *)&a47 + 8), (float64x2_t)v167, *(float64x2_t *)(v111 + 24));
          v112 = (float64x2_t *)&v111[v170];
          v113 = a51;
          v112[-2] = vmlaq_f64((float64x2_t)a50, (float64x2_t)v167, *(float64x2_t *)&v111[8 * v176]);
          *(float64x2_t *)((char *)v95 + 8 * v103 + v164) = vmlaq_f64((float64x2_t)v113, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v164));
          v114 = a54;
          *v112 = vmlaq_f64((float64x2_t)a52, (float64x2_t)v167, *(float64x2_t *)&v111[v170]);
          v115 = (float64x2_t *)&v111[v172];
          v115[-2] = vmlaq_f64((float64x2_t)v114, (float64x2_t)v167, *(float64x2_t *)&v111[16 * v176]);
          v116 = a56;
          *(float64x2_t *)((char *)v95 + 8 * v103 + v171) = vmlaq_f64((float64x2_t)a55, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v171));
          *v115 = vmlaq_f64((float64x2_t)v116, (float64x2_t)v167, *(float64x2_t *)&v111[v172]);
          *(_QWORD *)&v116 = a58;
          *(double *)((char *)&v95->f64[v103] + v165) = *(double *)&a57
                                                      + *(double *)((char *)&v95->f64[v103] + v165) * *(double *)&v177;
          v117 = (double *)&v111[v175];
          *(v117 - 7) = *(double *)&v116 + *(v117 - 7) * *(double *)&v177;
          *(float64x2_t *)((char *)v95 + 8 * v103 + v173) = vmlaq_f64(*(float64x2_t *)((char *)&a58 + 8), (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v173));
          *(float64x2_t *)((char *)v95 + 8 * v103 + v174) = vmlaq_f64(*(float64x2_t *)&STACK[0x278], (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v174));
          *(float64x2_t *)((char *)v95 + 8 * v103 + v166) = vmlaq_f64(*(float64x2_t *)&STACK[0x288], (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v166));
          v118 = *(double *)&STACK[0x298] + *v117 * *(double *)&v177;
LABEL_84:
          *v117 = v118;
          goto LABEL_85;
        }
        v104 = a54;
        *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v103) = vmlaq_f64((float64x2_t)a50, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v103));
        *(float64x2_t *)((char *)&v95[v176] + 8 * v103) = vmlaq_f64((float64x2_t)v104, (float64x2_t)v167, *(float64x2_t *)((char *)&v95[v176] + 8 * v103));
        *(_QWORD *)&v104 = a58;
        *(double *)((char *)&v95->f64[v103] + v171) = *(double *)&a55
                                                    + *(double *)((char *)&v95->f64[v103] + v171) * *(double *)&v177;
        v95->f64[3 * v176 + v103] = *(double *)&v104 + v95->f64[3 * v176 + v103] * *(double *)&v177;
        *(float64x2_t *)((char *)v95 + 8 * v103 + v173) = vmlaq_f64(*(float64x2_t *)((char *)&a58 + 8), (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v173));
        v105 = v174 + 8 * v103;
        v106 = *(double *)&STACK[0x278] + *(double *)((char *)v95->f64 + v105) * *(double *)&v177;
      }
      else
      {
        if (v99)
          v181(v182, v96, v95, v176, v99, v183);
        if (v100 < 1)
          goto LABEL_85;
        if (v100 >= 8)
          v107 = 8;
        else
          v107 = v90 - v99;
        ((void (*)(float64_t *, float64x2_t *, __int128 *, uint64_t, uint64_t))v181)(&v182->f64[v99 * v183], v96, &a46, 8, v107);
        if (v89 >= v98)
          v108 = v98;
        else
          v108 = v89;
        v95->f64[v108] = v95->f64[v108] + *(double *)&a46;
        if (v89 >= v98)
          v109 = v98;
        else
          v109 = v89;
        if ((((_BYTE)v84 + (_BYTE)v94) & 4) != 0)
        {
          v119 = (char *)&v95->f64[v109];
          *(float64x2_t *)(v119 + 8) = vaddq_f64(*(float64x2_t *)(v119 + 8), *(float64x2_t *)((char *)&a46 + 8));
          *(float64x2_t *)(v119 + 24) = vaddq_f64(*(float64x2_t *)(v119 + 24), *(float64x2_t *)((char *)&a47 + 8));
          v120 = (float64x2_t *)&v119[v170];
          v121 = a51;
          v120[-2] = vaddq_f64(*(float64x2_t *)&v119[8 * v176], (float64x2_t)a50);
          *(float64x2_t *)((char *)v95 + 8 * v109 + v164) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v164), (float64x2_t)v121);
          v122 = a54;
          *v120 = vaddq_f64(*(float64x2_t *)&v119[v170], (float64x2_t)a52);
          v123 = (float64x2_t *)&v119[v172];
          v123[-2] = vaddq_f64(*(float64x2_t *)&v119[16 * v176], (float64x2_t)v122);
          v124 = a56;
          *(float64x2_t *)((char *)v95 + 8 * v109 + v171) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v171), (float64x2_t)a55);
          *v123 = vaddq_f64(*(float64x2_t *)&v119[v172], (float64x2_t)v124);
          *(_QWORD *)&v124 = a58;
          *(double *)((char *)&v95->f64[v109] + v165) = *(double *)((char *)&v95->f64[v109] + v165) + *(double *)&a57;
          v117 = (double *)&v119[v175];
          *(v117 - 7) = *(v117 - 7) + *(double *)&v124;
          *(float64x2_t *)((char *)v95 + 8 * v109 + v173) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v173), *(float64x2_t *)((char *)&a58 + 8));
          *(float64x2_t *)((char *)v95 + 8 * v109 + v174) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v174), *(float64x2_t *)&STACK[0x278]);
          *(float64x2_t *)((char *)v95 + 8 * v109 + v166) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v166), *(float64x2_t *)&STACK[0x288]);
          v118 = *v117 + *(double *)&STACK[0x298];
          goto LABEL_84;
        }
        v110 = a54;
        *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v109) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v109), (float64x2_t)a50);
        *(float64x2_t *)((char *)&v95[v176] + 8 * v109) = vaddq_f64(*(float64x2_t *)((char *)&v95[v176] + 8 * v109), (float64x2_t)v110);
        *(_QWORD *)&v110 = a58;
        *(double *)((char *)&v95->f64[v109] + v171) = *(double *)((char *)&v95->f64[v109] + v171) + *(double *)&a55;
        v95->f64[3 * v176 + v109] = v95->f64[3 * v176 + v109] + *(double *)&v110;
        *(float64x2_t *)((char *)v95 + 8 * v109 + v173) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v173), *(float64x2_t *)((char *)&a58 + 8));
        v105 = v174 + 8 * v109;
        v106 = *(double *)((char *)v95->f64 + v105) + *(double *)&STACK[0x278];
      }
      *(double *)((char *)v95->f64 + v105) = v106;
LABEL_85:
      v94 += 4;
      v93 = v84 + v94;
      v96 = (float64x2_t *)((char *)v96 + v178);
      v95 += 2 * v176;
      if (v84 + v94 >= v180)
      {
        v70 = vars0;
        v65 = vars8;
        v71 = v149;
        goto LABEL_87;
      }
    }
  }
LABEL_120:
  if (v70 >= 225)
    free(v182);
}

uint64_t Accelerate_AR_sgels(uint64_t a1, __CLPK_integer *a2, __CLPK_integer *a3, __CLPK_integer *a4, __CLPK_real *a5, __CLPK_integer *a6, __CLPK_real *a7, __CLPK_integer *a8, __CLPK_real *a9, int *a10, int *a11)
{
  __CLPK_integer v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  __CLPK_integer v20;
  int v21;
  int v23;
  int v25;
  int v26;
  char *v27;
  char *v28;
  __CLPK_integer *v29;
  __CLPK_integer *v30;
  __CLPK_integer *v31;
  __CLPK_integer v32;
  __CLPK_integer v33;
  __CLPK_integer v34;
  int v35;
  __CLPK_integer v36;
  __CLPK_integer v37;
  __CLPK_integer v38;
  double v39;
  __CLPK_real v40;
  __CLPK_real *p_small;
  float v42;
  _BOOL4 v43;
  float v44;
  _BOOL4 v45;
  __CLPK_real *v46;
  __CLPK_integer v47;
  float *v48;
  __CLPK_integer v49;
  __CLPK_integer v50;
  __CLPK_real *v51;
  uint64_t v52;
  __CLPK_real *v53;
  __CLPK_integer v54;
  __CLPK_integer v55;
  int v56;
  __CLPK_integer v57;
  uint64_t v58;
  __CLPK_real *v59;
  __CLPK_integer v60;
  __CLPK_integer v61;
  int v62;
  __CLPK_real *v63;
  _BOOL4 v64;
  size_t v65;
  size_t v66;
  uint64_t v67;
  __CLPK_real *v68;
  __CLPK_real *v69;
  __CLPK_integer v70;
  __CLPK_integer v71;
  int v72;
  _BOOL4 v73;
  _BOOL4 v74;
  __CLPK_integer v75;
  int v76;
  _BOOL4 v77;
  __CLPK_integer v78;
  __CLPK_integer v79;
  __CLPK_integer v82;
  __CLPK_real __small;
  __CLPK_real __large[2];
  __CLPK_real __work;
  __CLPK_integer __m[2];
  __CLPK_real __cfrom[4];

  *(_QWORD *)__m = 0;
  *(_QWORD *)__cfrom = 0;
  *(_QWORD *)__large = 0;
  v82 = *a8;
  __small = 0.0;
  *a11 = 0;
  if (*a2 >= *a3)
    v16 = *a3;
  else
    v16 = *a2;
  v17 = *a10;
  if (!lsame_() && !lsame_())
  {
    v21 = -1;
    goto LABEL_21;
  }
  v18 = *a2;
  if (*a2 < 0)
  {
    v21 = -2;
    goto LABEL_21;
  }
  v19 = *a3;
  if (*a3 < 0)
  {
    v21 = -3;
    goto LABEL_21;
  }
  v20 = *a4;
  if (*a4 < 0)
  {
    v21 = -4;
    goto LABEL_21;
  }
  if (v18 <= 1)
    v18 = 1;
  if (*a6 < (int)v18)
  {
    v21 = -6;
LABEL_21:
    *a11 = v21;
LABEL_22:
    LODWORD(__cfrom[1]) = -v21;
    xerbla_();
    return 0;
  }
  if (v18 > v19)
    v19 = v18;
  if (*a8 < (int)v19)
  {
    v21 = -8;
    goto LABEL_21;
  }
  if (v16 > v20)
    v20 = v16;
  v23 = v20 + v16;
  if (v23 <= 1)
    v23 = 1;
  if (*a10 >= v23 || v17 == -1)
  {
    v21 = *a11;
    if (*a11 && v21 != -10)
    {
      v77 = 0;
      v25 = 0;
      goto LABEL_53;
    }
  }
  else
  {
    *a11 = -10;
  }
  v26 = lsame_();
  v77 = v26 == 0;
  if (*a2 >= *a3)
  {
    v75 = ilaenv_(&c__1_10, "SGEQRF", " ", a2, a3, &c_n1_2, &c_n1_2);
    v27 = "SORMQR";
    if (v26)
      v28 = "LT";
    else
      v28 = "LN";
    v29 = a2;
    v30 = a4;
    v31 = a3;
  }
  else
  {
    v75 = ilaenv_(&c__1_10, "SGELQF", " ", a2, a3, &c_n1_2, &c_n1_2);
    v27 = "SORMLQ";
    if (v26)
      v28 = "LN";
    else
      v28 = "LT";
    v29 = a3;
    v30 = a4;
    v31 = a2;
  }
  v32 = ilaenv_(&c__1_10, v27, v28, v29, v30, v31, &c_n1_2);
  v33 = v75;
  if (v75 <= v32)
    v33 = v32;
  v34 = *a4;
  if (v16 > *a4)
    v34 = v16;
  v35 = v16 + v34 * v33;
  if (v35 <= 1)
    v25 = 1;
  else
    v25 = v35;
  *a9 = (float)v25;
  v21 = *a11;
LABEL_53:
  if (v21)
    goto LABEL_22;
  v76 = v25;
  if (v17 == -1)
    return 0;
  v36 = *a2;
  v37 = *a3;
  if (*a2 >= *a3)
    v38 = *a3;
  else
    v38 = *a2;
  LODWORD(__cfrom[1]) = v38;
  if (v38 >= *a4)
    v38 = *a4;
  if (v38)
  {
    v39 = slamch_("S");
    v40 = v39 / slamch_("P");
    __small = v40;
    __large[0] = 1.0 / v40;
    p_small = &__small;
    slabad_(&__small, __large);
    v42 = slange_("M", a2, a3, a5, a6, &__work);
    __cfrom[0] = v42;
    v43 = v42 > 0.0;
    if (__small <= v42)
      v43 = 0;
    if (!v43)
    {
      if (__large[0] >= v42)
      {
        if (v42 == 0.0)
        {
          v47 = *a2;
          if (*a2 <= *a3)
            v47 = *a3;
          LODWORD(__cfrom[1]) = v47;
          slaset_("F", (__CLPK_integer *)&__cfrom[1], a4, &c_b33_0, &c_b33_0, a7, a8);
          v48 = a9;
          goto LABEL_115;
        }
        v72 = 0;
        v73 = v43;
LABEL_67:
        __m[0] = *a2;
        if (v77)
          __m[0] = *a3;
        v44 = slange_("M", __m, a4, a7, a8, &__work);
        *(float *)&__m[1] = v44;
        v45 = v44 <= 0.0;
        if (__small <= v44)
          v45 = 1;
        v74 = v45;
        if (v45)
        {
          if (__large[0] >= v44)
          {
            v64 = 0;
LABEL_84:
            v67 = ~v82;
            v49 = *a2;
            v50 = *a3;
            LODWORD(__cfrom[1]) = *a10 - v16;
            v51 = &a9[v16];
            if (v49 >= v50)
            {
              Accelerate_AR_sgeqrf((unsigned int *)a2, a3, (uint64_t)a5, a6, a9, v51, (int *)&__cfrom[1], a11);
              if (v77)
              {
                Accelerate_AR_strtrs("Upper", "Transpose", "Non-unit", (unsigned int *)a3, (unsigned int *)a4, a5, a6, (char *)a7, a8, a11);
                if (*a11 > 0)
                  return 0;
                v52 = *a4;
                v53 = &a9[v16];
                if ((int)v52 >= 1)
                {
                  v54 = *a2;
                  v55 = *a3;
                  v68 = &a7[v67];
                  v65 = 4 * (*a2 + ~*a3) + 4;
                  v56 = v82 + *a3 + 1;
                  v78 = *a2;
                  v70 = *a3;
                  do
                  {
                    if (v55 < v54)
                    {
                      bzero(&v68[v56], v65);
                      v55 = v70;
                      v54 = v78;
                      v53 = &a9[v16];
                    }
                    v56 += v82;
                    --v52;
                  }
                  while (v52);
                }
                LODWORD(__cfrom[1]) = *a10 - v16;
                v48 = a9;
                Accelerate_AR_sormqr((uint64_t)"Left", (uint64_t)"No transpose", (int)a2, (int)a4, (int)a3, (int)a5, (int)a6, (int)a9, a7, a8, v53, (int *)&__cfrom[1], a11);
LABEL_96:
                v57 = *a2;
LABEL_106:
                LODWORD(__large[1]) = v57;
                if ((v73 | v72) == 1)
                {
                  if (v73)
                    v63 = &__small;
                  else
                    v63 = __large;
                  slascl_("G", &c__0_0, &c__0_0, __cfrom, v63, (__CLPK_integer *)&__large[1], a4, a7, a8, a11);
                }
                if (v74)
                {
                  if (v64)
                    slascl_("G", &c__0_0, &c__0_0, __large, (__CLPK_real *)&__m[1], (__CLPK_integer *)&__large[1], a4, a7, a8, a11);
                }
                else
                {
                  slascl_("G", &c__0_0, &c__0_0, &__small, (__CLPK_real *)&__m[1], (__CLPK_integer *)&__large[1], a4, a7, a8, a11);
                }
LABEL_115:
                *v48 = (float)v76;
                return 0;
              }
              LODWORD(__cfrom[1]) = *a10 - v16;
              v48 = a9;
              Accelerate_AR_sormqr((uint64_t)"Left", (uint64_t)"Transpose", (int)a2, (int)a4, (int)a3, (int)a5, (int)a6, (int)a9, a7, a8, v51, (int *)&__cfrom[1], a11);
              Accelerate_AR_strtrs("Upper", "No transpose", "Non-unit", (unsigned int *)a3, (unsigned int *)a4, a5, a6, (char *)a7, a8, a11);
              if (*a11 > 0)
                return 0;
            }
            else
            {
              sgelqf_(a2, a3, a5, a6, a9, v51, (__CLPK_integer *)&__cfrom[1], a11);
              if (v77)
              {
                LODWORD(__cfrom[1]) = *a10 - v16;
                v48 = a9;
                sormlq_("Left", "No transpose", a3, a4, a2, a5, a6, a9, a7, a8, v51, (__CLPK_integer *)&__cfrom[1], a11);
                Accelerate_AR_strtrs("Lower", "Transpose", "Non-unit", (unsigned int *)a2, (unsigned int *)a4, a5, a6, (char *)a7, a8, a11);
                if (*a11 > 0)
                  return 0;
                goto LABEL_96;
              }
              Accelerate_AR_strtrs("Lower", "No transpose", "Non-unit", (unsigned int *)a2, (unsigned int *)a4, a5, a6, (char *)a7, a8, a11);
              if (*a11 > 0)
                return 0;
              v58 = *a4;
              v59 = &a9[v16];
              if ((int)v58 >= 1)
              {
                v60 = *a3;
                v61 = *a2;
                v69 = &a7[v67];
                v66 = 4 * (*a3 + ~*a2) + 4;
                v62 = v82 + *a2 + 1;
                v79 = *a3;
                v71 = *a2;
                do
                {
                  if (v61 < v60)
                  {
                    bzero(&v69[v62], v66);
                    v61 = v71;
                    v60 = v79;
                    v59 = &a9[v16];
                  }
                  v62 += v82;
                  --v58;
                }
                while (v58);
              }
              LODWORD(__cfrom[1]) = *a10 - v16;
              v48 = a9;
              sormlq_("Left", "Transpose", a3, a4, a2, a5, a6, a9, a7, a8, v59, (__CLPK_integer *)&__cfrom[1], a11);
            }
            v57 = *a3;
            goto LABEL_106;
          }
          v46 = __large;
        }
        else
        {
          v46 = &__small;
        }
        slascl_("G", &c__0_0, &c__0_0, (__CLPK_real *)&__m[1], v46, __m, a4, a7, a8, a11);
        v64 = v74;
        goto LABEL_84;
      }
      p_small = __large;
    }
    v73 = v43;
    v72 = !v43;
    slascl_("G", &c__0_0, &c__0_0, __cfrom, p_small, a2, a3, a5, a6, a11);
    goto LABEL_67;
  }
  if (v36 <= v37)
    v36 = v37;
  LODWORD(__cfrom[1]) = v36;
  slaset_("Full", (__CLPK_integer *)&__cfrom[1], a4, &c_b33_0, &c_b33_0, a7, a8);
  return 0;
}

uint64_t strsm_block_LLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v10 = strsm_noPack_LLTN;
  if ((_DWORD)result == 132)
    v10 = strsm_noPack_LLTU;
  v32 = v10;
  if ((int)a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v25 = a3 << 32;
    v31 = a7 << 8;
    v15 = 1;
    v16 = a2;
    do
    {
      LODWORD(v17) = v16 - 64;
      if (v16 >= 0x40)
        v17 = v17;
      else
        v17 = 0;
      v29 = v17;
      if (a3 >= 1)
      {
        v18 = 0;
        v19 = (char *)(a6 + 4 * v17);
        v20 = a4 + 4 * v17 * a5;
        if (v16 >= 0x40)
          v21 = 64;
        else
          v21 = v16;
        v22 = v20 + 4 * v29;
        v30 = (float32x4_t *)(v20 + 4 * (v29 + v21));
        v23 = v25;
        do
        {
          v18 += 64;
          if (v18 <= a3)
            v24 = 64;
          else
            v24 = v23 >> 32;
          a8.n128_u32[0] = v13;
          if ((v15 & 1) == 0)
          {
            APL_seq_sgemm(112, 111, v21, v24, a2 - (v21 + v29), v30, a5, (float32x2_t *)&v19[4 * v21], -1.0, *(float *)&v13, a10, a7, v19, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v32)(v21, v24, v22, a5, v19, a7, a8);
          v23 -= 0x4000000000;
          v19 += v31;
        }
        while (v18 < a3);
      }
      v15 = 0;
      v16 = v29;
    }
    while ((int)v29 >= 1);
  }
  return result;
}

uint64_t strsm_block_LLN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))strsm_noPack_LLNN;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))strsm_noPack_LLNU;
  v28 = v10;
  if (a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a3 << 32;
    v27 = a7 << 8;
    do
    {
      v26 = v16 + 32;
      if (a3 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v26 <= a2)
          v19 = 32;
        else
          v19 = (int)a2 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a3)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            APL_seq_sgemm(111, 111, v19, v21, v16, (float32x4_t *)(a4 + 4 * v16), a5, v18, -1.0, *(float *)&v13, a10, a7, (char *)&v18[v15], a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v19, v21, a4 + 4 * v16 + 4 * v16 * a5, a5, &v18[v15], a7, a8);
          v20 -= 0x4000000000;
          v18 = (float32x2_t *)((char *)v18 + v27);
        }
        while (v17 < a3);
      }
      v15 += 16;
      v16 += 32;
    }
    while (v26 < a2);
  }
  return result;
}

uint64_t strsm_block_LUT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))strsm_noPack_LUTN;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))strsm_noPack_LUTU;
  v28 = v10;
  if (a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a3 << 32;
    v27 = a7 << 8;
    do
    {
      v26 = v16 + 64;
      if (a3 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v26 <= a2)
          v19 = 64;
        else
          v19 = (int)a2 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a3)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            APL_seq_sgemm(112, 111, v19, v21, v16, (float32x4_t *)(a4 + 4 * v16 * a5), a5, v18, -1.0, *(float *)&v13, a10, a7, (char *)&v18[v15], a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v19, v21, a4 + 4 * v16 * a5 + 4 * v16, a5, &v18[v15], a7, a8);
          v20 -= 0x4000000000;
          v18 = (float32x2_t *)((char *)v18 + v27);
        }
        while (v17 < a3);
      }
      v15 += 32;
      v16 += 64;
    }
    while (v26 < a2);
  }
  return result;
}

uint64_t strsm_block_LUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v10 = strsm_noPack_LUNN;
  if ((_DWORD)result == 132)
    v10 = strsm_noPack_LUNU;
  v32 = v10;
  if ((int)a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v25 = a3 << 32;
    v31 = a7 << 8;
    v15 = 1;
    v16 = a2;
    do
    {
      LODWORD(v17) = v16 - 64;
      if (v16 >= 0x40)
        v17 = v17;
      else
        v17 = 0;
      v29 = v17;
      if (a3 >= 1)
      {
        v18 = 0;
        v19 = (char *)(a6 + 4 * v17);
        v20 = v25;
        v21 = a4 + 4 * v17;
        if (v16 >= 0x40)
          v22 = 64;
        else
          v22 = v16;
        v23 = v21 + 4 * v29 * a5;
        v30 = (float32x4_t *)(v21 + 4 * (v29 + v22) * a5);
        do
        {
          v18 += 64;
          if (v18 <= a3)
            v24 = 64;
          else
            v24 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if ((v15 & 1) == 0)
          {
            APL_seq_sgemm(111, 111, v22, v24, a2 - (v22 + v29), v30, a5, (float32x2_t *)&v19[4 * v22], -1.0, *(float *)&v13, a10, a7, v19, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v32)(v22, v24, v23, a5, v19, a7, a8);
          v20 -= 0x4000000000;
          v19 += v31;
        }
        while (v18 < a3);
      }
      v15 = 0;
      v16 = v29;
    }
    while ((int)v29 >= 1);
  }
  return result;
}

uint64_t strsm_block_RLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))strsm_noPack_RLTN;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))strsm_noPack_RLTU;
  v28 = v10;
  if (a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a2 << 32;
    v25 = a7 << 8;
    do
    {
      v27 = v16 + 64;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v27 <= a3)
          v19 = 64;
        else
          v19 = (int)a3 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            APL_seq_sgemm(111, 112, v21, v19, v16, v18, a7, (float32x2_t *)(a4 + 4 * v16), -1.0, *(float *)&v13, a10, a5, (char *)v18 + v15, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v21, v19, a4 + 4 * v16 + 4 * v16 * a5, a5, (char *)v18 + v15, a7, a8);
          v20 -= 0x4000000000;
          v18 += 16;
        }
        while (v17 < a2);
      }
      v15 += v25;
      v16 += 64;
    }
    while (v27 < a3);
  }
  return result;
}

uint64_t strsm_block_RLN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  char v31;

  v10 = strsm_noPack_RLNN;
  if ((_DWORD)result == 132)
    v10 = strsm_noPack_RLNU;
  v30 = v10;
  if ((int)a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v24 = a2 << 32;
    v31 = 1;
    v15 = a3;
    do
    {
      LODWORD(v16) = v15 - 64;
      if (v15 >= 0x40)
        v16 = v16;
      else
        v16 = 0;
      v28 = v16;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = (char *)(a6 + 4 * v16 * a7);
        if (v15 >= 0x40)
          v19 = 64;
        else
          v19 = v15;
        v29 = a3 - (v16 + v19);
        v20 = a4 + 4 * v16 * a5 + 4 * v16;
        v21 = (float32x4_t *)(a6 + a7 * (4 * v16 + 4 * v19));
        v22 = v24;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v23 = 64;
          else
            v23 = v22 >> 32;
          a8.n128_u32[0] = v13;
          if ((v31 & 1) == 0)
          {
            APL_seq_sgemm(111, 111, v23, v19, v29, v21, a7, (float32x2_t *)(v20 + 4 * v19), -1.0, *(float *)&v13, a10, a5, v18, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v30)(v23, v19, v20, a5, v18, a7, a8);
          v22 -= 0x4000000000;
          v18 += 256;
          v21 += 16;
        }
        while (v17 < a2);
      }
      v31 = 0;
      v15 = v28;
    }
    while (v28 >= 1);
  }
  return result;
}

uint64_t strsm_block_RUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))strsm_noPack_RUNN;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))strsm_noPack_RUNU;
  v28 = v10;
  if (a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a2 << 32;
    v25 = a7 << 8;
    do
    {
      v27 = v16 + 64;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v27 <= a3)
          v19 = 64;
        else
          v19 = (int)a3 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            APL_seq_sgemm(111, 111, v21, v19, v16, v18, a7, (float32x2_t *)(a4 + 4 * v16 * a5), -1.0, *(float *)&v13, a10, a5, (char *)v18 + v15, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v21, v19, a4 + 4 * v16 * a5 + 4 * v16, a5, (char *)v18 + v15, a7, a8);
          v20 -= 0x4000000000;
          v18 += 16;
        }
        while (v17 < a2);
      }
      v15 += v25;
      v16 += 64;
    }
    while (v27 < a3);
  }
  return result;
}

uint64_t strsm_block_RUT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v30;
  float32x2_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  char v34;

  v10 = strsm_noPack_RUTN;
  if ((_DWORD)result == 132)
    v10 = strsm_noPack_RUTU;
  v33 = v10;
  if ((int)a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v26 = a2 << 32;
    v34 = 1;
    v15 = a3;
    do
    {
      LODWORD(v16) = v15 - 64;
      if (v15 >= 0x40)
        v16 = v16;
      else
        v16 = 0;
      v30 = v16;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = (char *)(a6 + 4 * v16 * a7);
        v19 = v26;
        v20 = a4 + 4 * v16;
        if (v15 >= 0x40)
          v21 = 64;
        else
          v21 = v15;
        v22 = (v30 + v21);
        v31 = (float32x2_t *)(v20 + 4 * v22 * a5);
        v32 = a3 - v22;
        v23 = v20 + 4 * v30 * a5;
        v24 = (float32x4_t *)(a6 + a7 * (4 * v30 + 4 * v21));
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v25 = 64;
          else
            v25 = v19 >> 32;
          a8.n128_u32[0] = v13;
          if ((v34 & 1) == 0)
          {
            APL_seq_sgemm(111, 112, v25, v21, v32, v24, a7, v31, -1.0, *(float *)&v13, a10, a5, v18, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v33)(v25, v21, v23, a5, v18, a7, a8);
          v19 -= 0x4000000000;
          v18 += 256;
          v24 += 16;
        }
        while (v17 < a2);
      }
      v34 = 0;
      v15 = v30;
    }
    while ((int)v30 >= 1);
  }
  return result;
}

uint64_t Accelerate_AR_dpotri(char *a1, __CLPK_integer *a2, __CLPK_doublereal *a3, int *a4, __CLPK_integer *a5)
{
  unsigned int v10;
  int v11;
  int v12;

  *a5 = 0;
  if (!lsame_() && !lsame_())
  {
    v12 = -1;
    goto LABEL_15;
  }
  v10 = *a2;
  if (*a2 < 0)
  {
    v12 = -2;
    goto LABEL_15;
  }
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = *a2;
  if (*a4 < v11)
  {
    v12 = -4;
LABEL_15:
    *a5 = v12;
    goto LABEL_16;
  }
  if (*a5)
  {
LABEL_16:
    xerbla_();
    return 0;
  }
  if (v10)
  {
    Accelerate_AR_dtrtri(a1, "Non-unit", a2, a3, a4, a5);
    if (*a5 <= 0)
      Accelerate_AR_dlauum(a1, a2, a3, a4, a5);
  }
  return 0;
}

double *dgebpUnalignedC_8M4N_hurricane(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = a3;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      v19 = *a3;
      v20 = a3[1];
      v21 = a3[2];
      v22 = a3[3];
      v18 = (float64x2_t *)((char *)a3 + v11);
      v24 = *v18;
      v25 = v18[1];
      v26 = v18[2];
      v27 = v18[3];
      v23 = (float64x2_t *)((char *)v18 + v11);
      v29 = *v23;
      v30 = v23[1];
      v31 = v23[2];
      v32 = v23[3];
      v28 = (float64x2_t *)((char *)v23 + v11);
      v33 = *v28;
      v34 = v28[1];
      v35 = v28[2];
      v36 = v28[3];
      v38 = *a2;
      v39 = a2[1];
      v37 = a2 + 2;
      do
      {
        v19 = vmlaq_n_f64(v19, v13, v38.f64[0]);
        v24 = vmlaq_laneq_f64(v24, v13, v38, 1);
        v29 = vmlaq_n_f64(v29, v13, v39.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v13, v39, 1);
        v20 = vmlaq_n_f64(v20, v14, v38.f64[0]);
        v25 = vmlaq_laneq_f64(v25, v14, v38, 1);
        v30 = vmlaq_n_f64(v30, v14, v39.f64[0]);
        v34 = vmlaq_laneq_f64(v34, v14, v39, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v40 = (float64x2_t *)(result + 4);
        v21 = vmlaq_n_f64(v21, v15, v38.f64[0]);
        v26 = vmlaq_laneq_f64(v26, v15, v38, 1);
        v31 = vmlaq_n_f64(v31, v15, v39.f64[0]);
        v35 = vmlaq_laneq_f64(v35, v15, v39, 1);
        v22 = vmlaq_n_f64(v22, v16, v38.f64[0]);
        v27 = vmlaq_laneq_f64(v27, v16, v38, 1);
        v32 = vmlaq_n_f64(v32, v16, v39.f64[0]);
        v36 = vmlaq_laneq_f64(v36, v16, v39, 1);
        v15 = *v40;
        v16 = v40[1];
        result = v40[2].f64;
        v38 = *v37;
        v39 = v37[1];
        v37 += 2;
        --v17;
      }
      while (v17);
      v41 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v19;
      v10[1] = v20;
      v10[2] = v21;
      v10[3] = v22;
      v10 += 4;
      *v41 = v24;
      v41[1] = v25;
      v41[2] = v26;
      v41[3] = v27;
      v42 = (float64x2_t *)((char *)v41 + v11);
      *v42 = v29;
      v42[1] = v30;
      v42[2] = v31;
      v42[3] = v32;
      v43 = (float64x2_t *)((char *)v42 + v11);
      *v43 = v33;
      v43[1] = v34;
      v43[2] = v35;
      v43[3] = v36;
      a3 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return dgebp_1M4N(result - 8, a2, a3->f64, a4, v7, a6);
  return result;
}

void cblas_sgemv_sequential(int a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  int v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v38 = a1 - 101;
  if ((a1 - 101) > 1)
  {
    v45 = 1;
LABEL_32:
    cblas_xerbla(v45, "cblas_sgemv", "");
    return;
  }
  if ((a2 - 111) > 3)
  {
    v45 = 2;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v45 = 3;
    goto LABEL_32;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v45 = 4;
    goto LABEL_32;
  }
  if (!a8)
  {
    v45 = 9;
    goto LABEL_32;
  }
  if (!(_DWORD)a18)
  {
    v45 = 12;
    goto LABEL_32;
  }
  if ((a2 - 113) >= 2)
    v40 = (a2 & 0xFFFFFFFE) == 112;
  else
    v40 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  v41 = a3;
  v42 = a4;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v44 = a18 - a18 * a4;
  }
  else
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v44 = a18 - a18 * a3;
  }
  v46 = &a17[v44];
  if ((int)a18 >= 0)
    v46 = a17;
  if (!v38)
  {
    if (a4 <= 1uLL)
      v50 = 1;
    else
      v50 = a4;
    if (v50 <= a6)
    {
      v40 ^= 1u;
      v48 = a8;
      v51 = (int)a18;
      v49 = a4;
      v42 = v41;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v41 <= 1)
    v47 = 1;
  else
    v47 = v41;
  if (v47 > a6)
  {
LABEL_31:
    v45 = 7;
    goto LABEL_32;
  }
  v48 = a8;
  v51 = (int)a18;
  v49 = v41;
LABEL_34:
  sgemv_internal(v40, v49, v42, a5, a6, v43, v48, v46, a9, a10, a11, a12, a13, a14, a15, a16, v51, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38);
}

void cblas_dgemv_sequential(int a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, double *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  char v35;
  _QWORD *v36;
  int v37;
  int v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if ((a1 - 101) > 1)
  {
LABEL_27:
    v38 = 1;
    goto LABEL_28;
  }
  if ((a2 - 111) > 3)
  {
    v38 = 2;
LABEL_28:
    cblas_xerbla(v38, "cblas_dgemv", "");
    return;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v38 = 3;
    goto LABEL_28;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v38 = 4;
    goto LABEL_28;
  }
  if (!a8)
  {
    v38 = 9;
    goto LABEL_28;
  }
  if (!(_DWORD)a18)
  {
    v38 = 12;
    goto LABEL_28;
  }
  if ((a2 - 113) >= 2)
    v35 = (a2 & 0xFFFFFFFE) == 112;
  else
    v35 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  a3 = a3;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v36 = (_QWORD *)(a7 + 8 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v37 = a18 - a18 * a4;
  }
  else
  {
    v36 = (_QWORD *)(a7 + 8 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v37 = a18 - a18 * a3;
  }
  v39 = &a17[v37];
  if ((int)a18 >= 0)
    v39 = a17;
  if (a1 == 102)
  {
    if (a3 <= 1uLL)
      v44 = 1;
    else
      v44 = a3;
    if (v44 <= a6)
    {
      v41 = a6;
      v42 = a8;
      v45 = (int)a18;
      v43 = a3;
      a3 = a4;
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  if (a1 != 101)
    goto LABEL_27;
  if (a4 <= 1uLL)
    v40 = 1;
  else
    v40 = a4;
  if (v40 > a6)
  {
LABEL_33:
    v38 = 7;
    goto LABEL_28;
  }
  v41 = a6;
  v35 ^= 1u;
  v42 = a8;
  v45 = (int)a18;
  v43 = a4;
LABEL_35:
  dgemv_internal(v35, v43, a3, a5, v41, v36, v42, v39, a9, a10, a11, a12, a13, a14, a15, a16, v45, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34);
}

void APL_seq_strsm(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, float a9, char *a10, uint64_t a11, float *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,char a28)
{
  BOOL v29;

  if (a5 && a6)
  {
    if (a9 == 0.0)
    {
      sgeSetZero(a5, a6, a10, a11);
    }
    else if (a5 > 95 || a6 >= 96)
    {
      v29 = a2 == 121 && (_DWORD)a3 == 111;
      if (a1 == 141)
      {
        if (v29 || a2 == 122 && (_DWORD)a3 != 111)
          strsm_Left_Backward(a3, a4, a5, a6, a5, (int)a7, a8, (int)a10, a11, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, a19, a20);
        else
          strsm_Left_Forward(a3, a4, a5, a6, a5, (int)a7, a8, (int)a10, a11, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, (uint64_t)a19, a20,
            a21,
            a22,
            a23,
            a24);
      }
      else if (v29 || a2 == 122 && (_DWORD)a3 != 111)
      {
        strsm_Right_Forward(a3, a4, a5, a6, a6, (int)a10, a11, (int)a7, a8, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, (uint64_t)a19, a20,
          a21,
          a22,
          (uint64_t)a23,
          a24,
          a25,
          a26,
          a27,
          a28);
      }
      else
      {
        strsm_Right_Backward(a3, a4, a5, a6, a6, (int)a10, a11, (int)a7, a8, (uint64_t)a10, a12, a13, a14, a15, a16, a17, a18);
      }
    }
    else if (a13 == -1)
    {
      *a12 = 0.0;
    }
    else if (a1 == 141)
    {
      if (a2 == 121)
      {
        if ((_DWORD)a3 == 111)
        {
          if ((_DWORD)a4 == 132)
            strsm_noPack_LUNU(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
          else
            strsm_noPack_LUNN(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
        }
        else if ((_DWORD)a4 == 132)
        {
          strsm_noPack_LUTU(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        }
        else
        {
          strsm_noPack_LUTN(a5, a6, a7, a8, (float *)a10, a11, a9);
        }
      }
      else if ((_DWORD)a3 == 111)
      {
        if ((_DWORD)a4 == 132)
          strsm_noPack_LLNU(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        else
          strsm_noPack_LLNN(a5, a6, a7, a8, (float *)a10, a11, a9);
      }
      else if ((_DWORD)a4 == 132)
      {
        strsm_noPack_LLTU(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
      else
      {
        strsm_noPack_LLTN(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
    }
    else if (a2 == 121)
    {
      if ((_DWORD)a3 == 111)
      {
        if ((_DWORD)a4 == 132)
          strsm_noPack_RUNU(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        else
          strsm_noPack_RUNN(a5, a6, a7, a8, (float *)a10, a11, a9);
      }
      else if ((_DWORD)a4 == 132)
      {
        strsm_noPack_RUTU(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
      else
      {
        strsm_noPack_RUTN(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
    }
    else if ((_DWORD)a3 == 111)
    {
      if ((_DWORD)a4 == 132)
        strsm_noPack_RLNU(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      else
        strsm_noPack_RLNN(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
    }
    else if ((_DWORD)a4 == 132)
    {
      strsm_noPack_RLTU(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
    }
    else
    {
      strsm_noPack_RLTN(a5, a6, a7, a8, (float *)a10, a11, a9);
    }
  }
}

double *dgebpScaleUnalignedC_8M4N_hurricane(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = a3;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      v23 = a3[3];
      v19 = (float64x2_t *)((char *)a3 + v12);
      v25 = *v19;
      v26 = v19[1];
      v27 = v19[2];
      v28 = v19[3];
      v24 = (float64x2_t *)((char *)v19 + v12);
      v30 = *v24;
      v31 = v24[1];
      v32 = v24[2];
      v33 = v24[3];
      v29 = (float64x2_t *)((char *)v24 + v12);
      v35 = *a2;
      v36 = a2[1];
      v34 = a2 + 2;
      v37 = vmulq_n_f64(v20, a7);
      v38 = vmulq_n_f64(v21, a7);
      v39 = vmulq_n_f64(v22, a7);
      v40 = vmulq_n_f64(v23, a7);
      v41 = vmulq_n_f64(v25, a7);
      v42 = vmulq_n_f64(v26, a7);
      v43 = vmulq_n_f64(v27, a7);
      v44 = vmulq_n_f64(v28, a7);
      v45 = vmulq_n_f64(v30, a7);
      v46 = vmulq_n_f64(v31, a7);
      v47 = vmulq_n_f64(v32, a7);
      v48 = vmulq_n_f64(v33, a7);
      v49 = vmulq_n_f64(*v29, a7);
      v50 = vmulq_n_f64(v29[1], a7);
      v51 = vmulq_n_f64(v29[2], a7);
      v52 = vmulq_n_f64(v29[3], a7);
      do
      {
        v37 = vmlaq_n_f64(v37, v14, v35.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v14, v35, 1);
        v45 = vmlaq_n_f64(v45, v14, v36.f64[0]);
        v49 = vmlaq_laneq_f64(v49, v14, v36, 1);
        v38 = vmlaq_n_f64(v38, v15, v35.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v15, v35, 1);
        v46 = vmlaq_n_f64(v46, v15, v36.f64[0]);
        v50 = vmlaq_laneq_f64(v50, v15, v36, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v39 = vmlaq_n_f64(v39, v16, v35.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v16, v35, 1);
        v47 = vmlaq_n_f64(v47, v16, v36.f64[0]);
        v51 = vmlaq_laneq_f64(v51, v16, v36, 1);
        v40 = vmlaq_n_f64(v40, v17, v35.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v17, v35, 1);
        v48 = vmlaq_n_f64(v48, v17, v36.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v17, v36, 1);
        v16 = *v53;
        v17 = v53[1];
        result = v53[2].f64;
        v35 = *v34;
        v36 = v34[1];
        v34 += 2;
        --v18;
      }
      while (v18);
      v54 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v37;
      v11[1] = v38;
      v11[2] = v39;
      v11[3] = v40;
      v11 += 4;
      *v54 = v41;
      v54[1] = v42;
      v54[2] = v43;
      v54[3] = v44;
      v55 = (float64x2_t *)((char *)v54 + v12);
      *v55 = v45;
      v55[1] = v46;
      v55[2] = v47;
      v55[3] = v48;
      v56 = (float64x2_t *)((char *)v55 + v12);
      *v56 = v49;
      v56[1] = v50;
      v56[2] = v51;
      v56[3] = v52;
      a3 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return dgebpScale_1M4N(result - 8, a2, a3->f64, a4, v8, a6, a7);
  return result;
}

void strsm_noPack_RUNU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v9;
  float v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  float32x4_t v39;
  __int32 *v40;
  float *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  __int32 *v62;
  __int32 *v63;
  __int32 *v64;
  __int32 *v65;
  float *v66;
  float32x4_t v67;
  uint64_t v68;
  float32x4_t v69;
  __int32 *v70;
  __int32 *v71;
  uint64_t *v72;
  uint64_t *v73;
  float32x4_t v74;
  float v75;
  uint64_t v76;
  int32x4_t v77;
  uint64_t v78;
  int32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;

  v9 = a7;
  v87 = a2;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v15 = 2;
      }
      else
      {
        v20 = *(float *)(a3 + 4 * a4);
        v15 = 2;
        v21 = __X;
        v22 = __N;
        do
        {
          v23 = *v21 * v9;
          *v21 = v23;
          v21[a6] = (float)(v21[a6] * v9) - (float)(v23 * v20);
          ++v21;
          --v22;
        }
        while (v22);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v15 = 1;
      cblas_sscal(__N, a7, __X, 1);
      a2 = v87;
      v9 = a7;
    }
    else
    {
      v15 = 0;
    }
  }
  else if (__N < 1)
  {
    v15 = 3;
  }
  else
  {
    v11 = *(float *)(a3 + 4 * a4);
    v12 = (float *)(a3 + 8 * a4);
    v13 = *v12;
    v14 = v12[1];
    v15 = 3;
    v16 = __X;
    v17 = __N;
    do
    {
      v18 = *v16 * v9;
      *v16 = v18;
      v19 = (float)(v16[a6] * v9) - (float)(v18 * v11);
      v16[a6] = v19;
      v16[2 * a6] = -(float)((float)((float)(v14 * v19) + (float)(*v16 * v13)) - (float)(v16[2 * a6] * v9));
      ++v16;
      --v17;
    }
    while (v17);
  }
  if (v15 < a2)
  {
    v24 = 8 * a6;
    v25 = v15;
    while (1)
    {
      if (__N >= 4)
      {
        v26 = 0;
        v27 = (float *)(a3 + 4 * v25 * a4);
        v28 = (float *)(a3 + 4 * (a4 + v25 * a4));
        v29 = (float *)(a3 + 4 * (v25 + 2) * a4);
        v30 = (float *)(a3 + 4 * (v25 + 3) * a4);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v26];
          v32 = 0uLL;
          if ((v15 & 1) != 0)
          {
            v47 = *v31;
            v39 = vmlaq_n_f32((float32x4_t)0, *v31, *v27);
            v35 = vmlaq_n_f32((float32x4_t)0, *v31, *v28);
            v34 = vmlaq_n_f32((float32x4_t)0, *v31, *v29);
            v31 = (float32x4_t *)((char *)v31 + 4 * a6);
            v41 = v27 + 1;
            v36 = v25 - 1;
            v33 = vmlaq_n_f32((float32x4_t)0, v47, *v30);
            v37 = (__int32 *)(v30 + 1);
            v38 = (__int32 *)(v29 + 1);
            v40 = (__int32 *)(v28 + 1);
            if (v25 != 1)
            {
LABEL_22:
              v42 = 0;
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v39 = vmlaq_n_f32(v39, *v31, v41[v42]);
                v35 = vmlaq_n_f32(v35, *v31, *(float *)&v40[v42]);
                v34 = vmlaq_n_f32(v34, *v31, *(float *)&v38[v42]);
                v33 = vmlaq_n_f32(v33, *v31, *(float *)&v37[v42]);
                v46 = *(float32x4_t *)((char *)v31 + 4 * a6);
                v43 = vmlaq_n_f32(v43, v46, v41[v42 + 1]);
                v44 = vmlaq_n_f32(v44, v46, *(float *)&v40[v42 + 1]);
                v45 = vmlaq_n_f32(v45, v46, *(float *)&v38[v42 + 1]);
                v32 = vmlaq_n_f32(v32, v46, *(float *)&v37[v42 + 1]);
                v42 += 2;
                v31 = (float32x4_t *)((char *)v31 + v24);
                v36 -= 2;
              }
              while (v36);
              v40 = (__int32 *)((char *)v40 + v42 * 4);
              v38 = (__int32 *)((char *)v38 + v42 * 4);
              v37 = (__int32 *)((char *)v37 + v42 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v33 = 0uLL;
            v34 = 0uLL;
            v35 = 0uLL;
            v36 = v25;
            v37 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
            v38 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
            v39 = 0uLL;
            v40 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
            v41 = (float *)(a3 + 4 * v25 * a4);
            if (v25)
              goto LABEL_22;
          }
          v45 = 0uLL;
          v44 = 0uLL;
          v43 = 0uLL;
LABEL_27:
          v48 = vaddq_f32(v43, v39);
          v49 = vaddq_f32(v45, v34);
          v50 = vaddq_f32(v32, v33);
          v51 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 4 * a6), v9);
          v52 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 8 * a6), v9);
          v53 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 12 * a6), v9);
          v54 = vsubq_f32(vmulq_n_f32(*v31, v9), v48);
          v55 = vsubq_f32(v51, vaddq_f32(v44, v35));
          v56 = vsubq_f32(v52, v49);
          v57 = vsubq_f32(v53, v50);
          v51.i32[0] = *v40;
          v58 = vmlsq_lane_f32(v55, v54, *(float32x2_t *)v51.f32, 0);
          v51.i32[0] = *v38;
          v52.i32[0] = v38[1];
          v59 = vmlsq_lane_f32(v56, v54, *(float32x2_t *)v51.f32, 0);
          v51.i32[0] = *v37;
          v53.i32[0] = v37[1];
          v60 = vmlsq_lane_f32(v59, v58, *(float32x2_t *)v52.f32, 0);
          v61 = vmlsq_lane_f32(vmlsq_lane_f32(v57, v54, *(float32x2_t *)v51.f32, 0), v58, *(float32x2_t *)v53.f32, 0);
          v51.i32[0] = v37[2];
          *v31 = v54;
          *(float32x4_t *)((char *)v31 + 4 * a6) = v58;
          *(float32x4_t *)((char *)v31 + 8 * a6) = v60;
          *(float32x4_t *)((char *)v31 + 12 * a6) = vmlsq_lane_f32(v61, v60, *(float32x2_t *)v51.f32, 0);
          v26 += 4;
          if (v26 >= __N - 3)
            goto LABEL_30;
        }
      }
      v26 = 0;
LABEL_30:
      if (v26 < __N)
        break;
LABEL_38:
      v25 += 4;
      if (v25 >= v87)
        return;
    }
    v62 = (__int32 *)(a3 + 4 * v25 * a4);
    v63 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
    v64 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
    v65 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
    while (1)
    {
      v66 = &__X[v26];
      v67 = 0uLL;
      if ((v15 & 1) != 0)
      {
        v74.i32[0] = *v62;
        v74.i32[1] = *v63;
        v74.i32[2] = *v64;
        v74.i32[3] = *v65;
        v75 = *v66;
        v66 += a6;
        v68 = v25 - 1;
        v69 = vmlaq_n_f32((float32x4_t)0, v74, v75);
        v70 = v65 + 1;
        v71 = v64 + 1;
        v72 = (uint64_t *)(v63 + 1);
        v73 = (uint64_t *)(v62 + 1);
        if (v25 != 1)
        {
          do
          {
LABEL_36:
            v76 = *v73++;
            v77.i64[0] = v76;
            v78 = *v72++;
            v79.i64[0] = v78;
            v80 = *(_QWORD *)v71;
            v71 += 2;
            v81 = v80;
            v82 = *(_QWORD *)v70;
            v70 += 2;
            v77.i64[1] = v81;
            v79.i64[1] = v82;
            v69 = vmlaq_n_f32(v69, (float32x4_t)vtrn1q_s32(v77, v79), *v66);
            v67 = vmlaq_n_f32(v67, (float32x4_t)vtrn2q_s32(v77, v79), v66[a6]);
            v66 = (float *)((char *)v66 + v24);
            v68 -= 2;
          }
          while (v68);
        }
      }
      else
      {
        v68 = v25;
        v69 = 0uLL;
        v70 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        v71 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v72 = (uint64_t *)(a3 + 4 * (a4 + v25 * a4));
        v73 = (uint64_t *)(a3 + 4 * v25 * a4);
        if (v25)
          goto LABEL_36;
      }
      v83 = vaddq_f32(v67, v69);
      v84 = -(float)(v83.f32[0] - (float)(*v66 * v9));
      v85 = (float)-(float)(v83.f32[1] - (float)(v66[a6] * v9)) - (float)(v84 * *(float *)v72);
      v86 = (float)((float)-(float)(v83.f32[2] - (float)(v66[2 * a6] * v9)) - (float)(v84 * *(float *)v71))
          - (float)(v85 * *((float *)v71 + 1));
      v83.f32[0] = (float)((float)((float)-(float)(v83.f32[3] - (float)(v66[3 * a6] * v9)) - (float)(v84 * *(float *)v70))
                         - (float)(v85 * *((float *)v70 + 1)))
                 - (float)(v86 * *((float *)v70 + 2));
      *v66 = v84;
      v66[a6] = v85;
      v66[2 * a6] = v86;
      v66[3 * a6] = v83.f32[0];
      if (++v26 == __N)
        goto LABEL_38;
    }
  }
}

void strsm_noPack_RUNN(uint64_t __N, uint64_t a2, float *a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float *v9;
  float v10;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  __int32 *v56;
  __int32 *v57;
  float32x4_t v58;
  float *v59;
  float *v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  float *v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  __int32 *v87;
  __int32 *v88;
  uint64_t *v89;
  uint64_t *v90;
  float32x4_t v91;
  float v92;
  uint64_t v93;
  int32x4_t v94;
  uint64_t v95;
  int32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v9 = a3;
  v10 = a7;
  v12 = __N;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v27 = &a3[a4];
        v28 = a7 / *a3;
        v29 = *v27;
        v30 = v27[1];
        v21 = 2;
        v31 = __X;
        v32 = __N;
        v33 = 1.0 / v30;
        do
        {
          v34 = v28 * *v31;
          *v31 = v34;
          v31[a6] = v33 * (float)((float)(v31[a6] * v10) - (float)(v34 * v29));
          ++v31;
          --v32;
        }
        while (v32);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v21 = 1;
      cblas_sscal(__N, a7 / *a3, __X, 1);
      v10 = a7;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v13 = &a3[a4];
    v14 = &a3[2 * a4];
    v15 = *v14;
    v16 = v14[1];
    v17 = v10 / *a3;
    v18 = *v13;
    v19 = 1.0 / v13[1];
    v20 = v14[2];
    v21 = 3;
    v22 = __X;
    v23 = __N;
    v24 = 1.0 / v20;
    do
    {
      v25 = v17 * *v22;
      *v22 = v25;
      v26 = v19 * (float)((float)(v22[a6] * v10) - (float)(v25 * v18));
      v22[a6] = v26;
      v22[2 * a6] = v24
                  * (float)-(float)((float)((float)(v16 * v26) + (float)(*v22 * v15)) - (float)(v22[2 * a6] * v10));
      ++v22;
      --v23;
    }
    while (v23);
  }
  if (v21 < a2)
  {
    v35 = v12 - 3;
    v36 = 8 * a6;
    v37 = v21;
    v105 = a2;
    v106 = v9;
    v104 = v12;
    while (1)
    {
      v38 = 1.0 / v9[v37 * a4 + v37];
      v39 = (v37 + 1) * a4;
      v40 = 1.0 / v9[v39 + 1 + v37];
      v41 = (v37 + 2) * a4;
      v42 = 1.0 / v9[v41 + 2 + v37];
      v43 = (v37 + 3) * a4;
      v44 = 1.0 / v9[v43 + 3 + v37];
      v110 = v43;
      v108 = v41;
      v109 = v39;
      v45 = 0;
      if (v12 >= 4)
      {
        v46 = &v9[v37 * a4];
        v47 = &v9[v39];
        v48 = &v9[v41];
        v49 = &v9[v43];
        do
        {
          v50 = (float32x4_t *)&__X[v45];
          v51 = 0uLL;
          if ((v21 & 1) != 0)
          {
            v66 = *v50;
            v58 = vmlaq_n_f32((float32x4_t)0, *v50, *v46);
            v54 = vmlaq_n_f32((float32x4_t)0, *v50, *v47);
            v53 = vmlaq_n_f32((float32x4_t)0, *v50, *v48);
            v50 = (float32x4_t *)((char *)v50 + 4 * a6);
            v55 = v37 - 1;
            v52 = vmlaq_n_f32((float32x4_t)0, v66, *v49);
            v56 = (__int32 *)(v49 + 1);
            v57 = (__int32 *)(v48 + 1);
            v59 = v47 + 1;
            v60 = v46 + 1;
            if (v37 != 1)
            {
LABEL_22:
              v61 = 0;
              v62 = 0uLL;
              v63 = 0uLL;
              v64 = 0uLL;
              do
              {
                v58 = vmlaq_n_f32(v58, *v50, v60[v61]);
                v54 = vmlaq_n_f32(v54, *v50, v59[v61]);
                v53 = vmlaq_n_f32(v53, *v50, *(float *)&v57[v61]);
                v52 = vmlaq_n_f32(v52, *v50, *(float *)&v56[v61]);
                v65 = *(float32x4_t *)((char *)v50 + 4 * a6);
                v62 = vmlaq_n_f32(v62, v65, v60[v61 + 1]);
                v63 = vmlaq_n_f32(v63, v65, v59[v61 + 1]);
                v64 = vmlaq_n_f32(v64, v65, *(float *)&v57[v61 + 1]);
                v51 = vmlaq_n_f32(v51, v65, *(float *)&v56[v61 + 1]);
                v61 += 2;
                v50 = (float32x4_t *)((char *)v50 + v36);
                v55 -= 2;
              }
              while (v55);
              v59 = (float *)((char *)v59 + v61 * 4);
              v57 = (__int32 *)((char *)v57 + v61 * 4);
              v56 = (__int32 *)((char *)v56 + v61 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = v37;
            v56 = (__int32 *)&v9[v43];
            v57 = (__int32 *)&v9[v41];
            v58 = 0uLL;
            v59 = v47;
            v60 = &v9[v37 * a4];
            if (v37)
              goto LABEL_22;
          }
          v64 = 0uLL;
          v63 = 0uLL;
          v62 = 0uLL;
LABEL_27:
          v67 = vaddq_f32(v62, v58);
          v68 = vaddq_f32(v64, v53);
          v69 = vaddq_f32(v51, v52);
          v70 = vmulq_n_f32(*v50, v10);
          v71 = vmulq_n_f32(*(float32x4_t *)((char *)v50 + 4 * a6), v10);
          v72 = vmulq_n_f32(*(float32x4_t *)((char *)v50 + 8 * a6), v10);
          v73 = vmulq_n_f32(vsubq_f32(v70, v67), v38);
          v70.f32[0] = *v59;
          v74 = vmlsq_lane_f32(vsubq_f32(v71, vaddq_f32(v63, v54)), v73, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = *v57;
          v71.i32[0] = v57[1];
          v75 = vmlsq_lane_f32(vsubq_f32(v72, v68), v73, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = *v56;
          v72.i32[0] = v56[1];
          v76 = vmulq_n_f32(v74, v40);
          v77 = vmlsq_lane_f32(vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v50 + 12 * a6), v10), v69), v73, *(float32x2_t *)v70.f32, 0), v76, *(float32x2_t *)v72.f32, 0);
          v78 = vmulq_n_f32(vmlsq_lane_f32(v75, v76, *(float32x2_t *)v71.f32, 0), v42);
          v70.i32[0] = v56[2];
          *v50 = v73;
          *(float32x4_t *)((char *)v50 + 4 * a6) = v76;
          *(float32x4_t *)((char *)v50 + 8 * a6) = v78;
          *(float32x4_t *)((char *)v50 + 12 * a6) = vmulq_n_f32(vmlsq_lane_f32(v77, v78, *(float32x2_t *)v70.f32, 0), v44);
          v45 += 4;
        }
        while (v45 < v35);
      }
      v12 = v104;
      v9 = v106;
      if (v45 < v104)
        break;
LABEL_36:
      v37 += 4;
      if (v37 >= v105)
        return;
    }
    v79 = (__int32 *)&v106[v37 * a4];
    v80 = (__int32 *)&v106[v109];
    v81 = (__int32 *)&v106[v41];
    v82 = (__int32 *)&v106[v110];
    while (1)
    {
      v83 = &__X[v45];
      v84 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v91.i32[0] = *v79;
        v91.i32[1] = *v80;
        v91.i32[2] = *v81;
        v91.i32[3] = *v82;
        v92 = *v83;
        v83 += a6;
        v85 = v37 - 1;
        v86 = vmlaq_n_f32((float32x4_t)0, v91, v92);
        v87 = v82 + 1;
        v88 = v81 + 1;
        v89 = (uint64_t *)(v80 + 1);
        v90 = (uint64_t *)(v79 + 1);
        if (v37 != 1)
        {
          do
          {
LABEL_34:
            v93 = *v90++;
            v94.i64[0] = v93;
            v95 = *v89++;
            v96.i64[0] = v95;
            v97 = *(_QWORD *)v88;
            v88 += 2;
            v98 = v97;
            v99 = *(_QWORD *)v87;
            v87 += 2;
            v94.i64[1] = v98;
            v96.i64[1] = v99;
            v86 = vmlaq_n_f32(v86, (float32x4_t)vtrn1q_s32(v94, v96), *v83);
            v84 = vmlaq_n_f32(v84, (float32x4_t)vtrn2q_s32(v94, v96), v83[a6]);
            v83 = (float *)((char *)v83 + v36);
            v85 -= 2;
          }
          while (v85);
        }
      }
      else
      {
        v85 = v37;
        v86 = 0uLL;
        v87 = (__int32 *)&v106[v110];
        v88 = (__int32 *)&v106[v108];
        v89 = (uint64_t *)&v106[v109];
        v90 = (uint64_t *)&v106[v37 * a4];
        if (v37)
          goto LABEL_34;
      }
      v100 = vaddq_f32(v86, v84);
      v101 = v38 * (float)-(float)(v100.f32[0] - (float)(*v83 * v10));
      v102 = v40 * (float)((float)-(float)(v100.f32[1] - (float)(v83[a6] * v10)) - (float)(v101 * *(float *)v89));
      v103 = v42
           * (float)((float)((float)-(float)(v100.f32[2] - (float)(v83[2 * a6] * v10)) - (float)(v101 * *(float *)v88))
                   - (float)(v102 * *((float *)v88 + 1)));
      v100.f32[0] = v44
                  * (float)((float)((float)((float)-(float)(v100.f32[3] - (float)(v83[3 * a6] * v10))
                                          - (float)(v101 * *(float *)v87))
                                  - (float)(v102 * *((float *)v87 + 1)))
                          - (float)(v103 * *((float *)v87 + 2)));
      *v83 = v101;
      v83[a6] = v102;
      v83[2 * a6] = v103;
      v83[3 * a6] = v100.f32[0];
      if (++v45 == v104)
        goto LABEL_36;
    }
  }
}

void strsm_noPack_RUTU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t *v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x2_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  float *v68;
  float *v69;
  uint64_t v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;

  v12 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v24 = *(float *)(a3 + 4 * (v12 + v12 * a4) - 4);
        v25 = (float *)(a5 + 4 * v12 * a6);
        v26 = (float *)(a5 + a6 * (4 * a2 - 8));
        v27 = __N;
        do
        {
          v28 = *v25 * a7;
          *v25++ = v28;
          *v26 = (float)(*v26 * a7) - (float)(v28 * v24);
          ++v26;
          --v27;
        }
        while (v27);
      }
      v12 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      v82 = a7;
      cblas_sscal(__N, a7, (float *)(a5 + 4 * v12 * a6), 1);
      a7 = v82;
      v12 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v13 = a3 + 4 * (v12 + v12 * a4);
      v14 = *(float *)(v13 - 8);
      v15 = *(float *)(v13 - 4);
      v16 = *(float *)(a3 + 4 * (a2 + (a2 - 2) * a4) - 12);
      v17 = (float *)(a5 + 4 * v12 * a6);
      v18 = (float *)(a5 + a6 * (4 * a2 - 8));
      v19 = (float *)(a5 + a6 * (4 * a2 - 12));
      v20 = __N;
      do
      {
        v21 = *v17 * a7;
        *v17 = v21;
        v22 = (float)(*v18 * a7) - (float)(v21 * v15);
        *v18++ = v22;
        v23 = *v17++;
        *v19 = -(float)((float)((float)(v16 * v22) + (float)(v23 * v14)) - (float)(*v19 * a7));
        ++v19;
        --v20;
      }
      while (v20);
    }
    v12 = a2 - 4;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v29 = v12 + 1;
    v30 = 8 * a4;
    v31 = 8 * a6;
    while (1)
    {
      v32 = v29 - 4;
      if (__N >= 4)
      {
        v33 = 0;
        v34 = a3 + 4 * v32;
        v35 = (float32x2_t *)(v34 + 4 * v29 * a4);
        v36 = 4;
        if (a2 - v32 > 4)
          v36 = a2 - v32;
        v37 = (__int32 *)(v34 + 4 * (v29 - 1) * a4);
        v38 = &v37[-a4];
        while (1)
        {
          v39 = a5 + 4 * v33;
          v40 = (float32x4_t *)(v39 + 4 * v29 * a6);
          v41 = 0uLL;
          if ((v36 & 1) != 0)
          {
            v47 = vmlaq_n_f32((float32x4_t)0, *v40, COERCE_FLOAT(*(_OWORD *)v35->f32));
            v44 = vmlaq_lane_f32((float32x4_t)0, *v40, *v35, 1);
            v43 = vmlaq_laneq_f32((float32x4_t)0, *v40, *(float32x4_t *)v35->f32, 2);
            v42 = vmlaq_laneq_f32((float32x4_t)0, *v40, *(float32x4_t *)v35->f32, 3);
            v40 = (float32x4_t *)((char *)v40 + 4 * a6);
            v45 = v36 - 5;
            v46 = (float32x2_t *)((char *)v35 + 4 * a4);
            if (v36 != 5)
            {
LABEL_21:
              v48 = 0uLL;
              v49 = 0uLL;
              v50 = 0uLL;
              do
              {
                v47 = vmlaq_n_f32(v47, *v40, COERCE_FLOAT(*(_OWORD *)v46->f32));
                v44 = vmlaq_lane_f32(v44, *v40, *v46, 1);
                v43 = vmlaq_laneq_f32(v43, *v40, *(float32x4_t *)v46->f32, 2);
                v42 = vmlaq_laneq_f32(v42, *v40, *(float32x4_t *)v46->f32, 3);
                v51 = *(float32x4_t *)&v46->f32[a4];
                v52 = *(float32x4_t *)((char *)v40 + 4 * a6);
                v48 = vmlaq_n_f32(v48, v52, v51.f32[0]);
                v49 = vmlaq_lane_f32(v49, v52, *(float32x2_t *)v51.f32, 1);
                v50 = vmlaq_laneq_f32(v50, v52, v51, 2);
                v41 = vmlaq_laneq_f32(v41, v52, v51, 3);
                v46 = (float32x2_t *)((char *)v46 + v30);
                v40 = (float32x4_t *)((char *)v40 + v31);
                v45 -= 2;
              }
              while (v45);
              goto LABEL_26;
            }
          }
          else
          {
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = v36 - 4;
            v46 = v35;
            v47 = 0uLL;
            if (v36 != 4)
              goto LABEL_21;
          }
          v50 = 0uLL;
          v49 = 0uLL;
          v48 = 0uLL;
LABEL_26:
          v53 = vaddq_f32(v48, v47);
          v54 = vaddq_f32(v41, v42);
          v55 = (float32x4_t *)(v39 + 4 * v32 * a6);
          v56 = vmulq_n_f32(*(float32x4_t *)((char *)v55 + 4 * a6), a7);
          v57 = vsubq_f32(vmulq_n_f32(*v55, a7), v53);
          v58 = vsubq_f32(v56, vaddq_f32(v49, v44));
          v59 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v55 + 8 * a6), a7), vaddq_f32(v50, v43));
          v60 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v55 + 12 * a6), a7), v54);
          v53.i32[0] = *v37;
          v56.i32[0] = v37[1];
          v61 = vmlsq_lane_f32(v57, v60, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v37[2];
          v62 = vmlsq_lane_f32(v59, v60, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v37[-a4];
          v63 = vmlsq_lane_f32(v61, v62, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v38[1];
          v64 = vmlsq_lane_f32(vmlsq_lane_f32(v58, v60, *(float32x2_t *)v56.f32, 0), v62, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v38[-a4];
          *v55 = vmlsq_lane_f32(v63, v64, *(float32x2_t *)v53.f32, 0);
          *(float32x4_t *)((char *)v55 + 4 * a6) = v64;
          *(float32x4_t *)((char *)v55 + 8 * a6) = v62;
          *(float32x4_t *)((char *)v55 + 12 * a6) = v60;
          v33 += 4;
          if (v33 >= __N - 3)
            goto LABEL_29;
        }
      }
      v33 = 0;
LABEL_29:
      if (v33 < __N)
        break;
LABEL_39:
      v81 = v29 < 5;
      v29 -= 4;
      if (v81)
        return;
    }
    v65 = a3 + 4 * v32;
    v66 = (float32x4_t *)(v65 + 4 * v29 * a4);
    v67 = a2 - v32;
    if (a2 - v32 <= 4)
      v67 = 4;
    v68 = (float *)(v65 + 4 * (v29 - 1) * a4);
    v69 = &v68[-a4];
    while (1)
    {
      v70 = a5 + 4 * v33;
      v71 = (float *)(v70 + 4 * v29 * a6);
      v72 = 0uLL;
      if ((v67 & 1) != 0)
      {
        v73 = vmlaq_n_f32((float32x4_t)0, *v66, *v71);
        v71 += a6;
        v74 = v67 - 5;
        v75 = (float32x4_t *)((char *)v66 + 4 * a4);
        if (v67 != 5)
        {
          do
          {
LABEL_37:
            v73 = vmlaq_n_f32(v73, *v75, *v71);
            v72 = vmlaq_n_f32(v72, *(float32x4_t *)((char *)v75 + 4 * a4), v71[a6]);
            v75 = (float32x4_t *)((char *)v75 + v30);
            v71 = (float *)((char *)v71 + v31);
            v74 -= 2;
          }
          while (v74);
        }
      }
      else
      {
        v73 = 0uLL;
        v74 = v67 - 4;
        v75 = v66;
        if (v67 != 4)
          goto LABEL_37;
      }
      v76 = vaddq_f32(v72, v73);
      v77 = (float *)(v70 + 4 * v32 * a6);
      v78 = -(float)(v76.f32[0] - (float)(*v77 * a7));
      v76.f32[0] = -(float)(v76.f32[3] - (float)(v77[3 * a6] * a7));
      v79 = (float)-(float)(v76.f32[2] - (float)(v77[2 * a6] * a7)) - (float)(v76.f32[0] * v68[2]);
      v80 = (float)((float)-(float)(v76.f32[1] - (float)(v77[a6] * a7)) - (float)(v76.f32[0] * v68[1]))
          - (float)(v79 * v69[1]);
      *v77 = (float)((float)(v78 - (float)(v76.f32[0] * *v68)) - (float)(v79 * v68[-a4])) - (float)(v80 * v69[-a4]);
      v77[a6] = v80;
      v77[2 * a6] = v79;
      v77[3 * a6] = v76.f32[0];
      if (++v33 == __N)
        goto LABEL_39;
    }
  }
}

void strsm_noPack_RUTN(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  float v10;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t *v50;
  uint64_t v51;
  float32x2_t *v52;
  __int32 *v53;
  __int32 *v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  float32x2_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  float *v86;
  float *v87;
  uint64_t v88;
  float *v89;
  float32x4_t v90;
  float32x4_t *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float *v95;
  float v96;
  float v97;
  float v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;

  v9 = a4;
  v10 = a7;
  v13 = a2 - 1;
  v103 = a3;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v29 = (float *)(a3 + 4 * (a4 + 1) * v13);
        v30 = *(v29 - 1);
        v31 = v10 / *v29;
        v32 = (float *)(a5 + 4 * v13 * a6);
        v33 = (float *)(a5 + a6 * (4 * a2 - 8));
        v34 = __N;
        v35 = 1.0 / *(float *)(a3 + 4 * (a4 + 1) * (a2 - 2));
        do
        {
          v36 = v31 * *v32;
          *v32++ = v36;
          *v33 = v35 * (float)((float)(*v33 * v10) - (float)(v36 * v30));
          ++v33;
          --v34;
        }
        while (v34);
      }
      v13 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *(float *)(a3 + 4 * (v13 + v13 * a4)), (float *)(a5 + 4 * v13 * a6), 1);
      v10 = a7;
      a3 = v103;
      v9 = a4;
      v13 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v14 = (float *)(a3 + 4 * (a4 + 1) * v13);
      v16 = *(v14 - 2);
      v15 = *(v14 - 1);
      v17 = (a2 - 2) * a4;
      v18 = *(float *)(a3 + 4 * (a2 - 3 + v17));
      v19 = v10 / *v14;
      v20 = 1.0 / *(float *)(a3 + 4 * (v17 + a2 - 2));
      v21 = (float *)(a5 + 4 * v13 * a6);
      v22 = (float *)(a5 + a6 * (4 * a2 - 8));
      v23 = (float *)(a5 + a6 * (4 * a2 - 12));
      v24 = __N;
      v25 = 1.0 / *(float *)(a3 + 4 * (a4 + 1) * (a2 - 3));
      do
      {
        v26 = v19 * *v21;
        *v21 = v26;
        v27 = v20 * (float)((float)(*v22 * v10) - (float)(v26 * v15));
        *v22++ = v27;
        v28 = *v21++;
        *v23 = v25 * (float)-(float)((float)((float)(v18 * v27) + (float)(v28 * v16)) - (float)(*v23 * v10));
        ++v23;
        --v24;
      }
      while (v24);
    }
    v13 = a2 - 4;
  }
  v102 = a2;
  if ((v13 & 0x8000000000000000) == 0)
  {
    v37 = v13 + 1;
    v38 = 8 * v9;
    v100 = v9 + 1;
    v39 = v9;
    v40 = -v9;
    v41 = 8 * a6;
    while (1)
    {
      v42 = v37 - 4;
      v43 = 1.0 / *(float *)(a3 + 4 * (v37 - 4) * v100);
      v44 = 1.0 / *(float *)(a3 + 4 * (v37 - 3) * v100);
      v45 = 1.0 / *(float *)(a3 + 4 * (v37 - 2) * v100);
      v46 = (v37 - 1) * v9;
      v47 = 1.0 / *(float *)(a3 + 4 * (v37 - 1 + v46));
      if (__N >= 4)
      {
        v48 = 0;
        v49 = a3 + 4 * v42;
        v50 = (float32x2_t *)(v49 + 4 * v37 * v9);
        if (v102 - v42 <= 4)
          v51 = 4;
        else
          v51 = v102 - v42;
        v52 = (float32x2_t *)((char *)v50 + 4 * v9);
        v53 = (__int32 *)(v49 + 4 * v46);
        v54 = &v53[v40];
        while (1)
        {
          v55 = a5 + 4 * v48;
          v56 = (float32x4_t *)(v55 + 4 * v37 * a6);
          v57 = 0uLL;
          if ((v51 & 1) != 0)
          {
            v63 = vmlaq_n_f32((float32x4_t)0, *v56, COERCE_FLOAT(*(_OWORD *)v50->f32));
            v60 = vmlaq_lane_f32((float32x4_t)0, *v56, *v50, 1);
            v59 = vmlaq_laneq_f32((float32x4_t)0, *v56, *(float32x4_t *)v50->f32, 2);
            v58 = vmlaq_laneq_f32((float32x4_t)0, *v56, *(float32x4_t *)v50->f32, 3);
            v56 = (float32x4_t *)((char *)v56 + 4 * a6);
            v61 = v51 - 5;
            v62 = v52;
            if (v51 != 5)
            {
LABEL_22:
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v63 = vmlaq_n_f32(v63, *v56, COERCE_FLOAT(*(_OWORD *)v62->f32));
                v60 = vmlaq_lane_f32(v60, *v56, *v62, 1);
                v59 = vmlaq_laneq_f32(v59, *v56, *(float32x4_t *)v62->f32, 2);
                v58 = vmlaq_laneq_f32(v58, *v56, *(float32x4_t *)v62->f32, 3);
                v67 = *(float32x4_t *)&v62->f32[v39];
                v68 = *(float32x4_t *)((char *)v56 + 4 * a6);
                v64 = vmlaq_n_f32(v64, v68, v67.f32[0]);
                v65 = vmlaq_lane_f32(v65, v68, *(float32x2_t *)v67.f32, 1);
                v66 = vmlaq_laneq_f32(v66, v68, v67, 2);
                v57 = vmlaq_laneq_f32(v57, v68, v67, 3);
                v62 = (float32x2_t *)((char *)v62 + v38);
                v56 = (float32x4_t *)((char *)v56 + v41);
                v61 -= 2;
              }
              while (v61);
              goto LABEL_27;
            }
          }
          else
          {
            v58 = 0uLL;
            v59 = 0uLL;
            v60 = 0uLL;
            v61 = v51 - 4;
            v62 = v50;
            v63 = 0uLL;
            if (v51 != 4)
              goto LABEL_22;
          }
          v66 = 0uLL;
          v65 = 0uLL;
          v64 = 0uLL;
LABEL_27:
          v69 = vaddq_f32(v64, v63);
          v70 = vaddq_f32(v65, v60);
          v71 = vaddq_f32(v57, v58);
          v72 = (float32x4_t *)(v55 + 4 * v42 * a6);
          v73 = vmulq_n_f32(*(float32x4_t *)((char *)v72 + 8 * a6), v10);
          v74 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v72 + 4 * a6), v10), v70);
          v75 = vsubq_f32(v73, vaddq_f32(v66, v59));
          v76 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v72 + 12 * a6), v10), v71), v47);
          v70.i32[0] = *v53;
          v73.i32[0] = v53[1];
          v77 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*v72, v10), v69), v76, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v53[2];
          v78 = vmlsq_lane_f32(v75, v76, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v53[v40];
          v79 = vmulq_n_f32(v78, v45);
          v80 = vmlsq_lane_f32(v77, v79, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v54[1];
          v81 = vmlsq_lane_f32(vmlsq_lane_f32(v74, v76, *(float32x2_t *)v73.f32, 0), v79, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v54[v40];
          v82 = vmulq_n_f32(v81, v44);
          *v72 = vmulq_n_f32(vmlsq_lane_f32(v80, v82, *(float32x2_t *)v70.f32, 0), v43);
          *(float32x4_t *)((char *)v72 + 4 * a6) = v82;
          *(float32x4_t *)((char *)v72 + 8 * a6) = v79;
          *(float32x4_t *)((char *)v72 + 12 * a6) = v76;
          v48 += 4;
          if (v48 >= __N - 3)
            goto LABEL_30;
        }
      }
      v48 = 0;
LABEL_30:
      a3 = v103;
      v9 = a4;
      if (v48 < __N)
        break;
LABEL_40:
      v99 = v37 < 5;
      v37 -= 4;
      if (v99)
        return;
    }
    v83 = v103 + 4 * v42;
    v84 = (float32x4_t *)(v83 + 4 * v37 * a4);
    v85 = v102 - v42;
    if (v102 - v42 <= 4)
      v85 = 4;
    v86 = (float *)(v83 + 4 * v46);
    v87 = &v86[v40];
    while (1)
    {
      v88 = a5 + 4 * v48;
      v89 = (float *)(v88 + 4 * v37 * a6);
      v90 = 0uLL;
      if ((v85 & 1) != 0)
      {
        v93 = vmlaq_n_f32((float32x4_t)0, *v84, *v89);
        v89 += a6;
        v91 = (float32x4_t *)((char *)v84 + 4 * a4);
        v92 = v85 - 5;
        if (v85 != 5)
        {
          do
          {
LABEL_38:
            v93 = vmlaq_n_f32(v93, *v91, *v89);
            v90 = vmlaq_n_f32(v90, *(float32x4_t *)((char *)v91 + v39 * 4), v89[a6]);
            v89 = (float *)((char *)v89 + v41);
            v91 = (float32x4_t *)((char *)v91 + v38);
            v92 -= 2;
          }
          while (v92);
        }
      }
      else
      {
        v91 = v84;
        v92 = v85 - 4;
        v93 = 0uLL;
        if (v85 != 4)
          goto LABEL_38;
      }
      v94 = vaddq_f32(v93, v90);
      v95 = (float *)(v88 + 4 * v42 * a6);
      v96 = -(float)(v94.f32[0] - (float)(*v95 * v10));
      v94.f32[0] = v47 * (float)-(float)(v94.f32[3] - (float)(v95[3 * a6] * v10));
      v97 = v45 * (float)((float)-(float)(v94.f32[2] - (float)(v95[2 * a6] * v10)) - (float)(v94.f32[0] * v86[2]));
      v98 = v44
          * (float)((float)((float)-(float)(v94.f32[1] - (float)(v95[a6] * v10)) - (float)(v94.f32[0] * v86[1]))
                  - (float)(v97 * v87[1]));
      *v95 = v43
           * (float)((float)((float)(v96 - (float)(v94.f32[0] * *v86)) - (float)(v97 * v86[v40]))
                   - (float)(v98 * v87[v40]));
      v95[a6] = v98;
      v95[2 * a6] = v97;
      v95[3 * a6] = v94.f32[0];
      if (++v48 == __N)
        goto LABEL_40;
    }
  }
}

uint64_t Accelerate_AR_strtrs(char *a1, char *a2, char *a3, unsigned int *a4, unsigned int *a5, float *a6, int *a7, char *a8, int *a9, int *a10)
{
  int v17;
  int v18;
  uint64_t v19;
  signed int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v17 = *a7;
  *a10 = 0;
  v18 = lsame_();
  if (!lsame_() && !lsame_())
  {
    v21 = -1;
    goto LABEL_29;
  }
  if (!lsame_() && !lsame_() && !lsame_())
  {
    v21 = -2;
    goto LABEL_29;
  }
  if (!v18 && !lsame_())
  {
    v21 = -3;
    goto LABEL_29;
  }
  v19 = *a4;
  if ((v19 & 0x80000000) != 0)
  {
    v21 = -4;
    goto LABEL_29;
  }
  if ((*a5 & 0x80000000) != 0)
  {
    v21 = -5;
    goto LABEL_29;
  }
  if (v19 <= 1)
    v20 = 1;
  else
    v20 = *a4;
  if (*a7 < v20)
  {
    v21 = -7;
LABEL_29:
    *a10 = v21;
    goto LABEL_30;
  }
  if (*a9 < v20)
  {
    v21 = -9;
    goto LABEL_29;
  }
  if (*a10)
  {
LABEL_30:
    xerbla_();
    return 0;
  }
  if ((_DWORD)v19)
  {
    if (v18)
    {
      v22 = v19 + 1;
      v23 = 1;
      v24 = v17 + 1;
      while (a6[~v17 + v24] != 0.0)
      {
        ++v23;
        v24 += v17 + 1;
        if (v22 == v23)
          goto LABEL_27;
      }
      *a10 = v23;
    }
    else
    {
LABEL_27:
      *a10 = 0;
      Accelerate_AR_strsm("Left", a1, a2, a3, a4, a5, &c_b12_1, a6, a7, a8, a9);
    }
  }
  return 0;
}

void s_cat(char *__b, uint64_t a2, uint64_t a3, unsigned int *a4, size_t __len)
{
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  char *v18;
  int v19;
  char *v20;
  unsigned int v21;
  char v22;

  v5 = __len;
  v6 = __b;
  v7 = *a4;
  if ((int)v7 < 1)
  {
    v16 = 0;
    v12 = __len;
  }
  else
  {
    v10 = 0;
    v11 = __b;
    v12 = __len;
    while (1)
    {
      v13 = *(_QWORD *)(a2 + 8 * v10);
      v14 = *(int *)(a3 + 4 * v10);
      if (v13 < (unint64_t)v11 && v13 + v14 > (unint64_t)__b)
      {
        __b = (char *)malloc_type_malloc((int)__len, 0xDEECCD5uLL);
        v12 = v5;
        goto LABEL_14;
      }
      v12 -= v14;
      if (v12 < 1)
        break;
      ++v10;
      v11 += v14;
      if (v7 == v10)
        goto LABEL_13;
    }
    LODWORD(v7) = v10 + 1;
LABEL_13:
    v6 = 0;
LABEL_14:
    if ((int)v7 < 1)
    {
      v16 = v6;
      v6 = __b;
    }
    else
    {
      v17 = 0;
      v18 = __b;
      do
      {
        v19 = *(_DWORD *)(a3 + 4 * v17);
        if (v19 >= v5)
          v19 = v5;
        if (v19 >= 1)
        {
          v20 = *(char **)(a2 + 8 * v17);
          v21 = v19 + 1;
          do
          {
            v22 = *v20++;
            *v18++ = v22;
            --v21;
          }
          while (v21 > 1);
        }
        v5 -= v19;
        ++v17;
      }
      while (v17 != v7);
      v16 = v6;
      v6 = __b;
      __b = v18;
    }
  }
  if (v5 >= 1)
    memset(__b, 32, v5);
  if (v16)
  {
    memcpy(v16, v6, v12);
    free(v6);
  }
}

void sgemv_internal(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, float *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  if ((a1 & 1) != 0)
    sgemvT_work(a2, a3, a4, a5, a6, a7, a8, a17, a9.f32[0], a10.f32[0]);
  else
    sgemvN_work(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
}

void sgemvT_work(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, float *a7, uint64_t a8, float a9, float a10)
{
  float v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;

  v34 = a2;
  v35 = a7;
  v10 = a10;
  v32 = a3;
  v33 = a4;
  v36 = *MEMORY[0x24BDAC8D0];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v30) = a8;
      else
        v30 = -a8;
      cblas_sscal(v34, a10, &v35[((v34 - 1) * a8) & (a8 >> 63)], v30);
    }
  }
  else
  {
    v16 = hardwareVectorBytes();
    v31[3] = v31;
    MEMORY[0x24BDAC7A8](v16, v17);
    v19 = (void *)(((unint64_t)v31 - v18) & 0xFFFFFFFFFFFFFFC0);
    v21 = (uint64_t)v19 + 4 * v20;
    v23 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    bzero(v19, v22 & 0xFFFFFFFFFFFFFFFCLL);
    bzero((void *)(v21 + 2048), v23);
    if (a1 >= 1)
    {
      v24 = 0;
      v25 = a1;
      do
      {
        v26 = v25 - 512;
        if (v25 >= 512)
          v25 = 512;
        if (a1 - v24 >= 512)
          v27 = 512;
        else
          v27 = a1 - v24;
        if (a1 - v24 >= 1)
        {
          v28 = a5;
          v29 = (_DWORD *)v21;
          do
          {
            *v29++ = *v28;
            v28 += a6;
            --v25;
          }
          while (v25);
        }
        sgemvT_packed_base(v27, v34, v32 + 4 * v24, v33, v21, v35, a8, a9, v10);
        v24 += 512;
        a5 += 512 * a6;
        v10 = 1.0;
        v25 = v26;
      }
      while (v24 < a1);
    }
  }
}

void sgemvN_work(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;

  if (a9.f32[0] == 0.0)
  {
    if (a10.f32[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v38) = a8;
      else
        v38 = -a8;
      cblas_sscal(a1, a10.f32[0], (float *)(a7 + 4 * (((a1 - 1) * a8) & (a8 >> 63))), v38);
    }
  }
  else
  {
    sgemvN_base(a1, a2, a3, a4, a5, a6, a7, a8, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
  }
}

uint64_t APL_sgemm_noPack_NN(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t i;
  float32x4_t *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  __int32 v32;
  float v33;
  __int32 v34;
  float v35;
  __int32 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  float v66;
  __int32 v67;
  float32x4_t v68;
  float v69;
  float v70;
  uint64_t v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 *v78;
  float32x4_t v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  uint64_t k;
  float32x4_t *v86;
  float32x2_t *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t m;
  float32x2_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float32x2_t v104;
  __int32 *v105;
  float32x2_t v106;

  v12 = 4 * a5;
  v13 = a12;
  v14 = a2 <= 3;
  for (i = a2 - 3; !v14; i -= 4)
  {
    v16 = a4;
    v17 = (__int32 *)a6;
    v18 = (__int32 *)a6 + a7;
    v19 = (__int32 *)&a6[a7];
    v20 = &v18[2 * a7];
    v21 = &a8[a12];
    v22 = __OFSUB__(result, 3);
    v23 = result - 3;
    if (result > 3)
    {
      do
      {
        v24 = a3;
        v25 = (float32x4_t)veorq_s8(a11, a11);
        v26 = v25;
        v27 = v25;
        v28 = v25;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v29 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v12);
        v30 = *(float *)v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = *(float *)&v32;
        v34 = *v19++;
        v35 = *(float *)&v34;
        v36 = *v20++;
        v25 = vmlaq_n_f32(v25, v29, v31);
        v26 = vmlaq_n_f32(v26, v29, v33);
        v27 = vmlaq_n_f32(v27, v29, v35);
        v28 = vmlaq_n_f32(v28, v29, *(float *)&v36);
        v24 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v37 = *v16;
          v38 = *(float32x4_t *)((char *)v16 + v12);
          v40 = *(float32x2_t *)v17;
          v39 = (float32x2_t *)(v17 + 2);
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v14 = v24 <= 2;
          for (j = v24 - 2; !v14; j -= 2)
          {
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v52 = vmlaq_n_f32(v25, v37, v41.f32[0]);
            v53 = vmlaq_n_f32(v26, v37, v44.f32[0]);
            v54 = vmlaq_n_f32(v27, v37, v47.f32[0]);
            v55 = vmlaq_n_f32(v28, v37, v50.f32[0]);
            v37 = *v16;
            v25 = vmlaq_lane_f32(v52, v38, v41, 1);
            v56 = *v39++;
            v41 = v56;
            v26 = vmlaq_lane_f32(v53, v38, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v27 = vmlaq_lane_f32(v54, v38, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v28 = vmlaq_lane_f32(v55, v38, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v38 = *(float32x4_t *)((char *)v16 + v12);
            v14 = j <= 2;
          }
          v16 = (float32x4_t *)((char *)v16 + 2 * v12);
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v37, v41.f32[0]), v38, v41, 1);
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v37, v44.f32[0]), v38, v44, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v37, v47.f32[0]), v38, v47, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v37, v50.f32[0]), v38, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v25, a9), *a8, a10);
        v61 = vmlaq_n_f32(vmulq_n_f32(v27, a9), *v60, a10);
        v62 = vmlaq_n_f32(vmulq_n_f32(v28, a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v61;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v62;
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)v16 - v12 * a3 + 16);
        v22 = __OFSUB__(v23, 4);
        v14 = v23 <= 4;
        v23 -= 4;
      }
      while (!v14);
    }
    v63 = result & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        v65 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_15;
        v66 = v16->f32[0];
        v16 = (float32x4_t *)((char *)v16 + v12);
        v67 = *v17++;
        v68.i32[0] = v67;
        v68.i32[1] = *v18++;
        v68.i32[2] = *v19++;
        v68.i32[3] = *v20++;
        v65 = vmlaq_n_f32(v65, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_15:
          do
          {
            v69 = v16->f32[0];
            v70 = v16->f32[(unint64_t)v12 / 4];
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v71 = *(_QWORD *)v17;
            v17 += 2;
            v72.i64[0] = v71;
            v73 = *(_QWORD *)v18;
            v18 += 2;
            v74.i64[0] = v73;
            v75 = *(_QWORD *)v19;
            v19 += 2;
            v76 = v75;
            v77 = *(_QWORD *)v20;
            v20 += 2;
            v72.i64[1] = v76;
            v74.i64[1] = v77;
            v65 = vmlaq_n_f32(vmlaq_n_f32(v65, (float32x4_t)vtrn1q_s32(v72, v74), v69), (float32x4_t)vtrn2q_s32(v72, v74), v70);
            v14 = v64 <= 2;
            v64 -= 2;
          }
          while (!v14);
        }
        v79.i32[0] = a8->i32[0];
        v78 = (__int32 *)((char *)a8 + v13 * 4);
        v79.i32[1] = *v78;
        v80 = &v78[v13];
        v79.i32[2] = *v80;
        v81 = &v80[v13];
        v79.i32[3] = *v81;
        v82 = &v81[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v65, a9), v79, a10);
        v83 = &v82[v13];
        *v82 = a11.i32[0];
        a8 = (float32x4_t *)(v82 + 1);
        *v83 = a11.i32[1];
        v84 = &v83[v13];
        *v84 = a11.i32[2];
        v84[a12] = a11.i32[3];
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)&v16->i32[1] - v12 * a3);
        v14 = v63-- <= 1;
      }
      while (!v14);
    }
    a6 += 2 * a7;
    a8 = v21;
    v14 = i <= 4;
  }
  v14 = i <= -3;
  for (k = i + 3; !v14; --k)
  {
    v86 = a4;
    v87 = a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v93 = *v86,
              v86 = (float32x4_t *)((char *)v86 + v12),
              v94 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              v92 = vmlaq_n_f32(v92, v93, v94),
              v91 = a3 - 1,
              a3 > 1))
        {
          v95 = *v86;
          v96 = *(float32x4_t *)((char *)v86 + v12);
          v14 = v91 <= 2;
          for (m = v91 - 2; !v14; m -= 2)
          {
            v86 = (float32x4_t *)((char *)v86 + 2 * v12);
            v98 = *v87++;
            v99 = vmlaq_n_f32(v92, v95, v98.f32[0]);
            v95 = *v86;
            v92 = vmlaq_lane_f32(v99, v96, v98, 1);
            v96 = *(float32x4_t *)((char *)v86 + v12);
            v14 = m <= 2;
          }
          v86 = (float32x4_t *)((char *)v86 + 2 * v12);
          v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, v95, COERCE_FLOAT(*v87)), v96, *v87, 1);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = a6;
        v86 = (float32x4_t *)((char *)v86 - v12 * a3 + 16);
        v89 = __OFSUB__(v90, 4);
        v14 = v90 <= 4;
        v90 -= 4;
      }
      while (!v14);
    }
    v100 = result & 3;
    if (!v89 && v100 != 0)
    {
      do
      {
        v101 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v102 = v86->f32[0],
              v86 = (float32x4_t *)((char *)v86 + v12),
              v103 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v103, v102),
              v101 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v104.i32[0] = v86->i32[0];
            v105 = (__int32 *)((char *)v86 + v12);
            v104.i32[1] = *v105;
            v86 = (float32x4_t *)&v105[(unint64_t)v12 / 4];
            v106 = *v87++;
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v106, v104);
            v14 = v101 <= 2;
            v101 -= 2;
          }
          while (!v14);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = a6;
        v86 = (float32x4_t *)((char *)&v86->i32[1] - v12 * a3);
        v14 = v100-- <= 1;
      }
      while (!v14);
    }
    a6 = (float32x2_t *)((char *)a6 + 4 * a7);
    a8 = v88;
    v14 = k <= 1;
  }
  return result;
}

#error "23D9737C0: call analysis failed (funcsize=45)"

#error "23D973880: call analysis failed (funcsize=45)"

void cblas_strsm_sequential(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float a9, int a10, char *a11, int a12)
{
  int v13;
  int v14;
  int v18;
  char *v21;
  char *v22;
  int v23;
  int v25;
  int v26;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char vars0;

  v13 = a7;
  v14 = a6;
  v18 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v23 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a10 < (int)a7 || a10 <= 0)
      {
        v33 = a10;
        v35 = a7;
        v22 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v36 = a2;
        v33 = 142;
        v35 = 141;
        v22 = "SIDE must be %d or %d, but is set to %d";
        v29 = 2;
        goto LABEL_41;
      }
      if (a10 < (int)a6 || a10 <= 0)
      {
        v33 = a10;
        v35 = a6;
        v22 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v29 = 10;
LABEL_41:
        v26 = cblas_errprn(v29, 2000, v22, v33, v35, v36);
        goto LABEL_43;
      }
    }
    v26 = 2000;
LABEL_43:
    if (a12 >= v13 && a12 > 0)
      goto LABEL_47;
    v23 = cblas_errprn(12, v26, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v26 = v23;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a10 >= (int)a7 && a10 > 0)
      goto LABEL_24;
    v32 = a10;
    v34 = a7;
    v21 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v34 = 141;
      v36 = a2;
      v32 = 142;
      v21 = "SIDE must be %d or %d, but is set to %d";
      v25 = 2;
      goto LABEL_26;
    }
    if (a10 >= (int)a6 && a10 > 0)
    {
LABEL_24:
      v26 = 2000;
      goto LABEL_27;
    }
    v32 = a10;
    v34 = a6;
    v21 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v25 = 10;
LABEL_26:
  v26 = cblas_errprn(v25, 2000, v21, v32, v34, v36);
LABEL_27:
  if (a12 < v14 || a12 <= 0)
  {
    v23 = cblas_errprn(12, v26, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v26 = cblas_errprn(3, v26, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v26 = cblas_errprn(4, v26, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v26 = cblas_errprn(6, v26, "M cannot be less than zero; it is set to %d.", v14);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v26 = cblas_errprn(5, v26, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v14 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v13 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v26 = cblas_errprn(7, v26, "N cannot be less than zero; it is set to %d.", v13);
LABEL_54:
  if (v26 == 2000)
  {
    if (a1 == 102)
    {
      APL_seq_strsm(v18, a3, a4, a5, v14, v13, a8, a10, a9, a11, a12, 0, 0, 1, (uint64_t)a8, v38, v39, v40, v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        vars0);
    }
    else
    {
      if (v18 == 141)
        v30 = 142;
      else
        v30 = 141;
      if (a3 == 121)
        v31 = 122;
      else
        v31 = 121;
      APL_seq_strsm(v30, v31, a4, a5, v13, v14, a8, a10, a9, a11, a12, 0, 0, 1, (uint64_t)a8, v38, v39, v40, v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        vars0);
    }
  }
  else
  {
    cblas_xerbla(v26, "cblas_strsm", "");
  }
}

void dtrsm_noPack_LUTU(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, double *__X, uint64_t __incX, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13)
{
  int8x16_t v13;
  double v20;
  double *v21;
  double v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  unint64_t *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  double *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  uint64_t v47;
  double *v48;
  int64x2_t *v49;
  int64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double *i64;
  float64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  uint64_t v91;
  float64x2_t *v92;
  float64x2_t *v93;
  double *v94;
  int64x2_t *v95;
  int64x2_t *v96;
  float64x2_t *v97;
  uint64_t v98;
  int64x2_t *v99;
  int64x2_t *v100;
  float64x2_t v101;
  float64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v24 = 2;
      }
      else
      {
        v28 = *(double *)(a3 + 8 * a4);
        v29 = (unint64_t *)(__X + 1);
        v24 = 2;
        v30 = __N;
        do
        {
          *(_QWORD *)&a10.f64[0] = *v29;
          v31 = *((double *)v29 - 1) * a7;
          *((double *)v29 - 1) = v31;
          *(double *)v29 = a10.f64[0] * a7 - v31 * v28;
          v29 += __incX;
          --v30;
        }
        while (v30);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, __X, __incX);
      v24 = 1;
    }
    else
    {
      v24 = 0;
    }
  }
  else if (__N < 1)
  {
    v24 = 3;
  }
  else
  {
    v20 = *(double *)(a3 + 8 * a4);
    v21 = (double *)(a3 + 16 * a4);
    v22 = *v21;
    a10.f64[0] = v21[1];
    v23 = __X + 2;
    v24 = 3;
    v25 = __N;
    do
    {
      v26 = *(v23 - 2) * a7;
      v27 = *(v23 - 1) * a7 - v26 * v20;
      *(v23 - 2) = v26;
      *(v23 - 1) = v27;
      *v23 = -(a10.f64[0] * v27 + v26 * v22 - *v23 * a7);
      v23 += __incX;
      --v25;
    }
    while (v25);
  }
  if (v24 < a1)
  {
    v32 = 3 * __incX;
    v33 = 32 * __incX;
    v34 = 2 * __incX;
    v35 = 8 * __incX;
    do
    {
      if (__N < 4)
      {
        v36 = 0;
      }
      else
      {
        v36 = 0;
        v37 = (unint64_t *)(a3 + 8 * v24 * a4);
        v38 = (unint64_t *)(a3 + 8 * (a4 + v24 * a4));
        v40 = (unint64_t *)(a3 + 8 * (v24 + 3) * a4);
        v41 = __X;
        do
        {
          v42 = (float64x2_t *)&v41[(unint64_t)v35 / 8];
          v43 = (float64x2_t *)&v41[v34];
          v44 = (float64x2_t *)&v41[v32];
          v39 = (unint64_t *)(a3 + 8 * (v24 + 2) * a4);
          v45 = (float64x2_t *)v39;
          v46 = (float64x2_t *)v41;
          v47 = v24;
          v48 = (double *)(a3 + 8 * (a4 + v24 * a4));
          v49 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v50 = (int64x2_t *)(a3 + 8 * v24 * a4);
          v51 = (float64x2_t)veorq_s8(v13, v13);
          v52 = v51;
          v53 = v51;
          v54 = v51;
          v55 = v51;
          v56 = v51;
          v57 = v51;
          v58 = v51;
          if ((v24 & 1) != 0)
          {
            *(_QWORD *)&a10.f64[0] = *v37;
            v50 = (int64x2_t *)(v37 + 1);
            *(_QWORD *)&a11.f64[0] = *v38;
            v48 = (double *)(v38 + 1);
            *(_QWORD *)&a12.f64[0] = *v39;
            v45 = (float64x2_t *)(v39 + 1);
            *(_QWORD *)&a13.f64[0] = *v40;
            v49 = (int64x2_t *)(v40 + 1);
            v59 = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)a11);
            v60 = (float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13);
            v46 = (float64x2_t *)(v41 + 1);
            v61 = v42->f64[0];
            v42 = (float64x2_t *)((char *)v42 + 8);
            v62 = v43->f64[0];
            v43 = (float64x2_t *)((char *)v43 + 8);
            v63 = v44->f64[0];
            v44 = (float64x2_t *)((char *)v44 + 8);
            v51 = vmlaq_n_f64(v51, v59, *v41);
            v53 = vmlaq_n_f64(v53, v59, v61);
            v55 = vmlaq_n_f64(v55, v59, v62);
            v57 = vmlaq_n_f64(v57, v59, v63);
            v52 = vmlaq_n_f64(v52, v60, *v41);
            v54 = vmlaq_n_f64(v54, v60, v61);
            v56 = vmlaq_n_f64(v56, v60, v62);
            v58 = vmlaq_n_f64(v58, v60, v63);
            v47 = v24 - 1;
          }
          for (; v47; v47 -= 2)
          {
            v64 = *v50++;
            v65 = *(int64x2_t *)v48;
            v48 += 2;
            v66 = *(int64x2_t *)v45++;
            v67 = *v49++;
            v68 = (float64x2_t)vtrn1q_s64(v64, v65);
            v69 = (float64x2_t)vtrn1q_s64(v66, v67);
            v70 = (float64x2_t)vtrn2q_s64(v64, v65);
            v71 = (float64x2_t)vtrn2q_s64(v66, v67);
            v72 = *v46++;
            v73 = *v42++;
            v74 = *v43++;
            v75 = *v44++;
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v68, v72.f64[0]), v70, v72, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v68, v73.f64[0]), v70, v73, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v68, v74.f64[0]), v70, v74, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v68, v75.f64[0]), v70, v75, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v69, v72.f64[0]), v71, v72, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v69, v73.f64[0]), v71, v73, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v69, v74.f64[0]), v71, v74, 1);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, v75.f64[0]), v71, v75, 1);
          }
          v76 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v46, a7), v51);
          v77 = (int64x2_t)vsubq_f64(vmulq_n_f64(v46[1], a7), v52);
          v78 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v42, a7), v53);
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(v42[1], a7), v54);
          v80 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v43, a7), v55);
          v81 = (int64x2_t)vsubq_f64(vmulq_n_f64(v43[1], a7), v56);
          v82 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v44, a7), v57);
          v83 = (int64x2_t)vsubq_f64(vmulq_n_f64(v44[1], a7), v58);
          v84 = (float64x2_t)vtrn2q_s64(v76, v78);
          v85 = (float64x2_t)vtrn1q_s64(v76, v78);
          v86 = (float64x2_t)vtrn1q_s64(v80, v82);
          v88 = *(float64x2_t *)v49;
          i64 = (double *)v49[1].i64;
          a12 = vmlsq_lane_f64(v84, v85, *v48, 0);
          a13 = vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v80, v82), v86, *v48, 0);
          a10 = vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v77, v79), v85, v45->f64[0], 0), a12, *v45, 1);
          a11 = vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v81, v83), v86, v45->f64[0], 0), a13, *v45, 1);
          v89 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v77, v79), v85, v88.f64[0], 0), a12, v88, 1), a10, *i64, 0);
          v90 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v81, v83), v86, v88.f64[0], 0), a13, v88, 1), a11, *i64, 0);
          v13 = (int8x16_t)vtrn1q_s64((int64x2_t)v85, (int64x2_t)a12);
          *v46 = (float64x2_t)v13;
          v46[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a10, v89);
          *(int64x2_t *)v42 = vtrn2q_s64((int64x2_t)v85, (int64x2_t)a12);
          v42[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a10, v89);
          *(int64x2_t *)v43 = vtrn1q_s64((int64x2_t)v86, (int64x2_t)a13);
          v43[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a11, v90);
          *(int64x2_t *)v44 = vtrn2q_s64((int64x2_t)v86, (int64x2_t)a13);
          v44[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a11, v90);
          v36 += 4;
          v41 = (double *)((char *)v41 + v33);
        }
        while (v36 < __N - 3);
      }
      v91 = __N - v36;
      if (__N > v36)
      {
        v93 = (float64x2_t *)(a3 + 8 * (v24 + 2) * a4);
        v94 = (double *)((char *)__X + v35 * v36);
        do
        {
          v92 = (float64x2_t *)(a3 + 8 * v24 * a4);
          v95 = (int64x2_t *)v92;
          v96 = (int64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v97 = (float64x2_t *)v94;
          v98 = v24;
          v99 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4));
          v100 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v101 = (float64x2_t)veorq_s8(v13, v13);
          v102 = v101;
          if ((v24 & 1) != 0)
          {
            v95 = (int64x2_t *)&v92->f64[1];
            v99 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4) + 8);
            v96 = (int64x2_t *)&v93->f64[1];
            v100 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4 + 8);
            a10.f64[0] = *v94;
            v97 = (float64x2_t *)(v94 + 1);
            v101 = vmlaq_n_f64(v101, *v92, *v94);
            v102 = vmlaq_n_f64(v102, *v93, *v94);
            v98 = v24 - 1;
          }
          for (; v98; v98 -= 2)
          {
            v103 = *v95++;
            v104 = *v99++;
            v105 = *v96++;
            v106 = *v100++;
            a10 = *v97++;
            v101 = vmlaq_laneq_f64(vmlaq_n_f64(v101, (float64x2_t)vtrn1q_s64(v103, v104), a10.f64[0]), (float64x2_t)vtrn2q_s64(v103, v104), a10, 1);
            v102 = vmlaq_laneq_f64(vmlaq_n_f64(v102, (float64x2_t)vtrn1q_s64(v105, v106), a10.f64[0]), (float64x2_t)vtrn2q_s64(v105, v106), a10, 1);
          }
          v107 = vsubq_f64(vmulq_n_f64(*v97, a7), v101);
          v108.f64[0] = v107.f64[0];
          *(_QWORD *)&a10.f64[1] = v99->i64[0];
          a11 = *(float64x2_t *)v96;
          a12 = *(float64x2_t *)v100;
          v13 = (int8x16_t)vmlsq_lane_f64(v107, a10, v107.f64[0], 0);
          *(_QWORD *)&v108.f64[1] = v13.i64[1];
          a13 = (float64x2_t)vtrn2q_s64(*v96, *v100);
          v109 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v97[1], a7), v102), (float64x2_t)vtrn1q_s64(*v96, *v100), v108.f64[0], 0), a13, v108, 1);
          v110.f64[0] = v109.f64[0];
          *(_QWORD *)&a10.f64[1] = v100[1].i64[0];
          v110.f64[1] = vmlsq_lane_f64(v109, a10, *(double *)&v109, 0).f64[1];
          *v97 = v108;
          v97[1] = v110;
          v94 = (double *)((char *)v94 + v35);
          --v91;
        }
        while (v91);
      }
      v24 += 4;
    }
    while (v24 < a1);
  }
}

void dtrsm_noPack_LUTN(uint64_t a1, uint64_t __N, double *a3, uint64_t a4, double *a5, uint64_t __incX, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  int8x16_t v13;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t *v47;
  const double *v48;
  uint64_t v49;
  const double *v50;
  uint64_t v51;
  const double *v52;
  uint64_t v53;
  const double *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  unint64_t *v67;
  double *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  uint64_t v73;
  double *v74;
  int64x2_t *v75;
  int64x2_t *v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  double v89;
  double v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double *i64;
  float64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  uint64_t v118;
  double *v119;
  float64_t *v120;
  float64_t *v121;
  double *v122;
  uint64_t v123;
  int64x2_t *v124;
  int64x2_t *v125;
  int64x2_t *v126;
  int64x2_t *v127;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v28 = 2;
      }
      else
      {
        v33 = &a3[a4];
        v34 = a7 / *a3;
        v35 = *v33;
        v36 = v33[1];
        v37 = a5 + 1;
        v28 = 2;
        v38 = __N;
        v39 = 1.0 / v36;
        do
        {
          v40 = *v37;
          v41 = v34 * *(v37 - 1);
          *(v37 - 1) = v41;
          *v37 = v39 * (v40 * a7 - v41 * v35);
          v37 += __incX;
          --v38;
        }
        while (v38);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *a3, a5, __incX);
      v28 = 1;
    }
    else
    {
      v28 = 0;
    }
  }
  else if (__N < 1)
  {
    v28 = 3;
  }
  else
  {
    v19 = &a3[a4];
    v20 = &a3[2 * a4];
    v21 = *v20;
    v22 = v20[1];
    v23 = a7 / *a3;
    v24 = *v19;
    v25 = 1.0 / v19[1];
    v26 = v20[2];
    v27 = a5 + 2;
    v28 = 3;
    v29 = __N;
    v30 = 1.0 / v26;
    do
    {
      v31 = v23 * *(v27 - 2);
      v32 = v25 * (*(v27 - 1) * a7 - v31 * v24);
      *(v27 - 2) = v31;
      *(v27 - 1) = v32;
      *(double *)v13.i64 = v22 * v32;
      *v27 = v30 * -(*(double *)v13.i64 + v31 * v21 - *v27 * a7);
      v27 += __incX;
      --v29;
    }
    while (v29);
  }
  if (v28 < a1)
  {
    v42 = a4 + 1;
    v43 = 3 * __incX;
    v44 = 32 * __incX;
    v45 = 2 * __incX;
    v46 = 8 * __incX;
    do
    {
      v47 = (float64x2_t *)&a3[v28 * a4];
      v48 = &v47->f64[v28];
      v49 = v28 + 1;
      v50 = &a3[(v28 + 1) * v42];
      v51 = v28 + 2;
      v52 = &a3[(v28 + 2) * v42];
      v53 = v28 + 3;
      v54 = &a3[(v28 + 3) * v42];
      v55 = vld1q_dup_f64(v48);
      v56 = vld1q_dup_f64(v50);
      v57 = vld1q_dup_f64(v52);
      v58 = vld1q_dup_f64(v54);
      v59 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v60 = vdivq_f64(v59, v55);
      v61 = vdivq_f64(v59, v56);
      v62 = vdivq_f64(v59, v57);
      v63 = vdivq_f64(v59, v58);
      if (__N < 4)
      {
        v64 = 0;
      }
      else
      {
        v64 = 0;
        v66 = &a3[v51 * a4];
        v67 = (unint64_t *)&a3[v53 * a4];
        v68 = a5;
        do
        {
          v69 = (float64x2_t *)&v68[(unint64_t)v46 / 8];
          v70 = (float64x2_t *)&v68[v45];
          v71 = (float64x2_t *)&v68[v43];
          v72 = (float64x2_t *)v68;
          v73 = v28;
          v65 = &a3[v49 * a4];
          v74 = v65;
          v75 = (int64x2_t *)&a3[v53 * a4];
          v76 = (int64x2_t *)&a3[v28 * a4];
          v77 = (float64x2_t *)&a3[v51 * a4];
          v78 = (float64x2_t)veorq_s8(v13, v13);
          v79 = v78;
          v80 = v78;
          v81 = v78;
          v82 = v78;
          v83 = v78;
          v84 = v78;
          v85 = v78;
          if ((v28 & 1) != 0)
          {
            v57.f64[0] = v47->f64[0];
            v76 = (int64x2_t *)&v47->f64[1];
            v58.f64[0] = *v65;
            v74 = v65 + 1;
            v59.f64[0] = *v66;
            v77 = (float64x2_t *)(v66 + 1);
            *(_QWORD *)&a13.f64[0] = *v67;
            v75 = (int64x2_t *)(v67 + 1);
            v86 = (float64x2_t)vtrn1q_s64((int64x2_t)v57, (int64x2_t)v58);
            v87 = (float64x2_t)vtrn1q_s64((int64x2_t)v59, (int64x2_t)a13);
            v72 = (float64x2_t *)(v68 + 1);
            v88 = v69->f64[0];
            v69 = (float64x2_t *)((char *)v69 + 8);
            v89 = v70->f64[0];
            v70 = (float64x2_t *)((char *)v70 + 8);
            v90 = v71->f64[0];
            v71 = (float64x2_t *)((char *)v71 + 8);
            v78 = vmlaq_n_f64(v78, v86, *v68);
            v80 = vmlaq_n_f64(v80, v86, v88);
            v82 = vmlaq_n_f64(v82, v86, v89);
            v84 = vmlaq_n_f64(v84, v86, v90);
            v79 = vmlaq_n_f64(v79, v87, *v68);
            v81 = vmlaq_n_f64(v81, v87, v88);
            v83 = vmlaq_n_f64(v83, v87, v89);
            v85 = vmlaq_n_f64(v85, v87, v90);
            v73 = v28 - 1;
          }
          for (; v73; v73 -= 2)
          {
            v91 = *v76++;
            v92 = *(int64x2_t *)v74;
            v74 += 2;
            v93 = *(int64x2_t *)v77++;
            v94 = *v75++;
            v95 = (float64x2_t)vtrn1q_s64(v91, v92);
            v96 = (float64x2_t)vtrn1q_s64(v93, v94);
            v97 = (float64x2_t)vtrn2q_s64(v91, v92);
            v98 = (float64x2_t)vtrn2q_s64(v93, v94);
            v99 = *v72++;
            v100 = *v69++;
            v101 = *v70++;
            v102 = *v71++;
            v78 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v95, v99.f64[0]), v97, v99, 1);
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v95, v100.f64[0]), v97, v100, 1);
            v82 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v95, v101.f64[0]), v97, v101, 1);
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v95, v102.f64[0]), v97, v102, 1);
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v96, v99.f64[0]), v98, v99, 1);
            v81 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v96, v100.f64[0]), v98, v100, 1);
            v83 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v96, v101.f64[0]), v98, v101, 1);
            v85 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v96, v102.f64[0]), v98, v102, 1);
          }
          v103 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v72, a7), v78);
          v104 = (int64x2_t)vsubq_f64(vmulq_n_f64(v72[1], a7), v79);
          v105 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v69, a7), v80);
          v106 = (int64x2_t)vsubq_f64(vmulq_n_f64(v69[1], a7), v81);
          v107 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v70, a7), v82);
          v108 = (int64x2_t)vsubq_f64(vmulq_n_f64(v70[1], a7), v83);
          v109 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v71, a7), v84);
          v110 = (int64x2_t)vsubq_f64(vmulq_n_f64(v71[1], a7), v85);
          v111 = (float64x2_t)vtrn2q_s64(v103, v105);
          v112 = vmulq_f64((float64x2_t)vtrn1q_s64(v103, v105), v60);
          v113 = vmulq_f64((float64x2_t)vtrn1q_s64(v107, v109), v60);
          v115 = *(float64x2_t *)v75;
          i64 = (double *)v75[1].i64;
          v59 = vmulq_f64(vmlsq_lane_f64(v111, v112, *v74, 0), v61);
          a13 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v107, v109), v113, *v74, 0), v61);
          v57 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v104, v106), v112, v77->f64[0], 0), v59, *v77, 1), v62);
          v58 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v108, v110), v113, v77->f64[0], 0), a13, *v77, 1), v62);
          v116 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v104, v106), v112, v115.f64[0], 0), v59, v115, 1), v57, *i64, 0), v63);
          v117 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v108, v110), v113, v115.f64[0], 0), a13, v115, 1), v58, *i64, 0), v63);
          v13 = (int8x16_t)vtrn1q_s64((int64x2_t)v112, (int64x2_t)v59);
          *v72 = (float64x2_t)v13;
          v72[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v57, v116);
          *(int64x2_t *)v69 = vtrn2q_s64((int64x2_t)v112, (int64x2_t)v59);
          v69[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v57, v116);
          *(int64x2_t *)v70 = vtrn1q_s64((int64x2_t)v113, (int64x2_t)a13);
          v70[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v58, v117);
          *(int64x2_t *)v71 = vtrn2q_s64((int64x2_t)v113, (int64x2_t)a13);
          v71[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v58, v117);
          v64 += 4;
          v68 = (double *)((char *)v68 + v44);
        }
        while (v64 < __N - 3);
      }
      v118 = __N - v64;
      if (__N > v64)
      {
        v119 = &a3[v49 * a4];
        v120 = &a3[v51 * a4];
        v121 = &a3[v53 * a4];
        v122 = (double *)((char *)a5 + v46 * v64);
        do
        {
          v123 = v28;
          v124 = (int64x2_t *)v119;
          v125 = (int64x2_t *)v121;
          v126 = (int64x2_t *)&a3[v28 * a4];
          v127 = (int64x2_t *)v120;
          v128 = (float64x2_t *)v122;
          v129 = (float64x2_t)veorq_s8(v13, v13);
          v130 = v129;
          if ((v28 & 1) != 0)
          {
            v126 = (int64x2_t *)&v47->f64[1];
            v124 = (int64x2_t *)(v119 + 1);
            v131.f64[0] = *v120;
            v127 = (int64x2_t *)(v120 + 1);
            v125 = (int64x2_t *)(v121 + 1);
            v57.f64[0] = *v122;
            v128 = (float64x2_t *)(v122 + 1);
            v131.f64[1] = *v121;
            v129 = vmlaq_n_f64(v129, *v47, *v122);
            v130 = vmlaq_n_f64(v130, v131, *v122);
            v123 = v28 - 1;
          }
          for (; v123; v123 -= 2)
          {
            v132 = *v126++;
            v133 = *v124++;
            v134 = *v127++;
            v135 = *v125++;
            v57 = *v128++;
            v129 = vmlaq_laneq_f64(vmlaq_n_f64(v129, (float64x2_t)vtrn1q_s64(v132, v133), v57.f64[0]), (float64x2_t)vtrn2q_s64(v132, v133), v57, 1);
            v130 = vmlaq_laneq_f64(vmlaq_n_f64(v130, (float64x2_t)vtrn1q_s64(v134, v135), v57.f64[0]), (float64x2_t)vtrn2q_s64(v134, v135), v57, 1);
          }
          v136 = vsubq_f64(vmulq_n_f64(*v128, a7), v129);
          v137.f64[0] = v136.f64[0] * v60.f64[0];
          *(_QWORD *)&v57.f64[1] = v124->i64[0];
          v13 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(v136, v57, v136.f64[0] * v60.f64[0], 0), v61);
          *(_QWORD *)&v137.f64[1] = v13.i64[1];
          a13 = (float64x2_t)vtrn2q_s64(*v127, *v125);
          v138 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v128[1], a7), v130), (float64x2_t)vtrn1q_s64(*v127, *v125), v137.f64[0], 0), a13, v137, 1);
          v139.f64[0] = v138.f64[0] * v62.f64[0];
          *(_QWORD *)&v57.f64[1] = v125[1].i64[0];
          v139.f64[1] = vmulq_f64(vmlsq_lane_f64(v138, v57, *(double *)&v138 * *(double *)&v62, 0), v63).f64[1];
          *v128 = v137;
          v128[1] = v139;
          v122 = (double *)((char *)v122 + v46);
          --v118;
        }
        while (v118);
      }
      v28 += 4;
    }
    while (v28 < a1);
  }
}

void dtrsm_noPack_LUNU(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  int8x16_t v7;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  double *v95;
  float64x2_t v96;
  float64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  uint64_t v100;
  float64x2_t *v101;
  uint64_t v102;
  double *v103;
  float64x2_t *v104;
  uint64_t v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t *v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  float64x2_t *v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  BOOL v125;

  v14 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v23 = *(double *)(a3 + 8 * (a1 + v14 * a4) - 16);
        v24 = (double *)(a5 + 8 * v14);
        v25 = __N;
        do
        {
          v26 = *(v24 - 1);
          v27 = *v24 * a7;
          *v24 = v27;
          *(v24 - 1) = v26 * a7 - v27 * v23;
          v24 += __incX;
          --v25;
        }
        while (v25);
      }
      v14 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v14), __incX);
      v14 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v15 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
      v16 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 3));
      v17 = *(double *)(a3 + 8 * (a1 - 3 + (a1 - 2) * a4));
      v18 = (double *)(a5 + 8 * v14);
      v19 = __N;
      do
      {
        v20 = *(v18 - 1);
        v21 = *v18 * a7;
        *v18 = v21;
        v22 = v20 * a7 - v21 * v15;
        *(v18 - 2) = -(v17 * v22 + v21 * v16 - *(v18 - 2) * a7);
        *(v18 - 1) = v22;
        v18 += __incX;
        --v19;
      }
      while (v19);
    }
    v14 = a1 - 4;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    v28 = 8 * a4;
    v29 = v14 + 1;
    v30 = 3 * __incX;
    v31 = a5 + 8 * v14 + 8;
    v32 = 32 * __incX;
    v33 = 2 * __incX;
    v34 = 8 * __incX;
    do
    {
      v35 = v29 - 4;
      if (__N < 4)
      {
        v36 = 0;
      }
      else
      {
        v36 = 0;
        v38 = a1 - v35;
        if (a1 - v35 <= 4)
          v38 = 4;
        v39 = (double *)v31;
        do
        {
          v40 = (float64x2_t *)&v39[(unint64_t)v34 / 8];
          v41 = (float64x2_t *)&v39[v33];
          v42 = (float64x2_t *)&v39[v30];
          v43 = (float64x2_t *)v39;
          v37 = a3 + 8 * v35 + 8 * v29 * a4;
          v44 = (float64x2_t *)v37;
          v45 = v38 - 4;
          v46 = (float64x2_t)veorq_s8(v7, v7);
          v47 = v46;
          v48 = v46;
          v49 = v46;
          v50 = v46;
          v51 = v46;
          v52 = v46;
          v53 = v46;
          if ((((_BYTE)v38 - 4) & 1) != 0)
          {
            v54 = *(float64x2_t *)(v37 + 16);
            v44 = (float64x2_t *)(v37 + v28);
            v43 = (float64x2_t *)(v39 + 1);
            v55 = v40->f64[0];
            v40 = (float64x2_t *)((char *)v40 + 8);
            v56 = v41->f64[0];
            v41 = (float64x2_t *)((char *)v41 + 8);
            v57 = v42->f64[0];
            v42 = (float64x2_t *)((char *)v42 + 8);
            v46 = vmlaq_n_f64(v46, *(float64x2_t *)v37, *v39);
            v48 = vmlaq_n_f64(v48, *(float64x2_t *)v37, v55);
            v50 = vmlaq_n_f64(v50, *(float64x2_t *)v37, v56);
            v52 = vmlaq_n_f64(v52, *(float64x2_t *)v37, v57);
            v47 = vmlaq_n_f64(v47, v54, *v39);
            v49 = vmlaq_n_f64(v49, v54, v55);
            v51 = vmlaq_n_f64(v51, v54, v56);
            v53 = vmlaq_n_f64(v53, v54, v57);
            v45 = v38 - 5;
          }
          for (; v45; v45 -= 2)
          {
            v59 = *v44;
            v60 = v44[1];
            v58 = (float64x2_t *)((char *)v44 + v28);
            v61 = *v58;
            v62 = v58[1];
            v44 = (float64x2_t *)((char *)v58 + v28);
            v63 = *v43++;
            v64 = *v40++;
            v65 = *v41++;
            v66 = *v42++;
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v59, v63.f64[0]), v61, v63, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v59, v64.f64[0]), v61, v64, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v59, v65.f64[0]), v61, v65, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v59, v66.f64[0]), v61, v66, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v60, v63.f64[0]), v62, v63, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v60, v64.f64[0]), v62, v64, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v60, v65.f64[0]), v62, v65, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v60, v66.f64[0]), v62, v66, 1);
          }
          v67 = (float64x2_t *)((char *)v44 - v28 * (v38 - 3));
          v68 = (float64x2_t *)((char *)v43 - 8 * v38);
          v69 = (float64x2_t *)((char *)v40 - 8 * v38);
          v70 = (float64x2_t *)((char *)v41 - 8 * v38);
          v71 = (float64x2_t *)((char *)v42 - 8 * v38);
          v72 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v68, a7), v46);
          v73 = (int64x2_t)vsubq_f64(vmulq_n_f64(v68[1], a7), v47);
          v74 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v69, a7), v48);
          v75 = (int64x2_t)vsubq_f64(vmulq_n_f64(v69[1], a7), v49);
          v76 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v70, a7), v50);
          v77 = (int64x2_t)vsubq_f64(vmulq_n_f64(v70[1], a7), v51);
          v78 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v71, a7), v52);
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(v71[1], a7), v53);
          v80 = (float64x2_t)vtrn2q_s64(v73, v75);
          v81 = (float64x2_t)vtrn2q_s64(v77, v79);
          v82 = (float64x2_t)vtrn1q_s64(v73, v75);
          v83 = (float64x2_t)vtrn2q_s64(v72, v74);
          v84 = (float64x2_t)vtrn1q_s64(v72, v74);
          v85 = *v67;
          v86 = v67[1];
          v87 = (float64x2_t *)((char *)v67 - v28);
          v88 = vmlsq_lane_f64(v82, v80, v86.f64[0], 0);
          v89 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v77, v79), v81, v86.f64[0], 0);
          v90 = vmlsq_laneq_f64(v83, v80, v85, 1);
          v91 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v76, v78), v81, v85, 1);
          v92 = vmlsq_lane_f64(v84, v80, v85.f64[0], 0);
          v93 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v76, v78), v81, v85.f64[0], 0);
          v94 = *v87;
          v95 = &v87->f64[v28 / 0xFFFFFFFFFFFFFFF8];
          v96 = vmlsq_laneq_f64(v90, v88, v94, 1);
          v97 = vmlsq_laneq_f64(v91, v89, v94, 1);
          v98 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(v92, v88, v94.f64[0], 0), v96, *v95, 0);
          v99 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(v93, v89, v94.f64[0], 0), v97, *v95, 0);
          v7 = (int8x16_t)vtrn1q_s64(v98, (int64x2_t)v96);
          *v68 = (float64x2_t)v7;
          v68[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v88, (int64x2_t)v80);
          *(int64x2_t *)v69 = vtrn2q_s64(v98, (int64x2_t)v96);
          v69[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v88, (int64x2_t)v80);
          *(int64x2_t *)v70 = vtrn1q_s64(v99, (int64x2_t)v97);
          v70[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v89, (int64x2_t)v81);
          *(int64x2_t *)v71 = vtrn2q_s64(v99, (int64x2_t)v97);
          v71[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v89, (int64x2_t)v81);
          v36 += 4;
          v39 = (double *)((char *)v39 + v32);
        }
        while (v36 < __N - 3);
      }
      v100 = __N - v36;
      if (__N > v36)
      {
        v102 = a1 - v35;
        if (a1 - v35 <= 4)
          v102 = 4;
        v103 = (double *)(v31 + v34 * v36);
        do
        {
          v101 = (float64x2_t *)(a3 + 8 * v35 + 8 * v29 * a4);
          v104 = v101;
          v105 = v102 - 4;
          v106 = (float64x2_t *)v103;
          v107 = (float64x2_t)veorq_s8(v7, v7);
          v108 = v107;
          if ((((_BYTE)v102 - 4) & 1) != 0)
          {
            v104 = (float64x2_t *)((char *)v101 + v28);
            v106 = (float64x2_t *)(v103 + 1);
            v107 = vmlaq_n_f64(v107, *v101, *v103);
            v108 = vmlaq_n_f64(v108, v101[1], *v103);
            v105 = v102 - 5;
          }
          for (; v105; v105 -= 2)
          {
            v110 = *v104;
            v111 = v104[1];
            v109 = (float64x2_t *)((char *)v104 + v28);
            v112 = *v109;
            v113 = v109[1];
            v104 = (float64x2_t *)((char *)v109 + v28);
            v114 = *v106++;
            v107 = vmlaq_laneq_f64(vmlaq_n_f64(v107, v110, v114.f64[0]), v112, v114, 1);
            v108 = vmlaq_laneq_f64(vmlaq_n_f64(v108, v111, v114.f64[0]), v113, v114, 1);
          }
          v115 = (float64x2_t *)((char *)v104 - v28 * (v102 - 3));
          v116 = (float64x2_t *)((char *)v106 - 8 * v102);
          v117 = vmulq_n_f64(v116[1], a7);
          v118 = vsubq_f64(v117, v108);
          v117.f64[1] = v118.f64[1];
          v119 = *v115;
          v120 = v115[1];
          v121 = (float64x2_t *)((char *)v115 - v28);
          v122 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v116, a7), v107), v119, v117, 1);
          *(_QWORD *)&v117.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(v118, v120, v117, 1);
          v123 = *v121;
          v124 = vmlsq_lane_f64(v122, *v121, v117.f64[0], 0);
          v123.f64[1] = v124.f64[1];
          v119.f64[0] = v121->f64[-a4];
          v7 = (int8x16_t)vmlsq_laneq_f64(v124, v119, v123, 1);
          *(_QWORD *)&v123.f64[0] = v7.i64[0];
          *v116 = v123;
          v116[1] = v117;
          v103 = (double *)((char *)v103 + v34);
          --v100;
        }
        while (v100);
      }
      v31 -= 32;
      v125 = v29 < 5;
      v29 -= 4;
    }
    while (!v125);
  }
}

void dtrsm_noPack_LUNN(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  int8x16_t v7;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  const double *v43;
  const double *v44;
  const double *v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t *v61;
  uint64_t v62;
  float64x2_t *v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  double v75;
  double v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t *v86;
  float64x2_t *v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double *v114;
  float64x2_t v115;
  float64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  uint64_t v119;
  float64x2_t *v120;
  uint64_t v121;
  double *v122;
  float64x2_t *v123;
  uint64_t v124;
  float64x2_t *v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t *v134;
  float64x2_t *v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t *v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  BOOL v146;

  v14 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v26 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
        v27 = (double *)(a5 + 8 * v14);
        v28 = a7 / *(double *)(a3 + 8 * (v14 * a4 + v14));
        v29 = __N;
        v30 = 1.0 / *(double *)(a3 + 8 * (a1 - 2 + (a1 - 2) * a4));
        do
        {
          v31 = *(v27 - 1);
          v32 = v28 * *v27;
          *v27 = v32;
          *(v27 - 1) = v30 * (v31 * a7 - v32 * v26);
          v27 += __incX;
          --v29;
        }
        while (v29);
      }
      v14 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v14 + v14 * a4)), (double *)(a5 + 8 * v14), __incX);
      v14 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v15 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
      v16 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 3));
      v17 = (a1 - 2) * a4;
      v18 = *(double *)(a3 + 8 * (v17 + a1 - 3));
      v19 = a7 / *(double *)(a3 + 8 * (v14 * a4 + v14));
      v20 = 1.0 / *(double *)(a3 + 8 * (a1 - 2 + v17));
      v21 = (double *)(a5 + 8 * v14);
      v22 = __N;
      v23 = 1.0 / *(double *)(a3 + 8 * (a1 - 3 + (a1 - 3) * a4));
      do
      {
        v24 = *(v21 - 1);
        v25 = v19 * *v21;
        *v21 = v25;
        *(double *)v7.i64 = v20 * (v24 * a7 - v25 * v15);
        *(v21 - 2) = v23 * -(v18 * *(double *)v7.i64 + v25 * v16 - *(v21 - 2) * a7);
        *(v21 - 1) = *(double *)v7.i64;
        v21 += __incX;
        --v22;
      }
      while (v22);
    }
    v14 = a1 - 4;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    v33 = 8 * a4;
    v34 = v14 + 1;
    v35 = a4 + 1;
    v36 = 3 * __incX;
    v37 = a5 + 8 * v14 + 8;
    v38 = 32 * __incX;
    v39 = 2 * __incX;
    v40 = 8 * __incX;
    do
    {
      v41 = v34 - 4;
      v42 = (const double *)(a3 + 8 * (v34 - 4) * a4 + 8 * (v34 - 4));
      v43 = (const double *)(a3 + 8 * (v34 - 3) * v35);
      v44 = (const double *)(a3 + 8 * (v34 - 2) * v35);
      v45 = (const double *)(a3 + 8 * (v34 - 1) * v35);
      v46 = vld1q_dup_f64(v42);
      v47 = vld1q_dup_f64(v43);
      v48 = vld1q_dup_f64(v44);
      v49 = vld1q_dup_f64(v45);
      v50 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v51 = vdivq_f64(v50, v46);
      v52 = vdivq_f64(v50, v47);
      v53 = vdivq_f64(v50, v48);
      v54 = vdivq_f64(v50, v49);
      if (__N < 4)
      {
        v55 = 0;
      }
      else
      {
        v55 = 0;
        v57 = a1 - v41;
        if (a1 - v41 <= 4)
          v57 = 4;
        v58 = (double *)v37;
        do
        {
          v59 = (float64x2_t *)&v58[(unint64_t)v40 / 8];
          v60 = (float64x2_t *)&v58[v39];
          v61 = (float64x2_t *)&v58[v36];
          v62 = v57 - 4;
          v63 = (float64x2_t *)v58;
          v56 = a3 + 8 * v41 + 8 * v34 * a4;
          v64 = (float64x2_t *)v56;
          v65 = (float64x2_t)veorq_s8(v7, v7);
          v66 = v65;
          v67 = v65;
          v68 = v65;
          v69 = v65;
          v70 = v65;
          v71 = v65;
          v72 = v65;
          if ((((_BYTE)v57 - 4) & 1) != 0)
          {
            v73 = *(float64x2_t *)(v56 + 16);
            v64 = (float64x2_t *)(v56 + v33);
            v63 = (float64x2_t *)(v58 + 1);
            v74 = v59->f64[0];
            v59 = (float64x2_t *)((char *)v59 + 8);
            v75 = v60->f64[0];
            v60 = (float64x2_t *)((char *)v60 + 8);
            v76 = v61->f64[0];
            v61 = (float64x2_t *)((char *)v61 + 8);
            v65 = vmlaq_n_f64(v65, *(float64x2_t *)v56, *v58);
            v67 = vmlaq_n_f64(v67, *(float64x2_t *)v56, v74);
            v69 = vmlaq_n_f64(v69, *(float64x2_t *)v56, v75);
            v71 = vmlaq_n_f64(v71, *(float64x2_t *)v56, v76);
            v66 = vmlaq_n_f64(v66, v73, *v58);
            v68 = vmlaq_n_f64(v68, v73, v74);
            v70 = vmlaq_n_f64(v70, v73, v75);
            v72 = vmlaq_n_f64(v72, v73, v76);
            v62 = v57 - 5;
          }
          for (; v62; v62 -= 2)
          {
            v78 = *v64;
            v79 = v64[1];
            v77 = (float64x2_t *)((char *)v64 + v33);
            v80 = *v77;
            v81 = v77[1];
            v64 = (float64x2_t *)((char *)v77 + v33);
            v82 = *v63++;
            v83 = *v59++;
            v84 = *v60++;
            v85 = *v61++;
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v78, v82.f64[0]), v80, v82, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v78, v83.f64[0]), v80, v83, 1);
            v69 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v78, v84.f64[0]), v80, v84, 1);
            v71 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v78, v85.f64[0]), v80, v85, 1);
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v79, v82.f64[0]), v81, v82, 1);
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v79, v83.f64[0]), v81, v83, 1);
            v70 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v79, v84.f64[0]), v81, v84, 1);
            v72 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v79, v85.f64[0]), v81, v85, 1);
          }
          v86 = (float64x2_t *)((char *)v64 - v33 * (v57 - 3));
          v87 = (float64x2_t *)((char *)v63 - 8 * v57);
          v88 = (float64x2_t *)((char *)v59 - 8 * v57);
          v89 = (float64x2_t *)((char *)v60 - 8 * v57);
          v90 = (float64x2_t *)((char *)v61 - 8 * v57);
          v91 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v87, a7), v65);
          v92 = (int64x2_t)vsubq_f64(vmulq_n_f64(v87[1], a7), v66);
          v93 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v88, a7), v67);
          v94 = (int64x2_t)vsubq_f64(vmulq_n_f64(v88[1], a7), v68);
          v95 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v89, a7), v69);
          v96 = (int64x2_t)vsubq_f64(vmulq_n_f64(v89[1], a7), v70);
          v97 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v90, a7), v71);
          v98 = (int64x2_t)vsubq_f64(vmulq_n_f64(v90[1], a7), v72);
          v99 = (float64x2_t)vtrn1q_s64(v92, v94);
          v100 = (float64x2_t)vtrn2q_s64(v91, v93);
          v101 = (float64x2_t)vtrn1q_s64(v91, v93);
          v102 = vmulq_f64((float64x2_t)vtrn2q_s64(v92, v94), v54);
          v103 = vmulq_f64((float64x2_t)vtrn2q_s64(v96, v98), v54);
          v104 = *v86;
          v105 = v86[1];
          v106 = (float64x2_t *)((char *)v86 - v33);
          v107 = vmlsq_laneq_f64(v100, v102, v104, 1);
          v108 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v95, v97), v103, v104, 1);
          v109 = vmlsq_lane_f64(v101, v102, v104.f64[0], 0);
          v110 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v95, v97), v103, v104.f64[0], 0);
          v111 = vmulq_f64(vmlsq_lane_f64(v99, v102, v105.f64[0], 0), v53);
          v112 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v96, v98), v103, v105.f64[0], 0), v53);
          v113 = *v106;
          v114 = &v106->f64[v33 / 0xFFFFFFFFFFFFFFF8];
          v115 = vmulq_f64(vmlsq_laneq_f64(v107, v111, v113, 1), v52);
          v116 = vmulq_f64(vmlsq_laneq_f64(v108, v112, v113, 1), v52);
          v117 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v109, v111, v113.f64[0], 0), v115, *v114, 0), v51);
          v118 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v110, v112, v113.f64[0], 0), v116, *v114, 0), v51);
          v7 = (int8x16_t)vtrn1q_s64(v117, (int64x2_t)v115);
          *v87 = (float64x2_t)v7;
          v87[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v111, (int64x2_t)v102);
          *(int64x2_t *)v88 = vtrn2q_s64(v117, (int64x2_t)v115);
          v88[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v111, (int64x2_t)v102);
          *(int64x2_t *)v89 = vtrn1q_s64(v118, (int64x2_t)v116);
          v89[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v112, (int64x2_t)v103);
          *(int64x2_t *)v90 = vtrn2q_s64(v118, (int64x2_t)v116);
          v90[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v112, (int64x2_t)v103);
          v55 += 4;
          v58 = (double *)((char *)v58 + v38);
        }
        while (v55 < __N - 3);
      }
      v119 = __N - v55;
      if (__N > v55)
      {
        v121 = a1 - v41;
        if (a1 - v41 <= 4)
          v121 = 4;
        v122 = (double *)(v37 + v40 * v55);
        do
        {
          v120 = (float64x2_t *)(a3 + 8 * v41 + 8 * v34 * a4);
          v123 = v120;
          v124 = v121 - 4;
          v125 = (float64x2_t *)v122;
          v126 = (float64x2_t)veorq_s8(v7, v7);
          v127 = v126;
          if ((((_BYTE)v121 - 4) & 1) != 0)
          {
            v123 = (float64x2_t *)((char *)v120 + v33);
            v125 = (float64x2_t *)(v122 + 1);
            v126 = vmlaq_n_f64(v126, *v120, *v122);
            v127 = vmlaq_n_f64(v127, v120[1], *v122);
            v124 = v121 - 5;
          }
          for (; v124; v124 -= 2)
          {
            v129 = *v123;
            v130 = v123[1];
            v128 = (float64x2_t *)((char *)v123 + v33);
            v131 = *v128;
            v132 = v128[1];
            v123 = (float64x2_t *)((char *)v128 + v33);
            v133 = *v125++;
            v126 = vmlaq_laneq_f64(vmlaq_n_f64(v126, v129, v133.f64[0]), v131, v133, 1);
            v127 = vmlaq_laneq_f64(vmlaq_n_f64(v127, v130, v133.f64[0]), v132, v133, 1);
          }
          v134 = (float64x2_t *)((char *)v123 - v33 * (v121 - 3));
          v135 = (float64x2_t *)((char *)v125 - 8 * v121);
          v136 = vmulq_n_f64(v135[1], a7);
          v137 = vsubq_f64(v136, v127);
          v136.f64[1] = v137.f64[1];
          v138 = vmulq_f64(v136, v54);
          v139 = *v134;
          v140 = v134[1];
          v141 = (float64x2_t *)((char *)v134 - v33);
          v142 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v135, a7), v126), v139, v138, 1);
          v138.f64[0] = vmlsq_laneq_f64(v137, v140, v138, 1).f64[0] * v53.f64[0];
          v143 = *v141;
          v144 = vmlsq_lane_f64(v142, *v141, v138.f64[0], 0);
          v143.f64[1] = v144.f64[1];
          v145 = vmulq_f64(v143, v52);
          v139.f64[0] = v141->f64[-a4];
          v7 = (int8x16_t)vmlsq_laneq_f64(v144, v139, v145, 1);
          *(double *)v7.i64 = *(double *)v7.i64 * v51.f64[0];
          *(_QWORD *)&v145.f64[0] = v7.i64[0];
          *v135 = v145;
          v135[1] = v138;
          v122 = (double *)((char *)v122 + v40);
          --v119;
        }
        while (v119);
      }
      v37 -= 32;
      v146 = v34 < 5;
      v34 -= 4;
    }
    while (!v146);
  }
}

uint64_t strmm_noPack_RLNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x2_t *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x2_t v33;
  float *v34;
  float v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float *v62;
  unint64_t *v63;
  float v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x2_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x2_t *v81;
  float *v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  float32x4_t v86;
  float *v87;
  float32x2_t v88;
  float *v89;
  float v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v93;
  float32x2_t *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t *v112;
  float32x2_t *v113;
  uint64_t v114;
  float32x2_t *v115;
  float *v116;
  unint64_t *v117;
  float v118;
  float32x2_t *v119;
  float32x2_t v120;
  unint64_t *v121;
  float32x2_t v122;
  float32x2_t *v123;
  float32x2_t v124;
  unint64_t *v125;
  float32x2_t v126;
  float32x2_t *v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unsigned __int32 *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  uint64_t v134;
  float32x2_t *v135;
  float *v136;
  float *v137;
  float32x4_t v138;
  float *v139;
  float32x4_t v140;
  float *v141;
  float32x2_t v142;
  float *v143;
  float v144;
  unsigned __int32 *v145;
  unsigned __int32 *v146;
  unsigned __int32 *v147;
  float *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  __int32 *v159;
  float32x2_t v160;
  float *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  float *v165;
  float *v166;
  uint64_t *v167;
  float v168;
  uint64_t v169;
  float *v170;
  float v171;
  float *v172;
  float v173;
  float v174;
  float *v175;
  float *v176;
  float v177;
  float v178;
  float *v179;
  float v180;
  float v181;
  float *v182;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = (float32x4_t *)((char *)v23 + v16);
        v25 = a2 - v19 - 4;
        v26 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 2 + 2];
        v27 = &v23->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v24;
        v30 = v24[1].f32;
        v33 = *v26;
        v32 = (float *)&v26[1];
        v35 = *v27;
        v34 = v27 + 1;
        a11 = *v22;
        v36 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        a13 = *v37;
        v38 = (float32x4_t *)((char *)v37 + v15);
        a14 = *v38;
        v39 = (float32x4_t *)((char *)v38 + v15);
        v40 = vmulq_n_f32(a14, v35);
        v41 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v31, 3), a12, *(float32x2_t *)v31.f32, 1), vmulq_laneq_f32(a13, v31, 2));
        v42 = vaddq_f32(vmulq_lane_f32(a14, v33, 1), vmulq_n_f32(a13, v33.f32[0]));
        v43 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmlaq_n_f32(vmulq_laneq_f32(a13, v29, 2), a11, v29.f32[0]));
        if ((v25 & 1) != 0)
        {
          v44 = *v39;
          v39 = (float32x4_t *)((char *)v39 + v15);
          v45 = *f32++;
          v46 = *v30++;
          v47 = *v32++;
          v48 = *v34++;
          v43 = vmlaq_n_f32(v43, v44, v45);
          v41 = vmlaq_n_f32(v41, v44, v46);
          v42 = vmlaq_n_f32(v42, v44, v47);
          v40 = vmlaq_n_f32(v40, v44, v48);
          v25 = a2 - v19 - 5;
        }
        if (v25)
        {
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          do
          {
            v54 = *v39;
            v53 = (float32x4_t *)((char *)v39 + v15);
            v55 = *v53;
            v39 = (float32x4_t *)((char *)v53 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14.i64[0] = *(_QWORD *)v34;
            v34 += 2;
            v43 = vmlaq_n_f32(v43, v54, a11.f32[0]);
            v41 = vmlaq_n_f32(v41, v54, a12.f32[0]);
            v42 = vmlaq_n_f32(v42, v54, a13.f32[0]);
            v40 = vmlaq_n_f32(v40, v54, a14.f32[0]);
            v49 = vmlaq_lane_f32(v49, v55, *(float32x2_t *)a11.f32, 1);
            v50 = vmlaq_lane_f32(v50, v55, *(float32x2_t *)a12.f32, 1);
            v51 = vmlaq_lane_f32(v51, v55, *(float32x2_t *)a13.f32, 1);
            v52 = vmlaq_lane_f32(v52, v55, *(float32x2_t *)a14.f32, 1);
            v56 = v25 <= 2;
            v25 -= 2;
          }
          while (!v56);
          v43 = vaddq_f32(v43, v49);
          v41 = vaddq_f32(v41, v50);
          v42 = vaddq_f32(v42, v51);
          v40 = vaddq_f32(v40, v52);
        }
        v14 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v39 - (a2 - v19) * v15);
        *v57 = vmulq_n_f32(v43, a7);
        v58 = (float32x4_t *)((char *)v57 + v15);
        *v58 = vmulq_n_f32(v41, a7);
        v59 = (float32x4_t *)((char *)v58 + v15);
        *v59 = vmulq_n_f32(v42, a7);
        *(float32x4_t *)((char *)v59 + v15) = v14;
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v56 = v21 <= 4;
        v21 -= 4;
      }
      while (!v56);
    }
    v60 = a2 & 3;
    if (!v20 && v60 != 0)
    {
      v61 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v62 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v60 != 1)
      {
        if (v60 != 2)
        {
          v64 = *v62;
          v63 = (unint64_t *)(v62 + 1);
          a13.i64[0] = *v63;
          v62 = (float *)((char *)v63 + v16);
          v66 = *v61;
          v65 = (float32x4_t *)((char *)v61 + v15);
          v68 = *v65;
          v67 = (float32x4_t *)((char *)v65 + v15);
          a12 = *v67;
          v69 = (float32x4_t *)((char *)v67 - 2 * v15);
          *v69 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v66, v64), vmulq_n_f32(v68, a13.f32[0])), vmulq_lane_f32(a12, *(float32x2_t *)a13.f32, 1)), a7);
          v61 = (float32x4_t *)((char *)v69 + v15);
        }
        v70 = *(float32x2_t *)v62;
        v62 = (float *)((char *)v62 + v16 + 4);
        v72 = *v61;
        v71 = (float32x4_t *)((char *)v61 + v15);
        a11 = *v71;
        v73 = (float32x4_t *)((char *)v71 - v15);
        *v73 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v72, v70.f32[0]), vmulq_lane_f32(a11, v70, 1)), a7);
        v61 = (float32x4_t *)((char *)v73 + v15);
      }
      *v61 = vmulq_n_f32(vmulq_n_f32(*v61, *v62), a7);
    }
    v17 += 4;
    v56 = v18 <= 4;
    v18 -= 4;
  }
  while (!v56);
  v56 = v18 <= -3;
  result = v18 + 3;
  if (!v56)
  {
LABEL_22:
    if (result > 1)
    {
      v74 = 0;
      v75 = __OFSUB__(a2, 3);
      v76 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v77 = (unint64_t *)(a5 + v74 * v15 + 4 * v17);
          v78 = (float32x4_t *)(a3 + v74 * v16 + 4 * v74);
          v79 = (float32x4_t *)((char *)v78 + v16);
          v80 = a2 - v74 - 4;
          v81 = (float32x2_t *)&v78->u32[(unint64_t)v16 / 2 + 2];
          v82 = &v78->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v84 = *v78;
          v83 = v78[1].f32;
          v86 = *v79;
          v85 = v79[1].f32;
          v88 = *v81;
          v87 = (float *)&v81[1];
          v90 = *v82;
          v89 = v82 + 1;
          a11.i64[0] = *v77;
          v91 = (unint64_t *)((char *)v77 + v15);
          a12.i64[0] = *v91;
          v92 = (unint64_t *)((char *)v91 + v15);
          a13.i64[0] = *v92;
          v93 = (unint64_t *)((char *)v92 + v15);
          a14.i64[0] = *v93;
          v94 = (float32x2_t *)((char *)v93 + v15);
          v95 = vmul_n_f32(*(float32x2_t *)a14.f32, v90);
          v96 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v86.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v86, 2));
          v97 = vadd_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, v88, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v88.f32[0]));
          v98 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v84, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v84.f32, 1), vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2), *(float32x2_t *)a11.f32, v84.f32[0]));
          if ((v80 & 1) != 0)
          {
            v99 = *v94;
            v94 = (float32x2_t *)((char *)v94 + v15);
            v100 = *v83++;
            v101 = *v85++;
            v102 = *v87++;
            v103 = *v89++;
            v98 = vmla_n_f32(v98, v99, v100);
            v96 = vmla_n_f32(v96, v99, v101);
            v97 = vmla_n_f32(v97, v99, v102);
            v95 = vmla_n_f32(v95, v99, v103);
            v80 = a2 - v74 - 5;
          }
          if (v80)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v109 = *v94;
              v108 = (float32x2_t *)((char *)v94 + v15);
              v110 = *v108;
              v94 = (float32x2_t *)((char *)v108 + v15);
              a11.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              a12.i64[0] = *(_QWORD *)v85;
              v85 += 2;
              a13.i64[0] = *(_QWORD *)v87;
              v87 += 2;
              a14.i64[0] = *(_QWORD *)v89;
              v89 += 2;
              v98 = vmla_n_f32(v98, v109, a11.f32[0]);
              v96 = vmla_n_f32(v96, v109, a12.f32[0]);
              v97 = vmla_n_f32(v97, v109, a13.f32[0]);
              v95 = vmla_n_f32(v95, v109, a14.f32[0]);
              v104 = vmla_lane_f32(v104, v110, *(float32x2_t *)a11.f32, 1);
              v105 = vmla_lane_f32(v105, v110, *(float32x2_t *)a12.f32, 1);
              v106 = vmla_lane_f32(v106, v110, *(float32x2_t *)a13.f32, 1);
              v107 = vmla_lane_f32(v107, v110, *(float32x2_t *)a14.f32, 1);
              v56 = v80 <= 2;
              v80 -= 2;
            }
            while (!v56);
            v98 = vadd_f32(v98, v104);
            v96 = vadd_f32(v96, v105);
            v97 = vadd_f32(v97, v106);
            v95 = vadd_f32(v95, v107);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v95, a7);
          v111 = (float32x2_t *)((char *)v94 - (a2 - v74) * v15);
          *v111 = vmul_n_f32(v98, a7);
          v112 = (float32x2_t *)((char *)v111 + v15);
          *v112 = vmul_n_f32(v96, a7);
          v113 = (float32x2_t *)((char *)v112 + v15);
          *v113 = vmul_n_f32(v97, a7);
          *(float32x2_t *)((char *)v113 + v15) = *(float32x2_t *)v14.f32;
          v74 += 4;
          v75 = __OFSUB__(v76, 4);
          v56 = v76 <= 4;
          v76 -= 4;
        }
        while (!v56);
      }
      v114 = a2 & 3;
      if (!v75 && v114 != 0)
      {
        v115 = (float32x2_t *)(a5 + v74 * v15 + 4 * v17);
        v116 = (float *)(a3 + v74 * v16 + 4 * v74);
        if (v114 != 1)
        {
          if (v114 != 2)
          {
            v118 = *v116;
            v117 = (unint64_t *)(v116 + 1);
            a13.i64[0] = *v117;
            v116 = (float *)((char *)v117 + v16);
            v120 = *v115;
            v119 = (float32x2_t *)((char *)v115 + v15);
            v122 = *v119;
            v121 = (unint64_t *)((char *)v119 + v15);
            a12.i64[0] = *v121;
            v123 = (float32x2_t *)&v121[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v123 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v120, v118), vmul_n_f32(v122, a13.f32[0])), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1)), a7);
            v115 = (float32x2_t *)((char *)v123 + v15);
          }
          v124 = *(float32x2_t *)v116;
          v116 = (float *)((char *)v116 + v16 + 4);
          v126 = *v115;
          v125 = (unint64_t *)((char *)v115 + v15);
          a11.i64[0] = *v125;
          v127 = (float32x2_t *)((char *)v125 - v15);
          *v127 = vmul_n_f32(vadd_f32(vmul_n_f32(v126, v124.f32[0]), vmul_lane_f32(*(float32x2_t *)a11.f32, v124, 1)), a7);
          v115 = (float32x2_t *)((char *)v127 + v15);
        }
        *v115 = vmul_n_f32(vmul_n_f32(*v115, *v116), a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v128 = 0;
      v129 = __OFSUB__(a2, 3);
      v130 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v131 = (unsigned __int32 *)(a5 + v128 * v15 + 4 * v17);
          v132 = (float32x4_t *)(a3 + v128 * v16 + 4 * v128);
          v133 = (float32x4_t *)((char *)v132 + v16);
          v134 = a2 - v128 - 4;
          v135 = (float32x2_t *)&v132->u32[(unint64_t)v16 / 2 + 2];
          v136 = &v132->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v138 = *v132;
          v137 = v132[1].f32;
          v140 = *v133;
          v139 = v133[1].f32;
          v142 = *v135;
          v141 = (float *)&v135[1];
          v144 = *v136;
          v143 = v136 + 1;
          a11.i32[0] = *v131;
          v145 = &v131[(unint64_t)v15 / 4];
          a12.i32[0] = *v145;
          v146 = &v145[(unint64_t)v15 / 4];
          a13.i32[0] = *v146;
          v147 = &v146[(unint64_t)v15 / 4];
          a14.i32[0] = *v147;
          v148 = (float *)&v147[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v140.i32[0] = 0;
          v149 = vmulq_f32(v138, a11);
          v150 = vmulq_f32(v140, a11);
          v151 = vmul_f32(v142, *(float32x2_t *)a13.f32);
          v14.f32[0] = v144 * a14.f32[0];
          v152 = (float32x2_t)vpaddq_f32(v149, v149).u64[0];
          v153 = (float32x2_t)vpaddq_f32(v150, v150).u64[0];
          if ((v134 & 1) != 0)
          {
            v154 = *v148;
            v148 = (float *)((char *)v148 + v15);
            v155 = *v137++;
            v156 = *v139++;
            v157 = *v141++;
            v158 = *v143++;
            v152.f32[0] = vaddv_f32(v152) + (float)(v154 * v155);
            v153.f32[0] = vaddv_f32(v153) + (float)(v154 * v156);
            v151.f32[0] = vaddv_f32(v151) + (float)(v154 * v157);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v154 * v158);
            v134 = a2 - v128 - 5;
          }
          if (v134)
          {
            do
            {
              v160.f32[0] = *v148;
              v159 = (__int32 *)&v148[(unint64_t)v15 / 4];
              v160.i32[1] = *v159;
              v148 = (float *)&v159[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v137;
              v137 += 2;
              a12.i64[0] = *(_QWORD *)v139;
              v139 += 2;
              a13.i64[0] = *(_QWORD *)v141;
              v141 += 2;
              a14.i64[0] = *(_QWORD *)v143;
              v143 += 2;
              v152 = vmla_f32(v152, v160, *(float32x2_t *)a11.f32);
              v153 = vmla_f32(v153, v160, *(float32x2_t *)a12.f32);
              v151 = vmla_f32(v151, v160, *(float32x2_t *)a13.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v160, *(float32x2_t *)a14.f32);
              v56 = v134 <= 2;
              v134 -= 2;
            }
            while (!v56);
          }
          v161 = (float *)((char *)v148 - (a2 - v128) * v15);
          *v161 = vaddv_f32(v152) * a7;
          v162 = &v161[(unint64_t)v15 / 4];
          *v162 = vaddv_f32(v153) * a7;
          v163 = &v162[(unint64_t)v15 / 4];
          *v163 = vaddv_f32(v151) * a7;
          v163[(unint64_t)v15 / 4] = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v128 += 4;
          v129 = __OFSUB__(v130, 4);
          v56 = v130 <= 4;
          v130 -= 4;
        }
        while (!v56);
      }
      v164 = a2 & 3;
      if (!v129 && v164 != 0)
      {
        v165 = (float *)(a5 + v128 * v15 + 4 * v17);
        v166 = (float *)(a3 + v128 * v16 + 4 * v128);
        if (v164 != 1)
        {
          if (v164 != 2)
          {
            v168 = *v166;
            v167 = (uint64_t *)(v166 + 1);
            v169 = *v167;
            v166 = (float *)((char *)v167 + v16);
            v171 = *v165;
            v170 = &v165[(unint64_t)v15 / 4];
            v173 = *v170;
            v172 = &v170[(unint64_t)v15 / 4];
            v174 = *v172;
            v175 = &v172[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v175 = (float)((float)((float)(v168 * v171) + (float)(*(float *)&v169 * v173))
                          + (float)(*((float *)&v169 + 1) * v174))
                  * a7;
            v165 = &v175[(unint64_t)v15 / 4];
          }
          v177 = *v166;
          v176 = v166 + 1;
          v178 = *v176;
          v166 = &v176[(unint64_t)v16 / 4];
          v180 = *v165;
          v179 = &v165[(unint64_t)v15 / 4];
          v181 = *v179;
          v182 = &v179[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v182 = (float)((float)(v177 * v180) + (float)(v178 * v181)) * a7;
          v165 = &v182[(unint64_t)v15 / 4];
        }
        *v165 = (float)(*v165 * *v166) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RLNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, double a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x2_t *v25;
  float *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  BOOL v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float *v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x2_t *v75;
  float *v76;
  float *v77;
  float *v78;
  float32x4_t v79;
  float *v80;
  float32x2_t v81;
  float *v82;
  float v83;
  unint64_t *v84;
  unint64_t *v85;
  float32x2_t *v86;
  float32x2_t *v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t *v110;
  float32x2_t v111;
  unint64_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  unint64_t *v115;
  float32x2_t v116;
  float32x2_t *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  unsigned __int32 *v121;
  float32x4_t *v122;
  uint64_t v123;
  float32x2_t *v124;
  float *v125;
  float *v126;
  float *v127;
  float32x4_t v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  unsigned __int32 *v135;
  float *v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  __int32 *v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  float *v160;
  float *v161;
  float v162;
  float v163;
  float *v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v25 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 4 + 2];
        v26 = &v23->f32[(unint64_t)v16 / 2 + 3];
        v27 = &v23[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v25;
        v30 = (float *)&v25[1];
        v33 = *v26;
        v32 = v26 + 1;
        a11 = *v22;
        v34 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a13 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v38 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        v39 = vmlaq_n_f32(a13, v38, v33);
        v40 = vaddq_f32(vmlaq_lane_f32(a12, v38, v31, 1), vmulq_n_f32(a13, v31.f32[0]));
        v41 = vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a11, v38, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmulq_laneq_f32(a13, v29, 2));
        if ((v24 & 1) != 0)
        {
          v42 = *v37;
          v37 = (float32x4_t *)((char *)v37 + v15);
          v43 = *f32++;
          v44 = *v30++;
          v45 = *v32++;
          v46 = *v27++;
          v41 = vmlaq_n_f32(v41, v42, v43);
          v40 = vmlaq_n_f32(v40, v42, v44);
          v39 = vmlaq_n_f32(v39, v42, v45);
          v38 = vmlaq_n_f32(v38, v42, v46);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          do
          {
            v52 = *v37;
            v51 = (float32x4_t *)((char *)v37 + v15);
            v53 = *v51;
            v37 = (float32x4_t *)((char *)v51 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14 = *(double *)v27;
            v27 += 2;
            v41 = vmlaq_n_f32(v41, v52, a11.f32[0]);
            v40 = vmlaq_n_f32(v40, v52, a12.f32[0]);
            v39 = vmlaq_n_f32(v39, v52, a13.f32[0]);
            v38 = vmlaq_n_f32(v38, v52, *(float *)&a14);
            v47 = vmlaq_lane_f32(v47, v53, *(float32x2_t *)a11.f32, 1);
            v48 = vmlaq_lane_f32(v48, v53, *(float32x2_t *)a12.f32, 1);
            v49 = vmlaq_lane_f32(v49, v53, *(float32x2_t *)a13.f32, 1);
            v50 = vmlaq_lane_f32(v50, v53, *(float32x2_t *)&a14, 1);
            v54 = v24 <= 2;
            v24 -= 2;
          }
          while (!v54);
          v41 = vaddq_f32(v41, v47);
          v40 = vaddq_f32(v40, v48);
          v39 = vaddq_f32(v39, v49);
          v38 = vaddq_f32(v38, v50);
        }
        v14 = vmulq_n_f32(v39, a7);
        v55 = (float32x4_t *)((char *)v37 - (a2 - v19) * v15);
        *v55 = vmulq_n_f32(v41, a7);
        v56 = (float32x4_t *)((char *)v55 + v15);
        *v56 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v56 + v15);
        *v57 = v14;
        *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v38, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v54 = v21 <= 4;
        v21 -= 4;
      }
      while (!v54);
    }
    v58 = a2 & 3;
    if (!v20 && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v60 = (float *)(a3 + v19 * v16 + 4 * v19 + 4);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          a13.i64[0] = *(_QWORD *)v60;
          v60 = (float *)((char *)v60 + v16 + 4);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v15);
          v64 = *v61;
          v63 = (float32x4_t *)((char *)v61 + v15);
          a12 = *v63;
          v65 = (float32x4_t *)((char *)v63 - 2 * v15);
          *v65 = vmulq_n_f32(vmlaq_lane_f32(vmlaq_n_f32(v62, v64, a13.f32[0]), a12, *(float32x2_t *)a13.f32, 1), a7);
          v59 = (float32x4_t *)((char *)v65 + v15);
        }
        v67 = *v59;
        v66 = (float32x4_t *)((char *)v59 + v15);
        a11 = *v66;
        v68 = (float32x4_t *)((char *)v66 - v15);
        *v68 = vmulq_n_f32(vmlaq_n_f32(v67, a11, *v60), a7);
        v59 = (float32x4_t *)((char *)v68 + v15);
      }
      *v59 = vmulq_n_f32(*v59, a7);
    }
    v17 += 4;
    v54 = v18 <= 4;
    v18 -= 4;
  }
  while (!v54);
  v54 = v18 <= -3;
  result = v18 + 3;
  if (!v54)
  {
LABEL_22:
    if (result > 1)
    {
      v69 = 0;
      v70 = __OFSUB__(a2, 3);
      v71 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v72 = (unint64_t *)(a5 + v69 * v15 + 4 * v17);
          v73 = (float32x4_t *)(a3 + v69 * v16 + 4 * v69);
          v74 = a2 - v69 - 4;
          v75 = (float32x2_t *)&v73->u32[(unint64_t)v16 / 4 + 2];
          v76 = &v73->f32[(unint64_t)v16 / 2 + 3];
          v77 = &v73[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v79 = *v73;
          v78 = v73[1].f32;
          v81 = *v75;
          v80 = (float *)&v75[1];
          v83 = *v76;
          v82 = v76 + 1;
          a11.i64[0] = *v72;
          v84 = (unint64_t *)((char *)v72 + v15);
          a12.i64[0] = *v84;
          v85 = (unint64_t *)((char *)v84 + v15);
          a13.i64[0] = *v85;
          v86 = (float32x2_t *)((char *)v85 + v15);
          v88 = *v86;
          v87 = (float32x2_t *)((char *)v86 + v15);
          v89 = vmla_n_f32(*(float32x2_t *)a13.f32, v88, v83);
          v90 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v88, v81, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v81.f32[0]));
          v91 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)a11.f32, v88, v79, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v79.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v79, 2));
          if ((v74 & 1) != 0)
          {
            v92 = *v87;
            v87 = (float32x2_t *)((char *)v87 + v15);
            v93 = *v78++;
            v94 = *v80++;
            v95 = *v82++;
            v96 = *v77++;
            v91 = vmla_n_f32(v91, v92, v93);
            v90 = vmla_n_f32(v90, v92, v94);
            v89 = vmla_n_f32(v89, v92, v95);
            v88 = vmla_n_f32(v88, v92, v96);
            v74 = a2 - v69 - 5;
          }
          if (v74)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v102 = *v87;
              v101 = (float32x2_t *)((char *)v87 + v15);
              v103 = *v101;
              v87 = (float32x2_t *)((char *)v101 + v15);
              a11.i64[0] = *(_QWORD *)v78;
              v78 += 2;
              a12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              a13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              a14 = *(double *)v77;
              v77 += 2;
              v91 = vmla_n_f32(v91, v102, a11.f32[0]);
              v90 = vmla_n_f32(v90, v102, a12.f32[0]);
              v89 = vmla_n_f32(v89, v102, a13.f32[0]);
              v88 = vmla_n_f32(v88, v102, *(float *)&a14);
              v97 = vmla_lane_f32(v97, v103, *(float32x2_t *)a11.f32, 1);
              v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
              v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
              v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)&a14, 1);
              v54 = v74 <= 2;
              v74 -= 2;
            }
            while (!v54);
            v91 = vadd_f32(v91, v97);
            v90 = vadd_f32(v90, v98);
            v89 = vadd_f32(v89, v99);
            v88 = vadd_f32(v88, v100);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v89, a7);
          v104 = (float32x2_t *)((char *)v87 - (a2 - v69) * v15);
          *v104 = vmul_n_f32(v91, a7);
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v90, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = *(float32x2_t *)v14.f32;
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v88, a7);
          v69 += 4;
          v70 = __OFSUB__(v71, 4);
          v54 = v71 <= 4;
          v71 -= 4;
        }
        while (!v54);
      }
      v107 = a2 & 3;
      if (!v70 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v69 * v15 + 4 * v17);
        v109 = (float *)(a3 + v69 * v16 + 4 * v69 + 4);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            a13.i64[0] = *(_QWORD *)v109;
            v109 = (float *)((char *)v109 + v16 + 4);
            v111 = *v108;
            v110 = (float32x2_t *)((char *)v108 + v15);
            v113 = *v110;
            v112 = (unint64_t *)((char *)v110 + v15);
            a12.i64[0] = *v112;
            v114 = (float32x2_t *)&v112[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v114 = vmul_n_f32(vmla_lane_f32(vmla_n_f32(v111, v113, a13.f32[0]), *(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1), a7);
            v108 = (float32x2_t *)((char *)v114 + v15);
          }
          v116 = *v108;
          v115 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v115;
          v117 = (float32x2_t *)((char *)v115 - v15);
          *v117 = vmul_n_f32(vmla_n_f32(v116, *(float32x2_t *)a11.f32, *v109), a7);
          v108 = (float32x2_t *)((char *)v117 + v15);
        }
        *v108 = vmul_n_f32(*v108, a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v118 = 0;
      v119 = __OFSUB__(a2, 3);
      v120 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v121 = (unsigned __int32 *)(a5 + v118 * v15 + 4 * v17);
          v122 = (float32x4_t *)(a3 + v118 * v16 + 4 * v118);
          v123 = a2 - v118 - 4;
          v124 = (float32x2_t *)&v122->u32[(unint64_t)v16 / 4 + 2];
          v125 = &v122->f32[(unint64_t)v16 / 2 + 3];
          v126 = &v122[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v128 = *v122;
          v127 = v122[1].f32;
          v130 = *v124;
          v129 = (float *)&v124[1];
          v132 = *v125;
          v131 = v125 + 1;
          a11.i32[0] = *v121;
          v133 = &v121[(unint64_t)v15 / 4];
          a12.i32[0] = *v133;
          v134 = &v133[(unint64_t)v15 / 4];
          a13.i32[0] = *v134;
          v135 = &v134[(unint64_t)v15 / 4];
          LODWORD(a14) = *v135;
          v136 = (float *)&v135[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)&a14);
          a11.i64[1] = a13.i64[0];
          v128.i32[0] = 0;
          v137 = vmulq_f32(v128, a11);
          v139 = vmul_f32(v130, *(float32x2_t *)a13.f32);
          v138 = (float32x2_t)LODWORD(a14);
          v140 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
          v139.f32[0] = vaddv_f32(v139) + a12.f32[0];
          v14.f32[0] = (float)(v132 * *(float *)&a14) + a13.f32[0];
          v140.f32[0] = vaddv_f32(v140) + a11.f32[0];
          if ((v123 & 1) != 0)
          {
            v141 = *v136;
            v136 = (float *)((char *)v136 + v15);
            v142 = *v127++;
            v143 = *v129++;
            v144 = *v131++;
            v145 = *v126++;
            v140.f32[0] = vaddv_f32(v140) + (float)(v141 * v142);
            v139.f32[0] = vaddv_f32(v139) + (float)(v141 * v143);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v141 * v144);
            v138.f32[0] = vaddv_f32(v138) + (float)(v141 * v145);
            v123 = a2 - v118 - 5;
          }
          if (v123)
          {
            do
            {
              v147.f32[0] = *v136;
              v146 = (__int32 *)&v136[(unint64_t)v15 / 4];
              v147.i32[1] = *v146;
              v136 = (float *)&v146[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v127;
              v127 += 2;
              a12.i64[0] = *(_QWORD *)v129;
              v129 += 2;
              a13.i64[0] = *(_QWORD *)v131;
              v131 += 2;
              a14 = *(double *)v126;
              v126 += 2;
              v140 = vmla_f32(v140, v147, *(float32x2_t *)a11.f32);
              v139 = vmla_f32(v139, v147, *(float32x2_t *)a12.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v147, *(float32x2_t *)a13.f32);
              v138 = vmla_f32(v138, v147, *(float32x2_t *)&a14);
              v54 = v123 <= 2;
              v123 -= 2;
            }
            while (!v54);
          }
          v148 = (float *)((char *)v136 - (a2 - v118) * v15);
          *v148 = vaddv_f32(v140) * a7;
          v149 = &v148[(unint64_t)v15 / 4];
          *v149 = vaddv_f32(v139) * a7;
          v150 = &v149[(unint64_t)v15 / 4];
          *v150 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v150[(unint64_t)v15 / 4] = vaddv_f32(v138) * a7;
          v118 += 4;
          v119 = __OFSUB__(v120, 4);
          v54 = v120 <= 4;
          v120 -= 4;
        }
        while (!v54);
      }
      v151 = a2 & 3;
      if (!v119 && v151 != 0)
      {
        v152 = (float *)(a5 + v118 * v15 + 4 * v17);
        v153 = (float *)(a3 + v118 * v16 + 4 * v118 + 4);
        if (v151 != 1)
        {
          if (v151 != 2)
          {
            v154 = *(_QWORD *)v153;
            v153 = (float *)((char *)v153 + v16 + 4);
            v156 = *v152;
            v155 = &v152[(unint64_t)v15 / 4];
            v158 = *v155;
            v157 = &v155[(unint64_t)v15 / 4];
            v159 = *v157;
            v160 = &v157[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v160 = (float)((float)(v156 + (float)(*(float *)&v154 * v158)) + (float)(*((float *)&v154 + 1) * v159))
                  * a7;
            v152 = &v160[(unint64_t)v15 / 4];
          }
          v162 = *v152;
          v161 = &v152[(unint64_t)v15 / 4];
          v163 = *v161;
          v164 = &v161[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v164 = (float)(v162 + (float)(*v153 * v163)) * a7;
          v152 = &v164[(unint64_t)v15 / 4];
        }
        *v152 = *v152 * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RLTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL i;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t *v46;
  float32x4_t *v47;
  uint64_t v48;
  float32x4_t *v49;
  float *v50;
  float *v51;
  float v52;
  float *v53;
  float v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t v64;
  BOOL j;
  float32x2_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t *v98;
  float32x2_t *v99;
  uint64_t v100;
  float32x2_t *v101;
  float *v102;
  float *v103;
  float v104;
  float *v105;
  float v106;
  float32x2_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  float32x2_t *v114;
  float32x2_t v115;
  uint64_t v116;
  BOOL k;
  float *v118;
  float32x4_t *v119;
  float32x4_t *v120;
  uint64_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float *v126;
  float v127;
  float *v128;
  float v129;
  float *v130;
  float v131;
  float v132;
  float *v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  float *v141;
  float v142;
  float v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  __int32 *v152;
  __int32 *v153;
  float32x2_t v154;
  float v155;
  __int32 *v156;
  float32x2_t v157;
  float *v158;
  float v159;
  float v160;
  float *v161;
  float v162;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (result <= 3)
    goto LABEL_21;
  v10 = result - 3;
  do
  {
    v11 = a2;
    for (i = __OFSUB__(a2, 3); v11 > 3; i = __OFSUB__(v11, 3))
    {
      v11 -= 4;
      v13 = (float32x4_t *)(a5 + v11 * v7 + 4 * v9);
      v14 = (float32x4_t *)(a3 + 4 * v11);
      v15 = (float32x4_t *)((char *)v14 + v11 * v8);
      v16 = v11;
      v18 = *v15;
      v17 = (float32x4_t *)((char *)v15 + v8);
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v22 = *v13;
      v21 = (float32x4_t *)((char *)v13 + v7);
      v24 = *v21;
      v23 = (float32x4_t *)((char *)v21 + v7);
      v26 = *v23;
      v25 = (float32x4_t *)((char *)v23 + v7);
      v27 = *v25;
      v28 = (float32x4_t *)((char *)v25 + v7 - v11 * v7 + -4 * v7);
      v29 = vmulq_n_f32(v22, v18.f32[0]);
      v30 = vaddq_f32(vmulq_lane_f32(v22, *(float32x2_t *)v18.f32, 1), vmulq_lane_f32(v24, *(float32x2_t *)v19.f32, 1));
      v31 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v22, v18, 2), v26, COERCE_FLOAT(*v20)), vmulq_laneq_f32(v24, v19, 2));
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v22, v18, 3), v26, *v20, 1), vmlaq_n_f32(vmulq_laneq_f32(v24, v19, 3), v27, v20->f32[(unint64_t)v8 / 4 + 1]));
      if ((v11 & 1) != 0)
      {
        v33 = *v28;
        v28 = (float32x4_t *)((char *)v28 + v7);
        v34 = *v14;
        v14 = (float32x4_t *)((char *)v14 + v8);
        v29 = vmlaq_n_f32(v29, v33, v34.f32[0]);
        v30 = vmlaq_lane_f32(v30, v33, *(float32x2_t *)v34.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v33, v34, 2);
        v32 = vmlaq_laneq_f32(v32, v33, v34, 3);
        v16 = v11 - 1;
      }
      if (v16)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v28;
          v39 = (float32x4_t *)((char *)v28 + v7);
          v41 = *v39;
          v28 = (float32x4_t *)((char *)v39 + v7);
          v43 = *v14;
          v42 = (float32x4_t *)((char *)v14 + v8);
          v44 = *v42;
          v14 = (float32x4_t *)((char *)v42 + v8);
          v29 = vmlaq_n_f32(v29, v40, v43.f32[0]);
          v30 = vmlaq_lane_f32(v30, v40, *(float32x2_t *)v43.f32, 1);
          v31 = vmlaq_laneq_f32(v31, v40, v43, 2);
          v32 = vmlaq_laneq_f32(v32, v40, v43, 3);
          v35 = vmlaq_n_f32(v35, v41, v44.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)v44.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, v44, 2);
          v38 = vmlaq_laneq_f32(v38, v41, v44, 3);
          v45 = v16 <= 2;
          v16 -= 2;
        }
        while (!v45);
        v29 = vaddq_f32(v29, v35);
        v30 = vaddq_f32(v30, v36);
        v31 = vaddq_f32(v31, v37);
        v32 = vaddq_f32(v32, v38);
      }
      *v28 = vmulq_n_f32(v29, a7);
      v46 = (float32x4_t *)((char *)v28 + v7);
      *v46 = vmulq_n_f32(v30, a7);
      v47 = (float32x4_t *)((char *)v46 + v7);
      *v47 = vmulq_n_f32(v31, a7);
      *(float32x4_t *)((char *)v47 + v7) = vmulq_n_f32(v32, a7);
    }
    v48 = a2 & 3;
    if (!i && v48 != 0)
    {
      v49 = (float32x4_t *)(a5 + 4 * v9);
      v50 = (float *)(a3 + 4 * (v11 - 1));
      if (v48 != 1)
      {
        if (v48 != 2)
        {
          v52 = *v50;
          v51 = &v50[(unint64_t)v8 / 4];
          v54 = *v51;
          v53 = &v51[(unint64_t)v8 / 4];
          v56 = *v49;
          v55 = (float32x4_t *)((char *)v49 + v7);
          v58 = *v55;
          v57 = (float32x4_t *)((char *)v55 + v7);
          v59 = *v53;
          v50 = &v53[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
          *v57 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v56, v52), vmulq_n_f32(v58, v54)), vmulq_n_f32(*v57, v59)), a7);
          v49 = (float32x4_t *)((char *)v57 - 2 * v7);
        }
        v60 = *v50;
        v61 = v50[(unint64_t)v8 / 4];
        v63 = *v49;
        v62 = (float32x4_t *)((char *)v49 + v7);
        --v50;
        *v62 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v63, v60), vmulq_n_f32(*v62, v61)), a7);
        v49 = (float32x4_t *)((char *)v62 - v7);
      }
      *v49 = vmulq_n_f32(vmulq_n_f32(*v49, *v50), a7);
    }
    v9 += 4;
    v45 = v10 <= 4;
    v10 -= 4;
  }
  while (!v45);
  v45 = v10 <= -3;
  result = v10 + 3;
  if (!v45)
  {
LABEL_21:
    if (result > 1)
    {
      v64 = a2;
      for (j = __OFSUB__(a2, 3); v64 > 3; j = __OFSUB__(v64, 3))
      {
        v64 -= 4;
        v66 = (float32x2_t *)(a5 + v64 * v7 + 4 * v9);
        v67 = (float32x4_t *)(a3 + 4 * v64);
        v68 = (float32x4_t *)((char *)v67 + v64 * v8);
        v69 = v64;
        v71 = *v68;
        v70 = (float32x4_t *)((char *)v68 + v8);
        v72 = *v70;
        v73 = (float32x2_t *)&v70->u32[(unint64_t)v8 / 4 + 2];
        v75 = *v66;
        v74 = (float32x2_t *)((char *)v66 + v7);
        v77 = *v74;
        v76 = (float32x2_t *)((char *)v74 + v7);
        v79 = *v76;
        v78 = (float32x2_t *)((char *)v76 + v7);
        v80 = *v78;
        v81 = (float32x2_t *)((char *)v78 + v7 - v64 * v7 + -4 * v7);
        v82 = vmul_n_f32(v75, v71.f32[0]);
        v83 = vadd_f32(vmul_lane_f32(v75, *(float32x2_t *)v71.f32, 1), vmul_lane_f32(v77, *(float32x2_t *)v72.f32, 1));
        v84 = vadd_f32(vmla_n_f32(vmul_laneq_f32(v75, v71, 2), v79, COERCE_FLOAT(*v73)), vmul_laneq_f32(v77, v72, 2));
        v85 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v75, v71, 3), v79, *v73, 1), vmla_n_f32(vmul_laneq_f32(v77, v72, 3), v80, v73->f32[(unint64_t)v8 / 4 + 1]));
        if ((v64 & 1) != 0)
        {
          v86 = *v81;
          v81 = (float32x2_t *)((char *)v81 + v7);
          v87 = *v67;
          v67 = (float32x4_t *)((char *)v67 + v8);
          v82 = vmla_n_f32(v82, v86, v87.f32[0]);
          v83 = vmla_lane_f32(v83, v86, *(float32x2_t *)v87.f32, 1);
          v84 = vmla_laneq_f32(v84, v86, v87, 2);
          v85 = vmla_laneq_f32(v85, v86, v87, 3);
          v69 = v64 - 1;
        }
        if (v69)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v91 = 0;
          do
          {
            v93 = *v81;
            v92 = (float32x2_t *)((char *)v81 + v7);
            v94 = *v92;
            v81 = (float32x2_t *)((char *)v92 + v7);
            v96 = *v67;
            v95 = (float32x4_t *)((char *)v67 + v8);
            v97 = *v95;
            v67 = (float32x4_t *)((char *)v95 + v8);
            v82 = vmla_n_f32(v82, v93, v96.f32[0]);
            v83 = vmla_lane_f32(v83, v93, *(float32x2_t *)v96.f32, 1);
            v84 = vmla_laneq_f32(v84, v93, v96, 2);
            v85 = vmla_laneq_f32(v85, v93, v96, 3);
            v88 = vmla_n_f32(v88, v94, v97.f32[0]);
            v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)v97.f32, 1);
            v90 = vmla_laneq_f32(v90, v94, v97, 2);
            v91 = vmla_laneq_f32(v91, v94, v97, 3);
            v45 = v69 <= 2;
            v69 -= 2;
          }
          while (!v45);
          v82 = vadd_f32(v82, v88);
          v83 = vadd_f32(v83, v89);
          v84 = vadd_f32(v84, v90);
          v85 = vadd_f32(v85, v91);
        }
        *v81 = vmul_n_f32(v82, a7);
        v98 = (float32x2_t *)((char *)v81 + v7);
        *v98 = vmul_n_f32(v83, a7);
        v99 = (float32x2_t *)((char *)v98 + v7);
        *v99 = vmul_n_f32(v84, a7);
        *(float32x2_t *)((char *)v99 + v7) = vmul_n_f32(v85, a7);
      }
      v100 = a2 & 3;
      if (!j && v100 != 0)
      {
        v101 = (float32x2_t *)(a5 + 4 * v9);
        v102 = (float *)(a3 + 4 * (v64 - 1));
        if (v100 != 1)
        {
          if (v100 != 2)
          {
            v104 = *v102;
            v103 = &v102[(unint64_t)v8 / 4];
            v106 = *v103;
            v105 = &v103[(unint64_t)v8 / 4];
            v108 = *v101;
            v107 = (float32x2_t *)((char *)v101 + v7);
            v110 = *v107;
            v109 = (float32x2_t *)((char *)v107 + v7);
            v111 = *v105;
            v102 = &v105[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
            *v109 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v108, v104), vmul_n_f32(v110, v106)), vmul_n_f32(*v109, v111)), a7);
            v101 = &v109[v7 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v112 = *v102;
          v113 = v102[(unint64_t)v8 / 4];
          --v102;
          v115 = *v101;
          v114 = (float32x2_t *)((char *)v101 + v7);
          *v114 = vmul_n_f32(vadd_f32(vmul_n_f32(v115, v112), vmul_n_f32(*v114, v113)), a7);
          v101 = (float32x2_t *)((char *)v114 - v7);
        }
        *v101 = vmul_n_f32(vmul_n_f32(*v101, *v102), a7);
      }
      v9 += 2;
      result -= 2;
    }
    if (result)
    {
      v116 = a2;
      for (k = __OFSUB__(a2, 3); v116 > 3; k = __OFSUB__(v116, 3))
      {
        v116 -= 4;
        v118 = (float *)(a5 + v116 * v7 + 4 * v9);
        v119 = (float32x4_t *)(a3 + 4 * v116);
        v120 = (float32x4_t *)((char *)v119 + v116 * v8);
        v121 = v116;
        v123 = *v120;
        v122 = (float32x4_t *)((char *)v120 + v8);
        v124 = *v122;
        v125 = (float32x2_t *)&v122->u32[(unint64_t)v8 / 4 + 2];
        v127 = *v118;
        v126 = &v118[(unint64_t)v7 / 4];
        v129 = *v126;
        v128 = &v126[(unint64_t)v7 / 4];
        v131 = *v128;
        v130 = &v128[(unint64_t)v7 / 4];
        v132 = *v130;
        v133 = (float *)((char *)&v130[(unint64_t)v7 / 4] - v116 * v7 + -4 * v7);
        v124.i32[0] = 0;
        v134.i32[0] = 0;
        v134.f32[1] = v125->f32[(unint64_t)v8 / 4 + 1] * v132;
        v135 = vadd_f32(v134, vmul_n_f32(*v125, v131));
        v136.i64[0] = 0;
        *(float32x2_t *)&v136.u32[2] = v135;
        v137 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v123, v127), v124, v129), v136);
        if ((v116 & 1) != 0)
        {
          v138 = *v133;
          v133 = (float *)((char *)v133 + v7);
          v139 = *v119;
          v119 = (float32x4_t *)((char *)v119 + v8);
          v137 = vmlaq_n_f32(v137, v139, v138);
          v121 = v116 - 1;
        }
        if (v121)
        {
          v140 = 0uLL;
          do
          {
            v142 = *v133;
            v141 = &v133[(unint64_t)v7 / 4];
            v143 = *v141;
            v133 = &v141[(unint64_t)v7 / 4];
            v145 = *v119;
            v144 = (float32x4_t *)((char *)v119 + v8);
            v146 = *v144;
            v119 = (float32x4_t *)((char *)v144 + v8);
            v137 = vmlaq_n_f32(v137, v145, v142);
            v140 = vmlaq_n_f32(v140, v146, v143);
            v45 = v121 <= 2;
            v121 -= 2;
          }
          while (!v45);
          v137 = vaddq_f32(v137, v140);
        }
        v147 = vmulq_n_f32(v137, a7);
        *v133 = v147.f32[0];
        v148 = &v133[(unint64_t)v7 / 4];
        *v148 = v147.f32[1];
        v149 = &v148[(unint64_t)v7 / 4];
        *v149 = v147.f32[2];
        v149[(unint64_t)v7 / 4] = v147.f32[3];
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v9);
        v152 = (__int32 *)(a3 + 4 * (v116 - 1));
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v154.i32[0] = *v152;
            v153 = &v152[(unint64_t)v8 / 4];
            v154.i32[1] = *v153;
            v155 = *(float *)&v153[(unint64_t)v8 / 4];
            v152 = &v153[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v157.i32[0] = *v151;
            v156 = &v151[(unint64_t)v7 / 4];
            v157.i32[1] = *v156;
            v158 = (float *)&v156[(unint64_t)v7 / 4];
            *v158 = (float)(vaddv_f32(vmul_f32(v157, v154)) + (float)(v155 * *v158)) * a7;
            v151 = (__int32 *)&v158[v7 / 0xFFFFFFFFFFFFFFFELL];
          }
          v159 = *(float *)v152;
          v160 = *(float *)&v152[(unint64_t)v8 / 4];
          --v152;
          v162 = *(float *)v151;
          v161 = (float *)&v151[(unint64_t)v7 / 4];
          *v161 = (float)((float)(v162 * v159) + (float)(*v161 * v160)) * a7;
          v151 = (__int32 *)&v161[v7 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = (float)(*(float *)v151 * *(float *)v152) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RLTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL i;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x2_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  BOOL v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t *v47;
  float *v48;
  float v49;
  float v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  BOOL j;
  float32x2_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t v63;
  float32x2_t *v64;
  unint64_t *v65;
  float32x2_t v66;
  unint64_t *v67;
  unint64_t *v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  uint64_t v84;
  float32x2_t *v85;
  float *v86;
  float v87;
  float v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;
  float32x2_t *v93;
  float32x2_t v94;
  uint64_t v95;
  BOOL k;
  unsigned __int32 *v97;
  float32x4_t *v98;
  float32x4_t *v99;
  uint64_t v100;
  float32x4_t v101;
  float32x2_t *v102;
  unsigned __int32 *v103;
  unsigned __int32 *v104;
  unsigned __int32 *v105;
  float *v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  float32x4_t v113;
  float *v114;
  float v115;
  float v116;
  float32x4_t *v117;
  float32x4_t v118;
  float *v119;
  float *v120;
  uint64_t v121;
  __int32 *v122;
  __int32 *v123;
  __int32 *v124;
  float32x2_t v125;
  __int32 *v126;
  float32x2_t v127;
  float *v128;
  float *v129;
  float v130;

  v14 = 4 * a6;
  v15 = 4 * a4;
  v16 = 0;
  if (result <= 3)
    goto LABEL_21;
  v17 = result - 3;
  do
  {
    v18 = a2;
    for (i = __OFSUB__(a2, 3); v18 > 3; i = __OFSUB__(v18, 3))
    {
      v18 -= 4;
      v20 = (float32x4_t *)(a5 + v18 * v14 + 4 * v16);
      v21 = (float32x4_t *)(a3 + 4 * v18);
      v22 = (float32x4_t *)((char *)v21 + v18 * v15);
      v23 = v18;
      v24 = *v22;
      v25 = (float32x2_t *)&v22->u32[(unint64_t)v15 / 4 + 2];
      v27 = *v20;
      v26 = (float32x4_t *)((char *)v20 + v14);
      a12 = *v26;
      v28 = (float32x4_t *)((char *)v26 + v14);
      a13 = *v28;
      v29 = (float32x4_t *)((char *)v28 + v14);
      a14 = *v29;
      v30 = (float32x4_t *)((char *)v29 + v14 - v18 * v14 + -4 * v14);
      v31 = vmlaq_lane_f32(a12, v27, *(float32x2_t *)v24.f32, 1);
      v32 = vaddq_f32(vmlaq_laneq_f32(a13, v27, v24, 2), vmulq_n_f32(a12, COERCE_FLOAT(*v25)));
      v33 = vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32(a14, v27, v24, 3), a13, v25->f32[(unint64_t)v15 / 4 + 1]), vmulq_lane_f32(a12, *v25, 1));
      if ((v18 & 1) != 0)
      {
        v34 = *v30;
        v30 = (float32x4_t *)((char *)v30 + v14);
        a11 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v15);
        v27 = vmlaq_n_f32(v27, v34, a11.f32[0]);
        v31 = vmlaq_lane_f32(v31, v34, *(float32x2_t *)a11.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v34, a11, 2);
        v33 = vmlaq_laneq_f32(v33, v34, a11, 3);
        v23 = v18 - 1;
      }
      if (v23)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v30;
          v39 = (float32x4_t *)((char *)v30 + v14);
          v41 = *v39;
          v30 = (float32x4_t *)((char *)v39 + v14);
          a11 = *v21;
          v42 = (float32x4_t *)((char *)v21 + v15);
          a12 = *v42;
          v21 = (float32x4_t *)((char *)v42 + v15);
          v27 = vmlaq_n_f32(v27, v40, a11.f32[0]);
          v31 = vmlaq_lane_f32(v31, v40, *(float32x2_t *)a11.f32, 1);
          v32 = vmlaq_laneq_f32(v32, v40, a11, 2);
          v33 = vmlaq_laneq_f32(v33, v40, a11, 3);
          v35 = vmlaq_n_f32(v35, v41, a12.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)a12.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, a12, 2);
          v38 = vmlaq_laneq_f32(v38, v41, a12, 3);
          v43 = v23 <= 2;
          v23 -= 2;
        }
        while (!v43);
        v27 = vaddq_f32(v27, v35);
        v31 = vaddq_f32(v31, v36);
        v32 = vaddq_f32(v32, v37);
        v33 = vaddq_f32(v33, v38);
      }
      *v30 = vmulq_n_f32(v27, a7);
      v44 = (float32x4_t *)((char *)v30 + v14);
      *v44 = vmulq_n_f32(v31, a7);
      v45 = (float32x4_t *)((char *)v44 + v14);
      *v45 = vmulq_n_f32(v32, a7);
      *(float32x4_t *)((char *)v45 + v14) = vmulq_n_f32(v33, a7);
    }
    v46 = a2 & 3;
    if (!i && v46 != 0)
    {
      v47 = (float32x4_t *)(a5 + 4 * v16);
      v48 = (float *)(a3 + 4 * (v18 - 1));
      if (v46 != 1)
      {
        if (v46 != 2)
        {
          v49 = *v48;
          v50 = v48[(unint64_t)v15 / 4];
          v52 = *v47;
          v51 = (float32x4_t *)((char *)v47 + v14);
          v54 = *v51;
          v53 = (float32x4_t *)((char *)v51 + v14);
          --v48;
          a12 = vmlaq_n_f32(*v53, v52, v49);
          *v53 = vmulq_n_f32(vaddq_f32(a12, vmulq_n_f32(v54, v50)), a7);
          v47 = (float32x4_t *)((char *)v53 - 2 * v14);
        }
        v56 = *v47;
        v55 = (float32x4_t *)((char *)v47 + v14);
        a11 = vmlaq_n_f32(*v55, v56, *v48);
        *v55 = vmulq_n_f32(a11, a7);
        v47 = (float32x4_t *)((char *)v55 - v14);
      }
      *v47 = vmulq_n_f32(*v47, a7);
    }
    v16 += 4;
    v43 = v17 <= 4;
    v17 -= 4;
  }
  while (!v43);
  v43 = v17 <= -3;
  result = v17 + 3;
  if (!v43)
  {
LABEL_21:
    if (result > 1)
    {
      v57 = a2;
      for (j = __OFSUB__(a2, 3); v57 > 3; j = __OFSUB__(v57, 3))
      {
        v57 -= 4;
        v59 = (float32x2_t *)(a5 + v57 * v14 + 4 * v16);
        v60 = (float32x4_t *)(a3 + 4 * v57);
        v61 = (float32x4_t *)((char *)v60 + v57 * v15);
        v62 = v57;
        v63 = *v61;
        v64 = (float32x2_t *)&v61->u32[(unint64_t)v15 / 4 + 2];
        v66 = *v59;
        v65 = (unint64_t *)((char *)v59 + v14);
        a12.i64[0] = *v65;
        v67 = (unint64_t *)((char *)v65 + v14);
        a13.i64[0] = *v67;
        v68 = (unint64_t *)((char *)v67 + v14);
        a14.i64[0] = *v68;
        v69 = (float32x2_t *)((char *)v68 + v14 - v57 * v14 + -4 * v14);
        v70 = vmla_lane_f32(*(float32x2_t *)a12.f32, v66, *(float32x2_t *)v63.f32, 1);
        v71 = vadd_f32(vmla_laneq_f32(*(float32x2_t *)a13.f32, v66, v63, 2), vmul_n_f32(*(float32x2_t *)a12.f32, COERCE_FLOAT(*v64)));
        v72 = vadd_f32(vmla_n_f32(vmla_laneq_f32(*(float32x2_t *)a14.f32, v66, v63, 3), *(float32x2_t *)a13.f32, v64->f32[(unint64_t)v15 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)a12.f32, *v64, 1));
        if ((v57 & 1) != 0)
        {
          v73 = *v69;
          v69 = (float32x2_t *)((char *)v69 + v14);
          a11 = *v60;
          v60 = (float32x4_t *)((char *)v60 + v15);
          v66 = vmla_n_f32(v66, v73, a11.f32[0]);
          v70 = vmla_lane_f32(v70, v73, *(float32x2_t *)a11.f32, 1);
          v71 = vmla_laneq_f32(v71, v73, a11, 2);
          v72 = vmla_laneq_f32(v72, v73, a11, 3);
          v62 = v57 - 1;
        }
        if (v62)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          do
          {
            v79 = *v69;
            v78 = (float32x2_t *)((char *)v69 + v14);
            v80 = *v78;
            v69 = (float32x2_t *)((char *)v78 + v14);
            a11 = *v60;
            v81 = (float32x4_t *)((char *)v60 + v15);
            a12 = *v81;
            v60 = (float32x4_t *)((char *)v81 + v15);
            v66 = vmla_n_f32(v66, v79, a11.f32[0]);
            v70 = vmla_lane_f32(v70, v79, *(float32x2_t *)a11.f32, 1);
            v71 = vmla_laneq_f32(v71, v79, a11, 2);
            v72 = vmla_laneq_f32(v72, v79, a11, 3);
            v74 = vmla_n_f32(v74, v80, a12.f32[0]);
            v75 = vmla_lane_f32(v75, v80, *(float32x2_t *)a12.f32, 1);
            v76 = vmla_laneq_f32(v76, v80, a12, 2);
            v77 = vmla_laneq_f32(v77, v80, a12, 3);
            v43 = v62 <= 2;
            v62 -= 2;
          }
          while (!v43);
          v66 = vadd_f32(v66, v74);
          v70 = vadd_f32(v70, v75);
          v71 = vadd_f32(v71, v76);
          v72 = vadd_f32(v72, v77);
        }
        *v69 = vmul_n_f32(v66, a7);
        v82 = (float32x2_t *)((char *)v69 + v14);
        *v82 = vmul_n_f32(v70, a7);
        v83 = (float32x2_t *)((char *)v82 + v14);
        *v83 = vmul_n_f32(v71, a7);
        *(float32x2_t *)((char *)v83 + v14) = vmul_n_f32(v72, a7);
      }
      v84 = a2 & 3;
      if (!j && v84 != 0)
      {
        v85 = (float32x2_t *)(a5 + 4 * v16);
        v86 = (float *)(a3 + 4 * (v57 - 1));
        if (v84 != 1)
        {
          if (v84 != 2)
          {
            v87 = *v86;
            v88 = v86[(unint64_t)v15 / 4];
            v90 = *v85;
            v89 = (float32x2_t *)((char *)v85 + v14);
            v92 = *v89;
            v91 = (float32x2_t *)((char *)v89 + v14);
            --v86;
            *(float32x2_t *)a12.f32 = vmla_n_f32(*v91, v90, v87);
            *v91 = vmul_n_f32(vadd_f32(*(float32x2_t *)a12.f32, vmul_n_f32(v92, v88)), a7);
            v85 = &v91[v14 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v94 = *v85;
          v93 = (float32x2_t *)((char *)v85 + v14);
          *(float32x2_t *)a11.f32 = vmla_n_f32(*v93, v94, *v86);
          *v93 = vmul_n_f32(*(float32x2_t *)a11.f32, a7);
          v85 = (float32x2_t *)((char *)v93 - v14);
        }
        *v85 = vmul_n_f32(*v85, a7);
      }
      v16 += 2;
      result -= 2;
    }
    if (result)
    {
      v95 = a2;
      for (k = __OFSUB__(a2, 3); v95 > 3; k = __OFSUB__(v95, 3))
      {
        v95 -= 4;
        v97 = (unsigned __int32 *)(a5 + v95 * v14 + 4 * v16);
        v98 = (float32x4_t *)(a3 + 4 * v95);
        v99 = (float32x4_t *)((char *)v98 + v95 * v15);
        v100 = v95;
        v101 = *v99;
        v102 = (float32x2_t *)&v99->u32[(unint64_t)v15 / 4 + 2];
        a11.i32[0] = *v97;
        v103 = &v97[(unint64_t)v14 / 4];
        a12.i32[0] = *v103;
        v104 = &v103[(unint64_t)v14 / 4];
        a13.i32[0] = *v104;
        v105 = &v104[(unint64_t)v14 / 4];
        a14.i32[0] = *v105;
        v106 = (float *)((char *)&v105[(unint64_t)v14 / 4] - v95 * v14 + -4 * v14);
        v101.i32[0] = 0;
        *(int32x2_t *)v107.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)&v107.u32[2] = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v108.i32[0] = 0;
        v108.f32[1] = v102->f32[(unint64_t)v15 / 4 + 1] * a13.f32[0];
        v109 = vadd_f32(v108, vmul_n_f32(*v102, a12.f32[0]));
        v110.i64[0] = 0;
        *(float32x2_t *)&v110.u32[2] = v109;
        v111 = vaddq_f32(vaddq_f32(vmulq_n_f32(v101, a11.f32[0]), v107), v110);
        if ((v95 & 1) != 0)
        {
          v112 = *v106;
          v106 = (float *)((char *)v106 + v14);
          a11 = *v98;
          v98 = (float32x4_t *)((char *)v98 + v15);
          v111 = vmlaq_n_f32(v111, a11, v112);
          v100 = v95 - 1;
        }
        if (v100)
        {
          v113 = 0uLL;
          do
          {
            v115 = *v106;
            v114 = &v106[(unint64_t)v14 / 4];
            v116 = *v114;
            v106 = &v114[(unint64_t)v14 / 4];
            a11 = *v98;
            v117 = (float32x4_t *)((char *)v98 + v15);
            a12 = *v117;
            v98 = (float32x4_t *)((char *)v117 + v15);
            v111 = vmlaq_n_f32(v111, a11, v115);
            v113 = vmlaq_n_f32(v113, a12, v116);
            v43 = v100 <= 2;
            v100 -= 2;
          }
          while (!v43);
          v111 = vaddq_f32(v111, v113);
        }
        v118 = vmulq_n_f32(v111, a7);
        *v106 = v118.f32[0];
        v119 = &v106[(unint64_t)v14 / 4];
        *v119 = v118.f32[1];
        v120 = &v119[(unint64_t)v14 / 4];
        *v120 = v118.f32[2];
        v120[(unint64_t)v14 / 4] = v118.f32[3];
      }
      v121 = a2 & 3;
      if (!k && v121 != 0)
      {
        v122 = (__int32 *)(a5 + 4 * v16);
        v123 = (__int32 *)(a3 + 4 * (v95 - 1));
        if (v121 != 1)
        {
          if (v121 != 2)
          {
            v125.i32[0] = *v123;
            v124 = &v123[(unint64_t)v15 / 4];
            v125.i32[1] = *v124;
            v123 = &v124[v15 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v127.i32[0] = *v122;
            v126 = &v122[(unint64_t)v14 / 4];
            v127.i32[1] = *v126;
            v128 = (float *)&v126[(unint64_t)v14 / 4];
            *v128 = (float)(vaddv_f32(vmul_f32(v127, v125)) + *v128) * a7;
            v122 = (__int32 *)&v128[v14 / 0xFFFFFFFFFFFFFFFELL];
          }
          v130 = *(float *)v122;
          v129 = (float *)&v122[(unint64_t)v14 / 4];
          *v129 = (float)((float)(v130 * *(float *)v123) + *v129) * a7;
          v122 = (__int32 *)&v129[v14 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v122 = *(float *)v122 * a7;
      }
    }
  }
  return result;
}

void dgebpScale_8M1N(float64x2_t *a1, const double *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, double a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *f64;
  uint64_t v17;
  float64x2_t *v18;
  const double *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  double v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  uint64_t v36;
  double v37;

  if (__N >= 1 && a6 >= 1)
  {
    v11 = 0;
    v12 = a5 - 7;
    if (a5 <= 0)
      v13 = -(-a5 & 7);
    else
      v13 = a5 & 7;
    v14 = __N & 1;
    v15 = 8 * (v14 + __N);
    do
    {
      f64 = (_OWORD *)(a3 + 8 * v11 * a4);
      if (a5 < 8)
      {
        v18 = a1;
      }
      else
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v19 = __Y;
          v20 = __N;
          v22 = *(float64x2_t *)f64;
          v23 = *((float64x2_t *)f64 + 1);
          v21 = (float64x2_t *)(f64 + 2);
          v24 = vmulq_n_f64(v22, a8);
          v25 = vmulq_n_f64(v23, a8);
          v26 = vmulq_n_f64(*v21, a8);
          v27 = vmulq_n_f64(v21[1], a8);
          v28 = v21 - 2;
          do
          {
            v29 = *v19++;
            v31 = *v18;
            v32 = v18[1];
            v30 = v18 + 2;
            v33 = *v30;
            v34 = v30[1];
            v18 = v30 + 2;
            v24 = vmlaq_n_f64(v24, v31, v29);
            v25 = vmlaq_n_f64(v25, v32, v29);
            v26 = vmlaq_n_f64(v26, v33, v29);
            v27 = vmlaq_n_f64(v27, v34, v29);
            --v20;
          }
          while (v20);
          *v28 = v24;
          v28[1] = v25;
          v35 = v28 + 2;
          *v35 = v26;
          v35[1] = v27;
          f64 = (_OWORD *)v35[2].f64;
          v17 += 8;
        }
        while (v17 < v12);
      }
      if (v13 >= 1)
      {
        v36 = v13;
        do
        {
          v37 = *(double *)f64;
          *(double *)f64 = cblas_ddot(__N, v18->f64, 1, __Y, 1) + a8 * v37;
          f64 = (_OWORD *)((char *)f64 + 8);
          v18 = (float64x2_t *)((char *)v18 + v15);
          --v36;
        }
        while (v36);
      }
      __Y += __N + v14;
      ++v11;
    }
    while (v11 != a6);
  }
}

void dgebp_8M1N(float64x2_t *a1, const double *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *f64;
  uint64_t v15;
  float64x2_t *v16;
  const double *v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  double v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  uint64_t v32;

  if (__N >= 1 && a6 >= 1)
  {
    v9 = 0;
    v10 = a5 - 7;
    if (a5 <= 0)
      v11 = -(-a5 & 7);
    else
      v11 = a5 & 7;
    v12 = __N & 1;
    v13 = 8 * (v12 + __N);
    do
    {
      f64 = (_OWORD *)(a3 + 8 * v9 * a4);
      if (a5 < 8)
      {
        v16 = a1;
      }
      else
      {
        v15 = 0;
        v16 = a1;
        do
        {
          v17 = __Y;
          v18 = __N;
          v20 = *(float64x2_t *)f64;
          v21 = *((float64x2_t *)f64 + 1);
          v19 = (float64x2_t *)(f64 + 2);
          v22 = *v19;
          v23 = v19[1];
          v24 = v19 - 2;
          do
          {
            v25 = *v17++;
            v27 = *v16;
            v28 = v16[1];
            v26 = v16 + 2;
            v29 = *v26;
            v30 = v26[1];
            v16 = v26 + 2;
            v20 = vmlaq_n_f64(v20, v27, v25);
            v21 = vmlaq_n_f64(v21, v28, v25);
            v22 = vmlaq_n_f64(v22, v29, v25);
            v23 = vmlaq_n_f64(v23, v30, v25);
            --v18;
          }
          while (v18);
          *v24 = v20;
          v24[1] = v21;
          v31 = v24 + 2;
          *v31 = v22;
          v31[1] = v23;
          f64 = (_OWORD *)v31[2].f64;
          v15 += 8;
        }
        while (v15 < v10);
      }
      if (v11 >= 1)
      {
        v32 = v11;
        do
        {
          *(double *)f64 = cblas_ddot(__N, v16->f64, 1, __Y, 1) + *(double *)f64;
          f64 = (_OWORD *)((char *)f64 + 8);
          v16 = (float64x2_t *)((char *)v16 + v13);
          --v32;
        }
        while (v32);
      }
      __Y += __N + v12;
      ++v9;
    }
    while (v9 != a6);
  }
}

double *dgebpScale_1M4N(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64_t *v18;
  float64_t *v19;

  if (a5 >= 1)
  {
    v7 = a4;
    do
    {
      v8 = a6;
      v9 = a2;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v11 = &a3[v7 + v7];
      v12.f64[0] = *v11;
      v12.f64[1] = v11[a4];
      v13 = vmulq_n_f64(v10, a7);
      v14 = vmulq_n_f64(v12, a7);
      do
      {
        v15 = *v9;
        v16 = v9[1];
        v9 += 2;
        v17 = *result++;
        v13 = vmlaq_n_f64(v13, v15, v17);
        v14 = vmlaq_n_f64(v14, v16, v17);
        --v8;
      }
      while (v8);
      v18 = &a3[v7];
      *a3++ = v13.f64[0];
      *v18 = v13.f64[1];
      v19 = &v18[v7];
      *v19 = v14.f64[0];
      v19[a4] = v14.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *dgebp_1M4N(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  float64_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64_t *v15;
  float64_t *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    do
    {
      v7 = a2;
      v8 = a6;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v9 = &a3[v6 + v6];
      v11.f64[0] = *v9;
      v11.f64[1] = v9[a4];
      do
      {
        v12 = *v7;
        v13 = v7[1];
        v7 += 2;
        v14 = *result++;
        v10 = vmlaq_n_f64(v10, v12, v14);
        v11 = vmlaq_n_f64(v11, v13, v14);
        --v8;
      }
      while (v8);
      v15 = &a3[v6];
      *a3++ = v10.f64[0];
      *v15 = v10.f64[1];
      v16 = &v15[v6];
      *v16 = v11.f64[0];
      v16[a4] = v11.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t Accelerate_AR_sQRSolve_fallback_NEWLAPACK(int a1, unsigned int a2, int a3, int a4, __CLPK_real *a5, __CLPK_integer a6, __CLPK_real *a7, __CLPK_real *a8, int *a9)
{
  int v11;
  int v12;
  __CLPK_real *v13;
  float v14;
  float v15;
  int v17;
  char v18;
  char v19;
  int v20;
  __CLPK_integer __lda;
  int v22;
  unsigned int v23;
  __CLPK_integer v24;
  unsigned int v25;

  v11 = (int)a5;
  v24 = 1;
  v25 = 0;
  v22 = a3;
  v23 = a2;
  v12 = *a9;
  v20 = *a9;
  __lda = a6;
  if (a1)
  {
    LOBYTE(v17) = 78;
    Accelerate_AR_sgels((uint64_t)&v17, (__CLPK_integer *)&v23, &v22, &v24, a5, &__lda, a7, (__CLPK_integer *)&v23, a8, &v20, (int *)&v25);
  }
  else
  {
    v19 = 76;
    v18 = 84;
    if (v12 == -1)
    {
      Accelerate_AR_sgeqrf(&v23, &v22, (uint64_t)a5, &__lda, a8, a8, &v20, (int *)&v25);
      v14 = *a8;
      Accelerate_AR_sormqr((uint64_t)&v19, (uint64_t)&v18, (int)&v23, (int)&v24, (int)&v22, v11, (int)&__lda, (int)a8, a7, (__CLPK_integer *)&v23, a8, &v20, (int *)&v25);
      v15 = *a8;
      if (v14 >= *a8)
        v15 = v14;
      *a8 = v15;
    }
    else
    {
      v17 = v12 - a3;
      v13 = &a8[a3];
      Accelerate_AR_sgeqrf(&v23, &v22, (uint64_t)a5, &__lda, a8, v13, &v17, (int *)&v25);
      Accelerate_AR_sormqr((uint64_t)&v19, (uint64_t)&v18, (int)&v23, (int)&v24, (int)&v22, v11, (int)&__lda, (int)a8, a7, (__CLPK_integer *)&v23, v13, &v17, (int *)&v25);
    }
  }
  return v25;
}

uint64_t Accelerate_AR_dQRSolve_fallback_NEWLAPACK(int a1, __CLPK_integer a2, __CLPK_integer a3, uint64_t a4, __CLPK_doublereal *a5, __CLPK_integer a6, __CLPK_doublereal *a7, __CLPK_doublereal *a8, int *a9)
{
  int v11;
  int v12;
  __CLPK_doublereal *v13;
  double v14;
  double v15;
  int v17;
  char v18;
  char v19;
  int v20;
  __CLPK_integer v21;
  __CLPK_integer __n2;
  __CLPK_integer __n1;
  __CLPK_integer v24;
  unsigned int v25;

  v11 = (int)a5;
  v24 = 1;
  v25 = 0;
  __n2 = a3;
  __n1 = a2;
  v12 = *a9;
  v20 = *a9;
  v21 = a6;
  if (a1)
  {
    LOBYTE(v17) = 78;
    Accelerate_AR_dgels((uint64_t)&v17, &__n1, &__n2, &v24, a5, &v21, a7, &__n1, a8, &v20, (int *)&v25);
  }
  else
  {
    v19 = 76;
    v18 = 84;
    if (v12 == -1)
    {
      Accelerate_AR_dgeqrf(&__n1, &__n2, (uint64_t)a5, &v21, a8, a8, &v20, (int *)&v25);
      v14 = *a8;
      Accelerate_AR_dormqr((uint64_t)&v19, (uint64_t)&v18, (int)&__n1, (int)&v24, (int)&__n2, v11, (int)&v21, (int)a8, a7, &__n1, a8, &v20, (int *)&v25);
      v15 = *a8;
      if (v14 >= *a8)
        v15 = v14;
      *a8 = v15;
    }
    else
    {
      v17 = v12 - a3;
      v13 = &a8[a3];
      Accelerate_AR_dgeqrf(&__n1, &__n2, (uint64_t)a5, &v21, a8, v13, &v17, (int *)&v25);
      Accelerate_AR_dormqr((uint64_t)&v19, (uint64_t)&v18, (int)&__n1, (int)&v24, (int)&__n2, v11, (int)&v21, (int)a8, a7, &__n1, v13, &v17, (int *)&v25);
    }
  }
  return v25;
}

uint64_t Accelerate_AR_sQRMargin_fallback_NEWLAPACK(unsigned int a1, int a2, int a3, uint64_t a4, __CLPK_integer a5, __CLPK_real *a6, int *a7)
{
  int v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  int v15;
  int v16;
  __CLPK_integer __lda;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v19 = a1;
  v20 = 0;
  __lda = a5;
  v18 = a2;
  v8 = *a7;
  v16 = v8;
  if (v8 == -1)
  {
    Accelerate_AR_sgeqrf(&v19, &v18, a4, &__lda, a6, a6, &v16, (int *)&v20);
  }
  else
  {
    LODWORD(v10) = a2;
    v15 = v8 - a2;
    Accelerate_AR_sgeqrf(&v19, &v18, a4, &__lda, a6, &a6[a2], &v15, (int *)&v20);
    if ((int)v10 >= 1)
    {
      v10 = (int)v10;
      v11 = (char *)(a4 + 4);
      v12 = 4 * a5 + 4;
      v13 = 4 * (int)v10 - 4;
      do
      {
        bzero(v11, v13);
        v11 += v12;
        v13 -= 4;
        --v10;
      }
      while (v10);
    }
  }
  return v20;
}

uint64_t Accelerate_AR_dQRMargin_fallback_NEWLAPACK(__CLPK_integer a1, __CLPK_integer a2, uint64_t a3, uint64_t a4, __CLPK_integer a5, __CLPK_doublereal *a6, int *a7)
{
  int v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  int v15;
  int v16;
  __CLPK_integer v17;
  __CLPK_integer __n2;
  __CLPK_integer __n1;
  unsigned int v20;

  __n1 = a1;
  v20 = 0;
  v17 = a5;
  __n2 = a2;
  v8 = *a7;
  v16 = v8;
  if (v8 == -1)
  {
    Accelerate_AR_dgeqrf(&__n1, &__n2, a4, &v17, a6, a6, &v16, (int *)&v20);
  }
  else
  {
    LODWORD(v10) = a2;
    v15 = v8 - a2;
    Accelerate_AR_dgeqrf(&__n1, &__n2, a4, &v17, a6, &a6[a2], &v15, (int *)&v20);
    if ((int)v10 >= 1)
    {
      v10 = (int)v10;
      v11 = (char *)(a4 + 8);
      v12 = 8 * a5 + 8;
      v13 = 8 * (int)v10 - 8;
      do
      {
        bzero(v11, v13);
        v11 += v12;
        v13 -= 8;
        --v10;
      }
      while (v10);
    }
  }
  return v20;
}

void APL_seq_dsyrk(int a1, uint64_t a2, uint64_t a3, uint64_t a4, const double *a5, uint64_t a6, double *a7, uint64_t a8, double a9, double a10, double a11, int8x16_t a12, __n128 a13, float64x2_t a14, float64x2_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55)
{
  BOOL v58;
  _BOOL4 v59;

  if (a3)
  {
    v58 = a9 == 0.0 || a4 == 0;
    v59 = v58;
    if (!v59 || a10 != 1.0)
    {
      if (v59)
      {
        dtrScale(a1, a3, a7, a8, a10);
      }
      else
      {
        if (a10 == 0.0)
          dtrScale(a1, a3, a7, a8, a10);
        if (a3 > 45 || a4 >= 46)
        {
          if (a1 == 121)
            dsyrk_Pack_Upper(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
              (uint64_t)a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              *((uint64_t *)&a33 + 1),
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              SDWORD2(a37),
              a38,
              a39,
              *((uint64_t *)&a39 + 1),
              a40,
              SDWORD2(a40),
              SHIDWORD(a40),
              a41,
              *((uint64_t *)&a41 + 1),
              (void *)a42,
              *((uint64_t *)&a42 + 1),
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55);
          else
            dsyrk_Pack_Lower(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, SHIDWORD(a20), a21, a22, a23, a24, a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40,
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48);
        }
        else if (a1 == 121)
        {
          if ((_DWORD)a2 == 111)
            dsyrk_noPack_UN(a3, a4, a5, a6, a7, a8, a9, a10);
          else
            dsyrk_noPack_UT(a3, a4, a5, a6, a7, a8, a9, a10);
        }
        else if ((_DWORD)a2 == 111)
        {
          dsyrk_noPack_LN(a3, a4, a5, a6, a7, a8, a9, a10);
        }
        else
        {
          dsyrk_noPack_LT(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
        }
      }
    }
  }
}

double *dgebpUnalignedC_8M4N(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t *v60;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = _X2;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v24 = *_X2;
      v25 = _X2[1];
      v26 = _X2[2];
      v27 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      v32 = _X2[2];
      v33 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      v38 = _X2[2];
      v39 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v41 = *_X2;
      v42 = _X2[1];
      v43 = _X2[2];
      v44 = _X2[3];
      v46 = *a2;
      v47 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      do
      {
        v51 = v13;
        v52 = v14;
        v24 = vmlaq_n_f64(v24, v13, v46.f64[0]);
        v30 = vmlaq_laneq_f64(v30, v13, v46, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v36 = vmlaq_n_f64(v36, v51, v47.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v51, v47, 1);
        v54 = *_X6;
        v55 = _X6[1];
        _X6 += 2;
        v56 = v15;
        v25 = vmlaq_n_f64(v25, v52, v46.f64[0]);
        v31 = vmlaq_laneq_f64(v31, v52, v46, 1);
        v57 = v16;
        v37 = vmlaq_n_f64(v37, v52, v47.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v52, v47, 1);
        v15 = *v53;
        v16 = v53[1];
        result = v53[2].f64;
        v26 = vmlaq_n_f64(v26, v56, v46.f64[0]);
        v32 = vmlaq_laneq_f64(v32, v56, v46, 1);
        v38 = vmlaq_n_f64(v38, v56, v47.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v56, v47, 1);
        v27 = vmlaq_n_f64(v27, v57, v46.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v57, v46, 1);
        v46 = v54;
        v39 = vmlaq_n_f64(v39, v57, v47.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v57, v47, 1);
        v47 = v55;
        --v17;
      }
      while (v17);
      v58 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v24;
      v10[1] = v25;
      v10[2] = v26;
      v10[3] = v27;
      v10 += 4;
      *v58 = v30;
      v58[1] = v31;
      v58[2] = v32;
      v58[3] = v33;
      v59 = (float64x2_t *)((char *)v58 + v11);
      *v59 = v36;
      v59[1] = v37;
      v59[2] = v38;
      v59[3] = v39;
      v60 = (float64x2_t *)((char *)v59 + v11);
      *v60 = v41;
      v60[1] = v42;
      v60[2] = v43;
      v60[3] = v44;
      _X2 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return dgebp_1M4N(result - 8, a2, _X2->f64, a4, v7, a6);
  return result;
}

#error "23D977584: call analysis failed (funcsize=189)"

uint64_t dtrsm_block_LLN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int v25[2];
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_LLNN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_LLNU;
  v27 = v8;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v12 = 0;
    v13 = 0;
    v26 = a7 << 8;
    v29 = a7;
    v23 = a2;
    do
    {
      v28 = v12;
      v24 = v13 + 32;
      if (v13 + 32 <= a2)
        v14 = 32;
      else
        v14 = a2 - v13;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a6;
        *(_QWORD *)v25 = a4 + 8 * v13;
        v18 = 32;
        do
        {
          if (a3 >= v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = v19 + v15;
          a8.n128_u64[0] = v10;
          if (v13)
          {
            APL_seq_dgemm(111, 111, v14, v20, v13, v25[0], a5, v17, a7, v17 + v28, a7);
            a7 = v29;
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v27(v14, v20, *(_QWORD *)v25 + 8 * v13 * a5, a5, v17 + v28, a7, a8);
          a7 = v29;
          v17 += v26;
          v18 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v12 = v28 + 256;
      a2 = v23;
      v13 += 32;
    }
    while (v24 < v23);
  }
  return result;
}

uint64_t dtrsm_block_LLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v30;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_LLTN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_LLTU;
  v29 = v8;
  v25 = a2;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v30 = 0;
    v28 = a7 << 8;
    v12 = a2;
    do
    {
      v13 = v12 - 32;
      if (v12 < 0x20)
        v13 = 0;
      v26 = v13;
      if (v12 >= 0x20)
        v14 = 32;
      else
        v14 = v12;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a4 + 8 * v13 * a5;
        v27 = v17 + 8 * (v26 + v14);
        v18 = v17 + 8 * v26;
        v19 = a6 + 8 * v12;
        v20 = 32;
        do
        {
          if (a3 >= v20)
            v21 = v20;
          else
            v21 = a3;
          v22 = v21 + v15;
          a8.n128_u64[0] = v10;
          if ((v30 & 1) != 0)
          {
            APL_seq_dgemm(112, 111, v14, v22, v25 - (v26 + v14), v27, a5, v19, a7, v19 - 8 * v14, a7);
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v29(v14, v22, v18, a5, v19 - 8 * v14, a7, a8);
          v19 += v28;
          v20 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v30 = 1;
      v12 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t dtrsm_block_LUT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int v25[2];
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_LUTN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_LUTU;
  v27 = v8;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v12 = 0;
    v13 = 0;
    v26 = a7 << 8;
    v29 = a7;
    v23 = a2;
    do
    {
      v28 = v12;
      v24 = v13 + 32;
      if (v13 + 32 <= a2)
        v14 = 32;
      else
        v14 = a2 - v13;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a6;
        *(_QWORD *)v25 = a4 + 8 * v13 * a5;
        v18 = 32;
        do
        {
          if (a3 >= v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = v19 + v15;
          a8.n128_u64[0] = v10;
          if (v13)
          {
            APL_seq_dgemm(112, 111, v14, v20, v13, v25[0], a5, v17, a7, v17 + v28, a7);
            a7 = v29;
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v27(v14, v20, *(_QWORD *)v25 + 8 * v13, a5, v17 + v28, a7, a8);
          a7 = v29;
          v17 += v26;
          v18 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v12 = v28 + 256;
      a2 = v23;
      v13 += 32;
    }
    while (v24 < v23);
  }
  return result;
}

uint64_t dtrsm_block_LUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  char v30;

  v8 = dtrsm_noPack_LUNN;
  if ((_DWORD)result == 132)
    v8 = dtrsm_noPack_LUNU;
  v29 = v8;
  v25 = a2;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v30 = 0;
    v28 = a7 << 8;
    v12 = a2;
    do
    {
      v13 = v12 - 32;
      if (v12 < 0x20)
        v13 = 0;
      v26 = v13;
      if (v12 >= 0x20)
        v14 = 32;
      else
        v14 = v12;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a4 + 8 * v13;
        v27 = v17 + 8 * (v26 + v14) * a5;
        v18 = v17 + 8 * v26 * a5;
        v19 = a6 + 8 * v12;
        v20 = 32;
        do
        {
          if (a3 >= v20)
            v21 = v20;
          else
            v21 = a3;
          v22 = v21 + v15;
          a8.n128_u64[0] = v10;
          if ((v30 & 1) != 0)
          {
            APL_seq_dgemm(111, 111, v14, v22, v25 - (v26 + v14), v27, a5, v19, a7, v19 - 8 * v14, a7);
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))v29)(v14, v22, v18, a5, v19 - 8 * v14, a7, a8);
          v19 += v28;
          v20 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v30 = 1;
      v12 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t dtrsm_block_RLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_RLTN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_RLTU;
  v26 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v13 = 0;
    v14 = 0;
    v20 = a2 << 32;
    v23 = a7 << 8;
    do
    {
      v25 = v14 + 32;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6;
        if (v25 <= a3)
          v17 = 32;
        else
          v17 = (int)a3 - (int)v14;
        v18 = v20;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v19 = 32;
          else
            v19 = v18 >> 32;
          a8.n128_u64[0] = v11;
          if (v14)
          {
            APL_seq_dgemm(111, 112, v19, v17, v14, v16, a7, a4 + 8 * v14, a5, v16 + v13, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v26(v19, v17, a4 + 8 * v14 + 8 * v14 * a5, a5, v16 + v13, a7, a8);
          v18 -= 0x2000000000;
          v16 += 256;
        }
        while (v15 < a2);
      }
      v13 += v23;
      v14 += 32;
    }
    while (v25 < a3);
  }
  return result;
}

uint64_t dtrsm_block_RLN(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_RLNN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_RLNU;
  v28 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v22 = a2 << 32;
    v29 = 1;
    v13 = a3;
    do
    {
      LODWORD(v14) = v13 - 32;
      if (v13 >= 0x20)
        v14 = v14;
      else
        v14 = 0;
      v26 = v14;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6 + 8 * v14 * a7;
        if (v13 >= 0x20)
          v17 = 32;
        else
          v17 = v13;
        v27 = a3 - (v14 + v17);
        v18 = a4 + 8 * v14 * a5 + 8 * v14;
        v19 = a6 + a7 * (8 * v14 + 8 * v17);
        v20 = v22;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v21 = 32;
          else
            v21 = v20 >> 32;
          a8.n128_u64[0] = v11;
          if ((v29 & 1) == 0)
          {
            APL_seq_dgemm(111, 111, v21, v17, v27, v19, a7, v18 + 8 * v17, a5, v16, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v28(v21, v17, v18, a5, v16, a7, a8);
          v20 -= 0x2000000000;
          v16 += 256;
          v19 += 256;
        }
        while (v15 < a2);
      }
      v29 = 0;
      v13 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t dtrsm_block_RUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_RUNN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_RUNU;
  v26 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v13 = 0;
    v14 = 0;
    v20 = a2 << 32;
    v23 = a7 << 8;
    do
    {
      v25 = v14 + 32;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6;
        if (v25 <= a3)
          v17 = 32;
        else
          v17 = (int)a3 - (int)v14;
        v18 = v20;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v19 = 32;
          else
            v19 = v18 >> 32;
          a8.n128_u64[0] = v11;
          if (v14)
          {
            APL_seq_dgemm(111, 111, v19, v17, v14, v16, a7, a4 + 8 * v14 * a5, a5, v16 + v13, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v26(v19, v17, a4 + 8 * v14 * a5 + 8 * v14, a5, v16 + v13, a7, a8);
          v18 -= 0x2000000000;
          v16 += 256;
        }
        while (v15 < a2);
      }
      v13 += v23;
      v14 += 32;
    }
    while (v25 < a3);
  }
  return result;
}

uint64_t dtrsm_block_RUT(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v27;
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v30;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_RUTN;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))dtrsm_noPack_RUTU;
  v29 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v23 = a2 << 32;
    v30 = 1;
    v13 = a3;
    do
    {
      LODWORD(v14) = v13 - 32;
      if (v13 >= 0x20)
        v14 = v14;
      else
        v14 = 0;
      v27 = v14;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6 + 8 * v14 * a7;
        v17 = v23;
        v18 = a4 + 8 * v14;
        if (v13 >= 0x20)
          v19 = 32;
        else
          v19 = v13;
        v28 = v18 + 8 * (v27 + v19) * a5;
        v20 = v18 + 8 * v27 * a5;
        v21 = a6 + a7 * (8 * v27 + 8 * v19);
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v22 = 32;
          else
            v22 = v17 >> 32;
          a8.n128_u64[0] = v11;
          if ((v30 & 1) == 0)
          {
            APL_seq_dgemm(111, 112, v22, v19, a3 - (v27 + v19), v21, a7, v28, a5, v16, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v29(v22, v19, v20, a5, v16, a7, a8);
          v17 -= 0x2000000000;
          v16 += 256;
          v21 += 256;
        }
        while (v15 < a2);
      }
      v30 = 0;
      v13 = v27;
    }
    while ((int)v27 >= 1);
  }
  return result;
}

void sgemm_repack(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (**a12)(), uint64_t (**a13)(), uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,int a24,__int16 a25,__int16 a26,char a27)
{
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int32 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t (**v42)();
  uint64_t (**v43)();
  uint64_t (**v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int16 *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v65;
  float32x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t vars8;
  uint64_t (*v84)();
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *(*v96)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  _OWORD *(*v97)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  char *v98;

  v33 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v79 = v34;
  v73 = v35;
  v36 = v31;
  v37 = v29;
  v39 = v38;
  v40 = *(float *)&v33;
  v43 = a12;
  v42 = a13;
  STACK[0x10118] = *MEMORY[0x24BDAC8D0];
  if (!a12)
    v43 = off_250E469B8;
  if (!a13)
    v42 = off_250E469F8;
  v91 = (uint64_t)v42;
  v44 = v43 + 1;
  if (v27 == 111)
    v45 = 1;
  else
    v45 = v32;
  v85 = v45;
  v86 = v32;
  if (v27 == 111)
    v46 = v32;
  else
    v46 = 1;
  v72 = v46;
  if (v27 == 111)
    v44 = v43;
  v84 = *v44;
  if (v28 == 111)
    v47 = 1;
  else
    v47 = a9;
  v77 = v47;
  v78 = a9;
  v48 = 3;
  if (v28 == 111)
    v48 = 2;
  v76 = v43[v48];
  if (v31 <= 512)
    v49 = 64;
  else
    v49 = 384;
  v50 = 256;
  if (v29 < 512)
    v50 = 64;
  v87 = v50;
  a26 = 0;
  v51 = 8;
  if (v29 < 512)
    v51 = 6;
  v52 = ((((unint64_t)(v49 << v51) >> 6) & 0x1FFFF) << 8) | 0x40;
  v89 = v30;
  v53 = ((unint64_t)(v30 * v49) >> 6 << 8) | 0x20;
  if ((unint64_t)(v52 + v53) > 0x10000)
  {
    v55 = v49;
    v56 = (char *)malloc_type_malloc(v52 + v53, 0xC9775249uLL);
    v49 = v55;
    v90 = v56;
    v98 = &v56[v53];
    LOBYTE(a26) = 1;
    v54 = (__int16 *)((char *)&a26 + 1);
  }
  else
  {
    v98 = &a27;
    v90 = &a27 + v52;
    HIBYTE(a26) = 0;
    v54 = &a26;
  }
  *(_BYTE *)v54 = 0;
  if (v36 >= 1)
  {
    v82 = 0;
    v57 = 0;
    v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))v91;
    v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 24);
    if (v89 <= 0)
      v58 = -(-v89 & 3);
    else
      v58 = v89 & 3;
    v93 = v58;
    v59 = v49;
    v74 = v49;
    v75 = v36;
    vars8 = v37;
    do
    {
      v81 = v59;
      if (v36 >= v59)
        v60 = v59;
      else
        v60 = v36;
      v80 = v57 + v49;
      if (v57 + v49 <= v36)
        v61 = v49;
      else
        v61 = v36 - v57;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float))v76)(v61, v89, v79 + 4 * v57 * v77, v78, v90, v40);
      if (v37 >= 1)
      {
        v62 = 0;
        v63 = 16 * (v60 + v82);
        v88 = v73 + 4 * v57 * v72;
        v65 = v39 != 1.0 && v57 == 0 && v39 != 0.0;
        v66 = (float32x4_t *)v85;
        do
        {
          v94 = v62 + v87;
          if (v62 + v87 <= v37)
            v67 = v87;
          else
            v67 = v37 - v62;
          if ((v67 & 7) != 0)
          {
            v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))(v91 + 8);
            v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 32);
          }
          v92 = v62;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))v84)(v67, v61, v88 + 4 * v62 * v85, v86, v98);
          v95 = (uint64_t)v66;
          v68 = 0;
          if (v89 >= 4)
          {
            v69 = v90;
            do
            {
              if (v65)
                v97(v98, v69, v66, v86, v67, v61, v39);
              else
                v96(v98, v69, v66, v86, v67, v61);
              v68 += 4;
              v69 += v63;
              v66 += v86;
            }
            while (v68 < v89 - 3);
          }
          if (v93)
          {
            v70 = v85 + 4 * v92 + 4 * v68 * v86;
            v71 = &v90[4 * v68 * v61];
            if (v65)
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(v91 + 40))(v98, v71, v70, v86, v67, v93, v61, v39);
            else
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 16))(v98, v71, v70, v86, v67, v93, v61);
          }
          v37 = vars8;
          v66 = (float32x4_t *)(v95 + 4 * v87);
          v62 = v94;
        }
        while (v94 < vars8);
      }
      v49 = v74;
      v36 = v75;
      v59 = v81 + v74;
      v82 -= v74;
      v57 = v80;
      v97 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
      v96 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
    }
    while (v80 < v75);
  }
  if (HIBYTE(a26))
    free(v98);
  if ((_BYTE)a26)
    free(v90);
}

void cblas_dtrmm_sequential(int a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10, int a11)
{
  int v11;
  int v12;
  int v16;
  char *v19;
  char *v20;
  int v21;
  int v23;
  int v24;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v11 = a7;
  v12 = a6;
  v16 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v21 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a9 < (int)a7 || a9 <= 0)
      {
        v31 = a9;
        v33 = a7;
        v20 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v34 = a2;
        v31 = 142;
        v33 = 141;
        v20 = "SIDE must be %d or %d, but is set to %d";
        v27 = 2;
        goto LABEL_41;
      }
      if (a9 < (int)a6 || a9 <= 0)
      {
        v31 = a9;
        v33 = a6;
        v20 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v27 = 10;
LABEL_41:
        v24 = cblas_errprn(v27, 2000, v20, v31, v33, v34);
        goto LABEL_43;
      }
    }
    v24 = 2000;
LABEL_43:
    if (a11 >= v11 && a11 > 0)
      goto LABEL_47;
    v21 = cblas_errprn(12, v24, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v24 = v21;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a9 >= (int)a7 && a9 > 0)
      goto LABEL_24;
    v30 = a9;
    v32 = a7;
    v19 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v32 = 141;
      v34 = a2;
      v30 = 142;
      v19 = "SIDE must be %d or %d, but is set to %d";
      v23 = 2;
      goto LABEL_26;
    }
    if (a9 >= (int)a6 && a9 > 0)
    {
LABEL_24:
      v24 = 2000;
      goto LABEL_27;
    }
    v30 = a9;
    v32 = a6;
    v19 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v23 = 10;
LABEL_26:
  v24 = cblas_errprn(v23, 2000, v19, v30, v32, v34);
LABEL_27:
  if (a11 < v12 || a11 <= 0)
  {
    v21 = cblas_errprn(12, v24, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v24 = cblas_errprn(3, v24, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v24 = cblas_errprn(4, v24, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v12 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v24 = cblas_errprn(6, v24, "M cannot be less than zero; it is set to %d.", v12);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v24 = cblas_errprn(5, v24, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v12 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v11 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v24 = cblas_errprn(7, v24, "N cannot be less than zero; it is set to %d.", v11);
LABEL_54:
  if (v24 == 2000)
  {
    if (a1 == 102)
    {
      APL_seq_dtrmm(v16, a3, a4, a5, v12, v11, a8, a9, a10, a11, 0, 0);
    }
    else
    {
      if (v16 == 141)
        v28 = 142;
      else
        v28 = 141;
      if (a3 == 121)
        v29 = 122;
      else
        v29 = 121;
      APL_seq_dtrmm(v28, v29, a4, a5, v11, v12, a8, a9, a10, a11, 0, 0);
    }
  }
  else
  {
    cblas_xerbla(v24, "cblas_dtrmm", "");
  }
}

uint64_t ssyrk_noPack_LN(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, double a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;
  __int32 *v20;
  BOOL v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t *v29;
  uint64_t v30;
  float32x2_t *v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  char *v35;
  float32x2_t v36;
  char *v37;
  char *v38;
  float32x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t *v51;
  float32x2_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x2_t *v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  __n128 *v67;
  float32x4_t v68;
  __n128 *v69;
  __n128 *v70;
  float32x2_t *v71;
  uint64_t i;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  __n128 *v89;
  float32x4_t *v90;
  float32x4_t *v91;
  float32x4_t *v92;

  a7.i64[1] = a8.i64[0];
  v13 = 0;
  v14 = 4 * a4;
  v15 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_13:
    if ((result & 2) != 0)
    {
      v29 = (float32x2_t *)&a5[v13];
      a5 = (_DWORD *)((char *)a5 + 2 * v15);
      v30 = a2;
      v31 = (float32x2_t *)&a3[v13];
      v32 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v33 = v32;
      do
      {
        v34 = *v31;
        v31 = (float32x2_t *)((char *)v31 + v14);
        v32 = vmla_n_f32(v32, v34, v34.f32[0]);
        v33 = vmla_lane_f32(v33, v34, v34, 1);
        v21 = v30-- <= 1;
      }
      while (!v21);
      v36 = *v29;
      v35 = (char *)v29 + v15;
      HIDWORD(a13) = *((_DWORD *)v35 + 1);
      v37 = &v35[-v15];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v32, a7.f32[0]), v36, a7, 2);
      *(_QWORD *)v37 = a8.i64[0];
      v38 = &v37[v15];
      *((_DWORD *)v38 + 1) = vmla_laneq_f32(vmul_n_f32(v33, *(float *)&a7), *(float32x2_t *)&a13, a7, 2).i32[1];
      v39 = (float32x2_t *)&v38[-v15 + 8];
      v40 = v13 + 2;
      if (result > v13 + 2)
      {
        do
        {
          v41 = a2;
          v42 = (float32x2_t *)&a3[v13];
          v43 = (float32x2_t *)&a3[v40];
          v44 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v45 = v44;
          do
          {
            v46 = *v43;
            v43 = (float32x2_t *)((char *)v43 + v14);
            v47 = *v42;
            v42 = (float32x2_t *)((char *)v42 + v14);
            v44 = vmla_n_f32(v44, v46, v47.f32[0]);
            v45 = vmla_lane_f32(v45, v46, v47, 1);
            v21 = v41-- <= 1;
          }
          while (!v21);
          v49 = *v39;
          v48 = (float32x2_t *)((char *)v39 + v15);
          v50 = *v48;
          v51 = (float32x2_t *)((char *)v48 + v15 + -2 * v15);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v44, a7.f32[0]), v49, a7, 2);
          *v51 = *(float32x2_t *)a8.i8;
          v52 = (float32x2_t *)((char *)v51 + v15);
          *v52 = vmla_laneq_f32(vmul_n_f32(v45, a7.f32[0]), v50, a7, 2);
          v39 = (float32x2_t *)((char *)v52 + v15 + -2 * v15 + 8);
          v40 += 2;
        }
        while (v40 < result);
        v13 += 2;
      }
      else
      {
        v13 += 2;
      }
    }
    for (; result > v13; v13 += 4)
    {
      v53 = (float32x4_t *)&a5[v13];
      a5 += v15;
      v54 = a2;
      v55 = (float32x4_t *)&a3[v13];
      v56 = (float32x4_t)veorq_s8(a8, a8);
      v57 = v56;
      v58 = *(float32x2_t *)v56.f32;
      v59 = *(float32x2_t *)v56.f32;
      do
      {
        v60 = *v55;
        v55 = (float32x4_t *)((char *)v55 + v14);
        v56 = vmlaq_n_f32(v56, v60, v60.f32[0]);
        v57 = vmlaq_lane_f32(v57, v60, *(float32x2_t *)v60.f32, 1);
        v58 = vmla_laneq_f32(v58, *(float32x2_t *)&v60.u32[2], v60, 2);
        v59 = vmla_laneq_f32(v59, *(float32x2_t *)&v60.u32[2], v60, 3);
        v21 = v54-- <= 1;
      }
      while (!v21);
      v62 = *v53;
      v61 = (float32x4_t *)((char *)v53 + v15);
      v64 = *v61;
      v63 = (float32x2_t *)((char *)v61 + v15);
      v65 = v63[1];
      v66 = *(float32x2_t *)((char *)v63 + v15 + 8);
      v67 = (__n128 *)&v63[v15 / 0xFFFFFFFFFFFFFFFCLL];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v56, a7.f32[0]), v62, a7, 2);
      v68 = vmlaq_laneq_f32(vmulq_n_f32(v57, a7.f32[0]), v64, a7, 2);
      v69 = (__n128 *)((char *)v67 + v15);
      *v67 = (__n128)a8;
      v70 = v67 + 1;
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u32[0] = v68.u32[1];
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u64[0] = v68.u64[1];
      v71 = (float32x2_t *)((char *)v69 + v15);
      *v71 = vmla_laneq_f32(vmul_n_f32(v58, a7.f32[0]), v65, a7, 2);
      v71->i32[(unint64_t)v15 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v59, *(float *)&a7), v66, a7, 2).i32[1];
      for (i = v13 + 4; i < result; i += 4)
      {
        v73 = a2;
        v74 = (float32x4_t *)&a3[v13];
        v75 = (float32x4_t *)&a3[i];
        v76 = (float32x4_t)veorq_s8(a8, a8);
        v77 = v76;
        v78 = v76;
        v79 = v76;
        do
        {
          v80 = *v75;
          v75 = (float32x4_t *)((char *)v75 + v14);
          v81 = *v74;
          v74 = (float32x4_t *)((char *)v74 + v14);
          v76 = vmlaq_n_f32(v76, v80, v81.f32[0]);
          v77 = vmlaq_lane_f32(v77, v80, *(float32x2_t *)v81.f32, 1);
          v78 = vmlaq_laneq_f32(v78, v80, v81, 2);
          v79 = vmlaq_laneq_f32(v79, v80, v81, 3);
          v21 = v73-- <= 1;
        }
        while (!v21);
        v83 = *(float32x4_t *)v70;
        v82 = (float32x4_t *)((char *)v70 + v15);
        v85 = *v82;
        v84 = (float32x4_t *)((char *)v82 + v15);
        v87 = *v84;
        v86 = (float32x4_t *)((char *)v84 + v15);
        v88 = *v86;
        v89 = (__n128 *)((char *)v86 + v15 + -4 * v15);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v76, a7.f32[0]), v83, a7, 2);
        *v89 = (__n128)a8;
        v90 = (float32x4_t *)((char *)v89 + v15);
        *v90 = vmlaq_laneq_f32(vmulq_n_f32(v77, a7.f32[0]), v85, a7, 2);
        v91 = (float32x4_t *)((char *)v90 + v15);
        *v91 = vmlaq_laneq_f32(vmulq_n_f32(v78, a7.f32[0]), v87, a7, 2);
        v92 = (float32x4_t *)((char *)v91 + v15);
        *v92 = vmlaq_laneq_f32(vmulq_n_f32(v79, a7.f32[0]), v88, a7, 2);
        v70 = (__n128 *)((char *)&v92[1] + v15 + -4 * v15);
      }
    }
    return result;
  }
  v16 = a5;
  a5 = (_DWORD *)((char *)a5 + v15);
  v17 = a2;
  v18 = a3;
  v19 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v18 = &a3[(unint64_t)v14 / 4], v19.f32[0] = *a3 * *a3, v17 = a2 - 1, a2 > 1))
  {
    do
    {
      a12.f32[0] = *v18;
      v20 = (__int32 *)&v18[(unint64_t)v14 / 4];
      a12.i32[1] = *v20;
      v18 = (float *)&v20[(unint64_t)v14 / 4];
      v19 = vmla_f32(v19, a12, a12);
      v21 = v17 <= 2;
      v17 -= 2;
    }
    while (!v21);
    v19.f32[0] = vaddv_f32(v19);
  }
  a12.i32[0] = *v16;
  v19.f32[0] = v19.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v19, a12, a7, 2);
  *v16 = a8.i32[0];
  v22 = (float32x2_t *)(v16 + 1);
  v23 = 1;
  if (result > 1)
  {
    do
    {
      v24 = a2;
      v25 = a3;
      v26 = (float32x2_t *)&a3[v23];
      v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      do
      {
        v28 = *v26;
        v26 = (float32x2_t *)((char *)v26 + v14);
        *(float *)&a13 = *v25;
        v25 = (float *)((char *)v25 + v14);
        v27 = vmla_n_f32(v27, v28, *(float *)&a13);
        v21 = v24-- <= 1;
      }
      while (!v21);
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v27, a7.f32[0]), *v22, a7, 2);
      *v22++ = *(float32x2_t *)a8.i8;
      v23 += 2;
    }
    while (v23 < result);
    v13 = 1;
    goto LABEL_13;
  }
  return result;
}

unint64_t initHardwareInfo()
{
  unsigned int v0;
  unsigned int v1;
  char *v3;
  unsigned int v4;
  char *v5;
  unint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  qos_class_self();
  info = pthread_qos_max_parallelism();
  v0 = pthread_qos_max_parallelism();
  dword_256CD46F4 = v0;
  v1 = info;
  if (info == -1 || v0 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      initHardwareInfo_cold_1();
    v1 = 1;
    info = 1;
    goto LABEL_12;
  }
  if (!info)
  {
    v1 = 2;
    info = 2;
  }
  if (v0 < v1)
LABEL_12:
    dword_256CD46F4 = v1;
  v3 = getenv("VECLIB_MAXIMUM_THREADS");
  if (v3)
  {
    v4 = strtol(v3, 0, 0);
    if (v4)
    {
      if (dword_256CD46F4 > v4)
      {
        info = v4;
        dword_256CD46F4 = v4;
      }
    }
  }
  v5 = getenv("APPLE_LAPACK_FILL_NAN");
  byte_256CD46FC = v5 != 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  result = queryPlatform((lapack::hardware::query *)v5, (uint64_t)&v7);
  dword_256CD4700 = DWORD1(v8);
  *(_QWORD *)&algn_256CD4704[4] = *((_QWORD *)&v9 + 1);
  dword_256CD4710 = DWORD2(v10);
  return result;
}

uint64_t hardwareVectorBytes()
{
  if (getHardwareInfo_token != -1)
    dispatch_once(&getHardwareInfo_token, &__block_literal_global_1);
  if ((dword_256CD46F8 - 1) > 2)
    return 16;
  else
    return dword_23D9C2390[dword_256CD46F8 - 1];
}

void initHardwareInfo_cold_1()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_23D69E000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "pthread_qos_max_parallelism() returned error in LAPACK call to initHardwareInfo()\n", v0, 2u);
}

uint64_t Accelerate_AR_dlarf(uint64_t a1, __CLPK_integer *a2, __CLPK_integer *a3, double *a4, int *a5, double *a6, __CLPK_doublereal *a7, __CLPK_integer *a8, double *a9)
{
  int v16;
  __CLPK_integer *v17;
  __CLPK_integer v18;
  int v19;
  BOOL v20;
  __CLPK_integer __m;
  int m;
  double alpha;

  v16 = lsame_();
  m = 0;
  if (*a6 != 0.0)
  {
    if (v16)
      v17 = a2;
    else
      v17 = a3;
    v18 = *v17;
    if (v18 >= 1)
    {
      if (*a5 >= 1)
        v19 = *a5 * (v18 - 1) + 1;
      else
        v19 = 1;
      while (a4[v19 - 1] == 0.0)
      {
        v19 -= *a5;
        v20 = __OFSUB__(v18--, 1);
        if ((v18 < 0) ^ v20 | (v18 == 0))
        {
          v18 = 0;
          break;
        }
      }
    }
    alpha = 0.0;
    __m = v18;
    if (v16)
    {
      m = iladlc_(&__m, a3, a7, a8);
      if (__m >= 1)
      {
        Accelerate_AR_dgemv("Transpose", &__m, &m, &c_b4_0, a7, a8, a4, a5, &c_b5_1, a9, &c__1_11);
        alpha = -*a6;
        dger_(&__m, &m, &alpha, a4, a5, a9, (int *)&c__1_11, a7, a8);
      }
    }
    else
    {
      m = iladlr_(a2, &__m, a7, a8);
      if (__m >= 1)
      {
        Accelerate_AR_dgemv("No transpose", &m, &__m, &c_b4_0, a7, a8, a4, a5, &c_b5_1, a9, &c__1_11);
        alpha = -*a6;
        dger_(&m, &__m, &alpha, a9, (int *)&c__1_11, a4, a5, a7, a8);
      }
    }
  }
  return 0;
}

void strmm_Left_Forward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, float32x4_t *a10, uint64_t a11, float *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  double v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, float, double, int8x16_t);
  void (*v32)(uint64_t, uint64_t, unint64_t, uint64_t, float32x4_t *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x4_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t *v53;
  _OWORD *f32;
  float *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, float, double, int8x16_t);
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t vars8;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, unint64_t, uint64_t, float32x4_t *);
  uint64_t v72;
  unint64_t v73;
  float32x4_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  float32x4_t *v79;

  v23 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v61 = v26;
  v62 = v27;
  v28 = v20;
  v60 = v29;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  v31 = strmm_block_LLT;
  if (v19 == 111)
    v31 = strmm_block_LUN;
  v59 = v31;
  v32 = (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, float32x4_t *))sgePack_A_Tran;
  if (v19 == 111)
    v32 = (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, float32x4_t *))sgePack_A_NoTran;
  v71 = v32;
  if (v19 == 111)
    v33 = v22;
  else
    v33 = 1;
  v56 = v33;
  if (v19 == 111)
    v34 = 1;
  else
    v34 = v22;
  v70 = v34;
  v35 = (v20 << 7) + 16408;
  if (a13 == -1)
  {
    v40 = 4 * v35;
    if (v20 < 1)
      v40 = 0;
    v39 = (float)(unint64_t)v40;
    goto LABEL_19;
  }
  v36 = v22;
  v37 = v21;
  v38 = *(float *)&v23;
  if (v20 >= 1 && a13)
  {
    if (4 * v35 > a13)
    {
      v39 = (float)(unint64_t)(4 * v35);
LABEL_19:
      *a12 = v39;
      return;
    }
    goto LABEL_21;
  }
  if (v20 >= 1)
  {
LABEL_21:
    v41 = (float32x4_t *)a12;
    v55 = a12;
    if (!a12)
      v41 = (float32x4_t *)malloc_type_malloc(4 * v35, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v55 = a12;
  v41 = (float32x4_t *)&a19;
LABEL_24:
  if (v37 >= 1)
  {
    v42 = 0;
    v43 = 0;
    v58 = v37;
    v74 = v41 + 4100;
    v44 = v28 - 3;
    if (v28 <= 0)
      v45 = -(-v28 & 3);
    else
      v45 = v28 & 3;
    vars8 = v45;
    v68 = v36;
    v46 = 128;
    v69 = v28;
    do
    {
      v64 = v46;
      v65 = v42;
      if (v37 < v46)
        v46 = v37;
      v63 = v43 + 128;
      if ((uint64_t)(v43 + 128) <= v37)
        v47 = 128;
      else
        v47 = v37 - v43;
      if (v43)
      {
        v48 = 16 * (v46 + v42);
        v72 = v61 + 4 * v43 * v56;
        v73 = v43;
        v76 = v43 * v36;
        v78 = (unint64_t *)(v62 + 4 * v43);
        sgePack_B_NoTran(v47, v28, v78, a9, v74, v38, v24, v25);
        v49 = v73;
        ((void (*)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t *, uint64_t, float))v59)(v60, v47, v28, v61 + 4 * v76 + 4 * v73, v36, v78, a9, v38);
        v50 = 0;
        v79 = a10;
        do
        {
          v75 = v50;
          v77 = v50 + 128;
          if (v50 + 128 <= v49)
            v51 = 128;
          else
            v51 = v49 - v50;
          v71(v51, v47, v72 + 4 * v50 * v70, v36, v41);
          if (v28 < 4)
          {
            v52 = 0;
          }
          else
          {
            v52 = 0;
            v53 = v79;
            f32 = (_OWORD *)v41[4100].f32;
            do
            {
              sgebpAlignedC_8M4N(v41, f32, v53, v70, v51, v47);
              v52 += 4;
              f32 = (_OWORD *)((char *)f32 + v48);
              v53 += v70;
            }
            while (v52 < v44);
          }
          if (vars8)
            sgebp_8M1N(v41, &v74->f32[v52 * v47], (uint64_t)a10->i64 + 4 * v75 + 4 * v52 * v70, v70, v51, vars8, v47);
          v79 += 32;
          v50 = v77;
          v49 = v73;
          v36 = v68;
          v28 = v69;
        }
        while (v77 < v73);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))v59)(v60, v47, v28, v61, v36, v62, a9, v38);
      }
      v46 = v64 + 128;
      v42 = v65 - 128;
      v43 = v63;
      v37 = v58;
    }
    while (v63 < v58);
  }
  if (v28 >= 1 && !v55)
    free(v41);
}

void strmm_Left_Backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, float *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int32 v28;
  double v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float, double, int8x16_t);
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  float32x4_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  float32x4_t *v56;
  float *v57;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float, double, int8x16_t);
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int vars8[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void);
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v28 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v61 = v31;
  v62 = v32;
  v33 = v25;
  v60 = v34;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  v36 = strmm_block_LUT;
  if (v23 == 111)
    v36 = strmm_block_LLN;
  v59 = v36;
  v37 = (void (*)(void))sgePack_A_Tran;
  if (v23 == 111)
    v37 = (void (*)(void))sgePack_A_NoTran;
  v68 = v37;
  v70 = v27;
  if (v23 == 111)
    v38 = 1;
  else
    v38 = v27;
  v67 = v38;
  v39 = (v25 << 7) + 16408;
  if (a13 == -1)
  {
    v44 = 4 * v39;
    if (v25 < 1)
      v44 = 0;
    v43 = (float)(unint64_t)v44;
    goto LABEL_16;
  }
  v40 = v26;
  v41 = v24;
  v42 = *(float *)&v28;
  if (v25 >= 1 && a13)
  {
    if (4 * v39 > a13)
    {
      v43 = (float)(unint64_t)(4 * v39);
LABEL_16:
      *a12 = v43;
      return;
    }
    goto LABEL_18;
  }
  if (v25 >= 1)
  {
LABEL_18:
    v45 = (float32x4_t *)a12;
    v57 = a12;
    if (!a12)
      v45 = (float32x4_t *)malloc_type_malloc(4 * v39, 0x100004052888210uLL);
    goto LABEL_21;
  }
  v57 = a12;
  v45 = (float32x4_t *)&a23;
LABEL_21:
  if (v40 >= 1)
  {
    v71 = v45 + 4100;
    if (v33 <= 0)
      v46 = -(-v33 & 3);
    else
      v46 = v33 & 3;
    v65 = v41;
    v66 = v33;
    v69 = v45;
    v74 = v33 - 3;
    *(_QWORD *)vars8 = v46;
    do
    {
      if ((unint64_t)v40 >= 0x80)
        v47 = v40 - 128;
      else
        v47 = 0;
      if ((unint64_t)v40 >= 0x80)
        v48 = 128;
      else
        v48 = v40;
      v49 = v47 + v48;
      if (v47 + v48 >= v41)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v59)(v60, v48, v33, v61 + 4 * v47 * v70 + 4 * v47, v42);
        v45 = v69;
      }
      else
      {
        sgePack_B_NoTran(v48, v33, (unint64_t *)(v62 + 4 * v47), a9, v71, v42, v29, v30);
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v59)(v60, v48, v33, v61 + 4 * v47 * v70 + 4 * v47, v42);
        v50 = (void (*)(float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
        v51 = a10 + 4 * v40;
        do
        {
          v72 = v49 + 128;
          if (v49 + 128 <= v41)
            v52 = 128;
          else
            v52 = v41 - v49;
          if ((v52 & 7) != 0)
            v50 = (void (*)(float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t))sgebpUnalignedC_8M4N;
          v53 = v52;
          v68();
          v54 = v33 < 4;
          v73 = v51;
          v55 = 0;
          if (v54)
          {
            v45 = v69;
          }
          else
          {
            v56 = v71;
            v45 = v69;
            do
            {
              v50(v69, v56, v51, v67, v53, v48);
              v55 += 4;
              v56 += v48;
              v51 += 16 * v67;
            }
            while (v55 < v74);
          }
          if (v46)
            sgebp_8M1N(v45, &v71->f32[v55 * v48], a10 + 4 * v49 + 4 * v55 * v67, v67, v53, v46, v48);
          v51 = v73 + 512;
          v49 += 128;
          v41 = v65;
          v33 = v66;
        }
        while (v72 < v65);
      }
      v40 = v47;
    }
    while (v47 > 0);
  }
  if (v33 >= 1 && !v57)
    free(v45);
}

void strmm_Right_Forward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, float *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int32 v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, char *, uint64_t, float, double, int8x16_t);
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  float *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, char *, uint64_t, float, double, int8x16_t);
  unsigned int vars0_4;
  uint64_t vars8;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v33 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  vars8 = v34;
  v72 = v32;
  vars0_4 = v35;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v36 = strmm_block_RUT;
  if (v27 == 111)
    v36 = strmm_block_RLN;
  v69 = v36;
  v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float))sgePack_B_Tran;
  if (v27 == 111)
    v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float))sgePack_B_NoTran;
  v65 = v37;
  if (v27 == 111)
    v38 = v32;
  else
    v38 = 1;
  v73 = v32;
  if (v27 == 111)
    v39 = 1;
  else
    v39 = v32;
  v67 = v39;
  v68 = v38;
  v40 = (v29 << 7) + 16408;
  if (a13 == -1)
  {
    v46 = 4 * v40;
    if (v29 < 1)
      v46 = 0;
    v45 = (float)(unint64_t)v46;
    goto LABEL_19;
  }
  v41 = v31;
  v42 = v30;
  v43 = v28;
  v44 = *(float *)&v33;
  if (v29 >= 1 && a13)
  {
    if (4 * v40 > a13)
    {
      v45 = (float)(unint64_t)(4 * v40);
LABEL_19:
      *a12 = v45;
      return;
    }
    goto LABEL_21;
  }
  if (v29 >= 1)
  {
LABEL_21:
    v63 = a12;
    v64 = v29;
    v47 = (char *)a12;
    if (!a12)
      v47 = (char *)malloc_type_malloc(4 * v40, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v63 = a12;
  v64 = v29;
  v47 = &a27;
LABEL_24:
  if (v42 >= 1)
  {
    v76 = 0;
    v48 = 0;
    v49 = 128;
    v79 = v43;
    v80 = v41;
    v66 = v42;
    v51 = 16 * a11;
    do
    {
      v75 = v49;
      if (v42 >= v49)
        v52 = v49;
      else
        v52 = v42;
      v74 = v48 + 128;
      if (v48 + 128 <= v42)
        v53 = 128;
      else
        v53 = v42 - v48;
      v82 = vars8 + 4 * v48 * v41;
      v77 = v72 + 4 * v48 * v67;
      v78 = v48;
      if (v48)
      {
        v65(v53, v48, v77, v73, v47 + 65600, v44);
        if (v43 >= 1)
        {
          v54 = 0;
          v81 = 16 * (v52 + v76);
          v55 = v73;
          v56 = (void (*)(char *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
          do
          {
            v57 = v54;
            v58 = v43 - v54;
            v83 = v57 + 128;
            if (v57 + 128 <= v43)
              v59 = 128;
            else
              v59 = v58;
            if ((v59 & 7) != 0)
              v56 = (void (*)(char *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sgebpUnalignedC_8M4N;
            sgePack_A_NoTran(v59, v53, v82 + 4 * v57, v41, (uint64_t)v47);
            v60 = 0;
            v84 = v55;
            v61 = v55;
            v62 = v47 + 65600;
            do
            {
              v56(v47, v62, v61, a11, v59, v53);
              v60 += 4;
              v62 += v81;
              v61 += v51;
            }
            while (v60 < v78 - 3);
            v54 = v83;
            v55 = v84 + 512;
            v43 = v79;
            v41 = v80;
          }
          while (v83 < v79);
        }
      }
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))v69)(vars0_4, v43, v53, v77 + 4 * v78 * v68, v73, v82, v41, v44);
      v49 = v75 + 128;
      v76 -= 128;
      v48 = v74;
      v42 = v66;
    }
    while (v74 < v66);
  }
  if (v64 >= 1 && !v63)
    free(v47);
}

void strmm_Right_Backward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, float *a12, unint64_t a13, uint64_t a14, int a15, uint64_t a16, float *__Y, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24)
{
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int32 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, float);
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float, double, int8x16_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  float32x4_t *v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *(*v51)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  float *(*v53)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  const float *f32;
  float32x4_t *v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, float);
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float, double, int8x16_t);
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t vars8;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v28 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v64 = v29;
  v65 = v30;
  v66 = v31;
  v63 = v32;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, float))sgePack_B_Tran;
  if (v24 == 111)
    v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, float))sgePack_B_NoTran;
  v60 = v33;
  v34 = strmm_block_RLT;
  if (v24 == 111)
    v34 = strmm_block_RUN;
  v62 = v34;
  if (v24 == 111)
    v35 = a9;
  else
    v35 = 1;
  v67 = v35;
  if (v24 == 111)
    v36 = 1;
  else
    v36 = a9;
  v61 = v36;
  v37 = (v26 << 7) + 16408;
  if (a13 == -1)
  {
    v42 = 4 * v37;
    if (v26 < 1)
      v42 = 0;
    v41 = (float)(unint64_t)v42;
    goto LABEL_19;
  }
  v38 = v27;
  v39 = v25;
  v40 = *(float *)&v28;
  if (v26 >= 1 && a13)
  {
    if (4 * v37 > a13)
    {
      v41 = (float)(unint64_t)(4 * v37);
LABEL_19:
      *a12 = v41;
      return;
    }
    goto LABEL_21;
  }
  if (v26 >= 1)
  {
LABEL_21:
    v59 = v26;
    v43 = (float32x4_t *)a12;
    v57 = a12;
    if (!a12)
      v43 = (float32x4_t *)malloc_type_malloc(4 * v37, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v59 = v26;
  v57 = a12;
  v43 = (float32x4_t *)&a24;
LABEL_24:
  if (v66 >= 1)
  {
    v45 = v59 - 3;
    v58 = 4 * a11;
    v71 = 16 * a11;
    v46 = v66;
    v72 = v39;
    v73 = v38;
    do
    {
      if (v46 >= 0x80)
        v47 = v46 - 128;
      else
        v47 = 0;
      if (v46 >= 0x80)
        v48 = 128;
      else
        v48 = v46;
      v74 = v64 + 4 * v47 * v38;
      vars8 = v47;
      v70 = v65 + 4 * v47 * v61;
      v76 = v47 + v48;
      if (v66 > v47 + v48)
      {
        v60(v48, v66 - (v47 + v48), v70 + 4 * v76 * v67, a9, v43 + 4100, v40);
        if (v39 >= 1)
        {
          v49 = 0;
          if (v76 - v59 >= 0)
            v50 = -((v76 - v59) & 3);
          else
            v50 = (v59 - v76) & 3;
          v78 = a10 + v58 * v46;
          v51 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
          do
          {
            v77 = v49 + 128;
            if (v49 + 128 <= v39)
              v52 = 128;
            else
              v52 = v39 - v49;
            v75 = v49;
            if ((v52 & 7) != 0)
              v53 = sgebpUnalignedC_8M4N;
            else
              v53 = v51;
            v79 = v52;
            sgePack_A_NoTran(v52, v48, v74 + 4 * v49, v38, (uint64_t)v43);
            v54 = v76;
            f32 = v43[4100].f32;
            if (v76 < v45)
            {
              v56 = (float32x4_t *)v78;
              f32 = v43[4100].f32;
              v54 = v76;
              do
              {
                v53(v43, (uint64_t)f32, v56, a11, v79, v48);
                v54 += 4;
                f32 += 4 * v48;
                v56 = (float32x4_t *)((char *)v56 + v71);
              }
              while (v54 < v45);
            }
            v51 = v53;
            if (v50)
              sgebp_8M1N(v43, f32, a10 + 4 * v75 + 4 * v54 * a11, a11, v79, v50, v48);
            v78 += 512;
            v49 = v77;
            v39 = v72;
            v38 = v73;
          }
          while (v77 < v72);
        }
      }
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))v62)(v63, v39, v48, v70 + 4 * vars8 * v67, a9, v74, v38, v40);
      v46 = vars8;
    }
    while (vars8 > 0);
  }
  if (v59 >= 1 && !v57)
    free(v43);
}

uint64_t Accelerate_AR_dsytrd(char *a1, unsigned int *a2, double *a3, int *a4, __CLPK_doublereal *a5, uint64_t a6, uint64_t a7, double *a8, int *a9, int *a10)
{
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  double v23;
  int v24;
  double *v25;
  __CLPK_doublereal *v26;
  int v27;
  int v28;
  int v30;
  __CLPK_integer v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int *p_n;
  char *v40;
  __CLPK_doublereal *v41;
  __CLPK_integer *v42;
  __CLPK_doublereal *v43;
  __CLPK_doublereal *v44;
  __CLPK_doublereal *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  char *v58;
  double *v59;
  uint64_t v60;
  __CLPK_integer v61;
  double *v62;
  int v63;
  int v64;
  double *v65;
  int v67;
  uint64_t v69;
  __CLPK_integer __info[2];
  int v72;
  int v73;
  int v74;
  __CLPK_integer __n;

  v74 = 0;
  v72 = 0;
  *(_QWORD *)__info = 0;
  v15 = *a4;
  *a10 = 0;
  v16 = lsame_();
  v17 = *a9;
  if (!v16 && !lsame_())
  {
    v20 = -1;
    goto LABEL_27;
  }
  v18 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v20 = -2;
    goto LABEL_27;
  }
  if (v18 <= 1)
    v19 = 1;
  else
    v19 = *a2;
  if (*a4 < v19)
  {
    v20 = -4;
LABEL_27:
    *a10 = v20;
    goto LABEL_28;
  }
  v21 = *a9;
  if (*a9 <= 0 && v17 != -1)
  {
    v20 = -9;
    goto LABEL_27;
  }
  v20 = *a10;
  if (*a10)
  {
LABEL_28:
    __n = -v20;
    xerbla_();
    return 0;
  }
  v73 = 32;
  v23 = (double)(int)(32 * v18);
  *a8 = v23;
  if (v17 != -1)
  {
    if (v18)
    {
      v65 = a8;
      v24 = ~(_DWORD)v15;
      v59 = a3;
      v25 = &a3[~(_DWORD)v15];
      v26 = a5 - 1;
      if (v18 < 0x21)
      {
        v61 = 1;
        v73 = 1;
        v27 = v18;
      }
      else
      {
        __info[0] = v18;
        v27 = 32;
        v61 = 32;
        if (v21 < (int)(32 * v18))
        {
          v28 = v21 / (int)v18;
          if (v28 <= 1)
            v28 = 1;
          v73 = v28;
          if (v28 >= 2)
            v27 = 32;
          else
            v27 = v18;
          v61 = v28;
        }
      }
      v30 = v18 - v27;
      if (v16)
      {
        v72 = (int)(v18 - v27 + v61 - 1) % v61 - (v61 - v27 - 1);
        __n = v72 + 1;
        v31 = v18 - v61 + 1;
        if (v31 > v72)
        {
          v32 = v15 * v31;
          v57 = (uint64_t)&v59[v24 - 1];
          v33 = 8 * v15 + 8;
          v34 = v61;
          v58 = a1;
          do
          {
            v63 = v32;
            v74 = v31 - 1 + v34;
            Accelerate_AR_dlatrd((uint64_t)a1, &v74, &v73, v59, a4, a6, a7, (uint64_t)a8, __info);
            v74 = v31 - 1;
            Accelerate_AR_dsyr2k(a1, "No transpose", &v74, &v73, &c_b22_0, (uint64_t)&v25[v31 * (int)v15 + 1], a4, (uint64_t)a8, __info, &c_b23, v59, a4);
            v34 = v73;
            v35 = v73 + v31;
            v74 = v73 + v31 - 1;
            if (v73 >= 1)
            {
              v36 = (_QWORD *)(v57 + v33 * v31);
              v37 = v31;
              v38 = v63;
              do
              {
                *v36 = *(_QWORD *)(a6 - 16 + 8 * v37);
                v26[v37] = v25[v37 + v38];
                ++v37;
                v38 += v15;
                v36 = (_QWORD *)((char *)v36 + v33);
              }
              while (v37 < v35);
            }
            v31 -= v61;
            v32 = v63 - v61 * v15;
            a1 = v58;
          }
          while (v31 >= __n);
        }
        p_n = &v72;
        v40 = a1;
        v41 = v59;
        v42 = a4;
        v43 = a5;
        v44 = (__CLPK_doublereal *)a7;
        v45 = (__CLPK_doublereal *)a6;
      }
      else
      {
        v46 = a6 - 8;
        v69 = a7 - 8;
        __n = v61;
        v67 = v15 + 1;
        if (v30 < 1)
        {
          v56 = 0;
          v48 = 1;
        }
        else
        {
          v60 = (uint64_t)&v59[v24 + 1];
          v62 = a8 - 1;
          v47 = 8 * v15 + 8;
          v48 = 1;
          v49 = -1;
          v64 = v30;
          do
          {
            v74 = v49 + *a2 + 1;
            Accelerate_AR_dlatrd((uint64_t)a1, &v74, &v73, &v25[v48 * (int)v15 + v48], a4, v46 + 8 * v48, v69 + 8 * v48, (uint64_t)v65, __info);
            v74 = *a2 - (v73 + v48) + 1;
            Accelerate_AR_dsyr2k(a1, "No transpose", &v74, &v73, &c_b22_0, (uint64_t)&v25[v73 + v48 + v48 * (int)v15], a4, (uint64_t)&v62[v73 + 1], __info, &c_b23, &v25[(v73 + v48) * v67], a4);
            v50 = v48;
            v51 = v73 + v48;
            v74 = v73 + v48 - 1;
            if (v73 >= 1)
            {
              v52 = v15 * v48;
              v53 = v48;
              v54 = (_QWORD *)(v60 + v47 * v48);
              do
              {
                *v54 = *(_QWORD *)(v46 + 8 * v53);
                v26[v53] = v25[v53 + v52];
                v52 += v15;
                v54 = (_QWORD *)((char *)v54 + v47);
                ++v53;
              }
              while (v53 < v51);
            }
            v48 += __n;
            v49 = -(__n + v50);
            if (__n >= 0)
              v55 = __n + v50 <= v64;
            else
              v55 = __n + v50 >= v64;
          }
          while (v55);
          v18 = *a2;
          v56 = 1 - v48;
        }
        v41 = &v25[v48 * v67];
        __n = v56 + v18;
        v43 = &v26[v48];
        v45 = (__CLPK_doublereal *)(v46 + 8 * v48);
        v44 = (__CLPK_doublereal *)(v69 + 8 * v48);
        p_n = &__n;
        v40 = a1;
        v42 = a4;
      }
      dsytd2_(v40, p_n, v41, v42, v43, v45, v44, &__info[1]);
      *v65 = v23;
    }
    else
    {
      *a8 = 1.0;
    }
  }
  return 0;
}

uint64_t AccelerateAR_ImageFindMax(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, double a7, int16x8_t _Q1)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float16x8_t *v17;
  uint64_t v18;
  float16x8_t *v19;
  uint64_t v20;
  float16x8_t *v21;
  uint64_t v22;
  float16x8_t *v23;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float16x8_t v40;
  float16x8_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float16x8_t v44;
  float16x8_t v45;
  float16x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x8_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x8_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float32x4_t v63;
  int8x8_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x4_t v67;
  int8x8_t v68;
  float32x4_t v69;
  int8x8_t v70;
  float16x8_t v71;
  float16x8_t v72;
  float32x4_t v73;
  int8x8_t v74;
  float32x4_t v75;
  int8x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  unint64_t v79;
  float16x8_t *v80;
  float16x8_t v81;
  float32x4_t v82;
  int8x8_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float16x8_t *v89;
  float16x8_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float16x8_t *v97;
  float16x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float16x8_t *v105;
  float16x8_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  __int16 v121;
  __int16 v124;
  int8x16_t v125;
  __int16 v130;
  __int16 v135;
  __int16 v140;
  __int16 v145;
  __int16 v150;
  __int16 v155;
  __int16 v160;
  __int16 v163;
  int8x16_t v164;
  __int16 v169;
  __int16 v174;
  __int16 v179;
  __int16 v184;
  __int16 v189;
  __int16 v194;
  int8x16_t v195;
  int8x16_t v196;
  float32x4_t v197;
  int8x8_t v199;
  float32x4_t v200;
  int8x8_t v204;
  float32x4_t v205;
  __int16 v209;
  __int16 v212;
  int8x16_t v213;
  __int16 v218;
  __int16 v223;
  __int16 v227;
  __int16 v232;
  __int16 v237;
  __int16 v242;
  __int16 v247;
  __int16 v250;
  int8x16_t v251;
  __int16 v256;
  __int16 v261;
  __int16 v265;
  __int16 v270;
  __int16 v275;
  __int16 v280;
  int8x16_t v281;
  int8x16_t v282;
  float32x4_t v283;
  int8x8_t v285;
  float32x4_t v286;
  float32x4_t v288;
  float32x4_t v291;
  __int16 v295;
  __int16 v298;
  int8x16_t v299;
  __int16 v304;
  __int16 v309;
  __int16 v313;
  __int16 v318;
  __int16 v323;
  __int16 v328;
  __int16 v333;
  __int16 v336;
  int8x16_t v337;
  __int16 v342;
  __int16 v347;
  __int16 v351;
  __int16 v356;
  __int16 v361;
  __int16 v366;
  int8x16_t v367;
  int8x16_t v368;
  float32x4_t v369;
  int8x8_t v371;
  float32x4_t v372;
  float32x4_t v374;
  float32x4_t v377;
  __int16 v381;
  __int16 v384;
  int8x16_t v385;
  __int16 v390;
  __int16 v395;
  __int16 v399;
  __int16 v404;
  __int16 v409;
  __int16 v414;
  __int16 v419;
  __int16 v422;
  int8x16_t v423;
  __int16 v428;
  __int16 v433;
  __int16 v437;
  __int16 v442;
  __int16 v447;
  __int16 v452;
  float32x4_t v453;
  int8x8_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t i;
  unint64_t v465;
  uint64_t j;
  unint64_t v469;
  unint64_t v470;
  __int128 *v474;
  __int128 *v487;
  unint64_t v488;
  __int16 v493;
  __int16 v496;
  int8x16_t v497;
  __int16 v500;
  __int16 v503;
  __int16 v506;
  __int16 v509;
  __int16 v512;
  __int16 v515;
  __int16 v518;
  __int16 v521;
  int8x16_t v522;
  __int16 v525;
  __int16 v528;
  __int16 v531;
  __int16 v534;
  __int16 v537;
  __int16 v540;
  _OWORD v544[2];
  _OWORD v545[2];
  uint64_t v546;

  v546 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 3) != 0 || a2 - 0x10000 < 0xFFFFFFFFFFFF0010 || (a4 | a3) >> 16)
  {
    if (a3)
    {
      v458 = 0;
      v459 = 0;
      v460 = 0;
      LOWORD(_S0) = 1024;
      do
      {
        if (a2)
        {
          for (i = 0; i != a2; ++i)
          {
            _Q1.i16[0] = *(_WORD *)(result + 2 * i);
            __asm
            {
              FCVT            S2, H1
              FCVT            S3, H0
            }
            if (_S3 < _S2)
            {
              _S0 = *(float *)_Q1.i32;
              v460 = v458;
              v459 = i;
            }
          }
        }
        ++v458;
        result += 2 * a4;
      }
      while (v458 != a3);
    }
    else
    {
      v460 = 0;
      v459 = 0;
    }
    *a5 = v460;
    *a6 = v459;
  }
  else
  {
    if (a3)
    {
      v8 = 0;
      _Q0.i64[0] = 0x400040004000400;
      _Q0.i64[1] = 0x400040004000400;
      v10 = a2 - 16;
      v11 = result + 32;
      _Q1 = 0uLL;
      v12.i64[0] = 0x4000400040004;
      v12.i64[1] = 0x4000400040004;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      _Q7.i64[0] = 0x400040004000400;
      _Q7.i64[1] = 0x400040004000400;
      do
      {
        v17 = (float16x8_t *)(result + 2 * v8 * a4);
        if ((v8 | 1) >= a3)
          v18 = 0;
        else
          v18 = a4;
        v19 = (float16x8_t *)((char *)v17 + 2 * v18);
        if ((v8 | 2) >= a3)
          v20 = 0;
        else
          v20 = a4;
        v21 = (float16x8_t *)((char *)v19 + 2 * v20);
        if ((v8 | 3) >= a3)
          v22 = 0;
        else
          v22 = a4;
        v23 = (float16x8_t *)((char *)v21 + 2 * v22);
        _Q22 = *v17;
        _Q21 = v17[1];
        _Q20 = *v19;
        _Q19 = v19[1];
        _Q16 = *v21;
        _Q6 = v21[1];
        _Q5 = *v23;
        _Q4 = v23[1];
        if (a2 >= 0x20)
        {
          v33 = 2 * v18;
          v34 = v33 + 2 * v20;
          v35 = v34 + 2 * v22;
          v36 = v11;
          v37 = 16;
          v38 = *v23;
          v39 = v23[1];
          v40 = *v21;
          v41 = v21[1];
          v42 = *v19;
          v43 = v19[1];
          v44 = *v17;
          v45 = v17[1];
          do
          {
            v46 = *(float16x8_t *)(v36 + 16);
            v47 = vcvtq_f32_f16(*(float16x4_t *)v36);
            *(int8x8_t *)_Q22.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v44.i8), v47)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v47), (int8x16_t)vcgezq_f32(v47)))), *(int8x8_t *)v44.i8, *(int8x8_t *)v36);
            v48 = vcvt_hight_f32_f16(*(float16x8_t *)v36);
            v49 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v44), v48)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v48), (int8x16_t)vcgezq_f32(v48)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v36, *(int8x16_t *)v36, 8uLL));
            v50 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
            *(int8x8_t *)_Q21.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v45.i8), v50)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v50), (int8x16_t)vcgezq_f32(v50)))), *(int8x8_t *)v45.i8, *(int8x8_t *)v46.i8);
            v48.i64[0] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
            v51 = vcvt_hight_f32_f16(v46);
            v52 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v45), v51)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v51), (int8x16_t)vcgezq_f32(v51)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), *(int8x8_t *)v48.f32);
            v54 = *(float16x8_t *)(v36 + v33);
            v53 = *(float16x8_t *)(v36 + v33 + 16);
            v55 = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
            *(int8x8_t *)_Q20.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v42.i8), v55)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v55), (int8x16_t)vcgezq_f32(v55)))), *(int8x8_t *)v42.i8, *(int8x8_t *)v54.i8);
            v47.i64[0] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
            v56 = vcvt_hight_f32_f16(v54);
            v57 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v42), v56)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v56), (int8x16_t)vcgezq_f32(v56)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL), *(int8x8_t *)v47.f32);
            v58 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
            *(int8x8_t *)_Q19.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v43.i8), v58)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v58), (int8x16_t)vcgezq_f32(v58)))), *(int8x8_t *)v43.i8, *(int8x8_t *)v53.i8);
            v55.i64[0] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
            v59 = vcvt_hight_f32_f16(v53);
            v60 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v43), v59)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v59), (int8x16_t)vcgezq_f32(v59)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), *(int8x8_t *)v55.f32);
            v62 = *(float16x8_t *)(v36 + v34);
            v61 = *(float16x8_t *)(v36 + v34 + 16);
            v63 = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
            *(int8x8_t *)_Q16.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v40.i8), v63)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v63), (int8x16_t)vcgezq_f32(v63)))), *(int8x8_t *)v40.i8, *(int8x8_t *)v62.i8);
            v64 = (int8x8_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
            v65 = vcvt_hight_f32_f16(v62);
            v66 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v40), v65)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v65), (int8x16_t)vcgezq_f32(v65)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), v64);
            v67 = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
            *(int8x8_t *)_Q6.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v41.i8), v67)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v67), (int8x16_t)vcgezq_f32(v67)))), *(int8x8_t *)v41.i8, *(int8x8_t *)v61.i8);
            v68 = (int8x8_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
            v69 = vcvt_hight_f32_f16(v61);
            v70 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v41), v69)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v69), (int8x16_t)vcgezq_f32(v69)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), v68);
            v71 = *(float16x8_t *)(v36 + v35);
            v72 = *(float16x8_t *)(v36 + v35 + 16);
            v73 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            *(int8x8_t *)_Q5.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v38.i8), v73)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v73), (int8x16_t)vcgezq_f32(v73)))), *(int8x8_t *)v38.i8, *(int8x8_t *)v71.i8);
            v74 = (int8x8_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
            v75 = vcvt_hight_f32_f16(v71);
            v76 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v38), v75)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v75), (int8x16_t)vcgezq_f32(v75)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), v74);
            v77 = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
            v78 = vcvt_hight_f32_f16(v72);
            *(int8x8_t *)_Q4.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)v39.i8), v77)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v77), (int8x16_t)vcgezq_f32(v77)))), *(int8x8_t *)v39.i8, *(int8x8_t *)v72.i8);
            v32 = v37 + 16;
            v36 += 32;
            v79 = v37 + 32;
            _Q5.u64[1] = (unint64_t)v76;
            v37 += 16;
            v38 = _Q5;
            _Q16.u64[1] = (unint64_t)v66;
            _Q4.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(v39), v78)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v78), (int8x16_t)vcgezq_f32(v78)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL));
            v39 = _Q4;
            v40 = _Q16;
            _Q20.u64[1] = (unint64_t)v57;
            _Q6.u64[1] = (unint64_t)v70;
            v41 = _Q6;
            v42 = _Q20;
            _Q22.u64[1] = (unint64_t)v49;
            _Q19.u64[1] = (unint64_t)v60;
            v43 = _Q19;
            v44 = _Q22;
            _Q21.u64[1] = (unint64_t)v52;
            v45 = _Q21;
          }
          while (v79 <= a2);
        }
        else
        {
          v32 = 16;
        }
        if (v32 < a2)
        {
          v80 = (float16x8_t *)((char *)v17 + 2 * v10);
          v81 = v80[1];
          v82 = vcvtq_f32_f16(*(float16x4_t *)v80->i8);
          v83 = (int8x8_t)vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL).u64[0];
          v84 = vcvt_hight_f32_f16(_Q22);
          *(int8x8_t *)_Q22.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q22.i8), v82)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v82), (int8x16_t)vcgezq_f32(v82)))), *(int8x8_t *)_Q22.i8, *(int8x8_t *)v80->i8);
          v85 = vcvt_hight_f32_f16(*v80);
          _Q22.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v84, v85)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v85), (int8x16_t)vcgezq_f32(v85)))), v83, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v80, *(int8x16_t *)v80, 8uLL));
          v86 = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
          v82.i64[0] = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
          v87 = vcvt_hight_f32_f16(_Q21);
          *(int8x8_t *)_Q21.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q21.i8), v86)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v86), (int8x16_t)vcgezq_f32(v86)))), *(int8x8_t *)_Q21.i8, *(int8x8_t *)v81.i8);
          v86.i64[0] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
          v88 = vcvt_hight_f32_f16(v81);
          _Q21.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v87, v88)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v88), (int8x16_t)vcgezq_f32(v88)))), *(int8x8_t *)v82.f32, *(int8x8_t *)v86.f32);
          v89 = (float16x8_t *)((char *)v19 + 2 * v10);
          v90 = v89[1];
          v91 = vcvtq_f32_f16(*(float16x4_t *)v89->i8);
          v87.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
          v92 = vcvt_hight_f32_f16(_Q20);
          *(int8x8_t *)_Q20.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q20.i8), v91)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v91), (int8x16_t)vcgezq_f32(v91)))), *(int8x8_t *)_Q20.i8, *(int8x8_t *)v89->i8);
          v93 = vcvt_hight_f32_f16(*v89);
          _Q20.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v92, v93)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v93), (int8x16_t)vcgezq_f32(v93)))), *(int8x8_t *)v87.f32, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v89, *(int8x16_t *)v89, 8uLL));
          v94 = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
          v91.i64[0] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
          v95 = vcvt_hight_f32_f16(_Q19);
          *(int8x8_t *)_Q19.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q19.i8), v94)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v94), (int8x16_t)vcgezq_f32(v94)))), *(int8x8_t *)_Q19.i8, *(int8x8_t *)v90.i8);
          v94.i64[0] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
          v96 = vcvt_hight_f32_f16(v90);
          _Q19.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v95, v96)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v96), (int8x16_t)vcgezq_f32(v96)))), *(int8x8_t *)v91.f32, *(int8x8_t *)v94.f32);
          v97 = (float16x8_t *)((char *)v21 + 2 * v10);
          v98 = v97[1];
          v99 = vcvtq_f32_f16(*(float16x4_t *)v97->i8);
          v95.i64[0] = vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
          v100 = vcvt_hight_f32_f16(_Q16);
          *(int8x8_t *)_Q16.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q16.i8), v99)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v99), (int8x16_t)vcgezq_f32(v99)))), *(int8x8_t *)_Q16.i8, *(int8x8_t *)v97->i8);
          v101 = vcvt_hight_f32_f16(*v97);
          _Q16.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v100, v101)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v101), (int8x16_t)vcgezq_f32(v101)))), *(int8x8_t *)v95.f32, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v97, *(int8x16_t *)v97, 8uLL));
          v102 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
          v99.i64[0] = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
          v103 = vcvt_hight_f32_f16(_Q6);
          *(int8x8_t *)_Q6.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q6.i8), v102)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v102), (int8x16_t)vcgezq_f32(v102)))), *(int8x8_t *)_Q6.i8, *(int8x8_t *)v98.i8);
          v102.i64[0] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
          v104 = vcvt_hight_f32_f16(v98);
          _Q6.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v103, v104)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v104), (int8x16_t)vcgezq_f32(v104)))), *(int8x8_t *)v99.f32, *(int8x8_t *)v102.f32);
          v105 = (float16x8_t *)((char *)v23 + 2 * v10);
          v106 = v105[1];
          v107 = vcvtq_f32_f16(*(float16x4_t *)v105->i8);
          v103.i64[0] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
          v108 = vcvt_hight_f32_f16(_Q5);
          *(int8x8_t *)_Q5.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q5.i8), v107)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v107), (int8x16_t)vcgezq_f32(v107)))), *(int8x8_t *)_Q5.i8, *(int8x8_t *)v105->i8);
          v109 = vcvt_hight_f32_f16(*v105);
          _Q5.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v108, v109)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v109), (int8x16_t)vcgezq_f32(v109)))), *(int8x8_t *)v103.f32, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v105, *(int8x16_t *)v105, 8uLL));
          v110 = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
          v107.i64[0] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
          v111 = vcvt_hight_f32_f16(_Q4);
          *(int8x8_t *)_Q4.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q4.i8), v110)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v110), (int8x16_t)vcgezq_f32(v110)))), *(int8x8_t *)_Q4.i8, *(int8x8_t *)v106.i8);
          v110.i64[0] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
          v112 = vcvt_hight_f32_f16(v106);
          _Q4.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(v111, v112)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v112), (int8x16_t)vcgezq_f32(v112)))), *(int8x8_t *)v107.f32, *(int8x8_t *)v110.f32);
        }
        _H23 = _Q22.i16[1];
        __asm { FCVT            S23, H23 }
        _H24 = _Q0.i16[1];
        __asm { FCVT            S24, H24 }
        if (_S24 >= _S23)
          v121 = 0;
        else
          v121 = -1;
        __asm
        {
          FCVT            S23, H22
          FCVT            S24, H0
        }
        if (_S24 >= _S23)
          v124 = 0;
        else
          v124 = -1;
        v125.i16[0] = v124;
        v125.i16[1] = v121;
        _H24 = _Q22.i16[2];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[2];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v130 = 0;
        else
          v130 = -1;
        v125.i16[2] = v130;
        _H24 = _Q22.i16[3];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[3];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v135 = 0;
        else
          v135 = -1;
        v125.i16[3] = v135;
        _H24 = _Q22.i16[4];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[4];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v140 = 0;
        else
          v140 = -1;
        v125.i16[4] = v140;
        _H24 = _Q22.i16[5];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[5];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v145 = 0;
        else
          v145 = -1;
        v125.i16[5] = v145;
        _H24 = _Q22.i16[6];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[6];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v150 = 0;
        else
          v150 = -1;
        v125.i16[6] = v150;
        _H24 = _Q22.i16[7];
        __asm { FCVT            S24, H24 }
        _H25 = _Q0.i16[7];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v155 = 0;
        else
          v155 = -1;
        v125.i16[7] = v155;
        _H24 = _Q21.i16[1];
        __asm { FCVT            S24, H24 }
        _H25 = _Q7.i16[1];
        __asm { FCVT            S25, H25 }
        if (_S25 >= _S24)
          v160 = 0;
        else
          v160 = -1;
        __asm
        {
          FCVT            S24, H21
          FCVT            S25, H7
        }
        if (_S25 >= _S24)
          v163 = 0;
        else
          v163 = -1;
        v164.i16[0] = v163;
        v164.i16[1] = v160;
        _H25 = _Q21.i16[2];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[2];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v169 = 0;
        else
          v169 = -1;
        v164.i16[2] = v169;
        _H25 = _Q21.i16[3];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[3];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v174 = 0;
        else
          v174 = -1;
        v164.i16[3] = v174;
        _H25 = _Q21.i16[4];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[4];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v179 = 0;
        else
          v179 = -1;
        v164.i16[4] = v179;
        _H25 = _Q21.i16[5];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[5];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v184 = 0;
        else
          v184 = -1;
        v164.i16[5] = v184;
        _H25 = _Q21.i16[6];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[6];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v189 = 0;
        else
          v189 = -1;
        v164.i16[6] = v189;
        _H25 = _Q21.i16[7];
        __asm { FCVT            S25, H25 }
        _H26 = _Q7.i16[7];
        __asm { FCVT            S26, H26 }
        if (_S26 >= _S25)
          v194 = 0;
        else
          v194 = -1;
        v164.i16[7] = v194;
        v195 = vbslq_s8(v164, (int8x16_t)v13, v15);
        v196 = vbslq_s8(v125, (int8x16_t)_Q1, v14);
        v197 = vcvtq_f32_f16(*(float16x4_t *)_Q22.i8);
        _D23 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q0.i8), v197)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v197), (int8x16_t)vcgezq_f32(v197)))), *(int8x8_t *)_Q0.i8, *(int8x8_t *)_Q22.i8);
        v199 = (int8x8_t)vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL).u64[0];
        v200 = vcvt_hight_f32_f16(_Q22);
        _D0 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(_Q0), v200)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v200), (int8x16_t)vcgezq_f32(v200)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL), v199);
        _Q24 = vcvtq_f32_f16(*(float16x4_t *)_Q21.i8);
        _D22 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q7.i8), _Q24)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(_Q24), (int8x16_t)vcgezq_f32(_Q24)))), *(int8x8_t *)_Q7.i8, *(int8x8_t *)_Q21.i8);
        v204 = (int8x8_t)vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
        v205 = vcvt_hight_f32_f16(_Q21);
        _D21 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvt_hight_f32_f16(_Q7), v205)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v205), (int8x16_t)vcgezq_f32(v205)))), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 8uLL), v204);
        _H7 = _D22.i16[1];
        __asm { FCVT            S7, H7 }
        _Q24.i16[0] = _Q19.i16[1];
        __asm { FCVT            S24, H24 }
        if (_S7 >= _Q24.f32[0])
          v209 = 0;
        else
          v209 = -1;
        __asm
        {
          FCVT            S7, H22
          FCVT            S24, H19
        }
        if (_S7 >= _S24)
          v212 = 0;
        else
          v212 = -1;
        v213.i16[0] = v212;
        v213.i16[1] = v209;
        _H7 = _D22.i16[2];
        __asm { FCVT            S7, H7 }
        _H25 = _Q19.i16[2];
        __asm { FCVT            S25, H25 }
        if (_S7 >= _S25)
          v218 = 0;
        else
          v218 = -1;
        v213.i16[2] = v218;
        _H7 = _D22.i16[3];
        __asm { FCVT            S7, H7 }
        _H26 = _Q19.i16[3];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v223 = 0;
        else
          v223 = -1;
        v213.i16[3] = v223;
        __asm { FCVT            S7, H21 }
        _H26 = _Q19.i16[4];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v227 = 0;
        else
          v227 = -1;
        v213.i16[4] = v227;
        _H7 = _D21.i16[1];
        __asm { FCVT            S7, H7 }
        _H26 = _Q19.i16[5];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v232 = 0;
        else
          v232 = -1;
        v213.i16[5] = v232;
        _H7 = _D21.i16[2];
        __asm { FCVT            S7, H7 }
        _H26 = _Q19.i16[6];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v237 = 0;
        else
          v237 = -1;
        v213.i16[6] = v237;
        _H7 = _D21.i16[3];
        __asm { FCVT            S7, H7 }
        _H26 = _Q19.i16[7];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v242 = 0;
        else
          v242 = -1;
        v213.i16[7] = v242;
        _H7 = _D23.i16[1];
        __asm { FCVT            S7, H7 }
        _H26 = _Q20.i16[1];
        __asm { FCVT            S26, H26 }
        if (_S7 >= _S26)
          v247 = 0;
        else
          v247 = -1;
        __asm
        {
          FCVT            S7, H23
          FCVT            S26, H20
        }
        if (_S7 >= _S26)
          v250 = 0;
        else
          v250 = -1;
        v251.i16[0] = v250;
        v251.i16[1] = v247;
        _H27 = _D23.i16[2];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[2];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v256 = 0;
        else
          v256 = -1;
        v251.i16[2] = v256;
        _H27 = _D23.i16[3];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[3];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v261 = 0;
        else
          v261 = -1;
        v251.i16[3] = v261;
        __asm { FCVT            S27, H0 }
        _H28 = _Q20.i16[4];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v265 = 0;
        else
          v265 = -1;
        v251.i16[4] = v265;
        _H27 = _D0.i16[1];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[5];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v270 = 0;
        else
          v270 = -1;
        v251.i16[5] = v270;
        _H27 = _D0.i16[2];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[6];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v275 = 0;
        else
          v275 = -1;
        v251.i16[6] = v275;
        _H27 = _D0.i16[3];
        __asm { FCVT            S27, H27 }
        _H28 = _Q20.i16[7];
        __asm { FCVT            S28, H28 }
        if (_S27 >= _S28)
          v280 = 0;
        else
          v280 = -1;
        v251.i16[7] = v280;
        v281 = vbslq_s8(v251, (int8x16_t)(*(_OWORD *)&_Q1 | __PAIR128__(0x1000100010001, 0x1000100010001)), v196);
        v282 = vbslq_s8(v213, (int8x16_t)(*(_OWORD *)&v13 | __PAIR128__(0x1000100010001, 0x1000100010001)), v195);
        v283 = vcvtq_f32_f16(*(float16x4_t *)_Q20.i8);
        _D17 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D23), v283)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v283), (int8x16_t)vcgezq_f32(v283)))), (int8x8_t)_D23, *(int8x8_t *)_Q20.i8);
        v285 = (int8x8_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
        v286 = vcvt_hight_f32_f16(_Q20);
        _D0 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D0), v286)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v286), (int8x16_t)vcgezq_f32(v286)))), (int8x8_t)_D0, v285);
        v288 = vcvtq_f32_f16(*(float16x4_t *)_Q19.i8);
        _D20 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D22), v288)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v288), (int8x16_t)vcgezq_f32(v288)))), (int8x8_t)_D22, *(int8x8_t *)_Q19.i8);
        _D22 = (int8x8_t)vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
        v291 = vcvt_hight_f32_f16(_Q19);
        _D19 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D21), v291)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v291), (int8x16_t)vcgezq_f32(v291)))), (int8x8_t)_D21, _D22);
        _H21 = _D17.i16[1];
        __asm { FCVT            S21, H21 }
        _D22.i16[0] = _Q16.i16[1];
        __asm { FCVT            S22, H22 }
        if (_S21 >= *(float *)_D22.i32)
          v295 = 0;
        else
          v295 = -1;
        __asm
        {
          FCVT            S21, H17
          FCVT            S22, H16
        }
        if (_S21 >= _S22)
          v298 = 0;
        else
          v298 = -1;
        v299.i16[0] = v298;
        v299.i16[1] = v295;
        _H22 = _D17.i16[2];
        __asm { FCVT            S22, H22 }
        _H23 = _Q16.i16[2];
        __asm { FCVT            S23, H23 }
        if (_S22 >= _S23)
          v304 = 0;
        else
          v304 = -1;
        v299.i16[2] = v304;
        _H23 = _D17.i16[3];
        __asm { FCVT            S23, H23 }
        _H24 = _Q16.i16[3];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v309 = 0;
        else
          v309 = -1;
        v299.i16[3] = v309;
        __asm { FCVT            S23, H0 }
        _H24 = _Q16.i16[4];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v313 = 0;
        else
          v313 = -1;
        v299.i16[4] = v313;
        _H23 = _D0.i16[1];
        __asm { FCVT            S23, H23 }
        _H24 = _Q16.i16[5];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v318 = 0;
        else
          v318 = -1;
        v299.i16[5] = v318;
        _H23 = _D0.i16[2];
        __asm { FCVT            S23, H23 }
        _H24 = _Q16.i16[6];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v323 = 0;
        else
          v323 = -1;
        v299.i16[6] = v323;
        _H23 = _D0.i16[3];
        __asm { FCVT            S23, H23 }
        _H24 = _Q16.i16[7];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v328 = 0;
        else
          v328 = -1;
        v299.i16[7] = v328;
        _H23 = _D20.i16[1];
        __asm { FCVT            S23, H23 }
        _H24 = _Q6.i16[1];
        __asm { FCVT            S24, H24 }
        if (_S23 >= _S24)
          v333 = 0;
        else
          v333 = -1;
        __asm
        {
          FCVT            S23, H20
          FCVT            S24, H6
        }
        if (_S23 >= _S24)
          v336 = 0;
        else
          v336 = -1;
        v337.i16[0] = v336;
        v337.i16[1] = v333;
        _H25 = _D20.i16[2];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[2];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v342 = 0;
        else
          v342 = -1;
        v337.i16[2] = v342;
        _H25 = _D20.i16[3];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[3];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v347 = 0;
        else
          v347 = -1;
        v337.i16[3] = v347;
        __asm { FCVT            S25, H19 }
        _H26 = _Q6.i16[4];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v351 = 0;
        else
          v351 = -1;
        v337.i16[4] = v351;
        _H25 = _D19.i16[1];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[5];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v356 = 0;
        else
          v356 = -1;
        v337.i16[5] = v356;
        _H25 = _D19.i16[2];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[6];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v361 = 0;
        else
          v361 = -1;
        v337.i16[6] = v361;
        _H25 = _D19.i16[3];
        __asm { FCVT            S25, H25 }
        _H26 = _Q6.i16[7];
        __asm { FCVT            S26, H26 }
        if (_S25 >= _S26)
          v366 = 0;
        else
          v366 = -1;
        v337.i16[7] = v366;
        v367 = vbslq_s8(v337, (int8x16_t)(*(_OWORD *)&v13 | __PAIR128__(0x2000200020002, 0x2000200020002)), v282);
        v368 = vbslq_s8(v299, (int8x16_t)(*(_OWORD *)&_Q1 | __PAIR128__(0x2000200020002, 0x2000200020002)), v281);
        v369 = vcvtq_f32_f16(*(float16x4_t *)_Q16.i8);
        _D17 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D17), v369)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v369), (int8x16_t)vcgezq_f32(v369)))), (int8x8_t)_D17, *(int8x8_t *)_Q16.i8);
        v371 = (int8x8_t)vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
        v372 = vcvt_hight_f32_f16(_Q16);
        _D21 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D0), v372)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v372), (int8x16_t)vcgezq_f32(v372)))), (int8x8_t)_D0, v371);
        v374 = vcvtq_f32_f16(*(float16x4_t *)_Q6.i8);
        _D16 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D20), v374)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v374), (int8x16_t)vcgezq_f32(v374)))), (int8x8_t)_D20, *(int8x8_t *)_Q6.i8);
        _D0 = (int8x8_t)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
        v377 = vcvt_hight_f32_f16(_Q6);
        _D6 = (float16x4_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D19), v377)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v377), (int8x16_t)vcgezq_f32(v377)))), (int8x8_t)_D19, _D0);
        _D0.i16[0] = _D16.i16[1];
        __asm { FCVT            S0, H0 }
        _H19 = _Q4.i16[1];
        __asm { FCVT            S19, H19 }
        if (*(float *)_D0.i32 >= _S19)
          v381 = 0;
        else
          v381 = -1;
        __asm
        {
          FCVT            S0, H16
          FCVT            S19, H4
        }
        if (_S0 >= _S19)
          v384 = 0;
        else
          v384 = -1;
        v385.i16[0] = v384;
        v385.i16[1] = v381;
        _H0 = _D16.i16[2];
        __asm { FCVT            S0, H0 }
        _H20 = _Q4.i16[2];
        __asm { FCVT            S20, H20 }
        if (_S0 >= _S20)
          v390 = 0;
        else
          v390 = -1;
        v385.i16[2] = v390;
        _H0 = _D16.i16[3];
        __asm { FCVT            S0, H0 }
        _H22 = _Q4.i16[3];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v395 = 0;
        else
          v395 = -1;
        v385.i16[3] = v395;
        __asm { FCVT            S0, H6 }
        _H22 = _Q4.i16[4];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v399 = 0;
        else
          v399 = -1;
        v385.i16[4] = v399;
        _H0 = _D6.i16[1];
        __asm { FCVT            S0, H0 }
        _H22 = _Q4.i16[5];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v404 = 0;
        else
          v404 = -1;
        v385.i16[5] = v404;
        _H0 = _D6.i16[2];
        __asm { FCVT            S0, H0 }
        _H22 = _Q4.i16[6];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v409 = 0;
        else
          v409 = -1;
        v385.i16[6] = v409;
        _H0 = _D6.i16[3];
        __asm { FCVT            S0, H0 }
        _H22 = _Q4.i16[7];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v414 = 0;
        else
          v414 = -1;
        v385.i16[7] = v414;
        _H0 = _D17.i16[1];
        __asm { FCVT            S0, H0 }
        _H22 = _Q5.i16[1];
        __asm { FCVT            S22, H22 }
        if (_S0 >= _S22)
          v419 = 0;
        else
          v419 = -1;
        __asm
        {
          FCVT            S0, H17
          FCVT            S22, H5
        }
        if (_S0 >= _S22)
          v422 = 0;
        else
          v422 = -1;
        v423.i16[0] = v422;
        v423.i16[1] = v419;
        _H0 = _D17.i16[2];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[2];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v428 = 0;
        else
          v428 = -1;
        v423.i16[2] = v428;
        _H0 = _D17.i16[3];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[3];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v433 = 0;
        else
          v433 = -1;
        v423.i16[3] = v433;
        __asm { FCVT            S0, H21 }
        _H24 = _Q5.i16[4];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v437 = 0;
        else
          v437 = -1;
        v423.i16[4] = v437;
        _H0 = _D21.i16[1];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[5];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v442 = 0;
        else
          v442 = -1;
        v423.i16[5] = v442;
        _H0 = _D21.i16[2];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[6];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v447 = 0;
        else
          v447 = -1;
        v423.i16[6] = v447;
        _H0 = _D21.i16[3];
        __asm { FCVT            S0, H0 }
        _H24 = _Q5.i16[7];
        __asm { FCVT            S24, H24 }
        if (_S0 >= _S24)
          v452 = 0;
        else
          v452 = -1;
        v423.i16[7] = v452;
        v453 = vcvtq_f32_f16(*(float16x4_t *)_Q5.i8);
        *(int8x8_t *)_Q0.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D17), v453)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v453), (int8x16_t)vcgezq_f32(v453)))), (int8x8_t)_D17, *(int8x8_t *)_Q5.i8);
        v454 = (int8x8_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        v455 = vcvt_hight_f32_f16(_Q5);
        _Q0.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D21), v455)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v455), (int8x16_t)vcgezq_f32(v455)))), (int8x8_t)_D21, v454);
        v14 = vbslq_s8(v423, (int8x16_t)(*(_OWORD *)&_Q1 | __PAIR128__(0x3000300030003, 0x3000300030003)), v368);
        v456 = vcvtq_f32_f16(*(float16x4_t *)_Q4.i8);
        *(int8x8_t *)_Q7.i8 = vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D16), v456)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v456), (int8x16_t)vcgezq_f32(v456)))), (int8x8_t)_D16, *(int8x8_t *)_Q4.i8);
        v455.i64[0] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
        v457 = vcvt_hight_f32_f16(_Q4);
        _Q7.u64[1] = (unint64_t)vbsl_s8(vorn_s8((int8x8_t)vmovn_s32(vcgeq_f32(vcvtq_f32_f16(_D6), v457)), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v457), (int8x16_t)vcgezq_f32(v457)))), (int8x8_t)_D6, *(int8x8_t *)v455.f32);
        v15 = vbslq_s8(v385, (int8x16_t)(*(_OWORD *)&v13 | __PAIR128__(0x3000300030003, 0x3000300030003)), v367);
        _Q1 = vaddq_s16(_Q1, v12);
        v13 = vaddq_s16(v13, v12);
        v8 += 4;
        v11 += 8 * a4;
      }
      while (v8 < a3);
    }
    else
    {
      v14 = 0uLL;
      _Q0.i64[0] = 0x400040004000400;
      _Q0.i64[1] = 0x400040004000400;
      _Q7.i64[0] = 0x400040004000400;
      _Q7.i64[1] = 0x400040004000400;
      v15 = 0uLL;
    }
    v545[0] = _Q0;
    v545[1] = _Q7;
    v544[0] = v14;
    v544[1] = v15;
    v465 = v14.u16[0];
    *a5 = v14.u16[0];
    for (j = 2; j != 32; j += 2)
    {
      _Q1.i16[0] = *(_WORD *)((char *)v545 + j);
      __asm
      {
        FCVT            S2, H1
        FCVT            S3, H0
      }
      if (_S3 <= _S2)
      {
        v469 = *(unsigned __int16 *)((char *)v544 + j);
        if (_S3 < _S2 || (_Q1.i32[0] = _Q0.i32[0], v465 > v469))
        {
          *a5 = v469;
          v465 = v469;
          _Q0.i32[0] = _Q1.i32[0];
        }
      }
    }
    v470 = 0;
    _Q1 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    _H2 = _Q1.i16[1];
    __asm { FCVT            S2, H2 }
    v474 = (__int128 *)(result + 2 * v465 * a4);
    _H3 = _Q1.i16[2];
    __asm { FCVT            S3, H3 }
    _H4 = _Q1.i16[3];
    __asm { FCVT            S4, H4 }
    _H5 = _Q1.i16[4];
    __asm { FCVT            S5, H5 }
    _H6 = _Q1.i16[5];
    __asm { FCVT            S6, H6 }
    _H7 = _Q1.i16[6];
    __asm { FCVT            S7, H7 }
    _H16 = _Q1.i16[7];
    __asm { FCVT            S16, H16 }
    v487 = v474;
    do
    {
      v488 = v470;
      v470 += 16;
      if (v470 > a2)
        break;
      _Q17 = *v487;
      _Q19 = v487[1];
      v487 += 2;
      _H18 = WORD1(_Q19);
      __asm { FCVT            S18, H18 }
      v493 = _S2 == _S18 ? -1 : 0;
      __asm
      {
        FCVT            S18, H19
        FCVT            S20, H1
      }
      v496 = _S20 == _S18 ? -1 : 0;
      v497.i16[0] = v496;
      v497.i16[1] = v493;
      _H20 = WORD2(_Q19);
      __asm { FCVT            S20, H20 }
      v500 = _S3 == _S20 ? -1 : 0;
      v497.i16[2] = v500;
      _H20 = WORD3(_Q19);
      __asm { FCVT            S20, H20 }
      v503 = _S4 == _S20 ? -1 : 0;
      v497.i16[3] = v503;
      _H20 = WORD4(_Q19);
      __asm { FCVT            S20, H20 }
      v506 = _S5 == _S20 ? -1 : 0;
      v497.i16[4] = v506;
      _H20 = WORD5(_Q19);
      __asm { FCVT            S20, H20 }
      v509 = _S6 == _S20 ? -1 : 0;
      v497.i16[5] = v509;
      _H20 = WORD6(_Q19);
      __asm { FCVT            S20, H20 }
      v512 = _S7 == _S20 ? -1 : 0;
      v497.i16[6] = v512;
      _H19 = HIWORD(_Q19);
      __asm { FCVT            S19, H19 }
      v515 = _S16 == _S19 ? -1 : 0;
      v497.i16[7] = v515;
      _H19 = WORD1(_Q17);
      __asm { FCVT            S19, H19 }
      v518 = _S2 == _S19 ? -1 : 0;
      __asm
      {
        FCVT            S19, H1
        FCVT            S20, H17
      }
      v521 = _S19 == _S20 ? -1 : 0;
      v522.i16[0] = v521;
      v522.i16[1] = v518;
      _H20 = WORD2(_Q17);
      __asm { FCVT            S20, H20 }
      v525 = _S3 == _S20 ? -1 : 0;
      v522.i16[2] = v525;
      _H20 = WORD3(_Q17);
      __asm { FCVT            S20, H20 }
      v528 = _S4 == _S20 ? -1 : 0;
      v522.i16[3] = v528;
      _H20 = WORD4(_Q17);
      __asm { FCVT            S20, H20 }
      v531 = _S5 == _S20 ? -1 : 0;
      v522.i16[4] = v531;
      _H20 = WORD5(_Q17);
      __asm { FCVT            S20, H20 }
      v534 = _S6 == _S20 ? -1 : 0;
      v522.i16[5] = v534;
      _H20 = WORD6(_Q17);
      __asm { FCVT            S20, H20 }
      v537 = _S7 == _S20 ? -1 : 0;
      v522.i16[6] = v537;
      _H17 = HIWORD(_Q17);
      __asm { FCVT            S17, H17 }
      v540 = _S16 == _S17 ? -1 : 0;
      v522.i16[7] = v540;
    }
    while ((vmaxvq_u16((uint16x8_t)vorrq_s8(v522, v497)) & 0x8000) == 0);
    if (v488 < a2)
    {
      __asm { FCVT            S1, H0 }
      while (1)
      {
        _H2 = *((_WORD *)v474 + v488);
        __asm { FCVT            S2, H2 }
        if (_S2 == _S1)
          break;
        if (a2 == ++v488)
        {
          v488 = a2;
          break;
        }
      }
    }
    *a6 = v488;
  }
  return result;
}

void dtrsm_noPack_RUNU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, double *__X, uint64_t a6, double a7, float64x2_t a8, double a9, double a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14)
{
  float64x2_t v14;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27;
  double v28;
  double *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  uint64_t v39;
  double *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  double *v90;
  int64x2_t *v91;
  int64x2_t *v92;
  int64x2_t *v93;
  float64_t *v94;
  uint64_t v95;
  int64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  double *v99;
  float64x2_t v100;
  float64_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  double *v105;
  float64x2_t v106;
  float64_t *v107;
  float64_t v108;
  double *v109;
  float64x2_t v110;
  float64_t v111;
  double *v112;
  float64x2_t v113;
  float64x2_t v114;
  double *v115;
  double *v116;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v24 = 2;
      }
      else
      {
        a8.f64[0] = *(float64_t *)(a3 + 8 * a4);
        v24 = 2;
        v29 = __X;
        v30 = __N;
        do
        {
          v31 = *v29 * a7;
          *v29 = v31;
          v29[a6] = v29[a6] * a7 - v31 * a8.f64[0];
          ++v29;
          --v30;
        }
        while (v30);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v24 = 1;
      cblas_dscal(__N, a7, __X, 1);
    }
    else
    {
      v24 = 0;
    }
  }
  else if (__N < 1)
  {
    v24 = 3;
  }
  else
  {
    a8.f64[0] = *(float64_t *)(a3 + 8 * a4);
    v21 = (double *)(a3 + 16 * a4);
    v22 = *v21;
    v23 = v21[1];
    v24 = 3;
    v25 = __X;
    v26 = __N;
    do
    {
      v27 = *v25 * a7;
      *v25 = v27;
      v28 = v25[a6] * a7 - v27 * a8.f64[0];
      v25[a6] = v28;
      v25[2 * a6] = -(v23 * v28 + *v25 * v22 - v25[2 * a6] * a7);
      ++v25;
      --v26;
    }
    while (v26);
  }
  if (v24 < a2)
  {
    v32 = a6;
    do
    {
      if (__N < 4)
      {
        v33 = 0;
      }
      else
      {
        v33 = 0;
        v34 = (double *)(a3 + 8 * v24 * a4);
        v36 = (double *)(a3 + 8 * (v24 + 2) * a4);
        v37 = (double *)(a3 + 8 * (v24 + 3) * a4);
        v38 = __X;
        do
        {
          v39 = v24;
          v35 = (double *)(a3 + 8 * (a4 + v24 * a4));
          v40 = v35;
          v41 = (float64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v42 = (float64x2_t *)(a3 + 8 * v24 * a4);
          v43 = (float64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v44 = (float64x2_t *)v38;
          v45 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v46 = v45;
          v47 = v45;
          v48 = v45;
          v49 = v45;
          v50 = v45;
          v51 = v45;
          v52 = v45;
          if ((v24 & 1) != 0)
          {
            v53 = *(float64x2_t *)(v38 + 2);
            v44 = (float64x2_t *)&v38[v32];
            v42 = (float64x2_t *)(v34 + 1);
            v40 = v35 + 1;
            v43 = (float64x2_t *)(v36 + 1);
            v41 = (float64x2_t *)(v37 + 1);
            v45 = vmlaq_n_f64(v45, *(float64x2_t *)v38, *v34);
            v47 = vmlaq_n_f64(v47, *(float64x2_t *)v38, *v35);
            v49 = vmlaq_n_f64(v49, *(float64x2_t *)v38, *v36);
            v51 = vmlaq_n_f64(v51, *(float64x2_t *)v38, *v37);
            v46 = vmlaq_n_f64(v46, v53, *v34);
            v48 = vmlaq_n_f64(v48, v53, *v35);
            v50 = vmlaq_n_f64(v50, v53, *v36);
            v52 = vmlaq_n_f64(v52, v53, *v37);
            v39 = v24 - 1;
          }
          for (; v39; v39 -= 2)
          {
            v55 = *v44;
            v56 = v44[1];
            v54 = (float64x2_t *)((char *)v44 + v32 * 8);
            v57 = *v54;
            v58 = v54[1];
            v44 = (float64x2_t *)((char *)v54 + v32 * 8);
            v59 = *v42++;
            v60 = *(float64x2_t *)v40;
            v40 += 2;
            v61 = *v43++;
            v62 = *v41++;
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v55, v59.f64[0]), v57, v59, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v55, v60.f64[0]), v57, v60, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v55, v61.f64[0]), v57, v61, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v55, v62.f64[0]), v57, v62, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v56, v59.f64[0]), v58, v59, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v56, v60.f64[0]), v58, v60, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v56, v61.f64[0]), v58, v61, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v56, v62.f64[0]), v58, v62, 1);
          }
          v64 = *v44;
          v65 = v44[1];
          v63 = (float64x2_t *)((char *)v44 + v32 * 8);
          v67 = *v63;
          v68 = v63[1];
          v66 = (float64x2_t *)((char *)v63 + v32 * 8);
          v70 = *v66;
          v71 = v66[1];
          v69 = (float64x2_t *)((char *)v66 + v32 * 8);
          v72 = *v69;
          v73 = v69[1];
          v74 = (float64x2_t *)((char *)v69 + 8 * a6 + -32 * a6);
          a8 = vmulq_n_f64(v64, a7);
          a11 = vmulq_n_f64(v68, a7);
          a12 = vmulq_n_f64(v70, a7);
          a13 = vmulq_n_f64(v71, a7);
          v14 = vsubq_f64(a8, v45);
          v75 = vsubq_f64(vmulq_n_f64(v65, a7), v46);
          v76 = vsubq_f64(vmulq_n_f64(v67, a7), v47);
          v77 = *v41;
          v78 = vmlsq_lane_f64(v76, v14, *v40, 0);
          v79 = vmlsq_lane_f64(vsubq_f64(a11, v48), v75, *v40, 0);
          v80 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a12, v49), v14, v43->f64[0], 0), v78, *v43, 1);
          v81 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a13, v50), v75, v43->f64[0], 0), v79, *v43, 1);
          a8.f64[0] = v41[1].f64[0];
          *v74 = v14;
          v74[1] = v75;
          v82 = (float64x2_t *)((char *)v74 + v32 * 8);
          *v82 = v78;
          v82[1] = v79;
          v83 = (float64x2_t *)((char *)v82 + v32 * 8);
          *v83 = v80;
          v83[1] = v81;
          v84 = (float64x2_t *)((char *)v83 + v32 * 8);
          *v84 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v72, a7), v51), v14, v77.f64[0], 0), v78, v77, 1), v80, a8.f64[0], 0);
          v84[1] = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v73, a7), v52), v75, v77.f64[0], 0), v79, v77, 1), v81, a8.f64[0], 0);
          v33 += 4;
          v38 += 4;
        }
        while (v33 < __N - 3);
      }
      v85 = __N - v33;
      if (__N > v33)
      {
        v86 = (unint64_t *)(a3 + 8 * v24 * a4);
        v87 = (unint64_t *)(a3 + 8 * (a4 + v24 * a4));
        v88 = (unint64_t *)(a3 + 8 * (v24 + 2) * a4);
        v90 = &__X[v33];
        do
        {
          v89 = (unint64_t *)(a3 + 8 * (v24 + 3) * a4);
          v91 = (int64x2_t *)v89;
          v92 = (int64x2_t *)(a3 + 8 * v24 * a4);
          v93 = (int64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v94 = v90;
          v95 = v24;
          v96 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4));
          v97 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v98 = v97;
          if ((v24 & 1) != 0)
          {
            v94 = &v90[v32];
            *(_QWORD *)&a11.f64[0] = *v86;
            v92 = (int64x2_t *)(v86 + 1);
            *(_QWORD *)&a12.f64[0] = *v87;
            v96 = (int64x2_t *)(v87 + 1);
            *(_QWORD *)&a13.f64[0] = *v88;
            v93 = (int64x2_t *)(v88 + 1);
            *(_QWORD *)&a14.f64[0] = *v89;
            v91 = (int64x2_t *)(v89 + 1);
            v97 = vmlaq_n_f64(v97, (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)a12), *v90);
            v98 = vmlaq_n_f64(v98, (float64x2_t)vtrn1q_s64((int64x2_t)a13, (int64x2_t)a14), *v90);
            v95 = v24 - 1;
          }
          for (; v95; v95 -= 2)
          {
            v100.f64[0] = *v94;
            v99 = &v94[v32];
            v101 = *v99;
            v94 = &v99[v32];
            v102 = *v92++;
            v103 = *v96++;
            v104 = *v93++;
            v100.f64[1] = v101;
            a14 = *(float64x2_t *)v91++;
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(v97, (float64x2_t)vtrn1q_s64(v102, v103), v100.f64[0]), (float64x2_t)vtrn2q_s64(v102, v103), v100, 1);
            v98 = vmlaq_laneq_f64(vmlaq_n_f64(v98, (float64x2_t)vtrn1q_s64(v104, (int64x2_t)a14), v100.f64[0]), (float64x2_t)vtrn2q_s64(v104, (int64x2_t)a14), v100, 1);
          }
          v106.f64[0] = *v94;
          v105 = &v94[v32];
          v108 = *v105;
          v107 = &v105[v32];
          v110.f64[0] = *v107;
          v109 = &v107[v32];
          v111 = *v109;
          v112 = &v109[a6 + -4 * a6];
          v106.f64[1] = v108;
          v110.f64[1] = v111;
          a11 = vmulq_n_f64(v110, a7);
          v113 = vsubq_f64(vmulq_n_f64(v106, a7), v97);
          a12.f64[0] = v113.f64[0];
          *(_QWORD *)&a14.f64[1] = v96->i64[0];
          v14 = *(float64x2_t *)v93;
          a13 = (float64x2_t)vtrn1q_s64(*v93, *v91);
          a8 = vmlsq_lane_f64(v113, a14, v113.f64[0], 0);
          a12.f64[1] = a8.f64[1];
          a14 = (float64x2_t)vtrn2q_s64(*v93, *v91);
          v114 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a11, v98), a13, a12.f64[0], 0), a14, a12, 1);
          *(_QWORD *)&a14.f64[1] = v91[1].i64[0];
          *v112 = a12.f64[0];
          v115 = &v112[v32];
          *v115 = a8.f64[1];
          v116 = &v115[v32];
          *v116 = v114.f64[0];
          v116[a6] = vmlsq_lane_f64(v114, a14, *(double *)&v114, 0).f64[1];
          ++v90;
          --v85;
        }
        while (v85);
      }
      v24 += 4;
    }
    while (v24 < a2);
  }
}

void dtrsm_noPack_RUNN(uint64_t __N, uint64_t a2, double *a3, uint64_t a4, double *__X, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13, float64x2_t a14)
{
  float64x2_t v14;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  const double *v46;
  uint64_t v47;
  const double *v48;
  uint64_t v49;
  const double *v50;
  uint64_t v51;
  const double *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  double *v63;
  double *v64;
  double *v65;
  double *v66;
  double *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  uint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t *v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t *v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t *v110;
  float64x2_t *v111;
  float64x2_t *v112;
  uint64_t v113;
  double *v114;
  unint64_t *v115;
  unint64_t *v116;
  double *v117;
  int64x2_t *v118;
  float64_t *v119;
  uint64_t v120;
  int64x2_t *v121;
  int64x2_t *v122;
  int64x2_t *v123;
  float64x2_t v124;
  float64x2_t v125;
  double *v126;
  float64x2_t v127;
  float64_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  double *v132;
  float64x2_t v133;
  float64_t *v134;
  float64_t v135;
  double *v136;
  float64x2_t v137;
  float64_t v138;
  double *v139;
  float64x2_t v140;
  float64x2_t v141;
  double *v142;
  double *v143;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v29 = 2;
      }
      else
      {
        v35 = &a3[a4];
        v36 = a7 / *a3;
        v37 = *v35;
        v38 = v35[1];
        v29 = 2;
        v39 = __X;
        v40 = __N;
        v41 = 1.0 / v38;
        do
        {
          v42 = v36 * *v39;
          *v39 = v42;
          v39[a6] = v41 * (v39[a6] * a7 - v42 * v37);
          ++v39;
          --v40;
        }
        while (v40);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v29 = 1;
      cblas_dscal(__N, a7 / *a3, __X, 1);
    }
    else
    {
      v29 = 0;
    }
  }
  else if (__N < 1)
  {
    v29 = 3;
  }
  else
  {
    v21 = &a3[a4];
    v22 = &a3[2 * a4];
    v23 = *v22;
    v24 = v22[1];
    v25 = a7 / *a3;
    v26 = *v21;
    v27 = 1.0 / v21[1];
    v28 = v22[2];
    v29 = 3;
    v30 = __X;
    v31 = __N;
    v32 = 1.0 / v28;
    do
    {
      v33 = v25 * *v30;
      *v30 = v33;
      v34 = v27 * (v30[a6] * a7 - v33 * v26);
      v30[a6] = v34;
      v14.f64[0] = v30[2 * a6];
      a14.f64[0] = v32 * -(v24 * v34 + *v30 * v23 - v14.f64[0] * a7);
      v30[2 * a6] = a14.f64[0];
      ++v30;
      --v31;
    }
    while (v31);
  }
  if (v29 < a2)
  {
    v43 = a4 + 1;
    v44 = a6;
    do
    {
      v45 = &a3[v29 * a4];
      v46 = &v45[v29];
      v47 = v29 + 1;
      v48 = &a3[(v29 + 1) * v43];
      v49 = v29 + 2;
      v50 = &a3[(v29 + 2) * v43];
      v51 = v29 + 3;
      v52 = &a3[(v29 + 3) * v43];
      v53 = vld1q_dup_f64(v46);
      v54 = vld1q_dup_f64(v48);
      v55 = vld1q_dup_f64(v50);
      v56 = vld1q_dup_f64(v52);
      v57 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v58 = vdivq_f64(v57, v53);
      v59 = vdivq_f64(v57, v54);
      v60 = vdivq_f64(v57, v55);
      v61 = vdivq_f64(v57, v56);
      if (__N < 4)
      {
        v62 = 0;
      }
      else
      {
        v62 = 0;
        v64 = &a3[v49 * a4];
        v65 = &a3[v51 * a4];
        v66 = __X;
        do
        {
          v63 = &a3[v47 * a4];
          v67 = v63;
          v68 = (float64x2_t *)&a3[v51 * a4];
          v69 = (float64x2_t *)&a3[v29 * a4];
          v70 = (float64x2_t *)&a3[v49 * a4];
          v71 = (float64x2_t *)v66;
          v72 = v29;
          v73 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v74 = v73;
          v75 = v73;
          v76 = v73;
          v77 = v73;
          v78 = v73;
          v79 = v73;
          v80 = v73;
          if ((v29 & 1) != 0)
          {
            v81 = *(float64x2_t *)(v66 + 2);
            v71 = (float64x2_t *)&v66[v44];
            v69 = (float64x2_t *)(v45 + 1);
            v67 = v63 + 1;
            v70 = (float64x2_t *)(v64 + 1);
            v68 = (float64x2_t *)(v65 + 1);
            v73 = vmlaq_n_f64(v73, *(float64x2_t *)v66, *v45);
            v75 = vmlaq_n_f64(v75, *(float64x2_t *)v66, *v63);
            v77 = vmlaq_n_f64(v77, *(float64x2_t *)v66, *v64);
            v79 = vmlaq_n_f64(v79, *(float64x2_t *)v66, *v65);
            v74 = vmlaq_n_f64(v74, v81, *v45);
            v76 = vmlaq_n_f64(v76, v81, *v63);
            v78 = vmlaq_n_f64(v78, v81, *v64);
            v80 = vmlaq_n_f64(v80, v81, *v65);
            v72 = v29 - 1;
          }
          for (; v72; v72 -= 2)
          {
            v83 = *v71;
            v84 = v71[1];
            v82 = (float64x2_t *)((char *)v71 + v44 * 8);
            v85 = *v82;
            v86 = v82[1];
            v71 = (float64x2_t *)((char *)v82 + v44 * 8);
            v87 = *v69++;
            v88 = *(float64x2_t *)v67;
            v67 += 2;
            v89 = *v70++;
            v90 = *v68++;
            v73 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v83, v87.f64[0]), v85, v87, 1);
            v75 = vmlaq_laneq_f64(vmlaq_n_f64(v75, v83, v88.f64[0]), v85, v88, 1);
            v77 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v83, v89.f64[0]), v85, v89, 1);
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v83, v90.f64[0]), v85, v90, 1);
            v74 = vmlaq_laneq_f64(vmlaq_n_f64(v74, v84, v87.f64[0]), v86, v87, 1);
            v76 = vmlaq_laneq_f64(vmlaq_n_f64(v76, v84, v88.f64[0]), v86, v88, 1);
            v78 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v84, v89.f64[0]), v86, v89, 1);
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v84, v90.f64[0]), v86, v90, 1);
          }
          v92 = *v71;
          v93 = v71[1];
          v91 = (float64x2_t *)((char *)v71 + v44 * 8);
          v95 = *v91;
          v96 = v91[1];
          v94 = (float64x2_t *)((char *)v91 + v44 * 8);
          v98 = *v94;
          v99 = v94[1];
          v97 = (float64x2_t *)((char *)v94 + v44 * 8);
          v100 = *v97;
          v101 = v97[1];
          v102 = (float64x2_t *)((char *)v97 + 8 * a6 + -32 * a6);
          v53 = vmulq_n_f64(v92, a7);
          v56 = vmulq_n_f64(v96, a7);
          v57 = vmulq_n_f64(v98, a7);
          a13 = vmulq_n_f64(v99, a7);
          v14 = vmulq_f64(vsubq_f64(v53, v73), v58);
          v103 = vmulq_f64(vsubq_f64(vmulq_n_f64(v93, a7), v74), v58);
          v104 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v95, a7), v75), v14, *v67, 0), v59);
          v105 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(v56, v76), v103, *v67, 0), v59);
          v106 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(v57, v77), v14, v70->f64[0], 0), v104, *v70, 1), v60);
          v107 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a13, v78), v103, v70->f64[0], 0), v105, *v70, 1), v60);
          v53.f64[0] = v68[1].f64[0];
          v108 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v100, a7), v79), v14, v68->f64[0], 0), v104, *v68, 1), v106, v53.f64[0], 0), v61);
          v109 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v101, a7), v80), v103, v68->f64[0], 0), v105, *v68, 1), v107, v53.f64[0], 0), v61);
          *v102 = v14;
          v102[1] = v103;
          v110 = (float64x2_t *)((char *)v102 + v44 * 8);
          *v110 = v104;
          v110[1] = v105;
          v111 = (float64x2_t *)((char *)v110 + v44 * 8);
          *v111 = v106;
          v111[1] = v107;
          v112 = (float64x2_t *)((char *)v111 + v44 * 8);
          *v112 = v108;
          v112[1] = v109;
          v62 += 4;
          v66 += 4;
        }
        while (v62 < __N - 3);
      }
      v113 = __N - v62;
      if (__N > v62)
      {
        v114 = &a3[v47 * a4];
        v115 = (unint64_t *)&a3[v49 * a4];
        v116 = (unint64_t *)&a3[v51 * a4];
        v117 = &__X[v62];
        do
        {
          v118 = (int64x2_t *)v115;
          v119 = v117;
          v120 = v29;
          v121 = (int64x2_t *)v114;
          v122 = (int64x2_t *)v116;
          v123 = (int64x2_t *)&a3[v29 * a4];
          v124 = (float64x2_t)veorq_s8((int8x16_t)v53, (int8x16_t)v53);
          v125 = v124;
          if ((v29 & 1) != 0)
          {
            v119 = &v117[v44];
            v56.f64[0] = *v45;
            v123 = (int64x2_t *)(v45 + 1);
            v57.f64[0] = *v114;
            v121 = (int64x2_t *)(v114 + 1);
            *(_QWORD *)&a13.f64[0] = *v115;
            v118 = (int64x2_t *)(v115 + 1);
            *(_QWORD *)&a14.f64[0] = *v116;
            v122 = (int64x2_t *)(v116 + 1);
            v124 = vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64((int64x2_t)v56, (int64x2_t)v57), *v117);
            v125 = vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64((int64x2_t)a13, (int64x2_t)a14), *v117);
            v120 = v29 - 1;
          }
          for (; v120; v120 -= 2)
          {
            v127.f64[0] = *v119;
            v126 = &v119[v44];
            v128 = *v126;
            v119 = &v126[v44];
            v129 = *v123++;
            v130 = *v121++;
            v131 = *v118++;
            v127.f64[1] = v128;
            a14 = *(float64x2_t *)v122++;
            v124 = vmlaq_laneq_f64(vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64(v129, v130), v127.f64[0]), (float64x2_t)vtrn2q_s64(v129, v130), v127, 1);
            v125 = vmlaq_laneq_f64(vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64(v131, (int64x2_t)a14), v127.f64[0]), (float64x2_t)vtrn2q_s64(v131, (int64x2_t)a14), v127, 1);
          }
          v133.f64[0] = *v119;
          v132 = &v119[v44];
          v135 = *v132;
          v134 = &v132[v44];
          v137.f64[0] = *v134;
          v136 = &v134[v44];
          v138 = *v136;
          v139 = &v136[a6 + -4 * a6];
          v133.f64[1] = v135;
          v137.f64[1] = v138;
          v56 = vmulq_n_f64(v137, a7);
          v140 = vsubq_f64(vmulq_n_f64(v133, a7), v124);
          v57.f64[0] = v140.f64[0] * v58.f64[0];
          *(_QWORD *)&a14.f64[1] = v121->i64[0];
          v14 = *(float64x2_t *)v118;
          a13 = (float64x2_t)vtrn1q_s64(*v118, *v122);
          v53 = vmulq_f64(vmlsq_lane_f64(v140, a14, v140.f64[0] * v58.f64[0], 0), v59);
          v57.f64[1] = v53.f64[1];
          a14 = (float64x2_t)vtrn2q_s64(*v118, *v122);
          v141 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(v56, v125), a13, v57.f64[0], 0), a14, v57, 1);
          *(_QWORD *)&a14.f64[1] = v122[1].i64[0];
          *v139 = v57.f64[0];
          v142 = &v139[v44];
          *v142 = v53.f64[1];
          v143 = &v142[v44];
          *v143 = v141.f64[0] * v60.f64[0];
          v143[a6] = vmulq_f64(vmlsq_lane_f64(v141, a14, *(double *)&v141 * *(double *)&v60, 0), v61).f64[1];
          ++v117;
          --v113;
        }
        while (v113);
      }
      v29 += 4;
    }
    while (v29 < a2);
  }
}

void dtrsm_noPack_RUTU(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int8x16_t a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  int8x16_t v14;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double *v25;
  double *v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double *v32;
  double *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int8x16_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t *v98;
  float64x2_t *v99;
  float64x2_t *v100;
  uint64_t v101;
  float64x2_t *v102;
  uint64_t v103;
  double *f64;
  float64x2_t *v105;
  uint64_t v106;
  float64_t *v107;
  float64x2_t v108;
  float64x2_t v109;
  double *v110;
  float64x2_t v111;
  float64_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t *v117;
  float64_t *v118;
  double *v119;
  float64x2_t v120;
  float64_t *v121;
  float64_t v122;
  double *v123;
  float64x2_t v124;
  float64_t v125;
  double *v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t v131;
  float64x2_t v132;
  float64_t *v133;
  float64_t *v134;
  BOOL v135;

  v21 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        a8.i64[0] = *(_QWORD *)(a3 + 8 * (v21 + v21 * a4) - 8);
        v32 = (double *)(a5 + 8 * v21 * a6);
        v33 = (double *)(a5 + a6 * (8 * a2 - 16));
        v34 = __N;
        do
        {
          v35 = *v32 * a7;
          *v32++ = v35;
          *v33 = *v33 * a7 - v35 * *(double *)a8.i64;
          ++v33;
          --v34;
        }
        while (v34);
      }
      v21 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v21 * a6), 1);
      v21 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v22 = a3 + 8 * (v21 + v21 * a4);
      v23 = *(double *)(v22 - 16);
      a8.i64[0] = *(_QWORD *)(v22 - 8);
      v24 = *(double *)(a3 + 8 * (a2 + (a2 - 2) * a4) - 24);
      v25 = (double *)(a5 + 8 * v21 * a6);
      v26 = (double *)(a5 + a6 * (8 * a2 - 16));
      v27 = (double *)(a5 + a6 * (8 * a2 - 24));
      v28 = __N;
      do
      {
        v29 = *v25 * a7;
        *v25 = v29;
        v30 = *v26 * a7 - v29 * *(double *)a8.i64;
        *v26++ = v30;
        v31 = *v25++;
        *v27 = -(v24 * v30 + v31 * v23 - *v27 * a7);
        ++v27;
        --v28;
      }
      while (v28);
    }
    v21 = a2 - 4;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    v36 = v21 + 1;
    v37 = 8 * a6;
    v38 = 8 * a4;
    v39 = (float64x2_t *)(a5 + 8 * a6 * (v21 + 1));
    do
    {
      v40 = v36 - 4;
      if (__N < 4)
      {
        v41 = 0;
      }
      else
      {
        v41 = 0;
        v43 = a2 - v40;
        if (a2 - v40 <= 4)
          v43 = 4;
        v44 = v39;
        do
        {
          v45 = v43 - 4;
          v46 = v44;
          v42 = a3 + 8 * v40 + 8 * v36 * a4;
          v47 = (float64x2_t *)v42;
          v48 = (float64x2_t)veorq_s8(v14, v14);
          v49 = v48;
          v50 = v48;
          v51 = v48;
          v52 = v48;
          v53 = v48;
          v54 = v48;
          v55 = v48;
          if ((((_BYTE)v43 - 4) & 1) != 0)
          {
            v56 = v44[1];
            v46 = (float64x2_t *)((char *)v44 + v37);
            v57 = *(float64x2_t *)(v42 + 16);
            v47 = (float64x2_t *)(v42 + v38);
            v48 = vmlaq_n_f64(v48, *v44, *(double *)v42);
            v50 = vmlaq_laneq_f64(v50, *v44, *(float64x2_t *)v42, 1);
            v52 = vmlaq_n_f64(v52, *v44, v57.f64[0]);
            v54 = vmlaq_laneq_f64(v54, *v44, v57, 1);
            v49 = vmlaq_n_f64(v49, v56, *(double *)v42);
            v51 = vmlaq_laneq_f64(v51, v56, *(float64x2_t *)v42, 1);
            v53 = vmlaq_n_f64(v53, v56, v57.f64[0]);
            v55 = vmlaq_laneq_f64(v55, v56, v57, 1);
            v45 = v43 - 5;
          }
          for (; v45; v45 -= 2)
          {
            v59 = *v46;
            v60 = v46[1];
            v58 = (float64x2_t *)((char *)v46 + v37);
            v61 = *v58;
            v62 = v58[1];
            v46 = (float64x2_t *)((char *)v58 + v37);
            v64 = *v47;
            v65 = v47[1];
            v63 = (float64x2_t *)((char *)v47 + v38);
            v66 = *v63;
            v67 = v63[1];
            v47 = (float64x2_t *)((char *)v63 + v38);
            v48 = vmlaq_n_f64(vmlaq_n_f64(v48, v59, v64.f64[0]), v61, v66.f64[0]);
            v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v50, v59, v64, 1), v61, v66, 1);
            v52 = vmlaq_n_f64(vmlaq_n_f64(v52, v59, v65.f64[0]), v61, v67.f64[0]);
            v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v54, v59, v65, 1), v61, v67, 1);
            v49 = vmlaq_n_f64(vmlaq_n_f64(v49, v60, v64.f64[0]), v62, v66.f64[0]);
            v51 = vmlaq_laneq_f64(vmlaq_laneq_f64(v51, v60, v64, 1), v62, v66, 1);
            v53 = vmlaq_n_f64(vmlaq_n_f64(v53, v60, v65.f64[0]), v62, v67.f64[0]);
            v55 = vmlaq_laneq_f64(vmlaq_laneq_f64(v55, v60, v65, 1), v62, v67, 1);
          }
          v68 = (float64x2_t *)((char *)v47 - v38 * (v43 - 3));
          v69 = (float64x2_t *)((char *)v46 - v37 * v43);
          v71 = *v69;
          v72 = v69[1];
          v70 = (float64x2_t *)((char *)v69 + v37);
          v74 = *v70;
          v75 = v70[1];
          v73 = (float64x2_t *)((char *)v70 + v37);
          v77 = *v73;
          v78 = v73[1];
          v76 = (float64x2_t *)((char *)v73 + v37);
          v79 = *v76;
          v80 = v76[1];
          v81 = (int8x16_t *)&v76->f64[a6 + -4 * a6];
          v82 = vsubq_f64(vmulq_n_f64(v71, a7), v48);
          v83 = vsubq_f64(vmulq_n_f64(v72, a7), v49);
          v84 = vsubq_f64(vmulq_n_f64(v79, a7), v54);
          v85 = vsubq_f64(vmulq_n_f64(v80, a7), v55);
          v86 = *v68;
          v87 = v68[1];
          v88 = (float64x2_t *)((char *)v68 - v38);
          v89 = vmlsq_lane_f64(v82, v84, v86.f64[0], 0);
          v90 = vmlsq_lane_f64(v83, v85, v86.f64[0], 0);
          v91 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v74, a7), v50), v84, v86, 1);
          v92 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v75, a7), v51), v85, v86, 1);
          v93 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v77, a7), v52), v84, v87.f64[0], 0);
          v94 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v78, a7), v53), v85, v87.f64[0], 0);
          a8 = *(int8x16_t *)v88;
          v95 = vmlsq_laneq_f64(v91, v93, *v88, 1);
          v96 = vmlsq_laneq_f64(v92, v94, *v88, 1);
          a8.i64[0] = *(_QWORD *)&v88->f64[-a4];
          v14 = (int8x16_t)vmlsq_lane_f64(vmlsq_lane_f64(v89, v93, v88->f64[0], 0), v95, *(double *)a8.i64, 0);
          v97 = vmlsq_lane_f64(vmlsq_lane_f64(v90, v94, v88->f64[0], 0), v96, *(double *)a8.i64, 0);
          *v81 = v14;
          v81[1] = (int8x16_t)v97;
          v98 = (float64x2_t *)&v81->i8[v37];
          *v98 = v95;
          v98[1] = v96;
          v99 = (float64x2_t *)((char *)v98 + v37);
          *v99 = v93;
          v99[1] = v94;
          v100 = (float64x2_t *)((char *)v99 + v37);
          *v100 = v84;
          v100[1] = v85;
          v41 += 4;
          v44 += 2;
        }
        while (v41 < __N - 3);
      }
      v101 = __N - v41;
      if (__N > v41)
      {
        v103 = a2 - v40;
        if (a2 - v40 <= 4)
          v103 = 4;
        f64 = v39[(unint64_t)v41 / 2].f64;
        do
        {
          v102 = (float64x2_t *)(a3 + 8 * v40 + 8 * v36 * a4);
          v105 = v102;
          v106 = v103 - 4;
          v107 = f64;
          v108 = (float64x2_t)veorq_s8(a8, a8);
          v109 = v108;
          if ((((_BYTE)v103 - 4) & 1) != 0)
          {
            v107 = &f64[(unint64_t)v37 / 8];
            v105 = (float64x2_t *)((char *)v102 + v38);
            v108 = vmlaq_n_f64(v108, *v102, *f64);
            v109 = vmlaq_n_f64(v109, v102[1], *f64);
            v106 = v103 - 5;
          }
          for (; v106; v106 -= 2)
          {
            v111.f64[0] = *v107;
            v110 = &v107[(unint64_t)v37 / 8];
            v112 = *v110;
            v107 = &v110[(unint64_t)v37 / 8];
            v114 = *v105;
            v115 = v105[1];
            v113 = (float64x2_t *)((char *)v105 + v38);
            v111.f64[1] = v112;
            v116 = *v113;
            a14 = v113[1];
            v105 = (float64x2_t *)((char *)v113 + v38);
            v108 = vmlaq_laneq_f64(vmlaq_n_f64(v108, v114, v111.f64[0]), v116, v111, 1);
            v109 = vmlaq_laneq_f64(vmlaq_n_f64(v109, v115, v111.f64[0]), a14, v111, 1);
          }
          v117 = (float64x2_t *)((char *)v105 - v38 * (v103 - 3));
          v118 = (float64_t *)((char *)v107 - v37 * v103);
          v120.f64[0] = *v118;
          v119 = &v118[(unint64_t)v37 / 8];
          v122 = *v119;
          v121 = &v119[(unint64_t)v37 / 8];
          v124.f64[0] = *v121;
          v123 = &v121[(unint64_t)v37 / 8];
          v125 = *v123;
          v126 = &v123[a6 + -4 * a6];
          v120.f64[1] = v122;
          v124.f64[1] = v125;
          v127 = vsubq_f64(vmulq_n_f64(v124, a7), v109);
          v128 = *v117;
          v129 = v117[1];
          v130 = (float64x2_t *)((char *)v117 - v38);
          v131 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v120, a7), v108), v128, v127.f64[1], 0);
          *(_QWORD *)&v127.f64[0] = *(_OWORD *)&vmlsq_lane_f64(v127, v129, v127.f64[1], 0);
          v14 = *(int8x16_t *)v130;
          v132 = vmlsq_lane_f64(v131, *v130, v127.f64[0], 0);
          v124.f64[0] = v132.f64[1];
          a14.f64[0] = v130->f64[-a4];
          a8 = (int8x16_t)vmlsq_lane_f64(v132, a14, v132.f64[1], 0);
          *v126 = *(double *)a8.i64;
          v133 = &v126[(unint64_t)v37 / 8];
          *v133 = v124.f64[0];
          v134 = &v133[(unint64_t)v37 / 8];
          *v134 = v127.f64[0];
          v134[a6] = v127.f64[1];
          ++f64;
          --v101;
        }
        while (v101);
      }
      v39 -= 2 * a6;
      v135 = v36 < 5;
      v36 -= 4;
    }
    while (!v135);
  }
}

void dtrsm_noPack_RUTN(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  int8x16_t v14;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  uint64_t *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double *v40;
  double *v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float64x2_t *v49;
  uint64_t v50;
  const double *v51;
  const double *v52;
  const double *v53;
  const double *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  uint64_t v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t *v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t *v92;
  float64x2_t *v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t *v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  int8x16_t *v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t *v122;
  float64x2_t *v123;
  uint64_t v124;
  float64x2_t *v125;
  uint64_t v126;
  double *f64;
  float64x2_t *v128;
  uint64_t v129;
  float64_t *v130;
  float64x2_t v131;
  float64x2_t v132;
  double *v133;
  float64x2_t v134;
  float64_t v135;
  float64x2_t *v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t *v140;
  float64_t *v141;
  double *v142;
  float64x2_t v143;
  float64_t *v144;
  float64_t v145;
  double *v146;
  float64x2_t v147;
  float64_t v148;
  double *v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t *v153;
  float64x2_t v154;
  float64x2_t v155;
  float64_t *v156;
  float64_t *v157;
  BOOL v158;

  v21 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v37 = (double *)(a3 + 8 * (a4 + 1) * v21);
        v38 = *(v37 - 1);
        v39 = a7 / *v37;
        v40 = (double *)(a5 + 8 * v21 * a6);
        v41 = (double *)(a5 + a6 * (8 * a2 - 16));
        v42 = __N;
        v43 = 1.0 / *(double *)(a3 + 8 * (a4 + 1) * (a2 - 2));
        do
        {
          v44 = v39 * *v40;
          *v40++ = v44;
          *v41 = v43 * (*v41 * a7 - v44 * v38);
          ++v41;
          --v42;
        }
        while (v42);
      }
      v21 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v21 + v21 * a4)), (double *)(a5 + 8 * v21 * a6), 1);
      v21 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v22 = (double *)(a3 + 8 * (a4 + 1) * v21);
      v24 = *(v22 - 2);
      v23 = *(v22 - 1);
      v25 = (a2 - 2) * a4;
      v26 = *(double *)(a3 + 8 * (a2 - 3 + v25));
      v27 = a7 / *v22;
      v28 = 1.0 / *(double *)(a3 + 8 * (v25 + a2 - 2));
      v29 = (double *)(a5 + 8 * v21 * a6);
      v30 = (double *)(a5 + a6 * (8 * a2 - 16));
      v31 = (uint64_t *)(a5 + a6 * (8 * a2 - 24));
      v32 = __N;
      v33 = 1.0 / *(double *)(a3 + 8 * (a4 + 1) * (a2 - 3));
      do
      {
        v34 = v27 * *v29;
        *v29 = v34;
        v35 = v28 * (*v30 * a7 - v34 * v23);
        *v30++ = v35;
        v14.i64[0] = *v31;
        v36 = *v29++;
        *(double *)v31 = v33 * -(v26 * v35 + v36 * v24 - *(double *)v31 * a7);
        ++v31;
        --v32;
      }
      while (v32);
    }
    v21 = a2 - 4;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    v45 = v21 + 1;
    v46 = a4 + 1;
    v47 = 8 * a6;
    v48 = 8 * a4;
    v49 = (float64x2_t *)(a5 + 8 * a6 * v45);
    do
    {
      v50 = v45 - 4;
      v51 = (const double *)(a3 + 8 * (v45 - 4) * a4 + 8 * (v45 - 4));
      v52 = (const double *)(a3 + 8 * (v45 - 3) * v46);
      v53 = (const double *)(a3 + 8 * (v45 - 2) * v46);
      v54 = (const double *)(a3 + 8 * (v45 - 1) * v46);
      v55 = vld1q_dup_f64(v51);
      v56 = vld1q_dup_f64(v52);
      v57 = vld1q_dup_f64(v53);
      v58 = vld1q_dup_f64(v54);
      v59 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v60 = vdivq_f64(v59, v55);
      v61 = vdivq_f64(v59, v56);
      v62 = vdivq_f64(v59, v57);
      v63 = vdivq_f64(v59, v58);
      if (__N < 4)
      {
        v64 = 0;
      }
      else
      {
        v64 = 0;
        v66 = a2 - v50;
        if (a2 - v50 <= 4)
          v66 = 4;
        v67 = v49;
        do
        {
          v65 = a3 + 8 * v50 + 8 * v45 * a4;
          v68 = (float64x2_t *)v65;
          v69 = v66 - 4;
          v70 = v67;
          v71 = (float64x2_t)veorq_s8(v14, v14);
          v72 = v71;
          v73 = v71;
          v74 = v71;
          v75 = v71;
          v76 = v71;
          v77 = v71;
          v78 = v71;
          if ((((_BYTE)v66 - 4) & 1) != 0)
          {
            v79 = v67[1];
            v70 = (float64x2_t *)((char *)v67 + v47);
            v80 = *(float64x2_t *)(v65 + 16);
            v68 = (float64x2_t *)(v65 + v48);
            v71 = vmlaq_n_f64(v71, *v67, *(double *)v65);
            v73 = vmlaq_laneq_f64(v73, *v67, *(float64x2_t *)v65, 1);
            v75 = vmlaq_n_f64(v75, *v67, v80.f64[0]);
            v77 = vmlaq_laneq_f64(v77, *v67, v80, 1);
            v72 = vmlaq_n_f64(v72, v79, *(double *)v65);
            v74 = vmlaq_laneq_f64(v74, v79, *(float64x2_t *)v65, 1);
            v76 = vmlaq_n_f64(v76, v79, v80.f64[0]);
            v78 = vmlaq_laneq_f64(v78, v79, v80, 1);
            v69 = v66 - 5;
          }
          for (; v69; v69 -= 2)
          {
            v82 = *v70;
            v83 = v70[1];
            v81 = (float64x2_t *)((char *)v70 + v47);
            v84 = *v81;
            v85 = v81[1];
            v70 = (float64x2_t *)((char *)v81 + v47);
            v87 = *v68;
            v88 = v68[1];
            v86 = (float64x2_t *)((char *)v68 + v48);
            v89 = *v86;
            v90 = v86[1];
            v68 = (float64x2_t *)((char *)v86 + v48);
            v71 = vmlaq_n_f64(vmlaq_n_f64(v71, v82, v87.f64[0]), v84, v89.f64[0]);
            v73 = vmlaq_laneq_f64(vmlaq_laneq_f64(v73, v82, v87, 1), v84, v89, 1);
            v75 = vmlaq_n_f64(vmlaq_n_f64(v75, v82, v88.f64[0]), v84, v90.f64[0]);
            v77 = vmlaq_laneq_f64(vmlaq_laneq_f64(v77, v82, v88, 1), v84, v90, 1);
            v72 = vmlaq_n_f64(vmlaq_n_f64(v72, v83, v87.f64[0]), v85, v89.f64[0]);
            v74 = vmlaq_laneq_f64(vmlaq_laneq_f64(v74, v83, v87, 1), v85, v89, 1);
            v76 = vmlaq_n_f64(vmlaq_n_f64(v76, v83, v88.f64[0]), v85, v90.f64[0]);
            v78 = vmlaq_laneq_f64(vmlaq_laneq_f64(v78, v83, v88, 1), v85, v90, 1);
          }
          v91 = (float64x2_t *)((char *)v68 - v48 * (v66 - 3));
          v92 = (float64x2_t *)((char *)v70 - v47 * v66);
          v94 = *v92;
          v95 = v92[1];
          v93 = (float64x2_t *)((char *)v92 + v47);
          v97 = *v93;
          v98 = v93[1];
          v96 = (float64x2_t *)((char *)v93 + v47);
          v100 = *v96;
          v101 = v96[1];
          v99 = (float64x2_t *)((char *)v96 + v47);
          v102 = *v99;
          v103 = v99[1];
          v104 = (int8x16_t *)&v99->f64[a6 + -4 * a6];
          v105 = vsubq_f64(vmulq_n_f64(v94, a7), v71);
          v106 = vsubq_f64(vmulq_n_f64(v95, a7), v72);
          v107 = vmulq_f64(vsubq_f64(vmulq_n_f64(v102, a7), v77), v63);
          v108 = vmulq_f64(vsubq_f64(vmulq_n_f64(v103, a7), v78), v63);
          v109 = *v91;
          v110 = v91[1];
          v111 = (float64x2_t *)((char *)v91 - v48);
          v112 = vmlsq_lane_f64(v105, v107, v109.f64[0], 0);
          v113 = vmlsq_lane_f64(v106, v108, v109.f64[0], 0);
          v114 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v97, a7), v73), v107, v109, 1);
          v115 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v98, a7), v74), v108, v109, 1);
          v116 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v100, a7), v75), v107, v110.f64[0], 0), v62);
          v117 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v101, a7), v76), v108, v110.f64[0], 0), v62);
          v55 = *v111;
          v118 = vmulq_f64(vmlsq_laneq_f64(v114, v116, *v111, 1), v61);
          v119 = vmulq_f64(vmlsq_laneq_f64(v115, v117, *v111, 1), v61);
          v55.f64[0] = v111->f64[-a4];
          v14 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v112, v116, v111->f64[0], 0), v118, v55.f64[0], 0), v60);
          v120 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v113, v117, v111->f64[0], 0), v119, v55.f64[0], 0), v60);
          *v104 = v14;
          v104[1] = (int8x16_t)v120;
          v121 = (float64x2_t *)&v104->i8[v47];
          *v121 = v118;
          v121[1] = v119;
          v122 = (float64x2_t *)((char *)v121 + v47);
          *v122 = v116;
          v122[1] = v117;
          v123 = (float64x2_t *)((char *)v122 + v47);
          *v123 = v107;
          v123[1] = v108;
          v64 += 4;
          v67 += 2;
        }
        while (v64 < __N - 3);
      }
      v124 = __N - v64;
      if (__N > v64)
      {
        v126 = a2 - v50;
        if (a2 - v50 <= 4)
          v126 = 4;
        f64 = v49[(unint64_t)v64 / 2].f64;
        do
        {
          v125 = (float64x2_t *)(a3 + 8 * v50 + 8 * v45 * a4);
          v128 = v125;
          v129 = v126 - 4;
          v130 = f64;
          v131 = (float64x2_t)veorq_s8((int8x16_t)v55, (int8x16_t)v55);
          v132 = v131;
          if ((((_BYTE)v126 - 4) & 1) != 0)
          {
            v130 = &f64[(unint64_t)v47 / 8];
            v128 = (float64x2_t *)((char *)v125 + v48);
            v131 = vmlaq_n_f64(v131, *v125, *f64);
            v132 = vmlaq_n_f64(v132, v125[1], *f64);
            v129 = v126 - 5;
          }
          for (; v129; v129 -= 2)
          {
            v134.f64[0] = *v130;
            v133 = &v130[(unint64_t)v47 / 8];
            v135 = *v133;
            v130 = &v133[(unint64_t)v47 / 8];
            v137 = *v128;
            v138 = v128[1];
            v136 = (float64x2_t *)((char *)v128 + v48);
            v134.f64[1] = v135;
            v139 = *v136;
            a14 = v136[1];
            v128 = (float64x2_t *)((char *)v136 + v48);
            v131 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v137, v134.f64[0]), v139, v134, 1);
            v132 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v138, v134.f64[0]), a14, v134, 1);
          }
          v140 = (float64x2_t *)((char *)v128 - v48 * (v126 - 3));
          v141 = (float64_t *)((char *)v130 - v47 * v126);
          v143.f64[0] = *v141;
          v142 = &v141[(unint64_t)v47 / 8];
          v145 = *v142;
          v144 = &v142[(unint64_t)v47 / 8];
          v147.f64[0] = *v144;
          v146 = &v144[(unint64_t)v47 / 8];
          v148 = *v146;
          v149 = &v146[a6 + -4 * a6];
          v143.f64[1] = v145;
          v147.f64[1] = v148;
          v150 = vsubq_f64(vmulq_n_f64(v147, a7), v132);
          v151 = *v140;
          v152 = v140[1];
          v153 = (float64x2_t *)((char *)v140 - v48);
          v154 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v143, a7), v131), v151, v150.f64[1] * v63.f64[0], 0);
          v150.f64[0] = vmlsq_lane_f64(v150, v152, v150.f64[1] * v63.f64[0], 0).f64[0] * v62.f64[0];
          v14 = *(int8x16_t *)v153;
          v155 = vmlsq_lane_f64(v154, *v153, v150.f64[0], 0);
          v147.f64[0] = v155.f64[1] * v61.f64[0];
          a14.f64[0] = v153->f64[-a4];
          v55 = vmlsq_lane_f64(v155, a14, v155.f64[1] * v61.f64[0], 0);
          v55.f64[0] = v55.f64[0] * v60.f64[0];
          *v149 = v55.f64[0];
          v156 = &v149[(unint64_t)v47 / 8];
          *v156 = v147.f64[0];
          v157 = &v156[(unint64_t)v47 / 8];
          *v157 = v150.f64[0];
          v157[a6] = v150.f64[1] * v63.f64[0];
          ++f64;
          --v124;
        }
        while (v124);
      }
      v49 -= 2 * a6;
      v158 = v45 < 5;
      v45 -= 4;
    }
    while (!v158);
  }
}

void APL_seq_ssyrk(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, float32x4_t a14, double a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,__int128 a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,char a57)
{
  unsigned __int32 v57;
  unsigned __int32 v58;
  BOOL v60;
  _BOOL4 v61;

  if (a3)
  {
    v57 = a10.i32[0];
    v58 = a9.i32[0];
    v60 = a9.f32[0] == 0.0 || a4 == 0;
    v61 = v60;
    if (!v61 || *(float *)a10.i32 != 1.0)
    {
      if (v61)
      {
        strScale(a1, a3, a7->f32, a8, *(float *)a10.i32);
      }
      else
      {
        if (*(float *)a10.i32 == 0.0)
          strScale(a1, a3, a7->f32, a8, *(float *)a10.i32);
        if (a3 > 85 || a4 >= 86)
        {
          if (a1 == 121)
            ssyrk_Pack_Upper(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
              (uint64_t)a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              *((uint64_t *)&a33 + 1),
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              *((uint64_t *)&a37 + 1),
              a38,
              SDWORD2(a38),
              SHIDWORD(a38),
              a39,
              *((uint64_t *)&a39 + 1),
              a40,
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55,
              a56,
              a57);
          else
            ssyrk_Pack_Lower(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, SHIDWORD(a20), a21, a22, a23, a24, a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40);
        }
        else
        {
          a9.i32[0] = v58;
          a10.i32[0] = v57;
          if (a1 == 121)
          {
            if ((_DWORD)a2 == 111)
              ssyrk_noPack_UN(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
            else
              ssyrk_noPack_UT(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
          }
          else if ((_DWORD)a2 == 111)
          {
            ssyrk_noPack_LN(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, a15);
          }
          else
          {
            ssyrk_noPack_LT(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, *(float32x2_t *)&a15);
          }
        }
      }
    }
  }
}

void strsm_Left_Forward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int32 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128, double, int8x16_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v56;
  uint64_t v57;
  void (*v58)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  float *(*v60)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  uint64_t v64;
  const float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128, double, int8x16_t);
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t vars0;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float *(*v89)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v90;
  float32x4_t *v91;

  v28 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v71 = v30;
  v72 = v29;
  v31 = v25;
  v70 = v32;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  if (v23 == 111)
    v35 = 1;
  else
    v35 = v27;
  v81 = v35;
  v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sgePack_A_Tran;
  v83 = v27;
  if (v23 == 111)
    v37 = v27;
  else
    v37 = 1;
  v67 = v37;
  if (v23 == 111)
    v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sgePack_A_NoTran;
  v80 = v36;
  v38 = strsm_block_LUT;
  if (v23 == 111)
    v38 = strsm_block_LLN;
  v69 = v38;
  v39 = (v25 << 7) + 16408;
  if (a12 == -1)
  {
    v44 = 4 * v39;
    if (v25 < 1)
      v44 = 0;
    v43 = (float)(unint64_t)v44;
    goto LABEL_19;
  }
  v40 = v26;
  v41 = v24;
  v42 = *(float *)&v28;
  if (v25 >= 1 && a12)
  {
    if (4 * v39 > a12)
    {
      v43 = (float)(unint64_t)(4 * v39);
LABEL_19:
      *a11 = v43;
      return;
    }
    goto LABEL_21;
  }
  if (v25 >= 1)
  {
LABEL_21:
    v91 = (float32x4_t *)a11;
    v66 = a11;
    if (!a11)
      v91 = (float32x4_t *)malloc_type_malloc(4 * v39, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v66 = a11;
  v91 = (float32x4_t *)&a23;
LABEL_24:
  if (v40 >= 1)
  {
    vars0 = 0;
    v45 = 0;
    v84 = v91 + 4100;
    v90 = v31 - 3;
    if (v31 <= 0)
      v47 = -(-v31 & 3);
    else
      v47 = v31 & 3;
    v86 = v47;
    v78 = v41;
    v75 = a10 + 512;
    v48 = 128;
    v79 = v31;
    v68 = v40;
    do
    {
      v73 = v48;
      if (v40 >= v48)
        v49 = v48;
      else
        v49 = v40;
      if (v45 + 128 <= v40)
        v50 = 128;
      else
        v50 = v40 - v45;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v69)(v70, v50, v31, v72 + 4 * v45 * v83 + 4 * v45, v42);
      sgePack_B_NoTran(v50, v31, (unint64_t *)(v71 + 4 * v45), a9, v84, -1.0, v51, v52);
      v74 = v45 + 128;
      if (v45 + 128 < v41)
      {
        v53 = v75;
        v54 = 16 * (v49 + vars0);
        v82 = v72 + 4 * v45 * v67;
        v56 = v42 != 1.0 && v45 == 0 && v42 != 0.0;
        v57 = v45 + 128;
        v89 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
        v58 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
        do
        {
          v87 = v57 + 128;
          if (v57 + 128 <= v41)
            v59 = 128;
          else
            v59 = v41 - v57;
          v85 = v57;
          if ((v59 & 7) != 0)
            v58 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpUnalignedC_8M4N;
          v60 = v89;
          if ((v59 & 7) != 0)
            v60 = sgebpScaleUnalignedC_8M4N;
          v89 = v60;
          v80(v59, v50, v82 + 4 * v57 * v81, v83, v91);
          v88 = v53;
          v61 = 0;
          if (v31 >= 4)
          {
            v62 = (float32x4_t *)v53;
            v63 = v91 + 4100;
            do
            {
              if (v56)
                v89(v91, (uint64_t)v63, v62, a9, v59, v50, v42);
              else
                v58(v91, v63, v62, a9, v59, v50);
              v61 += 4;
              v63 = (float32x4_t *)((char *)v63 + v54);
              v62 += a9;
            }
            while (v61 < v90);
          }
          v31 = v79;
          if (v86)
          {
            v64 = a10 + 4 * v85 + 4 * v61 * a9;
            v65 = &v84->f32[v61 * v50];
            if (v56)
              sgebpScale_8M1N(v91, v65, v64, a9, v59, v86, v50, v42);
            else
              sgebp_8M1N(v91, v65, v64, a9, v59, v86, v50);
          }
          v53 = v88 + 512;
          v57 = v87;
          v41 = v78;
        }
        while (v87 < v78);
      }
      v45 = v74;
      v48 = v73 + 128;
      v75 += 512;
      vars0 -= 128;
      v42 = 1.0;
      v40 = v68;
    }
    while (v74 < v68);
  }
  if (v31 >= 1 && !v66)
    free(v91);
}

void strsm_Left_Backward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19)
{
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int32 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float32x4_t v45;
  _BOOL4 v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *(*v54)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v55)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  const float *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  unsigned int v65;
  uint64_t v66;
  uint64_t vars0;
  void (*vars8)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float *(*v77)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v78)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float32x4_t *v79;

  v24 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v66 = v25;
  v26 = v20;
  v65 = v27;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  if (v19 == 111)
    v29 = 1;
  else
    v29 = v23;
  v70 = v29;
  v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sgePack_A_Tran;
  v72 = v23;
  if (v19 == 111)
    v31 = v23;
  else
    v31 = 1;
  v63 = v31;
  if (v19 == 111)
    v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sgePack_A_NoTran;
  vars8 = v30;
  v32 = strsm_block_LLT;
  if (v19 == 111)
    v32 = strsm_block_LUN;
  v64 = v32;
  v33 = (v20 << 7) + 16408;
  if (a12 == -1)
  {
    v38 = 4 * v33;
    if (v20 < 1)
      v38 = 0;
    v37 = (float)(unint64_t)v38;
    goto LABEL_19;
  }
  v34 = v22;
  v35 = v21;
  v36 = *(float *)&v24;
  if (v20 >= 1 && a12)
  {
    if (4 * v33 > a12)
    {
      v37 = (float)(unint64_t)(4 * v33);
LABEL_19:
      *a11 = v37;
      return;
    }
    goto LABEL_21;
  }
  if (v20 >= 1)
  {
LABEL_21:
    v79 = (float32x4_t *)a11;
    v61 = a11;
    if (!a11)
      v79 = (float32x4_t *)malloc_type_malloc(4 * v33, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v61 = a11;
  v79 = (float32x4_t *)&a19;
LABEL_24:
  if ((uint64_t)v35 >= 1)
  {
    v39 = v26 - 3;
    if (v26 <= 0)
      v40 = -(-v26 & 3);
    else
      v40 = v26 & 3;
    v73 = v79 + 4100;
    v74 = v40;
    v41 = 1;
    vars0 = v26;
    v62 = v34;
    while (1)
    {
      v42 = v35 >= 0x80 ? v35 - 128 : 0;
      v43 = v35 >= 0x80 ? 128 : v35;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v64)(v65, v43, v26, v34 + 4 * v42 * v72 + 4 * v42, v36);
      sgePack_B_NoTran(v43, v26, (unint64_t *)(v66 + 4 * v42), v70, v73, -1.0, v44, v45);
      if (v35 < 0x81)
        break;
      v71 = v34 + 4 * v42 * v63;
      v46 = v36 != 1.0;
      if (v36 == 0.0)
        v46 = 0;
      v47 = v41 & v46;
      v48 = v42;
      v78 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
      v77 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
      do
      {
        v49 = v48;
        v50 = v48 >= 0x80;
        v51 = v48 - 128;
        if (v50)
          v52 = 128;
        else
          v52 = v49;
        if (!v50)
          v51 = 0;
        v75 = v51;
        v76 = a10 + 4 * v51;
        v53 = v71 + 4 * v51 * v70;
        v54 = v77;
        if ((v52 & 7) != 0)
          v54 = sgebpUnalignedC_8M4N;
        v77 = v54;
        v55 = v78;
        if ((v52 & 7) != 0)
          v55 = sgebpScaleUnalignedC_8M4N;
        v78 = v55;
        vars8(v52, v43, v53, v72, v79);
        v56 = 0;
        if (v26 >= 4)
        {
          v56 = 0;
          v57 = (float32x4_t *)v76;
          v58 = v79 + 4100;
          do
          {
            if (v47)
              v78(v79, (uint64_t)v58, v57, v70, v52, v43, v36);
            else
              v77(v79, (uint64_t)v58, v57, v70, v52, v43);
            v56 += 4;
            v58 += v43;
            v57 += v70;
          }
          while (v56 < v39);
        }
        if (v74)
        {
          v59 = v76 + 4 * v56 * v70;
          v60 = &v73->f32[v56 * v43];
          if (v47)
            sgebpScale_8M1N(v79, v60, v59, v70, v52, v74, v43, v36);
          else
            sgebp_8M1N(v79, v60, v59, v70, v52, v74, v43);
        }
        v48 = v75;
        v26 = vars0;
      }
      while (v75 > 0);
      v41 = 0;
      v36 = 1.0;
      v34 = v62;
      v35 = v42;
    }
  }
  if (v26 >= 1 && !v61)
    free(v79);
}

float *sgebpScaleUnalignedC_8M4N(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v9;
  uint64_t v10;
  float *result;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t *v60;
  _OWORD *v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;

  v9 = a5 & 7;
  v10 = a5 - v9;
  if (v10)
  {
    v12 = _X2;
    v13 = 4 * a4;
    v15 = *a1;
    v16 = a1[1];
    v14 = a1 + 2;
    v17 = *v14;
    v18 = v14[1];
    result = v14[2].f32;
    do
    {
      v19 = a6;
      v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
      __asm { PRFM            #1, [X2,#0x40] }
      v26 = *_X2;
      v27 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v34 = *_X2;
      v35 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      _X2 = v12 + 2;
      v39 = v7;
      v40 = v7;
      v41 = v7;
      v42 = v7;
      v43 = v7;
      v44 = v7;
      v45 = v7;
      v47 = *(float32x4_t *)a2;
      v48 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v52 = vmulq_n_f32(v26, a7);
      v53 = vmulq_n_f32(v27, a7);
      v54 = vmulq_n_f32(v30, a7);
      v55 = vmulq_n_f32(v31, a7);
      v56 = vmulq_n_f32(v34, a7);
      v57 = vmulq_n_f32(v35, a7);
      v58 = vmulq_n_f32(v37, a7);
      v59 = vmulq_n_f32(v38, a7);
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
      v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
      v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
      v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
      v15 = v17;
      v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
      v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
      v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
      v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
      v16 = v18;
      v17 = *(float32x4_t *)result;
      v18 = *(float32x4_t *)(result + 4);
      result += 8;
      v47 = *(float32x4_t *)(a2 + 16);
      v48 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v19 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
          v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
          v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
          v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
          v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
          v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
          v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
          v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
          v15 = *(float32x4_t *)result;
          v16 = *(float32x4_t *)(result + 4);
          v60 = (float32x4_t *)(result + 8);
          v47 = *(float32x4_t *)_X6;
          v61 = _X6 + 1;
          v7 = vmlaq_n_f32(v7, v17, v48.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v48.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v48, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v48, 3);
          v39 = vmlaq_n_f32(v39, v18, v48.f32[0]);
          v41 = vmlaq_lane_f32(v41, v18, *(float32x2_t *)v48.f32, 1);
          v43 = vmlaq_laneq_f32(v43, v18, v48, 2);
          v45 = vmlaq_laneq_f32(v45, v18, v48, 3);
          v17 = *v60;
          v18 = v60[1];
          result = v60[2].f32;
          v48 = *(float32x4_t *)v61;
          _X6 = v61 + 1;
          v19 -= 2;
        }
        while (v19);
        v52 = vaddq_f32(v52, v7);
        v53 = vaddq_f32(v53, v39);
        v54 = vaddq_f32(v54, v40);
        v55 = vaddq_f32(v55, v41);
        v56 = vaddq_f32(v56, v42);
        v57 = vaddq_f32(v57, v43);
        v58 = vaddq_f32(v58, v44);
        v59 = vaddq_f32(v59, v45);
      }
      *v12 = v52;
      v12[1] = v53;
      v62 = (float32x4_t *)((char *)v12 + v13);
      *v62 = v54;
      v62[1] = v55;
      v63 = (float32x4_t *)((char *)v62 + v13);
      *v63 = v56;
      v63[1] = v57;
      v64 = (float32x4_t *)((char *)v63 + v13);
      *v64 = v58;
      v64[1] = v59;
      v12 = _X2;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v9)
    return sgebpScale_1M4N(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v9, a6, a7);
  return result;
}

void strsm_Right_Forward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int32 v34;
  uint64_t v35;
  unsigned int v36;
  void (*v37)(uint64_t, float);
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, __n128, double, int8x16_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v55;
  _BOOL4 v56;
  void (*v57)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  void (*v58)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, float);
  uint64_t v71;
  uint64_t v72;
  uint64_t (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, __n128, double, int8x16_t);
  unsigned int vars8_4;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;

  v34 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v75 = v31;
  v35 = v29;
  vars8_4 = v36;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v37 = (void (*)(uint64_t, float))sgePack_B_Tran;
  if (v27 == 111)
    v37 = (void (*)(uint64_t, float))sgePack_B_NoTran;
  v70 = v37;
  v38 = strsm_block_RLT;
  if (v27 == 111)
    v38 = strsm_block_RUN;
  vars0 = v38;
  v39 = (v29 << 7) + 16408;
  if (a12 == -1)
  {
    v46 = 4 * v39;
    if (v29 < 1)
      v46 = 0;
    v45 = (float)(unint64_t)v46;
    goto LABEL_13;
  }
  v40 = v33;
  v41 = v32;
  v42 = v30;
  v43 = v28;
  v44 = *(float *)&v34;
  v72 = v31;
  if (v29 >= 1 && a12)
  {
    if (4 * v39 > a12)
    {
      v45 = (float)(unint64_t)(4 * v39);
LABEL_13:
      *a11 = v45;
      return;
    }
    goto LABEL_15;
  }
  if (v29 >= 1)
  {
LABEL_15:
    v91 = (float32x4_t *)a11;
    v66 = a11;
    if (!a11)
      v91 = (float32x4_t *)malloc_type_malloc(4 * v39, 0x100004052888210uLL);
    goto LABEL_18;
  }
  v66 = a11;
  v91 = (float32x4_t *)&a27;
LABEL_18:
  if (v42 >= 1)
  {
    v79 = 0;
    v47 = 0;
    v90 = v35 - 3;
    if (v35 <= 0)
      v48 = -(-v35 & 3);
    else
      v48 = v35 & 3;
    v85 = v48;
    v67 = v42;
    v71 = v41 << 9;
    v89 = 16 * v41;
    v78 = 512;
    v49 = 128;
    v77 = a10 + (v41 << 9);
    v68 = v40;
    v69 = v35;
    v82 = v43;
    do
    {
      v76 = v49;
      if (v42 >= v49)
        v50 = v49;
      else
        v50 = v42;
      if (v47 + 128 <= v42)
        v51 = 128;
      else
        v51 = v42 - v47;
      v83 = v75 + 4 * v47 * v41;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, float))vars0)(vars8_4, v43, v51, v40 + 4 * v47 * v72 + 4 * v47, v72, v44);
      v86 = v47 + 128;
      if (v35 - (v47 + 128) >= 1)
      {
        v70(v51, -1.0);
        if (v43 < 1)
        {
          v44 = 1.0;
        }
        else
        {
          v52 = 0;
          v80 = (uint64_t)&v91[4100] + v78 * (v50 + v79);
          v53 = 16 * (v50 + v79);
          v55 = v44 != 1.0 && v47 == 0;
          v56 = v44 != 0.0 && v55;
          v88 = v77;
          v57 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
          v58 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
          do
          {
            v87 = v52 + 128;
            if (v52 + 128 <= v43)
              v59 = 128;
            else
              v59 = v43 - v52;
            v84 = v52;
            if ((v59 & 7) != 0)
            {
              v58 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sgebpUnalignedC_8M4N;
              v57 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sgebpScaleUnalignedC_8M4N;
            }
            v60 = v41;
            sgePack_A_NoTran(v59, v51, v83 + 4 * v52, v41, (uint64_t)v91);
            v61 = v86;
            if (v86 < v90)
            {
              v62 = v88;
              v63 = v80;
              v61 = v86;
              do
              {
                if (v56)
                  v57(v91, v63, v62, v60, v59, v51, v44);
                else
                  v58(v91, v63, v62, v60, v59, v51);
                v61 += 4;
                v63 += v53;
                v62 += v89;
              }
              while (v61 < v90);
            }
            v41 = v60;
            if (v85)
            {
              v64 = a10 + 4 * v84 + 4 * v61 * v60;
              v65 = &v91[4100].f32[v61 * v51];
              if (v56)
                sgebpScale_8M1N(v91, v65, v64, v60, v59, v85, v51, v44);
              else
                sgebp_8M1N(v91, v65, v64, v60, v59, v85, v51);
            }
            v88 += 512;
            v52 = v87;
            v43 = v82;
          }
          while (v87 < v82);
          v44 = 1.0;
          v40 = v68;
          v35 = v69;
          v42 = v67;
        }
      }
      v49 = v76 + 128;
      v78 += 512;
      v79 -= 128;
      v77 += v71;
      v47 = v86;
    }
    while (v86 < v42);
  }
  if (v35 >= 1 && !v66)
    free(v91);
}

void strsm_Right_Backward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int32 v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  void (*v49)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  float *(*v51)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  const float *v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v68;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *(*v76)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v77;
  float32x4_t *v78;

  v25 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v26 = a9;
  STACK[0x10138] = *MEMORY[0x24BDAC8D0];
  v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sgePack_B_Tran;
  if (v17 == 111)
    v28 = 1;
  else
    v28 = a9;
  v65 = v28;
  if (v17 == 111)
    v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sgePack_B_NoTran;
  v64 = v27;
  v29 = strsm_block_RUT;
  if (v17 == 111)
    v29 = strsm_block_RLN;
  v66 = v29;
  v30 = (v20 << 7) + 16408;
  if (a12 == -1)
  {
    v39 = 4 * v30;
    if (v20 < 1)
      v39 = 0;
    v38 = (float)(unint64_t)v39;
    goto LABEL_16;
  }
  v31 = v24;
  v32 = v23;
  v33 = v22;
  v34 = v21;
  v35 = v19;
  v36 = *(float *)&v25;
  v37 = v18;
  if (v20 >= 1 && a12)
  {
    if (4 * v30 > a12)
    {
      v38 = (float)(unint64_t)(4 * v30);
LABEL_16:
      *a11 = v38;
      return;
    }
    goto LABEL_18;
  }
  if (v20 >= 1)
  {
LABEL_18:
    v58 = a11;
    v59 = v20;
    v78 = (float32x4_t *)a11;
    if (!a11)
      v78 = (float32x4_t *)malloc_type_malloc(4 * v30, 0x100004052888210uLL);
    goto LABEL_21;
  }
  v58 = a11;
  v59 = v20;
  v78 = (float32x4_t *)&a17;
LABEL_21:
  if (v34 >= 1)
  {
    v68 = v35;
    v71 = (uint64_t)&v78[4100];
    v77 = 16 * v32;
    v40 = 1;
    v62 = v33;
    v63 = v31;
    v61 = v37;
    v60 = v26;
    do
    {
      v41 = v34;
      v42 = (unint64_t)v34 >= 0x80;
      if ((unint64_t)v34 >= 0x80)
        v34 -= 128;
      else
        v34 = 0;
      if (v42)
        v43 = 128;
      else
        v43 = v41;
      vars8 = v33 + 4 * v34 * v32;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))v66)(v37, v35, v43, v31 + 4 * v34 * v26 + 4 * v34, v26, v36);
      if (v41 >= 0x81)
      {
        v64(v43, v34, v31 + 4 * v34 * v65, v26, v71, -1.0);
        v44 = 1.0;
        if (v35 < 1)
        {
          v40 = 0;
        }
        else
        {
          v45 = 0;
          v46 = v34 - 3;
          v47 = v36 != 1.0;
          if (v36 == 0.0)
            v47 = 0;
          v48 = v47 & v40;
          v73 = v34 & 3;
          v75 = a10;
          v76 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
          v49 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
          vars0 = v34;
          do
          {
            v74 = v45 + 128;
            if (v45 + 128 <= v35)
              v50 = 128;
            else
              v50 = v35 - v45;
            v72 = v45;
            if ((v50 & 7) != 0)
              v49 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpUnalignedC_8M4N;
            v51 = v76;
            if ((v50 & 7) != 0)
              v51 = sgebpScaleUnalignedC_8M4N;
            v76 = v51;
            v52 = v32;
            sgePack_A_NoTran(v50, v43, vars8 + 4 * v45, v32, (uint64_t)v78);
            if ((unint64_t)v34 < 4)
            {
              v53 = 0;
            }
            else
            {
              v53 = 0;
              v54 = (float32x4_t *)v75;
              v55 = v78 + 4100;
              do
              {
                if (v48)
                  v76(v78, (uint64_t)v55, v54, v52, v50, v43, v36);
                else
                  v49(v78, v55, v54, v52, v50, v43);
                v53 += 4;
                v55 += v43;
                v54 = (float32x4_t *)((char *)v54 + v77);
              }
              while (v53 < v46);
            }
            v32 = v52;
            v34 = vars0;
            if (v73)
            {
              v56 = a10 + 4 * v72 + 4 * v53 * v52;
              v57 = (const float *)(v71 + 4 * v53 * v43);
              if (v48)
                sgebpScale_8M1N(v78, v57, v56, v52, v50, v73, v43, v36);
              else
                sgebp_8M1N(v78, v57, v56, v52, v50, v73, v43);
            }
            v75 += 512;
            v45 = v74;
            v35 = v68;
          }
          while (v74 < v68);
          v40 = 0;
          v33 = v62;
          v31 = v63;
          v37 = v61;
          v26 = v60;
        }
      }
      else
      {
        v44 = v36;
      }
      v36 = v44;
    }
    while (v34 > 0);
  }
  if (v59 >= 1 && !v58)
    free(v78);
}

uint64_t APL_sgemm_noPack_NT(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t j;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int32 *v51;
  __int32 *v52;
  __int32 *v53;
  uint64_t k;
  float32x4_t *v55;
  float *v56;
  float32x4_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t m;
  float v67;
  float v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  __int32 *v74;
  float32x2_t v75;
  __int32 *v76;
  float32x2_t v77;

  v12 = 4 * a5;
  v13 = 4 * a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = a6;
    v19 = &a8[a12];
    v20 = __OFSUB__(result, 3);
    v21 = result - 3;
    if (result > 3)
    {
      do
      {
        v22 = a3;
        v23 = (float32x4_t)veorq_s8(a11, a11);
        v24 = v23;
        v25 = v23;
        v26 = v23;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v27 = *v17;
        v17 = (float32x4_t *)((char *)v17 + v12);
        v28 = *v18;
        v18 = (float32x4_t *)((char *)v18 + v14);
        v23 = vmlaq_n_f32(v23, v27, v28.f32[0]);
        v24 = vmlaq_lane_f32(v24, v27, *(float32x2_t *)v28.f32, 1);
        v25 = vmlaq_laneq_f32(v25, v27, v28, 2);
        v26 = vmlaq_laneq_f32(v26, v27, v28, 3);
        v22 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v29 = *v17;
          v30 = *(float32x4_t *)((char *)v17 + v12);
          v31 = *v18;
          v32 = *(float32x4_t *)((char *)v18 + v14);
          v15 = v22 <= 2;
          for (j = v22 - 2; !v15; j -= 2)
          {
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v34 = vmlaq_n_f32(v23, v29, v31.f32[0]);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v35 = vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1);
            v36 = vmlaq_laneq_f32(v25, v29, v31, 2);
            v37 = vmlaq_laneq_f32(v26, v29, v31, 3);
            v29 = *v17;
            v23 = vmlaq_n_f32(v34, v30, v32.f32[0]);
            v31 = *v18;
            v24 = vmlaq_lane_f32(v35, v30, *(float32x2_t *)v32.f32, 1);
            v25 = vmlaq_laneq_f32(v36, v30, v32, 2);
            v26 = vmlaq_laneq_f32(v37, v30, v32, 3);
            v30 = *(float32x4_t *)((char *)v17 + v12);
            v32 = *(float32x4_t *)((char *)v18 + v14);
            v15 = j <= 2;
          }
          v17 = (float32x4_t *)((char *)v17 + 2 * v12);
          v23 = vmlaq_n_f32(vmlaq_n_f32(v23, v29, v31.f32[0]), v30, v32.f32[0]);
          v24 = vmlaq_lane_f32(vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1), v30, *(float32x2_t *)v32.f32, 1);
          v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(v25, v29, v31, 2), v30, v32, 2);
          v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(v26, v29, v31, 3), v30, v32, 3);
        }
        v38 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v23, a9), *a8, a10);
        v39 = vmlaq_n_f32(vmulq_n_f32(v25, a9), *v38, a10);
        v40 = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)v38 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v24, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v38 = v39;
        *(float32x4_t *)((char *)v38 + 4 * a12) = v40;
        v18 = a6;
        v17 = (float32x4_t *)((char *)v17 - v12 * a3 + 16);
        v20 = __OFSUB__(v21, 4);
        v15 = v21 <= 4;
        v21 -= 4;
      }
      while (!v15);
    }
    v41 = result & 3;
    if (!v20 && v41 != 0)
    {
      do
      {
        v42 = a3;
        v43 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v44 = v17->f32[0],
              v17 = (float32x4_t *)((char *)v17 + v12),
              v45 = *v18,
              v18 = (float32x4_t *)((char *)v18 + v14),
              v43 = vmlaq_n_f32(v43, v45, v44),
              v42 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v46 = v17->f32[0];
            v47 = v17->f32[(unint64_t)v12 / 4];
            v48 = *(float32x4_t *)((char *)v18 + v14);
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v49 = vmlaq_n_f32(v43, *v18, v46);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v43 = vmlaq_n_f32(v49, v48, v47);
            v15 = v42 <= 2;
            v42 -= 2;
          }
          while (!v15);
        }
        v50.i32[0] = a8->i32[0];
        v50.i32[1] = a8->i32[a12];
        v51 = (__int32 *)((char *)a8 + v13 + v13);
        v50.i32[2] = *v51;
        v50.i32[3] = v51[a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v43, a9), v50, a10);
        v52 = (__int32 *)((char *)a8 + v13);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v52 = a11.i32[1];
        v53 = &v52[(unint64_t)v13 / 4];
        *v53 = a11.i32[2];
        v53[a12] = a11.i32[3];
        v18 = a6;
        v17 = (float32x4_t *)((char *)&v17->i32[1] - v12 * a3);
        v15 = v41-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v19;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v55 = a4;
    v56 = (float *)a6;
    v57 = (float32x4_t *)((char *)a8 + v13);
    v58 = __OFSUB__(result, 3);
    v59 = result - 3;
    if (result > 3)
    {
      do
      {
        v60 = a3;
        v61 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v62 = *v55,
              v55 = (float32x4_t *)((char *)v55 + v12),
              v63 = *v56,
              v56 = (float *)((char *)v56 + v14),
              v61 = vmlaq_n_f32(v61, v62, v63),
              v60 = a3 - 1,
              a3 > 1))
        {
          v64 = *v55;
          v65 = *(float32x4_t *)((char *)v55 + v12);
          v15 = v60 <= 2;
          for (m = v60 - 2; !v15; m -= 2)
          {
            v55 = (float32x4_t *)((char *)v55 + 2 * v12);
            v67 = *v56;
            v68 = v56[(unint64_t)v14 / 4];
            v56 = (float *)((char *)v56 + 2 * v14);
            v69 = vmlaq_n_f32(v61, v64, v67);
            v64 = *v55;
            v61 = vmlaq_n_f32(v69, v65, v68);
            v65 = *(float32x4_t *)((char *)v55 + v12);
            v15 = m <= 2;
          }
          v55 = (float32x4_t *)((char *)v55 + 2 * v12);
          v61 = vmlaq_n_f32(vmlaq_n_f32(v61, v64, *v56), v65, v56[(unint64_t)v14 / 4]);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v61, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)v55 - v12 * a3 + 16);
        v58 = __OFSUB__(v59, 4);
        v15 = v59 <= 4;
        v59 -= 4;
      }
      while (!v15);
    }
    v70 = result & 3;
    if (!v58 && v70 != 0)
    {
      do
      {
        v71 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v72 = v55->f32[0],
              v55 = (float32x4_t *)((char *)v55 + v12),
              v73 = *v56,
              v56 = (float *)((char *)v56 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v73, v72),
              v71 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v75.i32[0] = v55->i32[0];
            v74 = (__int32 *)((char *)v55 + v12);
            v75.i32[1] = *v74;
            v55 = (float32x4_t *)&v74[(unint64_t)v12 / 4];
            v77.f32[0] = *v56;
            v76 = (__int32 *)&v56[(unint64_t)v14 / 4];
            v77.i32[1] = *v76;
            v56 = (float *)&v76[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v77, v75);
            v15 = v71 <= 2;
            v71 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)&v55->i32[1] - v12 * a3);
        v15 = v70-- <= 1;
      }
      while (!v15);
    }
    a6 = (float32x4_t *)((char *)a6 + 4);
    a8 = v57;
    v15 = k <= 1;
  }
  return result;
}

uint64_t Accelerate_AR_sposv(uint64_t a1, int *a2, unsigned int *a3, float *a4, int *a5, char *a6, int *a7, int *a8)
{
  signed int v16;
  int v17;

  *a8 = 0;
  if (!lsame_() && !lsame_())
  {
    v17 = -1;
    goto LABEL_14;
  }
  v16 = *a2;
  if (*a2 < 0)
  {
    v17 = -2;
    goto LABEL_14;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v17 = -3;
    goto LABEL_14;
  }
  if (v16 <= 1)
    v16 = 1;
  if (*a5 < v16)
  {
    v17 = -5;
LABEL_14:
    *a8 = v17;
LABEL_15:
    xerbla_();
    return 0;
  }
  if (*a7 < v16)
  {
    v17 = -7;
    goto LABEL_14;
  }
  if (*a8)
    goto LABEL_15;
  Accelerate_AR_spotrf(a1, a2, (uint64_t)a4, a5, a8);
  if (!*a8)
    Accelerate_AR_spotrs(a1, (unsigned int *)a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t Accelerate_AR_dtrtri(char *a1, char *a2, __CLPK_integer *a3, __CLPK_doublereal *a4, int *a5, __CLPK_integer *a6)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  __CLPK_integer v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  char *v24;
  int v25;
  double *v26;
  int v27;
  __CLPK_integer v28;
  double v29;
  float64x2_t v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  signed int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  double *v47;
  uint64_t v48;
  __CLPK_integer v49;
  __CLPK_integer v50;
  __CLPK_integer v51;
  double v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  int v61;
  __CLPK_integer *v62;
  uint64_t v63;
  int v64;
  __CLPK_doublereal *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __CLPK_integer __n;
  char __b[2];
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v73 = 0;
  v74 = 0;
  v71 = 0;
  v12 = *a5;
  *a6 = 0;
  v13 = lsame_();
  v14 = lsame_();
  if (!v13 && !lsame_())
  {
    v17 = -1;
    goto LABEL_23;
  }
  if (!v14 && !lsame_())
  {
    v17 = -2;
    goto LABEL_23;
  }
  v15 = *a3;
  if ((v15 & 0x80000000) != 0)
  {
    v17 = -3;
    goto LABEL_23;
  }
  if (v15 <= 1)
    v16 = 1;
  else
    v16 = *a3;
  if (*a5 < v16)
  {
    v17 = -5;
LABEL_23:
    *a6 = v17;
    goto LABEL_24;
  }
  v17 = *a6;
  if (*a6)
  {
LABEL_24:
    HIDWORD(v71) = -v17;
    xerbla_();
    return 0;
  }
  if ((_DWORD)v15)
  {
    v18 = ~(_DWORD)v12;
    v65 = &a4[~(_DWORD)v12];
    if (v14)
    {
      HIDWORD(v71) = *a3;
      v19 = v15 + 1;
      v20 = 1;
      v21 = v12 + 1;
      while (v65[v21] != 0.0)
      {
        ++v20;
        v21 += v12 + 1;
        if (v19 == v20)
        {
          *a6 = 0;
          goto LABEL_19;
        }
      }
      *a6 = v20;
    }
    else
    {
LABEL_19:
      v72 = 0x100000001;
      v73 = a1;
      v74 = a2;
      s_cat(__b, (uint64_t)&v73, (uint64_t)&v72, (unsigned int *)&c__2_2, 2uLL);
      if (*a3 > 32)
      {
        if (v13)
        {
          v23 = 0;
          v24 = (char *)&a4[v12 + 1 + v18];
          HIDWORD(v71) = *a3;
          v66 = (v12 << 8) + 256;
          v67 = v12 << 8;
          v25 = -1;
          v26 = (double *)v24;
          do
          {
            v27 = v25 + *a3;
            if (v27 <= 30)
              v28 = v27 + 1;
            else
              v28 = 32;
            __n = v28;
            LODWORD(v71) = v23;
            Accelerate_AR_dtrmm("Left", "Upper", "No transpose", a2, (unsigned int *)&v71, (unsigned int *)&__n, (uint64_t)&c_b18_0, (int)a4, a5, (uint64_t)v24, a5);
            LODWORD(v71) = v23;
            Accelerate_AR_dtrsm("Right", "Upper", "No transpose", a2, (unsigned int *)&v71, (unsigned int *)&__n, &c_b22_1, v26, v29, v30, v31, v32, v33, v34, v35, v36, a5, v24, a5);
            dtrti2_("Upper", a2, &__n, v26, a5, a6);
            v37 = v23 + 33;
            v23 += 32;
            v25 -= 32;
            v26 = (double *)((char *)v26 + v66);
            v24 += v67;
          }
          while (v37 <= SHIDWORD(v71));
        }
        else
        {
          v38 = (*a3 - 1);
          v39 = v38 & 0xFFFFFFE0 | 1;
          v40 = v38 >> 5;
          v41 = (32 * ((*a3 - 1) >> 5)) | 1;
          v42 = -32 * v40;
          v43 = v39 * v12;
          v44 = (v40 << 8) + 8 * v39 * v12 + 8 * v18;
          v45 = 32 * v40 + 33;
          v61 = v12 + 1;
          v46 = (v12 + 1) * v41;
          v64 = 32 * ~(_DWORD)v12;
          v47 = (__CLPK_doublereal *)((char *)a4 + v44 + 8);
          v62 = a3;
          v63 = ~v12 << 8;
          v48 = 32 * v12;
          v60 = v48;
          do
          {
            v68 = v41;
            HIDWORD(v71) = 32;
            v49 = *a3;
            v50 = v42 + *a3;
            if (v50 - 1 > 30)
              v50 = 32;
            __n = v50;
            v51 = v45 + v50 - 32;
            if (v51 <= v49)
            {
              HIDWORD(v71) = v42 + v49 - v50;
              Accelerate_AR_dtrmm("Left", "Lower", "No transpose", a2, (unsigned int *)&v71 + 1, (unsigned int *)&__n, (uint64_t)&c_b18_0, (_DWORD)v65 + 8 * v51 * v61, a5, (uint64_t)&v65[v43 + v50 + v68], a5);
              HIDWORD(v71) = v42 + *v62 - __n;
              a3 = v62;
              v48 = v60;
              Accelerate_AR_dtrsm("Right", "Lower", "No transpose", a2, (unsigned int *)&v71 + 1, (unsigned int *)&__n, &c_b22_1, v47, v52, v53, v54, v55, v56, v57, v58, v59, a5, (char *)&v65[v43 + __n + (int)v68], a5);
            }
            dtrti2_("Lower", a2, &__n, &v65[v46], a5, a6);
            v45 -= 32;
            v46 += v64;
            v42 += 32;
            v47 = (double *)((char *)v47 + v63);
            v43 -= v48;
            v41 = v68 - 32;
          }
          while (v45 > 32);
        }
      }
      else
      {
        dtrti2_(a1, a2, a3, a4, a5, a6);
      }
    }
  }
  return 0;
}

uint64_t Accelerate_AR_dpotrf(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  double *v41;
  int v42;
  double v43;
  float64x2_t v44;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;

  v10 = *a4;
  *a5 = 0;
  v11 = lsame_();
  if (!v11 && !lsame_())
  {
    v14 = -1;
    goto LABEL_29;
  }
  v12 = *a2;
  if ((v12 & 0x80000000) != 0)
  {
    v14 = -2;
    goto LABEL_29;
  }
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = *a2;
  if (*a4 < v13)
  {
    v14 = -4;
LABEL_29:
    *a5 = v14;
    goto LABEL_30;
  }
  v14 = *a5;
  if (*a5)
  {
LABEL_30:
    v62 = -v14;
    xerbla_();
    return 0;
  }
  v56 = v10;
  if ((_DWORD)v12)
  {
    if (v12 <= 0x200)
      v15 = 32;
    else
      v15 = 64;
    if (v12 <= 0x1964)
      v16 = v15;
    else
      v16 = 128;
    if (v16 >= v12)
    {
      Accelerate_AR_dpotf2(a1, a2, a3, a4, a5);
    }
    else
    {
      v17 = ~(_DWORD)v10;
      v57 = a3 + 8 * v17;
      v58 = a2;
      v59 = v16;
      v18 = 0;
      if (v11)
      {
        v19 = 0;
        v20 = 8 * v10 + 8 * v17 + a3 + 8;
        v21 = (int)v10 * (uint64_t)(int)v16;
        v52 = 8 * v21;
        v54 = 8 * (v21 + v16);
        v22 = 1;
        v23 = (double *)v20;
        while (1)
        {
          v24 = v18 + *a2;
          v61 = v24;
          v62 = v19;
          if ((int)v16 < v24)
            v24 = v16;
          v60 = v24;
          Accelerate_AR_dsyrk("Upper", "Transpose", (unsigned int *)&v60, (unsigned int *)&v62, &c_b13, v20, (unsigned int *)a4, &c_b14_1, (uint64_t)v23, a4);
          Accelerate_AR_dpotf2((uint64_t)"Upper", &v60, (uint64_t)v23, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v26 = v19 + v60 + 1;
          v27 = *a2;
          if (v26 <= *a2)
          {
            v61 = v19;
            v62 = v18 + v27 - v60;
            v51 = v57 + 8 * (v19 + (int)v10 * (v60 + v22)) + 8;
            Accelerate_AR_dgemm("Transpose", "No transpose", &v60, &v62, &v61, (uint64_t)&c_b13, v20, a4, v57 + 8 * (v26 * (int)v10 + 1), a4, (uint64_t)&c_b14_1, v51, SHIDWORD(v51), a4);
            v62 = v18 + *v58 - v60;
            a2 = v58;
            Accelerate_AR_dtrsm("Left", "Upper", "Transpose", "Non-unit", (unsigned int *)&v60, (unsigned int *)&v62, &c_b14_1, v23, v28, v29, v30, v31, v32, v33, v34, v35, a4, (char *)(v57 + 8 * (v19 + (int)v10 * (v60 + v22)) + 8), a4);
          }
          LODWORD(v16) = v59;
          v19 += v59;
          v18 -= v59;
          v23 = (double *)((char *)v23 + v54);
          v20 += v52;
          v22 += v59;
          if (v19 + 1 > v12)
            return 0;
        }
      }
      else
      {
        v37 = v10 + 1;
        v38 = a3 + 8 * v17 + 8 * ((int)v10 + 1);
        v55 = 8 * v16;
        v53 = v16 * (v10 + 1);
        v39 = 1;
        while (1)
        {
          v40 = v18 + *a2;
          v61 = v40;
          if ((int)v16 < v40)
            v40 = v16;
          v60 = v40;
          LODWORD(v19) = v39 - 1;
          v62 = v39 - 1;
          v41 = (double *)(v57 + 8 * v37);
          Accelerate_AR_dsyrk("Lower", "No transpose", (unsigned int *)&v60, (unsigned int *)&v62, &c_b13, v38, (unsigned int *)a4, &c_b14_1, (uint64_t)v41, a4);
          Accelerate_AR_dpotf2((uint64_t)"Lower", &v60, (uint64_t)v41, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v42 = *a2;
          if (v39 + v60 <= *a2)
          {
            v61 = v39 - 1;
            v62 = v18 + v42 - v60;
            Accelerate_AR_dgemm("No transpose", "Transpose", &v62, &v60, &v61, (uint64_t)&c_b13, v57 + 8 * (v56 + v39 + v60), a4, v38, a4, (uint64_t)&c_b14_1, v57 + 8 * (v37 + v60), (unint64_t)(v57 + 8 * (v37 + v60)) >> 32, a4);
            v62 = v18 + *v58 - v60;
            a2 = v58;
            Accelerate_AR_dtrsm("Right", "Lower", "Transpose", "Non-unit", (unsigned int *)&v62, (unsigned int *)&v60, &c_b14_1, v41, v43, v44, v45, v46, v47, v48, v49, v50, a4, (char *)(v57 + 8 * (v37 + v60)), a4);
          }
          LODWORD(v16) = v59;
          v18 -= v59;
          v38 += v55;
          v37 += v53;
          v39 += v59;
          if (v39 > (int)v12)
            return 0;
        }
      }
      *a5 = v19 + v25;
    }
  }
  return 0;
}

uint64_t ssyrk_noPack_LT(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, float32x2_t a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  double *v26;
  float32x2_t v27;
  BOOL v28;
  float32x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int32 *v33;
  __int32 *v34;
  float32x2_t v35;
  float32x2_t *v36;
  uint64_t v37;
  __int32 *v38;
  __int32 *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  char *v43;
  float32x2_t v44;
  char *v45;
  char *v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  __int32 *v51;
  float *v52;
  __int32 *v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float32x4_t *v65;
  uint64_t v66;
  __int32 *v67;
  __int32 *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  char *v81;
  float32x4_t v82;
  __n128 *v83;
  float32x4_t v84;
  __n128 *v85;
  __n128 *v86;
  float32x2_t *v87;
  uint64_t i;
  uint64_t v89;
  float32x2_t *v90;
  __int32 *v91;
  float32x2_t *v92;
  __int32 *v93;
  float32x2_t *v94;
  int32x2_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t *v112;
  float32x4_t v113;
  float32x4_t *v114;
  __n128 *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;

  a7.i64[1] = a8.i64[0];
  v21 = 0;
  v22 = 4 * a4;
  v23 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_14:
    if ((result & 2) != 0)
    {
      v36 = (float32x2_t *)&a5[v21];
      a5 = (_DWORD *)((char *)a5 + 2 * v23);
      v37 = a2;
      v38 = (__int32 *)((char *)a3 + v21 * v22);
      v39 = &v38[(unint64_t)v22 / 4];
      v40 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v41 = v40;
      if ((a2 & 1) == 0)
        goto LABEL_18;
      v13.i32[0] = *v38++;
      v14.i32[0] = *v39++;
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v40 = vmla_n_f32(v40, *(float32x2_t *)v17.f32, v13.f32[0]);
      v41 = vmla_n_f32(v41, *(float32x2_t *)v17.f32, v14.f32[0]);
      v37 = a2 - 1;
      if (a2 > 1)
      {
LABEL_18:
        do
        {
          v13.i64[0] = *(_QWORD *)v38;
          v38 += 2;
          v14.i64[0] = *(_QWORD *)v39;
          v39 += 2;
          v42 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          v40 = vmla_lane_f32(vmla_n_f32(v40, v42, v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v41 = vmla_lane_f32(vmla_n_f32(v41, v42, v14.f32[0]), a13, *(float32x2_t *)v14.f32, 1);
          v28 = v37 <= 2;
          v37 -= 2;
        }
        while (!v28);
      }
      v44 = *v36;
      v43 = (char *)v36 + v23;
      a13.i32[1] = *((_DWORD *)v43 + 1);
      v45 = &v43[-v23];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v40, a7.f32[0]), v44, a7, 2);
      *(_QWORD *)v45 = a8.i64[0];
      v46 = &v45[v23];
      *((_DWORD *)v46 + 1) = vmla_laneq_f32(vmul_n_f32(v41, *(float *)&a7), a13, a7, 2).i32[1];
      v47 = (float32x2_t *)&v46[-v23 + 8];
      v48 = v21 + 2;
      if (result > v21 + 2)
      {
        do
        {
          v49 = a2;
          v50 = (float *)((char *)a3 + v21 * v22);
          v51 = (__int32 *)((char *)a3 + v48 * v22);
          v52 = &v50[(unint64_t)v22 / 4];
          v53 = &v51[(unint64_t)v22 / 4];
          v54 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v55 = v54;
          if ((a2 & 1) == 0)
            goto LABEL_24;
          v17.i32[0] = *v51++;
          v18.i32[0] = *v53++;
          v56 = *v50++;
          v57 = *v52++;
          *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v54 = vmla_n_f32(v54, *(float32x2_t *)v17.f32, v56);
          v55 = vmla_n_f32(v55, *(float32x2_t *)v17.f32, v57);
          v49 = a2 - 1;
          if (a2 > 1)
          {
LABEL_24:
            do
            {
              v17.i64[0] = *(_QWORD *)v51;
              v51 += 2;
              v18.i64[0] = *(_QWORD *)v53;
              v53 += 2;
              v13.i64[0] = *(_QWORD *)v50;
              v50 += 2;
              v14.i64[0] = *(_QWORD *)v52;
              v52 += 2;
              v58 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v59 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v54 = vmla_lane_f32(vmla_n_f32(v54, v58, v13.f32[0]), v59, *(float32x2_t *)v13.f32, 1);
              v55 = vmla_lane_f32(vmla_n_f32(v55, v58, v14.f32[0]), v59, *(float32x2_t *)v14.f32, 1);
              v28 = v49 <= 2;
              v49 -= 2;
            }
            while (!v28);
          }
          v61 = *v47;
          v60 = (float32x2_t *)((char *)v47 + v23);
          v62 = *v60;
          v63 = (float32x2_t *)((char *)v60 + v23 + -2 * v23);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v54, a7.f32[0]), v61, a7, 2);
          *v63 = *(float32x2_t *)a8.i8;
          v64 = (float32x2_t *)((char *)v63 + v23);
          *v64 = vmla_laneq_f32(vmul_n_f32(v55, a7.f32[0]), v62, a7, 2);
          v47 = (float32x2_t *)((char *)v64 + v23 + -2 * v23 + 8);
          v48 += 2;
        }
        while (v48 < result);
        v21 += 2;
      }
      else
      {
        v21 += 2;
      }
    }
    for (; result > v21; v21 += 4)
    {
      v65 = (float32x4_t *)&a5[v21];
      a5 += v23;
      v66 = a2;
      v67 = (__int32 *)((char *)a3 + v21 * v22);
      v68 = &v67[(unint64_t)v22 / 4];
      v69 = (float32x2_t *)&v67[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
      v70 = (float32x2_t *)((char *)v69 + v22);
      v71 = (float32x4_t)veorq_s8(a8, a8);
      v72 = v71;
      v73 = *(float32x2_t *)v71.f32;
      v74 = *(float32x2_t *)v71.f32;
      if ((a2 & 1) == 0)
        goto LABEL_31;
      v13.i32[0] = *v67++;
      v14.i32[0] = *v68++;
      v15.i32[0] = v69->i32[0];
      v69 = (float32x2_t *)((char *)v69 + 4);
      v16.i32[0] = v70->i32[0];
      v70 = (float32x2_t *)((char *)v70 + 4);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v20 = (float32x2_t)vtrn1_s32((int32x2_t)v15, (int32x2_t)v16);
      *(float32x2_t *)&v17.u32[2] = v20;
      v71 = vmlaq_n_f32(v71, v17, v13.f32[0]);
      v72 = vmlaq_n_f32(v72, v17, v14.f32[0]);
      v73 = vmla_n_f32(v73, v20, v15.f32[0]);
      v74 = vmla_n_f32(v74, v20, v16.f32[0]);
      v66 = a2 - 1;
      if (a2 > 1)
      {
LABEL_31:
        do
        {
          v75.i64[0] = *(_QWORD *)v67;
          v67 += 2;
          v76.i64[0] = *(_QWORD *)v68;
          v68 += 2;
          v15 = *v69++;
          v16 = *v70++;
          v75.u64[1] = (unint64_t)v15;
          v76.u64[1] = (unint64_t)v16;
          v77 = (float32x4_t)vtrn1q_s32(v75, v76);
          v78 = (float32x4_t)vtrn2q_s32(v75, v76);
          v71 = vmlaq_lane_f32(vmlaq_n_f32(v71, v77, *(float *)v75.i32), v78, *(float32x2_t *)v75.i8, 1);
          v72 = vmlaq_lane_f32(vmlaq_n_f32(v72, v77, *(float *)v76.i32), v78, *(float32x2_t *)v76.i8, 1);
          v73 = vmla_lane_f32(vmla_n_f32(v73, *(float32x2_t *)&v77.u32[2], v15.f32[0]), *(float32x2_t *)&v78.u32[2], v15, 1);
          v74 = vmla_lane_f32(vmla_n_f32(v74, *(float32x2_t *)&v77.u32[2], v16.f32[0]), *(float32x2_t *)&v78.u32[2], v16, 1);
          v28 = v66 <= 2;
          v66 -= 2;
        }
        while (!v28);
      }
      v80 = *v65;
      v79 = (float32x4_t *)((char *)v65 + v23);
      v82 = *v79;
      v81 = (char *)v79 + v23;
      v13.i64[0] = *((_QWORD *)v81 + 1);
      v14.i64[0] = *(_QWORD *)&v81[v23 + 8];
      v83 = (__n128 *)&v81[-2 * v23];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v71, a7.f32[0]), v80, a7, 2);
      v84 = vmlaq_laneq_f32(vmulq_n_f32(v72, a7.f32[0]), v82, a7, 2);
      v85 = (__n128 *)((char *)v83 + v23);
      *v83 = (__n128)a8;
      v86 = v83 + 1;
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u32[0] = v84.u32[1];
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u64[0] = v84.u64[1];
      v87 = (float32x2_t *)((char *)v85 + v23);
      *v87 = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), *(float32x2_t *)v13.f32, a7, 2);
      v87->i32[(unint64_t)v23 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v74, *(float *)&a7), *(float32x2_t *)&v14, a7, 2).i32[1];
      for (i = v21 + 4; i < result; i += 4)
      {
        v89 = a2;
        v90 = (float32x2_t *)((char *)a3 + v21 * v22);
        v91 = (__int32 *)((char *)a3 + i * v22);
        v92 = (float32x2_t *)((char *)v90 + v22);
        v93 = &v91[(unint64_t)v22 / 4];
        v94 = (float32x2_t *)((char *)v90 + v22 + v22);
        v95 = (int32x2_t *)&v91[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
        v96 = (float32x2_t *)((char *)v94 + v22);
        v97 = (float32x2_t *)((char *)v95 + v22);
        v98 = (float32x4_t)veorq_s8(a8, a8);
        v99 = v98;
        v100 = v98;
        v101 = v98;
        if ((a2 & 1) == 0)
          goto LABEL_36;
        v17.i32[0] = *v91++;
        v18.i32[0] = *v93++;
        v19.i32[0] = v95->i32[0];
        v95 = (int32x2_t *)((char *)v95 + 4);
        v20.i32[0] = v97->i32[0];
        v97 = (float32x2_t *)((char *)v97 + 4);
        v102 = v90->f32[0];
        v90 = (float32x2_t *)((char *)v90 + 4);
        v103 = v92->f32[0];
        v92 = (float32x2_t *)((char *)v92 + 4);
        v104 = v94->f32[0];
        v94 = (float32x2_t *)((char *)v94 + 4);
        v105 = v96->f32[0];
        v96 = (float32x2_t *)((char *)v96 + 4);
        *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
        v20 = (float32x2_t)vtrn1_s32(v19, (int32x2_t)v20);
        *(float32x2_t *)&v17.u32[2] = v20;
        v98 = vmlaq_n_f32(v98, v17, v102);
        v99 = vmlaq_n_f32(v99, v17, v103);
        v100 = vmlaq_n_f32(v100, v17, v104);
        v101 = vmlaq_n_f32(v101, v17, v105);
        v89 = a2 - 1;
        if (a2 > 1)
        {
LABEL_36:
          do
          {
            v17.i64[0] = *(_QWORD *)v91;
            v91 += 2;
            v18.i64[0] = *(_QWORD *)v93;
            v93 += 2;
            v19 = *v95++;
            v20 = *v97++;
            v106 = *v90++;
            v107 = *v92++;
            v15 = *v94++;
            v16 = *v96++;
            *(int32x2_t *)&v17.u32[2] = v19;
            v18.u64[1] = (unint64_t)v20;
            v108 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, v18);
            v109 = (float32x4_t)vtrn2q_s32((int32x4_t)v17, v18);
            v98 = vmlaq_lane_f32(vmlaq_n_f32(v98, v108, v106.f32[0]), v109, v106, 1);
            v99 = vmlaq_lane_f32(vmlaq_n_f32(v99, v108, v107.f32[0]), v109, v107, 1);
            v100 = vmlaq_lane_f32(vmlaq_n_f32(v100, v108, v15.f32[0]), v109, v15, 1);
            v101 = vmlaq_lane_f32(vmlaq_n_f32(v101, v108, v16.f32[0]), v109, v16, 1);
            v28 = v89 <= 2;
            v89 -= 2;
          }
          while (!v28);
        }
        v111 = *(float32x4_t *)v86;
        v110 = (float32x4_t *)((char *)v86 + v23);
        v113 = *v110;
        v112 = (float32x4_t *)((char *)v110 + v23);
        v13 = *v112;
        v114 = (float32x4_t *)((char *)v112 + v23);
        v14 = *v114;
        v115 = (__n128 *)((char *)v114 + v23 + -4 * v23);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v98, a7.f32[0]), v111, a7, 2);
        *v115 = (__n128)a8;
        v116 = (float32x4_t *)((char *)v115 + v23);
        *v116 = vmlaq_laneq_f32(vmulq_n_f32(v99, a7.f32[0]), v113, a7, 2);
        v117 = (float32x4_t *)((char *)v116 + v23);
        *v117 = vmlaq_laneq_f32(vmulq_n_f32(v100, a7.f32[0]), v13, a7, 2);
        v118 = (float32x4_t *)((char *)v117 + v23);
        *v118 = vmlaq_laneq_f32(vmulq_n_f32(v101, a7.f32[0]), v14, a7, 2);
        v86 = (__n128 *)((char *)&v118[1] + v23 + -4 * v23);
      }
    }
    return result;
  }
  v24 = a5;
  a5 = (_DWORD *)((char *)a5 + v23);
  v25 = a2;
  v26 = (double *)a3;
  v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v26 = (double *)(a3 + 1), v27.f32[0] = *a3 * *a3, v25 = a2 - 1, a2 > 1))
  {
    do
    {
      a12 = *(float32x2_t *)v26++;
      v27 = vmla_f32(v27, a12, a12);
      v28 = v25 <= 2;
      v25 -= 2;
    }
    while (!v28);
    v27.f32[0] = vaddv_f32(v27);
  }
  a12.i32[0] = *v24;
  v27.f32[0] = v27.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v27, a12, a7, 2);
  *v24 = a8.i32[0];
  v29 = (float32x2_t *)(v24 + 1);
  v30 = 1;
  if (result > 1)
  {
    do
    {
      v31 = a2;
      v32 = (uint64_t *)a3;
      v33 = (__int32 *)((char *)a3 + v30 * v22);
      v34 = &v33[(unint64_t)v22 / 4];
      v35 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0)
        goto LABEL_11;
      v17.i32[0] = *v33++;
      v18.i32[0] = *v34++;
      v32 = (uint64_t *)(a3 + 1);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
      v35 = vmla_n_f32(v35, *(float32x2_t *)v17.f32, *a3);
      v31 = a2 - 1;
      if (a2 > 1)
      {
LABEL_11:
        do
        {
          v17.i64[0] = *(_QWORD *)v33;
          v33 += 2;
          v18.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v13.i64[0] = *v32++;
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v35 = vmla_lane_f32(vmla_n_f32(v35, (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8), v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v28 = v31 <= 2;
          v31 -= 2;
        }
        while (!v28);
      }
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v35, a7.f32[0]), *v29, a7, 2);
      *v29++ = *(float32x2_t *)a8.i8;
      v30 += 2;
    }
    while (v30 < result);
    v21 = 1;
    goto LABEL_14;
  }
  return result;
}

uint64_t sgePack_A_NoTran_Aligned(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  _X3 = 4 * a4;
  v7 = _X2 + 2;
  do
  {
    do
    {
      v8 = *_X2;
      v9 = _X2[1];
      _X2 = (__int128 *)((char *)_X2 + _X3);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v8;
      a5[1] = v9;
      a5 += 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 2;
  }
  while (result);
  return result;
}

void dgemv_internal(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, double *a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  if ((a1 & 1) != 0)
    dgemvT_work(a2, a3, a4, a5, a6, a7, a8, a17, a9.f64[0], a10.f64[0]);
  else
    dgemvN_work(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34);
}

void dgemvT_work(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, double *a7, uint64_t a8, double a9, double a10)
{
  double v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *f64;
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;

  v34 = a2;
  v35 = a7;
  v10 = a10;
  v32 = a3;
  v33 = a4;
  v36 = *MEMORY[0x24BDAC8D0];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v30) = a8;
      else
        v30 = -a8;
      cblas_dscal(v34, a10, &v35[((v34 - 1) * a8) & (a8 >> 63)], v30);
    }
  }
  else
  {
    v16 = hardwareVectorBytes();
    v31[3] = v31;
    MEMORY[0x24BDAC7A8](v16, v17);
    v19 = (char *)(((unint64_t)v31 - v18) & 0xFFFFFFFFFFFFFFC0);
    v21 = (float64x2_t *)&v19[8 * v20];
    v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    bzero(v19, v22 & 0xFFFFFFFFFFFFFFF8);
    bzero(&v21[128], v23);
    if (a1 >= 1)
    {
      v24 = 0;
      v25 = a1;
      do
      {
        v26 = v25 - 256;
        if (v25 >= 256)
          v25 = 256;
        if (a1 - v24 >= 256)
          v27 = 256;
        else
          v27 = a1 - v24;
        if (a1 - v24 >= 1)
        {
          v28 = a5;
          f64 = (_QWORD *)v21->f64;
          do
          {
            *f64++ = *v28;
            v28 += a6;
            --v25;
          }
          while (v25);
        }
        dgemvT_packed_base(v27, v34, (float64x2_t *)(v32 + 8 * v24), v33, v21, v35, a8, a9, v10);
        v24 += 256;
        a5 += 256 * a6;
        v10 = 1.0;
        v25 = v26;
      }
      while (v24 < a1);
    }
  }
}

void dgemvN_work(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  uint64_t v34;

  if (a9.f64[0] == 0.0)
  {
    if (a10.f64[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v34) = a8;
      else
        v34 = -a8;
      cblas_dscal(a1, a10.f64[0], (double *)(a7 + 8 * (((a1 - 1) * a8) & (a8 >> 63))), v34);
    }
  }
  else
  {
    dgemvN_base(a1, a2, a3, a4, a5, a6, a7, a8, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27,
      a28,
      a29,
      a30,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a31,
      a32,
      a33,
      a34);
  }
}

uint64_t Accelerate_AR_dorgtr(uint64_t a1, int *a2, __CLPK_doublereal *a3, int *a4, uint64_t a5, double *a6, int *a7, int *a8)
{
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v22;
  double v23;
  uint64_t v24;
  __CLPK_doublereal *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  int v47;
  int v48;
  int v49;
  int v50;

  v47 = 0;
  v14 = *a4;
  *a8 = 0;
  v15 = *a7;
  v16 = lsame_();
  if (!v16 && !lsame_())
  {
    v19 = -1;
    goto LABEL_35;
  }
  v17 = *a2;
  if ((v17 & 0x80000000) != 0)
  {
    v19 = -2;
    goto LABEL_35;
  }
  if (v17 <= 1)
    v18 = 1;
  else
    v18 = *a2;
  if (*a4 < v18)
  {
    v19 = -4;
LABEL_35:
    *a8 = v19;
    goto LABEL_36;
  }
  if (v17 < 3)
    v20 = 1;
  else
    v20 = v17 - 1;
  if (*a7 < v20 && v15 != -1)
  {
    v19 = -7;
    goto LABEL_35;
  }
  v19 = *a8;
  if (*a8)
  {
LABEL_36:
    v50 = -v19;
    xerbla_();
    return 0;
  }
  v22 = 32 * (v17 - 1);
  if (v17 < 3)
    v22 = 32;
  v23 = (double)v22;
  *a6 = (double)v22;
  if (v15 != -1)
  {
    if ((_DWORD)v17)
    {
      v24 = ~(_DWORD)v14;
      v25 = &a3[v24];
      if (v16)
      {
        if ((_DWORD)v17 != 1)
        {
          v26 = (uint64_t)&a3[~(_DWORD)v14 + 1];
          v27 = 8 * v14;
          v28 = 1;
          do
          {
            v29 = v28 - 1;
            if (v28 <= 1)
            {
              v31 = v28 * v14;
              v30 = v28 + 1;
            }
            else
            {
              v30 = v28 + 1;
              v31 = v28 * v14;
              v32 = (_QWORD *)(v26 + v27 * v28);
              v33 = (uint64_t *)(v26 + v27 * v30);
              do
              {
                v34 = *v33++;
                *v32++ = v34;
                --v29;
              }
              while (v29);
            }
            v25[v31 + v17] = 0.0;
            v28 = v30;
          }
          while (v30 != v17);
          bzero(&a3[v24 + 1 + (int)v17 * (int)v14], 8 * (v17 - 1));
        }
        v25[(int)v17 + (int)v17 * (int)v14] = 1.0;
        v49 = v17 - 1;
        v50 = v17 - 1;
        v48 = v17 - 1;
        Accelerate_AR_dorgql(&v50, &v49, &v48, a3, a4, a5, a6, a7, &v47);
      }
      else if ((_DWORD)v17 == 1)
      {
        *a3 = 1.0;
      }
      else
      {
        v36 = 0;
        v37 = (uint64_t)&a3[v17 + 1 + v17 * v14 + v24];
        v38 = 8 * ~v14;
        v39 = (uint64_t)&a3[v24 + 1 + (v17 - 1) * v14 + v17];
        v40 = v17;
        do
        {
          v25[v40 * v14 + 1] = 0.0;
          if (v40 < v17)
          {
            v41 = (uint64_t *)v39;
            v42 = (_QWORD *)v37;
            v43 = v36;
            do
            {
              v44 = *v41++;
              *v42++ = v44;
              --v43;
            }
            while (v43);
          }
          ++v36;
          v37 += v38;
          v39 += v38;
        }
        while (v40-- > 2);
        *a3 = 1.0;
        if ((int)v17 >= 2)
        {
          bzero(&a3[v24 + 2 + (int)v14], 8 * (v17 - 1));
          v49 = v17 - 1;
          v50 = v17 - 1;
          v48 = v17 - 1;
          Accelerate_AR_dorgqr((unsigned int *)&v50, &v49, &v48, (uint64_t)&v25[2 * (int)v14 + 2], a4, a5, a6, a7, &v47);
        }
      }
      *a6 = v23;
    }
    else
    {
      *a6 = 1.0;
    }
  }
  return 0;
}

uint64_t Accelerate_AR_sormqr(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, __CLPK_real *__c__, __CLPK_integer *a10, __CLPK_real *__work, int *a12, int *a13)
{
  __CLPK_real *v13;
  __CLPK_real *v14;
  __CLPK_integer *v15;
  __CLPK_integer *v16;
  __CLPK_integer *v17;
  __CLPK_integer *v18;
  __CLPK_integer *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int *v28;
  int *v29;
  int v30;
  int v31;
  __CLPK_integer v32;
  int v33;
  int v34;
  int v35;
  int v37;
  __CLPK_integer v38;
  __CLPK_integer *v39;
  int v40;
  float v41;
  __CLPK_integer v42;
  int v43;
  int v44;
  __CLPK_integer v45;
  int v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  BOOL v57;
  uint64_t v58;
  int v59;
  __CLPK_real *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  __CLPK_real *v67;
  __CLPK_real *v68;
  uint64_t v69;
  __CLPK_real *v70;
  int v71;
  __CLPK_integer v72;
  int *__lda;
  __CLPK_integer *__n3;
  char *v75;
  int v76;
  __CLPK_integer v77;
  uint64_t v78;
  __CLPK_integer v79;
  char __opts[2];
  uint64_t v81;
  float v82[4160];
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;

  MEMORY[0x24BDAC7A8](a1, a2);
  v68 = v13;
  v70 = v14;
  __n3 = v15;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v86 = *MEMORY[0x24BDAC8D0];
  v84 = 0;
  v85 = 0;
  v81 = 0;
  v79 = 0;
  v78 = 0;
  v77 = 0;
  __lda = v24;
  v66 = *v24;
  v72 = *a10;
  *a13 = 0;
  v25 = lsame_();
  v75 = v21;
  v26 = lsame_();
  v27 = *a12;
  if (v25)
    v28 = v19;
  else
    v28 = v17;
  if (v25)
    v29 = v17;
  else
    v29 = v19;
  v30 = *v29;
  v31 = *v28;
  if (!v25 && !lsame_())
  {
    v33 = -1;
    goto LABEL_34;
  }
  if (!v26 && !lsame_())
  {
    v33 = -2;
    goto LABEL_34;
  }
  v32 = *v19;
  if (*v19 < 0)
  {
    v33 = -3;
    goto LABEL_34;
  }
  if (*v17 < 0)
  {
    v33 = -4;
    goto LABEL_34;
  }
  v33 = -5;
  if (*__n3 < 0 || *__n3 > v31)
    goto LABEL_34;
  if (v31 <= 1)
    v34 = 1;
  else
    v34 = v31;
  if (*__lda >= v34)
  {
    if (v32 <= 1)
      v32 = 1;
    if (*a10 < v32)
    {
      v33 = -10;
      goto LABEL_34;
    }
    if (v30 <= 1)
      v35 = 1;
    else
      v35 = v30;
    if (*a12 < v35 && v27 != -1)
    {
      v33 = -12;
      goto LABEL_34;
    }
    v33 = *a13;
    if (*a13)
      goto LABEL_35;
    v83 = 0x100000001;
    v84 = v23;
    v85 = v75;
    v65 = v31;
    v37 = v35;
    s_cat(__opts, (uint64_t)&v84, (uint64_t)&v83, (unsigned int *)&c__2_3, 2uLL);
    v38 = ilaenv_(&c__1_12, "SORMQR", __opts, v19, v17, __n3, &c_n1_3);
    v39 = __lda;
    v40 = v38 >= 64 ? 64 : v38;
    v41 = (float)(v40 * v37);
    *__work = v41;
    v33 = *a13;
    if (*a13)
      goto LABEL_35;
    if (v27 == -1)
      return 0;
    if (!*v19 || !*v17 || (v42 = *__n3) == 0)
    {
      *__work = 1.0;
      return 0;
    }
    v76 = v30;
    if (v40 < 2)
      goto LABEL_66;
    if (v40 < v42)
    {
      v43 = *a12;
      if (*a12 < v40 * v30)
      {
        v83 = 0x100000001;
        v84 = v23;
        v85 = v75;
        v44 = v43 / v30;
        s_cat(__opts, (uint64_t)&v84, (uint64_t)&v83, (unsigned int *)&c__2_3, 2uLL);
        v45 = ilaenv_(&c__2_3, "SORMQR", __opts, v19, v17, __n3, &c_n1_3);
        v39 = __lda;
        if (v45 <= 2)
          v46 = 2;
        else
          v46 = v45;
        if (v44 < v46)
          goto LABEL_66;
        v40 = v44;
        v42 = *__n3;
      }
    }
    if (v40 < v42)
    {
      if ((v25 != 0) != (v26 != 0))
        v47 = 1;
      else
        v47 = (v42 - 1) / v40 * v40 + 1;
      if ((v25 != 0) == (v26 != 0))
        v42 = 1;
      v61 = v40;
      if ((v25 != 0) != (v26 != 0))
        v48 = v40;
      else
        v48 = -v40;
      v62 = v48;
      if (v25)
      {
        LODWORD(v78) = *v17;
        v63 = 0;
        v64 = 1;
      }
      else
      {
        HIDWORD(v78) = *v19;
        v63 = 1;
        v64 = 0;
      }
      v49 = v47 >= v42;
      if (v62 >= 0)
        v49 = v47 <= v42;
      if (v49)
      {
        v60 = &v68[~v66];
        v50 = 1 - v47;
        v51 = v47 * (v66 + 1);
        v59 = v62 * (v66 + 1);
        v52 = (uint64_t)&v70[v47 - 1];
        v58 = v42;
        v53 = v47 + (uint64_t)v62;
        do
        {
          v54 = v50 + *__n3;
          if (v61 < v54)
            v54 = v61;
          v79 = v54;
          LODWORD(v81) = v65 + v50;
          v71 = v51;
          v67 = &v60[v51];
          v69 = v52;
          Accelerate_AR_slarft((uint64_t)"Forward", (uint64_t)"Columnwise", (int *)&v81, &v79, (uint64_t)v67, __lda, v52, v82, &c__65_0);
          if (v25)
          {
            HIDWORD(v78) = v50 + *v19;
            v55 = v47;
            v56 = v64;
          }
          else
          {
            LODWORD(v78) = v50 + *v17;
            v56 = v47;
            v55 = v63;
          }
          v63 = v55;
          v64 = v56;
          Accelerate_AR_slarfb((uint64_t)v23, v75, (uint64_t)"Forward", (uint64_t)"Columnwise", (__CLPK_integer *)&v78 + 1, (__CLPK_integer *)&v78, &v79, v67, __lda, (int)v82, &c__65_0, &__c__[~v72 + v55 + v56 * v72], a10, (uint64_t)__work, &v76);
          v57 = v53 >= v58;
          if (v62 >= 0)
            v57 = v53 <= v58;
          v47 += v62;
          v50 -= v62;
          v51 = v71 + v59;
          v52 = v69 + 4 * v62;
          v53 += v62;
        }
        while (v57);
      }
      goto LABEL_67;
    }
LABEL_66:
    sorm2r_(v23, v75, v19, v17, __n3, v68, v39, v70, __c__, a10, __work, &v77);
LABEL_67:
    *__work = v41;
    return 0;
  }
  v33 = -7;
LABEL_34:
  *a13 = v33;
LABEL_35:
  HIDWORD(v81) = -v33;
  xerbla_();
  return 0;
}

uint64_t strsm_noPack_LUTU(uint64_t result, uint64_t __N, uint64_t a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v9;
  float v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  __int32 *v27;
  __int32 *v28;
  __int32 *v29;
  __int32 *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  float32x4_t v42;
  __int32 *v43;
  __int32 *v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int64x2_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  float32x4_t *v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t v89;
  __int32 *v90;
  __int32 *v91;
  uint64_t *v92;
  uint64_t *v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  float32_t v117;
  float32_t v118;
  uint64_t v119;

  v9 = a7;
  v119 = result;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (__N < 1)
      {
        v16 = 2;
      }
      else
      {
        v20 = *(float *)(a3 + 4 * a4);
        v21 = __X + 1;
        v16 = 2;
        v22 = __N;
        do
        {
          v23 = *v21;
          v24 = *(v21 - 1) * v9;
          *(v21 - 1) = v24;
          *v21 = (float)(v23 * v9) - (float)(v24 * v20);
          v21 += __incX;
          --v22;
        }
        while (v22);
      }
    }
    else if ((result & 1) != 0)
    {
      cblas_sscal(__N, a7, __X, __incX);
      result = v119;
      v9 = a7;
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
  }
  else if (__N < 1)
  {
    v16 = 3;
  }
  else
  {
    v11 = *(float *)(a3 + 4 * a4);
    v12 = (float *)(a3 + 8 * a4);
    v13 = *v12;
    v14 = v12[1];
    v15 = __X + 2;
    v16 = 3;
    v17 = __N;
    do
    {
      v18 = *(v15 - 2) * v9;
      v19 = (float)(*(v15 - 1) * v9) - (float)(v18 * v11);
      *(v15 - 2) = v18;
      *(v15 - 1) = v19;
      *v15 = -(float)((float)((float)(v14 * v19) + (float)(v18 * v13)) - (float)(*v15 * v9));
      v15 += __incX;
      --v17;
    }
    while (v17);
  }
  if (v16 < result)
  {
    v25 = v16;
    while (1)
    {
      if (__N >= 4)
      {
        v26 = 0;
        v27 = (__int32 *)(a3 + 4 * v25 * a4);
        v28 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
        v29 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v30 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        result = (uint64_t)(v29 + 1);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v26 * __incX];
          v32 = (float32x4_t *)&__X[(v26 | 1) * __incX];
          v33 = (float32x4_t *)&__X[(v26 | 2) * __incX];
          v34 = (float32x4_t *)&__X[(v26 | 3) * __incX];
          v35 = 0uLL;
          if ((v16 & 1) != 0)
          {
            v53.i32[0] = *v27;
            v53.i32[1] = *v28;
            v53.i32[2] = *v29;
            v53.i32[3] = *v30;
            v54 = v31->f32[0];
            v31 = (float32x4_t *)((char *)v31 + 4);
            v42 = vmlaq_n_f32((float32x4_t)0, v53, v54);
            v55 = v32->f32[0];
            v32 = (float32x4_t *)((char *)v32 + 4);
            v56 = v55;
            v57 = v33->f32[0];
            v33 = (float32x4_t *)((char *)v33 + 4);
            v38 = vmlaq_n_f32((float32x4_t)0, v53, v56);
            v37 = vmlaq_n_f32((float32x4_t)0, v53, v57);
            v58 = v34->f32[0];
            v34 = (float32x4_t *)((char *)v34 + 4);
            v39 = v25 - 1;
            v36 = vmlaq_n_f32((float32x4_t)0, v53, v58);
            v40 = v30 + 1;
            v41 = v29 + 1;
            v43 = v28 + 1;
            v44 = v27 + 1;
            if (v25 != 1)
            {
LABEL_22:
              v45 = 0;
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
              do
              {
                v49.i64[0] = *(_QWORD *)&v44[v45];
                v50.i64[0] = *(_QWORD *)&v43[v45];
                v49.i64[1] = *(_QWORD *)&v41[v45];
                v50.i64[1] = *(_QWORD *)&v40[v45];
                v51 = (float32x4_t)vtrn1q_s32(v49, v50);
                v42 = vmlaq_n_f32(v42, v51, v31->f32[v45]);
                v38 = vmlaq_n_f32(v38, v51, v32->f32[v45]);
                v37 = vmlaq_n_f32(v37, v51, v33->f32[v45]);
                v36 = vmlaq_n_f32(v36, v51, v34->f32[v45]);
                v52 = (float32x4_t)vtrn2q_s32(v49, v50);
                v46 = vmlaq_n_f32(v46, v52, v31->f32[v45 + 1]);
                v47 = vmlaq_n_f32(v47, v52, v32->f32[v45 + 1]);
                v48 = vmlaq_n_f32(v48, v52, v33->f32[v45 + 1]);
                v35 = vmlaq_n_f32(v35, v52, v34->f32[v45 + 1]);
                v45 += 2;
                v39 -= 2;
              }
              while (v39);
              v43 = (__int32 *)((char *)v43 + v45 * 4);
              v41 = (__int32 *)((char *)v41 + v45 * 4);
              v40 = (__int32 *)((char *)v40 + v45 * 4);
              v31 = (float32x4_t *)((char *)v31 + v45 * 4);
              v32 = (float32x4_t *)((char *)v32 + v45 * 4);
              v33 = (float32x4_t *)((char *)v33 + v45 * 4);
              v34 = (float32x4_t *)((char *)v34 + v45 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v36 = 0uLL;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v25;
            v40 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
            v41 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
            v42 = 0uLL;
            v43 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
            v44 = (__int32 *)(a3 + 4 * v25 * a4);
            if (v25)
              goto LABEL_22;
          }
          v48 = 0uLL;
          v47 = 0uLL;
          v46 = 0uLL;
LABEL_27:
          v59 = vaddq_f32(v48, v37);
          v60 = vmulq_n_f32(*v33, v9);
          v61 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v31, v9), vaddq_f32(v46, v42));
          v62 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v32, v9), vaddq_f32(v47, v38));
          v63 = (int64x2_t)vsubq_f32(v60, v59);
          v64 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v34, v9), vaddq_f32(v35, v36));
          v65 = (int32x4_t)vzip1q_s64(v61, v63);
          v66 = (int32x4_t)vzip1q_s64(v62, v64);
          v67 = (int32x4_t)vzip2q_s64(v61, v63);
          v68 = (int32x4_t)vzip2q_s64(v62, v64);
          v69 = (float32x4_t)vtrn1q_s32(v65, v66);
          v70 = (float32x4_t)vtrn2q_s32(v65, v66);
          v71 = (float32x4_t)vtrn1q_s32(v67, v68);
          v72 = (float32x4_t)vtrn2q_s32(v67, v68);
          v67.i32[0] = *v43;
          v73 = vmlsq_lane_f32(v70, v69, *(float32x2_t *)v67.i8, 0);
          v67.i32[0] = *v41;
          v66.i32[0] = v41[1];
          v74 = vmlsq_lane_f32(v71, v69, *(float32x2_t *)v67.i8, 0);
          v67.i32[0] = *v40;
          v60.i32[0] = v40[1];
          v75 = vmlsq_lane_f32(v74, v73, *(float32x2_t *)v66.i8, 0);
          v76 = vmlsq_lane_f32(vmlsq_lane_f32(v72, v69, *(float32x2_t *)v67.i8, 0), v73, *(float32x2_t *)v60.f32, 0);
          v67.i32[0] = v40[2];
          v77 = (int64x2_t)vmlsq_lane_f32(v76, v75, *(float32x2_t *)v67.i8, 0);
          v78 = (int32x4_t)vzip1q_s64((int64x2_t)v69, (int64x2_t)v75);
          v79 = (int32x4_t)vzip1q_s64((int64x2_t)v73, v77);
          v80 = (int32x4_t)vzip2q_s64((int64x2_t)v69, (int64x2_t)v75);
          v81 = (int32x4_t)vzip2q_s64((int64x2_t)v73, v77);
          *(int32x4_t *)v31 = vtrn1q_s32(v78, v79);
          *(int32x4_t *)v32 = vtrn2q_s32(v78, v79);
          *(int32x4_t *)v33 = vtrn1q_s32(v80, v81);
          *(int32x4_t *)v34 = vtrn2q_s32(v80, v81);
          v26 += 4;
          if (v26 >= __N - 3)
            goto LABEL_30;
        }
      }
      v26 = 0;
LABEL_30:
      if (v26 < __N)
        break;
LABEL_38:
      v25 += 4;
      if (v25 >= v119)
        return result;
    }
    v82 = (__int32 *)(a3 + 4 * v25 * a4);
    v83 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
    v84 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
    v85 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
    result = (uint64_t)(v84 + 1);
    while (1)
    {
      v86 = (float32x4_t *)&__X[v26 * __incX];
      v87 = 0uLL;
      if ((v16 & 1) != 0)
      {
        v94.i32[0] = *v82;
        v94.i32[1] = *v83;
        v94.i32[2] = *v84;
        v94.i32[3] = *v85;
        v95 = v86->i32[0];
        v86 = (float32x4_t *)((char *)v86 + 4);
        v88 = v25 - 1;
        v89 = vmlaq_n_f32((float32x4_t)0, v94, *(float *)&v95);
        v90 = v85 + 1;
        v91 = v84 + 1;
        v92 = (uint64_t *)(v83 + 1);
        v93 = (uint64_t *)(v82 + 1);
        if (v25 != 1)
        {
          do
          {
LABEL_36:
            v96 = *v93++;
            v97.i64[0] = v96;
            v98 = *v92++;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v91;
            v91 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v90;
            v90 += 2;
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v103 = (float32x4_t)vtrn1q_s32(v97, v99);
            v104 = (float32x4_t)vtrn2q_s32(v97, v99);
            v99.i32[0] = v86->i32[0];
            v105 = v86->f32[1];
            v86 = (float32x4_t *)((char *)v86 + 8);
            v89 = vmlaq_n_f32(v89, v103, *(float *)v99.i32);
            v87 = vmlaq_n_f32(v87, v104, v105);
            v88 -= 2;
          }
          while (v88);
        }
      }
      else
      {
        v88 = v25;
        v89 = 0uLL;
        v90 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        v91 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v92 = (uint64_t *)(a3 + 4 * (a4 + v25 * a4));
        v93 = (uint64_t *)(a3 + 4 * v25 * a4);
        if (v25)
          goto LABEL_36;
      }
      _S0 = vsubq_f32(vmulq_n_f32(*v86, v9), vaddq_f32(v87, v89)).u32[0];
      _S4 = *(_DWORD *)v92;
      __asm { FMLS            S3, S4, V0.S[0] }
      _S4 = *v91;
      __asm { FMLS            S2, S4, V0.S[0] }
      _S4 = *v90;
      __asm { FMLS            S1, S4, V0.S[0] }
      v117 = _S2 - (float)(_S3 * *((float *)v91 + 1));
      v118 = (float)(_S1 - (float)(_S3 * *((float *)v90 + 1))) - (float)(v117 * *((float *)v90 + 2));
      v86->i32[0] = _S0;
      v86->f32[1] = _S3;
      v86->f32[2] = v117;
      v86->f32[3] = v118;
      if (++v26 == __N)
        goto LABEL_38;
    }
  }
  return result;
}

void strsm_noPack_LUTN(uint64_t a1, uint64_t __N, float *a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float *v9;
  float v10;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  __int32 *v45;
  __int32 *v46;
  __int32 *v47;
  __int32 *v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  __int32 *v58;
  __int32 *v59;
  float32x4_t v60;
  __int32 *v61;
  __int32 *v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int64x2_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  __int32 *v103;
  __int32 *v104;
  __int32 *v105;
  __int32 *v106;
  float32x4_t *v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  __int32 *v111;
  __int32 *v112;
  uint64_t *v113;
  uint64_t *v114;
  float32x4_t v115;
  __int32 v116;
  uint64_t v117;
  int32x4_t v118;
  uint64_t v119;
  int32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float v126;
  float32x4_t v127;
  float32_t v128;
  float32_t v129;
  float32_t v130;
  uint64_t v131;
  float *v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v9 = a3;
  v10 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v22 = 2;
      }
      else
      {
        v27 = &a3[a4];
        v28 = a7 / *a3;
        v29 = *v27;
        v30 = v27[1];
        v31 = __X + 1;
        v22 = 2;
        v32 = __N;
        v33 = 1.0 / v30;
        do
        {
          v34 = *v31;
          v35 = v28 * *(v31 - 1);
          *(v31 - 1) = v35;
          *v31 = v33 * (float)((float)(v34 * v10) - (float)(v35 * v29));
          v31 += __incX;
          --v32;
        }
        while (v32);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *a3, __X, __incX);
      v10 = a7;
      v22 = 1;
    }
    else
    {
      v22 = 0;
    }
  }
  else if (__N < 1)
  {
    v22 = 3;
  }
  else
  {
    v13 = &a3[a4];
    v14 = &a3[2 * a4];
    v15 = *v14;
    v16 = v14[1];
    v17 = v10 / *a3;
    v18 = *v13;
    v19 = 1.0 / v13[1];
    v20 = v14[2];
    v21 = __X + 2;
    v22 = 3;
    v23 = __N;
    v24 = 1.0 / v20;
    do
    {
      v25 = v17 * *(v21 - 2);
      v26 = v19 * (float)((float)(*(v21 - 1) * v10) - (float)(v25 * v18));
      *(v21 - 2) = v25;
      *(v21 - 1) = v26;
      *v21 = v24 * (float)-(float)((float)((float)(v16 * v26) + (float)(v25 * v15)) - (float)(*v21 * v10));
      v21 += __incX;
      --v23;
    }
    while (v23);
  }
  if (v22 < a1)
  {
    v36 = v22;
    v131 = a1;
    v132 = v9;
    while (1)
    {
      v37 = 1.0 / v9[v36 * a4 + v36];
      v38 = (v36 + 1) * a4;
      v39 = 1.0 / v9[v36 + 1 + v38];
      v40 = (v36 + 2) * a4;
      v41 = 1.0 / v9[v36 + 2 + v40];
      v42 = (v36 + 3) * a4;
      v43 = 1.0 / v9[v36 + 3 + v42];
      v136 = v42;
      v134 = v40;
      v135 = v38;
      v44 = 0;
      if (__N >= 4)
      {
        v45 = (__int32 *)&v9[v36 * a4];
        v46 = (__int32 *)&v9[v38];
        v47 = (__int32 *)&v9[v40];
        v48 = (__int32 *)&v9[v42];
        do
        {
          v49 = (float32x4_t *)&__X[v44 * __incX];
          v50 = (float32x4_t *)&__X[(v44 | 1) * __incX];
          v51 = (float32x4_t *)&__X[(v44 | 2) * __incX];
          v52 = (float32x4_t *)&__X[(v44 | 3) * __incX];
          v53 = 0uLL;
          if ((v22 & 1) != 0)
          {
            v71.i32[0] = *v45;
            v71.i32[1] = *v46;
            v71.i32[2] = *v47;
            v71.i32[3] = *v48;
            v72 = v49->f32[0];
            v49 = (float32x4_t *)((char *)v49 + 4);
            v60 = vmlaq_n_f32((float32x4_t)0, v71, v72);
            v73 = v50->f32[0];
            v50 = (float32x4_t *)((char *)v50 + 4);
            v74 = v73;
            v75 = v51->f32[0];
            v51 = (float32x4_t *)((char *)v51 + 4);
            v56 = vmlaq_n_f32((float32x4_t)0, v71, v74);
            v55 = vmlaq_n_f32((float32x4_t)0, v71, v75);
            v76 = v52->f32[0];
            v52 = (float32x4_t *)((char *)v52 + 4);
            v57 = v36 - 1;
            v54 = vmlaq_n_f32((float32x4_t)0, v71, v76);
            v58 = v48 + 1;
            v59 = v47 + 1;
            v61 = v46 + 1;
            v62 = v45 + 1;
            if (v36 != 1)
            {
LABEL_22:
              v63 = 0;
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v67.i64[0] = *(_QWORD *)&v62[v63];
                v68.i64[0] = *(_QWORD *)&v61[v63];
                v67.i64[1] = *(_QWORD *)&v59[v63];
                v68.i64[1] = *(_QWORD *)&v58[v63];
                v69 = (float32x4_t)vtrn1q_s32(v67, v68);
                v60 = vmlaq_n_f32(v60, v69, v49->f32[v63]);
                v56 = vmlaq_n_f32(v56, v69, v50->f32[v63]);
                v55 = vmlaq_n_f32(v55, v69, v51->f32[v63]);
                v54 = vmlaq_n_f32(v54, v69, v52->f32[v63]);
                v70 = (float32x4_t)vtrn2q_s32(v67, v68);
                v64 = vmlaq_n_f32(v64, v70, v49->f32[v63 + 1]);
                v65 = vmlaq_n_f32(v65, v70, v50->f32[v63 + 1]);
                v66 = vmlaq_n_f32(v66, v70, v51->f32[v63 + 1]);
                v53 = vmlaq_n_f32(v53, v70, v52->f32[v63 + 1]);
                v63 += 2;
                v57 -= 2;
              }
              while (v57);
              v61 = (__int32 *)((char *)v61 + v63 * 4);
              v59 = (__int32 *)((char *)v59 + v63 * 4);
              v58 = (__int32 *)((char *)v58 + v63 * 4);
              v49 = (float32x4_t *)((char *)v49 + v63 * 4);
              v50 = (float32x4_t *)((char *)v50 + v63 * 4);
              v51 = (float32x4_t *)((char *)v51 + v63 * 4);
              v52 = (float32x4_t *)((char *)v52 + v63 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = v36;
            v58 = (__int32 *)&v9[v42];
            v59 = v47;
            v60 = 0uLL;
            v61 = (__int32 *)&v9[v38];
            v62 = (__int32 *)&v9[v36 * a4];
            if (v36)
              goto LABEL_22;
          }
          v66 = 0uLL;
          v65 = 0uLL;
          v64 = 0uLL;
LABEL_27:
          v77 = vaddq_f32(v66, v55);
          v78 = vmulq_n_f32(*v51, v10);
          v79 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v49, v10), vaddq_f32(v64, v60));
          v80 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v50, v10), vaddq_f32(v65, v56));
          v81 = (int64x2_t)vsubq_f32(v78, v77);
          v82 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v52, v10), vaddq_f32(v53, v54));
          v83 = (int32x4_t)vzip1q_s64(v79, v81);
          v84 = (int32x4_t)vzip1q_s64(v80, v82);
          v85 = (int32x4_t)vzip2q_s64(v79, v81);
          v86 = (int32x4_t)vzip2q_s64(v80, v82);
          v87 = (float32x4_t)vtrn1q_s32(v83, v84);
          v88 = (float32x4_t)vtrn2q_s32(v83, v84);
          v89 = (float32x4_t)vtrn1q_s32(v85, v86);
          v90 = (float32x4_t)vtrn2q_s32(v85, v86);
          v91 = vmulq_n_f32(v87, v37);
          v85.i32[0] = *v61;
          v92 = vmlsq_lane_f32(v88, v91, *(float32x2_t *)v85.i8, 0);
          v85.i32[0] = *v59;
          v84.i32[0] = v59[1];
          v93 = vmlsq_lane_f32(v89, v91, *(float32x2_t *)v85.i8, 0);
          v85.i32[0] = *v58;
          v78.i32[0] = v58[1];
          v94 = vmlsq_lane_f32(v90, v91, *(float32x2_t *)v85.i8, 0);
          v95 = vmulq_n_f32(v92, v39);
          v96 = vmlsq_lane_f32(v93, v95, *(float32x2_t *)v84.i8, 0);
          v97 = vmulq_n_f32(v96, v41);
          v96.i32[0] = v58[2];
          v98 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v94, v95, *(float32x2_t *)v78.f32, 0), v97, *(float32x2_t *)v96.f32, 0), v43);
          v99 = (int32x4_t)vzip1q_s64((int64x2_t)v91, (int64x2_t)v97);
          v100 = (int32x4_t)vzip1q_s64((int64x2_t)v95, v98);
          v101 = (int32x4_t)vzip2q_s64((int64x2_t)v91, (int64x2_t)v97);
          v102 = (int32x4_t)vzip2q_s64((int64x2_t)v95, v98);
          *(int32x4_t *)v49 = vtrn1q_s32(v99, v100);
          *(int32x4_t *)v50 = vtrn2q_s32(v99, v100);
          *(int32x4_t *)v51 = vtrn1q_s32(v101, v102);
          *(int32x4_t *)v52 = vtrn2q_s32(v101, v102);
          v44 += 4;
        }
        while (v44 < __N - 3);
      }
      v9 = v132;
      if (v44 < __N)
        break;
LABEL_36:
      v36 += 4;
      if (v36 >= v131)
        return;
    }
    v103 = (__int32 *)&v132[v36 * a4];
    v104 = (__int32 *)&v132[v38];
    v105 = (__int32 *)&v132[v134];
    v106 = (__int32 *)&v132[v136];
    while (1)
    {
      v107 = (float32x4_t *)&__X[v44 * __incX];
      v108 = 0uLL;
      if ((v22 & 1) != 0)
      {
        v115.i32[0] = *v103;
        v115.i32[1] = *v104;
        v115.i32[2] = *v105;
        v115.i32[3] = *v106;
        v116 = v107->i32[0];
        v107 = (float32x4_t *)((char *)v107 + 4);
        v109 = v36 - 1;
        v110 = vmlaq_n_f32((float32x4_t)0, v115, *(float *)&v116);
        v111 = v106 + 1;
        v112 = v105 + 1;
        v113 = (uint64_t *)(v104 + 1);
        v114 = (uint64_t *)(v103 + 1);
        if (v36 != 1)
        {
          do
          {
LABEL_34:
            v117 = *v114++;
            v118.i64[0] = v117;
            v119 = *v113++;
            v120.i64[0] = v119;
            v121 = *(_QWORD *)v112;
            v112 += 2;
            v122 = v121;
            v123 = *(_QWORD *)v111;
            v111 += 2;
            v118.i64[1] = v122;
            v120.i64[1] = v123;
            v124 = (float32x4_t)vtrn1q_s32(v118, v120);
            v125 = (float32x4_t)vtrn2q_s32(v118, v120);
            v120.i32[0] = v107->i32[0];
            v126 = v107->f32[1];
            v107 = (float32x4_t *)((char *)v107 + 8);
            v110 = vmlaq_n_f32(v110, v124, *(float *)v120.i32);
            v108 = vmlaq_n_f32(v108, v125, v126);
            v109 -= 2;
          }
          while (v109);
        }
      }
      else
      {
        v109 = v36;
        v110 = 0uLL;
        v111 = (__int32 *)&v132[v136];
        v112 = (__int32 *)&v132[v134];
        v113 = (uint64_t *)&v132[v135];
        v114 = (uint64_t *)&v132[v36 * a4];
        if (v36)
          goto LABEL_34;
      }
      v127 = vsubq_f32(vmulq_n_f32(*v107, v10), vaddq_f32(v110, v108));
      v127.f32[0] = v37 * v127.f32[0];
      v128 = v39 * (float)(v127.f32[1] - (float)(v127.f32[0] * *(float *)v113));
      v129 = v41
           * (float)((float)(v127.f32[2] - (float)(v127.f32[0] * *(float *)v112)) - (float)(v128 * *((float *)v112 + 1)));
      v130 = v43
           * (float)((float)((float)(v127.f32[3] - (float)(v127.f32[0] * *(float *)v111))
                           - (float)(v128 * *((float *)v111 + 1)))
                   - (float)(v129 * *((float *)v111 + 2)));
      v107->i32[0] = v127.i32[0];
      v107->f32[1] = v128;
      v107->f32[2] = v129;
      v107->f32[3] = v130;
      if (++v44 == __N)
        goto LABEL_36;
    }
  }
}

uint64_t strsm_noPack_LUNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x2_t *v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  float *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t *v65;
  float32x4_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int64x2_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  int *v89;
  float *v90;
  uint64_t v91;
  float *v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  float32x4_t *v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32_t v112;
  BOOL v113;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v18 = *(float *)(a3 + 4 * (result + v7 * a4) - 8);
        v19 = (float *)(a5 + 4 * v7);
        v20 = a2;
        do
        {
          v21 = *(v19 - 1);
          v22 = *v19 * a7;
          *v19 = v22;
          *(v19 - 1) = (float)(v21 * a7) - (float)(v22 * v18);
          v19 += a6;
          --v20;
        }
        while (v20);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v16 = a2;
        v17 = (float *)(a5 + 4 * v7);
        do
        {
          *v17 = *v17 * a7;
          v17 += a6;
          --v16;
        }
        while (v16);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
      v9 = *(float *)(a3 + 4 * (v7 * a4 + result - 3));
      v10 = *(float *)(a3 + 4 * (result - 3 + (result - 2) * a4));
      v11 = (float *)(a5 + 4 * v7);
      v12 = a2;
      do
      {
        v13 = *(v11 - 1);
        v14 = *v11 * a7;
        *v11 = v14;
        v15 = (float)(v13 * a7) - (float)(v14 * v8);
        *(v11 - 2) = -(float)((float)((float)(v10 * v15) + (float)(v14 * v9)) - (float)(*(v11 - 2) * a7));
        *(v11 - 1) = v15;
        v11 += a6;
        --v12;
      }
      while (v12);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v23 = v7 + 1;
    v24 = 8 * a4;
    while (1)
    {
      v25 = v23 - 4;
      if (a2 >= 4)
      {
        v26 = 0;
        v27 = a3 + 4 * v25;
        v28 = (float32x4_t *)(v27 + 4 * v23 * a4);
        v29 = result - v25;
        if (result - v25 <= 4)
          v29 = 4;
        v30 = (float32x4_t *)(v27 + 4 * (v23 - 1) * a4);
        v31 = (float32x2_t *)((char *)v30 - 4 * a4);
        while (1)
        {
          v32 = a5 + 4 * v26 * a6;
          v33 = (float *)(v32 + 4 * v23);
          v34 = a5 + 4 * (v26 | 1) * a6;
          v35 = (float *)(v34 + 4 * v23);
          v36 = a5 + 4 * (v26 | 2) * a6;
          v37 = (float *)(v36 + 4 * v23);
          v38 = a5 + 4 * (v26 | 3) * a6;
          v39 = (float *)(v38 + 4 * v23);
          v40 = 0uLL;
          if ((v29 & 1) != 0)
          {
            v59 = *v33++;
            v46 = vmlaq_n_f32((float32x4_t)0, *v28, v59);
            v60 = *v35++;
            v43 = vmlaq_n_f32((float32x4_t)0, *v28, v60);
            v61 = *v37++;
            v42 = vmlaq_n_f32((float32x4_t)0, *v28, v61);
            v62 = *v39++;
            v41 = vmlaq_n_f32((float32x4_t)0, *v28, v62);
            v44 = v29 - 5;
            v45 = (float32x4_t *)((char *)v28 + 4 * a4);
            if (v29 != 5)
            {
LABEL_24:
              v47 = 0uLL;
              v48 = 0uLL;
              v49 = 0uLL;
              do
              {
                v50 = *v33;
                v51 = v33[1];
                v33 += 2;
                v46 = vmlaq_n_f32(v46, *v45, v50);
                v52 = *v35;
                v53 = v35[1];
                v35 += 2;
                v43 = vmlaq_n_f32(v43, *v45, v52);
                v54 = *v37;
                v55 = v37[1];
                v37 += 2;
                v42 = vmlaq_n_f32(v42, *v45, v54);
                v56 = *v39;
                v57 = v39[1];
                v39 += 2;
                v41 = vmlaq_n_f32(v41, *v45, v56);
                v58 = *(float32x4_t *)((char *)v45 + 4 * a4);
                v47 = vmlaq_n_f32(v47, v58, v51);
                v48 = vmlaq_n_f32(v48, v58, v53);
                v49 = vmlaq_n_f32(v49, v58, v55);
                v45 = (float32x4_t *)((char *)v45 + v24);
                v40 = vmlaq_n_f32(v40, v58, v57);
                v44 -= 2;
              }
              while (v44);
              goto LABEL_29;
            }
          }
          else
          {
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = v29 - 4;
            v45 = v28;
            v46 = 0uLL;
            if (v29 != 4)
              goto LABEL_24;
          }
          v49 = 0uLL;
          v48 = 0uLL;
          v47 = 0uLL;
LABEL_29:
          v63 = (float32x4_t *)(v32 + 4 * v25);
          v64 = (float32x4_t *)(v34 + 4 * v25);
          v65 = (float32x4_t *)(v36 + 4 * v25);
          v66 = (float32x4_t *)(v38 + 4 * v25);
          v67 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v63, a7), vaddq_f32(v47, v46));
          v68 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v64, a7), vaddq_f32(v48, v43));
          v69 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v65, a7), vaddq_f32(v49, v42));
          v70 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v66, a7), vaddq_f32(v40, v41));
          v71 = (int32x4_t)vzip1q_s64(v67, v69);
          v72 = (int32x4_t)vzip1q_s64(v68, v70);
          v73 = (int32x4_t)vzip2q_s64(v67, v69);
          v74 = (int32x4_t)vzip2q_s64(v68, v70);
          v75 = (float32x4_t)vtrn1q_s32(v71, v72);
          v76 = (float32x4_t)vtrn2q_s32(v71, v72);
          v77 = (float32x4_t)vtrn1q_s32(v73, v74);
          v78 = (float32x4_t)vtrn2q_s32(v73, v74);
          v79 = vmlsq_laneq_f32(v77, v78, *v30, 2);
          *(float32x2_t *)v73.i8 = *v31;
          v80 = vmlsq_lane_f32(vmlsq_lane_f32(v76, v78, *(float32x2_t *)v30->f32, 1), v79, *v31, 1);
          v73.i32[0] = v31->i32[-a4];
          v81 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(vmlsq_lane_f32(v75, v78, *(float32x2_t *)v30->f32, 0), v79, *v31, 0), v80, *(float32x2_t *)v73.i8, 0);
          v82 = (int32x4_t)vzip1q_s64(v81, (int64x2_t)v79);
          v83 = (int32x4_t)vzip1q_s64((int64x2_t)v80, (int64x2_t)v78);
          v84 = (int32x4_t)vzip2q_s64(v81, (int64x2_t)v79);
          v85 = (int32x4_t)vzip2q_s64((int64x2_t)v80, (int64x2_t)v78);
          *(int32x4_t *)v63 = vtrn1q_s32(v82, v83);
          *(int32x4_t *)v64 = vtrn2q_s32(v82, v83);
          *(int32x4_t *)v65 = vtrn1q_s32(v84, v85);
          *(int32x4_t *)v66 = vtrn2q_s32(v84, v85);
          v26 += 4;
          if (v26 >= a2 - 3)
            goto LABEL_32;
        }
      }
      v26 = 0;
LABEL_32:
      if (v26 < a2)
        break;
LABEL_42:
      v113 = v23 < 5;
      v23 -= 4;
      if (v113)
        return result;
    }
    v86 = a3 + 4 * v25;
    v87 = (float32x4_t *)(v86 + 4 * v23 * a4);
    v88 = 4;
    if (result - v25 > 4)
      v88 = result - v25;
    v89 = (int *)(v86 + 4 * (v23 - 1) * a4);
    v90 = (float *)&v89[-a4];
    while (1)
    {
      v91 = a5 + 4 * v26 * a6;
      v92 = (float *)(v91 + 4 * v23);
      v93 = 0uLL;
      if ((v88 & 1) != 0)
      {
        v97 = *v92++;
        v94 = vmlaq_n_f32((float32x4_t)0, *v87, v97);
        v95 = v88 - 5;
        v96 = (float32x4_t *)((char *)v87 + 4 * a4);
        if (v88 != 5)
        {
          do
          {
LABEL_40:
            v98 = *v92;
            v99 = v92[1];
            v92 += 2;
            v94 = vmlaq_n_f32(v94, *v96, v98);
            v93 = vmlaq_n_f32(v93, *(float32x4_t *)((char *)v96 + 4 * a4), v99);
            v96 = (float32x4_t *)((char *)v96 + v24);
            v95 -= 2;
          }
          while (v95);
        }
      }
      else
      {
        v94 = 0uLL;
        v95 = v88 - 4;
        v96 = v87;
        if (v88 != 4)
          goto LABEL_40;
      }
      v100 = (float32x4_t *)(v91 + 4 * v25);
      _Q1 = vsubq_f32(vmulq_n_f32(*v100, a7), vaddq_f32(v94, v93));
      _S4 = v89[2];
      __asm { FMLS            S2, S4, V1.S[3] }
      _S5 = *v89;
      _S4 = v89[1];
      __asm
      {
        FMLS            S3, S4, V1.S[3]
        FMLS            S4, S5, V1.S[3]
      }
      v112 = _S3 - (float)(_S2 * v90[1]);
      v100->f32[0] = (float)(_S4 - (float)(_S2 * *(float *)&v89[-a4])) - (float)(v112 * v90[-a4]);
      v100->f32[1] = v112;
      v100->f32[2] = _S2;
      v100->i32[3] = _Q1.i32[3];
      if (++v26 == a2)
        goto LABEL_42;
    }
  }
  return result;
}

uint64_t strsm_noPack_LUNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x2_t *v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x4_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float32x4_t *v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int64x2_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  float32x4_t *v101;
  uint64_t v102;
  float *v103;
  float *v104;
  uint64_t v105;
  float *v106;
  float32x4_t v107;
  float32x4_t *v108;
  uint64_t v109;
  float32x4_t v110;
  float v111;
  float v112;
  float v113;
  float32x4_t *v114;
  float32x4_t v115;
  float v116;
  float32_t v117;
  float32_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v23 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
        v24 = a7 / *(float *)(a3 + 4 * (v7 * a4 + v7));
        v25 = (float *)(a5 + 4 * v7);
        v26 = a2;
        v27 = 1.0 / *(float *)(a3 + 4 * (result - 2 + (result - 2) * a4));
        do
        {
          v28 = *(v25 - 1);
          v29 = v24 * *v25;
          *v25 = v29;
          *(v25 - 1) = v27 * (float)((float)(v28 * a7) - (float)(v29 * v23));
          v25 += a6;
          --v26;
        }
        while (v26);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v20 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v21 = (float *)(a5 + 4 * v7);
        v22 = a2;
        do
        {
          *v21 = v20 * *v21;
          v21 += a6;
          --v22;
        }
        while (v22);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
      v9 = *(float *)(a3 + 4 * (v7 * a4 + result - 3));
      v10 = (result - 2) * a4;
      v11 = *(float *)(a3 + 4 * (v10 + result - 3));
      v12 = a7 / *(float *)(a3 + 4 * (v7 * a4 + v7));
      v13 = 1.0 / *(float *)(a3 + 4 * (result - 2 + v10));
      v14 = (float *)(a5 + 4 * v7);
      v15 = a2;
      v16 = 1.0 / *(float *)(a3 + 4 * (result - 3 + (result - 3) * a4));
      do
      {
        v17 = *(v14 - 1);
        v18 = v12 * *v14;
        *v14 = v18;
        v19 = v13 * (float)((float)(v17 * a7) - (float)(v18 * v8));
        *(v14 - 2) = v16 * (float)-(float)((float)((float)(v11 * v19) + (float)(v18 * v9)) - (float)(*(v14 - 2) * a7));
        *(v14 - 1) = v19;
        v14 += a6;
        --v15;
      }
      while (v15);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v30 = v7 + 1;
    v120 = a4 + 1;
    v121 = result;
    v31 = -a4;
    v32 = 8 * a4;
    v33 = 4 * a4;
    v122 = a3;
    v123 = a4;
    while (1)
    {
      v34 = v30 - 4;
      v35 = 1.0 / *(float *)(a3 + 4 * (v30 - 4) * v120);
      v36 = 1.0 / *(float *)(a3 + 4 * (v30 - 3) * v120);
      v37 = 1.0 / *(float *)(a3 + 4 * (v30 - 2) * v120);
      v38 = (v30 - 1) * a4;
      v39 = 1.0 / *(float *)(a3 + 4 * (v30 - 1 + v38));
      v124 = v38;
      v40 = 0;
      if (a2 >= 4)
      {
        v41 = a3 + 4 * v34;
        v42 = (float32x4_t *)(v41 + 4 * v30 * a4);
        if (result - v34 <= 4)
          v43 = 4;
        else
          v43 = result - v34;
        v44 = (float32x4_t *)(v41 + 4 * v38);
        v45 = (float32x2_t *)&v44->f32[v31];
        do
        {
          v46 = a5 + 4 * v40 * a6;
          v47 = (float *)(v46 + 4 * v30);
          v48 = a5 + 4 * (v40 | 1) * a6;
          v49 = (float *)(v48 + 4 * v30);
          v50 = a5 + 4 * (v40 | 2) * a6;
          v51 = (float *)(v50 + 4 * v30);
          v52 = a5 + 4 * (v40 | 3) * a6;
          v53 = (float *)(v52 + 4 * v30);
          v54 = 0uLL;
          if ((v43 & 1) != 0)
          {
            v73 = *v47++;
            v60 = vmlaq_n_f32((float32x4_t)0, *v42, v73);
            v74 = *v49++;
            v57 = vmlaq_n_f32((float32x4_t)0, *v42, v74);
            v75 = *v51++;
            v56 = vmlaq_n_f32((float32x4_t)0, *v42, v75);
            v76 = *v53++;
            v55 = vmlaq_n_f32((float32x4_t)0, *v42, v76);
            v58 = v43 - 5;
            v59 = (float32x4_t *)((char *)v42 + 4 * a4);
            if (v43 != 5)
            {
LABEL_25:
              v61 = 0uLL;
              v62 = 0uLL;
              v63 = 0uLL;
              do
              {
                v64 = *v47;
                v65 = v47[1];
                v47 += 2;
                v60 = vmlaq_n_f32(v60, *v59, v64);
                v66 = *v49;
                v67 = v49[1];
                v49 += 2;
                v57 = vmlaq_n_f32(v57, *v59, v66);
                v68 = *v51;
                v69 = v51[1];
                v51 += 2;
                v56 = vmlaq_n_f32(v56, *v59, v68);
                v70 = *v53;
                v71 = v53[1];
                v53 += 2;
                v55 = vmlaq_n_f32(v55, *v59, v70);
                v72 = *(float32x4_t *)((char *)v59 + v33);
                v61 = vmlaq_n_f32(v61, v72, v65);
                v62 = vmlaq_n_f32(v62, v72, v67);
                v63 = vmlaq_n_f32(v63, v72, v69);
                v59 = (float32x4_t *)((char *)v59 + v32);
                v54 = vmlaq_n_f32(v54, v72, v71);
                v58 -= 2;
              }
              while (v58);
              goto LABEL_30;
            }
          }
          else
          {
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = 0uLL;
            v58 = v43 - 4;
            v59 = v42;
            v60 = 0uLL;
            if (v43 != 4)
              goto LABEL_25;
          }
          v63 = 0uLL;
          v62 = 0uLL;
          v61 = 0uLL;
LABEL_30:
          v77 = (float32x4_t *)(v46 + 4 * v34);
          v78 = (float32x4_t *)(v48 + 4 * v34);
          v79 = (float32x4_t *)(v50 + 4 * v34);
          v80 = (float32x4_t *)(v52 + 4 * v34);
          v81 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v77, a7), vaddq_f32(v61, v60));
          v82 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v78, a7), vaddq_f32(v62, v57));
          v83 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v79, a7), vaddq_f32(v63, v56));
          v84 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v80, a7), vaddq_f32(v54, v55));
          v85 = (int32x4_t)vzip1q_s64(v81, v83);
          v86 = (int32x4_t)vzip1q_s64(v82, v84);
          v87 = (int32x4_t)vzip2q_s64(v81, v83);
          v88 = (int32x4_t)vzip2q_s64(v82, v84);
          v89 = (float32x4_t)vtrn1q_s32(v85, v86);
          v90 = (float32x4_t)vtrn2q_s32(v85, v86);
          v91 = (float32x4_t)vtrn1q_s32(v87, v88);
          v92 = vmulq_n_f32((float32x4_t)vtrn2q_s32(v87, v88), v39);
          v93 = vmulq_n_f32(vmlsq_laneq_f32(v91, v92, *v44, 2), v37);
          *(float32x2_t *)v91.f32 = *v45;
          v94 = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v90, v92, *(float32x2_t *)v44->f32, 1), v93, *v45, 1), v36);
          v91.i32[0] = v45->i32[v31];
          v95 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(vmlsq_lane_f32(v89, v92, *(float32x2_t *)v44->f32, 0), v93, *v45, 0), v94, *(float32x2_t *)v91.f32, 0), v35);
          v96 = (int32x4_t)vzip1q_s64(v95, (int64x2_t)v93);
          v97 = (int32x4_t)vzip1q_s64((int64x2_t)v94, (int64x2_t)v92);
          v98 = (int32x4_t)vzip2q_s64(v95, (int64x2_t)v93);
          v99 = (int32x4_t)vzip2q_s64((int64x2_t)v94, (int64x2_t)v92);
          *(int32x4_t *)v77 = vtrn1q_s32(v96, v97);
          *(int32x4_t *)v78 = vtrn2q_s32(v96, v97);
          *(int32x4_t *)v79 = vtrn1q_s32(v98, v99);
          *(int32x4_t *)v80 = vtrn2q_s32(v98, v99);
          v40 += 4;
        }
        while (v40 < a2 - 3);
      }
      a3 = v122;
      a4 = v123;
      result = v121;
      if (v40 < a2)
        break;
LABEL_41:
      v119 = v30 < 5;
      v30 -= 4;
      if (v119)
        return result;
    }
    v100 = v122 + 4 * v34;
    v101 = (float32x4_t *)(v100 + 4 * v30 * v123);
    v102 = v121 - v34;
    if (v121 - v34 <= 4)
      v102 = 4;
    v103 = (float *)(v100 + 4 * v124);
    v104 = &v103[v31];
    while (1)
    {
      v105 = a5 + 4 * v40 * a6;
      v106 = (float *)(v105 + 4 * v30);
      v107 = 0uLL;
      if ((v102 & 1) != 0)
      {
        v111 = *v106++;
        v110 = vmlaq_n_f32((float32x4_t)0, *v101, v111);
        v108 = (float32x4_t *)((char *)v101 + 4 * v123);
        v109 = v102 - 5;
        if (v102 != 5)
        {
          do
          {
LABEL_39:
            v112 = *v106;
            v113 = v106[1];
            v106 += 2;
            v110 = vmlaq_n_f32(v110, *v108, v112);
            v107 = vmlaq_n_f32(v107, *(float32x4_t *)((char *)v108 + v33), v113);
            v108 = (float32x4_t *)((char *)v108 + v32);
            v109 -= 2;
          }
          while (v109);
        }
      }
      else
      {
        v108 = v101;
        v109 = v102 - 4;
        v110 = 0uLL;
        if (v102 != 4)
          goto LABEL_39;
      }
      v114 = (float32x4_t *)(v105 + 4 * v34);
      v115 = vsubq_f32(vmulq_n_f32(*v114, a7), vaddq_f32(v110, v107));
      v116 = vmuls_lane_f32(v39, v115, 3);
      v117 = v37 * (float)(v115.f32[2] - (float)(v116 * v103[2]));
      v118 = v36 * (float)((float)(v115.f32[1] - (float)(v116 * v103[1])) - (float)(v117 * v104[1]));
      v114->f32[0] = v35
                   * (float)((float)((float)(v115.f32[0] - (float)(v116 * *v103)) - (float)(v117 * v103[v31]))
                           - (float)(v118 * v104[v31]));
      v114->f32[1] = v118;
      v114->f32[2] = v117;
      v114->f32[3] = v116;
      if (++v40 == a2)
        goto LABEL_41;
    }
  }
  return result;
}

uint64_t Accelerate_AR_dlatrd(uint64_t a1, int *a2, int *a3, double *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  int *v10;
  double *v11;
  double *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __CLPK_integer v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double *v24;
  double *y;
  int v26;
  double v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  double *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double *v37;
  __CLPK_integer v38;
  uint64_t v39;
  __CLPK_integer v40;
  double *v41;
  __CLPK_integer v42;
  __CLPK_integer v43;
  double *v44;
  double v45;
  double *v46;
  int v47;
  BOOL v48;
  int *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  double *v66;
  double *v67;
  double da;
  int v70;
  int v71;
  __CLPK_integer __n[3];

  if (*a2 >= 1)
  {
    v10 = a2;
    v11 = (double *)*a5;
    v12 = &a4[~(_DWORD)v11];
    v54 = a6 - 8;
    v13 = *a9;
    v14 = a8 + 8 * ~*a9;
    v71 = 0;
    da = 0.0;
    v53 = a7 - 8;
    if (lsame_())
    {
      v15 = *v10;
      v16 = *a3;
      v70 = *v10;
      if (v16 >= 1)
      {
        v57 = v15 - v16;
        v55 = v10;
        v66 = &a4[~(_DWORD)v11];
        v64 = v13;
        v62 = v14;
        v50 = a3;
        do
        {
          v17 = v15 - *v10 + *a3;
          v60 = v17;
          if (v15 < *v10)
          {
            __n[0] = *v10 - v15;
            v18 = v13 + v13 * v17;
            Accelerate_AR_dgemv("No transpose", &v70, __n, &c_b5, &v12[v15 * (int)v11 + 1 + (int)v11], a5, v14 + 8 * (v18 + v15), a9, &c_b6, &v12[v15 * (int)v11 + 1], &c__1_13);
            __n[0] = *v10 - v70;
            Accelerate_AR_dgemv("No transpose", &v70, __n, &c_b5, v14 + 8 * (v18 + 1), a9, &v12[(int)v11 + v70 + v70 * (int)v11], a5, &c_b6, &v12[v70 * (int)v11 + 1], &c__1_13);
            v15 = v70;
          }
          if (v15 < 2)
          {
            v10 = v55;
            v12 = v66;
          }
          else
          {
            __n[0] = v15 - 1;
            v12 = v66;
            dlarfg_(__n, &v66[__n[0] + v15 * (int)v11], &v66[v15 * (int)v11 + 1], &c__1_13, (__CLPK_doublereal *)(v53 + 8 * __n[0]));
            v19 = v70 - 1;
            v20 = v70 * (_DWORD)v11;
            v21 = v70 - 1 + v70 * (_DWORD)v11;
            *(double *)(v54 + 8 * v19) = v66[v21];
            v66[v21] = 1.0;
            __n[0] = v19;
            v22 = v60 * v13;
            v23 = v60 * v13 + 1;
            v24 = v11;
            y = (double *)(v14 + 8 * v23);
            dsymv_("Upper", __n, &c_b6, a4, a5, &v66[v20 + 1], &c__1_13, &c_b16, y, &c__1_13);
            v26 = v70;
            v10 = v55;
            if (*v55 > v70)
            {
              v71 = *v55 - v70;
              __n[0] = v70 - 1;
              v61 = (double *)(v62 + 8 * (v64 + v64 * v60 + 1));
              Accelerate_AR_dgemv("Transpose", __n, &v71, &c_b6, v61, a9, &v66[v70 * (int)v24 + 1], &c__1_13, &c_b16, v62 + 8 * (v23 + v70), &c__1_13);
              v71 = *v55 - v70;
              __n[0] = v70 - 1;
              Accelerate_AR_dgemv("No transpose", __n, &v71, &c_b5, &v66[(v70 + 1) * (int)v24 + 1], a5, v62 + 8 * (v70 + 1 + v22), &c__1_13, &c_b6, y, &c__1_13);
              v71 = *v55 - v70;
              __n[0] = v70 - 1;
              Accelerate_AR_dgemv("Transpose", __n, &v71, &c_b6, &v66[(v70 + 1) * (int)v24 + 1], a5, &v66[v70 * (int)v24 + 1], &c__1_13, &c_b16, v62 + 8 * (v70 + 1 + v22), &c__1_13);
              v71 = *v55 - v70;
              __n[0] = v70 - 1;
              Accelerate_AR_dgemv("No transpose", __n, &v71, &c_b5, v61, a9, v62 + 8 * (v23 + v70), &c__1_13, &c_b6, y, &c__1_13);
              v26 = v70;
            }
            __n[0] = v26 - 1;
            dscal_(__n, (double *)(v53 + 8 * (v26 - 1)), y, &c__1_13);
            __n[0] = v70 - 1;
            v27 = *(double *)(v53 + 8 * (v70 - 1)) * -0.5;
            da = v27 * ddot_(__n, y, &c__1_13, &v66[v70 * (int)v24 + 1], &c__1_13);
            __n[0] = v70 - 1;
            daxpy_(__n, &da, &v66[v70 * (int)v24 + 1], &c__1_13, y, &c__1_13);
            v15 = v70;
            v11 = v24;
            v13 = v64;
            v14 = v62;
            a3 = v50;
          }
          v70 = --v15;
        }
        while (v15 > v57);
      }
    }
    else
    {
      v56 = *a3;
      if (*a3 >= 1)
      {
        v28 = (_DWORD)v11 + 1;
        v29 = 1;
        v58 = (int)v11;
        v59 = (_DWORD)v11 + 1;
        v65 = v13;
        v63 = v14;
        v67 = &a4[~(_DWORD)v11];
        do
        {
          v30 = *v10 - v29 + 1;
          v71 = v29 - 1;
          __n[0] = v30;
          v31 = v14 + 8 * (v29 + v13);
          v32 = &v12[v29 * v28];
          Accelerate_AR_dgemv("No transpose", __n, &v71, &c_b5, &v12[v29 + (int)v11], a5, v31, a9, &c_b6, v32, &c__1_13);
          v33 = *v10 - v29 + 1;
          v71 = v29 - 1;
          __n[0] = v33;
          Accelerate_AR_dgemv("No transpose", __n, &v71, &c_b5, v31, a9, &v12[v29 + (int)v11], a5, &c_b6, v32, &c__1_13);
          v34 = *v10;
          if (*v10 <= v29)
          {
            v47 = v29 + 1;
            v13 = v65;
            v14 = v63;
            LODWORD(v11) = v58;
            v28 = v59;
          }
          else
          {
            __n[0] = *v10 - v29;
            v71 = v29 + 2;
            v35 = v29 + 1;
            v36 = v29 + 1 + v29 * v58;
            v37 = &v67[v36];
            if (v29 + 2 < v34)
              v34 = v29 + 2;
            dlarfg_(__n, &v67[v36], &v67[v34 + v29 * v58], &c__1_13, (__CLPK_doublereal *)(v53 + 8 * v29));
            *(double *)(v54 + 8 * v29) = *v37;
            *v37 = 1.0;
            __n[0] = *v10 - v29;
            dsymv_("Lower", __n, &c_b6, &v67[v35 * v59], a5, v37, &c__1_13, &c_b16, (double *)(v63 + 8 * (v35 + v29 * v65)), &c__1_13);
            v38 = *v10 - v29;
            v71 = v29 - 1;
            __n[0] = v38;
            v51 = v63 + 8 * (v35 + v65);
            v39 = v63 + 8 * (v29 * v65 + 1);
            Accelerate_AR_dgemv("Transpose", __n, &v71, &c_b6, v51, a9, v37, &c__1_13, &c_b16, v39, &c__1_13);
            v40 = *v10 - v29;
            v71 = v29 - 1;
            __n[0] = v40;
            v41 = &v67[v35 + v58];
            v11 = (double *)(v63 + 8 * (v35 + v29 * v65));
            Accelerate_AR_dgemv("No transpose", __n, &v71, &c_b5, v41, a5, v39, &c__1_13, &c_b6, v11, &c__1_13);
            v42 = *v10 - v29;
            v71 = v29 - 1;
            __n[0] = v42;
            Accelerate_AR_dgemv("Transpose", __n, &v71, &c_b6, v41, a5, v37, &c__1_13, &c_b16, v39, &c__1_13);
            v43 = *v10 - v29;
            v71 = v29 - 1;
            __n[0] = v43;
            Accelerate_AR_dgemv("No transpose", __n, &v71, &c_b5, v51, a9, v39, &c__1_13, &c_b6, v11, &c__1_13);
            __n[0] = *v10 - v29;
            v44 = (double *)(v53 + 8 * v29);
            dscal_(__n, v44, v11, &c__1_13);
            __n[0] = *v10 - v29;
            v45 = *v44 * -0.5;
            da = v45 * ddot_(__n, v11, &c__1_13, v37, &c__1_13);
            __n[0] = *v10 - v29;
            v46 = v11;
            LODWORD(v11) = v58;
            daxpy_(__n, &da, v37, &c__1_13, v46, &c__1_13);
            v47 = v29 + 1;
            v13 = v65;
            v14 = v63;
            v28 = v59;
          }
          v12 = v67;
          v48 = v29 < v56;
          v29 = v47;
        }
        while (v48);
      }
    }
  }
  return 0;
}

uint64_t sgePack_B_NoTran(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4, float32x4_t *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  int32x4_t v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t v26;

  if (result >= 1)
  {
    v8 = 4 * a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = (uint64_t *)((char *)v10 + v8);
        v12 = &v10[a4];
        v13 = (uint64_t *)((char *)v10 + 12 * a4);
        v14 = result - 1;
        v15 = v10;
        if (result != 1)
        {
          do
          {
            a8.i64[0] = *v15++;
            v16.i64[0] = *v11++;
            v17 = *v12++;
            v18 = *v13++;
            a8.i64[1] = v17;
            v16.i64[1] = v18;
            *a5 = vmulq_n_f32((float32x4_t)vtrn1q_s32((int32x4_t)a8, v16), a6);
            v19 = a5 + 1;
            *v19 = vmulq_n_f32((float32x4_t)vtrn2q_s32((int32x4_t)a8, v16), a6);
            a5 = v19 + 1;
            v20 = v14 <= 2;
            v14 -= 2;
          }
          while (!v20);
        }
        if (!v14)
        {
          v21.i32[0] = *(_DWORD *)v15;
          v21.i32[1] = *(_DWORD *)v11;
          v21.i32[2] = *(_DWORD *)v12;
          v21.i32[3] = *(_DWORD *)v13;
          a8 = vmulq_n_f32(v21, a6);
          *a5++ = a8;
        }
        v9 += 4;
        v10 += 2 * a4;
      }
      while (v9 < a2 - 3);
    }
    v22 = a2 - v9;
    if (a2 > v9)
    {
      v23 = (float32x4_t *)((char *)a3 + 4 * v9 * a4);
      do
      {
        v24 = v23;
        v25 = result - 3;
        if (result > 3)
        {
          do
          {
            v26 = *v24++;
            a8 = vmulq_n_f32(v26, a6);
            *a5++ = a8;
            v20 = v25 <= 4;
            v25 -= 4;
          }
          while (!v20);
        }
        if (v25 != -2)
        {
          if (v25)
          {
            if (v25 != -1)
              goto LABEL_24;
          }
          else
          {
            a8.i32[2] = v24->i32[2];
          }
          a8.i32[1] = v24->i32[1];
        }
        a8.i32[0] = v24->i32[0];
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = a8;
LABEL_24:
        v23 = (float32x4_t *)((char *)v23 + v8);
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t sgePack_B_Tran(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, __n128 *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  __int32 *v15;
  __int32 *v16;
  uint64_t v17;
  __int32 *v18;
  float32x4_t v19;
  __int32 *v20;
  __int32 v21;
  __int32 *v22;
  __int32 v23;
  __int32 v24;
  BOOL v25;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v10;
        v12 = result;
        do
        {
          v13 = *v11;
          v11 = (float32x4_t *)((char *)v11 + v8 * 4);
          a8 = vmulq_n_f32(v13, a6);
          *a5++ = (__n128)a8;
          --v12;
        }
        while (v12);
        v9 += 4;
        ++v10;
      }
      while (v9 < a2 - 3);
    }
    v14 = a2 - v9;
    if (a2 > v9)
    {
      v15 = (__int32 *)&a3[(unint64_t)v9 / 4];
      do
      {
        v16 = v15;
        v17 = result - 3;
        if (result > 3)
        {
          do
          {
            v19.i32[0] = *v16;
            v18 = &v16[v8];
            v21 = *v18;
            v20 = &v18[v8];
            v19.i32[1] = v21;
            v23 = *v20;
            v22 = &v20[v8];
            v19.i32[2] = v23;
            v24 = *v22;
            v16 = &v22[v8];
            v19.i32[3] = v24;
            a8 = vmulq_n_f32(v19, a6);
            *a5++ = (__n128)a8;
            v25 = v17 <= 4;
            v17 -= 4;
          }
          while (!v25);
        }
        if (v17 != -2)
        {
          if (v17)
          {
            if (v17 != -1)
              goto LABEL_21;
          }
          else
          {
            a8.i32[2] = v16[2 * a4];
          }
          a8.i32[1] = v16[a4];
        }
        a8.i32[0] = *v16;
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = (__n128)a8;
LABEL_21:
        ++v15;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t sgePack_A_NoTran_Unaligned(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _DWORD *i;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  v5 = a4;
  if (result < 8)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (__int128 *)(a3 + 16);
    do
    {
      v8 = a2;
      v9 = v7;
      if (a2 >= 1)
      {
        do
        {
          v10 = *v9;
          *(_OWORD *)a5 = *(v9 - 1);
          *(_OWORD *)(a5 + 16) = v10;
          a5 += 32;
          v9 = (__int128 *)((char *)v9 + v5 * 4);
          --v8;
        }
        while (v8);
      }
      v6 += 8;
      v7 += 2;
    }
    while (v6 < result - 7);
  }
  if (v6 < result)
  {
    if (a2 <= 0)
      v11 = -(-a2 & 3);
    else
      v11 = a2 & 3;
    for (i = (_DWORD *)(a3 + 4 * v6); ; ++i)
    {
      if (a2 < 4)
      {
        v21 = (_DWORD *)(a3 + 4 * v6);
      }
      else
      {
        v13 = 0;
        v14 = i;
        do
        {
          v15 = v14;
          LODWORD(v16) = *v14;
          v17 = &v14[v5];
          HIDWORD(v16) = *v17;
          v18 = &v17[v5];
          LODWORD(v19) = *v18;
          v20 = &v18[v5];
          HIDWORD(v19) = *v20;
          v14 = &v20[v5];
          *(_QWORD *)a5 = v16;
          *(_QWORD *)(a5 + 8) = v19;
          a5 += 16;
          v13 += 4;
        }
        while (v13 < a2 - 3);
        v21 = &v15[4 * a4];
      }
      if (v11 == 1)
        goto LABEL_23;
      if (v11 == 2)
        goto LABEL_22;
      if (v11 == 3)
        break;
LABEL_24:
      if (++v6 == result)
        return result;
    }
    *(_DWORD *)(a5 + 8) = v21[2 * a4];
LABEL_22:
    *(_DWORD *)(a5 + 4) = v21[a4];
LABEL_23:
    *(_DWORD *)a5 = *v21;
    a5 += 16;
    goto LABEL_24;
  }
  return result;
}

uint64_t sgePack_A_NoTran(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 7) != 0)
    return sgePack_A_NoTran_Unaligned(result, a2, a3, a4, a5);
  else
    return sgePack_A_NoTran_Aligned(result, a2, (__int128 *)a3, a4, (_OWORD *)a5);
}

uint64_t sgePack_A_Tran_Unaligned(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  BOOL v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  int32x4_t *v29;
  uint64_t v30;
  int32x4_t v31;

  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (uint64_t *)((char *)a3 + 28 * a4);
    v7 = &a3[3 * a4];
    v8 = 8 * a4 - a2;
    v9 = a3;
    v10 = (uint64_t *)((char *)a3 + 20 * a4);
    v11 = &a3[2 * a4];
    v12 = (uint64_t *)((char *)a3 + 12 * a4);
    v13 = &a3[a4];
    v14 = (uint64_t *)((char *)a3 + 4 * a4);
    do
    {
      v15 = a2 - 1;
      if (a2 > 1)
      {
        do
        {
          v16.i64[0] = *v9++;
          v17.i64[0] = *v14++;
          v18 = *v13++;
          v19 = *v12++;
          v20.i64[0] = *v11++;
          v21.i64[0] = *v10++;
          v22 = *v7++;
          v23 = *v6++;
          v16.i64[1] = v18;
          v17.i64[1] = v19;
          v20.i64[1] = v22;
          v21.i64[1] = v23;
          *a5 = vtrn1q_s32(v16, v17);
          a5[1] = vtrn1q_s32(v20, v21);
          v24 = a5 + 2;
          *v24 = vtrn2q_s32(v16, v17);
          v24[1] = vtrn2q_s32(v20, v21);
          a5 = v24 + 2;
          v25 = v15 <= 2;
          v15 -= 2;
        }
        while (!v25);
      }
      if (!v15)
      {
        v26.i32[0] = *(_DWORD *)v9;
        v9 = (uint64_t *)((char *)v9 + 4);
        v26.i32[1] = *(_DWORD *)v14;
        v14 = (uint64_t *)((char *)v14 + 4);
        v26.i32[2] = *(_DWORD *)v13;
        v13 = (uint64_t *)((char *)v13 + 4);
        v26.i32[3] = *(_DWORD *)v12;
        v12 = (uint64_t *)((char *)v12 + 4);
        v27.i32[0] = *(_DWORD *)v11;
        v11 = (uint64_t *)((char *)v11 + 4);
        v27.i32[1] = *(_DWORD *)v10;
        v10 = (uint64_t *)((char *)v10 + 4);
        v27.i32[2] = *(_DWORD *)v7;
        v7 = (uint64_t *)((char *)v7 + 4);
        v27.i32[3] = *(_DWORD *)v6;
        v6 = (uint64_t *)((char *)v6 + 4);
        *a5 = v26;
        a5[1] = v27;
        a5 += 2;
      }
      v9 = (uint64_t *)((char *)v9 + 4 * v8);
      v14 = (uint64_t *)((char *)v14 + 4 * v8);
      v13 = (uint64_t *)((char *)v13 + 4 * v8);
      v12 = (uint64_t *)((char *)v12 + 4 * v8);
      v11 = (uint64_t *)((char *)v11 + 4 * v8);
      v10 = (uint64_t *)((char *)v10 + 4 * v8);
      v7 = (uint64_t *)((char *)v7 + 4 * v8);
      v5 += 8;
      v6 = (uint64_t *)((char *)v6 + 4 * v8);
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    if (a2 <= 0)
      v28 = -(-a2 & 3);
    else
      v28 = a2 & 3;
    while (1)
    {
      v29 = (int32x4_t *)((char *)a3 + 4 * v5 * a4);
      if (a2 >= 4)
      {
        v30 = 0;
        do
        {
          v31 = *v29++;
          *a5++ = v31;
          v30 += 4;
        }
        while (v30 < a2 - 3);
      }
      if (v28 == 1)
        goto LABEL_23;
      if (v28 == 2)
        goto LABEL_22;
      if (v28 == 3)
        break;
LABEL_24:
      if (++v5 == result)
        return result;
    }
    a5->i32[2] = v29->i32[2];
LABEL_22:
    a5->i32[1] = v29->i32[1];
LABEL_23:
    a5->i32[0] = v29->i32[0];
    ++a5;
    goto LABEL_24;
  }
  return result;
}

uint64_t sgePack_A_Tran(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  if ((result & 7) != 0)
    return sgePack_A_Tran_Unaligned(result, a2, a3, a4, a5);
  else
    return sgePack_A_Tran_Aligned(result, a2, a3, a4, a5);
}

void dtrmm_noPack_RLNN(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t __incX, double a7)
{
  float64x2_t *v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t v25;
  const double *v26;
  uint64_t v27;
  double v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double *v36;
  float64x2_t v37;
  double *v38;
  float64x2_t v39;
  double *v40;
  float64x2_t v41;
  double *v42;
  double v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  float64x2_t *v75;
  float64x2_t *v76;
  double *v77;
  double *v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double *f64;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v8 = a5;
  v9 = a4;
  v12 = 0;
  if (a1 >= 4)
  {
    v13 = a1 - 3;
    v14 = __N - 3;
    v15 = 8 * __incX;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v98 = __incX + 1;
    v94 = (2 * __incX) | 1;
    v95 = 2 * __incX;
    v97 = __incX + 2;
    v93 = 2 * __incX + 2;
    v96 = __incX + 3;
    v92 = 2 * __incX + 3;
    v17 = a4 + 1;
    v18 = 24 * a4 + 24;
    v19 = 32 * a4 + 32;
    v20 = 16 * a4 + 16;
    v21 = 8 * a4 + 8;
    while (1)
    {
      if (__N < 4)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0;
        v24 = a5;
        v25 = __N;
        v26 = a3;
        do
        {
          v27 = v25 - 4;
          v28 = *(const double *)((char *)v26 + v21);
          v30 = *(float64x2_t *)((char *)v24 + 8 * __incX);
          v31 = *(float64x2_t *)((char *)v24 + v15 + 16);
          v29 = (float64x2_t *)((char *)v24 + v15 + v15);
          v32 = vmulq_n_f64(v30, v28);
          v33 = vmulq_n_f64(v31, v28);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(*v24, *v26), v30, *(float64x2_t *)v26, 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v24[1], *v26), v31, *(float64x2_t *)v26, 1);
          v37 = *(float64x2_t *)(v26 + 2);
          v36 = (double *)(v26 + 4);
          v39 = *(float64x2_t *)((char *)v26 + v21 + 8);
          v38 = (double *)((char *)v26 + v21 + 24);
          v41 = *(float64x2_t *)((char *)v26 + v20);
          v40 = (double *)((char *)v26 + v20 + 16);
          v43 = *(const double *)((char *)v26 + v18);
          v42 = (double *)((char *)v26 + v18 + 8);
          v45 = *v29;
          v46 = v29[1];
          v44 = (float64x2_t *)((char *)v29 + v15);
          v48 = *v44;
          v49 = v44[1];
          v47 = (float64x2_t *)((char *)v44 + v15);
          v50 = vmulq_n_f64(v48, v43);
          v51 = vmulq_n_f64(v49, v43);
          v52 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v45, v37.f64[0]), v48, v37, 1);
          v53 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v46, v37.f64[0]), v49, v37, 1);
          v54 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v45, v39.f64[0]), v48, v39, 1);
          v55 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v46, v39.f64[0]), v49, v39, 1);
          v56 = vmlaq_laneq_f64(vmulq_n_f64(v45, v41.f64[0]), v48, v41, 1);
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v46, v41.f64[0]), v49, v41, 1);
          if ((((_DWORD)v25 - 4) & 1) != 0)
          {
            v58 = *v47;
            v59 = v47[1];
            v47 = (float64x2_t *)((char *)v47 + v15);
            v60 = *v36;
            v36 = (double *)(v26 + 5);
            v61 = *v38;
            v38 = (double *)((char *)v26 + v21 + 32);
            v62 = *v40;
            v40 = (double *)((char *)v26 + v20 + 24);
            v63 = *v42;
            v42 = (double *)((char *)v26 + v18 + 16);
            v52 = vmlaq_n_f64(v52, v58, v60);
            v54 = vmlaq_n_f64(v54, v58, v61);
            v56 = vmlaq_n_f64(v56, v58, v62);
            v50 = vmlaq_n_f64(v50, v58, v63);
            v53 = vmlaq_n_f64(v53, v59, v60);
            v55 = vmlaq_n_f64(v55, v59, v61);
            v57 = vmlaq_n_f64(v57, v59, v62);
            v51 = vmlaq_n_f64(v51, v59, v63);
            v27 = v25 - 5;
          }
          for (; v27; v27 -= 2)
          {
            v65 = *v47;
            v66 = v47[1];
            v64 = (float64x2_t *)((char *)v47 + v15);
            v67 = *v64;
            v68 = v64[1];
            v47 = (float64x2_t *)((char *)v64 + v15);
            v69 = *(float64x2_t *)v36;
            v36 += 2;
            v70 = *(float64x2_t *)v38;
            v38 += 2;
            v71 = *(float64x2_t *)v40;
            v40 += 2;
            v72 = *(float64x2_t *)v42;
            v42 += 2;
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v65, v69.f64[0]), v67, v69, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v65, v70.f64[0]), v67, v70, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v65, v71.f64[0]), v67, v71, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v65, v72.f64[0]), v67, v72, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v66, v69.f64[0]), v68, v69, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v66, v70.f64[0]), v68, v70, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v66, v71.f64[0]), v68, v71, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v66, v72.f64[0]), v68, v72, 1);
          }
          v73 = (float64x2_t *)((char *)v47 - v25 * v15);
          *v73 = vmulq_n_f64(v52, a7);
          v73[1] = vmulq_n_f64(v53, a7);
          v74 = (float64x2_t *)((char *)v73 + v15);
          *v74 = vmulq_n_f64(v54, a7);
          v74[1] = vmulq_n_f64(v55, a7);
          v75 = (float64x2_t *)((char *)v74 + v15);
          *v75 = vmulq_n_f64(v56, a7);
          v75[1] = vmulq_n_f64(v57, a7);
          v76 = (float64x2_t *)((char *)v75 + v15);
          *v76 = vmulq_n_f64(v50, a7);
          v76[1] = vmulq_n_f64(v51, a7);
          v23 += 4;
          v26 = (const double *)((char *)v26 + v19);
          v24 += 2 * __incX;
          v25 -= 4;
        }
        while (v23 < v14);
      }
      v77 = &v8[(unint64_t)v12 / 2].f64[v23 * __incX];
      v9 = a4;
      v78 = (double *)&a3[v23 * a4 + v23];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v79 = a7;
        v81 = v97;
        v80 = v98;
        v82 = v96;
LABEL_20:
        v85 = v77[1];
        *v77 = v79 * (v77[__incX] * v78[1] + *v77 * *v78);
        v77[1] = v79 * (v77[v80] * v78[1] + v85 * *v78);
        v86 = v77[3];
        v77[2] = v79 * (v77[v81] * v78[1] + v77[2] * *v78);
        v77[3] = v79 * (v77[v82] * v78[1] + v86 * *v78);
        v78 += v17;
        v77 += __incX;
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v79 = a7;
LABEL_21:
        v87 = v77[1];
        *v77 = v79 * (*v77 * *v78);
        v77[1] = v79 * (v87 * *v78);
        v88 = v77[3];
        v77[2] = v79 * (v77[2] * *v78);
        v77[3] = v79 * (v88 * *v78);
      }
      v12 += 4;
      a5 += 2;
      if (v12 >= v13)
        goto LABEL_23;
    }
    v79 = a7;
    v83 = v77[1];
    *v77 = a7 * (v77[__incX] * v78[1] + *v77 * *v78 + v77[v95] * v78[2]);
    v80 = v98;
    v77[1] = a7 * (v77[v98] * v78[1] + v83 * *v78 + v77[v94] * v78[2]);
    v81 = v97;
    v84 = v77[3];
    v77[2] = a7 * (v77[v97] * v78[1] + v77[2] * *v78 + v77[v93] * v78[2]);
    v82 = v96;
    v77[3] = a7 * (v77[v96] * v78[1] + v84 * *v78 + v77[v92] * v78[2]);
    v78 += v17;
    v77 += __incX;
    goto LABEL_20;
  }
LABEL_23:
  v89 = a1 - v12;
  if (a1 > v12)
  {
    f64 = v8[(unint64_t)v12 / 2].f64;
    do
    {
      cblas_dscal(__N, a7, f64, __incX);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasTrans, CblasNonUnit, __N, a3, v9, f64++, __incX);
      --v89;
    }
    while (v89);
  }
}

void dtrmm_noPack_RLNU(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t __incX, double a7)
{
  float64x2_t *v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t v25;
  const double *v26;
  float64x2_t *v27;
  uint64_t v28;
  double v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double *v35;
  float64x2_t v36;
  double *v37;
  float64x2_t v38;
  double *v39;
  double v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  uint64_t v83;
  double *f64;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v8 = a5;
  v9 = a4;
  v12 = 0;
  if (a1 >= 4)
  {
    v13 = a1 - 3;
    v14 = __N - 3;
    v15 = 8 * __incX;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v89 = (2 * __incX) | 1;
    v90 = __incX;
    v91 = __incX + 2;
    v92 = __incX + 1;
    v17 = __incX + 3;
    v87 = 2 * __incX + 3;
    v88 = 2 * __incX + 2;
    v86 = a4 + 1;
    v18 = 24 * a4 + 32;
    v19 = 32 * a4 + 32;
    v20 = 16 * a4 + 24;
    v21 = 8 * a4 + 16;
    while (1)
    {
      if (__N < 4)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0;
        v24 = a5;
        v25 = __N;
        v26 = a3;
        do
        {
          v27 = (float64x2_t *)((char *)v26 + v18);
          v28 = v25 - 4;
          v29 = v26[1];
          v31 = *(float64x2_t *)((char *)v24 + 8 * __incX);
          v32 = *(float64x2_t *)((char *)v24 + v15 + 16);
          v30 = (float64x2_t *)((char *)v24 + v15 + v15);
          v33 = vmlaq_n_f64(*v24, v31, v29);
          v34 = vmlaq_n_f64(v24[1], v32, v29);
          v36 = *(float64x2_t *)(v26 + 2);
          v35 = (double *)(v26 + 4);
          v38 = *(float64x2_t *)((char *)v26 + v21);
          v37 = (double *)((char *)v26 + v21 + 16);
          v40 = *(const double *)((char *)v26 + v20);
          v39 = (double *)((char *)v26 + v20 + 8);
          v42 = *v30;
          v43 = v30[1];
          v41 = (float64x2_t *)((char *)v30 + v15);
          v45 = *v41;
          v46 = v41[1];
          v44 = (float64x2_t *)((char *)v41 + v15);
          v47 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v42, v36.f64[0]), v45, v36, 1);
          v48 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v43, v36.f64[0]), v46, v36, 1);
          v49 = vmlaq_laneq_f64(vmlaq_n_f64(v31, v42, v38.f64[0]), v45, v38, 1);
          v50 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v43, v38.f64[0]), v46, v38, 1);
          v51 = vmlaq_n_f64(v42, v45, v40);
          v52 = vmlaq_n_f64(v43, v46, v40);
          if ((((_DWORD)v25 - 4) & 1) != 0)
          {
            v53 = *v44;
            v54 = v44[1];
            v44 = (float64x2_t *)((char *)v44 + v15);
            v55 = *v35;
            v35 = (double *)(v26 + 5);
            v56 = *v37;
            v37 = (double *)((char *)v26 + v21 + 24);
            v57 = *v39;
            v39 = (double *)((char *)v26 + v20 + 16);
            v58 = v27->f64[0];
            v27 = (float64x2_t *)((char *)v27 + 8);
            v47 = vmlaq_n_f64(v47, v53, v55);
            v49 = vmlaq_n_f64(v49, v53, v56);
            v51 = vmlaq_n_f64(v51, v53, v57);
            v45 = vmlaq_n_f64(v45, v53, v58);
            v48 = vmlaq_n_f64(v48, v54, v55);
            v50 = vmlaq_n_f64(v50, v54, v56);
            v52 = vmlaq_n_f64(v52, v54, v57);
            v46 = vmlaq_n_f64(v46, v54, v58);
            v28 = v25 - 5;
          }
          for (; v28; v28 -= 2)
          {
            v60 = *v44;
            v61 = v44[1];
            v59 = (float64x2_t *)((char *)v44 + v15);
            v62 = *v59;
            v63 = v59[1];
            v44 = (float64x2_t *)((char *)v59 + v15);
            v64 = *(float64x2_t *)v35;
            v35 += 2;
            v65 = *(float64x2_t *)v37;
            v37 += 2;
            v66 = *(float64x2_t *)v39;
            v39 += 2;
            v67 = *v27++;
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v60, v64.f64[0]), v62, v64, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v60, v65.f64[0]), v62, v65, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v60, v66.f64[0]), v62, v66, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v60, v67.f64[0]), v62, v67, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v61, v64.f64[0]), v63, v64, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v61, v65.f64[0]), v63, v65, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v61, v66.f64[0]), v63, v66, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v61, v67.f64[0]), v63, v67, 1);
          }
          v68 = (float64x2_t *)((char *)v44 - v25 * v15);
          *v68 = vmulq_n_f64(v47, a7);
          v68[1] = vmulq_n_f64(v48, a7);
          v69 = (float64x2_t *)((char *)v68 + v15);
          *v69 = vmulq_n_f64(v49, a7);
          v69[1] = vmulq_n_f64(v50, a7);
          v70 = (float64x2_t *)((char *)v69 + v15);
          *v70 = vmulq_n_f64(v51, a7);
          v70[1] = vmulq_n_f64(v52, a7);
          v71 = (float64x2_t *)((char *)v70 + v15);
          *v71 = vmulq_n_f64(v45, a7);
          v71[1] = vmulq_n_f64(v46, a7);
          v23 += 4;
          v26 = (const double *)((char *)v26 + v19);
          v24 += 2 * __incX;
          v25 -= 4;
        }
        while (v23 < v14);
      }
      v72 = (float64x2_t *)((char *)&v8[(unint64_t)v12 / 2] + 8 * v23 * __incX);
      v9 = a4;
      v73 = (uint64_t)&a3[v23 * a4 + v23];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v74 = a7;
        v75 = v91;
        v76 = v92;
LABEL_20:
        v79 = v72->f64[1];
        v72->f64[0] = v74 * (v72->f64[0] + v72->f64[__incX] * *(double *)(v73 + 8));
        v72->f64[1] = v74 * (v79 + v72->f64[v76] * *(double *)(v73 + 8));
        v80 = v72[1].f64[1];
        v72[1].f64[0] = v74 * (v72[1].f64[0] + v72->f64[v75] * *(double *)(v73 + 8));
        v72[1].f64[1] = v74 * (v80 + v72->f64[v17] * *(double *)(v73 + 8));
        v72 = (float64x2_t *)((char *)v72 + 8 * __incX);
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v74 = a7;
LABEL_21:
        v81 = vmulq_n_f64(*v72, v74);
        v82 = vmulq_n_f64(v72[1], v74);
        *v72 = v81;
        v72[1] = v82;
      }
      v12 += 4;
      a5 += 2;
      if (v12 >= v13)
        goto LABEL_23;
    }
    v74 = a7;
    v77 = v72->f64[1];
    v72->f64[0] = a7 * (v72->f64[0] + v72->f64[__incX] * *(double *)(v73 + 8) + v72[v90].f64[0] * *(double *)(v73 + 16));
    v76 = v92;
    v72->f64[1] = a7 * (v77 + v72->f64[v92] * *(double *)(v73 + 8) + v72->f64[v89] * *(double *)(v73 + 16));
    v75 = v91;
    v78 = v72[1].f64[1];
    v72[1].f64[0] = a7 * (v72[1].f64[0] + v72->f64[v91] * *(double *)(v73 + 8) + v72->f64[v88] * *(double *)(v73 + 16));
    v72[1].f64[1] = a7 * (v78 + v72->f64[v17] * *(double *)(v73 + 8) + v72->f64[v87] * *(double *)(v73 + 16));
    v73 += 8 * v86;
    v72 = (float64x2_t *)((char *)v72 + 8 * __incX);
    goto LABEL_20;
  }
LABEL_23:
  v83 = a1 - v12;
  if (a1 > v12)
  {
    f64 = v8[(unint64_t)v12 / 2].f64;
    do
    {
      cblas_dscal(__N, a7, f64, __incX);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasTrans, CblasUnit, __N, a3, v9, f64++, __incX);
      --v83;
    }
    while (v83);
  }
}

void dtrmm_noPack_RLTN(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  unint64_t v25;
  unint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  BOOL v72;
  double *v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  double *v81;
  uint64_t v83;

  v11 = 0;
  if (a1 >= 4)
  {
    v12 = a1 - 3;
    v13 = 8 * __incX;
    v14 = 8 * a4;
    v15 = __N & 3;
    if (__N <= 0)
      v15 = -(-__N & 3);
    v16 = __incX + 1;
    v17 = __incX + 2;
    v83 = 2 * __incX + 2;
    v18 = __incX + 3;
    v19 = 2 * __incX + 3;
    v20 = (uint64_t)&a3[a4 * (__N - 4) - 4 + __N];
    v21 = (float64x2_t *)(a5 + 8 * __incX * (__N - 4));
    while (1)
    {
      v22 = __N;
      if (__N >= 4)
      {
        v23 = v21;
        v24 = (float64x2_t *)v20;
        v25 = __N;
        do
        {
          v22 = v25 - 4;
          v26 = v25 - 4;
          v27 = v24[1];
          v28 = *(float64x2_t *)((char *)v24 + 8 * a4);
          v29 = *(float64x2_t *)((char *)v24 + v14 + 16);
          v30 = (float64x2_t *)((char *)v24 + v14 + v14 + 16);
          v31 = v23[1];
          v33 = *(float64x2_t *)((char *)v23 + 8 * __incX);
          v34 = *(float64x2_t *)((char *)v23 + v13 + 16);
          v32 = (float64x2_t *)((char *)v23 + v13 + v13);
          v35 = vmulq_n_f64(*v23, v24->f64[0]);
          v36 = vmulq_n_f64(v31, v24->f64[0]);
          v37 = vmlaq_laneq_f64(vmulq_laneq_f64(*v23, *v24, 1), v33, v28, 1);
          v38 = vmlaq_laneq_f64(vmulq_laneq_f64(v31, *v24, 1), v34, v28, 1);
          v39 = vmlaq_n_f64(vmulq_n_f64(*v23, v27.f64[0]), v33, v29.f64[0]);
          v40 = vmlaq_n_f64(vmulq_n_f64(v31, v27.f64[0]), v34, v29.f64[0]);
          v41 = vmlaq_laneq_f64(vmulq_laneq_f64(*v23, v27, 1), v33, v29, 1);
          v42 = vmlaq_laneq_f64(vmulq_laneq_f64(v31, v27, 1), v34, v29, 1);
          v43 = *(float64x2_t *)((char *)v30 + 8 * a4);
          v45 = *v32;
          v46 = v32[1];
          v44 = (float64x2_t *)((char *)v32 + v13);
          v47 = (float64x2_t *)((char *)v24 - (v25 - 4) * v14);
          v48 = *v44;
          v49 = v44[1];
          v50 = vmlaq_n_f64(v39, v45, v30->f64[0]);
          v51 = vmlaq_n_f64(v40, v46, v30->f64[0]);
          v52 = (float64x2_t *)((char *)v44 + 8 * __incX - (v25 - 4) * v13 + -32 * __incX);
          v53 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v45, *v30, 1), v48, v43, 1);
          v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v42, v46, *v30, 1), v49, v43, 1);
          if ((((_DWORD)v25 - 4) & 1) != 0)
          {
            v55 = *v52;
            v56 = v52[1];
            v52 = (float64x2_t *)((char *)v52 + v13);
            v57 = *v47;
            v58 = v47[1];
            v47 = (float64x2_t *)((char *)v47 + v14);
            v35 = vmlaq_n_f64(v35, v55, v57.f64[0]);
            v37 = vmlaq_laneq_f64(v37, v55, v57, 1);
            v50 = vmlaq_n_f64(v50, v55, v58.f64[0]);
            v53 = vmlaq_laneq_f64(v53, v55, v58, 1);
            v36 = vmlaq_n_f64(v36, v56, v57.f64[0]);
            v38 = vmlaq_laneq_f64(v38, v56, v57, 1);
            v51 = vmlaq_n_f64(v51, v56, v58.f64[0]);
            v54 = vmlaq_laneq_f64(v54, v56, v58, 1);
            v26 = v25 - 5;
          }
          for (; v26; v26 -= 2)
          {
            v60 = *v52;
            v61 = v52[1];
            v59 = (float64x2_t *)((char *)v52 + v13);
            v62 = *v59;
            v63 = v59[1];
            v52 = (float64x2_t *)((char *)v59 + v13);
            v65 = *v47;
            v66 = v47[1];
            v64 = (float64x2_t *)((char *)v47 + v14);
            v67 = *v64;
            v68 = v64[1];
            v47 = (float64x2_t *)((char *)v64 + v14);
            v35 = vmlaq_n_f64(vmlaq_n_f64(v35, v60, v65.f64[0]), v62, v67.f64[0]);
            v37 = vmlaq_laneq_f64(vmlaq_laneq_f64(v37, v60, v65, 1), v62, v67, 1);
            v50 = vmlaq_n_f64(vmlaq_n_f64(v50, v60, v66.f64[0]), v62, v68.f64[0]);
            v53 = vmlaq_laneq_f64(vmlaq_laneq_f64(v53, v60, v66, 1), v62, v68, 1);
            v36 = vmlaq_n_f64(vmlaq_n_f64(v36, v61, v65.f64[0]), v63, v67.f64[0]);
            v38 = vmlaq_laneq_f64(vmlaq_laneq_f64(v38, v61, v65, 1), v63, v67, 1);
            v51 = vmlaq_n_f64(vmlaq_n_f64(v51, v61, v66.f64[0]), v63, v68.f64[0]);
            v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v54, v61, v66, 1), v63, v68, 1);
          }
          *v52 = vmulq_n_f64(v35, a7);
          v52[1] = vmulq_n_f64(v36, a7);
          v69 = (float64x2_t *)((char *)v52 + v13);
          *v69 = vmulq_n_f64(v37, a7);
          v69[1] = vmulq_n_f64(v38, a7);
          v70 = (float64x2_t *)((char *)v69 + v13);
          *v70 = vmulq_n_f64(v50, a7);
          v70[1] = vmulq_n_f64(v51, a7);
          v71 = (float64x2_t *)((char *)v70 + v13);
          *v71 = vmulq_n_f64(v53, a7);
          v71[1] = vmulq_n_f64(v54, a7);
          v24 += 2 * ~a4;
          v23 -= 2 * __incX;
          v72 = v25 > 7;
          v25 -= 4;
        }
        while (v72);
      }
      v73 = (double *)(a5 + 8 * v11);
      v74 = (double *)&a3[v22 - 1];
      if (v15 == 3)
        break;
      if (v15 == 2)
      {
        v75 = a7;
LABEL_18:
        v73[__incX] = v75 * (v73[__incX] * v74[a4] + *v73 * *v74);
        v73[v16] = v75 * (v73[v16] * v74[a4] + v73[1] * *v74);
        v73[v17] = v75 * (v73[v17] * v74[a4] + v73[2] * *v74);
        v73[v18] = v75 * (v73[v18] * v74[a4] + v73[3] * *v74);
        --v74;
        goto LABEL_19;
      }
      if (v15 == 1)
      {
        v75 = a7;
LABEL_19:
        v78 = v73[1];
        *v73 = v75 * (*v73 * *v74);
        v73[1] = v75 * (v78 * *v74);
        v79 = v73[3];
        v73[2] = v75 * (v73[2] * *v74);
        v73[3] = v75 * (v79 * *v74);
      }
      v11 += 4;
      v21 += 2;
      if (v11 >= v12)
        goto LABEL_21;
    }
    v75 = a7;
    v76 = v73[1];
    v73[2 * __incX] = a7 * (v73[__incX] * v74[a4] + *v73 * *v74 + v73[2 * __incX] * v74[2 * a4]);
    v73[(2 * __incX) | 1] = a7 * (v73[v16] * v74[a4] + v76 * *v74 + v73[(2 * __incX) | 1] * v74[2 * a4]);
    v77 = v73[3];
    v73[v83] = a7 * (v73[v17] * v74[a4] + v73[2] * *v74 + v73[v83] * v74[2 * a4]);
    v73[v19] = a7 * (v73[v18] * v74[a4] + v77 * *v74 + v73[v19] * v74[2 * a4]);
    v74 = (double *)&a3[v22 - 2];
    goto LABEL_18;
  }
LABEL_21:
  v80 = a1 - v11;
  if (a1 > v11)
  {
    v81 = (double *)(a5 + 8 * v11);
    do
    {
      cblas_dscal(__N, a7, v81, __incX);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasNoTrans, CblasNonUnit, __N, a3, a4, v81++, __incX);
      --v80;
    }
    while (v80);
  }
}

void dtrmm_noPack_RLTU(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  const double *v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  unint64_t v27;
  unint64_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  float64x2_t *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  BOOL v70;
  float64x2_t *v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  uint64_t v78;
  double *v79;

  v11 = 0;
  if (a1 >= 4)
  {
    v12 = a1 - 3;
    v13 = 8 * __incX;
    v14 = 8 * a4;
    v15 = __N & 3;
    if (__N <= 0)
      v15 = -(-__N & 3);
    v16 = __incX + 1;
    v17 = __incX + 2;
    v18 = 2 * __incX + 2;
    v19 = __incX + 3;
    v20 = 2 * __incX + 3;
    v21 = (uint64_t)&a3[a4 * (__N - 4) - 4 + __N];
    v22 = (float64x2_t *)(a5 + 8 * __incX * (__N - 4));
    while (1)
    {
      v23 = a3;
      v24 = __N;
      if (__N >= 4)
      {
        v25 = v22;
        v26 = (float64x2_t *)v21;
        v27 = __N;
        do
        {
          v24 = v27 - 4;
          v28 = v27 - 4;
          v29 = v26[1];
          v30 = (float64x2_t *)((char *)v26 + v14 + 16);
          v31 = *v25;
          v32 = v25[1];
          v34 = *(float64x2_t *)((char *)v25 + 8 * __incX);
          v35 = *(float64x2_t *)((char *)v25 + v13 + 16);
          v33 = (float64x2_t *)((char *)v25 + v13 + v13);
          v36 = vmulq_n_f64(v34, v30->f64[0]);
          v37 = vmulq_n_f64(v35, v30->f64[0]);
          v38 = vmulq_laneq_f64(v34, *v30, 1);
          v39 = vmulq_laneq_f64(v35, *v30, 1);
          v40 = vmlaq_laneq_f64(v34, *v25, *v26, 1);
          v41 = vmlaq_laneq_f64(v35, v32, *v26, 1);
          v42 = v30->f64[(unint64_t)v14 / 8 + 1];
          v44 = *v33;
          v45 = v33[1];
          v43 = (float64x2_t *)((char *)v33 + v13);
          v46 = (float64x2_t *)((char *)v26 - (v27 - 4) * v14);
          v47 = vaddq_f64(vmlaq_n_f64(v36, *v25, v29.f64[0]), v44);
          v48 = vaddq_f64(vmlaq_n_f64(v37, v32, v29.f64[0]), v45);
          v49 = vaddq_f64(vmlaq_laneq_f64(v39, v32, v29, 1), v43[1]);
          v50 = vmlaq_n_f64(vaddq_f64(vmlaq_laneq_f64(v38, *v25, v29, 1), *v43), v44, v42);
          v51 = (float64x2_t *)((char *)v43 + 8 * __incX - (v27 - 4) * v13 + -32 * __incX);
          v52 = vmlaq_n_f64(v49, v45, v42);
          if ((((_DWORD)v27 - 4) & 1) != 0)
          {
            v53 = *v51;
            v54 = v51[1];
            v51 = (float64x2_t *)((char *)v51 + v13);
            v55 = *v46;
            v56 = v46[1];
            v46 = (float64x2_t *)((char *)v46 + v14);
            v31 = vmlaq_n_f64(v31, v53, v55.f64[0]);
            v40 = vmlaq_laneq_f64(v40, v53, v55, 1);
            v47 = vmlaq_n_f64(v47, v53, v56.f64[0]);
            v50 = vmlaq_laneq_f64(v50, v53, v56, 1);
            v32 = vmlaq_n_f64(v32, v54, v55.f64[0]);
            v41 = vmlaq_laneq_f64(v41, v54, v55, 1);
            v48 = vmlaq_n_f64(v48, v54, v56.f64[0]);
            v52 = vmlaq_laneq_f64(v52, v54, v56, 1);
            v28 = v27 - 5;
          }
          for (; v28; v28 -= 2)
          {
            v58 = *v51;
            v59 = v51[1];
            v57 = (float64x2_t *)((char *)v51 + v13);
            v60 = *v57;
            v61 = v57[1];
            v51 = (float64x2_t *)((char *)v57 + v13);
            v63 = *v46;
            v64 = v46[1];
            v62 = (float64x2_t *)((char *)v46 + v14);
            v65 = *v62;
            v66 = v62[1];
            v46 = (float64x2_t *)((char *)v62 + v14);
            v31 = vmlaq_n_f64(vmlaq_n_f64(v31, v58, v63.f64[0]), v60, v65.f64[0]);
            v40 = vmlaq_laneq_f64(vmlaq_laneq_f64(v40, v58, v63, 1), v60, v65, 1);
            v47 = vmlaq_n_f64(vmlaq_n_f64(v47, v58, v64.f64[0]), v60, v66.f64[0]);
            v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v50, v58, v64, 1), v60, v66, 1);
            v32 = vmlaq_n_f64(vmlaq_n_f64(v32, v59, v63.f64[0]), v61, v65.f64[0]);
            v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v59, v63, 1), v61, v65, 1);
            v48 = vmlaq_n_f64(vmlaq_n_f64(v48, v59, v64.f64[0]), v61, v66.f64[0]);
            v52 = vmlaq_laneq_f64(vmlaq_laneq_f64(v52, v59, v64, 1), v61, v66, 1);
          }
          *v51 = vmulq_n_f64(v31, a7);
          v51[1] = vmulq_n_f64(v32, a7);
          v67 = (float64x2_t *)((char *)v51 + v13);
          *v67 = vmulq_n_f64(v40, a7);
          v67[1] = vmulq_n_f64(v41, a7);
          v68 = (float64x2_t *)((char *)v67 + v13);
          *v68 = vmulq_n_f64(v47, a7);
          v68[1] = vmulq_n_f64(v48, a7);
          v69 = (float64x2_t *)((char *)v68 + v13);
          *v69 = vmulq_n_f64(v50, a7);
          v69[1] = vmulq_n_f64(v52, a7);
          v26 += 2 * ~a4;
          v25 -= 2 * __incX;
          v70 = v27 > 7;
          v27 -= 4;
        }
        while (v70);
      }
      v71 = (float64x2_t *)(a5 + 8 * v11);
      a3 = v23;
      v72 = (double *)&v23[v24 - 1];
      if (v15 == 3)
        break;
      if (v15 == 2)
      {
        v73 = a7;
LABEL_18:
        v71->f64[__incX] = v73 * (v71->f64[__incX] + v71->f64[0] * *v72);
        v71->f64[v16] = v73 * (v71->f64[v16] + v71->f64[1] * *v72);
        v71->f64[v17] = v73 * (v71->f64[v17] + v71[1].f64[0] * *v72);
        v71->f64[v19] = v73 * (v71->f64[v19] + v71[1].f64[1] * *v72);
        goto LABEL_19;
      }
      if (v15 == 1)
      {
        v73 = a7;
LABEL_19:
        v76 = vmulq_n_f64(*v71, v73);
        v77 = vmulq_n_f64(v71[1], v73);
        *v71 = v76;
        v71[1] = v77;
      }
      v11 += 4;
      v22 += 2;
      if (v11 >= v12)
        goto LABEL_21;
    }
    v74 = v71->f64[1];
    v73 = a7;
    v71[__incX].f64[0] = a7 * (v71[__incX].f64[0] + v71->f64[__incX] * v72[a4] + v71->f64[0] * *v72);
    v71->f64[(2 * __incX) | 1] = a7 * (v71->f64[(2 * __incX) | 1] + v71->f64[v16] * v72[a4] + v74 * *v72);
    v75 = v71[1].f64[1];
    v71->f64[v18] = a7 * (v71->f64[v18] + v71->f64[v17] * v72[a4] + v71[1].f64[0] * *v72);
    v71->f64[v20] = a7 * (v71->f64[v20] + v71->f64[v19] * v72[a4] + v75 * *v72);
    v72 = (double *)&v23[v24 - 2];
    goto LABEL_18;
  }
LABEL_21:
  v78 = a1 - v11;
  if (a1 > v11)
  {
    v79 = (double *)(a5 + 8 * v11);
    do
    {
      cblas_dscal(__N, a7, v79, __incX);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasNoTrans, CblasUnit, __N, a3, a4, v79++, __incX);
      --v78;
    }
    while (v78);
  }
}

#error "23D983734: call analysis failed (funcsize=235)"

void strsm_noPack_LLNU(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v11;
  float v14;
  float v15;
  float v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int8 *v66;
  float32x4_t v67;
  int64x2_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t *v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t *v78;
  float v79;
  float v80;
  float v81;
  float *v93;
  float32_t v94;
  float32_t v95;

  v11 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v18 = 2;
      }
      else
      {
        v22 = *(float *)(a3 + 4);
        v23 = __X + 1;
        v18 = 2;
        v24 = __N;
        do
        {
          v25 = *v23;
          v26 = *(v23 - 1) * v11;
          *(v23 - 1) = v26;
          *v23 = (float)(v25 * v11) - (float)(v26 * v22);
          v23 += __incX;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7, __X, __incX);
      v11 = a7;
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
  }
  else if (__N < 1)
  {
    v18 = 3;
  }
  else
  {
    v14 = *(float *)(a3 + 4);
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a3 + 4 * a4 + 8);
    v17 = __X + 2;
    v18 = 3;
    v19 = __N;
    do
    {
      v20 = *(v17 - 2) * v11;
      v21 = (float)(*(v17 - 1) * v11) - (float)(v20 * v14);
      *(v17 - 2) = v20;
      *(v17 - 1) = v21;
      *v17 = -(float)((float)((float)(v16 * v21) + (float)(v20 * v15)) - (float)(*v17 * v11));
      v17 += __incX;
      --v19;
    }
    while (v19);
  }
  if (v18 < a1)
  {
    v27 = 8 * a4;
    v28 = v18;
    while (1)
    {
      if (__N >= 4)
      {
        v29 = 0;
        v30 = (float32x4_t *)(a3 + 4 * v28);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v29 * __incX];
          v32 = (float32x4_t *)&__X[(v29 | 1) * __incX];
          v33 = (float32x4_t *)&__X[(v29 | 2) * __incX];
          v34 = (float32x4_t *)&__X[(v29 | 3) * __incX];
          v35 = 0uLL;
          if ((v18 & 1) != 0)
          {
            v47 = v31->f32[0];
            v31 = (float32x4_t *)((char *)v31 + 4);
            v41 = vmlaq_n_f32((float32x4_t)0, *v30, v47);
            v48 = v32->f32[0];
            v32 = (float32x4_t *)((char *)v32 + 4);
            v38 = vmlaq_n_f32((float32x4_t)0, *v30, v48);
            v49 = v33->f32[0];
            v33 = (float32x4_t *)((char *)v33 + 4);
            v37 = vmlaq_n_f32((float32x4_t)0, *v30, v49);
            v50 = v34->f32[0];
            v34 = (float32x4_t *)((char *)v34 + 4);
            v36 = vmlaq_n_f32((float32x4_t)0, *v30, v50);
            v39 = v28 - 1;
            v40 = (float32x4_t *)((char *)v30 + 4 * a4);
            if (v28 != 1)
            {
LABEL_22:
              v42 = 0;
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v41 = vmlaq_n_f32(v41, *v40, v31->f32[v42]);
                v38 = vmlaq_n_f32(v38, *v40, v32->f32[v42]);
                v37 = vmlaq_n_f32(v37, *v40, v33->f32[v42]);
                v36 = vmlaq_n_f32(v36, *v40, v34->f32[v42]);
                v46 = *(float32x4_t *)((char *)v40 + 4 * a4);
                v43 = vmlaq_n_f32(v43, v46, v31->f32[v42 + 1]);
                v44 = vmlaq_n_f32(v44, v46, v32->f32[v42 + 1]);
                v45 = vmlaq_n_f32(v45, v46, v33->f32[v42 + 1]);
                v35 = vmlaq_n_f32(v35, v46, v34->f32[v42 + 1]);
                v40 = (float32x4_t *)((char *)v40 + v27);
                v42 += 2;
                v39 -= 2;
              }
              while (v39);
              v31 = (float32x4_t *)((char *)v31 + v42 * 4);
              v32 = (float32x4_t *)((char *)v32 + v42 * 4);
              v33 = (float32x4_t *)((char *)v33 + v42 * 4);
              v34 = (float32x4_t *)((char *)v34 + v42 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v36 = 0uLL;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v28;
            v40 = (float32x4_t *)(a3 + 4 * v28);
            v41 = 0uLL;
            if (v28)
              goto LABEL_22;
          }
          v45 = 0uLL;
          v44 = 0uLL;
          v43 = 0uLL;
LABEL_27:
          v51 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v31, v11), vaddq_f32(v43, v41));
          v52 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v32, v11), vaddq_f32(v44, v38));
          v53 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v33, v11), vaddq_f32(v45, v37));
          v54 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v34, v11), vaddq_f32(v35, v36));
          v55 = (int32x4_t)vzip1q_s64(v51, v53);
          v56 = (int32x4_t)vzip1q_s64(v52, v54);
          v57 = (int32x4_t)vzip2q_s64(v51, v53);
          v58 = (int32x4_t)vzip2q_s64(v52, v54);
          v59 = (float32x4_t)vtrn1q_s32(v55, v56);
          v60 = (float32x4_t)vtrn2q_s32(v55, v56);
          v61 = (float32x4_t)vtrn1q_s32(v57, v58);
          v62 = (float32x4_t)vtrn2q_s32(v57, v58);
          v57.i32[0] = v40->i32[1];
          v56.i32[0] = v40->i32[2];
          v63 = vmlsq_lane_f32(v60, v59, *(float32x2_t *)v57.i8, 0);
          v64 = vmlsq_lane_f32(v61, v59, *(float32x2_t *)v56.i8, 0);
          v57.i32[0] = v40->i32[3];
          v65 = vmlsq_lane_f32(v62, v59, *(float32x2_t *)v57.i8, 0);
          v66 = &v40->i8[4 * a4];
          v57.i32[0] = *((_DWORD *)v66 + 2);
          v56.i32[0] = *((_DWORD *)v66 + 3);
          v67 = vmlsq_lane_f32(v64, v63, *(float32x2_t *)v57.i8, 0);
          v57.i32[0] = *(_DWORD *)&v66[4 * a4 + 12];
          v68 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(v65, v63, *(float32x2_t *)v56.i8, 0), v67, *(float32x2_t *)v57.i8, 0);
          v69 = (int32x4_t)vzip1q_s64((int64x2_t)v59, (int64x2_t)v67);
          v70 = (int32x4_t)vzip1q_s64((int64x2_t)v63, v68);
          v71 = (int32x4_t)vzip2q_s64((int64x2_t)v59, (int64x2_t)v67);
          v72 = (int32x4_t)vzip2q_s64((int64x2_t)v63, v68);
          *(int32x4_t *)v31 = vtrn1q_s32(v69, v70);
          *(int32x4_t *)v32 = vtrn2q_s32(v69, v70);
          *(int32x4_t *)v33 = vtrn1q_s32(v71, v72);
          *(int32x4_t *)v34 = vtrn2q_s32(v71, v72);
          v29 += 4;
          if (v29 >= __N - 3)
            goto LABEL_30;
        }
      }
      v29 = 0;
LABEL_30:
      if (v29 < __N)
        break;
LABEL_38:
      v28 += 4;
      if (v28 >= a1)
        return;
    }
    v73 = (float32x4_t *)(a3 + 4 * v28);
    while (1)
    {
      v74 = (float32x4_t *)&__X[v29 * __incX];
      v75 = 0uLL;
      if ((v18 & 1) != 0)
      {
        v79 = v74->f32[0];
        v74 = (float32x4_t *)((char *)v74 + 4);
        v76 = vmlaq_n_f32((float32x4_t)0, *v73, v79);
        v77 = v28 - 1;
        v78 = (float32x4_t *)((char *)v73 + 4 * a4);
        if (v28 != 1)
        {
          do
          {
LABEL_36:
            v80 = v74->f32[0];
            v81 = v74->f32[1];
            v74 = (float32x4_t *)((char *)v74 + 8);
            v76 = vmlaq_n_f32(v76, *v78, v80);
            v75 = vmlaq_n_f32(v75, *(float32x4_t *)((char *)v78 + 4 * a4), v81);
            v78 = (float32x4_t *)((char *)v78 + v27);
            v77 -= 2;
          }
          while (v77);
        }
      }
      else
      {
        v76 = 0uLL;
        v77 = v28;
        v78 = (float32x4_t *)(a3 + 4 * v28);
        if (v28)
          goto LABEL_36;
      }
      _S0 = vsubq_f32(vmulq_n_f32(*v74, v11), vaddq_f32(v75, v76)).u32[0];
      _S4 = v78->i32[1];
      _S5 = v78->i32[2];
      __asm
      {
        FMLS            S3, S4, V0.S[0]
        FMLS            S2, S5, V0.S[0]
      }
      _S4 = v78->i32[3];
      __asm { FMLS            S1, S4, V0.S[0] }
      v93 = &v78->f32[a4];
      v94 = _S2 - (float)(_S3 * v93[2]);
      v95 = (float)(_S1 - (float)(_S3 * v93[3])) - (float)(v94 * v93[a4 + 3]);
      v74->i32[0] = _S0;
      v74->f32[1] = _S3;
      v74->f32[2] = v94;
      v74->f32[3] = v95;
      if (++v29 == __N)
        goto LABEL_38;
    }
  }
}

void strsm_noPack_LLNN(uint64_t a1, uint64_t __N, float *a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v11;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  __int8 *v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int64x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t *v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t v92;
  float v93;
  float v94;
  float v95;
  float32x4_t v96;
  float v97;
  float v98;
  float v99;
  float *v100;
  float32_t v101;
  float32_t v102;
  float32_t v103;

  v11 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = v11 / *a3;
        v28 = __X + 1;
        v21 = 2;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = *v28;
          v32 = v27 * *(v28 - 1);
          *(v28 - 1) = v32;
          *v28 = v30 * (float)((float)(v31 * v11) - (float)(v32 * v26));
          v28 += __incX;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *a3, __X, __incX);
      v11 = a7;
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = v11 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = __X + 2;
    v21 = 3;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *(v20 - 2);
      v25 = v19 * (float)((float)(*(v20 - 1) * v11) - (float)(v24 * v15));
      *(v20 - 2) = v24;
      *(v20 - 1) = v25;
      *v20 = v23 * (float)-(float)((float)((float)(v18 * v25) + (float)(v24 * v14)) - (float)(*v20 * v11));
      v20 += __incX;
      --v22;
    }
    while (v22);
  }
  if (v21 < a1)
  {
    v33 = a4 + 1;
    v34 = 8 * a4;
    v35 = v21;
    while (1)
    {
      v36 = 1.0 / a3[v35 * v33];
      v37 = 1.0 / a3[v33 + v35 * v33];
      v38 = 1.0 / a3[(v35 + 2) * v33];
      v39 = 1.0 / a3[(v35 + 3) * v33];
      if (__N >= 4)
      {
        v40 = 0;
        v41 = (float32x4_t *)&a3[v35];
        while (1)
        {
          v42 = (float32x4_t *)&__X[v40 * __incX];
          v43 = (float32x4_t *)&__X[(v40 | 1) * __incX];
          v44 = (float32x4_t *)&__X[(v40 | 2) * __incX];
          v45 = (float32x4_t *)&__X[(v40 | 3) * __incX];
          v46 = 0uLL;
          if ((v21 & 1) != 0)
          {
            v58 = v42->f32[0];
            v42 = (float32x4_t *)((char *)v42 + 4);
            v52 = vmlaq_n_f32((float32x4_t)0, *v41, v58);
            v59 = v43->f32[0];
            v43 = (float32x4_t *)((char *)v43 + 4);
            v49 = vmlaq_n_f32((float32x4_t)0, *v41, v59);
            v60 = v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4);
            v48 = vmlaq_n_f32((float32x4_t)0, *v41, v60);
            v61 = v45->f32[0];
            v45 = (float32x4_t *)((char *)v45 + 4);
            v47 = vmlaq_n_f32((float32x4_t)0, *v41, v61);
            v50 = v35 - 1;
            v51 = (float32x4_t *)((char *)v41 + 4 * a4);
            if (v35 != 1)
            {
LABEL_22:
              v53 = 0;
              v54 = 0uLL;
              v55 = 0uLL;
              v56 = 0uLL;
              do
              {
                v52 = vmlaq_n_f32(v52, *v51, v42->f32[v53]);
                v49 = vmlaq_n_f32(v49, *v51, v43->f32[v53]);
                v48 = vmlaq_n_f32(v48, *v51, v44->f32[v53]);
                v47 = vmlaq_n_f32(v47, *v51, v45->f32[v53]);
                v57 = *(float32x4_t *)((char *)v51 + 4 * a4);
                v54 = vmlaq_n_f32(v54, v57, v42->f32[v53 + 1]);
                v55 = vmlaq_n_f32(v55, v57, v43->f32[v53 + 1]);
                v56 = vmlaq_n_f32(v56, v57, v44->f32[v53 + 1]);
                v46 = vmlaq_n_f32(v46, v57, v45->f32[v53 + 1]);
                v51 = (float32x4_t *)((char *)v51 + v34);
                v53 += 2;
                v50 -= 2;
              }
              while (v50);
              v42 = (float32x4_t *)((char *)v42 + v53 * 4);
              v43 = (float32x4_t *)((char *)v43 + v53 * 4);
              v44 = (float32x4_t *)((char *)v44 + v53 * 4);
              v45 = (float32x4_t *)((char *)v45 + v53 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = v35;
            v51 = (float32x4_t *)&a3[v35];
            v52 = 0uLL;
            if (v35)
              goto LABEL_22;
          }
          v56 = 0uLL;
          v55 = 0uLL;
          v54 = 0uLL;
LABEL_27:
          v62 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v42, v11), vaddq_f32(v54, v52));
          v63 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v43, v11), vaddq_f32(v55, v49));
          v64 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v44, v11), vaddq_f32(v56, v48));
          v65 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v45, v11), vaddq_f32(v46, v47));
          v66 = (int32x4_t)vzip1q_s64(v62, v64);
          v67 = (int32x4_t)vzip1q_s64(v63, v65);
          v68 = (int32x4_t)vzip2q_s64(v62, v64);
          v69 = (int32x4_t)vzip2q_s64(v63, v65);
          v70 = (float32x4_t)vtrn1q_s32(v66, v67);
          v71 = (float32x4_t)vtrn2q_s32(v66, v67);
          v72 = (float32x4_t)vtrn1q_s32(v68, v69);
          v73 = (float32x4_t)vtrn2q_s32(v68, v69);
          v74 = vmulq_n_f32(v70, v36);
          v68.i32[0] = v51->i32[1];
          v67.i32[0] = v51->i32[2];
          v75 = vmlsq_lane_f32(v71, v74, *(float32x2_t *)v68.i8, 0);
          v76 = vmlsq_lane_f32(v72, v74, *(float32x2_t *)v67.i8, 0);
          v68.i32[0] = v51->i32[3];
          v77 = vmlsq_lane_f32(v73, v74, *(float32x2_t *)v68.i8, 0);
          v78 = &v51->i8[4 * a4];
          v79 = vmulq_n_f32(v75, v37);
          v75.i32[0] = *((_DWORD *)v78 + 2);
          v67.i32[0] = *((_DWORD *)v78 + 3);
          v80 = vmlsq_lane_f32(v76, v79, *(float32x2_t *)v75.f32, 0);
          v81 = vmulq_n_f32(v80, v38);
          v80.i32[0] = *(_DWORD *)&v78[4 * a4 + 12];
          v82 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v77, v79, *(float32x2_t *)v67.i8, 0), v81, *(float32x2_t *)v80.f32, 0), v39);
          v83 = (int32x4_t)vzip1q_s64((int64x2_t)v74, (int64x2_t)v81);
          v84 = (int32x4_t)vzip1q_s64((int64x2_t)v79, v82);
          v85 = (int32x4_t)vzip2q_s64((int64x2_t)v74, (int64x2_t)v81);
          v86 = (int32x4_t)vzip2q_s64((int64x2_t)v79, v82);
          *(int32x4_t *)v42 = vtrn1q_s32(v83, v84);
          *(int32x4_t *)v43 = vtrn2q_s32(v83, v84);
          *(int32x4_t *)v44 = vtrn1q_s32(v85, v86);
          *(int32x4_t *)v45 = vtrn2q_s32(v85, v86);
          v40 += 4;
          if (v40 >= __N - 3)
            goto LABEL_30;
        }
      }
      v40 = 0;
LABEL_30:
      if (v40 < __N)
        break;
LABEL_38:
      v35 += 4;
      if (v35 >= a1)
        return;
    }
    v87 = (float32x4_t *)&a3[v35];
    while (1)
    {
      v88 = (float32x4_t *)&__X[v40 * __incX];
      v89 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v93 = v88->f32[0];
        v88 = (float32x4_t *)((char *)v88 + 4);
        v92 = vmlaq_n_f32((float32x4_t)0, *v87, v93);
        v90 = (float32x4_t *)((char *)v87 + 4 * a4);
        v91 = v35 - 1;
        if (v35 != 1)
        {
          do
          {
LABEL_36:
            v94 = v88->f32[0];
            v95 = v88->f32[1];
            v88 = (float32x4_t *)((char *)v88 + 8);
            v92 = vmlaq_n_f32(v92, *v90, v94);
            v89 = vmlaq_n_f32(v89, *(float32x4_t *)((char *)v90 + 4 * a4), v95);
            v90 = (float32x4_t *)((char *)v90 + v34);
            v91 -= 2;
          }
          while (v91);
        }
      }
      else
      {
        v90 = (float32x4_t *)&a3[v35];
        v91 = v35;
        v92 = 0uLL;
        if (v35)
          goto LABEL_36;
      }
      v96 = vsubq_f32(vmulq_n_f32(*v88, v11), vaddq_f32(v92, v89));
      v96.f32[0] = v36 * v96.f32[0];
      v97 = v96.f32[1] - (float)(v96.f32[0] * v90->f32[1]);
      v98 = v96.f32[2] - (float)(v96.f32[0] * v90->f32[2]);
      v99 = v96.f32[3] - (float)(v96.f32[0] * v90->f32[3]);
      v100 = &v90->f32[a4];
      v101 = v37 * v97;
      v102 = v38 * (float)(v98 - (float)(v101 * v100[2]));
      v103 = v39 * (float)((float)(v99 - (float)(v101 * v100[3])) - (float)(v102 * v100[a4 + 3]));
      v88->i32[0] = v96.i32[0];
      v88->f32[1] = v101;
      v88->f32[2] = v102;
      v88->f32[3] = v103;
      if (++v40 == __N)
        goto LABEL_38;
    }
  }
}

uint64_t strsm_noPack_LLTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  __int32 *v30;
  uint64_t v31;
  uint64_t v32;
  __int32 *v33;
  uint64_t v34;
  uint64_t v35;
  __int32 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int32 *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  float *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  float32x4_t v56;
  uint64_t *v57;
  uint64_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  int32x4_t v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t *v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int64x2_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  __int32 *v112;
  uint64_t v113;
  uint64_t v114;
  __int32 *v115;
  uint64_t v116;
  uint64_t v117;
  __int32 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int32 *v122;
  uint64_t v123;
  float *v124;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  float32x4_t v132;
  __int32 v133;
  uint64_t v134;
  int32x4_t v135;
  uint64_t v136;
  int32x4_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float v143;
  float32x4_t *v144;
  float32_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v19 = *(float *)(a3 + 4 * (v7 + (result - 2) * a4));
        v20 = (float *)(a5 + 4 * v7);
        v21 = a2;
        do
        {
          v22 = *(v20 - 1);
          v23 = *v20 * a7;
          *v20 = v23;
          *(v20 - 1) = (float)(v22 * a7) - (float)(v23 * v19);
          v20 += a6;
          --v21;
        }
        while (v21);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v17 = a2;
        v18 = (float *)(a5 + 4 * v7);
        do
        {
          *v18 = *v18 * a7;
          v18 += a6;
          --v17;
        }
        while (v17);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 + (result - 2) * a4));
      v9 = (float *)(a3 + 4 * (v7 + (result - 3) * a4));
      v11 = *(v9 - 1);
      v10 = *v9;
      v12 = (float *)(a5 + 4 * v7);
      v13 = a2;
      do
      {
        v14 = *(v12 - 1);
        v15 = *v12 * a7;
        *v12 = v15;
        v16 = (float)(v14 * a7) - (float)(v15 * v8);
        *(v12 - 2) = -(float)((float)((float)(v11 * v16) + (float)(v15 * v10)) - (float)(*(v12 - 2) * a7));
        *(v12 - 1) = v16;
        v12 += a6;
        --v13;
      }
      while (v13);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v24 = v7 + 1;
    v25 = a2 - 3;
    v158 = result;
    v159 = a2;
    while (1)
    {
      v26 = v24 - 4;
      if (a2 >= 4)
      {
        v27 = 0;
        v28 = a3 + 4 * v26 * a4;
        v29 = (_DWORD *)(v28 + 4 * v26);
        v30 = (__int32 *)(v28 + 4 * v24);
        v31 = a3 + 4 * (v24 - 3) * a4;
        v32 = v31 + 4 * v26;
        v33 = (__int32 *)(v31 + 4 * v24);
        v34 = a3 + 4 * (v24 - 2) * a4;
        v35 = v34 + 4 * v26;
        v36 = (__int32 *)(v34 + 4 * v24);
        v37 = a3 + 4 * (v24 - 1) * a4;
        if (result - v26 <= 4)
          v38 = 4;
        else
          v38 = result - v26;
        v39 = v37 + 4 * v26 + 20;
        v40 = (__int32 *)(v37 + 4 * v24);
        while (1)
        {
          v41 = a5 + 4 * v27 * a6;
          v42 = (float *)(v41 + 4 * v24);
          v43 = a5 + 4 * (v27 | 1) * a6;
          v44 = (float *)(v43 + 4 * v24);
          v45 = a5 + 4 * (v27 | 2) * a6;
          v46 = (float *)(v45 + 4 * v24);
          v47 = a5 + 4 * (v27 | 3) * a6;
          v48 = (float *)(v47 + 4 * v24);
          v49 = 0uLL;
          if ((v38 & 1) != 0)
          {
            v79.i32[0] = *v30;
            v79.i32[1] = *v33;
            v79.i32[2] = *v36;
            v79.i32[3] = *v40;
            v80 = *v42++;
            v56 = vmlaq_n_f32((float32x4_t)0, v79, v80);
            v81 = *v44++;
            v82 = v81;
            v83 = *v46++;
            v52 = vmlaq_n_f32((float32x4_t)0, v79, v82);
            v51 = vmlaq_n_f32((float32x4_t)0, v79, v83);
            v84 = *v48++;
            v53 = v38 - 5;
            v50 = vmlaq_n_f32((float32x4_t)0, v79, v84);
            v54 = (uint64_t *)v39;
            v55 = (uint64_t *)(v36 + 1);
            v57 = (uint64_t *)(v33 + 1);
            v58 = (uint64_t *)(v30 + 1);
            if (v38 != 5)
            {
LABEL_25:
              v59 = 0uLL;
              v60 = 0uLL;
              v61 = 0uLL;
              do
              {
                v62 = *v58++;
                v63.i64[0] = v62;
                v64 = *v57++;
                v65.i64[0] = v64;
                v66 = *v55++;
                v67 = v66;
                v68 = *v54++;
                v63.i64[1] = v67;
                v65.i64[1] = v68;
                v69 = (float32x4_t)vtrn1q_s32(v63, v65);
                v70 = *v42;
                v71 = v42[1];
                v42 += 2;
                v56 = vmlaq_n_f32(v56, v69, v70);
                v72 = *v44;
                v73 = v44[1];
                v44 += 2;
                v52 = vmlaq_n_f32(v52, v69, v72);
                v74 = *v46;
                v75 = v46[1];
                v46 += 2;
                v51 = vmlaq_n_f32(v51, v69, v74);
                v76 = *v48;
                v77 = v48[1];
                v48 += 2;
                v50 = vmlaq_n_f32(v50, v69, v76);
                v78 = (float32x4_t)vtrn2q_s32(v63, v65);
                v59 = vmlaq_n_f32(v59, v78, v71);
                v60 = vmlaq_n_f32(v60, v78, v73);
                v61 = vmlaq_n_f32(v61, v78, v75);
                v49 = vmlaq_n_f32(v49, v78, v77);
                v53 -= 2;
              }
              while (v53);
              goto LABEL_30;
            }
          }
          else
          {
            v50 = 0uLL;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = v38 - 4;
            v54 = (uint64_t *)v40;
            v55 = (uint64_t *)v36;
            v56 = 0uLL;
            v57 = (uint64_t *)v33;
            v58 = (uint64_t *)v30;
            if (v38 != 4)
              goto LABEL_25;
          }
          v61 = 0uLL;
          v60 = 0uLL;
          v59 = 0uLL;
LABEL_30:
          v85 = (float32x4_t *)(v41 + 4 * v26);
          v86 = (float32x4_t *)(v43 + 4 * v26);
          v87 = (float32x4_t *)(v45 + 4 * v26);
          v88 = (float32x4_t *)(v47 + 4 * v26);
          v89 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v85, a7), vaddq_f32(v59, v56));
          v90 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v86, a7), vaddq_f32(v60, v52));
          v91 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v87, a7), vaddq_f32(v61, v51));
          v92 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v88, a7), vaddq_f32(v49, v50));
          v93 = (int32x4_t)vzip1q_s64(v89, v91);
          v94 = (int32x4_t)vzip1q_s64(v90, v92);
          v95 = (int32x4_t)vzip2q_s64(v89, v91);
          v96 = (int32x4_t)vzip2q_s64(v90, v92);
          v97 = (float32x4_t)vtrn1q_s32(v93, v94);
          v98 = (float32x4_t)vtrn2q_s32(v93, v94);
          v99 = (float32x4_t)vtrn1q_s32(v95, v96);
          v100 = (float32x4_t)vtrn2q_s32(v95, v96);
          v95.i32[0] = *(_DWORD *)(v35 + 12);
          v101 = vmlsq_lane_f32(v99, v100, *(float32x2_t *)v95.i8, 0);
          v94.i32[0] = *(_DWORD *)(v32 + 8);
          v95.i32[0] = *(_DWORD *)(v32 + 12);
          v102 = vmlsq_lane_f32(v98, v100, *(float32x2_t *)v95.i8, 0);
          v95.i32[0] = v29[3];
          v103 = vmlsq_lane_f32(v97, v100, *(float32x2_t *)v95.i8, 0);
          v104 = vmlsq_lane_f32(v102, v101, *(float32x2_t *)v94.i8, 0);
          v94.i32[0] = v29[1];
          v95.i32[0] = v29[2];
          v105 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(v103, v101, *(float32x2_t *)v95.i8, 0), v104, *(float32x2_t *)v94.i8, 0);
          v106 = (int32x4_t)vzip1q_s64(v105, (int64x2_t)v101);
          v107 = (int32x4_t)vzip1q_s64((int64x2_t)v104, (int64x2_t)v100);
          v108 = (int32x4_t)vzip2q_s64(v105, (int64x2_t)v101);
          v109 = (int32x4_t)vzip2q_s64((int64x2_t)v104, (int64x2_t)v100);
          *(int32x4_t *)v85 = vtrn1q_s32(v106, v107);
          *(int32x4_t *)v86 = vtrn2q_s32(v106, v107);
          *(int32x4_t *)v87 = vtrn1q_s32(v108, v109);
          *(int32x4_t *)v88 = vtrn2q_s32(v108, v109);
          v27 += 4;
          if (v27 >= v25)
            goto LABEL_33;
        }
      }
      v27 = 0;
LABEL_33:
      result = v158;
      a2 = v159;
      if (v27 < v159)
        break;
LABEL_44:
      v157 = v24 < 5;
      v24 -= 4;
      if (v157)
        return result;
    }
    v110 = a3 + 4 * v26 * a4;
    v111 = v110 + 4 * v26;
    v112 = (__int32 *)(v110 + 4 * v24);
    v113 = a3 + 4 * (v24 - 3) * a4;
    v114 = v113 + 4 * v26;
    v115 = (__int32 *)(v113 + 4 * v24);
    v116 = a3 + 4 * (v24 - 2) * a4;
    v117 = v116 + 4 * v26;
    v118 = (__int32 *)(v116 + 4 * v24);
    v119 = a3 + 4 * (v24 - 1) * a4;
    if (v158 - v26 <= 4)
      v120 = 4;
    else
      v120 = v158 - v26;
    v121 = v119 + 4 * v26 + 20;
    v122 = (__int32 *)(v119 + 4 * v24);
    while (1)
    {
      v123 = a5 + 4 * v27 * a6;
      v124 = (float *)(v123 + 4 * v24);
      v125 = 0uLL;
      if ((v120 & 1) != 0)
      {
        v132.i32[0] = *v112;
        v132.i32[1] = *v115;
        v132.i32[2] = *v118;
        v132.i32[3] = *v122;
        v133 = *(_DWORD *)v124++;
        v126 = v120 - 5;
        v127 = vmlaq_n_f32((float32x4_t)0, v132, *(float *)&v133);
        v128 = (uint64_t *)v121;
        v129 = (uint64_t *)(v118 + 1);
        v130 = (uint64_t *)(v115 + 1);
        v131 = (uint64_t *)(v112 + 1);
        if (v120 != 5)
        {
          do
          {
LABEL_42:
            v134 = *v131++;
            v135.i64[0] = v134;
            v136 = *v130++;
            v137.i64[0] = v136;
            v138 = *v129++;
            v139 = v138;
            v140 = *v128++;
            v135.i64[1] = v139;
            v137.i64[1] = v140;
            v141 = (float32x4_t)vtrn1q_s32(v135, v137);
            v142 = (float32x4_t)vtrn2q_s32(v135, v137);
            v137.i32[0] = *(__int32 *)v124;
            v143 = v124[1];
            v124 += 2;
            v127 = vmlaq_n_f32(v127, v141, *(float *)v137.i32);
            v125 = vmlaq_n_f32(v125, v142, v143);
            v126 -= 2;
          }
          while (v126);
        }
      }
      else
      {
        v126 = v120 - 4;
        v127 = 0uLL;
        v128 = (uint64_t *)v122;
        v129 = (uint64_t *)v118;
        v130 = (uint64_t *)v115;
        v131 = (uint64_t *)v112;
        if (v120 != 4)
          goto LABEL_42;
      }
      v144 = (float32x4_t *)(v123 + 4 * v26);
      _Q1 = vsubq_f32(vmulq_n_f32(*v144, a7), vaddq_f32(v125, v127));
      _S4 = *(_DWORD *)(v117 + 12);
      __asm { FMLS            S2, S4, V1.S[3] }
      _S4 = *(_DWORD *)(v114 + 12);
      __asm { FMLS            S3, S4, V1.S[3] }
      _S4 = *(_DWORD *)(v111 + 12);
      __asm { FMLS            S6, S4, V1.S[3] }
      v156 = _S3 - (float)(_S2 * *(float *)(v114 + 8));
      v144->f32[0] = (float)(_S6 - (float)(_S2 * *(float *)(v111 + 8))) - (float)(v156 * *(float *)(v111 + 4));
      v144->f32[1] = v156;
      v144->f32[2] = _S2;
      v144->i32[3] = _Q1.i32[3];
      if (++v27 == v159)
        goto LABEL_44;
    }
  }
  return result;
}

uint64_t strsm_noPack_LLTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  __int32 *v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  uint64_t v51;
  uint64_t v52;
  __int32 *v53;
  uint64_t v54;
  uint64_t v55;
  __int32 *v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  float *v60;
  float *v61;
  uint64_t v62;
  float *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  float32x4_t v71;
  uint64_t *v72;
  uint64_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  int32x4_t v78;
  uint64_t v79;
  int32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float32x4_t v93;
  float32x4_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t *v102;
  float32x4_t *v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int64x2_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  float *v128;
  __int32 *v129;
  uint64_t v130;
  uint64_t v131;
  __int32 *v132;
  uint64_t v133;
  uint64_t v134;
  __int32 *v135;
  uint64_t v136;
  uint64_t v137;
  __int32 *v138;
  uint64_t v139;
  float *v140;
  float32x4_t v141;
  uint64_t v142;
  float32x4_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  float32x4_t v148;
  __int32 v149;
  uint64_t v150;
  int32x4_t v151;
  uint64_t v152;
  int32x4_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float v159;
  float32x4_t *v160;
  float32x4_t v161;
  float v162;
  float32_t v163;
  float32_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v25 = (float *)(a3 + 4 * (v7 + (result - 2) * a4));
        v26 = *v25;
        v27 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v28 = (float *)(a5 + 4 * v7);
        v29 = a2;
        v30 = 1.0 / *(v25 - 1);
        do
        {
          v31 = *(v28 - 1);
          v32 = v27 * *v28;
          *v28 = v32;
          *(v28 - 1) = v30 * (float)((float)(v31 * a7) - (float)(v32 * v26));
          v28 += a6;
          --v29;
        }
        while (v29);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v22 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v23 = (float *)(a5 + 4 * v7);
        v24 = a2;
        do
        {
          *v23 = v22 * *v23;
          v23 += a6;
          --v24;
        }
        while (v24);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = (float *)(a3 + 4 * (v7 + (result - 2) * a4));
      v9 = *v8;
      v10 = (float *)(a3 + 4 * (v7 + (result - 3) * a4));
      v12 = *(v10 - 1);
      v11 = *v10;
      v13 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
      v14 = 1.0 / *(v8 - 1);
      v15 = *(v10 - 2);
      v16 = (float *)(a5 + 4 * v7);
      v17 = a2;
      v18 = 1.0 / v15;
      do
      {
        v19 = *(v16 - 1);
        v20 = v13 * *v16;
        *v16 = v20;
        v21 = v14 * (float)((float)(v19 * a7) - (float)(v20 * v9));
        *(v16 - 2) = v18 * (float)-(float)((float)((float)(v12 * v21) + (float)(v20 * v11)) - (float)(*(v16 - 2) * a7));
        *(v16 - 1) = v21;
        v16 += a6;
        --v17;
      }
      while (v17);
    }
    v7 = result - 4;
  }
  v167 = result;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v33 = v7 + 1;
    v170 = a2 - 3;
    v166 = a3;
    v34 = a2;
    while (1)
    {
      v35 = v33 - 4;
      v36 = (v33 - 4) * a4;
      v37 = 1.0 / *(float *)(a3 + 4 * (v36 + v33 - 4));
      v38 = (v33 - 3) * a4;
      v39 = 1.0 / *(float *)(a3 + 4 * (v33 - 3 + v38));
      v40 = (v33 - 2) * a4;
      v41 = 1.0 / *(float *)(a3 + 4 * (v33 - 2 + v40));
      v42 = (v33 - 1) * a4;
      v43 = 1.0 / *(float *)(a3 + 4 * (v33 - 1 + v42));
      v44 = 0;
      if (a2 >= 4)
      {
        v45 = a3 + 4 * v36;
        v46 = (_DWORD *)(v45 + 4 * v35);
        v47 = (__int32 *)(v45 + 4 * v33);
        v48 = a3 + 4 * v38;
        v49 = v48 + 4 * v35;
        v50 = (__int32 *)(v48 + 4 * v33);
        v51 = a3 + 4 * v40;
        v52 = v51 + 4 * v35;
        v53 = (__int32 *)(v51 + 4 * v33);
        if (v167 - v35 <= 4)
          v54 = 4;
        else
          v54 = v167 - v35;
        v55 = a3 + 4 * v42;
        v169 = v55 + 4 * v35 + 20;
        v56 = (__int32 *)(v55 + 4 * v33);
        do
        {
          v57 = a5 + 4 * v44 * a6;
          v58 = (float *)(v57 + 4 * v33);
          v59 = a5 + 4 * (v44 | 1) * a6;
          v60 = (float *)(v59 + 4 * v33);
          result = a5 + 4 * (v44 | 2) * a6;
          v61 = (float *)(result + 4 * v33);
          v62 = a5 + 4 * (v44 | 3) * a6;
          v63 = (float *)(v62 + 4 * v33);
          v64 = 0uLL;
          if ((v54 & 1) != 0)
          {
            v94.i32[0] = *v47;
            v94.i32[1] = *v50;
            v94.i32[2] = *v53;
            v94.i32[3] = *v56;
            v95 = *v58++;
            v71 = vmlaq_n_f32((float32x4_t)0, v94, v95);
            v96 = *v60++;
            v97 = v96;
            v98 = *v61++;
            v67 = vmlaq_n_f32((float32x4_t)0, v94, v97);
            v66 = vmlaq_n_f32((float32x4_t)0, v94, v98);
            v99 = *v63++;
            v68 = v54 - 5;
            v65 = vmlaq_n_f32((float32x4_t)0, v94, v99);
            v69 = (uint64_t *)v169;
            v70 = (uint64_t *)(v53 + 1);
            v72 = (uint64_t *)(v50 + 1);
            v73 = (uint64_t *)(v47 + 1);
            if (v54 != 5)
            {
LABEL_25:
              v74 = 0uLL;
              v75 = 0uLL;
              v76 = 0uLL;
              do
              {
                v77 = *v73++;
                v78.i64[0] = v77;
                v79 = *v72++;
                v80.i64[0] = v79;
                v81 = *v70++;
                v82 = v81;
                v83 = *v69++;
                v78.i64[1] = v82;
                v80.i64[1] = v83;
                v84 = (float32x4_t)vtrn1q_s32(v78, v80);
                v85 = *v58;
                v86 = v58[1];
                v58 += 2;
                v71 = vmlaq_n_f32(v71, v84, v85);
                v87 = *v60;
                v88 = v60[1];
                v60 += 2;
                v67 = vmlaq_n_f32(v67, v84, v87);
                v89 = *v61;
                v90 = v61[1];
                v61 += 2;
                v66 = vmlaq_n_f32(v66, v84, v89);
                v91 = *v63;
                v92 = v63[1];
                v63 += 2;
                v65 = vmlaq_n_f32(v65, v84, v91);
                v93 = (float32x4_t)vtrn2q_s32(v78, v80);
                v74 = vmlaq_n_f32(v74, v93, v86);
                v75 = vmlaq_n_f32(v75, v93, v88);
                v76 = vmlaq_n_f32(v76, v93, v90);
                v64 = vmlaq_n_f32(v64, v93, v92);
                v68 -= 2;
              }
              while (v68);
              goto LABEL_30;
            }
          }
          else
          {
            v65 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = v54 - 4;
            v69 = (uint64_t *)v56;
            v70 = (uint64_t *)v53;
            v71 = 0uLL;
            v72 = (uint64_t *)v50;
            v73 = (uint64_t *)v47;
            if (v54 != 4)
              goto LABEL_25;
          }
          v76 = 0uLL;
          v75 = 0uLL;
          v74 = 0uLL;
LABEL_30:
          v100 = (float32x4_t *)(v57 + 4 * v35);
          v101 = (float32x4_t *)(v59 + 4 * v35);
          v102 = (float32x4_t *)(result + 4 * v35);
          v103 = (float32x4_t *)(v62 + 4 * v35);
          v104 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v100, a7), vaddq_f32(v74, v71));
          v105 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v101, a7), vaddq_f32(v75, v67));
          v106 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v102, a7), vaddq_f32(v76, v66));
          v107 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v103, a7), vaddq_f32(v64, v65));
          v108 = (int32x4_t)vzip1q_s64(v104, v106);
          v109 = (int32x4_t)vzip1q_s64(v105, v107);
          v110 = (int32x4_t)vzip2q_s64(v104, v106);
          v111 = (int32x4_t)vzip2q_s64(v105, v107);
          v112 = (float32x4_t)vtrn1q_s32(v108, v109);
          v113 = (float32x4_t)vtrn2q_s32(v108, v109);
          v114 = (float32x4_t)vtrn1q_s32(v110, v111);
          v115 = vmulq_n_f32((float32x4_t)vtrn2q_s32(v110, v111), v43);
          v110.i32[0] = *(_DWORD *)(v52 + 12);
          v116 = vmlsq_lane_f32(v114, v115, *(float32x2_t *)v110.i8, 0);
          v109.i32[0] = *(_DWORD *)(v49 + 8);
          v110.i32[0] = *(_DWORD *)(v49 + 12);
          v117 = vmlsq_lane_f32(v113, v115, *(float32x2_t *)v110.i8, 0);
          v110.i32[0] = v46[3];
          v118 = vmlsq_lane_f32(v112, v115, *(float32x2_t *)v110.i8, 0);
          v119 = vmulq_n_f32(v116, v41);
          v120 = vmlsq_lane_f32(v117, v119, *(float32x2_t *)v109.i8, 0);
          v109.i32[0] = v46[1];
          v116.i32[0] = v46[2];
          v121 = vmulq_n_f32(v120, v39);
          v122 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v118, v119, *(float32x2_t *)v116.f32, 0), v121, *(float32x2_t *)v109.i8, 0), v37);
          v123 = (int32x4_t)vzip1q_s64(v122, (int64x2_t)v119);
          v124 = (int32x4_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v115);
          v125 = (int32x4_t)vzip2q_s64(v122, (int64x2_t)v119);
          v126 = (int32x4_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v115);
          *(int32x4_t *)v100 = vtrn1q_s32(v123, v124);
          *(int32x4_t *)v101 = vtrn2q_s32(v123, v124);
          *(int32x4_t *)v102 = vtrn1q_s32(v125, v126);
          *(int32x4_t *)v103 = vtrn2q_s32(v125, v126);
          v44 += 4;
          a2 = v34;
        }
        while (v44 < v170);
      }
      a3 = v166;
      if (v44 < a2)
        break;
LABEL_41:
      v165 = v33 < 5;
      v33 -= 4;
      if (v165)
        return result;
    }
    v127 = v166 + 4 * (v33 - 4) * a4;
    v128 = (float *)(v127 + 4 * v35);
    v129 = (__int32 *)(v127 + 4 * v33);
    v130 = v166 + 4 * (v33 - 3) * a4;
    v131 = v130 + 4 * v35;
    v132 = (__int32 *)(v130 + 4 * v33);
    v133 = v166 + 4 * (v33 - 2) * a4;
    v134 = v133 + 4 * v35;
    result = v167 - v35;
    v135 = (__int32 *)(v133 + 4 * v33);
    if (v167 - v35 <= 4)
      result = 4;
    v136 = v166 + 4 * (v33 - 1) * a4;
    v137 = v136 + 4 * v35 + 20;
    v138 = (__int32 *)(v136 + 4 * v33);
    while (1)
    {
      v139 = a5 + 4 * v44 * a6;
      v140 = (float *)(v139 + 4 * v33);
      v141 = 0uLL;
      if ((result & 1) != 0)
      {
        v148.i32[0] = *v129;
        v148.i32[1] = *v132;
        v148.i32[2] = *v135;
        v148.i32[3] = *v138;
        v149 = *(_DWORD *)v140++;
        v142 = result - 5;
        v143 = vmlaq_n_f32((float32x4_t)0, v148, *(float *)&v149);
        v144 = (uint64_t *)v137;
        v145 = (uint64_t *)(v135 + 1);
        v146 = (uint64_t *)(v132 + 1);
        v147 = (uint64_t *)(v129 + 1);
        if (result != 5)
        {
          do
          {
LABEL_39:
            v150 = *v147++;
            v151.i64[0] = v150;
            v152 = *v146++;
            v153.i64[0] = v152;
            v154 = *v145++;
            v155 = v154;
            v156 = *v144++;
            v151.i64[1] = v155;
            v153.i64[1] = v156;
            v157 = (float32x4_t)vtrn1q_s32(v151, v153);
            v158 = (float32x4_t)vtrn2q_s32(v151, v153);
            v153.i32[0] = *(__int32 *)v140;
            v159 = v140[1];
            v140 += 2;
            v143 = vmlaq_n_f32(v143, v157, *(float *)v153.i32);
            v141 = vmlaq_n_f32(v141, v158, v159);
            v142 -= 2;
          }
          while (v142);
        }
      }
      else
      {
        v142 = result - 4;
        v143 = 0uLL;
        v144 = (uint64_t *)v138;
        v145 = (uint64_t *)v135;
        v146 = (uint64_t *)v132;
        v147 = (uint64_t *)v129;
        if (result != 4)
          goto LABEL_39;
      }
      v160 = (float32x4_t *)(v139 + 4 * v35);
      v161 = vsubq_f32(vmulq_n_f32(*v160, a7), vaddq_f32(v143, v141));
      v162 = vmuls_lane_f32(v43, v161, 3);
      v163 = v41 * (float)(v161.f32[2] - (float)(v162 * *(float *)(v134 + 12)));
      v164 = v39
           * (float)((float)(v161.f32[1] - (float)(v162 * *(float *)(v131 + 12))) - (float)(v163 * *(float *)(v131 + 8)));
      v160->f32[0] = v37
                   * (float)((float)((float)(v161.f32[0] - (float)(v162 * v128[3])) - (float)(v163 * v128[2]))
                           - (float)(v164 * v128[1]));
      v160->f32[1] = v164;
      v160->f32[2] = v163;
      v160->f32[3] = v162;
      if (++v44 == a2)
        goto LABEL_41;
    }
  }
  return result;
}

float *sgebpUnalignedC_8M4N(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  uint64_t v8;
  uint64_t v9;
  float *result;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v51;
  _OWORD *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 4 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f32;
    do
    {
      v18 = a6;
      v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v29 = *_X2;
      v30 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v33 = *_X2;
      v34 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      _X2 = v11 + 2;
      v38 = v6;
      v39 = v6;
      v40 = v6;
      v41 = v6;
      v42 = v6;
      v43 = v6;
      v44 = v6;
      v46 = *(float32x4_t *)a2;
      v47 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
      v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
      v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
      v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
      v14 = v16;
      v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
      v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
      v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
      v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
      v15 = v17;
      v16 = *(float32x4_t *)result;
      v17 = *(float32x4_t *)(result + 4);
      result += 8;
      v46 = *(float32x4_t *)(a2 + 16);
      v47 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v18 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
          v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
          v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
          v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
          v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
          v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
          v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
          v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
          v14 = *(float32x4_t *)result;
          v15 = *(float32x4_t *)(result + 4);
          v51 = (float32x4_t *)(result + 8);
          v46 = *(float32x4_t *)_X6;
          v52 = _X6 + 1;
          v6 = vmlaq_n_f32(v6, v16, v47.f32[0]);
          v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v47.f32, 1);
          v41 = vmlaq_laneq_f32(v41, v16, v47, 2);
          v43 = vmlaq_laneq_f32(v43, v16, v47, 3);
          v38 = vmlaq_n_f32(v38, v17, v47.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v47.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v47, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v47, 3);
          v16 = *v51;
          v17 = v51[1];
          result = v51[2].f32;
          v47 = *(float32x4_t *)v52;
          _X6 = v52 + 1;
          v18 -= 2;
        }
        while (v18);
        v25 = vaddq_f32(v25, v6);
        v26 = vaddq_f32(v26, v38);
        v29 = vaddq_f32(v29, v39);
        v30 = vaddq_f32(v30, v40);
        v33 = vaddq_f32(v33, v41);
        v34 = vaddq_f32(v34, v42);
        v36 = vaddq_f32(v36, v43);
        v37 = vaddq_f32(v37, v44);
      }
      *v11 = v25;
      v11[1] = v26;
      v53 = (float32x4_t *)((char *)v11 + v12);
      *v53 = v29;
      v53[1] = v30;
      v54 = (float32x4_t *)((char *)v53 + v12);
      *v54 = v33;
      v54[1] = v34;
      v55 = (float32x4_t *)((char *)v54 + v12);
      *v55 = v36;
      v55[1] = v37;
      v11 = _X2;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v8)
    return sgebp_1M4N(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v8, a6);
  return result;
}

void sgemvN_base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, float32x4_t a19, float32x4_t a20,float32x4_t a21,float32x4_t a22,float32x4_t a23,float32x4_t a24,float32x4_t a25,float32x4_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  float32x2_t *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  float v46;
  int32x2_t v47;
  float32x2_t *v48;
  __int128 v49;
  uint64_t v50;
  float32x4_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t *v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int64_t v96;
  float v97;
  float v98;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  float *v122;
  int64_t v123;
  float v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t *v142;
  uint64_t v143;
  float32x4_t *v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t *v156;
  _DWORD *v157;
  uint64_t v158;
  const float *v159;
  float32x4_t v160;
  uint64_t v161;
  float v162;
  float32x4_t *v163;
  float32x4_t v164;
  float32x4_t v165;
  uint64_t v166;
  float *v167;
  uint64_t m;
  int64_t v169;
  float v170;
  float v171;
  int64_t v172;
  float v173;
  float v174;
  uint64_t v175;
  float *v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  int64_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  int64_t v186;
  float32x2_t v187;
  float32x2_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t *v197;
  _DWORD *v198;
  uint64_t v199;
  const float *v200;
  float32x4_t v201;
  uint64_t v202;
  float v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  _DWORD *v208;
  uint64_t i;
  int64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  uint64_t v213;
  float32x4_t *v214;
  float *v215;
  float32x4_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float32x2_t *v220;
  _DWORD *v221;
  const float *v222;
  float32x2_t v223;
  uint64_t v224;
  float v225;
  float32x2_t *v226;
  float32x2_t v227;
  float32x2_t v228;
  float v229;
  uint64_t v230;
  float *v231;
  float *v232;
  int64_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int64_t v238;
  float32x2_t v239;
  float32x2_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int64_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t *v249;
  _DWORD *v250;
  uint64_t v251;
  const float *v252;
  float32x4_t v253;
  uint64_t v254;
  float v255;
  float32x4_t *v256;
  float32x4_t v257;
  float32x4_t v258;
  uint64_t v259;
  float *v260;
  uint64_t j;
  int64_t v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t v265;
  float32x4_t *v266;
  float *v267;
  float32x4_t v268;
  uint64_t v269;
  uint64_t v270;
  float32x2_t *v271;
  float *v272;
  float32x2_t v273;
  __int32 *v274;
  uint64_t v275;
  uint64_t v276;
  float32x2_t *v277;
  _DWORD *v278;
  const float *v279;
  float32x2_t v280;
  uint64_t v281;
  float v282;
  int64_t v283;
  float32x2_t v284;
  float32x2_t v285;
  uint64_t v286;
  float32x4_t v287;
  uint64_t v288;
  uint64_t v289;
  int64_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t *v295;
  _DWORD *v296;
  uint64_t v297;
  const float *v298;
  float32x4_t v299;
  uint64_t v300;
  float v301;
  float32x4_t *v302;
  float32x4_t v303;
  float32x4_t v304;
  uint64_t v305;
  float *v306;
  uint64_t k;
  int64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  uint64_t v311;
  float *v312;
  float *v313;
  int64_t v314;
  float32x2_t v315;
  float32x2_t v316;
  float32x2_t v317;
  float32x2_t v318;
  uint64_t v319;
  float32x4_t *v320;
  float *v321;
  float32x4_t v322;
  uint64_t v323;
  uint64_t v324;
  float *v325;
  float *v326;
  int64_t v327;
  float32x2_t v328;
  float32x2_t v329;
  float32x2_t v330;
  float32x2_t v331;
  uint64_t v332;
  float32x2_t *v333;
  float *v334;
  uint64_t v335;
  float32x2_t v336;
  uint64_t v337;
  uint64_t v338;
  float32x2_t *v339;
  _DWORD *v340;
  const float *v341;
  float32x2_t v342;
  uint64_t v343;
  float v344;
  float32x2_t v345;
  uint64_t v346;
  float32x2_t *v347;
  float *v348;
  uint64_t v349;
  float32x2_t v350;
  uint64_t v351;
  uint64_t v352;
  float32x2_t *v353;
  _DWORD *v354;
  const float *v355;
  float32x2_t v356;
  uint64_t v357;
  float v358;
  float32x2_t v359;
  uint64_t v360;
  float32x4_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  float v365;
  float32x4_t *v366;
  float32x4_t *v367;
  float32x4_t *v368;
  float32x4_t *v369;
  uint64_t v370;
  uint64_t v371;
  __int128 vars0;
  float *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  float32x2_t *v390;
  float32x2_t *v391;
  float32x2_t *v392;
  float32x2_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;

  v51 = (float32x4_t)MEMORY[0x24BDAC7A8](a1, a2);
  v373 = v42;
  v48 = v40;
  LODWORD(v49) = v51.i32[0];
  v50 = v38;
  STACK[0x1218] = *MEMORY[0x24BDAC8D0];
  v51.i32[0] = 1.0;
  v52 = v39 * v38;
  vars0 = v49;
  v370 = v38;
  v371 = v45;
  if (v46 != 1.0)
  {
    *(float *)v47.i32 = v46;
    if (v46 == 0.0)
    {
      if (v38 >= 16 && v52 >= 0x2000)
      {
        v75 = 0;
        v76 = 0;
        v77 = -v41 & v41;
        if (v77 >= 4)
          v77 = 4;
        v78 = __clz(v77) - 61;
        v79 = (1 << v78);
        v399 = v43 << v78;
        v403 = v41 << v78;
        v395 = 4 * v43;
        v80 = 4 * v41;
        v81 = v39 - 1;
        v363 = v45 << 12;
        v82 = 16 * v45;
        v83 = 4 * v45;
        v367 = v44;
        do
        {
          v379 = v44;
          v383 = v76;
          if (v50 - v76 >= 1024)
            v84 = 1024;
          else
            v84 = v50 - v76;
          v375 = v50 - v76;
          if (v50 - v76 >= 1)
          {
            v85 = v50 - (v75 << 10);
            if (v85 >= 1024)
              v85 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v85 - (v85 != 0)) + 4);
          }
          v387 = v75;
          v391 = v48;
          v86 = (uint64_t)v48;
          v87 = v373;
          v88 = v79;
          do
          {
            v89 = (v81 + v88) / v79;
            if (!v89)
              break;
            v51 = gemvN_aligned_mxn<Vector<float,4l>>(v84, v89, v86, v403, v87, v399, (unint64_t)&a38 | 0x10, v51);
            v87 = (float *)((char *)v87 + v395);
            v86 += v80;
            --v88;
          }
          while (v88);
          v50 = v370;
          if (v375 >= 1)
          {
            v90 = 0;
            v91 = v379;
            do
            {
              v92 = v84 - v90;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v90), *(float *)&vars0);
              if (v371 == 1 && v92 >= 4)
              {
                *(float32x4_t *)((char *)v367 + 4 * v383 * v371 + 4 * v90) = v51;
              }
              else
              {
                if (v92 >= 4)
                  v93 = 4;
                else
                  v93 = v84 - v90;
                v94 = (v93 + 4) & (v93 >> 63);
                if (v93 < 0)
                  v93 = 4;
                if (v94 < v93)
                {
                  v95 = (__int32 *)((char *)v91->i32 + v83 * v94);
                  do
                  {
                    a22 = v51;
                    *v95 = *(_DWORD *)((unint64_t)&a22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v94++ & 3)));
                    v95 = (_DWORD *)((char *)v95 + v83);
                  }
                  while (v93 != v94);
                }
              }
              v90 += 4;
              v91 = (float32x4_t *)((char *)v91 + v82);
            }
            while (v90 < v84);
          }
          v76 = v383 + 1024;
          v75 = v387 + 1;
          v48 = v391 + 512;
          v44 = (float32x4_t *)((char *)v379 + v363);
        }
        while (v383 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v125 = 0.0;
            v230 = 2;
            v231 = (float *)v40;
            v124 = 0.0;
            v232 = v42;
            do
            {
              v124 = v124 + (float)(*v231 * *v232);
              v125 = v125 + (float)(v231[v41] * v232[v43]);
              v230 += 2;
              v232 += 2 * v43;
              v231 += 2 * v41;
            }
            while (v230 <= v39);
            v123 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v123 = 0;
            v124 = 0.0;
            v125 = 0.0;
          }
          if (v123 < v39)
            v124 = v124 + (float)(v40->f32[v123 * v41] * v42[v123 * v43]);
          v180 = (float)(v125 + v124) * *(float *)&v49;
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v188 = 0;
            v270 = 2;
            v271 = v40;
            v187 = 0;
            v272 = v42;
            do
            {
              v187 = vmla_n_f32(v187, *v271, *v272);
              v188 = vmla_n_f32(v188, *(float32x2_t *)((char *)v271 + 4 * v41), v272[v43]);
              v270 += 2;
              v272 += 2 * v43;
              v271 += v41;
            }
            while (v270 <= v39);
            v186 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
          }
          if (v186 < v39)
            v187 = vmla_n_f32(v187, *(float32x2_t *)((char *)v40 + 4 * v186 * v41), v42[v186 * v43]);
          v273 = vmul_n_f32(vadd_f32(v188, v187), *(float *)&v49);
          v44->i32[0] = v273.i32[0];
          v274 = &v44->i32[v45];
          goto LABEL_313;
        }
        if (v39 >= 2)
        {
          v233 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v237 = 0;
          v276 = 2;
          v277 = v40;
          v278 = v42;
          v236 = 0;
          v235 = 0;
          v234 = 0;
          v279 = v42;
          do
          {
            v280 = vld1_dup_f32(v279);
            v275 = 8 * v43;
            v279 = (const float *)((char *)v279 + v275);
            v237 = vmla_f32(v237, v280, *v277);
            v235 = vmla_f32(v235, v280, *(float32x2_t *)((char *)v277 + 4));
            v280.i32[0] = v278[v43];
            v234 = vmla_n_f32(v234, *(float32x2_t *)((char *)v277 + 4 * v41), v280.f32[0]);
            v236 = vmla_n_f32(v236, *(float32x2_t *)((char *)v277 + 4 * v41 + 4), v280.f32[0]);
            v276 += 2;
            v277 += v41;
            v278 = v279;
          }
          while (v276 <= v39);
        }
        else
        {
          v233 = 0;
          v234 = 0;
          v235 = 0;
          v236 = 0;
          v237 = 0;
        }
        if (v233 < v39)
        {
          v281 = 4 * v233 * v41;
          v282 = v42[v233 * v43];
          v237 = vmla_n_f32(v237, *(float32x2_t *)((char *)v40 + v281), v282);
          v235 = vmla_n_f32(v235, *(float32x2_t *)((char *)v40 + (v281 | 4)), v282);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->i32[0] = vmul_n_f32(vadd_f32(v234, v237), *(float *)&v49).u32[0];
        v273 = vmul_n_f32(vadd_f32(v236, v235), *(float *)&v49);
        if (v45 != 1)
        {
          v226->i32[0] = v273.i32[0];
          v274 = (__int32 *)v226 + v45;
LABEL_313:
          *v274 = v273.i32[1];
          return;
        }
LABEL_311:
        *v226 = v273;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_227:
        if (v39 >= 2)
        {
          v212 = 0uLL;
          v213 = 2;
          v214 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
          v211 = 0uLL;
          v215 = v373;
          do
          {
            v211 = vmlaq_n_f32(v211, *v214, *v215);
            v212 = vmlaq_n_f32(v212, *(float32x4_t *)((char *)v214 + 4 * v41), v215[v43]);
            v213 += 2;
            v215 += 2 * v43;
            v214 = (float32x4_t *)((char *)v214 + 8 * v41);
          }
          while (v213 <= v39);
          v210 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v210 = 0;
          v211 = 0uLL;
          v212 = 0uLL;
        }
        if (v210 < v39)
          v211 = vmlaq_n_f32(v211, *(float32x4_t *)&v48[-2].f32[v50 + v210 * v41], v373[v210 * v43]);
        v216 = vmulq_n_f32(vaddq_f32(v212, v211), *(float *)&v49);
        v217 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a23 = v216;
            v44->i32[0] = *(_DWORD *)((unint64_t)&a23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v217++ & 3)));
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v217 != 4);
        }
        return;
      }
      v190 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v191 = 8;
        else
          v191 = v50;
        if (v39 >= 2)
        {
          v196 = 0uLL;
          v197 = (float32x4_t *)v48;
          v198 = v373;
          v199 = 2;
          v195 = 0uLL;
          v194 = 0uLL;
          v193 = 0uLL;
          v200 = v373;
          do
          {
            v201 = vld1q_dup_f32(v200);
            v189 = 8 * v43;
            v200 = (const float *)((char *)v200 + v189);
            v196 = vmlaq_f32(v196, v201, *v197);
            v194 = vmlaq_f32(v194, v201, *(float32x4_t *)((char *)v197 + 4 * v191 - 16));
            v201.i32[0] = v198[v43];
            v193 = vmlaq_n_f32(v193, *(float32x4_t *)((char *)v197 + 4 * v41), v201.f32[0]);
            v195 = vmlaq_n_f32(v195, *(float32x4_t *)((char *)v197 + 4 * v41 + 4 * v191 - 16), v201.f32[0]);
            v199 += 2;
            v197 = (float32x4_t *)((char *)v197 + 8 * v41);
            v198 = v200;
          }
          while (v199 <= v39);
          v192 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v192 = 0;
          v193 = 0uLL;
          v194 = 0uLL;
          v195 = 0uLL;
          v196 = 0uLL;
        }
        v202 = v191 - 4;
        if (v192 < v39)
        {
          v203 = v373[v192 * v43];
          v196 = vmlaq_n_f32(v196, *(float32x4_t *)&v48->f32[v192 * v41], v203);
          v194 = vmlaq_n_f32(v194, *(float32x4_t *)&v48->f32[v192 * v41 + v202], v203);
        }
        v204 = (float32x4_t *)((char *)v44 + 4 * v202 * v45);
        v205 = vmulq_n_f32(vaddq_f32(v193, v196), *(float *)&v49);
        if (v45 == 1 && v191 == 8)
        {
          *v44 = v205;
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
        }
        else
        {
          if (v191 >= 4)
            v207 = 0;
          else
            v207 = v191;
          if (v191 < 4)
            v202 = 4;
          if (v207 < v202)
          {
            v208 = (__int32 *)((char *)v44->i32 + v190 * v207);
            do
            {
              a25 = v205;
              *v208 = *(_DWORD *)((unint64_t)&a25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v207++ & 3)));
              v208 = (_DWORD *)((char *)v208 + v190);
            }
            while (v202 != v207);
          }
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
          if (v45 != 1)
          {
            for (i = 0; i != 4; ++i)
            {
              a24 = v206;
              v204->i32[0] = *(_DWORD *)((unint64_t)&a24 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
              v204 = (float32x4_t *)((char *)v204 + v190);
            }
            goto LABEL_225;
          }
        }
        *v204 = v206;
LABEL_225:
        v48 = (float32x2_t *)((char *)v48 + 4 * v191);
        v44 = (float32x4_t *)((char *)v44 + 4 * v191 * v45);
        v50 -= v191;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_227;
        }
      }
    }
    v100 = (v52 & 0xFFFFFFFFFFFFE000) != 0 && v38 > 15;
    v51.i32[0] = -1.0;
    if (v46 == -1.0)
    {
      if (v100)
      {
        v101 = 0;
        v102 = 0;
        v103 = -v41 & v41;
        if (v103 >= 4)
          v103 = 4;
        v104 = __clz(v103) - 61;
        v105 = (1 << v104);
        v400 = v43 << v104;
        v404 = v41 << v104;
        v396 = 4 * v43;
        v106 = 4 * v41;
        v107 = v39 - 1;
        v364 = v45 << 12;
        v108 = 16 * v45;
        v109 = 4 * v45;
        v368 = v44;
        do
        {
          v380 = v44;
          v384 = v102;
          if (v50 - v102 >= 1024)
            v110 = 1024;
          else
            v110 = v50 - v102;
          v376 = v50 - v102;
          if (v50 - v102 >= 1)
          {
            v111 = v50 - (v101 << 10);
            if (v111 >= 1024)
              v111 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v111 - (v111 != 0)) + 4);
          }
          v388 = v101;
          v392 = v48;
          v112 = (uint64_t)v48;
          v113 = v373;
          v114 = v105;
          do
          {
            v115 = (v107 + v114) / v105;
            if (!v115)
              break;
            v51 = gemvN_aligned_mxn<Vector<float,4l>>(v110, v115, v112, v404, v113, v400, (unint64_t)&a38 | 0x10, v51);
            v113 = (float *)((char *)v113 + v396);
            v112 += v106;
            --v114;
          }
          while (v114);
          v50 = v370;
          if (v376 >= 1)
          {
            v116 = 0;
            v117 = v380;
            do
            {
              v118 = v110 - v116;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v116), *(float *)&vars0);
              if (v371 == 1 && v118 >= 4)
              {
                v119 = (float32x4_t *)((char *)v368 + 4 * v384 * v371 + 4 * v116);
                v51 = vsubq_f32(v51, *v119);
                *v119 = v51;
              }
              else
              {
                if (v118 >= 4)
                  v120 = 4;
                else
                  v120 = v110 - v116;
                v121 = (v120 + 4) & (v120 >> 63);
                if (v120 < 0)
                  v120 = 4;
                if (v121 < v120)
                {
                  v122 = (float *)((char *)v117->f32 + v109 * v121);
                  do
                  {
                    a26 = v51;
                    *v122 = *(float *)((unint64_t)&a26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v121++ & 3))) - *v122;
                    v122 = (float *)((char *)v122 + v109);
                  }
                  while (v120 != v121);
                }
              }
              v116 += 4;
              v117 = (float32x4_t *)((char *)v117 + v108);
            }
            while (v116 < v110);
          }
          v102 = v384 + 1024;
          v101 = v388 + 1;
          v48 = v392 + 512;
          v44 = (float32x4_t *)((char *)v380 + v364);
        }
        while (v384 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v171 = 0.0;
            v311 = 2;
            v312 = (float *)v40;
            v170 = 0.0;
            v313 = v42;
            do
            {
              v170 = v170 + (float)(*v312 * *v313);
              v171 = v171 + (float)(v312[v41] * v313[v43]);
              v311 += 2;
              v313 += 2 * v43;
              v312 += 2 * v41;
            }
            while (v311 <= v39);
            v169 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v169 = 0;
            v170 = 0.0;
            v171 = 0.0;
          }
          if (v169 < v39)
            v170 = v170 + (float)(v40->f32[v169 * v41] * v42[v169 * v43]);
          v180 = -(float)(v44->f32[0] - (float)(*(float *)&v49 * (float)(v171 + v170)));
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v240 = 0;
            v332 = 2;
            v333 = v40;
            v239 = 0;
            v334 = v42;
            do
            {
              v239 = vmla_n_f32(v239, *v333, *v334);
              v240 = vmla_n_f32(v240, *(float32x2_t *)((char *)v333 + 4 * v41), v334[v43]);
              v332 += 2;
              v334 += 2 * v43;
              v333 += v41;
            }
            while (v332 <= v39);
            v238 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v238 = 0;
            v239 = 0;
            v240 = 0;
          }
          if (v238 < v39)
            v239 = vmla_n_f32(v239, *(float32x2_t *)((char *)v40 + 4 * v238 * v41), v42[v238 * v43]);
          v335 = 0;
          v336 = vmul_n_f32(vadd_f32(v240, v239), *(float *)&v49);
          do
          {
            a28 = v336;
            v44->f32[0] = *(float *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v335++ & 1))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v335 != 2);
          return;
        }
        if (v39 >= 2)
        {
          v314 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v318 = 0;
          v338 = 2;
          v339 = v40;
          v340 = v42;
          v317 = 0;
          v316 = 0;
          v315 = 0;
          v341 = v42;
          do
          {
            v342 = vld1_dup_f32(v341);
            v337 = 8 * v43;
            v341 = (const float *)((char *)v341 + v337);
            v318 = vmla_f32(v318, v342, *v339);
            v316 = vmla_f32(v316, v342, *(float32x2_t *)((char *)v339 + 4));
            v342.i32[0] = v340[v43];
            v315 = vmla_n_f32(v315, *(float32x2_t *)((char *)v339 + 4 * v41), v342.f32[0]);
            v317 = vmla_n_f32(v317, *(float32x2_t *)((char *)v339 + 4 * v41 + 4), v342.f32[0]);
            v338 += 2;
            v339 += v41;
            v340 = v341;
          }
          while (v338 <= v39);
        }
        else
        {
          v314 = 0;
          v315 = 0;
          v316 = 0;
          v317 = 0;
          v318 = 0;
        }
        if (v314 < v39)
        {
          v343 = 4 * v314 * v41;
          v344 = v42[v314 * v43];
          v318 = vmla_n_f32(v318, *(float32x2_t *)((char *)v40 + v343), v344);
          v316 = vmla_n_f32(v316, *(float32x2_t *)((char *)v40 + (v343 | 4)), v344);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->f32[0] = vmul_n_f32(vadd_f32(v315, v318), *(float *)&v49).f32[0] - v44->f32[0];
        v345 = vmul_n_f32(vadd_f32(v317, v316), *(float *)&v49);
        if (v45 == 1)
        {
          v228 = vsub_f32(v345, *v226);
          goto LABEL_246;
        }
        v226->f32[0] = v345.f32[0] - v226->f32[0];
        v229 = v345.f32[1] - v226->f32[v45];
LABEL_248:
        v226->f32[v45] = v229;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_290:
        if (v39 >= 2)
        {
          v264 = 0uLL;
          v265 = 2;
          v266 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
          v263 = 0uLL;
          v267 = v373;
          do
          {
            v263 = vmlaq_n_f32(v263, *v266, *v267);
            v264 = vmlaq_n_f32(v264, *(float32x4_t *)((char *)v266 + 4 * v41), v267[v43]);
            v265 += 2;
            v267 += 2 * v43;
            v266 = (float32x4_t *)((char *)v266 + 8 * v41);
          }
          while (v265 <= v39);
          v262 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v262 = 0;
          v263 = 0uLL;
          v264 = 0uLL;
        }
        if (v262 < v39)
          v263 = vmlaq_n_f32(v263, *(float32x4_t *)&v48[-2].f32[v50 + v262 * v41], v373[v262 * v43]);
        v268 = vmulq_n_f32(vaddq_f32(v264, v263), *(float *)&v49);
        v269 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a29 = v268;
            v44->f32[0] = *(float *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v269++ & 3))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v269 != 4);
        }
        return;
      }
      v242 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v243 = 8;
        else
          v243 = v50;
        if (v39 >= 2)
        {
          v248 = 0uLL;
          v249 = (float32x4_t *)v48;
          v250 = v373;
          v251 = 2;
          v247 = 0uLL;
          v246 = 0uLL;
          v245 = 0uLL;
          v252 = v373;
          do
          {
            v253 = vld1q_dup_f32(v252);
            v241 = 8 * v43;
            v252 = (const float *)((char *)v252 + v241);
            v248 = vmlaq_f32(v248, v253, *v249);
            v246 = vmlaq_f32(v246, v253, *(float32x4_t *)((char *)v249 + 4 * v243 - 16));
            v253.i32[0] = v250[v43];
            v245 = vmlaq_n_f32(v245, *(float32x4_t *)((char *)v249 + 4 * v41), v253.f32[0]);
            v247 = vmlaq_n_f32(v247, *(float32x4_t *)((char *)v249 + 4 * v41 + 4 * v243 - 16), v253.f32[0]);
            v251 += 2;
            v249 = (float32x4_t *)((char *)v249 + 8 * v41);
            v250 = v252;
          }
          while (v251 <= v39);
          v244 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v244 = 0;
          v245 = 0uLL;
          v246 = 0uLL;
          v247 = 0uLL;
          v248 = 0uLL;
        }
        v254 = v243 - 4;
        if (v244 < v39)
        {
          v255 = v373[v244 * v43];
          v248 = vmlaq_n_f32(v248, *(float32x4_t *)&v48->f32[v244 * v41], v255);
          v246 = vmlaq_n_f32(v246, *(float32x4_t *)&v48->f32[v244 * v41 + v254], v255);
        }
        v256 = (float32x4_t *)((char *)v44 + 4 * v254 * v45);
        v257 = vmulq_n_f32(vaddq_f32(v245, v248), *(float *)&v49);
        if (v45 == 1 && v243 == 8)
        {
          *v44 = vsubq_f32(v257, *v44);
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
        }
        else
        {
          if (v243 >= 4)
            v259 = 0;
          else
            v259 = v243;
          if (v243 < 4)
            v254 = 4;
          if (v259 < v254)
          {
            v260 = (float *)((char *)v44->f32 + v242 * v259);
            do
            {
              a31 = v257;
              *v260 = *(float *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v259++ & 3))) - *v260;
              v260 = (float *)((char *)v260 + v242);
            }
            while (v254 != v259);
          }
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
          if (v45 != 1)
          {
            for (j = 0; j != 4; ++j)
            {
              a30 = v258;
              v256->f32[0] = *(float *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) - v256->f32[0];
              v256 = (float32x4_t *)((char *)v256 + v242);
            }
            goto LABEL_288;
          }
        }
        *v256 = vsubq_f32(v258, *v256);
LABEL_288:
        v48 = (float32x2_t *)((char *)v48 + 4 * v243);
        v44 = (float32x4_t *)((char *)v44 + 4 * v243 * v45);
        v50 -= v243;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_290;
        }
      }
    }
    if (v100)
    {
      v126 = 0;
      v127 = 0;
      v128 = -v41 & v41;
      if (v128 >= 4)
        v128 = 4;
      v129 = __clz(v128) - 61;
      v130 = (1 << v129);
      v401 = v43 << v129;
      v405 = v41 << v129;
      v397 = 4 * v43;
      v131 = 4 * v41;
      v132 = v39 - 1;
      v360 = v45 << 12;
      v133 = 16 * v45;
      v134 = 4 * v45;
      v369 = v44;
      v361 = (float32x4_t)vdupq_lane_s32(v47, 0);
      v365 = v46;
      do
      {
        v381 = v44;
        v385 = v127;
        if (v50 - v127 >= 1024)
          v135 = 1024;
        else
          v135 = v50 - v127;
        v377 = v50 - v127;
        if (v50 - v127 >= 1)
        {
          v136 = v50 - (v126 << 10);
          if (v136 >= 1024)
            v136 = 1024;
          bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v136 - (v136 != 0)) + 4);
        }
        v389 = v126;
        v393 = v48;
        v137 = (uint64_t)v48;
        v138 = v373;
        v139 = v130;
        do
        {
          v140 = (v132 + v139) / v130;
          if (!v140)
            break;
          v51 = gemvN_aligned_mxn<Vector<float,4l>>(v135, v140, v137, v405, v138, v401, (unint64_t)&a38 | 0x10, v51);
          v138 = (float *)((char *)v138 + v397);
          v137 += v131;
          --v139;
        }
        while (v139);
        v50 = v370;
        if (v377 >= 1)
        {
          v141 = 0;
          v142 = v381;
          do
          {
            v143 = v135 - v141;
            v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v141), *(float *)&vars0);
            if (v371 == 1 && v143 >= 4)
            {
              v144 = (float32x4_t *)((char *)v369 + 4 * v385 * v371 + 4 * v141);
              v51 = vmlaq_f32(v51, *v144, v361);
              *v144 = v51;
            }
            else
            {
              if (v143 >= 4)
                v145 = 4;
              else
                v145 = v135 - v141;
              v146 = (v145 + 4) & (v145 >> 63);
              if (v145 < 0)
                v145 = 4;
              if (v146 < v145)
              {
                v147 = (float *)((char *)v142->f32 + v134 * v146);
                do
                {
                  a32 = v51;
                  *v147 = *(float *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v146++ & 3)))
                        + (float)(v365 * *v147);
                  v147 = (float *)((char *)v147 + v134);
                }
                while (v145 != v146);
              }
            }
            v141 += 4;
            v142 = (float32x4_t *)((char *)v142 + v133);
          }
          while (v141 < v135);
        }
        v127 = v385 + 1024;
        v126 = v389 + 1;
        v48 = v393 + 512;
        v44 = (float32x4_t *)((char *)v381 + v360);
      }
      while (v385 + 1024 < v370);
      return;
    }
    if (v38 < 1)
      return;
    if ((unint64_t)v38 < 4)
    {
      if ((unint64_t)v38 < 2)
      {
        if (v39 >= 2)
        {
          v174 = 0.0;
          v324 = 2;
          v325 = (float *)v40;
          v173 = 0.0;
          v326 = v42;
          do
          {
            v173 = v173 + (float)(*v325 * *v326);
            v174 = v174 + (float)(v325[v41] * v326[v43]);
            v324 += 2;
            v326 += 2 * v43;
            v325 += 2 * v41;
          }
          while (v324 <= v39);
          v172 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v172 = 0;
          v173 = 0.0;
          v174 = 0.0;
        }
        if (v172 < v39)
          v173 = v173 + (float)(v40->f32[v172 * v41] * v42[v172 * v43]);
        v178 = v174 + v173;
        v179 = v44->f32[0] * *(float *)v47.i32;
        goto LABEL_194;
      }
      if (v38 == 2)
      {
        if (v39 >= 2)
        {
          v285 = 0;
          v346 = 2;
          v347 = v40;
          v284 = 0;
          v348 = v42;
          do
          {
            v284 = vmla_n_f32(v284, *v347, *v348);
            v285 = vmla_n_f32(v285, *(float32x2_t *)((char *)v347 + 4 * v41), v348[v43]);
            v346 += 2;
            v348 += 2 * v43;
            v347 += v41;
          }
          while (v346 <= v39);
          v283 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v283 = 0;
          v284 = 0;
          v285 = 0;
        }
        if (v283 < v39)
          v284 = vmla_n_f32(v284, *(float32x2_t *)((char *)v40 + 4 * v283 * v41), v42[v283 * v43]);
        v349 = 0;
        v350 = vmul_n_f32(vadd_f32(v285, v284), *(float *)&v49);
        do
        {
          a34 = v350;
          v44->f32[0] = *(float *)((unint64_t)&a34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v349++ & 1)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v349 != 2);
        return;
      }
      if (v39 >= 2)
      {
        v327 = v39 & 0xFFFFFFFFFFFFFFFELL;
        v331 = 0;
        v352 = 2;
        v353 = v40;
        v354 = v42;
        v330 = 0;
        v329 = 0;
        v328 = 0;
        v355 = v42;
        do
        {
          v356 = vld1_dup_f32(v355);
          v351 = 8 * v43;
          v355 = (const float *)((char *)v355 + v351);
          v331 = vmla_f32(v331, v356, *v353);
          v329 = vmla_f32(v329, v356, *(float32x2_t *)((char *)v353 + 4));
          v356.i32[0] = v354[v43];
          v328 = vmla_n_f32(v328, *(float32x2_t *)((char *)v353 + 4 * v41), v356.f32[0]);
          v330 = vmla_n_f32(v330, *(float32x2_t *)((char *)v353 + 4 * v41 + 4), v356.f32[0]);
          v352 += 2;
          v353 += v41;
          v354 = v355;
        }
        while (v352 <= v39);
      }
      else
      {
        v327 = 0;
        v328 = 0;
        v329 = 0;
        v330 = 0;
        v331 = 0;
      }
      if (v327 < v39)
      {
        v357 = 4 * v327 * v41;
        v358 = v42[v327 * v43];
        v331 = vmla_n_f32(v331, *(float32x2_t *)((char *)v40 + v357), v358);
        v329 = vmla_n_f32(v329, *(float32x2_t *)((char *)v40 + (v357 | 4)), v358);
      }
      v226 = (float32x2_t *)&v44->f32[v45];
      v44->f32[0] = vmul_n_f32(vadd_f32(v328, v331), *(float *)&v49).f32[0] + (float)(*(float *)v47.i32 * v44->f32[0]);
      v359 = vmul_n_f32(vadd_f32(v330, v329), *(float *)&v49);
      if (v45 != 1)
      {
        v226->f32[0] = v359.f32[0] + (float)(*(float *)v47.i32 * v226->f32[0]);
        v229 = v359.f32[1] + (float)(*(float *)v47.i32 * v226->f32[v45]);
        goto LABEL_248;
      }
      v273 = vmla_f32(v359, *v226, (float32x2_t)vdup_lane_s32(v47, 0));
      goto LABEL_311;
    }
    if (v38 == 4)
    {
      v50 = 4;
LABEL_344:
      if (v39 >= 2)
      {
        v310 = 0uLL;
        v319 = 2;
        v320 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
        v309 = 0uLL;
        v321 = v373;
        do
        {
          v309 = vmlaq_n_f32(v309, *v320, *v321);
          v310 = vmlaq_n_f32(v310, *(float32x4_t *)((char *)v320 + 4 * v41), v321[v43]);
          v319 += 2;
          v321 += 2 * v43;
          v320 = (float32x4_t *)((char *)v320 + 8 * v41);
        }
        while (v319 <= v39);
        v308 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v308 = 0;
        v309 = 0uLL;
        v310 = 0uLL;
      }
      if (v308 < v39)
        v309 = vmlaq_n_f32(v309, *(float32x4_t *)&v48[-2].f32[v50 + v308 * v41], v373[v308 * v43]);
      v322 = vmulq_n_f32(vaddq_f32(v310, v309), *(float *)&v49);
      v323 = 4 - v50;
      if (4 - v50 <= 3)
      {
        do
        {
          a35 = v322;
          v44->f32[0] = *(float *)((unint64_t)&a35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v323++ & 3)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v323 != 4);
      }
      return;
    }
    v287 = (float32x4_t)vdupq_lane_s32(v47, 0);
    v288 = 4 * v45;
    while (1)
    {
      if (v50 >= 8)
        v289 = 8;
      else
        v289 = v50;
      if (v39 >= 2)
      {
        v294 = 0uLL;
        v295 = (float32x4_t *)v48;
        v296 = v373;
        v297 = 2;
        v293 = 0uLL;
        v292 = 0uLL;
        v291 = 0uLL;
        v298 = v373;
        do
        {
          v299 = vld1q_dup_f32(v298);
          v286 = 8 * v43;
          v298 = (const float *)((char *)v298 + v286);
          v294 = vmlaq_f32(v294, v299, *v295);
          v292 = vmlaq_f32(v292, v299, *(float32x4_t *)((char *)v295 + 4 * v289 - 16));
          v299.i32[0] = v296[v43];
          v291 = vmlaq_n_f32(v291, *(float32x4_t *)((char *)v295 + 4 * v41), v299.f32[0]);
          v293 = vmlaq_n_f32(v293, *(float32x4_t *)((char *)v295 + 4 * v41 + 4 * v289 - 16), v299.f32[0]);
          v297 += 2;
          v295 = (float32x4_t *)((char *)v295 + 8 * v41);
          v296 = v298;
        }
        while (v297 <= v39);
        v290 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v290 = 0;
        v291 = 0uLL;
        v292 = 0uLL;
        v293 = 0uLL;
        v294 = 0uLL;
      }
      v300 = v289 - 4;
      if (v290 < v39)
      {
        v301 = v373[v290 * v43];
        v294 = vmlaq_n_f32(v294, *(float32x4_t *)&v48->f32[v290 * v41], v301);
        v292 = vmlaq_n_f32(v292, *(float32x4_t *)&v48->f32[v290 * v41 + v300], v301);
      }
      v302 = (float32x4_t *)((char *)v44 + 4 * v300 * v45);
      v303 = vmulq_n_f32(vaddq_f32(v291, v294), *(float *)&v49);
      if (v45 == 1 && v289 == 8)
      {
        *v44 = vmlaq_f32(v303, *v44, v287);
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
      }
      else
      {
        if (v289 >= 4)
          v305 = 0;
        else
          v305 = v289;
        if (v289 < 4)
          v300 = 4;
        if (v305 < v300)
        {
          v306 = (float *)((char *)v44->f32 + v288 * v305);
          do
          {
            a37 = v303;
            *v306 = *(float *)((unint64_t)&a37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v305++ & 3)))
                  + (float)(*(float *)v47.i32 * *v306);
            v306 = (float *)((char *)v306 + v288);
          }
          while (v300 != v305);
        }
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
        if (v45 != 1)
        {
          for (k = 0; k != 4; ++k)
          {
            a36 = v304;
            v302->f32[0] = *(float *)((unint64_t)&a36 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)))
                         + (float)(*(float *)v47.i32 * v302->f32[0]);
            v302 = (float32x4_t *)((char *)v302 + v288);
          }
          goto LABEL_342;
        }
      }
      *v302 = vmlaq_f32(v304, *v302, v287);
LABEL_342:
      v48 = (float32x2_t *)((char *)v48 + 4 * v289);
      v44 = (float32x4_t *)((char *)v44 + 4 * v289 * v45);
      v50 -= v289;
      if (v50 <= 4)
      {
        if (v50 < 1)
          return;
        goto LABEL_344;
      }
    }
  }
  if (v38 >= 16 && v52 >= 0x2000)
  {
    v53 = 0;
    v54 = 0;
    v55 = -v41 & v41;
    if (v55 >= 4)
      v55 = 4;
    v56 = __clz(v55) - 61;
    v57 = (1 << v56);
    v398 = v43 << v56;
    v402 = v41 << v56;
    v394 = 4 * v43;
    v58 = 4 * v41;
    v59 = v39 - 1;
    v362 = v45 << 12;
    v60 = 16 * v45;
    v61 = 4 * v45;
    v366 = v44;
    do
    {
      v378 = v44;
      v382 = v54;
      if (v50 - v54 >= 1024)
        v62 = 1024;
      else
        v62 = v50 - v54;
      v374 = v50 - v54;
      if (v50 - v54 >= 1)
      {
        v63 = v50 - (v53 << 10);
        if (v63 >= 1024)
          v63 = 1024;
        bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v63 - (v63 != 0)) + 4);
      }
      v386 = v53;
      v390 = v48;
      v64 = (uint64_t)v48;
      v65 = v373;
      v66 = v57;
      do
      {
        v67 = (v59 + v66) / v57;
        if (!v67)
          break;
        v51 = gemvN_aligned_mxn<Vector<float,4l>>(v62, v67, v64, v402, v65, v398, (unint64_t)&a38 | 0x10, v51);
        v65 = (float *)((char *)v65 + v394);
        v64 += v58;
        --v66;
      }
      while (v66);
      v50 = v370;
      if (v374 >= 1)
      {
        v68 = 0;
        v69 = v378;
        do
        {
          v70 = v62 - v68;
          v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v68), *(float *)&vars0);
          if (v371 == 1 && v70 >= 4)
          {
            v71 = (float32x4_t *)((char *)v366 + 4 * v382 * v371 + 4 * v68);
            v51 = vaddq_f32(v51, *v71);
            *v71 = v51;
          }
          else
          {
            if (v70 >= 4)
              v72 = 4;
            else
              v72 = v62 - v68;
            v73 = (v72 + 4) & (v72 >> 63);
            if (v72 < 0)
              v72 = 4;
            if (v73 < v72)
            {
              v74 = (float *)((char *)v69->f32 + v61 * v73);
              do
              {
                a19 = v51;
                *v74 = *(float *)((unint64_t)&a19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73++ & 3))) + *v74;
                v74 = (float *)((char *)v74 + v61);
              }
              while (v72 != v73);
            }
          }
          v68 += 4;
          v69 = (float32x4_t *)((char *)v69 + v60);
        }
        while (v68 < v62);
      }
      v54 = v382 + 1024;
      v53 = v386 + 1;
      v48 = v390 + 512;
      v44 = (float32x4_t *)((char *)v378 + v362);
    }
    while (v382 + 1024 < v370);
    return;
  }
  if (v38 < 1)
    return;
  if ((unint64_t)v38 < 4)
  {
    if ((unint64_t)v38 < 2)
    {
      if (v39 >= 2)
      {
        v98 = 0.0;
        v175 = 2;
        v176 = (float *)v40;
        v97 = 0.0;
        v177 = v42;
        do
        {
          v97 = v97 + (float)(*v176 * *v177);
          v98 = v98 + (float)(v176[v41] * v177[v43]);
          v175 += 2;
          v177 += 2 * v43;
          v176 += 2 * v41;
        }
        while (v175 <= v39);
        v96 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v96 = 0;
        v97 = 0.0;
        v98 = 0.0;
      }
      if (v96 < v39)
        v97 = v97 + (float)(v40->f32[v96 * v41] * v42[v96 * v43]);
      v178 = v98 + v97;
      v179 = v44->f32[0];
LABEL_194:
      v180 = v179 + (float)(*(float *)&v49 * v178);
LABEL_352:
      v44->f32[0] = v180;
      return;
    }
    if (v38 == 2)
    {
      gemvN_1xn<Vector<float,2l>,ScaleOne>(-2, v39, v40, v41, v42, v43, (float32x2_t *)v44, v45, *(float *)&v49);
      return;
    }
    if (v39 >= 2)
    {
      v181 = v39 & 0xFFFFFFFFFFFFFFFELL;
      v185 = 0;
      v219 = 2;
      v220 = v40;
      v221 = v42;
      v184 = 0;
      v183 = 0;
      v182 = 0;
      v222 = v42;
      do
      {
        v223 = vld1_dup_f32(v222);
        v218 = 8 * v43;
        v222 = (const float *)((char *)v222 + v218);
        v185 = vmla_f32(v185, v223, *v220);
        v183 = vmla_f32(v183, v223, *(float32x2_t *)((char *)v220 + 4));
        v223.i32[0] = v221[v43];
        v182 = vmla_n_f32(v182, *(float32x2_t *)((char *)v220 + 4 * v41), v223.f32[0]);
        v184 = vmla_n_f32(v184, *(float32x2_t *)((char *)v220 + 4 * v41 + 4), v223.f32[0]);
        v219 += 2;
        v220 += v41;
        v221 = v222;
      }
      while (v219 <= v39);
    }
    else
    {
      v181 = 0;
      v182 = 0;
      v183 = 0;
      v184 = 0;
      v185 = 0;
    }
    if (v181 < v39)
    {
      v224 = 4 * v181 * v41;
      v225 = v42[v181 * v43];
      v185 = vmla_n_f32(v185, *(float32x2_t *)((char *)v40 + v224), v225);
      v183 = vmla_n_f32(v183, *(float32x2_t *)((char *)v40 + (v224 | 4)), v225);
    }
    v226 = (float32x2_t *)&v44->f32[v45];
    v44->f32[0] = v44->f32[0] + vmul_n_f32(vadd_f32(v182, v185), *(float *)&v49).f32[0];
    v227 = vmul_n_f32(vadd_f32(v184, v183), *(float *)&v49);
    if (v45 == 1)
    {
      v228 = vadd_f32(v227, *v226);
LABEL_246:
      *v226 = v228;
      return;
    }
    v226->f32[0] = v227.f32[0] + v226->f32[0];
    v229 = v227.f32[1] + v226->f32[v45];
    goto LABEL_248;
  }
  if (v38 == 4)
  {
    v50 = 4;
    goto LABEL_174;
  }
  v149 = 4 * v45;
  do
  {
    if (v50 >= 8)
      v150 = 8;
    else
      v150 = v50;
    if (v39 >= 2)
    {
      v155 = 0uLL;
      v156 = (float32x4_t *)v48;
      v157 = v373;
      v158 = 2;
      v154 = 0uLL;
      v153 = 0uLL;
      v152 = 0uLL;
      v159 = v373;
      do
      {
        v160 = vld1q_dup_f32(v159);
        v148 = 8 * v43;
        v159 = (const float *)((char *)v159 + v148);
        v155 = vmlaq_f32(v155, v160, *v156);
        v153 = vmlaq_f32(v153, v160, *(float32x4_t *)((char *)v156 + 4 * v150 - 16));
        v160.i32[0] = v157[v43];
        v152 = vmlaq_n_f32(v152, *(float32x4_t *)((char *)v156 + 4 * v41), v160.f32[0]);
        v154 = vmlaq_n_f32(v154, *(float32x4_t *)((char *)v156 + 4 * v41 + 4 * v150 - 16), v160.f32[0]);
        v158 += 2;
        v156 = (float32x4_t *)((char *)v156 + 8 * v41);
        v157 = v159;
      }
      while (v158 <= v39);
      v151 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v151 = 0;
      v152 = 0uLL;
      v153 = 0uLL;
      v154 = 0uLL;
      v155 = 0uLL;
    }
    v161 = v150 - 4;
    if (v151 < v39)
    {
      v162 = v373[v151 * v43];
      v155 = vmlaq_n_f32(v155, *(float32x4_t *)&v48->f32[v151 * v41], v162);
      v153 = vmlaq_n_f32(v153, *(float32x4_t *)&v48->f32[v151 * v41 + v161], v162);
    }
    v163 = (float32x4_t *)((char *)v44 + 4 * v161 * v45);
    v164 = vmulq_n_f32(vaddq_f32(v152, v155), *(float *)&v49);
    if (v45 == 1 && v150 == 8)
    {
      *v44 = vaddq_f32(v164, *v44);
      v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
LABEL_169:
      *v163 = vaddq_f32(v165, *v163);
      goto LABEL_172;
    }
    if (v150 >= 4)
      v166 = 0;
    else
      v166 = v150;
    if (v150 < 4)
      v161 = 4;
    if (v166 < v161)
    {
      v167 = (float *)((char *)v44->f32 + v149 * v166);
      do
      {
        a21 = v164;
        *v167 = *(float *)((unint64_t)&a21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v166++ & 3))) + *v167;
        v167 = (float *)((char *)v167 + v149);
      }
      while (v161 != v166);
    }
    v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
    if (v45 == 1)
      goto LABEL_169;
    for (m = 0; m != 4; ++m)
    {
      a20 = v165;
      v163->f32[0] = *(float *)((unint64_t)&a20 & 0xFFFFFFFFFFFFFFF3 | (4 * (m & 3))) + v163->f32[0];
      v163 = (float32x4_t *)((char *)v163 + v149);
    }
LABEL_172:
    v48 = (float32x2_t *)((char *)v48 + 4 * v150);
    v44 = (float32x4_t *)((char *)v44 + 4 * v150 * v45);
    v50 -= v150;
  }
  while (v50 > 4);
  if (v50 >= 1)
LABEL_174:
    gemvN_1xn<Vector<float,4l>,ScaleOne>(-v50, v39, (float32x4_t *)((char *)&v48[-2] + 4 * v50), v41, v373, v43, (float32x4_t *)((char *)v44 + 4 * (v50 - 4) * v45), v45, *(float *)&v49);
}

uint64_t sgemvT_packed_base(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7, float _S0, float a9)
{
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t *v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  __int8 *v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v64;
  float32x4_t v66;
  float32x4_t v73;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t *v91;
  float32x4_t *v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t i;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __int8 *v103;
  float32x2_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float v113;
  uint64_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float *v129;
  float32x4_t *v132;
  float32x4_t v133;
  float32x4_t *v134;
  float32x4_t *v135;
  uint64_t j;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x2_t v141;
  float32x2_t *v142;
  int8x16_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  __int8 *v161;
  uint64_t v162;
  float32x4_t *v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  float32x4_t *v174;
  float32x4_t *v175;
  float32x4_t *v176;
  float *v177;
  float32x4_t v178;
  float32x4_t v179;
  uint64_t v180;
  float32x4_t *v181;
  uint64_t v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t *v185;
  float32x4_t *v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t *v199;
  uint64_t k;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  __int8 *v207;
  float32x4_t v208;
  uint64_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  int8x16_t v215;
  int8x16_t v216;
  float32x4_t *v217;
  uint64_t v218;
  float32x4_t *v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t *v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float *v229;
  float32x4_t v230;
  float32x4_t *v231;
  float32x4_t v232;
  float32x4_t *v233;
  float32x4_t *v234;
  uint64_t m;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int8x16_t v239;
  float32x2_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x2_t v245;
  float32x2_t *v246;
  int8x16_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float32x4_t *v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t v263;
  __int8 *v264;
  uint64_t v265;
  float32x4_t *v266;
  uint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t *v275;
  float32x4_t *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  float32x4_t *v279;
  float *v280;
  uint64_t v289;
  float32x4_t *v290;
  uint64_t v291;
  float32x4_t *v292;
  uint64_t v293;
  float32x4_t *v294;
  float32x4_t *v295;
  uint64_t v296;
  uint64_t v297;
  float32x4_t *v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  float32x4_t *v306;
  float32x4_t *v307;
  uint64_t n;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  __int8 *v315;
  float32x2_t v320;
  float32x2_t *v321;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float32x4_t *v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t v338;
  __int8 *v339;
  uint64_t v340;
  float32x4_t *v341;
  uint64_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t *v350;
  float32x4_t *v351;
  float32x4_t *v352;
  float32x4_t *v353;
  float32x4_t *v354;
  float *v355;
  uint64_t v364;
  float32x4_t *v365;
  uint64_t v366;
  float32x4_t *v367;
  uint64_t v368;
  float32x4_t *v369;
  float32x4_t *v370;
  uint64_t v371;
  uint64_t v372;
  float32x4_t *v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  float32x4_t *v382;
  uint64_t jj;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  __int8 *v390;
  float32x4_t *v395;
  uint64_t v396;
  float32x4_t *v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t *v400;
  float32x4_t *v401;
  float32x4_t *v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float *v407;
  float32x4_t *v410;
  float32x4_t v411;
  float32x4_t *v412;
  float32x4_t *v413;
  uint64_t ii;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  int8x16_t v418;
  char *v419;
  uint64_t v420;
  float32x4_t *v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t *v424;
  float32x4_t *v425;
  uint64_t kk;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float *v431;
  float32x4_t *v434;
  float32x4_t v435;
  float32x4_t *v436;
  float32x4_t *v437;
  uint64_t mm;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  int8x16_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  float32x4_t *v449;
  float32x4_t *v450;
  float32x4_t *v451;
  float32x4_t *v452;
  uint64_t v453;
  uint64_t v454;

  v10 = a4;
  v11 = (float32x4_t *)a3;
  v12 = result;
  if (a9 == 1.0)
  {
    if (result > 3)
    {
      v15 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v16 = *(float32x4_t *)a5;
          do
          {
            v17 = (int8x16_t)vmulq_f32(v16, *v11);
            *a6 = *a6
                + (float)(_S0
                        * vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v29 = *(int8x16_t *)((char *)&unk_23D9C23C0 + 4 * (4 - (-(int)result & 3)));
        v453 = result;
        v445 = result - 4;
        v30 = 0;
        if (a2 >= 8)
        {
          v31 = 4 * a4;
          v449 = (float32x4_t *)(a5 + 4 * v15);
          v32 = v15 + 2 * a4;
          v33 = v15 + 4 * a4;
          v34 = 32 * a4;
          v35 = 4 * v15;
          v36 = 4 * (v15 + a4);
          v37 = 4 * v32;
          v38 = 4 * (v32 + a4);
          v39 = 4 * v33;
          v40 = 4 * (v33 + a4);
          v41 = 4 * (v15 + 6 * a4);
          v42 = 4 * (v15 - a4 + 8 * a4);
          v43 = v11;
          do
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = v10;
            v47 = &v11->i8[4 * v30 * v10];
            v48 = a5;
            v49 = v43;
            v50 = v453;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            do
            {
              v57 = *(float32x4_t *)a5;
              a5 += 16;
              v44 = vmlaq_f32(v44, v57, *v49);
              v45 = vmlaq_f32(v45, v57, *(float32x4_t *)((char *)v49 + v31));
              v58 = (float32x4_t *)((char *)v49 + v31 + v31);
              v51 = vmlaq_f32(v51, v57, *v58);
              v59 = (float32x4_t *)((char *)v58 + v31);
              v56 = vmlaq_f32(v56, v57, *v59);
              v60 = (float32x4_t *)((char *)v59 + v31);
              v55 = vmlaq_f32(v55, v57, *v60);
              v61 = (float32x4_t *)((char *)v60 + v31);
              v54 = vmlaq_f32(v54, v57, *v61);
              v62 = (float32x4_t *)((char *)v61 + v31);
              v53 = vmlaq_f32(v53, v57, *v62);
              v52 = vmlaq_f32(v52, v57, *(float32x4_t *)((char *)v62 + v31));
              v50 -= 4;
              ++v49;
            }
            while (v50 > 4);
            result = (uint64_t)&a6[v30 * a7];
            _Q5 = vaddq_f32(v55, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v39])));
            v64 = vaddq_f32(v54, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v40])));
            _Q3 = vaddq_f32(v53, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v41])));
            v66 = (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v42]));
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v44, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v35]))), vaddq_f32(v45, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v36])))), vpaddq_f32(vaddq_f32(v51, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v37]))), vaddq_f32(v56, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v38])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q6.f32[0]);
            __asm { FMLA            S7, S0, V6.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S7;
            v73 = vpaddq_f32(_Q5, v64);
            __asm { FMLA            S7, S0, V6.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S7;
            __asm { FMLA            S5, S0, V6.S[3] }
            *(_DWORD *)(result + 12 * a7) = _Q5.i32[0];
            _Q2 = vpaddq_f32(v73, vpaddq_f32(_Q3, vaddq_f32(v52, v66)));
            *(float *)(result + 16 * a7) = vmlas_n_f32(*(float *)(result + 16 * a7), _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 20 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 24 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 28 * a7) = _Q3.i32[0];
            v30 += 8;
            v43 = (float32x4_t *)((char *)v43 + v34);
            v10 = v46;
            a5 = v48;
          }
          while ((v30 | 7) < a2);
        }
        if ((v30 | 3) >= a2)
        {
          v86 = v453;
          v76 = v445;
        }
        else
        {
          v76 = v445;
          v78 = v445 + 2 * v10;
          v79 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 12));
          v80 = 16 * v10;
          v81 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 8));
          v82 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v83 = 4 * v78;
          v84 = 4 * (v78 + v10);
          v85 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          v86 = v453;
          do
          {
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = (float32x4_t *)a5;
            v92 = v85;
            v93 = v82;
            v94 = v81;
            v95 = v79;
            for (i = v453; i > 4; i -= 4)
            {
              v97 = *v91++;
              v98 = v97;
              v99 = *v92++;
              v90 = vmlaq_f32(v90, v98, v99);
              v100 = *v93++;
              v89 = vmlaq_f32(v89, v98, v100);
              v101 = *v94++;
              v88 = vmlaq_f32(v88, v98, v101);
              v102 = *v95++;
              v87 = vmlaq_f32(v87, v98, v102);
            }
            v103 = &v11->i8[4 * v30 * v10];
            result = (uint64_t)&a6[v30 * a7];
            v77 = (float32x4_t *)(a5 + 4 * v445);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v90, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445]))), vaddq_f32(v89, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445 + 4 * v10])))), vpaddq_f32(vaddq_f32(v88, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v83]))), vaddq_f32(v87, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v84])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v30 += 4;
            v79 = (float32x4_t *)((char *)v79 + v80);
            v81 = (float32x4_t *)((char *)v81 + v80);
            v82 = (float32x4_t *)((char *)v82 + v80);
            v85 = (float32x4_t *)((char *)v85 + v80);
          }
          while ((v30 | 3) < a2);
        }
        if ((v30 | 1) < a2)
        {
          v117 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v118 = 8 * v10;
          v119 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v120 = 0uLL;
            v121 = 0uLL;
            v122 = (float32x4_t *)a5;
            v123 = v119;
            v124 = v117;
            for (result = v86; result > 4; result -= 4)
            {
              v125 = *v122++;
              v126 = v125;
              v127 = *v123++;
              v121 = vmlaq_f32(v121, v126, v127);
              v128 = *v124++;
              v120 = vmlaq_f32(v120, v126, v128);
            }
            v129 = &a6[v30 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v121, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76)))), vaddq_f32(v120, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v129 = vmlas_n_f32(*v129, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v129[a7] = _S3;
            v30 += 2;
            v117 = (float32x4_t *)((char *)v117 + v118);
            v119 = (float32x4_t *)((char *)v119 + v118);
          }
          while ((v30 | 1) < a2);
        }
        if (v30 < a2)
        {
          v132 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v133 = 0uLL;
            v134 = (float32x4_t *)a5;
            v135 = v132;
            for (j = v86; j > 4; j -= 4)
            {
              v137 = *v134++;
              v138 = v137;
              v139 = *v135++;
              v133 = vmlaq_f32(v133, v138, v139);
            }
            v140 = (int8x16_t)vaddq_f32(v133, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76))));
            a6[v30 * a7] = a6[v30 * a7]
                         + (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL))));
            ++v30;
            v132 = (float32x4_t *)((char *)v132 + 4 * v10);
          }
          while (v30 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v19 = *(float32x4_t *)a5;
        v20 = *(float32x4_t *)(a5 + 4 * result - 16);
        v21 = vmvnq_s8(*(int8x16_t *)((char *)&unk_23D9C23C0 + 4 * (8 - result)));
        do
        {
          v22 = (int8x16_t)vaddq_f32(vmulq_f32(v20, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v19, *v11), v21));
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v18 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = *a6 + (float)(_S0 * vaddv_f32(vmul_f32(v18, *(float32x2_t *)v11->f32)));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v27 = *(float32x2_t *)(a5 + 4);
        v28 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(vmul_f32(v27, *v28), (float32x2_t)vmul_f32(v18, *(float32x2_t *)((char *)v28 - 4)).u32[0])));
          a6 += a7;
          v28 = (float32x2_t *)((char *)v28 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v13 = *(float *)a5;
      do
      {
        *a6 = *a6 + (float)(_S0 * (float)(v13 * v11->f32[0]));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 3)
    {
      v24 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v25 = *(float32x4_t *)a5;
          do
          {
            v26 = (int8x16_t)vmulq_f32(v25, *v11);
            *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL))) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * v10);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v143 = *(int8x16_t *)((char *)&unk_23D9C23C0 + 4 * (4 - (-(int)result & 3)));
        v454 = result;
        v446 = result - 4;
        v144 = 0;
        if (a2 >= 8)
        {
          v145 = 4 * v10;
          v450 = (float32x4_t *)(a5 + 4 * v24);
          v146 = v24 + 2 * v10;
          v147 = v24 + 4 * v10;
          v148 = 32 * v10;
          v149 = 4 * v24;
          v150 = 4 * (v24 + v10);
          v151 = 4 * v146;
          v152 = 4 * (v146 + v10);
          v153 = 4 * v147;
          v154 = 4 * (v147 + v10);
          v155 = 4 * (v24 + 6 * v10);
          v156 = 4 * (v24 - v10 + 8 * v10);
          v157 = v11;
          do
          {
            v158 = 0uLL;
            v159 = 0uLL;
            v160 = v10;
            v161 = &v11->i8[4 * v144 * v10];
            v162 = a5;
            v163 = v157;
            v164 = v454;
            v165 = 0uLL;
            v166 = 0uLL;
            v167 = 0uLL;
            v168 = 0uLL;
            v169 = 0uLL;
            v170 = 0uLL;
            do
            {
              v171 = *(float32x4_t *)a5;
              a5 += 16;
              v158 = vmlaq_f32(v158, v171, *v163);
              v159 = vmlaq_f32(v159, v171, *(float32x4_t *)((char *)v163 + v145));
              v172 = (float32x4_t *)((char *)v163 + v145 + v145);
              v165 = vmlaq_f32(v165, v171, *v172);
              v173 = (float32x4_t *)((char *)v172 + v145);
              v170 = vmlaq_f32(v170, v171, *v173);
              v174 = (float32x4_t *)((char *)v173 + v145);
              v169 = vmlaq_f32(v169, v171, *v174);
              v175 = (float32x4_t *)((char *)v174 + v145);
              v168 = vmlaq_f32(v168, v171, *v175);
              v176 = (float32x4_t *)((char *)v175 + v145);
              v167 = vmlaq_f32(v167, v171, *v176);
              v166 = vmlaq_f32(v166, v171, *(float32x4_t *)((char *)v176 + v145));
              v164 -= 4;
              ++v163;
            }
            while (v164 > 4);
            v177 = &a6[v144 * a7];
            v178 = vpaddq_f32(vpaddq_f32(vaddq_f32(v158, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v149]))), vaddq_f32(v159, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v150])))), vpaddq_f32(vaddq_f32(v165, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v151]))), vaddq_f32(v170, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v152])))));
            v179 = vpaddq_f32(vpaddq_f32(vaddq_f32(v169, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v153]))), vaddq_f32(v168, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v154])))), vpaddq_f32(vaddq_f32(v167, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v155]))), vaddq_f32(v166, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v156])))));
            *v177 = _S0 * v178.f32[0];
            v177[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v178.f32, 1);
            v177[2 * a7] = vmuls_lane_f32(_S0, v178, 2);
            v177[3 * a7] = vmuls_lane_f32(_S0, v178, 3);
            v177[4 * a7] = _S0 * v179.f32[0];
            v177[5 * a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v179.f32, 1);
            v177[6 * a7] = vmuls_lane_f32(_S0, v179, 2);
            v177[7 * a7] = vmuls_lane_f32(_S0, v179, 3);
            v144 += 8;
            result = v144 | 7;
            v157 = (float32x4_t *)((char *)v157 + v148);
            v10 = v160;
            a5 = v162;
          }
          while ((v144 | 7) < a2);
        }
        if ((v144 | 3) >= a2)
        {
          v190 = v454;
          v180 = v446;
        }
        else
        {
          v180 = v446;
          v182 = v446 + 2 * v10;
          v183 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 12));
          v184 = 16 * v10;
          v185 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 8));
          v186 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v187 = 4 * v182;
          v188 = 4 * (v182 + v10);
          v189 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          v190 = v454;
          do
          {
            v191 = 0uLL;
            v192 = 0uLL;
            v193 = 0uLL;
            v194 = 0uLL;
            v195 = (float32x4_t *)a5;
            v196 = v189;
            v197 = v186;
            v198 = v185;
            v199 = v183;
            for (k = v454; k > 4; k -= 4)
            {
              v201 = *v195++;
              v202 = v201;
              v203 = *v196++;
              v194 = vmlaq_f32(v194, v202, v203);
              v204 = *v197++;
              v193 = vmlaq_f32(v193, v202, v204);
              v205 = *v198++;
              v192 = vmlaq_f32(v192, v202, v205);
              v206 = *v199++;
              v191 = vmlaq_f32(v191, v202, v206);
            }
            v207 = &v11->i8[4 * v144 * v10];
            result = (uint64_t)&a6[v144 * a7];
            v181 = (float32x4_t *)(a5 + 4 * v446);
            v208 = vpaddq_f32(vpaddq_f32(vaddq_f32(v194, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446]))), vaddq_f32(v193, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446 + 4 * v10])))), vpaddq_f32(vaddq_f32(v192, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v187]))), vaddq_f32(v191, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v188])))));
            *(float *)result = _S0 * v208.f32[0];
            *(float *)(result + 4 * a7) = vmuls_lane_f32(_S0, *(float32x2_t *)v208.f32, 1);
            *(float *)(result + 8 * a7) = vmuls_lane_f32(_S0, v208, 2);
            *(float *)(result + 12 * a7) = vmuls_lane_f32(_S0, v208, 3);
            v144 += 4;
            v183 = (float32x4_t *)((char *)v183 + v184);
            v185 = (float32x4_t *)((char *)v185 + v184);
            v186 = (float32x4_t *)((char *)v186 + v184);
            v189 = (float32x4_t *)((char *)v189 + v184);
          }
          while ((v144 | 3) < a2);
        }
        if ((v144 | 1) < a2)
        {
          v217 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v218 = 8 * v10;
          v219 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = (float32x4_t *)a5;
            v223 = v219;
            v224 = v217;
            for (result = v190; result > 4; result -= 4)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f32(v221, v226, v227);
              v228 = *v224++;
              v220 = vmlaq_f32(v220, v226, v228);
            }
            v229 = &a6[v144 * a7];
            v230 = vpaddq_f32(vaddq_f32(v221, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180)))), vaddq_f32(v220, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180 + 4 * v10)))));
            v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
            *v229 = _S0 * v230.f32[0];
            v229[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v230.f32, 1);
            v144 += 2;
            v217 = (float32x4_t *)((char *)v217 + v218);
            v219 = (float32x4_t *)((char *)v219 + v218);
          }
          while ((v144 | 1) < a2);
        }
        if (v144 < a2)
        {
          v231 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v232 = 0uLL;
            v233 = (float32x4_t *)a5;
            v234 = v231;
            for (m = v190; m > 4; m -= 4)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f32(v232, v237, v238);
            }
            v239 = (int8x16_t)vaddq_f32(v232, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180))));
            a6[v144 * a7] = vaddv_f32(vadd_f32(*(float32x2_t *)v239.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL)))* _S0;
            ++v144;
            v231 = (float32x4_t *)((char *)v231 + 4 * v10);
          }
          while (v144 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v109 = *(float32x4_t *)a5;
        v110 = *(float32x4_t *)(a5 + 4 * result - 16);
        v111 = vmvnq_s8(*(int8x16_t *)((char *)&unk_23D9C23C0 + 4 * (8 - result)));
        do
        {
          v112 = (int8x16_t)vaddq_f32(vmulq_f32(v110, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v109, *v11), v111));
          *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL))) * _S0;
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * v10);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v108 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = vaddv_f32(vmul_f32(v108, *(float32x2_t *)v11->f32)) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v141 = *(float32x2_t *)(a5 + 4);
        v142 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = vaddv_f32(vadd_f32(vmul_f32(v141, *v142), (float32x2_t)vmul_f32(v108, *(float32x2_t *)((char *)v142 - 4)).u32[0]))* _S0;
          a6 += a7;
          v142 = (float32x2_t *)((char *)v142 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v14 = *(float *)a5;
      do
      {
        *a6 = (float)(v14 * v11->f32[0]) * _S0;
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 3)
    {
      v114 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v115 = *(float32x4_t *)a5;
          do
          {
            v116 = (int8x16_t)vmulq_f32(v115, *v11);
            *a6 = -(float)(*a6
                         - (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v247 = *(int8x16_t *)((char *)&unk_23D9C23C0 + 4 * (4 - (-(int)result & 3)));
        v443 = result - 4;
        v248 = 0;
        if (a2 >= 8)
        {
          v249 = 4 * a4;
          v451 = (float32x4_t *)(a5 + 4 * v114);
          v250 = v114 + 2 * a4;
          v251 = v114 + 4 * a4;
          v447 = 32 * a4;
          v252 = 4 * v114;
          v253 = 4 * (v114 + a4);
          v254 = 4 * v250;
          v255 = 4 * (v250 + a4);
          v256 = 4 * v251;
          v257 = 4 * (v251 + a4);
          v258 = 4 * (v114 + 6 * a4);
          v259 = 4 * (v114 - a4 + 8 * a4);
          v260 = v11;
          do
          {
            v261 = 0uLL;
            v262 = 0uLL;
            v263 = v10;
            v264 = &v11->i8[4 * v248 * v10];
            v265 = a5;
            v266 = v260;
            v267 = v12;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            v272 = 0uLL;
            v273 = 0uLL;
            do
            {
              v274 = *(float32x4_t *)a5;
              a5 += 16;
              v261 = vmlaq_f32(v261, v274, *v266);
              v262 = vmlaq_f32(v262, v274, *(float32x4_t *)((char *)v266 + v249));
              v275 = (float32x4_t *)((char *)v266 + v249 + v249);
              v268 = vmlaq_f32(v268, v274, *v275);
              v276 = (float32x4_t *)((char *)v275 + v249);
              v273 = vmlaq_f32(v273, v274, *v276);
              v277 = (float32x4_t *)((char *)v276 + v249);
              v272 = vmlaq_f32(v272, v274, *v277);
              v278 = (float32x4_t *)((char *)v277 + v249);
              v271 = vmlaq_f32(v271, v274, *v278);
              v279 = (float32x4_t *)((char *)v278 + v249);
              v270 = vmlaq_f32(v270, v274, *v279);
              v269 = vmlaq_f32(v269, v274, *(float32x4_t *)((char *)v279 + v249));
              v267 -= 4;
              ++v266;
            }
            while (v267 > 4);
            v280 = &a6[v248 * a7];
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v261, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v252]))), vaddq_f32(v262, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v253])))), vpaddq_f32(vaddq_f32(v268, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v254]))), vaddq_f32(v273, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v255])))));
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v272, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v256]))), vaddq_f32(v271, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v257])))), vpaddq_f32(vaddq_f32(v270, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v258]))), vaddq_f32(v269, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v259])))));
            *v280 = vmlas_n_f32(-*v280, _S0, _Q6.f32[0]);
            __asm { FMLA            S3, S0, V6.S[1] }
            v280[a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[2] }
            v280[2 * a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[3] }
            v280[3 * a7] = _S3;
            v280[4 * a7] = vmlas_n_f32(-v280[4 * a7], _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v280[5 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            v280[6 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            v280[7 * a7] = _S3;
            v248 += 8;
            result = v248 | 7;
            v260 = (float32x4_t *)((char *)v260 + v447);
            v10 = v263;
            a5 = v265;
          }
          while ((v248 | 7) < a2);
        }
        if ((v248 | 3) >= a2)
        {
          v289 = v443;
        }
        else
        {
          v289 = v443;
          v291 = v443 + 2 * v10;
          v292 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 12));
          v293 = 16 * v10;
          v294 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 8));
          v295 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v296 = 4 * v291;
          v297 = 4 * (v291 + v10);
          v298 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = 0uLL;
            if (v12 >= 5)
            {
              v303 = (float32x4_t *)a5;
              v304 = v298;
              v305 = v295;
              v306 = v294;
              v307 = v292;
              for (n = v12; n > 4; n -= 4)
              {
                v309 = *v303++;
                v310 = v309;
                v311 = *v304++;
                v302 = vmlaq_f32(v302, v310, v311);
                v312 = *v305++;
                v301 = vmlaq_f32(v301, v310, v312);
                v313 = *v306++;
                v300 = vmlaq_f32(v300, v310, v313);
                v314 = *v307++;
                v299 = vmlaq_f32(v299, v310, v314);
              }
            }
            v315 = &v11->i8[4 * v248 * v10];
            result = (uint64_t)&a6[v248 * a7];
            v290 = (float32x4_t *)(a5 + 4 * v443);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v302, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443]))), vaddq_f32(v301, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443 + 4 * v10])))), vpaddq_f32(vaddq_f32(v300, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v296]))), vaddq_f32(v299, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v297])))));
            *(float *)result = vmlas_n_f32(-*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v248 += 4;
            v292 = (float32x4_t *)((char *)v292 + v293);
            v294 = (float32x4_t *)((char *)v294 + v293);
            v295 = (float32x4_t *)((char *)v295 + v293);
            v298 = (float32x4_t *)((char *)v298 + v293);
          }
          while ((v248 | 3) < a2);
        }
        if ((v248 | 1) < a2)
        {
          v395 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v396 = 8 * v10;
          v397 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v398 = 0uLL;
            v399 = 0uLL;
            if (v12 >= 5)
            {
              v400 = (float32x4_t *)a5;
              v401 = v397;
              v402 = v395;
              for (result = v12; result > 4; result -= 4)
              {
                v403 = *v400++;
                v404 = v403;
                v405 = *v401++;
                v399 = vmlaq_f32(v399, v404, v405);
                v406 = *v402++;
                v398 = vmlaq_f32(v398, v404, v406);
              }
            }
            v407 = &a6[v248 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v399, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289)))), vaddq_f32(v398, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v407 = vmlas_n_f32(-*v407, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v407[a7] = _S3;
            v248 += 2;
            v395 = (float32x4_t *)((char *)v395 + v396);
            v397 = (float32x4_t *)((char *)v397 + v396);
          }
          while ((v248 | 1) < a2);
        }
        if (v248 < a2)
        {
          v410 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v411 = 0uLL;
            if (v12 >= 5)
            {
              v412 = (float32x4_t *)a5;
              v413 = v410;
              for (ii = v12; ii > 4; ii -= 4)
              {
                v415 = *v412++;
                v416 = v415;
                v417 = *v413++;
                v411 = vmlaq_f32(v411, v416, v417);
              }
            }
            v418 = (int8x16_t)vaddq_f32(v411, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289))));
            a6[v248 * a7] = -(float)(a6[v248 * a7]
                                   - (float)(_S0
                                           * vaddv_f32(vadd_f32(*(float32x2_t *)v418.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v418, v418, 8uLL)))));
            ++v248;
            v410 = (float32x4_t *)((char *)v410 + 4 * v10);
          }
          while (v248 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v213 = *(float32x4_t *)a5;
        v214 = *(float32x4_t *)(a5 + 4 * result - 16);
        v215 = vmvnq_s8(*(int8x16_t *)((char *)&unk_23D9C23C0 + 4 * (8 - result)));
        do
        {
          v216 = (int8x16_t)vaddq_f32(vmulq_f32(v214, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v213, *v11), v215));
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v216, v216, 8uLL)))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v212 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = -(float)(*a6 - (float)(_S0 * vaddv_f32(vmul_f32(v212, *(float32x2_t *)v11->f32))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v245 = *(float32x2_t *)(a5 + 4);
        v246 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(vmul_f32(v245, *v246), (float32x2_t)vmul_f32(v212, *(float32x2_t *)((char *)v246 - 4)).u32[0]))));
          a6 += a7;
          v246 = (float32x2_t *)((char *)v246 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v23 = *(float *)a5;
      do
      {
        *a6 = -(float)(*a6 - (float)(_S0 * (float)(v23 * v11->f32[0])));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 3)
  {
    v209 = result - 4;
    if (result == 4)
    {
      if (a2 >= 1)
      {
        v210 = *(float32x4_t *)a5;
        do
        {
          v211 = (int8x16_t)vmulq_f32(v210, *v11);
          *a6 = (float)(*a6 * a9)
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v211.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 8)
    {
      v322 = *(int8x16_t *)((char *)&unk_23D9C23C0 + 4 * (4 - (-(int)result & 3)));
      v323 = 4 * a4;
      v444 = result - 4;
      v324 = 0;
      if (a2 >= 8)
      {
        v452 = (float32x4_t *)(a5 + 4 * v209);
        v325 = v209 + 2 * a4;
        v326 = v209 + 4 * a4;
        v448 = 32 * a4;
        v327 = 4 * v209;
        v328 = 4 * (v209 + a4);
        v329 = 4 * v325;
        v330 = 4 * (v325 + a4);
        v331 = 4 * v326;
        v332 = 4 * (v326 + a4);
        v333 = 4 * (v209 + 6 * a4);
        v334 = 4 * (v209 - a4 + 8 * a4);
        v335 = v11;
        do
        {
          v336 = 0uLL;
          v337 = 0uLL;
          v338 = v10;
          v339 = &v11->i8[4 * v324 * v10];
          v340 = a5;
          v341 = v335;
          v342 = v12;
          v343 = 0uLL;
          v344 = 0uLL;
          v345 = 0uLL;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          do
          {
            v349 = *(float32x4_t *)a5;
            a5 += 16;
            v336 = vmlaq_f32(v336, v349, *v341);
            v337 = vmlaq_f32(v337, v349, *(float32x4_t *)((char *)v341 + v323));
            v350 = (float32x4_t *)((char *)v341 + v323 + v323);
            v343 = vmlaq_f32(v343, v349, *v350);
            v351 = (float32x4_t *)((char *)v350 + v323);
            v348 = vmlaq_f32(v348, v349, *v351);
            v352 = (float32x4_t *)((char *)v351 + v323);
            v347 = vmlaq_f32(v347, v349, *v352);
            v353 = (float32x4_t *)((char *)v352 + v323);
            v346 = vmlaq_f32(v346, v349, *v353);
            v354 = (float32x4_t *)((char *)v353 + v323);
            v345 = vmlaq_f32(v345, v349, *v354);
            v344 = vmlaq_f32(v344, v349, *(float32x4_t *)((char *)v354 + v323));
            v342 -= 4;
            ++v341;
          }
          while (v342 > 4);
          v355 = &a6[v324 * a7];
          _Q7 = vpaddq_f32(vpaddq_f32(vaddq_f32(v336, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v327]))), vaddq_f32(v337, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v328])))), vpaddq_f32(vaddq_f32(v343, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v329]))), vaddq_f32(v348, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v330])))));
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v347, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v331]))), vaddq_f32(v346, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v332])))), vpaddq_f32(vaddq_f32(v345, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v333]))), vaddq_f32(v344, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v334])))));
          *v355 = vmlas_n_f32(*v355 * a9, _S0, _Q7.f32[0]);
          __asm { FMLA            S4, S0, V7.S[1] }
          v355[a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[2] }
          v355[2 * a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[3] }
          v355[3 * a7] = _S4;
          v355[4 * a7] = vmlas_n_f32(v355[4 * a7] * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v355[5 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          v355[6 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          v355[7 * a7] = _S4;
          v324 += 8;
          result = v324 | 7;
          v335 = (float32x4_t *)((char *)v335 + v448);
          v10 = v338;
          a5 = v340;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v364 = v444;
      }
      else
      {
        v364 = v444;
        v366 = v444 + 2 * v10;
        v367 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 12));
        v368 = 16 * v10;
        v369 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 8));
        v370 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 4));
        v371 = 4 * v366;
        v372 = 4 * (v366 + v10);
        v373 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v374 = 0uLL;
          v375 = 0uLL;
          v376 = 0uLL;
          v377 = 0uLL;
          if (v12 >= 5)
          {
            v378 = (float32x4_t *)a5;
            v379 = v373;
            v380 = v370;
            v381 = v369;
            v382 = v367;
            for (jj = v12; jj > 4; jj -= 4)
            {
              v384 = *v378++;
              v385 = v384;
              v386 = *v379++;
              v377 = vmlaq_f32(v377, v385, v386);
              v387 = *v380++;
              v376 = vmlaq_f32(v376, v385, v387);
              v388 = *v381++;
              v375 = vmlaq_f32(v375, v385, v388);
              v389 = *v382++;
              v374 = vmlaq_f32(v374, v385, v389);
            }
          }
          v390 = &v11->i8[4 * v324 * v10];
          result = (uint64_t)&a6[v324 * a7];
          v365 = (float32x4_t *)(a5 + 4 * v444);
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v377, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444]))), vaddq_f32(v376, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444 + 4 * v10])))), vpaddq_f32(vaddq_f32(v375, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v371]))), vaddq_f32(v374, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v372])))));
          *(float *)result = vmlas_n_f32(*(float *)result * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          *(_DWORD *)(result + 4 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          *(_DWORD *)(result + 8 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          *(_DWORD *)(result + 12 * a7) = _S4;
          v324 += 4;
          v367 = (float32x4_t *)((char *)v367 + v368);
          v369 = (float32x4_t *)((char *)v369 + v368);
          v370 = (float32x4_t *)((char *)v370 + v368);
          v373 = (float32x4_t *)((char *)v373 + v368);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v419 = (char *)v11 + v10 * (4 * v324 + 4);
        v420 = 8 * v10;
        v421 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v422 = 0uLL;
          v423 = 0uLL;
          if (v12 >= 5)
          {
            v424 = (float32x4_t *)a5;
            v425 = v421;
            result = (uint64_t)v419;
            for (kk = v12; kk > 4; kk -= 4)
            {
              v427 = *v424++;
              v428 = v427;
              v429 = *v425++;
              v423 = vmlaq_f32(v423, v428, v429);
              v430 = *(float32x4_t *)result;
              result += 16;
              v422 = vmlaq_f32(v422, v428, v430);
            }
          }
          v431 = &a6[v324 * a7];
          _Q3 = vpaddq_f32(vaddq_f32(v423, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364)))), vaddq_f32(v422, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364 + 4 * v10)))));
          _Q3.i64[0] = vpaddq_f32(_Q3, _Q3).u64[0];
          *v431 = vmlas_n_f32(*v431 * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v431[a7] = _S4;
          v324 += 2;
          v419 += v420;
          v421 = (float32x4_t *)((char *)v421 + v420);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v434 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v435 = 0uLL;
          if (v12 >= 5)
          {
            v436 = (float32x4_t *)a5;
            v437 = v434;
            for (mm = v12; mm > 4; mm -= 4)
            {
              v439 = *v436++;
              v440 = v439;
              v441 = *v437++;
              v435 = vmlaq_f32(v435, v440, v441);
            }
          }
          v442 = (int8x16_t)vaddq_f32(v435, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364))));
          a6[v324 * a7] = (float)(a6[v324 * a7] * a9)
                        + (float)(_S0
                                * vaddv_f32(vadd_f32(*(float32x2_t *)v442.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v442, v442, 8uLL))));
          ++v324;
          v434 = (float32x4_t *)((char *)v434 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v241 = *(float32x4_t *)a5;
      v242 = *(float32x4_t *)(a5 + 4 * result - 16);
      v243 = vmvnq_s8(*(int8x16_t *)((char *)&unk_23D9C23C0 + 4 * (8 - result)));
      do
      {
        v244 = (int8x16_t)vaddq_f32(vmulq_f32(v242, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v241, *v11), v243));
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(*(float32x2_t *)v244.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v244, v244, 8uLL))));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v240 = *(float32x2_t *)a5;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        do
        {
          *a6 = (float)(*a6 * a9) + (float)(_S0 * vaddv_f32(vmul_f32(v240, *(float32x2_t *)v11->f32)));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v320 = *(float32x2_t *)(a5 + 4);
      v321 = (float32x2_t *)(a3 + 4);
      do
      {
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(vmul_f32(v320, *v321), (float32x2_t)vmul_f32(v240, *(float32x2_t *)((char *)v321 - 4)).u32[0])));
        a6 += a7;
        v321 = (float32x2_t *)((char *)v321 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v113 = *(float *)a5;
    do
    {
      *a6 = (float)(*a6 * a9) + (float)(_S0 * (float)(v113 * v11->f32[0]));
      a6 += a7;
      v11 = (float32x4_t *)((char *)v11 + 4 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

void dgemvN_base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,float64x2_t a23,float64x2_t a24,float64x2_t a25,float64x2_t a26,float64x2_t a27,float64x2_t a28,float64x2_t a29,float64x2_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  float64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  float64x2_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t *v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float64x2_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  int64_t v90;
  double v91;
  double v92;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t *v110;
  uint64_t v111;
  float64x2_t *v112;
  uint64_t v113;
  uint64_t v114;
  double *v115;
  int64_t v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t *v127;
  float64_t *v128;
  uint64_t v129;
  const double *v130;
  float64x2_t v131;
  uint64_t v132;
  double v133;
  float64x2_t *v134;
  float64x2_t v135;
  float64x2_t v136;
  uint64_t v137;
  double *v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float64x2_t *v154;
  uint64_t v155;
  float64x2_t *v156;
  uint64_t v157;
  uint64_t v158;
  double *v159;
  uint64_t v160;
  double *v161;
  double *v162;
  double v163;
  double v164;
  double v165;
  int64_t v166;
  double v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t *v177;
  float64_t *v178;
  uint64_t v179;
  const double *v180;
  float64x2_t v181;
  uint64_t v182;
  double v183;
  float64x2_t *v184;
  float64x2_t v185;
  float64x2_t v186;
  uint64_t v187;
  _QWORD *v188;
  int64_t v189;
  double v190;
  double v191;
  uint64_t v192;
  double *v193;
  double *v194;
  int64_t v195;
  float64x2_t v196;
  float64x2_t v197;
  uint64_t v198;
  float64x2_t *v199;
  double *v200;
  float64x2_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t *v211;
  float64_t *v212;
  uint64_t v213;
  const double *v214;
  float64x2_t v215;
  uint64_t v216;
  double v217;
  float64x2_t *v218;
  float64x2_t v219;
  float64x2_t v220;
  uint64_t v221;
  double *v222;
  uint64_t v223;
  float64x2_t v224;
  uint64_t v225;
  uint64_t v226;
  int64_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t *v232;
  float64_t *v233;
  uint64_t v234;
  const double *v235;
  float64x2_t v236;
  uint64_t v237;
  double v238;
  float64x2_t *v239;
  float64x2_t v240;
  float64x2_t v241;
  uint64_t v242;
  double *v243;
  uint64_t v244;
  double *v245;
  double *v246;
  int64_t v247;
  float64x2_t v248;
  float64x2_t v249;
  uint64_t v250;
  float64x2_t *v251;
  double *v252;
  float64x2_t v253;
  uint64_t v254;
  uint64_t v255;
  double *v256;
  double *v257;
  int64_t v258;
  float64x2_t v259;
  float64x2_t v260;
  uint64_t v261;
  float64x2_t *v262;
  double *v263;
  float64x2_t v264;
  uint64_t v265;
  uint64_t v266;
  float64x2_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  float64x2_t *vars8;
  float64x2_t *vars8a;
  float64x2_t *vars8b;
  float64x2_t *vars8c;
  uint64_t v276;
  uint64_t v277;
  double v278;
  double *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  float64x2_t *v284;
  float64x2_t *v285;
  float64x2_t *v286;
  float64x2_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;

  v46 = (float64x2_t)MEMORY[0x24BDAC7A8](a1, a2);
  v279 = v38;
  v43 = (uint64_t)v36;
  v44 = v46.f64[0];
  v45 = v34;
  STACK[0x11D8] = *MEMORY[0x24BDAC8D0];
  v46.f64[0] = 1.0;
  v47 = v35 * v34;
  v278 = v44;
  v276 = v34;
  v277 = v41;
  if (*(double *)&v42 == 1.0)
  {
    if (v34 >= 8 && v47 >= 0x1000)
    {
      v48 = 0;
      v49 = 0;
      v50 = -v37 & v37;
      if (v50 >= 2)
        v50 = 2;
      v51 = __clz(v50) - 62;
      v52 = (1 << v51);
      v304 = v39 << v51;
      v308 = v37 << v51;
      v300 = 8 * v39;
      v53 = 8 * v37;
      v54 = v35 - 1;
      v268 = v41 << 12;
      v55 = 16 * v41;
      v56 = 8 * v41;
      vars8 = v40;
      do
      {
        v284 = v40;
        v288 = v49;
        if (v45 - v49 >= 512)
          v57 = 512;
        else
          v57 = v45 - v49;
        v280 = v45 - v49;
        if (v45 - v49 >= 1)
        {
          v58 = v45 - (v48 << 9);
          if (v58 >= 512)
            v58 = 512;
          bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v58 - (v58 != 0)) + 8);
        }
        v292 = v48;
        v296 = v43;
        v59 = v279;
        v60 = v52;
        do
        {
          v61 = (v54 + v60) / v52;
          if (!v61)
            break;
          v46 = gemvN_aligned_mxn<Vector<double,2l>>(v57, v61, v43, v308, v59, v304, (unint64_t)&a34 | 0x10, v46);
          v59 = (double *)((char *)v59 + v300);
          v43 += v53;
          --v60;
        }
        while (v60);
        v45 = v276;
        if (v280 >= 1)
        {
          v62 = 0;
          v63 = v284;
          do
          {
            v64 = v57 - v62;
            v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v62), v278);
            if (v277 == 1 && v64 >= 2)
            {
              v65 = (float64x2_t *)((char *)vars8 + 8 * v288 * v277 + 8 * v62);
              v46 = vaddq_f64(v46, *v65);
              *v65 = v46;
            }
            else
            {
              if (v64 >= 2)
                v66 = 2;
              else
                v66 = v57 - v62;
              v67 = (v66 + 2) & (v66 >> 63);
              if (v66 < 0)
                v66 = 2;
              if (v67 < v66)
              {
                v68 = (double *)((char *)v63->f64 + v56 * v67);
                do
                {
                  a23 = v46;
                  *v68 = *(double *)((unint64_t)&a23 & 0xFFFFFFFFFFFFFFF7 | (8 * (v67++ & 1))) + *v68;
                  v68 = (double *)((char *)v68 + v56);
                }
                while (v66 != v67);
              }
            }
            v62 += 2;
            v63 = (float64x2_t *)((char *)v63 + v55);
          }
          while (v62 < v57);
        }
        v49 = v288 + 512;
        v48 = v292 + 1;
        v43 = v296 + 4096;
        v40 = (float64x2_t *)((char *)v284 + v268);
      }
      while (v288 + 512 < v276);
      return;
    }
    if (v34 < 1)
      return;
    if (v34 == 1)
    {
      if (v35 >= 2)
      {
        v92 = 0.0;
        v160 = 2;
        v161 = v36;
        v91 = 0.0;
        v162 = v38;
        do
        {
          v91 = v91 + *v161 * *v162;
          v92 = v92 + v161[v37] * v162[v39];
          v160 += 2;
          v162 += 2 * v39;
          v161 += 2 * v37;
        }
        while (v160 <= v35);
        v90 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v90 = 0;
        v91 = 0.0;
        v92 = 0.0;
      }
      if (v90 < v35)
        v91 = v91 + v36[v90 * v37] * v38[v90 * v39];
      v163 = v92 + v91;
      v164 = v40->f64[0];
LABEL_175:
      v165 = v164 + v44 * v163;
LABEL_296:
      v40->f64[0] = v165;
      return;
    }
    if ((unint64_t)v34 < 3)
    {
      v45 = 2;
      goto LABEL_177;
    }
    v120 = 8 * v41;
    while (1)
    {
      if (v45 >= 4)
        v121 = 4;
      else
        v121 = v45;
      if (v35 >= 2)
      {
        v126 = 0uLL;
        v127 = (float64x2_t *)v43;
        v128 = v279;
        v129 = 2;
        v125 = 0uLL;
        v124 = 0uLL;
        v123 = 0uLL;
        v130 = v279;
        do
        {
          v131 = vld1q_dup_f64(v130);
          v119 = 16 * v39;
          v130 = (const double *)((char *)v130 + v119);
          v126 = vmlaq_f64(v126, v131, *v127);
          v124 = vmlaq_f64(v124, v131, *(float64x2_t *)((char *)v127 + 8 * v121 - 16));
          v131.f64[0] = v128[v39];
          v123 = vmlaq_n_f64(v123, *(float64x2_t *)((char *)v127 + 8 * v37), v131.f64[0]);
          v125 = vmlaq_n_f64(v125, *(float64x2_t *)((char *)v127 + 8 * v37 + 8 * v121 - 16), v131.f64[0]);
          v129 += 2;
          v127 += v37;
          v128 = (float64_t *)v130;
        }
        while (v129 <= v35);
        v122 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v122 = 0;
        v123 = 0uLL;
        v124 = 0uLL;
        v125 = 0uLL;
        v126 = 0uLL;
      }
      v132 = v121 - 2;
      if (v122 < v35)
      {
        v133 = v279[v122 * v39];
        v126 = vmlaq_n_f64(v126, *(float64x2_t *)(v43 + 8 * v122 * v37), v133);
        v124 = vmlaq_n_f64(v124, *(float64x2_t *)(v43 + 8 * (v122 * v37 + v132)), v133);
      }
      v134 = (float64x2_t *)((char *)v40 + 8 * v132 * v41);
      v135 = vmulq_n_f64(vaddq_f64(v123, v126), v44);
      if (v41 == 1 && v121 == 4)
      {
        *v40 = vaddq_f64(v135, *v40);
        v136 = vmulq_n_f64(vaddq_f64(v125, v124), v44);
      }
      else
      {
        if (v121 >= 2)
          v137 = 0;
        else
          v137 = v121;
        if (v121 < 2)
          v132 = 2;
        if (v137 < v132)
        {
          v138 = (double *)((char *)v40->f64 + v120 * v137);
          do
          {
            a24 = v135;
            *v138 = *(double *)((unint64_t)&a24 & 0xFFFFFFFFFFFFFFF7 | (8 * (v137++ & 1))) + *v138;
            v138 = (double *)((char *)v138 + v120);
          }
          while (v132 != v137);
        }
        v136 = vmulq_n_f64(vaddq_f64(v125, v124), v44);
        if (v41 != 1)
        {
          v134->f64[0] = v136.f64[0] + v134->f64[0];
          v134->f64[v41] = v136.f64[1] + v134->f64[v41];
          goto LABEL_136;
        }
      }
      *v134 = vaddq_f64(v136, *v134);
LABEL_136:
      v43 += 8 * v121;
      v40 = (float64x2_t *)((char *)v40 + 8 * v121 * v41);
      v45 -= v121;
      if (v45 <= 2)
      {
        if (v45 < 1)
          return;
LABEL_177:
        gemvN_1xn<Vector<double,2l>,ScaleOne>(-v45, v35, (float64x2_t *)(v43 + 8 * (v45 - 2)), v37, v279, v39, (float64x2_t *)((char *)v40 + 8 * (v45 - 2) * v41), v41, v44);
        return;
      }
    }
  }
  v69 = *(double *)&v42;
  if (*(double *)&v42 != 0.0)
  {
    v94 = v34 > 7 && v47 > 0xFFF;
    v46.f64[0] = -1.0;
    if (*(double *)&v42 == -1.0)
    {
      if (v94)
      {
        v95 = 0;
        v96 = 0;
        v97 = -v37 & v37;
        if (v97 >= 2)
          v97 = 2;
        v98 = __clz(v97) - 62;
        v99 = (1 << v98);
        v306 = v39 << v98;
        v310 = v37 << v98;
        v302 = 8 * v39;
        v100 = 8 * v37;
        v101 = v35 - 1;
        v270 = v41 << 12;
        v102 = 16 * v41;
        v103 = 8 * v41;
        vars8b = v40;
        do
        {
          v286 = v40;
          v290 = v96;
          if (v45 - v96 >= 512)
            v104 = 512;
          else
            v104 = v45 - v96;
          v282 = v45 - v96;
          if (v45 - v96 >= 1)
          {
            v105 = v45 - (v95 << 9);
            if (v105 >= 512)
              v105 = 512;
            bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v105 - (v105 != 0)) + 8);
          }
          v294 = v95;
          v298 = v43;
          v106 = v279;
          v107 = v99;
          do
          {
            v108 = (v101 + v107) / v99;
            if (!v108)
              break;
            v46 = gemvN_aligned_mxn<Vector<double,2l>>(v104, v108, v43, v310, v106, v306, (unint64_t)&a34 | 0x10, v46);
            v106 = (double *)((char *)v106 + v302);
            v43 += v100;
            --v107;
          }
          while (v107);
          v45 = v276;
          if (v282 >= 1)
          {
            v109 = 0;
            v110 = v286;
            do
            {
              v111 = v104 - v109;
              v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v109), v278);
              if (v277 == 1 && v111 >= 2)
              {
                v112 = (float64x2_t *)((char *)vars8b + 8 * v290 * v277 + 8 * v109);
                v46 = vsubq_f64(v46, *v112);
                *v112 = v46;
              }
              else
              {
                if (v111 >= 2)
                  v113 = 2;
                else
                  v113 = v104 - v109;
                v114 = (v113 + 2) & (v113 >> 63);
                if (v113 < 0)
                  v113 = 2;
                if (v114 < v113)
                {
                  v115 = (double *)((char *)v110->f64 + v103 * v114);
                  do
                  {
                    a28 = v46;
                    *v115 = *(double *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFF7 | (8 * (v114++ & 1))) - *v115;
                    v115 = (double *)((char *)v115 + v103);
                  }
                  while (v113 != v114);
                }
              }
              v109 += 2;
              v110 = (float64x2_t *)((char *)v110 + v102);
            }
            while (v109 < v104);
          }
          v96 = v290 + 512;
          v95 = v294 + 1;
          v43 = v298 + 4096;
          v40 = (float64x2_t *)((char *)v286 + v270);
        }
        while (v290 + 512 < v276);
        return;
      }
      if (v34 < 1)
        return;
      if (v34 == 1)
      {
        if (v35 >= 2)
        {
          v168 = 0.0;
          v244 = 2;
          v245 = v36;
          v167 = 0.0;
          v246 = v38;
          do
          {
            v167 = v167 + *v245 * *v246;
            v168 = v168 + v245[v37] * v246[v39];
            v244 += 2;
            v246 += 2 * v39;
            v245 += 2 * v37;
          }
          while (v244 <= v35);
          v166 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v166 = 0;
          v167 = 0.0;
          v168 = 0.0;
        }
        if (v166 < v35)
          v167 = v167 + v36[v166 * v37] * v38[v166 * v39];
        v165 = -(v40->f64[0] - v44 * (v168 + v167));
        goto LABEL_296;
      }
      if ((unint64_t)v34 < 3)
      {
        v45 = 2;
LABEL_299:
        if (v35 >= 2)
        {
          v249 = 0uLL;
          v250 = 2;
          v251 = (float64x2_t *)(v43 + 8 * (v45 - 2));
          v248 = 0uLL;
          v252 = v279;
          do
          {
            v248 = vmlaq_n_f64(v248, *v251, *v252);
            v249 = vmlaq_n_f64(v249, *(float64x2_t *)((char *)v251 + 8 * v37), v252[v39]);
            v250 += 2;
            v252 += 2 * v39;
            v251 += v37;
          }
          while (v250 <= v35);
          v247 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v247 = 0;
          v248 = 0uLL;
          v249 = 0uLL;
        }
        if (v247 < v35)
          v248 = vmlaq_n_f64(v248, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v247 * v37), v279[v247 * v39]);
        v253 = vmulq_n_f64(vaddq_f64(v249, v248), v44);
        v254 = 2 - v45;
        if (2 - v45 <= 1)
        {
          do
          {
            a29 = v253;
            v40->f64[0] = *(double *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF7 | (8 * (v254++ & 1))) - v40->f64[0];
            v40 = (float64x2_t *)((char *)v40 + 8 * v41);
          }
          while (v254 != 2);
        }
        return;
      }
      v204 = 8 * v41;
      while (1)
      {
        if (v45 >= 4)
          v205 = 4;
        else
          v205 = v45;
        if (v35 >= 2)
        {
          v210 = 0uLL;
          v211 = (float64x2_t *)v43;
          v212 = v279;
          v213 = 2;
          v209 = 0uLL;
          v208 = 0uLL;
          v207 = 0uLL;
          v214 = v279;
          do
          {
            v215 = vld1q_dup_f64(v214);
            v203 = 16 * v39;
            v214 = (const double *)((char *)v214 + v203);
            v210 = vmlaq_f64(v210, v215, *v211);
            v208 = vmlaq_f64(v208, v215, *(float64x2_t *)((char *)v211 + 8 * v205 - 16));
            v215.f64[0] = v212[v39];
            v207 = vmlaq_n_f64(v207, *(float64x2_t *)((char *)v211 + 8 * v37), v215.f64[0]);
            v209 = vmlaq_n_f64(v209, *(float64x2_t *)((char *)v211 + 8 * v37 + 8 * v205 - 16), v215.f64[0]);
            v213 += 2;
            v211 += v37;
            v212 = (float64_t *)v214;
          }
          while (v213 <= v35);
          v206 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v206 = 0;
          v207 = 0uLL;
          v208 = 0uLL;
          v209 = 0uLL;
          v210 = 0uLL;
        }
        v216 = v205 - 2;
        if (v206 < v35)
        {
          v217 = v279[v206 * v39];
          v210 = vmlaq_n_f64(v210, *(float64x2_t *)(v43 + 8 * v206 * v37), v217);
          v208 = vmlaq_n_f64(v208, *(float64x2_t *)(v43 + 8 * (v206 * v37 + v216)), v217);
        }
        v218 = (float64x2_t *)((char *)v40 + 8 * v216 * v41);
        v219 = vmulq_n_f64(vaddq_f64(v207, v210), v44);
        if (v41 == 1 && v205 == 4)
        {
          *v40 = vsubq_f64(v219, *v40);
          v220 = vmulq_n_f64(vaddq_f64(v209, v208), v44);
        }
        else
        {
          if (v205 >= 2)
            v221 = 0;
          else
            v221 = v205;
          if (v205 < 2)
            v216 = 2;
          if (v221 < v216)
          {
            v222 = (double *)((char *)v40->f64 + v204 * v221);
            do
            {
              a30 = v219;
              *v222 = *(double *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF7 | (8 * (v221++ & 1))) - *v222;
              v222 = (double *)((char *)v222 + v204);
            }
            while (v216 != v221);
          }
          v220 = vmulq_n_f64(vaddq_f64(v209, v208), v44);
          if (v41 != 1)
          {
            v218->f64[0] = v220.f64[0] - v218->f64[0];
            v218->f64[v41] = v220.f64[1] - v218->f64[v41];
            goto LABEL_258;
          }
        }
        *v218 = vsubq_f64(v220, *v218);
LABEL_258:
        v43 += 8 * v205;
        v40 = (float64x2_t *)((char *)v40 + 8 * v205 * v41);
        v45 -= v205;
        if (v45 <= 2)
        {
          if (v45 < 1)
            return;
          goto LABEL_299;
        }
      }
    }
    if (v94)
    {
      v139 = 0;
      v140 = 0;
      v141 = -v37 & v37;
      if (v141 >= 2)
        v141 = 2;
      v142 = __clz(v141) - 62;
      v143 = (1 << v142);
      v307 = v39 << v142;
      v311 = v37 << v142;
      v303 = 8 * v39;
      v144 = 8 * v37;
      v145 = v35 - 1;
      v266 = v41 << 12;
      v146 = 16 * v41;
      v147 = 8 * v41;
      vars8c = v40;
      v267 = (float64x2_t)vdupq_lane_s64(v42, 0);
      v271 = *(double *)&v42;
      do
      {
        v287 = v40;
        v291 = v140;
        if (v45 - v140 >= 512)
          v148 = 512;
        else
          v148 = v45 - v140;
        v283 = v45 - v140;
        if (v45 - v140 >= 1)
        {
          v149 = v45 - (v139 << 9);
          if (v149 >= 512)
            v149 = 512;
          bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v149 - (v149 != 0)) + 8);
        }
        v295 = v139;
        v299 = v43;
        v150 = v279;
        v151 = v143;
        do
        {
          v152 = (v145 + v151) / v143;
          if (!v152)
            break;
          v46 = gemvN_aligned_mxn<Vector<double,2l>>(v148, v152, v43, v311, v150, v307, (unint64_t)&a34 | 0x10, v46);
          v150 = (double *)((char *)v150 + v303);
          v43 += v144;
          --v151;
        }
        while (v151);
        v45 = v276;
        if (v283 >= 1)
        {
          v153 = 0;
          v154 = v287;
          do
          {
            v155 = v148 - v153;
            v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v153), v278);
            if (v277 == 1 && v155 >= 2)
            {
              v156 = (float64x2_t *)((char *)vars8c + 8 * v291 * v277 + 8 * v153);
              v46 = vmlaq_f64(v46, *v156, v267);
              *v156 = v46;
            }
            else
            {
              if (v155 >= 2)
                v157 = 2;
              else
                v157 = v148 - v153;
              v158 = (v157 + 2) & (v157 >> 63);
              if (v157 < 0)
                v157 = 2;
              if (v158 < v157)
              {
                v159 = (double *)((char *)v154->f64 + v147 * v158);
                do
                {
                  a31 = v46;
                  *v159 = *(double *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF7 | (8 * (v158++ & 1))) + v271 * *v159;
                  v159 = (double *)((char *)v159 + v147);
                }
                while (v157 != v158);
              }
            }
            v153 += 2;
            v154 = (float64x2_t *)((char *)v154 + v146);
          }
          while (v153 < v148);
        }
        v140 = v291 + 512;
        v139 = v295 + 1;
        v43 = v299 + 4096;
        v40 = (float64x2_t *)((char *)v287 + v266);
      }
      while (v291 + 512 < v276);
      return;
    }
    if (v34 < 1)
      return;
    if (v34 == 1)
    {
      if (v35 >= 2)
      {
        v191 = 0.0;
        v255 = 2;
        v256 = v36;
        v190 = 0.0;
        v257 = v38;
        do
        {
          v190 = v190 + *v256 * *v257;
          v191 = v191 + v256[v37] * v257[v39];
          v255 += 2;
          v257 += 2 * v39;
          v256 += 2 * v37;
        }
        while (v255 <= v35);
        v189 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v189 = 0;
        v190 = 0.0;
        v191 = 0.0;
      }
      if (v189 < v35)
        v190 = v190 + v36[v189 * v37] * v38[v189 * v39];
      v163 = v191 + v190;
      v164 = v40->f64[0] * v69;
      goto LABEL_175;
    }
    if ((unint64_t)v34 < 3)
    {
      v45 = 2;
LABEL_316:
      if (v35 >= 2)
      {
        v260 = 0uLL;
        v261 = 2;
        v262 = (float64x2_t *)(v43 + 8 * (v45 - 2));
        v259 = 0uLL;
        v263 = v279;
        do
        {
          v259 = vmlaq_n_f64(v259, *v262, *v263);
          v260 = vmlaq_n_f64(v260, *(float64x2_t *)((char *)v262 + 8 * v37), v263[v39]);
          v261 += 2;
          v263 += 2 * v39;
          v262 += v37;
        }
        while (v261 <= v35);
        v258 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v258 = 0;
        v259 = 0uLL;
        v260 = 0uLL;
      }
      if (v258 < v35)
        v259 = vmlaq_n_f64(v259, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v258 * v37), v279[v258 * v39]);
      v264 = vmulq_n_f64(vaddq_f64(v260, v259), v44);
      v265 = 2 - v45;
      if (2 - v45 <= 1)
      {
        do
        {
          a32 = v264;
          v40->f64[0] = *(double *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF7 | (8 * (v265++ & 1)))
                      + v69 * v40->f64[0];
          v40 = (float64x2_t *)((char *)v40 + 8 * v41);
        }
        while (v265 != 2);
      }
      return;
    }
    v224 = (float64x2_t)vdupq_lane_s64(v42, 0);
    v225 = 8 * v41;
    while (1)
    {
      if (v45 >= 4)
        v226 = 4;
      else
        v226 = v45;
      if (v35 >= 2)
      {
        v231 = 0uLL;
        v232 = (float64x2_t *)v43;
        v233 = v279;
        v234 = 2;
        v230 = 0uLL;
        v229 = 0uLL;
        v228 = 0uLL;
        v235 = v279;
        do
        {
          v236 = vld1q_dup_f64(v235);
          v223 = 16 * v39;
          v235 = (const double *)((char *)v235 + v223);
          v231 = vmlaq_f64(v231, v236, *v232);
          v229 = vmlaq_f64(v229, v236, *(float64x2_t *)((char *)v232 + 8 * v226 - 16));
          v236.f64[0] = v233[v39];
          v228 = vmlaq_n_f64(v228, *(float64x2_t *)((char *)v232 + 8 * v37), v236.f64[0]);
          v230 = vmlaq_n_f64(v230, *(float64x2_t *)((char *)v232 + 8 * v37 + 8 * v226 - 16), v236.f64[0]);
          v234 += 2;
          v232 += v37;
          v233 = (float64_t *)v235;
        }
        while (v234 <= v35);
        v227 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v227 = 0;
        v228 = 0uLL;
        v229 = 0uLL;
        v230 = 0uLL;
        v231 = 0uLL;
      }
      v237 = v226 - 2;
      if (v227 < v35)
      {
        v238 = v279[v227 * v39];
        v231 = vmlaq_n_f64(v231, *(float64x2_t *)(v43 + 8 * v227 * v37), v238);
        v229 = vmlaq_n_f64(v229, *(float64x2_t *)(v43 + 8 * (v227 * v37 + v237)), v238);
      }
      v239 = (float64x2_t *)((char *)v40 + 8 * v237 * v41);
      v240 = vmulq_n_f64(vaddq_f64(v228, v231), v44);
      if (v41 == 1 && v226 == 4)
      {
        *v40 = vmlaq_f64(v240, *v40, v224);
        v241 = vmulq_n_f64(vaddq_f64(v230, v229), v44);
      }
      else
      {
        if (v226 >= 2)
          v242 = 0;
        else
          v242 = v226;
        if (v226 < 2)
          v237 = 2;
        if (v242 < v237)
        {
          v243 = (double *)((char *)v40->f64 + v225 * v242);
          do
          {
            a33 = v240;
            *v243 = *(double *)((unint64_t)&a33 & 0xFFFFFFFFFFFFFFF7 | (8 * (v242++ & 1))) + v69 * *v243;
            v243 = (double *)((char *)v243 + v225);
          }
          while (v237 != v242);
        }
        v241 = vmulq_n_f64(vaddq_f64(v230, v229), v44);
        if (v41 != 1)
        {
          v239->f64[0] = v241.f64[0] + v69 * v239->f64[0];
          v239->f64[v41] = v241.f64[1] + v69 * v239->f64[v41];
          goto LABEL_287;
        }
      }
      *v239 = vmlaq_f64(v241, *v239, v224);
LABEL_287:
      v43 += 8 * v226;
      v40 = (float64x2_t *)((char *)v40 + 8 * v226 * v41);
      v45 -= v226;
      if (v45 <= 2)
      {
        if (v45 < 1)
          return;
        goto LABEL_316;
      }
    }
  }
  if (v34 >= 8 && v47 >= 0x1000)
  {
    v70 = 0;
    v71 = 0;
    v72 = -v37 & v37;
    if (v72 >= 2)
      v72 = 2;
    v73 = __clz(v72) - 62;
    v74 = (1 << v73);
    v305 = v39 << v73;
    v309 = v37 << v73;
    v301 = 8 * v39;
    v75 = 8 * v37;
    v76 = v35 - 1;
    v269 = v41 << 12;
    v77 = 16 * v41;
    v78 = 8 * v41;
    vars8a = v40;
    do
    {
      v285 = v40;
      v289 = v71;
      if (v45 - v71 >= 512)
        v79 = 512;
      else
        v79 = v45 - v71;
      v281 = v45 - v71;
      if (v45 - v71 >= 1)
      {
        v80 = v45 - (v70 << 9);
        if (v80 >= 512)
          v80 = 512;
        bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v80 - (v80 != 0)) + 8);
      }
      v293 = v70;
      v297 = v43;
      v81 = v279;
      v82 = v74;
      do
      {
        v83 = (v76 + v82) / v74;
        if (!v83)
          break;
        v46 = gemvN_aligned_mxn<Vector<double,2l>>(v79, v83, v43, v309, v81, v305, (unint64_t)&a34 | 0x10, v46);
        v81 = (double *)((char *)v81 + v301);
        v43 += v75;
        --v82;
      }
      while (v82);
      v45 = v276;
      if (v281 >= 1)
      {
        v84 = 0;
        v85 = v285;
        do
        {
          v86 = v79 - v84;
          v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v84), v278);
          if (v277 == 1 && v86 >= 2)
          {
            *(float64x2_t *)((char *)vars8a + 8 * v289 * v277 + 8 * v84) = v46;
          }
          else
          {
            if (v86 >= 2)
              v87 = 2;
            else
              v87 = v79 - v84;
            v88 = (v87 + 2) & (v87 >> 63);
            if (v87 < 0)
              v87 = 2;
            if (v88 < v87)
            {
              v89 = (_QWORD *)((char *)v85->f64 + v78 * v88);
              do
              {
                a25 = v46;
                *v89 = *(_QWORD *)((unint64_t)&a25 & 0xFFFFFFFFFFFFFFF7 | (8 * (v88++ & 1)));
                v89 = (_QWORD *)((char *)v89 + v78);
              }
              while (v87 != v88);
            }
          }
          v84 += 2;
          v85 = (float64x2_t *)((char *)v85 + v77);
        }
        while (v84 < v79);
      }
      v71 = v289 + 512;
      v70 = v293 + 1;
      v43 = v297 + 4096;
      v40 = (float64x2_t *)((char *)v285 + v269);
    }
    while (v289 + 512 < v276);
    return;
  }
  if (v34 < 1)
    return;
  if (v34 == 1)
  {
    if (v35 >= 2)
    {
      v118 = 0.0;
      v192 = 2;
      v193 = v36;
      v117 = 0.0;
      v194 = v38;
      do
      {
        v117 = v117 + *v193 * *v194;
        v118 = v118 + v193[v37] * v194[v39];
        v192 += 2;
        v194 += 2 * v39;
        v193 += 2 * v37;
      }
      while (v192 <= v35);
      v116 = v35 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v116 = 0;
      v117 = 0.0;
      v118 = 0.0;
    }
    if (v116 < v35)
      v117 = v117 + v36[v116 * v37] * v38[v116 * v39];
    v165 = (v118 + v117) * v44;
    goto LABEL_296;
  }
  if ((unint64_t)v34 < 3)
  {
    v45 = 2;
    goto LABEL_222;
  }
  v170 = 8 * v41;
  do
  {
    if (v45 >= 4)
      v171 = 4;
    else
      v171 = v45;
    if (v35 >= 2)
    {
      v176 = 0uLL;
      v177 = (float64x2_t *)v43;
      v178 = v279;
      v179 = 2;
      v175 = 0uLL;
      v174 = 0uLL;
      v173 = 0uLL;
      v180 = v279;
      do
      {
        v181 = vld1q_dup_f64(v180);
        v169 = 16 * v39;
        v180 = (const double *)((char *)v180 + v169);
        v176 = vmlaq_f64(v176, v181, *v177);
        v174 = vmlaq_f64(v174, v181, *(float64x2_t *)((char *)v177 + 8 * v171 - 16));
        v181.f64[0] = v178[v39];
        v173 = vmlaq_n_f64(v173, *(float64x2_t *)((char *)v177 + 8 * v37), v181.f64[0]);
        v175 = vmlaq_n_f64(v175, *(float64x2_t *)((char *)v177 + 8 * v37 + 8 * v171 - 16), v181.f64[0]);
        v179 += 2;
        v177 += v37;
        v178 = (float64_t *)v180;
      }
      while (v179 <= v35);
      v172 = v35 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v172 = 0;
      v173 = 0uLL;
      v174 = 0uLL;
      v175 = 0uLL;
      v176 = 0uLL;
    }
    v182 = v171 - 2;
    if (v172 < v35)
    {
      v183 = v279[v172 * v39];
      v176 = vmlaq_n_f64(v176, *(float64x2_t *)(v43 + 8 * v172 * v37), v183);
      v174 = vmlaq_n_f64(v174, *(float64x2_t *)(v43 + 8 * (v172 * v37 + v182)), v183);
    }
    v184 = (float64x2_t *)((char *)v40 + 8 * v182 * v41);
    v185 = vmulq_n_f64(vaddq_f64(v173, v176), v44);
    if (v41 == 1 && v171 == 4)
    {
      *v40 = v185;
      v186 = vmulq_n_f64(vaddq_f64(v175, v174), v44);
LABEL_206:
      *v184 = v186;
      goto LABEL_208;
    }
    if (v171 >= 2)
      v187 = 0;
    else
      v187 = v171;
    if (v171 < 2)
      v182 = 2;
    if (v187 < v182)
    {
      v188 = (_QWORD *)((char *)v40->f64 + v170 * v187);
      do
      {
        a27 = v185;
        *v188 = *(_QWORD *)((unint64_t)&a27 & 0xFFFFFFFFFFFFFFF7 | (8 * (v187++ & 1)));
        v188 = (_QWORD *)((char *)v188 + v170);
      }
      while (v182 != v187);
    }
    v186 = vmulq_n_f64(vaddq_f64(v175, v174), v44);
    if (v41 == 1)
      goto LABEL_206;
    v184->f64[0] = v186.f64[0];
    v184->f64[v41] = v186.f64[1];
LABEL_208:
    v43 += 8 * v171;
    v40 = (float64x2_t *)((char *)v40 + 8 * v171 * v41);
    v45 -= v171;
  }
  while (v45 > 2);
  if (v45 < 1)
    return;
LABEL_222:
  if (v35 >= 2)
  {
    v197 = 0uLL;
    v198 = 2;
    v199 = (float64x2_t *)(v43 + 8 * (v45 - 2));
    v196 = 0uLL;
    v200 = v279;
    do
    {
      v196 = vmlaq_n_f64(v196, *v199, *v200);
      v197 = vmlaq_n_f64(v197, *(float64x2_t *)((char *)v199 + 8 * v37), v200[v39]);
      v198 += 2;
      v200 += 2 * v39;
      v199 += v37;
    }
    while (v198 <= v35);
    v195 = v35 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v195 = 0;
    v196 = 0uLL;
    v197 = 0uLL;
  }
  if (v195 < v35)
    v196 = vmlaq_n_f64(v196, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v195 * v37), v279[v195 * v39]);
  v201 = vmulq_n_f64(vaddq_f64(v197, v196), v44);
  v202 = 2 - v45;
  if (2 - v45 <= 1)
  {
    do
    {
      a26 = v201;
      v40->f64[0] = *(float64_t *)((unint64_t)&a26 & 0xFFFFFFFFFFFFFFF7 | (8 * (v202++ & 1)));
      v40 = (float64x2_t *)((char *)v40 + 8 * v41);
    }
    while (v202 != 2);
  }
}

uint64_t dgemvT_packed_base(uint64_t result, uint64_t a2, float64x2_t *a3, uint64_t a4, float64x2_t *a5, double *a6, uint64_t a7, double _D0, double a9)
{
  uint64_t v9;
  double v11;
  double v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int8x16_t v17;
  double v18;
  uint64_t v19;
  float64x2_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  char *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  double *v60;
  float64x2_t v61;
  int8x16_t v63;
  uint64_t v73;
  float64x2_t *v74;
  uint64_t v75;
  float64x2_t *v76;
  uint64_t v77;
  float64x2_t *v78;
  float64x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  float64x2_t *v82;
  uint64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t *v92;
  uint64_t i;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  char *v100;
  double *v101;
  float64x2_t v103;
  float64x2_t v107;
  float64x2_t v108;
  int8x16_t v109;
  double v110;
  uint64_t v111;
  float64x2_t v112;
  char *v113;
  uint64_t v114;
  float64x2_t *v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t *v118;
  float64x2_t *v119;
  uint64_t j;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  double *v125;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t *v131;
  uint64_t k;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int8x16_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float64x2_t *v151;
  float64x2_t v152;
  float64x2_t v153;
  uint64_t v154;
  char *v155;
  float64x2_t *v156;
  float64x2_t *v157;
  float64x2_t *v158;
  uint64_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t *v167;
  float64x2_t *v168;
  float64x2_t *v169;
  float64x2_t *v170;
  float64x2_t *v171;
  double *v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  uint64_t v177;
  float64x2_t *v178;
  uint64_t v179;
  float64x2_t *v180;
  uint64_t v181;
  float64x2_t *v182;
  float64x2_t *v183;
  uint64_t v184;
  uint64_t v185;
  float64x2_t *v186;
  uint64_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t *v192;
  float64x2_t *v193;
  float64x2_t *v194;
  float64x2_t *v195;
  float64x2_t *v196;
  uint64_t m;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  char *v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  double *v209;
  float64x2_t v210;
  float64x2_t v211;
  uint64_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  int8x16_t v216;
  char *v217;
  uint64_t v218;
  float64x2_t *v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t *v222;
  float64x2_t *v223;
  uint64_t n;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  double *v229;
  float64x2_t v230;
  float64x2_t *v231;
  float64x2_t v232;
  float64x2_t *v233;
  float64x2_t *v234;
  uint64_t ii;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  int8x16_t v241;
  int8x16_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  float64x2_t *v257;
  float64x2_t v258;
  float64x2_t v259;
  uint64_t v260;
  char *v261;
  float64x2_t *v262;
  float64x2_t *v263;
  float64x2_t *v264;
  uint64_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t *v273;
  float64x2_t *v274;
  float64x2_t *v275;
  float64x2_t *v276;
  float64x2_t *v277;
  double *v278;
  uint64_t v287;
  float64x2_t *v288;
  uint64_t v289;
  float64x2_t *v290;
  uint64_t v291;
  float64x2_t *v292;
  float64x2_t *v293;
  uint64_t v294;
  uint64_t v295;
  float64x2_t *v296;
  uint64_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t *v302;
  float64x2_t *v303;
  float64x2_t *v304;
  float64x2_t *v305;
  float64x2_t *v306;
  uint64_t jj;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  char *v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v318;
  double *v319;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  float64x2_t *v337;
  float64x2_t v338;
  float64x2_t v339;
  uint64_t v340;
  char *v341;
  float64x2_t *v342;
  float64x2_t *v343;
  float64x2_t *v344;
  uint64_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t *v353;
  float64x2_t *v354;
  float64x2_t *v355;
  float64x2_t *v356;
  float64x2_t *v357;
  double *v358;
  uint64_t v367;
  float64x2_t *v368;
  uint64_t v369;
  float64x2_t *v370;
  uint64_t v371;
  float64x2_t *v372;
  float64x2_t *v373;
  uint64_t v374;
  uint64_t v375;
  float64x2_t *v376;
  uint64_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t *v382;
  float64x2_t *v383;
  float64x2_t *v384;
  float64x2_t *v385;
  float64x2_t *v386;
  uint64_t nn;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  char *v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v398;
  double *v399;
  char *v402;
  uint64_t v403;
  float64x2_t *v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t *v407;
  float64x2_t *v408;
  uint64_t kk;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  double *v414;
  float64x2_t *v417;
  float64x2_t v418;
  float64x2_t *v419;
  float64x2_t *v420;
  uint64_t mm;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  char *v425;
  uint64_t v426;
  float64x2_t *v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t *v430;
  float64x2_t *v431;
  uint64_t i1;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  double *v437;
  float64x2_t *v440;
  float64x2_t v441;
  float64x2_t *v442;
  float64x2_t *v443;
  uint64_t i2;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  float64x2_t *v452;
  float64x2_t *v453;
  float64x2_t *v454;
  float64x2_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;

  v9 = a4;
  if (a9 == 1.0)
  {
    if (result > 1)
    {
      v13 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v14 = *a5;
          do
          {
            *a6 = *a6 + _D0 * vaddvq_f64(vmulq_f64(v14, *a3));
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v21 = *(int8x16_t *)((char *)&unk_23D9C2400 + 8 * (2 - (result & 1)));
        v456 = result;
        v448 = result - 2;
        v22 = 0;
        if (a2 >= 8)
        {
          v23 = 8 * a4;
          v452 = (float64x2_t *)((char *)a5 + 8 * v13);
          v24 = v13 + 2 * a4;
          v25 = v13 + 4 * a4;
          v26 = v25 + a4;
          v27 = a4 << 6;
          v28 = 8 * v13;
          v29 = 8 * (v13 + a4);
          v30 = 8 * v24;
          v31 = 8 * (v24 + a4);
          v32 = 8 * v25;
          v33 = 8 * v26;
          v34 = 8 * (v13 + 6 * a4);
          v35 = 8 * (7 * a4 + v13);
          v36 = a3;
          do
          {
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v9;
            v40 = (char *)&a3->f64[v22 * v9];
            v41 = a5;
            v42 = a5;
            v43 = v36;
            v44 = v456;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = 0uLL;
            do
            {
              v51 = *v42++;
              v37 = vmlaq_f64(v37, v51, *v43);
              v38 = vmlaq_f64(v38, v51, *(float64x2_t *)((char *)v43 + v23));
              v52 = (float64x2_t *)((char *)v43 + v23 + v23);
              v45 = vmlaq_f64(v45, v51, *v52);
              v53 = (float64x2_t *)((char *)v52 + v23);
              v50 = vmlaq_f64(v50, v51, *v53);
              v54 = (float64x2_t *)((char *)v53 + v23);
              v49 = vmlaq_f64(v49, v51, *v54);
              v55 = (float64x2_t *)((char *)v54 + v23);
              v48 = vmlaq_f64(v48, v51, *v55);
              v56 = (float64x2_t *)((char *)v55 + v23);
              v47 = vmlaq_f64(v47, v51, *v56);
              v46 = vmlaq_f64(v46, v51, *(float64x2_t *)((char *)v56 + v23));
              v44 -= 2;
              ++v43;
            }
            while (v44 > 2);
            v57 = vaddq_f64(v45, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v30])));
            v58 = vaddq_f64(v50, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v31])));
            _Q5 = vaddq_f64(v49, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v32])));
            v60 = &a6[v22 * a7];
            v61 = vaddq_f64(v48, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v33])));
            _Q3 = vaddq_f64(v47, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v34])));
            v63 = (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v35]);
            _Q7 = vpaddq_f64(vaddq_f64(v37, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v28]))), vaddq_f64(v38, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v29]))));
            *v60 = vmlad_n_f64(*v60, _D0, _Q7.f64[0]);
            __asm { FMLA            D17, D0, V7.D[1] }
            v60[a7] = _D17;
            _Q6 = vpaddq_f64(v57, v58);
            v60[2 * a7] = vmlad_n_f64(v60[2 * a7], _D0, _Q6.f64[0]);
            __asm { FMLA            D7, D0, V6.D[1] }
            v60[3 * a7] = _Q7.f64[0];
            _Q4 = vpaddq_f64(_Q5, v61);
            v60[4 * a7] = vmlad_n_f64(v60[4 * a7], _D0, _Q4.f64[0]);
            _Q2 = vpaddq_f64(_Q3, vaddq_f64(v46, (float64x2_t)vandq_s8(v21, v63)));
            __asm { FMLA            D5, D0, V4.D[1] }
            v60[5 * a7] = _Q5.f64[0];
            v60[6 * a7] = vmlad_n_f64(v60[6 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v60[7 * a7] = _Q3.f64[0];
            v22 += 8;
            result = v22 | 7;
            v36 = (float64x2_t *)((char *)v36 + v27);
            v9 = v39;
            a5 = v41;
          }
          while ((v22 | 7) < a2);
        }
        if ((v22 | 3) >= a2)
        {
          v83 = v456;
          v73 = v448;
        }
        else
        {
          v73 = v448;
          v74 = (float64x2_t *)((char *)a5 + 8 * v448);
          v75 = v448 + 2 * v9;
          v76 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 24));
          v77 = 32 * v9;
          v78 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 16));
          v79 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 8));
          v80 = 8 * v75;
          v81 = 8 * (v75 + v9);
          v82 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          v83 = v456;
          do
          {
            v84 = 0uLL;
            v85 = 0uLL;
            v86 = 0uLL;
            v87 = 0uLL;
            v88 = a5;
            v89 = v82;
            v90 = v79;
            v91 = v78;
            v92 = v76;
            for (i = v456; i > 2; i -= 2)
            {
              v94 = *v88++;
              v95 = v94;
              v96 = *v89++;
              v87 = vmlaq_f64(v87, v95, v96);
              v97 = *v90++;
              v86 = vmlaq_f64(v86, v95, v97);
              v98 = *v91++;
              v85 = vmlaq_f64(v85, v95, v98);
              v99 = *v92++;
              v84 = vmlaq_f64(v84, v95, v99);
            }
            v100 = (char *)&a3->f64[v22 * v9];
            v101 = &a6[v22 * a7];
            _Q3 = vaddq_f64(v85, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[v80])));
            v103 = vaddq_f64(v84, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[v81])));
            _Q4 = vpaddq_f64(vaddq_f64(v87, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[8 * v448]))), vaddq_f64(v86, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[8 * v448 + 8 * v9]))));
            *v101 = vmlad_n_f64(*v101, _D0, _Q4.f64[0]);
            __asm { FMLA            D5, D0, V4.D[1] }
            v101[a7] = _D5;
            _Q2 = vpaddq_f64(_Q3, v103);
            v101[2 * a7] = vmlad_n_f64(v101[2 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v101[3 * a7] = _Q3.f64[0];
            v22 += 4;
            result = v22 | 3;
            v76 = (float64x2_t *)((char *)v76 + v77);
            v78 = (float64x2_t *)((char *)v78 + v77);
            v79 = (float64x2_t *)((char *)v79 + v77);
            v82 = (float64x2_t *)((char *)v82 + v77);
          }
          while ((v22 | 3) < a2);
        }
        if ((v22 | 1) < a2)
        {
          v113 = (char *)a3 + v9 * (8 * v22 + 8);
          v114 = 16 * v9;
          v115 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          do
          {
            v116 = 0uLL;
            v117 = 0uLL;
            v118 = a5;
            v119 = v115;
            result = (uint64_t)v113;
            for (j = v83; j > 2; j -= 2)
            {
              v121 = *v118++;
              v122 = v121;
              v123 = *v119++;
              v117 = vmlaq_f64(v117, v122, v123);
              v124 = *(float64x2_t *)result;
              result += 16;
              v116 = vmlaq_f64(v116, v122, v124);
            }
            v125 = &a6[v22 * a7];
            _Q2 = vpaddq_f64(vaddq_f64(v117, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73)))), vaddq_f64(v116, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73 + 8 * v9)))));
            *v125 = vmlad_n_f64(*v125, _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v125[a7] = _D3;
            v22 += 2;
            v113 += v114;
            v115 = (float64x2_t *)((char *)v115 + v114);
          }
          while ((v22 | 1) < a2);
        }
        if (v22 < a2)
        {
          v128 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          do
          {
            v129 = 0uLL;
            v130 = a5;
            v131 = v128;
            for (k = v83; k > 2; k -= 2)
            {
              v133 = *v130++;
              v134 = v133;
              v135 = *v131++;
              v129 = vmlaq_f64(v129, v134, v135);
            }
            a6[v22 * a7] = a6[v22 * a7]
                         + _D0
                         * vaddvq_f64(vaddq_f64(v129, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73)))));
            ++v22;
            v128 = (float64x2_t *)((char *)v128 + 8 * v9);
          }
          while (v22 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v15 = *a5;
        v16 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v17 = vmvnq_s8(*(int8x16_t *)((char *)&unk_23D9C2400 + 8 * (4 - result)));
        do
        {
          *a6 = *a6
              + _D0
              * vaddvq_f64(vaddq_f64(vmulq_f64(v16, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v15, *a3), v17)));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v11 = a5->f64[0];
      do
      {
        *a6 = *a6 + _D0 * (v11 * a3->f64[0]);
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 1)
    {
      v19 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v20 = *a5;
          do
          {
            *a6 = vaddvq_f64(vmulq_f64(v20, *a3)) * _D0;
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * v9);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v136 = *(int8x16_t *)((char *)&unk_23D9C2400 + 8 * (2 - (result & 1)));
        v457 = result;
        v449 = result - 2;
        v137 = 0;
        if (a2 >= 8)
        {
          v138 = 8 * v9;
          v453 = (float64x2_t *)((char *)a5 + 8 * v19);
          v139 = v19 + 2 * v9;
          v140 = v19 + 4 * v9;
          v141 = v140 + v9;
          v142 = v9 << 6;
          v143 = 8 * v19;
          v144 = 8 * (v19 + v9);
          v145 = 8 * v139;
          v146 = 8 * (v139 + v9);
          v147 = 8 * v140;
          v148 = 8 * v141;
          v149 = 8 * (v19 + 6 * v9);
          v150 = 8 * (7 * v9 + v19);
          v151 = a3;
          do
          {
            v152 = 0uLL;
            v153 = 0uLL;
            v154 = v9;
            v155 = (char *)&a3->f64[v137 * v9];
            v156 = a5;
            v157 = a5;
            v158 = v151;
            v159 = v457;
            v160 = 0uLL;
            v161 = 0uLL;
            v162 = 0uLL;
            v163 = 0uLL;
            v164 = 0uLL;
            v165 = 0uLL;
            do
            {
              v166 = *v157++;
              v152 = vmlaq_f64(v152, v166, *v158);
              v153 = vmlaq_f64(v153, v166, *(float64x2_t *)((char *)v158 + v138));
              v167 = (float64x2_t *)((char *)v158 + v138 + v138);
              v160 = vmlaq_f64(v160, v166, *v167);
              v168 = (float64x2_t *)((char *)v167 + v138);
              v165 = vmlaq_f64(v165, v166, *v168);
              v169 = (float64x2_t *)((char *)v168 + v138);
              v164 = vmlaq_f64(v164, v166, *v169);
              v170 = (float64x2_t *)((char *)v169 + v138);
              v163 = vmlaq_f64(v163, v166, *v170);
              v171 = (float64x2_t *)((char *)v170 + v138);
              v162 = vmlaq_f64(v162, v166, *v171);
              v161 = vmlaq_f64(v161, v166, *(float64x2_t *)((char *)v171 + v138));
              v159 -= 2;
              ++v158;
            }
            while (v159 > 2);
            v172 = &a6[v137 * a7];
            v173 = vpaddq_f64(vaddq_f64(v152, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v143]))), vaddq_f64(v153, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v144]))));
            v174 = vpaddq_f64(vaddq_f64(v160, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v145]))), vaddq_f64(v165, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v146]))));
            v175 = vpaddq_f64(vaddq_f64(v164, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v147]))), vaddq_f64(v163, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v148]))));
            v176 = vpaddq_f64(vaddq_f64(v162, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v149]))), vaddq_f64(v161, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v150]))));
            *v172 = _D0 * v173.f64[0];
            v172[a7] = vmuld_lane_f64(_D0, v173, 1);
            v172[2 * a7] = _D0 * v174.f64[0];
            v172[3 * a7] = vmuld_lane_f64(_D0, v174, 1);
            v172[4 * a7] = _D0 * v175.f64[0];
            v172[5 * a7] = vmuld_lane_f64(_D0, v175, 1);
            v172[6 * a7] = _D0 * v176.f64[0];
            v172[7 * a7] = vmuld_lane_f64(_D0, v176, 1);
            v137 += 8;
            result = v137 | 7;
            v151 = (float64x2_t *)((char *)v151 + v142);
            v9 = v154;
            a5 = v156;
          }
          while ((v137 | 7) < a2);
        }
        if ((v137 | 3) >= a2)
        {
          v187 = v457;
          v177 = v449;
        }
        else
        {
          v177 = v449;
          v178 = (float64x2_t *)((char *)a5 + 8 * v449);
          v179 = v449 + 2 * v9;
          v180 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 24));
          v181 = 32 * v9;
          v182 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 16));
          v183 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 8));
          v184 = 8 * v179;
          v185 = 8 * (v179 + v9);
          v186 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          v187 = v457;
          do
          {
            v188 = 0uLL;
            v189 = 0uLL;
            v190 = 0uLL;
            v191 = 0uLL;
            v192 = a5;
            v193 = v186;
            v194 = v183;
            v195 = v182;
            v196 = v180;
            for (m = v457; m > 2; m -= 2)
            {
              v198 = *v192++;
              v199 = v198;
              v200 = *v193++;
              v191 = vmlaq_f64(v191, v199, v200);
              v201 = *v194++;
              v190 = vmlaq_f64(v190, v199, v201);
              v202 = *v195++;
              v189 = vmlaq_f64(v189, v199, v202);
              v203 = *v196++;
              v188 = vmlaq_f64(v188, v199, v203);
            }
            v204 = (char *)&a3->f64[v137 * v9];
            v205 = vaddq_f64(v191, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[8 * v449])));
            v206 = vaddq_f64(v190, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[8 * v449 + 8 * v9])));
            v207 = vaddq_f64(v189, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[v184])));
            v208 = *(float64x2_t *)&v204[v185];
            v209 = &a6[v137 * a7];
            v210 = vpaddq_f64(v205, v206);
            v211 = vpaddq_f64(v207, vaddq_f64(v188, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, v208))));
            *v209 = _D0 * v210.f64[0];
            v209[a7] = vmuld_lane_f64(_D0, v210, 1);
            v209[2 * a7] = _D0 * v211.f64[0];
            v209[3 * a7] = vmuld_lane_f64(_D0, v211, 1);
            v137 += 4;
            result = v137 | 3;
            v180 = (float64x2_t *)((char *)v180 + v181);
            v182 = (float64x2_t *)((char *)v182 + v181);
            v183 = (float64x2_t *)((char *)v183 + v181);
            v186 = (float64x2_t *)((char *)v186 + v181);
          }
          while ((v137 | 3) < a2);
        }
        if ((v137 | 1) < a2)
        {
          v217 = (char *)a3 + v9 * (8 * v137 + 8);
          v218 = 16 * v9;
          v219 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = a5;
            v223 = v219;
            result = (uint64_t)v217;
            for (n = v187; n > 2; n -= 2)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f64(v221, v226, v227);
              v228 = *(float64x2_t *)result;
              result += 16;
              v220 = vmlaq_f64(v220, v226, v228);
            }
            v229 = &a6[v137 * a7];
            v230 = vpaddq_f64(vaddq_f64(v221, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177)))), vaddq_f64(v220, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177 + 8 * v9)))));
            *v229 = _D0 * v230.f64[0];
            v229[a7] = vmuld_lane_f64(_D0, v230, 1);
            v137 += 2;
            v217 += v218;
            v219 = (float64x2_t *)((char *)v219 + v218);
          }
          while ((v137 | 1) < a2);
        }
        if (v137 < a2)
        {
          v231 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          do
          {
            v232 = 0uLL;
            v233 = a5;
            v234 = v231;
            for (ii = v187; ii > 2; ii -= 2)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f64(v232, v237, v238);
            }
            a6[v137 * a7] = vaddvq_f64(vaddq_f64(v232, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177)))))* _D0;
            ++v137;
            v231 = (float64x2_t *)((char *)v231 + 8 * v9);
          }
          while (v137 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v107 = *a5;
        v108 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v109 = vmvnq_s8(*(int8x16_t *)((char *)&unk_23D9C2400 + 8 * (4 - result)));
        do
        {
          *a6 = vaddvq_f64(vaddq_f64(vmulq_f64(v108, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v107, *a3), v109)))* _D0;
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v12 = a5->f64[0];
      do
      {
        *a6 = v12 * a3->f64[0] * _D0;
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 1)
    {
      v111 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v112 = *a5;
          do
          {
            *a6 = -(*a6 - _D0 * vaddvq_f64(vmulq_f64(v112, *a3)));
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * v9);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v458 = result;
        v242 = *(int8x16_t *)((char *)&unk_23D9C2400 + 8 * (2 - (result & 1)));
        v450 = result - 2;
        v243 = 0;
        if (a2 >= 8)
        {
          v244 = 8 * v9;
          v454 = (float64x2_t *)((char *)a5 + 8 * v111);
          v245 = v111 + 2 * v9;
          v246 = v111 + 4 * v9;
          v247 = v246 + v9;
          v248 = v9 << 6;
          v249 = 8 * v111;
          v250 = 8 * (v111 + v9);
          v251 = 8 * v245;
          v252 = 8 * (v245 + v9);
          v253 = 8 * v246;
          v254 = 8 * v247;
          v255 = 8 * (v111 + 6 * v9);
          v256 = 8 * (7 * v9 + v111);
          v257 = a3;
          do
          {
            v258 = 0uLL;
            v259 = 0uLL;
            v260 = v9;
            v261 = (char *)&a3->f64[v243 * v9];
            v262 = a5;
            v263 = a5;
            v264 = v257;
            v265 = v458;
            v266 = 0uLL;
            v267 = 0uLL;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            do
            {
              v272 = *v263++;
              v258 = vmlaq_f64(v258, v272, *v264);
              v259 = vmlaq_f64(v259, v272, *(float64x2_t *)((char *)v264 + v244));
              v273 = (float64x2_t *)((char *)v264 + v244 + v244);
              v266 = vmlaq_f64(v266, v272, *v273);
              v274 = (float64x2_t *)((char *)v273 + v244);
              v271 = vmlaq_f64(v271, v272, *v274);
              v275 = (float64x2_t *)((char *)v274 + v244);
              v270 = vmlaq_f64(v270, v272, *v275);
              v276 = (float64x2_t *)((char *)v275 + v244);
              v269 = vmlaq_f64(v269, v272, *v276);
              v277 = (float64x2_t *)((char *)v276 + v244);
              v268 = vmlaq_f64(v268, v272, *v277);
              v267 = vmlaq_f64(v267, v272, *(float64x2_t *)((char *)v277 + v244));
              v265 -= 2;
              ++v264;
            }
            while (v265 > 2);
            v278 = &a6[v243 * a7];
            _Q6 = vpaddq_f64(vaddq_f64(v258, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v249]))), vaddq_f64(v259, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v250]))));
            _Q7 = vpaddq_f64(vaddq_f64(v266, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v251]))), vaddq_f64(v271, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v252]))));
            _Q4 = vpaddq_f64(vaddq_f64(v270, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v253]))), vaddq_f64(v269, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v254]))));
            _Q2 = vpaddq_f64(vaddq_f64(v268, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v255]))), vaddq_f64(v267, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v256]))));
            *v278 = vmlad_n_f64(-*v278, _D0, _Q6.f64[0]);
            __asm { FMLA            D3, D0, V6.D[1] }
            v278[a7] = _D3;
            v278[2 * a7] = vmlad_n_f64(-v278[2 * a7], _D0, _Q7.f64[0]);
            __asm { FMLA            D3, D0, V7.D[1] }
            v278[3 * a7] = _D3;
            v278[4 * a7] = vmlad_n_f64(-v278[4 * a7], _D0, _Q4.f64[0]);
            __asm { FMLA            D3, D0, V4.D[1] }
            v278[5 * a7] = _D3;
            v278[6 * a7] = vmlad_n_f64(-v278[6 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v278[7 * a7] = _D3;
            v243 += 8;
            result = v243 | 7;
            v257 = (float64x2_t *)((char *)v257 + v248);
            v9 = v260;
            a5 = v262;
          }
          while ((v243 | 7) < a2);
        }
        if ((v243 | 3) >= a2)
        {
          v297 = v458;
          v287 = v450;
        }
        else
        {
          v287 = v450;
          v288 = (float64x2_t *)((char *)a5 + 8 * v450);
          v289 = v450 + 2 * v9;
          v290 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 24));
          v291 = 32 * v9;
          v292 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 16));
          v293 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 8));
          v294 = 8 * v289;
          v295 = 8 * (v289 + v9);
          v296 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          v297 = v458;
          do
          {
            v298 = 0uLL;
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = a5;
            v303 = v296;
            v304 = v293;
            v305 = v292;
            v306 = v290;
            for (jj = v458; jj > 2; jj -= 2)
            {
              v308 = *v302++;
              v309 = v308;
              v310 = *v303++;
              v301 = vmlaq_f64(v301, v309, v310);
              v311 = *v304++;
              v300 = vmlaq_f64(v300, v309, v311);
              v312 = *v305++;
              v299 = vmlaq_f64(v299, v309, v312);
              v313 = *v306++;
              v298 = vmlaq_f64(v298, v309, v313);
            }
            v314 = (char *)&a3->f64[v243 * v9];
            v315 = vaddq_f64(v301, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[8 * v450])));
            v316 = vaddq_f64(v300, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[8 * v450 + 8 * v9])));
            _Q4 = vaddq_f64(v299, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[v294])));
            v318 = *(float64x2_t *)&v314[v295];
            v319 = &a6[v243 * a7];
            _Q3 = vpaddq_f64(v315, v316);
            _Q2 = vpaddq_f64(_Q4, vaddq_f64(v298, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, v318))));
            *v319 = vmlad_n_f64(-*v319, _D0, _Q3.f64[0]);
            __asm { FMLA            D4, D0, V3.D[1] }
            v319[a7] = _Q4.f64[0];
            v319[2 * a7] = vmlad_n_f64(-v319[2 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v319[3 * a7] = _Q3.f64[0];
            v243 += 4;
            result = v243 | 3;
            v290 = (float64x2_t *)((char *)v290 + v291);
            v292 = (float64x2_t *)((char *)v292 + v291);
            v293 = (float64x2_t *)((char *)v293 + v291);
            v296 = (float64x2_t *)((char *)v296 + v291);
          }
          while ((v243 | 3) < a2);
        }
        if ((v243 | 1) < a2)
        {
          v402 = (char *)a3 + v9 * (8 * v243 + 8);
          v403 = 16 * v9;
          v404 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          do
          {
            v405 = 0uLL;
            v406 = 0uLL;
            v407 = a5;
            v408 = v404;
            result = (uint64_t)v402;
            for (kk = v297; kk > 2; kk -= 2)
            {
              v410 = *v407++;
              v411 = v410;
              v412 = *v408++;
              v406 = vmlaq_f64(v406, v411, v412);
              v413 = *(float64x2_t *)result;
              result += 16;
              v405 = vmlaq_f64(v405, v411, v413);
            }
            v414 = &a6[v243 * a7];
            _Q2 = vpaddq_f64(vaddq_f64(v406, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287)))), vaddq_f64(v405, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287 + 8 * v9)))));
            *v414 = vmlad_n_f64(-*v414, _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v414[a7] = _D3;
            v243 += 2;
            v402 += v403;
            v404 = (float64x2_t *)((char *)v404 + v403);
          }
          while ((v243 | 1) < a2);
        }
        if (v243 < a2)
        {
          v417 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          do
          {
            v418 = 0uLL;
            v419 = a5;
            v420 = v417;
            for (mm = v297; mm > 2; mm -= 2)
            {
              v422 = *v419++;
              v423 = v422;
              v424 = *v420++;
              v418 = vmlaq_f64(v418, v423, v424);
            }
            a6[v243 * a7] = -(a6[v243 * a7]
                            - _D0
                            * vaddvq_f64(vaddq_f64(v418, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287))))));
            ++v243;
            v417 = (float64x2_t *)((char *)v417 + 8 * v9);
          }
          while (v243 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v214 = *a5;
        v215 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v216 = vmvnq_s8(*(int8x16_t *)((char *)&unk_23D9C2400 + 8 * (4 - result)));
        do
        {
          *a6 = -(*a6
                - _D0
                * vaddvq_f64(vaddq_f64(vmulq_f64(v215, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v214, *a3), v216))));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v18 = a5->f64[0];
      do
      {
        *a6 = -(*a6 - _D0 * (v18 * a3->f64[0]));
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v212 = result - 2;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        v213 = *a5;
        do
        {
          *a6 = *a6 * a9 + _D0 * vaddvq_f64(vmulq_f64(v213, *a3));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 4)
    {
      v459 = result;
      v322 = *(int8x16_t *)((char *)&unk_23D9C2400 + 8 * (2 - (result & 1)));
      v323 = 8 * v9;
      v451 = result - 2;
      v324 = 0;
      if (a2 >= 8)
      {
        v455 = (float64x2_t *)((char *)a5 + 8 * v212);
        v325 = v212 + 2 * v9;
        v326 = v212 + 4 * v9;
        v327 = v326 + v9;
        v328 = v9 << 6;
        v329 = 8 * v212;
        v330 = 8 * (v212 + v9);
        v331 = 8 * v325;
        v332 = 8 * (v325 + v9);
        v333 = 8 * v326;
        v334 = 8 * v327;
        v335 = 8 * (v212 + 6 * v9);
        v336 = 8 * (7 * v9 + v212);
        v337 = a3;
        do
        {
          v338 = 0uLL;
          v339 = 0uLL;
          v340 = v9;
          v341 = (char *)&a3->f64[v324 * v9];
          v342 = a5;
          v343 = a5;
          v344 = v337;
          v345 = v459;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          v349 = 0uLL;
          v350 = 0uLL;
          v351 = 0uLL;
          do
          {
            v352 = *v343++;
            v338 = vmlaq_f64(v338, v352, *v344);
            v339 = vmlaq_f64(v339, v352, *(float64x2_t *)((char *)v344 + v323));
            v353 = (float64x2_t *)((char *)v344 + v323 + v323);
            v346 = vmlaq_f64(v346, v352, *v353);
            v354 = (float64x2_t *)((char *)v353 + v323);
            v351 = vmlaq_f64(v351, v352, *v354);
            v355 = (float64x2_t *)((char *)v354 + v323);
            v350 = vmlaq_f64(v350, v352, *v355);
            v356 = (float64x2_t *)((char *)v355 + v323);
            v349 = vmlaq_f64(v349, v352, *v356);
            v357 = (float64x2_t *)((char *)v356 + v323);
            v348 = vmlaq_f64(v348, v352, *v357);
            v347 = vmlaq_f64(v347, v352, *(float64x2_t *)((char *)v357 + v323));
            v345 -= 2;
            ++v344;
          }
          while (v345 > 2);
          v358 = &a6[v324 * a7];
          _Q7 = vpaddq_f64(vaddq_f64(v338, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v329]))), vaddq_f64(v339, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v330]))));
          _Q16 = vpaddq_f64(vaddq_f64(v346, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v331]))), vaddq_f64(v351, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v332]))));
          _Q5 = vpaddq_f64(vaddq_f64(v350, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v333]))), vaddq_f64(v349, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v334]))));
          _Q3 = vpaddq_f64(vaddq_f64(v348, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v335]))), vaddq_f64(v347, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v336]))));
          *v358 = vmlad_n_f64(*v358 * a9, _D0, _Q7.f64[0]);
          __asm { FMLA            D4, D0, V7.D[1] }
          v358[a7] = _D4;
          v358[2 * a7] = vmlad_n_f64(v358[2 * a7] * a9, _D0, _Q16.f64[0]);
          __asm { FMLA            D4, D0, V16.D[1] }
          v358[3 * a7] = _D4;
          v358[4 * a7] = vmlad_n_f64(v358[4 * a7] * a9, _D0, _Q5.f64[0]);
          __asm { FMLA            D4, D0, V5.D[1] }
          v358[5 * a7] = _D4;
          v358[6 * a7] = vmlad_n_f64(v358[6 * a7] * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v358[7 * a7] = _D4;
          v324 += 8;
          result = v324 | 7;
          v337 = (float64x2_t *)((char *)v337 + v328);
          v9 = v340;
          a5 = v342;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v377 = v459;
        v367 = v451;
      }
      else
      {
        v367 = v451;
        v368 = (float64x2_t *)((char *)a5 + 8 * v451);
        v369 = v451 + 2 * v9;
        v370 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 24));
        v371 = 32 * v9;
        v372 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 16));
        v373 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 8));
        v374 = 8 * v369;
        v375 = 8 * (v369 + v9);
        v376 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        v377 = v459;
        do
        {
          v378 = 0uLL;
          v379 = 0uLL;
          v380 = 0uLL;
          v381 = 0uLL;
          v382 = a5;
          v383 = v376;
          v384 = v373;
          v385 = v372;
          v386 = v370;
          for (nn = v459; nn > 2; nn -= 2)
          {
            v388 = *v382++;
            v389 = v388;
            v390 = *v383++;
            v381 = vmlaq_f64(v381, v389, v390);
            v391 = *v384++;
            v380 = vmlaq_f64(v380, v389, v391);
            v392 = *v385++;
            v379 = vmlaq_f64(v379, v389, v392);
            v393 = *v386++;
            v378 = vmlaq_f64(v378, v389, v393);
          }
          v394 = (char *)&a3->f64[v324 * v9];
          v395 = vaddq_f64(v381, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[8 * v451])));
          v396 = vaddq_f64(v380, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[8 * v451 + 8 * v9])));
          result = v324 * a7;
          _Q5 = vaddq_f64(v379, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[v374])));
          v398 = *(float64x2_t *)&v394[v375];
          v399 = &a6[v324 * a7];
          _Q4 = vpaddq_f64(v395, v396);
          _Q3 = vpaddq_f64(_Q5, vaddq_f64(v378, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, v398))));
          *v399 = vmlad_n_f64(*v399 * a9, _D0, _Q4.f64[0]);
          __asm { FMLA            D5, D0, V4.D[1] }
          v399[a7] = _Q5.f64[0];
          v399[2 * a7] = vmlad_n_f64(v399[2 * a7] * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v399[3 * a7] = _Q4.f64[0];
          v324 += 4;
          v370 = (float64x2_t *)((char *)v370 + v371);
          v372 = (float64x2_t *)((char *)v372 + v371);
          v373 = (float64x2_t *)((char *)v373 + v371);
          v376 = (float64x2_t *)((char *)v376 + v371);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v425 = (char *)a3 + v9 * (8 * v324 + 8);
        v426 = 16 * v9;
        v427 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        do
        {
          v428 = 0uLL;
          v429 = 0uLL;
          v430 = a5;
          v431 = v427;
          result = (uint64_t)v425;
          for (i1 = v377; i1 > 2; i1 -= 2)
          {
            v433 = *v430++;
            v434 = v433;
            v435 = *v431++;
            v429 = vmlaq_f64(v429, v434, v435);
            v436 = *(float64x2_t *)result;
            result += 16;
            v428 = vmlaq_f64(v428, v434, v436);
          }
          v437 = &a6[v324 * a7];
          _Q3 = vpaddq_f64(vaddq_f64(v429, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367)))), vaddq_f64(v428, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367 + 8 * v9)))));
          *v437 = vmlad_n_f64(*v437 * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v437[a7] = _D4;
          v324 += 2;
          v425 += v426;
          v427 = (float64x2_t *)((char *)v427 + v426);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v440 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        do
        {
          v441 = 0uLL;
          v442 = a5;
          v443 = v440;
          for (i2 = v377; i2 > 2; i2 -= 2)
          {
            v445 = *v442++;
            v446 = v445;
            v447 = *v443++;
            v441 = vmlaq_f64(v441, v446, v447);
          }
          a6[v324 * a7] = a6[v324 * a7] * a9
                        + _D0
                        * vaddvq_f64(vaddq_f64(v441, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367)))));
          ++v324;
          v440 = (float64x2_t *)((char *)v440 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v239 = *a5;
      v240 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
      v241 = vmvnq_s8(*(int8x16_t *)((char *)&unk_23D9C2400 + 8 * (4 - result)));
      do
      {
        *a6 = *a6 * a9
            + _D0
            * vaddvq_f64(vaddq_f64(vmulq_f64(v240, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v239, *a3), v241)));
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * v9);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v110 = a5->f64[0];
    do
    {
      *a6 = *a6 * a9 + _D0 * (v110 * a3->f64[0]);
      a6 += a7;
      a3 = (float64x2_t *)((char *)a3 + 8 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t gemvN_1xn<Vector<float,4l>,ScaleOne>(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x4_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f32(v10, *v14, *v13);
      v11 = vmlaq_n_f32(v11, *(float32x4_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 = (float32x4_t *)((char *)v14 + 8 * a4);
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f32(v10, *(float32x4_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f32(vaddq_f32(v11, v10), a9);
  if (result == 4 && a8 == 1)
  {
    *a7 = vaddq_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 4) & (result >> 63);
    v17 = 4;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f32[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16++ & 3))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float32x4_t gemvN_aligned_mxn<Vector<float,4l>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, float32x4_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  const float *v24;
  float32x4_t v25;
  float v26;
  float32x4_t *v27;
  float v28;
  float32x4_t *v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  const float *v40;
  uint64_t v41;
  const float *v42;
  float32x4_t v43;
  float v44;
  float32x4_t *v45;
  float v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  int64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  if (v9 + 12 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  }
  else
  {
    v11 = 4 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float32x4_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f32(v24);
          v10 = 8 * a6;
          v24 = (const float *)((char *)v24 + v10);
          v13 = vmlaq_f32(v13, v25, *v21);
          v15 = vmlaq_f32(v15, v25, v21[1]);
          v17 = vmlaq_f32(v17, v25, v21[2]);
          v19 = vmlaq_f32(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f32(v14, *(float32x4_t *)((char *)v21 + 4 * a4), v26);
          v16 = vmlaq_n_f32(v16, *(float32x4_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f32(v18, *(float32x4_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f32(v20, *(float32x4_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 = (float32x4_t *)((char *)v21 + 8 * a4);
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float32x4_t *)(v8 + 4 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f32(v13, *v27, v28);
        v15 = vmlaq_n_f32(v15, v27[1], v28);
        v17 = vmlaq_n_f32(v17, v27[2], v28);
        v19 = vmlaq_n_f32(v19, v27[3], v28);
      }
      v29 = (float32x4_t *)(a7 + 4 * v9);
      v30 = vaddq_f32(vaddq_f32(v16, v15), v29[1]);
      *v29 = vaddq_f32(vaddq_f32(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f32(vaddq_f32(v20, v19), v29[3]);
      v29[2] = vaddq_f32(vaddq_f32(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 16;
      v32 = v9 + 28;
      v9 += 16;
    }
    while (v32 < a1);
  }
  if (v31 + 4 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float32x4_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f32(v42);
          v33 = 8 * a6;
          v42 = (const float *)((char *)v42 + v33);
          v35 = vmlaq_f32(v35, v43, *v39);
          v37 = vmlaq_f32(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f32(v36, *(float32x4_t *)((char *)v39 + 4 * a4), v44);
          v38 = vmlaq_n_f32(v38, *(float32x4_t *)((char *)v39 + 4 * a4 + 16), v44);
          v41 += 2;
          v39 = (float32x4_t *)((char *)v39 + 8 * a4);
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float32x4_t *)(v8 + 4 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f32(v35, *v45, v46);
        v37 = vmlaq_n_f32(v37, v45[1], v46);
      }
      v47 = (float32x4_t *)(a7 + 4 * v31);
      result = vaddq_f32(vaddq_f32(v38, v37), v47[1]);
      *v47 = vaddq_f32(vaddq_f32(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 8;
      v49 = v31 + 12;
      v31 += 8;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float32x4_t *)(a7 + 4 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float32x4_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f32(v52, *v55, *v56);
        v53 = vmlaq_n_f32(v53, *(float32x4_t *)((char *)v55 + 4 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 = (float32x4_t *)((char *)v55 + 8 * a4);
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f32(v52, *(float32x4_t *)(v8 + 4 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f32(vaddq_f32(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

uint64_t gemvN_1xn<Vector<float,2l>,ScaleOne>(uint64_t result, uint64_t a2, float32x2_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float *v13;
  float32x2_t *v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0;
    v12 = 2;
    v13 = a5;
    v10 = 0;
    v14 = a3;
    do
    {
      v10 = vmla_n_f32(v10, *v14, *v13);
      v11 = vmla_n_f32(v11, *(float32x2_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  if (v9 < a2)
    v10 = vmla_n_f32(v10, *(float32x2_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmul_n_f32(vadd_f32(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vadd_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = (float *)a7 + v16 * a8;
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

uint64_t gemvN_1xn<Vector<double,2l>,ScaleOne>(uint64_t result, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, uint64_t a6, float64x2_t *a7, uint64_t a8, double a9)
{
  int64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  double *v13;
  float64x2_t *v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float64x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f64(v10, *v14, *v13);
      v11 = vmlaq_n_f64(v11, *(float64x2_t *)((char *)v14 + 8 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f64(v10, *(float64x2_t *)((char *)a3 + 8 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f64(vaddq_f64(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vaddq_f64(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f64[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(double *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF7 | (8 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float64x2_t gemvN_aligned_mxn<Vector<double,2l>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6, uint64_t a7, float64x2_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  const double *v22;
  uint64_t v23;
  const double *v24;
  float64x2_t v25;
  double v26;
  float64x2_t *v27;
  double v28;
  float64x2_t *v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  const double *v40;
  uint64_t v41;
  const double *v42;
  float64x2_t v43;
  double v44;
  float64x2_t *v45;
  double v46;
  float64x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t *v50;
  int64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t v54;
  float64x2_t *v55;
  double *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 3;
  if (v9 + 6 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 3;
  }
  else
  {
    v11 = 8 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float64x2_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f64(v24);
          v10 = 16 * a6;
          v24 = (const double *)((char *)v24 + v10);
          v13 = vmlaq_f64(v13, v25, *v21);
          v15 = vmlaq_f64(v15, v25, v21[1]);
          v17 = vmlaq_f64(v17, v25, v21[2]);
          v19 = vmlaq_f64(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f64(v14, *(float64x2_t *)((char *)v21 + 8 * a4), v26);
          v16 = vmlaq_n_f64(v16, *(float64x2_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f64(v18, *(float64x2_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f64(v20, *(float64x2_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 += a4;
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float64x2_t *)(v8 + 8 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f64(v13, *v27, v28);
        v15 = vmlaq_n_f64(v15, v27[1], v28);
        v17 = vmlaq_n_f64(v17, v27[2], v28);
        v19 = vmlaq_n_f64(v19, v27[3], v28);
      }
      v29 = (float64x2_t *)(a7 + 8 * v9);
      v30 = vaddq_f64(vaddq_f64(v16, v15), v29[1]);
      *v29 = vaddq_f64(vaddq_f64(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f64(vaddq_f64(v20, v19), v29[3]);
      v29[2] = vaddq_f64(vaddq_f64(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 8;
      v32 = v9 + 14;
      v9 += 8;
    }
    while (v32 < a1);
  }
  if (v31 + 2 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float64x2_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f64(v42);
          v33 = 16 * a6;
          v42 = (const double *)((char *)v42 + v33);
          v35 = vmlaq_f64(v35, v43, *v39);
          v37 = vmlaq_f64(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f64(v36, *(float64x2_t *)((char *)v39 + 8 * a4), v44);
          v38 = vmlaq_n_f64(v38, *(float64x2_t *)((char *)v39 + 8 * a4 + 16), v44);
          v41 += 2;
          v39 += a4;
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float64x2_t *)(v8 + 8 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f64(v35, *v45, v46);
        v37 = vmlaq_n_f64(v37, v45[1], v46);
      }
      v47 = (float64x2_t *)(a7 + 8 * v31);
      result = vaddq_f64(vaddq_f64(v38, v37), v47[1]);
      *v47 = vaddq_f64(vaddq_f64(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 4;
      v49 = v31 + 6;
      v31 += 4;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float64x2_t *)(a7 + 8 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float64x2_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f64(v52, *v55, *v56);
        v53 = vmlaq_n_f64(v53, *(float64x2_t *)((char *)v55 + 8 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 += a4;
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f64(v52, *(float64x2_t *)(v8 + 8 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f64(vaddq_f64(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

_OWORD *dgebpScaleAlignedC_8M4N_hurricane(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;

  v8 = a3;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[2];
    v21 = a3[3];
    v17 = (float64x2_t *)((char *)a3 + v9);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v26 = v17[3];
    v22 = (float64x2_t *)((char *)v17 + v9);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v22[3];
    v27 = (float64x2_t *)((char *)v22 + v9);
    v33 = *a2;
    v34 = a2[1];
    v32 = a2 + 2;
    v35 = vmulq_n_f64(v18, a7);
    v36 = vmulq_n_f64(v19, a7);
    v37 = vmulq_n_f64(v20, a7);
    v38 = vmulq_n_f64(v21, a7);
    v39 = vmulq_n_f64(v23, a7);
    v40 = vmulq_n_f64(v24, a7);
    v41 = vmulq_n_f64(v25, a7);
    v42 = vmulq_n_f64(v26, a7);
    v43 = vmulq_n_f64(v28, a7);
    v44 = vmulq_n_f64(v29, a7);
    v45 = vmulq_n_f64(v30, a7);
    v46 = vmulq_n_f64(v31, a7);
    v47 = vmulq_n_f64(*v27, a7);
    v48 = vmulq_n_f64(v27[1], a7);
    v49 = vmulq_n_f64(v27[2], a7);
    v50 = vmulq_n_f64(v27[3], a7);
    do
    {
      v35 = vmlaq_n_f64(v35, v11, v33.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v11, v33, 1);
      v43 = vmlaq_n_f64(v43, v11, v34.f64[0]);
      v47 = vmlaq_laneq_f64(v47, v11, v34, 1);
      v36 = vmlaq_n_f64(v36, v12, v33.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v12, v33, 1);
      v44 = vmlaq_n_f64(v44, v12, v34.f64[0]);
      v48 = vmlaq_laneq_f64(v48, v12, v34, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v37 = vmlaq_n_f64(v37, v14, v33.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v14, v33, 1);
      v45 = vmlaq_n_f64(v45, v14, v34.f64[0]);
      v49 = vmlaq_laneq_f64(v49, v14, v34, 1);
      v38 = vmlaq_n_f64(v38, v15, v33.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v15, v33, 1);
      v46 = vmlaq_n_f64(v46, v15, v34.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v15, v34, 1);
      v14 = *(float64x2_t *)v51;
      v15 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v33 = *v32;
      v34 = v32[1];
      v32 += 2;
      --v16;
    }
    while (v16);
    v52 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v35;
    v8[1] = v36;
    v8[2] = v37;
    v8[3] = v38;
    v8 += 4;
    *v52 = v39;
    v52[1] = v40;
    v52[2] = v41;
    v52[3] = v42;
    v53 = (float64x2_t *)((char *)v52 + v9);
    *v53 = v43;
    v53[1] = v44;
    v53[2] = v45;
    v53[3] = v46;
    v54 = (float64x2_t *)((char *)v53 + v9);
    *v54 = v47;
    v54[1] = v48;
    v54[2] = v49;
    v54[3] = v50;
    a3 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t Accelerate_AR_spotrf(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  float *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;

  v10 = *a4;
  *a5 = 0;
  v11 = lsame_();
  if (!v11 && !lsame_())
  {
    v14 = -1;
    goto LABEL_29;
  }
  v12 = *a2;
  if ((v12 & 0x80000000) != 0)
  {
    v14 = -2;
    goto LABEL_29;
  }
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = *a2;
  if (*a4 < v13)
  {
    v14 = -4;
LABEL_29:
    *a5 = v14;
    goto LABEL_30;
  }
  v14 = *a5;
  if (*a5)
  {
LABEL_30:
    v46 = -v14;
    xerbla_();
    return 0;
  }
  v40 = v10;
  if ((_DWORD)v12)
  {
    if (v12 <= 0x200)
      v15 = 32;
    else
      v15 = 64;
    if (v12 <= 0x1964)
      v16 = v15;
    else
      v16 = 128;
    if (v16 >= v12)
    {
      Accelerate_AR_spotf2(a1, a2, a3, a4, a5);
    }
    else
    {
      v17 = ~(_DWORD)v10;
      v41 = a3 + 4 * v17;
      v42 = a2;
      v43 = v16;
      v18 = 0;
      if (v11)
      {
        v19 = 0;
        v20 = 4 * v10 + 4 * v17 + a3 + 4;
        v21 = (int)v10 * (uint64_t)(int)v16;
        v36 = 4 * v21;
        v38 = 4 * (v21 + v16);
        v22 = 1;
        v23 = (float *)v20;
        while (1)
        {
          v24 = v18 + *a2;
          v45 = v24;
          v46 = v19;
          if ((int)v16 < v24)
            v24 = v16;
          v44 = v24;
          Accelerate_AR_ssyrk("Upper", "Transpose", (unsigned int *)&v44, (unsigned int *)&v46, &c_b13_0, v20, (unsigned int *)a4, c_b14_2, (uint64_t)v23, a4);
          Accelerate_AR_spotf2((uint64_t)"Upper", &v44, (uint64_t)v23, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v26 = v19 + v44 + 1;
          v27 = *a2;
          if (v26 <= *a2)
          {
            v45 = v19;
            v46 = v18 + v27 - v44;
            v35 = v41 + 4 * (v19 + (int)v10 * (v44 + v22)) + 4;
            Accelerate_AR_sgemm("Transpose", "No transpose", &v44, &v46, &v45, (uint64_t)&c_b13_0, v20, a4, v41 + 4 * (v26 * (int)v10 + 1), a4, (uint64_t)c_b14_2, v35, SHIDWORD(v35), a4);
            v46 = v18 + *v42 - v44;
            a2 = v42;
            Accelerate_AR_strsm("Left", "Upper", "Transpose", "Non-unit", (unsigned int *)&v44, (unsigned int *)&v46, c_b14_2, v23, a4, (char *)(v41 + 4 * (v19 + (int)v10 * (v44 + v22)) + 4), a4);
          }
          LODWORD(v16) = v43;
          v19 += v43;
          v18 -= v43;
          v23 = (float *)((char *)v23 + v38);
          v20 += v36;
          v22 += v43;
          if (v19 + 1 > v12)
            return 0;
        }
      }
      else
      {
        v29 = v10 + 1;
        v30 = a3 + 4 * v17 + 4 * ((int)v10 + 1);
        v39 = 4 * v16;
        v37 = v16 * (v10 + 1);
        v31 = 1;
        while (1)
        {
          v32 = v18 + *a2;
          v45 = v32;
          if ((int)v16 < v32)
            v32 = v16;
          v44 = v32;
          LODWORD(v19) = v31 - 1;
          v46 = v31 - 1;
          v33 = (float *)(v41 + 4 * v29);
          Accelerate_AR_ssyrk("Lower", "No transpose", (unsigned int *)&v44, (unsigned int *)&v46, &c_b13_0, v30, (unsigned int *)a4, c_b14_2, (uint64_t)v33, a4);
          Accelerate_AR_spotf2((uint64_t)"Lower", &v44, (uint64_t)v33, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v34 = *a2;
          if (v31 + v44 <= *a2)
          {
            v45 = v31 - 1;
            v46 = v18 + v34 - v44;
            Accelerate_AR_sgemm("No transpose", "Transpose", &v46, &v44, &v45, (uint64_t)&c_b13_0, v41 + 4 * (v40 + v31 + v44), a4, v30, a4, (uint64_t)c_b14_2, v41 + 4 * (v29 + v44), (unint64_t)(v41 + 4 * (v29 + v44)) >> 32, a4);
            v46 = v18 + *v42 - v44;
            a2 = v42;
            Accelerate_AR_strsm("Right", "Lower", "Transpose", "Non-unit", (unsigned int *)&v46, (unsigned int *)&v44, c_b14_2, v33, a4, (char *)(v41 + 4 * (v29 + v44)), a4);
          }
          LODWORD(v16) = v43;
          v18 -= v43;
          v30 += v39;
          v29 += v37;
          v31 += v43;
          if (v31 > (int)v12)
            return 0;
        }
      }
      *a5 = v19 + v25;
    }
  }
  return 0;
}

uint64_t ssyrk_noPack_UT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t i;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  __int32 *v29;
  float32x2_t *v30;
  __int32 *v31;
  float32x2_t *v32;
  int32x2_t *v33;
  float32x2_t *v34;
  int32x2_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t *v51;
  __n128 *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  __int32 *v57;
  __int32 *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x2_t *v67;
  float32x4_t *v68;
  float32x2_t v69;
  float32x4_t *v70;
  __int32 *v71;
  float32x4_t v72;
  __int32 *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  uint64_t result;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  __int32 *v81;
  float *v82;
  __int32 *v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t *v93;
  uint64_t v94;
  float32x2_t *v95;
  float32x2_t *v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t *v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t *v108;
  __int32 *v109;
  __int32 *v110;
  float32x2_t v111;
  float v112;
  float32x2_t v113;
  uint64_t v114;
  unint64_t *v115;
  float32x2_t v116;
  float v117;

  a7.i64[1] = a8.i64[0];
  v20 = 0;
  v21 = 4 * a4;
  v22 = 4 * a6;
  v23 = a1 <= 3;
  for (i = a1 - 3; !v23; v20 += 4)
  {
    v25 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v22);
    if (v20)
    {
      v26 = 0;
      do
      {
        v27 = a2;
        v28 = (float32x2_t *)(a3 + v20 * v21);
        v29 = (__int32 *)(a3 + v26 * v21);
        v30 = (float32x2_t *)((char *)v28 + v21);
        v31 = &v29[(unint64_t)v21 / 4];
        v32 = (float32x2_t *)((char *)v28 + v21 + v21);
        v33 = (int32x2_t *)&v29[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
        v34 = (float32x2_t *)((char *)v32 + v21);
        v35 = (int32x2_t *)((char *)v33 + v21);
        v36 = (float32x4_t)veorq_s8(a8, a8);
        v37 = v36;
        v38 = v36;
        v39 = v36;
        if ((a2 & 1) == 0)
          goto LABEL_7;
        v16.i32[0] = *v29++;
        v17.i32[0] = *v31++;
        v18.i32[0] = v33->i32[0];
        v33 = (int32x2_t *)((char *)v33 + 4);
        v19.i32[0] = v35->i32[0];
        v35 = (int32x2_t *)((char *)v35 + 4);
        v40 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v41 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v42 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v43 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
        v19 = vtrn1_s32(v18, v19);
        *(int32x2_t *)&v16.u32[2] = v19;
        v36 = vmlaq_n_f32(v36, v16, v40);
        v37 = vmlaq_n_f32(v37, v16, v41);
        v38 = vmlaq_n_f32(v38, v16, v42);
        v39 = vmlaq_n_f32(v39, v16, v43);
        v27 = a2 - 1;
        if (a2 > 1)
        {
LABEL_7:
          do
          {
            v16.i64[0] = *(_QWORD *)v29;
            v29 += 2;
            v17.i64[0] = *(_QWORD *)v31;
            v31 += 2;
            v18 = *v33++;
            v19 = *v35++;
            v44 = *v28++;
            v45 = *v30++;
            v14 = *v32++;
            v15 = *v34++;
            *(int32x2_t *)&v16.u32[2] = v18;
            v17.u64[1] = (unint64_t)v19;
            v46 = (float32x4_t)vtrn1q_s32((int32x4_t)v16, v17);
            v47 = (float32x4_t)vtrn2q_s32((int32x4_t)v16, v17);
            v36 = vmlaq_lane_f32(vmlaq_n_f32(v36, v46, v44.f32[0]), v47, v44, 1);
            v37 = vmlaq_lane_f32(vmlaq_n_f32(v37, v46, v45.f32[0]), v47, v45, 1);
            v38 = vmlaq_lane_f32(vmlaq_n_f32(v38, v46, v14.f32[0]), v47, v14, 1);
            v39 = vmlaq_lane_f32(vmlaq_n_f32(v39, v46, v15.f32[0]), v47, v15, 1);
            v23 = v27 <= 2;
            v27 -= 2;
          }
          while (!v23);
        }
        a12 = *v25;
        v48 = (float32x4_t *)((char *)v25 + v22);
        v50 = *v48;
        v49 = (float32x4_t *)((char *)v48 + v22);
        v12 = *v49;
        v51 = (float32x4_t *)((char *)v49 + v22);
        v13 = *v51;
        v52 = (__n128 *)((char *)v51 + v22 + -4 * v22);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v36, a7.f32[0]), a12, a7, 2);
        *v52 = (__n128)a8;
        v53 = (float32x4_t *)((char *)v52 + v22);
        *v53 = vmlaq_laneq_f32(vmulq_n_f32(v37, a7.f32[0]), v50, a7, 2);
        v54 = (float32x4_t *)((char *)v53 + v22);
        *v54 = vmlaq_laneq_f32(vmulq_n_f32(v38, a7.f32[0]), v12, a7, 2);
        v55 = (float32x4_t *)((char *)v54 + v22);
        *v55 = vmlaq_laneq_f32(vmulq_n_f32(v39, a7.f32[0]), v13, a7, 2);
        v25 = (float32x4_t *)((char *)v55 + v22 + -4 * v22 + 16);
        v26 += 4;
      }
      while (v26 < v20);
    }
    v56 = a2;
    v57 = (__int32 *)(a3 + v20 * v21);
    v58 = &v57[(unint64_t)v21 / 4];
    v59 = (float32x2_t *)&v57[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
    v60 = (float32x2_t *)((char *)v59 + v21);
    a8 = veorq_s8(a8, a8);
    v61 = *(float32x2_t *)a8.i8;
    v62 = (float32x4_t)a8;
    v63 = (float32x4_t)a8;
    if ((a2 & 1) == 0)
      goto LABEL_12;
    v12.i32[0] = *v57++;
    v13.i32[0] = *v58++;
    v14.i32[0] = v59->i32[0];
    v59 = (float32x2_t *)((char *)v59 + 4);
    v15.i32[0] = v60->i32[0];
    v60 = (float32x2_t *)((char *)v60 + 4);
    *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
    v19 = vtrn1_s32((int32x2_t)v14, (int32x2_t)v15);
    *(int32x2_t *)&v16.u32[2] = v19;
    *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v16.f32, v12.f32[0]);
    v61 = vmla_n_f32(v61, *(float32x2_t *)v16.f32, v13.f32[0]);
    v62 = vmlaq_n_f32(v62, v16, v14.f32[0]);
    v63 = vmlaq_n_f32(v63, v16, v15.f32[0]);
    v56 = a2 - 1;
    if (a2 > 1)
    {
LABEL_12:
      do
      {
        v64.i64[0] = *(_QWORD *)v57;
        v57 += 2;
        v65.i64[0] = *(_QWORD *)v58;
        v58 += 2;
        v14 = *v59++;
        v15 = *v60++;
        v64.u64[1] = (unint64_t)v14;
        v65.u64[1] = (unint64_t)v15;
        a12 = (float32x4_t)vtrn1q_s32(v64, v65);
        v66 = (float32x4_t)vtrn2q_s32(v64, v65);
        *(float32x2_t *)a8.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, *(float *)v64.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v64.i8, 1);
        v61 = vmla_lane_f32(vmla_n_f32(v61, *(float32x2_t *)a12.f32, *(float *)v65.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v65.i8, 1);
        v62 = vmlaq_lane_f32(vmlaq_n_f32(v62, a12, v14.f32[0]), v66, v14, 1);
        v63 = vmlaq_lane_f32(vmlaq_n_f32(v63, a12, v15.f32[0]), v66, v15, 1);
        v23 = v56 <= 2;
        v56 -= 2;
      }
      while (!v23);
    }
    a12.i32[0] = v25->i32[0];
    v67 = (float32x2_t *)((char *)v25 + v22);
    v69 = *v67;
    v68 = (float32x4_t *)((char *)v67 + v22);
    v12 = *v68;
    v70 = (float32x4_t *)((char *)v68 + v22);
    v13 = *v70;
    v71 = (__int32 *)((char *)v70 + v22 + -4 * v22);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v72 = vmlaq_laneq_f32(vmulq_n_f32(v62, a7.f32[0]), v12, a7, 2);
    v73 = &v71[(unint64_t)v22 / 2];
    *v71 = a8.i32[0];
    v74 = (float32x2_t *)&v71[(unint64_t)v22 / 4];
    *v74 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v69, a7, 2);
    v75 = (float32x2_t *)((char *)v74 + v22);
    *v75 = *(float32x2_t *)v72.f32;
    v73[2] = v72.i32[2];
    *(float32x4_t *)&v75->f32[(unint64_t)v22 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v63, a7.f32[0]), v13, a7, 2);
    v23 = i <= 4;
    i -= 4;
  }
  v23 = i <= -3;
  result = i + 3;
  if (!v23)
  {
    if (result >= 2)
    {
      v77 = (unint64_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v22);
      if (v20)
      {
        v78 = 0;
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + v20 * v21);
          v81 = (__int32 *)(a3 + v78 * v21);
          v82 = &v80[(unint64_t)v21 / 4];
          v83 = &v81[(unint64_t)v21 / 4];
          v84 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v85 = v84;
          if ((a2 & 1) == 0)
            goto LABEL_22;
          v16.i32[0] = *v81++;
          v17.i32[0] = *v83++;
          v86 = *v80++;
          v87 = *v82++;
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v84 = vmla_n_f32(v84, *(float32x2_t *)v16.f32, v86);
          v85 = vmla_n_f32(v85, *(float32x2_t *)v16.f32, v87);
          v79 = a2 - 1;
          if (a2 > 1)
          {
LABEL_22:
            do
            {
              v16.i64[0] = *(_QWORD *)v81;
              v81 += 2;
              v17.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              v12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              v13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              v88 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v89 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v84 = vmla_lane_f32(vmla_n_f32(v84, v88, v12.f32[0]), v89, *(float32x2_t *)v12.f32, 1);
              v85 = vmla_lane_f32(vmla_n_f32(v85, v88, v13.f32[0]), v89, *(float32x2_t *)v13.f32, 1);
              v23 = v79 <= 2;
              v79 -= 2;
            }
            while (!v23);
          }
          a12.i64[0] = *v77;
          v90 = (float32x2_t *)((char *)v77 + v22);
          v91 = *v90;
          v92 = (float32x2_t *)((char *)v90 + v22 + -2 * v22);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v84, a7.f32[0]), *(float32x2_t *)a12.f32, a7, 2);
          *v92 = *(float32x2_t *)a8.i8;
          v93 = (float32x2_t *)((char *)v92 + v22);
          *v93 = vmla_laneq_f32(vmul_n_f32(v85, a7.f32[0]), v91, a7, 2);
          v77 = (unint64_t *)((char *)&v93[1] + v22 + -2 * v22);
          v78 += 2;
        }
        while (v78 < v20);
      }
      v94 = a2;
      v95 = (float32x2_t *)(a3 + v20 * v21);
      v96 = (float32x2_t *)((char *)v95 + v21);
      v97 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v98 = v97;
      if ((a2 & 1) == 0)
        goto LABEL_27;
      v12.i32[0] = v95->i32[0];
      v95 = (float32x2_t *)((char *)v95 + 4);
      v13.i32[0] = v96->i32[0];
      v96 = (float32x2_t *)((char *)v96 + 4);
      *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
      v97 = vmla_n_f32(v97, *(float32x2_t *)v16.f32, v12.f32[0]);
      v98 = vmla_n_f32(v98, *(float32x2_t *)v16.f32, v13.f32[0]);
      v94 = a2 - 1;
      if (a2 > 1)
      {
LABEL_27:
        do
        {
          v99 = *v95++;
          v100 = *v96++;
          *(int32x2_t *)a12.f32 = vtrn1_s32((int32x2_t)v99, (int32x2_t)v100);
          v101 = (float32x2_t)vtrn2_s32((int32x2_t)v99, (int32x2_t)v100);
          v97 = vmla_lane_f32(vmla_n_f32(v97, *(float32x2_t *)a12.f32, v99.f32[0]), v101, v99, 1);
          v98 = vmla_lane_f32(vmla_n_f32(v98, *(float32x2_t *)a12.f32, v100.f32[0]), v101, v100, 1);
          v23 = v94 <= 2;
          v94 -= 2;
        }
        while (!v23);
      }
      a12.i32[0] = *(_DWORD *)v77;
      v102 = (float32x2_t *)((char *)v77 + v22);
      v103 = *v102;
      v104 = (float32x2_t *)((char *)v102 + v22 + -2 * v22);
      v97.f32[0] = v97.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v97, *(float32x2_t *)a12.f32, a7, 2);
      v104->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v104 + v22) = vmla_laneq_f32(vmul_n_f32(v98, a7.f32[0]), v103, a7, 2);
      result -= 2;
      v20 += 2;
    }
    if (result >= 1)
    {
      v105 = (float32x2_t *)a5;
      v106 = 0;
      if (v20 >= 1)
      {
        do
        {
          v107 = a2;
          v108 = (float32x2_t *)(a3 + v20 * v21);
          v109 = (__int32 *)(a3 + v106 * v21);
          v110 = &v109[(unint64_t)v21 / 4];
          v111 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          if ((a2 & 1) == 0)
            goto LABEL_34;
          v16.i32[0] = *v109++;
          v17.i32[0] = *v110++;
          v112 = v108->f32[0];
          v108 = (float32x2_t *)((char *)v108 + 4);
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v111 = vmla_n_f32(v111, *(float32x2_t *)v16.f32, v112);
          v107 = a2 - 1;
          if (a2 > 1)
          {
LABEL_34:
            do
            {
              v16.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v17.i64[0] = *(_QWORD *)v110;
              v110 += 2;
              v113 = *v108++;
              v111 = vmla_lane_f32(vmla_n_f32(v111, (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113.f32[0]), (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113, 1);
              v23 = v107 <= 2;
              v107 -= 2;
            }
            while (!v23);
          }
          *(float32x2_t *)a12.f32 = *v105;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v111, a7.f32[0]), *v105, a7, 2);
          *v105++ = *(float32x2_t *)a8.i8;
          v106 += 2;
        }
        while (v106 < v20 - 1);
      }
      v114 = a2;
      v115 = (unint64_t *)(a3 + v20 * v21);
      v116 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v117 = *(float *)v115,
            v115 = (unint64_t *)((char *)v115 + 4),
            v116.f32[0] = v117 * v117,
            v114 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i64[0] = *v115++;
          v116 = vmla_f32(v116, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v23 = v114 <= 2;
          v114 -= 2;
        }
        while (!v23);
        v116.f32[0] = vaddv_f32(v116);
      }
      a12.i32[0] = v105->i32[0];
      v116.f32[0] = v116.f32[0] * a7.f32[0];
      v105->i32[0] = vmla_laneq_f32(v116, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

void ssyrk_Pack_Upper(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,char a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int32 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(float);
  void (*v71)(__n128);
  float32x4_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float *(*v88)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float *(*v89)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  __n128 *v112;
  float32x4_t v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x2_t v119;
  float32x2_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const float *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(float);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*vars0)(__n128);
  uint64_t vars8;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float32x2_t v175;
  float *(*v176)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  float *(*v185)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  float32x4_t *v191;
  uint64_t v192;
  uint64_t v193;

  v61 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v193 = v63;
  v186 = v64;
  v66 = v65;
  v67 = *(float *)&v61;
  v68 = v59;
  STACK[0x102A8] = *MEMORY[0x24BDAC8D0];
  if (v58 == 111)
    v69 = 1;
  else
    v69 = v60;
  v70 = (void (*)(float))sgePack_B_NoTran;
  if (v58 == 111)
    v70 = (void (*)(float))sgePack_B_Tran;
  v153 = v70;
  if (v58 == 111)
    v71 = (void (*)(__n128))sgePack_A_NoTran;
  else
    v71 = (void (*)(__n128))sgePack_A_Tran;
  v190 = v62;
  if (v59 < 1)
  {
    v191 = (float32x4_t *)&a58;
    v73 = &STACK[0x10240];
  }
  else
  {
    v72 = (float32x4_t *)malloc_type_malloc((v59 << 9) + 65632, 0x100004052888210uLL);
    *(_QWORD *)&v62 = v190;
    v191 = v72;
    v73 = (unint64_t *)&v72[4096];
  }
  v163 = (uint64_t)(v73 + 8);
  if (v66 >= 1)
  {
    v156 = 0;
    v74 = 0;
    v184 = v68 - 3;
    v175 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&v62, 0).u64[0];
    if (v68 <= 0)
      v75 = -(-v68 & 3);
    else
      v75 = v68 & 3;
    v164 = (v193 << 9) + 512;
    v165 = v75;
    v181 = 16 * v193;
    v179 = v186 + 12 * v193;
    v162 = 4 * v193;
    v174 = v186 + 16;
    v76 = 128;
    v178 = v186 + 8 * v193;
    v177 = v186 + 4 * v193;
    v152 = v66;
    vars8 = v69;
    v161 = v68;
    vars0 = v71;
    while (1)
    {
      v77 = v66 >= v76 ? v76 : v66;
      v154 = v74 + 128;
      v155 = v76;
      v78 = v74 + 128 <= v66 ? 128 : v66 - v74;
      v192 = v78;
      v153(v67);
      v79 = (__n128)v190;
      if (v68 >= 1)
        break;
LABEL_134:
      v76 = v155 + 128;
      v156 -= 128;
      v74 = v154;
      v66 = v152;
      if (v154 >= v152)
        goto LABEL_135;
    }
    v173 = 0;
    v80 = 0;
    v81 = 0;
    v166 = (v77 + v156) << 9;
    v182 = 16 * (v77 + v156);
    v82 = *(float *)&v190 != 0.0;
    if (*(float *)&v190 == 1.0 || v74 != 0)
      v82 = 0;
    v183 = v82;
    v84 = v192 & 3;
    if (v192 <= 0)
      v84 = -(-v192 & 3);
    v157 = 4 - v84;
    v158 = v84;
    v170 = v186;
    v85 = 128;
    v172 = v186;
    v171 = v163;
    v185 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
    v176 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
    while (1)
    {
      v168 = v85;
      v169 = v80;
      if (v68 >= v85)
        v86 = v85;
      else
        v86 = v68;
      v180 = v86 + v80;
      v167 = v81 + 128;
      if (v81 + 128 <= v68)
        v87 = 128;
      else
        v87 = v68 - v81;
      v188 = v186 + 4 * v81;
      v189 = v81;
      v88 = v176;
      if ((v87 & 7) != 0)
        v88 = sgebpScaleUnalignedC_8M4N;
      v176 = v88;
      v89 = v185;
      if ((v87 & 7) != 0)
        v89 = sgebpUnalignedC_8M4N;
      v185 = v89;
      v187 = v87;
      v71(v79);
      v90 = v189;
      v91 = *(float *)&v190;
      v92 = v189;
      if (v189 < v184)
        break;
LABEL_92:
      if (v165)
      {
        if (v92 - v90 >= v187)
          v131 = v187;
        else
          v131 = v92 - v90;
        v132 = v187 - v131;
        if (v187 - v131 >= 3)
          v133 = 3;
        else
          v133 = v187 - v131;
        if (v132 >= 1)
        {
          v79 = 0uLL;
          a54 = 0u;
          a55 = 0u;
          a52 = 0u;
          a53 = 0u;
          a50 = 0u;
          a51 = 0u;
        }
        v134 = v188 + 4 * v92 * v193;
        v135 = (const float *)(v163 + 4 * v92 * v192);
        if (v183)
        {
          if (v131)
            sgebpScale_8M1N(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192, v91);
          if (v132 >= 1)
          {
            v136 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v137 = -(-v131 & 7);
              else
                v137 = v131 & 7;
              v136 = v137 * v157;
            }
            sgebp_8M1N((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v136), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v138 = 0;
              v139 = v92 + v169;
              if (v92 + v169 >= v180)
                v139 = v180;
              v140 = v170 + v162 * v92 + 4 * v139;
              v141 = &a50;
              v142 = 1;
              do
              {
                v143 = 0;
                do
                {
                  v79.n128_f32[0] = *((float *)v141 + v143) + (float)(*(float *)(v140 + 4 * v143) * *(float *)&v190);
                  *(_DWORD *)(v140 + 4 * v143++) = v79.n128_u32[0];
                }
                while (v142 != v143);
                ++v138;
                ++v142;
                v141 += 2;
                v140 += v162;
              }
              while (v138 != v165);
            }
          }
        }
        else
        {
          if (v131)
            sgebp_8M1N(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192);
          if (v132 >= 1)
          {
            v144 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v145 = -(-v131 & 7);
              else
                v145 = v131 & 7;
              v144 = v145 * v157;
            }
            sgebp_8M1N((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v144), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v146 = 0;
              v147 = v92 + v169;
              if (v92 + v169 >= v180)
                v147 = v180;
              v148 = v170 + v162 * v92 + 4 * v147;
              v149 = &a50;
              v150 = 1;
              do
              {
                v151 = 0;
                do
                {
                  v79.n128_f32[0] = *(float *)(v148 + 4 * v151) + *((float *)v149 + v151);
                  *(_DWORD *)(v148 + 4 * v151++) = v79.n128_u32[0];
                }
                while (v150 != v151);
                ++v146;
                ++v150;
                v149 += 2;
                v148 += v162;
              }
              while (v146 != v165);
            }
          }
        }
      }
      v171 += v166;
      v172 += v164;
      v85 = v168 + 128;
      v80 = v169 - 128;
      v173 += v164;
      v170 += 512;
      v81 = v167;
      if (v167 >= v68)
        goto LABEL_134;
    }
    v93 = 0;
    v95 = v172;
    v94 = v173;
    v96 = (_OWORD *)v171;
    v97 = v189;
    while (1)
    {
      if (v93 <= 0)
        v98 = -(-v93 & 7);
      else
        v98 = v93 & 7;
      v99 = v93 - v98;
      if (v93 - v98 >= v187)
        v100 = v187;
      else
        v100 = v93 - v98;
      v101 = v187 - v100;
      if (v187 - v100 >= 1)
      {
        v79 = 0uLL;
        a56 = 0u;
        a57 = 0u;
        a54 = 0u;
        a55 = 0u;
        a52 = 0u;
        a53 = 0u;
        a50 = 0u;
        a51 = 0u;
      }
      v102 = v90 + v93;
      v103 = v188 + 4 * v97 * v193;
      v104 = (float32x4_t *)(v186 + v94);
      if (v183)
      {
        if (v100)
        {
          v176(v191, (uint64_t)v96, v104, v193, v100, v192, v91);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v105 = 8;
        else
          v105 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v105);
        v106 = v103 + 4 * v100;
        if (v180 >= v99)
          v107 = v99;
        else
          v107 = v180;
        v108 = 4 * v107;
        if ((v102 & 4) != 0)
        {
          v91 = *(float *)&v190;
          *(float32x4_t *)(v95 + v108) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v95 + v108), *(float *)&v190), (float32x4_t)a50);
          if (v180 >= v99)
            v121 = v99;
          else
            v121 = v180;
          *(float *)(v174 + 4 * v121 + v94) = *(float *)&a51
                                            + (float)(*(float *)(v174 + 4 * v121 + v94) * *(float *)&v190);
          v122 = v177 + 4 * v121 + v94;
          *(float32x4_t *)v122 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v122, *(float *)&v190), (float32x4_t)a52);
          *(float32x2_t *)(v122 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v122 + 16)), *(float32x2_t *)&a53);
          v123 = v178 + 4 * v121 + v94;
          *(float32x4_t *)v123 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v123, *(float *)&v190), (float32x4_t)a54);
          *(float32x2_t *)(v123 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v123 + 16)), *(float32x2_t *)&a55);
          *(float *)(v123 + 24) = *((float *)&a55 + 2) + (float)(*(float *)(v123 + 24) * *(float *)&v190);
          v124 = (float32x4_t *)(v179 + v94 + 4 * v121);
          v125 = v124[1];
          *v124 = vaddq_f32(vmulq_n_f32(*v124, *(float *)&v190), (float32x4_t)a56);
          v112 = (__n128 *)(v106 + 12 * v193 + 16);
          v113 = vmulq_n_f32(v125, *(float *)&v190);
          v114 = &a57;
        }
        else
        {
          v91 = *(float *)&v190;
          *(float *)(v95 + v108) = *(float *)&a50 + (float)(*(float *)(v95 + v108) * *(float *)&v190);
          if (v180 >= v99)
            v109 = v99;
          else
            v109 = v180;
          v110 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v109 + v94) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v177 + 4 * v109 + v94)), *(float32x2_t *)&a52);
          v111 = (float32x2_t *)(v178 + 4 * v109 + v94);
          *v111 = vadd_f32(vmul_f32(v175, *v111), v110);
          v111[1].f32[0] = *((float *)&a54 + 2) + (float)(v111[1].f32[0] * *(float *)&v190);
          v112 = (__n128 *)(v106 + 12 * v193);
          v113 = vmulq_n_f32(*(float32x4_t *)(v179 + v94 + 4 * v109), *(float *)&v190);
          v114 = &a56;
        }
      }
      else
      {
        if (v100)
        {
          v185(v191, (uint64_t)v96, v104, v193, v100, v192);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v115 = 8;
        else
          v115 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v115);
        v116 = v180;
        if (v180 >= v99)
          v117 = v99;
        else
          v117 = v180;
        v118 = 4 * v117;
        if ((v102 & 4) != 0)
        {
          *(float32x4_t *)(v95 + v118) = vaddq_f32(*(float32x4_t *)(v95 + v118), (float32x4_t)a50);
          if (v180 >= v99)
            v126 = v99;
          else
            v126 = v180;
          *(float *)(v174 + 4 * v126 + v94) = *(float *)(v174 + 4 * v126 + v94) + *(float *)&a51;
          v127 = v177 + 4 * v126 + v94;
          *(float32x4_t *)v127 = vaddq_f32(*(float32x4_t *)v127, (float32x4_t)a52);
          *(float32x2_t *)(v127 + 16) = vadd_f32(*(float32x2_t *)(v127 + 16), *(float32x2_t *)&a53);
          v128 = v178 + 4 * v126 + v94;
          *(float32x4_t *)v128 = vaddq_f32(*(float32x4_t *)v128, (float32x4_t)a54);
          *(float32x2_t *)(v128 + 16) = vadd_f32(*(float32x2_t *)(v128 + 16), *(float32x2_t *)&a55);
          *(float *)(v128 + 24) = *(float *)(v128 + 24) + *((float *)&a55 + 2);
          v129 = v179 + v94 + 4 * v126;
          *(float32x4_t *)v129 = vaddq_f32(*(float32x4_t *)v129, (float32x4_t)a56);
          v130 = *(float32x4_t *)(v129 + 16);
          v112 = (__n128 *)(v129 + 16);
          v113 = v130;
          v114 = &a57;
        }
        else
        {
          *(float *)(v95 + v118) = *(float *)(v95 + v118) + *(float *)&a50;
          if (v180 >= v99)
            v116 = v99;
          v119 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v116 + v94) = vadd_f32(*(float32x2_t *)(v177 + 4 * v116 + v94), *(float32x2_t *)&a52);
          v120 = (float32x2_t *)(v178 + 4 * v116 + v94);
          *v120 = vadd_f32(*v120, v119);
          v120[1].f32[0] = v120[1].f32[0] + *((float *)&a54 + 2);
          v112 = (__n128 *)(v103 + 4 * v100 + 12 * v193);
          v113 = *(float32x4_t *)(v179 + v94 + 4 * v116);
          v114 = &a56;
        }
        v91 = *(float *)&v190;
      }
      v79 = (__n128)vaddq_f32(v113, *(float32x4_t *)v114);
      *v112 = v79;
LABEL_90:
      v97 += 4;
      v93 += 4;
      v90 = v189;
      v92 = v189 + v93;
      v96 = (_OWORD *)((char *)v96 + v182);
      v95 += v181;
      v94 += v181;
      if (v189 + v93 >= v184)
      {
        v68 = v161;
        v71 = vars0;
        goto LABEL_92;
      }
    }
  }
LABEL_135:
  if (v68 >= 1)
    free(v191);
}

void dgeSetZero(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 8 * a1;
    v7 = 8 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void dgeScale(int __N, uint64_t a2, double *__X, uint64_t a4, double a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 8 * a4;
    do
    {
      cblas_dscal(__N, a5, __X, 1);
      __X = (double *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void dtrScale(int a1, uint64_t __N, double *__X, uint64_t a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __N;
  if (a5 == 0.0)
  {
    if (a1 == 121)
    {
      if (__N >= 1)
      {
        v7 = 8 * a4;
        v8 = 8;
        do
        {
          bzero(__X, v8);
          v8 += 8;
          __X = (double *)((char *)__X + v7);
          --v6;
        }
        while (v6);
      }
    }
    else if (__N >= 1)
    {
      v12 = 8 * __N;
      v13 = 8 * a4 + 8;
      do
      {
        bzero(__X, v12);
        v12 -= 8;
        __X = (double *)((char *)__X + v13);
        --v6;
      }
      while (v6);
    }
  }
  else if (a1 == 121)
  {
    if (__N >= 1)
    {
      v10 = 0;
      v11 = 8 * a4;
      do
      {
        cblas_dscal(++v10, a5, __X, 1);
        __X = (double *)((char *)__X + v11);
      }
      while (v6 != v10);
    }
  }
  else if (__N >= 1)
  {
    v14 = 8 * a4 + 8;
    do
    {
      cblas_dscal(v6, a5, __X, 1);
      __X = (double *)((char *)__X + v14);
      --v6;
    }
    while (v6);
  }
}

void dsyReflect(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  const double *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (double *)(a3 + 8);
      v8 = 1;
      v9 = (const double *)(a3 + 8 * __incY);
      do
      {
        cblas_dcopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_dcopy(--v6, (const double *)(v5 + 8), 1, (double *)(v5 + 8 * __incY), __incY);
      v5 += 8 * __incY + 8;
    }
    while (v6 != 1);
  }
}

void sgeSetZero(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 4 * a1;
    v7 = 4 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void sgeScale(int __N, uint64_t a2, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 4 * a4;
    do
    {
      cblas_sscal(__N, a5, __X, 1);
      __X = (float *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void strScale(int a1, uint64_t __N, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = __N;
  if (a1 == 121)
  {
    if (__N >= 1)
    {
      v8 = 0;
      v9 = 4 * a4;
      do
      {
        cblas_sscal(++v8, a5, __X, 1);
        __X = (float *)((char *)__X + v9);
      }
      while (v7 != v8);
    }
  }
  else if (__N >= 1)
  {
    v10 = 4 * a4 + 4;
    do
    {
      cblas_sscal(v7, a5, __X, 1);
      __X = (float *)((char *)__X + v10);
      --v7;
    }
    while (v7);
  }
}

void ssyReflect(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  const float *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (float *)(a3 + 4);
      v8 = 1;
      v9 = (const float *)(a3 + 4 * __incY);
      do
      {
        cblas_scopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_scopy(--v6, (const float *)(v5 + 4), 1, (float *)(v5 + 4 * __incY), __incY);
      v5 += 4 * __incY + 4;
    }
    while (v6 != 1);
  }
}

uint64_t Accelerate_AR_dsyev(char *a1, char *a2, __CLPK_integer *a3, __CLPK_doublereal *a4, __CLPK_integer *a5, __CLPK_doublereal *a6, __CLPK_doublereal *a7, int *a8, __CLPK_integer *a9)
{
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  __CLPK_doublereal *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __CLPK_doublereal *v30;
  int v31;
  int v32;
  __CLPK_doublereal *v33;
  __CLPK_doublereal *v34;
  int v35;
  int v36;
  double *v38;
  uint64_t v40;
  __CLPK_doublereal __cto;
  int n;
  double da;
  int v44;

  v44 = 0;
  da = 0.0;
  n = 0;
  v40 = 0;
  v15 = lsame_();
  v16 = lsame_();
  v17 = *a8;
  *a9 = 0;
  if (!v15 && !lsame_())
  {
    v20 = -1;
    goto LABEL_22;
  }
  if (!v16 && !lsame_())
  {
    v20 = -2;
    goto LABEL_22;
  }
  v18 = *a3;
  if (*a3 < 0)
  {
    v20 = -3;
    goto LABEL_22;
  }
  if (v18 <= 1)
    v19 = 1;
  else
    v19 = *a3;
  if (*a5 < v19)
  {
    v20 = -5;
LABEL_22:
    *a9 = v20;
    goto LABEL_23;
  }
  v20 = *a9;
  __cto = 1.0;
  if (v20)
  {
LABEL_23:
    v44 = -v20;
    xerbla_();
    return 0;
  }
  v21 = 34 * v18;
  v22 = 3 * v18 - 1;
  if (!v18)
    v21 = 1;
  v23 = (double)v21;
  *a7 = (double)v21;
  if (!v18)
    v22 = 1;
  if (*a8 < v22 && v17 != -1)
  {
    v20 = -8;
    goto LABEL_22;
  }
  if (v17 != -1 && v18)
  {
    if (v18 == 1)
    {
      *a6 = *a4;
      *a7 = 2.0;
      if (v15)
        *a4 = 1.0;
    }
    else
    {
      v25 = a7 - 1;
      v26 = dlamch_("Safe minimum");
      v27 = v26 / dlamch_("Precision");
      v28 = dlansy_("M", a2, a3, a4, a5, a7);
      if ((v28 <= 0.0 || (v29 = sqrt(v27), v28 >= v29)) && (v29 = sqrt(1.0 / v27), v28 <= v29))
      {
        v36 = 0;
      }
      else
      {
        __cto = v29 / v28;
        dlascl_(a2, &c__0_1, &c__0_1, &c_b17, &__cto, a3, a3, a4, a5, a9);
        v36 = 1;
      }
      v30 = a6;
      v31 = *a3 + 1;
      v32 = v31 + *a3;
      LODWORD(v40) = *a8 - v32 + 1;
      v33 = &v25[v31];
      v34 = a6;
      v38 = &v25[v32];
      Accelerate_AR_dsytrd(a2, (unsigned int *)a3, a4, a5, v34, (uint64_t)a7, (uint64_t)v33, v38, (int *)&v40, (int *)&v40 + 1);
      if (v15)
      {
        Accelerate_AR_dorgtr((uint64_t)a2, a3, a4, a5, (uint64_t)v33, v38, (int *)&v40, (int *)&v40 + 1);
        dsteqr_(a1, a3, v30, a7, a4, a5, v33, a9);
      }
      else
      {
        dsterf_(a3, v30, a7, a9);
      }
      if (v36)
      {
        if (*a9)
          v35 = *a9 - 1;
        else
          v35 = *a3;
        n = v35;
        da = 1.0 / __cto;
        dscal_(&n, &da, v30, &c__1_14);
      }
      *a7 = v23;
    }
  }
  return 0;
}

uint64_t sgePack_A_Tran_Aligned(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t *v22;
  BOOL v23;
  int32x4_t v24;
  int32x4_t v25;

  v5 = (uint64_t *)((char *)a3 + 4 * a4);
  v6 = &a3[a4];
  v7 = &v5[a4];
  v8 = &v6[a4];
  v9 = &v7[a4];
  v10 = &v8[a4];
  v11 = &v9[a4];
  v12 = 32 * a4 - 4 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        v14.i64[0] = *a3++;
        v15.i64[0] = *v5++;
        v16 = *v6++;
        v17 = *v7++;
        v18.i64[0] = *v8++;
        v19.i64[0] = *v9++;
        v20 = *v10++;
        v21 = *v11++;
        v14.i64[1] = v16;
        v15.i64[1] = v17;
        v18.i64[1] = v20;
        v19.i64[1] = v21;
        *a5 = vtrn1q_s32(v14, v15);
        a5[1] = vtrn1q_s32(v18, v19);
        v22 = a5 + 2;
        *v22 = vtrn2q_s32(v14, v15);
        v22[1] = vtrn2q_s32(v18, v19);
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      v24.i32[0] = *(_DWORD *)a3;
      a3 = (uint64_t *)((char *)a3 + 4);
      v24.i32[1] = *(_DWORD *)v5;
      v5 = (uint64_t *)((char *)v5 + 4);
      v24.i32[2] = *(_DWORD *)v6;
      v6 = (uint64_t *)((char *)v6 + 4);
      v24.i32[3] = *(_DWORD *)v7;
      v7 = (uint64_t *)((char *)v7 + 4);
      v25.i32[0] = *(_DWORD *)v8;
      v8 = (uint64_t *)((char *)v8 + 4);
      v25.i32[1] = *(_DWORD *)v9;
      v9 = (uint64_t *)((char *)v9 + 4);
      v25.i32[2] = *(_DWORD *)v10;
      v10 = (uint64_t *)((char *)v10 + 4);
      v25.i32[3] = *(_DWORD *)v11;
      v11 = (uint64_t *)((char *)v11 + 4);
      *a5 = v24;
      a5[1] = v25;
      a5 += 2;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (uint64_t *)((char *)a3 + v12);
    v5 = (uint64_t *)((char *)v5 + v12);
    v6 = (uint64_t *)((char *)v6 + v12);
    v7 = (uint64_t *)((char *)v7 + v12);
    v8 = (uint64_t *)((char *)v8 + v12);
    v9 = (uint64_t *)((char *)v9 + v12);
    v10 = (uint64_t *)((char *)v10 + v12);
    v11 = (uint64_t *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

void dtrsm_noPack_LLNU(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, double *__X, uint64_t __incX, double a7)
{
  int8x16_t v7;
  double v14;
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  double *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  double v48;
  double v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double *v78;
  float64x2_t v79;
  float64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  uint64_t v83;
  float64x2_t *v84;
  double *v85;
  float64x2_t *v86;
  uint64_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v18 = 2;
      }
      else
      {
        v22 = *(double *)(a3 + 8);
        v23 = __X + 1;
        v18 = 2;
        v24 = __N;
        do
        {
          v25 = *v23;
          v26 = *(v23 - 1) * a7;
          *(v23 - 1) = v26;
          *v23 = v25 * a7 - v26 * v22;
          v23 += __incX;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, __X, __incX);
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
  }
  else if (__N < 1)
  {
    v18 = 3;
  }
  else
  {
    v14 = *(double *)(a3 + 8);
    v15 = *(double *)(a3 + 16);
    v16 = *(double *)(a3 + 8 * a4 + 16);
    v17 = __X + 2;
    v18 = 3;
    v19 = __N;
    do
    {
      v20 = *(v17 - 2) * a7;
      v21 = *(v17 - 1) * a7 - v20 * v14;
      *(v17 - 2) = v20;
      *(v17 - 1) = v21;
      *v17 = -(v16 * v21 + v20 * v15 - *v17 * a7);
      v17 += __incX;
      --v19;
    }
    while (v19);
  }
  if (v18 < a1)
  {
    v27 = 8 * a4;
    v28 = 8 * __incX;
    do
    {
      if (__N < 4)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        v30 = (float64x2_t *)(a3 + 8 * v18);
        v31 = __X;
        do
        {
          v32 = (float64x2_t *)&v31[(unint64_t)v28 / 8];
          v33 = (float64x2_t *)&v31[2 * __incX];
          v34 = (float64x2_t *)&v31[3 * __incX];
          v35 = (float64x2_t *)(a3 + 8 * v18);
          v36 = v18;
          v37 = (float64x2_t *)v31;
          v38 = (float64x2_t)veorq_s8(v7, v7);
          v39 = v38;
          v40 = v38;
          v41 = v38;
          v42 = v38;
          v43 = v38;
          v44 = v38;
          v45 = v38;
          if ((v18 & 1) != 0)
          {
            v46 = v30[1];
            v35 = (float64x2_t *)((char *)v30 + v27);
            v37 = (float64x2_t *)(v31 + 1);
            v47 = v32->f64[0];
            v32 = (float64x2_t *)((char *)v32 + 8);
            v48 = v33->f64[0];
            v33 = (float64x2_t *)((char *)v33 + 8);
            v49 = v34->f64[0];
            v34 = (float64x2_t *)((char *)v34 + 8);
            v38 = vmlaq_n_f64(v38, *v30, *v31);
            v40 = vmlaq_n_f64(v40, *v30, v47);
            v42 = vmlaq_n_f64(v42, *v30, v48);
            v44 = vmlaq_n_f64(v44, *v30, v49);
            v39 = vmlaq_n_f64(v39, v46, *v31);
            v41 = vmlaq_n_f64(v41, v46, v47);
            v43 = vmlaq_n_f64(v43, v46, v48);
            v45 = vmlaq_n_f64(v45, v46, v49);
            v36 = v18 - 1;
          }
          for (; v36; v36 -= 2)
          {
            v51 = *v35;
            v52 = v35[1];
            v50 = (float64x2_t *)((char *)v35 + v27);
            v53 = *v50;
            v54 = v50[1];
            v35 = (float64x2_t *)((char *)v50 + v27);
            v55 = *v37++;
            v56 = *v32++;
            v57 = *v33++;
            v58 = *v34++;
            v38 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v51, v55.f64[0]), v53, v55, 1);
            v40 = vmlaq_laneq_f64(vmlaq_n_f64(v40, v51, v56.f64[0]), v53, v56, 1);
            v42 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v51, v57.f64[0]), v53, v57, 1);
            v44 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v51, v58.f64[0]), v53, v58, 1);
            v39 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v52, v55.f64[0]), v54, v55, 1);
            v41 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v52, v56.f64[0]), v54, v56, 1);
            v43 = vmlaq_laneq_f64(vmlaq_n_f64(v43, v52, v57.f64[0]), v54, v57, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v52, v58.f64[0]), v54, v58, 1);
          }
          v59 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v37, a7), v38);
          v60 = (int64x2_t)vsubq_f64(vmulq_n_f64(v37[1], a7), v39);
          v61 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v32, a7), v40);
          v62 = (int64x2_t)vsubq_f64(vmulq_n_f64(v32[1], a7), v41);
          v63 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v33, a7), v42);
          v64 = (int64x2_t)vsubq_f64(vmulq_n_f64(v33[1], a7), v43);
          v65 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v34, a7), v44);
          v66 = (int64x2_t)vsubq_f64(vmulq_n_f64(v34[1], a7), v45);
          v67 = (float64x2_t)vtrn2q_s64(v60, v62);
          v68 = (float64x2_t)vtrn1q_s64(v60, v62);
          v69 = (float64x2_t)vtrn2q_s64(v59, v61);
          v70 = (float64x2_t)vtrn1q_s64(v59, v61);
          v71 = (float64x2_t)vtrn1q_s64(v63, v65);
          v72 = *v35;
          v73 = v35[1];
          v74 = (float64x2_t *)((char *)v35 + v27 + 16);
          v75 = vmlsq_laneq_f64(v69, v70, v72, 1);
          v76 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v63, v65), v71, v72, 1);
          v77 = *v74;
          v78 = &v74->f64[(unint64_t)v27 / 8 + 1];
          v79 = vmlsq_lane_f64(vmlsq_lane_f64(v68, v70, v73.f64[0], 0), v75, v77.f64[0], 0);
          v80 = vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v64, v66), v71, v73.f64[0], 0), v76, v77.f64[0], 0);
          v81 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v67, v70, v73, 1), v75, v77, 1), v79, *v78, 0);
          v82 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v64, v66), v71, v73, 1), v76, v77, 1), v80, *v78, 0);
          v7 = (int8x16_t)vtrn1q_s64((int64x2_t)v70, (int64x2_t)v75);
          *v37 = (float64x2_t)v7;
          v37[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v79, v81);
          *(int64x2_t *)v32 = vtrn2q_s64((int64x2_t)v70, (int64x2_t)v75);
          v32[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v79, v81);
          *(int64x2_t *)v33 = vtrn1q_s64((int64x2_t)v71, (int64x2_t)v76);
          v33[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v80, v82);
          *(int64x2_t *)v34 = vtrn2q_s64((int64x2_t)v71, (int64x2_t)v76);
          v34[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v80, v82);
          v29 += 4;
          v31 += 4 * __incX;
        }
        while (v29 < __N - 3);
      }
      v83 = __N - v29;
      if (__N > v29)
      {
        v85 = (double *)((char *)__X + v28 * v29);
        do
        {
          v84 = (float64x2_t *)(a3 + 8 * v18);
          v86 = v84;
          v87 = v18;
          v88 = (float64x2_t *)v85;
          v89 = (float64x2_t)veorq_s8(v7, v7);
          v90 = v89;
          if ((v18 & 1) != 0)
          {
            v86 = (float64x2_t *)((char *)v84 + v27);
            v88 = (float64x2_t *)(v85 + 1);
            v89 = vmlaq_n_f64(v89, *v84, *v85);
            v90 = vmlaq_n_f64(v90, v84[1], *v85);
            v87 = v18 - 1;
          }
          for (; v87; v87 -= 2)
          {
            v92 = *v86;
            v93 = v86[1];
            v91 = (float64x2_t *)((char *)v86 + v27);
            v94 = *v91;
            v95 = v91[1];
            v86 = (float64x2_t *)((char *)v91 + v27);
            v96 = *v88++;
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v92, v96.f64[0]), v94, v96, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v93, v96.f64[0]), v95, v96, 1);
          }
          v97 = vsubq_f64(vmulq_n_f64(*v88, a7), v89);
          v98.f64[0] = v97.f64[0];
          v99 = *v86;
          v100 = v86[1];
          v101 = (float64x2_t *)((char *)v86 + v27 + 16);
          v7 = (int8x16_t)vmlsq_lane_f64(v97, v99, v97.f64[0], 0);
          *(_QWORD *)&v98.f64[1] = v7.i64[1];
          v102 = *v101;
          v103 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v88[1], a7), v90), v100, v98.f64[0], 0), *v101, v98, 1);
          v104.f64[0] = v103.f64[0];
          v102.f64[1] = v101->f64[(unint64_t)v27 / 8 + 1];
          v104.f64[1] = vmlsq_lane_f64(v103, v102, *(double *)&v103, 0).f64[1];
          *v88 = v98;
          v88[1] = v104;
          v85 = (double *)((char *)v85 + v28);
          --v83;
        }
        while (v83);
      }
      v18 += 4;
    }
    while (v18 < a1);
  }
}

void dtrsm_noPack_LLNN(uint64_t a1, uint64_t __N, double *a3, uint64_t a4, double *__X, uint64_t __incX, double a7)
{
  int8x16_t v7;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const double *v36;
  const double *v37;
  const double *v38;
  const double *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  float64x2_t *v50;
  double *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double *v98;
  float64x2_t v99;
  float64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t v103;
  float64x2_t *v104;
  double *v105;
  float64x2_t *v106;
  uint64_t v107;
  float64x2_t *v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = a7 / *a3;
        v28 = __X + 1;
        v21 = 2;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = *v28;
          v32 = v27 * *(v28 - 1);
          *(v28 - 1) = v32;
          *v28 = v30 * (v31 * a7 - v32 * v26);
          v28 += __incX;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *a3, __X, __incX);
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = a7 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = __X + 2;
    v21 = 3;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *(v20 - 2);
      v25 = v19 * (*(v20 - 1) * a7 - v24 * v15);
      *(v20 - 2) = v24;
      *(v20 - 1) = v25;
      *(double *)v7.i64 = v18 * v25;
      *v20 = v23 * -(*(double *)v7.i64 + v24 * v14 - *v20 * a7);
      v20 += __incX;
      --v22;
    }
    while (v22);
  }
  if (v21 < a1)
  {
    v33 = 8 * a4;
    v34 = a4 + 1;
    v35 = 8 * __incX;
    do
    {
      v36 = &a3[v21 * a4 + v21];
      v37 = &a3[v34 + v34 * v21];
      v38 = &a3[(v21 + 2) * v34];
      v39 = &a3[(v21 + 3) * v34];
      v40 = vld1q_dup_f64(v36);
      v41 = vld1q_dup_f64(v37);
      v42 = vld1q_dup_f64(v38);
      v43 = vld1q_dup_f64(v39);
      v44 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v45 = vdivq_f64(v44, v40);
      v46 = vdivq_f64(v44, v41);
      v47 = vdivq_f64(v44, v42);
      v48 = vdivq_f64(v44, v43);
      if (__N < 4)
      {
        v49 = 0;
      }
      else
      {
        v49 = 0;
        v50 = (float64x2_t *)&a3[v21];
        v51 = __X;
        do
        {
          v52 = (float64x2_t *)&v51[(unint64_t)v35 / 8];
          v53 = (float64x2_t *)&v51[2 * __incX];
          v54 = (float64x2_t *)&v51[3 * __incX];
          v55 = (float64x2_t *)&a3[v21];
          v56 = v21;
          v57 = (float64x2_t *)v51;
          v58 = (float64x2_t)veorq_s8(v7, v7);
          v59 = v58;
          v60 = v58;
          v61 = v58;
          v62 = v58;
          v63 = v58;
          v64 = v58;
          v65 = v58;
          if ((v21 & 1) != 0)
          {
            v66 = v50[1];
            v55 = (float64x2_t *)((char *)v50 + v33);
            v57 = (float64x2_t *)(v51 + 1);
            v67 = v52->f64[0];
            v52 = (float64x2_t *)((char *)v52 + 8);
            v68 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v69 = v54->f64[0];
            v54 = (float64x2_t *)((char *)v54 + 8);
            v58 = vmlaq_n_f64(v58, *v50, *v51);
            v60 = vmlaq_n_f64(v60, *v50, v67);
            v62 = vmlaq_n_f64(v62, *v50, v68);
            v64 = vmlaq_n_f64(v64, *v50, v69);
            v59 = vmlaq_n_f64(v59, v66, *v51);
            v61 = vmlaq_n_f64(v61, v66, v67);
            v63 = vmlaq_n_f64(v63, v66, v68);
            v65 = vmlaq_n_f64(v65, v66, v69);
            v56 = v21 - 1;
          }
          for (; v56; v56 -= 2)
          {
            v71 = *v55;
            v72 = v55[1];
            v70 = (float64x2_t *)((char *)v55 + v33);
            v73 = *v70;
            v74 = v70[1];
            v55 = (float64x2_t *)((char *)v70 + v33);
            v75 = *v57++;
            v76 = *v52++;
            v77 = *v53++;
            v78 = *v54++;
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v71, v75.f64[0]), v73, v75, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v71, v76.f64[0]), v73, v76, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v71, v77.f64[0]), v73, v77, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v71, v78.f64[0]), v73, v78, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, v75.f64[0]), v74, v75, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v76.f64[0]), v74, v76, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v72, v77.f64[0]), v74, v77, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v72, v78.f64[0]), v74, v78, 1);
          }
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v57, a7), v58);
          v80 = (int64x2_t)vsubq_f64(vmulq_n_f64(v57[1], a7), v59);
          v81 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v52, a7), v60);
          v82 = (int64x2_t)vsubq_f64(vmulq_n_f64(v52[1], a7), v61);
          v83 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v53, a7), v62);
          v84 = (int64x2_t)vsubq_f64(vmulq_n_f64(v53[1], a7), v63);
          v85 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v54, a7), v64);
          v86 = (int64x2_t)vsubq_f64(vmulq_n_f64(v54[1], a7), v65);
          v87 = (float64x2_t)vtrn2q_s64(v80, v82);
          v88 = (float64x2_t)vtrn1q_s64(v80, v82);
          v89 = (float64x2_t)vtrn2q_s64(v79, v81);
          v90 = vmulq_f64((float64x2_t)vtrn1q_s64(v79, v81), v45);
          v91 = vmulq_f64((float64x2_t)vtrn1q_s64(v83, v85), v45);
          v92 = *v55;
          v93 = v55[1];
          v94 = (float64x2_t *)((char *)v55 + v33 + 16);
          v95 = vmulq_f64(vmlsq_laneq_f64(v89, v90, v92, 1), v46);
          v96 = vmulq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v83, v85), v91, v92, 1), v46);
          v97 = *v94;
          v98 = &v94->f64[(unint64_t)v33 / 8 + 1];
          v99 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v88, v90, v93.f64[0], 0), v95, v97.f64[0], 0), v47);
          v100 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v84, v86), v91, v93.f64[0], 0), v96, v97.f64[0], 0), v47);
          v101 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v87, v90, v93, 1), v95, v97, 1), v99, *v98, 0), v48);
          v102 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v84, v86), v91, v93, 1), v96, v97, 1), v100, *v98, 0), v48);
          v7 = (int8x16_t)vtrn1q_s64((int64x2_t)v90, (int64x2_t)v95);
          *v57 = (float64x2_t)v7;
          v57[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v99, v101);
          *(int64x2_t *)v52 = vtrn2q_s64((int64x2_t)v90, (int64x2_t)v95);
          v52[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v99, v101);
          *(int64x2_t *)v53 = vtrn1q_s64((int64x2_t)v91, (int64x2_t)v96);
          v53[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v100, v102);
          *(int64x2_t *)v54 = vtrn2q_s64((int64x2_t)v91, (int64x2_t)v96);
          v54[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v100, v102);
          v49 += 4;
          v51 += 4 * __incX;
        }
        while (v49 < __N - 3);
      }
      v103 = __N - v49;
      if (__N > v49)
      {
        v104 = (float64x2_t *)&a3[v21];
        v105 = (double *)((char *)__X + v35 * v49);
        do
        {
          v106 = (float64x2_t *)&a3[v21];
          v107 = v21;
          v108 = (float64x2_t *)v105;
          v109 = (float64x2_t)veorq_s8(v7, v7);
          v110 = v109;
          if ((v21 & 1) != 0)
          {
            v106 = (float64x2_t *)((char *)v104 + v33);
            v108 = (float64x2_t *)(v105 + 1);
            v109 = vmlaq_n_f64(v109, *v104, *v105);
            v110 = vmlaq_n_f64(v110, v104[1], *v105);
            v107 = v21 - 1;
          }
          for (; v107; v107 -= 2)
          {
            v112 = *v106;
            v113 = v106[1];
            v111 = (float64x2_t *)((char *)v106 + v33);
            v114 = *v111;
            v115 = v111[1];
            v106 = (float64x2_t *)((char *)v111 + v33);
            v116 = *v108++;
            v109 = vmlaq_laneq_f64(vmlaq_n_f64(v109, v112, v116.f64[0]), v114, v116, 1);
            v110 = vmlaq_laneq_f64(vmlaq_n_f64(v110, v113, v116.f64[0]), v115, v116, 1);
          }
          v117 = vsubq_f64(vmulq_n_f64(*v108, a7), v109);
          v118.f64[0] = v117.f64[0] * v45.f64[0];
          v119 = *v106;
          v120 = v106[1];
          v121 = (float64x2_t *)((char *)v106 + v33 + 16);
          v7 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(v117, v119, v117.f64[0] * v45.f64[0], 0), v46);
          *(_QWORD *)&v118.f64[1] = v7.i64[1];
          v122 = *v121;
          v123 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v108[1], a7), v110), v120, v118.f64[0], 0), *v121, v118, 1);
          v124.f64[0] = v123.f64[0] * v47.f64[0];
          v122.f64[1] = v121->f64[(unint64_t)v33 / 8 + 1];
          v124.f64[1] = vmulq_f64(vmlsq_lane_f64(v123, v122, *(double *)&v123 * *(double *)&v47, 0), v48).f64[1];
          *v108 = v118;
          v108[1] = v124;
          v105 = (double *)((char *)v105 + v35);
          --v103;
        }
        while (v103);
      }
      v21 += 4;
    }
    while (v21 < a1);
  }
}

void dtrsm_noPack_LLTU(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13)
{
  int8x16_t v13;
  uint64_t v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  double *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  int64x2_t *v54;
  int64x2_t *v55;
  float64x2_t *v56;
  uint64_t v57;
  int64x2_t *v58;
  int64x2_t *v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  double v72;
  double v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double *v86;
  float64x2_t *v87;
  double *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t *v110;
  _OWORD *v111;
  float64x2_t *v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  int64x2_t *v117;
  int64x2_t *v118;
  float64x2_t *v119;
  uint64_t v120;
  int64x2_t *v121;
  int64x2_t *v122;
  uint64_t v123;
  float64x2_t v124;
  float64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  float64x2_t v130;
  int64x2_t *v131;
  float64x2_t *v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  BOOL v138;

  v20 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v30 = *(double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
        v31 = (double *)(a5 + 8 * v20);
        v32 = __N;
        do
        {
          v33 = *(v31 - 1);
          v34 = *v31 * a7;
          *v31 = v34;
          *(v31 - 1) = v33 * a7 - v34 * v30;
          v31 += __incX;
          --v32;
        }
        while (v32);
      }
      v20 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v20), __incX);
      v20 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v21 = *(double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
      v22 = (double *)(a3 + 8 * (v20 + (a1 - 3) * a4));
      v24 = *(v22 - 1);
      v23 = *v22;
      v25 = (double *)(a5 + 8 * v20);
      v26 = __N;
      do
      {
        v27 = *(v25 - 1);
        v28 = *v25 * a7;
        *v25 = v28;
        v29 = v27 * a7 - v28 * v21;
        *(v25 - 2) = -(v24 * v29 + v28 * v23 - *(v25 - 2) * a7);
        *(v25 - 1) = v29;
        v25 += __incX;
        --v26;
      }
      while (v26);
    }
    v20 = a1 - 4;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v35 = v20 + 1;
    v36 = 3 * __incX;
    v37 = a5 + 8 * v20 + 8;
    v38 = 32 * __incX;
    v39 = 2 * __incX;
    v40 = 8 * __incX;
    do
    {
      v41 = v35 - 4;
      if (__N < 4)
      {
        v42 = 0;
      }
      else
      {
        v42 = 0;
        v43 = a3 + 8 * v35;
        v44 = (unint64_t *)(v43 + 8 * v41 * a4);
        v45 = (unint64_t *)(v43 + 8 * (v35 - 3) * a4);
        v46 = (unint64_t *)(v43 + 8 * (v35 - 2) * a4);
        v47 = (unint64_t *)(v43 + 8 * (v35 - 1) * a4);
        v48 = a1 - v41;
        if (a1 - v41 <= 4)
          v48 = 4;
        v49 = v48 - 4;
        v50 = (double *)v37;
        do
        {
          v51 = (float64x2_t *)&v50[(unint64_t)v40 / 8];
          v52 = (float64x2_t *)&v50[v39];
          v53 = (float64x2_t *)&v50[v36];
          v54 = (int64x2_t *)v44;
          v55 = (int64x2_t *)v46;
          v56 = (float64x2_t *)v50;
          v57 = v49;
          v58 = (int64x2_t *)v45;
          v59 = (int64x2_t *)v47;
          v60 = v49 + 1;
          v61 = (float64x2_t)veorq_s8(v13, v13);
          v62 = v61;
          v63 = v61;
          v64 = v61;
          v65 = v61;
          v66 = v61;
          v67 = v61;
          v68 = v61;
          if ((v49 & 1) != 0)
          {
            *(_QWORD *)&a10.f64[0] = *v44;
            v54 = (int64x2_t *)(v44 + 1);
            *(_QWORD *)&a11.f64[0] = *v45;
            v58 = (int64x2_t *)(v45 + 1);
            *(_QWORD *)&a12.f64[0] = *v46;
            v55 = (int64x2_t *)(v46 + 1);
            *(_QWORD *)&a13.f64[0] = *v47;
            v59 = (int64x2_t *)(v47 + 1);
            v69 = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)a11);
            v70 = (float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13);
            v56 = (float64x2_t *)(v50 + 1);
            v71 = v51->f64[0];
            v51 = (float64x2_t *)((char *)v51 + 8);
            v72 = v52->f64[0];
            v52 = (float64x2_t *)((char *)v52 + 8);
            v73 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v61 = vmlaq_n_f64(v61, v69, *v50);
            v63 = vmlaq_n_f64(v63, v69, v71);
            v65 = vmlaq_n_f64(v65, v69, v72);
            v67 = vmlaq_n_f64(v67, v69, v73);
            v62 = vmlaq_n_f64(v62, v70, *v50);
            v64 = vmlaq_n_f64(v64, v70, v71);
            v66 = vmlaq_n_f64(v66, v70, v72);
            v68 = vmlaq_n_f64(v68, v70, v73);
            v57 = v49 - 1;
          }
          for (; v57; v57 -= 2)
          {
            v74 = *v54++;
            v75 = *v58++;
            v76 = *v55++;
            v77 = *v59++;
            v78 = (float64x2_t)vtrn1q_s64(v74, v75);
            v79 = (float64x2_t)vtrn1q_s64(v76, v77);
            v80 = (float64x2_t)vtrn2q_s64(v74, v75);
            v81 = (float64x2_t)vtrn2q_s64(v76, v77);
            v82 = *v56++;
            v83 = *v51++;
            v84 = *v52++;
            v85 = *v53++;
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v78, v82.f64[0]), v80, v82, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v78, v83.f64[0]), v80, v83, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v78, v84.f64[0]), v80, v84, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v78, v85.f64[0]), v80, v85, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v79, v82.f64[0]), v81, v82, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v79, v83.f64[0]), v81, v83, 1);
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v79, v84.f64[0]), v81, v84, 1);
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v79, v85.f64[0]), v81, v85, 1);
          }
          v86 = (double *)&v54->i64[-v60 - 1];
          v87 = (float64x2_t *)((char *)v58 - 8 * v60 - 8);
          v88 = (double *)&v55->i64[-v60];
          v89 = (float64x2_t *)((char *)v56 - 8 * v49 - 32);
          v90 = (float64x2_t *)((char *)v51 - 8 * v49 - 32);
          v91 = (float64x2_t *)((char *)v52 - 8 * v49 - 32);
          v92 = (float64x2_t *)((char *)v53 - 8 * v49 - 32);
          v93 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v89, a7), v61);
          v94 = (int64x2_t)vsubq_f64(vmulq_n_f64(v89[1], a7), v62);
          v95 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v90, a7), v63);
          v96 = (int64x2_t)vsubq_f64(vmulq_n_f64(v90[1], a7), v64);
          v97 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v91, a7), v65);
          v98 = (int64x2_t)vsubq_f64(vmulq_n_f64(v91[1], a7), v66);
          v99 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v92, a7), v67);
          v100 = (int64x2_t)vsubq_f64(vmulq_n_f64(v92[1], a7), v68);
          v101 = (float64x2_t)vtrn2q_s64(v94, v96);
          v102 = (float64x2_t)vtrn2q_s64(v98, v100);
          v103 = (float64x2_t)vtrn2q_s64(v93, v95);
          v104 = (float64x2_t)vtrn1q_s64(v93, v95);
          v105 = *(float64x2_t *)v86--;
          a10 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v94, v96), v101, *v88, 0);
          a11 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v98, v100), v102, *v88, 0);
          a12 = vmlsq_lane_f64(vmlsq_laneq_f64(v103, v101, *v87, 1), a10, v87->f64[0], 0);
          a13 = vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v97, v99), v102, *v87, 1), a11, v87->f64[0], 0);
          v106 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v104, v101, v105, 1), a10, v105.f64[0], 0), a12, *v86, 0);
          v107 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn1q_s64(v97, v99), v102, v105, 1), a11, v105.f64[0], 0), a13, *v86, 0);
          v13 = (int8x16_t)vtrn1q_s64(v106, (int64x2_t)a12);
          *v89 = (float64x2_t)v13;
          v89[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)v101);
          *(int64x2_t *)v90 = vtrn2q_s64(v106, (int64x2_t)a12);
          v90[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a10, (int64x2_t)v101);
          *(int64x2_t *)v91 = vtrn1q_s64(v107, (int64x2_t)a13);
          v91[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)v102);
          *(int64x2_t *)v92 = vtrn2q_s64(v107, (int64x2_t)a13);
          v92[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a11, (int64x2_t)v102);
          v42 += 4;
          v50 = (double *)((char *)v50 + v38);
        }
        while (v42 < __N - 3);
      }
      v108 = __N - v42;
      if (__N > v42)
      {
        v109 = a3 + 8 * v35;
        v110 = (float64x2_t *)(v109 + 8 * v41 * a4);
        v111 = (_OWORD *)(v109 + 8 * (v35 - 3) * a4);
        v112 = (float64x2_t *)(v109 + 8 * (v35 - 2) * a4);
        v113 = (_OWORD *)(v109 + 8 * (v35 - 1) * a4);
        v114 = a1 - v41;
        if (a1 - v41 <= 4)
          v114 = 4;
        v115 = v114 - 4;
        v116 = (double *)(v37 + v40 * v42);
        do
        {
          v117 = (int64x2_t *)v110;
          v118 = (int64x2_t *)v112;
          v119 = (float64x2_t *)v116;
          v120 = v115;
          v121 = (int64x2_t *)v111;
          v122 = (int64x2_t *)v113;
          v123 = v115 + 1;
          v124 = (float64x2_t)veorq_s8(v13, v13);
          v125 = v124;
          if ((v115 & 1) != 0)
          {
            v117 = (int64x2_t *)&v110->f64[1];
            v121 = (int64x2_t *)((char *)v111 + 8);
            v118 = (int64x2_t *)&v112->f64[1];
            v122 = (int64x2_t *)((char *)v113 + 8);
            v119 = (float64x2_t *)(v116 + 1);
            v124 = vmlaq_n_f64(v124, *v110, *v116);
            v125 = vmlaq_n_f64(v125, *v112, *v116);
            v120 = v115 - 1;
          }
          for (; v120; v120 -= 2)
          {
            v126 = *v117++;
            v127 = *v121++;
            v128 = *v118++;
            v129 = *v122++;
            v130 = *v119++;
            v124 = vmlaq_laneq_f64(vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64(v126, v127), v130.f64[0]), (float64x2_t)vtrn2q_s64(v126, v127), v130, 1);
            v125 = vmlaq_laneq_f64(vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64(v128, v129), v130.f64[0]), (float64x2_t)vtrn2q_s64(v128, v129), v130, 1);
          }
          v131 = (int64x2_t *)((char *)v117 - 8 * v123 - 8);
          v132 = (float64x2_t *)((char *)v119 - 8 * v115 - 32);
          v133 = vmulq_n_f64(*v132, a7);
          v134 = vmulq_n_f64(v132[1], a7);
          v135 = vsubq_f64(v134, v125);
          v134.f64[1] = v135.f64[1];
          a10 = *(float64x2_t *)v131;
          a11 = *(float64x2_t *)((char *)v121 - 8 * v123 - 8);
          *(_QWORD *)&a12.f64[0] = v118->i64[-v123];
          v136 = vmlsq_laneq_f64(vsubq_f64(v133, v124), (float64x2_t)vtrn2q_s64(*v131, (int64x2_t)a11), v134, 1);
          *(_QWORD *)&v134.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(v135, a12, v134, 1);
          a13 = (float64x2_t)vtrn1q_s64(*v131, (int64x2_t)a11);
          v137 = vmlsq_lane_f64(v136, a13, v134.f64[0], 0);
          v133.f64[1] = v137.f64[1];
          *(_QWORD *)&a10.f64[0] = v131[-1].i64[1];
          v13 = (int8x16_t)vmlsq_laneq_f64(v137, a10, v133, 1);
          *(_QWORD *)&v133.f64[0] = v13.i64[0];
          *v132 = v133;
          v132[1] = v134;
          v116 = (double *)((char *)v116 + v40);
          --v108;
        }
        while (v108);
      }
      v37 -= 32;
      v138 = v35 < 5;
      v35 -= 4;
    }
    while (!v138);
  }
}

void dtrsm_noPack_LLTN(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  int8x16_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const double *v51;
  uint64_t v52;
  const double *v53;
  uint64_t v54;
  const double *v55;
  uint64_t v56;
  const double *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  uint64_t v79;
  int64x2_t *v80;
  int64x2_t *v81;
  int64x2_t *v82;
  int64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  double v96;
  double v97;
  double v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double *v111;
  float64x2_t *v112;
  double *v113;
  float64x2_t *v114;
  float64x2_t *v115;
  float64x2_t *v116;
  float64x2_t *v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t *v135;
  _OWORD *v136;
  float64x2_t *v137;
  _OWORD *v138;
  uint64_t v139;
  uint64_t v140;
  double *v141;
  int64x2_t *v142;
  int64x2_t *v143;
  float64x2_t *v144;
  uint64_t v145;
  int64x2_t *v146;
  int64x2_t *v147;
  uint64_t v148;
  float64x2_t v149;
  float64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  float64x2_t v155;
  int64x2_t *v156;
  float64x2_t *v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  int64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v16 = a4;
  v17 = a3;
  v18 = __N;
  v19 = a1;
  v20 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v33 = (double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
        v35 = *(v33 - 1);
        v34 = *v33;
        v36 = a7 / *(double *)(a3 + 8 * (v20 + v20 * a4));
        v37 = (double *)(a5 + 8 * v20);
        v38 = __N;
        v39 = 1.0 / v35;
        do
        {
          v40 = *(v37 - 1);
          v41 = v36 * *v37;
          *v37 = v41;
          *(v37 - 1) = v39 * (v40 * a7 - v41 * v34);
          v37 += __incX;
          --v38;
        }
        while (v38);
      }
      v20 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v20 + v20 * a4)), (double *)(a5 + 8 * v20), __incX);
      v20 = v19 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v21 = (double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
      v22 = *v21;
      v23 = (double *)(a3 + 8 * (v20 + (a1 - 3) * a4));
      v25 = *(v23 - 1);
      v24 = *v23;
      v26 = a7 / *(double *)(a3 + 8 * (v20 + v20 * a4));
      v27 = 1.0 / *(v21 - 1);
      v28 = (double *)(a5 + 8 * v20);
      v29 = __N;
      v30 = 1.0 / *(v23 - 2);
      do
      {
        v31 = *(v28 - 1);
        v32 = v26 * *v28;
        *v28 = v32;
        *(double *)v13.i64 = v27 * (v31 * a7 - v32 * v22);
        *(v28 - 2) = v30 * -(v25 * *(double *)v13.i64 + v32 * v24 - *(v28 - 2) * a7);
        *(v28 - 1) = *(double *)v13.i64;
        v28 += __incX;
        --v29;
      }
      while (v29);
    }
    v20 = a1 - 4;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v42 = v20 + 1;
    v166 = v16 + 1;
    v167 = v19;
    v43 = v18 - 3;
    v44 = 3 * __incX;
    v45 = a5 + 8 * v20 + 8;
    v46 = 32 * __incX;
    v47 = 2 * __incX;
    v48 = 8 * __incX;
    v169 = v17;
    v170 = v16;
    v168 = v18;
    do
    {
      v49 = v42 - 4;
      v50 = v17 + 8 * (v42 - 4) * v16;
      v51 = (const double *)(v50 + 8 * (v42 - 4));
      v52 = v42 - 3;
      v53 = (const double *)(v17 + 8 * (v42 - 3) * v166);
      v54 = v42 - 2;
      v55 = (const double *)(v17 + 8 * (v42 - 2) * v166);
      v56 = v42 - 1;
      v57 = (const double *)(v17 + 8 * (v42 - 1) * v166);
      v58 = vld1q_dup_f64(v51);
      v59 = vld1q_dup_f64(v53);
      v60 = vld1q_dup_f64(v55);
      v61 = vld1q_dup_f64(v57);
      v62 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v63 = vdivq_f64(v62, v58);
      v64 = vdivq_f64(v62, v59);
      v65 = vdivq_f64(v62, v60);
      v66 = vdivq_f64(v62, v61);
      if (v18 < 4)
      {
        v67 = 0;
      }
      else
      {
        v67 = 0;
        v68 = v17 + 8 * v42;
        v70 = (_QWORD *)(v68 + 8 * v52 * v16);
        v71 = (_QWORD *)(v68 + 8 * v54 * v16);
        v72 = (unint64_t *)(v68 + 8 * v56 * v16);
        v73 = v19 - v49;
        if (v19 - v49 <= 4)
          v73 = 4;
        v74 = v73 - 4;
        v75 = (double *)v45;
        do
        {
          v76 = (float64x2_t *)&v75[(unint64_t)v48 / 8];
          v77 = (float64x2_t *)&v75[v47];
          v78 = (float64x2_t *)&v75[v44];
          v79 = v74;
          v80 = (int64x2_t *)v70;
          v81 = (int64x2_t *)v72;
          v69 = (_QWORD *)(v50 + 8 * v42);
          v82 = (int64x2_t *)v69;
          v83 = (int64x2_t *)v71;
          v84 = (float64x2_t *)v75;
          v85 = v74 + 1;
          v86 = (float64x2_t)veorq_s8(v13, v13);
          v87 = v86;
          v88 = v86;
          v89 = v86;
          v90 = v86;
          v91 = v86;
          v92 = v86;
          v93 = v86;
          if ((v74 & 1) != 0)
          {
            v60.f64[0] = *(float64_t *)v69;
            v82 = (int64x2_t *)(v69 + 1);
            v61.f64[0] = *(float64_t *)v70;
            v80 = (int64x2_t *)(v70 + 1);
            v62.f64[0] = *(float64_t *)v71;
            v83 = (int64x2_t *)(v71 + 1);
            *(_QWORD *)&a13.f64[0] = *v72;
            v81 = (int64x2_t *)(v72 + 1);
            v94 = (float64x2_t)vtrn1q_s64((int64x2_t)v60, (int64x2_t)v61);
            v95 = (float64x2_t)vtrn1q_s64((int64x2_t)v62, (int64x2_t)a13);
            v84 = (float64x2_t *)(v75 + 1);
            v96 = v76->f64[0];
            v76 = (float64x2_t *)((char *)v76 + 8);
            v97 = v77->f64[0];
            v77 = (float64x2_t *)((char *)v77 + 8);
            v98 = v78->f64[0];
            v78 = (float64x2_t *)((char *)v78 + 8);
            v86 = vmlaq_n_f64(v86, v94, *v75);
            v88 = vmlaq_n_f64(v88, v94, v96);
            v90 = vmlaq_n_f64(v90, v94, v97);
            v92 = vmlaq_n_f64(v92, v94, v98);
            v87 = vmlaq_n_f64(v87, v95, *v75);
            v89 = vmlaq_n_f64(v89, v95, v96);
            v91 = vmlaq_n_f64(v91, v95, v97);
            v93 = vmlaq_n_f64(v93, v95, v98);
            v79 = v74 - 1;
          }
          for (; v79; v79 -= 2)
          {
            v99 = *v82++;
            v100 = *v80++;
            v101 = *v83++;
            v102 = *v81++;
            v103 = (float64x2_t)vtrn1q_s64(v99, v100);
            v104 = (float64x2_t)vtrn1q_s64(v101, v102);
            v105 = (float64x2_t)vtrn2q_s64(v99, v100);
            v106 = (float64x2_t)vtrn2q_s64(v101, v102);
            v107 = *v84++;
            v108 = *v76++;
            v109 = *v77++;
            v110 = *v78++;
            v86 = vmlaq_laneq_f64(vmlaq_n_f64(v86, v103, v107.f64[0]), v105, v107, 1);
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v103, v108.f64[0]), v105, v108, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v103, v109.f64[0]), v105, v109, 1);
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v103, v110.f64[0]), v105, v110, 1);
            v87 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v104, v107.f64[0]), v106, v107, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v104, v108.f64[0]), v106, v108, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v104, v109.f64[0]), v106, v109, 1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v104, v110.f64[0]), v106, v110, 1);
          }
          v111 = (double *)&v82->i64[-v85 - 1];
          v112 = (float64x2_t *)((char *)v80 - 8 * v85 - 8);
          v113 = (double *)&v83->i64[-v85];
          v114 = (float64x2_t *)((char *)v84 - 8 * v74 - 32);
          v115 = (float64x2_t *)((char *)v76 - 8 * v74 - 32);
          v116 = (float64x2_t *)((char *)v77 - 8 * v74 - 32);
          v117 = (float64x2_t *)((char *)v78 - 8 * v74 - 32);
          v118 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v114, a7), v86);
          v119 = (int64x2_t)vsubq_f64(vmulq_n_f64(v114[1], a7), v87);
          v120 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v115, a7), v88);
          v121 = (int64x2_t)vsubq_f64(vmulq_n_f64(v115[1], a7), v89);
          v122 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v116, a7), v90);
          v123 = (int64x2_t)vsubq_f64(vmulq_n_f64(v116[1], a7), v91);
          v124 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v117, a7), v92);
          v125 = (int64x2_t)vsubq_f64(vmulq_n_f64(v117[1], a7), v93);
          v126 = (float64x2_t)vtrn2q_s64(v118, v120);
          v127 = (float64x2_t)vtrn1q_s64(v118, v120);
          v128 = vmulq_f64((float64x2_t)vtrn2q_s64(v119, v121), v66);
          v129 = vmulq_f64((float64x2_t)vtrn2q_s64(v123, v125), v66);
          v130 = *(float64x2_t *)v111--;
          v60 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v119, v121), v128, *v113, 0), v65);
          v61 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v123, v125), v129, *v113, 0), v65);
          v62 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v126, v128, *v112, 1), v60, v112->f64[0], 0), v64);
          a13 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v122, v124), v129, *v112, 1), v61, v112->f64[0], 0), v64);
          v131 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v127, v128, v130, 1), v60, v130.f64[0], 0), v62, *v111, 0), v63);
          v132 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn1q_s64(v122, v124), v129, v130, 1), v61, v130.f64[0], 0), a13, *v111, 0), v63);
          v13 = (int8x16_t)vtrn1q_s64(v131, (int64x2_t)v62);
          *v114 = (float64x2_t)v13;
          v114[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v60, (int64x2_t)v128);
          *(int64x2_t *)v115 = vtrn2q_s64(v131, (int64x2_t)v62);
          v115[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v60, (int64x2_t)v128);
          *(int64x2_t *)v116 = vtrn1q_s64(v132, (int64x2_t)a13);
          v116[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v61, (int64x2_t)v129);
          *(int64x2_t *)v117 = vtrn2q_s64(v132, (int64x2_t)a13);
          v117[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v61, (int64x2_t)v129);
          v67 += 4;
          v75 = (double *)((char *)v75 + v46);
        }
        while (v67 < v43);
      }
      v18 = v168;
      v17 = v169;
      v133 = v168 - v67;
      v16 = v170;
      v19 = v167;
      if (v168 > v67)
      {
        v134 = v169 + 8 * v42;
        v135 = (float64x2_t *)(v50 + 8 * v42);
        v136 = (_OWORD *)(v134 + 8 * v52 * v170);
        v137 = (float64x2_t *)(v134 + 8 * v54 * v170);
        v138 = (_OWORD *)(v134 + 8 * v56 * v170);
        v139 = v167 - v49;
        if (v167 - v49 <= 4)
          v139 = 4;
        v140 = v139 - 4;
        v141 = (double *)(v45 + v48 * v67);
        do
        {
          v142 = (int64x2_t *)v135;
          v143 = (int64x2_t *)v137;
          v144 = (float64x2_t *)v141;
          v145 = v140;
          v146 = (int64x2_t *)v136;
          v147 = (int64x2_t *)v138;
          v148 = v140 + 1;
          v149 = (float64x2_t)veorq_s8(v13, v13);
          v150 = v149;
          if ((v140 & 1) != 0)
          {
            v142 = (int64x2_t *)&v135->f64[1];
            v146 = (int64x2_t *)((char *)v136 + 8);
            v143 = (int64x2_t *)&v137->f64[1];
            v147 = (int64x2_t *)((char *)v138 + 8);
            v144 = (float64x2_t *)(v141 + 1);
            v149 = vmlaq_n_f64(v149, *v135, *v141);
            v150 = vmlaq_n_f64(v150, *v137, *v141);
            v145 = v140 - 1;
          }
          for (; v145; v145 -= 2)
          {
            v151 = *v142++;
            v152 = *v146++;
            v153 = *v143++;
            v154 = *v147++;
            v155 = *v144++;
            v149 = vmlaq_laneq_f64(vmlaq_n_f64(v149, (float64x2_t)vtrn1q_s64(v151, v152), v155.f64[0]), (float64x2_t)vtrn2q_s64(v151, v152), v155, 1);
            v150 = vmlaq_laneq_f64(vmlaq_n_f64(v150, (float64x2_t)vtrn1q_s64(v153, v154), v155.f64[0]), (float64x2_t)vtrn2q_s64(v153, v154), v155, 1);
          }
          v156 = (int64x2_t *)((char *)v142 - 8 * v148 - 8);
          v157 = (float64x2_t *)((char *)v144 - 8 * v140 - 32);
          v158 = vsubq_f64(vmulq_n_f64(v157[1], a7), v150);
          v159 = vmulq_f64(v158, v66);
          v160 = *(float64x2_t *)v156;
          v161 = *(int64x2_t *)((char *)v146 - 8 * v148 - 8);
          *(_QWORD *)&v62.f64[0] = v143->i64[-v148];
          v162 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v157, a7), v149), (float64x2_t)vtrn2q_s64(*v156, v161), v159, 1);
          v159.f64[0] = vmlsq_laneq_f64(v158, v62, v159, 1).f64[0] * v65.f64[0];
          a13 = (float64x2_t)vtrn1q_s64(*v156, v161);
          v163 = vmlsq_lane_f64(v162, a13, v159.f64[0], 0);
          v164 = vmulq_f64(v163, v64);
          *(_QWORD *)&v160.f64[0] = v156[-1].i64[1];
          v13 = (int8x16_t)vmulq_f64(vmlsq_laneq_f64(v163, v160, v164, 1), v63);
          *(_QWORD *)&v164.f64[0] = v13.i64[0];
          *v157 = v164;
          v157[1] = v159;
          v141 = (double *)((char *)v141 + v48);
          --v133;
        }
        while (v133);
      }
      v45 -= 32;
      v165 = v42 < 5;
      v42 -= 4;
    }
    while (!v165);
  }
}

uint64_t Accelerate_AR_dposv(uint64_t a1, int *a2, unsigned int *a3, double *a4, int *a5, char *a6, int *a7, int *a8)
{
  signed int v16;
  int v17;

  *a8 = 0;
  if (!lsame_() && !lsame_())
  {
    v17 = -1;
    goto LABEL_14;
  }
  v16 = *a2;
  if (*a2 < 0)
  {
    v17 = -2;
    goto LABEL_14;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v17 = -3;
    goto LABEL_14;
  }
  if (v16 <= 1)
    v16 = 1;
  if (*a5 < v16)
  {
    v17 = -5;
LABEL_14:
    *a8 = v17;
LABEL_15:
    xerbla_();
    return 0;
  }
  if (*a7 < v16)
  {
    v17 = -7;
    goto LABEL_14;
  }
  if (*a8)
    goto LABEL_15;
  Accelerate_AR_dpotrf(a1, a2, (uint64_t)a4, a5, a8);
  if (!*a8)
    Accelerate_AR_dpotrs(a1, (unsigned int *)a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

void dtrmm_noPack_LLNU(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t v7;
  const double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  float64x2_t v51;
  uint64_t v52;
  float64x2_t v53;
  uint64_t v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  BOOL v72;
  uint64_t v73;
  double *v74;
  double *v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v8 = a3;
  v9 = __N;
  v10 = 0;
  if (a2 >= 4)
  {
    v11 = 2 * a6;
    v12 = 3 * a6;
    v13 = 8 * a4;
    if (__N <= 0)
      v14 = -(-__N & 3);
    else
      v14 = __N & 3;
    v91 = a2 - 3;
    v90 = v11 - 1;
    v87 = v11 - 2;
    v15 = 8 * v9;
    v89 = (uint64_t)&a3[a4 * (v9 - 4) - 4];
    v16 = 32 * ~a4;
    v17 = a5 - 32;
    v18 = 32 * a6;
    v19 = a5 - 32 + 24 * a6;
    v20 = a5 - 32 + 16 * a6;
    v21 = a5 - 32 + 8 * a6;
    while (1)
    {
      v22 = v14;
      v23 = v8;
      v24 = v9;
      v25 = v9;
      if (v9 >= 4)
      {
        v26 = v17;
        v27 = v21;
        v28 = v20;
        v29 = v19;
        v30 = v89;
        v31 = v25;
        do
        {
          v24 = v31 - 4;
          v32 = v31 - 4;
          v7 = (float64x2_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
          v34 = *(float64x2_t *)(v30 + v15 + 16);
          v33 = (float64x2_t *)(v30 + v15 + v13);
          v35 = (float64x2_t)vtrn2q_s64((int64x2_t)v7, *(int64x2_t *)(v30 + v15));
          v36 = v33[1];
          v37 = *(float64x2_t *)(v26 + v15);
          v38 = *(float64x2_t *)(v27 + v15);
          v39 = *(float64x2_t *)(v28 + v15);
          v40 = *(float64x2_t *)(v29 + v15);
          v41 = vmlaq_laneq_f64(vmulq_n_f64(v34, v37.f64[0]), v36, v37, 1);
          v42 = vmlaq_laneq_f64(vmulq_n_f64(v34, v38.f64[0]), v36, v38, 1);
          v43 = vmlaq_laneq_f64(vmulq_n_f64(v34, v39.f64[0]), v36, v39, 1);
          v44 = vmlaq_laneq_f64(vmulq_n_f64(v34, v40.f64[0]), v36, v40, 1);
          v45 = vmlaq_n_f64(v37, v35, v37.f64[0]);
          v46 = vmlaq_n_f64(v38, v35, v38.f64[0]);
          v47 = vmlaq_n_f64(v39, v35, v39.f64[0]);
          v48 = vmlaq_n_f64(v40, v35, v40.f64[0]);
          *(_QWORD *)&v35.f64[0] = veorq_s8((int8x16_t)v35, (int8x16_t)v35).u64[0];
          v35.f64[1] = v33[1].f64[(unint64_t)v13 / 8 + 1];
          v49 = vmlaq_n_f64(vaddq_f64(v41, *(float64x2_t *)(v26 + v15 + 16)), v35, *(double *)(v26 + v15 + 16));
          v50 = v26 + v15 - 8 * (v31 - 4);
          v51 = vmlaq_n_f64(vaddq_f64(v42, *(float64x2_t *)(v27 + v15 + 16)), v35, *(double *)(v27 + v15 + 16));
          v52 = v27 + v15 - 8 * (v31 - 4);
          v53 = vmlaq_n_f64(vaddq_f64(v43, *(float64x2_t *)(v28 + v15 + 16)), v35, *(double *)(v28 + v15 + 16));
          v54 = v28 + v15 - 8 * (v31 - 4);
          v55 = vmlaq_n_f64(vaddq_f64(v44, *(float64x2_t *)(v29 + v15 + 16)), v35, *(double *)(v29 + v15 + 16));
          v56 = v29 + v15 - 8 * (v31 - 4);
          v57 = (float64x2_t *)(v30 + v15 - (v31 - 4) * v13);
          if ((((_DWORD)v31 - 4) & 1) != 0)
          {
            v58 = *v57;
            v59 = v57[1];
            v57 = (float64x2_t *)((char *)v57 + v13);
            v60 = *(double *)v50;
            v50 += 8;
            v61 = *(double *)v52;
            v52 += 8;
            v62 = *(double *)v54;
            v54 += 8;
            v63 = *(double *)v56;
            v56 += 8;
            v45 = vmlaq_n_f64(v45, v58, v60);
            v46 = vmlaq_n_f64(v46, v58, v61);
            v47 = vmlaq_n_f64(v47, v58, v62);
            v48 = vmlaq_n_f64(v48, v58, v63);
            v49 = vmlaq_n_f64(v49, v59, v60);
            v51 = vmlaq_n_f64(v51, v59, v61);
            v53 = vmlaq_n_f64(v53, v59, v62);
            v55 = vmlaq_n_f64(v55, v59, v63);
            v32 = v31 - 5;
          }
          for (; v32; v32 -= 2)
          {
            v65 = *v57;
            v66 = v57[1];
            v64 = (float64x2_t *)((char *)v57 + v13);
            v7 = *v64;
            v67 = v64[1];
            v57 = (float64x2_t *)((char *)v64 + v13);
            v68 = *(float64x2_t *)v50;
            v50 += 16;
            v69 = *(float64x2_t *)v52;
            v52 += 16;
            v70 = *(float64x2_t *)v54;
            v54 += 16;
            v71 = *(float64x2_t *)v56;
            v56 += 16;
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v65, v68.f64[0]), v7, v68, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v65, v69.f64[0]), v7, v69, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v65, v70.f64[0]), v7, v70, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v65, v71.f64[0]), v7, v71, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v66, v68.f64[0]), v67, v68, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v66, v69.f64[0]), v67, v69, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v66, v70.f64[0]), v67, v70, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v66, v71.f64[0]), v67, v71, 1);
          }
          *(float64x2_t *)v50 = vmulq_n_f64(v45, a7);
          *(float64x2_t *)(v50 + 16) = vmulq_n_f64(v49, a7);
          *(float64x2_t *)v52 = vmulq_n_f64(v46, a7);
          *(float64x2_t *)(v52 + 16) = vmulq_n_f64(v51, a7);
          *(float64x2_t *)v54 = vmulq_n_f64(v47, a7);
          *(float64x2_t *)(v54 + 16) = vmulq_n_f64(v53, a7);
          *(float64x2_t *)v56 = vmulq_n_f64(v48, a7);
          *(float64x2_t *)(v56 + 16) = vmulq_n_f64(v55, a7);
          v30 += v16;
          v29 -= 32;
          v28 -= 32;
          v27 -= 32;
          v26 -= 32;
          v72 = v31 > 7;
          v31 -= 4;
        }
        while (v72);
      }
      v73 = 8 * v24 - 8;
      v74 = (double *)(a5 + 8 * v10 * a6 + v73);
      v8 = v23;
      v75 = (double *)((char *)v23 + v73);
      v14 = v22;
      if (v22 == 3)
        break;
      if (v22 == 2)
      {
        v76 = a7;
        v9 = v25;
        v78 = a6 - 1;
        v77 = 2 * a6;
        v80 = v12 - 1;
        v79 = v90;
LABEL_19:
        *v74 = v76 * (*v74 + *(v74 - 1) * *v75);
        v74[a6] = v76 * (v74[a6] + v74[v78] * *v75);
        v74[v77] = v76 * (v74[v77] + v74[v79] * *v75);
        v74[3 * a6] = v76 * (v74[3 * a6] + v74[v80] * *v75);
        --v74;
        goto LABEL_20;
      }
      v9 = v25;
      if (v22 == 1)
      {
        v76 = a7;
        v77 = 2 * a6;
LABEL_20:
        *v74 = v76 * *v74;
        v74[a6] = v76 * v74[a6];
        v74[v77] = a7 * v74[v77];
        v74[3 * a6] = a7 * v74[3 * a6];
      }
      v10 += 4;
      v19 += v18;
      v20 += v18;
      v21 += v18;
      v17 += v18;
      if (v10 >= v91)
        goto LABEL_22;
    }
    v76 = a7;
    *v74 = a7 * (*v74 + *(v74 - 1) * v75[a4] + *(v74 - 2) * *v75);
    v79 = v90;
    v78 = a6 - 1;
    v74[a6] = a7 * (v74[a6] + v74[a6 - 1] * v75[a4] + v74[a6 - 2] * *v75);
    v77 = 2 * a6;
    v74[2 * a6] = a7 * (v74[2 * a6] + v74[v90] * v75[a4] + v74[v87] * *v75);
    v80 = v12 - 1;
    v81 = v74[3 * a6] + v74[v12 - 1] * v75[a4];
    v82 = *v75--;
    v74[3 * a6] = a7 * (v81 + v74[v12 - 2] * v82);
    --v74;
    v9 = v25;
    goto LABEL_19;
  }
LABEL_22:
  v83 = a2 - v10;
  if (a2 > v10)
  {
    v84 = (double *)(a5 + 8 * v10 * a6);
    v85 = 8 * a6;
    do
    {
      cblas_dscal(v9, a7, v84, 1);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasNoTrans, CblasUnit, v9, v8, a4, v84, 1);
      v84 = (double *)((char *)v84 + v85);
      --v83;
    }
    while (v83);
  }
}

void dtrmm_noPack_LLNN(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t v7;
  uint64_t v8;
  const double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  BOOL v78;
  uint64_t v79;
  double *v80;
  double *v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  double *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;

  v8 = a5;
  v9 = a3;
  v10 = __N;
  v11 = 0;
  if (a2 >= 4)
  {
    v12 = 2 * a6;
    v13 = 3 * a6;
    v14 = 8 * a4;
    v15 = __N & 3;
    if (__N <= 0)
      v15 = -(-__N & 3);
    v98 = 2 * a4;
    v101 = v12 - 1;
    v103 = a2 - 3;
    v96 = v13 - 2;
    v97 = v12 - 2;
    v16 = 8 * __N;
    v99 = (uint64_t)&a3[a4 * (__N - 4) - 4];
    v100 = v13 - 1;
    v17 = 32 * ~a4;
    v18 = a5 - 32;
    v19 = 32 * a6;
    v20 = a5 - 32 + 24 * a6;
    v21 = a5 - 32 + 16 * a6;
    v22 = a5 - 32 + 8 * a6;
    while (1)
    {
      v23 = v13;
      v24 = v15;
      v25 = v8;
      v26 = v9;
      v27 = v10;
      v28 = v10;
      if (v10 >= 4)
      {
        v29 = v18;
        v30 = v22;
        v31 = v21;
        v32 = v20;
        v33 = v99;
        v34 = v28;
        do
        {
          v27 = v34 - 4;
          v35 = v34 - 4;
          *(_QWORD *)&v36.f64[0] = veorq_s8((int8x16_t)v7, (int8x16_t)v7).u64[0];
          v38 = *(float64x2_t *)(v33 + v16);
          v39 = *(float64x2_t *)(v33 + v16 + 16);
          v37 = (float64x2_t *)(v33 + v16 + v14);
          v36.f64[1] = v37->f64[1];
          v41 = v37[1];
          v40 = (float64x2_t *)((char *)v37 + v14 + 16);
          v42 = *(float64x2_t *)(v29 + v16);
          v43 = *(float64x2_t *)(v30 + v16);
          v44 = *(float64x2_t *)(v31 + v16);
          v45 = *(float64x2_t *)(v32 + v16);
          v46 = vmlaq_laneq_f64(vmulq_n_f64(v38, v42.f64[0]), v36, v42, 1);
          v47 = vmlaq_laneq_f64(vmulq_n_f64(v38, v43.f64[0]), v36, v43, 1);
          v48 = vmlaq_laneq_f64(vmulq_n_f64(v38, v44.f64[0]), v36, v44, 1);
          v49 = vmlaq_laneq_f64(vmulq_n_f64(v38, v45.f64[0]), v36, v45, 1);
          v50 = vmlaq_laneq_f64(vmulq_n_f64(v39, v42.f64[0]), v41, v42, 1);
          v51 = vmlaq_laneq_f64(vmulq_n_f64(v39, v43.f64[0]), v41, v43, 1);
          v52 = vmlaq_laneq_f64(vmulq_n_f64(v39, v44.f64[0]), v41, v44, 1);
          v53 = vmlaq_laneq_f64(vmulq_n_f64(v39, v45.f64[0]), v41, v45, 1);
          v7 = (float64x2_t)veorq_s8((int8x16_t)v36, (int8x16_t)v36);
          v54 = (float64x2_t)vtrn2q_s64((int64x2_t)v7, *(int64x2_t *)((char *)v40 + v14));
          v55 = v29 + v16 - 8 * (v34 - 4);
          v56 = v30 + v16 - 8 * (v34 - 4);
          v57 = v31 + v16 - 8 * (v34 - 4);
          v58 = v32 + v16 - 8 * (v34 - 4);
          v59 = vmlaq_laneq_f64(vmlaq_n_f64(v50, *v40, *(double *)(v29 + v16 + 16)), v54, *(float64x2_t *)(v29 + v16 + 16), 1);
          v60 = vmlaq_laneq_f64(vmlaq_n_f64(v51, *v40, *(double *)(v30 + v16 + 16)), v54, *(float64x2_t *)(v30 + v16 + 16), 1);
          v61 = vmlaq_laneq_f64(vmlaq_n_f64(v52, *v40, *(double *)(v31 + v16 + 16)), v54, *(float64x2_t *)(v31 + v16 + 16), 1);
          v62 = vmlaq_laneq_f64(vmlaq_n_f64(v53, *v40, *(double *)(v32 + v16 + 16)), v54, *(float64x2_t *)(v32 + v16 + 16), 1);
          v63 = (float64x2_t *)(v33 + v16 - (v34 - 4) * v14);
          if ((((_DWORD)v34 - 4) & 1) != 0)
          {
            v64 = *v63;
            v65 = v63[1];
            v63 = (float64x2_t *)((char *)v63 + v14);
            v66 = *(double *)v55;
            v55 += 8;
            v67 = *(double *)v56;
            v56 += 8;
            v68 = *(double *)v57;
            v57 += 8;
            v69 = *(double *)v58;
            v58 += 8;
            v46 = vmlaq_n_f64(v46, v64, v66);
            v47 = vmlaq_n_f64(v47, v64, v67);
            v48 = vmlaq_n_f64(v48, v64, v68);
            v49 = vmlaq_n_f64(v49, v64, v69);
            v59 = vmlaq_n_f64(v59, v65, v66);
            v60 = vmlaq_n_f64(v60, v65, v67);
            v61 = vmlaq_n_f64(v61, v65, v68);
            v62 = vmlaq_n_f64(v62, v65, v69);
            v35 = v34 - 5;
          }
          for (; v35; v35 -= 2)
          {
            v71 = *v63;
            v72 = v63[1];
            v70 = (float64x2_t *)((char *)v63 + v14);
            v7 = *v70;
            v73 = v70[1];
            v63 = (float64x2_t *)((char *)v70 + v14);
            v74 = *(float64x2_t *)v55;
            v55 += 16;
            v75 = *(float64x2_t *)v56;
            v56 += 16;
            v76 = *(float64x2_t *)v57;
            v57 += 16;
            v77 = *(float64x2_t *)v58;
            v58 += 16;
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v71, v74.f64[0]), v7, v74, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v71, v75.f64[0]), v7, v75, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v71, v76.f64[0]), v7, v76, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v71, v77.f64[0]), v7, v77, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, v74.f64[0]), v73, v74, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v72, v75.f64[0]), v73, v75, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v76.f64[0]), v73, v76, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v72, v77.f64[0]), v73, v77, 1);
          }
          *(float64x2_t *)v55 = vmulq_n_f64(v46, a7);
          *(float64x2_t *)(v55 + 16) = vmulq_n_f64(v59, a7);
          *(float64x2_t *)v56 = vmulq_n_f64(v47, a7);
          *(float64x2_t *)(v56 + 16) = vmulq_n_f64(v60, a7);
          *(float64x2_t *)v57 = vmulq_n_f64(v48, a7);
          *(float64x2_t *)(v57 + 16) = vmulq_n_f64(v61, a7);
          *(float64x2_t *)v58 = vmulq_n_f64(v49, a7);
          *(float64x2_t *)(v58 + 16) = vmulq_n_f64(v62, a7);
          v33 += v17;
          v32 -= 32;
          v31 -= 32;
          v30 -= 32;
          v29 -= 32;
          v78 = v34 > 7;
          v34 -= 4;
        }
        while (v78);
      }
      v8 = v25;
      v79 = 8 * v27 - 8;
      v80 = (double *)(v25 + 8 * v11 * a6 + v79);
      v9 = v26;
      v81 = (double *)((char *)v26 + v79);
      v15 = v24;
      if (v24 == 3)
        break;
      if (v24 == 2)
      {
        v82 = a7;
        v84 = a4;
        v83 = 2 * a6;
        v10 = v28;
        v86 = v101;
        v85 = a6 - 1;
        v87 = v100;
        v13 = v23;
LABEL_18:
        *v80 = v82 * (*(v80 - 1) * *v81 + *v80 * v81[v84]);
        v80[a6] = v82 * (v80[v85] * *v81 + v80[a6] * v81[v84]);
        v80[v83] = v82 * (v80[v86] * *v81 + v80[v83] * v81[v84]);
        v90 = v81[v84];
        v91 = *v81--;
        v80[v13] = v82 * (v80[v87] * v91 + v80[v13] * v90);
        --v80;
        goto LABEL_19;
      }
      v10 = v28;
      v13 = v23;
      if (v24 == 1)
      {
        v82 = a7;
        v83 = 2 * a6;
LABEL_19:
        *v80 = v82 * (*v80 * *v81);
        v80[a6] = v82 * (v80[a6] * *v81);
        v80[v83] = a7 * (v80[v83] * *v81);
        v80[v13] = a7 * (v80[v13] * *v81);
      }
      v11 += 4;
      v20 += v19;
      v21 += v19;
      v22 += v19;
      v18 += v19;
      if (v11 >= v103)
        goto LABEL_21;
    }
    v82 = a7;
    v85 = a6 - 1;
    v84 = a4;
    *v80 = a7 * (*(v80 - 1) * v81[a4] + *v80 * v81[v98] + *(v80 - 2) * *v81);
    v80[a6] = a7 * (v80[a6 - 1] * v81[a4] + v80[a6] * v81[v98] + v80[a6 - 2] * *v81);
    v83 = 2 * a6;
    v86 = v101;
    v80[2 * a6] = a7 * (v80[v101] * v81[a4] + v80[2 * a6] * v81[v98] + v80[v97] * *v81);
    v13 = v23;
    v87 = v100;
    v88 = v80[v100] * v81[a4] + v80[v23] * v81[v98];
    v89 = *v81--;
    v80[v23] = a7 * (v88 + v80[v96] * v89);
    --v80;
    v10 = v28;
    goto LABEL_18;
  }
LABEL_21:
  v92 = a2 - v11;
  if (a2 > v11)
  {
    v93 = (double *)(v8 + 8 * v11 * a6);
    v94 = 8 * a6;
    do
    {
      cblas_dscal(v10, a7, v93, 1);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasNoTrans, CblasNonUnit, v10, v9, a4, v93, 1);
      v93 = (double *)((char *)v93 + v94);
      --v92;
    }
    while (v92);
  }
}

void dtrmm_noPack_LLTU(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int64x2_t a8)
{
  float64x2_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float64_t *v29;
  uint64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  unint64_t *v36;
  unint64_t *v37;
  int64x2_t v38;
  float64_t *v39;
  double *v40;
  float64x2_t v41;
  double *v42;
  float64x2_t v43;
  double *v44;
  float64x2_t v45;
  double *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  float64x2_t *v75;
  float64x2_t *v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double *v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v9 = a4;
  v11 = __N;
  v12 = 0;
  if (a2 >= 4)
  {
    v95 = a2 - 3;
    v13 = __N - 3;
    v14 = 3 * a6;
    if (__N <= 0)
      v15 = -(-__N & 3);
    else
      v15 = __N & 3;
    v94 = v15;
    v88 = a4 + 1;
    v92 = 24 * a4 + 32;
    v16 = 32 * a4 + 32;
    v90 = 8 * a4 + 16;
    v91 = 16 * a4 + 24;
    v89 = 8 * __N;
    v17 = 32 * a6;
    v18 = a5 + 24 * a6;
    v19 = a5;
    v20 = a5 + 16 * a6;
    v21 = a5 + 8 * a6;
    v96 = a5;
    while (1)
    {
      if (v11 < 4)
      {
        v23 = 0;
      }
      else
      {
        v22 = 0;
        v23 = 0;
        v24 = 8;
        v26 = v89;
        v25 = v90;
        v27 = v91;
        v28 = v92;
        do
        {
          v29 = (float64_t *)((char *)a3 + v28);
          v30 = v11 - 4;
          v31 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v31.f64[0] = *(const double *)((char *)a3 + v24);
          v32 = vmlaq_laneq_f64(*(float64x2_t *)(v19 + v22), v31, *(float64x2_t *)(v19 + v22), 1);
          v33 = vmlaq_laneq_f64(*(float64x2_t *)(v21 + v22), v31, *(float64x2_t *)(v21 + v22), 1);
          v34 = vmlaq_laneq_f64(*(float64x2_t *)(v20 + v22), v31, *(float64x2_t *)(v20 + v22), 1);
          v35 = vmlaq_laneq_f64(*(float64x2_t *)(v18 + v22), v31, *(float64x2_t *)(v18 + v22), 1);
          v8 = (float64x2_t)veorq_s8((int8x16_t)v8, (int8x16_t)v8);
          a8 = *(int64x2_t *)((char *)a3 + v24 + 8);
          v36 = (unint64_t *)((char *)a3 + v24 + 24);
          v38 = *(int64x2_t *)((char *)a3 + v25);
          v37 = (unint64_t *)((char *)a3 + v25 + 16);
          v8.f64[0] = *(const double *)((char *)a3 + v27);
          v39 = (float64_t *)((char *)a3 + v27 + 8);
          v41 = *(float64x2_t *)(v19 + v22 + 16);
          v40 = (double *)(v19 + v22 + 32);
          v43 = *(float64x2_t *)(v21 + v22 + 16);
          v42 = (double *)(v21 + v22 + 32);
          v45 = *(float64x2_t *)(v20 + v22 + 16);
          v44 = (double *)(v20 + v22 + 32);
          v47 = *(float64x2_t *)(v18 + v22 + 16);
          v46 = (double *)(v18 + v22 + 32);
          v48 = (float64x2_t)vtrn1q_s64(a8, v38);
          v49 = (float64x2_t)vtrn2q_s64(a8, v38);
          v50 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v48, v41.f64[0]), v49, v41, 1);
          v51 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v48, v43.f64[0]), v49, v43, 1);
          v52 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v48, v45.f64[0]), v49, v45, 1);
          v53 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v48, v47.f64[0]), v49, v47, 1);
          v54 = vmlaq_laneq_f64(v41, v8, v41, 1);
          v55 = vmlaq_laneq_f64(v43, v8, v43, 1);
          v56 = vmlaq_laneq_f64(v45, v8, v45, 1);
          v57 = vmlaq_laneq_f64(v47, v8, v47, 1);
          if ((((_DWORD)v11 - 4) & 1) != 0)
          {
            a8.i64[0] = *v36;
            v36 = (unint64_t *)((char *)a3 + v24 + 32);
            a8.i64[1] = *v37;
            v37 = (unint64_t *)((char *)a3 + v25 + 24);
            v58.f64[0] = *v39;
            v39 = (float64_t *)((char *)a3 + v27 + 16);
            v58.f64[1] = *v29++;
            v59 = *v40;
            v40 = (double *)(v19 + v22 + 40);
            v60 = *v42;
            v42 = (double *)(v21 + v22 + 40);
            v61 = *v44;
            v44 = (double *)(v20 + v22 + 40);
            v62 = *v46;
            v46 = (double *)(v18 + v22 + 40);
            v50 = vmlaq_n_f64(v50, (float64x2_t)a8, v59);
            v51 = vmlaq_n_f64(v51, (float64x2_t)a8, v60);
            v52 = vmlaq_n_f64(v52, (float64x2_t)a8, v61);
            v53 = vmlaq_n_f64(v53, (float64x2_t)a8, v62);
            v54 = vmlaq_n_f64(v54, v58, v59);
            v55 = vmlaq_n_f64(v55, v58, v60);
            v56 = vmlaq_n_f64(v56, v58, v61);
            v57 = vmlaq_n_f64(v57, v58, v62);
            v30 = v11 - 5;
          }
          for (; v30; v30 -= 2)
          {
            v63 = *(int64x2_t *)v36;
            v36 += 2;
            v64 = *(int64x2_t *)v37;
            v37 += 2;
            v8 = *(float64x2_t *)v39;
            v39 += 2;
            v65 = *(int64x2_t *)v29;
            v29 += 2;
            v66 = *(float64x2_t *)v40;
            v40 += 2;
            v67 = *(float64x2_t *)v42;
            v42 += 2;
            v68 = *(float64x2_t *)v44;
            v44 += 2;
            v69 = *(float64x2_t *)v46;
            v46 += 2;
            v70 = (float64x2_t)vtrn1q_s64(v63, v64);
            v71 = (float64x2_t)vtrn2q_s64(v63, v64);
            a8 = vtrn1q_s64((int64x2_t)v8, v65);
            v72 = (float64x2_t)vtrn2q_s64((int64x2_t)v8, v65);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v70, v66.f64[0]), v71, v66, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v70, v67.f64[0]), v71, v67, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v70, v68.f64[0]), v71, v68, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v70, v69.f64[0]), v71, v69, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, (float64x2_t)a8, v66.f64[0]), v72, v66, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, (float64x2_t)a8, v67.f64[0]), v72, v67, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, (float64x2_t)a8, v68.f64[0]), v72, v68, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, (float64x2_t)a8, v69.f64[0]), v72, v69, 1);
          }
          v73 = (float64x2_t *)((char *)v40 - v26);
          v74 = (float64x2_t *)((char *)v42 - v26);
          v75 = (float64x2_t *)((char *)v44 - v26);
          v76 = (float64x2_t *)((char *)v46 - v26);
          *v73 = vmulq_n_f64(v50, a7);
          v73[1] = vmulq_n_f64(v54, a7);
          *v74 = vmulq_n_f64(v51, a7);
          v74[1] = vmulq_n_f64(v55, a7);
          *v75 = vmulq_n_f64(v52, a7);
          v75[1] = vmulq_n_f64(v56, a7);
          *v76 = vmulq_n_f64(v53, a7);
          v76[1] = vmulq_n_f64(v57, a7);
          v23 += 4;
          v28 += v16;
          v27 += v16;
          v25 += v16;
          v26 -= 32;
          v11 -= 4;
          v22 += 32;
          v24 += v16;
        }
        while (v23 < v13);
      }
      a5 = v96;
      v9 = a4;
      v77 = (double *)(v96 + 8 * v12 * a6 + 8 * v23);
      v78 = (uint64_t)&a3[v23 + v23 * a4];
      if (v94 == 3)
        break;
      if (v94 == 2)
      {
        v80 = a7;
        v79 = 2 * a6;
        v11 = __N;
        v82 = (2 * a6) | 1;
        v81 = a6 + 1;
        v83 = v14 + 1;
LABEL_21:
        *v77 = v80 * (*v77 + v77[1] * *(double *)(v78 + 8));
        v77[a6] = v80 * (v77[a6] + v77[v81] * *(double *)(v78 + 8));
        v77[v79] = v80 * (v77[v79] + v77[v82] * *(double *)(v78 + 8));
        v77[3 * a6] = v80 * (v77[3 * a6] + v77[v83] * *(double *)(v78 + 8));
        ++v77;
        goto LABEL_22;
      }
      v79 = 2 * a6;
      v11 = __N;
      if (v94 == 1)
      {
        v80 = a7;
LABEL_22:
        *v77 = v80 * *v77;
        v77[a6] = v80 * v77[a6];
        v77[v79] = a7 * v77[v79];
        *(double *)a8.i64 = a7 * v77[3 * a6];
        v77[3 * a6] = *(double *)a8.i64;
      }
      v12 += 4;
      v18 += v17;
      v20 += v17;
      v21 += v17;
      v19 += v17;
      if (v12 >= v95)
        goto LABEL_24;
    }
    v80 = a7;
    *v77 = a7 * (*v77 + v77[1] * *(double *)(v78 + 8) + v77[2] * *(double *)(v78 + 16));
    v82 = (2 * a6) | 1;
    v81 = a6 + 1;
    v77[a6] = a7 * (v77[a6] + v77[a6 + 1] * *(double *)(v78 + 8) + v77[a6 + 2] * *(double *)(v78 + 16));
    v79 = 2 * a6;
    v11 = __N;
    v77[2 * a6] = a7 * (v77[2 * a6] + v77[v82] * *(double *)(v78 + 8) + v77[2 * a6 + 2] * *(double *)(v78 + 16));
    v83 = v14 + 1;
    v77[3 * a6] = a7 * (v77[3 * a6] + v77[v14 + 1] * *(double *)(v78 + 8) + v77[v14 + 2] * *(double *)(v78 + 16));
    v78 += 8 * v88;
    ++v77;
    goto LABEL_21;
  }
LABEL_24:
  v84 = a2 - v12;
  if (a2 > v12)
  {
    v85 = (double *)(a5 + 8 * v12 * a6);
    v86 = 8 * a6;
    do
    {
      cblas_dscal(v11, a7, v85, 1);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasTrans, CblasUnit, v11, a3, v9, v85, 1);
      v85 = (double *)((char *)v85 + v86);
      --v84;
    }
    while (v84);
  }
}

void dtrmm_noPack_LLTN(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, int64x2_t a9)
{
  int64x2_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  int64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64_t *v40;
  int64x2_t v41;
  float64_t *v42;
  int64x2_t v43;
  unint64_t *v44;
  int64x2_t v45;
  unint64_t *v46;
  double *v47;
  float64x2_t v48;
  double *v49;
  float64x2_t v50;
  double *v51;
  float64x2_t v52;
  double *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  double *v85;
  double *v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v10 = a4;
  v12 = __N;
  v13 = 0;
  if (a2 >= 4)
  {
    v103 = a2 - 3;
    v14 = __N - 3;
    v15 = 3 * a6;
    v16 = 8 * a4;
    if (__N <= 0)
      v17 = -(-__N & 3);
    else
      v17 = __N & 3;
    v102 = v17;
    v100 = a4 + 1;
    v18 = 32 * a4 + 32;
    v98 = 16 * a4 + 16;
    v99 = 24 * a4 + 24;
    v97 = 8 * __N;
    v19 = 32 * a6;
    v20 = a5 + 24 * a6;
    v21 = a5;
    v22 = a5 + 16 * a6;
    v23 = a5 + 8 * a6;
    v104 = a5;
    while (1)
    {
      if (v12 < 4)
      {
        v26 = 0;
      }
      else
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v28 = v97;
        v27 = v16 + 8;
        v29 = v98;
        v30 = v99;
        do
        {
          v31 = v12 - 4;
          v32.i64[0] = veorq_s8((int8x16_t)a9, (int8x16_t)a9).u64[0];
          v33 = *(int64x2_t *)((char *)a3 + v24);
          *(double *)&v32.i64[1] = *(const double *)((char *)a3 + v27);
          v34 = (float64x2_t)vtrn1q_s64(v33, v32);
          v35 = (float64x2_t)vtrn2q_s64(v33, v32);
          v36 = vmlaq_n_f64(vmulq_laneq_f64(v35, *(float64x2_t *)(v21 + v25), 1), v34, *(double *)(v21 + v25));
          v37 = vmlaq_n_f64(vmulq_laneq_f64(v35, *(float64x2_t *)(v23 + v25), 1), v34, *(double *)(v23 + v25));
          v38 = vmlaq_n_f64(vmulq_laneq_f64(v35, *(float64x2_t *)(v22 + v25), 1), v34, *(double *)(v22 + v25));
          v39 = vmlaq_n_f64(vmulq_laneq_f64(v35, *(float64x2_t *)(v20 + v25), 1), v34, *(double *)(v20 + v25));
          v9.i64[0] = veorq_s8((int8x16_t)v9, (int8x16_t)v9).u64[0];
          v41 = *(int64x2_t *)((char *)a3 + v24 + 16);
          v40 = (float64_t *)((char *)a3 + v24 + 32);
          v43 = *(int64x2_t *)((char *)a3 + v27 + 8);
          v42 = (float64_t *)((char *)a3 + v27 + 24);
          v45 = *(int64x2_t *)((char *)a3 + v29);
          v44 = (unint64_t *)((char *)a3 + v29 + 16);
          *(double *)&v9.i64[1] = *(const double *)((char *)a3 + v30);
          v46 = (unint64_t *)((char *)a3 + v30 + 8);
          v48 = *(float64x2_t *)(v21 + v25 + 16);
          v47 = (double *)(v21 + v25 + 32);
          v50 = *(float64x2_t *)(v23 + v25 + 16);
          v49 = (double *)(v23 + v25 + 32);
          v52 = *(float64x2_t *)(v22 + v25 + 16);
          v51 = (double *)(v22 + v25 + 32);
          v54 = *(float64x2_t *)(v20 + v25 + 16);
          v53 = (double *)(v20 + v25 + 32);
          v55 = (float64x2_t)vtrn1q_s64(v41, v43);
          v56 = (float64x2_t)vtrn2q_s64(v41, v43);
          v57 = (float64x2_t)vtrn1q_s64(v45, v9);
          a9 = vtrn2q_s64(v45, v9);
          v58 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v55, v48.f64[0]), v56, v48, 1);
          v59 = vmlaq_laneq_f64(vmlaq_n_f64(v37, v55, v50.f64[0]), v56, v50, 1);
          v60 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v55, v52.f64[0]), v56, v52, 1);
          v61 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v55, v54.f64[0]), v56, v54, 1);
          v62 = vmlaq_laneq_f64(vmulq_n_f64(v57, v48.f64[0]), (float64x2_t)a9, v48, 1);
          v63 = vmlaq_laneq_f64(vmulq_n_f64(v57, v50.f64[0]), (float64x2_t)a9, v50, 1);
          v64 = vmlaq_laneq_f64(vmulq_n_f64(v57, v52.f64[0]), (float64x2_t)a9, v52, 1);
          v65 = vmlaq_laneq_f64(vmulq_n_f64(v57, v54.f64[0]), (float64x2_t)a9, v54, 1);
          if ((((_DWORD)v12 - 4) & 1) != 0)
          {
            v66.f64[0] = *v40;
            v40 = (float64_t *)((char *)a3 + v24 + 40);
            v66.f64[1] = *v42;
            v42 = (float64_t *)((char *)a3 + v27 + 32);
            a9.i64[0] = *v44;
            v44 = (unint64_t *)((char *)a3 + v29 + 24);
            a9.i64[1] = *v46;
            v46 = (unint64_t *)((char *)a3 + v30 + 16);
            v67 = *v47;
            v47 = (double *)(v21 + v25 + 40);
            v68 = *v49;
            v49 = (double *)(v23 + v25 + 40);
            v69 = *v51;
            v51 = (double *)(v22 + v25 + 40);
            v70 = *v53;
            v53 = (double *)(v20 + v25 + 40);
            v58 = vmlaq_n_f64(v58, v66, v67);
            v59 = vmlaq_n_f64(v59, v66, v68);
            v60 = vmlaq_n_f64(v60, v66, v69);
            v61 = vmlaq_n_f64(v61, v66, v70);
            v62 = vmlaq_n_f64(v62, (float64x2_t)a9, v67);
            v63 = vmlaq_n_f64(v63, (float64x2_t)a9, v68);
            v64 = vmlaq_n_f64(v64, (float64x2_t)a9, v69);
            v65 = vmlaq_n_f64(v65, (float64x2_t)a9, v70);
            v31 = v12 - 5;
          }
          for (; v31; v31 -= 2)
          {
            v71 = *(int64x2_t *)v40;
            v40 += 2;
            v72 = *(int64x2_t *)v42;
            v42 += 2;
            v73 = *(int64x2_t *)v44;
            v44 += 2;
            v9 = *(int64x2_t *)v46;
            v46 += 2;
            v74 = *(float64x2_t *)v47;
            v47 += 2;
            v75 = *(float64x2_t *)v49;
            v49 += 2;
            v76 = *(float64x2_t *)v51;
            v51 += 2;
            v77 = *(float64x2_t *)v53;
            v53 += 2;
            v78 = (float64x2_t)vtrn1q_s64(v71, v72);
            v79 = (float64x2_t)vtrn2q_s64(v71, v72);
            v80 = (float64x2_t)vtrn1q_s64(v73, v9);
            a9 = vtrn2q_s64(v73, v9);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v78, v74.f64[0]), v79, v74, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v78, v75.f64[0]), v79, v75, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v78, v76.f64[0]), v79, v76, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v78, v77.f64[0]), v79, v77, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v80, v74.f64[0]), (float64x2_t)a9, v74, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v80, v75.f64[0]), (float64x2_t)a9, v75, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v80, v76.f64[0]), (float64x2_t)a9, v76, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v80, v77.f64[0]), (float64x2_t)a9, v77, 1);
          }
          v81 = (float64x2_t *)((char *)v47 - v28);
          v82 = (float64x2_t *)((char *)v49 - v28);
          v83 = (float64x2_t *)((char *)v51 - v28);
          v84 = (float64x2_t *)((char *)v53 - v28);
          *v81 = vmulq_n_f64(v58, a7);
          v81[1] = vmulq_n_f64(v62, a7);
          *v82 = vmulq_n_f64(v59, a7);
          v82[1] = vmulq_n_f64(v63, a7);
          *v83 = vmulq_n_f64(v60, a7);
          v83[1] = vmulq_n_f64(v64, a7);
          *v84 = vmulq_n_f64(v61, a7);
          v84[1] = vmulq_n_f64(v65, a7);
          v26 += 4;
          v30 += v18;
          v29 += v18;
          v27 += v18;
          v28 -= 32;
          v12 -= 4;
          v25 += 32;
          v24 += v18;
        }
        while (v26 < v14);
      }
      a5 = v104;
      v10 = a4;
      v85 = (double *)(v104 + 8 * v13 * a6 + 8 * v26);
      v86 = (double *)&a3[v26 + v26 * a4];
      if (v102 == 3)
        break;
      if (v102 == 2)
      {
        v88 = a7;
        v87 = 2 * a6;
        v12 = __N;
        v90 = (2 * a6) | 1;
        v89 = a6 + 1;
        v92 = v100;
        v91 = v15 + 1;
LABEL_21:
        *v85 = v88 * (*v85 * *v86 + v85[1] * v86[1]);
        v85[a6] = v88 * (v85[a6] * *v86 + v85[v89] * v86[1]);
        v85[v87] = v88 * (v85[v87] * *v86 + v85[v90] * v86[1]);
        v85[3 * a6] = v88 * (v85[3 * a6] * *v86 + v85[v91] * v86[1]);
        v86 += v92;
        ++v85;
        goto LABEL_22;
      }
      v87 = 2 * a6;
      v12 = __N;
      if (v102 == 1)
      {
        v88 = a7;
LABEL_22:
        *v85 = v88 * (*v85 * *v86);
        v85[a6] = v88 * (v85[a6] * *v86);
        v85[v87] = a7 * (v85[v87] * *v86);
        *(double *)a9.i64 = a7;
        v85[3 * a6] = a7 * (v85[3 * a6] * *v86);
      }
      v13 += 4;
      v20 += v19;
      v22 += v19;
      v23 += v19;
      v21 += v19;
      if (v13 >= v103)
        goto LABEL_24;
    }
    v88 = a7;
    *v85 = a7 * (v85[1] * v86[1] + v85[2] * v86[2] + *v85 * *v86);
    v90 = (2 * a6) | 1;
    v89 = a6 + 1;
    v85[a6] = a7 * (v85[a6 + 1] * v86[1] + v85[a6 + 2] * v86[2] + v85[a6] * *v86);
    v87 = 2 * a6;
    v12 = __N;
    v85[2 * a6] = a7 * (v85[v90] * v86[1] + v85[2 * a6 + 2] * v86[2] + v85[2 * a6] * *v86);
    v92 = v100;
    v91 = v15 + 1;
    v85[3 * a6] = a7 * (v85[v15 + 1] * v86[1] + v85[v15 + 2] * v86[2] + v85[3 * a6] * *v86);
    v86 += v100;
    ++v85;
    goto LABEL_21;
  }
LABEL_24:
  v93 = a2 - v13;
  if (a2 > v13)
  {
    v94 = (double *)(a5 + 8 * v13 * a6);
    v95 = 8 * a6;
    do
    {
      cblas_dscal(v12, a7, v94, 1);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasTrans, CblasNonUnit, v12, a3, v10, v94, 1);
      v94 = (double *)((char *)v94 + v95);
      --v93;
    }
    while (v93);
  }
}

void cblas_dtrsm_sequential(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, int a17, char *a18, int a19)
{
  int v20;
  int v21;
  int v25;
  char *v28;
  char *v29;
  int v30;
  int v32;
  int v33;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char vars0;

  v20 = a7;
  v21 = a6;
  v25 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v30 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a17 < (int)a7 || a17 <= 0)
      {
        v40 = a17;
        v42 = a7;
        v29 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v43 = a2;
        v40 = 142;
        v42 = 141;
        v29 = "SIDE must be %d or %d, but is set to %d";
        v36 = 2;
        goto LABEL_41;
      }
      if (a17 < (int)a6 || a17 <= 0)
      {
        v40 = a17;
        v42 = a6;
        v29 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v36 = 10;
LABEL_41:
        v33 = cblas_errprn(v36, 2000, v29, v40, v42, v43);
        goto LABEL_43;
      }
    }
    v33 = 2000;
LABEL_43:
    if (a19 >= v20 && a19 > 0)
      goto LABEL_47;
    v30 = cblas_errprn(12, v33, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v33 = v30;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a17 >= (int)a7 && a17 > 0)
      goto LABEL_24;
    v39 = a17;
    v41 = a7;
    v28 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v41 = 141;
      v43 = a2;
      v39 = 142;
      v28 = "SIDE must be %d or %d, but is set to %d";
      v32 = 2;
      goto LABEL_26;
    }
    if (a17 >= (int)a6 && a17 > 0)
    {
LABEL_24:
      v33 = 2000;
      goto LABEL_27;
    }
    v39 = a17;
    v41 = a6;
    v28 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v32 = 10;
LABEL_26:
  v33 = cblas_errprn(v32, 2000, v28, v39, v41, v43);
LABEL_27:
  if (a19 < v21 || a19 <= 0)
  {
    v30 = cblas_errprn(12, v33, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v33 = cblas_errprn(3, v33, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v33 = cblas_errprn(4, v33, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v33 = cblas_errprn(6, v33, "M cannot be less than zero; it is set to %d.", v21);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v33 = cblas_errprn(5, v33, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v21 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v20 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v33 = cblas_errprn(7, v33, "N cannot be less than zero; it is set to %d.", v20);
LABEL_54:
  if (v33 == 2000)
  {
    if (a1 == 102)
    {
      APL_seq_dtrsm(v25, a3, a4, a5, v21, v20, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, a19, 0,
        0,
        1,
        (uint64_t)a8,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        vars0);
    }
    else
    {
      if (v25 == 141)
        v37 = 142;
      else
        v37 = 141;
      if (a3 == 121)
        v38 = 122;
      else
        v38 = 121;
      APL_seq_dtrsm(v37, v38, a4, a5, v20, v21, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, a19, 0,
        0,
        1,
        (uint64_t)a8,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        vars0);
    }
  }
  else
  {
    cblas_xerbla(v33, "cblas_dtrsm", "");
  }
}

uint64_t Accelerate_AR_dorgql(int *a1, _DWORD *a2, int *a3, __CLPK_doublereal *a4, int *a5, uint64_t a6, double *a7, int *a8, int *a9)
{
  __CLPK_integer v9;
  int v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  unsigned int v16;
  __CLPK_integer *v17;
  int v18;
  double *v20;
  int v22;
  double v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  __CLPK_doublereal *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __CLPK_doublereal *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  __CLPK_integer v50;
  int v51;
  size_t v52;
  int v53;
  BOOL v54;
  int v55;
  double *v56;
  __CLPK_doublereal *v57;
  __CLPK_doublereal *v58;
  _DWORD *v60;
  int *v62;
  __CLPK_integer *v64;
  int v65;
  size_t v67;
  int v68;
  double *v69;
  uint64_t v70;
  int v71;
  __CLPK_integer v72;
  int v73;
  int v74;
  int v75[3];

  v70 = 0;
  v9 = *a5;
  *a9 = 0;
  v10 = *a1;
  if (*a1 < 0)
  {
    v13 = 1;
    v14 = -1;
    goto LABEL_12;
  }
  v11 = a2;
  v12 = *a2;
  v13 = 2;
  v14 = -2;
  if ((*a2 & 0x80000000) != 0)
    goto LABEL_12;
  if (v12 > v10)
    goto LABEL_12;
  v15 = a3;
  v16 = *a3;
  v13 = 3;
  v14 = -3;
  if (*a3 < 0 || (int)v16 > v12)
    goto LABEL_12;
  v17 = a5;
  if (v10 <= 1)
    v18 = 1;
  else
    v18 = *a1;
  if (*a5 < v18)
  {
    v13 = 5;
    v14 = -5;
LABEL_12:
    *a9 = v14;
    v75[0] = v13;
    xerbla_();
    return 0;
  }
  v20 = a7;
  v22 = *a8;
  v23 = (double)(32 * v12);
  if (v12)
    v24 = 32;
  else
    v24 = 1;
  v65 = v24;
  if (!v12)
    v23 = 1.0;
  *a7 = v23;
  if (v12 <= 1)
    v25 = 1;
  else
    v25 = v12;
  if (v22 < v25 && v22 != -1)
  {
    v13 = 8;
    v14 = -8;
    goto LABEL_12;
  }
  if (v22 != -1 && v12)
  {
    v57 = a4;
    if (v65 >= v16)
    {
      v27 = 0;
    }
    else
    {
      if (v16 >= 0x81)
      {
        LODWORD(v70) = v12;
        v55 = 32 * v12;
        if (v22 < 32 * v12)
        {
          v65 = v22 / v12;
          if (v22 / v12 <= 1)
          {
            v26 = 0;
LABEL_50:
            v75[0] = v10 - v26;
            v74 = v12 - v26;
            v73 = v16 - v26;
            Accelerate_AR_dorg2l(v75, &v74, &v73, a4, v17, a6, v20, (int *)&v70 + 1);
            if (v26 >= 1)
            {
              v34 = *v15;
              v74 = v65;
              v75[0] = v34;
              v35 = v34 - v26 + 1;
              v36 = v35 >= v34;
              if (v65 >= 0)
                v36 = v35 <= v34;
              if (v36)
              {
                v58 = &v57[~v9];
                v37 = a6 - 8;
                v56 = v20 - 1;
                v38 = *v11;
                v69 = v20;
                v62 = v15;
                v64 = v17;
                v60 = v11;
                do
                {
                  if (v65 >= v34 - v35 + 1)
                    v39 = v34 - v35 + 1;
                  else
                    v39 = v65;
                  v71 = v39;
                  v72 = v34 - v35 + 1;
                  v40 = v38 - v34 + v35;
                  v41 = *a1;
                  if (v40 <= 1)
                  {
                    v47 = v38;
                    v43 = v35 - 1;
                    v46 = v35;
                    v45 = &v57[~v9];
                  }
                  else
                  {
                    v73 = v35 + ~v34 + v39 + v41;
                    Accelerate_AR_dlarft((uint64_t)"Backward", (uint64_t)"Columnwise", &v73, &v71, (uint64_t)&v58[v40 * v9 + 1], v17, v37 + 8 * v35, v69, (int *)&v70);
                    v42 = *v15;
                    v43 = v35 - 1;
                    v73 = v35 - 1 + *a1 - *v15 + v71;
                    v44 = *v11 - v42 + v35;
                    v72 = v44 - 1;
                    Accelerate_AR_dlarfb((uint64_t)"Left", "No transpose", (uint64_t)"Backward", (uint64_t)"Columnwise", &v73, &v72, &v71, &v58[v44 * v9 + 1], v17, (int)v69, (int *)&v70, v57, v17, (uint64_t)&v56[v71 + 1], (int *)&v70);
                    v37 = a6 - 8;
                    v45 = &v57[~v9];
                    v46 = v35;
                    v20 = v69;
                    v41 = *a1;
                    v34 = *v15;
                    v39 = v71;
                    v47 = *v11;
                  }
                  v73 = v43 + v41 - v34 + v39;
                  Accelerate_AR_dorg2l(&v73, &v71, &v71, &v45[(v35 - v34 + v47) * v9 + 1], v17, v37 + 8 * v46, v20, (int *)&v70 + 1);
                  v34 = *v15;
                  v68 = *v11;
                  v48 = *v11 - *v15 + v35;
                  v49 = v48 + v71;
                  v73 = v48 + v71 - 1;
                  if (v71 >= 1)
                  {
                    v50 = *a1;
                    v72 = v50;
                    v51 = v35 - v34 + v71 + v50;
                    v52 = 8 * (v34 - (v35 + v71)) + 8;
                    v53 = v35 + v71 + v50 + v9 * v48 - v34;
                    do
                    {
                      if (v51 <= v50)
                        bzero(&v57[~v9 + v53], v52);
                      ++v48;
                      v53 += v9;
                    }
                    while (v48 < v49);
                  }
                  v35 += v74;
                  if (v74 >= 0)
                    v54 = v35 <= v75[0];
                  else
                    v54 = v35 >= v75[0];
                  v20 = v69;
                  v15 = v62;
                  v17 = v64;
                  v11 = v60;
                  v37 = a6 - 8;
                  v38 = v68;
                }
                while (v54);
              }
            }
            *v20 = (double)v55;
            return 0;
          }
        }
        v27 = 128;
LABEL_35:
        v26 = 0;
        if (v65 < v16 && v27 < v16)
        {
          v28 = (int)(v65 - v27 + v16 - 1) / v65 * v65;
          v74 = v28;
          v26 = (int)v16 >= v28 ? v28 : v16;
          v75[0] = v12 - v26;
          if (v12 - v26 >= 1)
          {
            v29 = &a4[~v9];
            if (v10 <= v10 - v26 + 1)
              v30 = v10 - v26 + 1;
            else
              v30 = v10;
            v67 = 8 * (v26 + ~v10 + v30) + 8;
            v31 = v9 + v10 - v26 + 1;
            v32 = -(uint64_t)(v12 - v26);
            do
            {
              if (v26 >= 1)
                bzero(&v29[v31], v67);
              v31 += v9;
            }
            while (!__CFADD__(v32++, 1));
            v15 = a3;
            v17 = a5;
            a4 = v57;
            v11 = a2;
          }
        }
        goto LABEL_50;
      }
      v27 = 128;
    }
    v55 = v12;
    goto LABEL_35;
  }
  return 0;
}

uint64_t Accelerate_AR_dorg2l(int *a1, int *a2, _DWORD *a3, __CLPK_doublereal *a4, __CLPK_integer *a5, uint64_t a6, double *a7, int *a8)
{
  __CLPK_integer v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  __CLPK_doublereal *v17;
  uint64_t v18;
  int v19;
  int v20;
  __CLPK_doublereal *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __CLPK_doublereal *v28;
  __CLPK_doublereal *v29;
  _DWORD *v30;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  __CLPK_doublereal *v40;
  int v41;
  double da;
  __CLPK_integer v44;
  int n;

  da = 0.0;
  v8 = *a5;
  *a8 = 0;
  v9 = *a1;
  if ((v9 & 0x80000000) != 0)
  {
    v11 = 1;
    v12 = -1;
    goto LABEL_12;
  }
  v10 = *a2;
  v11 = 2;
  v12 = -2;
  if (*a2 < 0)
    goto LABEL_12;
  if (v10 > (int)v9)
    goto LABEL_12;
  v13 = a3;
  v14 = *a3;
  v11 = 3;
  v12 = -3;
  if ((*a3 & 0x80000000) != 0 || v10 < v14)
    goto LABEL_12;
  if (v9 <= 1)
    v15 = 1;
  else
    v15 = *a1;
  if (*a5 < v15)
  {
    v11 = 5;
    v12 = -5;
LABEL_12:
    *a8 = v12;
    n = v11;
    xerbla_();
    return 0;
  }
  if (v10)
  {
    v35 = ~v8;
    v17 = &a4[v35];
    v33 = v14;
    v18 = (v10 - v14);
    if ((int)v18 >= 1)
    {
      v40 = &a4[v35];
      v19 = v8 + v9 - v10 + 1;
      v20 = v8 + 1;
      do
      {
        bzero(&v40[v20], 8 * v9);
        v17[v19] = 1.0;
        v19 += v8 + 1;
        v20 += v8;
        --v18;
      }
      while (v18);
    }
    if ((int)v33 >= 1)
    {
      v21 = v17;
      v22 = 0;
      v23 = 0;
      v28 = &a4[v35];
      v29 = v17;
      v24 = 1;
      v41 = -2;
      v30 = v13;
      do
      {
        v25 = *v13;
        v34 = v10 + v24 - *v13;
        v36 = v23 + v8 * v34;
        v21[v36 + 1 + (int)v9 - v25] = 1.0;
        v44 = v23 + v10 - v25;
        n = v23 + v9 - v25 + 1;
        Accelerate_AR_dlarf((uint64_t)"Left", &n, &v44, &v21[v8 + 1 + v8 * v44], &c__1_15, (double *)(a6 + v22), a4, a5, a7);
        n = v23 + v10 + *a1 - v25 - *a2;
        da = -*(double *)(a6 + 8 * v23);
        dscal_(&n, &da, &v21[v8 + 1 + v8 * ((int)v23 + v10 - v25)], &c__1_15);
        LODWORD(v9) = *a1;
        v26 = *a2;
        v21 = v29;
        v27 = v10 + *a1 - v25 - *a2;
        v29[v36 + 1 + v27] = 1.0 - *(double *)(a6 + 8 * v23);
        n = v9;
        if ((int)v23 + v27 + 1 < (int)v9)
          bzero(&v28[(int)v23 + 2 + v8 * v34 + v27], 8 * (v41 + v25 + v26 - v10) + 8);
        ++v23;
        ++v24;
        v22 += 8;
        --v41;
        v10 = v26;
        v13 = v30;
      }
      while (v23 < v33);
    }
  }
  return 0;
}

uint64_t strmm_block_LUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, float a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v30;

  v10 = strmm_noPack_LUNN;
  if ((_DWORD)result == 132)
    v10 = strmm_noPack_LUNU;
  v29 = v10;
  if (a2 >= 1)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = a2 << 32;
    v25 = a5 << 7;
    v26 = 32 * a5;
    v27 = a2;
    v30 = a3;
    do
    {
      v21 = v19 + 32;
      if (v19 + 32 <= a2)
        v22 = 32;
      else
        v22 = v20 >> 32;
      if (v19)
      {
        APL_seq_sgemm(111, 111, v19, v30, v22, (float32x4_t *)(a4 + v16), a5, (float32x2_t *)&a6[v18], a8, 1.0, a10, a7, a6, a7);
        v23 = a4;
        a3 = v30;
        v24 = v17;
      }
      else
      {
        v24 = 0;
        v23 = a4;
      }
      result = v29(v22, a3, v23 + v18 + 4 * v24, a5, (uint64_t)&a6[v18], a7, a8);
      v20 -= 0x2000000000;
      v18 += 128;
      a2 = v27;
      v17 += v26;
      v16 += v25;
      v19 = v21;
    }
    while (v21 < v27);
  }
  return result;
}

uint64_t strmm_block_LUT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8, double a9, int8x16_t a10)
{
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((_DWORD)result == 132)
    v11 = strmm_noPack_LUTU;
  else
    v11 = strmm_noPack_LUTN;
  if ((int)a2 >= 1)
  {
    v18 = a2;
    do
    {
      if (v18 >= 0x20)
        v19 = v18 - 32;
      else
        v19 = 0;
      if (v18 >= 0x20)
        v20 = 32;
      else
        v20 = v18;
      v21 = a2 - (v19 + v20);
      v22 = v19 * a5;
      if (v21 >= 1)
        APL_seq_sgemm(112, 111, v21, a3, v20, (float32x4_t *)(a4 + 4 * v22 + 4 * v19 + 4 * v20 * a5), a5, (float32x2_t *)(a6 + 4 * v19), a8, 1.0, a10, a7, (char *)(a6 + 4 * v19 + 4 * v20), a7);
      result = v11(v20, a3, a4 + 4 * v22 + 4 * v19, a5, a6 + 4 * v19, a7, a8);
      v18 = v19;
    }
    while ((int)v19 > 0);
  }
  return result;
}

uint64_t strmm_block_LLN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8, double a9, int8x16_t a10)
{
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((_DWORD)result == 132)
    v11 = strmm_noPack_LLNU;
  else
    v11 = strmm_noPack_LLNN;
  if ((int)a2 >= 1)
  {
    v18 = a2;
    do
    {
      if (v18 >= 0x20)
        v19 = v18 - 32;
      else
        v19 = 0;
      if (v18 >= 0x20)
        v20 = 32;
      else
        v20 = v18;
      v21 = a2 - (v19 + v20);
      v22 = v19 * a5;
      if (v21 >= 1)
        APL_seq_sgemm(111, 111, v21, a3, v20, (float32x4_t *)(a4 + 4 * v22 + 4 * v19 + 4 * v20), a5, (float32x2_t *)(a6 + 4 * v19), a8, 1.0, a10, a7, (char *)(a6 + 4 * v19 + 4 * v20), a7);
      result = v11(v20, a3, a4 + 4 * v22 + 4 * v19, a5, a6 + 4 * v19, a7, a8);
      v18 = v19;
    }
    while ((int)v19 > 0);
  }
  return result;
}

uint64_t strmm_block_LLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, float a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v10 = strmm_noPack_LLTN;
  if ((_DWORD)result == 132)
    v10 = strmm_noPack_LLTU;
  v25 = v10;
  if (a2 >= 1)
  {
    v17 = 0;
    v18 = 0;
    v19 = a2 << 32;
    v24 = (a5 << 7) + 128;
    v20 = a4;
    do
    {
      v21 = v18 + 32;
      if (v18 + 32 <= a2)
        v22 = 32;
      else
        v22 = v19 >> 32;
      if (v18)
        APL_seq_sgemm(112, 111, v18, a3, v22, (float32x4_t *)(a4 + v17), a5, (float32x2_t *)&a6[v17], a8, 1.0, a10, a7, a6, a7);
      result = v25(v22, a3, v20, a5, (uint64_t)&a6[v17], a7, a8);
      v19 -= 0x2000000000;
      v17 += 128;
      v20 += v24;
      v18 = v21;
    }
    while (v21 < a2);
  }
  return result;
}

uint64_t strmm_block_RUN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8, double a9, int8x16_t a10)
{
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((_DWORD)result == 132)
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))strmm_noPack_RUNU;
  else
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))strmm_noPack_RUNN;
  if ((int)a3 >= 1)
  {
    v18 = a3;
    do
    {
      if (v18 >= 0x20)
        v19 = v18 - 32;
      else
        v19 = 0;
      if (v18 >= 0x20)
        v20 = 32;
      else
        v20 = v18;
      v21 = (v19 + v20);
      v22 = v19 * a7;
      if (a3 != v21)
        APL_seq_sgemm(111, 111, a2, a3 - v21, v20, (float32x4_t *)(a6 + 4 * v22), a7, (float32x2_t *)(a4 + 4 * v19 + 4 * v21 * a5), a8, 1.0, a10, a5, (char *)(a6 + 4 * v21 * a7), a7);
      result = v11(a2, v20, a4 + 4 * v19 * a5 + 4 * v19, a5, a6 + 4 * v22, a7, a8);
      v18 = v19;
    }
    while ((int)v19 > 0);
  }
  return result;
}

uint64_t strmm_block_RUT(uint64_t result, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, char *a6, uint64_t a7, float a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, float32_t *, uint64_t, char *, uint64_t, float);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x2_t *v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v36)(uint64_t, uint64_t, float32_t *, uint64_t, char *, uint64_t, float);
  float32x2_t *v38;
  uint64_t v39;

  v10 = (uint64_t (*)(uint64_t, uint64_t, float32_t *, uint64_t, char *, uint64_t, float))strmm_noPack_RUTN;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, float32_t *, uint64_t, char *, uint64_t, float))strmm_noPack_RUTU;
  v36 = v10;
  if (a3 >= 1)
  {
    v15 = a3;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = a3 << 32;
    v33 = a5 << 7;
    v34 = 32 * a5;
    v31 = a7 << 7;
    v32 = 32 * a7;
    v20 = (float32x4_t *)a6;
    v21 = a4;
    do
    {
      v22 = v18 + 32;
      if (v18 + 32 <= v15)
        v23 = 32;
      else
        v23 = v19 >> 32;
      if (v18)
      {
        v38 = a4;
        v39 = v18 + 32;
        v24 = a4;
        v25 = v23;
        APL_seq_sgemm(111, 112, a2, v18, v23, v20, a7, v24, a8, 1.0, a10, a5, a6, a7);
        v23 = v25;
        v26 = a2;
        a4 = v38;
        v22 = v39;
        v27 = a6;
        v15 = a3;
        v28 = v16;
        v29 = v17;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v27 = a6;
        v26 = a2;
      }
      result = v36(v26, v23, (float32_t *)v21 + v29, a5, &v27[4 * v28], a7, a8);
      v19 -= 0x2000000000;
      v21 += 16;
      v17 += v34;
      a4 = (float32x2_t *)((char *)a4 + v33);
      v16 += v32;
      v20 = (float32x4_t *)((char *)v20 + v31);
      v18 = v22;
    }
    while (v22 < v15);
  }
  return result;
}

uint64_t strmm_block_RLN(uint64_t result, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, char *a6, uint64_t a7, float a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, float32x2_t *, uint64_t, char *, uint64_t, float);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v32)(uint64_t, uint64_t, float32x2_t *, uint64_t, char *, uint64_t, float);
  uint64_t v34;

  v10 = (uint64_t (*)(uint64_t, uint64_t, float32x2_t *, uint64_t, char *, uint64_t, float))strmm_noPack_RLNN;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, float32x2_t *, uint64_t, char *, uint64_t, float))strmm_noPack_RLNU;
  v32 = v10;
  if (a3 >= 1)
  {
    v15 = a3;
    v16 = 0;
    v17 = 0;
    v18 = a3 << 32;
    v29 = 32 * a7;
    v30 = (a5 << 7) + 128;
    v28 = a7 << 7;
    v19 = (float32x4_t *)a6;
    v20 = a4;
    do
    {
      v21 = v17 + 32;
      if (v17 + 32 <= v15)
        v22 = 32;
      else
        v22 = v18 >> 32;
      if (v17)
      {
        v34 = v17 + 32;
        v23 = v22;
        APL_seq_sgemm(111, 111, a2, v17, v22, v19, a7, a4, a8, 1.0, a10, a5, a6, a7);
        v22 = v23;
        v21 = v34;
        v24 = a2;
        v25 = a6;
        v15 = a3;
        v26 = v16;
      }
      else
      {
        v26 = 0;
        v25 = a6;
        v24 = a2;
      }
      result = v32(v24, v22, v20, a5, &v25[4 * v26], a7, a8);
      v18 -= 0x2000000000;
      v20 = (float32x2_t *)((char *)v20 + v30);
      a4 += 16;
      v16 += v29;
      v19 = (float32x4_t *)((char *)v19 + v28);
      v17 = v21;
    }
    while (v21 < v15);
  }
  return result;
}

uint64_t strmm_block_RLT(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8, double a9, int8x16_t a10)
{
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v11 = strmm_noPack_RLTN;
  if ((_DWORD)result == 132)
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))strmm_noPack_RLTU;
  v24 = v11;
  if ((int)a3 >= 1)
  {
    v18 = a3;
    do
    {
      if (v18 >= 0x20)
        v19 = v18 - 32;
      else
        v19 = 0;
      if (v18 >= 0x20)
        v20 = 32;
      else
        v20 = v18;
      v21 = (v19 + v20);
      if (a3 == v21)
      {
        v22 = v19 * a5;
        v23 = v19 * a7;
      }
      else
      {
        v23 = v19 * a7;
        v22 = v19 * a5;
        APL_seq_sgemm(111, 112, a2, a3 - v21, v20, (float32x4_t *)(a6 + 4 * v19 * a7), a7, (float32x2_t *)(a4 + 4 * v19 + 4 * v20 + 4 * v19 * a5), a8, 1.0, a10, a5, (char *)(a6 + 4 * v21 * a7), a7);
      }
      result = v24(a2, v20, a4 + 4 * v22 + 4 * v19, a5, a6 + 4 * v23, a7, a8);
      v18 = v19;
    }
    while ((int)v19 > 0);
  }
  return result;
}

void dtrmm_Right_Forward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, double *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  double *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unsigned int vars0_4;
  uint64_t vars8;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v33 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  vars8 = v34;
  v72 = v32;
  vars0_4 = v35;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v36 = dtrmm_block_RUT;
  if (v27 == 111)
    v36 = dtrmm_block_RLN;
  v69 = v36;
  v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double))dgePack_B_Tran;
  if (v27 == 111)
    v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double))dgePack_B_NoTran;
  v65 = v37;
  if (v27 == 111)
    v38 = v32;
  else
    v38 = 1;
  v73 = v32;
  if (v27 == 111)
    v39 = 1;
  else
    v39 = v32;
  v67 = v39;
  v68 = v38;
  v40 = (v29 << 6) + 4108;
  if (a13 == -1)
  {
    v46 = 8 * v40;
    if (v29 < 65)
      v46 = 0;
    v45 = (double)(unint64_t)v46;
    goto LABEL_19;
  }
  v41 = v31;
  v42 = v30;
  v43 = v28;
  v44 = *(double *)&v33;
  if (v29 >= 65 && a13)
  {
    if (8 * v40 > a13)
    {
      v45 = (double)(unint64_t)(8 * v40);
LABEL_19:
      *a12 = v45;
      return;
    }
    goto LABEL_22;
  }
  if (v29 >= 65)
  {
LABEL_22:
    v63 = a12;
    v64 = v29;
    v47 = (char *)a12;
    if (!a12)
      v47 = (char *)malloc_type_malloc(8 * v40, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v63 = a12;
  v64 = v29;
  v47 = &a27;
LABEL_24:
  if (v42 >= 1)
  {
    v76 = 0;
    v48 = 0;
    v49 = 64;
    v79 = v43;
    v80 = v41;
    v66 = v42;
    v51 = 32 * a11;
    do
    {
      v75 = v49;
      if (v42 >= v49)
        v52 = v49;
      else
        v52 = v42;
      v74 = v48 + 64;
      if (v48 + 64 <= v42)
        v53 = 64;
      else
        v53 = v42 - v48;
      v82 = vars8 + 8 * v48 * v41;
      v77 = v72 + 8 * v48 * v67;
      v78 = v48;
      if (v48)
      {
        v65(v53, v48, v77, v73, v47 + 32832, v44);
        if (v43 >= 1)
        {
          v54 = 0;
          v81 = 32 * (v52 + v76);
          v55 = v73;
          v56 = (void (*)(char *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
          do
          {
            v57 = v54;
            v58 = v43 - v54;
            v83 = v57 + 64;
            if (v57 + 64 <= v43)
              v59 = 64;
            else
              v59 = v58;
            if ((v59 & 7) != 0)
              v56 = (void (*)(char *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))dgebpUnalignedC_8M4N;
            dgePack_A_NoTran(v59, v53, (__int128 *)(v82 + 8 * v57), v41, v47);
            v60 = 0;
            v84 = v55;
            v61 = v55;
            v62 = v47 + 32832;
            do
            {
              v56(v47, v62, v61, a11, v59, v53);
              v60 += 4;
              v62 = (_OWORD *)((char *)v62 + v81);
              v61 += v51;
            }
            while (v60 < v78 - 3);
            v54 = v83;
            v55 = v84 + 512;
            v43 = v79;
            v41 = v80;
          }
          while (v83 < v79);
        }
      }
      v69(vars0_4, v43, v53, v77 + 8 * v78 * v68, v73, v82, v41, v44);
      v49 = v75 + 64;
      v76 -= 64;
      v48 = v74;
      v42 = v66;
    }
    while (v74 < v66);
  }
  if (v64 >= 65 && !v63)
    free(v47);
}

void dtrmm_Right_Backward(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, double *a12, unint64_t a13, uint64_t a14, int a15, uint64_t a16, double *__Y, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24)
{
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double);
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *(*v51)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  double *(*v53)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  const double *v55;
  float64x2_t *v56;
  double *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double);
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t vars8;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v28 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v64 = v29;
  v65 = v30;
  v66 = v31;
  v63 = v32;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double))dgePack_B_Tran;
  if (v24 == 111)
    v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double))dgePack_B_NoTran;
  v60 = v33;
  v34 = dtrmm_block_RLT;
  if (v24 == 111)
    v34 = dtrmm_block_RUN;
  v62 = v34;
  if (v24 == 111)
    v35 = a9;
  else
    v35 = 1;
  v67 = v35;
  if (v24 == 111)
    v36 = 1;
  else
    v36 = a9;
  v61 = v36;
  v37 = (v26 << 6) + 4108;
  if (a13 == -1)
  {
    v42 = 8 * v37;
    if (v26 < 65)
      v42 = 0;
    v41 = (double)(unint64_t)v42;
    goto LABEL_19;
  }
  v38 = v27;
  v39 = v25;
  v40 = *(double *)&v28;
  if (v26 >= 65 && a13)
  {
    if (8 * v37 > a13)
    {
      v41 = (double)(unint64_t)(8 * v37);
LABEL_19:
      *a12 = v41;
      return;
    }
    goto LABEL_22;
  }
  if (v26 >= 65)
  {
LABEL_22:
    v59 = v26;
    v43 = (char *)a12;
    v57 = a12;
    if (!a12)
      v43 = (char *)malloc_type_malloc(8 * v37, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v59 = v26;
  v57 = a12;
  v43 = &a24;
LABEL_24:
  if (v66 >= 1)
  {
    v45 = v59 - 3;
    v58 = 8 * a11;
    v71 = 32 * a11;
    v46 = v66;
    v72 = v39;
    v73 = v38;
    do
    {
      if (v46 >= 0x40)
        v47 = v46 - 64;
      else
        v47 = 0;
      if (v46 >= 0x40)
        v48 = 64;
      else
        v48 = v46;
      v74 = v64 + 8 * v47 * v38;
      vars8 = v47;
      v70 = v65 + 8 * v47 * v61;
      v76 = v47 + v48;
      if (v66 > v47 + v48)
      {
        v60(v48, v66 - (v47 + v48), v70 + 8 * v76 * v67, a9, v43 + 32832, v40);
        if (v39 >= 1)
        {
          v49 = 0;
          if (v76 - v59 >= 0)
            v50 = -((v76 - v59) & 3);
          else
            v50 = (v59 - v76) & 3;
          v78 = a10 + v58 * v46;
          v51 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
          do
          {
            v77 = v49 + 64;
            if (v49 + 64 <= v39)
              v52 = 64;
            else
              v52 = v39 - v49;
            v75 = v49;
            if ((v52 & 7) != 0)
              v53 = dgebpUnalignedC_8M4N;
            else
              v53 = v51;
            v79 = v52;
            dgePack_A_NoTran(v52, v48, (__int128 *)(v74 + 8 * v49), v38, v43);
            v54 = v76;
            v55 = (const double *)(v43 + 32832);
            if (v76 < v45)
            {
              v56 = (float64x2_t *)v78;
              v55 = (const double *)(v43 + 32832);
              v54 = v76;
              do
              {
                v53((float64x2_t *)v43, (float64x2_t *)v55, v56, a11, v79, v48);
                v54 += 4;
                v55 += 4 * v48;
                v56 = (float64x2_t *)((char *)v56 + v71);
              }
              while (v54 < v45);
            }
            v51 = v53;
            if (v50)
              dgebp_8M1N((float64x2_t *)v43, v55, a10 + 8 * v75 + 8 * v54 * a11, a11, v79, v50, v48);
            v78 += 512;
            v49 = v77;
            v39 = v72;
            v38 = v73;
          }
          while (v77 < v72);
        }
      }
      v62(v63, v39, v48, v70 + 8 * vars8 * v67, a9, v74, v38, v40);
      v46 = vars8;
    }
    while (vars8 > 0);
  }
  if (v59 >= 65 && !v57)
    free(v43);
}

uint64_t strmm_noPack_LLNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x2_t *v28;
  int64x2_t v29;
  float32x4_t *v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  BOOL v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  float v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  __int32 *v78;
  float32x2_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  uint64_t j;
  int32x4_t *v87;
  int32x4_t *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t *v95;
  int32x4_t v96;
  float32x2_t *v97;
  int32x4_t v98;
  float32x4_t *v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t *v116;
  float32x2_t *v117;
  __int32 *v118;
  __int32 *v119;
  float32x2_t v120;
  float v121;
  float32_t v122;
  __int32 *v123;
  float32x2_t v124;
  float32_t v125;
  float32_t v126;
  uint64_t k;
  float32x4_t *v128;
  float32x4_t *v129;
  uint64_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t *v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t *v147;
  __int32 *v148;
  __int32 *v149;
  float32x2_t v150;
  float v151;
  __int32 *v152;
  float32x2_t v153;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v30 = vmulq_n_f32(v49, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v20 = *v17;
      v19 = (float32x4_t *)((char *)v17 + v8);
      v21 = *v19;
      v22 = (float32x2_t *)&v19->u32[(unint64_t)v8 / 4 + 2];
      v23 = *v12;
      v24 = (float32x2_t *)(a5 + v9 * v7);
      v25 = *v13;
      v26 = (float32x2_t *)((char *)v13 - 4 * i);
      v27 = *v14;
      v28 = (float32x2_t *)((char *)v14 - 4 * i);
      v29 = *v15;
      v30 = (float32x4_t *)((char *)v15 - 4 * i);
      v31 = (int32x4_t)vtrn1q_s64(v23, v27);
      v32 = (int32x4_t)vtrn1q_s64(v25, v29);
      v33 = (int32x4_t)vtrn2q_s64(v23, v27);
      v34 = (int32x4_t)vtrn2q_s64(v25, v29);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (float32x4_t)vtrn2q_s32(v31, v32);
      v37 = (float32x4_t)vtrn1q_s32(v33, v34);
      v38 = (int64x2_t)vmulq_n_f32(v35, v20.f32[0]);
      v39 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v20.f32, 1), vmulq_lane_f32(v36, *(float32x2_t *)v21.f32, 1));
      v40 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v35, v20, 2), v37, COERCE_FLOAT(*v22)), vmulq_laneq_f32(v36, v21, 2));
      v41 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v35, v20, 3), v37, *v22, 1), vmulq_laneq_f32(v36, v21, 3)), vmulq_n_f32((float32x4_t)vtrn2q_s32(v33, v34), v22->f32[(unint64_t)v8 / 4 + 1]));
      v42 = (int32x4_t)vtrn1q_s64(v38, v40);
      v43 = (int32x4_t)vtrn1q_s64(v39, v41);
      v44 = (int32x4_t)vtrn2q_s64(v38, v40);
      v45 = (int32x4_t)vtrn2q_s64(v39, v41);
      v46 = (float32x4_t)vtrn1q_s32(v42, v43);
      v47 = (float32x4_t)vtrn2q_s32(v42, v43);
      v48 = (float32x4_t)vtrn1q_s32(v44, v45);
      v49 = (float32x4_t)vtrn2q_s32(v44, v45);
      if ((i & 1) != 0)
      {
        v50 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v51 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v52 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v53 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v54 = v30->f32[0];
        v30 = (float32x4_t *)((char *)v30 + 4);
        v46 = vmlaq_n_f32(v46, v50, v51);
        v47 = vmlaq_n_f32(v47, v50, v52);
        v48 = vmlaq_n_f32(v48, v50, v53);
        v49 = vmlaq_n_f32(v49, v50, v54);
        v18 = i - 1;
      }
      if (v18)
      {
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v60 = *v16;
          v59 = (float32x4_t *)((char *)v16 + v8);
          v61 = *v59;
          v16 = (float32x4_t *)((char *)v59 + v8);
          v62 = *v24++;
          v63 = *v26++;
          v64 = *v28++;
          v65 = *(float32x2_t *)v30->f32;
          v30 = (float32x4_t *)((char *)v30 + 8);
          v46 = vmlaq_n_f32(v46, v60, v62.f32[0]);
          v47 = vmlaq_n_f32(v47, v60, v63.f32[0]);
          v48 = vmlaq_n_f32(v48, v60, v64.f32[0]);
          v49 = vmlaq_n_f32(v49, v60, v65.f32[0]);
          v55 = vmlaq_lane_f32(v55, v61, v62, 1);
          v56 = vmlaq_lane_f32(v56, v61, v63, 1);
          v57 = vmlaq_lane_f32(v57, v61, v64, 1);
          v58 = vmlaq_lane_f32(v58, v61, v65, 1);
          v66 = v18 <= 2;
          v18 -= 2;
        }
        while (!v66);
        v46 = vaddq_f32(v46, v55);
        v47 = vaddq_f32(v47, v56);
        v48 = vaddq_f32(v48, v57);
        v49 = vaddq_f32(v49, v58);
      }
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v46, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v47, a7);
      *(float32x4_t *)v28->f32 = vmulq_n_f32(v48, a7);
    }
    if (i)
    {
      v67 = (float32x2_t *)(a5 + v9 * v7);
      v68 = (float32x2_t *)((char *)v67 + v7);
      v69 = &v67[(unint64_t)v7 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v7 / 4] + v7);
      v71 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v8 / 4];
          v73.i32[1] = *v72;
          v74 = *(float *)&v72[(unint64_t)v8 / 4];
          v71 = &v72[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v75 = (float)(vaddv_f32(vmul_f32(v73, *v68)) + (float)(v68[1].f32[0] * v74)) * a7;
          v76 = (float)(vaddv_f32(vmul_f32(v73, *v69)) + (float)(v69[1].f32[0] * v74)) * a7;
          v77 = (float)(vaddv_f32(vmul_f32(v73, *v70)) + (float)(v70[1].f32[0] * v74)) * a7;
          v67[1].f32[0] = (float)(vaddv_f32(vmul_f32(v73, *v67)) + (float)(v67[1].f32[0] * v74)) * a7;
          v68[1].f32[0] = v75;
          v69[1].f32[0] = v76;
          v70[1].f32[0] = v77;
        }
        v79.i32[0] = *v71;
        v78 = &v71[(unint64_t)v8 / 4];
        v79.i32[1] = *v78;
        v71 = &v78[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
        v80 = vaddv_f32(vmul_f32(v79, *v68)) * a7;
        v81 = vaddv_f32(vmul_f32(v79, *v69)) * a7;
        v82 = vaddv_f32(vmul_f32(v79, *v70)) * a7;
        v67->f32[1] = vaddv_f32(vmul_f32(v79, *v67)) * a7;
        v68->f32[1] = v80;
        v69->f32[1] = v81;
        v70->f32[1] = v82;
      }
      v83 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v84 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v85 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v83;
      v69->f32[0] = v84;
      v70->f32[0] = v85;
    }
    v9 += 4;
    v66 = v10 <= 4;
    v10 -= 4;
  }
  while (!v66);
  v66 = v10 <= -3;
  a2 = v10 + 3;
  if (!v66)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v99 = vmulq_n_f32(v105, a7))
      {
        j -= 4;
        v87 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v88 = (int32x4_t *)((char *)v87 + v7);
        v89 = (float32x4_t *)(a3 + 4 * j);
        v90 = (float32x4_t *)((char *)v89 + j * v8);
        v91 = j;
        v93 = *v90;
        v92 = (float32x4_t *)((char *)v90 + v8);
        v94 = *v92;
        v95 = (float32x2_t *)&v92->u32[(unint64_t)v8 / 4 + 2];
        v96 = *v87;
        v97 = (float32x2_t *)(a5 + v9 * v7);
        v98 = *v88;
        v99 = (float32x4_t *)((char *)v88 - 4 * j);
        v100 = vtrn1q_s32(v96, v98);
        v101 = vtrn2q_s32(v96, v98);
        *(float32x2_t *)v102.i8 = vmul_n_f32(*(float32x2_t *)v100.i8, v93.f32[0]);
        *(float32x2_t *)v103.i8 = vadd_f32(vmul_lane_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v93.f32, 1), vmul_lane_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v94.f32, 1));
        v102.u64[1] = (unint64_t)vadd_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 2), (float32x2_t)v100.u64[1], COERCE_FLOAT(*v95)), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 2));
        v103.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 3), (float32x2_t)v100.u64[1], *v95, 1), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 3)), vmul_n_f32((float32x2_t)v101.u64[1], v95->f32[(unint64_t)v8 / 4 + 1]));
        v104 = (float32x4_t)vtrn1q_s32(v102, v103);
        v105 = (float32x4_t)vtrn2q_s32(v102, v103);
        if ((j & 1) != 0)
        {
          v106 = *v89;
          v89 = (float32x4_t *)((char *)v89 + v8);
          v107 = v97->f32[0];
          v97 = (float32x2_t *)((char *)v97 + 4);
          v108 = v99->f32[0];
          v99 = (float32x4_t *)((char *)v99 + 4);
          v104 = vmlaq_n_f32(v104, v106, v107);
          v105 = vmlaq_n_f32(v105, v106, v108);
          v91 = j - 1;
        }
        if (v91)
        {
          v109 = 0uLL;
          v110 = 0uLL;
          do
          {
            v112 = *v89;
            v111 = (float32x4_t *)((char *)v89 + v8);
            v113 = *v111;
            v89 = (float32x4_t *)((char *)v111 + v8);
            v114 = *v97++;
            v115 = *(float32x2_t *)v99->f32;
            v99 = (float32x4_t *)((char *)v99 + 8);
            v104 = vmlaq_n_f32(v104, v112, v114.f32[0]);
            v105 = vmlaq_n_f32(v105, v112, v115.f32[0]);
            v109 = vmlaq_lane_f32(v109, v113, v114, 1);
            v110 = vmlaq_lane_f32(v110, v113, v115, 1);
            v66 = v91 <= 2;
            v91 -= 2;
          }
          while (!v66);
          v104 = vaddq_f32(v104, v109);
          v105 = vaddq_f32(v105, v110);
        }
        *(float32x4_t *)v97->f32 = vmulq_n_f32(v104, a7);
      }
      if (j)
      {
        v116 = (float32x2_t *)(a5 + v9 * v7);
        v117 = (float32x2_t *)((char *)v116 + v7);
        v118 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v120.i32[0] = *v118;
            v119 = &v118[(unint64_t)v8 / 4];
            v120.i32[1] = *v119;
            v121 = *(float *)&v119[(unint64_t)v8 / 4];
            v118 = &v119[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v122 = (float)(vaddv_f32(vmul_f32(v120, *v117)) + (float)(v117[1].f32[0] * v121)) * a7;
            v116[1].f32[0] = (float)(vaddv_f32(vmul_f32(v120, *v116)) + (float)(v116[1].f32[0] * v121)) * a7;
            v117[1].f32[0] = v122;
          }
          v124.i32[0] = *v118;
          v123 = &v118[(unint64_t)v8 / 4];
          v124.i32[1] = *v123;
          v118 = &v123[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v125 = vaddv_f32(vmul_f32(v124, *v117)) * a7;
          v116->f32[1] = vaddv_f32(vmul_f32(v124, *v116)) * a7;
          v117->f32[1] = v125;
        }
        v126 = (float)(*(float *)v118 * v117->f32[0]) * a7;
        v116->f32[0] = (float)(*(float *)v118 * v116->f32[0]) * a7;
        v117->f32[0] = v126;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v137 = vmulq_n_f32(v139, a7))
      {
        k -= 4;
        v128 = (float32x4_t *)(a3 + 4 * k);
        v129 = (float32x4_t *)((char *)v128 + k * v8);
        v130 = k;
        v132 = *v129;
        v131 = (float32x4_t *)((char *)v129 + v8);
        v133 = *v131;
        v134 = (float32x2_t *)&v131->u32[(unint64_t)v8 / 4 + 2];
        v135 = *(float32x2_t *)((char *)v134 + v8);
        v136 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v137 = (float32x4_t *)(a5 + v9 * v7);
        v133.i32[0] = 0;
        v135.i32[0] = 0;
        v138.i64[0] = 0;
        *(float32x2_t *)&v138.u32[2] = vmla_laneq_f32(vmul_laneq_f32(*v134, v136, 2), v135, v136, 3);
        v139 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v136.f32[0]), v133, *(float32x2_t *)v136.f32, 1), v138);
        if ((k & 1) != 0)
        {
          v140 = *v128;
          v128 = (float32x4_t *)((char *)v128 + v8);
          v141 = v137->f32[0];
          v137 = (float32x4_t *)((char *)v137 + 4);
          v139 = vmlaq_n_f32(v139, v140, v141);
          v130 = k - 1;
        }
        if (v130)
        {
          v142 = 0uLL;
          do
          {
            v144 = *v128;
            v143 = (float32x4_t *)((char *)v128 + v8);
            v145 = *v143;
            v128 = (float32x4_t *)((char *)v143 + v8);
            v146 = *(float32x2_t *)v137->f32;
            v137 = (float32x4_t *)((char *)v137 + 8);
            v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
            v142 = vmlaq_lane_f32(v142, v145, v146, 1);
            v66 = v130 <= 2;
            v130 -= 2;
          }
          while (!v66);
          v139 = vaddq_f32(v139, v142);
        }
      }
      if (k)
      {
        v147 = (float32x2_t *)(a5 + v9 * v7);
        v148 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v150.i32[0] = *v148;
            v149 = &v148[(unint64_t)v8 / 4];
            v150.i32[1] = *v149;
            v151 = *(float *)&v149[(unint64_t)v8 / 4];
            v148 = &v149[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v147[1].f32[0] = (float)(vaddv_f32(vmul_f32(v150, *v147)) + (float)(v147[1].f32[0] * v151)) * a7;
          }
          v153.i32[0] = *v148;
          v152 = &v148[(unint64_t)v8 / 4];
          v153.i32[1] = *v152;
          v148 = &v152[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v147->f32[1] = vaddv_f32(vmul_f32(v153, *v147)) * a7;
        }
        v147->f32[0] = (float)(*(float *)v148 * v147->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LLNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  int64x2_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  BOOL v63;
  float32x2_t *v64;
  float32x2_t *v65;
  float32x2_t *v66;
  float32x2_t *v67;
  __int32 *v68;
  __int32 *v69;
  float32x2_t v70;
  float32_t v71;
  float32_t v72;
  float32_t v73;
  float32_t v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  float32_t v78;
  float32_t v79;
  uint64_t j;
  int32x4_t *v81;
  int32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  float32x4_t v86;
  float32x2_t *v87;
  int32x4_t v88;
  float32x2_t *v89;
  int32x4_t v90;
  float32x4_t *v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t *v109;
  __int32 *v110;
  __int32 *v111;
  float32x2_t v112;
  float32_t v113;
  float32_t v114;
  float32_t v115;
  uint64_t k;
  float32x4_t *v117;
  float32x4_t *v118;
  uint64_t v119;
  float32x4_t v120;
  float32x2_t *v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float32x4_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x2_t *v134;
  __int32 *v135;
  __int32 *v136;
  float32x2_t v137;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v28 = vmulq_n_f32(v46, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v21 = *v12;
      v22 = (float32x2_t *)(a5 + v9 * v7);
      v23 = *v13;
      v24 = (float32x2_t *)((char *)v13 - 4 * i);
      v25 = *v14;
      v26 = (float32x2_t *)((char *)v14 - 4 * i);
      v27 = *v15;
      v28 = (float32x4_t *)((char *)v15 - 4 * i);
      v29 = (int32x4_t)vtrn1q_s64(v21, v25);
      v30 = (int32x4_t)vtrn1q_s64(v23, v27);
      v31 = (int32x4_t)vtrn2q_s64(v21, v25);
      v32 = (int32x4_t)vtrn2q_s64(v23, v27);
      v33 = (float32x4_t)vtrn1q_s32(v29, v30);
      v34 = (float32x4_t)vtrn2q_s32(v29, v30);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (int64x2_t)vmlaq_lane_f32(v34, v33, *(float32x2_t *)v19.f32, 1);
      v37 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(v35, v33, v19, 2), vmulq_n_f32(v34, COERCE_FLOAT(*v20)));
      v38 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32((float32x4_t)vtrn2q_s32(v31, v32), v33, v19, 3), v35, v20->f32[(unint64_t)v8 / 4 + 1]), vmulq_lane_f32(v34, *v20, 1));
      v39 = (int32x4_t)vtrn1q_s64((int64x2_t)v33, v37);
      v40 = (int32x4_t)vtrn1q_s64(v36, v38);
      v41 = (int32x4_t)vtrn2q_s64((int64x2_t)v33, v37);
      v42 = (int32x4_t)vtrn2q_s64(v36, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (float32x4_t)vtrn2q_s32(v39, v40);
      v45 = (float32x4_t)vtrn1q_s32(v41, v42);
      v46 = (float32x4_t)vtrn2q_s32(v41, v42);
      if ((i & 1) != 0)
      {
        v47 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v48 = v22->f32[0];
        v22 = (float32x2_t *)((char *)v22 + 4);
        v49 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v50 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v51 = v28->f32[0];
        v28 = (float32x4_t *)((char *)v28 + 4);
        v43 = vmlaq_n_f32(v43, v47, v48);
        v44 = vmlaq_n_f32(v44, v47, v49);
        v45 = vmlaq_n_f32(v45, v47, v50);
        v46 = vmlaq_n_f32(v46, v47, v51);
        v18 = i - 1;
      }
      if (v18)
      {
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        do
        {
          v57 = *v16;
          v56 = (float32x4_t *)((char *)v16 + v8);
          v58 = *v56;
          v16 = (float32x4_t *)((char *)v56 + v8);
          v59 = *v22++;
          v60 = *v24++;
          v61 = *v26++;
          v62 = *(float32x2_t *)v28->f32;
          v28 = (float32x4_t *)((char *)v28 + 8);
          v43 = vmlaq_n_f32(v43, v57, v59.f32[0]);
          v44 = vmlaq_n_f32(v44, v57, v60.f32[0]);
          v45 = vmlaq_n_f32(v45, v57, v61.f32[0]);
          v46 = vmlaq_n_f32(v46, v57, v62.f32[0]);
          v52 = vmlaq_lane_f32(v52, v58, v59, 1);
          v53 = vmlaq_lane_f32(v53, v58, v60, 1);
          v54 = vmlaq_lane_f32(v54, v58, v61, 1);
          v55 = vmlaq_lane_f32(v55, v58, v62, 1);
          v63 = v18 <= 2;
          v18 -= 2;
        }
        while (!v63);
        v43 = vaddq_f32(v43, v52);
        v44 = vaddq_f32(v44, v53);
        v45 = vaddq_f32(v45, v54);
        v46 = vaddq_f32(v46, v55);
      }
      *(float32x4_t *)v22->f32 = vmulq_n_f32(v43, a7);
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v44, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v45, a7);
    }
    if (i)
    {
      v64 = (float32x2_t *)(a5 + v9 * v7);
      v65 = (float32x2_t *)((char *)v64 + v7);
      v66 = &v64[(unint64_t)v7 / 4];
      v67 = (float32x2_t *)((char *)&v64[(unint64_t)v7 / 4] + v7);
      v68 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v70.i32[0] = *v68;
          v69 = &v68[(unint64_t)v8 / 4];
          v70.i32[1] = *v69;
          v68 = &v69[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v71 = (float)(vaddv_f32(vmul_f32(v70, *v65)) + v65[1].f32[0]) * a7;
          v72 = (float)(vaddv_f32(vmul_f32(v70, *v66)) + v66[1].f32[0]) * a7;
          v73 = (float)(vaddv_f32(vmul_f32(v70, *v67)) + v67[1].f32[0]) * a7;
          v64[1].f32[0] = (float)(vaddv_f32(vmul_f32(v70, *v64)) + v64[1].f32[0]) * a7;
          v65[1].f32[0] = v71;
          v66[1].f32[0] = v72;
          v67[1].f32[0] = v73;
        }
        v74 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v65)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v65)))
            * a7;
        v75 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v66)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v66)))
            * a7;
        v76 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v67)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v67)))
            * a7;
        v64->f32[1] = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v64))
                            + COERCE_FLOAT(HIDWORD(*(unint64_t *)v64)))
                    * a7;
        v65->f32[1] = v74;
        v66->f32[1] = v75;
        v67->f32[1] = v76;
      }
      v77 = v65->f32[0] * a7;
      v78 = v66->f32[0] * a7;
      v79 = v67->f32[0] * a7;
      v64->f32[0] = v64->f32[0] * a7;
      v65->f32[0] = v77;
      v66->f32[0] = v78;
      v67->f32[0] = v79;
    }
    v9 += 4;
    v63 = v10 <= 4;
    v10 -= 4;
  }
  while (!v63);
  v63 = v10 <= -3;
  a2 = v10 + 3;
  if (!v63)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v91 = vmulq_n_f32(v97, a7))
      {
        j -= 4;
        v81 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v82 = (int32x4_t *)((char *)v81 + v7);
        v83 = (float32x4_t *)(a3 + 4 * j);
        v84 = (float32x4_t *)((char *)v83 + j * v8);
        v85 = j;
        v86 = *v84;
        v87 = (float32x2_t *)&v84->u32[(unint64_t)v8 / 4 + 2];
        v88 = *v81;
        v89 = (float32x2_t *)(a5 + v9 * v7);
        v90 = *v82;
        v91 = (float32x4_t *)((char *)v82 - 4 * j);
        v92 = vtrn1q_s32(v88, v90);
        v93 = vtrn2q_s32(v88, v90);
        *(float32x2_t *)v94.i8 = vmla_lane_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v92.i8, *(float32x2_t *)v86.f32, 1);
        v95 = vadd_f32(vmla_n_f32(vmla_laneq_f32((float32x2_t)v93.u64[1], *(float32x2_t *)v92.i8, v86, 3), (float32x2_t)v92.u64[1], v87->f32[(unint64_t)v8 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)v93.i8, *v87, 1));
        v92.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32((float32x2_t)v92.u64[1], *(float32x2_t *)v92.i8, v86, 2), vmul_n_f32(*(float32x2_t *)v93.i8, COERCE_FLOAT(*v87)));
        v94.u64[1] = (unint64_t)v95;
        v96 = (float32x4_t)vtrn1q_s32(v92, v94);
        v97 = (float32x4_t)vtrn2q_s32(v92, v94);
        if ((j & 1) != 0)
        {
          v98 = *v83;
          v83 = (float32x4_t *)((char *)v83 + v8);
          v99 = v89->f32[0];
          v89 = (float32x2_t *)((char *)v89 + 4);
          v100 = v91->f32[0];
          v91 = (float32x4_t *)((char *)v91 + 4);
          v96 = vmlaq_n_f32(v96, v98, v99);
          v97 = vmlaq_n_f32(v97, v98, v100);
          v85 = j - 1;
        }
        if (v85)
        {
          v101 = 0uLL;
          v102 = 0uLL;
          do
          {
            v104 = *v83;
            v103 = (float32x4_t *)((char *)v83 + v8);
            v105 = *v103;
            v83 = (float32x4_t *)((char *)v103 + v8);
            v106 = *v89++;
            v107 = *(float32x2_t *)v91->f32;
            v91 = (float32x4_t *)((char *)v91 + 8);
            v96 = vmlaq_n_f32(v96, v104, v106.f32[0]);
            v97 = vmlaq_n_f32(v97, v104, v107.f32[0]);
            v101 = vmlaq_lane_f32(v101, v105, v106, 1);
            v102 = vmlaq_lane_f32(v102, v105, v107, 1);
            v63 = v85 <= 2;
            v85 -= 2;
          }
          while (!v63);
          v96 = vaddq_f32(v96, v101);
          v97 = vaddq_f32(v97, v102);
        }
        *(float32x4_t *)v89->f32 = vmulq_n_f32(v96, a7);
      }
      if (j)
      {
        v108 = (float32x2_t *)(a5 + v9 * v7);
        v109 = (float32x2_t *)((char *)v108 + v7);
        v110 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v112.i32[0] = *v110;
            v111 = &v110[(unint64_t)v8 / 4];
            v112.i32[1] = *v111;
            v110 = &v111[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v113 = (float)(vaddv_f32(vmul_f32(v112, *v109)) + v109[1].f32[0]) * a7;
            v108[1].f32[0] = (float)(vaddv_f32(vmul_f32(v112, *v108)) + v108[1].f32[0]) * a7;
            v109[1].f32[0] = v113;
          }
          v114 = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v109)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v109)))
               * a7;
          v108->f32[1] = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v108))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v108)))
                       * a7;
          v109->f32[1] = v114;
        }
        v115 = v109->f32[0] * a7;
        v108->f32[0] = v108->f32[0] * a7;
        v109->f32[0] = v115;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v124 = vmulq_n_f32(v126, a7))
      {
        k -= 4;
        v117 = (float32x4_t *)(a3 + 4 * k);
        v118 = (float32x4_t *)((char *)v117 + k * v8);
        v119 = k;
        v120 = *v118;
        v121 = (float32x2_t *)&v118->u32[(unint64_t)v8 / 4 + 2];
        v122 = *(float32x2_t *)((char *)v121 + v8);
        v123 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v124 = (float32x4_t *)(a5 + v9 * v7);
        v120.i32[0] = 0;
        v122.i32[0] = 0;
        v125.i64[0] = 0;
        *(float32x2_t *)&v125.u32[2] = vmla_laneq_f32(vmul_lane_f32(*v121, *(float32x2_t *)v123.f32, 1), v122, v123, 2);
        v126 = vaddq_f32(vmlaq_n_f32(v123, v120, v123.f32[0]), v125);
        if ((k & 1) != 0)
        {
          v127 = *v117;
          v117 = (float32x4_t *)((char *)v117 + v8);
          v128 = v124->f32[0];
          v124 = (float32x4_t *)((char *)v124 + 4);
          v126 = vmlaq_n_f32(v126, v127, v128);
          v119 = k - 1;
        }
        if (v119)
        {
          v129 = 0uLL;
          do
          {
            v131 = *v117;
            v130 = (float32x4_t *)((char *)v117 + v8);
            v132 = *v130;
            v117 = (float32x4_t *)((char *)v130 + v8);
            v133 = *(float32x2_t *)v124->f32;
            v124 = (float32x4_t *)((char *)v124 + 8);
            v126 = vmlaq_n_f32(v126, v131, v133.f32[0]);
            v129 = vmlaq_lane_f32(v129, v132, v133, 1);
            v63 = v119 <= 2;
            v119 -= 2;
          }
          while (!v63);
          v126 = vaddq_f32(v126, v129);
        }
      }
      if (k)
      {
        v134 = (float32x2_t *)(a5 + v9 * v7);
        v135 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v137.i32[0] = *v135;
            v136 = &v135[(unint64_t)v8 / 4];
            v137.i32[1] = *v136;
            v135 = &v136[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v134[1].f32[0] = (float)(vaddv_f32(vmul_f32(v137, *v134)) + v134[1].f32[0]) * a7;
          }
          v134->f32[1] = (float)((float)(*(float *)v135 * COERCE_FLOAT(*v134))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v134)))
                       * a7;
        }
        v134->f32[0] = v134->f32[0] * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LLTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  float32x2_t v29;
  __int32 *v30;
  float v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  float32x2_t *v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  BOOL v78;
  uint64_t v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  float32x2_t *v84;
  __int32 *v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  float32_t v95;
  float32_t v96;
  float32_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  int32x4_t *v101;
  int32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  float32x2_t *v107;
  __int32 *v108;
  __int32 *v109;
  float32x4_t v110;
  __int32 *v111;
  float32x4_t v112;
  __int32 *v113;
  float32x2_t v114;
  __int32 *v115;
  float v116;
  float32x2_t *v117;
  int32x4_t v118;
  float32x2_t *v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x2_t *v141;
  float32x2_t *v142;
  float32x2_t *v143;
  __int32 *v144;
  float32x2_t v145;
  float32x2_t *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32_t v153;
  float32_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  float32x4_t *v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  float32x4_t v165;
  __int32 *v166;
  float32x4_t v167;
  __int32 *v168;
  float32x2_t v169;
  __int32 *v170;
  float v171;
  float32x2_t *v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  uint64_t v182;
  uint64_t v183;
  float32x2_t v184;
  uint64_t v185;
  float32x2_t *v186;
  float32x2_t *v187;
  float *v188;
  float32x2_t v189;
  float v190;
  float32x2_t v191;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = (float32x4_t *)((char *)v18 + v8);
        v20 = 4 * (result - v11);
        v21 = result - v11 - 4;
        v22 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 2 + 2];
        v23 = &v18->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v19;
        v26 = (__int32 *)&v19[1];
        v29 = *v22;
        v28 = (__int32 *)&v22[1];
        v31 = *(float *)v23;
        v30 = v23 + 1;
        v33 = *v14;
        v32 = (float32x2_t *)&v14[1];
        v35 = *v15;
        v34 = (float32x2_t *)&v15[1];
        v37 = *v16;
        v36 = (float32x2_t *)&v16[1];
        v39 = *v17;
        v38 = (float32x2_t *)&v17[1];
        v40 = (int32x4_t)vtrn1q_s64(v33, v37);
        v41 = (int32x4_t)vtrn1q_s64(v35, v39);
        v42 = (int32x4_t)vtrn2q_s64(v33, v37);
        v43 = (int32x4_t)vtrn2q_s64(v35, v39);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (float32x4_t)vtrn1q_s32(v42, v43);
        v46 = (float32x4_t)vtrn2q_s32(v42, v43);
        v47 = (int64x2_t)vmulq_n_f32(v46, v31);
        v48 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v27, 3), v44, *(float32x2_t *)v27.f32, 1), vmulq_laneq_f32(v45, v27, 2));
        v49 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v46, v29, 1), vmulq_n_f32(v45, v29.f32[0]));
        v50 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v25, 3), v44, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v45, v25, 2)), vmulq_n_f32((float32x4_t)vtrn1q_s32(v40, v41), v25.f32[0]));
        v51 = (int32x4_t)vtrn1q_s64(v50, v49);
        v52 = (int32x4_t)vtrn1q_s64(v48, v47);
        v53 = (int32x4_t)vtrn2q_s64(v50, v49);
        v54 = (int32x4_t)vtrn2q_s64(v48, v47);
        v55 = (float32x4_t)vtrn1q_s32(v51, v52);
        v56 = (float32x4_t)vtrn2q_s32(v51, v52);
        v57 = (float32x4_t)vtrn1q_s32(v53, v54);
        v58 = (float32x4_t)vtrn2q_s32(v53, v54);
        if ((v21 & 1) != 0)
        {
          v59.i32[0] = *v24++;
          v59.i32[1] = *v26++;
          v59.i32[2] = *v28++;
          v59.i32[3] = *v30++;
          v60 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v61 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v62 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v63 = v38->f32[0];
          v38 = (float32x2_t *)((char *)v38 + 4);
          v55 = vmlaq_n_f32(v55, v59, v60);
          v56 = vmlaq_n_f32(v56, v59, v61);
          v57 = vmlaq_n_f32(v57, v59, v62);
          v58 = vmlaq_n_f32(v58, v59, v63);
          v21 = result - v11 - 5;
        }
        if (v21)
        {
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          v67 = 0uLL;
          do
          {
            v68.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v69.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v70 = *(_QWORD *)v28;
            v28 += 2;
            v71 = *(_QWORD *)v30;
            v30 += 2;
            v72 = *v32++;
            v73 = *v34++;
            v74 = *v36++;
            v75 = *v38++;
            v68.i64[1] = v70;
            v69.i64[1] = v71;
            v76 = (float32x4_t)vtrn1q_s32(v68, v69);
            v77 = (float32x4_t)vtrn2q_s32(v68, v69);
            v55 = vmlaq_n_f32(v55, v76, v72.f32[0]);
            v56 = vmlaq_n_f32(v56, v76, v73.f32[0]);
            v57 = vmlaq_n_f32(v57, v76, v74.f32[0]);
            v58 = vmlaq_n_f32(v58, v76, v75.f32[0]);
            v64 = vmlaq_lane_f32(v64, v77, v72, 1);
            v65 = vmlaq_lane_f32(v65, v77, v73, 1);
            v66 = vmlaq_lane_f32(v66, v77, v74, 1);
            v67 = vmlaq_lane_f32(v67, v77, v75, 1);
            v78 = v21 <= 2;
            v21 -= 2;
          }
          while (!v78);
          v55 = vaddq_f32(v55, v64);
          v56 = vaddq_f32(v56, v65);
          v57 = vaddq_f32(v57, v66);
          v58 = vaddq_f32(v58, v67);
        }
        *(float32x4_t *)&v32->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        *(float32x4_t *)&v34->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v56, a7);
        *(float32x4_t *)&v36->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v57, a7);
        *(float32x4_t *)&v38->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v58, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v78 = v13 <= 4;
        v13 -= 4;
      }
      while (!v78);
    }
    v79 = result & 3;
    if (!v12 && v79 != 0)
    {
      v80 = (float32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v81 = (float32x2_t *)((char *)v80 + v7);
      v82 = &v80[(unint64_t)v7 / 4];
      v83 = (float32x2_t *)((char *)&v80[(unint64_t)v7 / 4] + v7);
      v84 = (float32x2_t *)(a3 + v11 * v8 + 4 * v11);
      if (v79 != 1)
      {
        if (v79 != 2)
        {
          v86 = *v84;
          v85 = (__int32 *)&v84[1];
          v87 = vmul_f32(v86, *v80);
          v88 = vmul_f32(v86, *v81);
          v89 = vmul_f32(v86, *v82);
          v90 = vmul_f32(v86, *v83);
          v86.i32[0] = *v85;
          v84 = (float32x2_t *)&v85[(unint64_t)v8 / 4 - 1];
          v88.f32[0] = (float)(vaddv_f32(v88) + (float)(v86.f32[0] * v81[1].f32[0])) * a7;
          v89.f32[0] = (float)(vaddv_f32(v89) + (float)(v86.f32[0] * v82[1].f32[0])) * a7;
          v90.f32[0] = (float)(vaddv_f32(v90) + (float)(v86.f32[0] * v83[1].f32[0])) * a7;
          v80->f32[0] = (float)(vaddv_f32(v87) + (float)(v86.f32[0] * v80[1].f32[0])) * a7;
          v80 = (float32x2_t *)((char *)v80 + 4);
          v81->i32[0] = v88.i32[0];
          v81 = (float32x2_t *)((char *)v81 + 4);
          v82->i32[0] = v89.i32[0];
          v82 = (float32x2_t *)((char *)v82 + 4);
          v83->i32[0] = v90.i32[0];
          v83 = (float32x2_t *)((char *)v83 + 4);
        }
        v91 = *v84;
        v84 = (float32x2_t *)((char *)v84 + v8 + 4);
        v92 = vaddv_f32(vmul_f32(v91, *v81)) * a7;
        v93 = vaddv_f32(vmul_f32(v91, *v82)) * a7;
        v94 = vaddv_f32(vmul_f32(v91, *v83)) * a7;
        v80->f32[0] = vaddv_f32(vmul_f32(v91, *v80)) * a7;
        v80 = (float32x2_t *)((char *)v80 + 4);
        v81->f32[0] = v92;
        v81 = (float32x2_t *)((char *)v81 + 4);
        v82->f32[0] = v93;
        v82 = (float32x2_t *)((char *)v82 + 4);
        v83->f32[0] = v94;
        v83 = (float32x2_t *)((char *)v83 + 4);
      }
      v95 = (float)(v84->f32[0] * v81->f32[0]) * a7;
      v96 = (float)(v84->f32[0] * v82->f32[0]) * a7;
      v97 = (float)(v84->f32[0] * v83->f32[0]) * a7;
      v80->f32[0] = (float)(v84->f32[0] * v80->f32[0]) * a7;
      v81->f32[0] = v95;
      v82->f32[0] = v96;
      v83->f32[0] = v97;
    }
    v9 += 4;
    v78 = v10 <= 4;
    v10 -= 4;
  }
  while (!v78);
  v78 = v10 <= -3;
  a2 = v10 + 3;
  if (!v78)
  {
LABEL_22:
    if (a2 > 1)
    {
      v98 = 0;
      v99 = __OFSUB__(result, 3);
      v100 = result - 3;
      if (result > 3)
      {
        do
        {
          v101 = (int32x4_t *)(a5 + v9 * v7 + 4 * v98);
          v102 = (int32x4_t *)((char *)v101 + v7);
          v103 = (float32x4_t *)(a3 + v98 * v8 + 4 * v98);
          v104 = (float32x4_t *)((char *)v103 + v8);
          v105 = 4 * (result - v98);
          v106 = result - v98 - 4;
          v107 = (float32x2_t *)&v103->u32[(unint64_t)v8 / 2 + 2];
          v108 = &v103->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v110 = *v103;
          v109 = (__int32 *)&v103[1];
          v112 = *v104;
          v111 = (__int32 *)&v104[1];
          v114 = *v107;
          v113 = (__int32 *)&v107[1];
          v116 = *(float *)v108;
          v115 = v108 + 1;
          v118 = *v101;
          v117 = (float32x2_t *)&v101[1];
          v120 = *v102;
          v119 = (float32x2_t *)&v102[1];
          v121 = vtrn1q_s32(v118, v120);
          v122 = vtrn2q_s32(v118, v120);
          *(float32x2_t *)v123.i8 = vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v112, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v112.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v112, 2));
          *(float32x2_t *)v124.i8 = vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v110, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v110.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v110, 2)), vmul_n_f32(*(float32x2_t *)v121.i8, v110.f32[0]));
          v124.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32((float32x2_t)v122.u64[1], v114, 1), vmul_n_f32((float32x2_t)v121.u64[1], v114.f32[0]));
          v123.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)v122.u64[1], v116);
          v125 = (float32x4_t)vtrn1q_s32(v124, v123);
          v126 = (float32x4_t)vtrn2q_s32(v124, v123);
          if ((v106 & 1) != 0)
          {
            v127.i32[0] = *v109++;
            v127.i32[1] = *v111++;
            v127.i32[2] = *v113++;
            v127.i32[3] = *v115++;
            v128 = v117->f32[0];
            v117 = (float32x2_t *)((char *)v117 + 4);
            v129 = v119->f32[0];
            v119 = (float32x2_t *)((char *)v119 + 4);
            v125 = vmlaq_n_f32(v125, v127, v128);
            v126 = vmlaq_n_f32(v126, v127, v129);
            v106 = result - v98 - 5;
          }
          if (v106)
          {
            v130 = 0uLL;
            v131 = 0uLL;
            do
            {
              v132.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v133.i64[0] = *(_QWORD *)v111;
              v111 += 2;
              v134 = *(_QWORD *)v113;
              v113 += 2;
              v135 = *(_QWORD *)v115;
              v115 += 2;
              v136 = *v117++;
              v137 = *v119++;
              v132.i64[1] = v134;
              v133.i64[1] = v135;
              v138 = (float32x4_t)vtrn1q_s32(v132, v133);
              v139 = (float32x4_t)vtrn2q_s32(v132, v133);
              v125 = vmlaq_n_f32(v125, v138, v136.f32[0]);
              v126 = vmlaq_n_f32(v126, v138, v137.f32[0]);
              v130 = vmlaq_lane_f32(v130, v139, v136, 1);
              v131 = vmlaq_lane_f32(v131, v139, v137, 1);
              v78 = v106 <= 2;
              v106 -= 2;
            }
            while (!v78);
            v125 = vaddq_f32(v125, v130);
            v126 = vaddq_f32(v126, v131);
          }
          *(float32x4_t *)&v117->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v125, a7);
          *(float32x4_t *)&v119->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v126, a7);
          v98 += 4;
          v99 = __OFSUB__(v100, 4);
          v78 = v100 <= 4;
          v100 -= 4;
        }
        while (!v78);
      }
      v140 = result & 3;
      if (!v99 && v140 != 0)
      {
        v141 = (float32x2_t *)(a5 + v9 * v7 + 4 * v98);
        v142 = (float32x2_t *)((char *)v141 + v7);
        v143 = (float32x2_t *)(a3 + v98 * v8 + 4 * v98);
        if (v140 != 1)
        {
          if (v140 != 2)
          {
            v145 = *v143;
            v144 = (__int32 *)&v143[1];
            v147 = *v141;
            v146 = v141 + 1;
            v149 = *v142;
            v148 = v142 + 1;
            v150 = vmul_f32(v145, v147);
            v151 = vmul_f32(v145, v149);
            v145.i32[0] = *v144;
            v143 = (float32x2_t *)&v144[(unint64_t)v8 / 4 - 1];
            v147.i32[0] = v146->i32[0];
            --v146;
            v149.i32[0] = v148->i32[0];
            --v148;
            v146->f32[0] = (float)(vaddv_f32(v150) + (float)(v145.f32[0] * v147.f32[0])) * a7;
            v141 = (float32x2_t *)((char *)v146 + 4);
            v148->f32[0] = (float)(vaddv_f32(v151) + (float)(v145.f32[0] * v149.f32[0])) * a7;
            v142 = (float32x2_t *)((char *)v148 + 4);
          }
          v152 = *v143;
          v143 = (float32x2_t *)((char *)v143 + v8 + 4);
          v153 = vaddv_f32(vmul_f32(v152, *v142)) * a7;
          v141->f32[0] = vaddv_f32(vmul_f32(v152, *v141)) * a7;
          v141 = (float32x2_t *)((char *)v141 + 4);
          v142->f32[0] = v153;
          v142 = (float32x2_t *)((char *)v142 + 4);
        }
        v154 = (float)(v143->f32[0] * v142->f32[0]) * a7;
        v141->f32[0] = (float)(v143->f32[0] * v141->f32[0]) * a7;
        v142->f32[0] = v154;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v155 = 0;
      v156 = __OFSUB__(result, 3);
      v157 = result - 3;
      if (result > 3)
      {
        do
        {
          v158 = (float32x4_t *)(a5 + v9 * v7 + 4 * v155);
          v159 = (float32x4_t *)(a3 + v155 * v8 + 4 * v155);
          v160 = (float32x4_t *)((char *)v159 + v8);
          v161 = result - v155 - 4;
          v162 = (float32x2_t *)&v159->u32[(unint64_t)v8 / 2 + 2];
          v163 = &v159->f32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v165 = *v159;
          v164 = (__int32 *)&v159[1];
          v167 = *v160;
          v166 = (__int32 *)&v160[1];
          v169 = *v162;
          v168 = (__int32 *)&v162[1];
          v171 = *v163;
          v170 = (__int32 *)(v163 + 1);
          v173 = *v158;
          v172 = (float32x2_t *)&v158[1];
          v167.i32[0] = 0;
          v174 = vmulq_f32(v165, v173);
          v175 = vmulq_f32(v167, v173);
          v176.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v174, v174));
          v176.f32[3] = v171 * v173.f32[3];
          v176.i32[2] = vaddv_f32(vmul_f32(v169, *(float32x2_t *)&v173.u32[2]));
          v176.i32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v175, v175));
          if ((v161 & 1) != 0)
          {
            v177.i32[0] = *v164++;
            v177.i32[1] = *v166++;
            v177.i32[2] = *v168++;
            v177.i32[3] = *v170++;
            v178 = v172->f32[0];
            v172 = (float32x2_t *)((char *)v172 + 4);
            v176 = vmlaq_n_f32(v176, v177, v178);
            v161 = result - v155 - 5;
          }
          if (v161)
          {
            v179 = 0uLL;
            do
            {
              v180.i64[0] = *(_QWORD *)v164;
              v164 += 2;
              v181.i64[0] = *(_QWORD *)v166;
              v166 += 2;
              v182 = *(_QWORD *)v168;
              v168 += 2;
              v183 = *(_QWORD *)v170;
              v170 += 2;
              v184 = *v172++;
              v180.i64[1] = v182;
              v181.i64[1] = v183;
              v176 = vmlaq_n_f32(v176, (float32x4_t)vtrn1q_s32(v180, v181), v184.f32[0]);
              v179 = vmlaq_lane_f32(v179, (float32x4_t)vtrn2q_s32(v180, v181), v184, 1);
              v78 = v161 <= 2;
              v161 -= 2;
            }
            while (!v78);
            v176 = vaddq_f32(v176, v179);
          }
          *(float32x4_t *)&v172->f32[-(result - v155)] = vmulq_n_f32(v176, a7);
          v155 += 4;
          v156 = __OFSUB__(v157, 4);
          v78 = v157 <= 4;
          v157 -= 4;
        }
        while (!v78);
      }
      v185 = result & 3;
      if (!v156 && v185 != 0)
      {
        v186 = (float32x2_t *)(a5 + v9 * v7 + 4 * v155);
        v187 = (float32x2_t *)(a3 + v155 * v8 + 4 * v155);
        if (v185 != 1)
        {
          if (v185 != 2)
          {
            v189 = *v187;
            v188 = (float *)&v187[1];
            v190 = *v188;
            v187 = (float32x2_t *)&v188[(unint64_t)v8 / 4 - 1];
            v186->f32[0] = (float)(vaddv_f32(vmul_f32(v189, *v186)) + (float)(v190 * v186[1].f32[0])) * a7;
            v186 = (float32x2_t *)((char *)v186 + 4);
          }
          v191 = *v187;
          v187 = (float32x2_t *)((char *)v187 + v8 + 4);
          v186->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v191, *v186), a7));
          v186 = (float32x2_t *)((char *)v186 + 4);
        }
        v186->f32[0] = (float)(v187->f32[0] * v186->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_LLTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x2_t v27;
  __int32 *v28;
  float v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  BOOL v75;
  uint64_t v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int32x2_t *v80;
  float *v81;
  float32x2_t v82;
  int32x2_t *v83;
  float v84;
  float v85;
  int32x2_t *v86;
  float v87;
  float v88;
  int32x2_t *v89;
  float v90;
  float v91;
  int32x2_t *v92;
  float v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int32x4_t *v106;
  int32x4_t *v107;
  float32x4_t *v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t *v111;
  __int32 *v112;
  __int32 *v113;
  __int32 *v114;
  float32x4_t v115;
  __int32 *v116;
  float32x2_t v117;
  __int32 *v118;
  float v119;
  float32x2_t *v120;
  int32x4_t v121;
  float32x2_t *v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float v131;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  int32x2_t *v144;
  int32x2_t *v145;
  float *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float v149;
  float32x2_t *v150;
  float v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  __int32 *v165;
  float32x4_t v166;
  __int32 *v167;
  float32x2_t v168;
  __int32 *v169;
  float v170;
  float32x2_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float v177;
  float32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x2_t v183;
  uint64_t v184;
  _QWORD *v185;
  float32x2_t *v186;
  float32x2_t v187;
  _QWORD *v188;
  float v189;
  float32x2_t v190;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = 4 * (result - v11);
        v20 = result - v11 - 4;
        v21 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 4 + 2];
        v22 = &v18->i32[(unint64_t)v8 / 2 + 3];
        v23 = (__int32 *)((char *)&v18[1] + 2 * v8 + v8);
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v21;
        v26 = (__int32 *)&v21[1];
        v29 = *(float *)v22;
        v28 = v22 + 1;
        v31 = *v14;
        v30 = (float32x2_t *)&v14[1];
        v33 = *v15;
        v32 = (float32x2_t *)&v15[1];
        v35 = *v16;
        v34 = (float32x2_t *)&v16[1];
        v37 = *v17;
        v36 = (float32x2_t *)&v17[1];
        v38 = (int32x4_t)vtrn1q_s64(v31, v35);
        v39 = (int32x4_t)vtrn1q_s64(v33, v37);
        v40 = (int32x4_t)vtrn2q_s64(v31, v35);
        v41 = (int32x4_t)vtrn2q_s64(v33, v37);
        v42 = (float32x4_t)vtrn2q_s32(v38, v39);
        v43 = (float32x4_t)vtrn1q_s32(v40, v41);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (int64x2_t)vmlaq_n_f32(v43, v44, v29);
        v46 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)vtrn1q_s32(v38, v39), v44, v25, 3), v42, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v43, v25, 2));
        v47 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(v42, v44, v27, 1), vmulq_n_f32(v43, v27.f32[0]));
        v48 = (int32x4_t)vtrn1q_s64(v46, v45);
        v49 = (int32x4_t)vtrn1q_s64(v47, (int64x2_t)v44);
        v50 = (int32x4_t)vtrn2q_s64(v46, v45);
        v51 = (int32x4_t)vtrn2q_s64(v47, (int64x2_t)v44);
        v52 = (float32x4_t)vtrn1q_s32(v48, v49);
        v53 = (float32x4_t)vtrn2q_s32(v48, v49);
        v54 = (float32x4_t)vtrn1q_s32(v50, v51);
        v55 = (float32x4_t)vtrn2q_s32(v50, v51);
        if ((v20 & 1) != 0)
        {
          v56.i32[0] = *v24++;
          v56.i32[1] = *v26++;
          v56.i32[2] = *v28++;
          v56.i32[3] = *v23++;
          v57 = v30->f32[0];
          v30 = (float32x2_t *)((char *)v30 + 4);
          v58 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v59 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v60 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v52 = vmlaq_n_f32(v52, v56, v57);
          v53 = vmlaq_n_f32(v53, v56, v58);
          v54 = vmlaq_n_f32(v54, v56, v59);
          v55 = vmlaq_n_f32(v55, v56, v60);
          v20 = result - v11 - 5;
        }
        if (v20)
        {
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          do
          {
            v65.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v66.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v67 = *(_QWORD *)v28;
            v28 += 2;
            v68 = *(_QWORD *)v23;
            v23 += 2;
            v69 = *v30++;
            v70 = *v32++;
            v71 = *v34++;
            v72 = *v36++;
            v65.i64[1] = v67;
            v66.i64[1] = v68;
            v73 = (float32x4_t)vtrn1q_s32(v65, v66);
            v74 = (float32x4_t)vtrn2q_s32(v65, v66);
            v52 = vmlaq_n_f32(v52, v73, v69.f32[0]);
            v53 = vmlaq_n_f32(v53, v73, v70.f32[0]);
            v54 = vmlaq_n_f32(v54, v73, v71.f32[0]);
            v55 = vmlaq_n_f32(v55, v73, v72.f32[0]);
            v61 = vmlaq_lane_f32(v61, v74, v69, 1);
            v62 = vmlaq_lane_f32(v62, v74, v70, 1);
            v63 = vmlaq_lane_f32(v63, v74, v71, 1);
            v64 = vmlaq_lane_f32(v64, v74, v72, 1);
            v75 = v20 <= 2;
            v20 -= 2;
          }
          while (!v75);
          v52 = vaddq_f32(v52, v61);
          v53 = vaddq_f32(v53, v62);
          v54 = vaddq_f32(v54, v63);
          v55 = vaddq_f32(v55, v64);
        }
        *(float32x4_t *)&v30->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v52, a7);
        *(float32x4_t *)&v32->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v53, a7);
        *(float32x4_t *)&v34->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v54, a7);
        *(float32x4_t *)&v36->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v75 = v13 <= 4;
        v13 -= 4;
      }
      while (!v75);
    }
    v76 = result & 3;
    if (!v12 && v76 != 0)
    {
      v77 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v78 = (int32x2_t *)((char *)v77 + v7);
      v79 = &v77[(unint64_t)v7 / 4];
      v80 = (int32x2_t *)((char *)&v77[(unint64_t)v7 / 4] + v7);
      v81 = (float *)(a3 + v11 * v8 + 4 * v11 + 4);
      if (v76 != 1)
      {
        if (v76 != 2)
        {
          v82 = *(float32x2_t *)v81;
          v81 = (float *)((char *)v81 + v8 + 4);
          v84 = *(float *)v77->i32;
          v83 = (int32x2_t *)((char *)v77 + 4);
          v85 = v84;
          v87 = *(float *)v78->i32;
          v86 = (int32x2_t *)((char *)v78 + 4);
          v88 = v87;
          v90 = *(float *)v79->i32;
          v89 = (int32x2_t *)((char *)v79 + 4);
          v91 = v90;
          v93 = *(float *)v80->i32;
          v92 = (int32x2_t *)((char *)v80 + 4);
          v94 = (float32x2_t)*v83;
          v83 = (int32x2_t *)((char *)v83 - 4);
          v95 = (float32x2_t)*v86;
          v86 = (int32x2_t *)((char *)v86 - 4);
          v96 = (float32x2_t)*v89;
          v89 = (int32x2_t *)((char *)v89 - 4);
          v97 = (float32x2_t)*v92;
          v92 = (int32x2_t *)((char *)v92 - 4);
          *(float *)v83->i32 = (float)(vaddv_f32(vmul_f32(v82, v94)) + v85) * a7;
          v77 = (int32x2_t *)((char *)v83 + 4);
          *(float *)v86->i32 = (float)(vaddv_f32(vmul_f32(v82, v95)) + v88) * a7;
          v78 = (int32x2_t *)((char *)v86 + 4);
          *(float *)v89->i32 = (float)(vaddv_f32(vmul_f32(v82, v96)) + v91) * a7;
          v79 = (int32x2_t *)((char *)v89 + 4);
          *(float *)v92->i32 = (float)(vaddv_f32(vmul_f32(v82, v97)) + v93) * a7;
          v80 = (int32x2_t *)((char *)v92 + 4);
        }
        v98 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v77, *v78), vmul_n_f32((float32x2_t)vtrn2_s32(*v77, *v78), *v81)), a7);
        v99 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v79, *v80), vmul_n_f32((float32x2_t)vtrn2_s32(*v79, *v80), *v81)), a7);
        v77->i32[0] = v98.i32[0];
        v77 = (int32x2_t *)((char *)v77 + 4);
        v78->i32[0] = v98.i32[1];
        v78 = (int32x2_t *)((char *)v78 + 4);
        v79->i32[0] = v99.i32[0];
        v79 = (int32x2_t *)((char *)v79 + 4);
        v80->i32[0] = v99.i32[1];
        v80 = (int32x2_t *)((char *)v80 + 4);
      }
      v100 = *(float *)v78->i32 * a7;
      v101 = *(float *)v79->i32 * a7;
      v102 = *(float *)v80->i32 * a7;
      *(float *)v77->i32 = *(float *)v77->i32 * a7;
      *(float *)v78->i32 = v100;
      *(float *)v79->i32 = v101;
      *(float *)v80->i32 = v102;
    }
    v9 += 4;
    v75 = v10 <= 4;
    v10 -= 4;
  }
  while (!v75);
  v75 = v10 <= -3;
  a2 = v10 + 3;
  if (!v75)
  {
LABEL_22:
    if (a2 > 1)
    {
      v103 = 0;
      v104 = __OFSUB__(result, 3);
      v105 = result - 3;
      if (result > 3)
      {
        do
        {
          v106 = (int32x4_t *)(a5 + v9 * v7 + 4 * v103);
          v107 = (int32x4_t *)((char *)v106 + v7);
          v108 = (float32x4_t *)(a3 + v103 * v8 + 4 * v103);
          v109 = 4 * (result - v103);
          v110 = result - v103 - 4;
          v111 = (float32x2_t *)&v108->u32[(unint64_t)v8 / 4 + 2];
          v112 = &v108->i32[(unint64_t)v8 / 2 + 3];
          v113 = (__int32 *)((char *)&v108[1] + 2 * v8 + v8);
          v115 = *v108;
          v114 = (__int32 *)&v108[1];
          v117 = *v111;
          v116 = (__int32 *)&v111[1];
          v119 = *(float *)v112;
          v118 = v112 + 1;
          v121 = *v106;
          v120 = (float32x2_t *)&v106[1];
          v123 = *v107;
          v122 = (float32x2_t *)&v107[1];
          v124 = vtrn1q_s32(v121, v123);
          v125 = vtrn2q_s32(v121, v123);
          *(float32x2_t *)v126.i8 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)v124.i8, (float32x2_t)v125.u64[1], v115, 3), *(float32x2_t *)v125.i8, *(float32x2_t *)v115.f32, 1), vmul_laneq_f32((float32x2_t)v124.u64[1], v115, 2));
          *(float32x2_t *)v127.i8 = vadd_f32(vmla_lane_f32(*(float32x2_t *)v125.i8, (float32x2_t)v125.u64[1], v117, 1), vmul_n_f32((float32x2_t)v124.u64[1], v117.f32[0]));
          v126.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v124.u64[1], (float32x2_t)v125.u64[1], v119);
          v127.i64[1] = v125.i64[1];
          v128 = (float32x4_t)vtrn1q_s32(v126, v127);
          v129 = (float32x4_t)vtrn2q_s32(v126, v127);
          if ((v110 & 1) != 0)
          {
            v130.i32[0] = *v114++;
            v130.i32[1] = *v116++;
            v130.i32[2] = *v118++;
            v130.i32[3] = *v113++;
            v131 = v120->f32[0];
            v120 = (float32x2_t *)((char *)v120 + 4);
            v132 = v122->f32[0];
            v122 = (float32x2_t *)((char *)v122 + 4);
            v128 = vmlaq_n_f32(v128, v130, v131);
            v129 = vmlaq_n_f32(v129, v130, v132);
            v110 = result - v103 - 5;
          }
          if (v110)
          {
            v133 = 0uLL;
            v134 = 0uLL;
            do
            {
              v135.i64[0] = *(_QWORD *)v114;
              v114 += 2;
              v136.i64[0] = *(_QWORD *)v116;
              v116 += 2;
              v137 = *(_QWORD *)v118;
              v118 += 2;
              v138 = *(_QWORD *)v113;
              v113 += 2;
              v139 = *v120++;
              v140 = *v122++;
              v135.i64[1] = v137;
              v136.i64[1] = v138;
              v141 = (float32x4_t)vtrn1q_s32(v135, v136);
              v142 = (float32x4_t)vtrn2q_s32(v135, v136);
              v128 = vmlaq_n_f32(v128, v141, v139.f32[0]);
              v129 = vmlaq_n_f32(v129, v141, v140.f32[0]);
              v133 = vmlaq_lane_f32(v133, v142, v139, 1);
              v134 = vmlaq_lane_f32(v134, v142, v140, 1);
              v75 = v110 <= 2;
              v110 -= 2;
            }
            while (!v75);
            v128 = vaddq_f32(v128, v133);
            v129 = vaddq_f32(v129, v134);
          }
          *(float32x4_t *)&v120->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v128, a7);
          *(float32x4_t *)&v122->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v129, a7);
          v103 += 4;
          v104 = __OFSUB__(v105, 4);
          v75 = v105 <= 4;
          v105 -= 4;
        }
        while (!v75);
      }
      v143 = result & 3;
      if (!v104 && v143 != 0)
      {
        v144 = (int32x2_t *)(a5 + v9 * v7 + 4 * v103);
        v145 = (int32x2_t *)((char *)v144 + v7);
        v146 = (float *)(a3 + v103 * v8 + 4 * v103 + 4);
        if (v143 != 1)
        {
          if (v143 != 2)
          {
            v147 = *(float32x2_t *)v146;
            v146 = (float *)((char *)v146 + v8 + 4);
            v149 = *(float *)v144->i32;
            v148 = (float32x2_t *)((char *)v144 + 4);
            v151 = *(float *)v145->i32;
            v150 = (float32x2_t *)((char *)v145 + 4);
            v152 = vmul_f32(v147, *v148);
            v153 = vmul_f32(v147, *v150);
            v148 = (float32x2_t *)((char *)v148 - 4);
            v150 = (float32x2_t *)((char *)v150 - 4);
            v148->f32[0] = (float)(vaddv_f32(v152) + v149) * a7;
            v144 = (int32x2_t *)((char *)v148 + 4);
            v150->f32[0] = (float)(vaddv_f32(v153) + v151) * a7;
            v145 = (int32x2_t *)((char *)v150 + 4);
          }
          v154 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v144, *v145), vmul_n_f32((float32x2_t)vtrn2_s32(*v144, *v145), *v146)), a7);
          v144->i32[0] = v154.i32[0];
          v144 = (int32x2_t *)((char *)v144 + 4);
          v145->i32[0] = v154.i32[1];
          v145 = (int32x2_t *)((char *)v145 + 4);
        }
        v155 = *(float *)v145->i32 * a7;
        *(float *)v144->i32 = *(float *)v144->i32 * a7;
        *(float *)v145->i32 = v155;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v156 = 0;
      v157 = __OFSUB__(result, 3);
      v158 = result - 3;
      if (result > 3)
      {
        do
        {
          v159 = (float32x4_t *)(a5 + v9 * v7 + 4 * v156);
          v160 = (float32x4_t *)(a3 + v156 * v8 + 4 * v156);
          v161 = result - v156 - 4;
          v162 = (float32x2_t *)&v160->u32[(unint64_t)v8 / 4 + 2];
          v163 = &v160->f32[(unint64_t)v8 / 2 + 3];
          v164 = (__int32 *)((char *)&v160[1] + 2 * v8 + v8);
          v166 = *v160;
          v165 = (__int32 *)&v160[1];
          v168 = *v162;
          v167 = (__int32 *)&v162[1];
          v170 = *v163;
          v169 = (__int32 *)(v163 + 1);
          v172 = *v159;
          v171 = (float32x2_t *)&v159[1];
          v166.i32[0] = 0;
          v173 = vmulq_f32(v166, v172);
          v174.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v173, v173));
          v174.i64[1] = COERCE_UNSIGNED_INT(v170 * v172.f32[3]);
          v174.i32[1] = vaddv_f32(vmul_f32(v168, *(float32x2_t *)&v172.u32[2]));
          v175 = vaddq_f32(v174, v172);
          if ((v161 & 1) != 0)
          {
            v176.i32[0] = *v165++;
            v176.i32[1] = *v167++;
            v176.i32[2] = *v169++;
            v176.i32[3] = *v164++;
            v177 = v171->f32[0];
            v171 = (float32x2_t *)((char *)v171 + 4);
            v175 = vmlaq_n_f32(v175, v176, v177);
            v161 = result - v156 - 5;
          }
          if (v161)
          {
            v178 = 0uLL;
            do
            {
              v179.i64[0] = *(_QWORD *)v165;
              v165 += 2;
              v180.i64[0] = *(_QWORD *)v167;
              v167 += 2;
              v181 = *(_QWORD *)v169;
              v169 += 2;
              v182 = *(_QWORD *)v164;
              v164 += 2;
              v183 = *v171++;
              v179.i64[1] = v181;
              v180.i64[1] = v182;
              v175 = vmlaq_n_f32(v175, (float32x4_t)vtrn1q_s32(v179, v180), v183.f32[0]);
              v178 = vmlaq_lane_f32(v178, (float32x4_t)vtrn2q_s32(v179, v180), v183, 1);
              v75 = v161 <= 2;
              v161 -= 2;
            }
            while (!v75);
            v175 = vaddq_f32(v175, v178);
          }
          *(float32x4_t *)&v171->f32[-(result - v156)] = vmulq_n_f32(v175, a7);
          v156 += 4;
          v157 = __OFSUB__(v158, 4);
          v75 = v158 <= 4;
          v158 -= 4;
        }
        while (!v75);
      }
      v184 = result & 3;
      if (!v157 && v184 != 0)
      {
        v185 = (_QWORD *)(a5 + v9 * v7 + 4 * v156);
        v186 = (float32x2_t *)(a3 + v156 * v8 + 4 * v156 + 4);
        if (v184 != 1)
        {
          if (v184 != 2)
          {
            v187 = *v186;
            v186 = (float32x2_t *)((char *)v186 + v8 + 4);
            v189 = *(float *)v185;
            v188 = (_QWORD *)((char *)v185 + 4);
            v190 = *(float32x2_t *)v188;
            v188 = (_QWORD *)((char *)v188 - 4);
            *(float *)v188 = (float)(vaddv_f32(vmul_f32(v187, v190)) + v189) * a7;
            v185 = (_QWORD *)((char *)v188 + 4);
          }
          *(float *)v185 = (float)((float)(COERCE_FLOAT(HIDWORD(*v185)) * v186->f32[0]) + COERCE_FLOAT(*v185)) * a7;
          v185 = (_QWORD *)((char *)v185 + 4);
        }
        *(float *)v185 = *(float *)v185 * a7;
      }
    }
  }
  return result;
}

double AccelerateAR_ComputeZernikePolyAndDerivatives(unsigned int a1, char a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double result, double a10, double a11)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;

  if (a1 <= 8)
  {
    v11 = 1.0;
    if ((a2 & 1) != 0)
    {
LABEL_4:
      v12 = 1.0 - v11;
      *a3 = 1.0 - v12;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)a5 = 0;
      *(_QWORD *)a6 = 0;
      *(_QWORD *)a7 = 0;
      *(_QWORD *)a8 = 0;
      if (a1)
      {
        result = 1.0 / result;
        v13 = result * result;
        v14 = result * a10;
        v15 = result * a11;
        v16 = v15 * v15 + v14 * v14;
        a3[1] = v14;
        a3[2] = v15;
        *(double *)(a4 + 8) = result;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(double *)(a5 + 16) = result;
        *(_QWORD *)(a6 + 8) = 0;
        *(_QWORD *)(a6 + 16) = 0;
        *(_QWORD *)(a8 + 8) = 0;
        *(_QWORD *)(a8 + 16) = 0;
        v17 = v16 * 2.0 + -1.0;
        *(_QWORD *)(a7 + 8) = 0;
        *(_QWORD *)(a7 + 16) = 0;
        a3[3] = v17 + v12;
        *(double *)(a4 + 24) = result * (v14 * 4.0);
        *(double *)(a5 + 24) = result * (v15 * 4.0);
        v18 = result * result * 4.0;
        *(double *)(a6 + 24) = v18;
        *(double *)(a8 + 24) = v18;
        *(_QWORD *)(a7 + 24) = 0;
        if (a1 != 1)
        {
          v19 = v14 * v14 - v15 * v15;
          v20 = v14 * v15 + v15 * v14;
          a3[4] = v19;
          a3[5] = v20;
          v21 = (result + result) * v14;
          v22 = (result + result) * v15;
          *(double *)(a4 + 32) = v21;
          *(double *)(a4 + 40) = v22;
          *(double *)(a5 + 32) = -v22;
          *(double *)(a5 + 40) = v21;
          *(double *)(a6 + 32) = v13 + v13;
          *(_QWORD *)(a6 + 40) = 0;
          *(double *)(a8 + 32) = v13 * -2.0;
          *(_QWORD *)(a8 + 40) = 0;
          *(_QWORD *)(a7 + 32) = 0;
          *(double *)(a7 + 40) = v13 + v13;
          v23 = v16 + v17 + -1.0;
          a3[6] = v14 * v23;
          a3[7] = v15 * v23;
          v24 = result * 3.0;
          *(double *)(a4 + 48) = result + result * 3.0 * (v17 + a3[4]);
          v25 = result * 3.0 * a3[5];
          *(double *)(a4 + 56) = v25;
          *(double *)(a5 + 48) = v25;
          *(double *)(a5 + 56) = result + result * 3.0 * (v17 - a3[4]);
          v26 = v13 * (v15 * 6.0);
          v27 = v13 * (v14 * 6.0);
          *(double *)(a7 + 48) = v26;
          *(double *)(a7 + 56) = v27;
          *(double *)(a6 + 48) = v27 * 3.0;
          *(_QWORD *)(a6 + 56) = *(_QWORD *)(a7 + 48);
          *(_QWORD *)(a8 + 48) = *(_QWORD *)(a7 + 56);
          *(double *)(a8 + 56) = *(double *)(a7 + 48) * 3.0;
          v28 = v16 + v16;
          v29 = -(v17 - (v16 + v16) * v23);
          a3[8] = v29 - v12;
          v30 = result * 8.0;
          *(double *)(a4 + 64) = *(double *)(a4 + 24) + result * 8.0 * a3[6];
          *(double *)(a5 + 64) = *(double *)(a5 + 24) + result * 8.0 * a3[7];
          *(double *)(a6 + 64) = *(double *)(a6 + 24) + result * 8.0 * *(double *)(a4 + 48);
          *(double *)(a8 + 64) = *(double *)(a8 + 24) + result * 8.0 * *(double *)(a5 + 56);
          *(double *)(a7 + 64) = result * 8.0 * *(double *)(a4 + 56);
          if (a1 >= 3)
          {
            v31 = -v15;
            v32 = v20 * -v15 + v14 * v19;
            v33 = v14 * v20 + v15 * v19;
            a3[9] = v32;
            a3[10] = v33;
            *(double *)(a4 + 72) = v24 * a3[4];
            v34 = v24 * a3[5];
            *(double *)(a4 + 80) = v34;
            *(double *)(a5 + 72) = -v34;
            *(_QWORD *)(a5 + 80) = *(_QWORD *)(a4 + 72);
            v35 = *(double *)(a4 + 32);
            *(double *)(a6 + 72) = v24 * v35;
            *(double *)(a6 + 80) = v24 * *(double *)(a4 + 40);
            *(double *)(a8 + 72) = -(v24 * v35);
            *(double *)(a8 + 80) = -*(double *)(a6 + 80);
            *(double *)(a7 + 72) = -*(double *)(a6 + 80);
            *(_QWORD *)(a7 + 80) = *(_QWORD *)(a6 + 72);
            v36 = v16 + v23 + -1.0;
            a3[11] = v19 * v36;
            a3[12] = v20 * v36;
            v37 = result * 4.0;
            v38 = *(double *)(a4 + 40);
            *(double *)(a4 + 88) = *(double *)(a4 + 32) + result * 4.0 * (a3[9] + a3[6]);
            *(double *)(a4 + 96) = v38 + result * 4.0 * (a3[7] + a3[10]);
            v39 = *(double *)(a5 + 40);
            *(double *)(a5 + 88) = *(double *)(a5 + 32) + result * 4.0 * (a3[10] - a3[7]);
            *(double *)(a5 + 96) = v39 + result * 4.0 * (a3[6] - a3[9]);
            v40 = *(double *)(a6 + 40);
            *(double *)(a6 + 88) = *(double *)(a6 + 32) + result * 4.0 * (*(double *)(a4 + 72) + *(double *)(a4 + 48));
            *(double *)(a6 + 96) = v40 + result * 4.0 * (*(double *)(a4 + 56) + *(double *)(a4 + 80));
            *(double *)(a8 + 88) = *(double *)(a8 + 32) + result * 4.0 * (*(double *)(a5 + 80) - *(double *)(a5 + 56));
            *(_QWORD *)(a8 + 96) = *(_QWORD *)(a6 + 96);
            *(_QWORD *)(a7 + 88) = 0;
            *(double *)(a7 + 96) = *(double *)(a7 + 40) + result * 4.0 * (*(double *)(a4 + 48) - *(double *)(a4 + 72));
            v41 = v29 + v16 * v36 - v23;
            a3[13] = v14 * v41;
            a3[14] = v15 * v41;
            v42 = result * 5.0;
            v43 = *(double *)(a4 + 56);
            *(double *)(a4 + 104) = *(double *)(a4 + 48) + result * 5.0 * (v29 + a3[11]);
            v44 = v43 + result * 5.0 * a3[12];
            *(double *)(a4 + 112) = v44;
            *(double *)(a5 + 104) = v44;
            *(double *)(a5 + 112) = *(double *)(a5 + 56) + result * 5.0 * (v29 - a3[11]);
            v45 = *(double *)(a6 + 56);
            *(double *)(a6 + 104) = *(double *)(a6 + 48) + result * 5.0 * (*(double *)(a4 + 88) + *(double *)(a4 + 64));
            *(double *)(a6 + 112) = v45 + result * 5.0 * *(double *)(a4 + 96);
            v46 = *(double *)(a8 + 56);
            *(double *)(a8 + 104) = *(double *)(a8 + 48) + result * 5.0 * *(double *)(a5 + 96);
            *(double *)(a8 + 112) = v46 + result * 5.0 * (*(double *)(a5 + 64) - *(double *)(a5 + 88));
            *(_QWORD *)(a7 + 104) = *(_QWORD *)(a6 + 112);
            *(_QWORD *)(a7 + 112) = *(_QWORD *)(a8 + 104);
            v47 = -(v29 - v28 * v41);
            a3[15] = v12 - (v29 - v28 * v41);
            v48 = result * 12.0;
            *(double *)(a4 + 120) = *(double *)(a4 + 64) + result * 12.0 * a3[13];
            *(double *)(a5 + 120) = *(double *)(a5 + 64) + result * 12.0 * a3[14];
            *(double *)(a6 + 120) = *(double *)(a6 + 64) + result * 12.0 * *(double *)(a4 + 104);
            *(double *)(a8 + 120) = *(double *)(a8 + 64) + result * 12.0 * *(double *)(a5 + 112);
            *(double *)(a7 + 120) = *(double *)(a7 + 64) + result * 12.0 * *(double *)(a4 + 112);
            if (a1 != 3)
            {
              v49 = v33 * v31 + v14 * v32;
              v50 = v14 * v33 + v15 * v32;
              a3[16] = v49;
              a3[17] = v50;
              *(double *)(a4 + 128) = v37 * a3[9];
              v51 = v37 * a3[10];
              *(double *)(a4 + 136) = v51;
              *(double *)(a5 + 128) = -v51;
              *(_QWORD *)(a5 + 136) = *(_QWORD *)(a4 + 128);
              v52 = *(double *)(a4 + 72);
              *(double *)(a6 + 128) = v37 * v52;
              *(double *)(a6 + 136) = v37 * *(double *)(a4 + 80);
              *(double *)(a8 + 128) = -(v37 * v52);
              *(double *)(a8 + 136) = -*(double *)(a6 + 136);
              *(double *)(a7 + 128) = -*(double *)(a6 + 136);
              *(_QWORD *)(a7 + 136) = *(_QWORD *)(a6 + 128);
              v53 = v16 + v36 + -1.0;
              a3[18] = v32 * v53;
              a3[19] = v33 * v53;
              v54 = *(double *)(a4 + 80);
              *(double *)(a4 + 144) = *(double *)(a4 + 72) + v42 * (a3[16] + a3[11]);
              *(double *)(a4 + 152) = v54 + v42 * (a3[12] + a3[17]);
              v55 = *(double *)(a5 + 80);
              *(double *)(a5 + 144) = *(double *)(a5 + 72) + v42 * (a3[17] - a3[12]);
              *(double *)(a5 + 152) = v55 + v42 * (a3[11] - a3[16]);
              v56 = *(double *)(a6 + 80);
              *(double *)(a6 + 144) = *(double *)(a6 + 72) + v42 * (*(double *)(a4 + 128) + *(double *)(a4 + 88));
              *(double *)(a6 + 152) = v56 + v42 * (*(double *)(a4 + 96) + *(double *)(a4 + 136));
              v57 = *(double *)(a8 + 80);
              *(double *)(a8 + 144) = *(double *)(a8 + 72) + v42 * (*(double *)(a5 + 136) - *(double *)(a5 + 96));
              *(double *)(a8 + 152) = v57 + v42 * (*(double *)(a5 + 88) - *(double *)(a5 + 128));
              v58 = *(double *)(a7 + 80);
              *(double *)(a7 + 144) = *(double *)(a7 + 72) + v42 * (*(double *)(a4 + 136) - *(double *)(a4 + 96));
              *(double *)(a7 + 152) = v58 + v42 * (*(double *)(a4 + 88) - *(double *)(a4 + 128));
              v59 = v41 + v16 * v53 - v36;
              a3[20] = v19 * v59;
              a3[21] = v20 * v59;
              v60 = result * 6.0;
              v61 = *(double *)(a4 + 96);
              *(double *)(a4 + 160) = *(double *)(a4 + 88) + result * 6.0 * (a3[18] + a3[13]);
              *(double *)(a4 + 168) = v61 + result * 6.0 * (a3[14] + a3[19]);
              v62 = *(double *)(a5 + 96);
              *(double *)(a5 + 160) = *(double *)(a5 + 88) + result * 6.0 * (a3[19] - a3[14]);
              *(double *)(a5 + 168) = v62 + result * 6.0 * (a3[13] - a3[18]);
              v63 = *(double *)(a6 + 96);
              *(double *)(a6 + 160) = *(double *)(a6 + 88)
                                    + result * 6.0 * (*(double *)(a4 + 144) + *(double *)(a4 + 104));
              *(double *)(a6 + 168) = v63 + result * 6.0 * (*(double *)(a4 + 112) + *(double *)(a4 + 152));
              v64 = *(double *)(a8 + 96);
              *(double *)(a8 + 160) = *(double *)(a8 + 88)
                                    + result * 6.0 * (*(double *)(a5 + 152) - *(double *)(a5 + 112));
              *(double *)(a8 + 168) = v64 + result * 6.0 * (*(double *)(a5 + 104) - *(double *)(a5 + 144));
              v65 = *(double *)(a7 + 96);
              *(double *)(a7 + 160) = *(double *)(a7 + 88)
                                    + result * 6.0 * (*(double *)(a4 + 152) - *(double *)(a4 + 112));
              *(double *)(a7 + 168) = v65 + result * 6.0 * (*(double *)(a4 + 104) - *(double *)(a4 + 144));
              v66 = v47 + v16 * v59 - v41;
              a3[22] = v14 * v66;
              a3[23] = v15 * v66;
              v67 = result * 7.0;
              v68 = *(double *)(a4 + 112);
              *(double *)(a4 + 176) = *(double *)(a4 + 104) + result * 7.0 * (v47 + a3[20]);
              v69 = v68 + result * 7.0 * a3[21];
              *(double *)(a4 + 184) = v69;
              *(double *)(a5 + 176) = v69;
              *(double *)(a5 + 184) = *(double *)(a5 + 112) + result * 7.0 * (v47 - a3[20]);
              v70 = *(double *)(a6 + 112);
              *(double *)(a6 + 176) = *(double *)(a6 + 104)
                                    + result * 7.0 * (*(double *)(a4 + 160) + *(double *)(a4 + 120));
              *(double *)(a6 + 184) = v70 + result * 7.0 * *(double *)(a4 + 168);
              v71 = *(double *)(a8 + 112);
              *(double *)(a8 + 176) = *(double *)(a8 + 104) + result * 7.0 * *(double *)(a5 + 168);
              *(double *)(a8 + 184) = v71 + result * 7.0 * (*(double *)(a5 + 120) - *(double *)(a5 + 160));
              *(_QWORD *)(a7 + 176) = *(_QWORD *)(a6 + 184);
              *(_QWORD *)(a7 + 184) = *(_QWORD *)(a8 + 176);
              v72 = -(v47 - v28 * v66);
              a3[24] = v72 - v12;
              *(double *)(a4 + 192) = *(double *)(a4 + 120) + result * 16.0 * a3[22];
              *(double *)(a5 + 192) = *(double *)(a5 + 120) + result * 16.0 * a3[23];
              *(double *)(a6 + 192) = *(double *)(a6 + 120) + result * 16.0 * *(double *)(a4 + 176);
              *(double *)(a8 + 192) = *(double *)(a8 + 120) + result * 16.0 * *(double *)(a5 + 184);
              *(double *)(a7 + 192) = *(double *)(a7 + 120) + result * 16.0 * *(double *)(a4 + 184);
              if (a1 >= 5)
              {
                v73 = v50 * v31 + v14 * v49;
                v74 = v14 * v50 + v15 * v49;
                a3[25] = v73;
                a3[26] = v74;
                *(double *)(a4 + 200) = v42 * a3[16];
                v75 = v42 * a3[17];
                *(double *)(a4 + 208) = v75;
                *(double *)(a5 + 200) = -v75;
                *(_QWORD *)(a5 + 208) = *(_QWORD *)(a4 + 200);
                v76 = *(double *)(a4 + 128);
                *(double *)(a6 + 200) = v42 * v76;
                *(double *)(a6 + 208) = v42 * *(double *)(a4 + 136);
                *(double *)(a8 + 200) = -(v42 * v76);
                *(double *)(a8 + 208) = -*(double *)(a6 + 208);
                *(double *)(a7 + 200) = -*(double *)(a6 + 208);
                *(_QWORD *)(a7 + 208) = *(_QWORD *)(a6 + 200);
                v77 = v16 + v53 + -1.0;
                a3[27] = v49 * v77;
                a3[28] = v50 * v77;
                v78 = *(double *)(a4 + 136);
                *(double *)(a4 + 216) = *(double *)(a4 + 128) + v60 * (a3[25] + a3[18]);
                *(double *)(a4 + 224) = v78 + v60 * (a3[19] + a3[26]);
                v79 = *(double *)(a5 + 136);
                *(double *)(a5 + 216) = *(double *)(a5 + 128) + v60 * (a3[26] - a3[19]);
                *(double *)(a5 + 224) = v79 + v60 * (a3[18] - a3[25]);
                v80 = *(double *)(a6 + 136);
                *(double *)(a6 + 216) = *(double *)(a6 + 128) + v60 * (*(double *)(a4 + 200) + *(double *)(a4 + 144));
                *(double *)(a6 + 224) = v80 + v60 * (*(double *)(a4 + 152) + *(double *)(a4 + 208));
                v81 = *(double *)(a8 + 136);
                *(double *)(a8 + 216) = *(double *)(a8 + 128) + v60 * (*(double *)(a5 + 208) - *(double *)(a5 + 152));
                *(double *)(a8 + 224) = v81 + v60 * (*(double *)(a5 + 144) - *(double *)(a5 + 200));
                v82 = *(double *)(a7 + 136);
                *(double *)(a7 + 216) = *(double *)(a7 + 128) + v60 * (*(double *)(a4 + 208) - *(double *)(a4 + 152));
                *(double *)(a7 + 224) = v82 + v60 * (*(double *)(a4 + 144) - *(double *)(a4 + 200));
                v83 = v59 + v16 * v77 - v53;
                a3[29] = v32 * v83;
                a3[30] = v33 * v83;
                v84 = *(double *)(a4 + 152);
                *(double *)(a4 + 232) = *(double *)(a4 + 144) + v67 * (a3[27] + a3[20]);
                *(double *)(a4 + 240) = v84 + v67 * (a3[21] + a3[28]);
                v85 = *(double *)(a5 + 152);
                *(double *)(a5 + 232) = *(double *)(a5 + 144) + v67 * (a3[28] - a3[21]);
                *(double *)(a5 + 240) = v85 + v67 * (a3[20] - a3[27]);
                v86 = *(double *)(a6 + 152);
                *(double *)(a6 + 232) = *(double *)(a6 + 144) + v67 * (*(double *)(a4 + 216) + *(double *)(a4 + 160));
                *(double *)(a6 + 240) = v86 + v67 * (*(double *)(a4 + 168) + *(double *)(a4 + 224));
                v87 = *(double *)(a8 + 152);
                *(double *)(a8 + 232) = *(double *)(a8 + 144) + v67 * (*(double *)(a5 + 224) - *(double *)(a5 + 168));
                *(double *)(a8 + 240) = v87 + v67 * (*(double *)(a5 + 160) - *(double *)(a5 + 216));
                v88 = *(double *)(a7 + 152);
                *(double *)(a7 + 232) = *(double *)(a7 + 144) + v67 * (*(double *)(a4 + 224) - *(double *)(a4 + 168));
                *(double *)(a7 + 240) = v88 + v67 * (*(double *)(a4 + 160) - *(double *)(a4 + 216));
                v89 = v66 + v16 * v83 - v59;
                a3[31] = v19 * v89;
                a3[32] = v20 * v89;
                v90 = *(double *)(a4 + 168);
                *(double *)(a4 + 248) = *(double *)(a4 + 160) + v30 * (a3[29] + a3[22]);
                *(double *)(a4 + 256) = v90 + v30 * (a3[23] + a3[30]);
                v91 = *(double *)(a5 + 168);
                *(double *)(a5 + 248) = *(double *)(a5 + 160) + v30 * (a3[30] - a3[23]);
                *(double *)(a5 + 256) = v91 + v30 * (a3[22] - a3[29]);
                v92 = *(double *)(a6 + 168);
                *(double *)(a6 + 248) = *(double *)(a6 + 160) + v30 * (*(double *)(a4 + 232) + *(double *)(a4 + 176));
                *(double *)(a6 + 256) = v92 + v30 * (*(double *)(a4 + 184) + *(double *)(a4 + 240));
                v93 = *(double *)(a8 + 168);
                *(double *)(a8 + 248) = *(double *)(a8 + 160) + v30 * (*(double *)(a5 + 240) - *(double *)(a5 + 184));
                *(double *)(a8 + 256) = v93 + v30 * (*(double *)(a5 + 176) - *(double *)(a5 + 232));
                v94 = *(double *)(a7 + 168);
                *(double *)(a7 + 248) = *(double *)(a7 + 160) + v30 * (*(double *)(a4 + 240) - *(double *)(a4 + 184));
                *(double *)(a7 + 256) = v94 + v30 * (*(double *)(a4 + 176) - *(double *)(a4 + 232));
                v95 = v72 + v16 * v89 - v66;
                a3[33] = v14 * v95;
                a3[34] = v15 * v95;
                v96 = result * 9.0;
                v97 = *(double *)(a4 + 184);
                *(double *)(a4 + 264) = *(double *)(a4 + 176) + result * 9.0 * (v72 + a3[31]);
                v98 = v97 + result * 9.0 * a3[32];
                *(double *)(a4 + 272) = v98;
                *(double *)(a5 + 264) = v98;
                *(double *)(a5 + 272) = *(double *)(a5 + 184) + result * 9.0 * (v72 - a3[31]);
                v99 = *(double *)(a6 + 184);
                *(double *)(a6 + 264) = *(double *)(a6 + 176)
                                      + result * 9.0 * (*(double *)(a4 + 248) + *(double *)(a4 + 192));
                *(double *)(a6 + 272) = v99 + result * 9.0 * *(double *)(a4 + 256);
                v100 = *(double *)(a8 + 184);
                *(double *)(a8 + 264) = *(double *)(a8 + 176) + result * 9.0 * *(double *)(a5 + 256);
                *(double *)(a8 + 272) = v100 + result * 9.0 * (*(double *)(a5 + 192) - *(double *)(a5 + 248));
                *(_QWORD *)(a7 + 264) = *(_QWORD *)(a6 + 272);
                *(_QWORD *)(a7 + 272) = *(_QWORD *)(a8 + 264);
                v101 = -(v72 - v28 * v95);
                a3[35] = v12 - (v72 - v28 * v95);
                *(double *)(a4 + 280) = *(double *)(a4 + 192) + result * 20.0 * a3[33];
                *(double *)(a5 + 280) = *(double *)(a5 + 192) + result * 20.0 * a3[34];
                *(double *)(a6 + 280) = *(double *)(a6 + 192) + result * 20.0 * *(double *)(a4 + 264);
                *(double *)(a8 + 280) = *(double *)(a8 + 192) + result * 20.0 * *(double *)(a5 + 272);
                *(double *)(a7 + 280) = *(double *)(a7 + 192) + result * 20.0 * *(double *)(a4 + 272);
                if (a1 != 5)
                {
                  v102 = v74 * v31 + v14 * v73;
                  a3[36] = v102;
                  a3[37] = v14 * v74 + v15 * v73;
                  v223 = v14 * v74 + v15 * v73;
                  *(double *)(a4 + 288) = v60 * a3[25];
                  v103 = v60 * a3[26];
                  *(double *)(a4 + 296) = v103;
                  *(double *)(a5 + 288) = -v103;
                  *(_QWORD *)(a5 + 296) = *(_QWORD *)(a4 + 288);
                  v104 = *(double *)(a4 + 200);
                  *(double *)(a6 + 288) = v60 * v104;
                  *(double *)(a6 + 296) = v60 * *(double *)(a4 + 208);
                  *(double *)(a8 + 288) = -(v60 * v104);
                  *(double *)(a8 + 296) = -*(double *)(a6 + 296);
                  *(double *)(a7 + 288) = -*(double *)(a6 + 296);
                  *(_QWORD *)(a7 + 296) = *(_QWORD *)(a6 + 288);
                  v105 = v16 + v77 + -1.0;
                  a3[38] = v73 * v105;
                  a3[39] = v74 * v105;
                  v106 = *(double *)(a4 + 208);
                  *(double *)(a4 + 304) = *(double *)(a4 + 200) + v67 * (a3[36] + a3[27]);
                  *(double *)(a4 + 312) = v106 + v67 * (a3[28] + a3[37]);
                  v107 = *(double *)(a5 + 208);
                  *(double *)(a5 + 304) = *(double *)(a5 + 200) + v67 * (a3[37] - a3[28]);
                  *(double *)(a5 + 312) = v107 + v67 * (a3[27] - a3[36]);
                  v108 = *(double *)(a6 + 208);
                  *(double *)(a6 + 304) = *(double *)(a6 + 200) + v67 * (*(double *)(a4 + 288) + *(double *)(a4 + 216));
                  *(double *)(a6 + 312) = v108 + v67 * (*(double *)(a4 + 224) + *(double *)(a4 + 296));
                  v109 = *(double *)(a8 + 208);
                  *(double *)(a8 + 304) = *(double *)(a8 + 200) + v67 * (*(double *)(a5 + 296) - *(double *)(a5 + 224));
                  *(double *)(a8 + 312) = v109 + v67 * (*(double *)(a5 + 216) - *(double *)(a5 + 288));
                  v110 = *(double *)(a7 + 208);
                  *(double *)(a7 + 304) = *(double *)(a7 + 200) + v67 * (*(double *)(a4 + 296) - *(double *)(a4 + 224));
                  *(double *)(a7 + 312) = v110 + v67 * (*(double *)(a4 + 216) - *(double *)(a4 + 288));
                  v111 = v83 + v16 * v105 - v77;
                  a3[40] = v49 * v111;
                  a3[41] = v50 * v111;
                  v112 = *(double *)(a4 + 224);
                  *(double *)(a4 + 320) = *(double *)(a4 + 216) + v30 * (a3[38] + a3[29]);
                  *(double *)(a4 + 328) = v112 + v30 * (a3[30] + a3[39]);
                  v113 = *(double *)(a5 + 224);
                  *(double *)(a5 + 320) = *(double *)(a5 + 216) + v30 * (a3[39] - a3[30]);
                  *(double *)(a5 + 328) = v113 + v30 * (a3[29] - a3[38]);
                  v114 = *(double *)(a6 + 224);
                  *(double *)(a6 + 320) = *(double *)(a6 + 216) + v30 * (*(double *)(a4 + 304) + *(double *)(a4 + 232));
                  *(double *)(a6 + 328) = v114 + v30 * (*(double *)(a4 + 240) + *(double *)(a4 + 312));
                  v115 = *(double *)(a8 + 224);
                  *(double *)(a8 + 320) = *(double *)(a8 + 216) + v30 * (*(double *)(a5 + 312) - *(double *)(a5 + 240));
                  *(double *)(a8 + 328) = v115 + v30 * (*(double *)(a5 + 232) - *(double *)(a5 + 304));
                  v116 = *(double *)(a7 + 224);
                  *(double *)(a7 + 320) = *(double *)(a7 + 216) + v30 * (*(double *)(a4 + 312) - *(double *)(a4 + 240));
                  *(double *)(a7 + 328) = v116 + v30 * (*(double *)(a4 + 232) - *(double *)(a4 + 304));
                  v117 = v89 + v16 * v111 - v83;
                  a3[42] = v32 * v117;
                  a3[43] = v33 * v117;
                  v118 = *(double *)(a4 + 240);
                  *(double *)(a4 + 336) = *(double *)(a4 + 232) + v96 * (a3[40] + a3[31]);
                  *(double *)(a4 + 344) = v118 + v96 * (a3[32] + a3[41]);
                  v119 = *(double *)(a5 + 240);
                  *(double *)(a5 + 336) = *(double *)(a5 + 232) + v96 * (a3[41] - a3[32]);
                  *(double *)(a5 + 344) = v119 + v96 * (a3[31] - a3[40]);
                  v120 = *(double *)(a6 + 240);
                  *(double *)(a6 + 336) = *(double *)(a6 + 232) + v96 * (*(double *)(a4 + 320) + *(double *)(a4 + 248));
                  *(double *)(a6 + 344) = v120 + v96 * (*(double *)(a4 + 256) + *(double *)(a4 + 328));
                  v121 = *(double *)(a8 + 240);
                  *(double *)(a8 + 336) = *(double *)(a8 + 232) + v96 * (*(double *)(a5 + 328) - *(double *)(a5 + 256));
                  *(double *)(a8 + 344) = v121 + v96 * (*(double *)(a5 + 248) - *(double *)(a5 + 320));
                  v122 = *(double *)(a7 + 240);
                  *(double *)(a7 + 336) = *(double *)(a7 + 232) + v96 * (*(double *)(a4 + 328) - *(double *)(a4 + 256));
                  *(double *)(a7 + 344) = v122 + v96 * (*(double *)(a4 + 248) - *(double *)(a4 + 320));
                  v123 = v95 + v16 * v117 - v89;
                  a3[44] = v19 * v123;
                  a3[45] = v20 * v123;
                  v124 = result * 10.0;
                  v125 = *(double *)(a4 + 256);
                  *(double *)(a4 + 352) = *(double *)(a4 + 248) + result * 10.0 * (a3[42] + a3[33]);
                  *(double *)(a4 + 360) = v125 + result * 10.0 * (a3[34] + a3[43]);
                  v126 = *(double *)(a5 + 256);
                  *(double *)(a5 + 352) = *(double *)(a5 + 248) + result * 10.0 * (a3[43] - a3[34]);
                  *(double *)(a5 + 360) = v126 + result * 10.0 * (a3[33] - a3[42]);
                  v127 = *(double *)(a6 + 256);
                  *(double *)(a6 + 352) = *(double *)(a6 + 248)
                                        + result * 10.0 * (*(double *)(a4 + 336) + *(double *)(a4 + 264));
                  *(double *)(a6 + 360) = v127 + result * 10.0 * (*(double *)(a4 + 272) + *(double *)(a4 + 344));
                  v128 = *(double *)(a8 + 256);
                  *(double *)(a8 + 352) = *(double *)(a8 + 248)
                                        + result * 10.0 * (*(double *)(a5 + 344) - *(double *)(a5 + 272));
                  *(double *)(a8 + 360) = v128 + result * 10.0 * (*(double *)(a5 + 264) - *(double *)(a5 + 336));
                  v129 = *(double *)(a7 + 256);
                  *(double *)(a7 + 352) = *(double *)(a7 + 248)
                                        + result * 10.0 * (*(double *)(a4 + 344) - *(double *)(a4 + 272));
                  *(double *)(a7 + 360) = v129 + result * 10.0 * (*(double *)(a4 + 264) - *(double *)(a4 + 336));
                  v130 = v101 + v16 * v123 - v95;
                  a3[46] = v14 * v130;
                  a3[47] = v15 * v130;
                  v131 = result * 11.0;
                  v132 = *(double *)(a4 + 272);
                  *(double *)(a4 + 368) = *(double *)(a4 + 264) + result * 11.0 * (v101 + a3[44]);
                  *(double *)(a4 + 376) = v132 + result * 11.0 * a3[45];
                  v133 = *(double *)(a5 + 272);
                  *(double *)(a5 + 368) = *(double *)(a5 + 264) + result * 11.0 * a3[45];
                  *(double *)(a5 + 376) = v133 + result * 11.0 * (v101 - a3[44]);
                  v134 = *(double *)(a6 + 272);
                  *(double *)(a6 + 368) = *(double *)(a6 + 264)
                                        + result * 11.0 * (*(double *)(a4 + 352) + *(double *)(a4 + 280));
                  *(double *)(a6 + 376) = v134 + result * 11.0 * *(double *)(a4 + 360);
                  v135 = *(double *)(a8 + 272);
                  *(double *)(a8 + 368) = *(double *)(a8 + 264) + result * 11.0 * *(double *)(a5 + 360);
                  *(double *)(a8 + 376) = v135 + result * 11.0 * (*(double *)(a5 + 280) - *(double *)(a5 + 352));
                  *(_QWORD *)(a7 + 368) = *(_QWORD *)(a6 + 376);
                  *(_QWORD *)(a7 + 376) = *(_QWORD *)(a8 + 368);
                  v136 = -(v101 - v28 * v130);
                  a3[48] = v136 - v12;
                  *(double *)(a4 + 384) = *(double *)(a4 + 280) + result * 24.0 * a3[46];
                  *(double *)(a5 + 384) = *(double *)(a5 + 280) + result * 24.0 * a3[47];
                  *(double *)(a6 + 384) = *(double *)(a6 + 280) + result * 24.0 * *(double *)(a4 + 368);
                  *(double *)(a8 + 384) = *(double *)(a8 + 280) + result * 24.0 * *(double *)(a5 + 376);
                  *(double *)(a7 + 384) = *(double *)(a7 + 280) + result * 24.0 * *(double *)(a4 + 376);
                  if (a1 >= 7)
                  {
                    v221 = v14 * v223 + v15 * v102;
                    v222 = v223 * v31 + v14 * v102;
                    a3[49] = v222;
                    a3[50] = v221;
                    *(double *)(a4 + 392) = v67 * a3[36];
                    v137 = v67 * a3[37];
                    *(double *)(a4 + 400) = v137;
                    *(double *)(a5 + 392) = -v137;
                    *(_QWORD *)(a5 + 400) = *(_QWORD *)(a4 + 392);
                    v138 = *(double *)(a4 + 288);
                    *(double *)(a6 + 392) = v67 * v138;
                    *(double *)(a6 + 400) = v67 * *(double *)(a4 + 296);
                    *(double *)(a8 + 392) = -(v67 * v138);
                    *(double *)(a8 + 400) = -*(double *)(a6 + 400);
                    *(double *)(a7 + 392) = -*(double *)(a6 + 400);
                    *(_QWORD *)(a7 + 400) = *(_QWORD *)(a6 + 392);
                    v139 = v16 + v105 + -1.0;
                    a3[51] = v102 * v139;
                    a3[52] = v223 * v139;
                    v140 = *(double *)(a4 + 296);
                    *(double *)(a4 + 408) = *(double *)(a4 + 288) + v30 * (a3[49] + a3[38]);
                    *(double *)(a4 + 416) = v140 + v30 * (a3[39] + a3[50]);
                    v141 = *(double *)(a5 + 296);
                    *(double *)(a5 + 408) = *(double *)(a5 + 288) + v30 * (a3[50] - a3[39]);
                    *(double *)(a5 + 416) = v141 + v30 * (a3[38] - a3[49]);
                    v142 = *(double *)(a6 + 296);
                    *(double *)(a6 + 408) = *(double *)(a6 + 288)
                                          + v30 * (*(double *)(a4 + 392) + *(double *)(a4 + 304));
                    *(double *)(a6 + 416) = v142 + v30 * (*(double *)(a4 + 312) + *(double *)(a4 + 400));
                    v143 = *(double *)(a8 + 296);
                    *(double *)(a8 + 408) = *(double *)(a8 + 288)
                                          + v30 * (*(double *)(a5 + 400) - *(double *)(a5 + 312));
                    *(double *)(a8 + 416) = v143 + v30 * (*(double *)(a5 + 304) - *(double *)(a5 + 392));
                    v144 = *(double *)(a7 + 296);
                    *(double *)(a7 + 408) = *(double *)(a7 + 288)
                                          + v30 * (*(double *)(a4 + 400) - *(double *)(a4 + 312));
                    *(double *)(a7 + 416) = v144 + v30 * (*(double *)(a4 + 304) - *(double *)(a4 + 392));
                    v145 = v111 + v16 * v139 - v105;
                    a3[53] = v73 * v145;
                    a3[54] = v74 * v145;
                    v146 = *(double *)(a4 + 312);
                    *(double *)(a4 + 424) = *(double *)(a4 + 304) + v96 * (a3[51] + a3[40]);
                    *(double *)(a4 + 432) = v146 + v96 * (a3[41] + a3[52]);
                    v147 = *(double *)(a5 + 312);
                    *(double *)(a5 + 424) = *(double *)(a5 + 304) + v96 * (a3[52] - a3[41]);
                    *(double *)(a5 + 432) = v147 + v96 * (a3[40] - a3[51]);
                    v148 = *(double *)(a6 + 312);
                    *(double *)(a6 + 424) = *(double *)(a6 + 304)
                                          + v96 * (*(double *)(a4 + 408) + *(double *)(a4 + 320));
                    *(double *)(a6 + 432) = v148 + v96 * (*(double *)(a4 + 328) + *(double *)(a4 + 416));
                    v149 = *(double *)(a8 + 312);
                    *(double *)(a8 + 424) = *(double *)(a8 + 304)
                                          + v96 * (*(double *)(a5 + 416) - *(double *)(a5 + 328));
                    *(double *)(a8 + 432) = v149 + v96 * (*(double *)(a5 + 320) - *(double *)(a5 + 408));
                    v150 = *(double *)(a7 + 312);
                    *(double *)(a7 + 424) = *(double *)(a7 + 304)
                                          + v96 * (*(double *)(a4 + 416) - *(double *)(a4 + 328));
                    *(double *)(a7 + 432) = v150 + v96 * (*(double *)(a4 + 320) - *(double *)(a4 + 408));
                    v151 = v117 + v16 * v145 - v111;
                    a3[55] = v49 * v151;
                    a3[56] = v50 * v151;
                    v152 = *(double *)(a4 + 328);
                    *(double *)(a4 + 440) = *(double *)(a4 + 320) + v124 * (a3[53] + a3[42]);
                    *(double *)(a4 + 448) = v152 + v124 * (a3[43] + a3[54]);
                    v153 = *(double *)(a5 + 328);
                    *(double *)(a5 + 440) = *(double *)(a5 + 320) + v124 * (a3[54] - a3[43]);
                    *(double *)(a5 + 448) = v153 + v124 * (a3[42] - a3[53]);
                    v154 = *(double *)(a6 + 328);
                    *(double *)(a6 + 440) = *(double *)(a6 + 320)
                                          + v124 * (*(double *)(a4 + 424) + *(double *)(a4 + 336));
                    *(double *)(a6 + 448) = v154 + v124 * (*(double *)(a4 + 344) + *(double *)(a4 + 432));
                    v155 = *(double *)(a8 + 328);
                    *(double *)(a8 + 440) = *(double *)(a8 + 320)
                                          + v124 * (*(double *)(a5 + 432) - *(double *)(a5 + 344));
                    *(double *)(a8 + 448) = v155 + v124 * (*(double *)(a5 + 336) - *(double *)(a5 + 424));
                    v156 = *(double *)(a7 + 328);
                    *(double *)(a7 + 440) = *(double *)(a7 + 320)
                                          + v124 * (*(double *)(a4 + 432) - *(double *)(a4 + 344));
                    *(double *)(a7 + 448) = v156 + v124 * (*(double *)(a4 + 336) - *(double *)(a4 + 424));
                    v157 = v123 + v16 * v151 - v117;
                    a3[57] = v32 * v157;
                    a3[58] = v33 * v157;
                    v158 = *(double *)(a4 + 344);
                    *(double *)(a4 + 456) = *(double *)(a4 + 336) + v131 * (a3[55] + a3[44]);
                    *(double *)(a4 + 464) = v158 + v131 * (a3[45] + a3[56]);
                    v159 = *(double *)(a5 + 344);
                    *(double *)(a5 + 456) = *(double *)(a5 + 336) + v131 * (a3[56] - a3[45]);
                    *(double *)(a5 + 464) = v159 + v131 * (a3[44] - a3[55]);
                    v160 = *(double *)(a6 + 344);
                    *(double *)(a6 + 456) = *(double *)(a6 + 336)
                                          + v131 * (*(double *)(a4 + 440) + *(double *)(a4 + 352));
                    *(double *)(a6 + 464) = v160 + v131 * (*(double *)(a4 + 360) + *(double *)(a4 + 448));
                    v161 = *(double *)(a8 + 344);
                    *(double *)(a8 + 456) = *(double *)(a8 + 336)
                                          + v131 * (*(double *)(a5 + 448) - *(double *)(a5 + 360));
                    *(double *)(a8 + 464) = v161 + v131 * (*(double *)(a5 + 352) - *(double *)(a5 + 440));
                    v162 = *(double *)(a7 + 344);
                    *(double *)(a7 + 456) = *(double *)(a7 + 336)
                                          + v131 * (*(double *)(a4 + 448) - *(double *)(a4 + 360));
                    *(double *)(a7 + 464) = v162 + v131 * (*(double *)(a4 + 352) - *(double *)(a4 + 440));
                    v163 = v130 + v16 * v157 - v123;
                    a3[59] = v19 * v163;
                    a3[60] = v20 * v163;
                    v164 = *(double *)(a4 + 360);
                    *(double *)(a4 + 472) = *(double *)(a4 + 352) + v48 * (a3[57] + a3[46]);
                    *(double *)(a4 + 480) = v164 + v48 * (a3[47] + a3[58]);
                    v165 = *(double *)(a5 + 360);
                    *(double *)(a5 + 472) = *(double *)(a5 + 352) + v48 * (a3[58] - a3[47]);
                    *(double *)(a5 + 480) = v165 + v48 * (a3[46] - a3[57]);
                    v166 = *(double *)(a6 + 360);
                    *(double *)(a6 + 472) = *(double *)(a6 + 352)
                                          + v48 * (*(double *)(a4 + 456) + *(double *)(a4 + 368));
                    *(double *)(a6 + 480) = v166 + v48 * (*(double *)(a4 + 376) + *(double *)(a4 + 464));
                    v167 = *(double *)(a8 + 360);
                    *(double *)(a8 + 472) = *(double *)(a8 + 352)
                                          + v48 * (*(double *)(a5 + 464) - *(double *)(a5 + 376));
                    *(double *)(a8 + 480) = v167 + v48 * (*(double *)(a5 + 368) - *(double *)(a5 + 456));
                    v168 = *(double *)(a7 + 360);
                    *(double *)(a7 + 472) = *(double *)(a7 + 352)
                                          + v48 * (*(double *)(a4 + 464) - *(double *)(a4 + 376));
                    *(double *)(a7 + 480) = v168 + v48 * (*(double *)(a4 + 368) - *(double *)(a4 + 456));
                    v169 = v136 + v16 * v163 - v130;
                    a3[61] = v14 * v169;
                    a3[62] = v15 * v169;
                    v170 = result * 13.0;
                    v171 = v74 * v31 + v14 * v73;
                    v172 = *(double *)(a4 + 376);
                    *(double *)(a4 + 488) = *(double *)(a4 + 368) + result * 13.0 * (v136 + a3[59]);
                    *(double *)(a4 + 496) = v172 + result * 13.0 * a3[60];
                    v173 = *(double *)(a5 + 376);
                    *(double *)(a5 + 488) = *(double *)(a5 + 368) + result * 13.0 * a3[60];
                    *(double *)(a5 + 496) = v173 + result * 13.0 * (v136 - a3[59]);
                    v174 = *(double *)(a6 + 376);
                    *(double *)(a6 + 488) = *(double *)(a6 + 368)
                                          + result * 13.0 * (*(double *)(a4 + 472) + *(double *)(a4 + 384));
                    *(double *)(a6 + 496) = v174 + result * 13.0 * *(double *)(a4 + 480);
                    v175 = *(double *)(a8 + 376);
                    *(double *)(a8 + 488) = *(double *)(a8 + 368) + result * 13.0 * *(double *)(a5 + 480);
                    *(double *)(a8 + 496) = v175 + result * 13.0 * (*(double *)(a5 + 384) - *(double *)(a5 + 472));
                    *(_QWORD *)(a7 + 488) = *(_QWORD *)(a6 + 496);
                    *(_QWORD *)(a7 + 496) = *(_QWORD *)(a8 + 488);
                    a3[63] = v12 - (v136 - v28 * v169);
                    *(double *)(a4 + 504) = *(double *)(a4 + 384) + result * 28.0 * a3[61];
                    *(double *)(a5 + 504) = *(double *)(a5 + 384) + result * 28.0 * a3[62];
                    *(double *)(a6 + 504) = *(double *)(a6 + 384) + result * 28.0 * *(double *)(a4 + 488);
                    *(double *)(a8 + 504) = *(double *)(a8 + 384) + result * 28.0 * *(double *)(a5 + 496);
                    *(double *)(a7 + 504) = *(double *)(a7 + 384) + result * 28.0 * *(double *)(a4 + 496);
                    if (a1 != 7)
                    {
                      v220 = -(v136 - v28 * v169);
                      a3[64] = v221 * v31 + v14 * v222;
                      a3[65] = v14 * v221 + v15 * v222;
                      *(double *)(a4 + 512) = v30 * a3[49];
                      v176 = v30 * a3[50];
                      *(double *)(a4 + 520) = v176;
                      *(double *)(a5 + 512) = -v176;
                      *(_QWORD *)(a5 + 520) = *(_QWORD *)(a4 + 512);
                      v177 = *(double *)(a4 + 392);
                      *(double *)(a6 + 512) = v30 * v177;
                      *(double *)(a6 + 520) = v30 * *(double *)(a4 + 400);
                      *(double *)(a8 + 512) = -(v30 * v177);
                      *(double *)(a8 + 520) = -*(double *)(a6 + 520);
                      *(double *)(a7 + 512) = -*(double *)(a6 + 520);
                      *(_QWORD *)(a7 + 520) = *(_QWORD *)(a6 + 512);
                      v178 = v16 + v139 + -1.0;
                      a3[66] = v222 * v178;
                      a3[67] = v221 * v178;
                      v179 = *(double *)(a4 + 400);
                      *(double *)(a4 + 528) = *(double *)(a4 + 392) + v96 * (a3[64] + a3[51]);
                      *(double *)(a4 + 536) = v179 + v96 * (a3[52] + a3[65]);
                      v180 = *(double *)(a5 + 400);
                      *(double *)(a5 + 528) = *(double *)(a5 + 392) + v96 * (a3[65] - a3[52]);
                      *(double *)(a5 + 536) = v180 + v96 * (a3[51] - a3[64]);
                      v181 = *(double *)(a6 + 400);
                      *(double *)(a6 + 528) = *(double *)(a6 + 392)
                                            + v96 * (*(double *)(a4 + 512) + *(double *)(a4 + 408));
                      *(double *)(a6 + 536) = v181 + v96 * (*(double *)(a4 + 416) + *(double *)(a4 + 520));
                      v182 = *(double *)(a8 + 400);
                      *(double *)(a8 + 528) = *(double *)(a8 + 392)
                                            + v96 * (*(double *)(a5 + 520) - *(double *)(a5 + 416));
                      *(double *)(a8 + 536) = v182 + v96 * (*(double *)(a5 + 408) - *(double *)(a5 + 512));
                      v183 = *(double *)(a7 + 400);
                      *(double *)(a7 + 528) = *(double *)(a7 + 392)
                                            + v96 * (*(double *)(a4 + 520) - *(double *)(a4 + 416));
                      *(double *)(a7 + 536) = v183 + v96 * (*(double *)(a4 + 408) - *(double *)(a4 + 512));
                      v184 = v145 + v16 * v178 - v139;
                      a3[68] = v171 * v184;
                      a3[69] = v223 * v184;
                      v185 = *(double *)(a4 + 416);
                      *(double *)(a4 + 544) = *(double *)(a4 + 408) + v124 * (a3[66] + a3[53]);
                      *(double *)(a4 + 552) = v185 + v124 * (a3[54] + a3[67]);
                      v186 = *(double *)(a5 + 416);
                      *(double *)(a5 + 544) = *(double *)(a5 + 408) + v124 * (a3[67] - a3[54]);
                      *(double *)(a5 + 552) = v186 + v124 * (a3[53] - a3[66]);
                      v187 = *(double *)(a6 + 416);
                      *(double *)(a6 + 544) = *(double *)(a6 + 408)
                                            + v124 * (*(double *)(a4 + 528) + *(double *)(a4 + 424));
                      *(double *)(a6 + 552) = v187 + v124 * (*(double *)(a4 + 432) + *(double *)(a4 + 536));
                      v188 = *(double *)(a8 + 416);
                      *(double *)(a8 + 544) = *(double *)(a8 + 408)
                                            + v124 * (*(double *)(a5 + 536) - *(double *)(a5 + 432));
                      *(double *)(a8 + 552) = v188 + v124 * (*(double *)(a5 + 424) - *(double *)(a5 + 528));
                      v189 = *(double *)(a7 + 416);
                      *(double *)(a7 + 544) = *(double *)(a7 + 408)
                                            + v124 * (*(double *)(a4 + 536) - *(double *)(a4 + 432));
                      *(double *)(a7 + 552) = v189 + v124 * (*(double *)(a4 + 424) - *(double *)(a4 + 528));
                      v190 = v151 + v16 * v184 - v145;
                      a3[70] = v73 * v190;
                      a3[71] = v74 * v190;
                      v191 = *(double *)(a4 + 432);
                      *(double *)(a4 + 560) = *(double *)(a4 + 424) + v131 * (a3[68] + a3[55]);
                      *(double *)(a4 + 568) = v191 + v131 * (a3[56] + a3[69]);
                      v192 = *(double *)(a5 + 432);
                      *(double *)(a5 + 560) = *(double *)(a5 + 424) + v131 * (a3[69] - a3[56]);
                      *(double *)(a5 + 568) = v192 + v131 * (a3[55] - a3[68]);
                      v193 = *(double *)(a6 + 432);
                      *(double *)(a6 + 560) = *(double *)(a6 + 424)
                                            + v131 * (*(double *)(a4 + 544) + *(double *)(a4 + 440));
                      *(double *)(a6 + 568) = v193 + v131 * (*(double *)(a4 + 448) + *(double *)(a4 + 552));
                      v194 = *(double *)(a8 + 432);
                      *(double *)(a8 + 560) = *(double *)(a8 + 424)
                                            + v131 * (*(double *)(a5 + 552) - *(double *)(a5 + 448));
                      *(double *)(a8 + 568) = v194 + v131 * (*(double *)(a5 + 440) - *(double *)(a5 + 544));
                      v195 = *(double *)(a7 + 432);
                      *(double *)(a7 + 560) = *(double *)(a7 + 424)
                                            + v131 * (*(double *)(a4 + 552) - *(double *)(a4 + 448));
                      *(double *)(a7 + 568) = v195 + v131 * (*(double *)(a4 + 440) - *(double *)(a4 + 544));
                      v196 = v157 + v16 * v190 - v151;
                      a3[72] = v49 * v196;
                      a3[73] = v50 * v196;
                      v197 = *(double *)(a4 + 448);
                      *(double *)(a4 + 576) = *(double *)(a4 + 440) + v48 * (a3[70] + a3[57]);
                      *(double *)(a4 + 584) = v197 + v48 * (a3[58] + a3[71]);
                      v198 = *(double *)(a5 + 448);
                      *(double *)(a5 + 576) = *(double *)(a5 + 440) + v48 * (a3[71] - a3[58]);
                      *(double *)(a5 + 584) = v198 + v48 * (a3[57] - a3[70]);
                      v199 = *(double *)(a6 + 448);
                      *(double *)(a6 + 576) = *(double *)(a6 + 440)
                                            + v48 * (*(double *)(a4 + 560) + *(double *)(a4 + 456));
                      *(double *)(a6 + 584) = v199 + v48 * (*(double *)(a4 + 464) + *(double *)(a4 + 568));
                      v200 = *(double *)(a8 + 448);
                      *(double *)(a8 + 576) = *(double *)(a8 + 440)
                                            + v48 * (*(double *)(a5 + 568) - *(double *)(a5 + 464));
                      *(double *)(a8 + 584) = v200 + v48 * (*(double *)(a5 + 456) - *(double *)(a5 + 560));
                      v201 = *(double *)(a7 + 448);
                      *(double *)(a7 + 576) = *(double *)(a7 + 440)
                                            + v48 * (*(double *)(a4 + 568) - *(double *)(a4 + 464));
                      *(double *)(a7 + 584) = v201 + v48 * (*(double *)(a4 + 456) - *(double *)(a4 + 560));
                      v202 = v163 + v16 * v196 - v157;
                      a3[74] = v32 * v202;
                      a3[75] = v33 * v202;
                      v203 = *(double *)(a4 + 464);
                      *(double *)(a4 + 592) = *(double *)(a4 + 456) + v170 * (a3[72] + a3[59]);
                      *(double *)(a4 + 600) = v203 + v170 * (a3[60] + a3[73]);
                      v204 = *(double *)(a5 + 464);
                      *(double *)(a5 + 592) = *(double *)(a5 + 456) + v170 * (a3[73] - a3[60]);
                      *(double *)(a5 + 600) = v204 + v170 * (a3[59] - a3[72]);
                      v205 = *(double *)(a6 + 464);
                      *(double *)(a6 + 592) = *(double *)(a6 + 456)
                                            + v170 * (*(double *)(a4 + 576) + *(double *)(a4 + 472));
                      *(double *)(a6 + 600) = v205 + v170 * (*(double *)(a4 + 480) + *(double *)(a4 + 584));
                      v206 = *(double *)(a8 + 464);
                      *(double *)(a8 + 592) = *(double *)(a8 + 456)
                                            + v170 * (*(double *)(a5 + 584) - *(double *)(a5 + 480));
                      *(double *)(a8 + 600) = v206 + v170 * (*(double *)(a5 + 472) - *(double *)(a5 + 576));
                      v207 = *(double *)(a7 + 464);
                      *(double *)(a7 + 592) = *(double *)(a7 + 456)
                                            + v170 * (*(double *)(a4 + 584) - *(double *)(a4 + 480));
                      *(double *)(a7 + 600) = v207 + v170 * (*(double *)(a4 + 472) - *(double *)(a4 + 576));
                      v208 = v169 + v16 * v202 - v163;
                      a3[76] = v19 * v208;
                      a3[77] = v20 * v208;
                      v209 = *(double *)(a4 + 480);
                      *(double *)(a4 + 608) = *(double *)(a4 + 472) + result * 14.0 * (a3[74] + a3[61]);
                      *(double *)(a4 + 616) = v209 + result * 14.0 * (a3[62] + a3[75]);
                      v210 = *(double *)(a5 + 480);
                      *(double *)(a5 + 608) = *(double *)(a5 + 472) + result * 14.0 * (a3[75] - a3[62]);
                      *(double *)(a5 + 616) = v210 + result * 14.0 * (a3[61] - a3[74]);
                      v211 = *(double *)(a6 + 480);
                      *(double *)(a6 + 608) = *(double *)(a6 + 472)
                                            + result * 14.0 * (*(double *)(a4 + 592) + *(double *)(a4 + 488));
                      *(double *)(a6 + 616) = v211 + result * 14.0 * (*(double *)(a4 + 496) + *(double *)(a4 + 600));
                      v212 = *(double *)(a8 + 480);
                      *(double *)(a8 + 608) = *(double *)(a8 + 472)
                                            + result * 14.0 * (*(double *)(a5 + 600) - *(double *)(a5 + 496));
                      *(double *)(a8 + 616) = v212 + result * 14.0 * (*(double *)(a5 + 488) - *(double *)(a5 + 592));
                      v213 = *(double *)(a7 + 480);
                      *(double *)(a7 + 608) = *(double *)(a7 + 472)
                                            + result * 14.0 * (*(double *)(a4 + 600) - *(double *)(a4 + 496));
                      *(double *)(a7 + 616) = v213 + result * 14.0 * (*(double *)(a4 + 488) - *(double *)(a4 + 592));
                      v214 = v220 + v16 * v208 - v169;
                      a3[78] = v14 * v214;
                      a3[79] = v15 * v214;
                      v215 = *(double *)(a4 + 496);
                      *(double *)(a4 + 624) = *(double *)(a4 + 488) + result * 15.0 * (v220 + a3[76]);
                      *(double *)(a4 + 632) = v215 + result * 15.0 * a3[77];
                      v216 = *(double *)(a5 + 496);
                      *(double *)(a5 + 624) = *(double *)(a5 + 488) + result * 15.0 * a3[77];
                      *(double *)(a5 + 632) = v216 + result * 15.0 * (v220 - a3[76]);
                      v217 = *(double *)(a6 + 496);
                      *(double *)(a6 + 624) = *(double *)(a6 + 488)
                                            + result * 15.0 * (*(double *)(a4 + 608) + *(double *)(a4 + 504));
                      *(double *)(a6 + 632) = v217 + result * 15.0 * *(double *)(a4 + 616);
                      v218 = *(double *)(a8 + 496);
                      *(double *)(a8 + 624) = *(double *)(a8 + 488) + result * 15.0 * *(double *)(a5 + 616);
                      *(double *)(a8 + 632) = v218 + result * 15.0 * (*(double *)(a5 + 504) - *(double *)(a5 + 608));
                      *(_QWORD *)(a7 + 624) = *(_QWORD *)(a6 + 632);
                      *(_QWORD *)(a7 + 632) = *(_QWORD *)(a8 + 624);
                      a3[80] = -(v220 - v28 * v214) - v12;
                      v219 = result * 32.0;
                      *(double *)(a4 + 640) = *(double *)(a4 + 504) + v219 * a3[78];
                      *(double *)(a5 + 640) = *(double *)(a5 + 504) + v219 * a3[79];
                      *(double *)(a6 + 640) = *(double *)(a6 + 504) + v219 * *(double *)(a4 + 624);
                      *(double *)(a8 + 640) = *(double *)(a8 + 504) + v219 * *(double *)(a5 + 632);
                      result = *(double *)(a7 + 504) + v219 * *(double *)(a4 + 632);
                      *(double *)(a7 + 640) = result;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 5u:
          result = AccelerateAR_ComputeZernikePolyAndDerivativesLevel5NoBias((uint64_t)a3, a4, a5, a6, a7, a8, result, a10, a11);
          break;
        case 6u:
          result = AccelerateAR_ComputeZernikePolyAndDerivativesLevel6NoBias((uint64_t)a3, a4, a5, a6, a7, a8, result, a10, a11);
          break;
        case 7u:
          result = AccelerateAR_ComputeZernikePolyAndDerivativesLevel7NoBias((uint64_t)a3, a4, a5, a6, a7, a8, result, a10, a11);
          break;
        case 8u:
          result = AccelerateAR_ComputeZernikePolyAndDerivativesLevel8NoBias((uint64_t)a3, a4, a5, a6, a7, a8, result, a10, a11);
          break;
        default:
          v11 = 0.0;
          goto LABEL_4;
      }
    }
  }
  return result;
}

double AccelerateAR_ComputeZernikePolyAndDerivativesLevel5NoBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v28;
  double v29;
  double v30;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  double v43;
  double v44;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double result;

  v9 = 1.0 / a7;
  v10 = v9 * a8;
  v11 = v9 * a9;
  v12 = v11 * v11 + v10 * v10;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)a6 = 0;
  v13.f64[0] = -(v9 * a9);
  v13.f64[1] = v10;
  v14.f64[0] = v10;
  v14.f64[1] = v11;
  *(float64x2_t *)(a1 + 8) = v14;
  *(double *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = v9;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a5 + 8) = 0u;
  v15 = v12 * 2.0 + -1.0;
  *(double *)(a1 + 24) = v15 + 1.0;
  v16 = vmulq_n_f64(v14, v9 * 4.0);
  *(float64_t *)(a2 + 24) = v16.f64[0];
  *(float64_t *)(a3 + 24) = v16.f64[1];
  v17 = v9 * v9 * 4.0;
  *(double *)(a4 + 24) = v17;
  *(double *)(a6 + 24) = v17;
  *(_QWORD *)(a5 + 24) = 0;
  v18 = vmlaq_n_f64(vmulq_n_f64(v13, v11), v14, v10);
  *(float64x2_t *)(a1 + 32) = v18;
  v19 = vmulq_n_f64(v14, v9 + v9);
  v20 = vmulq_n_f64(v13, v9 + v9);
  *(float64x2_t *)(a2 + 32) = v19;
  *(float64x2_t *)(a3 + 32) = v20;
  v21 = v9 * v9 + v9 * v9;
  *(double *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 40) = 0;
  *(double *)(a6 + 32) = -v21;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(double *)(a5 + 40) = v21;
  v22 = v12 + v15 + -1.0;
  _Q11 = vmulq_n_f64(v14, v22);
  *(float64x2_t *)(a1 + 48) = _Q11;
  v24 = v9 + v9 * 3.0 * (v15 + v18.f64[0]);
  v25 = vmuld_lane_f64(v9 * 3.0, v18, 1);
  v26 = v9 + v9 * 3.0 * (v15 - v18.f64[0]);
  *(double *)(a2 + 48) = v24;
  *(double *)(a2 + 56) = v25;
  *(double *)(a3 + 48) = v25;
  *(double *)(a3 + 56) = v26;
  _Q28 = vmulq_n_f64(v14, v9 * v9 * 6.0);
  v28 = vmuld_lane_f64(3.0, _Q28, 1);
  *(double *)(a4 + 48) = 3.0 * _Q28.f64[0];
  *(float64_t *)(a4 + 56) = _Q28.f64[1];
  *(float64_t *)(a6 + 48) = _Q28.f64[0];
  *(double *)(a6 + 56) = v28;
  *(int8x16_t *)(a5 + 48) = vextq_s8((int8x16_t)_Q28, (int8x16_t)_Q28, 8uLL);
  v29 = v12 + v12;
  v30 = -(v15 - (v12 + v12) * v22);
  *(double *)(a1 + 64) = -1.0 - (v15 - (v12 + v12) * v22);
  _D5 = v9 * 8.0;
  v16.f64[0] = vmlad_n_f64(v16.f64[0], v9 * 8.0, _Q11.f64[0]);
  __asm { FMLA            D23, D5, V11.D[1] }
  *(float64_t *)(a2 + 64) = v16.f64[0];
  *(double *)(a3 + 64) = _D23;
  *(double *)(a4 + 64) = v17 + v9 * 8.0 * v24;
  *(double *)(a6 + 64) = v17 + v9 * 8.0 * v26;
  *(double *)(a5 + 64) = v9 * 8.0 * v25;
  v37 = vmlaq_n_f64(vmulq_laneq_f64(v13, v18, 1), v14, v18.f64[0]);
  *(float64x2_t *)(a1 + 72) = v37;
  v38 = vmulq_n_f64(v18, v9 * 3.0);
  *(float64x2_t *)(a2 + 72) = v38;
  *(double *)(a3 + 72) = -v38.f64[1];
  *(float64_t *)(a3 + 80) = v38.f64[0];
  v39 = vmulq_n_f64(v19, v9 * 3.0);
  *(float64x2_t *)(a4 + 72) = v39;
  *(float64x2_t *)(a6 + 72) = vnegq_f64(v39);
  *(double *)(a5 + 72) = -v39.f64[1];
  *(float64_t *)(a5 + 80) = v39.f64[0];
  v39.f64[0] = v12 + v22 + -1.0;
  _Q12 = vmulq_n_f64(v18, v39.f64[0]);
  *(float64x2_t *)(a1 + 88) = _Q12;
  v41 = vmlaq_n_f64(v19, vaddq_f64(v37, _Q11), v9 * 4.0);
  *(float64x2_t *)(a2 + 88) = v41;
  _Q24 = vmlaq_n_f64(v20, vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)_Q11, 8uLL), (float64x2_t)vextq_s8((int8x16_t)_Q11, (int8x16_t)v37, 8uLL)), v9 * 4.0);
  *(float64x2_t *)(a3 + 88) = _Q24;
  v43 = v9 * 4.0 * (v25 + v38.f64[1]);
  *(double *)(a4 + 88) = v21 + v9 * 4.0 * (v38.f64[0] + v24);
  *(double *)(a4 + 96) = v43;
  *(double *)(a6 + 88) = -(v21 - v9 * 4.0 * (v38.f64[0] - v26));
  *(double *)(a6 + 96) = v43;
  *(_QWORD *)(a5 + 88) = 0;
  *(double *)(a5 + 96) = v21 + v9 * 4.0 * (v24 - v38.f64[0]);
  v44 = v30 + v12 * v39.f64[0] - v22;
  _Q11 = vmulq_n_f64(v14, v44);
  *(float64x2_t *)(a1 + 104) = _Q11;
  _D18 = v9 * 5.0;
  __asm { FMLA            D30, D18, V12.D[1] }
  *(double *)(a2 + 104) = v24 + v9 * 5.0 * (v30 + _Q12.f64[0]);
  *(_QWORD *)(a2 + 112) = _D30;
  *(_QWORD *)(a3 + 104) = _D30;
  *(double *)(a3 + 112) = v26 + v9 * 5.0 * (v30 - _Q12.f64[0]);
  v41.f64[0] = v16.f64[0] + v41.f64[0];
  v48.f64[1] = _Q28.f64[1];
  v48.f64[0] = 3.0 * _Q28.f64[0];
  v49 = vmlaq_n_f64(v48, v41, v9 * 5.0);
  *(float64x2_t *)(a4 + 104) = v49;
  *(float64_t *)(a5 + 104) = v49.f64[1];
  __asm { FMLA            D28, D18, V24.D[1] }
  *(float64_t *)(a6 + 104) = _Q28.f64[0];
  *(float64_t *)(a5 + 112) = _Q28.f64[0];
  *(double *)(a6 + 112) = v28 + v9 * 5.0 * (_D23 - _Q24.f64[0]);
  v41.f64[0] = -(v30 - (v12 + v12) * v44);
  *(double *)(a1 + 120) = 1.0 - (v30 - (v12 + v12) * v44);
  _Q24.f64[0] = v9 * 12.0;
  __asm { FMLA            D23, D24, V11.D[1] }
  *(double *)(a2 + 120) = vmlad_n_f64(v16.f64[0], v9 * 12.0, _Q11.f64[0]);
  *(_QWORD *)(a3 + 120) = _D23;
  *(double *)(a4 + 120) = *(double *)(a4 + 64) + v9 * 12.0 * *(double *)(a2 + 104);
  *(double *)(a6 + 120) = *(double *)(a6 + 64) + v9 * 12.0 * *(double *)(a3 + 112);
  *(double *)(a5 + 120) = *(double *)(a5 + 64) + v9 * 12.0 * *(double *)(a2 + 112);
  v51 = vmlaq_n_f64(vmulq_laneq_f64(v13, v37, 1), v14, v37.f64[0]);
  *(float64x2_t *)(a1 + 128) = v51;
  v52 = vmulq_n_f64(v37, v9 * 4.0);
  *(float64x2_t *)(a2 + 128) = v52;
  *(double *)(a3 + 128) = -v52.f64[1];
  *(float64_t *)(a3 + 136) = v52.f64[0];
  v53 = vmulq_n_f64(v38, v9 * 4.0);
  *(float64x2_t *)(a4 + 128) = v53;
  *(float64x2_t *)(a6 + 128) = vnegq_f64(v53);
  *(double *)(a5 + 128) = -v53.f64[1];
  *(float64_t *)(a5 + 136) = v53.f64[0];
  v53.f64[0] = v12 + v39.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 144) = vmulq_n_f64(v37, v53.f64[0]);
  _Q28.f64[0] = *(float64_t *)(a2 + 80);
  *(double *)(a2 + 144) = *(double *)(a2 + 72) + v9 * 5.0 * (*(double *)(a1 + 128) + *(double *)(a1 + 88));
  *(double *)(a2 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a1 + 96) + *(double *)(a1 + 136));
  _Q28.f64[0] = *(float64_t *)(a3 + 80);
  *(double *)(a3 + 144) = *(double *)(a3 + 72) + v9 * 5.0 * (*(double *)(a1 + 136) - *(double *)(a1 + 96));
  *(double *)(a3 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a1 + 88) - *(double *)(a1 + 128));
  _Q28.f64[0] = *(float64_t *)(a4 + 80);
  *(double *)(a4 + 144) = *(double *)(a4 + 72) + v9 * 5.0 * (*(double *)(a2 + 128) + *(double *)(a2 + 88));
  *(double *)(a4 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a2 + 96) + *(double *)(a2 + 136));
  _Q28.f64[0] = *(float64_t *)(a6 + 80);
  *(double *)(a6 + 144) = *(double *)(a6 + 72) + v9 * 5.0 * (*(double *)(a3 + 136) - *(double *)(a3 + 96));
  *(double *)(a6 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a3 + 88) - *(double *)(a3 + 128));
  _Q28.f64[0] = *(float64_t *)(a5 + 80);
  *(double *)(a5 + 144) = *(double *)(a5 + 72) + v9 * 5.0 * (*(double *)(a2 + 136) - *(double *)(a2 + 96));
  *(double *)(a5 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a2 + 88) - *(double *)(a2 + 128));
  v16.f64[0] = v44 + v12 * v53.f64[0] - v39.f64[0];
  *(float64x2_t *)(a1 + 160) = vmulq_n_f64(v18, v16.f64[0]);
  _Q28.f64[0] = *(float64_t *)(a2 + 96);
  *(double *)(a2 + 160) = *(double *)(a2 + 88) + v9 * 6.0 * (*(double *)(a1 + 144) + *(double *)(a1 + 104));
  *(double *)(a2 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a1 + 112) + *(double *)(a1 + 152));
  _Q28.f64[0] = *(float64_t *)(a3 + 96);
  *(double *)(a3 + 160) = *(double *)(a3 + 88) + v9 * 6.0 * (*(double *)(a1 + 152) - *(double *)(a1 + 112));
  *(double *)(a3 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a1 + 104) - *(double *)(a1 + 144));
  _Q28.f64[0] = *(float64_t *)(a4 + 96);
  *(double *)(a4 + 160) = *(double *)(a4 + 88) + v9 * 6.0 * (*(double *)(a2 + 144) + *(double *)(a2 + 104));
  *(double *)(a4 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a2 + 112) + *(double *)(a2 + 152));
  _Q28.f64[0] = *(float64_t *)(a6 + 96);
  *(double *)(a6 + 160) = *(double *)(a6 + 88) + v9 * 6.0 * (*(double *)(a3 + 152) - *(double *)(a3 + 112));
  *(double *)(a6 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a3 + 104) - *(double *)(a3 + 144));
  _Q28.f64[0] = *(float64_t *)(a5 + 96);
  *(double *)(a5 + 160) = *(double *)(a5 + 88) + v9 * 6.0 * (*(double *)(a2 + 152) - *(double *)(a2 + 112));
  *(double *)(a5 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a2 + 104) - *(double *)(a2 + 144));
  v54 = v12 * v16.f64[0] - (v30 - (v12 + v12) * v44) - v44;
  *(float64x2_t *)(a1 + 176) = vmulq_n_f64(v14, v54);
  v55 = *(double *)(a2 + 112);
  *(double *)(a2 + 176) = *(double *)(a2 + 104) + v9 * 7.0 * (v41.f64[0] + *(double *)(a1 + 160));
  v56 = v55 + v9 * 7.0 * *(double *)(a1 + 168);
  *(double *)(a2 + 184) = v56;
  *(double *)(a3 + 176) = v56;
  *(double *)(a3 + 184) = *(double *)(a3 + 112) + v9 * 7.0 * (v41.f64[0] - *(double *)(a1 + 160));
  v57 = *(double *)(a4 + 112);
  *(double *)(a4 + 176) = *(double *)(a4 + 104) + v9 * 7.0 * (*(double *)(a2 + 160) + *(double *)(a2 + 120));
  *(double *)(a4 + 184) = v57 + v9 * 7.0 * *(double *)(a2 + 168);
  v58 = *(double *)(a6 + 112);
  *(double *)(a6 + 176) = *(double *)(a6 + 104) + v9 * 7.0 * *(double *)(a3 + 168);
  *(double *)(a6 + 184) = v58 + v9 * 7.0 * (*(double *)(a3 + 120) - *(double *)(a3 + 160));
  *(_QWORD *)(a5 + 176) = *(_QWORD *)(a4 + 184);
  *(_QWORD *)(a5 + 184) = *(_QWORD *)(a6 + 176);
  v59 = -(v41.f64[0] - (v12 + v12) * v54);
  *(double *)(a1 + 192) = -1.0 - (v41.f64[0] - (v12 + v12) * v54);
  *(double *)(a2 + 192) = *(double *)(a2 + 120) + v9 * 16.0 * *(double *)(a1 + 176);
  *(double *)(a3 + 192) = *(double *)(a3 + 120) + v9 * 16.0 * *(double *)(a1 + 184);
  *(double *)(a4 + 192) = *(double *)(a4 + 120) + v9 * 16.0 * *(double *)(a2 + 176);
  *(double *)(a6 + 192) = *(double *)(a6 + 120) + v9 * 16.0 * *(double *)(a3 + 184);
  *(double *)(a5 + 192) = *(double *)(a5 + 120) + v9 * 16.0 * *(double *)(a2 + 184);
  *(float64x2_t *)(a1 + 200) = vmlaq_n_f64(vmulq_laneq_f64(v13, v51, 1), v14, v51.f64[0]);
  v60 = vmulq_n_f64(v51, v9 * 5.0);
  *(float64x2_t *)(a2 + 200) = v60;
  *(double *)(a3 + 200) = -v60.f64[1];
  *(float64_t *)(a3 + 208) = v60.f64[0];
  v61 = vmulq_n_f64(v52, v9 * 5.0);
  *(float64x2_t *)(a4 + 200) = v61;
  *(float64x2_t *)(a6 + 200) = vnegq_f64(v61);
  *(double *)(a5 + 200) = -v61.f64[1];
  *(float64_t *)(a5 + 208) = v61.f64[0];
  v62 = v12 + v53.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 216) = vmulq_n_f64(v51, v62);
  v51.f64[0] = *(float64_t *)(a2 + 136);
  *(double *)(a2 + 216) = *(double *)(a2 + 128) + v9 * 6.0 * (*(double *)(a1 + 200) + *(double *)(a1 + 144));
  *(double *)(a2 + 224) = v51.f64[0] + v9 * 6.0 * (*(double *)(a1 + 152) + *(double *)(a1 + 208));
  v51.f64[0] = *(float64_t *)(a3 + 136);
  *(double *)(a3 + 216) = *(double *)(a3 + 128) + v9 * 6.0 * (*(double *)(a1 + 208) - *(double *)(a1 + 152));
  *(double *)(a3 + 224) = v51.f64[0] + v9 * 6.0 * (*(double *)(a1 + 144) - *(double *)(a1 + 200));
  v51.f64[0] = *(float64_t *)(a4 + 136);
  *(double *)(a4 + 216) = *(double *)(a4 + 128) + v9 * 6.0 * (*(double *)(a2 + 200) + *(double *)(a2 + 144));
  *(double *)(a4 + 224) = v51.f64[0] + v9 * 6.0 * (*(double *)(a2 + 152) + *(double *)(a2 + 208));
  v51.f64[0] = *(float64_t *)(a6 + 136);
  *(double *)(a6 + 216) = *(double *)(a6 + 128) + v9 * 6.0 * (*(double *)(a3 + 208) - *(double *)(a3 + 152));
  *(double *)(a6 + 224) = v51.f64[0] + v9 * 6.0 * (*(double *)(a3 + 144) - *(double *)(a3 + 200));
  v51.f64[0] = *(float64_t *)(a5 + 136);
  *(double *)(a5 + 216) = *(double *)(a5 + 128) + v9 * 6.0 * (*(double *)(a2 + 208) - *(double *)(a2 + 152));
  *(double *)(a5 + 224) = v51.f64[0] + v9 * 6.0 * (*(double *)(a2 + 144) - *(double *)(a2 + 200));
  v63 = v16.f64[0] + v12 * v62 - v53.f64[0];
  *(float64x2_t *)(a1 + 232) = vmulq_n_f64(v37, v63);
  v64 = *(double *)(a2 + 152);
  *(double *)(a2 + 232) = *(double *)(a2 + 144) + v9 * 7.0 * (*(double *)(a1 + 216) + *(double *)(a1 + 160));
  *(double *)(a2 + 240) = v64 + v9 * 7.0 * (*(double *)(a1 + 168) + *(double *)(a1 + 224));
  v65 = *(double *)(a3 + 152);
  *(double *)(a3 + 232) = *(double *)(a3 + 144) + v9 * 7.0 * (*(double *)(a1 + 224) - *(double *)(a1 + 168));
  *(double *)(a3 + 240) = v65 + v9 * 7.0 * (*(double *)(a1 + 160) - *(double *)(a1 + 216));
  v66 = *(double *)(a4 + 152);
  *(double *)(a4 + 232) = *(double *)(a4 + 144) + v9 * 7.0 * (*(double *)(a2 + 216) + *(double *)(a2 + 160));
  *(double *)(a4 + 240) = v66 + v9 * 7.0 * (*(double *)(a2 + 168) + *(double *)(a2 + 224));
  v67 = *(double *)(a6 + 152);
  *(double *)(a6 + 232) = *(double *)(a6 + 144) + v9 * 7.0 * (*(double *)(a3 + 224) - *(double *)(a3 + 168));
  *(double *)(a6 + 240) = v67 + v9 * 7.0 * (*(double *)(a3 + 160) - *(double *)(a3 + 216));
  v68 = *(double *)(a5 + 152);
  *(double *)(a5 + 232) = *(double *)(a5 + 144) + v9 * 7.0 * (*(double *)(a2 + 224) - *(double *)(a2 + 168));
  *(double *)(a5 + 240) = v68 + v9 * 7.0 * (*(double *)(a2 + 160) - *(double *)(a2 + 216));
  v69 = v54 + v12 * v63 - v16.f64[0];
  *(float64x2_t *)(a1 + 248) = vmulq_n_f64(v18, v69);
  v37.f64[0] = *(float64_t *)(a2 + 168);
  *(double *)(a2 + 248) = *(double *)(a2 + 160) + v9 * 8.0 * (*(double *)(a1 + 232) + *(double *)(a1 + 176));
  *(double *)(a2 + 256) = v37.f64[0] + v9 * 8.0 * (*(double *)(a1 + 184) + *(double *)(a1 + 240));
  v37.f64[0] = *(float64_t *)(a3 + 168);
  *(double *)(a3 + 248) = *(double *)(a3 + 160) + v9 * 8.0 * (*(double *)(a1 + 240) - *(double *)(a1 + 184));
  *(double *)(a3 + 256) = v37.f64[0] + v9 * 8.0 * (*(double *)(a1 + 176) - *(double *)(a1 + 232));
  v37.f64[0] = *(float64_t *)(a4 + 168);
  *(double *)(a4 + 248) = *(double *)(a4 + 160) + v9 * 8.0 * (*(double *)(a2 + 232) + *(double *)(a2 + 176));
  *(double *)(a4 + 256) = v37.f64[0] + v9 * 8.0 * (*(double *)(a2 + 184) + *(double *)(a2 + 240));
  v37.f64[0] = *(float64_t *)(a6 + 168);
  *(double *)(a6 + 248) = *(double *)(a6 + 160) + v9 * 8.0 * (*(double *)(a3 + 240) - *(double *)(a3 + 184));
  *(double *)(a6 + 256) = v37.f64[0] + v9 * 8.0 * (*(double *)(a3 + 176) - *(double *)(a3 + 232));
  v37.f64[0] = *(float64_t *)(a5 + 168);
  *(double *)(a5 + 248) = *(double *)(a5 + 160) + v9 * 8.0 * (*(double *)(a2 + 240) - *(double *)(a2 + 184));
  *(double *)(a5 + 256) = v37.f64[0] + v9 * 8.0 * (*(double *)(a2 + 176) - *(double *)(a2 + 232));
  v70 = v12 * v69 - (v41.f64[0] - (v12 + v12) * v54) - v54;
  *(float64x2_t *)(a1 + 264) = vmulq_n_f64(v14, v70);
  v71 = *(double *)(a2 + 184);
  *(double *)(a2 + 264) = *(double *)(a2 + 176) + v9 * 9.0 * (v59 + *(double *)(a1 + 248));
  v72 = v71 + v9 * 9.0 * *(double *)(a1 + 256);
  *(double *)(a2 + 272) = v72;
  *(double *)(a3 + 264) = v72;
  *(double *)(a3 + 272) = *(double *)(a3 + 184) + v9 * 9.0 * (v59 - *(double *)(a1 + 248));
  v73 = *(double *)(a4 + 184);
  *(double *)(a4 + 264) = *(double *)(a4 + 176) + v9 * 9.0 * (*(double *)(a2 + 248) + *(double *)(a2 + 192));
  *(double *)(a4 + 272) = v73 + v9 * 9.0 * *(double *)(a2 + 256);
  v74 = *(double *)(a6 + 184);
  *(double *)(a6 + 264) = *(double *)(a6 + 176) + v9 * 9.0 * *(double *)(a3 + 256);
  *(double *)(a6 + 272) = v74 + v9 * 9.0 * (*(double *)(a3 + 192) - *(double *)(a3 + 248));
  *(_QWORD *)(a5 + 264) = *(_QWORD *)(a4 + 272);
  *(_QWORD *)(a5 + 272) = *(_QWORD *)(a6 + 264);
  *(double *)(a1 + 280) = 1.0 - (v59 - v29 * v70);
  v75 = v9 * 20.0;
  *(double *)(a2 + 280) = *(double *)(a2 + 192) + v75 * *(double *)(a1 + 264);
  *(double *)(a3 + 280) = *(double *)(a3 + 192) + v75 * *(double *)(a1 + 272);
  *(double *)(a4 + 280) = *(double *)(a4 + 192) + v75 * *(double *)(a2 + 264);
  *(double *)(a6 + 280) = *(double *)(a6 + 192) + v75 * *(double *)(a3 + 272);
  result = *(double *)(a5 + 192) + v75 * *(double *)(a2 + 272);
  *(double *)(a5 + 280) = result;
  return result;
}

double AccelerateAR_ComputeZernikePolyAndDerivativesLevel6NoBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v40;
  double v42;
  double v43;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double result;

  v9 = 1.0 / a7;
  v10 = v9 * a9;
  v11 = v10 * v10 + v9 * a8 * (v9 * a8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)a6 = 0;
  v12.f64[0] = -(v9 * a9);
  v12.f64[1] = v9 * a8;
  v13.f64[0] = v9 * a8;
  v13.f64[1] = v10;
  *(float64x2_t *)(a1 + 8) = v13;
  *(double *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = v9;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a5 + 8) = 0u;
  v14 = v11 * 2.0 + -1.0;
  *(double *)(a1 + 24) = v14 + 1.0;
  v15 = vmulq_n_f64(v13, v9 * 4.0);
  *(float64_t *)(a2 + 24) = v15.f64[0];
  *(float64_t *)(a3 + 24) = v15.f64[1];
  v16 = v9 * v9 * 4.0;
  *(double *)(a4 + 24) = v16;
  *(double *)(a6 + 24) = v16;
  *(_QWORD *)(a5 + 24) = 0;
  v17 = vmlaq_n_f64(vmulq_n_f64(v12, v10), v13, v9 * a8);
  *(float64x2_t *)(a1 + 32) = v17;
  v18 = vmulq_n_f64(v13, v9 + v9);
  v19 = vmulq_n_f64(v12, v9 + v9);
  *(float64x2_t *)(a2 + 32) = v18;
  *(float64x2_t *)(a3 + 32) = v19;
  v20 = v9 * v9 + v9 * v9;
  *(double *)(a4 + 32) = v20;
  *(_QWORD *)(a4 + 40) = 0;
  *(double *)(a6 + 32) = -v20;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(double *)(a5 + 40) = v20;
  v21 = v11 + v14 + -1.0;
  _Q11 = vmulq_n_f64(v13, v21);
  *(float64x2_t *)(a1 + 48) = _Q11;
  v23 = v9 + v9 * 3.0 * (v14 + v17.f64[0]);
  v24 = vmuld_lane_f64(v9 * 3.0, v17, 1);
  v25 = v9 + v9 * 3.0 * (v14 - v17.f64[0]);
  *(double *)(a2 + 48) = v23;
  *(double *)(a2 + 56) = v24;
  *(double *)(a3 + 48) = v24;
  *(double *)(a3 + 56) = v25;
  _Q28 = vmulq_n_f64(v13, v9 * v9 * 6.0);
  v27 = vmuld_lane_f64(3.0, _Q28, 1);
  *(double *)(a4 + 48) = 3.0 * _Q28.f64[0];
  *(float64_t *)(a4 + 56) = _Q28.f64[1];
  *(float64_t *)(a6 + 48) = _Q28.f64[0];
  *(double *)(a6 + 56) = v27;
  *(int8x16_t *)(a5 + 48) = vextq_s8((int8x16_t)_Q28, (int8x16_t)_Q28, 8uLL);
  v28 = v11 + v11;
  v29 = -(v14 - (v11 + v11) * v21);
  *(double *)(a1 + 64) = -1.0 - (v14 - (v11 + v11) * v21);
  _D6 = v9 * 8.0;
  v15.f64[0] = vmlad_n_f64(v15.f64[0], v9 * 8.0, _Q11.f64[0]);
  __asm { FMLA            D22, D6, V11.D[1] }
  *(float64_t *)(a2 + 64) = v15.f64[0];
  *(double *)(a3 + 64) = _D22;
  *(double *)(a4 + 64) = v16 + v9 * 8.0 * v23;
  *(double *)(a6 + 64) = v16 + v9 * 8.0 * v25;
  *(double *)(a5 + 64) = v9 * 8.0 * v24;
  v36 = vmlaq_n_f64(vmulq_laneq_f64(v12, v17, 1), v13, v17.f64[0]);
  *(float64x2_t *)(a1 + 72) = v36;
  v37 = vmulq_n_f64(v17, v9 * 3.0);
  *(float64x2_t *)(a2 + 72) = v37;
  *(double *)(a3 + 72) = -v37.f64[1];
  *(float64_t *)(a3 + 80) = v37.f64[0];
  v38 = vmulq_n_f64(v18, v9 * 3.0);
  *(float64x2_t *)(a4 + 72) = v38;
  *(float64x2_t *)(a6 + 72) = vnegq_f64(v38);
  *(double *)(a5 + 72) = -v38.f64[1];
  *(float64_t *)(a5 + 80) = v38.f64[0];
  v38.f64[0] = v11 + v21 + -1.0;
  _Q12 = vmulq_n_f64(v17, v38.f64[0]);
  *(float64x2_t *)(a1 + 88) = _Q12;
  v40 = vmlaq_n_f64(v18, vaddq_f64(v36, _Q11), v9 * 4.0);
  *(float64x2_t *)(a2 + 88) = v40;
  _Q23 = vmlaq_n_f64(v19, vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)_Q11, 8uLL), (float64x2_t)vextq_s8((int8x16_t)_Q11, (int8x16_t)v36, 8uLL)), v9 * 4.0);
  *(float64x2_t *)(a3 + 88) = _Q23;
  v42 = v9 * 4.0 * (v24 + v37.f64[1]);
  *(double *)(a4 + 88) = v20 + v9 * 4.0 * (v37.f64[0] + v23);
  *(double *)(a4 + 96) = v42;
  *(double *)(a6 + 88) = -(v20 - v9 * 4.0 * (v37.f64[0] - v25));
  *(double *)(a6 + 96) = v42;
  *(_QWORD *)(a5 + 88) = 0;
  *(double *)(a5 + 96) = v20 + v9 * 4.0 * (v23 - v37.f64[0]);
  v43 = v29 + v11 * v38.f64[0] - v21;
  _Q11 = vmulq_n_f64(v13, v43);
  *(float64x2_t *)(a1 + 104) = _Q11;
  _D21 = v9 * 5.0;
  __asm { FMLA            D30, D21, V12.D[1] }
  *(double *)(a2 + 104) = v23 + v9 * 5.0 * (v29 + _Q12.f64[0]);
  *(_QWORD *)(a2 + 112) = _D30;
  *(_QWORD *)(a3 + 104) = _D30;
  *(double *)(a3 + 112) = v25 + v9 * 5.0 * (v29 - _Q12.f64[0]);
  v40.f64[0] = v15.f64[0] + v40.f64[0];
  v47.f64[1] = _Q28.f64[1];
  v47.f64[0] = 3.0 * _Q28.f64[0];
  v48 = vmlaq_n_f64(v47, v40, v9 * 5.0);
  *(float64x2_t *)(a4 + 104) = v48;
  *(float64_t *)(a5 + 104) = v48.f64[1];
  __asm { FMLA            D28, D21, V23.D[1] }
  *(float64_t *)(a6 + 104) = _Q28.f64[0];
  *(float64_t *)(a5 + 112) = _Q28.f64[0];
  *(double *)(a6 + 112) = v27 + v9 * 5.0 * (_D22 - _Q23.f64[0]);
  v40.f64[0] = -(v29 - (v11 + v11) * v43);
  *(double *)(a1 + 120) = 1.0 - (v29 - (v11 + v11) * v43);
  _Q23.f64[0] = v9 * 12.0;
  __asm { FMLA            D22, D23, V11.D[1] }
  *(double *)(a2 + 120) = vmlad_n_f64(v15.f64[0], v9 * 12.0, _Q11.f64[0]);
  *(_QWORD *)(a3 + 120) = _D22;
  *(double *)(a4 + 120) = *(double *)(a4 + 64) + v9 * 12.0 * *(double *)(a2 + 104);
  *(double *)(a6 + 120) = *(double *)(a6 + 64) + v9 * 12.0 * *(double *)(a3 + 112);
  *(double *)(a5 + 120) = *(double *)(a5 + 64) + v9 * 12.0 * *(double *)(a2 + 112);
  v50 = vmlaq_n_f64(vmulq_laneq_f64(v12, v36, 1), v13, v36.f64[0]);
  *(float64x2_t *)(a1 + 128) = v50;
  v51 = vmulq_n_f64(v36, v9 * 4.0);
  *(float64x2_t *)(a2 + 128) = v51;
  *(double *)(a3 + 128) = -v51.f64[1];
  *(float64_t *)(a3 + 136) = v51.f64[0];
  v52 = vmulq_n_f64(v37, v9 * 4.0);
  *(float64x2_t *)(a4 + 128) = v52;
  *(float64x2_t *)(a6 + 128) = vnegq_f64(v52);
  *(double *)(a5 + 128) = -v52.f64[1];
  *(float64_t *)(a5 + 136) = v52.f64[0];
  v53 = v11 + v38.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 144) = vmulq_n_f64(v36, v53);
  _Q28.f64[0] = *(float64_t *)(a2 + 80);
  *(double *)(a2 + 144) = *(double *)(a2 + 72) + v9 * 5.0 * (*(double *)(a1 + 128) + *(double *)(a1 + 88));
  *(double *)(a2 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a1 + 96) + *(double *)(a1 + 136));
  _Q28.f64[0] = *(float64_t *)(a3 + 80);
  *(double *)(a3 + 144) = *(double *)(a3 + 72) + v9 * 5.0 * (*(double *)(a1 + 136) - *(double *)(a1 + 96));
  *(double *)(a3 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a1 + 88) - *(double *)(a1 + 128));
  _Q28.f64[0] = *(float64_t *)(a4 + 80);
  *(double *)(a4 + 144) = *(double *)(a4 + 72) + v9 * 5.0 * (*(double *)(a2 + 128) + *(double *)(a2 + 88));
  *(double *)(a4 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a2 + 96) + *(double *)(a2 + 136));
  _Q28.f64[0] = *(float64_t *)(a6 + 80);
  *(double *)(a6 + 144) = *(double *)(a6 + 72) + v9 * 5.0 * (*(double *)(a3 + 136) - *(double *)(a3 + 96));
  *(double *)(a6 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a3 + 88) - *(double *)(a3 + 128));
  _Q28.f64[0] = *(float64_t *)(a5 + 80);
  *(double *)(a5 + 144) = *(double *)(a5 + 72) + v9 * 5.0 * (*(double *)(a2 + 136) - *(double *)(a2 + 96));
  *(double *)(a5 + 152) = _Q28.f64[0] + v9 * 5.0 * (*(double *)(a2 + 88) - *(double *)(a2 + 128));
  v38.f64[0] = v43 + v11 * v53 - v38.f64[0];
  *(float64x2_t *)(a1 + 160) = vmulq_n_f64(v17, v38.f64[0]);
  _Q28.f64[0] = *(float64_t *)(a2 + 96);
  *(double *)(a2 + 160) = *(double *)(a2 + 88) + v9 * 6.0 * (*(double *)(a1 + 144) + *(double *)(a1 + 104));
  *(double *)(a2 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a1 + 112) + *(double *)(a1 + 152));
  _Q28.f64[0] = *(float64_t *)(a3 + 96);
  *(double *)(a3 + 160) = *(double *)(a3 + 88) + v9 * 6.0 * (*(double *)(a1 + 152) - *(double *)(a1 + 112));
  *(double *)(a3 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a1 + 104) - *(double *)(a1 + 144));
  _Q28.f64[0] = *(float64_t *)(a4 + 96);
  *(double *)(a4 + 160) = *(double *)(a4 + 88) + v9 * 6.0 * (*(double *)(a2 + 144) + *(double *)(a2 + 104));
  *(double *)(a4 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a2 + 112) + *(double *)(a2 + 152));
  _Q28.f64[0] = *(float64_t *)(a6 + 96);
  *(double *)(a6 + 160) = *(double *)(a6 + 88) + v9 * 6.0 * (*(double *)(a3 + 152) - *(double *)(a3 + 112));
  *(double *)(a6 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a3 + 104) - *(double *)(a3 + 144));
  _Q28.f64[0] = *(float64_t *)(a5 + 96);
  *(double *)(a5 + 160) = *(double *)(a5 + 88) + v9 * 6.0 * (*(double *)(a2 + 152) - *(double *)(a2 + 112));
  *(double *)(a5 + 168) = _Q28.f64[0] + v9 * 6.0 * (*(double *)(a2 + 104) - *(double *)(a2 + 144));
  v37.f64[0] = v11 * v38.f64[0] - (v29 - (v11 + v11) * v43) - v43;
  *(float64x2_t *)(a1 + 176) = vmulq_n_f64(v13, v37.f64[0]);
  v54 = *(double *)(a2 + 112);
  *(double *)(a2 + 176) = *(double *)(a2 + 104) + v9 * 7.0 * (*(double *)(a1 + 160) - (v29 - (v11 + v11) * v43));
  v55 = v54 + v9 * 7.0 * *(double *)(a1 + 168);
  *(double *)(a2 + 184) = v55;
  *(double *)(a3 + 176) = v55;
  *(double *)(a3 + 184) = *(double *)(a3 + 112) + v9 * 7.0 * (v40.f64[0] - *(double *)(a1 + 160));
  v56 = *(double *)(a4 + 112);
  *(double *)(a4 + 176) = *(double *)(a4 + 104) + v9 * 7.0 * (*(double *)(a2 + 160) + *(double *)(a2 + 120));
  *(double *)(a4 + 184) = v56 + v9 * 7.0 * *(double *)(a2 + 168);
  v57 = *(double *)(a6 + 112);
  *(double *)(a6 + 176) = *(double *)(a6 + 104) + v9 * 7.0 * *(double *)(a3 + 168);
  *(double *)(a6 + 184) = v57 + v9 * 7.0 * (*(double *)(a3 + 120) - *(double *)(a3 + 160));
  *(_QWORD *)(a5 + 176) = *(_QWORD *)(a4 + 184);
  *(_QWORD *)(a5 + 184) = *(_QWORD *)(a6 + 176);
  _Q28.f64[0] = -(v40.f64[0] - (v11 + v11) * v37.f64[0]);
  *(double *)(a1 + 192) = -1.0 - (v40.f64[0] - (v11 + v11) * v37.f64[0]);
  *(double *)(a2 + 192) = *(double *)(a2 + 120) + v9 * 16.0 * *(double *)(a1 + 176);
  *(double *)(a3 + 192) = *(double *)(a3 + 120) + v9 * 16.0 * *(double *)(a1 + 184);
  *(double *)(a4 + 192) = *(double *)(a4 + 120) + v9 * 16.0 * *(double *)(a2 + 176);
  *(double *)(a6 + 192) = *(double *)(a6 + 120) + v9 * 16.0 * *(double *)(a3 + 184);
  *(double *)(a5 + 192) = *(double *)(a5 + 120) + v9 * 16.0 * *(double *)(a2 + 184);
  v58 = vmlaq_n_f64(vmulq_laneq_f64(v12, v50, 1), v13, v50.f64[0]);
  *(float64x2_t *)(a1 + 200) = v58;
  v59 = vmulq_n_f64(v50, v9 * 5.0);
  *(float64x2_t *)(a2 + 200) = v59;
  *(double *)(a3 + 200) = -v59.f64[1];
  *(float64_t *)(a3 + 208) = v59.f64[0];
  v60 = vmulq_n_f64(v51, v9 * 5.0);
  *(float64x2_t *)(a4 + 200) = v60;
  *(float64x2_t *)(a6 + 200) = vnegq_f64(v60);
  *(double *)(a5 + 200) = -v60.f64[1];
  *(float64_t *)(a5 + 208) = v60.f64[0];
  v51.f64[0] = v11 + v53 + -1.0;
  *(float64x2_t *)(a1 + 216) = vmulq_n_f64(v50, v51.f64[0]);
  v61 = *(double *)(a2 + 136);
  *(double *)(a2 + 216) = *(double *)(a2 + 128) + v9 * 6.0 * (*(double *)(a1 + 200) + *(double *)(a1 + 144));
  *(double *)(a2 + 224) = v61 + v9 * 6.0 * (*(double *)(a1 + 152) + *(double *)(a1 + 208));
  v62 = *(double *)(a3 + 136);
  *(double *)(a3 + 216) = *(double *)(a3 + 128) + v9 * 6.0 * (*(double *)(a1 + 208) - *(double *)(a1 + 152));
  *(double *)(a3 + 224) = v62 + v9 * 6.0 * (*(double *)(a1 + 144) - *(double *)(a1 + 200));
  v63 = *(double *)(a4 + 136);
  *(double *)(a4 + 216) = *(double *)(a4 + 128) + v9 * 6.0 * (*(double *)(a2 + 200) + *(double *)(a2 + 144));
  *(double *)(a4 + 224) = v63 + v9 * 6.0 * (*(double *)(a2 + 152) + *(double *)(a2 + 208));
  v64 = *(double *)(a6 + 136);
  *(double *)(a6 + 216) = *(double *)(a6 + 128) + v9 * 6.0 * (*(double *)(a3 + 208) - *(double *)(a3 + 152));
  *(double *)(a6 + 224) = v64 + v9 * 6.0 * (*(double *)(a3 + 144) - *(double *)(a3 + 200));
  v65 = *(double *)(a5 + 136);
  *(double *)(a5 + 216) = *(double *)(a5 + 128) + v9 * 6.0 * (*(double *)(a2 + 208) - *(double *)(a2 + 152));
  *(double *)(a5 + 224) = v65 + v9 * 6.0 * (*(double *)(a2 + 144) - *(double *)(a2 + 200));
  v59.f64[0] = v38.f64[0] + v11 * v51.f64[0] - v53;
  *(float64x2_t *)(a1 + 232) = vmulq_n_f64(v36, v59.f64[0]);
  v66 = *(double *)(a2 + 152);
  *(double *)(a2 + 232) = *(double *)(a2 + 144) + v9 * 7.0 * (*(double *)(a1 + 216) + *(double *)(a1 + 160));
  *(double *)(a2 + 240) = v66 + v9 * 7.0 * (*(double *)(a1 + 168) + *(double *)(a1 + 224));
  v67 = *(double *)(a3 + 152);
  *(double *)(a3 + 232) = *(double *)(a3 + 144) + v9 * 7.0 * (*(double *)(a1 + 224) - *(double *)(a1 + 168));
  *(double *)(a3 + 240) = v67 + v9 * 7.0 * (*(double *)(a1 + 160) - *(double *)(a1 + 216));
  v68 = *(double *)(a4 + 152);
  *(double *)(a4 + 232) = *(double *)(a4 + 144) + v9 * 7.0 * (*(double *)(a2 + 216) + *(double *)(a2 + 160));
  *(double *)(a4 + 240) = v68 + v9 * 7.0 * (*(double *)(a2 + 168) + *(double *)(a2 + 224));
  v69 = *(double *)(a6 + 152);
  *(double *)(a6 + 232) = *(double *)(a6 + 144) + v9 * 7.0 * (*(double *)(a3 + 224) - *(double *)(a3 + 168));
  *(double *)(a6 + 240) = v69 + v9 * 7.0 * (*(double *)(a3 + 160) - *(double *)(a3 + 216));
  v70 = *(double *)(a5 + 152);
  *(double *)(a5 + 232) = *(double *)(a5 + 144) + v9 * 7.0 * (*(double *)(a2 + 224) - *(double *)(a2 + 168));
  *(double *)(a5 + 240) = v70 + v9 * 7.0 * (*(double *)(a2 + 160) - *(double *)(a2 + 216));
  v38.f64[0] = v37.f64[0] + v11 * v59.f64[0] - v38.f64[0];
  *(float64x2_t *)(a1 + 248) = vmulq_n_f64(v17, v38.f64[0]);
  v71 = *(double *)(a2 + 168);
  *(double *)(a2 + 248) = *(double *)(a2 + 160) + v9 * 8.0 * (*(double *)(a1 + 232) + *(double *)(a1 + 176));
  *(double *)(a2 + 256) = v71 + v9 * 8.0 * (*(double *)(a1 + 184) + *(double *)(a1 + 240));
  v72 = *(double *)(a3 + 168);
  *(double *)(a3 + 248) = *(double *)(a3 + 160) + v9 * 8.0 * (*(double *)(a1 + 240) - *(double *)(a1 + 184));
  *(double *)(a3 + 256) = v72 + v9 * 8.0 * (*(double *)(a1 + 176) - *(double *)(a1 + 232));
  v73 = *(double *)(a4 + 168);
  *(double *)(a4 + 248) = *(double *)(a4 + 160) + v9 * 8.0 * (*(double *)(a2 + 232) + *(double *)(a2 + 176));
  *(double *)(a4 + 256) = v73 + v9 * 8.0 * (*(double *)(a2 + 184) + *(double *)(a2 + 240));
  v74 = *(double *)(a6 + 168);
  *(double *)(a6 + 248) = *(double *)(a6 + 160) + v9 * 8.0 * (*(double *)(a3 + 240) - *(double *)(a3 + 184));
  *(double *)(a6 + 256) = v74 + v9 * 8.0 * (*(double *)(a3 + 176) - *(double *)(a3 + 232));
  v75 = *(double *)(a5 + 168);
  *(double *)(a5 + 248) = *(double *)(a5 + 160) + v9 * 8.0 * (*(double *)(a2 + 240) - *(double *)(a2 + 184));
  *(double *)(a5 + 256) = v75 + v9 * 8.0 * (*(double *)(a2 + 176) - *(double *)(a2 + 232));
  v76 = _Q28.f64[0] + v11 * v38.f64[0] - v37.f64[0];
  *(float64x2_t *)(a1 + 264) = vmulq_n_f64(v13, v76);
  v48.f64[0] = *(float64_t *)(a2 + 184);
  *(double *)(a2 + 264) = *(double *)(a2 + 176) + v9 * 9.0 * (_Q28.f64[0] + *(double *)(a1 + 248));
  v60.f64[0] = v48.f64[0] + v9 * 9.0 * *(double *)(a1 + 256);
  *(float64_t *)(a2 + 272) = v60.f64[0];
  *(float64_t *)(a3 + 264) = v60.f64[0];
  *(double *)(a3 + 272) = *(double *)(a3 + 184) + v9 * 9.0 * (_Q28.f64[0] - *(double *)(a1 + 248));
  v48.f64[0] = *(float64_t *)(a4 + 184);
  *(double *)(a4 + 264) = *(double *)(a4 + 176) + v9 * 9.0 * (*(double *)(a2 + 248) + *(double *)(a2 + 192));
  *(double *)(a4 + 272) = v48.f64[0] + v9 * 9.0 * *(double *)(a2 + 256);
  v48.f64[0] = *(float64_t *)(a6 + 184);
  *(double *)(a6 + 264) = *(double *)(a6 + 176) + v9 * 9.0 * *(double *)(a3 + 256);
  *(double *)(a6 + 272) = v48.f64[0] + v9 * 9.0 * (*(double *)(a3 + 192) - *(double *)(a3 + 248));
  *(_QWORD *)(a5 + 264) = *(_QWORD *)(a4 + 272);
  *(_QWORD *)(a5 + 272) = *(_QWORD *)(a6 + 264);
  v60.f64[0] = -(_Q28.f64[0] - (v11 + v11) * v76);
  *(double *)(a1 + 280) = 1.0 - (_Q28.f64[0] - (v11 + v11) * v76);
  *(double *)(a2 + 280) = *(double *)(a2 + 192) + v9 * 20.0 * *(double *)(a1 + 264);
  *(double *)(a3 + 280) = *(double *)(a3 + 192) + v9 * 20.0 * *(double *)(a1 + 272);
  *(double *)(a4 + 280) = *(double *)(a4 + 192) + v9 * 20.0 * *(double *)(a2 + 264);
  *(double *)(a6 + 280) = *(double *)(a6 + 192) + v9 * 20.0 * *(double *)(a3 + 272);
  *(double *)(a5 + 280) = *(double *)(a5 + 192) + v9 * 20.0 * *(double *)(a2 + 272);
  *(float64x2_t *)(a1 + 288) = vmlaq_n_f64(vmulq_laneq_f64(v12, v58, 1), v13, v58.f64[0]);
  *(double *)(a2 + 288) = v9 * 6.0 * *(double *)(a1 + 200);
  v77 = v9 * 6.0 * *(double *)(a1 + 208);
  *(double *)(a2 + 296) = v77;
  *(double *)(a3 + 288) = -v77;
  *(_QWORD *)(a3 + 296) = *(_QWORD *)(a2 + 288);
  v12.f64[0] = *(float64_t *)(a2 + 200);
  *(double *)(a4 + 288) = v9 * 6.0 * v12.f64[0];
  *(double *)(a4 + 296) = v9 * 6.0 * *(double *)(a2 + 208);
  *(double *)(a6 + 288) = -(v9 * 6.0 * v12.f64[0]);
  *(double *)(a6 + 296) = -*(double *)(a4 + 296);
  *(double *)(a5 + 288) = -*(double *)(a4 + 296);
  *(_QWORD *)(a5 + 296) = *(_QWORD *)(a4 + 288);
  v12.f64[0] = v11 + v51.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 304) = vmulq_n_f64(v58, v12.f64[0]);
  v58.f64[0] = *(float64_t *)(a2 + 208);
  *(double *)(a2 + 304) = *(double *)(a2 + 200) + v9 * 7.0 * (*(double *)(a1 + 288) + *(double *)(a1 + 216));
  *(double *)(a2 + 312) = v58.f64[0] + v9 * 7.0 * (*(double *)(a1 + 224) + *(double *)(a1 + 296));
  v58.f64[0] = *(float64_t *)(a3 + 208);
  *(double *)(a3 + 304) = *(double *)(a3 + 200) + v9 * 7.0 * (*(double *)(a1 + 296) - *(double *)(a1 + 224));
  *(double *)(a3 + 312) = v58.f64[0] + v9 * 7.0 * (*(double *)(a1 + 216) - *(double *)(a1 + 288));
  v58.f64[0] = *(float64_t *)(a4 + 208);
  *(double *)(a4 + 304) = *(double *)(a4 + 200) + v9 * 7.0 * (*(double *)(a2 + 288) + *(double *)(a2 + 216));
  *(double *)(a4 + 312) = v58.f64[0] + v9 * 7.0 * (*(double *)(a2 + 224) + *(double *)(a2 + 296));
  v58.f64[0] = *(float64_t *)(a6 + 208);
  *(double *)(a6 + 304) = *(double *)(a6 + 200) + v9 * 7.0 * (*(double *)(a3 + 296) - *(double *)(a3 + 224));
  *(double *)(a6 + 312) = v58.f64[0] + v9 * 7.0 * (*(double *)(a3 + 216) - *(double *)(a3 + 288));
  v58.f64[0] = *(float64_t *)(a5 + 208);
  *(double *)(a5 + 304) = *(double *)(a5 + 200) + v9 * 7.0 * (*(double *)(a2 + 296) - *(double *)(a2 + 224));
  *(double *)(a5 + 312) = v58.f64[0] + v9 * 7.0 * (*(double *)(a2 + 216) - *(double *)(a2 + 288));
  v12.f64[0] = v59.f64[0] + v11 * v12.f64[0] - v51.f64[0];
  *(float64x2_t *)(a1 + 320) = vmulq_n_f64(v50, v12.f64[0]);
  v78 = *(double *)(a2 + 224);
  *(double *)(a2 + 320) = *(double *)(a2 + 216) + v9 * 8.0 * (*(double *)(a1 + 304) + *(double *)(a1 + 232));
  *(double *)(a2 + 328) = v78 + v9 * 8.0 * (*(double *)(a1 + 240) + *(double *)(a1 + 312));
  v79 = *(double *)(a3 + 224);
  *(double *)(a3 + 320) = *(double *)(a3 + 216) + v9 * 8.0 * (*(double *)(a1 + 312) - *(double *)(a1 + 240));
  *(double *)(a3 + 328) = v79 + v9 * 8.0 * (*(double *)(a1 + 232) - *(double *)(a1 + 304));
  v80 = *(double *)(a4 + 224);
  *(double *)(a4 + 320) = *(double *)(a4 + 216) + v9 * 8.0 * (*(double *)(a2 + 304) + *(double *)(a2 + 232));
  *(double *)(a4 + 328) = v80 + v9 * 8.0 * (*(double *)(a2 + 240) + *(double *)(a2 + 312));
  v81 = *(double *)(a6 + 224);
  *(double *)(a6 + 320) = *(double *)(a6 + 216) + v9 * 8.0 * (*(double *)(a3 + 312) - *(double *)(a3 + 240));
  *(double *)(a6 + 328) = v81 + v9 * 8.0 * (*(double *)(a3 + 232) - *(double *)(a3 + 304));
  v82 = *(double *)(a5 + 224);
  *(double *)(a5 + 320) = *(double *)(a5 + 216) + v9 * 8.0 * (*(double *)(a2 + 312) - *(double *)(a2 + 240));
  *(double *)(a5 + 328) = v82 + v9 * 8.0 * (*(double *)(a2 + 232) - *(double *)(a2 + 304));
  v83 = v38.f64[0] + v11 * v12.f64[0] - v59.f64[0];
  *(float64x2_t *)(a1 + 336) = vmulq_n_f64(v36, v83);
  v84 = *(double *)(a2 + 240);
  *(double *)(a2 + 336) = *(double *)(a2 + 232) + v9 * 9.0 * (*(double *)(a1 + 320) + *(double *)(a1 + 248));
  *(double *)(a2 + 344) = v84 + v9 * 9.0 * (*(double *)(a1 + 256) + *(double *)(a1 + 328));
  v85 = *(double *)(a3 + 240);
  *(double *)(a3 + 336) = *(double *)(a3 + 232) + v9 * 9.0 * (*(double *)(a1 + 328) - *(double *)(a1 + 256));
  *(double *)(a3 + 344) = v85 + v9 * 9.0 * (*(double *)(a1 + 248) - *(double *)(a1 + 320));
  v86 = *(double *)(a4 + 240);
  *(double *)(a4 + 336) = *(double *)(a4 + 232) + v9 * 9.0 * (*(double *)(a2 + 320) + *(double *)(a2 + 248));
  *(double *)(a4 + 344) = v86 + v9 * 9.0 * (*(double *)(a2 + 256) + *(double *)(a2 + 328));
  v87 = *(double *)(a6 + 240);
  *(double *)(a6 + 336) = *(double *)(a6 + 232) + v9 * 9.0 * (*(double *)(a3 + 328) - *(double *)(a3 + 256));
  *(double *)(a6 + 344) = v87 + v9 * 9.0 * (*(double *)(a3 + 248) - *(double *)(a3 + 320));
  v88 = *(double *)(a5 + 240);
  *(double *)(a5 + 336) = *(double *)(a5 + 232) + v9 * 9.0 * (*(double *)(a2 + 328) - *(double *)(a2 + 256));
  *(double *)(a5 + 344) = v88 + v9 * 9.0 * (*(double *)(a2 + 248) - *(double *)(a2 + 320));
  v89 = v76 + v11 * v83 - v38.f64[0];
  *(float64x2_t *)(a1 + 352) = vmulq_n_f64(v17, v89);
  v90 = *(double *)(a2 + 256);
  *(double *)(a2 + 352) = *(double *)(a2 + 248) + v9 * 10.0 * (*(double *)(a1 + 336) + *(double *)(a1 + 264));
  *(double *)(a2 + 360) = v90 + v9 * 10.0 * (*(double *)(a1 + 272) + *(double *)(a1 + 344));
  v91 = *(double *)(a3 + 256);
  *(double *)(a3 + 352) = *(double *)(a3 + 248) + v9 * 10.0 * (*(double *)(a1 + 344) - *(double *)(a1 + 272));
  *(double *)(a3 + 360) = v91 + v9 * 10.0 * (*(double *)(a1 + 264) - *(double *)(a1 + 336));
  v92 = *(double *)(a4 + 256);
  *(double *)(a4 + 352) = *(double *)(a4 + 248) + v9 * 10.0 * (*(double *)(a2 + 336) + *(double *)(a2 + 264));
  *(double *)(a4 + 360) = v92 + v9 * 10.0 * (*(double *)(a2 + 272) + *(double *)(a2 + 344));
  v93 = *(double *)(a6 + 256);
  *(double *)(a6 + 352) = *(double *)(a6 + 248) + v9 * 10.0 * (*(double *)(a3 + 344) - *(double *)(a3 + 272));
  *(double *)(a6 + 360) = v93 + v9 * 10.0 * (*(double *)(a3 + 264) - *(double *)(a3 + 336));
  v94 = *(double *)(a5 + 256);
  *(double *)(a5 + 352) = *(double *)(a5 + 248) + v9 * 10.0 * (*(double *)(a2 + 344) - *(double *)(a2 + 272));
  *(double *)(a5 + 360) = v94 + v9 * 10.0 * (*(double *)(a2 + 264) - *(double *)(a2 + 336));
  v95 = v11 * v89 - (_Q28.f64[0] - (v11 + v11) * v76) - v76;
  *(float64x2_t *)(a1 + 368) = vmulq_n_f64(v13, v95);
  v36.f64[0] = *(float64_t *)(a2 + 272);
  *(double *)(a2 + 368) = *(double *)(a2 + 264) + v9 * 11.0 * (v60.f64[0] + *(double *)(a1 + 352));
  *(double *)(a2 + 376) = v36.f64[0] + v9 * 11.0 * *(double *)(a1 + 360);
  v36.f64[0] = *(float64_t *)(a3 + 272);
  *(double *)(a3 + 368) = *(double *)(a3 + 264) + v9 * 11.0 * *(double *)(a1 + 360);
  *(double *)(a3 + 376) = v36.f64[0] + v9 * 11.0 * (v60.f64[0] - *(double *)(a1 + 352));
  v36.f64[0] = *(float64_t *)(a4 + 272);
  *(double *)(a4 + 368) = *(double *)(a4 + 264) + v9 * 11.0 * (*(double *)(a2 + 352) + *(double *)(a2 + 280));
  *(double *)(a4 + 376) = v36.f64[0] + v9 * 11.0 * *(double *)(a2 + 360);
  v36.f64[0] = *(float64_t *)(a6 + 272);
  *(double *)(a6 + 368) = *(double *)(a6 + 264) + v9 * 11.0 * *(double *)(a3 + 360);
  *(double *)(a6 + 376) = v36.f64[0] + v9 * 11.0 * (*(double *)(a3 + 280) - *(double *)(a3 + 352));
  *(_QWORD *)(a5 + 368) = *(_QWORD *)(a4 + 376);
  *(_QWORD *)(a5 + 376) = *(_QWORD *)(a6 + 368);
  *(double *)(a1 + 384) = -1.0 - (v60.f64[0] - v28 * v95);
  v96 = v9 * 24.0;
  *(double *)(a2 + 384) = *(double *)(a2 + 280) + v96 * *(double *)(a1 + 368);
  *(double *)(a3 + 384) = *(double *)(a3 + 280) + v96 * *(double *)(a1 + 376);
  *(double *)(a4 + 384) = *(double *)(a4 + 280) + v96 * *(double *)(a2 + 368);
  *(double *)(a6 + 384) = *(double *)(a6 + 280) + v96 * *(double *)(a3 + 376);
  result = *(double *)(a5 + 280) + v96 * *(double *)(a2 + 376);
  *(double *)(a5 + 384) = result;
  return result;
}

double AccelerateAR_ComputeZernikePolyAndDerivativesLevel7NoBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  double v28;
  double v29;
  double v30;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  double v43;
  double v44;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v70;
  float64x2_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double result;

  v9 = 1.0 / a7;
  v10 = v9 * a8;
  v11 = v9 * a9;
  v12 = v11 * v11 + v10 * v10;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)a6 = 0;
  v13.f64[0] = -(v9 * a9);
  v13.f64[1] = v10;
  v14.f64[0] = v10;
  v14.f64[1] = v11;
  *(float64x2_t *)(a1 + 8) = v14;
  *(double *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = v9;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a5 + 8) = 0u;
  v15 = v12 * 2.0 + -1.0;
  *(double *)(a1 + 24) = v15 + 1.0;
  v16 = vmulq_n_f64(v14, v9 * 4.0);
  *(float64_t *)(a2 + 24) = v16.f64[0];
  *(float64_t *)(a3 + 24) = v16.f64[1];
  v17 = v9 * v9 * 4.0;
  *(double *)(a4 + 24) = v17;
  *(double *)(a6 + 24) = v17;
  *(_QWORD *)(a5 + 24) = 0;
  v18 = vmlaq_n_f64(vmulq_n_f64(v13, v11), v14, v10);
  *(float64x2_t *)(a1 + 32) = v18;
  v19 = vmulq_n_f64(v14, v9 + v9);
  v20 = vmulq_n_f64(v13, v9 + v9);
  *(float64x2_t *)(a2 + 32) = v19;
  *(float64x2_t *)(a3 + 32) = v20;
  v21 = v9 * v9 + v9 * v9;
  *(double *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 40) = 0;
  *(double *)(a6 + 32) = -v21;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(double *)(a5 + 40) = v21;
  v22 = v12 + v15 + -1.0;
  _Q11 = vmulq_n_f64(v14, v22);
  *(float64x2_t *)(a1 + 48) = _Q11;
  v24 = v9 + v9 * 3.0 * (v15 + v18.f64[0]);
  v25 = vmuld_lane_f64(v9 * 3.0, v18, 1);
  v26 = v9 + v9 * 3.0 * (v15 - v18.f64[0]);
  *(double *)(a2 + 48) = v24;
  *(double *)(a2 + 56) = v25;
  *(double *)(a3 + 48) = v25;
  *(double *)(a3 + 56) = v26;
  _Q28 = vmulq_n_f64(v14, v9 * v9 * 6.0);
  v28 = vmuld_lane_f64(3.0, _Q28, 1);
  *(double *)(a4 + 48) = 3.0 * _Q28.f64[0];
  *(float64_t *)(a4 + 56) = _Q28.f64[1];
  *(float64_t *)(a6 + 48) = _Q28.f64[0];
  *(double *)(a6 + 56) = v28;
  *(int8x16_t *)(a5 + 48) = vextq_s8((int8x16_t)_Q28, (int8x16_t)_Q28, 8uLL);
  v29 = v12 + v12;
  v30 = -(v15 - (v12 + v12) * v22);
  *(double *)(a1 + 64) = -1.0 - (v15 - (v12 + v12) * v22);
  _D17 = v9 * 8.0;
  v16.f64[0] = vmlad_n_f64(v16.f64[0], v9 * 8.0, _Q11.f64[0]);
  __asm { FMLA            D24, D17, V11.D[1] }
  *(float64_t *)(a2 + 64) = v16.f64[0];
  *(double *)(a3 + 64) = _D24;
  *(double *)(a4 + 64) = v17 + v9 * 8.0 * v24;
  *(double *)(a6 + 64) = v17 + v9 * 8.0 * v26;
  *(double *)(a5 + 64) = v9 * 8.0 * v25;
  v37 = vmlaq_n_f64(vmulq_laneq_f64(v13, v18, 1), v14, v18.f64[0]);
  *(float64x2_t *)(a1 + 72) = v37;
  v38 = vmulq_n_f64(v18, v9 * 3.0);
  *(float64x2_t *)(a2 + 72) = v38;
  *(double *)(a3 + 72) = -v38.f64[1];
  *(float64_t *)(a3 + 80) = v38.f64[0];
  v39 = vmulq_n_f64(v19, v9 * 3.0);
  *(float64x2_t *)(a4 + 72) = v39;
  *(float64x2_t *)(a6 + 72) = vnegq_f64(v39);
  *(double *)(a5 + 72) = -v39.f64[1];
  *(float64_t *)(a5 + 80) = v39.f64[0];
  v39.f64[0] = v12 + v22 + -1.0;
  _Q12 = vmulq_n_f64(v18, v39.f64[0]);
  *(float64x2_t *)(a1 + 88) = _Q12;
  v41 = vmlaq_n_f64(v19, vaddq_f64(v37, _Q11), v9 * 4.0);
  *(float64x2_t *)(a2 + 88) = v41;
  _Q6 = vmlaq_n_f64(v20, vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)_Q11, 8uLL), (float64x2_t)vextq_s8((int8x16_t)_Q11, (int8x16_t)v37, 8uLL)), v9 * 4.0);
  *(float64x2_t *)(a3 + 88) = _Q6;
  v43 = v9 * 4.0 * (v25 + v38.f64[1]);
  *(double *)(a4 + 88) = v21 + v9 * 4.0 * (v38.f64[0] + v24);
  *(double *)(a4 + 96) = v43;
  *(double *)(a6 + 88) = -(v21 - v9 * 4.0 * (v38.f64[0] - v26));
  *(double *)(a6 + 96) = v43;
  *(_QWORD *)(a5 + 88) = 0;
  *(double *)(a5 + 96) = v21 + v9 * 4.0 * (v24 - v38.f64[0]);
  v44 = v30 + v12 * v39.f64[0] - v22;
  _Q11 = vmulq_n_f64(v14, v44);
  *(float64x2_t *)(a1 + 104) = _Q11;
  _D22 = v9 * 5.0;
  __asm { FMLA            D30, D22, V12.D[1] }
  *(double *)(a2 + 104) = v24 + v9 * 5.0 * (v30 + _Q12.f64[0]);
  *(_QWORD *)(a2 + 112) = _D30;
  *(_QWORD *)(a3 + 104) = _D30;
  *(double *)(a3 + 112) = v26 + v9 * 5.0 * (v30 - _Q12.f64[0]);
  v41.f64[0] = v16.f64[0] + v41.f64[0];
  v48.f64[1] = _Q28.f64[1];
  v48.f64[0] = 3.0 * _Q28.f64[0];
  v49 = vmlaq_n_f64(v48, v41, v9 * 5.0);
  *(float64x2_t *)(a4 + 104) = v49;
  *(float64_t *)(a5 + 104) = v49.f64[1];
  __asm { FMLA            D28, D22, V6.D[1] }
  *(float64_t *)(a6 + 104) = _Q28.f64[0];
  *(float64_t *)(a5 + 112) = _Q28.f64[0];
  *(double *)(a6 + 112) = v28 + v9 * 5.0 * (_D24 - _Q6.f64[0]);
  _Q28.f64[0] = -(v30 - (v12 + v12) * v44);
  *(double *)(a1 + 120) = 1.0 - (v30 - (v12 + v12) * v44);
  _Q6.f64[0] = v9 * 12.0;
  __asm { FMLA            D24, D6, V11.D[1] }
  *(double *)(a2 + 120) = vmlad_n_f64(v16.f64[0], v9 * 12.0, _Q11.f64[0]);
  *(_QWORD *)(a3 + 120) = _D24;
  *(double *)(a4 + 120) = *(double *)(a4 + 64) + v9 * 12.0 * *(double *)(a2 + 104);
  *(double *)(a6 + 120) = *(double *)(a6 + 64) + v9 * 12.0 * *(double *)(a3 + 112);
  *(double *)(a5 + 120) = *(double *)(a5 + 64) + v9 * 12.0 * *(double *)(a2 + 112);
  v51 = vmlaq_n_f64(vmulq_laneq_f64(v13, v37, 1), v14, v37.f64[0]);
  *(float64x2_t *)(a1 + 128) = v51;
  v52 = vmulq_n_f64(v37, v9 * 4.0);
  *(float64x2_t *)(a2 + 128) = v52;
  *(double *)(a3 + 128) = -v52.f64[1];
  *(float64_t *)(a3 + 136) = v52.f64[0];
  v53 = vmulq_n_f64(v38, v9 * 4.0);
  *(float64x2_t *)(a4 + 128) = v53;
  *(float64x2_t *)(a6 + 128) = vnegq_f64(v53);
  *(double *)(a5 + 128) = -v53.f64[1];
  *(float64_t *)(a5 + 136) = v53.f64[0];
  v41.f64[0] = v12 + v39.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 144) = vmulq_n_f64(v37, v41.f64[0]);
  v54 = *(double *)(a2 + 80);
  *(double *)(a2 + 144) = *(double *)(a2 + 72) + v9 * 5.0 * (*(double *)(a1 + 128) + *(double *)(a1 + 88));
  *(double *)(a2 + 152) = v54 + v9 * 5.0 * (*(double *)(a1 + 96) + *(double *)(a1 + 136));
  v55 = *(double *)(a3 + 80);
  *(double *)(a3 + 144) = *(double *)(a3 + 72) + v9 * 5.0 * (*(double *)(a1 + 136) - *(double *)(a1 + 96));
  *(double *)(a3 + 152) = v55 + v9 * 5.0 * (*(double *)(a1 + 88) - *(double *)(a1 + 128));
  v56 = *(double *)(a4 + 80);
  *(double *)(a4 + 144) = *(double *)(a4 + 72) + v9 * 5.0 * (*(double *)(a2 + 128) + *(double *)(a2 + 88));
  *(double *)(a4 + 152) = v56 + v9 * 5.0 * (*(double *)(a2 + 96) + *(double *)(a2 + 136));
  v57 = *(double *)(a6 + 80);
  *(double *)(a6 + 144) = *(double *)(a6 + 72) + v9 * 5.0 * (*(double *)(a3 + 136) - *(double *)(a3 + 96));
  *(double *)(a6 + 152) = v57 + v9 * 5.0 * (*(double *)(a3 + 88) - *(double *)(a3 + 128));
  v58 = *(double *)(a5 + 80);
  *(double *)(a5 + 144) = *(double *)(a5 + 72) + v9 * 5.0 * (*(double *)(a2 + 136) - *(double *)(a2 + 96));
  *(double *)(a5 + 152) = v58 + v9 * 5.0 * (*(double *)(a2 + 88) - *(double *)(a2 + 128));
  v39.f64[0] = v44 + v12 * v41.f64[0] - v39.f64[0];
  *(float64x2_t *)(a1 + 160) = vmulq_n_f64(v18, v39.f64[0]);
  v59 = *(double *)(a2 + 96);
  *(double *)(a2 + 160) = *(double *)(a2 + 88) + v9 * 6.0 * (*(double *)(a1 + 144) + *(double *)(a1 + 104));
  *(double *)(a2 + 168) = v59 + v9 * 6.0 * (*(double *)(a1 + 112) + *(double *)(a1 + 152));
  v60 = *(double *)(a3 + 96);
  *(double *)(a3 + 160) = *(double *)(a3 + 88) + v9 * 6.0 * (*(double *)(a1 + 152) - *(double *)(a1 + 112));
  *(double *)(a3 + 168) = v60 + v9 * 6.0 * (*(double *)(a1 + 104) - *(double *)(a1 + 144));
  v61 = *(double *)(a4 + 96);
  *(double *)(a4 + 160) = *(double *)(a4 + 88) + v9 * 6.0 * (*(double *)(a2 + 144) + *(double *)(a2 + 104));
  *(double *)(a4 + 168) = v61 + v9 * 6.0 * (*(double *)(a2 + 112) + *(double *)(a2 + 152));
  v62 = *(double *)(a6 + 96);
  *(double *)(a6 + 160) = *(double *)(a6 + 88) + v9 * 6.0 * (*(double *)(a3 + 152) - *(double *)(a3 + 112));
  *(double *)(a6 + 168) = v62 + v9 * 6.0 * (*(double *)(a3 + 104) - *(double *)(a3 + 144));
  v63 = *(double *)(a5 + 96);
  *(double *)(a5 + 160) = *(double *)(a5 + 88) + v9 * 6.0 * (*(double *)(a2 + 152) - *(double *)(a2 + 112));
  *(double *)(a5 + 168) = v63 + v9 * 6.0 * (*(double *)(a2 + 104) - *(double *)(a2 + 144));
  v38.f64[0] = v12 * v39.f64[0] - (v30 - (v12 + v12) * v44) - v44;
  *(float64x2_t *)(a1 + 176) = vmulq_n_f64(v14, v38.f64[0]);
  v49.f64[0] = *(float64_t *)(a2 + 112);
  *(double *)(a2 + 176) = *(double *)(a2 + 104) + v9 * 7.0 * (*(double *)(a1 + 160) - (v30 - (v12 + v12) * v44));
  v64 = v49.f64[0] + v9 * 7.0 * *(double *)(a1 + 168);
  *(float64_t *)(a2 + 184) = v64;
  *(float64_t *)(a3 + 176) = v64;
  *(double *)(a3 + 184) = *(double *)(a3 + 112) + v9 * 7.0 * (_Q28.f64[0] - *(double *)(a1 + 160));
  v49.f64[0] = *(float64_t *)(a4 + 112);
  *(double *)(a4 + 176) = *(double *)(a4 + 104) + v9 * 7.0 * (*(double *)(a2 + 160) + *(double *)(a2 + 120));
  *(double *)(a4 + 184) = v49.f64[0] + v9 * 7.0 * *(double *)(a2 + 168);
  v49.f64[0] = *(float64_t *)(a6 + 112);
  *(double *)(a6 + 176) = *(double *)(a6 + 104) + v9 * 7.0 * *(double *)(a3 + 168);
  *(double *)(a6 + 184) = v49.f64[0] + v9 * 7.0 * (*(double *)(a3 + 120) - *(double *)(a3 + 160));
  *(_QWORD *)(a5 + 176) = *(_QWORD *)(a4 + 184);
  *(_QWORD *)(a5 + 184) = *(_QWORD *)(a6 + 176);
  _Q28.f64[0] = -(_Q28.f64[0] - (v12 + v12) * v38.f64[0]);
  *(double *)(a1 + 192) = _Q28.f64[0] + -1.0;
  *(double *)(a2 + 192) = *(double *)(a2 + 120) + v9 * 16.0 * *(double *)(a1 + 176);
  *(double *)(a3 + 192) = *(double *)(a3 + 120) + v9 * 16.0 * *(double *)(a1 + 184);
  *(double *)(a4 + 192) = *(double *)(a4 + 120) + v9 * 16.0 * *(double *)(a2 + 176);
  *(double *)(a6 + 192) = *(double *)(a6 + 120) + v9 * 16.0 * *(double *)(a3 + 184);
  *(double *)(a5 + 192) = *(double *)(a5 + 120) + v9 * 16.0 * *(double *)(a2 + 184);
  v65 = vmlaq_n_f64(vmulq_laneq_f64(v13, v51, 1), v14, v51.f64[0]);
  *(float64x2_t *)(a1 + 200) = v65;
  v66 = vmulq_n_f64(v51, v9 * 5.0);
  *(float64x2_t *)(a2 + 200) = v66;
  *(double *)(a3 + 200) = -v66.f64[1];
  *(float64_t *)(a3 + 208) = v66.f64[0];
  v67 = vmulq_n_f64(v52, v9 * 5.0);
  *(float64x2_t *)(a4 + 200) = v67;
  *(float64x2_t *)(a6 + 200) = vnegq_f64(v67);
  *(double *)(a5 + 200) = -v67.f64[1];
  *(float64_t *)(a5 + 208) = v67.f64[0];
  v52.f64[0] = v12 + v41.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 216) = vmulq_n_f64(v51, v52.f64[0]);
  v49.f64[0] = *(float64_t *)(a2 + 136);
  *(double *)(a2 + 216) = *(double *)(a2 + 128) + v9 * 6.0 * (*(double *)(a1 + 200) + *(double *)(a1 + 144));
  *(double *)(a2 + 224) = v49.f64[0] + v9 * 6.0 * (*(double *)(a1 + 152) + *(double *)(a1 + 208));
  v49.f64[0] = *(float64_t *)(a3 + 136);
  *(double *)(a3 + 216) = *(double *)(a3 + 128) + v9 * 6.0 * (*(double *)(a1 + 208) - *(double *)(a1 + 152));
  *(double *)(a3 + 224) = v49.f64[0] + v9 * 6.0 * (*(double *)(a1 + 144) - *(double *)(a1 + 200));
  v49.f64[0] = *(float64_t *)(a4 + 136);
  *(double *)(a4 + 216) = *(double *)(a4 + 128) + v9 * 6.0 * (*(double *)(a2 + 200) + *(double *)(a2 + 144));
  *(double *)(a4 + 224) = v49.f64[0] + v9 * 6.0 * (*(double *)(a2 + 152) + *(double *)(a2 + 208));
  v49.f64[0] = *(float64_t *)(a6 + 136);
  *(double *)(a6 + 216) = *(double *)(a6 + 128) + v9 * 6.0 * (*(double *)(a3 + 208) - *(double *)(a3 + 152));
  *(double *)(a6 + 224) = v49.f64[0] + v9 * 6.0 * (*(double *)(a3 + 144) - *(double *)(a3 + 200));
  v49.f64[0] = *(float64_t *)(a5 + 136);
  *(double *)(a5 + 216) = *(double *)(a5 + 128) + v9 * 6.0 * (*(double *)(a2 + 208) - *(double *)(a2 + 152));
  *(double *)(a5 + 224) = v49.f64[0] + v9 * 6.0 * (*(double *)(a2 + 144) - *(double *)(a2 + 200));
  v41.f64[0] = v39.f64[0] + v12 * v52.f64[0] - v41.f64[0];
  *(float64x2_t *)(a1 + 232) = vmulq_n_f64(v37, v41.f64[0]);
  v49.f64[0] = *(float64_t *)(a2 + 152);
  *(double *)(a2 + 232) = *(double *)(a2 + 144) + v9 * 7.0 * (*(double *)(a1 + 216) + *(double *)(a1 + 160));
  *(double *)(a2 + 240) = v49.f64[0] + v9 * 7.0 * (*(double *)(a1 + 168) + *(double *)(a1 + 224));
  v49.f64[0] = *(float64_t *)(a3 + 152);
  *(double *)(a3 + 232) = *(double *)(a3 + 144) + v9 * 7.0 * (*(double *)(a1 + 224) - *(double *)(a1 + 168));
  *(double *)(a3 + 240) = v49.f64[0] + v9 * 7.0 * (*(double *)(a1 + 160) - *(double *)(a1 + 216));
  v49.f64[0] = *(float64_t *)(a4 + 152);
  *(double *)(a4 + 232) = *(double *)(a4 + 144) + v9 * 7.0 * (*(double *)(a2 + 216) + *(double *)(a2 + 160));
  *(double *)(a4 + 240) = v49.f64[0] + v9 * 7.0 * (*(double *)(a2 + 168) + *(double *)(a2 + 224));
  v49.f64[0] = *(float64_t *)(a6 + 152);
  *(double *)(a6 + 232) = *(double *)(a6 + 144) + v9 * 7.0 * (*(double *)(a3 + 224) - *(double *)(a3 + 168));
  *(double *)(a6 + 240) = v49.f64[0] + v9 * 7.0 * (*(double *)(a3 + 160) - *(double *)(a3 + 216));
  v49.f64[0] = *(float64_t *)(a5 + 152);
  *(double *)(a5 + 232) = *(double *)(a5 + 144) + v9 * 7.0 * (*(double *)(a2 + 224) - *(double *)(a2 + 168));
  *(double *)(a5 + 240) = v49.f64[0] + v9 * 7.0 * (*(double *)(a2 + 160) - *(double *)(a2 + 216));
  v39.f64[0] = v38.f64[0] + v12 * v41.f64[0] - v39.f64[0];
  *(float64x2_t *)(a1 + 248) = vmulq_n_f64(v18, v39.f64[0]);
  v49.f64[0] = *(float64_t *)(a2 + 168);
  *(double *)(a2 + 248) = *(double *)(a2 + 160) + v9 * 8.0 * (*(double *)(a1 + 232) + *(double *)(a1 + 176));
  *(double *)(a2 + 256) = v49.f64[0] + v9 * 8.0 * (*(double *)(a1 + 184) + *(double *)(a1 + 240));
  v49.f64[0] = *(float64_t *)(a3 + 168);
  *(double *)(a3 + 248) = *(double *)(a3 + 160) + v9 * 8.0 * (*(double *)(a1 + 240) - *(double *)(a1 + 184));
  *(double *)(a3 + 256) = v49.f64[0] + v9 * 8.0 * (*(double *)(a1 + 176) - *(double *)(a1 + 232));
  v49.f64[0] = *(float64_t *)(a4 + 168);
  *(double *)(a4 + 248) = *(double *)(a4 + 160) + v9 * 8.0 * (*(double *)(a2 + 232) + *(double *)(a2 + 176));
  *(double *)(a4 + 256) = v49.f64[0] + v9 * 8.0 * (*(double *)(a2 + 184) + *(double *)(a2 + 240));
  v49.f64[0] = *(float64_t *)(a6 + 168);
  *(double *)(a6 + 248) = *(double *)(a6 + 160) + v9 * 8.0 * (*(double *)(a3 + 240) - *(double *)(a3 + 184));
  *(double *)(a6 + 256) = v49.f64[0] + v9 * 8.0 * (*(double *)(a3 + 176) - *(double *)(a3 + 232));
  v49.f64[0] = *(float64_t *)(a5 + 168);
  *(double *)(a5 + 248) = *(double *)(a5 + 160) + v9 * 8.0 * (*(double *)(a2 + 240) - *(double *)(a2 + 184));
  *(double *)(a5 + 256) = v49.f64[0] + v9 * 8.0 * (*(double *)(a2 + 176) - *(double *)(a2 + 232));
  v38.f64[0] = _Q28.f64[0] + v12 * v39.f64[0] - v38.f64[0];
  *(float64x2_t *)(a1 + 264) = vmulq_n_f64(v14, v38.f64[0]);
  v68 = *(double *)(a2 + 184);
  *(double *)(a2 + 264) = *(double *)(a2 + 176) + v9 * 9.0 * (_Q28.f64[0] + *(double *)(a1 + 248));
  v66.f64[0] = v68 + v9 * 9.0 * *(double *)(a1 + 256);
  *(float64_t *)(a2 + 272) = v66.f64[0];
  *(float64_t *)(a3 + 264) = v66.f64[0];
  *(double *)(a3 + 272) = *(double *)(a3 + 184) + v9 * 9.0 * (_Q28.f64[0] - *(double *)(a1 + 248));
  v69 = *(double *)(a4 + 184);
  *(double *)(a4 + 264) = *(double *)(a4 + 176) + v9 * 9.0 * (*(double *)(a2 + 248) + *(double *)(a2 + 192));
  *(double *)(a4 + 272) = v69 + v9 * 9.0 * *(double *)(a2 + 256);
  v70 = *(double *)(a6 + 184);
  *(double *)(a6 + 264) = *(double *)(a6 + 176) + v9 * 9.0 * *(double *)(a3 + 256);
  *(double *)(a6 + 272) = v70 + v9 * 9.0 * (*(double *)(a3 + 192) - *(double *)(a3 + 248));
  *(_QWORD *)(a5 + 264) = *(_QWORD *)(a4 + 272);
  *(_QWORD *)(a5 + 272) = *(_QWORD *)(a6 + 264);
  _Q28.f64[0] = -(_Q28.f64[0] - (v12 + v12) * v38.f64[0]);
  *(double *)(a1 + 280) = _Q28.f64[0] + 1.0;
  *(double *)(a2 + 280) = *(double *)(a2 + 192) + v9 * 20.0 * *(double *)(a1 + 264);
  *(double *)(a3 + 280) = *(double *)(a3 + 192) + v9 * 20.0 * *(double *)(a1 + 272);
  *(double *)(a4 + 280) = *(double *)(a4 + 192) + v9 * 20.0 * *(double *)(a2 + 264);
  *(double *)(a6 + 280) = *(double *)(a6 + 192) + v9 * 20.0 * *(double *)(a3 + 272);
  *(double *)(a5 + 280) = *(double *)(a5 + 192) + v9 * 20.0 * *(double *)(a2 + 272);
  v71 = vmlaq_n_f64(vmulq_laneq_f64(v13, v65, 1), v14, v65.f64[0]);
  *(float64x2_t *)(a1 + 288) = v71;
  *(double *)(a2 + 288) = v9 * 6.0 * *(double *)(a1 + 200);
  v72 = v9 * 6.0 * *(double *)(a1 + 208);
  *(double *)(a2 + 296) = v72;
  *(double *)(a3 + 288) = -v72;
  *(_QWORD *)(a3 + 296) = *(_QWORD *)(a2 + 288);
  v49.f64[0] = *(float64_t *)(a2 + 200);
  *(double *)(a4 + 288) = v9 * 6.0 * v49.f64[0];
  *(double *)(a4 + 296) = v9 * 6.0 * *(double *)(a2 + 208);
  *(double *)(a6 + 288) = -(v9 * 6.0 * v49.f64[0]);
  *(double *)(a6 + 296) = -*(double *)(a4 + 296);
  *(double *)(a5 + 288) = -*(double *)(a4 + 296);
  *(_QWORD *)(a5 + 296) = *(_QWORD *)(a4 + 288);
  v53.f64[0] = v12 + v52.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 304) = vmulq_n_f64(v65, v53.f64[0]);
  v73 = *(double *)(a2 + 208);
  *(double *)(a2 + 304) = *(double *)(a2 + 200) + v9 * 7.0 * (*(double *)(a1 + 288) + *(double *)(a1 + 216));
  *(double *)(a2 + 312) = v73 + v9 * 7.0 * (*(double *)(a1 + 224) + *(double *)(a1 + 296));
  v74 = *(double *)(a3 + 208);
  *(double *)(a3 + 304) = *(double *)(a3 + 200) + v9 * 7.0 * (*(double *)(a1 + 296) - *(double *)(a1 + 224));
  *(double *)(a3 + 312) = v74 + v9 * 7.0 * (*(double *)(a1 + 216) - *(double *)(a1 + 288));
  v75 = *(double *)(a4 + 208);
  *(double *)(a4 + 304) = *(double *)(a4 + 200) + v9 * 7.0 * (*(double *)(a2 + 288) + *(double *)(a2 + 216));
  *(double *)(a4 + 312) = v75 + v9 * 7.0 * (*(double *)(a2 + 224) + *(double *)(a2 + 296));
  v76 = *(double *)(a6 + 208);
  *(double *)(a6 + 304) = *(double *)(a6 + 200) + v9 * 7.0 * (*(double *)(a3 + 296) - *(double *)(a3 + 224));
  *(double *)(a6 + 312) = v76 + v9 * 7.0 * (*(double *)(a3 + 216) - *(double *)(a3 + 288));
  v77 = *(double *)(a5 + 208);
  *(double *)(a5 + 304) = *(double *)(a5 + 200) + v9 * 7.0 * (*(double *)(a2 + 296) - *(double *)(a2 + 224));
  *(double *)(a5 + 312) = v77 + v9 * 7.0 * (*(double *)(a2 + 216) - *(double *)(a2 + 288));
  v52.f64[0] = v41.f64[0] + v12 * v53.f64[0] - v52.f64[0];
  *(float64x2_t *)(a1 + 320) = vmulq_n_f64(v51, v52.f64[0]);
  v78 = *(double *)(a2 + 224);
  *(double *)(a2 + 320) = *(double *)(a2 + 216) + v9 * 8.0 * (*(double *)(a1 + 304) + *(double *)(a1 + 232));
  *(double *)(a2 + 328) = v78 + v9 * 8.0 * (*(double *)(a1 + 240) + *(double *)(a1 + 312));
  v79 = *(double *)(a3 + 224);
  *(double *)(a3 + 320) = *(double *)(a3 + 216) + v9 * 8.0 * (*(double *)(a1 + 312) - *(double *)(a1 + 240));
  *(double *)(a3 + 328) = v79 + v9 * 8.0 * (*(double *)(a1 + 232) - *(double *)(a1 + 304));
  v80 = *(double *)(a4 + 224);
  *(double *)(a4 + 320) = *(double *)(a4 + 216) + v9 * 8.0 * (*(double *)(a2 + 304) + *(double *)(a2 + 232));
  *(double *)(a4 + 328) = v80 + v9 * 8.0 * (*(double *)(a2 + 240) + *(double *)(a2 + 312));
  v81 = *(double *)(a6 + 224);
  *(double *)(a6 + 320) = *(double *)(a6 + 216) + v9 * 8.0 * (*(double *)(a3 + 312) - *(double *)(a3 + 240));
  *(double *)(a6 + 328) = v81 + v9 * 8.0 * (*(double *)(a3 + 232) - *(double *)(a3 + 304));
  v82 = *(double *)(a5 + 224);
  *(double *)(a5 + 320) = *(double *)(a5 + 216) + v9 * 8.0 * (*(double *)(a2 + 312) - *(double *)(a2 + 240));
  *(double *)(a5 + 328) = v82 + v9 * 8.0 * (*(double *)(a2 + 232) - *(double *)(a2 + 304));
  v41.f64[0] = v39.f64[0] + v12 * v52.f64[0] - v41.f64[0];
  *(float64x2_t *)(a1 + 336) = vmulq_n_f64(v37, v41.f64[0]);
  v83 = *(double *)(a2 + 240);
  *(double *)(a2 + 336) = *(double *)(a2 + 232) + v9 * 9.0 * (*(double *)(a1 + 320) + *(double *)(a1 + 248));
  *(double *)(a2 + 344) = v83 + v9 * 9.0 * (*(double *)(a1 + 256) + *(double *)(a1 + 328));
  v84 = *(double *)(a3 + 240);
  *(double *)(a3 + 336) = *(double *)(a3 + 232) + v9 * 9.0 * (*(double *)(a1 + 328) - *(double *)(a1 + 256));
  *(double *)(a3 + 344) = v84 + v9 * 9.0 * (*(double *)(a1 + 248) - *(double *)(a1 + 320));
  v85 = *(double *)(a4 + 240);
  *(double *)(a4 + 336) = *(double *)(a4 + 232) + v9 * 9.0 * (*(double *)(a2 + 320) + *(double *)(a2 + 248));
  *(double *)(a4 + 344) = v85 + v9 * 9.0 * (*(double *)(a2 + 256) + *(double *)(a2 + 328));
  v86 = *(double *)(a6 + 240);
  *(double *)(a6 + 336) = *(double *)(a6 + 232) + v9 * 9.0 * (*(double *)(a3 + 328) - *(double *)(a3 + 256));
  *(double *)(a6 + 344) = v86 + v9 * 9.0 * (*(double *)(a3 + 248) - *(double *)(a3 + 320));
  v87 = *(double *)(a5 + 240);
  *(double *)(a5 + 336) = *(double *)(a5 + 232) + v9 * 9.0 * (*(double *)(a2 + 328) - *(double *)(a2 + 256));
  *(double *)(a5 + 344) = v87 + v9 * 9.0 * (*(double *)(a2 + 248) - *(double *)(a2 + 320));
  v39.f64[0] = v38.f64[0] + v12 * v41.f64[0] - v39.f64[0];
  *(float64x2_t *)(a1 + 352) = vmulq_n_f64(v18, v39.f64[0]);
  v88 = *(double *)(a2 + 256);
  *(double *)(a2 + 352) = *(double *)(a2 + 248) + v9 * 10.0 * (*(double *)(a1 + 336) + *(double *)(a1 + 264));
  *(double *)(a2 + 360) = v88 + v9 * 10.0 * (*(double *)(a1 + 272) + *(double *)(a1 + 344));
  v89 = *(double *)(a3 + 256);
  *(double *)(a3 + 352) = *(double *)(a3 + 248) + v9 * 10.0 * (*(double *)(a1 + 344) - *(double *)(a1 + 272));
  *(double *)(a3 + 360) = v89 + v9 * 10.0 * (*(double *)(a1 + 264) - *(double *)(a1 + 336));
  v90 = *(double *)(a4 + 256);
  *(double *)(a4 + 352) = *(double *)(a4 + 248) + v9 * 10.0 * (*(double *)(a2 + 336) + *(double *)(a2 + 264));
  *(double *)(a4 + 360) = v90 + v9 * 10.0 * (*(double *)(a2 + 272) + *(double *)(a2 + 344));
  v91 = *(double *)(a6 + 256);
  *(double *)(a6 + 352) = *(double *)(a6 + 248) + v9 * 10.0 * (*(double *)(a3 + 344) - *(double *)(a3 + 272));
  *(double *)(a6 + 360) = v91 + v9 * 10.0 * (*(double *)(a3 + 264) - *(double *)(a3 + 336));
  v92 = *(double *)(a5 + 256);
  *(double *)(a5 + 352) = *(double *)(a5 + 248) + v9 * 10.0 * (*(double *)(a2 + 344) - *(double *)(a2 + 272));
  *(double *)(a5 + 360) = v92 + v9 * 10.0 * (*(double *)(a2 + 264) - *(double *)(a2 + 336));
  v38.f64[0] = _Q28.f64[0] + v12 * v39.f64[0] - v38.f64[0];
  *(float64x2_t *)(a1 + 368) = vmulq_n_f64(v14, v38.f64[0]);
  v93 = *(double *)(a2 + 272);
  *(double *)(a2 + 368) = *(double *)(a2 + 264) + v9 * 11.0 * (_Q28.f64[0] + *(double *)(a1 + 352));
  *(double *)(a2 + 376) = v93 + v9 * 11.0 * *(double *)(a1 + 360);
  v94 = *(double *)(a3 + 272);
  *(double *)(a3 + 368) = *(double *)(a3 + 264) + v9 * 11.0 * *(double *)(a1 + 360);
  *(double *)(a3 + 376) = v94 + v9 * 11.0 * (_Q28.f64[0] - *(double *)(a1 + 352));
  v95 = *(double *)(a4 + 272);
  *(double *)(a4 + 368) = *(double *)(a4 + 264) + v9 * 11.0 * (*(double *)(a2 + 352) + *(double *)(a2 + 280));
  *(double *)(a4 + 376) = v95 + v9 * 11.0 * *(double *)(a2 + 360);
  v96 = *(double *)(a6 + 272);
  *(double *)(a6 + 368) = *(double *)(a6 + 264) + v9 * 11.0 * *(double *)(a3 + 360);
  *(double *)(a6 + 376) = v96 + v9 * 11.0 * (*(double *)(a3 + 280) - *(double *)(a3 + 352));
  *(_QWORD *)(a5 + 368) = *(_QWORD *)(a4 + 376);
  *(_QWORD *)(a5 + 376) = *(_QWORD *)(a6 + 368);
  _Q28.f64[0] = -(_Q28.f64[0] - (v12 + v12) * v38.f64[0]);
  *(double *)(a1 + 384) = _Q28.f64[0] + -1.0;
  *(double *)(a2 + 384) = *(double *)(a2 + 280) + v9 * 24.0 * *(double *)(a1 + 368);
  *(double *)(a3 + 384) = *(double *)(a3 + 280) + v9 * 24.0 * *(double *)(a1 + 376);
  *(double *)(a4 + 384) = *(double *)(a4 + 280) + v9 * 24.0 * *(double *)(a2 + 368);
  *(double *)(a6 + 384) = *(double *)(a6 + 280) + v9 * 24.0 * *(double *)(a3 + 376);
  *(double *)(a5 + 384) = *(double *)(a5 + 280) + v9 * 24.0 * *(double *)(a2 + 376);
  *(float64x2_t *)(a1 + 392) = vmlaq_n_f64(vmulq_laneq_f64(v13, v71, 1), v14, v71.f64[0]);
  *(double *)(a2 + 392) = v9 * 7.0 * *(double *)(a1 + 288);
  v97 = v9 * 7.0 * *(double *)(a1 + 296);
  *(double *)(a2 + 400) = v97;
  *(double *)(a3 + 392) = -v97;
  *(_QWORD *)(a3 + 400) = *(_QWORD *)(a2 + 392);
  v13.f64[0] = *(float64_t *)(a2 + 288);
  *(double *)(a4 + 392) = v9 * 7.0 * v13.f64[0];
  *(double *)(a4 + 400) = v9 * 7.0 * *(double *)(a2 + 296);
  *(double *)(a6 + 392) = -(v9 * 7.0 * v13.f64[0]);
  *(double *)(a6 + 400) = -*(double *)(a4 + 400);
  *(double *)(a5 + 392) = -*(double *)(a4 + 400);
  *(_QWORD *)(a5 + 400) = *(_QWORD *)(a4 + 392);
  v98 = v12 + v53.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 408) = vmulq_n_f64(v71, v98);
  v71.f64[0] = *(float64_t *)(a2 + 296);
  *(double *)(a2 + 408) = *(double *)(a2 + 288) + v9 * 8.0 * (*(double *)(a1 + 392) + *(double *)(a1 + 304));
  *(double *)(a2 + 416) = v71.f64[0] + v9 * 8.0 * (*(double *)(a1 + 312) + *(double *)(a1 + 400));
  v71.f64[0] = *(float64_t *)(a3 + 296);
  *(double *)(a3 + 408) = *(double *)(a3 + 288) + v9 * 8.0 * (*(double *)(a1 + 400) - *(double *)(a1 + 312));
  *(double *)(a3 + 416) = v71.f64[0] + v9 * 8.0 * (*(double *)(a1 + 304) - *(double *)(a1 + 392));
  v71.f64[0] = *(float64_t *)(a4 + 296);
  *(double *)(a4 + 408) = *(double *)(a4 + 288) + v9 * 8.0 * (*(double *)(a2 + 392) + *(double *)(a2 + 304));
  *(double *)(a4 + 416) = v71.f64[0] + v9 * 8.0 * (*(double *)(a2 + 312) + *(double *)(a2 + 400));
  v71.f64[0] = *(float64_t *)(a6 + 296);
  *(double *)(a6 + 408) = *(double *)(a6 + 288) + v9 * 8.0 * (*(double *)(a3 + 400) - *(double *)(a3 + 312));
  *(double *)(a6 + 416) = v71.f64[0] + v9 * 8.0 * (*(double *)(a3 + 304) - *(double *)(a3 + 392));
  v71.f64[0] = *(float64_t *)(a5 + 296);
  *(double *)(a5 + 408) = *(double *)(a5 + 288) + v9 * 8.0 * (*(double *)(a2 + 400) - *(double *)(a2 + 312));
  *(double *)(a5 + 416) = v71.f64[0] + v9 * 8.0 * (*(double *)(a2 + 304) - *(double *)(a2 + 392));
  v99 = v52.f64[0] + v12 * v98 - v53.f64[0];
  *(float64x2_t *)(a1 + 424) = vmulq_n_f64(v65, v99);
  v65.f64[0] = *(float64_t *)(a2 + 312);
  *(double *)(a2 + 424) = *(double *)(a2 + 304) + v9 * 9.0 * (*(double *)(a1 + 408) + *(double *)(a1 + 320));
  *(double *)(a2 + 432) = v65.f64[0] + v9 * 9.0 * (*(double *)(a1 + 328) + *(double *)(a1 + 416));
  v65.f64[0] = *(float64_t *)(a3 + 312);
  *(double *)(a3 + 424) = *(double *)(a3 + 304) + v9 * 9.0 * (*(double *)(a1 + 416) - *(double *)(a1 + 328));
  *(double *)(a3 + 432) = v65.f64[0] + v9 * 9.0 * (*(double *)(a1 + 320) - *(double *)(a1 + 408));
  v65.f64[0] = *(float64_t *)(a4 + 312);
  *(double *)(a4 + 424) = *(double *)(a4 + 304) + v9 * 9.0 * (*(double *)(a2 + 408) + *(double *)(a2 + 320));
  *(double *)(a4 + 432) = v65.f64[0] + v9 * 9.0 * (*(double *)(a2 + 328) + *(double *)(a2 + 416));
  v65.f64[0] = *(float64_t *)(a6 + 312);
  *(double *)(a6 + 424) = *(double *)(a6 + 304) + v9 * 9.0 * (*(double *)(a3 + 416) - *(double *)(a3 + 328));
  *(double *)(a6 + 432) = v65.f64[0] + v9 * 9.0 * (*(double *)(a3 + 320) - *(double *)(a3 + 408));
  v65.f64[0] = *(float64_t *)(a5 + 312);
  *(double *)(a5 + 424) = *(double *)(a5 + 304) + v9 * 9.0 * (*(double *)(a2 + 416) - *(double *)(a2 + 328));
  *(double *)(a5 + 432) = v65.f64[0] + v9 * 9.0 * (*(double *)(a2 + 320) - *(double *)(a2 + 408));
  v100 = v41.f64[0] + v12 * v99 - v52.f64[0];
  *(float64x2_t *)(a1 + 440) = vmulq_n_f64(v51, v100);
  v51.f64[0] = *(float64_t *)(a2 + 328);
  *(double *)(a2 + 440) = *(double *)(a2 + 320) + v9 * 10.0 * (*(double *)(a1 + 424) + *(double *)(a1 + 336));
  *(double *)(a2 + 448) = v51.f64[0] + v9 * 10.0 * (*(double *)(a1 + 344) + *(double *)(a1 + 432));
  v51.f64[0] = *(float64_t *)(a3 + 328);
  *(double *)(a3 + 440) = *(double *)(a3 + 320) + v9 * 10.0 * (*(double *)(a1 + 432) - *(double *)(a1 + 344));
  *(double *)(a3 + 448) = v51.f64[0] + v9 * 10.0 * (*(double *)(a1 + 336) - *(double *)(a1 + 424));
  v51.f64[0] = *(float64_t *)(a4 + 328);
  *(double *)(a4 + 440) = *(double *)(a4 + 320) + v9 * 10.0 * (*(double *)(a2 + 424) + *(double *)(a2 + 336));
  *(double *)(a4 + 448) = v51.f64[0] + v9 * 10.0 * (*(double *)(a2 + 344) + *(double *)(a2 + 432));
  v51.f64[0] = *(float64_t *)(a6 + 328);
  *(double *)(a6 + 440) = *(double *)(a6 + 320) + v9 * 10.0 * (*(double *)(a3 + 432) - *(double *)(a3 + 344));
  *(double *)(a6 + 448) = v51.f64[0] + v9 * 10.0 * (*(double *)(a3 + 336) - *(double *)(a3 + 424));
  v51.f64[0] = *(float64_t *)(a5 + 328);
  *(double *)(a5 + 440) = *(double *)(a5 + 320) + v9 * 10.0 * (*(double *)(a2 + 432) - *(double *)(a2 + 344));
  *(double *)(a5 + 448) = v51.f64[0] + v9 * 10.0 * (*(double *)(a2 + 336) - *(double *)(a2 + 424));
  v101 = v39.f64[0] + v12 * v100 - v41.f64[0];
  *(float64x2_t *)(a1 + 456) = vmulq_n_f64(v37, v101);
  v13.f64[0] = *(float64_t *)(a2 + 344);
  *(double *)(a2 + 456) = *(double *)(a2 + 336) + v9 * 11.0 * (*(double *)(a1 + 440) + *(double *)(a1 + 352));
  *(double *)(a2 + 464) = v13.f64[0] + v9 * 11.0 * (*(double *)(a1 + 360) + *(double *)(a1 + 448));
  v13.f64[0] = *(float64_t *)(a3 + 344);
  *(double *)(a3 + 456) = *(double *)(a3 + 336) + v9 * 11.0 * (*(double *)(a1 + 448) - *(double *)(a1 + 360));
  *(double *)(a3 + 464) = v13.f64[0] + v9 * 11.0 * (*(double *)(a1 + 352) - *(double *)(a1 + 440));
  v13.f64[0] = *(float64_t *)(a4 + 344);
  *(double *)(a4 + 456) = *(double *)(a4 + 336) + v9 * 11.0 * (*(double *)(a2 + 440) + *(double *)(a2 + 352));
  *(double *)(a4 + 464) = v13.f64[0] + v9 * 11.0 * (*(double *)(a2 + 360) + *(double *)(a2 + 448));
  v13.f64[0] = *(float64_t *)(a6 + 344);
  *(double *)(a6 + 456) = *(double *)(a6 + 336) + v9 * 11.0 * (*(double *)(a3 + 448) - *(double *)(a3 + 360));
  *(double *)(a6 + 464) = v13.f64[0] + v9 * 11.0 * (*(double *)(a3 + 352) - *(double *)(a3 + 440));
  v13.f64[0] = *(float64_t *)(a5 + 344);
  *(double *)(a5 + 456) = *(double *)(a5 + 336) + v9 * 11.0 * (*(double *)(a2 + 448) - *(double *)(a2 + 360));
  *(double *)(a5 + 464) = v13.f64[0] + v9 * 11.0 * (*(double *)(a2 + 352) - *(double *)(a2 + 440));
  v37.f64[0] = v38.f64[0] + v12 * v101 - v39.f64[0];
  *(float64x2_t *)(a1 + 472) = vmulq_n_f64(v18, v37.f64[0]);
  v102 = *(double *)(a2 + 360);
  *(double *)(a2 + 472) = *(double *)(a2 + 352) + v9 * 12.0 * (*(double *)(a1 + 456) + *(double *)(a1 + 368));
  *(double *)(a2 + 480) = v102 + v9 * 12.0 * (*(double *)(a1 + 376) + *(double *)(a1 + 464));
  v103 = *(double *)(a3 + 360);
  *(double *)(a3 + 472) = *(double *)(a3 + 352) + v9 * 12.0 * (*(double *)(a1 + 464) - *(double *)(a1 + 376));
  *(double *)(a3 + 480) = v103 + v9 * 12.0 * (*(double *)(a1 + 368) - *(double *)(a1 + 456));
  v104 = *(double *)(a4 + 360);
  *(double *)(a4 + 472) = *(double *)(a4 + 352) + v9 * 12.0 * (*(double *)(a2 + 456) + *(double *)(a2 + 368));
  *(double *)(a4 + 480) = v104 + v9 * 12.0 * (*(double *)(a2 + 376) + *(double *)(a2 + 464));
  v105 = *(double *)(a6 + 360);
  *(double *)(a6 + 472) = *(double *)(a6 + 352) + v9 * 12.0 * (*(double *)(a3 + 464) - *(double *)(a3 + 376));
  *(double *)(a6 + 480) = v105 + v9 * 12.0 * (*(double *)(a3 + 368) - *(double *)(a3 + 456));
  v106 = *(double *)(a5 + 360);
  *(double *)(a5 + 472) = *(double *)(a5 + 352) + v9 * 12.0 * (*(double *)(a2 + 464) - *(double *)(a2 + 376));
  *(double *)(a5 + 480) = v106 + v9 * 12.0 * (*(double *)(a2 + 368) - *(double *)(a2 + 456));
  v107 = _Q28.f64[0] + v12 * v37.f64[0] - v38.f64[0];
  *(float64x2_t *)(a1 + 488) = vmulq_n_f64(v14, v107);
  v37.f64[0] = *(float64_t *)(a2 + 376);
  *(double *)(a2 + 488) = *(double *)(a2 + 368) + v9 * 13.0 * (_Q28.f64[0] + *(double *)(a1 + 472));
  *(double *)(a2 + 496) = v37.f64[0] + v9 * 13.0 * *(double *)(a1 + 480);
  v37.f64[0] = *(float64_t *)(a3 + 376);
  *(double *)(a3 + 488) = *(double *)(a3 + 368) + v9 * 13.0 * *(double *)(a1 + 480);
  *(double *)(a3 + 496) = v37.f64[0] + v9 * 13.0 * (_Q28.f64[0] - *(double *)(a1 + 472));
  v37.f64[0] = *(float64_t *)(a4 + 376);
  *(double *)(a4 + 488) = *(double *)(a4 + 368) + v9 * 13.0 * (*(double *)(a2 + 472) + *(double *)(a2 + 384));
  *(double *)(a4 + 496) = v37.f64[0] + v9 * 13.0 * *(double *)(a2 + 480);
  v37.f64[0] = *(float64_t *)(a6 + 376);
  *(double *)(a6 + 488) = *(double *)(a6 + 368) + v9 * 13.0 * *(double *)(a3 + 480);
  *(double *)(a6 + 496) = v37.f64[0] + v9 * 13.0 * (*(double *)(a3 + 384) - *(double *)(a3 + 472));
  *(_QWORD *)(a5 + 488) = *(_QWORD *)(a4 + 496);
  *(_QWORD *)(a5 + 496) = *(_QWORD *)(a6 + 488);
  *(double *)(a1 + 504) = 1.0 - (_Q28.f64[0] - v29 * v107);
  v108 = v9 * 28.0;
  *(double *)(a2 + 504) = *(double *)(a2 + 384) + v108 * *(double *)(a1 + 488);
  *(double *)(a3 + 504) = *(double *)(a3 + 384) + v108 * *(double *)(a1 + 496);
  *(double *)(a4 + 504) = *(double *)(a4 + 384) + v108 * *(double *)(a2 + 488);
  *(double *)(a6 + 504) = *(double *)(a6 + 384) + v108 * *(double *)(a3 + 496);
  result = *(double *)(a5 + 384) + v108 * *(double *)(a2 + 496);
  *(double *)(a5 + 504) = result;
  return result;
}

double AccelerateAR_ComputeZernikePolyAndDerivativesLevel8NoBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v40;
  double v42;
  double v43;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  float64x2_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  float64x2_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double result;

  v9 = 1.0 / a7;
  v10 = v9 * a9;
  v11 = v10 * v10 + v9 * a8 * (v9 * a8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)a5 = 0;
  v12.f64[0] = -(v9 * a9);
  v12.f64[1] = v9 * a8;
  v13.f64[0] = v9 * a8;
  v13.f64[1] = v10;
  *(_QWORD *)a6 = 0;
  *(float64x2_t *)(a1 + 8) = v13;
  *(double *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = v9;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a5 + 8) = 0u;
  v14 = v11 * 2.0 + -1.0;
  *(double *)(a1 + 24) = v14 + 1.0;
  v15 = vmulq_n_f64(v13, v9 * 4.0);
  *(float64_t *)(a2 + 24) = v15.f64[0];
  *(float64_t *)(a3 + 24) = v15.f64[1];
  v16 = v9 * v9 * 4.0;
  *(double *)(a4 + 24) = v16;
  *(double *)(a6 + 24) = v16;
  *(_QWORD *)(a5 + 24) = 0;
  v17 = vmlaq_n_f64(vmulq_n_f64(v12, v10), v13, v9 * a8);
  *(float64x2_t *)(a1 + 32) = v17;
  v18 = vmulq_n_f64(v13, v9 + v9);
  v19 = vmulq_n_f64(v12, v9 + v9);
  *(float64x2_t *)(a2 + 32) = v18;
  *(float64x2_t *)(a3 + 32) = v19;
  v20 = v9 * v9 + v9 * v9;
  *(double *)(a4 + 32) = v20;
  *(_QWORD *)(a4 + 40) = 0;
  *(double *)(a6 + 32) = -v20;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(double *)(a5 + 40) = v20;
  v21 = v11 + v14 + -1.0;
  _Q11 = vmulq_n_f64(v13, v21);
  *(float64x2_t *)(a1 + 48) = _Q11;
  v23 = v9 + v9 * 3.0 * (v14 + v17.f64[0]);
  v24 = vmuld_lane_f64(v9 * 3.0, v17, 1);
  v25 = v9 + v9 * 3.0 * (v14 - v17.f64[0]);
  *(double *)(a2 + 48) = v23;
  *(double *)(a2 + 56) = v24;
  *(double *)(a3 + 48) = v24;
  *(double *)(a3 + 56) = v25;
  _Q28 = vmulq_n_f64(v13, v9 * v9 * 6.0);
  v27 = vmuld_lane_f64(3.0, _Q28, 1);
  *(float64_t *)(a4 + 56) = _Q28.f64[1];
  *(double *)(a4 + 48) = 3.0 * _Q28.f64[0];
  *(float64_t *)(a6 + 48) = _Q28.f64[0];
  *(double *)(a6 + 56) = v27;
  *(int8x16_t *)(a5 + 48) = vextq_s8((int8x16_t)_Q28, (int8x16_t)_Q28, 8uLL);
  v28 = v11 + v11;
  v29 = -(v14 - (v11 + v11) * v21);
  *(double *)(a1 + 64) = -1.0 - (v14 - (v11 + v11) * v21);
  _D19 = v9 * 8.0;
  v15.f64[0] = vmlad_n_f64(v15.f64[0], v9 * 8.0, _Q11.f64[0]);
  __asm { FMLA            D24, D19, V11.D[1] }
  *(float64_t *)(a2 + 64) = v15.f64[0];
  *(double *)(a3 + 64) = _D24;
  *(double *)(a4 + 64) = v16 + v9 * 8.0 * v23;
  *(double *)(a6 + 64) = v16 + v9 * 8.0 * v25;
  *(double *)(a5 + 64) = v9 * 8.0 * v24;
  v36 = vmlaq_n_f64(vmulq_laneq_f64(v12, v17, 1), v13, v17.f64[0]);
  *(float64x2_t *)(a1 + 72) = v36;
  v37 = vmulq_n_f64(v17, v9 * 3.0);
  *(float64x2_t *)(a2 + 72) = v37;
  *(double *)(a3 + 72) = -v37.f64[1];
  *(float64_t *)(a3 + 80) = v37.f64[0];
  v38 = vmulq_n_f64(v18, v9 * 3.0);
  *(float64x2_t *)(a4 + 72) = v38;
  *(float64x2_t *)(a6 + 72) = vnegq_f64(v38);
  *(double *)(a5 + 72) = -v38.f64[1];
  *(float64_t *)(a5 + 80) = v38.f64[0];
  v38.f64[0] = v11 + v21 + -1.0;
  _Q12 = vmulq_n_f64(v17, v38.f64[0]);
  *(float64x2_t *)(a1 + 88) = _Q12;
  v40 = vmlaq_n_f64(v18, vaddq_f64(v36, _Q11), v9 * 4.0);
  *(float64x2_t *)(a2 + 88) = v40;
  _Q7 = vmlaq_n_f64(v19, vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)_Q11, 8uLL), (float64x2_t)vextq_s8((int8x16_t)_Q11, (int8x16_t)v36, 8uLL)), v9 * 4.0);
  *(float64x2_t *)(a3 + 88) = _Q7;
  v42 = v9 * 4.0 * (v24 + v37.f64[1]);
  *(double *)(a4 + 88) = v20 + v9 * 4.0 * (v37.f64[0] + v23);
  *(double *)(a4 + 96) = v42;
  *(double *)(a6 + 88) = -(v20 - v9 * 4.0 * (v37.f64[0] - v25));
  *(double *)(a6 + 96) = v42;
  *(_QWORD *)(a5 + 88) = 0;
  *(double *)(a5 + 96) = v20 + v9 * 4.0 * (v23 - v37.f64[0]);
  v43 = v29 + v11 * v38.f64[0] - v21;
  _Q11 = vmulq_n_f64(v13, v43);
  *(float64x2_t *)(a1 + 104) = _Q11;
  _D21 = v9 * 5.0;
  __asm { FMLA            D27, D21, V12.D[1] }
  *(double *)(a2 + 104) = v23 + v9 * 5.0 * (v29 + _Q12.f64[0]);
  *(_QWORD *)(a2 + 112) = _D27;
  v40.f64[0] = v15.f64[0] + v40.f64[0];
  v47.f64[1] = _Q28.f64[1];
  v47.f64[0] = 3.0 * _Q28.f64[0];
  *(_QWORD *)(a3 + 104) = _D27;
  *(double *)(a3 + 112) = v25 + v9 * 5.0 * (v29 - _Q12.f64[0]);
  v48 = vmlaq_n_f64(v47, v40, v9 * 5.0);
  *(float64x2_t *)(a4 + 104) = v48;
  *(float64_t *)(a5 + 104) = v48.f64[1];
  __asm { FMLA            D28, D21, V7.D[1] }
  *(float64_t *)(a6 + 104) = _Q28.f64[0];
  *(float64_t *)(a5 + 112) = _Q28.f64[0];
  *(double *)(a6 + 112) = v27 + v9 * 5.0 * (_D24 - _Q7.f64[0]);
  v49 = -(v29 - (v11 + v11) * v43);
  *(double *)(a1 + 120) = 1.0 - (v29 - (v11 + v11) * v43);
  _Q7.f64[0] = v9 * 12.0;
  __asm { FMLA            D24, D7, V11.D[1] }
  *(double *)(a2 + 120) = vmlad_n_f64(v15.f64[0], v9 * 12.0, _Q11.f64[0]);
  *(_QWORD *)(a3 + 120) = _D24;
  *(double *)(a4 + 120) = *(double *)(a4 + 64) + v9 * 12.0 * *(double *)(a2 + 104);
  *(double *)(a6 + 120) = *(double *)(a6 + 64) + v9 * 12.0 * *(double *)(a3 + 112);
  *(double *)(a5 + 120) = *(double *)(a5 + 64) + v9 * 12.0 * *(double *)(a2 + 112);
  v51 = vmlaq_n_f64(vmulq_laneq_f64(v12, v36, 1), v13, v36.f64[0]);
  *(float64x2_t *)(a1 + 128) = v51;
  v52 = vmulq_n_f64(v36, v9 * 4.0);
  *(float64x2_t *)(a2 + 128) = v52;
  *(double *)(a3 + 128) = -v52.f64[1];
  *(float64_t *)(a3 + 136) = v52.f64[0];
  v53 = vmulq_n_f64(v37, v9 * 4.0);
  *(float64x2_t *)(a4 + 128) = v53;
  *(float64x2_t *)(a6 + 128) = vnegq_f64(v53);
  *(double *)(a5 + 128) = -v53.f64[1];
  *(float64_t *)(a5 + 136) = v53.f64[0];
  v53.f64[0] = v11 + v38.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 144) = vmulq_n_f64(v36, v53.f64[0]);
  v37.f64[0] = *(float64_t *)(a2 + 80);
  *(double *)(a2 + 144) = *(double *)(a2 + 72) + v9 * 5.0 * (*(double *)(a1 + 128) + *(double *)(a1 + 88));
  *(double *)(a2 + 152) = v37.f64[0] + v9 * 5.0 * (*(double *)(a1 + 96) + *(double *)(a1 + 136));
  v37.f64[0] = *(float64_t *)(a3 + 80);
  *(double *)(a3 + 144) = *(double *)(a3 + 72) + v9 * 5.0 * (*(double *)(a1 + 136) - *(double *)(a1 + 96));
  *(double *)(a3 + 152) = v37.f64[0] + v9 * 5.0 * (*(double *)(a1 + 88) - *(double *)(a1 + 128));
  v37.f64[0] = *(float64_t *)(a4 + 80);
  *(double *)(a4 + 144) = *(double *)(a4 + 72) + v9 * 5.0 * (*(double *)(a2 + 128) + *(double *)(a2 + 88));
  *(double *)(a4 + 152) = v37.f64[0] + v9 * 5.0 * (*(double *)(a2 + 96) + *(double *)(a2 + 136));
  v37.f64[0] = *(float64_t *)(a6 + 80);
  *(double *)(a6 + 144) = *(double *)(a6 + 72) + v9 * 5.0 * (*(double *)(a3 + 136) - *(double *)(a3 + 96));
  *(double *)(a6 + 152) = v37.f64[0] + v9 * 5.0 * (*(double *)(a3 + 88) - *(double *)(a3 + 128));
  v37.f64[0] = *(float64_t *)(a5 + 80);
  *(double *)(a5 + 144) = *(double *)(a5 + 72) + v9 * 5.0 * (*(double *)(a2 + 136) - *(double *)(a2 + 96));
  *(double *)(a5 + 152) = v37.f64[0] + v9 * 5.0 * (*(double *)(a2 + 88) - *(double *)(a2 + 128));
  v38.f64[0] = v43 + v11 * v53.f64[0] - v38.f64[0];
  *(float64x2_t *)(a1 + 160) = vmulq_n_f64(v17, v38.f64[0]);
  v37.f64[0] = *(float64_t *)(a2 + 96);
  *(double *)(a2 + 160) = *(double *)(a2 + 88) + v9 * 6.0 * (*(double *)(a1 + 144) + *(double *)(a1 + 104));
  *(double *)(a2 + 168) = v37.f64[0] + v9 * 6.0 * (*(double *)(a1 + 112) + *(double *)(a1 + 152));
  v37.f64[0] = *(float64_t *)(a3 + 96);
  *(double *)(a3 + 160) = *(double *)(a3 + 88) + v9 * 6.0 * (*(double *)(a1 + 152) - *(double *)(a1 + 112));
  *(double *)(a3 + 168) = v37.f64[0] + v9 * 6.0 * (*(double *)(a1 + 104) - *(double *)(a1 + 144));
  v37.f64[0] = *(float64_t *)(a4 + 96);
  *(double *)(a4 + 160) = *(double *)(a4 + 88) + v9 * 6.0 * (*(double *)(a2 + 144) + *(double *)(a2 + 104));
  *(double *)(a4 + 168) = v37.f64[0] + v9 * 6.0 * (*(double *)(a2 + 112) + *(double *)(a2 + 152));
  v37.f64[0] = *(float64_t *)(a6 + 96);
  *(double *)(a6 + 160) = *(double *)(a6 + 88) + v9 * 6.0 * (*(double *)(a3 + 152) - *(double *)(a3 + 112));
  *(double *)(a6 + 168) = v37.f64[0] + v9 * 6.0 * (*(double *)(a3 + 104) - *(double *)(a3 + 144));
  v37.f64[0] = *(float64_t *)(a5 + 96);
  *(double *)(a5 + 160) = *(double *)(a5 + 88) + v9 * 6.0 * (*(double *)(a2 + 152) - *(double *)(a2 + 112));
  *(double *)(a5 + 168) = v37.f64[0] + v9 * 6.0 * (*(double *)(a2 + 104) - *(double *)(a2 + 144));
  v40.f64[0] = v11 * v38.f64[0] - (v29 - (v11 + v11) * v43) - v43;
  *(float64x2_t *)(a1 + 176) = vmulq_n_f64(v13, v40.f64[0]);
  v54 = *(double *)(a2 + 112);
  *(double *)(a2 + 176) = *(double *)(a2 + 104) + v9 * 7.0 * (*(double *)(a1 + 160) - (v29 - (v11 + v11) * v43));
  v55 = v54 + v9 * 7.0 * *(double *)(a1 + 168);
  *(double *)(a2 + 184) = v55;
  *(double *)(a3 + 176) = v55;
  *(double *)(a3 + 184) = *(double *)(a3 + 112) + v9 * 7.0 * (v49 - *(double *)(a1 + 160));
  v56 = *(double *)(a4 + 112);
  *(double *)(a4 + 176) = *(double *)(a4 + 104) + v9 * 7.0 * (*(double *)(a2 + 160) + *(double *)(a2 + 120));
  *(double *)(a4 + 184) = v56 + v9 * 7.0 * *(double *)(a2 + 168);
  v57 = *(double *)(a6 + 112);
  *(double *)(a6 + 176) = *(double *)(a6 + 104) + v9 * 7.0 * *(double *)(a3 + 168);
  *(double *)(a6 + 184) = v57 + v9 * 7.0 * (*(double *)(a3 + 120) - *(double *)(a3 + 160));
  *(_QWORD *)(a5 + 176) = *(_QWORD *)(a4 + 184);
  *(_QWORD *)(a5 + 184) = *(_QWORD *)(a6 + 176);
  v58 = -(v49 - (v11 + v11) * v40.f64[0]);
  *(double *)(a1 + 192) = v58 + -1.0;
  *(double *)(a2 + 192) = *(double *)(a2 + 120) + v9 * 16.0 * *(double *)(a1 + 176);
  *(double *)(a3 + 192) = *(double *)(a3 + 120) + v9 * 16.0 * *(double *)(a1 + 184);
  *(double *)(a4 + 192) = *(double *)(a4 + 120) + v9 * 16.0 * *(double *)(a2 + 176);
  *(double *)(a6 + 192) = *(double *)(a6 + 120) + v9 * 16.0 * *(double *)(a3 + 184);
  *(double *)(a5 + 192) = *(double *)(a5 + 120) + v9 * 16.0 * *(double *)(a2 + 184);
  v59 = vmlaq_n_f64(vmulq_laneq_f64(v12, v51, 1), v13, v51.f64[0]);
  *(float64x2_t *)(a1 + 200) = v59;
  v60 = vmulq_n_f64(v51, v9 * 5.0);
  *(float64x2_t *)(a2 + 200) = v60;
  *(double *)(a3 + 200) = -v60.f64[1];
  *(float64_t *)(a3 + 208) = v60.f64[0];
  v61 = vmulq_n_f64(v52, v9 * 5.0);
  *(float64x2_t *)(a4 + 200) = v61;
  *(float64x2_t *)(a6 + 200) = vnegq_f64(v61);
  *(double *)(a5 + 200) = -v61.f64[1];
  *(float64_t *)(a5 + 208) = v61.f64[0];
  v52.f64[0] = v11 + v53.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 216) = vmulq_n_f64(v51, v52.f64[0]);
  v62 = *(double *)(a2 + 136);
  *(double *)(a2 + 216) = *(double *)(a2 + 128) + v9 * 6.0 * (*(double *)(a1 + 200) + *(double *)(a1 + 144));
  *(double *)(a2 + 224) = v62 + v9 * 6.0 * (*(double *)(a1 + 152) + *(double *)(a1 + 208));
  v63 = *(double *)(a3 + 136);
  *(double *)(a3 + 216) = *(double *)(a3 + 128) + v9 * 6.0 * (*(double *)(a1 + 208) - *(double *)(a1 + 152));
  *(double *)(a3 + 224) = v63 + v9 * 6.0 * (*(double *)(a1 + 144) - *(double *)(a1 + 200));
  v64 = *(double *)(a4 + 136);
  *(double *)(a4 + 216) = *(double *)(a4 + 128) + v9 * 6.0 * (*(double *)(a2 + 200) + *(double *)(a2 + 144));
  *(double *)(a4 + 224) = v64 + v9 * 6.0 * (*(double *)(a2 + 152) + *(double *)(a2 + 208));
  v65 = *(double *)(a6 + 136);
  *(double *)(a6 + 216) = *(double *)(a6 + 128) + v9 * 6.0 * (*(double *)(a3 + 208) - *(double *)(a3 + 152));
  *(double *)(a6 + 224) = v65 + v9 * 6.0 * (*(double *)(a3 + 144) - *(double *)(a3 + 200));
  v66 = *(double *)(a5 + 136);
  *(double *)(a5 + 216) = *(double *)(a5 + 128) + v9 * 6.0 * (*(double *)(a2 + 208) - *(double *)(a2 + 152));
  *(double *)(a5 + 224) = v66 + v9 * 6.0 * (*(double *)(a2 + 144) - *(double *)(a2 + 200));
  v67 = v38.f64[0] + v11 * v52.f64[0] - v53.f64[0];
  *(float64x2_t *)(a1 + 232) = vmulq_n_f64(v36, v67);
  v60.f64[0] = *(float64_t *)(a2 + 152);
  *(double *)(a2 + 232) = *(double *)(a2 + 144) + v9 * 7.0 * (*(double *)(a1 + 216) + *(double *)(a1 + 160));
  *(double *)(a2 + 240) = v60.f64[0] + v9 * 7.0 * (*(double *)(a1 + 168) + *(double *)(a1 + 224));
  v60.f64[0] = *(float64_t *)(a3 + 152);
  *(double *)(a3 + 232) = *(double *)(a3 + 144) + v9 * 7.0 * (*(double *)(a1 + 224) - *(double *)(a1 + 168));
  *(double *)(a3 + 240) = v60.f64[0] + v9 * 7.0 * (*(double *)(a1 + 160) - *(double *)(a1 + 216));
  v60.f64[0] = *(float64_t *)(a4 + 152);
  *(double *)(a4 + 232) = *(double *)(a4 + 144) + v9 * 7.0 * (*(double *)(a2 + 216) + *(double *)(a2 + 160));
  *(double *)(a4 + 240) = v60.f64[0] + v9 * 7.0 * (*(double *)(a2 + 168) + *(double *)(a2 + 224));
  v60.f64[0] = *(float64_t *)(a6 + 152);
  *(double *)(a6 + 232) = *(double *)(a6 + 144) + v9 * 7.0 * (*(double *)(a3 + 224) - *(double *)(a3 + 168));
  *(double *)(a6 + 240) = v60.f64[0] + v9 * 7.0 * (*(double *)(a3 + 160) - *(double *)(a3 + 216));
  v60.f64[0] = *(float64_t *)(a5 + 152);
  *(double *)(a5 + 232) = *(double *)(a5 + 144) + v9 * 7.0 * (*(double *)(a2 + 224) - *(double *)(a2 + 168));
  *(double *)(a5 + 240) = v60.f64[0] + v9 * 7.0 * (*(double *)(a2 + 160) - *(double *)(a2 + 216));
  v68 = v40.f64[0] + v11 * v67 - v38.f64[0];
  *(float64x2_t *)(a1 + 248) = vmulq_n_f64(v17, v68);
  v38.f64[0] = *(float64_t *)(a2 + 168);
  *(double *)(a2 + 248) = *(double *)(a2 + 160) + v9 * 8.0 * (*(double *)(a1 + 232) + *(double *)(a1 + 176));
  *(double *)(a2 + 256) = v38.f64[0] + v9 * 8.0 * (*(double *)(a1 + 184) + *(double *)(a1 + 240));
  v38.f64[0] = *(float64_t *)(a3 + 168);
  *(double *)(a3 + 248) = *(double *)(a3 + 160) + v9 * 8.0 * (*(double *)(a1 + 240) - *(double *)(a1 + 184));
  *(double *)(a3 + 256) = v38.f64[0] + v9 * 8.0 * (*(double *)(a1 + 176) - *(double *)(a1 + 232));
  v38.f64[0] = *(float64_t *)(a4 + 168);
  *(double *)(a4 + 248) = *(double *)(a4 + 160) + v9 * 8.0 * (*(double *)(a2 + 232) + *(double *)(a2 + 176));
  *(double *)(a4 + 256) = v38.f64[0] + v9 * 8.0 * (*(double *)(a2 + 184) + *(double *)(a2 + 240));
  v38.f64[0] = *(float64_t *)(a6 + 168);
  *(double *)(a6 + 248) = *(double *)(a6 + 160) + v9 * 8.0 * (*(double *)(a3 + 240) - *(double *)(a3 + 184));
  *(double *)(a6 + 256) = v38.f64[0] + v9 * 8.0 * (*(double *)(a3 + 176) - *(double *)(a3 + 232));
  v38.f64[0] = *(float64_t *)(a5 + 168);
  *(double *)(a5 + 248) = *(double *)(a5 + 160) + v9 * 8.0 * (*(double *)(a2 + 240) - *(double *)(a2 + 184));
  *(double *)(a5 + 256) = v38.f64[0] + v9 * 8.0 * (*(double *)(a2 + 176) - *(double *)(a2 + 232));
  v38.f64[0] = v58 + v11 * v68 - v40.f64[0];
  *(float64x2_t *)(a1 + 264) = vmulq_n_f64(v13, v38.f64[0]);
  v60.f64[0] = *(float64_t *)(a2 + 184);
  *(double *)(a2 + 264) = *(double *)(a2 + 176) + v9 * 9.0 * (v58 + *(double *)(a1 + 248));
  v53.f64[0] = v60.f64[0] + v9 * 9.0 * *(double *)(a1 + 256);
  *(float64_t *)(a2 + 272) = v53.f64[0];
  *(float64_t *)(a3 + 264) = v53.f64[0];
  *(double *)(a3 + 272) = *(double *)(a3 + 184) + v9 * 9.0 * (v58 - *(double *)(a1 + 248));
  v60.f64[0] = *(float64_t *)(a4 + 184);
  *(double *)(a4 + 264) = *(double *)(a4 + 176) + v9 * 9.0 * (*(double *)(a2 + 248) + *(double *)(a2 + 192));
  *(double *)(a4 + 272) = v60.f64[0] + v9 * 9.0 * *(double *)(a2 + 256);
  v60.f64[0] = *(float64_t *)(a6 + 184);
  *(double *)(a6 + 264) = *(double *)(a6 + 176) + v9 * 9.0 * *(double *)(a3 + 256);
  *(double *)(a6 + 272) = v60.f64[0] + v9 * 9.0 * (*(double *)(a3 + 192) - *(double *)(a3 + 248));
  *(_QWORD *)(a5 + 264) = *(_QWORD *)(a4 + 272);
  *(_QWORD *)(a5 + 272) = *(_QWORD *)(a6 + 264);
  v69 = -(v58 - (v11 + v11) * v38.f64[0]);
  *(double *)(a1 + 280) = v69 + 1.0;
  *(double *)(a2 + 280) = *(double *)(a2 + 192) + v9 * 20.0 * *(double *)(a1 + 264);
  *(double *)(a3 + 280) = *(double *)(a3 + 192) + v9 * 20.0 * *(double *)(a1 + 272);
  *(double *)(a4 + 280) = *(double *)(a4 + 192) + v9 * 20.0 * *(double *)(a2 + 264);
  *(double *)(a6 + 280) = *(double *)(a6 + 192) + v9 * 20.0 * *(double *)(a3 + 272);
  *(double *)(a5 + 280) = *(double *)(a5 + 192) + v9 * 20.0 * *(double *)(a2 + 272);
  v70 = vmlaq_n_f64(vmulq_laneq_f64(v12, v59, 1), v13, v59.f64[0]);
  *(float64x2_t *)(a1 + 288) = v70;
  *(double *)(a2 + 288) = v9 * 6.0 * *(double *)(a1 + 200);
  v60.f64[0] = v9 * 6.0 * *(double *)(a1 + 208);
  *(float64_t *)(a2 + 296) = v60.f64[0];
  *(double *)(a3 + 288) = -v60.f64[0];
  *(_QWORD *)(a3 + 296) = *(_QWORD *)(a2 + 288);
  v40.f64[0] = *(float64_t *)(a2 + 200);
  *(double *)(a4 + 288) = v9 * 6.0 * v40.f64[0];
  *(double *)(a4 + 296) = v9 * 6.0 * *(double *)(a2 + 208);
  *(double *)(a6 + 288) = -(v9 * 6.0 * v40.f64[0]);
  *(double *)(a6 + 296) = -*(double *)(a4 + 296);
  *(double *)(a5 + 288) = -*(double *)(a4 + 296);
  *(_QWORD *)(a5 + 296) = *(_QWORD *)(a4 + 288);
  v40.f64[0] = v11 + v52.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 304) = vmulq_n_f64(v59, v40.f64[0]);
  v71 = *(double *)(a2 + 208);
  *(double *)(a2 + 304) = *(double *)(a2 + 200) + v9 * 7.0 * (*(double *)(a1 + 288) + *(double *)(a1 + 216));
  *(double *)(a2 + 312) = v71 + v9 * 7.0 * (*(double *)(a1 + 224) + *(double *)(a1 + 296));
  v72 = *(double *)(a3 + 208);
  *(double *)(a3 + 304) = *(double *)(a3 + 200) + v9 * 7.0 * (*(double *)(a1 + 296) - *(double *)(a1 + 224));
  *(double *)(a3 + 312) = v72 + v9 * 7.0 * (*(double *)(a1 + 216) - *(double *)(a1 + 288));
  v73 = *(double *)(a4 + 208);
  *(double *)(a4 + 304) = *(double *)(a4 + 200) + v9 * 7.0 * (*(double *)(a2 + 288) + *(double *)(a2 + 216));
  *(double *)(a4 + 312) = v73 + v9 * 7.0 * (*(double *)(a2 + 224) + *(double *)(a2 + 296));
  v74 = *(double *)(a6 + 208);
  *(double *)(a6 + 304) = *(double *)(a6 + 200) + v9 * 7.0 * (*(double *)(a3 + 296) - *(double *)(a3 + 224));
  *(double *)(a6 + 312) = v74 + v9 * 7.0 * (*(double *)(a3 + 216) - *(double *)(a3 + 288));
  v75 = *(double *)(a5 + 208);
  *(double *)(a5 + 304) = *(double *)(a5 + 200) + v9 * 7.0 * (*(double *)(a2 + 296) - *(double *)(a2 + 224));
  *(double *)(a5 + 312) = v75 + v9 * 7.0 * (*(double *)(a2 + 216) - *(double *)(a2 + 288));
  v60.f64[0] = v67 + v11 * v40.f64[0] - v52.f64[0];
  *(float64x2_t *)(a1 + 320) = vmulq_n_f64(v51, v60.f64[0]);
  v76 = *(double *)(a2 + 224);
  *(double *)(a2 + 320) = *(double *)(a2 + 216) + v9 * 8.0 * (*(double *)(a1 + 304) + *(double *)(a1 + 232));
  *(double *)(a2 + 328) = v76 + v9 * 8.0 * (*(double *)(a1 + 240) + *(double *)(a1 + 312));
  v77 = *(double *)(a3 + 224);
  *(double *)(a3 + 320) = *(double *)(a3 + 216) + v9 * 8.0 * (*(double *)(a1 + 312) - *(double *)(a1 + 240));
  *(double *)(a3 + 328) = v77 + v9 * 8.0 * (*(double *)(a1 + 232) - *(double *)(a1 + 304));
  v78 = *(double *)(a4 + 224);
  *(double *)(a4 + 320) = *(double *)(a4 + 216) + v9 * 8.0 * (*(double *)(a2 + 304) + *(double *)(a2 + 232));
  *(double *)(a4 + 328) = v78 + v9 * 8.0 * (*(double *)(a2 + 240) + *(double *)(a2 + 312));
  v79 = *(double *)(a6 + 224);
  *(double *)(a6 + 320) = *(double *)(a6 + 216) + v9 * 8.0 * (*(double *)(a3 + 312) - *(double *)(a3 + 240));
  *(double *)(a6 + 328) = v79 + v9 * 8.0 * (*(double *)(a3 + 232) - *(double *)(a3 + 304));
  v80 = *(double *)(a5 + 224);
  *(double *)(a5 + 320) = *(double *)(a5 + 216) + v9 * 8.0 * (*(double *)(a2 + 312) - *(double *)(a2 + 240));
  *(double *)(a5 + 328) = v80 + v9 * 8.0 * (*(double *)(a2 + 232) - *(double *)(a2 + 304));
  v81 = v68 + v11 * v60.f64[0] - v67;
  *(float64x2_t *)(a1 + 336) = vmulq_n_f64(v36, v81);
  v82 = *(double *)(a2 + 240);
  *(double *)(a2 + 336) = *(double *)(a2 + 232) + v9 * 9.0 * (*(double *)(a1 + 320) + *(double *)(a1 + 248));
  *(double *)(a2 + 344) = v82 + v9 * 9.0 * (*(double *)(a1 + 256) + *(double *)(a1 + 328));
  v83 = *(double *)(a3 + 240);
  *(double *)(a3 + 336) = *(double *)(a3 + 232) + v9 * 9.0 * (*(double *)(a1 + 328) - *(double *)(a1 + 256));
  *(double *)(a3 + 344) = v83 + v9 * 9.0 * (*(double *)(a1 + 248) - *(double *)(a1 + 320));
  v84 = *(double *)(a4 + 240);
  *(double *)(a4 + 336) = *(double *)(a4 + 232) + v9 * 9.0 * (*(double *)(a2 + 320) + *(double *)(a2 + 248));
  *(double *)(a4 + 344) = v84 + v9 * 9.0 * (*(double *)(a2 + 256) + *(double *)(a2 + 328));
  v85 = *(double *)(a6 + 240);
  *(double *)(a6 + 336) = *(double *)(a6 + 232) + v9 * 9.0 * (*(double *)(a3 + 328) - *(double *)(a3 + 256));
  *(double *)(a6 + 344) = v85 + v9 * 9.0 * (*(double *)(a3 + 248) - *(double *)(a3 + 320));
  v86 = *(double *)(a5 + 240);
  *(double *)(a5 + 336) = *(double *)(a5 + 232) + v9 * 9.0 * (*(double *)(a2 + 328) - *(double *)(a2 + 256));
  *(double *)(a5 + 344) = v86 + v9 * 9.0 * (*(double *)(a2 + 248) - *(double *)(a2 + 320));
  v87 = v38.f64[0] + v11 * v81 - v68;
  *(float64x2_t *)(a1 + 352) = vmulq_n_f64(v17, v87);
  v88 = *(double *)(a2 + 256);
  *(double *)(a2 + 352) = *(double *)(a2 + 248) + v9 * 10.0 * (*(double *)(a1 + 336) + *(double *)(a1 + 264));
  *(double *)(a2 + 360) = v88 + v9 * 10.0 * (*(double *)(a1 + 272) + *(double *)(a1 + 344));
  v89 = *(double *)(a3 + 256);
  *(double *)(a3 + 352) = *(double *)(a3 + 248) + v9 * 10.0 * (*(double *)(a1 + 344) - *(double *)(a1 + 272));
  *(double *)(a3 + 360) = v89 + v9 * 10.0 * (*(double *)(a1 + 264) - *(double *)(a1 + 336));
  v90 = *(double *)(a4 + 256);
  *(double *)(a4 + 352) = *(double *)(a4 + 248) + v9 * 10.0 * (*(double *)(a2 + 336) + *(double *)(a2 + 264));
  *(double *)(a4 + 360) = v90 + v9 * 10.0 * (*(double *)(a2 + 272) + *(double *)(a2 + 344));
  v91 = *(double *)(a6 + 256);
  *(double *)(a6 + 352) = *(double *)(a6 + 248) + v9 * 10.0 * (*(double *)(a3 + 344) - *(double *)(a3 + 272));
  *(double *)(a6 + 360) = v91 + v9 * 10.0 * (*(double *)(a3 + 264) - *(double *)(a3 + 336));
  v92 = *(double *)(a5 + 256);
  *(double *)(a5 + 352) = *(double *)(a5 + 248) + v9 * 10.0 * (*(double *)(a2 + 344) - *(double *)(a2 + 272));
  *(double *)(a5 + 360) = v92 + v9 * 10.0 * (*(double *)(a2 + 264) - *(double *)(a2 + 336));
  v93 = v69 + v11 * v87 - v38.f64[0];
  *(float64x2_t *)(a1 + 368) = vmulq_n_f64(v13, v93);
  v48.f64[0] = *(float64_t *)(a2 + 272);
  *(double *)(a2 + 368) = *(double *)(a2 + 264) + v9 * 11.0 * (v69 + *(double *)(a1 + 352));
  *(double *)(a2 + 376) = v48.f64[0] + v9 * 11.0 * *(double *)(a1 + 360);
  v48.f64[0] = *(float64_t *)(a3 + 272);
  *(double *)(a3 + 368) = *(double *)(a3 + 264) + v9 * 11.0 * *(double *)(a1 + 360);
  *(double *)(a3 + 376) = v48.f64[0] + v9 * 11.0 * (v69 - *(double *)(a1 + 352));
  v48.f64[0] = *(float64_t *)(a4 + 272);
  *(double *)(a4 + 368) = *(double *)(a4 + 264) + v9 * 11.0 * (*(double *)(a2 + 352) + *(double *)(a2 + 280));
  *(double *)(a4 + 376) = v48.f64[0] + v9 * 11.0 * *(double *)(a2 + 360);
  v48.f64[0] = *(float64_t *)(a6 + 272);
  *(double *)(a6 + 368) = *(double *)(a6 + 264) + v9 * 11.0 * *(double *)(a3 + 360);
  *(double *)(a6 + 376) = v48.f64[0] + v9 * 11.0 * (*(double *)(a3 + 280) - *(double *)(a3 + 352));
  *(_QWORD *)(a5 + 368) = *(_QWORD *)(a4 + 376);
  *(_QWORD *)(a5 + 376) = *(_QWORD *)(a6 + 368);
  v48.f64[0] = -(v69 - (v11 + v11) * v93);
  *(double *)(a1 + 384) = -1.0 - (v69 - (v11 + v11) * v93);
  *(double *)(a2 + 384) = *(double *)(a2 + 280) + v9 * 24.0 * *(double *)(a1 + 368);
  *(double *)(a3 + 384) = *(double *)(a3 + 280) + v9 * 24.0 * *(double *)(a1 + 376);
  *(double *)(a4 + 384) = *(double *)(a4 + 280) + v9 * 24.0 * *(double *)(a2 + 368);
  *(double *)(a6 + 384) = *(double *)(a6 + 280) + v9 * 24.0 * *(double *)(a3 + 376);
  *(double *)(a5 + 384) = *(double *)(a5 + 280) + v9 * 24.0 * *(double *)(a2 + 376);
  v94 = vmlaq_n_f64(vmulq_laneq_f64(v12, v70, 1), v13, v70.f64[0]);
  *(float64x2_t *)(a1 + 392) = v94;
  *(double *)(a2 + 392) = v9 * 7.0 * *(double *)(a1 + 288);
  v52.f64[0] = v9 * 7.0 * *(double *)(a1 + 296);
  *(float64_t *)(a2 + 400) = v52.f64[0];
  *(double *)(a3 + 392) = -v52.f64[0];
  *(_QWORD *)(a3 + 400) = *(_QWORD *)(a2 + 392);
  v95 = *(double *)(a2 + 288);
  *(double *)(a4 + 392) = v9 * 7.0 * v95;
  *(double *)(a4 + 400) = v9 * 7.0 * *(double *)(a2 + 296);
  *(double *)(a6 + 392) = -(v9 * 7.0 * v95);
  *(double *)(a6 + 400) = -*(double *)(a4 + 400);
  *(double *)(a5 + 392) = -*(double *)(a4 + 400);
  *(_QWORD *)(a5 + 400) = *(_QWORD *)(a4 + 392);
  v96 = v11 + v40.f64[0] + -1.0;
  *(float64x2_t *)(a1 + 408) = vmulq_n_f64(v70, v96);
  _Q11.f64[0] = *(float64_t *)(a2 + 296);
  *(double *)(a2 + 408) = *(double *)(a2 + 288) + v9 * 8.0 * (*(double *)(a1 + 392) + *(double *)(a1 + 304));
  *(double *)(a2 + 416) = _Q11.f64[0] + v9 * 8.0 * (*(double *)(a1 + 312) + *(double *)(a1 + 400));
  _Q11.f64[0] = *(float64_t *)(a3 + 296);
  *(double *)(a3 + 408) = *(double *)(a3 + 288) + v9 * 8.0 * (*(double *)(a1 + 400) - *(double *)(a1 + 312));
  *(double *)(a3 + 416) = _Q11.f64[0] + v9 * 8.0 * (*(double *)(a1 + 304) - *(double *)(a1 + 392));
  _Q11.f64[0] = *(float64_t *)(a4 + 296);
  *(double *)(a4 + 408) = *(double *)(a4 + 288) + v9 * 8.0 * (*(double *)(a2 + 392) + *(double *)(a2 + 304));
  *(double *)(a4 + 416) = _Q11.f64[0] + v9 * 8.0 * (*(double *)(a2 + 312) + *(double *)(a2 + 400));
  _Q11.f64[0] = *(float64_t *)(a6 + 296);
  *(double *)(a6 + 408) = *(double *)(a6 + 288) + v9 * 8.0 * (*(double *)(a3 + 400) - *(double *)(a3 + 312));
  *(double *)(a6 + 416) = _Q11.f64[0] + v9 * 8.0 * (*(double *)(a3 + 304) - *(double *)(a3 + 392));
  _Q11.f64[0] = *(float64_t *)(a5 + 296);
  *(double *)(a5 + 408) = *(double *)(a5 + 288) + v9 * 8.0 * (*(double *)(a2 + 400) - *(double *)(a2 + 312));
  *(double *)(a5 + 416) = _Q11.f64[0] + v9 * 8.0 * (*(double *)(a2 + 304) - *(double *)(a2 + 392));
  v52.f64[0] = v60.f64[0] + v11 * v96 - v40.f64[0];
  *(float64x2_t *)(a1 + 424) = vmulq_n_f64(v59, v52.f64[0]);
  _Q11.f64[0] = *(float64_t *)(a2 + 312);
  *(double *)(a2 + 424) = *(double *)(a2 + 304) + v9 * 9.0 * (*(double *)(a1 + 408) + *(double *)(a1 + 320));
  *(double *)(a2 + 432) = _Q11.f64[0] + v9 * 9.0 * (*(double *)(a1 + 328) + *(double *)(a1 + 416));
  _Q11.f64[0] = *(float64_t *)(a3 + 312);
  *(double *)(a3 + 424) = *(double *)(a3 + 304) + v9 * 9.0 * (*(double *)(a1 + 416) - *(double *)(a1 + 328));
  *(double *)(a3 + 432) = _Q11.f64[0] + v9 * 9.0 * (*(double *)(a1 + 320) - *(double *)(a1 + 408));
  _Q11.f64[0] = *(float64_t *)(a4 + 312);
  *(double *)(a4 + 424) = *(double *)(a4 + 304) + v9 * 9.0 * (*(double *)(a2 + 408) + *(double *)(a2 + 320));
  *(double *)(a4 + 432) = _Q11.f64[0] + v9 * 9.0 * (*(double *)(a2 + 328) + *(double *)(a2 + 416));
  _Q11.f64[0] = *(float64_t *)(a6 + 312);
  *(double *)(a6 + 424) = *(double *)(a6 + 304) + v9 * 9.0 * (*(double *)(a3 + 416) - *(double *)(a3 + 328));
  *(double *)(a6 + 432) = _Q11.f64[0] + v9 * 9.0 * (*(double *)(a3 + 320) - *(double *)(a3 + 408));
  _Q11.f64[0] = *(float64_t *)(a5 + 312);
  *(double *)(a5 + 424) = *(double *)(a5 + 304) + v9 * 9.0 * (*(double *)(a2 + 416) - *(double *)(a2 + 328));
  *(double *)(a5 + 432) = _Q11.f64[0] + v9 * 9.0 * (*(double *)(a2 + 320) - *(double *)(a2 + 408));
  v60.f64[0] = v81 + v11 * v52.f64[0] - v60.f64[0];
  *(float64x2_t *)(a1 + 440) = vmulq_n_f64(v51, v60.f64[0]);
  _Q11.f64[0] = *(float64_t *)(a2 + 328);
  *(double *)(a2 + 440) = *(double *)(a2 + 320) + v9 * 10.0 * (*(double *)(a1 + 424) + *(double *)(a1 + 336));
  *(double *)(a2 + 448) = _Q11.f64[0] + v9 * 10.0 * (*(double *)(a1 + 344) + *(double *)(a1 + 432));
  _Q11.f64[0] = *(float64_t *)(a3 + 328);
  *(double *)(a3 + 440) = *(double *)(a3 + 320) + v9 * 10.0 * (*(double *)(a1 + 432) - *(double *)(a1 + 344));
  *(double *)(a3 + 448) = _Q11.f64[0] + v9 * 10.0 * (*(double *)(a1 + 336) - *(double *)(a1 + 424));
  _Q11.f64[0] = *(float64_t *)(a4 + 328);
  *(double *)(a4 + 440) = *(double *)(a4 + 320) + v9 * 10.0 * (*(double *)(a2 + 424) + *(double *)(a2 + 336));
  *(double *)(a4 + 448) = _Q11.f64[0] + v9 * 10.0 * (*(double *)(a2 + 344) + *(double *)(a2 + 432));
  _Q11.f64[0] = *(float64_t *)(a6 + 328);
  *(double *)(a6 + 440) = *(double *)(a6 + 320) + v9 * 10.0 * (*(double *)(a3 + 432) - *(double *)(a3 + 344));
  *(double *)(a6 + 448) = _Q11.f64[0] + v9 * 10.0 * (*(double *)(a3 + 336) - *(double *)(a3 + 424));
  _Q11.f64[0] = *(float64_t *)(a5 + 328);
  *(double *)(a5 + 440) = *(double *)(a5 + 320) + v9 * 10.0 * (*(double *)(a2 + 432) - *(double *)(a2 + 344));
  *(double *)(a5 + 448) = _Q11.f64[0] + v9 * 10.0 * (*(double *)(a2 + 336) - *(double *)(a2 + 424));
  v97 = v87 + v11 * v60.f64[0] - v81;
  *(float64x2_t *)(a1 + 456) = vmulq_n_f64(v36, v97);
  _Q11.f64[0] = *(float64_t *)(a2 + 344);
  *(double *)(a2 + 456) = *(double *)(a2 + 336) + v9 * 11.0 * (*(double *)(a1 + 440) + *(double *)(a1 + 352));
  *(double *)(a2 + 464) = _Q11.f64[0] + v9 * 11.0 * (*(double *)(a1 + 360) + *(double *)(a1 + 448));
  _Q11.f64[0] = *(float64_t *)(a3 + 344);
  *(double *)(a3 + 456) = *(double *)(a3 + 336) + v9 * 11.0 * (*(double *)(a1 + 448) - *(double *)(a1 + 360));
  *(double *)(a3 + 464) = _Q11.f64[0] + v9 * 11.0 * (*(double *)(a1 + 352) - *(double *)(a1 + 440));
  _Q11.f64[0] = *(float64_t *)(a4 + 344);
  *(double *)(a4 + 456) = *(double *)(a4 + 336) + v9 * 11.0 * (*(double *)(a2 + 440) + *(double *)(a2 + 352));
  *(double *)(a4 + 464) = _Q11.f64[0] + v9 * 11.0 * (*(double *)(a2 + 360) + *(double *)(a2 + 448));
  _Q11.f64[0] = *(float64_t *)(a6 + 344);
  *(double *)(a6 + 456) = *(double *)(a6 + 336) + v9 * 11.0 * (*(double *)(a3 + 448) - *(double *)(a3 + 360));
  *(double *)(a6 + 464) = _Q11.f64[0] + v9 * 11.0 * (*(double *)(a3 + 352) - *(double *)(a3 + 440));
  _Q11.f64[0] = *(float64_t *)(a5 + 344);
  *(double *)(a5 + 456) = *(double *)(a5 + 336) + v9 * 11.0 * (*(double *)(a2 + 448) - *(double *)(a2 + 360));
  *(double *)(a5 + 464) = _Q11.f64[0] + v9 * 11.0 * (*(double *)(a2 + 352) - *(double *)(a2 + 440));
  v98 = v93 + v11 * v97 - v87;
  *(float64x2_t *)(a1 + 472) = vmulq_n_f64(v17, v98);
  _Q11.f64[0] = *(float64_t *)(a2 + 360);
  *(double *)(a2 + 472) = *(double *)(a2 + 352) + v9 * 12.0 * (*(double *)(a1 + 456) + *(double *)(a1 + 368));
  *(double *)(a2 + 480) = _Q11.f64[0] + v9 * 12.0 * (*(double *)(a1 + 376) + *(double *)(a1 + 464));
  _Q11.f64[0] = *(float64_t *)(a3 + 360);
  *(double *)(a3 + 472) = *(double *)(a3 + 352) + v9 * 12.0 * (*(double *)(a1 + 464) - *(double *)(a1 + 376));
  *(double *)(a3 + 480) = _Q11.f64[0] + v9 * 12.0 * (*(double *)(a1 + 368) - *(double *)(a1 + 456));
  _Q11.f64[0] = *(float64_t *)(a4 + 360);
  *(double *)(a4 + 472) = *(double *)(a4 + 352) + v9 * 12.0 * (*(double *)(a2 + 456) + *(double *)(a2 + 368));
  *(double *)(a4 + 480) = _Q11.f64[0] + v9 * 12.0 * (*(double *)(a2 + 376) + *(double *)(a2 + 464));
  _Q11.f64[0] = *(float64_t *)(a6 + 360);
  *(double *)(a6 + 472) = *(double *)(a6 + 352) + v9 * 12.0 * (*(double *)(a3 + 464) - *(double *)(a3 + 376));
  *(double *)(a6 + 480) = _Q11.f64[0] + v9 * 12.0 * (*(double *)(a3 + 368) - *(double *)(a3 + 456));
  _Q11.f64[0] = *(float64_t *)(a5 + 360);
  *(double *)(a5 + 472) = *(double *)(a5 + 352) + v9 * 12.0 * (*(double *)(a2 + 464) - *(double *)(a2 + 376));
  *(double *)(a5 + 480) = _Q11.f64[0] + v9 * 12.0 * (*(double *)(a2 + 368) - *(double *)(a2 + 456));
  v99 = v48.f64[0] + v11 * v98 - v93;
  *(float64x2_t *)(a1 + 488) = vmulq_n_f64(v13, v99);
  _Q12.f64[0] = *(float64_t *)(a2 + 376);
  *(double *)(a2 + 488) = *(double *)(a2 + 368) + v9 * 13.0 * (v48.f64[0] + *(double *)(a1 + 472));
  *(double *)(a2 + 496) = _Q12.f64[0] + v9 * 13.0 * *(double *)(a1 + 480);
  _Q12.f64[0] = *(float64_t *)(a3 + 376);
  *(double *)(a3 + 488) = *(double *)(a3 + 368) + v9 * 13.0 * *(double *)(a1 + 480);
  *(double *)(a3 + 496) = _Q12.f64[0] + v9 * 13.0 * (v48.f64[0] - *(double *)(a1 + 472));
  _Q12.f64[0] = *(float64_t *)(a4 + 376);
  *(double *)(a4 + 488) = *(double *)(a4 + 368) + v9 * 13.0 * (*(double *)(a2 + 472) + *(double *)(a2 + 384));
  *(double *)(a4 + 496) = _Q12.f64[0] + v9 * 13.0 * *(double *)(a2 + 480);
  _Q12.f64[0] = *(float64_t *)(a6 + 376);
  *(double *)(a6 + 488) = *(double *)(a6 + 368) + v9 * 13.0 * *(double *)(a3 + 480);
  *(double *)(a6 + 496) = _Q12.f64[0] + v9 * 13.0 * (*(double *)(a3 + 384) - *(double *)(a3 + 472));
  *(_QWORD *)(a5 + 488) = *(_QWORD *)(a4 + 496);
  *(_QWORD *)(a5 + 496) = *(_QWORD *)(a6 + 488);
  v40.f64[0] = -(v48.f64[0] - (v11 + v11) * v99);
  *(double *)(a1 + 504) = 1.0 - (v48.f64[0] - (v11 + v11) * v99);
  *(double *)(a2 + 504) = *(double *)(a2 + 384) + v9 * 28.0 * *(double *)(a1 + 488);
  *(double *)(a3 + 504) = *(double *)(a3 + 384) + v9 * 28.0 * *(double *)(a1 + 496);
  *(double *)(a4 + 504) = *(double *)(a4 + 384) + v9 * 28.0 * *(double *)(a2 + 488);
  *(double *)(a6 + 504) = *(double *)(a6 + 384) + v9 * 28.0 * *(double *)(a3 + 496);
  *(double *)(a5 + 504) = *(double *)(a5 + 384) + v9 * 28.0 * *(double *)(a2 + 496);
  *(float64x2_t *)(a1 + 512) = vmlaq_n_f64(vmulq_laneq_f64(v12, v94, 1), v13, v94.f64[0]);
  *(double *)(a2 + 512) = v9 * 8.0 * *(double *)(a1 + 392);
  v100 = v9 * 8.0 * *(double *)(a1 + 400);
  *(double *)(a2 + 520) = v100;
  *(double *)(a3 + 512) = -v100;
  *(_QWORD *)(a3 + 520) = *(_QWORD *)(a2 + 512);
  v12.f64[0] = *(float64_t *)(a2 + 392);
  *(double *)(a4 + 512) = v9 * 8.0 * v12.f64[0];
  *(double *)(a4 + 520) = v9 * 8.0 * *(double *)(a2 + 400);
  *(double *)(a6 + 512) = -(v9 * 8.0 * v12.f64[0]);
  *(double *)(a6 + 520) = -*(double *)(a4 + 520);
  *(double *)(a5 + 512) = -*(double *)(a4 + 520);
  *(_QWORD *)(a5 + 520) = *(_QWORD *)(a4 + 512);
  v12.f64[0] = v11 + v96 + -1.0;
  *(float64x2_t *)(a1 + 528) = vmulq_n_f64(v94, v12.f64[0]);
  v94.f64[0] = *(float64_t *)(a2 + 400);
  *(double *)(a2 + 528) = *(double *)(a2 + 392) + v9 * 9.0 * (*(double *)(a1 + 512) + *(double *)(a1 + 408));
  *(double *)(a2 + 536) = v94.f64[0] + v9 * 9.0 * (*(double *)(a1 + 416) + *(double *)(a1 + 520));
  v94.f64[0] = *(float64_t *)(a3 + 400);
  *(double *)(a3 + 528) = *(double *)(a3 + 392) + v9 * 9.0 * (*(double *)(a1 + 520) - *(double *)(a1 + 416));
  *(double *)(a3 + 536) = v94.f64[0] + v9 * 9.0 * (*(double *)(a1 + 408) - *(double *)(a1 + 512));
  v94.f64[0] = *(float64_t *)(a4 + 400);
  *(double *)(a4 + 528) = *(double *)(a4 + 392) + v9 * 9.0 * (*(double *)(a2 + 512) + *(double *)(a2 + 408));
  *(double *)(a4 + 536) = v94.f64[0] + v9 * 9.0 * (*(double *)(a2 + 416) + *(double *)(a2 + 520));
  v94.f64[0] = *(float64_t *)(a6 + 400);
  *(double *)(a6 + 528) = *(double *)(a6 + 392) + v9 * 9.0 * (*(double *)(a3 + 520) - *(double *)(a3 + 416));
  *(double *)(a6 + 536) = v94.f64[0] + v9 * 9.0 * (*(double *)(a3 + 408) - *(double *)(a3 + 512));
  v94.f64[0] = *(float64_t *)(a5 + 400);
  *(double *)(a5 + 528) = *(double *)(a5 + 392) + v9 * 9.0 * (*(double *)(a2 + 520) - *(double *)(a2 + 416));
  *(double *)(a5 + 536) = v94.f64[0] + v9 * 9.0 * (*(double *)(a2 + 408) - *(double *)(a2 + 512));
  v12.f64[0] = v52.f64[0] + v11 * v12.f64[0] - v96;
  *(float64x2_t *)(a1 + 544) = vmulq_n_f64(v70, v12.f64[0]);
  v61.f64[0] = *(float64_t *)(a2 + 416);
  *(double *)(a2 + 544) = *(double *)(a2 + 408) + v9 * 10.0 * (*(double *)(a1 + 528) + *(double *)(a1 + 424));
  *(double *)(a2 + 552) = v61.f64[0] + v9 * 10.0 * (*(double *)(a1 + 432) + *(double *)(a1 + 536));
  v61.f64[0] = *(float64_t *)(a3 + 416);
  *(double *)(a3 + 544) = *(double *)(a3 + 408) + v9 * 10.0 * (*(double *)(a1 + 536) - *(double *)(a1 + 432));
  *(double *)(a3 + 552) = v61.f64[0] + v9 * 10.0 * (*(double *)(a1 + 424) - *(double *)(a1 + 528));
  v61.f64[0] = *(float64_t *)(a4 + 416);
  *(double *)(a4 + 544) = *(double *)(a4 + 408) + v9 * 10.0 * (*(double *)(a2 + 528) + *(double *)(a2 + 424));
  *(double *)(a4 + 552) = v61.f64[0] + v9 * 10.0 * (*(double *)(a2 + 432) + *(double *)(a2 + 536));
  v61.f64[0] = *(float64_t *)(a6 + 416);
  *(double *)(a6 + 544) = *(double *)(a6 + 408) + v9 * 10.0 * (*(double *)(a3 + 536) - *(double *)(a3 + 432));
  *(double *)(a6 + 552) = v61.f64[0] + v9 * 10.0 * (*(double *)(a3 + 424) - *(double *)(a3 + 528));
  v61.f64[0] = *(float64_t *)(a5 + 416);
  *(double *)(a5 + 544) = *(double *)(a5 + 408) + v9 * 10.0 * (*(double *)(a2 + 536) - *(double *)(a2 + 432));
  *(double *)(a5 + 552) = v61.f64[0] + v9 * 10.0 * (*(double *)(a2 + 424) - *(double *)(a2 + 528));
  v12.f64[0] = v60.f64[0] + v11 * v12.f64[0] - v52.f64[0];
  *(float64x2_t *)(a1 + 560) = vmulq_n_f64(v59, v12.f64[0]);
  v59.f64[0] = *(float64_t *)(a2 + 432);
  *(double *)(a2 + 560) = *(double *)(a2 + 424) + v9 * 11.0 * (*(double *)(a1 + 544) + *(double *)(a1 + 440));
  *(double *)(a2 + 568) = v59.f64[0] + v9 * 11.0 * (*(double *)(a1 + 448) + *(double *)(a1 + 552));
  v59.f64[0] = *(float64_t *)(a3 + 432);
  *(double *)(a3 + 560) = *(double *)(a3 + 424) + v9 * 11.0 * (*(double *)(a1 + 552) - *(double *)(a1 + 448));
  *(double *)(a3 + 568) = v59.f64[0] + v9 * 11.0 * (*(double *)(a1 + 440) - *(double *)(a1 + 544));
  v59.f64[0] = *(float64_t *)(a4 + 432);
  *(double *)(a4 + 560) = *(double *)(a4 + 424) + v9 * 11.0 * (*(double *)(a2 + 544) + *(double *)(a2 + 440));
  *(double *)(a4 + 568) = v59.f64[0] + v9 * 11.0 * (*(double *)(a2 + 448) + *(double *)(a2 + 552));
  v59.f64[0] = *(float64_t *)(a6 + 432);
  *(double *)(a6 + 560) = *(double *)(a6 + 424) + v9 * 11.0 * (*(double *)(a3 + 552) - *(double *)(a3 + 448));
  *(double *)(a6 + 568) = v59.f64[0] + v9 * 11.0 * (*(double *)(a3 + 440) - *(double *)(a3 + 544));
  v59.f64[0] = *(float64_t *)(a5 + 432);
  *(double *)(a5 + 560) = *(double *)(a5 + 424) + v9 * 11.0 * (*(double *)(a2 + 552) - *(double *)(a2 + 448));
  *(double *)(a5 + 568) = v59.f64[0] + v9 * 11.0 * (*(double *)(a2 + 440) - *(double *)(a2 + 544));
  v12.f64[0] = v97 + v11 * v12.f64[0] - v60.f64[0];
  *(float64x2_t *)(a1 + 576) = vmulq_n_f64(v51, v12.f64[0]);
  v101 = *(double *)(a2 + 448);
  *(double *)(a2 + 576) = *(double *)(a2 + 440) + v9 * 12.0 * (*(double *)(a1 + 560) + *(double *)(a1 + 456));
  *(double *)(a2 + 584) = v101 + v9 * 12.0 * (*(double *)(a1 + 464) + *(double *)(a1 + 568));
  v102 = *(double *)(a3 + 448);
  *(double *)(a3 + 576) = *(double *)(a3 + 440) + v9 * 12.0 * (*(double *)(a1 + 568) - *(double *)(a1 + 464));
  *(double *)(a3 + 584) = v102 + v9 * 12.0 * (*(double *)(a1 + 456) - *(double *)(a1 + 560));
  v103 = *(double *)(a4 + 448);
  *(double *)(a4 + 576) = *(double *)(a4 + 440) + v9 * 12.0 * (*(double *)(a2 + 560) + *(double *)(a2 + 456));
  *(double *)(a4 + 584) = v103 + v9 * 12.0 * (*(double *)(a2 + 464) + *(double *)(a2 + 568));
  v104 = *(double *)(a6 + 448);
  *(double *)(a6 + 576) = *(double *)(a6 + 440) + v9 * 12.0 * (*(double *)(a3 + 568) - *(double *)(a3 + 464));
  *(double *)(a6 + 584) = v104 + v9 * 12.0 * (*(double *)(a3 + 456) - *(double *)(a3 + 560));
  v105 = *(double *)(a5 + 448);
  *(double *)(a5 + 576) = *(double *)(a5 + 440) + v9 * 12.0 * (*(double *)(a2 + 568) - *(double *)(a2 + 464));
  *(double *)(a5 + 584) = v105 + v9 * 12.0 * (*(double *)(a2 + 456) - *(double *)(a2 + 560));
  _Q7.f64[0] = v98 + v11 * v12.f64[0] - v97;
  *(float64x2_t *)(a1 + 592) = vmulq_n_f64(v36, _Q7.f64[0]);
  v12.f64[0] = *(float64_t *)(a2 + 464);
  *(double *)(a2 + 592) = *(double *)(a2 + 456) + v9 * 13.0 * (*(double *)(a1 + 576) + *(double *)(a1 + 472));
  *(double *)(a2 + 600) = v12.f64[0] + v9 * 13.0 * (*(double *)(a1 + 480) + *(double *)(a1 + 584));
  v12.f64[0] = *(float64_t *)(a3 + 464);
  *(double *)(a3 + 592) = *(double *)(a3 + 456) + v9 * 13.0 * (*(double *)(a1 + 584) - *(double *)(a1 + 480));
  *(double *)(a3 + 600) = v12.f64[0] + v9 * 13.0 * (*(double *)(a1 + 472) - *(double *)(a1 + 576));
  v12.f64[0] = *(float64_t *)(a4 + 464);
  *(double *)(a4 + 592) = *(double *)(a4 + 456) + v9 * 13.0 * (*(double *)(a2 + 576) + *(double *)(a2 + 472));
  *(double *)(a4 + 600) = v12.f64[0] + v9 * 13.0 * (*(double *)(a2 + 480) + *(double *)(a2 + 584));
  v12.f64[0] = *(float64_t *)(a6 + 464);
  *(double *)(a6 + 592) = *(double *)(a6 + 456) + v9 * 13.0 * (*(double *)(a3 + 584) - *(double *)(a3 + 480));
  *(double *)(a6 + 600) = v12.f64[0] + v9 * 13.0 * (*(double *)(a3 + 472) - *(double *)(a3 + 576));
  v12.f64[0] = *(float64_t *)(a5 + 464);
  *(double *)(a5 + 592) = *(double *)(a5 + 456) + v9 * 13.0 * (*(double *)(a2 + 584) - *(double *)(a2 + 480));
  *(double *)(a5 + 600) = v12.f64[0] + v9 * 13.0 * (*(double *)(a2 + 472) - *(double *)(a2 + 576));
  v36.f64[0] = v99 + v11 * _Q7.f64[0] - v98;
  *(float64x2_t *)(a1 + 608) = vmulq_n_f64(v17, v36.f64[0]);
  v12.f64[0] = *(float64_t *)(a2 + 480);
  *(double *)(a2 + 608) = *(double *)(a2 + 472) + v9 * 14.0 * (*(double *)(a1 + 592) + *(double *)(a1 + 488));
  *(double *)(a2 + 616) = v12.f64[0] + v9 * 14.0 * (*(double *)(a1 + 496) + *(double *)(a1 + 600));
  v12.f64[0] = *(float64_t *)(a3 + 480);
  *(double *)(a3 + 608) = *(double *)(a3 + 472) + v9 * 14.0 * (*(double *)(a1 + 600) - *(double *)(a1 + 496));
  *(double *)(a3 + 616) = v12.f64[0] + v9 * 14.0 * (*(double *)(a1 + 488) - *(double *)(a1 + 592));
  v12.f64[0] = *(float64_t *)(a4 + 480);
  *(double *)(a4 + 608) = *(double *)(a4 + 472) + v9 * 14.0 * (*(double *)(a2 + 592) + *(double *)(a2 + 488));
  *(double *)(a4 + 616) = v12.f64[0] + v9 * 14.0 * (*(double *)(a2 + 496) + *(double *)(a2 + 600));
  v12.f64[0] = *(float64_t *)(a6 + 480);
  *(double *)(a6 + 608) = *(double *)(a6 + 472) + v9 * 14.0 * (*(double *)(a3 + 600) - *(double *)(a3 + 496));
  *(double *)(a6 + 616) = v12.f64[0] + v9 * 14.0 * (*(double *)(a3 + 488) - *(double *)(a3 + 592));
  v12.f64[0] = *(float64_t *)(a5 + 480);
  *(double *)(a5 + 608) = *(double *)(a5 + 472) + v9 * 14.0 * (*(double *)(a2 + 600) - *(double *)(a2 + 496));
  *(double *)(a5 + 616) = v12.f64[0] + v9 * 14.0 * (*(double *)(a2 + 488) - *(double *)(a2 + 592));
  v106 = v11 * v36.f64[0] - (v48.f64[0] - (v11 + v11) * v99) - v99;
  *(float64x2_t *)(a1 + 624) = vmulq_n_f64(v13, v106);
  _Q7.f64[0] = *(float64_t *)(a2 + 496);
  *(double *)(a2 + 624) = *(double *)(a2 + 488) + v9 * 15.0 * (v40.f64[0] + *(double *)(a1 + 608));
  *(double *)(a2 + 632) = _Q7.f64[0] + v9 * 15.0 * *(double *)(a1 + 616);
  _Q7.f64[0] = *(float64_t *)(a3 + 496);
  *(double *)(a3 + 624) = *(double *)(a3 + 488) + v9 * 15.0 * *(double *)(a1 + 616);
  *(double *)(a3 + 632) = _Q7.f64[0] + v9 * 15.0 * (v40.f64[0] - *(double *)(a1 + 608));
  _Q7.f64[0] = *(float64_t *)(a4 + 496);
  *(double *)(a4 + 624) = *(double *)(a4 + 488) + v9 * 15.0 * (*(double *)(a2 + 608) + *(double *)(a2 + 504));
  *(double *)(a4 + 632) = _Q7.f64[0] + v9 * 15.0 * *(double *)(a2 + 616);
  _Q7.f64[0] = *(float64_t *)(a6 + 496);
  *(double *)(a6 + 624) = *(double *)(a6 + 488) + v9 * 15.0 * *(double *)(a3 + 616);
  *(double *)(a6 + 632) = _Q7.f64[0] + v9 * 15.0 * (*(double *)(a3 + 504) - *(double *)(a3 + 608));
  *(_QWORD *)(a5 + 624) = *(_QWORD *)(a4 + 632);
  *(_QWORD *)(a5 + 632) = *(_QWORD *)(a6 + 624);
  *(double *)(a1 + 640) = -1.0 - (v40.f64[0] - v28 * v106);
  v107 = v9 * 32.0;
  *(double *)(a2 + 640) = *(double *)(a2 + 504) + v107 * *(double *)(a1 + 624);
  *(double *)(a3 + 640) = *(double *)(a3 + 504) + v107 * *(double *)(a1 + 632);
  *(double *)(a4 + 640) = *(double *)(a4 + 504) + v107 * *(double *)(a2 + 624);
  *(double *)(a6 + 640) = *(double *)(a6 + 504) + v107 * *(double *)(a3 + 632);
  result = *(double *)(a5 + 504) + v107 * *(double *)(a2 + 632);
  *(double *)(a5 + 640) = result;
  return result;
}

_OWORD *dgebpAlignedC_8M4N_hurricane(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  _OWORD *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t *v41;

  v7 = a3;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[2];
    v20 = a3[3];
    v16 = (float64x2_t *)((char *)a3 + v8);
    v22 = *v16;
    v23 = v16[1];
    v24 = v16[2];
    v25 = v16[3];
    v21 = (float64x2_t *)((char *)v16 + v8);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v21[3];
    v26 = (float64x2_t *)((char *)v21 + v8);
    v31 = *v26;
    v32 = v26[1];
    v33 = v26[2];
    v34 = v26[3];
    v36 = *a2;
    v37 = a2[1];
    v35 = a2 + 2;
    do
    {
      v17 = vmlaq_n_f64(v17, v10, v36.f64[0]);
      v22 = vmlaq_laneq_f64(v22, v10, v36, 1);
      v27 = vmlaq_n_f64(v27, v10, v37.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v10, v37, 1);
      v18 = vmlaq_n_f64(v18, v11, v36.f64[0]);
      v23 = vmlaq_laneq_f64(v23, v11, v36, 1);
      v28 = vmlaq_n_f64(v28, v11, v37.f64[0]);
      v32 = vmlaq_laneq_f64(v32, v11, v37, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v38 = result + 2;
      v19 = vmlaq_n_f64(v19, v13, v36.f64[0]);
      v24 = vmlaq_laneq_f64(v24, v13, v36, 1);
      v29 = vmlaq_n_f64(v29, v13, v37.f64[0]);
      v33 = vmlaq_laneq_f64(v33, v13, v37, 1);
      v20 = vmlaq_n_f64(v20, v14, v36.f64[0]);
      v25 = vmlaq_laneq_f64(v25, v14, v36, 1);
      v30 = vmlaq_n_f64(v30, v14, v37.f64[0]);
      v34 = vmlaq_laneq_f64(v34, v14, v37, 1);
      v13 = *(float64x2_t *)v38;
      v14 = *((float64x2_t *)v38 + 1);
      result = v38 + 2;
      v36 = *v35;
      v37 = v35[1];
      v35 += 2;
      --v15;
    }
    while (v15);
    v39 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v17;
    v7[1] = v18;
    v7[2] = v19;
    v7[3] = v20;
    v7 += 4;
    *v39 = v22;
    v39[1] = v23;
    v39[2] = v24;
    v39[3] = v25;
    v40 = (float64x2_t *)((char *)v39 + v8);
    *v40 = v27;
    v40[1] = v28;
    v40[2] = v29;
    v40[3] = v30;
    v41 = (float64x2_t *)((char *)v40 + v8);
    *v41 = v31;
    v41[1] = v32;
    v41[2] = v33;
    v41[3] = v34;
    a3 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t Accelerate_AR_dorg2r(int *a1, int *a2, unsigned int *a3, uint64_t a4, __CLPK_integer *a5, uint64_t a6, double *a7, int *a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  double *v27;
  size_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  double *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double da;
  __CLPK_integer v48;
  int n;

  da = 0.0;
  v8 = *a5;
  *a8 = 0;
  v9 = *a1;
  if ((v9 & 0x80000000) != 0)
  {
    v11 = 1;
    v12 = -1;
    goto LABEL_12;
  }
  v10 = *a2;
  v11 = 2;
  v12 = -2;
  if (*a2 < 0)
    goto LABEL_12;
  if (v10 > (int)v9)
    goto LABEL_12;
  v13 = *a3;
  v11 = 3;
  v12 = -3;
  if ((v13 & 0x80000000) != 0 || v10 < (int)v13)
    goto LABEL_12;
  if (v9 <= 1)
    v14 = 1;
  else
    v14 = *a1;
  if (*a5 < v14)
  {
    v11 = 5;
    v12 = -5;
LABEL_12:
    *a8 = v12;
    n = v11;
    xerbla_();
    return 0;
  }
  v43 = v8;
  if (v10)
  {
    v16 = ~(_DWORD)v8;
    v17 = a4 + 8 * ~(_DWORD)v43;
    v42 = ~(_DWORD)v43;
    v46 = v17;
    if (v10 <= v13)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v39 = a6;
      v18 = v43 * (v13 + 1) + 1;
      v19 = v10 - v13;
      v20 = (v13 + 1) * (v43 + 1);
      v44 = a4;
      v21 = a4 + 8 * v16;
      do
      {
        bzero((void *)(v21 + 8 * v18), 8 * v9);
        v17 = v46;
        *(_QWORD *)(v46 + 8 * v20) = 0x3FF0000000000000;
        v20 += v43 + 1;
        v18 += v43;
        --v19;
      }
      while (v19);
      a4 = v44;
      a6 = v39;
    }
    v48 = v9;
    if ((int)v13 >= 1)
    {
      v22 = 0;
      v45 = a6 - 8;
      v36 = a4 + 8 * v42;
      v23 = -(int)v13;
      v24 = v13 + v43 * v13;
      v25 = v43 + v43 * v13;
      v26 = 8 * v13;
      v27 = (double *)(8 * (v13 + v13 * v43) + 8 * v42 + a4 + 8);
      v28 = 8 * (v13 - 1);
      v35 = v43 * v13;
      v29 = v43 * v13;
      do
      {
        v30 = v25;
        v31 = *a2;
        v32 = *a1;
        if (v13 < v31)
        {
          v33 = (double *)(v17 + 8 * v24);
          *v33 = 1.0;
          n = v23 + v32 + 1;
          v48 = v23 + v31;
          Accelerate_AR_dlarf((uint64_t)"Left", &n, &v48, v33, (int *)&c__1_16, (double *)(v45 + v26), (__CLPK_doublereal *)(v17 + 8 * (v13 + v30)), a5, a7);
          v17 = v46;
          v32 = *a1;
        }
        if (v13 < v32)
        {
          n = v32 + v23;
          da = -*(double *)(v45 + 8 * v13);
          dscal_(&n, &da, v27, (int *)&c__1_16);
          v17 = v46;
        }
        *(double *)(v17 + 8 * (v13 + v29)) = 1.0 - *(double *)(v45 + 8 * v13);
        v34 = v13 - 1;
        n = v13 - 1;
        if (v13 >= 2)
        {
          bzero((void *)(v36 + 8 * (v35 + v22 + 1)), v28);
          v17 = v46;
        }
        ++v23;
        v24 += v42;
        v22 -= v43;
        v29 -= v43;
        v26 -= 8;
        v25 = v30 - v43;
        v27 += ~v43;
        v28 -= 8;
        --v13;
      }
      while (v34);
    }
  }
  return 0;
}

#error "23D99B708: call analysis failed (funcsize=235)"

uint64_t strmm_noPack_RUNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, __n128 a11, __n128 a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL i;
  __n128 *v21;
  float *v22;
  float32x2_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float v27;
  float *v28;
  float32x2_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  BOOL v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float v66;
  float32x2_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  uint64_t v70;
  BOOL j;
  unint64_t *v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t *v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t *v106;
  float32x2_t *v107;
  uint64_t v108;
  float32x2_t *v109;
  float32x2_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t *v118;
  float32x2_t v119;
  uint64_t v120;
  BOOL k;
  unsigned __int32 *v122;
  float *v123;
  float32x2_t *v124;
  float32x4_t *v125;
  float32x4_t *v126;
  uint64_t v127;
  float v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float32x4_t v132;
  float *v133;
  float32x4_t v134;
  float *v135;
  unsigned __int32 *v136;
  unsigned __int32 *v137;
  unsigned __int32 *v138;
  float *v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __int32 *v150;
  float32x2_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  __int32 *v155;
  float32x2_t *v156;
  float32x2_t v157;
  __int32 *v158;
  float32x2_t v159;
  float *v160;
  float v161;
  float32x2_t v162;
  __int32 *v163;
  float32x2_t v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_21;
  v18 = result - 3;
  do
  {
    v19 = a2;
    for (i = __OFSUB__(a2, 3); v19 > 3; i = __OFSUB__(v19, 3))
    {
      v19 -= 4;
      v21 = (__n128 *)(a5 + v19 * v15 + 4 * v17);
      v22 = (float *)(a3 + v19 * v16 + 4 * v19);
      v23 = (float32x2_t *)&v22[(unint64_t)v16 / 4];
      v24 = (float32x4_t *)&v22[(unint64_t)v16 / 2];
      v25 = (float32x4_t *)&v22[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
      v26 = v19;
      v27 = *v22;
      v28 = (float *)(a3 + v19 * v16);
      v29 = *v23;
      v30 = (float *)v23 - v19;
      v31 = *v24;
      v32 = &v24->f32[-v19];
      v33 = *v25;
      v34 = &v25->f32[-v19];
      a11 = *v21;
      v35 = (__n128 *)((char *)v21 + v15);
      a12 = *v35;
      v36 = (float32x4_t *)((char *)v35 + v15);
      a13 = *v36;
      v37 = (float32x4_t *)((char *)v36 + v15);
      a14 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v15 - v19 * v15 + -4 * v15);
      v39 = vmulq_n_f32((float32x4_t)a11, v27);
      v40 = vaddq_f32(vmulq_n_f32((float32x4_t)a11, v29.f32[0]), vmulq_lane_f32((float32x4_t)a12, v29, 1));
      v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v31.f32[0]), a13, v31, 2), vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v31.f32, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v33.f32[0]), a13, v33, 2), vmlaq_laneq_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v33.f32, 1), a14, v33, 3));
      if ((v19 & 1) != 0)
      {
        v43 = *v38;
        v38 = (float32x4_t *)((char *)v38 + v15);
        v44 = *v28++;
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v39 = vmlaq_n_f32(v39, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v26 = v19 - 1;
      }
      if (v26)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v38;
          v52 = (float32x4_t *)((char *)v38 + v15);
          v54 = *v52;
          v38 = (float32x4_t *)((char *)v52 + v15);
          a11.n128_u64[0] = *(_QWORD *)v28;
          v28 += 2;
          a12.n128_u64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v39 = vmlaq_n_f32(v39, v53, a11.n128_f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.n128_f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, (float32x2_t)a11.n128_u64[0], 1);
          v49 = vmlaq_lane_f32(v49, v54, (float32x2_t)a12.n128_u64[0], 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v55 = v26 <= 2;
          v26 -= 2;
        }
        while (!v55);
        v39 = vaddq_f32(v39, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v39, a7);
      *v38 = v14;
      v56 = (float32x4_t *)((char *)v38 + v15);
      *v56 = vmulq_n_f32(v40, a7);
      v57 = (float32x4_t *)((char *)v56 + v15);
      *v57 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v42, a7);
    }
    v58 = a2 & 3;
    if (!i && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + 4 * v17);
      v60 = (float32x2_t *)(a3 + (v19 - 1) * v16);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          v61 = *v60;
          v63 = *v59;
          v62 = (float32x4_t *)((char *)v59 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *(__n128 *)v64;
          v66 = v60[1].f32[0];
          v60 = (float32x2_t *)((char *)v60 - v16);
          *v64 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v61.f32[0]), vmulq_lane_f32(v65, v61, 1)), vmulq_n_f32(*v64, v66)), a7);
          v59 = (float32x4_t *)((char *)v64 - 2 * v15);
        }
        v67 = *v60;
        v69 = *v59;
        v68 = (float32x4_t *)((char *)v59 + v15);
        a11 = *(__n128 *)v68;
        v60 = (float32x2_t *)((char *)v60 - v16);
        *v68 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v69, v67.f32[0]), vmulq_lane_f32(*v68, v67, 1)), a7);
        v59 = (float32x4_t *)((char *)v68 - v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v59, v60->f32[0]), a7);
      *v59 = v14;
    }
    v17 += 4;
    v55 = v18 <= 4;
    v18 -= 4;
  }
  while (!v55);
  v55 = v18 <= -3;
  result = v18 + 3;
  if (!v55)
  {
LABEL_21:
    if (result > 1)
    {
      v70 = a2;
      for (j = __OFSUB__(a2, 3); v70 > 3; j = __OFSUB__(v70, 3))
      {
        v70 -= 4;
        v72 = (unint64_t *)(a5 + v70 * v15 + 4 * v17);
        v73 = (float *)(a3 + v70 * v16 + 4 * v70);
        v74 = (float32x2_t *)&v73[(unint64_t)v16 / 4];
        v75 = (float32x4_t *)&v73[(unint64_t)v16 / 2];
        v76 = (float32x4_t *)&v73[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v77 = v70;
        v78 = *v73;
        v79 = (float *)(a3 + v70 * v16);
        v80 = *v74;
        v81 = (float *)v74 - v70;
        v82 = *v75;
        v83 = &v75->f32[-v70];
        v84 = *v76;
        v85 = &v76->f32[-v70];
        a11.n128_u64[0] = *v72;
        v86 = (unint64_t *)((char *)v72 + v15);
        a12.n128_u64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v15);
        a13.i64[0] = *v87;
        v88 = (unint64_t *)((char *)v87 + v15);
        a14.i64[0] = *v88;
        v89 = (float32x2_t *)((char *)v88 + v15 - v70 * v15 + -4 * v15);
        v90 = vmul_n_f32((float32x2_t)a11.n128_u64[0], v78);
        v91 = vadd_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v80.f32[0]), vmul_lane_f32((float32x2_t)a12.n128_u64[0], v80, 1));
        v92 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v82.f32, 1));
        v93 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v84.f32[0]), *(float32x2_t *)a13.f32, v84, 2), vmla_laneq_f32(vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v84.f32, 1), *(float32x2_t *)a14.f32, v84, 3));
        if ((v70 & 1) != 0)
        {
          v94 = *v89;
          v89 = (float32x2_t *)((char *)v89 + v15);
          v95 = *v79++;
          v96 = *v81++;
          v97 = *v83++;
          v98 = *v85++;
          v90 = vmla_n_f32(v90, v94, v95);
          v91 = vmla_n_f32(v91, v94, v96);
          v92 = vmla_n_f32(v92, v94, v97);
          v93 = vmla_n_f32(v93, v94, v98);
          v77 = v70 - 1;
        }
        if (v77)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            v104 = *v89;
            v103 = (float32x2_t *)((char *)v89 + v15);
            v105 = *v103;
            v89 = (float32x2_t *)((char *)v103 + v15);
            a11.n128_u64[0] = *(_QWORD *)v79;
            v79 += 2;
            a12.n128_u64[0] = *(_QWORD *)v81;
            v81 += 2;
            a13.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            a14.i64[0] = *(_QWORD *)v85;
            v85 += 2;
            v90 = vmla_n_f32(v90, v104, a11.n128_f32[0]);
            v91 = vmla_n_f32(v91, v104, a12.n128_f32[0]);
            v92 = vmla_n_f32(v92, v104, a13.f32[0]);
            v93 = vmla_n_f32(v93, v104, a14.f32[0]);
            v99 = vmla_lane_f32(v99, v105, (float32x2_t)a11.n128_u64[0], 1);
            v100 = vmla_lane_f32(v100, v105, (float32x2_t)a12.n128_u64[0], 1);
            v101 = vmla_lane_f32(v101, v105, *(float32x2_t *)a13.f32, 1);
            v102 = vmla_lane_f32(v102, v105, *(float32x2_t *)a14.f32, 1);
            v55 = v77 <= 2;
            v77 -= 2;
          }
          while (!v55);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
          v92 = vadd_f32(v92, v101);
          v93 = vadd_f32(v93, v102);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v90, a7);
        *v89 = *(float32x2_t *)v14.f32;
        v106 = (float32x2_t *)((char *)v89 + v15);
        *v106 = vmul_n_f32(v91, a7);
        v107 = (float32x2_t *)((char *)v106 + v15);
        *v107 = vmul_n_f32(v92, a7);
        *(float32x2_t *)((char *)v107 + v15) = vmul_n_f32(v93, a7);
      }
      v108 = a2 & 3;
      if (!j && v108 != 0)
      {
        v109 = (float32x2_t *)(a5 + 4 * v17);
        v110 = (float32x2_t *)(a3 + (v70 - 1) * v16);
        if (v108 != 1)
        {
          if (v108 != 2)
          {
            v111 = *v110;
            v113 = *v109;
            v112 = (float32x2_t *)((char *)v109 + v15);
            v115 = *v112;
            v114 = (float32x2_t *)((char *)v112 + v15);
            a12.n128_u64[0] = (unint64_t)*v114;
            v116 = v110[1].f32[0];
            v110 = (float32x2_t *)((char *)v110 - v16);
            *v114 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v113, v111.f32[0]), vmul_lane_f32(v115, v111, 1)), vmul_n_f32(*v114, v116)), a7);
            v109 = &v114[v15 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v117 = *v110;
          v119 = *v109;
          v118 = (float32x2_t *)((char *)v109 + v15);
          a11.n128_u64[0] = (unint64_t)*v118;
          v110 = (float32x2_t *)((char *)v110 - v16);
          *v118 = vmul_n_f32(vadd_f32(vmul_n_f32(v119, v117.f32[0]), vmul_lane_f32(*v118, v117, 1)), a7);
          v109 = (float32x2_t *)((char *)v118 - v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v109, v110->f32[0]), a7);
        *v109 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v120 = a2;
      for (k = __OFSUB__(a2, 3); v120 > 3; k = __OFSUB__(v120, 3))
      {
        v120 -= 4;
        v122 = (unsigned __int32 *)(a5 + v120 * v15 + 4 * v17);
        v123 = (float *)(a3 + v120 * v16 + 4 * v120);
        v124 = (float32x2_t *)&v123[(unint64_t)v16 / 4];
        v125 = (float32x4_t *)&v123[(unint64_t)v16 / 2];
        v126 = (float32x4_t *)&v123[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v127 = v120;
        v128 = *v123;
        v129 = (float *)(a3 + v120 * v16);
        v130 = *v124;
        v131 = (float *)v124 - v120;
        v132 = *v125;
        v133 = &v125->f32[-v120];
        v134 = *v126;
        v135 = &v126->f32[-v120];
        a11.n128_u32[0] = *v122;
        v136 = &v122[(unint64_t)v15 / 4];
        a12.n128_u32[0] = *v136;
        v137 = &v136[(unint64_t)v15 / 4];
        a13.i32[0] = *v137;
        v138 = &v137[(unint64_t)v15 / 4];
        a14.i32[0] = *v138;
        v139 = (float *)((char *)&v138[(unint64_t)v15 / 4] - v120 * v15 + -4 * v15);
        a11.n128_u64[0] = (unint64_t)vtrn1_s32((int32x2_t)a11.n128_u64[0], (int32x2_t)a12.n128_u64[0]);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        a11.n128_u64[1] = a13.i64[0];
        v132.i32[3] = 0;
        v14.f32[0] = v128 * a11.n128_f32[0];
        v140 = vmul_f32(v130, (float32x2_t)a11.n128_u64[0]);
        v141 = vmulq_f32(v132, (float32x4_t)a11);
        v142 = vmulq_f32(v134, (float32x4_t)a11);
        v143 = (float32x2_t)vpaddq_f32(v141, v141).u64[0];
        v144 = (float32x2_t)vpaddq_f32(v142, v142).u64[0];
        if ((v120 & 1) != 0)
        {
          v145 = *v139;
          v139 = (float *)((char *)v139 + v15);
          v146 = *v129++;
          v147 = *v131++;
          v148 = *v133++;
          v149 = *v135++;
          v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v145 * v146);
          v140.f32[0] = vaddv_f32(v140) + (float)(v145 * v147);
          v143.f32[0] = vaddv_f32(v143) + (float)(v145 * v148);
          v144.f32[0] = vaddv_f32(v144) + (float)(v145 * v149);
          v127 = v120 - 1;
        }
        if (v127)
        {
          do
          {
            v151.f32[0] = *v139;
            v150 = (__int32 *)&v139[(unint64_t)v15 / 4];
            v151.i32[1] = *v150;
            v139 = (float *)&v150[(unint64_t)v15 / 4];
            a11.n128_u64[0] = *(_QWORD *)v129;
            v129 += 2;
            a12.n128_u64[0] = *(_QWORD *)v131;
            v131 += 2;
            a13.i64[0] = *(_QWORD *)v133;
            v133 += 2;
            a14.i64[0] = *(_QWORD *)v135;
            v135 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v151, (float32x2_t)a11.n128_u64[0]);
            v140 = vmla_f32(v140, v151, (float32x2_t)a12.n128_u64[0]);
            v143 = vmla_f32(v143, v151, *(float32x2_t *)a13.f32);
            v144 = vmla_f32(v144, v151, *(float32x2_t *)a14.f32);
            v55 = v127 <= 2;
            v127 -= 2;
          }
          while (!v55);
        }
        *v139 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v152 = &v139[(unint64_t)v15 / 4];
        *v152 = vaddv_f32(v140) * a7;
        v153 = &v152[(unint64_t)v15 / 4];
        *v153 = vaddv_f32(v143) * a7;
        v153[(unint64_t)v15 / 4] = vaddv_f32(v144) * a7;
      }
      v154 = a2 & 3;
      if (!k && v154 != 0)
      {
        v155 = (__int32 *)(a5 + 4 * v17);
        v156 = (float32x2_t *)(a3 + (v120 - 1) * v16);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v157 = *v156;
            v159.i32[0] = *v155;
            v158 = &v155[(unint64_t)v15 / 4];
            v159.i32[1] = *v158;
            v160 = (float *)&v158[(unint64_t)v15 / 4];
            v161 = v156[1].f32[0];
            v156 = (float32x2_t *)((char *)v156 - v16);
            *v160 = (float)(vaddv_f32(vmul_f32(v159, v157)) + (float)(v161 * *v160)) * a7;
            v155 = (__int32 *)&v160[v15 / 0xFFFFFFFFFFFFFFFELL];
          }
          v162 = *v156;
          v164.i32[0] = *v155;
          v163 = &v155[(unint64_t)v15 / 4];
          v164.i32[1] = *v163;
          v156 = (float32x2_t *)((char *)v156 - v16);
          *(float *)v163 = vaddv_f32(vmul_f32(v164, v162)) * a7;
          v155 = &v163[v15 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v155 = (float)(*(float *)v155 * v156->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RUNU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL i;
  float32x4_t *v22;
  uint64_t v23;
  float *v24;
  float32x2_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x2_t *v28;
  float v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  float32x4_t *v60;
  float *v61;
  float32x2_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  uint64_t v69;
  BOOL j;
  float32x2_t *v71;
  uint64_t v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  uint64_t v76;
  float32x2_t *v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  unint64_t *v84;
  float32x2_t v85;
  unint64_t *v86;
  unint64_t *v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t v112;
  float32x2_t *v113;
  float32x2_t v114;
  float32x2_t *v115;
  float32x2_t v116;
  uint64_t v117;
  BOOL k;
  __int32 *v119;
  uint64_t v120;
  float *v121;
  float32x2_t *v122;
  float32x4_t *v123;
  uint64_t v124;
  float *v125;
  float v126;
  float *v127;
  float32x2_t v128;
  float *v129;
  float32x4_t v130;
  float *v131;
  unsigned __int32 *v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  float *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  __int32 *v145;
  float32x2_t v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  float32x2_t *v152;
  float32x2_t v153;
  __int32 *v154;
  float32x2_t v155;
  float *v156;
  float *v157;
  float v158;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_21;
  v19 = result - 3;
  do
  {
    v20 = a2;
    for (i = __OFSUB__(a2, 3); v20 > 3; i = __OFSUB__(v20, 3))
    {
      v20 -= 4;
      v22 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v23 = a3 + v20 * v17 + 4 * v20;
      v24 = (float *)(v23 + v17);
      v25 = (float32x2_t *)(v23 + 2 * v17);
      v26 = (float32x4_t *)(v23 + v17 + 2 * v17);
      v27 = v20;
      v28 = (float32x2_t *)(a3 + v20 * v17);
      v29 = *v24;
      v30 = &v24[-v20];
      v31 = *v25;
      v32 = (float *)v25 - v20;
      v33 = *v26;
      v34 = &v26->f32[-v20];
      v36 = *v22;
      v35 = (float32x4_t *)((char *)v22 + v16);
      a12 = *v35;
      v37 = (float32x4_t *)((char *)v35 + v16);
      a13 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v16);
      a14 = *v38;
      v39 = (float32x4_t *)((char *)v38 + v16 - v20 * v16 + -4 * v16);
      v40 = vmlaq_n_f32(a12, v36, v29);
      v41 = vaddq_f32(vmlaq_n_f32(a13, v36, v31.f32[0]), vmulq_lane_f32(a12, v31, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32(a14, v36, v33.f32[0]), a13, v33, 2), vmulq_lane_f32(a12, *(float32x2_t *)v33.f32, 1));
      if ((v20 & 1) != 0)
      {
        v43 = *v39;
        v39 = (float32x4_t *)((char *)v39 + v16);
        v44 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v36 = vmlaq_n_f32(v36, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v27 = v20 - 1;
      }
      if (v27)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v39;
          v52 = (float32x4_t *)((char *)v39 + v16);
          v54 = *v52;
          v39 = (float32x4_t *)((char *)v52 + v16);
          v55 = *v28++;
          a12.i64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v36 = vmlaq_n_f32(v36, v53, v55.f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, v55, 1);
          v49 = vmlaq_lane_f32(v49, v54, *(float32x2_t *)a12.f32, 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v56 = v27 <= 2;
          v27 -= 2;
        }
        while (!v56);
        v36 = vaddq_f32(v36, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v36, a7);
      v15 = vmulq_n_f32(v40, a7);
      *v39 = v14;
      v57 = (float32x4_t *)((char *)v39 + v16);
      *v57 = v15;
      v58 = (float32x4_t *)((char *)v57 + v16);
      *v58 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v58 + v16) = vmulq_n_f32(v42, a7);
    }
    v59 = a2 & 3;
    if (!i && v59 != 0)
    {
      v60 = (float32x4_t *)(a5 + 4 * v18);
      v61 = (float *)(a3 + (v20 - 1) * v17);
      if (v59 != 1)
      {
        if (v59 != 2)
        {
          v62 = *(float32x2_t *)v61;
          v64 = *v60;
          v63 = (float32x4_t *)((char *)v60 + v16);
          v66 = *v63;
          v65 = (float32x4_t *)((char *)v63 + v16);
          v61 = (float *)((char *)v61 - v17);
          a12 = vmlaq_n_f32(*v65, v64, v62.f32[0]);
          *v65 = vmulq_n_f32(vaddq_f32(vmulq_lane_f32(v66, v62, 1), a12), a7);
          v60 = (float32x4_t *)((char *)v65 - 2 * v16);
        }
        v68 = *v60;
        v67 = (float32x4_t *)((char *)v60 + v16);
        *v67 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v68, *v61), *v67), a7);
        v60 = (float32x4_t *)((char *)v67 - v16);
      }
      v14 = vmulq_n_f32(*v60, a7);
      *v60 = v14;
    }
    v18 += 4;
    v56 = v19 <= 4;
    v19 -= 4;
  }
  while (!v56);
  v56 = v19 <= -3;
  result = v19 + 3;
  if (!v56)
  {
LABEL_21:
    if (result > 1)
    {
      v69 = a2;
      for (j = __OFSUB__(a2, 3); v69 > 3; j = __OFSUB__(v69, 3))
      {
        v69 -= 4;
        v71 = (float32x2_t *)(a5 + v69 * v16 + 4 * v18);
        v72 = a3 + v69 * v17 + 4 * v69;
        v73 = (float *)(v72 + v17);
        v74 = (float32x2_t *)(v72 + 2 * v17);
        v75 = (float32x4_t *)(v72 + v17 + 2 * v17);
        v76 = v69;
        v77 = (float32x2_t *)(a3 + v69 * v17);
        v78 = *v73;
        v79 = &v73[-v69];
        v80 = *v74;
        v81 = (float *)v74 - v69;
        v82 = *v75;
        v83 = &v75->f32[-v69];
        v85 = *v71;
        v84 = (unint64_t *)((char *)v71 + v16);
        a12.i64[0] = *v84;
        v86 = (unint64_t *)((char *)v84 + v16);
        a13.i64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v16);
        a14.i64[0] = *v87;
        v88 = (float32x2_t *)((char *)v87 + v16 - v69 * v16 + -4 * v16);
        v89 = vmla_n_f32(*(float32x2_t *)a12.f32, v85, v78);
        v90 = vadd_f32(vmla_n_f32(*(float32x2_t *)a13.f32, v85, v80.f32[0]), vmul_lane_f32(*(float32x2_t *)a12.f32, v80, 1));
        v91 = vadd_f32(vmla_laneq_f32(vmla_n_f32(*(float32x2_t *)a14.f32, v85, v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)v82.f32, 1));
        if ((v69 & 1) != 0)
        {
          v92 = *v88;
          v88 = (float32x2_t *)((char *)v88 + v16);
          v93 = v77->f32[0];
          v77 = (float32x2_t *)((char *)v77 + 4);
          v94 = *v79++;
          v95 = *v81++;
          v96 = *v83++;
          v85 = vmla_n_f32(v85, v92, v93);
          v89 = vmla_n_f32(v89, v92, v94);
          v90 = vmla_n_f32(v90, v92, v95);
          v91 = vmla_n_f32(v91, v92, v96);
          v76 = v69 - 1;
        }
        if (v76)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 = 0;
          do
          {
            v102 = *v88;
            v101 = (float32x2_t *)((char *)v88 + v16);
            v103 = *v101;
            v88 = (float32x2_t *)((char *)v101 + v16);
            v104 = *v77++;
            a12.i64[0] = *(_QWORD *)v79;
            v79 += 2;
            a13.i64[0] = *(_QWORD *)v81;
            v81 += 2;
            a14.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            v85 = vmla_n_f32(v85, v102, v104.f32[0]);
            v89 = vmla_n_f32(v89, v102, a12.f32[0]);
            v90 = vmla_n_f32(v90, v102, a13.f32[0]);
            v91 = vmla_n_f32(v91, v102, a14.f32[0]);
            v97 = vmla_lane_f32(v97, v103, v104, 1);
            v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
            v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
            v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)a14.f32, 1);
            v56 = v76 <= 2;
            v76 -= 2;
          }
          while (!v56);
          v85 = vadd_f32(v85, v97);
          v89 = vadd_f32(v89, v98);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v85, a7);
        *(float32x2_t *)v15.f32 = vmul_n_f32(v89, a7);
        *v88 = *(float32x2_t *)v14.f32;
        v105 = (float32x2_t *)((char *)v88 + v16);
        *v105 = *(float32x2_t *)v15.f32;
        v106 = (float32x2_t *)((char *)v105 + v16);
        *v106 = vmul_n_f32(v90, a7);
        *(float32x2_t *)((char *)v106 + v16) = vmul_n_f32(v91, a7);
      }
      v107 = a2 & 3;
      if (!j && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + 4 * v18);
        v109 = (float *)(a3 + (v69 - 1) * v17);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v110 = *(float32x2_t *)v109;
            v112 = *v108;
            v111 = (float32x2_t *)((char *)v108 + v16);
            v114 = *v111;
            v113 = (float32x2_t *)((char *)v111 + v16);
            *(float32x2_t *)a12.f32 = *v113;
            v109 = (float *)((char *)v109 - v17);
            *(float32x2_t *)v15.f32 = vmul_lane_f32(v114, v110, 1);
            *v113 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v112, v110.f32[0]), *(float32x2_t *)v15.f32), *v113), a7);
            v108 = &v113[v16 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v116 = *v108;
          v115 = (float32x2_t *)((char *)v108 + v16);
          *v115 = vmul_n_f32(vadd_f32(vmul_n_f32(v116, *v109), *v115), a7);
          v108 = (float32x2_t *)((char *)v115 - v16);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(*v108, a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v117 = a2;
      for (k = __OFSUB__(a2, 3); v117 > 3; k = __OFSUB__(v117, 3))
      {
        v117 -= 4;
        v119 = (__int32 *)(a5 + v117 * v16 + 4 * v18);
        v120 = a3 + v117 * v17 + 4 * v117;
        v121 = (float *)(v120 + v17);
        v122 = (float32x2_t *)(v120 + 2 * v17);
        v123 = (float32x4_t *)(v120 + v17 + 2 * v17);
        v124 = v117;
        v125 = (float *)(a3 + v117 * v17);
        v126 = *v121;
        v127 = &v121[-v117];
        v128 = *v122;
        v129 = (float *)v122 - v117;
        v130 = *v123;
        v131 = &v123->f32[-v117];
        v14.i32[0] = *v119;
        v132 = (unsigned __int32 *)&v119[(unint64_t)v16 / 4];
        a12.i32[0] = *v132;
        v133 = &v132[(unint64_t)v16 / 4];
        a13.i32[0] = *v133;
        v134 = &v133[(unint64_t)v16 / 4];
        a14.i32[0] = *v134;
        v135 = (float *)((char *)&v134[(unint64_t)v16 / 4] - v117 * v16 + -4 * v16);
        *(int32x2_t *)v136.f32 = vtrn1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v136.i64[1] = a13.i64[0];
        v130.i32[3] = 0;
        v14.i32[1] = 0;
        v138 = vmul_f32(v128, *(float32x2_t *)v136.f32);
        v137 = vmulq_f32(v130, v136);
        v15.f32[0] = (float)(v126 * v136.f32[0]) + a12.f32[0];
        v139 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
        v138.f32[0] = vaddv_f32(v138) + a13.f32[0];
        v139.f32[0] = vaddv_f32(v139) + a14.f32[0];
        if ((v117 & 1) != 0)
        {
          v140 = *v135;
          v135 = (float *)((char *)v135 + v16);
          v141 = *v125++;
          v142 = *v127++;
          v143 = *v129++;
          v144 = *v131++;
          v14.f32[0] = v14.f32[0] + (float)(v140 * v141);
          v15.f32[0] = v15.f32[0] + (float)(v140 * v142);
          v138.f32[0] = v138.f32[0] + (float)(v140 * v143);
          v139.f32[0] = v139.f32[0] + (float)(v140 * v144);
          v124 = v117 - 1;
        }
        if (v124)
        {
          do
          {
            v146.f32[0] = *v135;
            v145 = (__int32 *)&v135[(unint64_t)v16 / 4];
            v146.i32[1] = *v145;
            v135 = (float *)&v145[(unint64_t)v16 / 4];
            v147 = *(float32x2_t *)v125;
            v125 += 2;
            a12.i64[0] = *(_QWORD *)v127;
            v127 += 2;
            a13.i64[0] = *(_QWORD *)v129;
            v129 += 2;
            a14.i64[0] = *(_QWORD *)v131;
            v131 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v146, v147);
            *(float32x2_t *)v15.f32 = vmla_f32(*(float32x2_t *)v15.f32, v146, *(float32x2_t *)a12.f32);
            v138 = vmla_f32(v138, v146, *(float32x2_t *)a13.f32);
            v139 = vmla_f32(v139, v146, *(float32x2_t *)a14.f32);
            v56 = v124 <= 2;
            v124 -= 2;
          }
          while (!v56);
        }
        *v135 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v148 = &v135[(unint64_t)v16 / 4];
        *v148 = vaddv_f32(*(float32x2_t *)v15.f32) * a7;
        v149 = &v148[(unint64_t)v16 / 4];
        *v149 = vaddv_f32(v138) * a7;
        v149[(unint64_t)v16 / 4] = vaddv_f32(v139) * a7;
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v18);
        v152 = (float32x2_t *)(a3 + (v117 - 1) * v17);
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v153 = *v152;
            v155.i32[0] = *v151;
            v154 = &v151[(unint64_t)v16 / 4];
            v155.i32[1] = *v154;
            v156 = (float *)&v154[(unint64_t)v16 / 4];
            v152 = (float32x2_t *)((char *)v152 - v17);
            *v156 = (float)(vaddv_f32(vmul_f32(v155, v153)) + *v156) * a7;
            v151 = (__int32 *)&v156[v16 / 0xFFFFFFFFFFFFFFFELL];
          }
          v158 = *(float *)v151;
          v157 = (float *)&v151[(unint64_t)v16 / 4];
          *v157 = (float)((float)(v158 * v152->f32[0]) + *v157) * a7;
          v151 = (__int32 *)&v157[v16 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = *(float *)v151 * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RUTN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float *v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  BOOL v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  float *v67;
  float v68;
  float v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t *v76;
  float *v77;
  uint64_t v78;
  float32x2_t *v79;
  float v80;
  float32x4_t *v81;
  float32x2_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t *v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float *v110;
  float v111;
  float *v112;
  float v113;
  float v114;
  float32x2_t *v115;
  float32x2_t v116;
  unint64_t *v117;
  float32x2_t v118;
  float32x2_t *v119;
  float *v120;
  float v121;
  float v122;
  unint64_t *v123;
  float32x2_t v124;
  float32x2_t *v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  unsigned __int32 *v129;
  float *v130;
  uint64_t v131;
  float32x2_t *v132;
  float v133;
  float32x4_t *v134;
  float32x2_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  unsigned __int32 *v140;
  unsigned __int32 *v141;
  unsigned __int32 *v142;
  float *v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float *v147;
  float v148;
  float v149;
  float32x4_t *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  float *v162;
  float v163;
  float *v164;
  float v165;
  float v166;
  float *v167;
  float *v168;
  float v169;
  float v170;
  float *v171;
  float v172;
  float v173;
  float *v174;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v26 = *v23;
        v25 = (float32x2_t *)&v23[(unint64_t)v16 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v16);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v16);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v16);
        a11 = *v22;
        v33 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v15);
        a13 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a14 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v37 = vmulq_laneq_f32(a14, v32, 3);
        v38 = vaddq_f32(vmlaq_lane_f32(vmulq_lane_f32(a14, *(float32x2_t *)v32.f32, 1), a12, v28, 1), vmulq_lane_f32(a13, *(float32x2_t *)v30.f32, 1));
        v39 = vaddq_f32(vmulq_laneq_f32(a14, v32, 2), vmulq_laneq_f32(a13, v30, 2));
        v40 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(a14, v32.f32[0]), a12, v28.f32[0]), vmlaq_n_f32(vmulq_n_f32(a13, v30.f32[0]), a11, v26));
        if ((v24 & 1) != 0)
        {
          v41 = *v36;
          v36 = (float32x4_t *)((char *)v36 + v15);
          a11 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v16);
          v40 = vmlaq_n_f32(v40, v41, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v41, *(float32x2_t *)a11.f32, 1);
          v39 = vmlaq_laneq_f32(v39, v41, a11, 2);
          v37 = vmlaq_laneq_f32(v37, v41, a11, 3);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          v45 = 0uLL;
          do
          {
            v47 = *v36;
            v46 = (float32x4_t *)((char *)v36 + v15);
            v48 = *v46;
            v36 = (float32x4_t *)((char *)v46 + v15);
            a11 = *v31;
            v49 = (float32x4_t *)((char *)v31 + v16);
            a12 = *v49;
            v31 = (float32x4_t *)((char *)v49 + v16);
            v40 = vmlaq_n_f32(v40, v47, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v47, *(float32x2_t *)a11.f32, 1);
            v39 = vmlaq_laneq_f32(v39, v47, a11, 2);
            v37 = vmlaq_laneq_f32(v37, v47, a11, 3);
            v42 = vmlaq_n_f32(v42, v48, a12.f32[0]);
            v43 = vmlaq_lane_f32(v43, v48, *(float32x2_t *)a12.f32, 1);
            v44 = vmlaq_laneq_f32(v44, v48, a12, 2);
            v45 = vmlaq_laneq_f32(v45, v48, a12, 3);
            v50 = v24 <= 2;
            v24 -= 2;
          }
          while (!v50);
          v40 = vaddq_f32(v40, v42);
          v38 = vaddq_f32(v38, v43);
          v39 = vaddq_f32(v39, v44);
          v37 = vaddq_f32(v37, v45);
        }
        v14 = vmulq_n_f32(v40, a7);
        v51 = (float32x4_t *)((char *)v36 - (a2 - v19) * v15);
        *v51 = v14;
        v52 = (float32x4_t *)((char *)v51 + v15);
        *v52 = vmulq_n_f32(v38, a7);
        v53 = (float32x4_t *)((char *)v52 + v15);
        *v53 = vmulq_n_f32(v39, a7);
        *(float32x4_t *)((char *)v53 + v15) = vmulq_n_f32(v37, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v50 = v21 <= 4;
        v21 -= 4;
      }
      while (!v50);
    }
    v54 = a2 & 3;
    if (!v20 && v54 != 0)
    {
      v55 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v56 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v54 != 1)
      {
        if (v54 != 2)
        {
          v58 = *v56;
          v57 = &v56[(unint64_t)v16 / 4];
          v60 = *v57;
          v59 = &v57[(unint64_t)v16 / 4];
          v61 = *v59;
          v56 = &v59[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v63 = *v55;
          v62 = (float32x4_t *)((char *)v55 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *v64;
          v66 = (float32x4_t *)((char *)v64 - 2 * v15);
          *v66 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v58), vmulq_n_f32(v65, v60)), vmulq_n_f32(a12, v61)), a7);
          v55 = (float32x4_t *)((char *)v66 + v15);
        }
        v68 = *v56;
        v67 = &v56[(unint64_t)v16 / 4];
        v69 = *v67;
        v56 = v67 + 1;
        v71 = *v55;
        v70 = (float32x4_t *)((char *)v55 + v15);
        a11 = *v70;
        v72 = (float32x4_t *)((char *)v70 - v15);
        *v72 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v71, v68), vmulq_n_f32(a11, v69)), a7);
        v55 = (float32x4_t *)((char *)v72 + v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v55, *v56), a7);
      *v55 = v14;
    }
    v17 += 4;
    v50 = v18 <= 4;
    v18 -= 4;
  }
  while (!v50);
  v50 = v18 <= -3;
  result = v18 + 3;
  if (!v50)
  {
LABEL_22:
    if (result > 1)
    {
      v73 = 0;
      v74 = __OFSUB__(a2, 3);
      v75 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v76 = (unint64_t *)(a5 + v73 * v15 + 4 * v17);
          v77 = (float *)(a3 + v73 * v16 + 4 * v73);
          v78 = a2 - v73 - 4;
          v80 = *v77;
          v79 = (float32x2_t *)&v77[(unint64_t)v16 / 4];
          v82 = *v79;
          v81 = (float32x4_t *)((char *)v79 + v16);
          v84 = *v81;
          v83 = (float32x4_t *)((char *)v81 + v16);
          v86 = *v83;
          v85 = (float32x4_t *)((char *)v83 + v16);
          a11.i64[0] = *v76;
          v87 = (unint64_t *)((char *)v76 + v15);
          a12.i64[0] = *v87;
          v88 = (unint64_t *)((char *)v87 + v15);
          a13.i64[0] = *v88;
          v89 = (unint64_t *)((char *)v88 + v15);
          a14.i64[0] = *v89;
          v90 = (float32x2_t *)((char *)v89 + v15);
          v91 = vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3);
          v92 = vadd_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, *(float32x2_t *)v86.f32, 1), *(float32x2_t *)a12.f32, v82, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, *(float32x2_t *)v84.f32, 1));
          v93 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 2), vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2));
          v94 = vadd_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)a14.f32, v86.f32[0]), *(float32x2_t *)a12.f32, v82.f32[0]), vmla_n_f32(vmul_n_f32(*(float32x2_t *)a13.f32, v84.f32[0]), *(float32x2_t *)a11.f32, v80));
          if ((v78 & 1) != 0)
          {
            v95 = *v90;
            v90 = (float32x2_t *)((char *)v90 + v15);
            a11 = *v85;
            v85 = (float32x4_t *)((char *)v85 + v16);
            v94 = vmla_n_f32(v94, v95, a11.f32[0]);
            v92 = vmla_lane_f32(v92, v95, *(float32x2_t *)a11.f32, 1);
            v93 = vmla_laneq_f32(v93, v95, a11, 2);
            v91 = vmla_laneq_f32(v91, v95, a11, 3);
            v78 = a2 - v73 - 5;
          }
          if (v78)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v101 = *v90;
              v100 = (float32x2_t *)((char *)v90 + v15);
              v102 = *v100;
              v90 = (float32x2_t *)((char *)v100 + v15);
              a11 = *v85;
              v103 = (float32x4_t *)((char *)v85 + v16);
              a12 = *v103;
              v85 = (float32x4_t *)((char *)v103 + v16);
              v94 = vmla_n_f32(v94, v101, a11.f32[0]);
              v92 = vmla_lane_f32(v92, v101, *(float32x2_t *)a11.f32, 1);
              v93 = vmla_laneq_f32(v93, v101, a11, 2);
              v91 = vmla_laneq_f32(v91, v101, a11, 3);
              v96 = vmla_n_f32(v96, v102, a12.f32[0]);
              v97 = vmla_lane_f32(v97, v102, *(float32x2_t *)a12.f32, 1);
              v98 = vmla_laneq_f32(v98, v102, a12, 2);
              v99 = vmla_laneq_f32(v99, v102, a12, 3);
              v50 = v78 <= 2;
              v78 -= 2;
            }
            while (!v50);
            v94 = vadd_f32(v94, v96);
            v92 = vadd_f32(v92, v97);
            v93 = vadd_f32(v93, v98);
            v91 = vadd_f32(v91, v99);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v94, a7);
          v104 = (float32x2_t *)((char *)v90 - (a2 - v73) * v15);
          *v104 = *(float32x2_t *)v14.f32;
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v92, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = vmul_n_f32(v93, a7);
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v91, a7);
          v73 += 4;
          v74 = __OFSUB__(v75, 4);
          v50 = v75 <= 4;
          v75 -= 4;
        }
        while (!v50);
      }
      v107 = a2 & 3;
      if (!v74 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v73 * v15 + 4 * v17);
        v109 = (float *)(a3 + v73 * v16 + 4 * v73);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v111 = *v109;
            v110 = &v109[(unint64_t)v16 / 4];
            v113 = *v110;
            v112 = &v110[(unint64_t)v16 / 4];
            v114 = *v112;
            v109 = &v112[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v116 = *v108;
            v115 = (float32x2_t *)((char *)v108 + v15);
            v118 = *v115;
            v117 = (unint64_t *)((char *)v115 + v15);
            a12.i64[0] = *v117;
            v119 = (float32x2_t *)&v117[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v119 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v116, v111), vmul_n_f32(v118, v113)), vmul_n_f32(*(float32x2_t *)a12.f32, v114)), a7);
            v108 = (float32x2_t *)((char *)v119 + v15);
          }
          v121 = *v109;
          v120 = &v109[(unint64_t)v16 / 4];
          v122 = *v120;
          v109 = v120 + 1;
          v124 = *v108;
          v123 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v123;
          v125 = (float32x2_t *)((char *)v123 - v15);
          *v125 = vmul_n_f32(vadd_f32(vmul_n_f32(v124, v121), vmul_n_f32(*(float32x2_t *)a11.f32, v122)), a7);
          v108 = (float32x2_t *)((char *)v125 + v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v108, *v109), a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v126 = 0;
      v127 = __OFSUB__(a2, 3);
      v128 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v129 = (unsigned __int32 *)(a5 + v126 * v15 + 4 * v17);
          v130 = (float *)(a3 + v126 * v16 + 4 * v126);
          v131 = a2 - v126 - 4;
          v133 = *v130;
          v132 = (float32x2_t *)&v130[(unint64_t)v16 / 4];
          v135 = *v132;
          v134 = (float32x4_t *)((char *)v132 + v16);
          v137 = *v134;
          v136 = (float32x4_t *)((char *)v134 + v16);
          v139 = *v136;
          v138 = (float32x4_t *)((char *)v136 + v16);
          a11.i32[0] = *v129;
          v140 = &v129[(unint64_t)v15 / 4];
          a12.i32[0] = *v140;
          v141 = &v140[(unint64_t)v15 / 4];
          a13.i32[0] = *v141;
          v142 = &v141[(unint64_t)v15 / 4];
          a14.i32[0] = *v142;
          v143 = (float *)&v142[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v137.i32[3] = 0;
          v14.f32[0] = v133 * a11.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(*(float32x2_t *)v14.f32, vmul_lane_f32(v135, *(float32x2_t *)a11.f32, 1));
          v144 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v137, a11, 2), vmulq_laneq_f32(v139, a11, 3)));
          if ((v131 & 1) != 0)
          {
            v145 = *v143;
            v143 = (float *)((char *)v143 + v15);
            a11 = *v138;
            v138 = (float32x4_t *)((char *)v138 + v16);
            v144 = vmlaq_n_f32(v144, a11, v145);
            v131 = a2 - v126 - 5;
          }
          if (v131)
          {
            v146 = 0uLL;
            do
            {
              v148 = *v143;
              v147 = &v143[(unint64_t)v15 / 4];
              v149 = *v147;
              v143 = &v147[(unint64_t)v15 / 4];
              a11 = *v138;
              v150 = (float32x4_t *)((char *)v138 + v16);
              a12 = *v150;
              v138 = (float32x4_t *)((char *)v150 + v16);
              v144 = vmlaq_n_f32(v144, a11, v148);
              v146 = vmlaq_n_f32(v146, a12, v149);
              v50 = v131 <= 2;
              v131 -= 2;
            }
            while (!v50);
            v144 = vaddq_f32(v144, v146);
          }
          v14 = vmulq_n_f32(v144, a7);
          v151 = (_DWORD *)((char *)v143 - (a2 - v126) * v15);
          *v151 = v14.i32[0];
          v152 = &v151[(unint64_t)v15 / 4];
          *v152 = v14.i32[1];
          v153 = &v152[(unint64_t)v15 / 4];
          *v153 = v14.i32[2];
          v153[(unint64_t)v15 / 4] = v14.i32[3];
          v126 += 4;
          v127 = __OFSUB__(v128, 4);
          v50 = v128 <= 4;
          v128 -= 4;
        }
        while (!v50);
      }
      v154 = a2 & 3;
      if (!v127 && v154 != 0)
      {
        v155 = (float *)(a5 + v126 * v15 + 4 * v17);
        v156 = (float *)(a3 + v126 * v16 + 4 * v126);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v158 = *v156;
            v157 = &v156[(unint64_t)v16 / 4];
            v160 = *v157;
            v159 = &v157[(unint64_t)v16 / 4];
            v161 = *v159;
            v156 = &v159[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v163 = *v155;
            v162 = &v155[(unint64_t)v15 / 4];
            v165 = *v162;
            v164 = &v162[(unint64_t)v15 / 4];
            v166 = *v164;
            v167 = &v164[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v167 = (float)((float)((float)(v158 * v163) + (float)(v160 * v165)) + (float)(v161 * v166)) * a7;
            v155 = &v167[(unint64_t)v15 / 4];
          }
          v169 = *v156;
          v168 = &v156[(unint64_t)v16 / 4];
          v170 = *v168;
          v156 = v168 + 1;
          v172 = *v155;
          v171 = &v155[(unint64_t)v15 / 4];
          v173 = *v171;
          v174 = &v171[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v174 = (float)((float)(v169 * v172) + (float)(v170 * v173)) * a7;
          v155 = &v174[(unint64_t)v15 / 4];
        }
        *v155 = (float)(*v155 * *v156) * a7;
      }
    }
  }
  return result;
}

uint64_t strmm_noPack_RUTU(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, int32x2_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float v27;
  float32x4_t *v28;
  float32x2_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  BOOL v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  float *v72;
  float32x2_t *v73;
  float v74;
  float32x4_t *v75;
  float32x2_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  unint64_t *v79;
  unint64_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x2_t *v98;
  uint64_t v99;
  float32x2_t *v100;
  float *v101;
  float *v102;
  float v103;
  float v104;
  float32x2_t *v105;
  float32x2_t v106;
  unint64_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  unint64_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  unsigned __int32 *v116;
  uint64_t v117;
  float *v118;
  float32x2_t *v119;
  float v120;
  float32x4_t *v121;
  float32x2_t v122;
  float32x4_t *v123;
  float32x4_t v124;
  unsigned __int32 *v125;
  unsigned __int32 *v126;
  __int32 *v127;
  float *v128;
  float32x4_t v129;
  float v130;
  float32x4_t v131;
  float *v132;
  float v133;
  float v134;
  float32x4_t *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float *v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float *v147;
  float v148;
  float v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  float *v154;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_22;
  v19 = result - 3;
  do
  {
    v20 = 0;
    v21 = __OFSUB__(a2, 3);
    v22 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v23 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
        v24 = a2 - v20 - 4;
        v25 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
        v27 = *v25;
        v26 = (float32x2_t *)&v25[(unint64_t)v17 / 4];
        v29 = *v26;
        v28 = (float32x4_t *)((char *)v26 + v17);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v17);
        a11 = *v23;
        v32 = (float32x4_t *)((char *)v23 + v16);
        a12 = *v32;
        v33 = (float32x4_t *)((char *)v32 + v16);
        a13 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v16);
        v36 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v16);
        v37 = vmlaq_laneq_f32(a13, v36, v31, 2);
        v38 = vaddq_f32(vmlaq_lane_f32(a12, v36, *(float32x2_t *)v31.f32, 1), vmulq_lane_f32(a13, v29, 1));
        v39 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(a11, v36, v31.f32[0]), a12, v27), vmulq_n_f32(a13, v29.f32[0]));
        if ((v24 & 1) != 0)
        {
          v40 = *v35;
          v35 = (float32x4_t *)((char *)v35 + v16);
          a11 = *v30;
          v30 = (float32x4_t *)((char *)v30 + v17);
          v39 = vmlaq_n_f32(v39, v40, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v40, *(float32x2_t *)a11.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v40, a11, 2);
          v36 = vmlaq_laneq_f32(v36, v40, a11, 3);
          v24 = a2 - v20 - 5;
        }
        if (v24)
        {
          v41 = 0uLL;
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          do
          {
            v46 = *v35;
            v45 = (float32x4_t *)((char *)v35 + v16);
            v47 = *v45;
            v35 = (float32x4_t *)((char *)v45 + v16);
            a11 = *v30;
            v48 = (float32x4_t *)((char *)v30 + v17);
            a12 = *v48;
            v30 = (float32x4_t *)((char *)v48 + v17);
            v39 = vmlaq_n_f32(v39, v46, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v46, *(float32x2_t *)a11.f32, 1);
            v37 = vmlaq_laneq_f32(v37, v46, a11, 2);
            v36 = vmlaq_laneq_f32(v36, v46, a11, 3);
            v41 = vmlaq_n_f32(v41, v47, a12.f32[0]);
            v42 = vmlaq_lane_f32(v42, v47, *(float32x2_t *)a12.f32, 1);
            v43 = vmlaq_laneq_f32(v43, v47, a12, 2);
            v44 = vmlaq_laneq_f32(v44, v47, a12, 3);
            v49 = v24 <= 2;
            v24 -= 2;
          }
          while (!v49);
          v39 = vaddq_f32(v39, v41);
          v38 = vaddq_f32(v38, v42);
          v37 = vaddq_f32(v37, v43);
          v36 = vaddq_f32(v36, v44);
        }
        v14 = vmulq_n_f32(v39, a7);
        v15 = vmulq_n_f32(v38, a7);
        v50 = (float32x4_t *)((char *)v35 - (a2 - v20) * v16);
        *v50 = v14;
        v51 = (float32x4_t *)((char *)v50 + v16);
        *v51 = v15;
        v52 = (float32x4_t *)((char *)v51 + v16);
        *v52 = vmulq_n_f32(v37, a7);
        *(float32x4_t *)((char *)v52 + v16) = vmulq_n_f32(v36, a7);
        v20 += 4;
        v21 = __OFSUB__(v22, 4);
        v49 = v22 <= 4;
        v22 -= 4;
      }
      while (!v49);
    }
    v53 = a2 & 3;
    if (!v21 && v53 != 0)
    {
      v54 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v55 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
      if (v53 != 1)
      {
        if (v53 != 2)
        {
          v57 = *v55;
          v56 = &v55[(unint64_t)v17 / 4];
          v58 = *v56;
          v55 = v56 + 1;
          v60 = *v54;
          v59 = (float32x4_t *)((char *)v54 + v16);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v16);
          a12 = *v61;
          v63 = (float32x4_t *)((char *)v61 - 2 * v16);
          *v63 = vmulq_n_f32(vaddq_f32(vmlaq_n_f32(v60, v62, v57), vmulq_n_f32(a12, v58)), a7);
          v54 = (float32x4_t *)((char *)v63 + v16);
        }
        v65 = *v54;
        v64 = (float32x4_t *)((char *)v54 + v16);
        a11 = *v64;
        v66 = (float32x4_t *)((char *)v64 - v16);
        *v66 = vmulq_n_f32(vmlaq_n_f32(v65, a11, *v55), a7);
        v54 = (float32x4_t *)((char *)v66 + v16);
      }
      v14 = vmulq_n_f32(*v54, a7);
      *v54 = v14;
    }
    v18 += 4;
    v49 = v19 <= 4;
    v19 -= 4;
  }
  while (!v49);
  v49 = v19 <= -3;
  result = v19 + 3;
  if (!v49)
  {
LABEL_22:
    if (result > 1)
    {
      v67 = 0;
      v68 = __OFSUB__(a2, 3);
      v69 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v70 = (unint64_t *)(a5 + v67 * v16 + 4 * v18);
          v71 = a2 - v67 - 4;
          v72 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
          v74 = *v72;
          v73 = (float32x2_t *)&v72[(unint64_t)v17 / 4];
          v76 = *v73;
          v75 = (float32x4_t *)((char *)v73 + v17);
          v78 = *v75;
          v77 = (float32x4_t *)((char *)v75 + v17);
          a11.i64[0] = *v70;
          v79 = (unint64_t *)((char *)v70 + v16);
          a12.i64[0] = *v79;
          v80 = (unint64_t *)((char *)v79 + v16);
          a13.i64[0] = *v80;
          v81 = (float32x2_t *)((char *)v80 + v16);
          v83 = *v81;
          v82 = (float32x2_t *)((char *)v81 + v16);
          v84 = vmla_laneq_f32(*(float32x2_t *)a13.f32, v83, v78, 2);
          v85 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v83, *(float32x2_t *)v78.f32, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, v76, 1));
          v86 = vadd_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)a11.f32, v83, v78.f32[0]), *(float32x2_t *)a12.f32, v74), vmul_n_f32(*(float32x2_t *)a13.f32, v76.f32[0]));
          if ((v71 & 1) != 0)
          {
            v87 = *v82;
            v82 = (float32x2_t *)((char *)v82 + v16);
            a11 = *v77;
            v77 = (float32x4_t *)((char *)v77 + v17);
            v86 = vmla_n_f32(v86, v87, a11.f32[0]);
            v85 = vmla_lane_f32(v85, v87, *(float32x2_t *)a11.f32, 1);
            v84 = vmla_laneq_f32(v84, v87, a11, 2);
            v83 = vmla_laneq_f32(v83, v87, a11, 3);
            v71 = a2 - v67 - 5;
          }
          if (v71)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v93 = *v82;
              v92 = (float32x2_t *)((char *)v82 + v16);
              v94 = *v92;
              v82 = (float32x2_t *)((char *)v92 + v16);
              a11 = *v77;
              v95 = (float32x4_t *)((char *)v77 + v17);
              a12 = *v95;
              v77 = (float32x4_t *)((char *)v95 + v17);
              v86 = vmla_n_f32(v86, v93, a11.f32[0]);
              v85 = vmla_lane_f32(v85, v93, *(float32x2_t *)a11.f32, 1);
              v84 = vmla_laneq_f32(v84, v93, a11, 2);
              v83 = vmla_laneq_f32(v83, v93, a11, 3);
              v88 = vmla_n_f32(v88, v94, a12.f32[0]);
              v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)a12.f32, 1);
              v90 = vmla_laneq_f32(v90, v94, a12, 2);
              v91 = vmla_laneq_f32(v91, v94, a12, 3);
              v49 = v71 <= 2;
              v71 -= 2;
            }
            while (!v49);
            v86 = vadd_f32(v86, v88);
            v85 = vadd_f32(v85, v89);
            v84 = vadd_f32(v84, v90);
            v83 = vadd_f32(v83, v91);
          }
          *(float32x2_t *)v15.f32 = vmul_n_f32(v85, a7);
          v96 = (float32x2_t *)((char *)v82 - (a2 - v67) * v16);
          *v96 = vmul_n_f32(v86, a7);
          v97 = (float32x2_t *)((char *)v96 + v16);
          *v97 = *(float32x2_t *)v15.f32;
          v98 = (float32x2_t *)((char *)v97 + v16);
          *v98 = vmul_n_f32(v84, a7);
          *(float32x2_t *)((char *)v98 + v16) = vmul_n_f32(v83, a7);
          v67 += 4;
          v68 = __OFSUB__(v69, 4);
          v49 = v69 <= 4;
          v69 -= 4;
        }
        while (!v49);
      }
      v99 = a2 & 3;
      if (!v68 && v99 != 0)
      {
        v100 = (float32x2_t *)(a5 + v67 * v16 + 4 * v18);
        v101 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
        if (v99 != 1)
        {
          if (v99 != 2)
          {
            v103 = *v101;
            v102 = &v101[(unint64_t)v17 / 4];
            v104 = *v102;
            v101 = v102 + 1;
            v106 = *v100;
            v105 = (float32x2_t *)((char *)v100 + v16);
            v108 = *v105;
            v107 = (unint64_t *)((char *)v105 + v16);
            a12.i64[0] = *v107;
            v109 = (float32x2_t *)&v107[v16 / 0xFFFFFFFFFFFFFFFCLL];
            *v109 = vmul_n_f32(vadd_f32(vmla_n_f32(v106, v108, v103), vmul_n_f32(*(float32x2_t *)a12.f32, v104)), a7);
            v100 = (float32x2_t *)((char *)v109 + v16);
          }
          v111 = *v100;
          v110 = (unint64_t *)((char *)v100 + v16);
          a11.i64[0] = *v110;
          v112 = (float32x2_t *)((char *)v110 - v16);
          *v112 = vmul_n_f32(vmla_n_f32(v111, *(float32x2_t *)a11.f32, *v101), a7);
          v100 = (float32x2_t *)((char *)v112 + v16);
        }
        *v100 = vmul_n_f32(*v100, a7);
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v113 = 0;
      v114 = __OFSUB__(a2, 3);
      v115 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v116 = (unsigned __int32 *)(a5 + v113 * v16 + 4 * v18);
          v117 = a2 - v113 - 4;
          v118 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
          v120 = *v118;
          v119 = (float32x2_t *)&v118[(unint64_t)v17 / 4];
          v122 = *v119;
          v121 = (float32x4_t *)((char *)v119 + v17);
          v124 = *v121;
          v123 = (float32x4_t *)((char *)v121 + v17);
          a11.i32[0] = *v116;
          v125 = &v116[(unint64_t)v16 / 4];
          a12.i32[0] = *v125;
          v126 = &v125[(unint64_t)v16 / 4];
          a13.i32[0] = *v126;
          v127 = (__int32 *)&v126[(unint64_t)v16 / 4];
          a14.i32[0] = *v127;
          v128 = (float *)&v127[(unint64_t)v16 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, a14);
          a11.i64[1] = a13.i64[0];
          v124.i32[3] = 0;
          v15.f32[0] = v120 * a12.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(vmul_laneq_f32(v122, a11, 2), *(float32x2_t *)v15.f32);
          v129 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v124, a11, 3), a11));
          if ((v117 & 1) != 0)
          {
            v130 = *v128;
            v128 = (float *)((char *)v128 + v16);
            a11 = *v123;
            v123 = (float32x4_t *)((char *)v123 + v17);
            v129 = vmlaq_n_f32(v129, a11, v130);
            v117 = a2 - v113 - 5;
          }
          if (v117)
          {
            v131 = 0uLL;
            do
            {
              v133 = *v128;
              v132 = &v128[(unint64_t)v16 / 4];
              v134 = *v132;
              v128 = &v132[(unint64_t)v16 / 4];
              a11 = *v123;
              v135 = (float32x4_t *)((char *)v123 + v17);
              a12 = *v135;
              v123 = (float32x4_t *)((char *)v135 + v17);
              v129 = vmlaq_n_f32(v129, a11, v133);
              v131 = vmlaq_n_f32(v131, a12, v134);
              v49 = v117 <= 2;
              v117 -= 2;
            }
            while (!v49);
            v129 = vaddq_f32(v129, v131);
          }
          v14 = vmulq_n_f32(v129, a7);
          v136 = (_DWORD *)((char *)v128 - (a2 - v113) * v16);
          *v136 = v14.i32[0];
          v137 = &v136[(unint64_t)v16 / 4];
          *v137 = v14.i32[1];
          v138 = &v137[(unint64_t)v16 / 4];
          *v138 = v14.i32[2];
          v138[(unint64_t)v16 / 4] = v14.i32[3];
          v113 += 4;
          v114 = __OFSUB__(v115, 4);
          v49 = v115 <= 4;
          v115 -= 4;
        }
        while (!v49);
      }
      v139 = a2 & 3;
      if (!v114 && v139 != 0)
      {
        v140 = (float *)(a5 + v113 * v16 + 4 * v18);
        v141 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
        if (v139 != 1)
        {
          if (v139 != 2)
          {
            v143 = *v141;
            v142 = &v141[(unint64_t)v17 / 4];
            v144 = *v142;
            v141 = v142 + 1;
            v146 = *v140;
            v145 = &v140[(unint64_t)v16 / 4];
            v148 = *v145;
            v147 = &v145[(unint64_t)v16 / 4];
            v149 = *v147;
            v150 = &v147[v16 / 0xFFFFFFFFFFFFFFFELL];
            *v150 = (float)((float)(v146 + (float)(v143 * v148)) + (float)(v144 * v149)) * a7;
            v140 = &v150[(unint64_t)v16 / 4];
          }
          v152 = *v140;
          v151 = &v140[(unint64_t)v16 / 4];
          v153 = *v151;
          v154 = &v151[v16 / 0xFFFFFFFFFFFFFFFCLL];
          *v154 = (float)(v152 + (float)(*v141 * v153)) * a7;
          v140 = &v154[(unint64_t)v16 / 4];
        }
        *v140 = *v140 * a7;
      }
    }
  }
  return result;
}

void APL_seq_dtrsm(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, char *a17, uint64_t a18, double *a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35)
{
  BOOL v36;

  if (a5 && a6)
  {
    if (a9 == 0.0)
    {
      dgeSetZero(a5, a6, a17, a18);
    }
    else if (a5 > 63 || a6 >= 64)
    {
      v36 = a2 == 121 && (_DWORD)a3 == 111;
      if (a1 == 141)
      {
        if (v36 || a2 == 122 && (_DWORD)a3 != 111)
          dtrsm_Left_Backward(a3, a4, a5, a6, a5, (int)a7, a8, (int)a17, a18, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, a26, a27);
        else
          dtrsm_Left_Forward(a3, a4, a5, a6, a5, (int)a7, a8, (int)a17, a18, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, (uint64_t)a26, a27,
            a28,
            a29,
            a30,
            a31);
      }
      else if (v36 || a2 == 122 && (_DWORD)a3 != 111)
      {
        dtrsm_Right_Forward(a3, a4, a5, a6, a6, (int)a17, a18, (int)a7, a8, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, (uint64_t)a26, a27,
          a28,
          a29,
          (uint64_t)a30,
          a31,
          a32,
          a33,
          a34,
          a35);
      }
      else
      {
        dtrsm_Right_Backward(a3, a4, a5, a6, a6, (int)a17, a18, (int)a7, a8, (uint64_t)a17, a19, a20, a21, a22, a23, a24, a25);
      }
    }
    else if (a20 == -1)
    {
      *a19 = 0.0;
    }
    else if (a1 == 141)
    {
      if (a2 == 121)
      {
        if ((_DWORD)a3 == 111)
        {
          if ((_DWORD)a4 == 132)
            dtrsm_noPack_LUNU(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9);
          else
            dtrsm_noPack_LUNN(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9);
        }
        else if ((_DWORD)a4 == 132)
        {
          dtrsm_noPack_LUTU(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12, a13, a14, a15);
        }
        else
        {
          dtrsm_noPack_LUTN(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15);
        }
      }
      else if ((_DWORD)a3 == 111)
      {
        if ((_DWORD)a4 == 132)
          dtrsm_noPack_LLNU(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9);
        else
          dtrsm_noPack_LLNN(a5, a6, a7, a8, (double *)a17, a18, a9);
      }
      else if ((_DWORD)a4 == 132)
      {
        dtrsm_noPack_LLTU(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12, a13, a14, a15);
      }
      else
      {
        dtrsm_noPack_LLTN(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15);
      }
    }
    else if (a2 == 121)
    {
      if ((_DWORD)a3 == 111)
      {
        if ((_DWORD)a4 == 132)
          dtrsm_noPack_RUNU(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10, a11, a12.f64[0], a13, a14, a15, a16);
        else
          dtrsm_noPack_RUNN(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15, a16);
      }
      else if ((_DWORD)a4 == 132)
      {
        dtrsm_noPack_RUTU(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, (int8x16_t)a10, a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
      }
      else
      {
        dtrsm_noPack_RUTN(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
      }
    }
    else if ((_DWORD)a3 == 111)
    {
      if ((_DWORD)a4 == 132)
        dtrsm_noPack_RLNU(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, (int8x16_t)a10, a11, a12.f64[0], a13, a14, a15, (int64x2_t)a16);
      else
        dtrsm_noPack_RLNN(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15, (int64x2_t)a16);
    }
    else if ((_DWORD)a4 == 132)
    {
      dtrsm_noPack_RLTU(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10, a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
    }
    else
    {
      dtrsm_noPack_RLTN(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
    }
  }
}

#error "23D99D2C4: call analysis failed (funcsize=101)"

#error "23D99D544: call analysis failed (funcsize=163)"

#error "23D99D5E4: call analysis failed (funcsize=113)"

void dsyrk_noPack_LT(uint64_t __N, uint64_t __M, const double *__A, uint64_t __lda, double *__Y, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, __n128 _Q4, float64x2_t a12, float64x2_t a13)
{
  uint64_t v19;
  float64x2_t *v21;
  double *v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double *v26;
  float64x2_t *v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v41;
  float64x2_t *v42;
  uint64_t v43;
  float64x2_t *v44;
  float64x2_t *v45;
  uint64_t v46;
  float64x2_t *v47;
  float64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;

  if ((__N & 1) != 0)
  {
    v19 = 1;
    cblas_dgemv(CblasColMajor, CblasTrans, __M, __N, a7, __A, __lda, __A, 1, a8, __Y, 1);
  }
  else
  {
    v19 = 0;
  }
  _Q0.f64[0] = a7;
  _Q0.f64[1] = a8;
  if (v19 < __N - 1)
  {
    v21 = (float64x2_t *)((char *)__Y + v19 * (8 * a6 + 8) + 16);
    v22 = (double *)&__A[__lda * (v19 + 3)];
    v23 = 16 * __lda;
    v24 = (double *)&__A[__lda * (v19 | 2)];
    do
    {
      v25 = (double *)&__A[v19 * __lda];
      v26 = (double *)&__A[__lda + v19 * __lda];
      v27 = (float64x2_t *)&__Y[v19 * a6 + v19];
      v28 = (float64x2_t *)v25;
      v29 = __M;
      v30 = (float64x2_t *)v26;
      v31 = (float64x2_t)veorq_s8(a10, a10);
      _Q4 = (__n128)veorq_s8((int8x16_t)_Q4, (int8x16_t)_Q4);
      a13 = (float64x2_t)veorq_s8((int8x16_t)a13, (int8x16_t)a13);
      if (__M)
      {
        if ((__M & 1) == 0
          || (v28 = (float64x2_t *)(v25 + 1),
              v30 = (float64x2_t *)(v26 + 1),
              v31.f64[0] = vmlad_n_f64(v31.f64[0], *v25, *v25),
              _Q4.n128_f64[0] = vmlad_n_f64(_Q4.n128_f64[0], *v26, *v25),
              a13.f64[0] = vmlad_n_f64(a13.f64[0], *v26, *v26),
              v29 = __M - 1,
              __M > 1))
        {
          do
          {
            v32 = *v28++;
            v33 = *v30++;
            v31 = vmlaq_f64(v31, v32, v32);
            _Q4 = (__n128)vmlaq_f64((float64x2_t)_Q4, v33, v32);
            a13 = vmlaq_f64(a13, v33, v33);
            v34 = v29 <= 2;
            v29 -= 2;
          }
          while (!v34);
        }
        a12.f64[0] = a13.f64[1];
        v31 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)v31, (int64x2_t)_Q4), (float64x2_t)vtrn2q_s64((int64x2_t)v31, (int64x2_t)_Q4)), a7);
      }
      v35 = (uint64_t *)&v27->f64[a6 + 1];
      _D2 = *v35;
      a10 = (int8x16_t)vmlaq_laneq_f64(v31, *v27, _Q0, 1);
      __asm { FMLA            D4, D2, V0.D[1] }
      *v27 = (float64x2_t)a10;
      *v35 = _Q4.n128_u64[0];
      v19 += 2;
      if (v19 < __N)
      {
        v41 = 0;
        v42 = v21;
        v43 = v19;
        do
        {
          v44 = (float64x2_t *)((char *)v24 + v41);
          v45 = (float64x2_t *)((char *)v22 + v41);
          v46 = __M;
          v47 = (float64x2_t *)v26;
          v48 = (float64x2_t *)v25;
          v49 = (float64x2_t)veorq_s8(a10, a10);
          v50 = (float64x2_t)veorq_s8((int8x16_t)_Q4, (int8x16_t)_Q4);
          a12 = (float64x2_t)veorq_s8((int8x16_t)a12, (int8x16_t)a12);
          a13 = (float64x2_t)veorq_s8((int8x16_t)a13, (int8x16_t)a13);
          if (__M)
          {
            if ((__M & 1) == 0)
              goto LABEL_18;
            v51 = v44->f64[0];
            v44 = (float64x2_t *)((char *)v44 + 8);
            v52 = v45->f64[0];
            v45 = (float64x2_t *)((char *)v45 + 8);
            v48 = (float64x2_t *)(v25 + 1);
            v47 = (float64x2_t *)(v26 + 1);
            v49.f64[0] = vmlad_n_f64(v49.f64[0], v51, *v25);
            v50.f64[0] = vmlad_n_f64(v50.f64[0], v52, *v25);
            a12.f64[0] = vmlad_n_f64(a12.f64[0], v51, *v26);
            a13.f64[0] = vmlad_n_f64(a13.f64[0], v52, *v26);
            v46 = __M - 1;
            if (__M > 1)
            {
LABEL_18:
              do
              {
                v53 = *v44++;
                v54 = *v45++;
                v55 = *v48++;
                v56 = *v47++;
                v49 = vmlaq_f64(v49, v53, v55);
                v50 = vmlaq_f64(v50, v54, v55);
                a12 = vmlaq_f64(a12, v53, v56);
                a13 = vmlaq_f64(a13, v54, v56);
                v34 = v46 <= 2;
                v46 -= 2;
              }
              while (!v34);
            }
            v49 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)v49, (int64x2_t)v50), (float64x2_t)vtrn2q_s64((int64x2_t)v49, (int64x2_t)v50)), a7);
            v50 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13), (float64x2_t)vtrn2q_s64((int64x2_t)a12, (int64x2_t)a13)), a7);
          }
          a10 = (int8x16_t)vmlaq_laneq_f64(v49, *v42, _Q0, 1);
          _Q4 = (__n128)vmlaq_laneq_f64(v50, *(float64x2_t *)((char *)v42 + 8 * a6), _Q0, 1);
          *v42 = (float64x2_t)a10;
          *(__n128 *)((char *)v42 + 8 * a6) = _Q4;
          v43 += 2;
          ++v42;
          v41 += v23;
        }
        while (v43 < __N);
      }
      v21 += a6 + 1;
      v22 = (double *)((char *)v22 + v23);
      v24 = (double *)((char *)v24 + v23);
    }
    while (v19 < __N - 1);
  }
}

uint64_t Accelerate_AR_dtrtrs(char *a1, char *a2, char *a3, unsigned int *a4, unsigned int *a5, double *a6, int *a7, char *a8, int *a9, int *a10)
{
  int v17;
  int v18;
  double v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  signed int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v17 = *a7;
  *a10 = 0;
  v18 = lsame_();
  if (!lsame_() && !lsame_())
  {
    v29 = -1;
    goto LABEL_29;
  }
  if (!lsame_() && !lsame_() && !lsame_())
  {
    v29 = -2;
    goto LABEL_29;
  }
  if (!v18 && !lsame_())
  {
    v29 = -3;
    goto LABEL_29;
  }
  v27 = *a4;
  if ((v27 & 0x80000000) != 0)
  {
    v29 = -4;
    goto LABEL_29;
  }
  if ((*a5 & 0x80000000) != 0)
  {
    v29 = -5;
    goto LABEL_29;
  }
  if (v27 <= 1)
    v28 = 1;
  else
    v28 = *a4;
  if (*a7 < v28)
  {
    v29 = -7;
LABEL_29:
    *a10 = v29;
    goto LABEL_30;
  }
  if (*a9 < v28)
  {
    v29 = -9;
    goto LABEL_29;
  }
  if (*a10)
  {
LABEL_30:
    xerbla_();
    return 0;
  }
  if ((_DWORD)v27)
  {
    if (v18)
    {
      v30 = v27 + 1;
      v31 = 1;
      v32 = v17 + 1;
      while (1)
      {
        v19 = a6[~v17 + v32];
        if (v19 == 0.0)
          break;
        ++v31;
        v32 += v17 + 1;
        if (v30 == v31)
          goto LABEL_27;
      }
      *a10 = v31;
    }
    else
    {
LABEL_27:
      *a10 = 0;
      Accelerate_AR_dtrsm("Left", a1, a2, a3, a4, a5, &c_b12_2, a6, v19, v20, v21, v22, v23, v24, v25, v26, a7, a8, a9);
    }
  }
  return 0;
}

void dsyrk_Pack_Lower(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,int __N,uint64_t a23,uint64_t a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,char a42)
{
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, double);
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double *(*v71)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v72)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const double *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, double);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v123;
  uint64_t v124;
  double *(*v125)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  double *(*v130)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t __Na;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v45 = MEMORY[0x24BDAC7A8](a1, a2).n128_u64[0];
  v47 = v46;
  v119 = v48;
  v113 = v49;
  v51 = v50;
  v53 = v52;
  v54 = *(double *)&v45;
  v55 = v43;
  STACK[0x10278] = *MEMORY[0x24BDAC8D0];
  if (v42 == 111)
    v56 = v44;
  else
    v56 = 1;
  v112 = v56;
  vars0 = v44;
  if (v42 == 111)
    v57 = 1;
  else
    v57 = v44;
  v118 = v57;
  v58 = (void (*)(uint64_t, uint64_t, double))dgePack_B_NoTran;
  if (v42 == 111)
    v58 = (void (*)(uint64_t, uint64_t, double))dgePack_B_Tran;
  v111 = v58;
  v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))dgePack_A_Tran;
  if (v42 == 111)
    v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))dgePack_A_NoTran;
  v117 = v59;
  if (v43 >= 225)
  {
    v134 = (char *)malloc_type_malloc((v43 << 8) + 8288, 0x100004000313F17uLL);
    v60 = (unint64_t *)(v134 + 8256);
  }
  else
  {
    v134 = &a42;
    v60 = &STACK[0x2240];
  }
  v128 = (uint64_t)v60;
  if (v51 >= 1)
  {
    v61 = 0;
    v137 = 32 * v47;
    v115 = 8 * v47;
    v116 = v55;
    v62 = 8 * v47 + 8;
    v126 = v47;
    v110 = v51;
    while (1)
    {
      v114 = v61 + 32;
      v63 = v61 + 32 <= v51 ? 32 : v51 - v61;
      v120 = v113 + 8 * v61 * v112;
      v111(v63, v55, v54);
      if (v55 >= 1)
        break;
LABEL_94:
      v61 = v114;
      v51 = v110;
      if (v114 >= v110)
        goto LABEL_95;
    }
    v64 = v63;
    v65 = 0;
    v66 = v53 != 0.0;
    if (v53 == 1.0 || v61 != 0)
      v66 = 0;
    v127 = v66;
    v68 = v119;
    v125 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))dgebpScaleAlignedC_8M4N;
    v130 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))dgebpAlignedC_8M4N;
    __Na = v63;
    while (1)
    {
      v136 = v65;
      v69 = v65 + 32;
      if (v65 + 32 <= v55)
        v70 = 32;
      else
        v70 = v55 - v65;
      v129 = v119 + 8 * v65;
      v71 = v130;
      if ((v70 & 7) != 0)
        v71 = dgebpUnalignedC_8M4N;
      v130 = v71;
      v72 = v125;
      if ((v70 & 7) != 0)
        v72 = dgebpScaleUnalignedC_8M4N;
      v125 = v72;
      v117(v70, v64, v120 + 8 * v65 * v118, vars0, v134);
      v73 = v136;
      v74 = v70;
      v133 = v70;
      v123 = v69;
      v124 = v68;
      vars8 = v70 + v136;
      if (v70 + v136 >= 4)
      {
        v75 = 0;
        v76 = 0;
        v138 = v70 + v136 - 3;
        v77 = v68;
        v64 = __Na;
        while (2)
        {
          v78 = v76 - v73;
          v79 = v76 & 4;
          if ((v76 & 4) != 0)
            v80 = v76 - v73 - 4;
          else
            v80 = v76 - v73;
          if (v78 >= 0)
            v81 = v80;
          else
            v81 = 0;
          if (v81 > v74)
            goto LABEL_64;
          v82 = v129 + 8 * v76 * v47;
          v83 = (float64x2_t *)(v128 + 8 * v76 * v64);
          if (v78 < 0)
          {
            v85 = 0;
            if (v127)
              goto LABEL_55;
          }
          else
          {
            v131 = 32 * (v75 & 1);
            a40 = 0u;
            a41 = 0u;
            v84 = (char *)&a26 + v131;
            a38 = 0u;
            a39 = 0u;
            a36 = 0u;
            a37 = 0u;
            a34 = 0u;
            a35 = 0u;
            a32 = 0u;
            a33 = 0u;
            a30 = 0u;
            a31 = 0u;
            a28 = 0u;
            a29 = 0u;
            if (v74 - v80 >= 8)
              v85 = 8;
            else
              v85 = v74 - v80;
            a26 = 0uLL;
            a27 = 0uLL;
            v132 = v128 + 8 * v76 * v64;
            ((void (*)(char *))v130)(&v134[8 * v80 * v64]);
            v82 += 8 * v80;
            if (v127)
            {
              v86 = 0;
              v83 = (float64x2_t *)v132;
              v87 = v77 + v131 + 8 * v80;
              v64 = __Na;
              v74 = v133;
              do
              {
                if (v79 < v85)
                {
                  v88 = 0;
                  do
                  {
                    *(double *)(v87 + 8 * v88) = *(double *)&v84[8 * v88] + *(double *)(v87 + 8 * v88) * v53;
                    ++v88;
                  }
                  while (v79 + v88 < v85);
                }
                ++v79;
                ++v86;
                v84 += 72;
                v87 += v62;
              }
              while (v86 != 4);
              v47 = v126;
              v73 = v136;
              if (v85 + v81 >= v133)
                goto LABEL_64;
LABEL_55:
              v125((float64x2_t *)&v134[8 * (v85 + v81) * v64], v83, (float64x2_t *)(v82 + 8 * v85), v47, v74 - (v85 + v81), v64, v53);
LABEL_63:
              v64 = __Na;
              v73 = v136;
              v74 = v133;
LABEL_64:
              v76 += 4;
              ++v75;
              v77 += v137;
              if (v76 >= v138)
                goto LABEL_67;
              continue;
            }
            v89 = 0;
            v83 = (float64x2_t *)v132;
            v90 = v77 + v131 + 8 * v80;
            v64 = __Na;
            v74 = v133;
            do
            {
              if (v79 < v85)
              {
                v91 = 0;
                do
                {
                  *(double *)(v90 + 8 * v91) = *(double *)(v90 + 8 * v91) + *(double *)&v84[8 * v91];
                  ++v91;
                }
                while (v79 + v91 < v85);
              }
              ++v79;
              ++v89;
              v84 += 72;
              v90 += v62;
            }
            while (v89 != 4);
            v47 = v126;
            v73 = v136;
            if (v85 + v81 >= v133)
              goto LABEL_64;
          }
          break;
        }
        v130((float64x2_t *)&v134[8 * (v85 + v81) * v64], v83, (float64x2_t *)(v82 + 8 * v85), v47, v74 - (v85 + v81), v64);
        goto LABEL_63;
      }
      v76 = 0;
      v64 = __Na;
LABEL_67:
      v92 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v92)
      {
        v93 = v76 - v73;
        v94 = (v76 - v73) & ~((v76 - v73) >> 63);
        if (v74 > v94)
          break;
      }
LABEL_93:
      v68 = v124 + 256;
      v65 = v123;
      v55 = v116;
      if (v123 >= v116)
        goto LABEL_94;
    }
    v95 = v129 + 8 * v76 * v47;
    v96 = (const double *)(v128 + 8 * v76 * v64);
    if (v93 < 0)
    {
      v98 = 0;
      v104 = 0;
      v105 = 0;
      if (v127)
      {
LABEL_84:
        dgebpScale_8M1N((float64x2_t *)&v134[8 * v104 * v64 + 8 * v98], v96, v95, v47, v74 - v104, v92, __Na, v53);
LABEL_92:
        v64 = __Na;
        goto LABEL_93;
      }
    }
    else
    {
      a36 = 0u;
      a37 = 0u;
      a34 = 0u;
      a35 = 0u;
      a32 = 0u;
      a33 = 0u;
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      if (v74 - v94 >= 8)
        v97 = 8;
      else
        v97 = v74 - v94;
      v98 = v94 & (4 * v64) & 4;
      v99 = v95 + 8 * v94;
      dgebp_8M1N((float64x2_t *)&v134[8 * v93 * v64 + 8 * v98], (const double *)(v128 + 8 * v76 * v64), (uint64_t)&a26, 8, v97, v92, v64);
      if (v127)
      {
        v64 = __Na;
        if (v92 >= 1)
        {
          v100 = 0;
          v101 = v124 + v115 * v76 + 8 * v94;
          v102 = &a26;
          do
          {
            v103 = 0;
            do
            {
              *(double *)(v101 + 8 * v103) = *((double *)v102 + v103) + *(double *)(v101 + 8 * v103) * v53;
              ++v103;
            }
            while (v100 + v103 < v92);
            ++v100;
            v102 = (__int128 *)((char *)v102 + 72);
            v101 += v62;
          }
          while (v100 != v92);
        }
        v95 = v99 + 8 * v97;
        v104 = v97 + v94;
        v74 = v133;
        goto LABEL_84;
      }
      v64 = __Na;
      if (v92 >= 1)
      {
        v106 = 0;
        v107 = v124 + v115 * v76 + 8 * v94;
        v108 = &a26;
        do
        {
          v109 = 0;
          do
          {
            *(double *)(v107 + 8 * v109) = *(double *)(v107 + 8 * v109) + *((double *)v108 + v109);
            ++v109;
          }
          while (v106 + v109 < v92);
          ++v106;
          v108 = (__int128 *)((char *)v108 + 72);
          v107 += v62;
        }
        while (v106 != v92);
      }
      v95 = v99 + 8 * v97;
      v105 = v97 + v94;
      v74 = v133;
    }
    dgebp_8M1N((float64x2_t *)&v134[8 * v105 * v64 + 8 * v98], v96, v95, v47, v74 - v105, v92, __Na);
    goto LABEL_92;
  }
LABEL_95:
  if (v55 >= 225)
    free(v134);
}

void ssyrk_Pack_Lower(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,int __N,uint64_t a23,int a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,char a34)
{
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int32 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, float);
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *(*v64)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v65)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, float);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v118;
  uint64_t v119;
  float *(*v120)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  float *(*v124)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t __Na;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v37 = MEMORY[0x24BDAC7A8](a1, a2).n128_u32[0];
  v131 = v38;
  v114 = v39;
  v106 = v40;
  v42 = v41;
  v44 = v43;
  v45 = *(float *)&v37;
  v46 = v35;
  STACK[0x101F8] = *MEMORY[0x24BDAC8D0];
  if (v34 == 111)
    v47 = v36;
  else
    v47 = 1;
  v105 = v47;
  vars0 = v36;
  if (v34 == 111)
    v48 = 1;
  else
    v48 = v36;
  v113 = v48;
  v49 = (void (*)(uint64_t, uint64_t, float))sgePack_B_NoTran;
  if (v34 == 111)
    v49 = (void (*)(uint64_t, uint64_t, float))sgePack_B_Tran;
  v104 = v49;
  v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sgePack_A_Tran;
  if (v34 == 111)
    v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sgePack_A_NoTran;
  v112 = v50;
  if (v35 < 1)
  {
    v128 = &a34;
    v51 = &STACK[0x10180];
  }
  else
  {
    v128 = (char *)malloc_type_malloc((v35 << 9) + 65632, 0x100004052888210uLL);
    v51 = (unint64_t *)(v128 + 0x10000);
  }
  v122 = (uint64_t)(v51 + 8);
  if (v42 >= 1)
  {
    v52 = 0;
    v53 = 16 * v131;
    v108 = 4 * v131;
    v54 = 4 * v131 + 4;
    v111 = v46;
    v103 = v42;
    while (1)
    {
      v107 = v52 + 128;
      v55 = v52 + 128 <= v42 ? 128 : v42 - v52;
      v115 = v106 + 4 * v52 * v105;
      v104(v55, v46, v45);
      if (v46 >= 1)
        break;
LABEL_96:
      v52 = v107;
      v42 = v103;
      if (v107 >= v103)
        goto LABEL_97;
    }
    v56 = v55;
    v57 = 0;
    v58 = v44 != 0.0;
    if (v44 == 1.0 || v52 != 0)
      v58 = 0;
    v121 = v58;
    v60 = v55 & 3;
    if (v55 <= 0)
      v60 = -(-v55 & 3);
    v109 = 4 - v60;
    v110 = v60;
    v61 = v114;
    v120 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sgebpScaleAlignedC_8M4N;
    v124 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sgebpAlignedC_8M4N;
    __Na = v55;
    while (1)
    {
      v130 = v57;
      v62 = v57 + 128;
      if (v57 + 128 <= v46)
        v63 = 128;
      else
        v63 = v46 - v57;
      v123 = v114 + 4 * v57;
      v64 = v124;
      if ((v63 & 7) != 0)
        v64 = sgebpUnalignedC_8M4N;
      v124 = v64;
      v65 = v120;
      if ((v63 & 7) != 0)
        v65 = sgebpScaleUnalignedC_8M4N;
      v120 = v65;
      v112(v63, v56, v115 + 4 * v57 * v113, vars0, v128);
      v66 = v130;
      v67 = v63;
      v127 = v63;
      v118 = v62;
      v119 = v61;
      vars8 = v63 + v130;
      if (v63 + v130 >= 4)
      {
        v68 = 0;
        v69 = 0;
        v132 = v63 + v130 - 3;
        v70 = v61;
        v56 = __Na;
        while (2)
        {
          v71 = v69 - v66;
          v72 = v69 & 4;
          if ((v69 & 4) != 0)
            v73 = v69 - v66 - 4;
          else
            v73 = v69 - v66;
          v74 = v73 & ~(v71 >> 63);
          if (v74 > v67)
            goto LABEL_63;
          v75 = v123 + 4 * v69 * v131;
          v76 = (_OWORD *)(v122 + 4 * v69 * v56);
          if (v71 < 0)
          {
            v78 = 0;
            if (v121)
              goto LABEL_54;
          }
          else
          {
            v125 = 16 * (v68 & 1);
            v126 = v122 + 4 * v69 * v56;
            v77 = (char *)&a26 + v125;
            a32 = 0u;
            a33 = 0u;
            a30 = 0u;
            a31 = 0u;
            a28 = 0u;
            a29 = 0u;
            a26 = 0u;
            a27 = 0u;
            if (v67 - v73 >= 8)
              v78 = 8;
            else
              v78 = v67 - v73;
            v124((float32x4_t *)&v128[4 * v73 * v56], (uint64_t)v76, (float32x4_t *)&a26, 8, v78, v56);
            v75 += 4 * v73;
            if (v121)
            {
              v79 = 0;
              v76 = (_OWORD *)v126;
              v80 = v70 + v125 + 4 * v73;
              v56 = __Na;
              v67 = v127;
              do
              {
                if (v72 < v78)
                {
                  v81 = 0;
                  do
                  {
                    *(float *)(v80 + 4 * v81) = *(float *)&v77[4 * v81] + (float)(*(float *)(v80 + 4 * v81) * v44);
                    ++v81;
                  }
                  while (v72 + v81 < v78);
                }
                ++v72;
                ++v79;
                v77 += 36;
                v80 += v54;
              }
              while (v79 != 4);
              v53 = 16 * v131;
              v66 = v130;
              if (v78 + v74 >= v127)
                goto LABEL_63;
LABEL_54:
              v120((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56, v44);
LABEL_62:
              v56 = __Na;
              v66 = v130;
              v67 = v127;
LABEL_63:
              v69 += 4;
              ++v68;
              v70 += v53;
              if (v69 >= v132)
                goto LABEL_66;
              continue;
            }
            v82 = 0;
            v76 = (_OWORD *)v126;
            v83 = v70 + v125 + 4 * v73;
            v56 = __Na;
            v67 = v127;
            do
            {
              if (v72 < v78)
              {
                v84 = 0;
                do
                {
                  *(float *)(v83 + 4 * v84) = *(float *)(v83 + 4 * v84) + *(float *)&v77[4 * v84];
                  ++v84;
                }
                while (v72 + v84 < v78);
              }
              ++v72;
              ++v82;
              v77 += 36;
              v83 += v54;
            }
            while (v82 != 4);
            v53 = 16 * v131;
            v66 = v130;
            if (v78 + v74 >= v127)
              goto LABEL_63;
          }
          break;
        }
        v124((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56);
        goto LABEL_62;
      }
      v69 = 0;
      v56 = __Na;
LABEL_66:
      v85 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v85)
      {
        v86 = v69 - v66;
        v87 = (v69 - v66) & ~((v69 - v66) >> 63);
        if (v67 > v87)
          break;
      }
LABEL_95:
      v61 = v119 + 512;
      v57 = v118;
      v46 = v111;
      if (v118 >= v111)
        goto LABEL_96;
    }
    v88 = v123 + 4 * v69 * v131;
    v89 = (const float *)(v122 + 4 * v69 * v56);
    if (v86 < 0)
    {
      v91 = 0;
      v97 = 0;
      v98 = 0;
      if (v121)
      {
LABEL_86:
        sgebpScale_8M1N((float32x4_t *)&v128[4 * v97 * v56 + 4 * v91], v89, v88, v131, v67 - v97, v85, __Na, v44);
LABEL_94:
        v56 = __Na;
        goto LABEL_95;
      }
    }
    else
    {
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      if (v67 - v87 >= 8)
        v90 = 8;
      else
        v90 = v67 - v87;
      if (v110)
        v91 = (v87 & 4) * v109;
      else
        v91 = 0;
      v92 = v88 + 4 * v87;
      sgebp_8M1N((float32x4_t *)&v128[4 * v86 * v56 + 4 * v91], (const float *)(v122 + 4 * v69 * v56), (uint64_t)&a26, 8, v90, v85, v56);
      if (v121)
      {
        v56 = __Na;
        if (v85 >= 1)
        {
          v93 = 0;
          v94 = v119 + v108 * v69 + 4 * v87;
          v95 = &a26;
          do
          {
            v96 = 0;
            do
            {
              *(float *)(v94 + 4 * v96) = *((float *)v95 + v96) + (float)(*(float *)(v94 + 4 * v96) * v44);
              ++v96;
            }
            while (v93 + v96 < v85);
            ++v93;
            v95 = (__int128 *)((char *)v95 + 36);
            v94 += v54;
          }
          while (v93 != v85);
        }
        v88 = v92 + 4 * v90;
        v97 = v90 + v87;
        v53 = 16 * v131;
        v67 = v127;
        goto LABEL_86;
      }
      v56 = __Na;
      if (v85 >= 1)
      {
        v99 = 0;
        v100 = v119 + v108 * v69 + 4 * v87;
        v101 = &a26;
        do
        {
          v102 = 0;
          do
          {
            *(float *)(v100 + 4 * v102) = *(float *)(v100 + 4 * v102) + *((float *)v101 + v102);
            ++v102;
          }
          while (v99 + v102 < v85);
          ++v99;
          v101 = (__int128 *)((char *)v101 + 36);
          v100 += v54;
        }
        while (v99 != v85);
      }
      v88 = v92 + 4 * v90;
      v98 = v90 + v87;
      v53 = 16 * v131;
      v67 = v127;
    }
    sgebp_8M1N((float32x4_t *)&v128[4 * v98 * v56 + 4 * v91], v89, v88, v131, v67 - v98, v85, __Na);
    goto LABEL_94;
  }
LABEL_97:
  if (v46 >= 1)
    free(v128);
}

uint64_t dsyr2k_r(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t);

  if (a3 >= 0)
    v20 = a3;
  else
    v20 = a3 + 1;
  v21 = v20 >> 1;
  v22 = a3 - (v20 >> 1);
  if ((_DWORD)a2 == 111)
  {
    v23 = a1 == 121;
    if (a1 == 121)
      v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))dsyr2k_Pack_Upper;
    else
      v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))dsyr2k_Pack_Lower;
    v36 = v24;
    if (v23)
      v25 = a5;
    else
      v25 = a5 + 8 * v21;
    if (v23)
      v26 = a7 + 8 * v21;
    else
      v26 = a7;
    if (v23)
      v27 = v21 * a12;
    else
      v27 = v20 >> 1;
    APL_seq_dgemm(111, 112, v22, v22, a4, v25, a6, v26, a8, a11 + 8 * v27, a12);
    v34 = v22;
    v35 = v22;
  }
  else
  {
    v34 = v22 * a8;
    v35 = v22 * a6;
    v28 = a1 == 121;
    if (a1 == 121)
      v29 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))dsyr2k_Pack_Upper;
    else
      v29 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))dsyr2k_Pack_Lower;
    v36 = v29;
    if (v28)
      v30 = a5;
    else
      v30 = a5 + 8 * v21 * a6;
    if (v28)
      v31 = a7 + 8 * v21 * a8;
    else
      v31 = a7;
    if (v28)
      v32 = v21 * a12;
    else
      v32 = v20 >> 1;
    APL_seq_dgemm(112, 111, v22, v22, a4, v30, a6, v31, a8, a11 + 8 * v32, a12);
  }
  v36(a2, v21, a4, a5, a6, a7, a8, a11, a9, a10, a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))v36)(a2, v21, a4, a5 + 8 * v35, a6, a7 + 8 * v34, a8, a11 + 8 * v22 + 8 * v22 * a12, a9, a10, a12);
}

void APL_seq_dsyr2k(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double *a11, uint64_t a12)
{
  BOOL v15;
  _BOOL4 v16;
  double *v20;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  double *v39;

  if (a3)
  {
    v15 = a9 == 0.0 || a4 == 0;
    v16 = v15;
    if (!v16 || a10 != 1.0)
    {
      v20 = a11;
      if (v16)
      {
        dtrScale(a1, a3, a11, a12, a10);
      }
      else
      {
        if (a10 == 0.0)
          dtrScale(a1, a3, a11, a12, a10);
        if (a3 > 45 || a4 >= 46)
        {
          dsyr2k_r(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12);
          dsyr2k_r(a1, a2, a3, a4, a7, a8, a5, a6, a9, 1.0, (uint64_t)a11, a12);
        }
        else
        {
          v26 = malloc_type_malloc(8 * a3 * a3, 0x741A492EuLL);
          if ((_DWORD)a2 == 111)
          {
            v27 = v26;
            APL_seq_dgemm(111, 112, a3, a3, a4, a5, a6, a7, a8, (uint64_t)v26, a3);
          }
          else
          {
            v27 = v26;
            APL_seq_dgemm(112, 111, a3, a3, a4, a5, a6, a7, a8, (uint64_t)v26, a3);
          }
          if (a1 == 121)
          {
            v28 = v27;
            if (a3 >= 1)
            {
              v29 = 0;
              v30 = 8 * a3;
              v31 = 1;
              v32 = (double *)v27;
              v33 = (double *)v27;
              do
              {
                v34 = 0;
                v35 = v33;
                do
                {
                  v20[v34] = v32[v34] + v20[v34] * a10 + *v35;
                  ++v34;
                  v35 = (double *)((char *)v35 + v30);
                }
                while (v31 != v34);
                ++v29;
                ++v31;
                ++v33;
                v32 = (double *)((char *)v32 + v30);
                v20 += a12;
              }
              while (v29 != a3);
            }
          }
          else
          {
            v28 = v27;
            if (a3 >= 1)
            {
              v36 = 0;
              v37 = (double *)v27;
              do
              {
                v38 = 0;
                v39 = v37;
                do
                {
                  v20[v38] = v37[v38] + v20[v38] * a10 + *v39;
                  ++v38;
                  v39 += a3;
                }
                while (v36 + v38 < a3);
                ++v36;
                v37 += a3 + 1;
                v20 += a12 + 1;
              }
              while (v36 != a3);
            }
          }
          free(v28);
        }
      }
    }
  }
}

void _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE4callERS1_f_cold_1()
{
  __assert_rtn("call", "OneShekelFilter.hpp", 104, "_may_call_for_missing_inputs or !Utilities::isnan(input)");
}

void _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE14any_nan_in_memEv_cold_1()
{
  __assert_rtn("range_has_any", "CircularBuffer.hpp", 79, "len > 0");
}

void nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix()
{
  __assert_rtn("Matrix", "Matrix.hpp", 36, "n_rows <= max_dim_size");
}

{
  __assert_rtn("Matrix", "Matrix.hpp", 37, "n_cols <= max_dim_size");
}

void nis::SVD<16u>::svd(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = -a1;
  _os_log_error_impl(&dword_23D69E000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "[SGFilter::svd] %d th input is not valid", (uint8_t *)v1, 8u);
  OUTLINED_FUNCTION_1();
}

void nis::SVD<16u>::svd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_23D69E000, MEMORY[0x24BDACB70], a3, "[SGFilter::svd] SBDSDC did not converge", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_23D69E000, MEMORY[0x24BDACB70], a3, "[SGFilter::svd] Input matrix has a NaN entry", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void nis::matrix_inner_product<float,16u,std::plus<float>,std::multiplies<float>>()
{
  __assert_rtn("matrix_inner_product", "Matrix.hpp", 259, "lhs_tr.n_cols() == rhs_tr.n_cols()");
}

void nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size()
{
  __assert_rtn("set_size", "Matrix.hpp", 70, "n_rows <= max_dim_size");
}

{
  __assert_rtn("set_size", "Matrix.hpp", 71, "n_cols <= max_dim_size");
}

void nis::SVD<27u>::svd(_DWORD *a1)
{
  int v1;
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = -*a1;
  v2[0] = 67109120;
  v2[1] = v1;
  _os_log_error_impl(&dword_23D69E000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "[SGFilter::svd] %d th input is not valid", (uint8_t *)v2, 8u);
  OUTLINED_FUNCTION_1();
}

uint64_t MonoPoseEstimator::MonoPoseEstimator(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    JUMPOUT(0x242637F54);
  return result;
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t __DataStorage.init(capacity:)()
{
  return MEMORY[0x24BDCBBF8]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t URL.relativePath.getter()
{
  return MEMORY[0x24BDCD770]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x24BDCD810]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x24BDCD870]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t URL.deletingPathExtension()()
{
  return MEMORY[0x24BDCD908]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x24BDCDAA0]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

void __swiftcall pow(_:_:)(NSDecimal *__return_ptr retstr, NSDecimal *a2, Swift::Int a3)
{
  MEMORY[0x24BDCDB38](retstr, a2, a3);
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x24BDCDB78]();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDBC8]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x24BDCDC10]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCDCA8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x24BDCDD40]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t NSLog(_:_:)()
{
  return MEMORY[0x24BDCEAC8]();
}

uint64_t type metadata accessor for IndexSet.Index()
{
  return MEMORY[0x24BDCF320]();
}

uint64_t type metadata accessor for IndexSet()
{
  return MEMORY[0x24BDCF428]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5118]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x24BEE5120]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x24BEE5130]();
}

uint64_t Regex.init(_regexString:version:)()
{
  return MEMORY[0x24BEE73C0]();
}

uint64_t Regex.firstMatch(in:)()
{
  return MEMORY[0x24BEE73C8]();
}

uint64_t Regex.Match.subscript.getter()
{
  return MEMORY[0x24BEE7408]();
}

uint64_t static Google_Protobuf_Any.== infix(_:_:)()
{
  return MEMORY[0x24BE5BDC0]();
}

uint64_t Google_Protobuf_Any.init(message:partial:typePrefix:)()
{
  return MEMORY[0x24BE5BDD8]();
}

uint64_t type metadata accessor for Google_Protobuf_Any()
{
  return MEMORY[0x24BE5BDE8]();
}

uint64_t type metadata accessor for ProtobufBytes()
{
  return MEMORY[0x24BE5BE50]();
}

uint64_t type metadata accessor for ProtobufFloat()
{
  return MEMORY[0x24BE5BE60]();
}

uint64_t type metadata accessor for ProtobufInt32()
{
  return MEMORY[0x24BE5BE78]();
}

uint64_t type metadata accessor for ProtobufString()
{
  return MEMORY[0x24BE5BEC0]();
}

uint64_t type metadata accessor for ProtobufUInt64()
{
  return MEMORY[0x24BE5BEF0]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t JSONEncodingOptions.preserveProtoFieldNames.setter()
{
  return MEMORY[0x24BE5BFA0]();
}

uint64_t JSONEncodingOptions.init()()
{
  return MEMORY[0x24BE5BFA8]();
}

uint64_t type metadata accessor for JSONEncodingOptions()
{
  return MEMORY[0x24BE5BFB0]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t defaultAnyTypeURLPrefix.getter()
{
  return MEMORY[0x24BE5C000]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t _MessageImplementationBase.isEqualTo(message:)()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t Enum.hash(into:)()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)()
{
  return MEMORY[0x24BE5C020]();
}

{
  return MEMORY[0x24BE5C028]();
}

{
  return MEMORY[0x24BE5C030]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return MEMORY[0x24BE5C048]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedBoolField(value:)()
{
  return MEMORY[0x24BE5C050]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)()
{
  return MEMORY[0x24BE5C058]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return MEMORY[0x24BE5C060]();
}

{
  return MEMORY[0x24BE5C068]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x24BE5C070]();
}

{
  return MEMORY[0x24BE5C078]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedBytesField(value:)()
{
  return MEMORY[0x24BE5C080]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedFloatField(value:)()
{
  return MEMORY[0x24BE5C088]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)()
{
  return MEMORY[0x24BE5C090]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x24BE5C0A0]();
}

{
  return MEMORY[0x24BE5C0A8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularFloatField(value:)()
{
  return MEMORY[0x24BE5C0B0]();
}

{
  return MEMORY[0x24BE5C0B8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt32Field(value:)()
{
  return MEMORY[0x24BE5C0C0]();
}

{
  return MEMORY[0x24BE5C0C8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return MEMORY[0x24BE5C0D0]();
}

{
  return MEMORY[0x24BE5C0D8]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedStringField(value:)()
{
  return MEMORY[0x24BE5C0E8]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)()
{
  return MEMORY[0x24BE5C0F8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return MEMORY[0x24BE5C100]();
}

{
  return MEMORY[0x24BE5C108]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x24BE5C118]();
}

{
  return MEMORY[0x24BE5C120]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return MEMORY[0x24BE5C128]();
}

{
  return MEMORY[0x24BE5C130]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return MEMORY[0x24BE5C140]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C148]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t Message.jsonString(options:)()
{
  return MEMORY[0x24BE5C188]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)()
{
  return MEMORY[0x24BE5C208]();
}

{
  return MEMORY[0x24BE5C210]();
}

{
  return MEMORY[0x24BE5C218]();
}

uint64_t dispatch thunk of Visitor.visitPackedBoolField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C228]();
}

uint64_t dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C230]();
}

uint64_t dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C238]();
}

uint64_t dispatch thunk of Visitor.visitPackedInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C240]();
}

uint64_t dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C258]();
}

uint64_t dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C260]();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C270]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C280]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2A0]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2A8]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2B0]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2C0]();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2D8]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2E8]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2F0]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2F8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C300]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t noErr.getter()
{
  return MEMORY[0x24BEE5370]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t static DispatchTime.distantFuture.getter()
{
  return MEMORY[0x24BEE5548]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE0298](a1);
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t Dictionary.init<A>(uniqueKeysWithValues:)()
{
  return MEMORY[0x24BEE02B8]();
}

uint64_t Dictionary.mapValues<A>(_:)()
{
  return MEMORY[0x24BEE0450]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t BidirectionalCollection<>.contains<A>(_:)()
{
  return MEMORY[0x24BEE7600]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t String.init(contentsOfFile:encoding:)()
{
  return MEMORY[0x24BDCF890]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.removeSubrange(_:)()
{
  return MEMORY[0x24BEE0A58]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0B88]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BB8](a1._countAndFlagsBits, a1._object);
}

{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x24BEE0BE8]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x24BEE0C00]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CD0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x24BEE0CD8]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t dispatch thunk of Sequence._copyToContiguousArray()()
{
  return MEMORY[0x24BEE0E00]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x24BEE0E50]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t Sequence.filter(_:)()
{
  return MEMORY[0x24BEE0EA0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return MEMORY[0x24BEE0FE8]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x24BEE1058]();
}

uint64_t RawRepresentable<>.hashValue.getter()
{
  return MEMORY[0x24BEE1068]();
}

uint64_t RawRepresentable<>._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE1070]();
}

uint64_t RawRepresentable<>.hash(into:)()
{
  return MEMORY[0x24BEE1078]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x24BEE10D8]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t Array.capacity.getter()
{
  return MEMORY[0x24BEE1210]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t Bool.init(truncating:)()
{
  return MEMORY[0x24BDCFC00]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC08]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC58]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t Float.init(truncating:)()
{
  return MEMORY[0x24BDCFC78]();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC80]();
}

uint64_t Float.description.getter()
{
  return MEMORY[0x24BEE1488]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x24BEE14C8]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t Int.init(truncating:)()
{
  return MEMORY[0x24BDCFD18]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t Collection<>.ranges<A>(of:)()
{
  return MEMORY[0x24BEE7620]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BDCFDF8]();
}

uint64_t NSFileHandle.write<A>(contentsOf:)()
{
  return MEMORY[0x24BDCFE60]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

void __swiftcall simd_float4x4.init(_:)(simd_float4x4 *__return_ptr retstr, simd_quatf *a2)
{
  MEMORY[0x24BEE79B8](retstr, a2);
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x24BEE5918]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
  MEMORY[0x24BEE5920]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x24BEE5928]();
}

uint64_t static CMTime.> infix(_:_:)()
{
  return MEMORY[0x24BEE52D8]();
}

uint64_t static CMTime.< infix(_:_:)()
{
  return MEMORY[0x24BEE52E0]();
}

uint64_t static CMTime.- infix(_:_:)()
{
  return MEMORY[0x24BEE52F0]();
}

uint64_t static CMTime.== infix(_:_:)()
{
  return MEMORY[0x24BEE52F8]();
}

uint64_t static CMTime.!= infix(_:_:)()
{
  return MEMORY[0x24BEE5308]();
}

CMTime __swiftcall CMTime.init(value:timescale:)(Swift::Int64 value, Swift::Int32 timescale)
{
  CMTimeValue v2;
  uint64_t v3;
  CMTimeEpoch v4;
  CMTime result;

  v2 = MEMORY[0x24BEE5310](value, *(_QWORD *)&timescale);
  result.epoch = v4;
  result.timescale = v3;
  result.flags = HIDWORD(v3);
  result.value = v2;
  return result;
}

uint64_t CMTime.isValid.getter()
{
  return MEMORY[0x24BEE5318]();
}

CMTime __swiftcall CMTime.init(seconds:preferredTimescale:)(Swift::Double seconds, Swift::Int32 preferredTimescale)
{
  CMTimeValue v2;
  uint64_t v3;
  CMTimeEpoch v4;
  CMTime result;

  v2 = MEMORY[0x24BEE5320](*(_QWORD *)&preferredTimescale, seconds);
  result.epoch = v4;
  result.timescale = v3;
  result.flags = HIDWORD(v3);
  result.value = v2;
  return result;
}

uint64_t CMTime.seconds.getter()
{
  return MEMORY[0x24BEE5328]();
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t NSString.init(stringLiteral:)()
{
  return MEMORY[0x24BDD0248]();
}

void __swiftcall NSDecimal.init(integerLiteral:)(NSDecimal *__return_ptr retstr, Swift::Int integerLiteral)
{
  MEMORY[0x24BDD02E0](retstr, integerLiteral);
}

void __swiftcall NSDecimal._bridgeToObjectiveC()(NSDecimalNumber *__return_ptr retstr)
{
  MEMORY[0x24BDD02E8](retstr);
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t UInt.init(truncating:)()
{
  return MEMORY[0x24BDD0490]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t StringProtocol.write(to:atomically:encoding:)()
{
  return MEMORY[0x24BDD0608]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.insert(_:)()
{
  return MEMORY[0x24BEE2238]();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return MEMORY[0x24BEE22B8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x24BEE22D8]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t AnyIterator.init(_:)()
{
  return MEMORY[0x24BEE2410]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t dispatch thunk of static CaseIterable.allCases.getter()
{
  return MEMORY[0x24BEE2548]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2648](a1);
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2950](a1);
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x24BEE2B80]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

Swift::Void __swiftcall _NativeDictionary.removeAll(isUnique:)(Swift::Bool isUnique)
{
  MEMORY[0x24BEE2E88](isUnique);
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x24BEE2EA8]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x24BEE2F18]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x24BEE3070]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x24BEE30D0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE3368]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE34B8]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t _forceBridgeFromObjectiveC<A>(_:_:)()
{
  return MEMORY[0x24BEE39B0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t == infix<A>(_:_:)()
{
  return MEMORY[0x24BEE3BB8]();
}

uint64_t _copySequenceToContiguousArray<A>(_:)()
{
  return MEMORY[0x24BEE3D38]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t SIMD.description.getter()
{
  return MEMORY[0x24BEE3E90]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t Int32.init(truncating:)()
{
  return MEMORY[0x24BDD0728]();
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD0758]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x24BEE42C8]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x24BEE4310](*(_QWORD *)&a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x24BEE4318](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x24BEE4330]();
}

uint64_t Mirror.init(reflecting:)()
{
  return MEMORY[0x24BEE4358]();
}

uint64_t Mirror.children.getter()
{
  return MEMORY[0x24BEE43D0]();
}

uint64_t type metadata accessor for Mirror()
{
  return MEMORY[0x24BEE43D8]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD07D0]();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD0810]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x24BE1A1B0]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

uint64_t AnalyticsSendExplodingEventLazy()
{
  return MEMORY[0x24BE1A1D0]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x24BDE5410]();
  return result;
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE180](data);
}

CGImageRef CGImageCreateWithJPEGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x24BDBE608](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x24BDBE618](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEFD0]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x24BDC00C0](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x24BDC00D8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

OSStatus CMBlockBufferReplaceDataBytes(const void *sourceBytes, CMBlockBufferRef destinationBuffer, size_t offsetIntoDestination, size_t dataLength)
{
  return MEMORY[0x24BDC00F8](sourceBytes, destinationBuffer, offsetIntoDestination, dataLength);
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x24BDC0270](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

CMBlockBufferRef CMSampleBufferGetDataBuffer(CMSampleBufferRef sbuf)
{
  return (CMBlockBufferRef)MEMORY[0x24BDC02B8](sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x24BDC0310](retstr, sbuf);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x24BDC0420](retstr, lhs, rhs);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x24BDC0490](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x24BDC0498](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x24BDC04C0](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

OSStatus CMVideoFormatDescriptionCreate(CFAllocatorRef allocator, CMVideoCodecType codecType, int32_t width, int32_t height, CFDictionaryRef extensions, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x24BDC0638](allocator, *(_QWORD *)&codecType, *(_QWORD *)&width, *(_QWORD *)&height, extensions, formatDescriptionOut);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5250](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5258](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52A0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x24BDC5318](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5320](allocator, pixelBufferPool, pixelBufferOut);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C68](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C80](buffer);
}

void IOSurfaceSetValues(IOSurfaceRef buffer, CFDictionaryRef keysAndValues)
{
  MEMORY[0x24BDD8DC0](buffer, keysAndValues);
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x24BED84A0]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E0]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

OSStatus VTCompressionSessionCompleteFrames(VTCompressionSessionRef session, CMTime *completeUntilPresentationTimeStamp)
{
  return MEMORY[0x24BDF8FD0](session, completeUntilPresentationTimeStamp);
}

OSStatus VTCompressionSessionCreate(CFAllocatorRef allocator, int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFDictionaryRef sourceImageBufferAttributes, CFAllocatorRef compressedDataAllocator, VTCompressionOutputCallback outputCallback, void *outputCallbackRefCon, VTCompressionSessionRef *compressionSessionOut)
{
  return MEMORY[0x24BDF8FD8](allocator, *(_QWORD *)&width, *(_QWORD *)&height, *(_QWORD *)&codecType, encoderSpecification, sourceImageBufferAttributes, compressedDataAllocator, outputCallback);
}

OSStatus VTCompressionSessionEncodeFrameWithOutputHandler(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  return MEMORY[0x24BDF8FF0](session, imageBuffer, presentationTimeStamp, duration, frameProperties, infoFlagsOut, outputHandler);
}

void VTCompressionSessionInvalidate(VTCompressionSessionRef session)
{
  MEMORY[0x24BDF9008](session);
}

OSStatus VTDecompressionSessionCreate(CFAllocatorRef allocator, CMVideoFormatDescriptionRef videoFormatDescription, CFDictionaryRef videoDecoderSpecification, CFDictionaryRef destinationImageBufferAttributes, const VTDecompressionOutputCallbackRecord *outputCallback, VTDecompressionSessionRef *decompressionSessionOut)
{
  return MEMORY[0x24BDF9060](allocator, videoFormatDescription, videoDecoderSpecification, destinationImageBufferAttributes, outputCallback, decompressionSessionOut);
}

OSStatus VTDecompressionSessionDecodeFrameWithOutputHandler(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, VTDecodeInfoFlags *infoFlagsOut, VTDecompressionOutputHandler outputHandler)
{
  return MEMORY[0x24BDF9078](session, sampleBuffer, *(_QWORD *)&decodeFlags, infoFlagsOut, outputHandler);
}

OSStatus VTDecompressionSessionFinishDelayedFrames(VTDecompressionSessionRef session)
{
  return MEMORY[0x24BDF9080](session);
}

void VTDecompressionSessionInvalidate(VTDecompressionSessionRef session)
{
  MEMORY[0x24BDF9088](session);
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x24BDF9168](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x24BDF9170](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x24BDF9178](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x24BDF91A8](session, propertyKey, propertyValue);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void operator delete(void *__p)
{
  off_250E2E4A0(__p);
}

uint64_t operator delete()
{
  return off_250E2E4A8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_250E2E4B0(__sz);
}

uint64_t operator new()
{
  return off_250E2E4B8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x24BDAC820]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x24BDAC828]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _get_cpu_capabilities()
{
  return MEMORY[0x24BDACAD0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

simd_float4 _simd_atan_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x24BDACCA8]((__n128)x);
  return result;
}

simd_float4 _simd_cos_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x24BDACCD8]((__n128)x);
  return result;
}

simd_float4 _simd_sin_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x24BDACE38]((__n128)x);
  return result;
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x24BDAD230](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void cblas_dcopy(const int __N, const double *__X, const int __incX, double *__Y, const int __incY)
{
  MEMORY[0x24BDB2AA8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
}

double cblas_ddot(const int __N, const double *__X, const int __incX, const double *__Y, const int __incY)
{
  double result;

  MEMORY[0x24BDB2AB8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
  return result;
}

void cblas_dgemv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const double __alpha, const double *__A, const int __lda, const double *__X, const int __incX, const double __beta, double *__Y, const int __incY)
{
  MEMORY[0x24BDB2AD8](*(_QWORD *)&__Order, *(_QWORD *)&__TransA, *(_QWORD *)&__M, *(_QWORD *)&__N, __A, *(_QWORD *)&__lda, __X, *(_QWORD *)&__incX, __alpha, __beta);
}

void cblas_dscal(const int __N, const double __alpha, double *__X, const int __incX)
{
  MEMORY[0x24BDB2B08](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __alpha);
}

void cblas_dtrmv(const CBLAS_ORDER __Order, const CBLAS_UPLO __Uplo, const CBLAS_TRANSPOSE __TransA, const CBLAS_DIAG __Diag, const int __N, const double *__A, const int __lda, double *__X, const int __incX)
{
  MEMORY[0x24BDB2B40](*(_QWORD *)&__Order, *(_QWORD *)&__Uplo, *(_QWORD *)&__TransA, *(_QWORD *)&__Diag, *(_QWORD *)&__N, __A, *(_QWORD *)&__lda, __X);
}

int cblas_errprn(int __ierr, int __info, char *__form, ...)
{
  return MEMORY[0x24BDB2B68](*(_QWORD *)&__ierr, *(_QWORD *)&__info, __form);
}

void cblas_scopy(const int __N, const float *__X, const int __incX, float *__Y, const int __incY)
{
  MEMORY[0x24BDB2BA8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
}

float cblas_sdot(const int __N, const float *__X, const int __incX, const float *__Y, const int __incY)
{
  float result;

  MEMORY[0x24BDB2BB8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
  return result;
}

void cblas_sger(const CBLAS_ORDER __Order, const int __M, const int __N, const float __alpha, const float *__X, const int __incX, const float *__Y, const int __incY, float *__A, const int __lda)
{
  MEMORY[0x24BDB2BF8](*(_QWORD *)&__Order, *(_QWORD *)&__M, *(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY, __A, __alpha);
}

void cblas_sscal(const int __N, const float __alpha, float *__X, const int __incX)
{
  MEMORY[0x24BDB2C18](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __alpha);
}

void cblas_xerbla(int __p, char *__rout, char *__form, ...)
{
  MEMORY[0x24BDB2C58](*(_QWORD *)&__p, __rout, __form);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x24BEDCE78](cls, outCount);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x24BDADBE0](__x);
  return result;
}

int daxpy_(int *n, double *da, double *dx, int *incx, double *dy, int *incy)
{
  return MEMORY[0x24BDB2C60](n, da, dx, incx, dy, incy);
}

int dcopy_(int *n, double *dx, int *incx, double *dy, int *incy)
{
  return MEMORY[0x24BDB2C68](n, dx, incx, dy, incy);
}

double ddot_(int *n, double *dx, int *incx, double *dy, int *incy)
{
  double result;

  MEMORY[0x24BDB2C70](n, dx, incx, dy, incy);
  return result;
}

int dgelqf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2CC8](__m, __n, __a, __lda, __tau, __work, __lwork, __info);
}

int dgeqr2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__work, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2CE8](__m, __n, __a, __lda, __tau, __work, __info);
}

uint64_t dgeqrf_NEWLAPACK()
{
  return MEMORY[0x24BDB2CF0]();
}

int dger_(int *m, int *n, double *alpha, double *x, int *incx, double *y, int *incy, double *a, int *lda)
{
  return MEMORY[0x24BDB2CF8](m, n, alpha, x, incx, y, incy, a);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

uint64_t dispatch_pthread_root_queue_create()
{
  return MEMORY[0x24BDADEA8]();
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

int dlabad_(__CLPK_doublereal *__small, __CLPK_doublereal *__large)
{
  return MEMORY[0x24BDB2D60](__small, __large);
}

__CLPK_doublereal dlamch_(char *__cmach)
{
  __CLPK_doublereal result;

  MEMORY[0x24BDB2D68](__cmach);
  return result;
}

__CLPK_doublereal dlange_(char *__norm, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__work)
{
  __CLPK_doublereal result;

  MEMORY[0x24BDB2D70](__norm, __m, __n, __a, __lda, __work);
  return result;
}

__CLPK_doublereal dlansy_(char *__norm, char *__uplo, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__work)
{
  __CLPK_doublereal result;

  MEMORY[0x24BDB2D78](__norm, __uplo, __n, __a, __lda, __work);
  return result;
}

int dlarfg_(__CLPK_integer *__n, __CLPK_doublereal *__alpha, __CLPK_doublereal *__x, __CLPK_integer *__incx, __CLPK_doublereal *__tau)
{
  return MEMORY[0x24BDB2D80](__n, __alpha, __x, __incx, __tau);
}

int dlascl_(char *__type__, __CLPK_integer *__kl, __CLPK_integer *__ku, __CLPK_doublereal *__cfrom, __CLPK_doublereal *__cto, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2D88](__type__, __kl, __ku, __cfrom, __cto, __m, __n, __a);
}

int dlaset_(char *__uplo, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__alpha, __CLPK_doublereal *__beta, __CLPK_doublereal *__a, __CLPK_integer *__lda)
{
  return MEMORY[0x24BDB2D90](__uplo, __m, __n, __alpha, __beta, __a, __lda);
}

int dlauu2_(char *__uplo, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2D98](__uplo, __n, __a, __lda, __info);
}

int dorm2r_(char *__side, char *__trans, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__c__, __CLPK_integer *__ldc, __CLPK_doublereal *__work, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2DB0](__side, __trans, __m, __n, __k, __a, __lda, __tau);
}

int dormlq_(char *__side, char *__trans, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__c__, __CLPK_integer *__ldc, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2DB8](__side, __trans, __m, __n, __k, __a, __lda, __tau);
}

uint64_t dposv_NEWLAPACK()
{
  return MEMORY[0x24BDB2DC8]();
}

uint64_t dpotrf_NEWLAPACK()
{
  return MEMORY[0x24BDB2DD0]();
}

uint64_t dpotri_NEWLAPACK()
{
  return MEMORY[0x24BDB2DE0]();
}

uint64_t dpotrs_NEWLAPACK()
{
  return MEMORY[0x24BDB2DE8]();
}

int dscal_(int *n, double *da, double *dx, int *incx)
{
  return MEMORY[0x24BDB2E08](n, da, dx, incx);
}

int dsteqr_(char *__compz, __CLPK_integer *__n, __CLPK_doublereal *__d__, __CLPK_doublereal *__e, __CLPK_doublereal *__z__, __CLPK_integer *__ldz, __CLPK_doublereal *__work, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2E10](__compz, __n, __d__, __e, __z__, __ldz, __work, __info);
}

int dsterf_(__CLPK_integer *__n, __CLPK_doublereal *__d__, __CLPK_doublereal *__e, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2E18](__n, __d__, __e, __info);
}

uint64_t dsyev_NEWLAPACK()
{
  return MEMORY[0x24BDB2E20]();
}

int dsymv_(char *uplo, int *n, double *alpha, double *a, int *lda, double *x, int *incx, double *beta, double *y, int *incy)
{
  return MEMORY[0x24BDB2E30](uplo, n, alpha, a, lda, x, incx, beta);
}

int dsytd2_(char *__uplo, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__d__, __CLPK_doublereal *__e, __CLPK_doublereal *__tau, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2E48](__uplo, __n, __a, __lda, __d__, __e, __tau, __info);
}

int dtrmv_(char *uplo, char *trans, char *diag, int *n, double *a, int *lda, double *x, int *incx)
{
  return MEMORY[0x24BDB2E70](uplo, trans, diag, n, a, lda, x, incx);
}

int dtrti2_(char *__uplo, char *__diag, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2E78](__uplo, __diag, __n, __a, __lda, __info);
}

uint64_t dtrtri_NEWLAPACK()
{
  return MEMORY[0x24BDB2E80]();
}

uint64_t e5rt_buffer_object_create_from_iosurface()
{
  return MEMORY[0x24BE2F6F8]();
}

uint64_t e5rt_buffer_object_get_data_ptr()
{
  return MEMORY[0x24BE2F700]();
}

uint64_t e5rt_buffer_object_release()
{
  return MEMORY[0x24BE2F720]();
}

uint64_t e5rt_e5_compiler_compile()
{
  return MEMORY[0x24BE2F738]();
}

uint64_t e5rt_e5_compiler_create()
{
  return MEMORY[0x24BE2F758]();
}

uint64_t e5rt_e5_compiler_options_create()
{
  return MEMORY[0x24BE2F770]();
}

uint64_t e5rt_e5_compiler_options_release()
{
  return MEMORY[0x24BE2F778]();
}

uint64_t e5rt_e5_compiler_release()
{
  return MEMORY[0x24BE2F790]();
}

uint64_t e5rt_error_code_get_string()
{
  return MEMORY[0x24BE2F798]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x24BE2F7A0]();
}

uint64_t e5rt_execution_stream_encode_operation()
{
  return MEMORY[0x24BE2F7B0]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x24BE2F7C0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x24BE2F7D0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options()
{
  return MEMORY[0x24BE2F7E0]();
}

uint64_t e5rt_execution_stream_operation_release()
{
  return MEMORY[0x24BE2F830]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x24BE2F840]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x24BE2F850]();
}

uint64_t e5rt_execution_stream_release()
{
  return MEMORY[0x24BE2F870]();
}

uint64_t e5rt_execution_stream_reset()
{
  return MEMORY[0x24BE2F888]();
}

uint64_t e5rt_io_port_bind_buffer_object()
{
  return MEMORY[0x24BE2F8A8]();
}

uint64_t e5rt_io_port_release()
{
  return MEMORY[0x24BE2F8E8]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x24BE2F908]();
}

uint64_t e5rt_precompiled_compute_op_create_options_create_with_program_function()
{
  return MEMORY[0x24BE2F910]();
}

uint64_t e5rt_precompiled_compute_op_create_options_release()
{
  return MEMORY[0x24BE2F918]();
}

uint64_t e5rt_program_function_release()
{
  return MEMORY[0x24BE2F948]();
}

uint64_t e5rt_program_library_create()
{
  return MEMORY[0x24BE2F958]();
}

uint64_t e5rt_program_library_release()
{
  return MEMORY[0x24BE2F998]();
}

uint64_t e5rt_program_library_retain_program_function()
{
  return MEMORY[0x24BE2F9A0]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x24BE2FA20]();
}

uint64_t e5rt_tensor_desc_create()
{
  return MEMORY[0x24BE2FA30]();
}

uint64_t e5rt_tensor_desc_dtype_create()
{
  return MEMORY[0x24BE2FA38]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype()
{
  return MEMORY[0x24BE2FA40]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_size()
{
  return MEMORY[0x24BE2FA50]();
}

uint64_t e5rt_tensor_desc_dtype_get_num_components()
{
  return MEMORY[0x24BE2FA60]();
}

uint64_t e5rt_tensor_desc_dtype_release()
{
  return MEMORY[0x24BE2FA68]();
}

uint64_t e5rt_tensor_desc_get_dimension_stride()
{
  return MEMORY[0x24BE2FA70]();
}

uint64_t e5rt_tensor_desc_get_rank()
{
  return MEMORY[0x24BE2FA78]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x24BE2FA88]();
}

uint64_t e5rt_tensor_desc_get_size()
{
  return MEMORY[0x24BE2FA90]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x24BE2FA98]();
}

uint64_t e5rt_tensor_desc_release()
{
  return MEMORY[0x24BE2FAA8]();
}

uint64_t e5rt_tensor_desc_retain_dtype()
{
  return MEMORY[0x24BE2FAB8]();
}

uint64_t e5rt_tensor_utils_cast_from_fp16_to_fp32()
{
  return MEMORY[0x24BE2FAC0]();
}

uint64_t e5rt_tensor_utils_dequantize_from_s8_to_fp32()
{
  return MEMORY[0x24BE2FAD0]();
}

uint64_t e5rt_tensor_utils_dequantize_from_u8_to_fp32()
{
  return MEMORY[0x24BE2FAD8]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x24BE2FB00]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x24BE2FB18]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x24BE2FB38]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x24BE2FB88]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x24BE2FBA0]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x24BE2FC10]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x24BE2FC18]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x24BE2FC70]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x24BE2FC80]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x24BE2FC90]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x24BE2FCA0]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x24BE2FCB0]();
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x24BDAE280](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

__CLPK_integer iladlc_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda)
{
  return MEMORY[0x24BDB2E90](__m, __n, __a, __lda);
}

__CLPK_integer iladlr_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda)
{
  return MEMORY[0x24BDB2E98](__m, __n, __a, __lda);
}

__CLPK_integer ilaenv_(__CLPK_integer *__ispec, char *__name__, char *__opts, __CLPK_integer *__n1, __CLPK_integer *__n2, __CLPK_integer *__n3, __CLPK_integer *__n4)
{
  return MEMORY[0x24BDB2EA0](__ispec, __name__, __opts, __n1, __n2, __n3, __n4);
}

__CLPK_integer ilaslc_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda)
{
  return MEMORY[0x24BDB2EA8](__m, __n, __a, __lda);
}

__CLPK_integer ilaslr_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda)
{
  return MEMORY[0x24BDB2EB0](__m, __n, __a, __lda);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

uint64_t lsame_()
{
  return MEMORY[0x24BDB2EE8]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x24BEDCFD8](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_end_catch(void)
{
  MEMORY[0x24BEDD050]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x24BEDD078](exception);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x24BEDD460](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x24BDAF4E0]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x24BEDD4B8](property);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF778](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x24BDAF780](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF790](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x24BDAF7A0](a1, *(_QWORD *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x24BDAF7B0](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x24BDAF7B8](a1, *(_QWORD *)&a2);
}

uint64_t pthread_qos_max_parallelism()
{
  return MEMORY[0x24BDAF928]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x24BDAF998](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x24BDAFA10]();
}

int scopy_(int *n, float *sx, int *incx, float *sy, int *incy)
{
  return MEMORY[0x24BDB2EF0](n, sx, incx, sy, incy);
}

double sdot_(int *n, float *sx, int *incx, float *sy, int *incy)
{
  double result;

  MEMORY[0x24BDB2EF8](n, sx, incx, sy, incy);
  return result;
}

int sgelqf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__tau, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2F38](__m, __n, __a, __lda, __tau, __work, __lwork, __info);
}

uint64_t sgeqrf_NEWLAPACK()
{
  return MEMORY[0x24BDB2F58]();
}

int sger_(int *m, int *n, float *alpha, float *x, int *incx, float *y, int *incy, float *a, int *lda)
{
  return MEMORY[0x24BDB2F68](m, n, alpha, x, incx, y, incy, a);
}

uint64_t sgesdd_NEWLAPACK()
{
  return MEMORY[0x24BDB2F78]();
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

int slabad_(__CLPK_real *__small, __CLPK_real *__large)
{
  return MEMORY[0x24BDB2FD8](__small, __large);
}

__CLPK_doublereal slamch_(char *__cmach)
{
  __CLPK_doublereal result;

  MEMORY[0x24BDB2FE0](__cmach);
  return result;
}

__CLPK_doublereal slange_(char *__norm, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__work)
{
  __CLPK_doublereal result;

  MEMORY[0x24BDB2FE8](__norm, __m, __n, __a, __lda, __work);
  return result;
}

int slarfg_(__CLPK_integer *__n, __CLPK_real *__alpha, __CLPK_real *__x, __CLPK_integer *__incx, __CLPK_real *__tau)
{
  return MEMORY[0x24BDB2FF0](__n, __alpha, __x, __incx, __tau);
}

int slascl_(char *__type__, __CLPK_integer *__kl, __CLPK_integer *__ku, __CLPK_real *__cfrom, __CLPK_real *__cto, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2FF8](__type__, __kl, __ku, __cfrom, __cto, __m, __n, __a);
}

int slaset_(char *__uplo, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__alpha, __CLPK_real *__beta, __CLPK_real *__a, __CLPK_integer *__lda)
{
  return MEMORY[0x24BDB3000](__uplo, __m, __n, __alpha, __beta, __a, __lda);
}

int sorm2r_(char *__side, char *__trans, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__tau, __CLPK_real *__c__, __CLPK_integer *__ldc, __CLPK_real *__work, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB3010](__side, __trans, __m, __n, __k, __a, __lda, __tau);
}

int sormlq_(char *__side, char *__trans, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__tau, __CLPK_real *__c__, __CLPK_integer *__ldc, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB3018](__side, __trans, __m, __n, __k, __a, __lda, __tau);
}

uint64_t sposv_NEWLAPACK()
{
  return MEMORY[0x24BDB3098]();
}

uint64_t spotrf_NEWLAPACK()
{
  return MEMORY[0x24BDB30A0]();
}

uint64_t spotrs_NEWLAPACK()
{
  return MEMORY[0x24BDB30A8]();
}

int sscal_(int *n, float *sa, float *sx, int *incx)
{
  return MEMORY[0x24BDB30B8](n, sa, sx, incx);
}

int strmv_(char *uplo, char *trans, char *diag, int *n, float *a, int *lda, float *x, int *incx)
{
  return MEMORY[0x24BDB30F8](uplo, trans, diag, n, a, lda, x, incx);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x24BEE4E50]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x24BEE4E88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

float tanf(float a1)
{
  float result;

  MEMORY[0x24BDB0140](a1);
  return result;
}

void vDSP_mmov(const float *__A, float *__C, vDSP_Length __M, vDSP_Length __N, vDSP_Length __TA, vDSP_Length __TC)
{
  MEMORY[0x24BDB3280](__A, __C, __M, __N, __TA, __TC);
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB3288](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_normalize(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, float *__Mean, float *__StandardDeviation, vDSP_Length __N)
{
  MEMORY[0x24BDB32B0](__A, __IA, __C, __IC, __Mean, __StandardDeviation, __N);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3308](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3368](__A, __C, __IC, __N);
}

void vDSP_vmin(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3418](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3430](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3498](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34F0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3528](__A, __IA, __C, __IC, __N);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB37F8](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageHorizontalReflect_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3900](src, dest, *(_QWORD *)&flags);
}

void vvsqrtf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B90](a1, a2, a3);
}

uint64_t xerbla_()
{
  return MEMORY[0x24BDB3BA8]();
}

